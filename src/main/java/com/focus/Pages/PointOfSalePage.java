package com.focus.Pages;

import java.awt.RenderingHints.Key;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ddf.EscherColorRef.SysIndexProcedure;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;

public class PointOfSalePage extends BaseEngine
{

	 @FindBy(xpath="//*[@id='0']")
	 private static WebElement generalInSettingwizard;
	
	 @FindBy(xpath="//*[@id='1']")
	 private static WebElement vatInSettingwizard;
	
	 @FindBy(xpath="//ul[@id='SettingWizardUL']//a[@id='2']")
	 private static WebElement posInSettingwizard;
	 
	 @FindBy(xpath="//label[contains(text(),'Never')]")
	 private static WebElement posNeverRadio;
	 
	 @FindBy(xpath="//label[contains(text(),'Activate Reatil Sales')]")
	 private static WebElement posActivateRetailSales;
	 
	 @FindBy(xpath="//label[contains(text(),'Activate POS Restaurant')]")
	 private static WebElement posActivatePosRestaurant;
	 
	 @FindBy(xpath="//span[@class='icon-update icon-font6']")
	 private static WebElement settingsWizardUpdateBtn;

	 @FindBy(xpath="//*[@id='myNavbarVATAuditFile']/ul/li/div[2]/div[1]/span")
	 private static WebElement settingsWizardCloseBtn;
		 
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[3]/a")
	 private static WebElement inventoryInSettingwizard;
	 
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[4]/a")
	 private static WebElement financialInSettingwizard;

	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[5]/a")
	 private static WebElement tdsInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[6]/a")
	 private static WebElement wmsInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[7]/a")
	 private static WebElement gstInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[8]/a")
	 private static WebElement mrpOneInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[9]/a")
	 private static WebElement mrpTwoInSettingwizard;
	

	 @FindBy(xpath="//*[@id='SettingWizardUL']/li")
	 private static List<WebElement> settingWizardULList;
	 
	
	 
	 @FindBy(xpath="//*[@id='105']/span")
	 private static WebElement  settingsSettingsWizard;
	 
	 
	 
	 //Dash board Page
	 @FindBy(xpath="//*[@id='dashName']")
	 private static WebElement labelDashboard ;
	 
	 @FindBy(xpath="//*[@id='Select_dash']")
	 private static WebElement selectDashboard ;
	 
	 @FindBy(xpath="//*[@id='Dashboard_AddDash']")
	 private static WebElement newAddDashBoard;
	 
	 @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
	 private static WebElement dashboardCustomizationSettings;
	 
	 //Logout and Login Screen
	 
	 @FindBy(xpath="//*[@id='txtUsername']")
	 private static WebElement username;
	 
	 @FindBy(id="txtPassword")
	 private static WebElement password;
	 
	 @FindBy(id="btnSignin")
	 private static WebElement signIn;
	 
	 @FindBy(id="ddlCompany")
	 private static WebElement companyDropDownList;
	 
	 @FindBy(xpath="//span[@class='hidden-xs']")
	 private static WebElement userNameDisplay;
	 
	 /*@FindBy(xpath="//*[@id='mainHeader_MainLayout']/nav/div/ul/li[7]/a/span")
		private static WebElement userNameDisplay;*/
	 
	 @FindBy(xpath="//*[@id='companyLogo']")
	 private static WebElement companyLogo;
	 
	 @FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
	 private static WebElement companyName;
	 
	 @FindBy(xpath="//*[@id='userprofile']/li/span[2]")
	 private static WebElement logoutOption;	 
	 
	 @FindBy(xpath="//th[@id='PriceBookWebGrid_control_heading_1']//div[contains(text(),'Item')]")
	 private static WebElement  gridItemColoumn;
	 
	 @FindBy(xpath="//th[@id='PriceBookWebGrid_control_heading_3']//div[contains(text(),'Warehouse')]")
	 private static WebElement  gridWareHouseColoumn;
	 
	 @FindBy(xpath="//th[@id='PriceBookWebGrid_control_heading_11']//div[contains(text(),'Rate')]")
	 private static WebElement  gridRateColoumn;
	 
	 @FindBy(xpath="//th[@id='PriceBookWebGrid_control_heading_12']//div[contains(text(),'Po')]")
	 private static WebElement  gridPoColoumn;
	 
	 @FindBy(xpath="//div[contains(text(),'Pt')]")
	 private static WebElement  gridPtColoumn;
	 
	 @FindBy(xpath="//input[@id='donotshow']")
	 private static WebElement doNotShowCheckbox;
	 
	 @FindBy(xpath="//span[@class='pull-right']")
	 private static WebElement closeBtnInDemoPopupScreen;
	 
	 @FindBy(xpath="//div[@class='theme_color font-6']")
	 public static WebElement errorMessage;
		 
	 @FindBy(xpath="//span[@class='icon-reject2 theme_color']")
	 public static WebElement errorMessageCloseBtn;
		
	
	public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			String actErrorMessage=errorMessage.getText();
			String expErrorMessage=ExpMessage;
	                
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
				return actErrorMessage;
			}
			catch(Exception ee)
			{
				System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
				return actErrorMessage;
			}
		}
		catch(Exception e)
		{
			System.err.println("Error Message NOT Found or NOT Clickable");
			System.err.println(e.getMessage());
			String Exception=e.getMessage();
			return Exception;
		}
	}
			
	@FindBy (xpath="//*[@id='25']/span")
    private static WebElement dataMangementMenu;
	
		@FindBy (xpath="//*[@id='26']/span")
		private static WebElement backup;
			
		@FindBy (xpath="//*[@id='27']/span")
		private static WebElement restore;
		
		@FindBy (xpath="//*[@id='111']/span")
		private static WebElement reindex;
		
		@FindBy (xpath="//*[@id='115']/span")
		private static WebElement eraseAll;
		
		@FindBy (xpath="//*[@id='216']/span")
		private static WebElement lockAndUnlock;
		
	
	@FindBy (xpath="//input[@id='idEraseTransaction']")
	private static WebElement eraseTranscationsRadio;
	
	@FindBy (xpath="//span[contains(text(),'Ok')]")
	private static WebElement eraseAllOkBtn;
	
	@FindBy (xpath="//button[@class='btn Fbutton']")
	private static WebElement folderpathExpandBtn;
	
	@FindBy (xpath="//div[@id='RestoreControls']//div[1]//div[1]")
	private static WebElement restoreCompanyBtn;
	
	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Yes')]")
	private static WebElement overRideYesBtn;
	
	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'No')]")
	private static WebElement overRideNoBtn;
	
	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
	private static WebElement overRideCancelBtn;
	 	
	 	
	 private static String xlfile;
	 private static String resPass="Pass";
	 private static String resFail="Fail";
	 private static ExcelReader excelReader;
	 
	 
	 public boolean checkLoginForPos() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		//checkRefershPopOnlogin();
				        
		//checkPopUpWindow();
		
	    Thread.sleep(5000);
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
		dataMangementMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restore));
		restore.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(folderpathExpandBtn));
		folderpathExpandBtn.click();
		
		Thread.sleep(3000);
	     
	     Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\posCompanyRestore.exe");
	     
	     Thread.sleep(3000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreCompanyBtn));
	     restoreCompanyBtn.click();
	     
	     try
	     {
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(overRideYesBtn));
	 		 overRideYesBtn.click();
	 		 Thread.sleep(20000);
	     }
	     catch(Exception e)
	     {
	    	 System.err.println("NO OLDER COMPANY EXISTS");
	     }
	     
	     if(getIsAlertPresent())
	     {
	    	 getWaitForAlert();
	    	 
	    	 getAlert().accept();
	     }
		
	
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	     userNameDisplay.click();
		
		
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	     logoutOption.click();
	     
	     

	     Thread.sleep(3000);
	     
	     lp.enterUserName(unamelt);
	     
	     lp.enterPassword(pawslt);
	     
	     Thread.sleep(2000);
	     
	     Select s = new Select(companyDropDownList);
	     int size=s.getOptions().size();
	     
	     System.err.println("SIZE : "+size);
	     
	     for(int i=0;i<size;i++)
	     {
	    	 String data;
	    	 
	    	 data=s.getOptions().get(i).getText();
	    	 
	    	 System.err.println("DATA : "+data);
	    	 
	    	 if(data.contains("Automation POS"))
	    	 {
	    		 
	    		 s.selectByVisibleText(data);
	    		 
	    		 break;
	    	 }
	     }
	     
	     
	     
	     lp.clickOnSignInBtn();
	     
	     Thread.sleep(5000);
	    
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		
		boolean actlabelDashboard                  =labelDashboard.isDisplayed();
		boolean actselectDashboard                 =selectDashboard.isDisplayed();
		boolean actnewAddDashBoard                 =newAddDashBoard.isDisplayed();
		boolean actdashboardCustomizationSettings  =dashboardCustomizationSettings.isDisplayed();
		
		boolean explabelDashboard                  =true;
		boolean expselectDashboard                 =true;
		boolean expnewAddDashBoard                 =true;
		boolean expdashboardCustomizationSettings  =true;
		
		System.out.println("******************************checkLoginForPos************************");
		
		System.out.println("labelDashboard                  : "+actlabelDashboard                 +" Value Expected : "+explabelDashboard);
		System.out.println("selectDashboard                 : "+actselectDashboard                +" Value Expected : "+expselectDashboard);
		System.out.println("newAddDashBoard                 : "+actnewAddDashBoard                +" Value Expected : "+expnewAddDashBoard);
		System.out.println("dashboardCustomizationSettings  : "+actdashboardCustomizationSettings +" Value Expected : "+expdashboardCustomizationSettings);
		
		if(labelDashboard.isDisplayed() && selectDashboard.isDisplayed() && newAddDashBoard.isDisplayed() && dashboardCustomizationSettings.isDisplayed())
		{
			System.out.println("Test Pass : Documentation Customization Tab is Available");
			excelReader.setCellData(xlfile, "Sheet2", 100, 9, resPass);
			return true;
	
		}
		else
		{
			System.out.println("Test Fail : Documentation Customization Tab is Not Available");
			excelReader.setCellData(xlfile, "Sheet2", 100, 9, resFail);
			return false;
		}
	}
 
	 @FindBy(xpath="//div[contains(text(),'Settings')]")
	 private static WebElement  settingsmenuBtn;
	
	public boolean checkOpenSettingWizardPageIsOpen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkOpenSettingWizardPageIsOpen Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
			settingsmenuBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsSettingsWizard));
			settingsSettingsWizard.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mrpTwoInSettingwizard));
			
			boolean actGeneralOption                    = generalInSettingwizard.isDisplayed();
			boolean actVatOption                        = vatInSettingwizard.isDisplayed();
	        boolean actPosOption                        = posInSettingwizard.isDisplayed();
	        boolean actInventoryOption                  = inventoryInSettingwizard.isDisplayed();
	        boolean actFinancialOption                  = financialInSettingwizard.isDisplayed();
	        boolean actTdsOption                        = tdsInSettingwizard.isDisplayed();       
	        boolean actwmsOption                        = wmsInSettingwizard.isDisplayed();       
	        boolean actgstOption                        = gstInSettingwizard.isDisplayed();       
	        boolean actmrpOneOption                     = mrpOneInSettingwizard.isDisplayed();
	        boolean actmrpTwoOption                     = mrpTwoInSettingwizard.isDisplayed();       
	      
			boolean expGeneralOption                    = true;
			boolean expVatOption                        = true;
			boolean expPosOption                        = true;
			boolean expInventoryOption                  = true;
			boolean expFinancialOption                  = true;
			boolean expTdsOption                        = true;       
			boolean expwmsOption                        = true;       
			boolean expgstOption                        = true;       
			boolean expmrpOneOption                     = true;
			boolean expmrpTwoOption                     = true;;      
			
			System.out.println("General Value Actual                  : " + actGeneralOption +      " Value Expected : " + expGeneralOption);
			System.out.println("VAT Value Actual                      : " + actVatOption +          " Value Expected : " + expVatOption);
			System.out.println("POS Value Actual                      : " + actPosOption +          " Value Expected : " + expPosOption);
			System.out.println("Inventory Value Actual                : " + actInventoryOption +    " Value Expected : " + expInventoryOption);
			System.out.println("Financial Value Actual                : " + actFinancialOption +    " Value Expected : " + expFinancialOption);
			System.out.println("TDS Value Actual                      : " + actTdsOption +          " Value Expected : " + expTdsOption);     
			System.out.println("WMS Value Actual                      : " + actwmsOption +          " Value Expected : " + expwmsOption);
			System.out.println("GST Value Actual                      : " + actgstOption +          " Value Expected : " + expgstOption);
			System.out.println("MRP One Value Actual                  : " + actmrpOneOption +       " Value Expected : " + expmrpOneOption);
			System.out.println("MRP Two Value Actual                  : " + actmrpTwoOption +       " Value Expected : " + expmrpTwoOption);
	       
	       
	       
	        ArrayList<String>actsettingWizardULList=new ArrayList<String>();
			
			int settingWizardULListCount=settingWizardULList.size();
				
			System.out.println(" settingWizardULListCount  :  "+settingWizardULListCount);
				
			for (int i = 0; i < settingWizardULListCount; i++)
			{
				String data=settingWizardULList.get(i).getText();
				actsettingWizardULList.add(data);
			}
				
			String actsettingWizardUL=actsettingWizardULList.toString();
			String expsettingWizardUL="[General, VAT, POS, Inventory, Financial, TDS, WMS, GST, MRP1, MRP2, Sub Ledger]";
				
			System.err.println("  Actual    settingWizardULList : "+actsettingWizardUL);
			System.err.println("  Expected  settingWizardULList : "+expsettingWizardUL);
				
	       
	       
			if(actGeneralOption==expGeneralOption && actVatOption==expVatOption 
		
					&& actPosOption==expPosOption && actInventoryOption==expInventoryOption 
					&& actFinancialOption==expFinancialOption && actTdsOption==expTdsOption
					&& actwmsOption==expwmsOption && actgstOption==expgstOption 
					&& expgstOption==expmrpOneOption && actmrpTwoOption==expmrpTwoOption && 
					
					actsettingWizardUL.equalsIgnoreCase(expsettingWizardUL)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}

	
	
	public boolean checkPosMenuAndOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkPosMenuAndOptions Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInSettingwizard));
			posInSettingwizard.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posNeverRadio));
			
			boolean actposNeverRadio                    = posNeverRadio.isDisplayed();
			boolean actposActivateRetailSales           = posActivateRetailSales.isDisplayed();
	        boolean actposActivatePosRestaurant         = posActivatePosRestaurant.isDisplayed();
	      
			boolean expposNeverRadio                    = true;
			boolean expposActivateRetailSales           = true;
			boolean expposActivatePosRestaurant         = true;
			
			System.out.println("posNeverRadio Value Actual            : " + actposNeverRadio            + " Value Expected : " + expposNeverRadio);
			System.out.println("posActivateRetailSales Value Actual   : " + actposActivateRetailSales   + " Value Expected : " + expposActivateRetailSales);
			System.out.println("posActivatePosRestaurant Value Actual : " + actposActivatePosRestaurant + " Value Expected : " + expposActivatePosRestaurant);
	       
			if(actposNeverRadio==expposNeverRadio && actposActivateRetailSales==expposActivateRetailSales
					&& actposActivatePosRestaurant==expposActivatePosRestaurant) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	@FindBy(xpath="//label[@class='col-xs-12 text-center Flabel']")
	private static WebElement posEnableTextField;
	
	public boolean checkSelectingActivateRetailSalesAndUpdate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSelectingActivateRetailSalesAndUpdate Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			if(posActivateRetailSales.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posActivateRetailSales));
				posActivateRetailSales.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardUpdateBtn));
			settingsWizardUpdateBtn.click();
			
			String expValidationMessage = "Data Saved Successfully";
			String actValidationMessage = checkValidationMessage(expValidationMessage);
			
			
			String actposEnableTextField      = posEnableTextField.getText();
			String expposEnableTextField      = "POS Enabled on this Company";
			
			System.out.println("ValidationMessage Value Actual   : " +actValidationMessage    + " Value Expected : " +expValidationMessage);
			System.out.println("posEnableTextField Value Actual  : " + actposEnableTextField  + " Value Expected : " + expposEnableTextField);
	       
			if(actposEnableTextField.equalsIgnoreCase(expposEnableTextField) && actValidationMessage.equalsIgnoreCase(expValidationMessage)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	public boolean checkLogoutAndLoginAndpdatedPosSettings() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		//checkRefershPopOnlogin();
				        
		//checkPopUpWindow();
		
	    Thread.sleep(8000);
	    
	    Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsSettingsWizard));
		settingsSettingsWizard.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInSettingwizard));
		posInSettingwizard.click();
		
		Thread.sleep(2000);
		
		String actposEnableTextField      = posEnableTextField.getText();
		String expposEnableTextField      = "POS Enabled on this Company";
	    
		
		System.out.println("******************************checkLoginForPos************************");
		
		System.out.println("posEnableTextField     : "+actposEnableTextField     +" Value Expected : "+expposEnableTextField);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardCloseBtn));
		settingsWizardCloseBtn.click();
		
		if(actposEnableTextField.equalsIgnoreCase(expposEnableTextField))
		{
			System.out.println("Test Pass : Documentation Customization Tab is Available");
			excelReader.setCellData(xlfile, "Sheet2", 100, 9, resPass);
			return true;
	
		}
		else
		{
			System.out.println("Test Fail : Documentation Customization Tab is Not Available");
			excelReader.setCellData(xlfile, "Sheet2", 100, 9, resFail);
			return false;
		}
	}
	
	
	
	// Vat Settings
	
	@FindBy(xpath="//label[contains(text(),'Gross')]/input")
	private static WebElement settingsWizardVATGrossChkbox;
	
	@FindBy(xpath="//label[contains(text(),'Discount')]/input")
	private static WebElement settingsWizardVATDiscountChkbox;
	
	@FindBy(xpath="//label[contains(text(),'RD')]/input")
	private static WebElement settingsWizardVATRDChkbox;
	
	@FindBy(xpath="//label[(text()='Avg Rate')]/input")
	private static WebElement settingsWizardVATAvgRateChkbox;
	
	@FindBy(xpath="//label[(text()='Avg Rate(O)')]/input")
	private static WebElement settingsWizardVATAvgRateOChkbox;
	
	@FindBy(xpath="//label[(text()='AQ')]/input")
	private static WebElement settingsWizardVATAQChkbox;
	
	@FindBy(xpath="//label[(text()='FQ')]/input")
	private static WebElement settingsWizardVATFQChkbox;
	
	@FindBy(xpath="//label[(text()='VAT')]/input")
	private static WebElement settingsWizardVATChkbox;
	
	@FindBy(xpath="//label[(text()='Taxable')]/input")
	private static WebElement settingsWizardTaxableChkbox;
	
	@FindBy(xpath="//*[@id='myNavbarVATAuditFile']/ul/li/div[2]/div[1]/span")
	private static WebElement settingsWizardVAtCloseBtn;
	
	@FindBy(xpath="//input[@id='chkVATInclusive']")
	private static WebElement settingsWizardVATInclusiveChkbox;
	
	@FindBy(xpath="//div[@id='dvSettingWizard']//li[1]/a")
	private static WebElement  settingsWizardGeneralBtn;
	
	@FindBy(xpath="//div[@id='dvSettingWizard']//li[2]/a")
	private static WebElement  settingsWizardVATBtn;
	
	@FindBy(xpath="//div[@id='dvSettingWizard']//li[3]/a")
	private static WebElement  settingsWizardPOSBtn;
	
	@FindBy(xpath="//div[@id='dvSettingWizard']//li[4]/a")
	private static WebElement  settingsWizardInventoryBtn;
	
	@FindBy(xpath="//div[@id='dvSettingWizard']//li[5]/a")
	private static WebElement  settingsWizardFinancialBtn;
	
	@FindBy(xpath="//div[@id='dvSettingWizard']//li[6]/a")
	private static WebElement  settingsWizardTDSBtn;
	
	@FindBy(xpath="//div[@id='dvSettingWizard']//li[7]/a")
	private static WebElement  settingsWizardWMSBtn;
	
	@FindBy(xpath="//div[@id='dvSettingWizard']//li[8]/a")
	private static WebElement  settingsWizardGSTBtn;
	
	@FindBy(xpath="//div[@id='dvSettingWizard']//li[9]/a")
	private static WebElement  settingsWizardMRP1Btn;
	
	@FindBy(xpath="//div[@id='dvSettingWizard']//li[10]/a")
	private static WebElement  settingsWizardMRP2Btn;
	
	@FindBy(xpath="//div[@class='Fcheckbox col-xs-12 col-sm-8']//label[1]/input")
	private static WebElement  settingsWizardVATActivateVATChkbox;
	
	@FindBy(xpath="//div[@id='dvRightSettingWizard']/div[2]/div[1]/div/div/label")
	private static List<WebElement> settingsWizardVATVouchersList;
	
	@FindBy(xpath="//div[@id='dvRightSettingWizard']/div[2]/div[1]/div/div/label/input")
	private static List<WebElement> settingsWizardVATVoucherChkboxList;
	
	@FindBy(xpath="//div[@id='dvSelectedVouchers']/div/label")
	private static List<WebElement> settingsWizardVATSelectedVouchersList;
	
	@FindBy(xpath="//div[@id='dvSelectedVouchers']")
	private static WebElement settingsWizardVATSelectedVouchersListEmpty;
	

	
	public boolean checkSaveVatOptionsInSettingsWizard() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
			settingsmenuBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsSettingsWizard));
			settingsSettingsWizard.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATBtn));
			settingsWizardVATBtn.click();
			
			Thread.sleep(5000);
			
			int vouchersCount		=settingsWizardVATVouchersList.size();
			
			
			for (int i = 0; i < vouchersCount; i++) 
			{
				String data=settingsWizardVATVouchersList.get(i).getText();
				
				int sl=i+1;
				
				
				if (data.contains("Sales Orders")) 
				{
					System.out.println("VAT VOUCHER LIST :"+settingsWizardVATVouchersList.get(i).getText());
					settingsWizardVATVouchersList.get(i).click();
					break;
				}
			}
			
			for (int i = 0; i < vouchersCount; i++) 
			{
				String data=settingsWizardVATVouchersList.get(i).getText();
				
				int sl=i+1;
				
				
				if (data.contains("Sales Returns")) 
				{
					System.out.println("VAT VOUCHER LIST :"+settingsWizardVATVouchersList.get(i).getText());
					settingsWizardVATVouchersList.get(i).click();
					break;
				}
			}
			
			for (int i = 0; i < vouchersCount; i++) 
			{
				String data=settingsWizardVATVouchersList.get(i).getText();
				
				int sl=i+1;
				
				
				if (data.contains("POS Sales")) 
				{
					System.out.println("VAT VOUCHER LIST :"+settingsWizardVATVouchersList.get(i).getText());
					settingsWizardVATVouchersList.get(i).click();
					break;
				}
			}
			
			
			int selectedVouchersCount		=settingsWizardVATSelectedVouchersList.size();
			
			for (int i = 0; i < selectedVouchersCount; i++) 
			{
			  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
			  
			  if (voucher.equalsIgnoreCase("Sales Orders")) 
			  {
				  settingsWizardVATSelectedVouchersList.get(i).click();
				  break;
			  }
			}
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
			settingsWizardVATGrossChkbox.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATDiscountChkbox));
			settingsWizardVATDiscountChkbox.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATInclusiveChkbox));
			settingsWizardVATInclusiveChkbox.click();
			
			
			for (int i = 0; i < selectedVouchersCount; i++) 
			{
			  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
			  
			  if (voucher.equalsIgnoreCase("Sales Returns")) 
			  {
				  settingsWizardVATSelectedVouchersList.get(i).click();
				  break;
			  }
			}
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
			settingsWizardVATGrossChkbox.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATDiscountChkbox));
			settingsWizardVATDiscountChkbox.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATInclusiveChkbox));
			settingsWizardVATInclusiveChkbox.click();
			
			
			for (int i = 0; i < selectedVouchersCount; i++) 
			{
			  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
			  
			  if (voucher.equalsIgnoreCase("POS Sales")) 
			  {
				  settingsWizardVATSelectedVouchersList.get(i).click();
				  break;
			  }
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
			settingsWizardVATGrossChkbox.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATDiscountChkbox));
			settingsWizardVATDiscountChkbox.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATInclusiveChkbox));
			settingsWizardVATInclusiveChkbox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardUpdateBtn));
			settingsWizardUpdateBtn.click();
			
			String expSaveSettingWizardVATmessage = "Data saved Successfully";
			 
			String actSaveSettingWizardVATmessage = checkValidationMessage(expSaveSettingWizardVATmessage);
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVAtCloseBtn));
			settingsWizardVAtCloseBtn.click();
			
			
			if (actSaveSettingWizardVATmessage.equalsIgnoreCase(expSaveSettingWizardVATmessage)) 
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}	
	}
	
	@FindBy(xpath="//*[@id='16']/div/span")
	private static WebElement  SettingsmenuBtn;
	
	@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
	private static WebElement  ConfigureTransactionBtn;
	
	@FindBy(xpath="//label[contains(text(),'Preferences')]")
	private static WebElement  PreferencesBtn;
	
	@FindBy(xpath="//div[@id='docCustomization']")
	private static WebElement  DocumentCustomizationBtn;
	
	@FindBy(xpath="//a[@id='0']")
	private static WebElement  TagsBtn;
	
	@FindBy(xpath="//select[@id='Accounts']")
	private static WebElement  AccountingDropdown;
	
	@FindBy(xpath="//select[@id='Inventory']")
	private static WebElement  InventoryDropdown;
	
	@FindBy(xpath="//select[@id='Payroll']")
	private static WebElement  PayRollCostCenterDropdown;
	
	@FindBy(xpath="//select[@id='SellingRate']")
	private static WebElement  SellingsRateDropdown;
	
	@FindBy(xpath="//select[@id='BuyingRates']")
	private static WebElement  BuyingRatesdropdown;
	
	@FindBy(xpath="//select[@id='PayrolDept']")
	private static WebElement  PayRollDepartmentDropdown;
	
	@FindBy(xpath="//select[@id='PayrollSite']")
	private static WebElement  PayRollSiteDropdown;
	
	@FindBy(xpath="//select[@id='DeptwiseAppropriation']")
	private static WebElement  FinancialAppropriationByDropdown;
	
	@FindBy(xpath="//select[@id='VAT']")
	private static WebElement  VatDropdown;
	
	@FindBy(xpath="//select[@id='Schemes']")
	private static WebElement  SchemesDropdown;
	
	@FindBy(xpath="//select[@id='Inventoryallocationtag']")
	private static WebElement  InventoryAloocationTagDropdown;
	
	@FindBy(xpath="//span[@id='updateButton']")
	private static WebElement  UpdateBtn;
	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  CloseBtn;
	
	 @FindBy(xpath="//*[@id='txtSearchMenu_MainLayout']")
	 private static WebElement searchMenuTextHomePage;
		
	 @FindBy(xpath="//li/span")
	 private static WebElement searchMenuTextClick;
	 
	 @FindBy(xpath="//a[@id='3331']")
	 private static WebElement posVoucherBtn;
	
	public boolean checkLogoutAndLoginAndSaveTagsInConfigureTransactionsAndVouchers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		//checkRefershPopOnlogin();
				        
		//checkPopUpWindow();
		
	    Thread.sleep(8000);*/
	    
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMenuTextHomePage));
		System.out.println("Setting buton is enabled");
		searchMenuTextHomePage.click();
		searchMenuTextHomePage.sendKeys("Configure Transactions");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMenuTextClick));
		searchMenuTextClick.click();		
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AccountingDropdown));
		Select AccountingDropdownSelect = new Select(AccountingDropdown);
		AccountingDropdownSelect.selectByVisibleText("Outlet");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AccountingDropdown));
		Select InventoryDropdownSelect = new Select(InventoryDropdown);
		InventoryDropdownSelect.selectByVisibleText("Outlet");
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AccountingDropdown));
		Select VatDropdownSelect = new Select(VatDropdown);
		VatDropdownSelect.selectByVisibleText("Place of supply");*/
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();
			
		getWaitForAlert();
			
		String actAlertMgs  =getAlert().getText();
		String expAlertMgs  ="Do you want to save the changes?";
		
		getAlert().accept();
		
		String expMessage="Data saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		
		System.out.println("AlertMessage     : "+actAlertMgs    +" Value Expected : "+expAlertMgs);	
		System.out.println("Message   : "+actMessage+" Value Expected : "+expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
		CloseBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMenuTextHomePage));
		System.out.println("Setting buton is enabled");
		searchMenuTextHomePage.click();
		searchMenuTextHomePage.sendKeys("Configure Transactions");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMenuTextClick));
		searchMenuTextClick.click();	
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersNewVoucherBtn));
		purchaseVouchersNewVoucherBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		for(int i=1;i<=10;i++)
		{
			String data = mastrersList.get(i).getText();
			
			if(data.equalsIgnoreCase("Department"))
			{
				mastrersList.get(i).click();
				
				break;
			}
		}
		
		Select masterDropDownSelect = new Select(masterDropDown);
		masterDropDownSelect.selectByVisibleText("Outlet");
		masterDropDown.sendKeys(Keys.TAB);
		
		Select positionDropdownSelect = new Select(positionDropdown);
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVat));
		salesInvoiceVat.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		for(int i=1;i<=10;i++)
		{
			String data = mastrersList.get(i).getText();
			
			if(data.equalsIgnoreCase("Department"))
			{
				mastrersList.get(i).click();
				
				break;
			}
		}
		
		masterDropDownSelect.selectByVisibleText("Outlet");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posVoucherBtn));
		posVoucherBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR2C1));
		mastersR2C1.click();
		
		masterDropDownSelect.selectByVisibleText("Outlet");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR3C1));
		mastersR3C1.click();
		
		masterDropDownSelect.selectByVisibleText("Member");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR4C1));
		mastersR4C1.click();
		
		masterDropDownSelect.selectByVisibleText("Guest");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR5C1));
		mastersR5C1.click();
		
		masterDropDownSelect.selectByVisibleText("Table");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR6C1));
		mastersR6C1.click();
		
		masterDropDownSelect.selectByVisibleText("Counter");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR7C1));
		mastersR7C1.click();
		
		masterDropDownSelect.selectByVisibleText("Employee");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersBtn));
		salesOrdersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR2C1));
		mastersR2C1.click();
		
		masterDropDownSelect.selectByVisibleText("Outlet");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR3C1));
		mastersR3C1.click();
		
		masterDropDownSelect.selectByVisibleText("Member");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR4C1));
		mastersR4C1.click();
		
		masterDropDownSelect.selectByVisibleText("Guest");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR5C1));
		mastersR5C1.click();
		
		masterDropDownSelect.selectByVisibleText("Table");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR6C1));
		mastersR6C1.click();
		
		masterDropDownSelect.selectByVisibleText("Counter");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR7C1));
		mastersR7C1.click();
		
		masterDropDownSelect.selectByVisibleText("Employee");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsBtn));
		salesReturnsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR2C1));
		mastersR2C1.click();
		
		masterDropDownSelect.selectByVisibleText("Outlet");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR3C1));
		mastersR3C1.click();
		
		masterDropDownSelect.selectByVisibleText("Member");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR4C1));
		mastersR4C1.click();
		
		masterDropDownSelect.selectByVisibleText("Guest");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR5C1));
		mastersR5C1.click();
		
		masterDropDownSelect.selectByVisibleText("Table");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR6C1));
		mastersR6C1.click();
		
		masterDropDownSelect.selectByVisibleText("Counter");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR7C1));
		mastersR7C1.click();
		
		masterDropDownSelect.selectByVisibleText("Employee");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNoteBtn));
		creditNoteBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR2C1));
		mastersR2C1.click();
		
		masterDropDownSelect.selectByVisibleText("Outlet");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksBtn));
		openingStocksBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR2C1));
		mastersR2C1.click();
		
		masterDropDownSelect.selectByVisibleText("Outlet");
		masterDropDown.sendKeys(Keys.TAB);
		
		positionDropdownSelect.selectByVisibleText("Header");
		positionDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessageDC="Data Saved Successfully";
		
		String actMessageDC=checkValidationMessage(expMessageDC);
		
		
		if(actAlertMgs.equalsIgnoreCase(expAlertMgs) && actMessage.equalsIgnoreCase(expMessage) && actMessageDC.equalsIgnoreCase(expMessageDC))
		{
			System.out.println("Test Pass : Documentation Customization Tab is Available");
			excelReader.setCellData(xlfile, "Sheet2", 100, 9, resPass);
			return true;
	
		}
		else
		{
			System.out.println("Test Fail : Documentation Customization Tab is Not Available");
			excelReader.setCellData(xlfile, "Sheet2", 100, 9, resFail);
			return false;
		}
	}
	
	@FindBy(xpath="//a[@id='4096']")
	private static WebElement creditNoteBtn;
	
	@FindBy(xpath="//span[@id='updateButton']")
	private static WebElement  updateBtn;
	
	@FindBy(xpath="//div[@class='col-xs-12']//a[@id='512']")
	private static WebElement  openingStocksBtn;
	
	@FindBy(xpath="//a[@id='1792']")
	private static WebElement  salesReturnsBtn;
	
	@FindBy(xpath="//a[@id='5632']")
	private static WebElement  salesOrdersBtn;
	
	@FindBy(xpath="//a[@id='3333']")
	private static WebElement  salesInvoiceVat;
	
	@FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
	private static WebElement  documentsTab;
	
	@FindBy(xpath="//tbody[@id='doc_TagsTable_body']/tr/td[2]")
	private static List<WebElement>  mastrersList;
	
	@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
	private static WebElement  masterDropDown;
	
	@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
	private static WebElement  positionDropdown;
	
	@FindBy(xpath="//div[@id='docCustomization']")
	private static WebElement  documentCustomization45Btn;
	
	@FindBy(xpath="//a[@id='769']")
	private static WebElement  purchaseVouchersNewVoucherBtn;
     
	@FindBy(xpath="//*[@id='doc_baseDocument']")
	private static WebElement  baseDocumentTxtInDocCust;
     
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
	private static WebElement  mastersR1C1;
		
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
	private static WebElement  mastersPositionR1C2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
	private static WebElement  mastersR2C1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
	private static WebElement  mastersPositionR2C2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_3-1']")
	private static WebElement  mastersR3C1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_3-2']")
	private static WebElement  mastersPositionR3C2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_4-1']")
	private static WebElement  mastersR4C1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_4-2']")
	private static WebElement  mastersPositionR4C2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_5-1']")
	private static WebElement  mastersR5C1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_5-2']")
	private static WebElement  mastersPositionR5C2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_6-1']")
	private static WebElement  mastersR6C1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_6-2']")
	private static WebElement  mastersPositionR6C2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_7-1']")
	private static WebElement  mastersR7C1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_7-2']")
	private static WebElement  mastersPositionR7C2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_8-1']")
	private static WebElement  mastersR8C1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_8-2']")
	private static WebElement  mastersPositionR8C2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_9-1']")
	private static WebElement  masters92C1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_9-2']")
	private static WebElement  mastersPositionR9C2;
		
		
	@FindBy(xpath="//div[@id='userAndGroups']/ul/li/ul/li/div/span/span[1]")
	private static List<WebElement> userList;
	
	@FindBy (xpath="//*[@id='6']/span")
    private static WebElement securityMenu;
	
	@FindBy(xpath="//span[contains(text(),'Create User')]")
	private static WebElement createUserMenu;
	
	@FindBy(xpath="//a[@id='POSDatatabMenu']")
	private static WebElement createUserPosTab;
	
	@FindBy(xpath="//select[@id='UserTypeforPos']")
	private static WebElement posUserTypeDropDown;
	
	@FindBy(xpath="//input[@id='authenticationCode']")
	private static WebElement authenticationCodeTxt;
	
	@FindBy(xpath="//input[@id='Maxcreditallow']")
	private static WebElement maxCreditAllowedTxt;
	
	@FindBy(xpath="//input[@id='Maxreturnallow']")
	private static WebElement maxReturnAllowedTxt;
	
	@FindBy(xpath="//input[@id='MaxDiscountallowPerentage']")
	private static WebElement maxDiscountAllowedPercent;
	
	@FindBy(xpath="//input[@id='MaxDiscountallowAmt']")
	private static WebElement maxDiscountAllowedDiscount;
	
	@FindBy(xpath="//input[@id='MaxDiscountallowEOD']")
	private static WebElement maxDiscountAllowedForEodTxt;
	
	@FindBy(xpath="//select[@id='PickCutOff']")
	private static WebElement pickCutOfFromDropDown;
	
	@FindBy(xpath="//*[@id='btnSave']/i")
	private static WebElement createUserSaveIcon;
	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement createUserCloseIcon;
	
	@FindBy(xpath="//div[@id='idGlobalError']")
	public static WebElement validationConfirmationMessage;
	
	@FindBy (xpath="//*[@id='7']/span")
	private static WebElement networkPolicy;
	
	@FindBy (xpath="//*[@id='From']")
	private static WebElement fromIp;
	
	@FindBy (xpath="//*[@id='To']")
	private static WebElement toIp;
	
	@FindBy (xpath="//i[@class='icon-font6 icon-add']")
	private static WebElement addIp;
	
	@FindBy (xpath="//i[@class='icon-font6 icon-clear']")
	private static WebElement clearIp;
	
	@FindBy (xpath="//*[@id='buttons']/span[1]/i")
	private static WebElement saveBtnInNetworkPolicy;
	
	@FindBy (xpath="//*[@id='8']/span")
    private static WebElement passwordPolicySubMenu;
	
	@FindBy (xpath="//*[@id='addPasswordPolicybtn']/i")
	private static WebElement passwordPolicyAddBtn;
	
	@FindBy (xpath="//*[@id='policyName']")
  	private static WebElement policyName;

    //Password Policy passwordLength
  	@FindBy (xpath="//*[@id='MinPassLength']")
  	private static WebElement passwordLength;
  	
  	@FindBy (xpath="//*[@id='btnSaveId']/i")
	private static WebElement passwordPolicySaveBtn;
  	
  	@FindBy(xpath="//*[@id='6']/span")
	private static WebElement  homeSecurityMenu; 
  	
  	@FindBy(xpath="//span[contains(text(),'Create Profile')]")
	private static WebElement createProfileMenu;
  	
  	@FindBy(xpath="//input[@id='profileName']")
	private static WebElement  createProfileProfileNameDropdown; 
	
	@FindBy(xpath="//a[@id='1']//i[@class='icon icon-expand']")
	private static WebElement  createProfileHomeExpandBtn; 
	
	@FindBy(xpath="//a[@id='60']//i[@class='icon icon-expand']")
	private static WebElement  createProfileFininicalExpandBtn; 
	
	@FindBy(xpath="//a[@id='135']//i[@class='icon icon-expand']")
	private static WebElement  createProfileInventoryExpandBtn; 
	
	@FindBy(xpath="//a[@id='136']//i[@class='icon icon-expand']")
	private static WebElement  createProfileFixedAssestsExpandBtn; 
	
	@FindBy(xpath="//a[@id='3000']//i[@class='icon icon-expand']")
	private static WebElement  createProfileProductionExpandBtn; 
	
	@FindBy(xpath="//a[@id='8000']//i[@class='icon icon-expand']")
	private static WebElement  pointOfSaleExpandBtn; 
	
	@FindBy(xpath="//a[@id='150']//i[@class='icon icon-expand']")
	private static WebElement  qualityControlExpandBtn; 
	
	@FindBy(xpath="//a[@id='16']//i[@class='icon icon-expand']")
	private static WebElement  settingExpandBtn; 
	
	@FindBy(xpath="//span[contains(text(),'Save')]")
	private static WebElement  createProfileSaveIcon; 
	
	@FindBy(xpath="//i[@class='icon-font6 icon-selectall']")
	private static WebElement  createProfileSelectAllIcon; 
	
	@FindBy(xpath="//span[contains(text(),'Create Role')]")
	private static WebElement  homeSecurityCreateRoleMenu; 
	
	@FindBy(xpath="//input[@id='roleName']")
	private static WebElement  createRoleRoleNameDropdown; 
	
	@FindBy(xpath="//select[@id='passwordPolicy']")
	private static WebElement  createRolePasswordPolicyDropdown; 
	
	@FindBy(xpath="//span[contains(text(),'Save')]")
	private static WebElement  createRoleSaveicon; 
	
	@FindBy(xpath="//i[@class='icon-delete icon-font6']")
	private static WebElement  createRoleDeleteIcon; 
	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  createRoleCloseIcon; 
	
	@FindBy(xpath="//span[2]//span[1]")
	private static WebElement  createRoleMOveFiledsFromLeftSideToRightSide; 
	
	@FindBy(xpath="//*[contains(text(),'All Profile')]")
	private static WebElement avaliableAllProfile ;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-create-user']")
	private static WebElement createUserIcon;
	
	@FindBy(xpath="//input[@id='loginName']")
	private static WebElement createUserLoginNameTxt;

	@FindBy(xpath="//select[@id='ERPRoles']")
	private static WebElement createUserERPRoleDropDown;

	@FindBy(xpath="//select[@id='passwordPolicy']")
	private static WebElement createUserPasswordPolicyDropdown;

	@FindBy(xpath="//input[@id='password']")
	private static WebElement createUserPasswordTxt;

	@FindBy(xpath="//input[@id='confirmpassword']")
	private static WebElement createUserPasswordConformTxt;

	@FindBy(xpath="//input[@id='Username']")
	private static WebElement createUserNameTxt;

	@FindBy(xpath="//input[@id='lginAbbr']")
	private static WebElement createUserLoginAbbrivationTxt;

	@FindBy(xpath="//select[@id='SecurityQues']")
	private static WebElement createUserSecurityQuestionDropDown;

	@FindBy(xpath="//input[@id='SecurityAns']")
	private static WebElement createUserSecurityAnswerTxt;

	@FindBy(xpath="//select[@id='language']")
	private static WebElement createUserLanguageTxt;

	@FindBy(xpath="//select[@id='altLanguage']")
	private static WebElement createUserAlternateLanguageTxt;

	@FindBy(xpath="//select[@id='timezone']")
	private static WebElement createUserSelectTimeZoneTxt;

	@FindBy(xpath="//i[@class='icon-unlock-user icon-font6']")
	private static WebElement createUserUnlockUserIcon;

	@FindBy(xpath="//i[@class='icon-move-user icon-font6']")
	private static WebElement createUserMoveUserIcon;

	@FindBy(xpath="//i[@class='icon-reset icon-font6']")
	private static WebElement createUserResetIcon;

	/*@FindBy(xpath="//i[@class='icon-load-from icon-font6 ImagesinArabic']")
	private static WebElement createUserLoadFormIcon;
*/
	@FindBy(xpath="//span[@id='btnLoadForm']")
	private static WebElement createUserLoadFormIcon;	
	

	@FindBy(xpath="//input[@id='emailId']")
	private static WebElement createUserEmailTxt;

	@FindBy(xpath="//select[@id='typeOfUser']")
	private static WebElement createUserUserTypeIcon;
	
	
	
	@FindBy(xpath="//span[contains(text(),'User Information')]")
	private static WebElement createUserUserInformationTab;
	
	@FindBy(xpath="//span[contains(text(),'Additional Info')]")
	private static WebElement createUserAdditionalInfoTab;
	
	
	
	public boolean checkSavingPosSettingForUserInCreateUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
        excelReader=new ExcelReader(POJOUtility.getExcelPath());
    	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		//checkRefershPopOnlogin();
				        
		//checkPopUpWindow();
		
	    Thread.sleep(8000);
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		
		homeMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(securityMenu));
			
		securityMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(networkPolicy));
	 	
	 	networkPolicy.click();
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fromIp));
	
		fromIp.click();

		fromIp.sendKeys("192.168.5.99");
		
		getAction().moveToElement(fromIp).sendKeys(Keys.TAB).perform();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toIp));
		
		toIp.sendKeys("192.168.5.99");
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addIp));
		
		addIp.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtnInNetworkPolicy));
		saveBtnInNetworkPolicy.click();
		 
		String expMessage="Network policy saved successfully";
			
		String actMessage=checkValidationMessage(expMessage);
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			
		homeMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(securityMenu));
			
		securityMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(passwordPolicySubMenu));
			
		passwordPolicySubMenu.click();
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(passwordPolicyAddBtn));
		passwordPolicyAddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(policyName));
		policyName.sendKeys("Numeric");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(passwordLength));
		passwordLength.sendKeys("5");
		
		for(int i=0;i<5;i++)
		{
			if(validationConfirmationMessage.getText().isEmpty()==false)
			{
				errorMessageCloseBtn.click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(passwordPolicySaveBtn));
		
		passwordPolicySaveBtn.click();
		
		String expMessage1="Password policy created successfully";
		
		String actMessage1=checkValidationMessage(expMessage1);
		
		// Profile
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeSecurityMenu));
		homeSecurityMenu.click();
		
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createProfileMenu));
		createProfileMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createProfileProfileNameDropdown));
		createProfileProfileNameDropdown.click();
		createProfileProfileNameDropdown.sendKeys("All Profile");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createProfileHomeExpandBtn));
		createProfileHomeExpandBtn.click();
		
		Thread.sleep(2000);
		
		createProfileSelectAllIcon.click();
		
		Thread.sleep(2000);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createProfileFininicalExpandBtn));
		createProfileFininicalExpandBtn.click();
		
		Thread.sleep(2000);
		
		createProfileSelectAllIcon.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createProfileInventoryExpandBtn));
		createProfileInventoryExpandBtn.click();
		
		
		Thread.sleep(2000);
		
		createProfileSelectAllIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createProfileFixedAssestsExpandBtn));
		createProfileFixedAssestsExpandBtn.click();
		
		Thread.sleep(2000);
		
		
		createProfileSelectAllIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createProfileProductionExpandBtn));
		createProfileProductionExpandBtn.click();
		
		Thread.sleep(2000);
		
		
		createProfileSelectAllIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleExpandBtn));
		pointOfSaleExpandBtn.click();
		
		Thread.sleep(2000);
		
		createProfileSelectAllIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qualityControlExpandBtn));
		qualityControlExpandBtn.click();
		
		Thread.sleep(2000);
		
		createProfileSelectAllIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingExpandBtn));
		settingExpandBtn.click();
		
		Thread.sleep(2000);
		
		createProfileSelectAllIcon.click();
		
		Thread.sleep(2000);
		
		    
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createProfileSaveIcon));
		createProfileSaveIcon.click();
		
		String expMessageProfile="Profile saved Successfully";
		
		String actMessageProfile=checkValidationMessage(expMessageProfile);
		
		// Role
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeSecurityMenu));
		homeSecurityMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeSecurityCreateRoleMenu));
		homeSecurityCreateRoleMenu.click();
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createRoleRoleNameDropdown));
		createRoleRoleNameDropdown.sendKeys("SampleRole1");
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createRolePasswordPolicyDropdown));
		Select s=new Select(createRolePasswordPolicyDropdown);
		s.selectByVisibleText("Numeric");
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(avaliableAllProfile));
		avaliableAllProfile.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createRoleMOveFiledsFromLeftSideToRightSide));
		createRoleMOveFiledsFromLeftSideToRightSide.click();
		 
		Thread.sleep(2000);
		
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createRoleSaveicon));
		createRoleSaveicon.click();
		
		String expMessageRole="Role saved Successfully";
		
		String actMessageRole=checkValidationMessage(expMessageRole);
		
		Thread.sleep(2000);
		
		// User
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
    	homeMenu.click();
    				
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(securityMenu));
    	securityMenu.click();

 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserMenu));
 	    createUserMenu.click();
 	    
 	    
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserIcon));
 	    createUserIcon.click();
 	   
 	    createUserLoginNameTxt.click();
	 	createUserLoginNameTxt.sendKeys("UserAllOptions");
	 	
	 	
	 	Thread.sleep(2000);
		createUserERPRoleDropDown.click();
		
		createUserERPRoleDropDown.sendKeys("SampleRole1");
		
		
		Thread.sleep(2000);
		
		createUserERPRoleDropDown.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserPasswordTxt));
		createUserPasswordTxt.sendKeys("12345");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserPasswordConformTxt));
		createUserPasswordConformTxt.sendKeys("12345");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserNameTxt));
		createUserNameTxt.sendKeys("UserAllOptions");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserLoginAbbrivationTxt));
		createUserLoginAbbrivationTxt.sendKeys("UAO");
		
		createUserSecurityQuestionDropDown.sendKeys("In which country were you born?");
 		
		Thread.sleep(2000);
	 		
		createUserSecurityQuestionDropDown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserSecurityAnswerTxt));
		 	
		createUserSecurityAnswerTxt.sendKeys("India");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserUserInformationTab));
		createUserUserInformationTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserAdditionalInfoTab));
		createUserAdditionalInfoTab.click();

	 	 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserUserTypeIcon));
		Select user=new Select(createUserUserTypeIcon);
		user.selectByVisibleText("Customer");
	 	 
	 	 
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserEmailTxt));
 		createUserEmailTxt.click();
 		createUserEmailTxt.clear();
	 	createUserEmailTxt.sendKeys("naveenkumar@focussoftnet.com");
	 	
	 	
	 	for(int i=0;i<5;i++)
		{
			if(validationConfirmationMessage.getText().isEmpty()==false)
			{
				errorMessageCloseBtn.click();
			}
		}

	 	 Thread.sleep(2000);
	 	 
	 	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserSaveIcon));
	 	 createUserSaveIcon.click();
	 	 
	 	String expMessageUser="new user created successfully";
		
	 	String actMessageUser=checkValidationMessage(expMessageUser);
	 	
	 	Thread.sleep(3000);
		
	 	int userListCount = userList.size();
	 	
	 	for(int i=1;i<userListCount;i++)
	 	{
	 		String data = userList.get(i).getText();
	 		
	 		if(data.equalsIgnoreCase("UserAllOptions"))
	 		{
	 			userList.get(i).click();
	 			
	 			break;
	 		}
	 	}
	 	
	 	Thread.sleep(3000);
	 		
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserPosTab));
	 	createUserPosTab.click();
	 	
	 	Thread.sleep(3000);
	 	
	 	
	 	boolean actposUserTypeDropDown         = posUserTypeDropDown.isDisplayed();
	 	boolean actauthenticationCodeTxt       = authenticationCodeTxt.isDisplayed();
	 	boolean actmaxCreditAllowedTxt         = maxCreditAllowedTxt.isDisplayed();
	 	boolean actmaxReturnAllowedTxt         = maxReturnAllowedTxt.isDisplayed();
	 	boolean actmaxDiscountAllowedPercent   = maxDiscountAllowedPercent.isDisplayed();
	 	boolean actmaxDiscountAllowedDiscount  = maxDiscountAllowedDiscount.isDisplayed();
	 	boolean actmaxDiscountAllowedForEodTxt = maxDiscountAllowedForEodTxt.isDisplayed();
	 	boolean actpickCutOfFromDropDown       = pickCutOfFromDropDown.isDisplayed();
	 	
	 	boolean expposUserTypeDropDown         = true;
	 	boolean expauthenticationCodeTxt       = true;
	 	boolean expmaxCreditAllowedTxt         = true;
	 	boolean expmaxReturnAllowedTxt         = true;
	 	boolean expmaxDiscountAllowedPercent   = true;
	 	boolean expmaxDiscountAllowedDiscount  = true;
	 	boolean expmaxDiscountAllowedForEodTxt = true;
	 	boolean exppickCutOfFromDropDown       = true;
	 	
	 	
	 	Select posUserTypeDropDownSelect = new Select(posUserTypeDropDown);
	 	
	 	List <WebElement> elementCount = posUserTypeDropDownSelect.getOptions();
	 	int posUserTypeDropDownSize = elementCount.size();
	 	
	 	ArrayList<String> posUserTypeDropDownArray = new ArrayList<String>();
		 
	 	for(int i=1;i<posUserTypeDropDownSize;i++)
	 	{
	 		String data = posUserTypeDropDownSelect.getOptions().get(i).getText();
	 		posUserTypeDropDownArray.add(data);
	 	}
		 
		String actposUserTypeDropDownData = posUserTypeDropDownArray.toString();
		String expposUserTypeDropDownData = "[, Manager, Owner, Cashier, Supervisor, Waiter]";
		
		
		posUserTypeDropDownSelect.selectByVisibleText("Cashier");
		
		Thread.sleep(3000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserSaveIcon));
	 	createUserSaveIcon.click();
	 	
	 	String expValidationMessage="User updated successfully.";
		
	 	String actValidationMessage=checkValidationMessage(expValidationMessage);
	 	
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserCloseIcon));
		createUserCloseIcon.click();
	 	
	 	System.out.println("posUserTypeDropDown         : "+actposUserTypeDropDown         +" Value Expected : "+expposUserTypeDropDown);
	 	System.out.println("authenticationCodeTxt       : "+actauthenticationCodeTxt       +" Value Expected : "+expauthenticationCodeTxt);
	 	System.out.println("maxCreditAllowedTxt         : "+actmaxCreditAllowedTxt         +" Value Expected : "+expmaxCreditAllowedTxt);
	 	System.out.println("maxReturnAllowedTxt         : "+actmaxReturnAllowedTxt         +" Value Expected : "+expmaxReturnAllowedTxt);
	 	System.out.println("maxDiscountAllowedPercent   : "+actmaxDiscountAllowedPercent   +" Value Expected : "+expmaxDiscountAllowedPercent);
	 	System.out.println("maxDiscountAllowedDiscount  : "+actmaxDiscountAllowedDiscount  +" Value Expected : "+expmaxDiscountAllowedDiscount);
	 	System.out.println("maxDiscountAllowedForEodTxt : "+actmaxDiscountAllowedForEodTxt +" Value Expected : "+expmaxDiscountAllowedForEodTxt);
	 	System.out.println("pickCutOfFromDropDown       : "+actpickCutOfFromDropDown       +" Value Expected : "+exppickCutOfFromDropDown);
	 	
	 	System.out.println("actposUserTypeDropDownData : "+actposUserTypeDropDownData);
	 	System.out.println("expposUserTypeDropDownData : "+expposUserTypeDropDownData);
	 	
	 	if(actposUserTypeDropDown==expposUserTypeDropDown && actauthenticationCodeTxt==expauthenticationCodeTxt 
	 			&& actmaxCreditAllowedTxt==expmaxCreditAllowedTxt && actmaxReturnAllowedTxt==expmaxReturnAllowedTxt
	 			&& actmaxDiscountAllowedPercent==expmaxDiscountAllowedPercent && actmaxDiscountAllowedDiscount==expmaxDiscountAllowedDiscount
	 			&& actmaxDiscountAllowedForEodTxt==expmaxDiscountAllowedForEodTxt && actpickCutOfFromDropDown==exppickCutOfFromDropDown
	 			
	 			&& actposUserTypeDropDownData.equalsIgnoreCase(expposUserTypeDropDownData)
	 			&& actValidationMessage.equalsIgnoreCase(expValidationMessage))
	 	{
	 		excelReader.setCellData(xlfile, "Sheet4", 247, 9, resPass);
	 		return true;	
	 	}
	 	else
	 	{
	 		excelReader.setCellData(xlfile, "Sheet4", 247, 9, resFail);
	 		return false;
	 	}
	}
	
	
	public boolean checkupdatedPosSettingForUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
        excelReader=new ExcelReader(POJOUtility.getExcelPath());
    	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getDriver().navigate().refresh();
		
		Thread.sleep(8000);
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
    	homeMenu.click();
    				
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(securityMenu));
    	securityMenu.click();

 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserMenu));
 	    createUserMenu.click();
		
	 	int userListCount = userList.size();
	 	
	 	for(int i=1;i<userListCount;i++)
	 	{
	 		String data = userList.get(i).getText();
	 		
	 		if(data.equalsIgnoreCase("UserAllOptions"))
	 		{
	 			userList.get(i).click();
	 			
	 			break;
	 		}
	 	}
	 	
	 	Thread.sleep(3000);
	 		
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserPosTab));
	 	createUserPosTab.click();
	 	
	 	Thread.sleep(3000);
	 	
	 	
	 	Select posUserTypeDropDownSelect = new Select(posUserTypeDropDown);
	 	
		 
		String actposUserTypeDropDownData = posUserTypeDropDownSelect.getFirstSelectedOption().getText();
		String expposUserTypeDropDownData = "Cashier";
	 	
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserCloseIcon));
		createUserCloseIcon.click();
	 	
	 	
	 	System.out.println("actposUserTypeDropDownData : "+actposUserTypeDropDownData);
	 	System.out.println("expposUserTypeDropDownData : "+expposUserTypeDropDownData);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMenuTextHomePage));
	 	System.out.println("Setting buton is enabled");
	 	searchMenuTextHomePage.click();
	 	searchMenuTextHomePage.sendKeys("Configure Transactions");
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMenuTextClick));
	 	searchMenuTextClick.click();		
			
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AccountingDropdown));
		Select VatDropdownSelect = new Select(VatDropdown);
		VatDropdownSelect.selectByVisibleText("Place of supply");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();
			
		getWaitForAlert();
			
		String actAlertMgs  =getAlert().getText();
		String expAlertMgs  ="Do you want to save the changes?";
		
		getAlert().accept();
		
		String expMessage="Data saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
	 	
	 	if(actposUserTypeDropDownData.equalsIgnoreCase(expposUserTypeDropDownData))
	 	{
	 		excelReader.setCellData(xlfile, "Sheet4", 247, 9, resPass);
	 		return true;	
	 	}
	 	else
	 	{
	 		excelReader.setCellData(xlfile, "Sheet4", 247, 9, resFail);
	 		return false;
	 	}
	}

	
	@FindBy (xpath="//*[@id='1']/div/span")
    public static WebElement homeMenu;
	
	@FindBy (xpath="//*[@id='1000']/span")
    private static WebElement mastersMenu;
	
	
	@FindBy (xpath="//*[@id='8001']/span")
	private static WebElement pointOfSale;

		@FindBy (xpath="//*[@id='8005']/span")
		private static WebElement member;

			@FindBy (xpath="//*[@id='8009']/span")
			private static WebElement memberCardRegistration;
	
			@FindBy (xpath="//*[@id='1148']/span")
			private static WebElement memberType;
	
			@FindBy (xpath="//*[@id='1152']/span")
			private static WebElement memberMaster;
	
			@FindBy (xpath="//*[@id='1159']/span")
			private static WebElement memberCardDefinition;


		@FindBy (xpath="//*[@id='8006']/span")
		private static WebElement giftVoucher;

			@FindBy (xpath="//*[@id='8011']/span")
			private static WebElement giftVoucherRegistration;
	
			@FindBy (xpath="//span[contains(text(),'Gift Voucher Definition')]")
			private static WebElement giftVoucherDefinition;

		
		@FindBy (xpath="//*[@id='8035']/span")
		private static WebElement discountVoucher;

			@FindBy (xpath="//*[@id='8034']/span")
			private static WebElement discountVoucherRegistration;
	
			@FindBy (xpath="//span[contains(text(),'Discount Voucher Definition')]")
			private static WebElement discountVoucherDefinition;


		@FindBy (xpath="//*[@id='1025']/span")
		private static WebElement tableManagement;

			@FindBy (xpath="//*[@id='1154']/span")
			private static WebElement floor;
	
			@FindBy (xpath="//*[@id='1155']/span")
			private static WebElement section;
	
			@FindBy (xpath="//*[@id='1156']/span")
			private static WebElement table;
	
			@FindBy (xpath="//*[@id='1157']/span")
			private static WebElement guest;
	
			@FindBy (xpath="//*[@id='1158']/span")
			private static WebElement voidRemarks;

		@FindBy (xpath="//*[@id='1146']/span")
		private static WebElement outlet;
			
		@FindBy (xpath="//*[@id='1147']/span")
		private static WebElement counter;
	
		@FindBy (xpath="//*[@id='1150']/span")
		private static WebElement category;
	
		@FindBy (xpath="//*[@id='1151']/span")
		private static WebElement bankCardType;
			
		@FindBy (xpath="//*[@id='1160']/span")
		private static WebElement returnRemarks;
		
		@FindBy (xpath="//span[contains(text(),'Kitchen Display System')]")
		private static WebElement kitchenDisplaySystem;
	
		@FindBy (xpath="//span[contains(text(),'Delivery Time Interval')]")
		private static WebElement deliveryTimeInterval;
			
		@FindBy (xpath="//span[contains(text(),'E- Payment')]")
		private static WebElement epayment;
		
		
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[1]/ul/li[3]/ul/li[8]/ul/li")
	private static List<WebElement> pointofSaleMenuList;
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[1]/ul/li[3]/ul/li[8]/ul/li[1]/ul/li/a/span")
	private static List<WebElement> memberMenuList;
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[1]/ul/li[3]/ul/li[8]/ul/li[2]/ul/li/a/span")
	private static List<WebElement> giftVoucherMenuList;
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[1]/ul/li[3]/ul/li[8]/ul/li[3]/ul/li/a/span")
	private static List<WebElement> discountVoucherMenuList;
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[1]/ul/li[3]/ul/li[8]/ul/li[4]/ul/li/a/span")
	private static List<WebElement> tableManagementMenuList;
	
	
	public boolean checkPosMenuOptionsAndSubMenus() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	    
	    Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
		pointOfSale.click();
		
		Thread.sleep(2000);
		
		int pointofSaleMenuListCount = pointofSaleMenuList.size();
		
		ArrayList<String> pointofSaleMenuListArray = new ArrayList<String>();
		
		for(int i=0;i<pointofSaleMenuListCount;i++)
		{
			String data = pointofSaleMenuList.get(i).getText();
			
			pointofSaleMenuListArray.add(data);
		}
		
		String actpointofSaleMenuList      = pointofSaleMenuListArray.toString();
		String exppointofSaleMenuList      = "[Member, Gift Voucher, Discount Voucher, Table Management, Outlet, Counter, Category, Bank Card Type, Return Remarks, Employee Discount Definition, Delivery Time Interval, E- Payment, Order Type]";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(member));
		member.click();
		
		Thread.sleep(2000);
		
		int memberMenuListCount = memberMenuList.size();
		
		ArrayList<String> memberMenuListArray = new ArrayList<String>();
		
		for(int i=0;i<memberMenuListCount;i++)
		{
			String data = memberMenuList.get(i).getText();
			
			memberMenuListArray.add(data);
		}
		
		String actmemberMenuList      = memberMenuListArray.toString();
		String expmemberMenuList      = "[Member Card Series Registration, Member Points Definition, Member Points Opening Balance, Member Type, Member, Member Card Definition]";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(giftVoucher));
		giftVoucher.click();
		
		Thread.sleep(2000);
		
		int giftVoucherMenuListCount = giftVoucherMenuList.size();
		
		ArrayList<String> giftVoucherMenuListArray = new ArrayList<String>();
		
		for(int i=0;i<giftVoucherMenuListCount;i++)
		{
			String data = giftVoucherMenuList.get(i).getText();
			
			giftVoucherMenuListArray.add(data);
		}
		
		String actgiftVoucherMenuList      = giftVoucherMenuListArray.toString();
		String expgiftVoucherMenuList      = "[Gift Voucher Registration, Gift Voucher Definition]";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountVoucher));
		discountVoucher.click();
		
		Thread.sleep(2000);
		
		int discountVoucherMenuListCount = discountVoucherMenuList.size();
		
		ArrayList<String> discountVoucherMenuListArray = new ArrayList<String>();
		
		for(int i=0;i<discountVoucherMenuListCount;i++)
		{
			String data = discountVoucherMenuList.get(i).getText();
			
			discountVoucherMenuListArray.add(data);
		}
		
		String actdiscountVoucherMenuList      = discountVoucherMenuListArray.toString();
		String expdiscountVoucherMenuList      = "[Discount Voucher Registration, Discount Voucher Definition]";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tableManagement));
		tableManagement.click();
		
		Thread.sleep(2000);
		
		int tableManagementMenuListCount = tableManagementMenuList.size();
		
		ArrayList<String> tableManagementMenuListArray = new ArrayList<String>();
		
		for(int i=0;i<tableManagementMenuListCount;i++)
		{
			String data = tableManagementMenuList.get(i).getText();
			
			tableManagementMenuListArray.add(data);
		}
		
		String acttableManagementMenuList      = tableManagementMenuListArray.toString();
		String exptableManagementMenuList      = "[Floor, Section, Table, Guest, Void Remarks]";
	    
		
		System.out.println("******************************checkPosMenuOptionsAndSubMenus************************");
		
		System.out.println("actpointofSaleMenuList  : "+actpointofSaleMenuList);
		System.out.println("exppointofSaleMenuList  : "+exppointofSaleMenuList);
		System.out.println("actmemberMenuList       : "+actmemberMenuList);
		System.out.println("expmemberMenuList       : "+expmemberMenuList);
		System.out.println("actgiftVoucherMenuList  : "+actgiftVoucherMenuList);
		System.out.println("expgiftVoucherMenuList  : "+expgiftVoucherMenuList);
		System.out.println("discountVoucherMenuList : "+actdiscountVoucherMenuList);
		System.out.println("discountVoucherMenuList : "+expdiscountVoucherMenuList);
		System.out.println("tableManagementMenuList : "+acttableManagementMenuList);
		System.out.println("tableManagementMenuList : "+exptableManagementMenuList);
		
		if(actpointofSaleMenuList.equalsIgnoreCase(exppointofSaleMenuList) && actmemberMenuList.equalsIgnoreCase(expmemberMenuList)
				&& actgiftVoucherMenuList.equalsIgnoreCase(expgiftVoucherMenuList) && actdiscountVoucherMenuList.equalsIgnoreCase(expdiscountVoucherMenuList))
		{
			System.out.println("Test Pass : Documentation Customization Tab is Available");
			excelReader.setCellData(xlfile, "Sheet2", 100, 9, resPass);
			return true;
	
		}
		else
		{
			System.out.println("Test Fail : Documentation Customization Tab is Not Available");
			excelReader.setCellData(xlfile, "Sheet2", 100, 9, resFail);
			return false;
		}
	}
	
	
	
	
	@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[10]")
  	private static List<WebElement> posNameList;
  	
  	@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[8]/div/label/input")
  	private static List<WebElement> posListChkBox;
  	
  	
  	@FindBy(xpath="//i[@class='icon-font6 icon-new']")
	public static WebElement masterNewBtn;
		
	@FindBy(xpath="//i[@class='icon-font6 icon-add-group']")
	public static WebElement masterAddGroupBtn; 
	 
	@FindBy(xpath="//i[@class='icon-font6 icon-edit']")
	public static WebElement masterEditBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-clone']")
	public static WebElement masterCloneBtn; 

	@FindBy(xpath="//i[@class='icon-properties icon-font6']")
	public static WebElement masterPropertiesBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-delete']")
	public static WebElement masterDeleteBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-close']")
	public static WebElement masterCloseBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-group']")
	public static WebElement masterGroupBtn; 
	
	@FindBy(xpath="//*[@id='toggle_ribbon']")
	public static WebElement masterRibbonToExpandOptions; 
	
	
	@FindBy(xpath="//i[@class='icon-font6 icon-delete-all']")
	public static WebElement masterDeleteAllBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-closed-account']")
	public static WebElement masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity; 

	@FindBy(xpath="//i[@class='icon-font6 icon-open-close-account']")
	public static WebElement masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState; 

	@FindBy(xpath="//i[@class='icon-font6 icon-import']")
	public static WebElement masterAdvanceMasterImportORExportBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-info']")
	public static WebElement masterAuthorInfoBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-up-arrow']")
	public static WebElement masterMoveUpBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-down-arrow']")
	public static WebElement masterMoveDownBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-sort']")
	public static WebElement masterSortBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-mass-update']")
	public static WebElement masterMassUpdateBtn; 

	@FindBy(xpath="//a[@class='lSNext']")
	public static WebElement masterRibbonControlNextBtn; 
	
	@FindBy(xpath="//*[@id='btnXMLImport']")
	public static WebElement masterImportFromXmlBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-xmlexport']")
	public static WebElement masterExportFormatToXmlBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-custamize']")
	public static WebElement masterCustamizemasterBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-options']")
	public static WebElement masterCustamizeViewBtn; 

	@FindBy(xpath="//i[@class='icon-font6 icon-tree']")
	public static WebElement mastercustamizeTreeBtn; 
	
	@FindBy(xpath="//span[@id='toggle_ribbon']")
	public static WebElement masterRibbonToMinimizeOptions; 
	
	
	public boolean checkDefaultMemberAndOptionsAvailable() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSelectingActivateRetailSalesAndUpdate Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(member));
			member.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberMaster));
			memberMaster.click();
			
			int actposNameListCount = posNameList.size();
			int expposNameListCount = 1;
			
			System.out.println("posNameListCount Value Actual   : " +actposNameListCount    + " Value Expected : " +expposNameListCount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
			     
			boolean actmasterNewBtn    	 		   =masterNewBtn.isDisplayed();
			boolean actmasterAddGroupBtn    	   =masterAddGroupBtn.isDisplayed();
			boolean actmasterEditBtn 			   =masterEditBtn.isDisplayed();
			boolean actmasterCloneBtn 			   =masterCloneBtn.isDisplayed();
			boolean actmasterPropertiesBtn 		   =masterPropertiesBtn.isDisplayed();
			boolean actmasterDeleteBtn 			   =masterDeleteBtn.isDisplayed();
			boolean actmasterCloseBtn 		 	   =masterCloseBtn.isDisplayed();
			boolean actmasterRibbonToExpandOptions =masterRibbonToExpandOptions.isDisplayed();
			
			boolean expmasterNewBtn    	 			=true;
			boolean expmasterAddGroupBtn    		=true;
			boolean expmasterEditBtn 				=true;
			boolean expmasterCloneBtn 				=true;
			boolean expmasterPropertiesBtn 			=true;
			boolean expmasterDeleteBtn 				=true;
			boolean expmasterCloseBtn 				=true;
			boolean expmasterRibbonToExpandOptions 	=true;
			
			
			
			System.out.println("masterNewBtn                  : "+actmasterNewBtn                +" Value Expected : "+expmasterNewBtn);
			System.out.println("masterAddGroupBtn             : "+actmasterAddGroupBtn           +" Value Expected : "+expmasterAddGroupBtn);
			System.out.println("masterEditBtn                 : "+actmasterEditBtn               +" Value Expected : "+expmasterEditBtn);
			System.out.println("masterCloneBtn                : "+actmasterCloneBtn              +" Value Expected : "+expmasterCloneBtn);
			System.out.println("masterPropertiesBtn           : "+actmasterPropertiesBtn         +" Value Expected : "+expmasterPropertiesBtn);
			System.out.println("masterDeleteBtn               : "+actmasterDeleteBtn             +" Value Expected : "+expmasterDeleteBtn);
			System.out.println("masterCloseBtn                : "+actmasterCloseBtn              +" Value Expected : "+expmasterCloseBtn);
			System.out.println("masterRibbonToExpandOptions   : "+actmasterRibbonToExpandOptions +" Value Expected : "+expmasterRibbonToExpandOptions);
				
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
			masterRibbonToExpandOptions.click();
				 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));	
			
			boolean actmasterGroupBtn    	 													=masterGroupBtn.isDisplayed();
			boolean actmasterDeleteAllBtn    	 												=masterDeleteAllBtn.isDisplayed();
			boolean actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
			boolean actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
			boolean actmasterAdvanceMasterImportORExportBtn    	 								=masterAdvanceMasterImportORExportBtn.isDisplayed();
			boolean actmasterAuthorInfoBtn    	 												=masterAuthorInfoBtn.isDisplayed();
			boolean actmasterMoveUpBtn    	 													=masterMoveUpBtn.isDisplayed();
			boolean actmasterMoveDownBtn    	 												=masterMoveDownBtn.isDisplayed();
			boolean actmasterSortBtn    	 													=masterSortBtn.isDisplayed();
			boolean actmasterMassUpdateBtn    	 												=masterMassUpdateBtn.isDisplayed();
			boolean actmasterImportFromXmlBtn    	 											=masterImportFromXmlBtn.isDisplayed();
			boolean actmasterExportFormatToXmlBtn    	 										=masterExportFormatToXmlBtn.isDisplayed();
			
			boolean expmasterGroupBtn    	 													=true;
			boolean expmasterDeleteAllBtn    	 												=true;
			boolean expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=true;
			boolean expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=true;
			boolean expmasterAdvanceMasterImportORExportBtn    	 								=true;
			boolean expmasterAuthorInfoBtn    	 												=true;
			boolean expmasterMoveUpBtn    	 													=true;
			boolean expmasterMoveDownBtn    	 												=true;
			boolean expmasterSortBtn    	 													=true;
			boolean expmasterMassUpdateBtn    	 												=true;
			boolean expmasterImportFromXmlBtn    	 											=true;
			boolean expmasterExportFormatToXmlBtn    	 										=true;
			
			
			System.out.println("masterGroupBtn                                                      : "+actmasterGroupBtn                                                      +" Value Expected : "+expmasterGroupBtn);
			System.out.println("masterDeleteAllBtn                                                  : "+actmasterDeleteAllBtn                                                  +" Value Expected : "+expmasterDeleteAllBtn);
			System.out.println("masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity : "+actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity +" Value Expected : "+expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity);
			System.out.println("masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          : "+actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          +" Value Expected : "+expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState);
			System.out.println("masterAdvanceMasterImportORExportBtn                                : "+actmasterAdvanceMasterImportORExportBtn                                +" Value Expected : "+expmasterAdvanceMasterImportORExportBtn);
			System.out.println("masterAuthorInfoBtn                                                 : "+actmasterAuthorInfoBtn                                                 +" Value Expected : "+expmasterAuthorInfoBtn);
			System.out.println("masterMoveUpBtn                                                     : "+actmasterMoveUpBtn                                                     +" Value Expected : "+expmasterMoveUpBtn);
			System.out.println("masterMoveDownBtn                                                   : "+actmasterMoveDownBtn                                                   +" Value Expected : "+expmasterMoveDownBtn);
			System.out.println("masterSortBtn                                                       : "+actmasterSortBtn                                                       +" Value Expected : "+expmasterSortBtn);
			System.out.println("masterMassUpdateBtn                                                 : "+actmasterMassUpdateBtn                                                 +" Value Expected : "+expmasterMassUpdateBtn);
			System.out.println("masterImportFromXmlBtn                                              : "+actmasterImportFromXmlBtn                                              +" Value Expected : "+expmasterImportFromXmlBtn);
			System.out.println("masterExportFormatToXmlBtn                                          : "+actmasterExportFormatToXmlBtn                                          +" Value Expected : "+expmasterExportFormatToXmlBtn);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
			 
			masterRibbonControlNextBtn.click(); 
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizemasterBtn));	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
			
			boolean actmasterCustamizemasterBtn    	  =masterCustamizemasterBtn.isDisplayed();
			boolean actmasterCustamizeViewBtn    	  =masterCustamizeViewBtn.isDisplayed();
			boolean actmastercustamizeTreeBtn    	  =mastercustamizeTreeBtn.isDisplayed();
			 
			boolean expmasterCustamizemasterBtn    	  =true;
			boolean expmasterCustamizeViewBtn    	  =true;
			boolean expmastercustamizeTreeBtn    	  =true;
			 
			 
			 
			System.out.println("masterCustamizemasterBtn           : "+actmasterCustamizemasterBtn           +" Value Expected : "+expmasterCustamizemasterBtn);
			System.out.println("masterCustamizeViewBtn             : "+actmasterCustamizeViewBtn             +" Value Expected : "+expmasterCustamizeViewBtn);
			System.out.println("mastercustamizeTreeBtn             : "+actmastercustamizeTreeBtn             +" Value Expected : "+expmastercustamizeTreeBtn);
				
	       
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToMinimizeOptions));
			masterRibbonToMinimizeOptions.click();
			
			if(actposNameListCount==expposNameListCount
					
					&& actmasterNewBtn==expmasterNewBtn && actmasterAddGroupBtn==expmasterAddGroupBtn && actmasterEditBtn==expmasterEditBtn
					&& actmasterCloneBtn==expmasterCloneBtn && actmasterPropertiesBtn==expmasterPropertiesBtn && actmasterDeleteBtn==expmasterDeleteBtn
					&& actmasterCloseBtn==expmasterCloseBtn && actmasterRibbonToExpandOptions==expmasterRibbonToExpandOptions
					
					&& actmasterGroupBtn==expmasterGroupBtn && actmasterDeleteAllBtn==expmasterDeleteAllBtn 
					&& actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity==expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity
					&& actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState==expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState 
					&& actmasterAdvanceMasterImportORExportBtn==expmasterAdvanceMasterImportORExportBtn
					&& actmasterAuthorInfoBtn==expmasterAuthorInfoBtn && actmasterMoveUpBtn==expmasterMoveUpBtn && actmasterMoveDownBtn==expmasterMoveDownBtn
					&& actmasterSortBtn==expmasterSortBtn && actmasterMassUpdateBtn==expmasterMassUpdateBtn && actmasterImportFromXmlBtn==expmasterImportFromXmlBtn
					&& actmasterExportFormatToXmlBtn==expmasterExportFormatToXmlBtn
					
					&& actmasterCustamizemasterBtn==expmasterCustamizemasterBtn && actmasterCustamizeViewBtn==expmasterCustamizeViewBtn  
					&& actmastercustamizeTreeBtn==expmastercustamizeTreeBtn )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	@FindBy(xpath="//ul[@class='nav nav-tabs ulForTabs navbar-nav theme_background-color']/li/div/div/a")
	private static List<WebElement> newHeaderTabList;
	
	@FindBy(xpath="//*[@id='divBtnGroup0']/div/a")
	public static WebElement headerGeneralTab;
	
	@FindBy(xpath="//input[@id='sName']")
	public static WebElement memberNameTxt;
	
	@FindBy(xpath="//input[@id='sCode']")
	public static WebElement memberCodeTxt;
	
	@FindBy(xpath="//input[@id='sMiddleName']")
	public static WebElement memberMiddleNameTxt;
	
	@FindBy(xpath="//input[@id='sLastName']")
	public static WebElement memberLastNameTxt;
	
	@FindBy(xpath="//select[@id='iTitle']")
	public static WebElement memberTitleDropDown;
	
	@FindBy(xpath="//select[@id='iGender']")
	public static WebElement memberGenderDropdown;
	
	@FindBy(xpath="//input[@id='bActive']")
	public static WebElement memberActiveChkBox;
	
	@FindBy(xpath="//input[@id='iDOB_checkbox']")
	public static WebElement memberDobChkBox;
	
	@FindBy(xpath="//td[@id='iDOB_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	public static WebElement memberDobCalendarBtn;
	
	@FindBy(xpath="//input[@id='iAge2']")
	public static WebElement memberAgeTxt;
	
	@FindBy(xpath="//*[@id='iMemberType']")
	public static WebElement memberMemberTypeTxt;
	
	@FindBy(xpath="//tbody[@id='iMemberType_table_data_body']/tr/td")
	public static List<WebElement> memberMemberTypeBodyList;
	
	@FindBy(xpath="//input[@id='BrowsepPhoto']")
	public static WebElement memberAttachPhotoBtn;
	
	@FindBy(xpath="//a[@id='SaveImg']")
	public static WebElement memberSaveImgBtn;
	
	@FindBy(xpath="//i[@class='fa fa-eraser RemoveImg']")
	public static WebElement memberEraseImgBtn;
	
	@FindBy(xpath="//input[@id='iAnniversaryDate_checkbox']")
	public static WebElement memberAnniversaryDateChkBox;
	
	@FindBy(xpath="//td[@id='iAnniversaryDate_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	public static WebElement memberAnniversaryDateCalendarBtn;
	
	@FindBy(xpath="//*[@id='divBtnGroup1']/div/a")
	public static WebElement headerContactDetailsTab;
	
	@FindBy(xpath="//textarea[@id='sAddress1']")
	public static WebElement memberAddress1Txt;
	
	@FindBy(xpath="//textarea[@id='sAddress2']")
	public static WebElement memberAddress2Txt;
	
	@FindBy(xpath="//input[@id='iCountry']")
	public static WebElement memberCountryTxt;
	
	@FindBy(xpath="//input[@id='iState']")
	public static WebElement memberStateTxt;
	
	@FindBy(xpath="//input[@id='iCity']")
	public static WebElement memberCityTxt;
	
	@FindBy(xpath="//input[@id='sZipCode']")
	public static WebElement memberZipCodeTxt;
	
	@FindBy(xpath="//select[@id='iPreferedwayofcontact']")
	public static WebElement memberPreferedWayToContactDropdown;
	
	@FindBy(xpath="//input[@id='iPhoneRes']")
	public static WebElement memberPhoneResTxt;
	
	@FindBy(xpath="//input[@id='iPhoneOffice']")
	public static WebElement memberPhoneOfcTxt;
	
	@FindBy(xpath="//input[@id='iMobile']")
	public static WebElement memberMobileTxt;
	
	@FindBy(xpath="//input[@id='sEMail']")
	public static WebElement memberEmailTxt;
	
	@FindBy(xpath="//input[@id='sFax']")
	public static WebElement memberFaxTxt;
	
	@FindBy(xpath="//*[@id='divBtnGroup2']/div/a")
	public static WebElement headerOtherDetailsTab;
	
	@FindBy(xpath="//input[@id='iPointsAccumulated']")
	public static WebElement memberPointsAccumlatedTxt;
	
	@FindBy(xpath="//input[@id='bDelivery']")
	public static WebElement memberDeliveryChkBox;
	
	@FindBy(xpath="//input[@id='iNearestoutlet']")
	public static WebElement memberNearestOutletTxt;
	
	@FindBy(xpath="//input[@id='fDistancefromoutlet']")
	public static WebElement memberDistanceFromOutletTxt;
	
	@FindBy(xpath="//input[@id='Blacklist']")
	public static WebElement memberBlackListChkBox;
	
	@FindBy(xpath="//textarea[@id='sReasonforblacklist']")
	public static WebElement memberReasonForBlackListTxt;
	
	@FindBy(xpath="//input[@id='sFavouriteBrand']")
	public static WebElement memberFavouriteBrandTxt;
	
	@FindBy(xpath="//input[@id='sProfessionDetails']")
	public static WebElement memberProfessionDetailsTxt;
	
	@FindBy(xpath="//input[@id='iLastPurchaseDate_checkbox']")
	public static WebElement memberLastPurchaseDateChkBox;
	
	@FindBy(xpath="//td[@id='iLastPurchaseDate_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	public static WebElement memberLastPurchaseDateCalendarBtn;
	
	@FindBy(xpath="//input[@id='iPointsRedemptionAccount']")
	public static WebElement memberPointsRedemptionAccountTxt;
	
	@FindBy(xpath="//input[@id='iCreditSaleAccount']")
	public static WebElement memberCreditSalesAccountTxt;
	
	@FindBy(xpath="//*[@id='divBtnGroup3']/div/a")
	public static WebElement headerCardDetailsTab;
	
	@FindBy(xpath="//input[@id='iPrimaryMemberToMergeCard']")
	public static WebElement memberPrimaryMemberToMergeCardTxt;
	
	@FindBy(xpath="//*[@id='tblNewMasterGenerator']/thead/tr/th/label")
	public static List<WebElement> memberCardDetailsGridHeaderList;
	
	
	@FindBy(xpath="//*[@id='divBtnGroup4']/div/a")
	public static WebElement headerKycTab;
	
	
	@FindBy(xpath="//*[@id='tblNewMasterGenerator']/thead/tr/th/label")
	public static List<WebElement> memberKycGridHeaderList;
	
	
	@FindBy(xpath="//*[@id='btnMasterSaveClick']")
	public static WebElement saveBtn;

	@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	public static WebElement closeBtn;
	
	
	public boolean checkNewOptionInMemberAndCheckMandateMessageOnSavingNewMember() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkNewOptionInMemberAndCheckMandateMessageOnSavingNewMember Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			int newHeaderTabListCount = newHeaderTabList.size();
			
			ArrayList<String> newHeaderTabListArray = new ArrayList<String>();
			
			for(int i=0;i<newHeaderTabListCount;i++)
			{
				String data = newHeaderTabList.get(i).getText();
				
				newHeaderTabListArray.add(data);
			}
			
			String actnewHeaderTabList = newHeaderTabListArray.toString();
			String expnewHeaderTabList = "[General, Contact Details, Other Details, Card Details, KYC, ]";
			
			System.out.println("actnewHeaderTabList : "+actnewHeaderTabList);
			System.out.println("expnewHeaderTabList : "+expnewHeaderTabList);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
			headerGeneralTab.click();
			
			Thread.sleep(2000);
			
			boolean actmemberNameTxt                    = memberNameTxt.isDisplayed();
			boolean actmemberCodeTxt                    = memberCodeTxt.isDisplayed();
			boolean actmemberMiddleNameTxt              = memberMiddleNameTxt.isDisplayed();
			boolean actmemberLastNameTxt                = memberLastNameTxt.isDisplayed();
			boolean actmemberTitleDropDown              = memberTitleDropDown.isDisplayed();
			boolean actmemberGenderDropdown             = memberGenderDropdown.isDisplayed();
			boolean actmemberActiveChkBox               = memberActiveChkBox.isDisplayed();
			boolean actmemberDobChkBox                  = memberDobChkBox.isDisplayed();
			boolean actmemberDobCalendarBtn             = memberDobCalendarBtn.isDisplayed();
			boolean actmemberAgeTxt                     = memberAgeTxt.isDisplayed();
			boolean actmemberMemberTypeTxt              = memberMemberTypeTxt.isDisplayed();
			//boolean actmemberAttachPhotoBtn             = memberAttachPhotoBtn.isDisplayed();
			boolean actmemberSaveImgBtn                 = memberSaveImgBtn.isDisplayed();
			boolean actmemberEraseImgBtn                = memberEraseImgBtn.isDisplayed();
			boolean actmemberAnniversaryDateChkBox      = memberAnniversaryDateChkBox.isDisplayed();
			boolean actmemberAnniversaryDateCalendarBtn = memberAnniversaryDateCalendarBtn.isDisplayed();
			
			boolean expmemberNameTxt                    = true;
			boolean expmemberCodeTxt                    = true;
			boolean expmemberMiddleNameTxt              = true;
			boolean expmemberLastNameTxt                = true;
			boolean expmemberTitleDropDown              = true;
			boolean expmemberGenderDropdown             = true;
			boolean expmemberActiveChkBox               = true;
			boolean expmemberDobChkBox                  = true;
			boolean expmemberDobCalendarBtn             = true;
			boolean expmemberAgeTxt                     = true;
			boolean expmemberMemberTypeTxt              = true;
			//boolean expmemberAttachPhotoBtn             = true;
			boolean expmemberSaveImgBtn                 = true;
			boolean expmemberEraseImgBtn                = true;
			boolean expmemberAnniversaryDateChkBox      = true;
			boolean expmemberAnniversaryDateCalendarBtn = true;
			
			System.out.println("memberNameTxt                    : "+actmemberNameTxt                    +" Value Expected : "+expmemberNameTxt);
			System.out.println("memberCodeTxt                    : "+actmemberCodeTxt                    +" Value Expected : "+expmemberCodeTxt);
			System.out.println("memberMiddleNameTxt              : "+actmemberMiddleNameTxt              +" Value Expected : "+expmemberMiddleNameTxt);
			System.out.println("memberLastNameTxt                : "+actmemberLastNameTxt                +" Value Expected : "+expmemberLastNameTxt);
			System.out.println("memberTitleDropDown              : "+actmemberTitleDropDown              +" Value Expected : "+expmemberTitleDropDown);
			System.out.println("memberGenderDropdown             : "+actmemberGenderDropdown             +" Value Expected : "+expmemberGenderDropdown);
			System.out.println("memberActiveChkBox               : "+actmemberActiveChkBox               +" Value Expected : "+expmemberActiveChkBox);
			System.out.println("memberDobChkBox                  : "+actmemberDobChkBox                  +" Value Expected : "+expmemberDobChkBox);
			System.out.println("memberDobCalendarBtn             : "+actmemberDobCalendarBtn             +" Value Expected : "+expmemberDobCalendarBtn);
			System.out.println("memberAgeTxt                     : "+actmemberAgeTxt                     +" Value Expected : "+expmemberAgeTxt);
			System.out.println("memberMemberTypeTxt              : "+actmemberMemberTypeTxt              +" Value Expected : "+expmemberMemberTypeTxt);
			//System.out.println("memberAttachPhotoBtn             : "+actmemberAttachPhotoBtn             +" Value Expected : "+expmemberAttachPhotoBtn);
			System.out.println("memberSaveImgBtn                 : "+actmemberSaveImgBtn                 +" Value Expected : "+expmemberSaveImgBtn);
			System.out.println("memberEraseImgBtn                : "+actmemberEraseImgBtn                +" Value Expected : "+expmemberEraseImgBtn);
			System.out.println("memberAnniversaryDateChkBox      : "+actmemberAnniversaryDateChkBox      +" Value Expected : "+expmemberAnniversaryDateChkBox);
			System.out.println("memberAnniversaryDateCalendarBtn : "+actmemberAnniversaryDateCalendarBtn +" Value Expected : "+expmemberAnniversaryDateCalendarBtn);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerContactDetailsTab));
			headerContactDetailsTab.click();
			
			Thread.sleep(2000);
			
			boolean actmemberAddress1Txt                    = memberAddress1Txt.isDisplayed();
			boolean actmemberAddress2Txt                    = memberAddress2Txt.isDisplayed();
			boolean actmemberCountryTxt                     = memberCountryTxt.isDisplayed();
			boolean actmemberStateTxt                       = memberStateTxt.isDisplayed();
			boolean actmemberCityTxt                        = memberCityTxt.isDisplayed();
			boolean actmemberZipCodeTxt                     = memberZipCodeTxt.isDisplayed();
			boolean actmemberPreferedWayToContactDropdown   = memberPreferedWayToContactDropdown.isDisplayed();
			boolean actmemberPhoneResTxt                    = memberPhoneResTxt.isDisplayed();
			boolean actmemberPhoneOfcTxt                    = memberPhoneOfcTxt.isDisplayed();
			boolean actmemberMobileTxt                      = memberMobileTxt.isDisplayed();
			boolean actmemberEmailTxt                       = memberEmailTxt.isDisplayed();
			boolean actmemberFaxTxt                         = memberFaxTxt.isDisplayed();
			
			boolean expmemberAddress1Txt                    = true;
			boolean expmemberAddress2Txt                    = true;
			boolean expmemberCountryTxt                     = true;
			boolean expmemberStateTxt                       = true;
			boolean expmemberCityTxt                        = true;
			boolean expmemberZipCodeTxt                     = true;
			boolean expmemberPreferedWayToContactDropdown   = true;
			boolean expmemberPhoneResTxt                    = true;
			boolean expmemberPhoneOfcTxt                    = true;
			boolean expmemberMobileTxt                      = true;
			boolean expmemberEmailTxt                       = true;
			boolean expmemberFaxTxt                         = true;
			
			
			System.out.println("memberAddress1Txt                   : "+actmemberAddress1Txt                    +" Value Expected : "+expmemberAddress1Txt);
			System.out.println("memberAddress2Txt                   : "+actmemberAddress2Txt                    +" Value Expected : "+expmemberAddress2Txt);
			System.out.println("memberCountryTxt                    : "+actmemberCountryTxt                     +" Value Expected : "+expmemberCountryTxt);
			System.out.println("memberStateTxt                      : "+actmemberStateTxt                       +" Value Expected : "+expmemberStateTxt);
			System.out.println("memberCityTxt                       : "+actmemberCityTxt                        +" Value Expected : "+expmemberCityTxt);
			System.out.println("memberZipCodeTxt                    : "+actmemberZipCodeTxt                     +" Value Expected : "+expmemberZipCodeTxt);
			System.out.println("memberPreferedWayToContactDropdown  : "+actmemberPreferedWayToContactDropdown   +" Value Expected : "+expmemberPreferedWayToContactDropdown);
			System.out.println("memberPhoneResTxt                   : "+actmemberPhoneResTxt                    +" Value Expected : "+expmemberPhoneResTxt);
			System.out.println("memberPhoneOfcTxt                   : "+actmemberPhoneOfcTxt                    +" Value Expected : "+expmemberPhoneOfcTxt);
			System.out.println("memberMobileTxt                     : "+actmemberMobileTxt                      +" Value Expected : "+expmemberMobileTxt);
			System.out.println("memberEmailTxt                      : "+actmemberEmailTxt                       +" Value Expected : "+expmemberEmailTxt);
			System.out.println("memberFaxTxt                        : "+actmemberFaxTxt                         +" Value Expected : "+expmemberFaxTxt);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerOtherDetailsTab));
			headerOtherDetailsTab.click();
			
			Thread.sleep(2000);
			
			boolean actmemberPointsAccumlatedTxt            = memberPointsAccumlatedTxt.isDisplayed();
			boolean actmemberDeliveryChkBox                 = memberDeliveryChkBox.isDisplayed();
			boolean actmemberNearestOutletTxt               = memberNearestOutletTxt.isDisplayed();
			boolean actmemberDistanceFromOutletTxt          = memberDistanceFromOutletTxt.isDisplayed();
			boolean actmemberBlackListChkBox                = memberBlackListChkBox.isDisplayed();
			boolean actmemberReasonForBlackListTxt          = memberReasonForBlackListTxt.isDisplayed();
			boolean actmemberFavouriteBrandTxt              = memberFavouriteBrandTxt.isDisplayed();
			boolean actmemberProfessionDetailsTxt           = memberProfessionDetailsTxt.isDisplayed();
			boolean actmemberLastPurchaseDateChkBox         = memberLastPurchaseDateChkBox.isDisplayed();
			boolean actmemberLastPurchaseDateCalendarBtn    = memberLastPurchaseDateCalendarBtn.isDisplayed();
			boolean actmemberPointsRedemptionAccountTxt     = memberPointsRedemptionAccountTxt.isDisplayed();
			boolean actmemberCreditSalesAccountTxt          = memberCreditSalesAccountTxt.isDisplayed();
			
			boolean expmemberPointsAccumlatedTxt            = true;
			boolean expmemberDeliveryChkBox                 = true;
			boolean expmemberNearestOutletTxt               = true;
			boolean expmemberDistanceFromOutletTxt          = true;
			boolean expmemberBlackListChkBox                = true;
			boolean expmemberReasonForBlackListTxt          = true;
			boolean expmemberFavouriteBrandTxt              = true;
			boolean expmemberProfessionDetailsTxt           = true;
			boolean expmemberLastPurchaseDateChkBox         = true;
			boolean expmemberLastPurchaseDateCalendarBtn    = true;
			boolean expmemberPointsRedemptionAccountTxt     = true;
			boolean expmemberCreditSalesAccountTxt          = true;
			
			
			
			System.out.println("memberPointsAccumlatedTxt            : "+actmemberPointsAccumlatedTxt             +" Value Expected : "+expmemberPointsAccumlatedTxt);
			System.out.println("memberDeliveryChkBox                 : "+actmemberDeliveryChkBox                  +" Value Expected : "+expmemberDeliveryChkBox);
			System.out.println("memberNearestOutletTxt               : "+actmemberNearestOutletTxt                +" Value Expected : "+expmemberNearestOutletTxt);
			System.out.println("memberDistanceFromOutletTxt          : "+actmemberDistanceFromOutletTxt           +" Value Expected : "+expmemberDistanceFromOutletTxt);
			System.out.println("memberBlackListChkBox                : "+actmemberBlackListChkBox                 +" Value Expected : "+expmemberBlackListChkBox);
			System.out.println("memberReasonForBlackListTxt          : "+actmemberReasonForBlackListTxt           +" Value Expected : "+expmemberReasonForBlackListTxt);
			System.out.println("memberFavouriteBrandTxt              : "+actmemberFavouriteBrandTxt               +" Value Expected : "+expmemberFavouriteBrandTxt);
			System.out.println("memberProfessionDetailsTxt           : "+actmemberProfessionDetailsTxt            +" Value Expected : "+expmemberProfessionDetailsTxt);
			System.out.println("memberLastPurchaseDateChkBox         : "+actmemberLastPurchaseDateChkBox          +" Value Expected : "+expmemberLastPurchaseDateChkBox);
			System.out.println("memberLastPurchaseDateCalendarBtn    : "+actmemberLastPurchaseDateCalendarBtn     +" Value Expected : "+expmemberLastPurchaseDateCalendarBtn);
			System.out.println("memberPointsRedemptionAccountTxt     : "+actmemberPointsRedemptionAccountTxt      +" Value Expected : "+expmemberPointsRedemptionAccountTxt);
			System.out.println("memberCreditSalesAccountTxt          : "+actmemberCreditSalesAccountTxt           +" Value Expected : "+expmemberCreditSalesAccountTxt);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerCardDetailsTab));
			headerCardDetailsTab.click();
			
			Thread.sleep(2000);
			
			boolean actmemberPrimaryMemberToMergeCardTxt          = memberPrimaryMemberToMergeCardTxt.isDisplayed();
			boolean expmemberPrimaryMemberToMergeCardTxt 		  = true;
			
			int memberCardDetailsGridHeaderListCount = memberCardDetailsGridHeaderList.size();
			
			ArrayList<String> memberCardDetailsGridHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<memberCardDetailsGridHeaderListCount;i++)
			{
				String data = memberCardDetailsGridHeaderList.get(i).getText();
				
				memberCardDetailsGridHeaderListArray.add(data);
			}
			
			String actmemberCardDetailsGridHeaderList = memberCardDetailsGridHeaderListArray.toString();
			String expmemberCardDetailsGridHeaderList = "[, , Card Name, Card Number, Issue Date, Expiry Date, Active, , , , , , ]";
			
			
			System.out.println("memberPrimaryMemberToMergeCardTxt : "+actmemberPrimaryMemberToMergeCardTxt+" Value Expected : "+expmemberPrimaryMemberToMergeCardTxt);
			System.out.println("actmemberCardDetailsGridHeaderList   : "+actmemberCardDetailsGridHeaderList);
			System.out.println("expmemberCardDetailsGridHeaderList   : "+expmemberCardDetailsGridHeaderList);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerKycTab));
			headerKycTab.click();
			
			Thread.sleep(2000);
			
			
			int memberKycGridHeaderListCount = memberKycGridHeaderList.size();
			
			ArrayList<String> memberKycGridHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<memberKycGridHeaderListCount;i++)
			{
				String data = memberKycGridHeaderList.get(i).getText();
				
				memberKycGridHeaderListArray.add(data);
			}
			
			String actmemberKycGridHeaderList = memberKycGridHeaderListArray.toString();
			String expmemberKycGridHeaderList = "[, , , , , , , , , Name, Age, Relation, Mobile]";
			
			
			System.out.println("actmemberKycGridHeaderList : "+actmemberKycGridHeaderList);
			System.out.println("expmemberKycGridHeaderList : "+expmemberKycGridHeaderList);
			
			
			// Saving New Member
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
			headerGeneralTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberNameTxt));
			memberNameTxt.click();
			memberNameTxt.sendKeys("TestMember");
			memberNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberCodeTxt));
			memberCodeTxt.click();
			memberCodeTxt.sendKeys("TestMember");
			memberCodeTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="In Tab :General ---> Member Type Field is Required";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			
			
			if(actnewHeaderTabList.equalsIgnoreCase(expnewHeaderTabList)
					&& actmemberNameTxt==expmemberNameTxt && actmemberCodeTxt==expmemberCodeTxt && actmemberMiddleNameTxt==expmemberMiddleNameTxt
					&& actmemberLastNameTxt==expmemberLastNameTxt && actmemberTitleDropDown==expmemberTitleDropDown && actmemberGenderDropdown==expmemberGenderDropdown
					&& actmemberActiveChkBox==expmemberActiveChkBox && actmemberDobChkBox==expmemberDobChkBox && actmemberDobCalendarBtn==expmemberDobCalendarBtn
					&& actmemberAgeTxt==expmemberAgeTxt && actmemberMemberTypeTxt==expmemberMemberTypeTxt /*&& actmemberAttachPhotoBtn==expmemberAttachPhotoBtn*/
					&& actmemberSaveImgBtn==expmemberSaveImgBtn && actmemberEraseImgBtn==expmemberEraseImgBtn && actmemberAnniversaryDateChkBox==expmemberAnniversaryDateChkBox
					&& actmemberAnniversaryDateCalendarBtn==expmemberAnniversaryDateCalendarBtn
					
					&& actmemberAddress1Txt==expmemberAddress1Txt && actmemberAddress2Txt==expmemberAddress2Txt && actmemberCountryTxt==expmemberCountryTxt
					&& actmemberStateTxt==expmemberStateTxt && actmemberCityTxt==expmemberCityTxt && actmemberZipCodeTxt==expmemberZipCodeTxt 
					&& actmemberPreferedWayToContactDropdown==expmemberPreferedWayToContactDropdown && actmemberPhoneResTxt==expmemberPhoneResTxt
					&& actmemberPhoneOfcTxt==expmemberPhoneOfcTxt && actmemberMobileTxt==expmemberMobileTxt && actmemberEmailTxt==expmemberEmailTxt
					&& actmemberFaxTxt==expmemberFaxTxt
					
					&& actmemberPointsAccumlatedTxt==expmemberPointsAccumlatedTxt && actmemberDeliveryChkBox==expmemberDeliveryChkBox && actmemberNearestOutletTxt==expmemberNearestOutletTxt
					&& actmemberDistanceFromOutletTxt==expmemberDistanceFromOutletTxt && actmemberBlackListChkBox==expmemberBlackListChkBox && actmemberReasonForBlackListTxt==expmemberReasonForBlackListTxt
					&& actmemberFavouriteBrandTxt==expmemberFavouriteBrandTxt && actmemberProfessionDetailsTxt==expmemberProfessionDetailsTxt && actmemberLastPurchaseDateChkBox==expmemberLastPurchaseDateChkBox
					&& actmemberLastPurchaseDateCalendarBtn==expmemberLastPurchaseDateCalendarBtn && actmemberPointsRedemptionAccountTxt==expmemberPointsRedemptionAccountTxt
					&& actmemberCreditSalesAccountTxt==expmemberCreditSalesAccountTxt
					
					&& actmemberPrimaryMemberToMergeCardTxt==expmemberPrimaryMemberToMergeCardTxt
					&& actmemberCardDetailsGridHeaderList.equalsIgnoreCase(expmemberCardDetailsGridHeaderList)
					&& actmemberKycGridHeaderList.equalsIgnoreCase(expmemberKycGridHeaderList)
					&& actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	@FindBy(xpath="//a[contains(text(),'Member Type')]")
	private static WebElement memberTypeLabel;
	
	@FindBy(xpath="//button[2]//i[1]")
	private static WebElement mt_SaveBtn;
	
	@FindBy(xpath="//button[@class='btn-link theme_icon-color closeMasterPartial btnGenerateMasterclose clsMasterPopupSaveClose']//i[@class='icon-close icon-font6']")
	private static WebElement mt_CloseBtn;
	
	
	@FindBy(xpath="//*[@id='divBtnGroup1']/div/a")
	private static WebElement mt_ExemptCalculationTab;
	
	@FindBy(xpath="//input[@id='sName']")
	private static WebElement mt_nameTxt;
	
	@FindBy(xpath="//input[@id='sCode']")
	private static WebElement mt_codeTxt;
	
	@FindBy(xpath="//input[@id='oc_Group']")
	private static WebElement mt_GroupTxt;
	
	@FindBy(xpath="//input[@id='sDescription']")
	private static WebElement mt_descriptionTxt;
	
	@FindBy(xpath="//input[@id='fMinimumPurchaseValue']")
	private static WebElement mt_minimumPurchaseValue;
	
	@FindBy(xpath="//input[@id='iMinimumPointsEarned']")
	private static WebElement mt_minimumPointsEarned;
	
	@FindBy(xpath="//input[@id='iTimePeriodInMonths']")
	private static WebElement mt_TimePeriodTxt;
	
	@FindBy(xpath="//input[@id='iPointsExpiryInDays']")
	private static WebElement mt_pointsExpiryTxt;
	
	@FindBy(xpath="//input[@id='iMemberTypeExpiryInMonths']")
	private static WebElement mt_MemberTypeExpiryTxt;
	
	@FindBy(xpath="//input[@id='fMinPurchaseToRetainMemberType']")
	private static WebElement mt_MinPurchaseToRetainmemberTypeTxt;
	
	@FindBy(xpath="//input[@id='iMinPointsToRetainMemberType']")
	private static WebElement mt_MinPointsToRetainmemberTypeTxt;
	
	@FindBy(xpath="//input[@id='iRetentionTimePeriodInMonths']")
	private static WebElement mt_RetentionTimePeriodTxt;
	
	@FindBy(xpath="//input[@id='iExpiryAfterYear']")
	private static WebElement mt_ExpiryAfterYearTxt;
	
	@FindBy(xpath="//select[@id='iAwardPointsOnSpecialDay']")
	private static WebElement mt_AwardPointsOnSpecialDayDropDown;
	
	@FindBy(xpath="//input[@id='fMinPointsRequiredToRedem']")
	private static WebElement mt_MinPointsRequiredToRedemTxt;
	
	@FindBy(xpath="//*[@id='tblNewMasterGenerator']/thead/tr/th/label")
	public static List<WebElement> mt_ECGridHeaderList;
	
	
	public boolean checkSavingMemberTypeOnClickingMemberTypeLabel() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavingMemberTypeOnClickingMemberTypeLabel Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberTypeLabel));
			memberTypeLabel.click();
			
			Thread.sleep(2000);
			
			int newHeaderTabListCount = newHeaderTabList.size();
			
			ArrayList<String> newHeaderTabListArray = new ArrayList<String>();
			
			for(int i=0;i<newHeaderTabListCount;i++)
			{
				String data = newHeaderTabList.get(i).getText();
				
				newHeaderTabListArray.add(data);
			}
			
			String actnewHeaderTabList = newHeaderTabListArray.toString();
			String expnewHeaderTabList = "[General, Exempt Calculation, ]";
			
			System.out.println("actnewHeaderTabList : "+actnewHeaderTabList);
			System.out.println("expnewHeaderTabList : "+expnewHeaderTabList);
			
			
			boolean actmt_SaveBtn  = mt_SaveBtn.isDisplayed();
			boolean actmt_CloseBtn = mt_CloseBtn.isDisplayed();
			
			boolean expmt_SaveBtn  = true;
			boolean expmt_CloseBtn = true;
			
			System.out.println("mt_SaveBtn  : "+actmt_SaveBtn +" Value Expected : "+expmt_SaveBtn);
			System.out.println("mt_CloseBtn : "+actmt_CloseBtn+" Value Expected : "+expmt_CloseBtn);
			
			     
			boolean actmt_nameTxt    	 		          = mt_nameTxt.isDisplayed();
			boolean actmt_codeTxt    	                  = mt_codeTxt.isDisplayed();
			boolean actmt_GroupTxt 			              = mt_GroupTxt.isDisplayed();
			boolean actmt_descriptionTxt 			      = mt_descriptionTxt.isDisplayed();
			boolean actmt_minimumPurchaseValue 		      = mt_minimumPurchaseValue.isDisplayed();
			boolean actmt_TimePeriodTxt 			      = mt_TimePeriodTxt.isDisplayed();
			boolean actmt_pointsExpiryTxt 		 	      = mt_pointsExpiryTxt.isDisplayed();
			boolean actmt_MemberTypeExpiryTxt             = mt_MemberTypeExpiryTxt.isDisplayed();
			boolean actmt_MinPurchaseToRetainmemberTypeTxt= mt_MinPurchaseToRetainmemberTypeTxt.isDisplayed();
			boolean actmt_MinPointsToRetainmemberTypeTxt  = mt_MinPointsToRetainmemberTypeTxt.isDisplayed();
			boolean actmt_RetentionTimePeriodTxt          = mt_RetentionTimePeriodTxt.isDisplayed();
			boolean actmt_ExpiryAfterYearTxt              = mt_ExpiryAfterYearTxt.isDisplayed();
			boolean actmt_AwardPointsOnSpecialDayDropDown = mt_AwardPointsOnSpecialDayDropDown.isDisplayed();
			boolean actmt_MinPointsRequiredToRedemTxt     = mt_MinPointsRequiredToRedemTxt.isDisplayed();
			
			boolean expmt_nameTxt    	 		          = true;
			boolean expmt_codeTxt    	                  = true;
			boolean expmt_GroupTxt 			              = true;
			boolean expmt_descriptionTxt 			      = true;
			boolean expmt_minimumPurchaseValue 		      = true;
			boolean expmt_TimePeriodTxt 			      = true;
			boolean expmt_pointsExpiryTxt 		 	      = true;
			boolean expmt_MemberTypeExpiryTxt             = true;
			boolean expmt_MinPurchaseToRetainmemberTypeTxt= true;
			boolean expmt_MinPointsToRetainmemberTypeTxt  = true;
			boolean expmt_RetentionTimePeriodTxt          = true;
			boolean expmt_ExpiryAfterYearTxt              = true;
			boolean expmt_AwardPointsOnSpecialDayDropDown = true;
			boolean expmt_MinPointsRequiredToRedemTxt     = true;
			
			System.out.println("mt_nameTxt                           : "+actmt_nameTxt                          +" Value Expected : "+expmt_nameTxt);
			System.out.println("mt_codeTxt                           : "+actmt_codeTxt                          +" Value Expected : "+expmt_codeTxt);
			System.out.println("mt_GroupTxt                          : "+actmt_GroupTxt                         +" Value Expected : "+expmt_GroupTxt);
			System.out.println("mt_descriptionTxt                    : "+actmt_descriptionTxt                   +" Value Expected : "+expmt_descriptionTxt);
			System.out.println("mt_minimumPurchaseValue              : "+actmt_minimumPurchaseValue             +" Value Expected : "+expmt_minimumPurchaseValue);
			System.out.println("mt_TimePeriodTxt                     : "+actmt_TimePeriodTxt                    +" Value Expected : "+expmt_TimePeriodTxt);
			System.out.println("mt_pointsExpiryTxt                   : "+actmt_pointsExpiryTxt                  +" Value Expected : "+expmt_pointsExpiryTxt);
			System.out.println("mt_MemberTypeExpiryTxt               : "+actmt_MemberTypeExpiryTxt              +" Value Expected : "+expmt_MemberTypeExpiryTxt);
			System.out.println("mt_MinPurchaseToRetainmemberTypeTxt  : "+actmt_MinPurchaseToRetainmemberTypeTxt +" Value Expected : "+expmt_MinPurchaseToRetainmemberTypeTxt);
			System.out.println("mt_MinPointsToRetainmemberTypeTxt    : "+actmt_MinPointsToRetainmemberTypeTxt   +" Value Expected : "+expmt_MinPointsToRetainmemberTypeTxt);
			System.out.println("mt_RetentionTimePeriodTxt            : "+actmt_RetentionTimePeriodTxt           +" Value Expected : "+expmt_RetentionTimePeriodTxt);
			System.out.println("mt_ExpiryAfterYearTxt                : "+actmt_ExpiryAfterYearTxt               +" Value Expected : "+expmt_ExpiryAfterYearTxt);
			System.out.println("mt_AwardPointsOnSpecialDayDropDown   : "+actmt_AwardPointsOnSpecialDayDropDown  +" Value Expected : "+expmt_AwardPointsOnSpecialDayDropDown);
			System.out.println("mt_MinPointsRequiredToRedemTxt       : "+actmt_MinPointsRequiredToRedemTxt      +" Value Expected : "+expmt_MinPointsRequiredToRedemTxt);
			
			
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mt_ExemptCalculationTab));
			mt_ExemptCalculationTab.click();
			
			Thread.sleep(2000);
			
			
			int mt_ECGridHeaderListCount = mt_ECGridHeaderList.size();
			
			ArrayList<String> mt_ECGridHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<mt_ECGridHeaderListCount;i++)
			{
				String data = mt_ECGridHeaderList.get(i).getText();
				
				mt_ECGridHeaderListArray.add(data);
			}
			
			String actmt_ECGridHeaderList = mt_ECGridHeaderListArray.toString();
			String expmt_ECGridHeaderList = "[, , Exempt Field]";
			
			
			System.out.println("actmt_ECGridHeaderList : "+actmt_ECGridHeaderList);
			System.out.println("expmt_ECGridHeaderList : "+expmt_ECGridHeaderList);
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));		
			headerGeneralTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mt_nameTxt));		
			mt_nameTxt.click();
			mt_nameTxt.sendKeys("TestMemberType");
			mt_nameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mt_codeTxt));		
			mt_codeTxt.click();
			mt_codeTxt.sendKeys("TestMemberType");
			mt_codeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mt_pointsExpiryTxt));		
			mt_pointsExpiryTxt.click();
			mt_pointsExpiryTxt.clear();
			mt_pointsExpiryTxt.sendKeys("5");
			mt_pointsExpiryTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mt_MemberTypeExpiryTxt));		
			mt_MemberTypeExpiryTxt.click();
			mt_MemberTypeExpiryTxt.clear();
			mt_MemberTypeExpiryTxt.sendKeys("5");
			mt_MemberTypeExpiryTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mt_SaveBtn));		
			mt_SaveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
				 
			
			if(actnewHeaderTabList.equalsIgnoreCase(expnewHeaderTabList) && actmt_SaveBtn==expmt_SaveBtn && actmt_CloseBtn==expmt_CloseBtn
					&& actmt_nameTxt==expmt_nameTxt && actmt_codeTxt==expmt_codeTxt && actmt_GroupTxt==expmt_GroupTxt && actmt_descriptionTxt==expmt_descriptionTxt
					&& actmt_minimumPurchaseValue==expmt_minimumPurchaseValue && actmt_TimePeriodTxt==expmt_TimePeriodTxt && actmt_pointsExpiryTxt==expmt_pointsExpiryTxt
					&& actmt_MemberTypeExpiryTxt==expmt_MemberTypeExpiryTxt && actmt_MinPurchaseToRetainmemberTypeTxt==expmt_MinPurchaseToRetainmemberTypeTxt
					&& actmt_MinPointsToRetainmemberTypeTxt==expmt_MinPointsToRetainmemberTypeTxt && actmt_RetentionTimePeriodTxt==expmt_RetentionTimePeriodTxt
					&& actmt_ExpiryAfterYearTxt==expmt_ExpiryAfterYearTxt && actmt_AwardPointsOnSpecialDayDropDown==expmt_AwardPointsOnSpecialDayDropDown
					&& actmt_MinPointsRequiredToRedemTxt==expmt_MinPointsRequiredToRedemTxt
					&& actmt_ECGridHeaderList.equalsIgnoreCase(expmt_ECGridHeaderList))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	

	public boolean checkSavedMemberTypeAndCheckSavingMember() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavedMemberTypeAndCheckSavingMember Method Executes.............   *****************************");
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberMemberTypeTxt));
			memberMemberTypeTxt.click();
			memberMemberTypeTxt.sendKeys(Keys.SPACE);
			Thread.sleep(2000);
			
			int memberMemberTypeBodyListCount = memberMemberTypeBodyList.size();
			
			for(int i=0;i<memberMemberTypeBodyListCount;i++)
			{
				String data = memberMemberTypeBodyList.get(i).getText();
				
				if(data.equalsIgnoreCase("TestMemeberType"))
				{
					memberMemberTypeBodyList.get(i).click();
					
					break;
				}
			}
			
			
			memberMemberTypeTxt.sendKeys(Keys.TAB);
			
			String actmemberMemberTypeTxt = memberMemberTypeTxt.getAttribute("value");
			String expmemberMemberTypeTxt ="TestMemberType";
			
			System.out.println("memberMemberTypeTxt : "+actmemberMemberTypeTxt+" Value Expected : "+expmemberMemberTypeTxt);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberNameTxt));
			memberNameTxt.click();
			memberNameTxt.sendKeys("TestMember");
			memberNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberCodeTxt));
			memberCodeTxt.click();
			memberCodeTxt.sendKeys("TestMember");
			memberCodeTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="Saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
				 
			
			if(actmemberMemberTypeTxt.equalsIgnoreCase(expmemberMemberTypeTxt) && actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	public boolean checkSavedMemberAndEditingMember() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavedMemberAndEditingMember Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("TestMember") && posListChkBox.get(i).isSelected()==false)
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberMemberTypeTxt));
			
			String actmemberMemberTypeTxt = memberMemberTypeTxt.getAttribute("value");
			String expmemberMemberTypeTxt ="TestMemberType";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberNameTxt));
			memberNameTxt.click();
			
			String actmemberNameTxt = memberNameTxt.getAttribute("value");
			String expmemberNameTxt = "TestMember";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberCodeTxt));
			memberCodeTxt.click();

			String actmemberCodeTxt = memberCodeTxt.getAttribute("value");
			String expmemberCodeTxt = "TestMember";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberNameTxt));
			memberNameTxt.click();
			memberNameTxt.clear();
			memberNameTxt.sendKeys("TestMemberUpdate");
			memberNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberCodeTxt));
			memberCodeTxt.click();
			memberCodeTxt.clear();
			memberCodeTxt.sendKeys("TestMemberUpdate");
			memberCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="Updated Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			
			System.out.println("memberMemberTypeTxt : "+actmemberMemberTypeTxt+" Value Expected : "+expmemberMemberTypeTxt);
			System.out.println("memberNameTxt : "+actmemberNameTxt+" Value Expected : "+expmemberNameTxt);
			System.out.println("memberCodeTxt : "+actmemberCodeTxt+" Value Expected : "+expmemberCodeTxt);
				 
			
			if(actmemberMemberTypeTxt.equalsIgnoreCase(expmemberMemberTypeTxt) && actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	@FindBy(xpath="//button[@id='btnMasterClone']")
	public static WebElement editcloneBtn;
	
	public boolean checkUpdatedMemberAndSaveMemberUsingCloneOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkUpdatedMemberAndSaveMemberUsingCloneOption Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("TestMemberUpdate"))
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				if(posListChkBox.get(i).isSelected()==false)
  	 				{
  	 					posListChkBox.get(i).click();
  	 				}
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberMemberTypeTxt));
			
			String actmemberMemberTypeTxt = memberMemberTypeTxt.getAttribute("value");
			String expmemberMemberTypeTxt ="TestMemberType";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberNameTxt));
			memberNameTxt.click();
			
			String actmemberNameTxt = memberNameTxt.getAttribute("value");
			String expmemberNameTxt = "TestMemberUpdate";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberCodeTxt));
			memberCodeTxt.click();

			String actmemberCodeTxt = memberCodeTxt.getAttribute("value");
			String expmemberCodeTxt = "TestMemberUpdate";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloneBtn));
			editcloneBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberNameTxt));
			memberNameTxt.click();
			memberNameTxt.sendKeys("MemberToDelete");
			memberNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberCodeTxt));
			memberCodeTxt.click();
			memberCodeTxt.sendKeys("MemberToDelete");
			memberCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="Saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			System.out.println("memberMemberTypeTxt : "+actmemberMemberTypeTxt+" Value Expected : "+expmemberMemberTypeTxt);
			System.out.println("memberNameTxt : "+actmemberNameTxt+" Value Expected : "+expmemberNameTxt);
			System.out.println("memberCodeTxt : "+actmemberCodeTxt+" Value Expected : "+expmemberCodeTxt);
				 
			
			if(actmemberMemberTypeTxt.equalsIgnoreCase(expmemberMemberTypeTxt) && actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[9]/div[1]/div[1]/div[1]/div[2]/div[1]/label[1]")
	public static WebElement getMsgOnDelete;
	
	@FindBy(xpath="//button[@id='btnOkForDelete']")
	public static WebElement clickOnOkInDelete;
	
	@FindBy(xpath="//button[@id='btnCancelForDelete']")
	public static WebElement clickOnCancelInDelete;
	
	@FindBy(xpath="//input[@id='liSelectAllMasters']")
	public static WebElement selectAllHeaderChkBox;
	
	public static boolean checkDeleteMemberAndClose() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkDeleteMemberAndClose Method Executes.............   *****************************");
		
		try
		{
			if(selectAllHeaderChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			if(selectAllHeaderChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("MemberToDelete"))
  	 			{
  	 				posNameList.get(i).click();
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
			 
			 
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
  	 		masterDeleteBtn.click();
	         
  	 		Thread.sleep(2000);
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
  	 		System.out.println(getMsgOnDelete.getText());
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
  	 		clickOnOkInDelete.click();
	         
  	 		String expMessage="Record Deleted Successfully.";
	 		
  	 		String actMessage=checkValidationMessage(expMessage);
  	 		
				
  	 		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
  	 		masterCloseBtn.click();
				
  	 		if(actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		} 
	}
	
	
	
	// Outlet
	
	
	public boolean checkOutletHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkOutletHomePageOptions Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
			pointOfSale.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outlet));
			outlet.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
			     
			boolean actmasterNewBtn    	 		   =masterNewBtn.isDisplayed();
			boolean actmasterAddGroupBtn    	   =masterAddGroupBtn.isDisplayed();
			boolean actmasterEditBtn 			   =masterEditBtn.isDisplayed();
			boolean actmasterCloneBtn 			   =masterCloneBtn.isDisplayed();
			boolean actmasterPropertiesBtn 		   =masterPropertiesBtn.isDisplayed();
			boolean actmasterDeleteBtn 			   =masterDeleteBtn.isDisplayed();
			boolean actmasterCloseBtn 		 	   =masterCloseBtn.isDisplayed();
			boolean actmasterRibbonToExpandOptions =masterRibbonToExpandOptions.isDisplayed();
			
			boolean expmasterNewBtn    	 			=true;
			boolean expmasterAddGroupBtn    		=true;
			boolean expmasterEditBtn 				=true;
			boolean expmasterCloneBtn 				=true;
			boolean expmasterPropertiesBtn 			=true;
			boolean expmasterDeleteBtn 				=true;
			boolean expmasterCloseBtn 				=true;
			boolean expmasterRibbonToExpandOptions 	=true;
			
			
			
			System.out.println("masterNewBtn                  : "+actmasterNewBtn                +" Value Expected : "+expmasterNewBtn);
			System.out.println("masterAddGroupBtn             : "+actmasterAddGroupBtn           +" Value Expected : "+expmasterAddGroupBtn);
			System.out.println("masterEditBtn                 : "+actmasterEditBtn               +" Value Expected : "+expmasterEditBtn);
			System.out.println("masterCloneBtn                : "+actmasterCloneBtn              +" Value Expected : "+expmasterCloneBtn);
			System.out.println("masterPropertiesBtn           : "+actmasterPropertiesBtn         +" Value Expected : "+expmasterPropertiesBtn);
			System.out.println("masterDeleteBtn               : "+actmasterDeleteBtn             +" Value Expected : "+expmasterDeleteBtn);
			System.out.println("masterCloseBtn                : "+actmasterCloseBtn              +" Value Expected : "+expmasterCloseBtn);
			System.out.println("masterRibbonToExpandOptions   : "+actmasterRibbonToExpandOptions +" Value Expected : "+expmasterRibbonToExpandOptions);
				
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
			masterRibbonToExpandOptions.click();
				 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));	
			
			boolean actmasterGroupBtn    	 													=masterGroupBtn.isDisplayed();
			boolean actmasterDeleteAllBtn    	 												=masterDeleteAllBtn.isDisplayed();
			boolean actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
			boolean actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
			boolean actmasterAdvanceMasterImportORExportBtn    	 								=masterAdvanceMasterImportORExportBtn.isDisplayed();
			boolean actmasterAuthorInfoBtn    	 												=masterAuthorInfoBtn.isDisplayed();
			boolean actmasterMoveUpBtn    	 													=masterMoveUpBtn.isDisplayed();
			boolean actmasterMoveDownBtn    	 												=masterMoveDownBtn.isDisplayed();
			boolean actmasterSortBtn    	 													=masterSortBtn.isDisplayed();
			boolean actmasterMassUpdateBtn    	 												=masterMassUpdateBtn.isDisplayed();
			boolean actmasterImportFromXmlBtn    	 											=masterImportFromXmlBtn.isDisplayed();
			boolean actmasterExportFormatToXmlBtn    	 										=masterExportFormatToXmlBtn.isDisplayed();
			
			boolean expmasterGroupBtn    	 													=true;
			boolean expmasterDeleteAllBtn    	 												=true;
			boolean expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=true;
			boolean expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=true;
			boolean expmasterAdvanceMasterImportORExportBtn    	 								=true;
			boolean expmasterAuthorInfoBtn    	 												=true;
			boolean expmasterMoveUpBtn    	 													=true;
			boolean expmasterMoveDownBtn    	 												=true;
			boolean expmasterSortBtn    	 													=true;
			boolean expmasterMassUpdateBtn    	 												=true;
			boolean expmasterImportFromXmlBtn    	 											=true;
			boolean expmasterExportFormatToXmlBtn    	 										=true;
			
			
			System.out.println("masterGroupBtn                                                      : "+actmasterGroupBtn                                                      +" Value Expected : "+expmasterGroupBtn);
			System.out.println("masterDeleteAllBtn                                                  : "+actmasterDeleteAllBtn                                                  +" Value Expected : "+expmasterDeleteAllBtn);
			System.out.println("masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity : "+actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity +" Value Expected : "+expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity);
			System.out.println("masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          : "+actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          +" Value Expected : "+expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState);
			System.out.println("masterAdvanceMasterImportORExportBtn                                : "+actmasterAdvanceMasterImportORExportBtn                                +" Value Expected : "+expmasterAdvanceMasterImportORExportBtn);
			System.out.println("masterAuthorInfoBtn                                                 : "+actmasterAuthorInfoBtn                                                 +" Value Expected : "+expmasterAuthorInfoBtn);
			System.out.println("masterMoveUpBtn                                                     : "+actmasterMoveUpBtn                                                     +" Value Expected : "+expmasterMoveUpBtn);
			System.out.println("masterMoveDownBtn                                                   : "+actmasterMoveDownBtn                                                   +" Value Expected : "+expmasterMoveDownBtn);
			System.out.println("masterSortBtn                                                       : "+actmasterSortBtn                                                       +" Value Expected : "+expmasterSortBtn);
			System.out.println("masterMassUpdateBtn                                                 : "+actmasterMassUpdateBtn                                                 +" Value Expected : "+expmasterMassUpdateBtn);
			System.out.println("masterImportFromXmlBtn                                              : "+actmasterImportFromXmlBtn                                              +" Value Expected : "+expmasterImportFromXmlBtn);
			System.out.println("masterExportFormatToXmlBtn                                          : "+actmasterExportFormatToXmlBtn                                          +" Value Expected : "+expmasterExportFormatToXmlBtn);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
			 
			masterRibbonControlNextBtn.click(); 
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizemasterBtn));	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
			
			boolean actmasterCustamizemasterBtn    	  =masterCustamizemasterBtn.isDisplayed();
			boolean actmasterCustamizeViewBtn    	  =masterCustamizeViewBtn.isDisplayed();
			boolean actmastercustamizeTreeBtn    	  =mastercustamizeTreeBtn.isDisplayed();
			 
			boolean expmasterCustamizemasterBtn    	  =true;
			boolean expmasterCustamizeViewBtn    	  =true;
			boolean expmastercustamizeTreeBtn    	  =true;
			 
			 
			 
			System.out.println("masterCustamizemasterBtn           : "+actmasterCustamizemasterBtn           +" Value Expected : "+expmasterCustamizemasterBtn);
			System.out.println("masterCustamizeViewBtn             : "+actmasterCustamizeViewBtn             +" Value Expected : "+expmasterCustamizeViewBtn);
			System.out.println("mastercustamizeTreeBtn             : "+actmastercustamizeTreeBtn             +" Value Expected : "+expmastercustamizeTreeBtn);
				
	       
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToMinimizeOptions));
			masterRibbonToMinimizeOptions.click();
			
			if(actmasterNewBtn==expmasterNewBtn && actmasterAddGroupBtn==expmasterAddGroupBtn && actmasterEditBtn==expmasterEditBtn
					&& actmasterCloneBtn==expmasterCloneBtn && actmasterPropertiesBtn==expmasterPropertiesBtn && actmasterDeleteBtn==expmasterDeleteBtn
					&& actmasterCloseBtn==expmasterCloseBtn && actmasterRibbonToExpandOptions==expmasterRibbonToExpandOptions
					
					&& actmasterGroupBtn==expmasterGroupBtn && actmasterDeleteAllBtn==expmasterDeleteAllBtn 
					&& actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity==expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity
					&& actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState==expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState 
					&& actmasterAdvanceMasterImportORExportBtn==expmasterAdvanceMasterImportORExportBtn
					&& actmasterAuthorInfoBtn==expmasterAuthorInfoBtn && actmasterMoveUpBtn==expmasterMoveUpBtn && actmasterMoveDownBtn==expmasterMoveDownBtn
					&& actmasterSortBtn==expmasterSortBtn && actmasterMassUpdateBtn==expmasterMassUpdateBtn && actmasterImportFromXmlBtn==expmasterImportFromXmlBtn
					&& actmasterExportFormatToXmlBtn==expmasterExportFormatToXmlBtn
					
					&& actmasterCustamizemasterBtn==expmasterCustamizemasterBtn && actmasterCustamizeViewBtn==expmasterCustamizeViewBtn  
					&& actmastercustamizeTreeBtn==expmastercustamizeTreeBtn )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	@FindBy(xpath="//input[@id='sName']")
	private static WebElement outletNameTxt;
	
	@FindBy(xpath="//input[@id='sCode']")
	private static WebElement outletCodeTxt;
	
	@FindBy(xpath="//input[@id='sDescription']")
	private static WebElement outletDescriptionTxt;
	
	@FindBy(xpath="//input[@id='iCalender']")
	private static WebElement outletCalenderTxt;
	
	@FindBy(xpath="//input[@id='sAddress1']")
	private static WebElement outletAddress1Txt;
	
	@FindBy(xpath="//input[@id='sAddress2']")
	private static WebElement outletAddress2Txt;
	
	@FindBy(xpath="//input[@id='iCountry']")
	private static WebElement outletCountryTxt;
	
	@FindBy(xpath="//input[@id='iState']")
	private static WebElement outletStateTxt;
	
	@FindBy(xpath="//input[@id='iCity']")
	public static WebElement outletCityTxt;
	
	@FindBy(xpath="//input[@id='sZipPostalCode']")
	public static WebElement outletZipPostalCodeTxt;
	
	@FindBy(xpath="//input[@id='sPhone']")
	private static WebElement outletPhoneTxt;
	
	@FindBy(xpath="//input[@id='sEmailID']")
	private static WebElement outletEmailIdTxt;
	
	@FindBy(xpath="//input[@id='sFax']")
	private static WebElement outletFaxTxt;
	
	@FindBy(xpath="//select[@id='iOutletType']")
	private static WebElement outletOutletTypeDropDown;
	
	@FindBy(xpath="//input[@id='sMallCode']")
	private static WebElement outletMallCodeTxt;
	
	@FindBy(xpath="//input[@id='sAssetId']")
	private static WebElement outletAssetIdTxt;
	
	@FindBy(xpath="//input[@id='sTenantCode']")
	private static WebElement outletTenantCodeTxt;
	
	@FindBy(xpath="//input[@id='sTillNo']")
	private static WebElement outletTillNowTxt;
	
	@FindBy(xpath="//input[@id='sMachineCode']")
	private static WebElement outletMachineCodeTxt;
	
	@FindBy(xpath="//input[@id='iSerialNo']")
	private static WebElement outletSerailNoTxt;
	
	@FindBy(xpath="//input[@id='iTemplate']")
	private static WebElement outletTemplateTxt;
	
	@FindBy(xpath="//input[@id='iCurrencyId']")
	private static WebElement outletLocalCurrencyTxt;
	
	@FindBy(xpath="//input[@id='sDateFormat']")
	private static WebElement outletDateFormatTxt;
	
	@FindBy(xpath="//*[@id='tblNewMasterGenerator']/thead/tr/th/label")
	public static List<WebElement> outletGridHeaderList;
	
	public boolean checkNewOptionInOutletAndAvailableFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkNewOptionInOutletAndAvailableFields Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			int outletGridHeaderListCount = outletGridHeaderList.size();
			
			ArrayList<String> outletGridHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<outletGridHeaderListCount;i++)
			{
				String data = outletGridHeaderList.get(i).getText();
				
				outletGridHeaderListArray.add(data);
			}
			
			String actoutletGridHeaderList = outletGridHeaderListArray.toString();
			String expoutletGridHeaderList = "[, , Currency List]";
			
			System.out.println("actoutletGridHeaderList : "+actoutletGridHeaderList);
			System.out.println("expoutletGridHeaderList : "+expoutletGridHeaderList);
			
			boolean actoutletNameTxt             = outletNameTxt.isDisplayed();
			boolean actoutletCodeTxt             = outletCodeTxt.isDisplayed();
			boolean actoutletDescriptionTxt      = outletDescriptionTxt.isDisplayed();
			boolean actoutletCalenderTxt         = outletCalenderTxt.isDisplayed();
			boolean actoutletAddress1Txt         = outletAddress1Txt.isDisplayed();
			boolean actoutletAddress2Txt         = outletAddress2Txt.isDisplayed();
			boolean actoutletCountryTxt          = outletCountryTxt.isDisplayed();
			boolean actoutletStateTxt            = outletStateTxt.isDisplayed();
			boolean actoutletCityTxt             = outletCityTxt.isDisplayed();
			boolean actoutletZipPostalCodeTxt    = outletZipPostalCodeTxt.isDisplayed();
			boolean actoutletPhoneTxt            = outletPhoneTxt.isDisplayed();
			boolean actoutletEmailIdTxt          = outletEmailIdTxt.isDisplayed();
			boolean actoutletFaxTxt              = outletFaxTxt.isDisplayed();
			boolean actoutletOutletTypeDropDown  = outletOutletTypeDropDown.isDisplayed();
			boolean actoutletMallCodeTxt         = outletMallCodeTxt.isDisplayed();
			boolean actoutletAssetIdTxt          = outletAssetIdTxt.isDisplayed();
			boolean actoutletTenantCodeTxt       = outletTenantCodeTxt.isDisplayed();
			boolean actoutletTillNowTxt          = outletTillNowTxt.isDisplayed();
			boolean actoutletMachineCodeTxt      = outletMachineCodeTxt.isDisplayed();
			boolean actoutletSerailNoTxt         = outletSerailNoTxt.isDisplayed();
			boolean actoutletTemplateTxt         = outletTemplateTxt.isDisplayed();
			boolean actoutletLocalCurrencyTxt    = outletLocalCurrencyTxt.isDisplayed();
			boolean actoutletDateFormatTxt       = outletDateFormatTxt.isDisplayed();
			
			
			
			boolean expoutletNameTxt             = true;
			boolean expoutletCodeTxt             = true;
			boolean expoutletDescriptionTxt      = true;
			boolean expoutletCalenderTxt         = true;
			boolean expoutletAddress1Txt         = true;
			boolean expoutletAddress2Txt         = true;
			boolean expoutletCountryTxt          = true;
			boolean expoutletStateTxt            = true;
			boolean expoutletCityTxt             = true;
			boolean expoutletZipPostalCodeTxt    = true;
			boolean expoutletPhoneTxt            = true;
			boolean expoutletEmailIdTxt          = true;
			boolean expoutletFaxTxt              = true;
			boolean expoutletOutletTypeDropDown  = true;
			boolean expoutletMallCodeTxt         = true;
			boolean expoutletAssetIdTxt          = true;
			boolean expoutletTenantCodeTxt       = true;
			boolean expoutletTillNowTxt          = true;
			boolean expoutletMachineCodeTxt      = true;
			boolean expoutletSerailNoTxt         = true;
			boolean expoutletTemplateTxt         = true;
			boolean expoutletLocalCurrencyTxt    = true;
			boolean expoutletDateFormatTxt       = true;
			
			System.out.println("outletNameTxt              : "+actoutletNameTxt            +" Value Expected : "+expoutletNameTxt);
			System.out.println("outletCodeTxt              : "+actoutletCodeTxt            +" Value Expected : "+expoutletCodeTxt);
			System.out.println("outletDescriptionTxt       : "+actoutletDescriptionTxt     +" Value Expected : "+expoutletDescriptionTxt);
			System.out.println("outletCalenderTxt          : "+actoutletCalenderTxt        +" Value Expected : "+expoutletCalenderTxt);
			System.out.println("outletAddress1Txt          : "+actoutletAddress1Txt        +" Value Expected : "+expoutletAddress1Txt);
			System.out.println("outletAddress2Txt          : "+actoutletAddress2Txt        +" Value Expected : "+expoutletAddress2Txt);
			System.out.println("outletCountryTxt           : "+actoutletCountryTxt         +" Value Expected : "+expoutletCountryTxt);
			System.out.println("outletStateTxt             : "+actoutletStateTxt           +" Value Expected : "+expoutletStateTxt);
			System.out.println("outletCityTxt              : "+actoutletCityTxt            +" Value Expected : "+expoutletCityTxt);
			System.out.println("outletZipPostalCodeTxt     : "+actoutletZipPostalCodeTxt   +" Value Expected : "+expoutletZipPostalCodeTxt);
			System.out.println("outletPhoneTxt             : "+actoutletPhoneTxt           +" Value Expected : "+expoutletPhoneTxt);
			System.out.println("outletEmailIdTxt           : "+actoutletEmailIdTxt         +" Value Expected : "+expoutletEmailIdTxt);
			System.out.println("outletFaxTxt               : "+actoutletFaxTxt             +" Value Expected : "+expoutletFaxTxt);
			System.out.println("outletOutletTypeDropDown   : "+actoutletOutletTypeDropDown +" Value Expected : "+expoutletOutletTypeDropDown);
			System.out.println("outletMallCodeTxt          : "+actoutletMallCodeTxt        +" Value Expected : "+expoutletMallCodeTxt);
			System.out.println("outletAssetIdTxt           : "+actoutletAssetIdTxt         +" Value Expected : "+expoutletAssetIdTxt);
			System.out.println("outletTenantCodeTxt        : "+actoutletTenantCodeTxt      +" Value Expected : "+expoutletTenantCodeTxt);
			System.out.println("outletTillNowTxt           : "+actoutletTillNowTxt         +" Value Expected : "+expoutletTillNowTxt);
			System.out.println("outletMachineCodeTxt       : "+actoutletMachineCodeTxt     +" Value Expected : "+expoutletMachineCodeTxt);
			System.out.println("outletSerailNoTxt          : "+actoutletSerailNoTxt        +" Value Expected : "+expoutletSerailNoTxt);
			System.out.println("outletTemplateTxt          : "+actoutletTemplateTxt        +" Value Expected : "+expoutletTemplateTxt);
			System.out.println("outletLocalCurrencyTxt     : "+actoutletLocalCurrencyTxt   +" Value Expected : "+expoutletLocalCurrencyTxt);
			System.out.println("outletDateFormatTxt        : "+actoutletDateFormatTxt      +" Value Expected : "+expoutletDateFormatTxt);
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			
			if(actoutletGridHeaderList.equalsIgnoreCase(expoutletGridHeaderList)
					&& actoutletNameTxt==expoutletNameTxt && actoutletCodeTxt==expoutletCodeTxt && actoutletDescriptionTxt==expoutletDescriptionTxt
					&& actoutletCalenderTxt==expoutletCalenderTxt && actoutletAddress1Txt==expoutletAddress1Txt && actoutletAddress2Txt==expoutletAddress2Txt
					&& actoutletCountryTxt==expoutletCountryTxt && actoutletStateTxt==expoutletStateTxt && actoutletCityTxt==expoutletCityTxt
					&& actoutletZipPostalCodeTxt==expoutletZipPostalCodeTxt && actoutletPhoneTxt==expoutletPhoneTxt && actoutletEmailIdTxt==expoutletEmailIdTxt
					&& actoutletFaxTxt==expoutletFaxTxt && actoutletOutletTypeDropDown==expoutletOutletTypeDropDown && actoutletMallCodeTxt==expoutletMallCodeTxt
					&& actoutletAssetIdTxt==expoutletAssetIdTxt && actoutletTenantCodeTxt==expoutletTenantCodeTxt && actoutletTillNowTxt==expoutletTillNowTxt
					&& actoutletMachineCodeTxt==expoutletMachineCodeTxt && actoutletSerailNoTxt==expoutletSerailNoTxt && actoutletTemplateTxt==expoutletTemplateTxt
					&& actoutletLocalCurrencyTxt==expoutletLocalCurrencyTxt && actoutletDateFormatTxt==expoutletDateFormatTxt)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	@FindBy(xpath="//input[@id='PlaceOfSupply']")
	private static WebElement placeofSupplyTxt;
	
	@FindBy(xpath="//input[@id='Jurisdiction']")
	private static WebElement jurisdictionTxt;
	
	

	public boolean checkSavingOutletWithAllMandateFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavingOutletWithAllMandateFields Method Executes.............   *****************************");
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletNameTxt));
			outletNameTxt.click();
			outletNameTxt.sendKeys("Outlet");
			outletNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletCodeTxt));
			outletCodeTxt.click();
			outletCodeTxt.sendKeys("Outlet");
			outletCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
			placeofSupplyTxt.click();
			placeofSupplyTxt.sendKeys(Keys.END);
			placeofSupplyTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			placeofSupplyTxt.sendKeys("Abu Dhabi");
			Thread.sleep(2000);
			placeofSupplyTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			jurisdictionTxt.click();
			jurisdictionTxt.sendKeys(Keys.END);
			jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			jurisdictionTxt.sendKeys("Abu Dhabi");
			Thread.sleep(2000);
			jurisdictionTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="Saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
				 
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	

	public boolean checkSavedOutletAndEditingOutlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavedOutletAndEditingOutlet Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("Outlet") && posListChkBox.get(i).isSelected()==false)
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletNameTxt));
			outletNameTxt.click();
			
			String actoutletNameTxt = outletNameTxt.getAttribute("value");
			String expoutletNameTxt = "OutLet";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletCodeTxt));
			outletCodeTxt.click();

			String actoutletCodeTxt = outletCodeTxt.getAttribute("value");
			String expoutletCodeTxt = "Outlet";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletNameTxt));
			outletNameTxt.click();
			outletNameTxt.clear();
			outletNameTxt.sendKeys("Outlet1");
			outletNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletCodeTxt));
			outletCodeTxt.click();
			outletCodeTxt.clear();
			outletCodeTxt.sendKeys("Outlet1");
			outletCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="Updated Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			
			System.out.println("outletNameTxt : "+actoutletNameTxt+" Value Expected : "+expoutletNameTxt);
			System.out.println("outletCodeTxt : "+actoutletCodeTxt+" Value Expected : "+expoutletCodeTxt);
				 
			
			if(actoutletNameTxt.equalsIgnoreCase(expoutletNameTxt) && actoutletCodeTxt.equalsIgnoreCase(expoutletCodeTxt)
					&& actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	
	
	public boolean checkUpdatedOutletAndSaveoutletUsingCloneOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkUpdatedOutletAndSaveoutletUsingCloneOption Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("Outlet1"))
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				if(posListChkBox.get(i).isSelected()==false)
  	 				{
  	 					posListChkBox.get(i).click();
  	 				}
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletNameTxt));
			outletNameTxt.click();
			
			String actoutletNameTxt = outletNameTxt.getAttribute("value");
			String expoutletNameTxt = "Outlet1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletCodeTxt));
			outletCodeTxt.click();

			String actoutletCodeTxt = outletCodeTxt.getAttribute("value");
			String expoutletCodeTxt = "Outlet1";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloneBtn));
			editcloneBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletNameTxt));
			outletNameTxt.click();
			outletNameTxt.sendKeys("OutletToDelete");
			outletNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletCodeTxt));
			outletCodeTxt.click();
			outletCodeTxt.sendKeys("OutletToDelete");
			outletCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="Saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			System.out.println("outletNameTxt : "+actoutletNameTxt+" Value Expected : "+expoutletNameTxt);
			System.out.println("outletCodeTxt : "+actoutletCodeTxt+" Value Expected : "+expoutletCodeTxt);
				 
			
			if(actoutletNameTxt.equalsIgnoreCase(expoutletNameTxt) && actoutletCodeTxt.equalsIgnoreCase(expoutletCodeTxt)
					&& actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	

	
	public static boolean checkDeleteOutletAndClose() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkDeleteOutletAndClose Method Executes.............   *****************************");
		
		try
		{
			if(selectAllHeaderChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			if(selectAllHeaderChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("OutletToDelete"))
  	 			{
  	 				posNameList.get(i).click();
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
			 
			 
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
  	 		masterDeleteBtn.click();
	         
  	 		Thread.sleep(2000);
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
  	 		System.out.println(getMsgOnDelete.getText());
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
  	 		clickOnOkInDelete.click();
	         
  	 		String expMessage="Record Deleted Successfully.";
	 		
  	 		String actMessage=checkValidationMessage(expMessage);
  	 		
				
  	 		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
  	 		masterCloseBtn.click();
				
  	 		if(actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		} 
	}
	
	
	
	// Counter
	
	public boolean checkCounterHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkCounterHomePageOptions Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
			pointOfSale.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counter));
			counter.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
			     
			boolean actmasterNewBtn    	 		   =masterNewBtn.isDisplayed();
			boolean actmasterAddGroupBtn    	   =masterAddGroupBtn.isDisplayed();
			boolean actmasterEditBtn 			   =masterEditBtn.isDisplayed();
			boolean actmasterCloneBtn 			   =masterCloneBtn.isDisplayed();
			boolean actmasterPropertiesBtn 		   =masterPropertiesBtn.isDisplayed();
			boolean actmasterDeleteBtn 			   =masterDeleteBtn.isDisplayed();
			boolean actmasterCloseBtn 		 	   =masterCloseBtn.isDisplayed();
			boolean actmasterRibbonToExpandOptions =masterRibbonToExpandOptions.isDisplayed();
			
			boolean expmasterNewBtn    	 			=true;
			boolean expmasterAddGroupBtn    		=true;
			boolean expmasterEditBtn 				=true;
			boolean expmasterCloneBtn 				=true;
			boolean expmasterPropertiesBtn 			=true;
			boolean expmasterDeleteBtn 				=true;
			boolean expmasterCloseBtn 				=true;
			boolean expmasterRibbonToExpandOptions 	=true;
			
			
			
			System.out.println("masterNewBtn                  : "+actmasterNewBtn                +" Value Expected : "+expmasterNewBtn);
			System.out.println("masterAddGroupBtn             : "+actmasterAddGroupBtn           +" Value Expected : "+expmasterAddGroupBtn);
			System.out.println("masterEditBtn                 : "+actmasterEditBtn               +" Value Expected : "+expmasterEditBtn);
			System.out.println("masterCloneBtn                : "+actmasterCloneBtn              +" Value Expected : "+expmasterCloneBtn);
			System.out.println("masterPropertiesBtn           : "+actmasterPropertiesBtn         +" Value Expected : "+expmasterPropertiesBtn);
			System.out.println("masterDeleteBtn               : "+actmasterDeleteBtn             +" Value Expected : "+expmasterDeleteBtn);
			System.out.println("masterCloseBtn                : "+actmasterCloseBtn              +" Value Expected : "+expmasterCloseBtn);
			System.out.println("masterRibbonToExpandOptions   : "+actmasterRibbonToExpandOptions +" Value Expected : "+expmasterRibbonToExpandOptions);
				
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
			masterRibbonToExpandOptions.click();
				 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));	
			
			boolean actmasterGroupBtn    	 													=masterGroupBtn.isDisplayed();
			boolean actmasterDeleteAllBtn    	 												=masterDeleteAllBtn.isDisplayed();
			boolean actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
			boolean actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
			boolean actmasterAdvanceMasterImportORExportBtn    	 								=masterAdvanceMasterImportORExportBtn.isDisplayed();
			boolean actmasterAuthorInfoBtn    	 												=masterAuthorInfoBtn.isDisplayed();
			boolean actmasterMoveUpBtn    	 													=masterMoveUpBtn.isDisplayed();
			boolean actmasterMoveDownBtn    	 												=masterMoveDownBtn.isDisplayed();
			boolean actmasterSortBtn    	 													=masterSortBtn.isDisplayed();
			boolean actmasterMassUpdateBtn    	 												=masterMassUpdateBtn.isDisplayed();
			boolean actmasterImportFromXmlBtn    	 											=masterImportFromXmlBtn.isDisplayed();
			boolean actmasterExportFormatToXmlBtn    	 										=masterExportFormatToXmlBtn.isDisplayed();
			
			boolean expmasterGroupBtn    	 													=true;
			boolean expmasterDeleteAllBtn    	 												=true;
			boolean expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=true;
			boolean expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=true;
			boolean expmasterAdvanceMasterImportORExportBtn    	 								=true;
			boolean expmasterAuthorInfoBtn    	 												=true;
			boolean expmasterMoveUpBtn    	 													=true;
			boolean expmasterMoveDownBtn    	 												=true;
			boolean expmasterSortBtn    	 													=true;
			boolean expmasterMassUpdateBtn    	 												=true;
			boolean expmasterImportFromXmlBtn    	 											=true;
			boolean expmasterExportFormatToXmlBtn    	 										=true;
			
			
			System.out.println("masterGroupBtn                                                      : "+actmasterGroupBtn                                                      +" Value Expected : "+expmasterGroupBtn);
			System.out.println("masterDeleteAllBtn                                                  : "+actmasterDeleteAllBtn                                                  +" Value Expected : "+expmasterDeleteAllBtn);
			System.out.println("masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity : "+actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity +" Value Expected : "+expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity);
			System.out.println("masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          : "+actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          +" Value Expected : "+expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState);
			System.out.println("masterAdvanceMasterImportORExportBtn                                : "+actmasterAdvanceMasterImportORExportBtn                                +" Value Expected : "+expmasterAdvanceMasterImportORExportBtn);
			System.out.println("masterAuthorInfoBtn                                                 : "+actmasterAuthorInfoBtn                                                 +" Value Expected : "+expmasterAuthorInfoBtn);
			System.out.println("masterMoveUpBtn                                                     : "+actmasterMoveUpBtn                                                     +" Value Expected : "+expmasterMoveUpBtn);
			System.out.println("masterMoveDownBtn                                                   : "+actmasterMoveDownBtn                                                   +" Value Expected : "+expmasterMoveDownBtn);
			System.out.println("masterSortBtn                                                       : "+actmasterSortBtn                                                       +" Value Expected : "+expmasterSortBtn);
			System.out.println("masterMassUpdateBtn                                                 : "+actmasterMassUpdateBtn                                                 +" Value Expected : "+expmasterMassUpdateBtn);
			System.out.println("masterImportFromXmlBtn                                              : "+actmasterImportFromXmlBtn                                              +" Value Expected : "+expmasterImportFromXmlBtn);
			System.out.println("masterExportFormatToXmlBtn                                          : "+actmasterExportFormatToXmlBtn                                          +" Value Expected : "+expmasterExportFormatToXmlBtn);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
			 
			masterRibbonControlNextBtn.click(); 
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizemasterBtn));	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
			
			boolean actmasterCustamizemasterBtn    	  =masterCustamizemasterBtn.isDisplayed();
			boolean actmasterCustamizeViewBtn    	  =masterCustamizeViewBtn.isDisplayed();
			boolean actmastercustamizeTreeBtn    	  =mastercustamizeTreeBtn.isDisplayed();
			 
			boolean expmasterCustamizemasterBtn    	  =true;
			boolean expmasterCustamizeViewBtn    	  =true;
			boolean expmastercustamizeTreeBtn    	  =true;
			 
			 
			 
			System.out.println("masterCustamizemasterBtn           : "+actmasterCustamizemasterBtn           +" Value Expected : "+expmasterCustamizemasterBtn);
			System.out.println("masterCustamizeViewBtn             : "+actmasterCustamizeViewBtn             +" Value Expected : "+expmasterCustamizeViewBtn);
			System.out.println("mastercustamizeTreeBtn             : "+actmastercustamizeTreeBtn             +" Value Expected : "+expmastercustamizeTreeBtn);
				
	       
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToMinimizeOptions));
			masterRibbonToMinimizeOptions.click();
			
			if(actmasterNewBtn==expmasterNewBtn && actmasterAddGroupBtn==expmasterAddGroupBtn && actmasterEditBtn==expmasterEditBtn
					&& actmasterCloneBtn==expmasterCloneBtn && actmasterPropertiesBtn==expmasterPropertiesBtn && actmasterDeleteBtn==expmasterDeleteBtn
					&& actmasterCloseBtn==expmasterCloseBtn && actmasterRibbonToExpandOptions==expmasterRibbonToExpandOptions
					
					&& actmasterGroupBtn==expmasterGroupBtn && actmasterDeleteAllBtn==expmasterDeleteAllBtn 
					&& actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity==expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity
					&& actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState==expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState 
					&& actmasterAdvanceMasterImportORExportBtn==expmasterAdvanceMasterImportORExportBtn
					&& actmasterAuthorInfoBtn==expmasterAuthorInfoBtn && actmasterMoveUpBtn==expmasterMoveUpBtn && actmasterMoveDownBtn==expmasterMoveDownBtn
					&& actmasterSortBtn==expmasterSortBtn && actmasterMassUpdateBtn==expmasterMassUpdateBtn && actmasterImportFromXmlBtn==expmasterImportFromXmlBtn
					&& actmasterExportFormatToXmlBtn==expmasterExportFormatToXmlBtn
					
					&& actmasterCustamizemasterBtn==expmasterCustamizemasterBtn && actmasterCustamizeViewBtn==expmasterCustamizeViewBtn  
					&& actmastercustamizeTreeBtn==expmastercustamizeTreeBtn )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	
	@FindBy(xpath="//*[@id='tblNewMasterGenerator']/thead/tr/th/label")
	public static List<WebElement> counterGridHeaderList;
	
	
	@FindBy(xpath="//input[@id='sName']")
	private static WebElement counterNameTxt;
	
	@FindBy(xpath="//input[@id='sCode']")
	private static WebElement counterCodeTxt;
	
	@FindBy(xpath="//input[@id='sDescription']")
	private static WebElement counterDescriptionTxt;
	
	@FindBy(xpath="//input[@id='iOutlet']")
	private static WebElement counterOutletTxt;
	
	@FindBy(xpath="//tbody[@id='iOutlet_table_data_body']/tr/td")
	private static List<WebElement> counterOutletBodyList;
	
	@FindBy(xpath="//input[@id='iTemplate']")
	private static WebElement counterTemplateTxt;
	
	@FindBy(xpath="//tbody[@id='iTemplate_table_data_body']/tr/td")
	private static List<WebElement> counterTemplateBodyList;
	
	@FindBy(xpath="//input[@id='sMacAddress']")
	private static WebElement counterMacAddressTxt;
	
	@FindBy(xpath="//input[@id='iSalesman']")
	private static WebElement counterSalesManTxt;
	
	@FindBy(xpath="//tbody[@id='iSalesman_table_data_body']/tr/td")
	private static List<WebElement> counterSalesManBodyList;
	
	@FindBy(xpath="//tbody[@id='tblMasterNewGeneratorBody']/tr[1]/td[5]")
	private static WebElement selectUserRow1;
	
	@FindBy(xpath="//tbody[@id='tblMasterNewGeneratorBody']/tr/td")
	private static List<WebElement> counterGrid;
	
	@FindBy(xpath="//input[@id='iUser']")
	private static WebElement userTxt;
	
	@FindBy(xpath="//tbody[@id='iUser_table_data_body']/tr/td")
	private static List<WebElement> userBodyList;
	
	
	@FindBy(xpath="//*[@id='divBtnGroup1']/div/a")
	public static WebElement poleDisplayTab;
	
	@FindBy(xpath="//select[@id='iDriver']")
	public static WebElement driverDropDown;
	
	@FindBy(xpath="//select[@id='iPort']")
	public static WebElement portDropDown;
	
	@FindBy(xpath="//select[@id='iBaudrate']")
	public static WebElement baurdRateDropDown;
	
	@FindBy(xpath="//select[@id='iParity']")
	public static WebElement parityDropDown;
	
	@FindBy(xpath="//input[@id='iDatabits']")
	public static WebElement dataBitsDropDown;
	
	@FindBy(xpath="//select[@id='iStopbits']")
	public static WebElement stopBitsDropDown;
	
	@FindBy(xpath="//select[@id='iHandshake']")
	public static WebElement handShakeDropDown;
	
	@FindBy(xpath="//input[@id='bUsePoleDisplay']")
	public static WebElement usePoleDisplayChkBox;
	
	
	@FindBy(xpath="//*[@id='divBtnGroup2']/div/a")
	public static WebElement cashDrawerTab;
	
	@FindBy(xpath="//input[@id='sPrinterName']")
	public static WebElement printerNameTxt;
	
	@FindBy(xpath="//input[@id='sCashDrawerCommand']")
	public static WebElement cashDrawerCommandTxt;
	
	
	@FindBy(xpath="//*[@id='divBtnGroup3']/div/a")
	public static WebElement weighingScaleTab;
	
	@FindBy(xpath="//select[@id='iDriverWeighingScale']")
	public static WebElement wsdriverDropDown;
	
	@FindBy(xpath="//select[@id='iPortWeighingScale']")
	public static WebElement wsportDropDown;
	
	@FindBy(xpath="//select[@id='iBaudRateWeighingScale']")
	public static WebElement wsbaurdRateDropDown;
	
	@FindBy(xpath="//select[@id='iParityWeighingScale']")
	public static WebElement wsparityDropDown;
	
	@FindBy(xpath="//input[@id='iDataBitsWeighingScale']")
	public static WebElement wsdataBitsDropDown;
	
	@FindBy(xpath="//select[@id='iStopBitsWeighingScale']")
	public static WebElement wsstopBitsDropDown;
	
	@FindBy(xpath="//select[@id='iHandshakeWeighingScale']")
	public static WebElement wshandShakeDropDown;
	
	@FindBy(xpath="//input[@id='bUseWeighingScale']")
	public static WebElement useWeighingScaleChkBox;
	
	
	
	public boolean checkNewOptionInCounterAndAvailableFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkNewOptionInOutletAndAvailableFields Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			int newHeaderTabListCount = newHeaderTabList.size();
			
			ArrayList<String> newHeaderTabListArray = new ArrayList<String>();
			
			for(int i=0;i<newHeaderTabListCount;i++)
			{
				String data = newHeaderTabList.get(i).getText();
				
				newHeaderTabListArray.add(data);
			}
			
			String actnewHeaderTabList = newHeaderTabListArray.toString();
			String expnewHeaderTabList = "[General, Pole Display, Cash Drawer, Weighing Scale, ]";
			
			System.out.println("actnewHeaderTabList : "+actnewHeaderTabList);
			System.out.println("expnewHeaderTabList : "+expnewHeaderTabList);
			
			
			int counterGridHeaderListCount = counterGridHeaderList.size();
			
			ArrayList<String> counterGridHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<counterGridHeaderListCount;i++)
			{
				String data = counterGridHeaderList.get(i).getText();
				
				counterGridHeaderListArray.add(data);
			}
			
			String actcounterGridHeaderList = counterGridHeaderListArray.toString();
			String expcounterGridHeaderList = "[, , Shift, User, From Date, To Date]";
			
			System.out.println("actcounterGridHeaderList : "+actcounterGridHeaderList);
			System.out.println("expcounterGridHeaderList : "+expcounterGridHeaderList);
			
			
			boolean actcounterNameTxt             = counterNameTxt.isDisplayed();
			boolean actcounterCodeTxt             = counterCodeTxt.isDisplayed();
			boolean actcounterDescriptionTxt      = counterDescriptionTxt.isDisplayed();
			boolean actcounterOutletTxt           = counterOutletTxt.isDisplayed();
			boolean actcounterTemplateTxt         = counterTemplateTxt.isDisplayed();
			boolean actcounterMacAddressTxt       = counterMacAddressTxt.isDisplayed();
			boolean actcounterSalesManTxt         = counterSalesManTxt.isDisplayed();
			
			boolean expcounterNameTxt             = true;
			boolean expcounterCodeTxt             = true;
			boolean expcounterDescriptionTxt      = true;
			boolean expcounterOutletTxt           = true;
			boolean expcounterTemplateTxt         = true;
			boolean expcounterMacAddressTxt       = true;
			boolean expcounterSalesManTxt         = true;
			
			System.out.println("counterNameTxt            : "+actcounterNameTxt            +" Value Expected : "+expcounterNameTxt);
			System.out.println("counterCodeTxt            : "+actcounterCodeTxt            +" Value Expected : "+expcounterCodeTxt);
			System.out.println("counterDescriptionTxt     : "+actcounterDescriptionTxt     +" Value Expected : "+expcounterDescriptionTxt);
			System.out.println("counterOutletTxt          : "+actcounterOutletTxt          +" Value Expected : "+expcounterOutletTxt);
			System.out.println("counterTemplateTxt        : "+actcounterTemplateTxt        +" Value Expected : "+expcounterTemplateTxt);
			System.out.println("counterMacAddressTxt      : "+actcounterMacAddressTxt      +" Value Expected : "+expcounterMacAddressTxt);
			System.out.println("counterSalesManTxt        : "+actcounterSalesManTxt        +" Value Expected : "+expcounterSalesManTxt);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(poleDisplayTab));
			poleDisplayTab.click();
			
			
			Thread.sleep(2000);
			
			
			boolean actdriverDropDown       = driverDropDown.isDisplayed();
			boolean actportDropDown         = portDropDown.isDisplayed();
			boolean actbaurdRateDropDown    = baurdRateDropDown.isDisplayed();
			boolean actparityDropDown       = parityDropDown.isDisplayed();
			boolean actdataBitsDropDown     = dataBitsDropDown.isDisplayed();
			boolean actstopBitsDropDown     = stopBitsDropDown.isDisplayed();
			boolean acthandShakeDropDown    = handShakeDropDown.isDisplayed();
			boolean actusePoleDisplayChkBox = usePoleDisplayChkBox.isDisplayed();
			
			boolean expdriverDropDown       = true;
			boolean expportDropDown         = true;
			boolean expbaurdRateDropDown    = true;
			boolean expparityDropDown       = true;
			boolean expdataBitsDropDown     = true;
			boolean expstopBitsDropDown     = true;
			boolean exphandShakeDropDown    = true;
			boolean expusePoleDisplayChkBox = true;
			
			System.out.println("driverDropDown       : "+actdriverDropDown       +" Value Expected : "+expdriverDropDown);
			System.out.println("portDropDown         : "+actportDropDown         +" Value Expected : "+expportDropDown);
			System.out.println("baurdRateDropDown    : "+actbaurdRateDropDown    +" Value Expected : "+expbaurdRateDropDown);
			System.out.println("parityDropDown       : "+actparityDropDown       +" Value Expected : "+expparityDropDown);
			System.out.println("dataBitsDropDown     : "+actdataBitsDropDown     +" Value Expected : "+expdataBitsDropDown);
			System.out.println("stopBitsDropDown     : "+actstopBitsDropDown     +" Value Expected : "+expstopBitsDropDown);
			System.out.println("handShakeDropDown    : "+acthandShakeDropDown    +" Value Expected : "+exphandShakeDropDown);
			System.out.println("usePoleDisplayChkBox : "+actusePoleDisplayChkBox +" Value Expected : "+expusePoleDisplayChkBox);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashDrawerTab));
			cashDrawerTab.click();
			
			Thread.sleep(2000);
			
			
			boolean actprinterNameTxt       = printerNameTxt.isDisplayed();
			boolean actcashDrawerCommandTxt = cashDrawerCommandTxt.isDisplayed();
			
			boolean expprinterNameTxt       = true;
			boolean expcashDrawerCommandTxt = true;
			
			System.out.println("printerNameTxt       : "+actprinterNameTxt      +" Value Expected : "+expprinterNameTxt);
			System.out.println("cashDrawerCommandTxt : "+actcashDrawerCommandTxt+" Value Expected : "+expcashDrawerCommandTxt);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(weighingScaleTab));
			weighingScaleTab.click();
			
			Thread.sleep(2000);
			
			
			boolean actwsdriverDropDown       = wsdriverDropDown.isDisplayed();
			boolean actwsportDropDown         = wsportDropDown.isDisplayed();
			boolean actwsbaurdRateDropDown    = wsbaurdRateDropDown.isDisplayed();
			boolean actwsparityDropDown       = wsparityDropDown.isDisplayed();
			boolean actwsdataBitsDropDown     = wsdataBitsDropDown.isDisplayed();
			boolean actwsstopBitsDropDown     = wsstopBitsDropDown.isDisplayed();
			boolean actwshandShakeDropDown    = wshandShakeDropDown.isDisplayed();
			boolean actuseWeighingScaleChkBox = useWeighingScaleChkBox.isDisplayed();
			
			boolean expwsdriverDropDown       = true;
			boolean expwsportDropDown         = true;
			boolean expwsbaurdRateDropDown    = true;
			boolean expwsparityDropDown       = true;
			boolean expwsdataBitsDropDown     = true;
			boolean expwsstopBitsDropDown     = true;
			boolean expwshandShakeDropDown    = true;
			boolean expuseWeighingScaleChkBox = true;
			
			System.out.println("wsdriverDropDown       : "+actwsdriverDropDown       +" Value Expected : "+expwsdriverDropDown);
			System.out.println("wsportDropDown         : "+actwsportDropDown         +" Value Expected : "+expwsportDropDown);
			System.out.println("wsbaurdRateDropDown    : "+actwsbaurdRateDropDown    +" Value Expected : "+expwsbaurdRateDropDown);
			System.out.println("wsparityDropDown       : "+actwsparityDropDown       +" Value Expected : "+expwsparityDropDown);
			System.out.println("wsdataBitsDropDown     : "+actwsdataBitsDropDown     +" Value Expected : "+expwsdataBitsDropDown);
			System.out.println("wsstopBitsDropDown     : "+actwsstopBitsDropDown     +" Value Expected : "+expwsstopBitsDropDown);
			System.out.println("wshandShakeDropDown    : "+actwshandShakeDropDown    +" Value Expected : "+expwshandShakeDropDown);
			System.out.println("useWeighingScaleChkBox : "+actuseWeighingScaleChkBox +" Value Expected : "+expuseWeighingScaleChkBox);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			
			if(actnewHeaderTabList.equalsIgnoreCase(expnewHeaderTabList) && actcounterGridHeaderList.equalsIgnoreCase(expcounterGridHeaderList)
					&& actcounterNameTxt==expcounterNameTxt && actcounterCodeTxt==expcounterCodeTxt && actcounterDescriptionTxt==expcounterDescriptionTxt
					&& actcounterOutletTxt==expcounterOutletTxt && actcounterTemplateTxt==expcounterTemplateTxt && actcounterMacAddressTxt==expcounterMacAddressTxt
					&& actcounterSalesManTxt==expcounterSalesManTxt
					
					&& actdriverDropDown==expdriverDropDown && actportDropDown==expportDropDown && actbaurdRateDropDown==expbaurdRateDropDown 
					&& actparityDropDown==expparityDropDown && actdataBitsDropDown==expdataBitsDropDown && actstopBitsDropDown==expstopBitsDropDown
					&& acthandShakeDropDown==exphandShakeDropDown && actusePoleDisplayChkBox==expusePoleDisplayChkBox
					
					&& actprinterNameTxt==expprinterNameTxt && actcashDrawerCommandTxt==expcashDrawerCommandTxt
					
					&& actwsdriverDropDown==expwsdriverDropDown && actwsportDropDown==expwsportDropDown && actwsbaurdRateDropDown==expwsbaurdRateDropDown 
					&& actwsparityDropDown==expwsparityDropDown && actwsdataBitsDropDown==expwsdataBitsDropDown && actwsstopBitsDropDown==expwsstopBitsDropDown
					&& actwshandShakeDropDown==expwshandShakeDropDown && actuseWeighingScaleChkBox==expuseWeighingScaleChkBox)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	


	public boolean checkSavingCounterWithAllMandateFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavingOutletWithAllMandateFields Method Executes.............   *****************************");
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterNameTxt));
			counterNameTxt.click();
			counterNameTxt.sendKeys("Counter");
			counterNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterCodeTxt));
			counterCodeTxt.click();
			counterCodeTxt.sendKeys("Counter");
			counterCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterOutletTxt));
			counterOutletTxt.click();
			counterOutletTxt.sendKeys(Keys.SPACE);

			Thread.sleep(2000);
			
			int counterOutletBodyListCount = counterOutletBodyList.size();
			
			for(int i=0;i<counterOutletBodyListCount;i++)
			{
				String data = counterOutletBodyList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1"))
				{
					counterOutletBodyList.get(i).click();
					
					break;
				}
			}
			
			counterOutletTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterTemplateTxt));
			counterTemplateTxt.click();
			counterTemplateTxt.sendKeys(Keys.SPACE);

			Thread.sleep(2000);
			
			int counterTemplateBodyListCount = counterTemplateBodyList.size();
			
			for(int i=0;i<counterTemplateBodyListCount;i++)
			{
				String data = counterTemplateBodyList.get(i).getText();
				
				if(data.equalsIgnoreCase("Default Template"))
				{
					counterTemplateBodyList.get(i).click();
					
					break;
				}
			}
			
			counterTemplateTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectUserRow1));
			selectUserRow1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userTxt));
			userTxt.click();
			userTxt.sendKeys(Keys.SPACE);

			Thread.sleep(2000);
			
			int userBodyListCount = userBodyList.size();
			
			for(int i=0;i<userBodyListCount;i++)
			{
				String data = userBodyList.get(i).getText();
				
				if(data.equalsIgnoreCase("UserAllOptions"))
				{
					userBodyList.get(i).click();
					
					break;
				}
			}
			
			userTxt.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="Pole Display Port and Weighing Sale Port can not be same";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message  :"+actMessage+" value Expected : "+expMessage);
			 
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			if(actSavingMessage.equalsIgnoreCase(expSavingMessage) && actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	

	public boolean checkSavedCounterAndEditingCounter() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavedCounterAndEditingCounter Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("Counter") && posListChkBox.get(i).isSelected()==false)
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterNameTxt));
			counterNameTxt.click();
			
			String actcounterNameTxt = counterNameTxt.getAttribute("value");
			String expcounterNameTxt = "Counter";
			
			System.out.println("counterNameTxt : "+actcounterNameTxt+" Value Expected : "+expcounterNameTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterCodeTxt));
			counterCodeTxt.click();

			String actcounterCodeTxt = counterCodeTxt.getAttribute("value");
			String expcounterCodeTxt = "Counter";
			
			System.out.println("counterCodeTxt : "+actcounterCodeTxt+" Value Expected : "+expcounterCodeTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterOutletTxt));
			counterOutletTxt.click();
			
			String actcounterOutletTxt = counterOutletTxt.getAttribute("value");
			String expcounterOutletTxt = "Outlet1";
			
			System.out.println("counterOutletTxt : "+actcounterOutletTxt+" Value Expected : "+expcounterOutletTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterTemplateTxt));
			counterTemplateTxt.click();
			
			String actcounterTemplateTxt = counterTemplateTxt.getAttribute("value");
			String expcounterTemplateTxt = "Default Template";
			
			System.out.println("counterTemplateTxt : "+actcounterTemplateTxt+" Value Expected : "+expcounterTemplateTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectUserRow1));
			selectUserRow1.click();
			
			
			String actselectUserRow1 = userTxt.getAttribute("value");
			String expselectUserRow1 = "UserAllOptions";
			
			System.out.println("selectUserRow1 : "+actselectUserRow1+" Value Expected : "+expselectUserRow1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterNameTxt));
			counterNameTxt.click();
			counterNameTxt.clear();
			counterNameTxt.sendKeys("Counter Update");
			counterNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterCodeTxt));
			counterCodeTxt.click();
			counterCodeTxt.clear();
			counterCodeTxt.sendKeys("Counter Update");
			counterCodeTxt.sendKeys(Keys.TAB);
			
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="Pole Display Port and Weighing Sale Port can not be same";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message  :"+actMessage+" value Expected : "+expMessage);
			 
			String expSavingMessage="Updated Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			
			if(actcounterNameTxt.equalsIgnoreCase(expcounterNameTxt) && actcounterCodeTxt.equalsIgnoreCase(expcounterCodeTxt)
					&& actcounterOutletTxt.equalsIgnoreCase(expcounterOutletTxt) && actcounterTemplateTxt.equalsIgnoreCase(expcounterTemplateTxt)
					&& actselectUserRow1.equalsIgnoreCase(expselectUserRow1)
					&& actMessage.equalsIgnoreCase(expMessage) && actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	
	
	public boolean checkUpdatedCounterAndSaveCounterUsingCloneOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkUpdatedCounterAndSaveCounterUsingCloneOption Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("Counter Update"))
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				if(posListChkBox.get(i).isSelected()==false)
  	 				{
  	 					posListChkBox.get(i).click();
  	 				}
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterNameTxt));
			counterNameTxt.click();
			
			String actcounterNameTxt = counterNameTxt.getAttribute("value");
			String expcounterNameTxt = "Counter Update";
			
			System.out.println("counterNameTxt : "+actcounterNameTxt+" Value Expected : "+expcounterNameTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterCodeTxt));
			counterCodeTxt.click();

			String actcounterCodeTxt = counterCodeTxt.getAttribute("value");
			String expcounterCodeTxt = "Counter Update";
			
			System.out.println("counterCodeTxt : "+actcounterCodeTxt+" Value Expected : "+expcounterCodeTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterOutletTxt));
			counterOutletTxt.click();
			
			String actcounterOutletTxt = counterOutletTxt.getAttribute("value");
			String expcounterOutletTxt = "Outlet1";
			
			System.out.println("counterOutletTxt : "+actcounterOutletTxt+" Value Expected : "+expcounterOutletTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterTemplateTxt));
			counterTemplateTxt.click();
			
			String actcounterTemplateTxt = counterTemplateTxt.getAttribute("value");
			String expcounterTemplateTxt = "Default Template";
			
			System.out.println("counterTemplateTxt : "+actcounterTemplateTxt+" Value Expected : "+expcounterTemplateTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectUserRow1));
			selectUserRow1.click();
			
			String actselectUserRow1 = userTxt.getAttribute("value");
			String expselectUserRow1 = "UserAllOptions";
			
			System.out.println("selectUserRow1 : "+actselectUserRow1+" Value Expected : "+expselectUserRow1);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloneBtn));
			editcloneBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterNameTxt));
			counterNameTxt.click();
			counterNameTxt.clear();
			counterNameTxt.sendKeys("CounterToDelete");
			counterNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterCodeTxt));
			counterCodeTxt.click();
			counterCodeTxt.clear();
			counterCodeTxt.sendKeys("CounterToDelete");
			counterCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterMacAddressTxt));
			counterMacAddressTxt.click();
			counterMacAddressTxt.sendKeys(Keys.END);
			counterMacAddressTxt.sendKeys(Keys.BACK_SPACE);
			counterMacAddressTxt.sendKeys("6");
			counterMacAddressTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="Pole Display Port and Weighing Sale Port can not be same";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message  :"+actMessage+" value Expected : "+expMessage);
			 
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			
			if(actcounterNameTxt.equalsIgnoreCase(expcounterNameTxt) && actcounterCodeTxt.equalsIgnoreCase(expcounterCodeTxt)
					&& actcounterOutletTxt.equalsIgnoreCase(expcounterOutletTxt) && actcounterTemplateTxt.equalsIgnoreCase(expcounterTemplateTxt)
					&& actselectUserRow1.equalsIgnoreCase(expselectUserRow1)
					&& actMessage.equalsIgnoreCase(expMessage) && actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	

	
	public static boolean checkDeleteCounterAndClose() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkDeleteCounterAndClose Method Executes.............   *****************************");
		
		try
		{
			if(selectAllHeaderChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			if(selectAllHeaderChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("CounterToDelete"))
  	 			{
  	 				posNameList.get(i).click();
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
			 
			 
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
  	 		masterDeleteBtn.click();
	         
  	 		Thread.sleep(2000);
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
  	 		System.out.println(getMsgOnDelete.getText());
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
  	 		clickOnOkInDelete.click();
	         
  	 		String expMessage="Record Deleted Successfully.";
	 		
  	 		String actMessage=checkValidationMessage(expMessage);
  	 		
				
  	 		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
  	 		masterCloseBtn.click();
				
  	 		if(actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		} 
	}
	
	// Designation
	
	@FindBy(xpath="//a[@id='1129']")
	private static WebElement designation;
	
	public boolean checkDesignationHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(payroll));
			payroll.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designation));
			designation.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
			     
			boolean actmasterNewBtn    	 		   =masterNewBtn.isDisplayed();
			boolean actmasterAddGroupBtn    	   =masterAddGroupBtn.isDisplayed();
			boolean actmasterEditBtn 			   =masterEditBtn.isDisplayed();
			boolean actmasterCloneBtn 			   =masterCloneBtn.isDisplayed();
			boolean actmasterPropertiesBtn 		   =masterPropertiesBtn.isDisplayed();
			boolean actmasterDeleteBtn 			   =masterDeleteBtn.isDisplayed();
			boolean actmasterCloseBtn 		 	   =masterCloseBtn.isDisplayed();
			boolean actmasterRibbonToExpandOptions =masterRibbonToExpandOptions.isDisplayed();
			
			boolean expmasterNewBtn    	 			=true;
			boolean expmasterAddGroupBtn    		=true;
			boolean expmasterEditBtn 				=true;
			boolean expmasterCloneBtn 				=true;
			boolean expmasterPropertiesBtn 			=true;
			boolean expmasterDeleteBtn 				=true;
			boolean expmasterCloseBtn 				=true;
			boolean expmasterRibbonToExpandOptions 	=true;
			
			
			
			System.out.println("masterNewBtn                  : "+actmasterNewBtn                +" Value Expected : "+expmasterNewBtn);
			System.out.println("masterAddGroupBtn             : "+actmasterAddGroupBtn           +" Value Expected : "+expmasterAddGroupBtn);
			System.out.println("masterEditBtn                 : "+actmasterEditBtn               +" Value Expected : "+expmasterEditBtn);
			System.out.println("masterCloneBtn                : "+actmasterCloneBtn              +" Value Expected : "+expmasterCloneBtn);
			System.out.println("masterPropertiesBtn           : "+actmasterPropertiesBtn         +" Value Expected : "+expmasterPropertiesBtn);
			System.out.println("masterDeleteBtn               : "+actmasterDeleteBtn             +" Value Expected : "+expmasterDeleteBtn);
			System.out.println("masterCloseBtn                : "+actmasterCloseBtn              +" Value Expected : "+expmasterCloseBtn);
			System.out.println("masterRibbonToExpandOptions   : "+actmasterRibbonToExpandOptions +" Value Expected : "+expmasterRibbonToExpandOptions);
				
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
			masterRibbonToExpandOptions.click();
				 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));	
			
			boolean actmasterGroupBtn    	 													=masterGroupBtn.isDisplayed();
			boolean actmasterDeleteAllBtn    	 												=masterDeleteAllBtn.isDisplayed();
			boolean actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
			boolean actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
			boolean actmasterAdvanceMasterImportORExportBtn    	 								=masterAdvanceMasterImportORExportBtn.isDisplayed();
			boolean actmasterAuthorInfoBtn    	 												=masterAuthorInfoBtn.isDisplayed();
			boolean actmasterMoveUpBtn    	 													=masterMoveUpBtn.isDisplayed();
			boolean actmasterMoveDownBtn    	 												=masterMoveDownBtn.isDisplayed();
			boolean actmasterSortBtn    	 													=masterSortBtn.isDisplayed();
			boolean actmasterMassUpdateBtn    	 												=masterMassUpdateBtn.isDisplayed();
			boolean actmasterImportFromXmlBtn    	 											=masterImportFromXmlBtn.isDisplayed();
			boolean actmasterExportFormatToXmlBtn    	 										=masterExportFormatToXmlBtn.isDisplayed();
			
			boolean expmasterGroupBtn    	 													=true;
			boolean expmasterDeleteAllBtn    	 												=true;
			boolean expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=true;
			boolean expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=true;
			boolean expmasterAdvanceMasterImportORExportBtn    	 								=true;
			boolean expmasterAuthorInfoBtn    	 												=true;
			boolean expmasterMoveUpBtn    	 													=true;
			boolean expmasterMoveDownBtn    	 												=true;
			boolean expmasterSortBtn    	 													=true;
			boolean expmasterMassUpdateBtn    	 												=true;
			boolean expmasterImportFromXmlBtn    	 											=true;
			boolean expmasterExportFormatToXmlBtn    	 										=true;
			
			
			System.out.println("masterGroupBtn                                                      : "+actmasterGroupBtn                                                      +" Value Expected : "+expmasterGroupBtn);
			System.out.println("masterDeleteAllBtn                                                  : "+actmasterDeleteAllBtn                                                  +" Value Expected : "+expmasterDeleteAllBtn);
			System.out.println("masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity : "+actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity +" Value Expected : "+expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity);
			System.out.println("masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          : "+actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          +" Value Expected : "+expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState);
			System.out.println("masterAdvanceMasterImportORExportBtn                                : "+actmasterAdvanceMasterImportORExportBtn                                +" Value Expected : "+expmasterAdvanceMasterImportORExportBtn);
			System.out.println("masterAuthorInfoBtn                                                 : "+actmasterAuthorInfoBtn                                                 +" Value Expected : "+expmasterAuthorInfoBtn);
			System.out.println("masterMoveUpBtn                                                     : "+actmasterMoveUpBtn                                                     +" Value Expected : "+expmasterMoveUpBtn);
			System.out.println("masterMoveDownBtn                                                   : "+actmasterMoveDownBtn                                                   +" Value Expected : "+expmasterMoveDownBtn);
			System.out.println("masterSortBtn                                                       : "+actmasterSortBtn                                                       +" Value Expected : "+expmasterSortBtn);
			System.out.println("masterMassUpdateBtn                                                 : "+actmasterMassUpdateBtn                                                 +" Value Expected : "+expmasterMassUpdateBtn);
			System.out.println("masterImportFromXmlBtn                                              : "+actmasterImportFromXmlBtn                                              +" Value Expected : "+expmasterImportFromXmlBtn);
			System.out.println("masterExportFormatToXmlBtn                                          : "+actmasterExportFormatToXmlBtn                                          +" Value Expected : "+expmasterExportFormatToXmlBtn);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
			 
			masterRibbonControlNextBtn.click(); 
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizemasterBtn));	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
			
			boolean actmasterCustamizemasterBtn    	  =masterCustamizemasterBtn.isDisplayed();
			boolean actmasterCustamizeViewBtn    	  =masterCustamizeViewBtn.isDisplayed();
			boolean actmastercustamizeTreeBtn    	  =mastercustamizeTreeBtn.isDisplayed();
			 
			boolean expmasterCustamizemasterBtn    	  =true;
			boolean expmasterCustamizeViewBtn    	  =true;
			boolean expmastercustamizeTreeBtn    	  =true;
			 
			 
			 
			System.out.println("masterCustamizemasterBtn           : "+actmasterCustamizemasterBtn           +" Value Expected : "+expmasterCustamizemasterBtn);
			System.out.println("masterCustamizeViewBtn             : "+actmasterCustamizeViewBtn             +" Value Expected : "+expmasterCustamizeViewBtn);
			System.out.println("mastercustamizeTreeBtn             : "+actmastercustamizeTreeBtn             +" Value Expected : "+expmastercustamizeTreeBtn);
				
	       
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToMinimizeOptions));
			masterRibbonToMinimizeOptions.click();
			
			if(actmasterNewBtn==expmasterNewBtn && actmasterAddGroupBtn==expmasterAddGroupBtn && actmasterEditBtn==expmasterEditBtn
					&& actmasterCloneBtn==expmasterCloneBtn && actmasterPropertiesBtn==expmasterPropertiesBtn && actmasterDeleteBtn==expmasterDeleteBtn
					&& actmasterCloseBtn==expmasterCloseBtn && actmasterRibbonToExpandOptions==expmasterRibbonToExpandOptions
					
					&& actmasterGroupBtn==expmasterGroupBtn && actmasterDeleteAllBtn==expmasterDeleteAllBtn 
					&& actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity==expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity
					&& actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState==expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState 
					&& actmasterAdvanceMasterImportORExportBtn==expmasterAdvanceMasterImportORExportBtn
					&& actmasterAuthorInfoBtn==expmasterAuthorInfoBtn && actmasterMoveUpBtn==expmasterMoveUpBtn && actmasterMoveDownBtn==expmasterMoveDownBtn
					&& actmasterSortBtn==expmasterSortBtn && actmasterMassUpdateBtn==expmasterMassUpdateBtn && actmasterImportFromXmlBtn==expmasterImportFromXmlBtn
					&& actmasterExportFormatToXmlBtn==expmasterExportFormatToXmlBtn
					
					&& actmasterCustamizemasterBtn==expmasterCustamizemasterBtn && actmasterCustamizeViewBtn==expmasterCustamizeViewBtn  
					&& actmastercustamizeTreeBtn==expmastercustamizeTreeBtn )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	@FindBy(xpath="//input[@id='sName']")
	private static WebElement desigNameTxt;
	
	@FindBy(xpath="//input[@id='sCode']")
	private static WebElement designCodeTxt;
	
	public boolean checkNewOptionInDesignationAndAvailableFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			
			
			boolean actdesigNameTxt             = desigNameTxt.isDisplayed();
			boolean actdesignCodeTxt            = designCodeTxt.isDisplayed();
			
			boolean expdesigNameTxt            = true;
			boolean expdesignCodeTxt           = true;
			
			
			
			System.out.println("desigNameTxt            : "+actdesigNameTxt            +" Value Expected : "+expdesigNameTxt);
			System.out.println("designCodeTxt           : "+actdesignCodeTxt           +" Value Expected : "+expdesignCodeTxt);
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			
			if(actdesigNameTxt==expdesigNameTxt && actdesignCodeTxt==expdesignCodeTxt)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	public boolean checkSavingDesignationWithAllMandateFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavingOutletWithAllMandateFields Method Executes.............   *****************************");
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(desigNameTxt));
			desigNameTxt.click();
			desigNameTxt.sendKeys("Sales");
			desigNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designCodeTxt));
			designCodeTxt.click();
			designCodeTxt.sendKeys("Sales");
			designCodeTxt.sendKeys(Keys.TAB);
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			 
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			if(actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	public boolean checkSavedDesignationAndEditingDesignation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavingOutletWithAllMandateFields Method Executes.............   *****************************");
		
		try
		{
			
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("Sales") && posListChkBox.get(i).isSelected()==false)
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(desigNameTxt));
			desigNameTxt.click();
			
			String actdesigNameTxt = desigNameTxt.getAttribute("value");
			String expdesigNameTxt = "Sales";
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designCodeTxt));
			designCodeTxt.click();
			
			String actdesignCodeTxt = designCodeTxt.getAttribute("value");
			String expdesignCodeTxt = "Sales";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(desigNameTxt));
			desigNameTxt.click();
			desigNameTxt.sendKeys(Keys.END);
			desigNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			desigNameTxt.sendKeys("SalesMan");
			desigNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designCodeTxt));
			designCodeTxt.click();
			designCodeTxt.sendKeys(Keys.END);
			designCodeTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			designCodeTxt.sendKeys("SalesMan");
			designCodeTxt.sendKeys(Keys.TAB);
			
			
			Thread.sleep(2000);
			
			
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			 
			String expSavingMessage="Updated Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			if(actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	public boolean checkUpdatedDesignationAndSaveDesignationUsingCloneOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("SalesMan"))
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				if(posListChkBox.get(i).isSelected()==false)
  	 				{
  	 					posListChkBox.get(i).click();
  	 				}
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(desigNameTxt));
  	 		desigNameTxt.click();
			
			String actdesigNameTxt = desigNameTxt.getAttribute("value");
			String expdesigNameTxt = "SalesMan";
			
			System.out.println("desigNameTxt : "+actdesigNameTxt+" Value Expected : "+expdesigNameTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designCodeTxt));
			designCodeTxt.click();

			String actdesignCodeTxt = designCodeTxt.getAttribute("value");
			String expdesignCodeTxt = "SalesMan";
			
			System.out.println("designCodeTxt : "+actdesignCodeTxt+" Value Expected : "+expdesignCodeTxt);
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloneBtn));
			editcloneBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(desigNameTxt));
			desigNameTxt.click();
			desigNameTxt.clear();
			desigNameTxt.sendKeys("DesignationToDelete");
			desigNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designCodeTxt));
			designCodeTxt.click();
			designCodeTxt.clear();
			designCodeTxt.sendKeys("DesignationToDelete");
			designCodeTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			if(actdesigNameTxt.equalsIgnoreCase(expdesigNameTxt) && actdesignCodeTxt.equalsIgnoreCase(expdesignCodeTxt) 
					&& actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	public static boolean checkDeleteDesignationAndClose() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			if(selectAllHeaderChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			if(selectAllHeaderChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("DesignationToDelete"))
  	 			{
  	 				posNameList.get(i).click();
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
			 
			 
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
  	 		masterDeleteBtn.click();
	         
  	 		Thread.sleep(2000);
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
  	 		System.out.println(getMsgOnDelete.getText());
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
  	 		clickOnOkInDelete.click();
	         
  	 		String expMessage="Record Deleted Successfully.";
	 		
  	 		String actMessage=checkValidationMessage(expMessage);
  	 		
				
  	 		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
  	 		masterCloseBtn.click();
				
  	 		if(actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		} 
	}
	
	
	
	
	// Employee
	
	@FindBy(xpath="//a[@id='1103']//span[contains(text(),'Payroll')]")
	private static WebElement payroll;
	
	@FindBy(xpath="//a[@id='1128']//span[contains(text(),'Employee')]")
	private static WebElement employee;
	
	
	public boolean checkEmployeeHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkEmployeeHomePageOptions Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(payroll));
			payroll.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(employee));
			employee.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
			     
			boolean actmasterNewBtn    	 		   =masterNewBtn.isDisplayed();
			boolean actmasterAddGroupBtn    	   =masterAddGroupBtn.isDisplayed();
			boolean actmasterEditBtn 			   =masterEditBtn.isDisplayed();
			boolean actmasterCloneBtn 			   =masterCloneBtn.isDisplayed();
			boolean actmasterPropertiesBtn 		   =masterPropertiesBtn.isDisplayed();
			boolean actmasterDeleteBtn 			   =masterDeleteBtn.isDisplayed();
			boolean actmasterCloseBtn 		 	   =masterCloseBtn.isDisplayed();
			boolean actmasterRibbonToExpandOptions =masterRibbonToExpandOptions.isDisplayed();
			
			boolean expmasterNewBtn    	 			=true;
			boolean expmasterAddGroupBtn    		=true;
			boolean expmasterEditBtn 				=true;
			boolean expmasterCloneBtn 				=true;
			boolean expmasterPropertiesBtn 			=true;
			boolean expmasterDeleteBtn 				=true;
			boolean expmasterCloseBtn 				=true;
			boolean expmasterRibbonToExpandOptions 	=true;
			
			
			
			System.out.println("masterNewBtn                  : "+actmasterNewBtn                +" Value Expected : "+expmasterNewBtn);
			System.out.println("masterAddGroupBtn             : "+actmasterAddGroupBtn           +" Value Expected : "+expmasterAddGroupBtn);
			System.out.println("masterEditBtn                 : "+actmasterEditBtn               +" Value Expected : "+expmasterEditBtn);
			System.out.println("masterCloneBtn                : "+actmasterCloneBtn              +" Value Expected : "+expmasterCloneBtn);
			System.out.println("masterPropertiesBtn           : "+actmasterPropertiesBtn         +" Value Expected : "+expmasterPropertiesBtn);
			System.out.println("masterDeleteBtn               : "+actmasterDeleteBtn             +" Value Expected : "+expmasterDeleteBtn);
			System.out.println("masterCloseBtn                : "+actmasterCloseBtn              +" Value Expected : "+expmasterCloseBtn);
			System.out.println("masterRibbonToExpandOptions   : "+actmasterRibbonToExpandOptions +" Value Expected : "+expmasterRibbonToExpandOptions);
				
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
			masterRibbonToExpandOptions.click();
				 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));	
			
			boolean actmasterGroupBtn    	 													=masterGroupBtn.isDisplayed();
			boolean actmasterDeleteAllBtn    	 												=masterDeleteAllBtn.isDisplayed();
			boolean actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
			boolean actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
			boolean actmasterAdvanceMasterImportORExportBtn    	 								=masterAdvanceMasterImportORExportBtn.isDisplayed();
			boolean actmasterAuthorInfoBtn    	 												=masterAuthorInfoBtn.isDisplayed();
			boolean actmasterMoveUpBtn    	 													=masterMoveUpBtn.isDisplayed();
			boolean actmasterMoveDownBtn    	 												=masterMoveDownBtn.isDisplayed();
			boolean actmasterSortBtn    	 													=masterSortBtn.isDisplayed();
			boolean actmasterMassUpdateBtn    	 												=masterMassUpdateBtn.isDisplayed();
			boolean actmasterImportFromXmlBtn    	 											=masterImportFromXmlBtn.isDisplayed();
			boolean actmasterExportFormatToXmlBtn    	 										=masterExportFormatToXmlBtn.isDisplayed();
			
			boolean expmasterGroupBtn    	 													=true;
			boolean expmasterDeleteAllBtn    	 												=true;
			boolean expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=true;
			boolean expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=true;
			boolean expmasterAdvanceMasterImportORExportBtn    	 								=true;
			boolean expmasterAuthorInfoBtn    	 												=true;
			boolean expmasterMoveUpBtn    	 													=true;
			boolean expmasterMoveDownBtn    	 												=true;
			boolean expmasterSortBtn    	 													=true;
			boolean expmasterMassUpdateBtn    	 												=true;
			boolean expmasterImportFromXmlBtn    	 											=true;
			boolean expmasterExportFormatToXmlBtn    	 										=true;
			
			
			System.out.println("masterGroupBtn                                                      : "+actmasterGroupBtn                                                      +" Value Expected : "+expmasterGroupBtn);
			System.out.println("masterDeleteAllBtn                                                  : "+actmasterDeleteAllBtn                                                  +" Value Expected : "+expmasterDeleteAllBtn);
			System.out.println("masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity : "+actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity +" Value Expected : "+expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity);
			System.out.println("masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          : "+actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          +" Value Expected : "+expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState);
			System.out.println("masterAdvanceMasterImportORExportBtn                                : "+actmasterAdvanceMasterImportORExportBtn                                +" Value Expected : "+expmasterAdvanceMasterImportORExportBtn);
			System.out.println("masterAuthorInfoBtn                                                 : "+actmasterAuthorInfoBtn                                                 +" Value Expected : "+expmasterAuthorInfoBtn);
			System.out.println("masterMoveUpBtn                                                     : "+actmasterMoveUpBtn                                                     +" Value Expected : "+expmasterMoveUpBtn);
			System.out.println("masterMoveDownBtn                                                   : "+actmasterMoveDownBtn                                                   +" Value Expected : "+expmasterMoveDownBtn);
			System.out.println("masterSortBtn                                                       : "+actmasterSortBtn                                                       +" Value Expected : "+expmasterSortBtn);
			System.out.println("masterMassUpdateBtn                                                 : "+actmasterMassUpdateBtn                                                 +" Value Expected : "+expmasterMassUpdateBtn);
			System.out.println("masterImportFromXmlBtn                                              : "+actmasterImportFromXmlBtn                                              +" Value Expected : "+expmasterImportFromXmlBtn);
			System.out.println("masterExportFormatToXmlBtn                                          : "+actmasterExportFormatToXmlBtn                                          +" Value Expected : "+expmasterExportFormatToXmlBtn);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
			 
			masterRibbonControlNextBtn.click(); 
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizemasterBtn));	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
			
			boolean actmasterCustamizemasterBtn    	  =masterCustamizemasterBtn.isDisplayed();
			boolean actmasterCustamizeViewBtn    	  =masterCustamizeViewBtn.isDisplayed();
			boolean actmastercustamizeTreeBtn    	  =mastercustamizeTreeBtn.isDisplayed();
			 
			boolean expmasterCustamizemasterBtn    	  =true;
			boolean expmasterCustamizeViewBtn    	  =true;
			boolean expmastercustamizeTreeBtn    	  =true;
			 
			 
			 
			System.out.println("masterCustamizemasterBtn           : "+actmasterCustamizemasterBtn           +" Value Expected : "+expmasterCustamizemasterBtn);
			System.out.println("masterCustamizeViewBtn             : "+actmasterCustamizeViewBtn             +" Value Expected : "+expmasterCustamizeViewBtn);
			System.out.println("mastercustamizeTreeBtn             : "+actmastercustamizeTreeBtn             +" Value Expected : "+expmastercustamizeTreeBtn);
				
	       
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToMinimizeOptions));
			masterRibbonToMinimizeOptions.click();
			
			if(actmasterNewBtn==expmasterNewBtn && actmasterAddGroupBtn==expmasterAddGroupBtn && actmasterEditBtn==expmasterEditBtn
					&& actmasterCloneBtn==expmasterCloneBtn && actmasterPropertiesBtn==expmasterPropertiesBtn && actmasterDeleteBtn==expmasterDeleteBtn
					&& actmasterCloseBtn==expmasterCloseBtn && actmasterRibbonToExpandOptions==expmasterRibbonToExpandOptions
					
					&& actmasterGroupBtn==expmasterGroupBtn && actmasterDeleteAllBtn==expmasterDeleteAllBtn 
					&& actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity==expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity
					&& actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState==expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState 
					&& actmasterAdvanceMasterImportORExportBtn==expmasterAdvanceMasterImportORExportBtn
					&& actmasterAuthorInfoBtn==expmasterAuthorInfoBtn && actmasterMoveUpBtn==expmasterMoveUpBtn && actmasterMoveDownBtn==expmasterMoveDownBtn
					&& actmasterSortBtn==expmasterSortBtn && actmasterMassUpdateBtn==expmasterMassUpdateBtn && actmasterImportFromXmlBtn==expmasterImportFromXmlBtn
					&& actmasterExportFormatToXmlBtn==expmasterExportFormatToXmlBtn
					
					&& actmasterCustamizemasterBtn==expmasterCustamizemasterBtn && actmasterCustamizeViewBtn==expmasterCustamizeViewBtn  
					&& actmastercustamizeTreeBtn==expmastercustamizeTreeBtn )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	@FindBy(xpath="//input[@id='sName']")
	private static WebElement empNameTxt;
	
	@FindBy(xpath="//input[@id='sCode']")
	private static WebElement empCodeTxt;
	
	@FindBy(xpath="//input[@id='iRevisionDate']")
	private static WebElement empRevisionDateTxt;
	
	@FindBy(xpath="//td[@id='iRevisionDate_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement empRevisionDateCalendarBtn;
	
	@FindBy(xpath="//input[@id='iPhoto']")
	private static WebElement empPhototxt;
	
	@FindBy(xpath="//input[@id='dDateofJoining_checkbox']")
	private static WebElement empDateOfJoiningChkBox;
	
	@FindBy(xpath="//td[@id='dDateofJoining_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement empDateOfJoiningCalendarBtn;
	
	@FindBy(xpath="//input[@id='iDesignation']")
	private static WebElement empDesignationTxt;
	
	@FindBy(xpath="//input[@id='iSalaryAccount']")
	private static WebElement empSalaryAccountTxt;
	
	@FindBy(xpath="//input[@id='iEmployeeAccount']")
	private static WebElement empEmployeeAccountTxt;
	
	@FindBy(xpath="//input[@id='iCalendar']")
	private static WebElement empCalendarTxt;
	
	@FindBy(xpath="//input[@id='iPosition']")
	private static WebElement empPositionTxt;
	
	@FindBy(xpath="//input[@id='iReportingTo']")
	private static WebElement empReportingToTxt;
	
	@FindBy(xpath="//input[@id='iAirlineSector']")
	private static WebElement empairLineSectorTxt;
	
	@FindBy(xpath="//select[@id='iTravelClass']")
	private static WebElement empTravelClassDropDown;
	
	@FindBy(xpath="//input[@id='iTag1']")
	private static WebElement empDepartment1Txt;
	
	@FindBy(xpath="//input[@id='iTag2']")
	private static WebElement empDepartment2Txt;
	
	@FindBy(xpath="//input[@id='Outlet']")
	private static WebElement empOutletTxt;
	
	@FindBy(xpath="//a[contains(text(),'Personal Information')]")
	private static WebElement empPersonalInformationTab;
	
	@FindBy(xpath="//select[@id='iGender']")
	private static WebElement empGenderDropDown;
	
	@FindBy(xpath="//select[@id='iMaritalStatus']")
	private static WebElement empMartialStatusDropDown;
	
	@FindBy(xpath="//input[@id='iNationality']")
	private static WebElement empNationalityTxt;
	
	@FindBy(xpath="//input[@id='dDateofBirth_checkbox']")
	private static WebElement empDateOfBirthChkBox;
	
	@FindBy(xpath="//td[@id='dDateofBirth_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement empDateOfBirthCalendarBtn;
	
	@FindBy(xpath="//input[@id='sUserName']")
	private static WebElement empEssUserName;
	
	@FindBy(xpath="//input[@id='sPassword']")
	private static WebElement empEssPassword;
	
	@FindBy(xpath="//a[contains(text(),'Contact Details')]")
	private static WebElement empContactDetailsTab;
	
	@FindBy(xpath="//input[@id='sAddress']")
	private static WebElement empAddressTxt;
	
	@FindBy(xpath="//input[@id='iCity']")
	private static WebElement empCityTxt;
	
	@FindBy(xpath="//input[@id='sPinZipCode']")
	private static WebElement empPinZipCodeTxt;
	
	@FindBy(xpath="//input[@id='sPhoneNumber']")
	private static WebElement empPhoneNoTxt;
	
	@FindBy(xpath="//input[@id='sMobileNumber']")
	private static WebElement empMobileNoTxt;
	
	@FindBy(xpath="//input[@id='sEMail']")
	private static WebElement empMailTxt;
	
	@FindBy(xpath="//input[@id='sEmailPwd']")
	private static WebElement empMailPasswordTxt;
	
	@FindBy(xpath="//a[contains(text(),'Dependant Detail')]")
	private static WebElement empDependantDetailsTab;
	
	@FindBy(xpath="//div[@id='newMasterDiv3']//div[@class='container-fluid']//div[@id='divForTblNewMasterGenerator']//div//table[@id='tblNewMasterGenerator']/thead/tr/th/label")
	private static List<WebElement> empDependantDetailsBodyHeaderList;
	
	@FindBy(xpath="//a[contains(text(),'Educational Qualifications')]")
	private static WebElement empEducationalQualificationsTab;
	
	@FindBy(xpath="//div[@id='newMasterDiv4']//div[@class='container-fluid']//div[@id='divForTblNewMasterGenerator']//div//table[@id='tblNewMasterGenerator']/thead/tr/th")
	private static List<WebElement> empEducationalQualificationsBodyHeaderList;
	
	
	public boolean checkNewOptionInEmployeeAndAvailableFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkNewOptionInEmployeeAndAvailableFields Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			int newHeaderTabListCount = newHeaderTabList.size();
			
			ArrayList<String> newHeaderTabListArray = new ArrayList<String>();
			
			for(int i=0;i<newHeaderTabListCount;i++)
			{
				String data = newHeaderTabList.get(i).getText();
				
				newHeaderTabListArray.add(data);
			}
			
			String actnewHeaderTabList = newHeaderTabListArray.toString();
			String expnewHeaderTabList = "[General, Personal Information, Contact Details, Dependant Detail, Educational Qualifications, ]";
			
			System.out.println("actnewHeaderTabList : "+actnewHeaderTabList);
			System.out.println("expnewHeaderTabList : "+expnewHeaderTabList);
			
			
			
			
			boolean actempNameTxt                  = empNameTxt.isDisplayed();
			boolean actempCodeTxt                  = empCodeTxt.isDisplayed();
			boolean actempRevisionDateTxt          = empRevisionDateTxt.isDisplayed();
			boolean actempRevisionDateCalendarBtn  = empRevisionDateCalendarBtn.isDisplayed();
			boolean actempPhototxt                 = empPhototxt.isDisplayed();
			boolean actempDateOfJoiningChkBox      = empDateOfJoiningChkBox.isDisplayed();
			boolean actempDateOfJoiningCalendarBtn = empDateOfJoiningCalendarBtn.isDisplayed();
			boolean actempDesignationTxt           = empDesignationTxt.isDisplayed();
			boolean actempSalaryAccountTxt         = empSalaryAccountTxt.isDisplayed();
			boolean actempEmployeeAccountTxt       = empEmployeeAccountTxt.isDisplayed();
			boolean actempCalendarTxt              = empCalendarTxt.isDisplayed();
			boolean actempPositionTxt              = empPositionTxt.isDisplayed();
			boolean actempReportingToTxt           = empReportingToTxt.isDisplayed();
			boolean actempairLineSectorTxt         = empairLineSectorTxt.isDisplayed();
			boolean actempTravelClassDropDown      = empTravelClassDropDown.isDisplayed();
			boolean actempDepartment1Txt           = empDepartment1Txt.isDisplayed();
			boolean actempDepartment2Txt           = empDepartment2Txt.isDisplayed();
			boolean actempOutletTxt                = empOutletTxt.isDisplayed();
			
			boolean expempNameTxt                  = empNameTxt.isDisplayed();
			boolean expempCodeTxt                  = empCodeTxt.isDisplayed();
			boolean expempRevisionDateTxt          = empRevisionDateTxt.isDisplayed();
			boolean expempRevisionDateCalendarBtn  = empRevisionDateCalendarBtn.isDisplayed();
			boolean expempPhototxt                 = empPhototxt.isDisplayed();
			boolean expempDateOfJoiningChkBox      = empDateOfJoiningChkBox.isDisplayed();
			boolean expempDateOfJoiningCalendarBtn = empDateOfJoiningCalendarBtn.isDisplayed();
			boolean expempDesignationTxt           = empDesignationTxt.isDisplayed();
			boolean expempSalaryAccountTxt         = empSalaryAccountTxt.isDisplayed();
			boolean expempEmployeeAccountTxt       = empEmployeeAccountTxt.isDisplayed();
			boolean expempCalendarTxt              = empCalendarTxt.isDisplayed();
			boolean expempPositionTxt              = empPositionTxt.isDisplayed();
			boolean expempReportingToTxt           = empReportingToTxt.isDisplayed();
			boolean expempairLineSectorTxt         = empairLineSectorTxt.isDisplayed();
			boolean expempTravelClassDropDown      = empTravelClassDropDown.isDisplayed();
			boolean expempDepartment1Txt           = empDepartment1Txt.isDisplayed();
			boolean expempDepartment2Txt           = empDepartment2Txt.isDisplayed();
			boolean expempOutletTxt                = empOutletTxt.isDisplayed();
			
			System.out.println("empNameTxt                   : "+actempNameTxt                 +" Value Expected : "+expempNameTxt);
			System.out.println("empCodeTxt                   : "+actempCodeTxt                 +" Value Expected : "+expempCodeTxt);
			System.out.println("empRevisionDateTxt           : "+actempRevisionDateTxt         +" Value Expected : "+expempRevisionDateTxt);
			System.out.println("empRevisionDateCalendarBtn   : "+actempRevisionDateCalendarBtn +" Value Expected : "+expempRevisionDateCalendarBtn);
			System.out.println("empPhototxt                  : "+actempPhototxt                +" Value Expected : "+expempPhototxt);
			System.out.println("empDateOfJoiningChkBox       : "+actempDateOfJoiningChkBox     +" Value Expected : "+expempDateOfJoiningChkBox);
			System.out.println("empDateOfJoiningCalendarBtn  : "+actempDateOfJoiningCalendarBtn+" Value Expected : "+expempDateOfJoiningCalendarBtn);
			System.out.println("empDesignationTxt            : "+actempDesignationTxt          +" Value Expected : "+expempDesignationTxt);
			System.out.println("empSalaryAccountTxt          : "+actempSalaryAccountTxt        +" Value Expected : "+expempSalaryAccountTxt);
			System.out.println("empEmployeeAccountTxt        : "+actempEmployeeAccountTxt      +" Value Expected : "+expempEmployeeAccountTxt);
			System.out.println("empCalendarTxt               : "+actempCalendarTxt             +" Value Expected : "+expempCalendarTxt);
			System.out.println("empPositionTxt               : "+actempPositionTxt             +" Value Expected : "+expempPositionTxt);
			System.out.println("empReportingToTxt            : "+actempReportingToTxt          +" Value Expected : "+expempReportingToTxt);
			System.out.println("empairLineSectorTxt          : "+actempairLineSectorTxt        +" Value Expected : "+expempairLineSectorTxt);
			System.out.println("empTravelClassDropDown       : "+actempTravelClassDropDown     +" Value Expected : "+expempTravelClassDropDown);
			System.out.println("empDepartment1Txt            : "+actempDepartment1Txt          +" Value Expected : "+expempDepartment1Txt);
			System.out.println("empDepartment2Txt            : "+actempDepartment2Txt          +" Value Expected : "+expempDepartment2Txt);
			System.out.println("empOutletTxt                 : "+actempOutletTxt               +" Value Expected : "+expempOutletTxt);
			
				
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empPersonalInformationTab));
			empPersonalInformationTab.click();
			
			
			Thread.sleep(2000);
			
			
			boolean actempGenderDropDown         = empGenderDropDown.isDisplayed();
			boolean actempMartialStatusDropDown  = empMartialStatusDropDown.isDisplayed();
			boolean actempNationalityTxt         = empNationalityTxt.isDisplayed();
			boolean actempDateOfBirthChkBox      = empDateOfBirthChkBox.isDisplayed();
			boolean actempDateOfBirthCalendarBtn = empDateOfBirthCalendarBtn.isDisplayed();
			boolean actempEssUserName            = empEssUserName.isDisplayed();
			boolean actempEssPassword            = empEssPassword.isDisplayed();
			
			boolean expempGenderDropDown         = empGenderDropDown.isDisplayed();
			boolean expempMartialStatusDropDown  = empMartialStatusDropDown.isDisplayed();
			boolean expempNationalityTxt         = empNationalityTxt.isDisplayed();
			boolean expempDateOfBirthChkBox      = empDateOfBirthChkBox.isDisplayed();
			boolean expempDateOfBirthCalendarBtn = empDateOfBirthCalendarBtn.isDisplayed();
			boolean expempEssUserName            = empEssUserName.isDisplayed();
			boolean expempEssPassword            = empEssPassword.isDisplayed();
			
			System.out.println("empGenderDropDown         : "+actempGenderDropDown          +" Value Expected : "+expempGenderDropDown);
			System.out.println("empMartialStatusDropDown  : "+actempMartialStatusDropDown   +" Value Expected : "+expempMartialStatusDropDown);
			System.out.println("empNationalityTxt         : "+actempNationalityTxt          +" Value Expected : "+expempNationalityTxt);
			System.out.println("empDateOfBirthChkBox      : "+actempDateOfBirthChkBox       +" Value Expected : "+expempDateOfBirthChkBox);
			System.out.println("empDateOfBirthCalendarBtn : "+actempDateOfBirthCalendarBtn  +" Value Expected : "+expempDateOfBirthCalendarBtn);
			System.out.println("empEssUserName            : "+actempEssUserName             +" Value Expected : "+expempEssUserName);
			System.out.println("empEssPassword            : "+actempEssPassword             +" Value Expected : "+expempEssPassword);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empContactDetailsTab));
			empContactDetailsTab.click();
			
			Thread.sleep(2000);
			
			
			boolean actempAddressTxt      = empAddressTxt.isDisplayed();
			boolean actempCityTxt         = empCityTxt.isDisplayed();
			boolean actempPinZipCodeTxt   = empPinZipCodeTxt.isDisplayed();
			boolean actempPhoneNoTxt      = empPhoneNoTxt.isDisplayed();
			boolean actempMobileNoTxt     = empMobileNoTxt.isDisplayed();
			boolean actempMailTxt         = empMailTxt.isDisplayed();
			boolean actempMailPasswordTxt = empMailPasswordTxt.isDisplayed();
			
			boolean expempAddressTxt      = empAddressTxt.isDisplayed();
			boolean expempCityTxt         = empCityTxt.isDisplayed();
			boolean expempPinZipCodeTxt   = empPinZipCodeTxt.isDisplayed();
			boolean expempPhoneNoTxt      = empPhoneNoTxt.isDisplayed();
			boolean expempMobileNoTxt     = empMobileNoTxt.isDisplayed();
			boolean expempMailTxt         = empMailTxt.isDisplayed();
			boolean expempMailPasswordTxt = empMailPasswordTxt.isDisplayed();
			
			
			
			System.out.println("empAddressTxt       : "+actempAddressTxt      +" Value Expected : "+expempAddressTxt);
			System.out.println("empCityTxt          : "+actempCityTxt         +" Value Expected : "+expempCityTxt);
			System.out.println("empPinZipCodeTxt    : "+actempPinZipCodeTxt   +" Value Expected : "+expempPinZipCodeTxt);
			System.out.println("empPhoneNoTxt       : "+actempPhoneNoTxt      +" Value Expected : "+expempPhoneNoTxt);
			System.out.println("empMobileNoTxt      : "+actempMobileNoTxt     +" Value Expected : "+expempMobileNoTxt);
			System.out.println("empMailTxt          : "+actempMailTxt         +" Value Expected : "+expempMailTxt);
			System.out.println("empMailPasswordTxt  : "+actempMailPasswordTxt +" Value Expected : "+expempMailPasswordTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empDependantDetailsTab));
			empDependantDetailsTab.click();
			
			Thread.sleep(2000);
			
			int empDependantDetailsBodyHeaderListCount = empDependantDetailsBodyHeaderList.size();
			
			ArrayList<String> empDependantDetailsBodyHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<empDependantDetailsBodyHeaderListCount;i++)
			{
				String data = empDependantDetailsBodyHeaderList.get(i).getText();
				
				empDependantDetailsBodyHeaderListArray.add(data);
			}
			
			String actempDependantDetailsBodyHeaderList = empDependantDetailsBodyHeaderListArray.toString();
			String expempDependantDetailsBodyHeaderList = "[, , Name, Relation, Gender, Date of Birth]";
			
			System.out.println("actempDependantDetailsBodyHeaderList : "+actempDependantDetailsBodyHeaderList);
			System.out.println("expempDependantDetailsBodyHeaderList : "+expempDependantDetailsBodyHeaderList);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empEducationalQualificationsTab));
			empEducationalQualificationsTab.click();
			
			Thread.sleep(2000);
			
			int empEducationalQualificationsBodyHeaderListCount = empEducationalQualificationsBodyHeaderList.size();
			
			ArrayList<String> empEducationalQualificationsBodyHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<empEducationalQualificationsBodyHeaderListCount;i++)
			{
				String data = empEducationalQualificationsBodyHeaderList.get(i).getText();
				
				empEducationalQualificationsBodyHeaderListArray.add(data);
			}
			
			String actempEducationalQualificationsBodyHeaderList = empEducationalQualificationsBodyHeaderListArray.toString();
			String expempEducationalQualificationsBodyHeaderList = "[Serial No, , , Qualification, Specialization, Year of Passing, College/University Name]";
			
			System.out.println("empEducationalQualificationsBodyHeaderList : "+actempEducationalQualificationsBodyHeaderList);
			System.out.println("empEducationalQualificationsBodyHeaderList : "+expempEducationalQualificationsBodyHeaderList);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			
			if(actempNameTxt==expempNameTxt && actempCodeTxt==expempCodeTxt && actempRevisionDateTxt==expempRevisionDateTxt &&  actempRevisionDateCalendarBtn==expempRevisionDateCalendarBtn
					&& actempPhototxt==expempPhototxt && actempDateOfJoiningChkBox==expempDateOfJoiningChkBox && actempDateOfJoiningCalendarBtn==expempDateOfJoiningCalendarBtn
					&& actempDesignationTxt==expempDesignationTxt && actempSalaryAccountTxt==expempSalaryAccountTxt && actempEmployeeAccountTxt==expempEmployeeAccountTxt 
					&& actempCalendarTxt==expempCalendarTxt && actempPositionTxt==expempPositionTxt && actempReportingToTxt==expempReportingToTxt && actempairLineSectorTxt==expempairLineSectorTxt
					&& actempTravelClassDropDown==expempTravelClassDropDown && actempDepartment1Txt==expempDepartment1Txt && actempDepartment2Txt==expempDepartment2Txt
					&& actempOutletTxt==expempOutletTxt
					
					&& actempGenderDropDown==expempGenderDropDown && actempMartialStatusDropDown==expempMartialStatusDropDown && actempNationalityTxt==expempNationalityTxt
					&& actempDateOfBirthChkBox==expempDateOfBirthChkBox && actempDateOfBirthCalendarBtn==expempDateOfBirthCalendarBtn 
					&& actempEssUserName==expempEssUserName && actempEssPassword==expempEssPassword
					
					&& actempAddressTxt==expempAddressTxt && actempCityTxt==expempCityTxt && actempPinZipCodeTxt==expempPinZipCodeTxt && actempPhoneNoTxt==expempPhoneNoTxt
					&& actempMobileNoTxt==expempMobileNoTxt && actempMailTxt==expempMailTxt && actempMailPasswordTxt==expempMailPasswordTxt
					
					&& actempDependantDetailsBodyHeaderList.equalsIgnoreCase(expempDependantDetailsBodyHeaderList)
					
					&& actempEducationalQualificationsBodyHeaderList.equalsIgnoreCase(expempEducationalQualificationsBodyHeaderList))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	@FindBy(xpath="//tbody[@id='Outlet_table_data_body']/tr/td")
	private static List<WebElement> empOutletBodyList;
	
	public boolean checkSavingEmployeeWithAllMandateFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavingEmployeeWithAllMandateFields Method Executes.............   *****************************");
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empNameTxt));
			empNameTxt.click();
			empNameTxt.sendKeys("Employee1");
			empNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empCodeTxt));
			empCodeTxt.click();
			empCodeTxt.sendKeys("Employee1");
			empCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empDesignationTxt));
			empDesignationTxt.click();
			empDesignationTxt.sendKeys("SalesMan");
			Thread.sleep(2000);
			empDesignationTxt.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empOutletTxt));
			empOutletTxt.click();
			empOutletTxt.sendKeys(Keys.SPACE);

			Thread.sleep(2000);
			
			int empOutletBodyListCount = empOutletBodyList.size();
			
			for(int i=0;i<empOutletBodyListCount;i++)
			{
				String data = empOutletBodyList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1"))
				{
					empOutletBodyList.get(i).click();
					
					break;
				}
			}
			
			empOutletTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			if(actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	
	public boolean checkSavedEmployeeAndEditingEmployee() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavedEmployeeAndEditingEmployee Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("Employee1") && posListChkBox.get(i).isSelected()==false)
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empNameTxt));
  	 		empNameTxt.click();
			
			String actempNameTxt = empNameTxt.getAttribute("value");
			String expempNameTxt = "Employee1";
			
			System.out.println("empNameTxt : "+actempNameTxt+" Value Expected : "+expempNameTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empCodeTxt));
			empCodeTxt.click();

			String actempCodeTxt = empCodeTxt.getAttribute("value");
			String expempCodeTxt = "Employee1";
			
			System.out.println("empCodeTxt : "+actempCodeTxt+" Value Expected : "+expempCodeTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empOutletTxt));
			empOutletTxt.click();
			
			String actempOutletTxt = empOutletTxt.getAttribute("value");
			String expempOutletTxt = "Outlet1";
			
			System.out.println("empOutletTxt : "+actempOutletTxt+" Value Expected : "+expempOutletTxt);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empCodeTxt));
			empCodeTxt.click();
			empCodeTxt.clear();
			empCodeTxt.sendKeys("E1");
			empCodeTxt.sendKeys(Keys.TAB);
			
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			 
			String expSavingMessage="Updated Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			
			if(actempNameTxt.equalsIgnoreCase(expempNameTxt) && actempCodeTxt.equalsIgnoreCase(expempCodeTxt) 
					&& actempOutletTxt.equalsIgnoreCase(expempOutletTxt) && actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	
	
	
	public boolean checkUpdatedEmployeeAndSaveEmployeeUsingCloneOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkUpdatedEmployeeAndSaveEmployeeUsingCloneOption Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("Employee1"))
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				if(posListChkBox.get(i).isSelected()==false)
  	 				{
  	 					posListChkBox.get(i).click();
  	 				}
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empNameTxt));
  	 		empNameTxt.click();
			
			String actempNameTxt = empNameTxt.getAttribute("value");
			String expempNameTxt = "Employee1";
			
			System.out.println("empNameTxt : "+actempNameTxt+" Value Expected : "+expempNameTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empCodeTxt));
			empCodeTxt.click();

			String actempCodeTxt = empCodeTxt.getAttribute("value");
			String expempCodeTxt = "E1";
			
			System.out.println("empCodeTxt : "+actempCodeTxt+" Value Expected : "+expempCodeTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empOutletTxt));
			empOutletTxt.click();
			
			String actempOutletTxt = empOutletTxt.getAttribute("value");
			String expempOutletTxt = "Outlet1";
			
			System.out.println("empOutletTxt : "+actempOutletTxt+" Value Expected : "+expempOutletTxt);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloneBtn));
			editcloneBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empNameTxt));
			empNameTxt.click();
			empNameTxt.clear();
			empNameTxt.sendKeys("EmployeeToDelete");
			empNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empCodeTxt));
			empCodeTxt.click();
			empCodeTxt.clear();
			empCodeTxt.sendKeys("EmployeeToDelete");
			empCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empOutletTxt));
			empOutletTxt.click();
			empOutletTxt.sendKeys(Keys.END);
			empOutletTxt.sendKeys(Keys.BACK_SPACE);
			empOutletTxt.sendKeys("Outlet1");
			Thread.sleep(3000);
			empOutletTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			if(selectAllHeaderChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			if(selectAllHeaderChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			int posNameListCount1 = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount1;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("Employee1"))
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				if(posListChkBox.get(i).isSelected()==false)
  	 				{
  	 					posListChkBox.get(i).click();
  	 				}
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloneBtn));
  	 		masterCloneBtn.click();
			
			
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empNameTxt));
			empNameTxt.click();
			empNameTxt.clear();
			empNameTxt.sendKeys("Employee2");
			empNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empCodeTxt));
			empCodeTxt.click();
			empCodeTxt.clear();
			empCodeTxt.sendKeys("E2");
			empCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expSavingMessage1="Saved Successfully";
			
			String actSavingMessage1=checkValidationMessage(expSavingMessage1);
			
			System.out.println("SavingMessage1 : "+actSavingMessage1+" Value Expected : "+expSavingMessage1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloneBtn));
  	 		masterCloneBtn.click();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empNameTxt));
			empNameTxt.click();
			empNameTxt.clear();
			empNameTxt.sendKeys("Employee3");
			empNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(empCodeTxt));
			empCodeTxt.click();
			empCodeTxt.clear();
			empCodeTxt.sendKeys("E3");
			empCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			String expSavingMessage2="Saved Successfully";
			
			String actSavingMessage2=checkValidationMessage(expSavingMessage2);
			
			System.out.println("SavingMessage2 : "+actSavingMessage2+" Value Expected : "+expSavingMessage2);
			
			
			if(actempNameTxt.equalsIgnoreCase(expempNameTxt) && actempCodeTxt.equalsIgnoreCase(expempCodeTxt)
					&& actempOutletTxt.equalsIgnoreCase(expempOutletTxt) && actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	

	
	public static boolean checkDeleteEmployeeAndClose() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkDeleteEmployeeAndClose Method Executes.............   *****************************");
		
		try
		{
			if(selectAllHeaderChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			if(selectAllHeaderChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("EmployeeToDelete"))
  	 			{
  	 				posNameList.get(i).click();
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
			 
			 
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
  	 		masterDeleteBtn.click();
	         
  	 		Thread.sleep(2000);
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
  	 		System.out.println(getMsgOnDelete.getText());
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
  	 		clickOnOkInDelete.click();
	         
  	 		String expMessage="Record Deleted Successfully.";
	 		
  	 		String actMessage=checkValidationMessage(expMessage);
  	 		
				
  	 		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
  	 		masterCloseBtn.click();
				
  	 		if(actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		} 
	}
	
	
	
	// Bank Card Type
	
	
	public boolean checkBankCardTypeHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkBankCardTypeHomePageOptions Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
			pointOfSale.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankCardType));
			bankCardType.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
			     
			boolean actmasterNewBtn    	 		   =masterNewBtn.isDisplayed();
			boolean actmasterAddGroupBtn    	   =masterAddGroupBtn.isDisplayed();
			boolean actmasterEditBtn 			   =masterEditBtn.isDisplayed();
			boolean actmasterCloneBtn 			   =masterCloneBtn.isDisplayed();
			boolean actmasterPropertiesBtn 		   =masterPropertiesBtn.isDisplayed();
			boolean actmasterDeleteBtn 			   =masterDeleteBtn.isDisplayed();
			boolean actmasterCloseBtn 		 	   =masterCloseBtn.isDisplayed();
			boolean actmasterRibbonToExpandOptions =masterRibbonToExpandOptions.isDisplayed();
			
			boolean expmasterNewBtn    	 			=true;
			boolean expmasterAddGroupBtn    		=true;
			boolean expmasterEditBtn 				=true;
			boolean expmasterCloneBtn 				=true;
			boolean expmasterPropertiesBtn 			=true;
			boolean expmasterDeleteBtn 				=true;
			boolean expmasterCloseBtn 				=true;
			boolean expmasterRibbonToExpandOptions 	=true;
			
			
			
			System.out.println("masterNewBtn                  : "+actmasterNewBtn                +" Value Expected : "+expmasterNewBtn);
			System.out.println("masterAddGroupBtn             : "+actmasterAddGroupBtn           +" Value Expected : "+expmasterAddGroupBtn);
			System.out.println("masterEditBtn                 : "+actmasterEditBtn               +" Value Expected : "+expmasterEditBtn);
			System.out.println("masterCloneBtn                : "+actmasterCloneBtn              +" Value Expected : "+expmasterCloneBtn);
			System.out.println("masterPropertiesBtn           : "+actmasterPropertiesBtn         +" Value Expected : "+expmasterPropertiesBtn);
			System.out.println("masterDeleteBtn               : "+actmasterDeleteBtn             +" Value Expected : "+expmasterDeleteBtn);
			System.out.println("masterCloseBtn                : "+actmasterCloseBtn              +" Value Expected : "+expmasterCloseBtn);
			System.out.println("masterRibbonToExpandOptions   : "+actmasterRibbonToExpandOptions +" Value Expected : "+expmasterRibbonToExpandOptions);
				
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
			masterRibbonToExpandOptions.click();
				 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));	
			
			boolean actmasterGroupBtn    	 													=masterGroupBtn.isDisplayed();
			boolean actmasterDeleteAllBtn    	 												=masterDeleteAllBtn.isDisplayed();
			boolean actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
			boolean actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
			boolean actmasterAdvanceMasterImportORExportBtn    	 								=masterAdvanceMasterImportORExportBtn.isDisplayed();
			boolean actmasterAuthorInfoBtn    	 												=masterAuthorInfoBtn.isDisplayed();
			boolean actmasterMoveUpBtn    	 													=masterMoveUpBtn.isDisplayed();
			boolean actmasterMoveDownBtn    	 												=masterMoveDownBtn.isDisplayed();
			boolean actmasterSortBtn    	 													=masterSortBtn.isDisplayed();
			boolean actmasterMassUpdateBtn    	 												=masterMassUpdateBtn.isDisplayed();
			boolean actmasterImportFromXmlBtn    	 											=masterImportFromXmlBtn.isDisplayed();
			boolean actmasterExportFormatToXmlBtn    	 										=masterExportFormatToXmlBtn.isDisplayed();
			
			boolean expmasterGroupBtn    	 													=true;
			boolean expmasterDeleteAllBtn    	 												=true;
			boolean expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=true;
			boolean expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=true;
			boolean expmasterAdvanceMasterImportORExportBtn    	 								=true;
			boolean expmasterAuthorInfoBtn    	 												=true;
			boolean expmasterMoveUpBtn    	 													=true;
			boolean expmasterMoveDownBtn    	 												=true;
			boolean expmasterSortBtn    	 													=true;
			boolean expmasterMassUpdateBtn    	 												=true;
			boolean expmasterImportFromXmlBtn    	 											=true;
			boolean expmasterExportFormatToXmlBtn    	 										=true;
			
			
			System.out.println("masterGroupBtn                                                      : "+actmasterGroupBtn                                                      +" Value Expected : "+expmasterGroupBtn);
			System.out.println("masterDeleteAllBtn                                                  : "+actmasterDeleteAllBtn                                                  +" Value Expected : "+expmasterDeleteAllBtn);
			System.out.println("masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity : "+actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity +" Value Expected : "+expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity);
			System.out.println("masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          : "+actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          +" Value Expected : "+expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState);
			System.out.println("masterAdvanceMasterImportORExportBtn                                : "+actmasterAdvanceMasterImportORExportBtn                                +" Value Expected : "+expmasterAdvanceMasterImportORExportBtn);
			System.out.println("masterAuthorInfoBtn                                                 : "+actmasterAuthorInfoBtn                                                 +" Value Expected : "+expmasterAuthorInfoBtn);
			System.out.println("masterMoveUpBtn                                                     : "+actmasterMoveUpBtn                                                     +" Value Expected : "+expmasterMoveUpBtn);
			System.out.println("masterMoveDownBtn                                                   : "+actmasterMoveDownBtn                                                   +" Value Expected : "+expmasterMoveDownBtn);
			System.out.println("masterSortBtn                                                       : "+actmasterSortBtn                                                       +" Value Expected : "+expmasterSortBtn);
			System.out.println("masterMassUpdateBtn                                                 : "+actmasterMassUpdateBtn                                                 +" Value Expected : "+expmasterMassUpdateBtn);
			System.out.println("masterImportFromXmlBtn                                              : "+actmasterImportFromXmlBtn                                              +" Value Expected : "+expmasterImportFromXmlBtn);
			System.out.println("masterExportFormatToXmlBtn                                          : "+actmasterExportFormatToXmlBtn                                          +" Value Expected : "+expmasterExportFormatToXmlBtn);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
			 
			masterRibbonControlNextBtn.click(); 
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizemasterBtn));	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
			
			boolean actmasterCustamizemasterBtn    	  =masterCustamizemasterBtn.isDisplayed();
			boolean actmasterCustamizeViewBtn    	  =masterCustamizeViewBtn.isDisplayed();
			boolean actmastercustamizeTreeBtn    	  =mastercustamizeTreeBtn.isDisplayed();
			 
			boolean expmasterCustamizemasterBtn    	  =true;
			boolean expmasterCustamizeViewBtn    	  =true;
			boolean expmastercustamizeTreeBtn    	  =true;
			 
			 
			 
			System.out.println("masterCustamizemasterBtn           : "+actmasterCustamizemasterBtn           +" Value Expected : "+expmasterCustamizemasterBtn);
			System.out.println("masterCustamizeViewBtn             : "+actmasterCustamizeViewBtn             +" Value Expected : "+expmasterCustamizeViewBtn);
			System.out.println("mastercustamizeTreeBtn             : "+actmastercustamizeTreeBtn             +" Value Expected : "+expmastercustamizeTreeBtn);
				
	       
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToMinimizeOptions));
			masterRibbonToMinimizeOptions.click();
			
			if(actmasterNewBtn==expmasterNewBtn && actmasterAddGroupBtn==expmasterAddGroupBtn && actmasterEditBtn==expmasterEditBtn
					&& actmasterCloneBtn==expmasterCloneBtn && actmasterPropertiesBtn==expmasterPropertiesBtn && actmasterDeleteBtn==expmasterDeleteBtn
					&& actmasterCloseBtn==expmasterCloseBtn && actmasterRibbonToExpandOptions==expmasterRibbonToExpandOptions
					
					&& actmasterGroupBtn==expmasterGroupBtn && actmasterDeleteAllBtn==expmasterDeleteAllBtn 
					&& actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity==expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity
					&& actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState==expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState 
					&& actmasterAdvanceMasterImportORExportBtn==expmasterAdvanceMasterImportORExportBtn
					&& actmasterAuthorInfoBtn==expmasterAuthorInfoBtn && actmasterMoveUpBtn==expmasterMoveUpBtn && actmasterMoveDownBtn==expmasterMoveDownBtn
					&& actmasterSortBtn==expmasterSortBtn && actmasterMassUpdateBtn==expmasterMassUpdateBtn && actmasterImportFromXmlBtn==expmasterImportFromXmlBtn
					&& actmasterExportFormatToXmlBtn==expmasterExportFormatToXmlBtn
					
					&& actmasterCustamizemasterBtn==expmasterCustamizemasterBtn && actmasterCustamizeViewBtn==expmasterCustamizeViewBtn  
					&& actmastercustamizeTreeBtn==expmastercustamizeTreeBtn )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	@FindBy(xpath="//input[@id='sName']")
	private static WebElement bctNameTxt;
	
	@FindBy(xpath="//input[@id='sCode']")
	private static WebElement bctCodeTxt;
	
	@FindBy(xpath="//select[@id='iCardType']")
	private static WebElement bctCardTypeDropDown;
	
	@FindBy(xpath="//input[@id='sDescription']")
	private static WebElement bctDescriptionTxt;
	
	@FindBy(xpath="//input[@id='pImage']")
	private static WebElement bctImageTxt;
	
	@FindBy(xpath="//input[@id='iBankAccount']")
	private static WebElement bctBankAccountTxt;
	
	@FindBy(xpath="//input[@id='iEODDiffAC']")
	private static WebElement bctEodDifferenceAccountTxt;
	
	@FindBy(xpath="//input[@id='iCardCharges']")
	private static WebElement bctCardChargesTxt;
	
	@FindBy(xpath="//input[@id='iCardChargesAccount']")
	private static WebElement bctCardChargesAccountTxt;
	
	@FindBy(xpath="//input[@id='iIssuerIdentificationNumber']")
	private static WebElement bctIssuerIdentificationNoTxt;
	
	
	
	
	
	public boolean checkNewOptionInBankCardTypeAndAvailableFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkNewOptionInBankCardTypeAndAvailableFields Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			
			boolean actbctNameTxt                    = bctNameTxt.isDisplayed();
			boolean actbctCodeTxt                    = bctCodeTxt.isDisplayed();
			boolean actbctCardTypeDropDown           = bctCardTypeDropDown.isDisplayed();
			boolean actbctDescriptionTxt             = bctDescriptionTxt.isDisplayed();
			boolean actbctImageTxt                   = bctImageTxt.isDisplayed();
			boolean actbctBankAccountTxt             = bctBankAccountTxt.isDisplayed();
			boolean actbctEodDifferenceAccountTxt    = bctEodDifferenceAccountTxt.isDisplayed();
			boolean actbctCardChargesTxt             = bctCardChargesTxt.isDisplayed();
			boolean actbctCardChargesAccountTxt      = bctCardChargesAccountTxt.isDisplayed();
			boolean actbctIssuerIdentificationNoTxt  = bctIssuerIdentificationNoTxt.isDisplayed();
			
			boolean expbctNameTxt                    = bctNameTxt.isDisplayed();
			boolean expbctCodeTxt                    = bctCodeTxt.isDisplayed();
			boolean expbctCardTypeDropDown           = bctCardTypeDropDown.isDisplayed();
			boolean expbctDescriptionTxt             = bctDescriptionTxt.isDisplayed();
			boolean expbctImageTxt                   = bctImageTxt.isDisplayed();
			boolean expbctBankAccountTxt             = bctBankAccountTxt.isDisplayed();
			boolean expbctEodDifferenceAccountTxt    = bctEodDifferenceAccountTxt.isDisplayed();
			boolean expbctCardChargesTxt             = bctCardChargesTxt.isDisplayed();
			boolean expbctCardChargesAccountTxt      = bctCardChargesAccountTxt.isDisplayed();
			boolean expbctIssuerIdentificationNoTxt  = bctIssuerIdentificationNoTxt.isDisplayed();
			
			System.out.println("bctNameTxt                    : "+actbctNameTxt                   +" Value Expected : "+expbctNameTxt);
			System.out.println("bctCodeTxt                    : "+actbctCodeTxt                   +" Value Expected : "+expbctCodeTxt);
			System.out.println("bctCardTypeDropDown           : "+actbctCardTypeDropDown          +" Value Expected : "+expbctCardTypeDropDown);
			System.out.println("bctDescriptionTxt             : "+actbctDescriptionTxt            +" Value Expected : "+expbctDescriptionTxt);
			System.out.println("bctImageTxt                   : "+actbctImageTxt                  +" Value Expected : "+expbctImageTxt);
			System.out.println("bctBankAccountTxt             : "+actbctBankAccountTxt            +" Value Expected : "+expbctBankAccountTxt);
			System.out.println("bctEodDifferenceAccountTxt    : "+actbctEodDifferenceAccountTxt   +" Value Expected : "+expbctEodDifferenceAccountTxt);
			System.out.println("bctCardChargesTxt             : "+actbctCardChargesTxt            +" Value Expected : "+expbctCardChargesTxt);
			System.out.println("bctCardChargesAccountTxt      : "+actbctCardChargesAccountTxt     +" Value Expected : "+expbctCardChargesAccountTxt);
			System.out.println("bctIssuerIdentificationNoTxt  : "+actbctIssuerIdentificationNoTxt +" Value Expected : "+expbctIssuerIdentificationNoTxt);
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			
			if(actbctNameTxt==expbctNameTxt && actbctCodeTxt==expbctCodeTxt && actbctCardTypeDropDown==expbctCardTypeDropDown && actbctDescriptionTxt==expbctDescriptionTxt 
					&& actbctImageTxt==expbctImageTxt && actbctBankAccountTxt==expbctBankAccountTxt && actbctEodDifferenceAccountTxt==expbctEodDifferenceAccountTxt
					&& actbctCardChargesTxt==expbctCardChargesTxt && actbctCardChargesAccountTxt==expbctCardChargesAccountTxt && actbctIssuerIdentificationNoTxt==expbctIssuerIdentificationNoTxt)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	
	public boolean checkSavingBankCardWithAllMandateFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavingBankCardWithAllMandateFields Method Executes.............   *****************************");
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctNameTxt));
			bctNameTxt.click();
			bctNameTxt.sendKeys("CreditCard");
			bctNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCodeTxt));
			bctCodeTxt.click();
			bctCodeTxt.sendKeys("CreditCard");
			bctCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCardTypeDropDown));
			Select bctCardTypeDropDownSelect = new Select(bctCardTypeDropDown);
			bctCardTypeDropDownSelect.selectByVisibleText("Credit");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctBankAccountTxt));
			bctBankAccountTxt.click();
			bctBankAccountTxt.sendKeys("Bank");
			Thread.sleep(2000);
			bctBankAccountTxt.sendKeys(Keys.SPACE);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCardChargesAccountTxt));
			bctCardChargesAccountTxt.click();
			bctCardChargesAccountTxt.sendKeys("Bank Charges");
			Thread.sleep(3000);
			bctCardChargesAccountTxt.sendKeys(Keys.SPACE);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			 
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			if(actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	public boolean checkSavedCardTypeAndEditingCardType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSavedCardTypeAndEditingCardType Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("CreditCard") && posListChkBox.get(i).isSelected()==false)
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctNameTxt));
  	 		bctNameTxt.click();
			
			String actbctNameTxt = bctNameTxt.getAttribute("value");
			String expbctNameTxt = "CreditCard";
			
			System.out.println("bctNameTxt : "+actbctNameTxt+" Value Expected : "+expbctNameTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCodeTxt));
			bctCodeTxt.click();

			String actbctCodeTxt = bctCodeTxt.getAttribute("value");
			String expbctCodeTxt = "CreditCard";
			
			System.out.println("bctCodeTxt : "+actbctCodeTxt+" Value Expected : "+expbctCodeTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCardChargesAccountTxt));
			bctCardChargesAccountTxt.click();
			
			String actbctCardChargesAccountTxt = bctCardChargesAccountTxt.getAttribute("value");
			String expbctCardChargesAccountTxt = "Bank Charges";
			
			System.out.println("bctCardChargesAccountTxt : "+actbctCardChargesAccountTxt+" Value Expected : "+expbctCardChargesAccountTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctNameTxt));
			bctNameTxt.click();
			bctNameTxt.clear();
			bctNameTxt.sendKeys("HDFC CreditCard");
			bctNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCodeTxt));
			bctCodeTxt.click();
			bctCodeTxt.clear();
			bctCodeTxt.sendKeys("HDFC CreditCard");
			bctCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCardTypeDropDown));
			Select bctCardTypeDropDownSelect = new Select(bctCardTypeDropDown);
			bctCardTypeDropDownSelect.selectByVisibleText("Credit");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expSavingMessage="Updated Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			
			if(actbctNameTxt.equalsIgnoreCase(expbctNameTxt) && actbctCodeTxt.equalsIgnoreCase(expbctCodeTxt)
					&& actbctCardChargesAccountTxt.equalsIgnoreCase(expbctCardChargesAccountTxt) && actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	
	public boolean checkUpdatedCardTypeAndSaveCardTypeUsingCloneOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkUpdatedCardTypeAndSaveCardTypeUsingCloneOption Method Executes.............   *****************************");
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("HDFC CreditCard"))
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				if(posListChkBox.get(i).isSelected()==false)
  	 				{
  	 					posListChkBox.get(i).click();
  	 				}
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctNameTxt));
  	 		bctNameTxt.click();
			
			String actbctNameTxt = bctNameTxt.getAttribute("value");
			String expbctNameTxt = "HDFC CreditCard";
			
			System.out.println("bctNameTxt : "+actbctNameTxt+" Value Expected : "+expbctNameTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCodeTxt));
			bctCodeTxt.click();

			String actbctCodeTxt = bctCodeTxt.getAttribute("value");
			String expbctCodeTxt = "HDFC CreditCard";
			
			System.out.println("bctCodeTxt : "+actbctCodeTxt+" Value Expected : "+expbctCodeTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCardChargesAccountTxt));
			bctCardChargesAccountTxt.click();
			
			String actbctCardChargesAccountTxt = bctCardChargesAccountTxt.getAttribute("value");
			String expbctCardChargesAccountTxt = "Bank Charges";
			
			System.out.println("bctCardChargesAccountTxt : "+actbctCardChargesAccountTxt+" Value Expected : "+expbctCardChargesAccountTxt);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloneBtn));
			editcloneBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctNameTxt));
			bctNameTxt.click();
			bctNameTxt.clear();
			bctNameTxt.sendKeys("ICICI CreditCard");
			bctNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCodeTxt));
			bctCodeTxt.click();
			bctCodeTxt.clear();
			bctCodeTxt.sendKeys("ICICI CreditCard");
			bctCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCardTypeDropDown));
			Select bctCardTypeDropDownSelect = new Select(bctCardTypeDropDown);
			bctCardTypeDropDownSelect.selectByVisibleText("Credit");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			 
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			
			
			if(actbctNameTxt.equalsIgnoreCase(expbctNameTxt) && actbctCodeTxt.equalsIgnoreCase(expbctCodeTxt)
					&& actbctCardChargesAccountTxt.equalsIgnoreCase(expbctCardChargesAccountTxt) && actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	public boolean checkSaveCardTypeAsDebitUsingHomeCloneOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkSaveCardTypeAsDebitUsingHomeCloneOption Method Executes.............   *****************************");
		
		try
		{
			if(selectAllHeaderChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			if(selectAllHeaderChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("HDFC CreditCard"))
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				if(posListChkBox.get(i).isSelected()==false)
  	 				{
  	 					posListChkBox.get(i).click();
  	 				}
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloneBtn));
  	 		masterCloneBtn.click();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctNameTxt));
			bctNameTxt.click();
			bctNameTxt.clear();
			bctNameTxt.sendKeys("HDFC DebitCard");
			bctNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCodeTxt));
			bctCodeTxt.click();
			bctCodeTxt.clear();
			bctCodeTxt.sendKeys("HDFC DebitCard");
			bctCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCardTypeDropDown));
			Select bctCardTypeDropDownSelect = new Select(bctCardTypeDropDown);
			bctCardTypeDropDownSelect.selectByVisibleText("Debit");
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			 
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloneBtn));
  	 		masterCloneBtn.click();
			
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctNameTxt));
			bctNameTxt.click();
			bctNameTxt.clear();
			bctNameTxt.sendKeys("ICICI DebitCard");
			bctNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCodeTxt));
			bctCodeTxt.click();
			bctCodeTxt.clear();
			bctCodeTxt.sendKeys("ICICI DebitCard");
			bctCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCardTypeDropDown));
			bctCardTypeDropDownSelect.selectByVisibleText("Debit");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			 
			String expSavingMessage1="Saved Successfully";
			
			String actSavingMessage1=checkValidationMessage(expSavingMessage1);
			
			System.out.println("SavingMessage1 : "+actSavingMessage1+" Value Expected : "+expSavingMessage1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloneBtn));
  	 		masterCloneBtn.click();
			
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctNameTxt));
			bctNameTxt.click();
			bctNameTxt.clear();
			bctNameTxt.sendKeys("CardTypeToDelete");
			bctNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCodeTxt));
			bctCodeTxt.click();
			bctCodeTxt.clear();
			bctCodeTxt.sendKeys("CardTypeToDelete");
			bctCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bctCardTypeDropDown));
			bctCardTypeDropDownSelect.selectByVisibleText("Debit");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			 
			String expSavingMessage2="Saved Successfully";
			
			String actSavingMessage2=checkValidationMessage(expSavingMessage2);
			
			System.out.println("SavingMessage2 : "+actSavingMessage2+" Value Expected : "+expSavingMessage2);
			
			
			if(actSavingMessage.equalsIgnoreCase(expSavingMessage) && actSavingMessage1.equalsIgnoreCase(expSavingMessage1) && actSavingMessage2.equalsIgnoreCase(expSavingMessage2))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	public static boolean checkDeleteCardTypeAndClose() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("********************* checkDeleteCardTypeAndClose Method Executes.............   *****************************");
		
		try
		{
			if(selectAllHeaderChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			if(selectAllHeaderChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("CardTypeToDelete"))
  	 			{
  	 				posNameList.get(i).click();
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
			 
			 
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
  	 		masterDeleteBtn.click();
	         
  	 		Thread.sleep(2000);
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
  	 		System.out.println(getMsgOnDelete.getText());
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
  	 		clickOnOkInDelete.click();
	         
  	 		String expMessage="Record Deleted Successfully.";
	 		
  	 		String actMessage=checkValidationMessage(expMessage);
  	 		
				
  	 		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
  	 		masterCloseBtn.click();
				
  	 		if(actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		} 
	}
	
	
	// Pos Menu
	
	@FindBy(xpath="//*[@id='8000']/div/div")
	private static WebElement  pointOfSaleMenu; 

		@FindBy(xpath="//*[@id='8004']/span")
		private static WebElement  pointOfSaleMainScreenMenu; 
		
		    @FindBy(xpath="//*[@id='8031']/span")
			private static WebElement  pointOfSaleMS; 
			
		    @FindBy(xpath="//*[@id='8032']/span")
			private static WebElement  pointOfSaleCustomization; 
			
		    @FindBy(xpath="//*[@id='8910']/span")
			private static WebElement  posMainScreenCustomization; 
		
		@FindBy(xpath="//*[@id='8500']/span")
		private static WebElement  pointOfSalePOSReportsMenu; 
		
		    @FindBy(xpath="//*[@id='8501']/span")
			private static WebElement  posReportsRetailSalesReportsMenu; 
		   
			    @FindBy(xpath="//*[@id='8502']/span")
			   	private static WebElement  posReportsRetailSalesAnalysis; 
				
			    @FindBy(xpath="//*[@id='8503']/span")
			   	private static WebElement  posReportsRetailSalesByOutlet; 
				
			    @FindBy(xpath="//*[@id='8504']/span")
			   	private static WebElement  posReportsRetailSalesByCounter; 
				
			    @FindBy(xpath="//*[@id='8505']/span")
			   	private static WebElement  posReportsRetailSalesByItem; 	
				
			    @FindBy(xpath="//*[@id='8506']/span")
			   	private static WebElement  posReportsRetailSalesTransactionAnalysis; 
			
		    @FindBy(xpath="//*[@id='8507']/span")
			private static WebElement  posReportsSummarySalesReportMenu; 
				    
			    @FindBy(xpath="//*[@id='8508']/span")
			   	private static WebElement  posReportsSummarySalesReportSalesByDate; 
				
			    @FindBy(xpath="//*[@id='8567']/span")
			   	private static WebElement  posReportsSummarySalesReportSalesByOutlet; 
				
			    @FindBy(xpath="//*[@id='8509']/span")
			   	private static WebElement  posReportsSummarySalesReportSalesByItem; 
				
			    @FindBy(xpath="//*[@id='8510']/span")
			   	private static WebElement  posReportsSummarySalesReportSalesByQuantity; 
						
			    @FindBy(xpath="//*[@id='8511']/span")
			   	private static WebElement  posReportsSummarySalesReportSalesByAmount; 
							
			    @FindBy(xpath="//*[@id='8512']/span")
			   	private static WebElement  posReportsSummarySalesReportSalesByQuantityByAmount; 
				
			    @FindBy(xpath="//*[@id='8539']/span")
			   	private static WebElement  posReportsSummarySalesReportSalesWalkinORPreorderBySales; 			
				
			    @FindBy(xpath="//*[@id='8541']/span")
			   	private static WebElement  posReportsSummarySalesReportPaymentByModeSales; 
				
			    @FindBy(xpath="//*[@id='8579']/span")
			   	private static WebElement  posReportsSummarySalesReportPaymentByModeSummary; 				
		    
		    @FindBy(xpath="//*[@id='8513']/span")
			private static WebElement  posReportsPreorderReportsMenu; 
		   
			    @FindBy(xpath="//*[@id='8514']/span")
			   	private static WebElement  posReportsPreOrderReportsSalesDetailReports; 
			    
			    @FindBy(xpath="//*[@id='8515']/span")
			   	private static WebElement  posReportsPreOrderReportsSalesDetailByOrder; 
			    
			    @FindBy(xpath="//*[@id='8516']/span")
			   	private static WebElement  posReportsPreOrderReportsRefundOrderReport; 
			    
			    @FindBy(xpath="//*[@id='8517']/span")
			   	private static WebElement  posReportsPreOrderReportsSalesSummaryReportByQuantity; 
			    
			    @FindBy(xpath="//*[@id='8518']/span")
			   	private static WebElement  posReportsPreOrderReportsSalesSummaryReportByAmount; 
			    
			
		    @FindBy(xpath="//*[@id='8519']/span")
			private static WebElement posReportsPreorderPaymentReportsMenu; 
		   
			    @FindBy(xpath="//*[@id='8520']/span")
			   	private static WebElement  posReportsPreorderPaymentReportsPaymentCollectionReport; 
			    
			    @FindBy(xpath="//*[@id='8521']/span")
			   	private static WebElement  posReportsPreorderPaymentReportsPaymentCollectionByPaymentMode; 
			    
			    @FindBy(xpath="//*[@id='8522']/span")
			   	private static WebElement  posReportsPreorderPaymentReportsPaymentCollectionByPaymentNo; 
			   
		    @FindBy(xpath="//*[@id='8523']/span")
			private static WebElement  posReportsMemberReportsMenu; 
		    
			    @FindBy(xpath="//a[@id='8525']//span[contains(text(),'Membership Recruitment')]")
			   	private static WebElement  posReportsMemberReportsMembershipRecruitment; 
			    
			    @FindBy(xpath="//span[contains(text(),'Membership Recruitment by Date')]")
			   	private static WebElement  posReportsMemberReportsMembershipRecruitmentByDate; 
			    
			    @FindBy(xpath="//span[contains(text(),'Member Frequency Visit')]")
			   	private static WebElement  posReportsMemberReportsMemberFrequencyVisit; 
			    
			    @FindBy(xpath="//span[contains(text(),'Member Birthday Report')]")
			   	private static WebElement  posReportsMemberReportsMemberBirthdayReport; 
			    
			    @FindBy(xpath="//span[contains(text(),'Sales Info by Member')]")
			   	private static WebElement  posReportsMemberReportsSalesInfoByMember; 
			    
		    @FindBy(xpath="//*[@id='8530']/span")
			private static WebElement  posReportsMemberPointsReportsMenu;
		    
			    @FindBy(xpath="//*[@id='8531']/span")
			   	private static WebElement  posReportsMemberPointsReportsPointsReport; 
			    
			    @FindBy(xpath="//*[@id='8532']/span")
			   	private static WebElement  posReportsMemberPointsReportsPointsExpiryReport; 
			    
			    @FindBy(xpath="//*[@id='8533']/span")
			   	private static WebElement  posReportsMemberPointsReportsMaximumPointsReport; 
			    
			    @FindBy(xpath="//*[@id='8534']/span")
			   	private static WebElement  posReportsMemberPointsReportsMinimumPointsReport; 
			    			
		    @FindBy(xpath="//*[@id='8535']/span")
			private static WebElement  posReportsItemReportsMenu; 

			    @FindBy(xpath="//*[@id='8536']/span")
			   	private static WebElement  posReportsItemReportsFastMovingItems; 
			    
			    @FindBy(xpath="//*[@id='8537']/span")
			   	private static WebElement  posReportsItemReportsSlowMovingItems; 
			    
			    @FindBy(xpath="//*[@id='8538']/span")
			   	private static WebElement  posReportsItemReportsNonMovingItems; 
			    
			    @FindBy(xpath="//*[@id='8568']/span")
			   	private static WebElement  posReportsItemReportsFastMovingItemsByOutlet; 
			    
			    @FindBy(xpath="//*[@id='8569']/span")
			   	private static WebElement  posReportsItemReportsSlowMovingItemsByOutlet; 
			    
			    @FindBy(xpath="//*[@id='8570']/span")
			   	private static WebElement  posReportsItemReportsNonMovingItemsByOutlet; 
			   
		    @FindBy(xpath="//*[@id='8540']/span")
			private static WebElement  posReportsCashReportsMenu; 
		    
			    @FindBy(xpath="//*[@id='8542']/span")
			   	private static WebElement  posReportsCashReportsCashCollectionsMenu; 
			    
			    @FindBy(xpath="//*[@id='8544']/span")
			   	private static WebElement  posReportsCashReportsCashDiscrepancyMenu; 
		    
		    @FindBy(xpath="//*[@id='8545']/span")
			private static WebElement  posReportsStockReportsMenu; 
		    
			    @FindBy(xpath="//*[@id='8546']/span")
			   	private static WebElement  posReportsStockReportsStockInAndOutMenu; 
			    
			    @FindBy(xpath="//*[@id='8549']/span")
			   	private static WebElement  posReportsStockReportsStockStatusByUutletMenu; 

		    @FindBy(xpath="//*[@id='8550']/span")
			private static WebElement  posReportsPeriodicSalesReportsMenu; 
		    
			    @FindBy(xpath="//*[@id='8551']/span")
			   	private static WebElement  posReportsPeriodicSalesReportsHourlySalesByOutlet;
			    
			    @FindBy(xpath="//*[@id='8552']/span")
			   	private static WebElement  posSReportsPeriodicSalesReportsDailySalesByOutlet;
			    
			    @FindBy(xpath="//*[@id='8553']/span")
			   	private static WebElement  posReportsPeriodicSalesReportsDailySalesByBankByOutlet;
			    
			    @FindBy(xpath="//*[@id='8555']/span")
			   	private static WebElement  posReportsPeriodicSalesReportsMonthlySalesByOutlet;
			    
		    @FindBy(xpath="//*[@id='8556']/span")
		   	private static WebElement  posReportsLastYearComparisonReportsMenu; 
		    
			    @FindBy(xpath="//*[@id='8557']/span")
			   	private static WebElement  posReportsLastYearComparisonReportsSalesInfoByQuantityMenu;
			     
			    @FindBy(xpath="//*[@id='8558']/span")
			   	private static WebElement  posReportsLastYearComparisonReportsSalesInfoByAmountMenu;
			    
			    @FindBy(xpath="//*[@id='8559']/span")
			   	private static WebElement  posReportsLastYearComparisonReportsSalesInfoByQuantityAndAmountMenu;
			    
			    @FindBy(xpath="//*[@id='8560']/span")
			   	private static WebElement  posReportsLastYearComparisonReportsBestOutletsPerformanceMenu;
			    
			    @FindBy(xpath="//*[@id='8561']/span")
			   	private static WebElement  posReportsLastYearComparisonReportsWorstOutletsPerformanceMenu;
			    
		    @FindBy(xpath="//*[@id='8562']/span")
		   	private static WebElement  posReportsMiscellaneousReportsMenu; 
		    
			    @FindBy(xpath="//*[@id='8563']/span")
			   	private static WebElement  posReportsMiscelsReportsXReadingMenu;
			   
			    @FindBy(xpath="//*[@id='8564']/span")
			   	private static WebElement  posReportsMiscelsReportsOutletStatusMenu;
			    
			    @FindBy(xpath="//*[@id='8566']/span")
			   	private static WebElement  posReportsMiscelsReportsEODkSummaryReportMenu;
			    
		    @FindBy(xpath="//*[@id='8571']/span")
		   	private static WebElement  posReportsRestaurantReportsMenu; 
		        
			    @FindBy(xpath="//*[@id='8572']/span")
			   	private static WebElement  posReportsRestaurantReportsDailySalesMenu;
			    
			    @FindBy(xpath="//*[@id='8573']/span")
			   	private static WebElement  posReportsRestaurantReportsSalesByMenuCategoryMenu;
			    
			    @FindBy(xpath="//*[@id='8574']/span")
			   	private static WebElement  posReportsRestaurantReportsDiscountByWaiterMenu;
			    
			    @FindBy(xpath="//*[@id='8577']/span")
			   	private static WebElement  posReportsRestaurantReportsClerkWiseSalesMenu;
				    
		@FindBy(xpath="//*[@id='8003']/span")
		private static WebElement  pointOfSaleUtilitiesMenu; 

		    @FindBy(xpath="//*[@id='8019']/span")
		   	private static WebElement  posUtilitiesPreferencesMenu;
		    
		    @FindBy(xpath="//*[@id='8021']/span")
		   	private static WebElement  posUtilitiesGiftVoucherSaleMenu;
		    
		    @FindBy(xpath="//*[@id='8036']/span")
		   	private static WebElement  posUtilitiesGiftVoucherTransferMenu;
		    
		    @FindBy(xpath="//*[@id='8037']/span")
		   	private static WebElement  posUtilitiesDiscountVoucherTransferMenu;
		    
		    @FindBy(xpath="//*[@id='8022']/span")
		   	private static WebElement  posUtilitiesCreditNoteMenu;
		    
		    @FindBy(xpath="//*[@id='8026']/span")
		   	private static WebElement  posUtilitiesMessageBroadcastingMenu;
		    
		    @FindBy(xpath=" //*[@id='8038']/span ")
		   	private static WebElement posUtilitiesDayEndMenu;
		   
		    @FindBy(xpath="//*[@id='8040']/span")
		   	private static WebElement  posUtilitiesReprintDayEndMenu;
	    
		    
		    @FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
			private static WebElement noIn;		
		    
			@FindBy(xpath="//*[@id='dashName']")
			private static WebElement dashboard;
			

	public static boolean checkPointOfSaleMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		//checkRefershPopOnlogin();
				        
		//checkPopUpWindow();
		
	    Thread.sleep(8000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
		
		if(pointOfSaleMainScreenMenu.isDisplayed() && pointOfSalePOSReportsMenu.isDisplayed() && 
				pointOfSaleUtilitiesMenu.isDisplayed())
		{
			excelReader.setCellData(xlfile, "Sheet1", 140, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 140, 9, resFail);
			return false;
		}
	}
    
	
	
	public static boolean checkMainScreenMenuInPointOfSaleMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
		 pointOfSaleMainScreenMenu.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posMainScreenCustomization));
		 
		 boolean actpointOfSale                =pointOfSaleMS.isDisplayed();
		 boolean actpointOfSaleCustomization   =pointOfSaleCustomization.isDisplayed();
		 boolean actposMainScreenCustomization =posMainScreenCustomization.isDisplayed();
		 
		 // Expected
		 
		 boolean exppointOfSale                =true;
		 boolean exppointOfSaleCustomization   =true;
		 boolean expposMainScreenCustomization =true;
		 
		 System.out.println("******************checkMainScreenMenuInPointOfSaleMenu**********************");
		 
		 System.out.println("pointOfSale                 : "+actpointOfSale                +" Value Expected : "+exppointOfSale);
		 System.out.println("pointOfSaleCustomization    : "+actpointOfSaleCustomization   +" Value Expected : "+exppointOfSaleCustomization);
		 System.out.println("posMainScreenCustomization  : "+actposMainScreenCustomization +" Value Expected : "+expposMainScreenCustomization);
		
		if(actpointOfSale==exppointOfSale && actpointOfSaleCustomization==exppointOfSaleCustomization
				&& actposMainScreenCustomization==expposMainScreenCustomization)
		{
			excelReader.setCellData(xlfile, "Sheet1", 141, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 141, 9, resFail);
			return false;
		}
	}
			


	public static boolean checkPOSReportsMenuInPointOfSaleMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSalePOSReportsMenu));
		
		 pointOfSalePOSReportsMenu.click();
		 
		 
		 Thread.sleep(2000);
		 
		 JavascriptExecutor js = (JavascriptExecutor) getDriver();
		 js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
		 
		 
	
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsRetailSalesReportsMenu));
	 
	 
		boolean actposReportsRetailSalesReportsMenu       =posReportsRetailSalesReportsMenu.isDisplayed();
		boolean actposReportsSummarySalesReportMenu       =posReportsSummarySalesReportMenu.isDisplayed();
		boolean actposReportsPreorderReportsMenu          =posReportsPreorderReportsMenu.isDisplayed();
		boolean actposReportsPreorderPaymentReportsMenu   =posReportsPreorderPaymentReportsMenu.isDisplayed();
		boolean actposReportsMemberReportsMenu            =posReportsMemberReportsMenu.isDisplayed();
		boolean actposReportsMemberPointsReportsMenu      =posReportsMemberPointsReportsMenu.isDisplayed();
		boolean actposReportsItemReportsMenu              =posReportsItemReportsMenu.isDisplayed();
		boolean actposReportsCashReportsMenu              =posReportsCashReportsMenu.isDisplayed();
		boolean actposReportsStockReportsMenu             =posReportsStockReportsMenu.isDisplayed();
		boolean actposReportsPeriodicSalesReportsMenu     =posReportsPeriodicSalesReportsMenu.isDisplayed();
		boolean actposReportsLastYearComparisonReportsMenu=posReportsLastYearComparisonReportsMenu.isDisplayed();
		boolean actposReportsMiscellaneousReportsMenu     =posReportsMiscellaneousReportsMenu.isDisplayed();
		boolean actposReportsRestaurantReportsMenu        =posReportsRestaurantReportsMenu.isDisplayed();
		
		//Expected
		
		boolean expposReportsRetailSalesReportsMenu       =true;
		boolean expposReportsSummarySalesReportMenu       =true;
		boolean expposReportsPreorderReportsMenu          =true;
		boolean expposReportsPreorderPaymentReportsMenu   =true;
		boolean expposReportsMemberReportsMenu            =true;
		boolean expposReportsMemberPointsReportsMenu      =true;
		boolean expposReportsItemReportsMenu              =true;
		boolean expposReportsCashReportsMenu              =true;
		boolean expposReportsStockReportsMenu             =true;
		boolean expposReportsPeriodicSalesReportsMenu     =true;
		boolean expposReportsLastYearComparisonReportsMenu=true;
		boolean expposReportsMiscellaneousReportsMenu     =true;
		boolean expposReportsRestaurantReportsMenu        =true;
		
		
		
		System.out.println("*****************************************checkPOSReportsMenuInPointOfSaleMenu***************************************");
		 
		System.out.println("posReportsRetailSalesReportsMenu          : "+actposReportsRetailSalesReportsMenu          +" Value Expected : "+expposReportsRetailSalesReportsMenu);
		System.out.println("posReportsSummarySalesReportMenu          : "+actposReportsSummarySalesReportMenu          +" Value Expected : "+expposReportsSummarySalesReportMenu);
		System.out.println("posReportsPreorderReportsMenu             : "+actposReportsPreorderReportsMenu             +" Value Expected : "+expposReportsPreorderReportsMenu);
		System.out.println("posReportsPreorderPaymentReportsMenu      : "+actposReportsPreorderPaymentReportsMenu      +" Value Expected : "+expposReportsPreorderPaymentReportsMenu);
		System.out.println("posReportsMemberReportsMenu               : "+actposReportsMemberReportsMenu               +" Value Expected : "+expposReportsMemberReportsMenu);
		System.out.println("posReportsMemberPointsReportsMenu         : "+actposReportsMemberPointsReportsMenu         +" Value Expected : "+expposReportsMemberPointsReportsMenu);
		System.out.println("posReportsItemReportsMenu                 : "+actposReportsItemReportsMenu                 +" Value Expected : "+expposReportsItemReportsMenu);
		System.out.println("posReportsCashReportsMenu                 : "+actposReportsCashReportsMenu                 +" Value Expected : "+expposReportsCashReportsMenu);
		System.out.println("posReportsStockReportsMenu                : "+actposReportsStockReportsMenu                +" Value Expected : "+expposReportsStockReportsMenu);
		System.out.println("posReportsPeriodicSalesReportsMenu        : "+actposReportsPeriodicSalesReportsMenu        +" Value Expected : "+expposReportsPeriodicSalesReportsMenu);
		System.out.println("posReportsLastYearComparisonReportsMenu   : "+actposReportsLastYearComparisonReportsMenu   +" Value Expected : "+expposReportsLastYearComparisonReportsMenu);
		System.out.println("posReportsMiscellaneousReportsMenu        : "+actposReportsMiscellaneousReportsMenu        +" Value Expected : "+expposReportsMiscellaneousReportsMenu);
		System.out.println("posReportsRestaurantReportsMenu           : "+actposReportsRestaurantReportsMenu           +" Value Expected : "+expposReportsRestaurantReportsMenu);
		
		
		
		if(actposReportsRetailSalesReportsMenu==expposReportsRetailSalesReportsMenu && actposReportsSummarySalesReportMenu==expposReportsSummarySalesReportMenu
				&& actposReportsPreorderReportsMenu==expposReportsPreorderReportsMenu && actposReportsPreorderPaymentReportsMenu==expposReportsPreorderPaymentReportsMenu
				&& actposReportsMemberReportsMenu==expposReportsMemberReportsMenu && actposReportsMemberPointsReportsMenu==expposReportsMemberPointsReportsMenu
				&& actposReportsItemReportsMenu==expposReportsItemReportsMenu && actposReportsCashReportsMenu==expposReportsCashReportsMenu
				&& actposReportsStockReportsMenu==expposReportsStockReportsMenu && actposReportsPeriodicSalesReportsMenu==expposReportsPeriodicSalesReportsMenu
				&& actposReportsLastYearComparisonReportsMenu==expposReportsLastYearComparisonReportsMenu && actposReportsMiscellaneousReportsMenu==expposReportsMiscellaneousReportsMenu
				&& actposReportsRestaurantReportsMenu==expposReportsRestaurantReportsMenu)
		{
			excelReader.setCellData(xlfile, "Sheet1", 142, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 142, 9, resFail);
			return false;
		}
	}

			



	public static boolean checkRetailSalesReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsRetailSalesReportsMenu));
		 posReportsRetailSalesReportsMenu.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsRetailSalesTransactionAnalysis));
		 
		 
		 boolean actposReportsRetailSalesAnalysis              =posReportsRetailSalesAnalysis.isDisplayed();
		 boolean actposReportsRetailSalesByOutlet              =posReportsRetailSalesByOutlet.isDisplayed();
		 boolean actposReportsRetailSalesByCounter             =posReportsRetailSalesByCounter.isDisplayed();
		 boolean actposReportsRetailSalesByItem        		   =posReportsRetailSalesByItem.isDisplayed();
		 boolean actposReportsRetailSalesTransactionAnalysis   =posReportsRetailSalesTransactionAnalysis.isDisplayed();
		 
		 // Expected
		 
		 boolean expposReportsRetailSalesAnalysis              =true;
		 boolean expposReportsRetailSalesByOutlet              =true;
		 boolean expposReportsRetailSalesByCounter             =true;
		 boolean expposReportsRetailSalesByItem        		   =true;
		 boolean expposReportsRetailSalesTransactionAnalysis   =true;
			
		System.out.println("****************************************checkRetailSalesReportsMenuInPosReReportsMenu**************************************");
		
		 System.out.println("posReportsRetailSalesAnalysis             : "+actposReportsRetailSalesAnalysis             +" Value Expected : "+expposReportsRetailSalesAnalysis);
		 System.out.println("posReportsRetailSalesByOutlet             : "+actposReportsRetailSalesByOutlet             +" Value Expected : "+expposReportsRetailSalesByOutlet);
		 System.out.println("posReportsRetailSalesByCounter            : "+actposReportsRetailSalesByCounter            +" Value Expected : "+expposReportsRetailSalesByCounter);
		 System.out.println("posReportsRetailSalesByItem               : "+actposReportsRetailSalesByItem               +" Value Expected : "+expposReportsRetailSalesByItem);
		 System.out.println("posReportsRetailSalesTransactionAnalysis  : "+actposReportsRetailSalesTransactionAnalysis  +" Value Expected : "+expposReportsRetailSalesTransactionAnalysis);
		 
		if(actposReportsRetailSalesAnalysis==expposReportsRetailSalesAnalysis && actposReportsRetailSalesByOutlet==expposReportsRetailSalesByOutlet
				&& actposReportsRetailSalesByCounter==expposReportsRetailSalesByCounter && actposReportsRetailSalesByItem==expposReportsRetailSalesByItem
				&& actposReportsRetailSalesTransactionAnalysis==expposReportsRetailSalesTransactionAnalysis)
		{
			excelReader.setCellData(xlfile, "Sheet1", 143, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 143, 9, resFail);
			return false;
		}
	}
			

    public static boolean checkSummarySalesReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsSummarySalesReportMenu));
		 posReportsSummarySalesReportMenu.click();
		
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsSummarySalesReportPaymentByModeSummary));
		 
		 boolean actposReportsSummarySalesReportSalesByDate                   =posReportsSummarySalesReportSalesByDate.isDisplayed();
		 boolean actposReportsSummarySalesReportSalesByOutlet                 =posReportsSummarySalesReportSalesByOutlet.isDisplayed();
		 boolean actposReportsSummarySalesReportSalesByItem                   =posReportsSummarySalesReportSalesByItem.isDisplayed();
		 boolean actposReportsSummarySalesReportSalesByQuantity        		  =posReportsSummarySalesReportSalesByQuantity.isDisplayed();
		 boolean actposReportsSummarySalesReportSalesByAmount                 =posReportsSummarySalesReportSalesByAmount.isDisplayed();
		 boolean actposReportsSummarySalesReportSalesByQuantityByAmount       =posReportsSummarySalesReportSalesByQuantityByAmount.isDisplayed();
		 boolean actposReportsSummarySalesReportSalesWalkinORPreorderBySales  =posReportsSummarySalesReportSalesWalkinORPreorderBySales.isDisplayed();
		 boolean actposReportsSummarySalesReportPaymentByModeSales            =posReportsSummarySalesReportPaymentByModeSales.isDisplayed();
		 boolean actposReportsSummarySalesReportPaymentByModeSummary          =posReportsSummarySalesReportPaymentByModeSummary.isDisplayed();
		 
		 // Expected
		 
		 
		 boolean expposReportsSummarySalesReportSalesByDate                   =true;
		 boolean expposReportsSummarySalesReportSalesByOutlet                 =true;
		 boolean expposReportsSummarySalesReportSalesByItem                   =true;
		 boolean expposReportsSummarySalesReportSalesByQuantity        		  =true;
		 boolean expposReportsSummarySalesReportSalesByAmount                 =true;
		 boolean expposReportsSummarySalesReportSalesByQuantityByAmount       =true;
		 boolean expposReportsSummarySalesReportSalesWalkinORPreorderBySales  =true;
		 boolean expposReportsSummarySalesReportPaymentByModeSales            =true;
		 boolean expposReportsSummarySalesReportPaymentByModeSummary          =true;
		 
		 System.out.println("***********************************checkSummarySalesReportsMenuInPosReReportsMenu****************************************");
		 
		 System.out.println("posReportsSummarySalesReportSalesByDate                   : "+actposReportsSummarySalesReportSalesByDate                    +" Value Expected : "+expposReportsSummarySalesReportSalesByDate);
		 System.out.println("posReportsSummarySalesReportSalesByOutlet                 : "+actposReportsSummarySalesReportSalesByOutlet                  +" Value Expected : "+expposReportsSummarySalesReportSalesByOutlet);
		 System.out.println("posReportsSummarySalesReportSalesByItem                   : "+actposReportsSummarySalesReportSalesByItem                    +" Value Expected : "+expposReportsSummarySalesReportSalesByItem);
		 System.out.println("posReportsSummarySalesReportSalesByQuantity               : "+actposReportsSummarySalesReportSalesByQuantity                +" Value Expected : "+expposReportsSummarySalesReportSalesByQuantity);
		 System.out.println("posReportsSummarySalesReportSalesByAmount                 : "+actposReportsSummarySalesReportSalesByAmount                  +" Value Expected : "+expposReportsSummarySalesReportSalesByAmount);
		 System.out.println("posReportsSummarySalesReportSalesByQuantityByAmount       : "+actposReportsSummarySalesReportSalesByQuantityByAmount        +" Value Expected : "+expposReportsSummarySalesReportSalesByQuantityByAmount);
		 System.out.println("posReportsSummarySalesReportSalesWalkinORPreorderBySales  : "+actposReportsSummarySalesReportSalesWalkinORPreorderBySales   +" Value Expected : "+expposReportsSummarySalesReportSalesWalkinORPreorderBySales);
		 System.out.println("posReportsSummarySalesReportPaymentByModeSales            : "+actposReportsSummarySalesReportPaymentByModeSales             +" Value Expected : "+expposReportsSummarySalesReportPaymentByModeSales);
		 System.out.println("posReportsSummarySalesReportPaymentByModeSummary          : "+actposReportsSummarySalesReportPaymentByModeSummary           +" Value Expected : "+expposReportsSummarySalesReportPaymentByModeSummary);
		
		if(actposReportsSummarySalesReportSalesByDate==expposReportsSummarySalesReportSalesByDate
				&& actposReportsSummarySalesReportSalesByOutlet==expposReportsSummarySalesReportSalesByOutlet
				&& actposReportsSummarySalesReportSalesByItem==expposReportsSummarySalesReportSalesByItem
				&& actposReportsSummarySalesReportSalesByQuantity==expposReportsSummarySalesReportSalesByQuantity
				&& actposReportsSummarySalesReportSalesByAmount==expposReportsSummarySalesReportSalesByAmount
				&& actposReportsSummarySalesReportSalesByQuantityByAmount==expposReportsSummarySalesReportSalesByQuantityByAmount
				&& actposReportsSummarySalesReportSalesWalkinORPreorderBySales==expposReportsSummarySalesReportSalesWalkinORPreorderBySales
				&& actposReportsSummarySalesReportPaymentByModeSales==expposReportsSummarySalesReportPaymentByModeSales
				&& actposReportsSummarySalesReportPaymentByModeSummary==expposReportsSummarySalesReportPaymentByModeSummary)
		{
			excelReader.setCellData(xlfile, "Sheet1", 144, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 144, 9, resFail);
			return false;
		}
	}

			   
			    
    
    
    public static boolean checkPreOrderReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsPreorderReportsMenu));
		 posReportsPreorderReportsMenu.click();
		 
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsPreOrderReportsSalesSummaryReportByAmount));
		 
		 boolean actposReportsPreOrderReportsSalesDetailReports            =posReportsPreOrderReportsSalesDetailReports.isDisplayed();
		 boolean actposReportsPreOrderReportsSalesDetailByOrder            =posReportsPreOrderReportsSalesDetailByOrder.isDisplayed();
		 boolean actposReportsPreOrderReportsRefundOrderReport             =posReportsPreOrderReportsRefundOrderReport.isDisplayed();
		 boolean actposReportsPreOrderReportsSalesSummaryReportByQuantity  =posReportsPreOrderReportsSalesSummaryReportByQuantity.isDisplayed();
		 boolean actposReportsPreOrderReportsSalesSummaryReportByAmount    =posReportsPreOrderReportsSalesSummaryReportByAmount.isDisplayed();
		 
		 // Expected
		 
		 boolean expposReportsPreOrderReportsSalesDetailReports            =true;
		 boolean expposReportsPreOrderReportsSalesDetailByOrder            =true;
		 boolean expposReportsPreOrderReportsRefundOrderReport             =true;
		 boolean expposReportsPreOrderReportsSalesSummaryReportByQuantity  =true;
		 boolean expposReportsPreOrderReportsSalesSummaryReportByAmount    =true;

		 System.out.println("********************************checkPreOrderReportsMenuInPosReReportsMenu*******************************");
		 
		 System.out.println("posReportsPreOrderReportsSalesDetailReports            : "+actposReportsPreOrderReportsSalesDetailReports            +" Value Expected : "+expposReportsPreOrderReportsSalesDetailReports);
		 System.out.println("posReportsPreOrderReportsSalesDetailByOrder            : "+actposReportsPreOrderReportsSalesDetailByOrder            +" Value Expected : "+expposReportsPreOrderReportsSalesDetailByOrder);
		 System.out.println("posReportsPreOrderReportsRefundOrderReport             : "+actposReportsPreOrderReportsRefundOrderReport             +" Value Expected : "+expposReportsPreOrderReportsRefundOrderReport);
		 System.out.println("posReportsPreOrderReportsSalesSummaryReportByQuantity  : "+actposReportsPreOrderReportsSalesSummaryReportByQuantity  +" Value Expected : "+expposReportsPreOrderReportsSalesSummaryReportByQuantity);
		 System.out.println("posReportsPreOrderReportsSalesSummaryReportByAmount    : "+actposReportsPreOrderReportsSalesSummaryReportByAmount    +" Value Expected : "+expposReportsPreOrderReportsSalesSummaryReportByAmount);
		 
		if(actposReportsPreOrderReportsSalesDetailReports==expposReportsPreOrderReportsSalesDetailReports
				&& actposReportsPreOrderReportsSalesDetailByOrder==expposReportsPreOrderReportsSalesDetailByOrder
				&& actposReportsPreOrderReportsRefundOrderReport==expposReportsPreOrderReportsRefundOrderReport
				&& actposReportsPreOrderReportsSalesSummaryReportByQuantity==expposReportsPreOrderReportsSalesSummaryReportByQuantity
				&& actposReportsPreOrderReportsSalesSummaryReportByAmount==expposReportsPreOrderReportsSalesSummaryReportByAmount)
		{
			excelReader.setCellData(xlfile, "Sheet1", 145, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 145, 9, resFail);
			return false;
		}
	}
    
			

			    

    public static boolean checkPreOrderPaymentReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsPreorderPaymentReportsMenu));
		 posReportsPreorderPaymentReportsMenu.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsPreorderPaymentReportsPaymentCollectionByPaymentNo));
		 
		 boolean actposReportsPreorderPaymentReportsPaymentCollectionReport           =posReportsPreorderPaymentReportsPaymentCollectionReport.isDisplayed();
		 boolean actposReportsPreorderPaymentReportsPaymentCollectionByPaymentMode    =posReportsPreorderPaymentReportsPaymentCollectionByPaymentMode.isDisplayed();
		 boolean actposReportsPreorderPaymentReportsPaymentCollectionByPaymentNo      =posReportsPreorderPaymentReportsPaymentCollectionByPaymentNo.isDisplayed();
		 
		 // Expected
		 
		 boolean expposReportsPreorderPaymentReportsPaymentCollectionReport           =true;
		 boolean expposReportsPreorderPaymentReportsPaymentCollectionByPaymentMode    =true;
		 boolean expposReportsPreorderPaymentReportsPaymentCollectionByPaymentNo      =true;
		 
		 System.out.println("***************************************checkPreOrderPaymentReportsMenuInPosReReportsMenu***************************************");
		 
		 System.out.println("posReportsPreorderPaymentReportsPaymentCollectionReport         : "+actposReportsPreorderPaymentReportsPaymentCollectionReport         +" Value Expected : "+expposReportsPreorderPaymentReportsPaymentCollectionReport);
		 System.out.println("posReportsPreorderPaymentReportsPaymentCollectionByPaymentMode  : "+actposReportsPreorderPaymentReportsPaymentCollectionByPaymentMode  +" Value Expected : "+expposReportsPreorderPaymentReportsPaymentCollectionByPaymentMode);
		 System.out.println("posReportsPreorderPaymentReportsPaymentCollectionByPaymentNo    : "+actposReportsPreorderPaymentReportsPaymentCollectionByPaymentNo    +" Value Expected : "+expposReportsPreorderPaymentReportsPaymentCollectionByPaymentNo);
		
		if(actposReportsPreorderPaymentReportsPaymentCollectionReport==expposReportsPreorderPaymentReportsPaymentCollectionReport
				&& actposReportsPreorderPaymentReportsPaymentCollectionByPaymentMode==expposReportsPreorderPaymentReportsPaymentCollectionByPaymentMode
				&& actposReportsPreorderPaymentReportsPaymentCollectionByPaymentNo==expposReportsPreorderPaymentReportsPaymentCollectionByPaymentNo)
		{
			excelReader.setCellData(xlfile, "Sheet1", 146, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 146, 9, resFail);
			return false;
		}
	}
    
				    
				    
				
			    
    
    public static boolean checkMemberReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsMemberReportsMenu));
		 posReportsMemberReportsMenu.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsMemberReportsSalesInfoByMember));
		 
		 boolean actposReportsMemberReportsMembershipRecruitment          =posReportsMemberReportsMembershipRecruitment.isDisplayed();
		 boolean actposReportsMemberReportsMembershipRecruitmentByDate    =posReportsMemberReportsMembershipRecruitmentByDate.isDisplayed();
		 boolean actposReportsMemberReportsMemberFrequencyVisit           =posReportsMemberReportsMemberFrequencyVisit.isDisplayed();
		 boolean actposReportsMemberReportsMemberBirthdayReport           =posReportsMemberReportsMemberBirthdayReport.isDisplayed();
		 boolean actposReportsMemberReportsSalesInfoByMember              =posReportsMemberReportsSalesInfoByMember.isDisplayed();
		 
		 // Expected
		 
		 boolean expposReportsMemberReportsMembershipRecruitment          =true;
		 boolean expposReportsMemberReportsMembershipRecruitmentByDate    =true;
		 boolean expposReportsMemberReportsMemberFrequencyVisit           =true;
		 boolean expposReportsMemberReportsMemberBirthdayReport           =true;
		 boolean expposReportsMemberReportsSalesInfoByMember              =true;
		
		 System.out.println("***************************************checkMemberReportsMenuInPosReReportsMenu***************************************");
		 
		 System.out.println("posReportsMemberReportsMembershipRecruitment        : "+actposReportsMemberReportsMembershipRecruitment        +" Value Expected : "+expposReportsMemberReportsMembershipRecruitment);
		 System.out.println("posReportsMemberReportsMembershipRecruitmentByDate  : "+actposReportsMemberReportsMembershipRecruitmentByDate  +" Value Expected : "+expposReportsMemberReportsMembershipRecruitmentByDate);
		 System.out.println("posReportsMemberReportsMemberFrequencyVisit         : "+actposReportsMemberReportsMemberFrequencyVisit         +" Value Expected : "+expposReportsMemberReportsMemberFrequencyVisit);
		 System.out.println("posReportsMemberReportsMemberBirthdayReport         : "+actposReportsMemberReportsMemberBirthdayReport         +" Value Expected : "+expposReportsMemberReportsMemberBirthdayReport);
		 System.out.println("posReportsMemberReportsSalesInfoByMember            : "+actposReportsMemberReportsSalesInfoByMember            +" Value Expected : "+expposReportsMemberReportsSalesInfoByMember);
		 
		 
		 
		if(actposReportsMemberReportsMembershipRecruitment==expposReportsMemberReportsMembershipRecruitment
				&& actposReportsMemberReportsMembershipRecruitmentByDate==expposReportsMemberReportsMembershipRecruitmentByDate
				&& actposReportsMemberReportsMembershipRecruitmentByDate==expposReportsMemberReportsMembershipRecruitmentByDate
				&& actposReportsMemberReportsMemberBirthdayReport==expposReportsMemberReportsMemberBirthdayReport
				&& actposReportsMemberReportsSalesInfoByMember==expposReportsMemberReportsSalesInfoByMember)
		{
			excelReader.setCellData(xlfile, "Sheet1", 147, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 147, 9, resFail);
			return false;
		}
	}
		    


    public static boolean checkMemberPointsReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsMemberPointsReportsMenu));
		
		 posReportsMemberPointsReportsMenu.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsMemberPointsReportsPointsReport));
		
		 boolean actposReportsMemberPointsReportsPointsReport            = posReportsMemberPointsReportsPointsReport.isDisplayed();
		 boolean actposReportsMemberPointsReportsPointsExpiryReport      = posReportsMemberPointsReportsPointsExpiryReport.isDisplayed();
		 boolean actposReportsMemberPointsReportsMaximumPointsReport     = posReportsMemberPointsReportsMaximumPointsReport.isDisplayed();
		 boolean actposReportsMemberPointsReportsMinimumPointsReport     = posReportsMemberPointsReportsMinimumPointsReport.isDisplayed();
		
		 
		 // Expected
		 
		 boolean expposReportsMemberPointsReportsPointsReport          = true;
		 boolean expposReportsMemberPointsReportsPointsExpiryReport    = true;
		 boolean expposReportsMemberPointsReportsMaximumPointsReport   = true;
		 boolean expposReportsMemberPointsReportsMinimumPointsReport   = true;
		
		
		 System.out.println("***************************************checkMemberPointsReportsMenuInPosReReportsMenu***************************************");
		 
		 System.out.println("posReportsMemberPointsReportsPointsReport        : "+actposReportsMemberPointsReportsPointsReport        +" Value Expected : "+expposReportsMemberPointsReportsPointsReport);
		 System.out.println("posReportsMemberPointsReportsPointsExpiryReport  : "+actposReportsMemberPointsReportsPointsExpiryReport  +" Value Expected : "+expposReportsMemberPointsReportsPointsExpiryReport);
		 System.out.println("posReportsMemberPointsReportsMaximumPointsReport : "+actposReportsMemberPointsReportsMaximumPointsReport +" Value Expected : "+expposReportsMemberPointsReportsMaximumPointsReport);
		 System.out.println("posReportsMemberPointsReportsMinimumPointsReport : "+actposReportsMemberPointsReportsMinimumPointsReport +" Value Expected : "+expposReportsMemberPointsReportsMinimumPointsReport);
	
		if(actposReportsMemberPointsReportsPointsReport==expposReportsMemberPointsReportsPointsReport
				&& actposReportsMemberPointsReportsPointsExpiryReport==expposReportsMemberPointsReportsPointsExpiryReport
				&& actposReportsMemberPointsReportsMaximumPointsReport==expposReportsMemberPointsReportsMaximumPointsReport
				&& actposReportsMemberPointsReportsMinimumPointsReport==expposReportsMemberPointsReportsMinimumPointsReport)
		 
		{
			excelReader.setCellData(xlfile, "Sheet1", 148, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 148, 9, resFail);
			return false;
		}
	}
    
		    
    public static boolean checkItemReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsItemReportsMenu));
		
		 posReportsItemReportsMenu.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsItemReportsFastMovingItems));
		
		 
		 boolean actposReportsItemReportsFastMovingItems            = posReportsItemReportsFastMovingItems.isDisplayed();
		 boolean actposReportsItemReportsSlowMovingItems            = posReportsItemReportsSlowMovingItems.isDisplayed();
		 boolean actposReportsItemReportsNonMovingItems             = posReportsItemReportsNonMovingItems.isDisplayed();
		 boolean actposReportsItemReportsFastMovingItemsByOutlet    = posReportsItemReportsFastMovingItemsByOutlet.isDisplayed();
		 boolean actposReportsItemReportsSlowMovingItemsByOutlet    = posReportsItemReportsSlowMovingItemsByOutlet.isDisplayed();
		 boolean actposReportsItemReportsNonMovingItemsByOutlet     = posReportsItemReportsNonMovingItemsByOutlet.isDisplayed();
		 
		 // Expected
		 
		 boolean expposReportsItemReportsFastMovingItems            = true;
		 boolean expposReportsItemReportsSlowMovingItems            = true;
		 boolean expposReportsItemReportsNonMovingItems             = true;
		 boolean expposReportsItemReportsFastMovingItemsByOutlet    = true;
		 boolean expposReportsItemReportsSlowMovingItemsByOutlet    = true;
		 boolean expposReportsItemReportsNonMovingItemsByOutlet     = true;
		
		 System.out.println("***************************************checkItemReportsMenuInPosReReportsMenu***************************************");
		 
		 System.out.println("posReportsItemReportsFastMovingItems          : "+actposReportsItemReportsFastMovingItems         +" Value Expected : "+expposReportsItemReportsFastMovingItems);
		 System.out.println("posReportsItemReportsSlowMovingItems          : "+actposReportsItemReportsSlowMovingItems         +" Value Expected : "+expposReportsItemReportsSlowMovingItems);
		 System.out.println("posReportsItemReportsNonMovingItems           : "+actposReportsItemReportsNonMovingItems          +" Value Expected : "+expposReportsItemReportsNonMovingItems);
		 System.out.println("posReportsItemReportsFastMovingItemsByOutlet  : "+actposReportsItemReportsFastMovingItemsByOutlet +" Value Expected : "+expposReportsItemReportsFastMovingItemsByOutlet);
		 System.out.println("posReportsItemReportsSlowMovingItemsByOutlet  : "+actposReportsItemReportsSlowMovingItemsByOutlet +" Value Expected : "+expposReportsItemReportsSlowMovingItemsByOutlet);
		 System.out.println("posReportsItemReportsNonMovingItemsByOutlet   : "+actposReportsItemReportsNonMovingItemsByOutlet  +" Value Expected : "+expposReportsItemReportsNonMovingItemsByOutlet);
		 
		 
		 
		if(actposReportsItemReportsFastMovingItems==expposReportsItemReportsFastMovingItems
				&& actposReportsItemReportsSlowMovingItems==expposReportsItemReportsSlowMovingItems
				&& actposReportsItemReportsNonMovingItems==expposReportsItemReportsNonMovingItems
				&& actposReportsItemReportsFastMovingItemsByOutlet==expposReportsItemReportsFastMovingItemsByOutlet
				&& actposReportsItemReportsSlowMovingItemsByOutlet==expposReportsItemReportsSlowMovingItemsByOutlet
				&& actposReportsItemReportsNonMovingItemsByOutlet==expposReportsItemReportsNonMovingItemsByOutlet)
		 
		{
			excelReader.setCellData(xlfile, "Sheet1", 149, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 149, 9, resFail);
			return false;
		}
	}
		    

		    
	public static boolean checkCashReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
	   excelReader=new ExcelReader(POJOUtility.getExcelPath());
	   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsCashReportsMenu));
			
	   posReportsCashReportsMenu.click();
			
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsCashReportsCashCollectionsMenu));
			
	     boolean actposReportsCashReportsCashCollectionsMenu       = posReportsCashReportsCashCollectionsMenu.isDisplayed();
		 boolean actposReportsCashReportsCashDiscrepancyMenu       = posReportsCashReportsCashDiscrepancyMenu.isDisplayed();
		 
		
		 
		 // Expected
		 
		 boolean expposReportsCashReportsCashCollectionsMenu      = true;
		 boolean expposReportsCashReportsCashDiscrepancyMenu      = true;
		
		
		
		 System.out.println("***************************************checkCashReportsMenuInPosReReportsMenu***************************************");
		 
		 System.out.println("posReportsCashReportsCashCollectionsMenu     : "+actposReportsCashReportsCashCollectionsMenu  +" Value Expected : "+expposReportsCashReportsCashCollectionsMenu);
		 System.out.println("posReportsCashReportsCashDiscrepancyMenu     : "+actposReportsCashReportsCashDiscrepancyMenu  +" Value Expected : "+expposReportsCashReportsCashDiscrepancyMenu);
		
		if(actposReportsCashReportsCashCollectionsMenu==expposReportsCashReportsCashCollectionsMenu
				&& actposReportsCashReportsCashDiscrepancyMenu==expposReportsCashReportsCashDiscrepancyMenu)
				
	    {
			excelReader.setCellData(xlfile, "Sheet1", 150, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 150, 9, resFail);
			return false;
		}
	}
		    
				    
    public static boolean checkStockReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsStockReportsMenu));
				
		posReportsStockReportsMenu.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsStockReportsStockInAndOutMenu));
				
		
		boolean actposReportsStockReportsStockInAndOutMenu         = posReportsStockReportsStockInAndOutMenu.isDisplayed();
		 boolean actposReportsStockReportsStockStatusByUutletMenu  = posReportsStockReportsStockStatusByUutletMenu.isDisplayed();
		 
		
		 
		 // Expected
		 
		 boolean expposReportsStockReportsStockInAndOutMenu        = true;
		 boolean expposReportsStockReportsStockStatusByUutletMenu  = true;
		
		
		
		 System.out.println("***************************************checkStockReportsMenuInPosReReportsMenu***************************************");
		 
		 System.out.println("posReportsStockReportsStockInAndOutMenu     : "+actposReportsStockReportsStockInAndOutMenu  +" Value Expected : "+expposReportsStockReportsStockInAndOutMenu);
		 System.out.println("posReportsStockReportsStockStatusByUutletMenu     : "+actposReportsStockReportsStockStatusByUutletMenu  +" Value Expected : "+expposReportsStockReportsStockStatusByUutletMenu);
		
		if(actposReportsStockReportsStockInAndOutMenu==expposReportsStockReportsStockInAndOutMenu
				&& actposReportsStockReportsStockStatusByUutletMenu==expposReportsStockReportsStockStatusByUutletMenu)
				
		{
			excelReader.setCellData(xlfile, "Sheet1", 151, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 151, 9, resFail);
			return false;
		}
	}
				    
				    

			    
	public static boolean checkPreodicSalesReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsPeriodicSalesReportsMenu));
					
		posReportsPeriodicSalesReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsPeriodicSalesReportsHourlySalesByOutlet));
			
		
		 boolean actposReportsPeriodicSalesReportsHourlySalesByOutlet       = posReportsPeriodicSalesReportsHourlySalesByOutlet.isDisplayed();
		 boolean actposSReportsPeriodicSalesReportsDailySalesByOutlet       = posSReportsPeriodicSalesReportsDailySalesByOutlet.isDisplayed();
		 boolean actposReportsPeriodicSalesReportsDailySalesByBankByOutlet  = posReportsPeriodicSalesReportsDailySalesByBankByOutlet.isDisplayed();
		 boolean actposReportsPeriodicSalesReportsMonthlySalesByOutlet      = posReportsPeriodicSalesReportsMonthlySalesByOutlet.isDisplayed();
		
		 
		 // Expected
		 
		 boolean expposReportsPeriodicSalesReportsHourlySalesByOutlet       = true;
		 boolean expposSReportsPeriodicSalesReportsDailySalesByOutlet       = true;
		 boolean expposReportsPeriodicSalesReportsDailySalesByBankByOutlet  = true;
		 boolean expposReportsPeriodicSalesReportsMonthlySalesByOutlet      = true;
		
		
		 System.out.println("*******************checkPreodicSalesReportsMenuInPosReReportsMenu**************************");
		 
		 System.out.println("posReportsPeriodicSalesReportsHourlySalesByOutlet      : "+actposReportsPeriodicSalesReportsHourlySalesByOutlet      +" Value Expected : "+expposReportsPeriodicSalesReportsHourlySalesByOutlet);
		 System.out.println("posSReportsPeriodicSalesReportsDailySalesByOutlet      : "+actposSReportsPeriodicSalesReportsDailySalesByOutlet      +" Value Expected : "+expposSReportsPeriodicSalesReportsDailySalesByOutlet);
		 System.out.println("posReportsPeriodicSalesReportsDailySalesByBankByOutlet : "+actposReportsPeriodicSalesReportsDailySalesByBankByOutlet +" Value Expected : "+expposReportsPeriodicSalesReportsDailySalesByBankByOutlet);
		 System.out.println("posReportsPeriodicSalesReportsMonthlySalesByOutlet     : "+actposReportsPeriodicSalesReportsMonthlySalesByOutlet     +" Value Expected : "+expposReportsPeriodicSalesReportsMonthlySalesByOutlet);
	
		if(actposReportsPeriodicSalesReportsHourlySalesByOutlet==expposReportsPeriodicSalesReportsHourlySalesByOutlet
				&& actposSReportsPeriodicSalesReportsDailySalesByOutlet==expposSReportsPeriodicSalesReportsDailySalesByOutlet
				&& actposReportsPeriodicSalesReportsDailySalesByBankByOutlet==expposReportsPeriodicSalesReportsDailySalesByBankByOutlet
				&& actposReportsPeriodicSalesReportsMonthlySalesByOutlet==expposReportsPeriodicSalesReportsMonthlySalesByOutlet)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 152, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 152, 9, resFail);
			return false;
		}
	  }	
	 
		 
		 
			  
			    			 
	public static boolean checkLastYearCompraisonReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsLastYearComparisonReportsMenu));
		posReportsLastYearComparisonReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsLastYearComparisonReportsWorstOutletsPerformanceMenu));
				
		 boolean actposReportsLastYearComparisonReportsSalesInfoByQuantityMenu           = posReportsLastYearComparisonReportsSalesInfoByQuantityMenu.isDisplayed();
		 boolean actposReportsLastYearComparisonReportsSalesInfoByAmountMenu             = posReportsLastYearComparisonReportsSalesInfoByAmountMenu.isDisplayed();
		 boolean actposReportsLastYearComparisonReportsSalesInfoByQuantityAndAmountMenu  = posReportsLastYearComparisonReportsSalesInfoByQuantityAndAmountMenu.isDisplayed();
		 boolean actposReportsLastYearComparisonReportsBestOutletsPerformanceMenu        = posReportsLastYearComparisonReportsBestOutletsPerformanceMenu.isDisplayed();
		 boolean actposReportsLastYearComparisonReportsWorstOutletsPerformanceMenu       = posReportsLastYearComparisonReportsWorstOutletsPerformanceMenu.isDisplayed();
		
		 
		 // Expected
		 
		 boolean expposReportsLastYearComparisonReportsSalesInfoByQuantityMenu           = true;
		 boolean expposReportsLastYearComparisonReportsSalesInfoByAmountMenu             = true;
		 boolean expposReportsLastYearComparisonReportsSalesInfoByQuantityAndAmountMenu  = true;
		 boolean expposReportsLastYearComparisonReportsBestOutletsPerformanceMenu        = true;
		 boolean expposReportsLastYearComparisonReportsWorstOutletsPerformanceMenu       = true;
		
		
		 System.out.println("***********************checkLastYearCompraisonReportsMenuInPosReReportsMenu****************");
		 
		 System.out.println("posReportsLastYearComparisonReportsSalesInfoByQuantityMenu      : "+actposReportsLastYearComparisonReportsSalesInfoByQuantityMenu      +" Value Expected : "+expposReportsLastYearComparisonReportsSalesInfoByQuantityMenu);
		 System.out.println("posReportsLastYearComparisonReportsSalesInfoByAmountMenu      : "+actposReportsLastYearComparisonReportsSalesInfoByAmountMenu      +" Value Expected : "+expposReportsLastYearComparisonReportsSalesInfoByAmountMenu);
		 System.out.println("posReportsLastYearComparisonReportsSalesInfoByQuantityAndAmountMenu : "+actposReportsLastYearComparisonReportsSalesInfoByQuantityAndAmountMenu +" Value Expected : "+expposReportsLastYearComparisonReportsSalesInfoByQuantityAndAmountMenu);
		 System.out.println("posReportsLastYearComparisonReportsBestOutletsPerformanceMenu     : "+actposReportsLastYearComparisonReportsBestOutletsPerformanceMenu     +" Value Expected : "+expposReportsLastYearComparisonReportsBestOutletsPerformanceMenu);
		 System.out.println("posReportsLastYearComparisonReportsWorstOutletsPerformanceMenu     : "+actposReportsLastYearComparisonReportsWorstOutletsPerformanceMenu     +" Value Expected : "+expposReportsLastYearComparisonReportsWorstOutletsPerformanceMenu);
	
		if(actposReportsLastYearComparisonReportsSalesInfoByQuantityMenu==expposReportsLastYearComparisonReportsSalesInfoByQuantityMenu
				&& actposReportsLastYearComparisonReportsSalesInfoByAmountMenu==expposReportsLastYearComparisonReportsSalesInfoByAmountMenu
				&& actposReportsLastYearComparisonReportsSalesInfoByQuantityAndAmountMenu==expposReportsLastYearComparisonReportsSalesInfoByQuantityAndAmountMenu
				&& actposReportsLastYearComparisonReportsBestOutletsPerformanceMenu==expposReportsLastYearComparisonReportsBestOutletsPerformanceMenu
				&& actposReportsLastYearComparisonReportsWorstOutletsPerformanceMenu==expposReportsLastYearComparisonReportsWorstOutletsPerformanceMenu)
	
		{
		    excelReader.setCellData(xlfile, "Sheet1", 153, 9, resPass);
		    return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 153, 9, resFail);
			return false;
		}
	}	
		
			
			
			    		 
		    
	public static boolean checkMiscellaneousReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		  excelReader=new ExcelReader(POJOUtility.getExcelPath());
		  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsMiscellaneousReportsMenu));
		  posReportsMiscellaneousReportsMenu.click();
	
										
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsMiscelsReportsEODkSummaryReportMenu));
							
	     boolean actposReportsMiscelsReportsXReadingMenu           = posReportsMiscelsReportsXReadingMenu.isDisplayed();
		 boolean actposReportsMiscelsReportsOutletStatusMenu       = posReportsMiscelsReportsOutletStatusMenu.isDisplayed();
		 boolean actposReportsMiscelsReportsEODkSummaryReportMenu  = posReportsMiscelsReportsEODkSummaryReportMenu.isDisplayed();
		
		
		 
		 // Expected
		 
		 boolean expposReportsMiscelsReportsXReadingMenu           = true;
		 boolean expposReportsMiscelsReportsOutletStatusMenu       = true;
		 boolean expposReportsMiscelsReportsEODkSummaryReportMenu  = true;
	
		
		
		 System.out.println("******************checkMiscellaneousReportsMenuInPosReReportsMenu*************");
		 
		 System.out.println("posReportsMiscelsReportsXReadingMenu          : "+actposReportsMiscelsReportsXReadingMenu          +" Value Expected : "+expposReportsMiscelsReportsXReadingMenu);
		 System.out.println("posReportsMiscelsReportsOutletStatusMenu      : "+actposReportsMiscelsReportsOutletStatusMenu      +" Value Expected : "+expposReportsMiscelsReportsOutletStatusMenu);
		 System.out.println("posReportsMiscelsReportsEODkSummaryReportMenu : "+actposReportsMiscelsReportsEODkSummaryReportMenu +" Value Expected : "+expposReportsMiscelsReportsEODkSummaryReportMenu);
		
	
		 if(actposReportsMiscelsReportsXReadingMenu==expposReportsMiscelsReportsXReadingMenu
				&& actposReportsMiscelsReportsOutletStatusMenu==expposReportsMiscelsReportsOutletStatusMenu
				&& actposReportsMiscelsReportsEODkSummaryReportMenu==expposReportsMiscelsReportsEODkSummaryReportMenu)
	  
	
		 {
			 excelReader.setCellData(xlfile, "Sheet1", 154, 9, resPass);
			 return true;
		 }
		 else
		 {
			 excelReader.setCellData(xlfile, "Sheet1", 154, 9, resFail);
			 return false;
		 }
	}	    
			    
			
		
			    
	public static boolean checkResturantReportsMenuInPosReReportsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsRestaurantReportsMenu));
								
		posReportsRestaurantReportsMenu.click();
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReportsRestaurantReportsClerkWiseSalesMenu));
						
		
		 boolean actposReportsRestaurantReportsDailySalesMenu             = posReportsRestaurantReportsDailySalesMenu.isDisplayed();
		 boolean actposReportsRestaurantReportsSalesByMenuCategoryMenu    = posReportsRestaurantReportsSalesByMenuCategoryMenu.isDisplayed();
		 boolean actposReportsRestaurantReportsDiscountByWaiterMenu       = posReportsRestaurantReportsDiscountByWaiterMenu.isDisplayed();
		 boolean actposReportsRestaurantReportsClerkWiseSalesMenu         = posReportsRestaurantReportsClerkWiseSalesMenu.isDisplayed();
		
		 
		 // Expected
		 
		 boolean expposReportsRestaurantReportsDailySalesMenu             = true;
		 boolean expposReportsRestaurantReportsSalesByMenuCategoryMenu    = true;
		 boolean expposReportsRestaurantReportsDiscountByWaiterMenu       = true;
		 boolean expposReportsRestaurantReportsClerkWiseSalesMenu         = true;
		
		
		 System.out.println("****************checkResturantReportsMenuInPosReReportsMenu***********************");
		 
		 System.out.println("posReportsRestaurantReportsDailySalesMenu            : "+actposReportsRestaurantReportsDailySalesMenu           +" Value Expected : "+expposReportsRestaurantReportsDailySalesMenu);
		 System.out.println("posReportsRestaurantReportsSalesByMenuCategoryMenu   : "+actposReportsRestaurantReportsSalesByMenuCategoryMenu  +" Value Expected : "+expposReportsRestaurantReportsSalesByMenuCategoryMenu);
		 System.out.println("posReportsRestaurantReportsDiscountByWaiterMenu      : "+actposReportsRestaurantReportsDiscountByWaiterMenu     +" Value Expected : "+expposReportsRestaurantReportsDiscountByWaiterMenu);
		 System.out.println("posReportsRestaurantReportsClerkWiseSalesMenu        : "+actposReportsRestaurantReportsClerkWiseSalesMenu       +" Value Expected : "+expposReportsRestaurantReportsClerkWiseSalesMenu);
		
		if(actposReportsRestaurantReportsDailySalesMenu==expposReportsRestaurantReportsDailySalesMenu
				&& actposReportsRestaurantReportsSalesByMenuCategoryMenu==expposReportsRestaurantReportsSalesByMenuCategoryMenu
				&& actposReportsRestaurantReportsDiscountByWaiterMenu==expposReportsRestaurantReportsDiscountByWaiterMenu
				&& actposReportsRestaurantReportsClerkWiseSalesMenu==expposReportsRestaurantReportsClerkWiseSalesMenu)
		
		{
		    excelReader.setCellData(xlfile, "Sheet1", 155, 9, resPass);
		    return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 155, 9, resFail);
			return false;
		}
	}	    
			
				    
	public static boolean checkUtilitiesMenuInPointOfSaleMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
								
		pointOfSaleUtilitiesMenu.click();
		
		Thread.sleep(3000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
			
		 boolean actposUtilitiesPreferencesMenu             = posUtilitiesPreferencesMenu.isDisplayed();
		 boolean actposUtilitiesGiftVoucherSaleMenu         = posUtilitiesGiftVoucherSaleMenu.isDisplayed();
		 boolean actposUtilitiesGiftVoucherTransferMenu     = posUtilitiesGiftVoucherTransferMenu.isDisplayed();
		 boolean actposUtilitiesDiscountVoucherTransferMenu = posUtilitiesDiscountVoucherTransferMenu.isDisplayed();
		 boolean actposUtilitiesCreditNoteMenu              = posUtilitiesCreditNoteMenu.isDisplayed();
		 boolean actposUtilitiesMessageBroadcastingMenu     = posUtilitiesMessageBroadcastingMenu.isDisplayed();
		 boolean actposUtilitiesDayEndMenu                  = posUtilitiesDayEndMenu.isDisplayed();
		 boolean actposUtilitiesReprintDayEndMenu           = posUtilitiesReprintDayEndMenu.isDisplayed();
		 
		 // Expected
		 
		 boolean expposUtilitiesPreferencesMenu             = true;
		 boolean expposUtilitiesGiftVoucherSaleMenu         = true;
		 boolean expposUtilitiesGiftVoucherTransferMenu     = true;
		 boolean expposUtilitiesDiscountVoucherTransferMenu = true;
		 boolean expposUtilitiesCreditNoteMenu              = true;
		 boolean expposUtilitiesMessageBroadcastingMenu     = true;
		 boolean expposUtilitiesDayEndMenu                  = true;
		 boolean expposUtilitiesReprintDayEndMenu           = true;
		
		 System.out.println("***************************************checkUtilitiesMenuInPointOfSaleMenu***************************************");
		 
		 System.out.println("posUtilitiesPreferencesMenu             : "+actposUtilitiesPreferencesMenu              +" Value Expected : "+expposUtilitiesPreferencesMenu);
		 System.out.println("posUtilitiesGiftVoucherSaleMenu         : "+actposUtilitiesGiftVoucherSaleMenu          +" Value Expected : "+expposUtilitiesGiftVoucherSaleMenu);
		 System.out.println("posUtilitiesGiftVoucherTransferMenu     : "+actposUtilitiesGiftVoucherTransferMenu      +" Value Expected : "+expposUtilitiesGiftVoucherTransferMenu);
		 System.out.println("posUtilitiesDiscountVoucherTransferMenu : "+actposUtilitiesDiscountVoucherTransferMenu  +" Value Expected : "+expposUtilitiesDiscountVoucherTransferMenu);
		 System.out.println("posUtilitiesCreditNoteMenu              : "+actposUtilitiesCreditNoteMenu               +" Value Expected : "+expposUtilitiesCreditNoteMenu);
		 System.out.println("posUtilitiesMessageBroadcastingMenu     : "+actposUtilitiesMessageBroadcastingMenu      +" Value Expected : "+expposUtilitiesMessageBroadcastingMenu);
		 System.out.println("posUtilitiesDayEndMenu                  : "+actposUtilitiesDayEndMenu                   +" Value Expected : "+expposUtilitiesDayEndMenu);
		 System.out.println("posUtilitiesReprintDayEndMenu           : "+actposUtilitiesReprintDayEndMenu            +" Value Expected : "+expposUtilitiesReprintDayEndMenu);
		 
		 
		 
		if(actposUtilitiesPreferencesMenu==expposUtilitiesPreferencesMenu
				&& actposUtilitiesGiftVoucherSaleMenu==expposUtilitiesGiftVoucherSaleMenu
				&& actposUtilitiesGiftVoucherTransferMenu==expposUtilitiesGiftVoucherTransferMenu
				&& actposUtilitiesDiscountVoucherTransferMenu==expposUtilitiesDiscountVoucherTransferMenu
				&& actposUtilitiesCreditNoteMenu==expposUtilitiesCreditNoteMenu
				&& actposUtilitiesMessageBroadcastingMenu==expposUtilitiesMessageBroadcastingMenu
				&& actposUtilitiesDayEndMenu==expposUtilitiesDayEndMenu
				&& actposUtilitiesReprintDayEndMenu==expposUtilitiesReprintDayEndMenu)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	        
		    
	
	
	
	
	// Pos/Utilities/Preferences
	
	
	@FindBy(xpath="//a[@id='GENERAL']")
	private static WebElement posGeneralBtn;
	
	@FindBy(xpath="//a[@id='AUTOMATICATIONANDVERIFICATION']")
	private static WebElement posAuthenticationAndVerificationBtn;
	
	@FindBy(xpath="//a[@id='SCHEMES']")
	private static WebElement posSchemesBtn;
	
	@FindBy(xpath="//a[@id='DRIVERANDPORT']")
	private static WebElement posDriverAndPortBtn;
	
	@FindBy(xpath="//a[@id='POLEDISPLAY']")
	private static WebElement posPoleDisplayBtn;
	
	@FindBy(xpath="//a[@id='MISCELLANEOUS']")
	private static WebElement posMiscellaneousBtn;
	
	@FindBy(xpath="//a[@id='OTHERS']")
	private static WebElement posOthersBtn;
	
	@FindBy(xpath="//a[@id='TABLEMANAGEMENT']")
	private static WebElement posTableManagementBtn;
	
	@FindBy(xpath="//a[@id='OUTLET']")
	private static WebElement posOutletBtn;
	
	@FindBy(xpath="//a[@id='PREORDER']")
	private static WebElement posPreOrderBtn;
	
	@FindBy(xpath="//a[@id='PAYMENT']")
	private static WebElement posPaymentBtn;
	
	@FindBy(xpath="//a[@id='REFUNDPOLICY']")
	private static WebElement posRefundPolicyBtn;
	
	@FindBy(xpath="//a[@id='HOMEDELIVERY']")
	private static WebElement posHomeDeliveryBtn;
	
	@FindBy(xpath="//a[@id='DAYEND']")
	private static WebElement posDayEndBtn;
	
	@FindBy(xpath="//a[@id='RESTAURANT']")
	private static WebElement posRestaurantBtn;
	
	@FindBy(xpath="//a[@id='ACCOUNT']")
	private static WebElement posAccountBtn;
	
	@FindBy(xpath="//a[@id='PRINTFORMATS']")
	private static WebElement posPrintFormatsBtn;
	
	@FindBy(xpath="//a[@id='INVENTORY']")
	private static WebElement posInventoryBtn;
	
	@FindBy(xpath="//a[@id='POSTING']")
	private static WebElement posPostingBtn;
	
	@FindBy(xpath="//ul[@id='ulPreferenceTab']/li//a")
	private static List<WebElement> posPreferenceLeftPanelList;
	
	// Pos Customization
	
	@FindBy(xpath="//label[@id='lblFooterBodyExtraFieldId_Total']")
	private static WebElement posTotalValue;
	
	@FindBy(xpath="//label[@id='lblFooterBodyExtraFieldId_1']")
	private static WebElement posDiscountValue;
	
	@FindBy(xpath="//label[@id='lblFooterBodyExtraFieldId_6']")
	private static WebElement posVatValue;
	
	@FindBy(xpath="//span[@id='lblNett']")
	private static WebElement posNetValue;
	
	@FindBy(xpath="//thead[@id='tHeadSelectedProduct']/tr/td")
	private static List<WebElement> posTemplateGridHeaderList;
	
	public static boolean checkPosCustomizationMenuInPointOfSaleMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getDriver().navigate().refresh();
		
		Thread.sleep(8000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
		pointOfSaleMainScreenMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleCustomization));
		pointOfSaleCustomization.click();
		
		Thread.sleep(2000);
			
		boolean acttemplateComboBox        = templateComboBox.isDisplayed();
		boolean actexportBtn               = exportBtn.isDisplayed();
		boolean actimportBtn               = importBtn.isDisplayed();
		boolean actribbonHomeBtn           = ribbonHomeBtn.isDisplayed();
		boolean actribbonMessagingBtn      = ribbonMessagingBtn.isDisplayed();
		boolean actribbonMemberBtn         = ribbonMemberBtn.isDisplayed();
		boolean actribbonSalesBtn          = ribbonSalesBtn.isDisplayed();
		boolean actribbonEmployeeBtn       = ribbonEmployeeBtn.isDisplayed();
		boolean actribbonCustomizeBtn      = ribbonCustomizeBtn.isDisplayed();
		boolean actribbonPickOutPutBtn     = ribbonPickOutPutBtn.isDisplayed();
		boolean actscanBarCodeTxt          = scanBarCodeTxt.isDisplayed();
		boolean actsearchTxt               = searchTxt.isDisplayed();
		
		// Expected
		 
		boolean exptemplateComboBox        = templateComboBox.isDisplayed();
		boolean expexportBtn               = exportBtn.isDisplayed();
		boolean expimportBtn               = importBtn.isDisplayed();
		boolean expribbonHomeBtn           = ribbonHomeBtn.isDisplayed();
		boolean expribbonMessagingBtn      = ribbonMessagingBtn.isDisplayed();
		boolean expribbonMemberBtn         = ribbonMemberBtn.isDisplayed();
		boolean expribbonSalesBtn          = ribbonSalesBtn.isDisplayed();
		boolean expribbonEmployeeBtn       = ribbonEmployeeBtn.isDisplayed();
		boolean expribbonCustomizeBtn      = ribbonCustomizeBtn.isDisplayed();
		boolean expribbonPickOutPutBtn     = ribbonPickOutPutBtn.isDisplayed();
		boolean expscanBarCodeTxt          = scanBarCodeTxt.isDisplayed();
		boolean expsearchTxt               = searchTxt.isDisplayed();
			
		System.out.println("***************************************checkPosCustomizationMenuInPointOfSaleMenu***************************************");
		 
		System.out.println("templateComboBox      : "+acttemplateComboBox      +" Value Expected : "+exptemplateComboBox);
		System.out.println("exportBtn             : "+actexportBtn             +" Value Expected : "+expexportBtn);
		System.out.println("importBtn             : "+actimportBtn             +" Value Expected : "+expimportBtn);
		System.out.println("ribbonHomeBtn         : "+actribbonHomeBtn         +" Value Expected : "+expribbonHomeBtn);
		System.out.println("ribbonMessagingBtn    : "+actribbonMessagingBtn    +" Value Expected : "+expribbonMessagingBtn);
		System.out.println("ribbonMemberBtn       : "+actribbonMemberBtn       +" Value Expected : "+expribbonMemberBtn);
		System.out.println("ribbonSalesBtn        : "+actribbonSalesBtn        +" Value Expected : "+expribbonSalesBtn);
		System.out.println("ribbonEmployeeBtn     : "+actribbonEmployeeBtn     +" Value Expected : "+expribbonEmployeeBtn);
		System.out.println("ribbonCustomizeBtn    : "+actribbonCustomizeBtn    +" Value Expected : "+expribbonCustomizeBtn);
		System.out.println("ribbonPickOutPutBtn   : "+actribbonPickOutPutBtn   +" Value Expected : "+expribbonPickOutPutBtn);
		System.out.println("scanBarCodeTxt        : "+actscanBarCodeTxt        +" Value Expected : "+expscanBarCodeTxt);
		System.out.println("searchTxt             : "+actsearchTxt             +" Value Expected : "+expsearchTxt);
		
		
		if(acttemplateComboBox==exptemplateComboBox && actexportBtn==expexportBtn && actimportBtn==expimportBtn && actribbonHomeBtn==expribbonHomeBtn
				&& actribbonMessagingBtn==expribbonMessagingBtn && actribbonMemberBtn==expribbonMemberBtn && actribbonSalesBtn==expribbonSalesBtn
				&& actribbonEmployeeBtn==expribbonEmployeeBtn && actribbonCustomizeBtn==expribbonCustomizeBtn && actribbonPickOutPutBtn==expribbonPickOutPutBtn
				&& actscanBarCodeTxt==expscanBarCodeTxt && actsearchTxt==expsearchTxt)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	@FindBy(xpath="//div[@id='divFooterPanel']")
	private static WebElement posFooterPanel;
	
	@FindBy(xpath="//span[@class='icon-save icon-font8']")
	private static WebElement templateSaveBtn;
	
	public static boolean checkPosCustomizationScreenOnCreatingTemplate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(templateComboBox));
		templateComboBox.click();
		templateComboBox.sendKeys("Create Template");
		Thread.sleep(3000);
		templateComboBox.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(templateSaveBtn));
		templateSaveBtn.click();
		
		toastMessageCloseBtn.click();
		
		Thread.sleep(2000);
		
		int posTemplateGridHeaderListCount = posTemplateGridHeaderList.size();
		
		ArrayList<String> posTemplateGridHeaderListArray = new ArrayList<String>();
		
		for(int i=0;i<posTemplateGridHeaderListCount;i++)
		{
			String data = posTemplateGridHeaderList.get(i).getText();
			
			posTemplateGridHeaderListArray.add(data);
		}
		
		String actposTemplateGridHeaderList = posTemplateGridHeaderListArray.toString();
		String expposTemplateGridHeaderList = "[, Sl.No, ItemCode, Item, Unit, Quantity, Rate, Gross, Discount, VAT, Nett, Batch, Narration, RMA, Salesman, ]";
		
		System.out.println("actposTemplateGridHeaderList : "+actposTemplateGridHeaderList);
		System.out.println("expposTemplateGridHeaderList : "+expposTemplateGridHeaderList);
		
		String actposTotalValue    = posTotalValue.getText();
		//String actposDiscountValue = posDiscountValue.getText();
		//String actposVatValue      = posVatValue.getText();
		String actposNetValue      = posNetValue.getText();
		
		boolean actFootertCustomizeBtn = FootertCustomizeBtn.isDisplayed();
		boolean actposFooterPanel      = posFooterPanel.isDisplayed();
			
		String expposTotalValue    = "0";
		//String expposDiscountValue = "0";
		//String expposVatValue      = "0";
		String expposNetValue      = "0";
		
		boolean expFootertCustomizeBtn = true;
		boolean expposFooterPanel      = true;
			
		System.out.println("***************************************checkPosCustomizationScreenOnCreatingTemplate***************************************");
		 
		System.out.println("posTotalValue      : "+actposTotalValue      +" Value Expected : "+expposTotalValue);
		//System.out.println("posDiscountValue   : "+actposDiscountValue   +" Value Expected : "+expposDiscountValue);
		//System.out.println("posVatValue        : "+actposVatValue        +" Value Expected : "+expposVatValue);
		System.out.println("posNetValue        : "+actposNetValue        +" Value Expected : "+expposNetValue);
		
		System.out.println("FootertCustomizeBtn : "+actFootertCustomizeBtn+" Value Expected : "+expFootertCustomizeBtn);
		System.out.println("posFooterPanel      : "+actposFooterPanel     +" Value Expected : "+expposFooterPanel);
		
		
		if(actposTemplateGridHeaderList.equalsIgnoreCase(expposTemplateGridHeaderList) && actposTotalValue.equalsIgnoreCase(expposTotalValue)
				/*&& actposDiscountValue.equalsIgnoreCase(expposDiscountValue) && actposVatValue.equalsIgnoreCase(expposVatValue)*/ 
				&& actposNetValue.equalsIgnoreCase(expposNetValue) && actFootertCustomizeBtn==expFootertCustomizeBtn
				&& actposFooterPanel==expposFooterPanel)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	
	@FindBy(xpath="//span[contains(text(),'Item')]//i[@class='icon icon-expand']")
	private static WebElement itemExpandBtn;
	
	@FindBy(xpath="//span[contains(text(),'Transaction')]//i[@class='icon icon-expand']")
	private static WebElement transactionExpandBtn;
	
	@FindBy(xpath="//span[contains(text(),'Tasks')]//i[@class='icon icon-expand']")
	private static WebElement tasksExpandBtn;
	
	@FindBy(xpath="//span[contains(text(),'Sales Return')]//i[@class='icon icon-expand']")
	private static WebElement salesReturnsExpandBtn;
	
	@FindBy(xpath="//span[contains(text(),'Functions')]//i[@class='icon icon-expand']")
	private static WebElement functionsExpandBtn;
	
	@FindBy(xpath="//span[6]")
	private static WebElement employeeExpandBtn;
	
	@FindBy(xpath="//span[contains(text(),'Employee(for Schemes)')]//i[@class='icon icon-expand']")
	private static WebElement employeeForSchemesExpandBtn;
	
	
	
	public static boolean checkPosAddCustomizationAddShortcutsAndAddGroup() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(FootertCustomizeBtn));
		FootertCustomizeBtn.click();
		
		boolean actcustomizeAddShortcutBtn = customizeAddShortcutBtn.isDisplayed();
		boolean actcustomizeAddGropupBtn   = customizeAddGropupBtn.isDisplayed();
		
		boolean expcustomizeAddShortcutBtn = customizeAddShortcutBtn.isDisplayed();
		boolean expcustomizeAddGropupBtn   = customizeAddGropupBtn.isDisplayed();
		
		System.out.println("customizeAddShortcutBtn : "+actcustomizeAddShortcutBtn +" Value Expected : "+expcustomizeAddShortcutBtn);
		System.out.println("customizeAddGropupBtn   : "+actcustomizeAddGropupBtn   +" Value Expected : "+expcustomizeAddGropupBtn);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeAddShortcutBtn));
		customizeAddShortcutBtn.click();
		
		Thread.sleep(3000);
		
		
		boolean actitemExpandBtn               = itemExpandBtn.isDisplayed();
		boolean acttransactionExpandBtn        = transactionExpandBtn.isDisplayed();
		boolean acttasksExpandBtn              = tasksExpandBtn.isDisplayed();
		boolean actsalesReturnsExpandBtn       = salesReturnsExpandBtn.isDisplayed();
		boolean actfunctionsExpandBtn          = functionsExpandBtn.isDisplayed();
		boolean actemployeeExpandBtn           = employeeExpandBtn.isDisplayed();
		boolean actemployeeForSchemesExpandBtn = employeeForSchemesExpandBtn.isDisplayed();
		
		boolean actshortcutCustomizeHeader       = shortcutCustomizeHeader.isDisplayed();
		boolean actshortcutCustomizationCloseBtn = shortcutCustomizationCloseBtn.isDisplayed();
		boolean acthotKeyDropDown                = hotKeyDropDown.isDisplayed();
		boolean actcharacterDropDown             = characterDropDown.isDisplayed();
		boolean actcaption1Txt                   = caption1Txt.isDisplayed();
		boolean actcaption2Txt                   = caption2Txt.isDisplayed();
		boolean actcaption3Txt                   = caption3Txt.isDisplayed();
		boolean actfontStyleTxt                  = fontStyleTxt.isDisplayed();
		boolean actbackGroundChooseFileBtn       = backGroundChooseFileBtn.isDisplayed();
		boolean actaddBtn                        = addBtn.isDisplayed();
		boolean actshortcutCustomizeUpdateBtn    = shortcutCustomizeUpdateBtn.isDisplayed();
		boolean actshortcutCustomizeCancelBtn    = shortcutCustomizeCancelBtn.isDisplayed();
		boolean actshortcutCustomizeSaveBtn      = shortcutCustomizeSaveBtn.isDisplayed();
		boolean actshortcutCustomizeCloseBtn     = shortcutCustomizeCloseBtn.isDisplayed();
		
		boolean expitemExpandBtn               = true;
		boolean exptransactionExpandBtn        = true;
		boolean exptasksExpandBtn              = true;
		boolean expsalesReturnsExpandBtn       = true;
		boolean expfunctionsExpandBtn          = true;
		boolean expemployeeExpandBtn           = true;
		boolean expemployeeForSchemesExpandBtn = true;
		
		boolean expshortcutCustomizeHeader       = true;
		boolean expshortcutCustomizationCloseBtn = true;
		boolean exphotKeyDropDown                = true;
		boolean expcharacterDropDown             = true;
		boolean expcaption1Txt                   = true;
		boolean expcaption2Txt                   = true;
		boolean expcaption3Txt                   = true;
		boolean expfontStyleTxt                  = true;
		boolean expbackGroundChooseFileBtn       = true;
		boolean expaddBtn                        = true;
		boolean expshortcutCustomizeUpdateBtn    = true;
		boolean expshortcutCustomizeCancelBtn    = true;
		boolean expshortcutCustomizeSaveBtn      = true;
		boolean expshortcutCustomizeCloseBtn     = true;
		
		System.out.println("itemExpandBtn               : "+actitemExpandBtn                +" Value Expected : "+expitemExpandBtn);
		System.out.println("transactionExpandBtn        : "+acttransactionExpandBtn         +" Value Expected : "+exptransactionExpandBtn);
		System.out.println("tasksExpandBtn              : "+acttasksExpandBtn               +" Value Expected : "+exptasksExpandBtn);
		System.out.println("salesReturnsExpandBtn       : "+actsalesReturnsExpandBtn        +" Value Expected : "+expsalesReturnsExpandBtn);
		System.out.println("functionsExpandBtn          : "+actfunctionsExpandBtn           +" Value Expected : "+expfunctionsExpandBtn);
		System.out.println("employeeExpandBtn           : "+actemployeeExpandBtn            +" Value Expected : "+expemployeeExpandBtn);
		System.out.println("employeeForSchemesExpandBtn : "+actemployeeForSchemesExpandBtn  +" Value Expected : "+expemployeeForSchemesExpandBtn);
		
		System.out.println("shortcutCustomizeHeader       : "+actshortcutCustomizeHeader        +" Value Expected : "+expshortcutCustomizeHeader);
		System.out.println("shortcutCustomizationCloseBtn : "+actshortcutCustomizationCloseBtn  +" Value Expected : "+expshortcutCustomizationCloseBtn);
		System.out.println("hotKeyDropDown                : "+acthotKeyDropDown                 +" Value Expected : "+exphotKeyDropDown);
		System.out.println("characterDropDown             : "+actcharacterDropDown              +" Value Expected : "+expcharacterDropDown);
		System.out.println("caption1Txt                   : "+actcaption1Txt                    +" Value Expected : "+expcaption1Txt);
		System.out.println("caption2Txt                   : "+actcaption2Txt                    +" Value Expected : "+expcaption2Txt);
		System.out.println("caption3Txt                   : "+actcaption3Txt                    +" Value Expected : "+expcaption3Txt);
		System.out.println("fontStyleTxt                  : "+actfontStyleTxt                   +" Value Expected : "+expfontStyleTxt);
		System.out.println("backGroundChooseFileBtn       : "+actbackGroundChooseFileBtn        +" Value Expected : "+expbackGroundChooseFileBtn);
		System.out.println("addBtn                        : "+actaddBtn                         +" Value Expected : "+expaddBtn);
		System.out.println("shortcutCustomizeUpdateBtn    : "+actshortcutCustomizeUpdateBtn     +" Value Expected : "+expshortcutCustomizeUpdateBtn);
		System.out.println("shortcutCustomizeCancelBtn    : "+actshortcutCustomizeCancelBtn     +" Value Expected : "+expshortcutCustomizeCancelBtn);
		System.out.println("shortcutCustomizeSaveBtn      : "+actshortcutCustomizeSaveBtn       +" Value Expected : "+expshortcutCustomizeSaveBtn);
		System.out.println("shortcutCustomizeCloseBtn     : "+actshortcutCustomizeCloseBtn      +" Value Expected : "+expshortcutCustomizeCloseBtn);
		
		
		int shortcutCustomizeLeftMenuListCount = shortcutCustomizeLeftMenuList.size();
		
		ArrayList<String> shortcutCustomizeLeftMenuListArray = new ArrayList<String>();
		
		for(int i=0;i<shortcutCustomizeLeftMenuListCount;i++)
		{
			String data = shortcutCustomizeLeftMenuList.get(i).getText();
			
			shortcutCustomizeLeftMenuListArray.add(data);
			
		}
		
		String actshortcutCustomizeLeftMenuList = shortcutCustomizeLeftMenuListArray.toString();
		String expshortcutCustomizeLeftMenuList = "[  Member, , , , , , , , , , ,   Item, , , , , , , , , , , , , , ,   Transaction, , , , , , , , , , , , , , , , , , , , , ,   Tasks, , , , , , , , , , , ,   Sales Return, , , ,   Functions, , , , , , , , , , , , , , , ,   Employee, , , , , ,   Employee(for Schemes), , , , ]";
		
		System.out.println("actshortcutCustomizeLeftMenuList : "+actshortcutCustomizeLeftMenuList);
		System.out.println("expshortcutCustomizeLeftMenuList : "+expshortcutCustomizeLeftMenuList);
		
		int shortcutCustomizeHeaderListCount = shortcutCustomizeHeaderList.size();
		
		ArrayList<String> shortcutCustomizeHeaderListArray = new ArrayList<String>();
		
		for(int i=0;i<shortcutCustomizeHeaderListCount;i++)
		{
			String data = shortcutCustomizeHeaderList.get(i).getText();
			
			shortcutCustomizeHeaderListArray.add(data);
			
		}
		
		String actshortcutCustomizeHeaderList = shortcutCustomizeHeaderListArray.toString();
		String expshortcutCustomizeHeaderList = "[, Shortcut, Hot Key, Character, Caption 1, Caption 2, Caption 3, Font Style, Background Image]";
		
		System.out.println("actshortcutCustomizeHeaderList : "+actshortcutCustomizeHeaderList);
		System.out.println("expshortcutCustomizeHeaderList : "+expshortcutCustomizeHeaderList);
		
		
		
		if(actitemExpandBtn==expitemExpandBtn && acttransactionExpandBtn==exptransactionExpandBtn && acttasksExpandBtn==exptasksExpandBtn
				&& actsalesReturnsExpandBtn==expsalesReturnsExpandBtn && actfunctionsExpandBtn==expfunctionsExpandBtn 
				&& actemployeeExpandBtn==expemployeeExpandBtn && actemployeeForSchemesExpandBtn==expemployeeForSchemesExpandBtn
				
				&& actshortcutCustomizeHeader==expshortcutCustomizeHeader && actshortcutCustomizationCloseBtn==actshortcutCustomizationCloseBtn
				&& acthotKeyDropDown==exphotKeyDropDown && actcharacterDropDown==expcharacterDropDown
				&& actcaption1Txt==expcaption1Txt && actcaption2Txt==expcaption2Txt
				&& actcaption3Txt==expcaption3Txt && actfontStyleTxt==expfontStyleTxt
				&& actbackGroundChooseFileBtn==expbackGroundChooseFileBtn && actaddBtn==expaddBtn
				&& actshortcutCustomizeUpdateBtn==expshortcutCustomizeUpdateBtn && actshortcutCustomizeCancelBtn==expshortcutCustomizeCancelBtn
				&& actshortcutCustomizeSaveBtn==expshortcutCustomizeSaveBtn && actshortcutCustomizeCloseBtn==expshortcutCustomizeCloseBtn
				&& actshortcutCustomizeLeftMenuList.equalsIgnoreCase(expshortcutCustomizeLeftMenuList) && actshortcutCustomizeHeaderList.equalsIgnoreCase(expshortcutCustomizeHeaderList))
			
		{	
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	
	public static boolean checkAddingShortCutToCustomizationPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		itemExpandBtn.click();
		
		int shortcutCustomizeLeftMenuListCount = shortcutCustomizeLeftMenuList.size();
		
		
		for(int i=0;i<shortcutCustomizeLeftMenuListCount;i++)
		{
			String data = shortcutCustomizeLeftMenuList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Item by Code"))
			{
				shortcutCustomizeLeftMenuList.get(i).click();
				
				break;
			}
			
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hotKeyDropDown));
		Select hotKeyDropDownSelect = new Select(hotKeyDropDown);
		hotKeyDropDownSelect.selectByVisibleText("Ctrl");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(characterDropDown));
		Select characterDropDownSelect = new Select(characterDropDown);
		characterDropDownSelect.selectByVisibleText("1");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		
		boolean actsc_editRow1 = sc_editRow1.isDisplayed();
		boolean expsc_editRow1 = true;
		
		System.out.println("sc_editRow1 : "+actsc_editRow1+" value Expected : "+expsc_editRow1);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
		posSaveBtn.click();
		
		String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessage = "Left Panel saved successfully. Do you want to add more?";
		
		System.out.println("pointOfSalesConfirmationBodyMessage : ."+actpointOfSalesConfirmationBodyMessage+". Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortcutCustomizeCloseBtn));
		shortcutCustomizeCloseBtn.click();
		
		if(actsc_editRow1==expsc_editRow1 && actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage))
			
		{	
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	
	@FindBy(xpath="//span[contains(@class,'glyphicon glyphicon-remove pull-right')]")
	private static WebElement serverMessageCloseBtn;
	
	
	
	
	@FindBy(xpath="//div[@class='toast-message']")
	private static WebElement toastMessage;
	
	@FindBy(xpath="//button[@class='fa fa-close toast-close-button']")
	private static WebElement toastMessageCloseBtn;
	
	
	
	public static boolean checkImpotingOfPosCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importBtn));
		importBtn.click();
		
		
		boolean actpointOfSalesConfirmationMessage = pointOfSalesConfirmationMessage.isDisplayed();
		boolean actposConfirmYesBtn                = posConfirmYesBtn.isDisplayed();
		boolean actposConfirmCancelBtn             = posConfirmCancelBtn.isDisplayed();
		
		boolean exppointOfSalesConfirmationMessage = true;
		boolean expposConfirmYesBtn                = true;
		boolean expposConfirmCancelBtn             = true;
		
		System.out.println("pointOfSalesConfirmationMessage : "+actpointOfSalesConfirmationMessage+" Value Expected : "+exppointOfSalesConfirmationMessage);
		System.out.println("posConfirmYesBtn    : "+actposConfirmYesBtn    +" Value Expected : "+expposConfirmYesBtn);
		System.out.println("posConfirmCancelBtn : "+actposConfirmCancelBtn +" Value Expected : "+expposConfirmCancelBtn);
		
		String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessage = "Are you sure to import Template?";
		
		System.out.println("pointOfSalesConfirmationBodyMessage : "+actpointOfSalesConfirmationBodyMessage+" Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(3000);
		
		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\ImportPosCustomization.exe");
		
		Thread.sleep(3000);
		
		/*String actpointOfSalesConfirmationBodyMessageImport = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessageImport = "Template name already exists, do you want to save with different name?";
		
		System.out.println("pointOfSalesConfirmationBodyMessageImport : "+actpointOfSalesConfirmationBodyMessageImport+" Value Expected : "+exppointOfSalesConfirmationBodyMessageImport);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(2000);
		
		templateTxt.click();
		templateTxt.sendKeys("Imported Template");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
		posSaveBtn.click();*/
		
		String expMessage = "Template imported successfully.";
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posCloseBtn));
		posCloseBtn.click();*/
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ribbonPickOutPutBtn));
		ribbonPickOutPutBtn.click();
		
		String actLogOutMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expLogOutMessage = "Are you sure to logout?";
		
		System.out.println("LogOutMessage : "+actLogOutMessage+" Value Expected : "+expLogOutMessage);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		
		if(actpointOfSalesConfirmationMessage==exppointOfSalesConfirmationMessage && actposConfirmYesBtn==expposConfirmYesBtn 
				&& actposConfirmCancelBtn==expposConfirmCancelBtn && actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage)
				/*&& actpointOfSalesConfirmationBodyMessageImport.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessageImport)*/
				&& actMessage.equalsIgnoreCase(expMessage) && actLogOutMessage.equalsIgnoreCase(expLogOutMessage))
			
		{	
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	
	
	@FindBy(xpath="//div[@id='divFooterPanel']/button/div")
	private static List<WebElement> posFooterPanelList;
	
	public static boolean checkSavedImportedTemplate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
						
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
		pointOfSaleMainScreenMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleCustomization));
		pointOfSaleCustomization.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(templateComboBox));
		templateComboBox.click();
		templateComboBox.sendKeys("IT");
		Thread.sleep(2000);
		templateComboBox.sendKeys(Keys.TAB);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		ArrayList<String> posFooterPanelListArray = new ArrayList<String>();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			posFooterPanelListArray.add(data);
		}
		
		String actposFooterPanelList = posFooterPanelListArray.toString();
		String expposFooterPanelList = "[F2, Item, F3, Member, F4, Transaction, F5, Tasks, F6, Sales Returns, F7, Functions, F8, PreOrder, F9, Employee, F10, Employee For Schemes]";
		
		System.out.println("actposFooterPanelList : "+actposFooterPanelList);
		System.out.println("expposFooterPanelList : "+expposFooterPanelList);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ribbonPickOutPutBtn));
		ribbonPickOutPutBtn.click();
		
		String actLogOutMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expLogOutMessage = "Are you sure to logout?";
		
		System.out.println("LogOutMessage : "+actLogOutMessage+" Value Expected : "+expLogOutMessage);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		
		if(actposFooterPanelList.equalsIgnoreCase(expposFooterPanelList) && actLogOutMessage.equalsIgnoreCase(expLogOutMessage))
			
		{	
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	
	@FindBy(xpath="//input[@id='txtTemplateName']")
	private static WebElement templateTxt;
	
	public static boolean checkPreferencesMenuInPointOfSaleMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getDriver().navigate().refresh();
		
		Thread.sleep(8000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
		pointOfSaleUtilitiesMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
		posUtilitiesPreferencesMenu.click();
		
		Thread.sleep(2000);
			
		boolean actposGeneralBtn                         = posGeneralBtn.isDisplayed();
		boolean actposAuthenticationAndVerificationBtn   = posAuthenticationAndVerificationBtn.isDisplayed();
		boolean actposSchemesBtn                         = posSchemesBtn.isDisplayed();
		boolean actposDriverAndPortBtn                   = posDriverAndPortBtn.isDisplayed();
		boolean actposPoleDisplayBtn                     = posPoleDisplayBtn.isDisplayed();
		boolean actposMiscellaneousBtn                   = posMiscellaneousBtn.isDisplayed();
		boolean actposOthersBtn                          = posOthersBtn.isDisplayed();
		boolean actposTableManagementBtn                 = posTableManagementBtn.isDisplayed();
		boolean actposOutletBtn                          = posOutletBtn.isDisplayed();
		boolean actposPreOrderBtn                        = posPreOrderBtn.isDisplayed();
		boolean actposPaymentBtn                         = posPaymentBtn.isDisplayed();
		boolean actposRefundPolicyBtn                    = posRefundPolicyBtn.isDisplayed();
		boolean actposHomeDeliveryBtn                    = posHomeDeliveryBtn.isDisplayed();
		boolean actposDayEndBtn                          = posDayEndBtn.isDisplayed();
		boolean actposRestaurantBtn                      = posRestaurantBtn.isDisplayed();
		boolean actposAccountBtn                         = posAccountBtn.isDisplayed();
		boolean actposPrintFormatsBtn                    = posPrintFormatsBtn.isDisplayed();
		boolean actposInventoryBtn                       = posInventoryBtn.isDisplayed();
		boolean actposPostingBtn                         = posPostingBtn.isDisplayed();
		
		// Expected
		 
		boolean expposGeneralBtn                         = true;
		boolean expposAuthenticationAndVerificationBtn   = true;
		boolean expposSchemesBtn                         = true;
		boolean expposDriverAndPortBtn                   = true;
		boolean expposPoleDisplayBtn                     = true;
		boolean expposMiscellaneousBtn                   = true;
		boolean expposOthersBtn                          = true;
		boolean expposTableManagementBtn                 = true;
		boolean expposOutletBtn                          = true;
		boolean expposPreOrderBtn                        = true;
		boolean expposPaymentBtn                         = true;
		boolean expposRefundPolicyBtn                    = true;
		boolean expposHomeDeliveryBtn                    = true;
		boolean expposDayEndBtn                          = true;
		boolean expposRestaurantBtn                      = true;
		boolean expposAccountBtn                         = true;
		boolean expposPrintFormatsBtn                    = true;
		boolean expposInventoryBtn                       = true;
		boolean expposPostingBtn                         = true;
			
		System.out.println("***************************************checkPreferencesMenuInPointOfSaleMenu***************************************");
		 
		System.out.println("posGeneralBtn                         : "+actposGeneralBtn                      +" Value Expected : "+expposGeneralBtn);
		System.out.println("posAuthenticationAndVerificationBtn   : "+actposAuthenticationAndVerificationBtn+" Value Expected : "+expposAuthenticationAndVerificationBtn);
		System.out.println("posSchemesBtn                         : "+actposSchemesBtn                      +" Value Expected : "+expposSchemesBtn);
		System.out.println("posDriverAndPortBtn                   : "+actposDriverAndPortBtn                +" Value Expected : "+expposDriverAndPortBtn);
		System.out.println("posPoleDisplayBtn                     : "+actposPoleDisplayBtn                  +" Value Expected : "+expposPoleDisplayBtn);
		System.out.println("posMiscellaneousBtn                   : "+actposMiscellaneousBtn                +" Value Expected : "+expposMiscellaneousBtn);
		System.out.println("posOthersBtn                          : "+actposOthersBtn                       +" Value Expected : "+expposOthersBtn);
		System.out.println("posTableManagementBtn                 : "+actposTableManagementBtn              +" Value Expected : "+expposTableManagementBtn);
		System.out.println("posOutletBtn                          : "+actposOutletBtn                       +" Value Expected : "+expposOutletBtn);
		System.out.println("posPreOrderBtn                        : "+actposPreOrderBtn                     +" Value Expected : "+expposPreOrderBtn);
		System.out.println("posPaymentBtn                         : "+actposPaymentBtn                      +" Value Expected : "+expposPaymentBtn);
		System.out.println("posRefundPolicyBtn                    : "+actposRefundPolicyBtn                 +" Value Expected : "+expposRefundPolicyBtn);
		System.out.println("posHomeDeliveryBtn                    : "+actposHomeDeliveryBtn                 +" Value Expected : "+expposHomeDeliveryBtn);
		System.out.println("posDayEndBtn                          : "+actposDayEndBtn                       +" Value Expected : "+expposDayEndBtn);
		System.out.println("posRestaurantBtn                      : "+actposRestaurantBtn                   +" Value Expected : "+expposRestaurantBtn);
		System.out.println("posAccountBtn                         : "+actposAccountBtn                      +" Value Expected : "+expposAccountBtn);
		System.out.println("posPrintFormatsBtn                    : "+actposPrintFormatsBtn                 +" Value Expected : "+expposPrintFormatsBtn);
		System.out.println("posInventoryBtn                       : "+actposInventoryBtn                    +" Value Expected : "+expposInventoryBtn);
		System.out.println("posPostingBtn                         : "+actposPostingBtn                      +" Value Expected : "+expposPostingBtn);
		
		
		if(actposGeneralBtn==expposGeneralBtn && actposAuthenticationAndVerificationBtn==expposAuthenticationAndVerificationBtn && actposSchemesBtn==expposSchemesBtn
				&& actposDriverAndPortBtn==expposDriverAndPortBtn && actposPoleDisplayBtn==expposPoleDisplayBtn && actposMiscellaneousBtn==expposMiscellaneousBtn 
				&& actposOthersBtn==expposOthersBtn && actposTableManagementBtn==expposTableManagementBtn && actposOutletBtn==expposOutletBtn && actposPreOrderBtn==expposPreOrderBtn
				&& actposPaymentBtn==expposPaymentBtn && actposRefundPolicyBtn==expposRefundPolicyBtn && actposHomeDeliveryBtn==expposHomeDeliveryBtn && actposDayEndBtn==expposDayEndBtn
				&& actposRestaurantBtn==expposRestaurantBtn && actposAccountBtn==expposAccountBtn && actposPrintFormatsBtn==expposPrintFormatsBtn
				&& actposInventoryBtn==expposInventoryBtn && actposPostingBtn==expposPostingBtn)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	@FindBy(xpath="//input[@id='chkSelectedOutletCopy']")
	private static WebElement posCopyChkBox;
	
	@FindBy(xpath="//select[@id='ddlIfRateIsZero']")
	private static WebElement ifRateIsZeroDropDown;
	
	@FindBy(xpath="//select[@id='ddlDynamicSetServiceCharges']")
	private static WebElement dynamicSetServiceChargesDropDown;
	
	@FindBy(xpath="//input[@id='chkEnableMessageBroadcasting']")
	private static WebElement enableAndCheckForNewMessagesChkBox;
	
	
	@FindBy(xpath="//input[@id='chkCheckNegStock']")
	private static WebElement checkNegativeStockChkBox;
	
	@FindBy(xpath="//input[@id='chkUpdateBBQInvManually']")
	private static WebElement updatesBBQConversionInventoryByManualEntryChkBox;
	
	@FindBy(xpath="//input[@id='chkAllowMultipleCurrencies']")
	private static WebElement allowMultipleCurrenciesChkBox;
	
	@FindBy(xpath="//input[@id='chkRestrictAddNewProdWhileEditTran']")
	private static WebElement restrictAddNewItemWhileEditingTransactionChkBox;
	
	@FindBy(xpath="//input[@id='chkRestrictEditingPrevDateTran']")
	private static WebElement restrictEditingPreviousDateTransactionChkBox;
	
	@FindBy(xpath="//input[@id='chkApplyRateBasedOnQty']")
	private static WebElement applyRateBasedOnQtyChkBox;
	
	@FindBy(xpath="//input[@id='chkCheckMemExpiryDate']")
	private static WebElement checkMemberTypeExpiryChkBox;
	
	@FindBy(xpath="//input[@id='chkExclueSchemeMaxDiscountAllowed']")
	private static WebElement excludeSchemeMaxDiscountAllowedChkBox;
	
	@FindBy(xpath="//input[@id='chkDontCheckMAXAmount']")
	private static WebElement donotCheckForAvailableCashInDrawerChkBox;
	
	@FindBy(xpath="//input[@id='chkAskForPrintingBillSettlement']")
	private static WebElement askForConfirmationBeforeBillingChkBox;
	
	@FindBy(xpath="//input[@id='chkMemberCreditSaleAccountForAllPaymentType']")
	private static WebElement useMembersCreditSalesAccountAsCustomerAccount;
	
	@FindBy(xpath="//input[@id='chkItemRateCanNotLessThanAvgRate']")
	private static WebElement itemRateCannotBeLessThanAveragePurchaseRateChkBox;
	
	@FindBy(xpath="//input[@id='chkItemRateCanNotLessPriceBookRate']")
	private static WebElement itemRateCannotBeLessThanPriceBookRateChkBox;
	
	@FindBy(xpath="//input[@id='nudBrdCastNewMsgTime']")
	private static WebElement messageTimeTxt;
	
	@FindBy(xpath="//input[@id='rbNSCWrnAndAllow']")
	private static WebElement warnAndAllowRadio;
	
	@FindBy(xpath="//input[@id='rbNSCRequiresApprvl']")
	private static WebElement requiresApprovalRadio;
	
	@FindBy(xpath="//input[@id='rbNSCStop']")
	private static WebElement stopRadio;
	
	public static boolean checkOutLetInPointOfSalePreferencesMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutletBtn));
		posOutletBtn.click();
	
		Thread.sleep(2000);
			
		boolean actposOutLetDropDown                                  = posOutLetDropDown.isDisplayed();
		boolean actposCopyChkBox                                      = posCopyChkBox.isDisplayed();
		boolean actifRateIsZeroDropDown                               = ifRateIsZeroDropDown.isDisplayed();
		boolean actdynamicSetServiceChargesDropDown                   = dynamicSetServiceChargesDropDown.isDisplayed();
		boolean actenableAndCheckForNewMessagesChkBox                 = enableAndCheckForNewMessagesChkBox.isDisplayed();
		boolean actcheckNegativeStockChkBox                           = checkNegativeStockChkBox.isDisplayed();
		boolean actupdatesBBQConversionInventoryByManualEntryChkBox   = updatesBBQConversionInventoryByManualEntryChkBox.isDisplayed();
		boolean actallowMultipleCurrenciesChkBox                      = allowMultipleCurrenciesChkBox.isDisplayed();
		boolean actrestrictAddNewItemWhileEditingTransactionChkBox    = restrictAddNewItemWhileEditingTransactionChkBox.isDisplayed();
		boolean actrestrictEditingPreviousDateTransactionChkBox       = restrictEditingPreviousDateTransactionChkBox.isDisplayed();
		boolean actapplyRateBasedOnQtyChkBox                          = applyRateBasedOnQtyChkBox.isDisplayed();
		boolean actcheckMemberTypeExpiryChkBox                        = checkMemberTypeExpiryChkBox.isDisplayed();
		boolean actexcludeSchemeMaxDiscountAllowedChkBox              = excludeSchemeMaxDiscountAllowedChkBox.isDisplayed();
		boolean actdonotCheckForAvailableCashInDrawerChkBox           = donotCheckForAvailableCashInDrawerChkBox.isDisplayed();
		boolean actaskForConfirmationBeforeBillingChkBox              = askForConfirmationBeforeBillingChkBox.isDisplayed();
		boolean actuseMembersCreditSalesAccountAsCustomerAccount      = useMembersCreditSalesAccountAsCustomerAccount.isDisplayed();
		
		JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		js1.executeScript("arguments[0].scrollIntoView();", itemRateCannotBeLessThanAveragePurchaseRateChkBox);
		
		boolean actitemRateCannotBeLessThanAveragePurchaseRateChkBox  = itemRateCannotBeLessThanAveragePurchaseRateChkBox.isDisplayed();
		
		js1.executeScript("arguments[0].scrollIntoView();", itemRateCannotBeLessThanPriceBookRateChkBox);
		
		boolean actitemRateCannotBeLessThanPriceBookRateChkBox        = itemRateCannotBeLessThanPriceBookRateChkBox.isDisplayed();
		
		
		// Expected
		 
		boolean expposOutLetDropDown                                  = true;
		boolean expposCopyChkBox                                      = true;
		boolean expifRateIsZeroDropDown                               = true;
		boolean expdynamicSetServiceChargesDropDown                   = true;
		boolean expenableAndCheckForNewMessagesChkBox                 = true;
		boolean expcheckNegativeStockChkBox                           = true;
		boolean expupdatesBBQConversionInventoryByManualEntryChkBox   = true;
		boolean expallowMultipleCurrenciesChkBox                      = true;
		boolean exprestrictAddNewItemWhileEditingTransactionChkBox    = true;
		boolean exprestrictEditingPreviousDateTransactionChkBox       = true;
		boolean expapplyRateBasedOnQtyChkBox                          = true;
		boolean expcheckMemberTypeExpiryChkBox                        = true;
		boolean expexcludeSchemeMaxDiscountAllowedChkBox              = true;
		boolean expdonotCheckForAvailableCashInDrawerChkBox           = true;
		boolean expaskForConfirmationBeforeBillingChkBox              = true;
		boolean expuseMembersCreditSalesAccountAsCustomerAccount      = true;
		boolean expitemRateCannotBeLessThanAveragePurchaseRateChkBox  = true;
		boolean expitemRateCannotBeLessThanPriceBookRateChkBox        = true;
			
		System.out.println("***************************************checkOutLetInPointOfSalePreferencesMenu***************************************");
		 
		System.out.println("posOutLetDropDown                                 : "+actposOutLetDropDown                                +" Value Expected : "+expposOutLetDropDown);
		System.out.println("posCopyChkBox                                     : "+actposCopyChkBox                                    +" Value Expected : "+expposCopyChkBox);
		System.out.println("ifRateIsZeroDropDown                              : "+actifRateIsZeroDropDown                             +" Value Expected : "+expifRateIsZeroDropDown);
		System.out.println("dynamicSetServiceChargesDropDown                  : "+actdynamicSetServiceChargesDropDown                 +" Value Expected : "+expdynamicSetServiceChargesDropDown);
		System.out.println("enableAndCheckForNewMessagesChkBox                : "+actenableAndCheckForNewMessagesChkBox               +" Value Expected : "+expenableAndCheckForNewMessagesChkBox);
		System.out.println("checkNegativeStockChkBox                          : "+actcheckNegativeStockChkBox                         +" Value Expected : "+expcheckNegativeStockChkBox);
		System.out.println("updatesBBQConversionInventoryByManualEntryChkBox  : "+actupdatesBBQConversionInventoryByManualEntryChkBox +" Value Expected : "+expupdatesBBQConversionInventoryByManualEntryChkBox);
		System.out.println("allowMultipleCurrenciesChkBox                     : "+actallowMultipleCurrenciesChkBox                    +" Value Expected : "+expallowMultipleCurrenciesChkBox);
		System.out.println("restrictAddNewItemWhileEditingTransactionChkBox   : "+actrestrictAddNewItemWhileEditingTransactionChkBox  +" Value Expected : "+exprestrictAddNewItemWhileEditingTransactionChkBox);
		System.out.println("restrictEditingPreviousDateTransactionChkBox      : "+actrestrictEditingPreviousDateTransactionChkBox     +" Value Expected : "+exprestrictEditingPreviousDateTransactionChkBox);
		System.out.println("applyRateBasedOnQtyChkBox                         : "+actapplyRateBasedOnQtyChkBox                        +" Value Expected : "+expapplyRateBasedOnQtyChkBox);
		System.out.println("checkMemberTypeExpiryChkBox                       : "+actcheckMemberTypeExpiryChkBox                      +" Value Expected : "+expcheckMemberTypeExpiryChkBox);
		System.out.println("excludeSchemeMaxDiscountAllowedChkBox             : "+actexcludeSchemeMaxDiscountAllowedChkBox            +" Value Expected : "+expexcludeSchemeMaxDiscountAllowedChkBox);
		System.out.println("donotCheckForAvailableCashInDrawerChkBox          : "+actdonotCheckForAvailableCashInDrawerChkBox         +" Value Expected : "+expdonotCheckForAvailableCashInDrawerChkBox);
		System.out.println("askForConfirmationBeforeBillingChkBox             : "+actaskForConfirmationBeforeBillingChkBox            +" Value Expected : "+expaskForConfirmationBeforeBillingChkBox);
		System.out.println("useMembersCreditSalesAccountAsCustomerAccount     : "+actuseMembersCreditSalesAccountAsCustomerAccount    +" Value Expected : "+expuseMembersCreditSalesAccountAsCustomerAccount);
		System.out.println("itemRateCannotBeLessThanAveragePurchaseRateChkBox : "+actitemRateCannotBeLessThanAveragePurchaseRateChkBox+" Value Expected : "+expitemRateCannotBeLessThanAveragePurchaseRateChkBox);
		System.out.println("itemRateCannotBeLessThanPriceBookRateChkBox       : "+actitemRateCannotBeLessThanPriceBookRateChkBox      +" Value Expected : "+expitemRateCannotBeLessThanPriceBookRateChkBox);
		
		
		if(actposOutLetDropDown==expposOutLetDropDown && actposCopyChkBox==expposCopyChkBox && actifRateIsZeroDropDown==expifRateIsZeroDropDown
				&& actdynamicSetServiceChargesDropDown==expdynamicSetServiceChargesDropDown && actenableAndCheckForNewMessagesChkBox==expenableAndCheckForNewMessagesChkBox
				&& actcheckNegativeStockChkBox==expcheckNegativeStockChkBox && actupdatesBBQConversionInventoryByManualEntryChkBox==expupdatesBBQConversionInventoryByManualEntryChkBox
				&& actallowMultipleCurrenciesChkBox==expallowMultipleCurrenciesChkBox && actrestrictAddNewItemWhileEditingTransactionChkBox==exprestrictAddNewItemWhileEditingTransactionChkBox
				&& actrestrictEditingPreviousDateTransactionChkBox==exprestrictEditingPreviousDateTransactionChkBox && actapplyRateBasedOnQtyChkBox==expapplyRateBasedOnQtyChkBox
				&& actcheckMemberTypeExpiryChkBox==expcheckMemberTypeExpiryChkBox && actexcludeSchemeMaxDiscountAllowedChkBox==expexcludeSchemeMaxDiscountAllowedChkBox 
				&& actdonotCheckForAvailableCashInDrawerChkBox==expdonotCheckForAvailableCashInDrawerChkBox && actaskForConfirmationBeforeBillingChkBox==expaskForConfirmationBeforeBillingChkBox
				&& actuseMembersCreditSalesAccountAsCustomerAccount==expuseMembersCreditSalesAccountAsCustomerAccount && actitemRateCannotBeLessThanAveragePurchaseRateChkBox==expitemRateCannotBeLessThanAveragePurchaseRateChkBox
				&& actitemRateCannotBeLessThanPriceBookRateChkBox==expitemRateCannotBeLessThanPriceBookRateChkBox)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	public static boolean checkSavingOutletSettingsInPosPreferences() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutletBtn));
		posOutletBtn.click();
	
		Thread.sleep(2000);
		

		Select posOutletSelect = new Select(posOutLetDropDown);
		posOutletSelect.selectByVisibleText("Outlet1");
	
		Thread.sleep(2000);
		
		if(enableAndCheckForNewMessagesChkBox.isSelected()==false)
		{
			enableAndCheckForNewMessagesChkBox.click();
		}
		
		messageTimeTxt.click();
		messageTimeTxt.sendKeys(Keys.END);
		messageTimeTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		messageTimeTxt.sendKeys("2");
		messageTimeTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
		posSaveBtn.click();
		
		Thread.sleep(2000);
		
		boolean actposInformationPopup      = posInformationPopup.isDisplayed();
		boolean actposInformationPopupBody  = posInformationPopupBody.isDisplayed();
		boolean actposInformationPopupOkBtn = posInformationPopupOkBtn.isDisplayed();
		
		boolean expposInformationPopup      = true;
		boolean expposInformationPopupBody  = true;
		boolean expposInformationPopupOkBtn = true;
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
		posInformationPopupOkBtn.click();
			
		System.out.println("***************************************checkSavingOutletSettingsInPosPreferences***************************************");
		 
		System.out.println("posInformationPopup       : "+actposInformationPopup     +" Value Expected : "+expposInformationPopup);
		System.out.println("posInformationPopupBody   : "+actposInformationPopupBody +" Value Expected : "+expposInformationPopupBody);
		System.out.println("posInformationPopupOkBtn  : "+actposInformationPopupOkBtn+" Value Expected : "+expposInformationPopupOkBtn);
		
		
		if(actposInformationPopup==expposInformationPopup && actposInformationPopupBody==expposInformationPopupBody
				&& actposInformationPopupOkBtn==expposInformationPopupOkBtn)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	@FindBy(xpath="//input[@id='chkMemPointsNotApplicable']")
	private static WebElement memeberPointsNotApplicableChkBox;
	
	@FindBy(xpath="//input[@id='chkPointsDefProdWiseForMembrs']")
	private static WebElement pointsDefItemWiseForMembersChkBox;
	
	@FindBy(xpath="//input[@id='chkAllowCriteriaDefForMemPoints']")
	private static WebElement allowCriteriaDefinitionForMemberPointsChkBox;
	
	@FindBy(xpath="//input[@id='chkAllotRoundOffMemberPoints']")
	private static WebElement allocateMemberPointsExactlyAsPerTheIntervalChkBox;
	
	@FindBy(xpath="//input[@id='txtNoOfDecimalFooter']")
	private static WebElement noOfDecimalsToDisplayInFooterNetTxt;
	
	@FindBy(xpath="//input[@id='chkDoNotAllowPointsIfDiscGivenInTrans']")
	private static WebElement doNotAllowPointsChkBox;
	
	@FindBy(xpath="//input[@id='chkMemPointsRedeemedOnSameDay']")
	private static WebElement promptIfaMemberRedeemedPointsMoreThanOneTimeOnSameDayChkBox;
	
	@FindBy(xpath="//input[@id='chkMemberCombineWithOtherMember']")
	private static WebElement memberCanCombineOtherMemberPoinstWhileRedemptionChkBox;
	
	@FindBy(xpath="//input[@id='txtbox_ddlAllowedPayMethodsToAllocatePts']")
	private static WebElement allowMwmberPointsOnPaymentsMethodsTxt;
	
	@FindBy(xpath="//input[@id='chkCreditSaleOutletwise']")
	private static WebElement showCreditSaleOutLetWiseChkBox;
	
	@FindBy(xpath="//input[@id='txtMinBillValForCrditCardUsge']")
	private static WebElement minBillValueForCreditCardUsageTxt;
	
	@FindBy(xpath="//input[@id='txtCreditNoteExpInDays']")
	private static WebElement creditNoteExpiryInDaysTxt;
	
	@FindBy(xpath="//input[@id='txtMinCharsToSearch']")
	private static WebElement minimumCharactersToSearchTxt;
	
	@FindBy(xpath="//select[@id='ddlSearch']")
	private static WebElement searchCriteriaDropDown;
	
	@FindBy(xpath="//input[@id='txtNoOfRecPerPage']")
	private static WebElement noOfRecordsPerPageTxt;
	
	@FindBy(xpath="//select[@id='ddlDefaultSearchBy']")
	private static WebElement defaultSearchByDropDown;
	
	@FindBy(xpath="//select[@id='ddlDefaultSearchByMember']")
	private static WebElement defaultSearchByMemberDropDown;
	
	@FindBy(xpath="//input[@id='chkDisplayAvailableQuantity']")
	private static WebElement dispalyAvailableQuantityChkBox;
	
	@FindBy(xpath="//input[@id='chkAutoSelectRecordIfSearchTextMatch']")
	private static WebElement autoSelectRecordsChkBox;
	
	@FindBy(xpath="//input[@id='optDefaultMember']")
	private static WebElement defaultMemeberComboBox;
	
	@FindBy(xpath="//input[@id='optDefaultEmployee']")
	private static WebElement defaultEmployeeComboBox;
	
	
	
	
	
	
	public static boolean checkMiscellaneousInPointOfSalePreferencesMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		Thread.sleep(8000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
		pointOfSaleUtilitiesMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
		posUtilitiesPreferencesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posMiscellaneousBtn));
		posMiscellaneousBtn.click();
	
		Thread.sleep(2000);
		
		
		
		boolean actmemeberPointsNotApplicableChkBox = memeberPointsNotApplicableChkBox.isDisplayed();
		boolean actpointsDefItemWiseForMembersChkBox = pointsDefItemWiseForMembersChkBox.isDisplayed();
		boolean actallowCriteriaDefinitionForMemberPointsChkBox = allowCriteriaDefinitionForMemberPointsChkBox.isDisplayed();
		boolean actallocateMemberPointsExactlyAsPerTheIntervalChkBox = allocateMemberPointsExactlyAsPerTheIntervalChkBox.isDisplayed();
		boolean actnoOfDecimalsToDisplayInFooterNetTxt = noOfDecimalsToDisplayInFooterNetTxt.isDisplayed();
		boolean actdoNotAllowPointsChkBox = doNotAllowPointsChkBox.isDisplayed();
		boolean actpromptIfaMemberRedeemedPointsMoreThanOneTimeOnSameDayChkBox = promptIfaMemberRedeemedPointsMoreThanOneTimeOnSameDayChkBox.isDisplayed();
		boolean actmemberCanCombineOtherMemberPoinstWhileRedemptionChkBox = memberCanCombineOtherMemberPoinstWhileRedemptionChkBox.isDisplayed();
		boolean actallowMwmberPointsOnPaymentsMethodsTxt = allowMwmberPointsOnPaymentsMethodsTxt.isDisplayed();
		boolean actshowCreditSaleOutLetWiseChkBox = showCreditSaleOutLetWiseChkBox.isDisplayed();
		boolean actminBillValueForCreditCardUsageTxt = minBillValueForCreditCardUsageTxt.isDisplayed();
		boolean actcreditNoteExpiryInDaysTxt = creditNoteExpiryInDaysTxt.isDisplayed();
		boolean actminimumCharactersToSearchTxt = minimumCharactersToSearchTxt.isDisplayed();
		boolean actsearchCriteriaDropDown = searchCriteriaDropDown.isDisplayed();
		boolean actnoOfRecordsPerPageTxt = noOfRecordsPerPageTxt.isDisplayed();
		boolean actdefaultSearchByDropDown = defaultSearchByDropDown.isDisplayed();
		boolean actdefaultSearchByMemberDropDown = defaultSearchByMemberDropDown.isDisplayed();
		boolean actdispalyAvailableQuantityChkBox = dispalyAvailableQuantityChkBox.isDisplayed();
		boolean actautoSelectRecordsChkBox = autoSelectRecordsChkBox.isDisplayed();
		boolean actdefaultMemeberComboBox = defaultMemeberComboBox.isDisplayed();
		boolean actdefaultEmployeeComboBox = defaultEmployeeComboBox.isDisplayed();
		
		
			
		boolean expmemeberPointsNotApplicableChkBox = memeberPointsNotApplicableChkBox.isDisplayed();
		boolean exppointsDefItemWiseForMembersChkBox = pointsDefItemWiseForMembersChkBox.isDisplayed();
		boolean expallowCriteriaDefinitionForMemberPointsChkBox = allowCriteriaDefinitionForMemberPointsChkBox.isDisplayed();
		boolean expallocateMemberPointsExactlyAsPerTheIntervalChkBox = allocateMemberPointsExactlyAsPerTheIntervalChkBox.isDisplayed();
		boolean expnoOfDecimalsToDisplayInFooterNetTxt = noOfDecimalsToDisplayInFooterNetTxt.isDisplayed();
		boolean expdoNotAllowPointsChkBox = doNotAllowPointsChkBox.isDisplayed();
		boolean exppromptIfaMemberRedeemedPointsMoreThanOneTimeOnSameDayChkBox = promptIfaMemberRedeemedPointsMoreThanOneTimeOnSameDayChkBox.isDisplayed();
		boolean expmemberCanCombineOtherMemberPoinstWhileRedemptionChkBox = memberCanCombineOtherMemberPoinstWhileRedemptionChkBox.isDisplayed();
		boolean expallowMwmberPointsOnPaymentsMethodsTxt = allowMwmberPointsOnPaymentsMethodsTxt.isDisplayed();
		boolean expshowCreditSaleOutLetWiseChkBox = showCreditSaleOutLetWiseChkBox.isDisplayed();
		boolean expminBillValueForCreditCardUsageTxt = minBillValueForCreditCardUsageTxt.isDisplayed();
		boolean expcreditNoteExpiryInDaysTxt = creditNoteExpiryInDaysTxt.isDisplayed();
		boolean expminimumCharactersToSearchTxt = minimumCharactersToSearchTxt.isDisplayed();
		boolean expsearchCriteriaDropDown = searchCriteriaDropDown.isDisplayed();
		boolean expnoOfRecordsPerPageTxt = noOfRecordsPerPageTxt.isDisplayed();
		boolean expdefaultSearchByDropDown = defaultSearchByDropDown.isDisplayed();
		boolean expdefaultSearchByMemberDropDown = defaultSearchByMemberDropDown.isDisplayed();
		boolean expdispalyAvailableQuantityChkBox = dispalyAvailableQuantityChkBox.isDisplayed();
		boolean expautoSelectRecordsChkBox = autoSelectRecordsChkBox.isDisplayed();
		boolean expdefaultMemeberComboBox = defaultMemeberComboBox.isDisplayed();
		boolean expdefaultEmployeeComboBox = defaultEmployeeComboBox.isDisplayed();
			
		System.out.println("***************************************checkMiscellaneousInPointOfSalePreferencesMenu***************************************");
		
		System.out.println("memeberPointsNotApplicableChkBox : "+actmemeberPointsNotApplicableChkBox+" Value Expected : "+expmemeberPointsNotApplicableChkBox);
		System.out.println("pointsDefItemWiseForMembersChkBox : "+actpointsDefItemWiseForMembersChkBox+" Value Expected : "+exppointsDefItemWiseForMembersChkBox);
		System.out.println("allowCriteriaDefinitionForMemberPointsChkBox : "+actallowCriteriaDefinitionForMemberPointsChkBox+" Value Expected : "+expallowCriteriaDefinitionForMemberPointsChkBox);
		System.out.println("allocateMemberPointsExactlyAsPerTheIntervalChkBox : "+actallocateMemberPointsExactlyAsPerTheIntervalChkBox+" Value Expected : "+expallocateMemberPointsExactlyAsPerTheIntervalChkBox);
		System.out.println("noOfDecimalsToDisplayInFooterNetTxt : "+actnoOfDecimalsToDisplayInFooterNetTxt+" Value Expected : "+expnoOfDecimalsToDisplayInFooterNetTxt);
		System.out.println("doNotAllowPointsChkBox : "+actdoNotAllowPointsChkBox+" Value Expected : "+expdoNotAllowPointsChkBox);
		System.out.println("promptIfaMemberRedeemedPointsMoreThanOneTimeOnSameDayChkBox : "+actpromptIfaMemberRedeemedPointsMoreThanOneTimeOnSameDayChkBox+" Value Expected : "+exppromptIfaMemberRedeemedPointsMoreThanOneTimeOnSameDayChkBox);
		System.out.println("memberCanCombineOtherMemberPoinstWhileRedemptionChkBox : "+actmemberCanCombineOtherMemberPoinstWhileRedemptionChkBox+" Value Expected : "+expmemberCanCombineOtherMemberPoinstWhileRedemptionChkBox);
		System.out.println("allowMwmberPointsOnPaymentsMethodsTxt : "+actallowMwmberPointsOnPaymentsMethodsTxt+" Value Expected : "+expallowMwmberPointsOnPaymentsMethodsTxt);
		System.out.println("showCreditSaleOutLetWiseChkBox : "+actshowCreditSaleOutLetWiseChkBox+" Value Expected : "+expshowCreditSaleOutLetWiseChkBox);
		System.out.println("minBillValueForCreditCardUsageTxt : "+actminBillValueForCreditCardUsageTxt+" Value Expected : "+expminBillValueForCreditCardUsageTxt);
		System.out.println("creditNoteExpiryInDaysTxt : "+actcreditNoteExpiryInDaysTxt+" Value Expected : "+expcreditNoteExpiryInDaysTxt);
		System.out.println("minimumCharactersToSearchTxt : "+actminimumCharactersToSearchTxt+" Value Expected : "+expminimumCharactersToSearchTxt);
		System.out.println("searchCriteriaDropDown : "+actsearchCriteriaDropDown+" Value Expected : "+expsearchCriteriaDropDown);
		System.out.println("noOfRecordsPerPageTxt : "+actnoOfRecordsPerPageTxt+" Value Expected : "+expnoOfRecordsPerPageTxt);
		System.out.println("defaultSearchByDropDown : "+actdefaultSearchByDropDown+" Value Expected : "+expdefaultSearchByDropDown);
		System.out.println("defaultSearchByMemberDropDown : "+actdefaultSearchByMemberDropDown+" Value Expected : "+expdefaultSearchByMemberDropDown);
		System.out.println("dispalyAvailableQuantityChkBox : "+actdispalyAvailableQuantityChkBox+" Value Expected : "+expdispalyAvailableQuantityChkBox);
		System.out.println("autoSelectRecordsChkBox : "+actautoSelectRecordsChkBox+" Value Expected : "+expautoSelectRecordsChkBox);
		System.out.println("defaultMemeberComboBox : "+actdefaultMemeberComboBox+" Value Expected : "+expdefaultMemeberComboBox);
		System.out.println("defaultEmployeeComboBox : "+actdefaultEmployeeComboBox+" Value Expected : "+expdefaultEmployeeComboBox);
		
		
		if(actmemeberPointsNotApplicableChkBox==expmemeberPointsNotApplicableChkBox && actpointsDefItemWiseForMembersChkBox==exppointsDefItemWiseForMembersChkBox
				&& actallowCriteriaDefinitionForMemberPointsChkBox==expallowCriteriaDefinitionForMemberPointsChkBox 
				&& actallocateMemberPointsExactlyAsPerTheIntervalChkBox==expallocateMemberPointsExactlyAsPerTheIntervalChkBox 
				&& actnoOfDecimalsToDisplayInFooterNetTxt==expnoOfDecimalsToDisplayInFooterNetTxt && actdoNotAllowPointsChkBox==expdoNotAllowPointsChkBox
				&& actpromptIfaMemberRedeemedPointsMoreThanOneTimeOnSameDayChkBox==exppromptIfaMemberRedeemedPointsMoreThanOneTimeOnSameDayChkBox
				&& actmemberCanCombineOtherMemberPoinstWhileRedemptionChkBox==expmemberCanCombineOtherMemberPoinstWhileRedemptionChkBox
				&& actallowMwmberPointsOnPaymentsMethodsTxt==expallowMwmberPointsOnPaymentsMethodsTxt && actshowCreditSaleOutLetWiseChkBox==expshowCreditSaleOutLetWiseChkBox
				&& actminBillValueForCreditCardUsageTxt==expminBillValueForCreditCardUsageTxt && actcreditNoteExpiryInDaysTxt==expcreditNoteExpiryInDaysTxt
				&& actminimumCharactersToSearchTxt==expminimumCharactersToSearchTxt && actsearchCriteriaDropDown==expsearchCriteriaDropDown
				&& actnoOfRecordsPerPageTxt==expnoOfRecordsPerPageTxt && actdefaultSearchByDropDown==expdefaultSearchByDropDown && actdefaultSearchByMemberDropDown==expdefaultSearchByMemberDropDown
				&& actdispalyAvailableQuantityChkBox==expdispalyAvailableQuantityChkBox && actautoSelectRecordsChkBox==expautoSelectRecordsChkBox
				&& actdefaultMemeberComboBox==expdefaultMemeberComboBox && actdefaultEmployeeComboBox==expdefaultEmployeeComboBox)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	
	public static boolean checkSavingMiscellaneousSettingsInPosPreferences() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(defaultMemeberComboBox));
		defaultMemeberComboBox.click();
		defaultMemeberComboBox.sendKeys(Keys.END);
		defaultMemeberComboBox.sendKeys(Keys.SHIFT,Keys.HOME);
		defaultMemeberComboBox.sendKeys("Default Member");
		Thread.sleep(2000);
		defaultMemeberComboBox.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(defaultEmployeeComboBox));
		defaultEmployeeComboBox.sendKeys(Keys.END);
		defaultEmployeeComboBox.sendKeys(Keys.SHIFT,Keys.HOME);
		defaultEmployeeComboBox.sendKeys("Employee1");
		Thread.sleep(2000);
		defaultEmployeeComboBox.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
		posSaveBtn.click();
		
		Thread.sleep(2000);
		
		boolean actposInformationPopup      = posInformationPopup.isDisplayed();
		boolean actposInformationPopupBody  = posInformationPopupBody.isDisplayed();
		boolean actposInformationPopupOkBtn = posInformationPopupOkBtn.isDisplayed();
		
		boolean expposInformationPopup      = true;
		boolean expposInformationPopupBody  = true;
		boolean expposInformationPopupOkBtn = true;
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
		posInformationPopupOkBtn.click();
			
		System.out.println("***************************************checkSavingMiscellaneousSettingsInPosPreferences***************************************");
		 
		System.out.println("posInformationPopup       : "+actposInformationPopup     +" Value Expected : "+expposInformationPopup);
		System.out.println("posInformationPopupBody   : "+actposInformationPopupBody +" Value Expected : "+expposInformationPopupBody);
		System.out.println("posInformationPopupOkBtn  : "+actposInformationPopupOkBtn+" Value Expected : "+expposInformationPopupOkBtn);
		
		
		if(actposInformationPopup==expposInformationPopup && actposInformationPopupBody==expposInformationPopupBody
				&& actposInformationPopupOkBtn==expposInformationPopupOkBtn)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	@FindBy(xpath="//span[@class='icon-save icon-font6']")
	private static WebElement posSaveBtn;
	
	@FindBy(xpath="//span[@class='icon-close icon-font6']")
	private static WebElement posCloseBtn;
	
	@FindBy(xpath="//select[@id='ddlOutlets']")
	private static WebElement posOutLetDropDown;
	
	@FindBy(xpath="//input[@id='chkSelectedOutletCopy']")
	private static WebElement copyChkBox;
	
	@FindBy(xpath="//input[@id='optSalesAcc']")
	private static WebElement salesAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optSalesAcc_table_data_body']/tr/td")
	private static List<WebElement> salesAccountList;
	
	@FindBy(xpath="//input[@id='optCustDefAcc']")
	private static WebElement customerDefaultAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optCustDefAcc_table_data_body']/tr/td")
	private static List<WebElement> customerDefaultAccountList;
	
	@FindBy(xpath="//input[@id='optPreOrderAcc']")
	private static WebElement preOrderSalesAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optPreOrderAcc_table_data_body']/tr/td")
	private static List<WebElement> preOrderSalesAccountList;
	
	@FindBy(xpath="//input[@id='optPreOrderCustomerAccnt']")
	private static WebElement preOrderCustomerDefaultAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optPreOrderCustomerAccnt_table_data_body']/tr/td")
	private static List<WebElement> preOrderCustomerDefaultAccountList;
	
	@FindBy(xpath="//input[@id='optSalesReturnAcc']")
	private static WebElement salesReturnAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optSalesReturnAcc_table_data_body']/tr/td")
	private static List<WebElement> salesReturnAccountList;
	
	@FindBy(xpath="//input[@id='optCashAcc']")
	private static WebElement cashAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optCashAcc_table_data_body']/tr/td")
	private static List<WebElement> cashAccountList;
	
	@FindBy(xpath="//input[@id='optCreditCardAcc']")
	private static WebElement cardAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optCreditCardAcc_table_data_body']/tr/td")
	private static List<WebElement> cardAccountList;
	
	@FindBy(xpath="//input[@id='optCouponAcc']")
	private static WebElement couponAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optCouponAcc_table_data_body']/tr/td")
	private static List<WebElement> couponAccountList;
	
	@FindBy(xpath="//input[@id='optDebitAccOrCreditSales']")
	private static WebElement creditNoteAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optDebitAccOrCreditSales_table_data_body']/tr/td")
	private static List<WebElement> creditNoteAccountList;
	
	@FindBy(xpath="//input[@id='optPointsAcc']")
	private static WebElement pointsAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optPointsAcc_table_data_body']/tr/td")
	private static List<WebElement> pointsAccountList;
	
	@FindBy(xpath="//input[@id='optEPaymentAccount']")
	private static WebElement ePaymentAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optEPaymentAccount_table_data_body']/tr/td")
	private static List<WebElement> ePaymentAccountList;
	
	@FindBy(xpath="//input[@id='optCreditSaleDefaultAccount']")
	private static WebElement creditSalesDefaultAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optCreditSaleDefaultAccount_table_data_body']/tr/td")
	private static List<WebElement> creditSalesDefaultAccountList;
	
	@FindBy(xpath="//input[@id='optDiscountAcc']")
	private static WebElement discountAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optDiscountAcc_table_data_body']/tr/td")
	private static List<WebElement> discountAccountList;
	
	@FindBy(xpath="//input[@id='optGoodsExchangeAccnt']")
	private static WebElement goodsExchangeAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optGoodsExchangeAccnt_table_data_body']/tr/td")
	private static List<WebElement> goodsExchangeAccountList;
	
	@FindBy(xpath="//input[@id='optItemExchangeDiffAccnt']")
	private static WebElement itemExchangeDifferenceAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optItemExchangeDiffAccnt_table_data_body']/tr/td")
	private static List<WebElement> itemExchangeDifferenceAccountList;
	
	@FindBy(xpath="//input[@id='optSpoilageAccnt']")
	private static WebElement spoilageAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optSpoilageAccnt_table_data_body']/tr/td")
	private static List<WebElement> spoilageAccountList;
	
	@FindBy(xpath="//input[@id='optCashOpenBalanceAccnt']")
	private static WebElement cashOpeningBalanceAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optCashOpenBalanceAccnt_table_data_body']/tr/td")
	private static List<WebElement> cashOpeningBalanceAccountList;
	
	@FindBy(xpath="//input[@id='optCashInDefaultAccount']")
	private static WebElement cashInDefaultAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optCashInDefaultAccount_table_data_body']/tr/td")
	private static List<WebElement> cashInDefaultAccountList;
	
	@FindBy(xpath="//input[@id='optCashOutDefaultAccount']")
	private static WebElement cashOutDefaultAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optCashOutDefaultAccount_table_data_body']/tr/td")
	private static List<WebElement> cashOutDefaultAccountList;
	
	@FindBy(xpath="//input[@id='optCashCollAccount']")
	private static WebElement cashCollectionDefaultAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optCashCollAccount_table_data_body']/tr/td")
	private static List<WebElement> cashCollectionDefaultAccountList;
	
	@FindBy(xpath="//input[@id='optEODDiffAcc']")
	private static WebElement dayEndDifferenceAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optEODDiffAcc_table_data_body']/tr/td")
	private static List<WebElement> dayEndDifferenceAccountList;
	
	@FindBy(xpath="//input[@id='optEODStockAccnt']")
	private static WebElement dayEndStockAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optEODStockAccnt_table_data_body']/tr/td")
	private static List<WebElement> dayEndStockAccountList;
	
	@FindBy(xpath="//input[@id='optEODWastageAccnt']")
	private static WebElement dayEndWastageAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optEODWastageAccnt_table_data_body']/tr/td")
	private static List<WebElement> dayEndWastageAccountList;
	
	@FindBy(xpath="//input[@id='optRoundOffAcc']")
	private static WebElement roundOffAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optRoundOffAcc_table_data_body']/tr/td")
	private static List<WebElement> roundOffAccountList;
	
	@FindBy(xpath="//input[@id='optWastageCredit']")
	private static WebElement wastageCreditAccountTxt;
	
	@FindBy(xpath="//tbody[@id='optWastageCredit_table_data_body']/tr/td")
	private static List<WebElement> wastageCreditAccountList;
	
	@FindBy(xpath="//input[@id='optAccountTag']")
	private static WebElement accountingTagTxt;
	
	@FindBy(xpath="//tbody[@id='optAccountTag_table_data_body']/tr/td")
	private static List<WebElement> accountingTagList;
	
	
	public static boolean checkAccountInPointOfSalePreferencesMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		Thread.sleep(8000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
		pointOfSaleUtilitiesMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
		posUtilitiesPreferencesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posAccountBtn));
		posAccountBtn.click();
	
		Thread.sleep(2000);
			
		boolean actposSaveBtn                          = posSaveBtn.isDisplayed();
		boolean actposCloseBtn                         = posCloseBtn.isDisplayed();
		boolean actposOutLetDropDown                   = posOutLetDropDown.isDisplayed();
		boolean actcopyChkBox                          = copyChkBox.isDisplayed();
		boolean actsalesAccountTxt                     = salesAccountTxt.isDisplayed();
		boolean actcustomerDefaultAccountTxt           = customerDefaultAccountTxt.isDisplayed();
		boolean actpreOrderSalesAccountTxt             = preOrderSalesAccountTxt.isDisplayed();
		boolean actpreOrderCustomerDefaultAccountTxt   = preOrderCustomerDefaultAccountTxt.isDisplayed();
		boolean actsalesReturnAccountTxt               = salesReturnAccountTxt.isDisplayed();
		boolean actcashAccountTxt                      = cashAccountTxt.isDisplayed();
		boolean actcardAccountTxt                      = cardAccountTxt.isDisplayed();
		boolean actcouponAccountTxt                    = couponAccountTxt.isDisplayed();
		boolean actcreditNoteAccountTxt                = creditNoteAccountTxt.isDisplayed();
		boolean actpointsAccountTxt                    = pointsAccountTxt.isDisplayed();
		boolean actePaymentAccountTxt                  = ePaymentAccountTxt.isDisplayed();
		boolean actcreditSalesDefaultAccountTxt        = creditSalesDefaultAccountTxt.isDisplayed();
		boolean actdiscountAccountTxt                  = discountAccountTxt.isDisplayed();
		boolean actgoodsExchangeAccountTxt             = goodsExchangeAccountTxt.isDisplayed();
		boolean actitemExchangeDifferenceAccountTxt    = itemExchangeDifferenceAccountTxt.isDisplayed();
		boolean actspoilageAccountTxt                  = spoilageAccountTxt.isDisplayed();
		boolean actcashOpeningBalanceAccountTxt        = cashOpeningBalanceAccountTxt.isDisplayed();
		boolean actcashInDefaultAccountTxt             = cashInDefaultAccountTxt.isDisplayed();
		boolean actcashOutDefaultAccountTxt            = cashOutDefaultAccountTxt.isDisplayed();
		boolean actcashCollectionDefaultAccountTxt     = cashCollectionDefaultAccountTxt.isDisplayed();
		boolean actdayEndDifferenceAccountTxt          = dayEndDifferenceAccountTxt.isDisplayed();
		boolean actdayEndStockAccountTxt               = dayEndStockAccountTxt.isDisplayed();
		boolean actdayEndWastageAccountTxt             = dayEndWastageAccountTxt.isDisplayed();
		boolean actroundOffAccountTxt                  = roundOffAccountTxt.isDisplayed();
		boolean actwastageCreditAccountTxt             = wastageCreditAccountTxt.isDisplayed();
		boolean actaccountingTagTxt                    = accountingTagTxt.isDisplayed();
		
		
		// Expected
		 
		boolean expposSaveBtn                          = posSaveBtn.isDisplayed();
		boolean expposCloseBtn                         = posCloseBtn.isDisplayed();
		boolean expposOutLetDropDown                   = posOutLetDropDown.isDisplayed();
		boolean expcopyChkBox                          = copyChkBox.isDisplayed();
		boolean expsalesAccountTxt                     = salesAccountTxt.isDisplayed();
		boolean expcustomerDefaultAccountTxt           = customerDefaultAccountTxt.isDisplayed();
		boolean exppreOrderSalesAccountTxt             = preOrderSalesAccountTxt.isDisplayed();
		boolean exppreOrderCustomerDefaultAccountTxt   = preOrderCustomerDefaultAccountTxt.isDisplayed();
		boolean expsalesReturnAccountTxt               = salesReturnAccountTxt.isDisplayed();
		boolean expcashAccountTxt                      = cashAccountTxt.isDisplayed();
		boolean expcardAccountTxt                      = cardAccountTxt.isDisplayed();
		boolean expcouponAccountTxt                    = couponAccountTxt.isDisplayed();
		boolean expcreditNoteAccountTxt                = creditNoteAccountTxt.isDisplayed();
		boolean exppointsAccountTxt                    = pointsAccountTxt.isDisplayed();
		boolean expePaymentAccountTxt                  = ePaymentAccountTxt.isDisplayed();
		boolean expcreditSalesDefaultAccountTxt        = creditSalesDefaultAccountTxt.isDisplayed();
		boolean expdiscountAccountTxt                  = discountAccountTxt.isDisplayed();
		boolean expgoodsExchangeAccountTxt             = goodsExchangeAccountTxt.isDisplayed();
		boolean expitemExchangeDifferenceAccountTxt    = itemExchangeDifferenceAccountTxt.isDisplayed();
		boolean expspoilageAccountTxt                  = spoilageAccountTxt.isDisplayed();
		boolean expcashOpeningBalanceAccountTxt        = cashOpeningBalanceAccountTxt.isDisplayed();
		boolean expcashInDefaultAccountTxt             = cashInDefaultAccountTxt.isDisplayed();
		boolean expcashOutDefaultAccountTxt            = cashOutDefaultAccountTxt.isDisplayed();
		boolean expcashCollectionDefaultAccountTxt     = cashCollectionDefaultAccountTxt.isDisplayed();
		boolean expdayEndDifferenceAccountTxt          = dayEndDifferenceAccountTxt.isDisplayed();
		boolean expdayEndStockAccountTxt               = dayEndStockAccountTxt.isDisplayed();
		boolean expdayEndWastageAccountTxt             = dayEndWastageAccountTxt.isDisplayed();
		boolean exproundOffAccountTxt                  = roundOffAccountTxt.isDisplayed();
		boolean expwastageCreditAccountTxt             = wastageCreditAccountTxt.isDisplayed();
		boolean expaccountingTagTxt                    = accountingTagTxt.isDisplayed();
			
		System.out.println("***************************************checkAccountInPointOfSalePreferencesMenu***************************************");
		 
		System.out.println("posSaveBtn                        : "+actposSaveBtn                         +" Value Expected : "+expposSaveBtn);
		System.out.println("posCloseBtn                       : "+actposCloseBtn                        +" Value Expected : "+expposCloseBtn);
		System.out.println("posOutLetDropDown                 : "+actposOutLetDropDown                  +" Value Expected : "+expposOutLetDropDown);
		System.out.println("copyChkBox                        : "+actcopyChkBox                         +" Value Expected : "+expcopyChkBox);
		System.out.println("salesAccountTxt                   : "+actsalesAccountTxt                    +" Value Expected : "+expsalesAccountTxt);
		System.out.println("customerDefaultAccountTxt         : "+actcustomerDefaultAccountTxt          +" Value Expected : "+expcustomerDefaultAccountTxt);
		System.out.println("preOrderSalesAccountTxt           : "+actpreOrderSalesAccountTxt            +" Value Expected : "+exppreOrderSalesAccountTxt);
		System.out.println("preOrderCustomerDefaultAccountTxt : "+actpreOrderCustomerDefaultAccountTxt  +" Value Expected : "+exppreOrderCustomerDefaultAccountTxt);
		System.out.println("salesReturnAccountTxt             : "+actsalesReturnAccountTxt              +" Value Expected : "+expsalesReturnAccountTxt);
		System.out.println("cashAccountTxt                    : "+actcashAccountTxt                     +" Value Expected : "+expcashAccountTxt);
		System.out.println("cardAccountTxt                    : "+actcardAccountTxt                     +" Value Expected : "+expcardAccountTxt);
		System.out.println("couponAccountTxt                  : "+actcouponAccountTxt                   +" Value Expected : "+expcouponAccountTxt);
		System.out.println("creditNoteAccountTxt              : "+actcreditNoteAccountTxt               +" Value Expected : "+expcreditNoteAccountTxt);
		System.out.println("pointsAccountTxt                  : "+actpointsAccountTxt                   +" Value Expected : "+exppointsAccountTxt);
		System.out.println("ePaymentAccountTxt                : "+actePaymentAccountTxt                 +" Value Expected : "+expePaymentAccountTxt);
		System.out.println("creditSalesDefaultAccountTxt      : "+actcreditSalesDefaultAccountTxt       +" Value Expected : "+expcreditSalesDefaultAccountTxt);
		System.out.println("discountAccountTxt                : "+actdiscountAccountTxt                 +" Value Expected : "+expdiscountAccountTxt);
		System.out.println("goodsExchangeAccountTxt           : "+actgoodsExchangeAccountTxt            +" Value Expected : "+expgoodsExchangeAccountTxt);
		System.out.println("itemExchangeDifferenceAccountTxt  : "+actitemExchangeDifferenceAccountTxt   +" Value Expected : "+expitemExchangeDifferenceAccountTxt);
		System.out.println("spoilageAccountTxt                : "+actspoilageAccountTxt                 +" Value Expected : "+expspoilageAccountTxt);
		System.out.println("cashOpeningBalanceAccountTxt      : "+actcashOpeningBalanceAccountTxt       +" Value Expected : "+expcashOpeningBalanceAccountTxt);
		System.out.println("cashInDefaultAccountTxt           : "+actcashInDefaultAccountTxt            +" Value Expected : "+expcashInDefaultAccountTxt);
		System.out.println("cashOutDefaultAccountTxt          : "+actcashOutDefaultAccountTxt           +" Value Expected : "+expcashOutDefaultAccountTxt);
		System.out.println("cashCollectionDefaultAccountTxt   : "+actcashCollectionDefaultAccountTxt    +" Value Expected : "+expcashCollectionDefaultAccountTxt);
		System.out.println("dayEndDifferenceAccountTxt        : "+actdayEndDifferenceAccountTxt         +" Value Expected : "+expdayEndDifferenceAccountTxt);
		System.out.println("dayEndStockAccountTxt             : "+actdayEndStockAccountTxt              +" Value Expected : "+expdayEndStockAccountTxt);
		System.out.println("dayEndWastageAccountTxt           : "+actdayEndWastageAccountTxt            +" Value Expected : "+expdayEndWastageAccountTxt);
		System.out.println("roundOffAccountTxt                : "+actroundOffAccountTxt                 +" Value Expected : "+exproundOffAccountTxt);
		System.out.println("wastageCreditAccountTxt           : "+actwastageCreditAccountTxt            +" Value Expected : "+expwastageCreditAccountTxt);
		System.out.println("accountingTagTxt                  : "+actaccountingTagTxt                   +" Value Expected : "+expaccountingTagTxt);
		
		
		if(actposSaveBtn==expposSaveBtn && actposCloseBtn==expposCloseBtn && actposOutLetDropDown==expposOutLetDropDown && actcopyChkBox==expcopyChkBox 
				&& actsalesAccountTxt==expsalesAccountTxt && actcustomerDefaultAccountTxt==expcustomerDefaultAccountTxt && actpreOrderSalesAccountTxt==exppreOrderSalesAccountTxt
				&& actpreOrderCustomerDefaultAccountTxt==exppreOrderCustomerDefaultAccountTxt && actsalesReturnAccountTxt==expsalesReturnAccountTxt
				&& actcashAccountTxt==expcashAccountTxt && actcardAccountTxt==expcardAccountTxt && actcouponAccountTxt==expcouponAccountTxt 
				&& actcreditNoteAccountTxt==expcreditNoteAccountTxt && actpointsAccountTxt==exppointsAccountTxt && actePaymentAccountTxt==expePaymentAccountTxt
				&& actcreditSalesDefaultAccountTxt==expcreditSalesDefaultAccountTxt && actdiscountAccountTxt==expdiscountAccountTxt && actgoodsExchangeAccountTxt==expgoodsExchangeAccountTxt
				&& actitemExchangeDifferenceAccountTxt==expitemExchangeDifferenceAccountTxt && actspoilageAccountTxt==expspoilageAccountTxt 
				&& actcashOpeningBalanceAccountTxt==expcashOpeningBalanceAccountTxt && actcashInDefaultAccountTxt==expcashInDefaultAccountTxt && actcashOutDefaultAccountTxt==expcashOutDefaultAccountTxt
				&& actcashCollectionDefaultAccountTxt==expcashCollectionDefaultAccountTxt && actdayEndDifferenceAccountTxt==expdayEndDifferenceAccountTxt 
				&& actdayEndStockAccountTxt==expdayEndStockAccountTxt && actdayEndWastageAccountTxt==expdayEndWastageAccountTxt && actroundOffAccountTxt==exproundOffAccountTxt
				&& actwastageCreditAccountTxt==expwastageCreditAccountTxt && actaccountingTagTxt==expaccountingTagTxt)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	

	@FindBy(xpath="//tbody[@id='optSalesAcc_table_data_body']")
	private static WebElement salesAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optCustDefAcc_table_data_body']")
	private static WebElement customerDefaultAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optPreOrderAcc_table_data_body']")
	private static WebElement preOrderSalesAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optPreOrderCustomerAccnt_table_data_body']")
	private static WebElement preOrderCustomerDefaultAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optSalesReturnAcc_table_data_body']")
	private static WebElement salesReturnAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optCashAcc_table_data_body']")
	private static WebElement cashAccountBody;
	
	@FindBy(xpath="//tbody[@id='optCreditCardAcc_table_data_body']")
	private static WebElement cardAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optCouponAcc_table_data_body']")
	private static WebElement couponAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optDebitAccOrCreditSales_table_data_body']")
	private static WebElement creditNoteAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optPointsAcc_table_data_body']")
	private static WebElement pointsAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optEPaymentAccount_table_data_body']")
	private static WebElement ePaymentAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optCreditSaleDefaultAccount_table_data_body']")
	private static WebElement creditSalesDefaultAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optDiscountAcc_table_data_body']")
	private static WebElement discountAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optGoodsExchangeAccnt_table_data_body']")
	private static WebElement goodsExchangeAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optItemExchangeDiffAccnt_table_data_body']")
	private static WebElement itemExchangeDifferenceAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optSpoilageAccnt_table_data_body']")
	private static WebElement spoilageAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optCashOpenBalanceAccnt_table_data_body']")
	private static WebElement cashOpeningBalanceAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optCashInDefaultAccount_table_data_body']")
	private static WebElement cashInDefaultAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optCashOutDefaultAccount_table_data_body']")
	private static WebElement cashOutDefaultAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optCashCollAccount_table_data_body']")
	private static WebElement cashCollectionDefaultAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optEODDiffAcc_table_data_body']")
	private static WebElement dayEndDifferenceAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optEODStockAccnt_table_data_body']")
	private static WebElement dayEndStockAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optEODWastageAccnt_table_data_body']")
	private static WebElement dayEndWastageAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optRoundOffAcc_table_data_body']")
	private static WebElement roundOffAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optWastageCredit_table_data_body']")
	private static WebElement wastageCreditAccountBody;
	
	
	@FindBy(xpath="//tbody[@id='optAccountTag_table_data_body']")
	private static WebElement accountingTagBody;
	
	
	public static boolean checkComboBoxFiledsOfEachAccount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutletBtn));

		Select posOutletSelect = new Select(posOutLetDropDown);
		posOutletSelect.selectByVisibleText("Outlet1");
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actsalesAccountBody = salesAccountBody.getText().isEmpty();
		boolean expsalesAccountBody = false;
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDefaultAccountTxt));
		customerDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actcustomerDefaultAccountBody = customerDefaultAccountBody.getText().isEmpty();
		boolean expcustomerDefaultAccountBody = false;
		
		customerDefaultAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderSalesAccountTxt));
		preOrderSalesAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actpreOrderSalesAccountBody = preOrderSalesAccountBody.getText().isEmpty();
		boolean exppreOrderSalesAccountBody = false;
		
		preOrderSalesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderCustomerDefaultAccountTxt));
		preOrderCustomerDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actpreOrderCustomerDefaultAccountBody = preOrderCustomerDefaultAccountBody.getText().isEmpty();
		boolean exppreOrderCustomerDefaultAccountBody = false;
		
		preOrderCustomerDefaultAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnAccountTxt));
		salesReturnAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actsalesReturnAccountBody = salesReturnAccountBody.getText().isEmpty();
		boolean expsalesReturnAccountBody = false;
		
		salesReturnAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAccountTxt));
		cashAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actcashAccountBody = cashAccountBody.getText().isEmpty();
		boolean expcashAccountBody = false;
		
		cashAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cardAccountTxt));
		cardAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actcardAccountBody = cardAccountBody.getText().isEmpty();
		boolean expcardAccountBody = false;
		
		cardAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(couponAccountTxt));
		couponAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actcouponAccountBody = couponAccountBody.getText().isEmpty();
		boolean expcouponAccountBody = false;
		
		couponAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNoteAccountTxt));
		creditNoteAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actcreditNoteAccountBody = creditNoteAccountBody.getText().isEmpty();
		boolean expcreditNoteAccountBody = false;
		
		creditNoteAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointsAccountTxt));
		pointsAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actpointsAccountBody = pointsAccountBody.getText().isEmpty();
		boolean exppointsAccountBody = false;
		
		pointsAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ePaymentAccountTxt));
		ePaymentAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actePaymentAccountBody = ePaymentAccountBody.getText().isEmpty();
		boolean expePaymentAccountBody = false;
		
		ePaymentAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditSalesDefaultAccountTxt));
		creditSalesDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actcreditSalesDefaultAccountBody = creditSalesDefaultAccountBody.getText().isEmpty();
		boolean expcreditSalesDefaultAccountBody = false;
		
		creditSalesDefaultAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountAccountTxt));
		discountAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actdiscountAccountBody = discountAccountBody.getText().isEmpty();
		boolean expdiscountAccountBody = false;
		
		discountAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(goodsExchangeAccountTxt));
		goodsExchangeAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actgoodsExchangeAccountBody = goodsExchangeAccountBody.getText().isEmpty();
		boolean expgoodsExchangeAccountBody = false;
		
		goodsExchangeAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemExchangeDifferenceAccountTxt));
		itemExchangeDifferenceAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actitemExchangeDifferenceAccountBody = itemExchangeDifferenceAccountBody.getText().isEmpty();
		boolean expitemExchangeDifferenceAccountBody = false;
		
		itemExchangeDifferenceAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(spoilageAccountTxt));
		spoilageAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actspoilageAccountBody = spoilageAccountBody.getText().isEmpty();
		boolean expspoilageAccountBody = false;
		
		spoilageAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashOpeningBalanceAccountTxt));
		cashOpeningBalanceAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actcashOpeningBalanceAccountBody = cashOpeningBalanceAccountBody.getText().isEmpty();
		boolean expcashOpeningBalanceAccountBody = false;
		
		cashOpeningBalanceAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashInDefaultAccountTxt));
		cashInDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actcashInDefaultAccountBody = cashInDefaultAccountBody.getText().isEmpty();
		boolean expcashInDefaultAccountBody = false;
		
		cashInDefaultAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashOutDefaultAccountTxt));
		cashOutDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actcashOutDefaultAccountBody = cashOutDefaultAccountBody.getText().isEmpty();
		boolean expcashOutDefaultAccountBody = false;
		
		cashOutDefaultAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashCollectionDefaultAccountTxt));
		cashCollectionDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actcashCollectionDefaultAccountBody = cashCollectionDefaultAccountBody.getText().isEmpty();
		boolean expcashCollectionDefaultAccountBody = false;
		
		cashCollectionDefaultAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayEndDifferenceAccountTxt));
		dayEndDifferenceAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actdayEndDifferenceAccountBody = dayEndDifferenceAccountBody.getText().isEmpty();
		boolean expdayEndDifferenceAccountBody = false;
		
		dayEndDifferenceAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayEndStockAccountTxt));
		dayEndStockAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actdayEndStockAccountBody = dayEndStockAccountBody.getText().isEmpty();
		boolean expdayEndStockAccountBody = false;
		
		dayEndStockAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayEndWastageAccountTxt));
		dayEndWastageAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actdayEndWastageAccountBody = dayEndWastageAccountBody.getText().isEmpty();
		boolean expdayEndWastageAccountBody = false;
		
		dayEndWastageAccountTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(roundOffAccountTxt));
		roundOffAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actroundOffAccountBody = roundOffAccountBody.getText().isEmpty();
		boolean exproundOffAccountBody = false;
		
		roundOffAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wastageCreditAccountTxt));
		wastageCreditAccountTxt.sendKeys(Keys.SPACE);
		
		boolean actwastageCreditAccountBody = wastageCreditAccountBody.getText().isEmpty();
		boolean expwastageCreditAccountBody = false;
		
		wastageCreditAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountingTagTxt));
		accountingTagTxt.sendKeys(Keys.SPACE);
		
		boolean actaccountingTagBody = accountingTagBody.getText().isEmpty();
		boolean expaccountingTagBody = false;
		
		accountingTagTxt.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posCloseBtn));
		posCloseBtn.click();
		
		
			
			
		System.out.println("***************************************checkSavingAccountSettingsInPosPreferences***************************************");
		 
		System.out.println("salesAccountBody                  : "+actsalesAccountBody                   +" Value Expected : "+expsalesAccountBody);
		System.out.println("customerDefaultAccountBody        : "+actcustomerDefaultAccountBody         +" Value Expected : "+expcustomerDefaultAccountBody);
		System.out.println("preOrderSalesAccountBody          : "+actpreOrderSalesAccountBody           +" Value Expected : "+exppreOrderSalesAccountBody);
		System.out.println("preOrderCustomerDefaultAccountBody: "+actpreOrderCustomerDefaultAccountBody +" Value Expected : "+exppreOrderCustomerDefaultAccountBody);
		System.out.println("salesReturnAccountBody            : "+actsalesReturnAccountBody             +" Value Expected : "+expsalesReturnAccountBody);
		System.out.println("cashAccountBody                   : "+actcashAccountBody                    +" Value Expected : "+expcashAccountBody);
		System.out.println("cardAccountBody                   : "+actcardAccountBody                    +" Value Expected : "+expcardAccountBody);
		System.out.println("couponAccountBody                 : "+actcouponAccountBody                  +" Value Expected : "+expcouponAccountBody);
		System.out.println("creditNoteAccountBody             : "+actcreditNoteAccountBody              +" Value Expected : "+expcreditNoteAccountBody);
		System.out.println("pointsAccountBody                 : "+actpointsAccountBody                  +" Value Expected : "+exppointsAccountBody);
		System.out.println("ePaymentAccountBody               : "+actePaymentAccountBody                +" Value Expected : "+expePaymentAccountBody);
		System.out.println("creditSalesDefaultAccountBody     : "+actcreditSalesDefaultAccountBody      +" Value Expected : "+expcreditSalesDefaultAccountBody);
		System.out.println("discountAccountBody               : "+actdiscountAccountBody                +" Value Expected : "+expdiscountAccountBody);
		System.out.println("goodsExchangeAccountBody          : "+actgoodsExchangeAccountBody           +" Value Expected : "+expgoodsExchangeAccountBody);
		System.out.println("itemExchangeDifferenceAccountBody : "+actitemExchangeDifferenceAccountBody  +" Value Expected : "+expitemExchangeDifferenceAccountBody);
		System.out.println("spoilageAccountBody               : "+actspoilageAccountBody                +" Value Expected : "+expspoilageAccountBody);
		System.out.println("cashOpeningBalanceAccountBody     : "+actcashOpeningBalanceAccountBody      +" Value Expected : "+expcashOpeningBalanceAccountBody);
		System.out.println("cashInDefaultAccountBody          : "+actcashInDefaultAccountBody           +" Value Expected : "+expcashInDefaultAccountBody);
		System.out.println("cashOutDefaultAccountBody         : "+actcashOutDefaultAccountBody          +" Value Expected : "+expcashOutDefaultAccountBody);
		System.out.println("cashCollectionDefaultAccountBody  : "+actcashCollectionDefaultAccountBody   +" Value Expected : "+expcashCollectionDefaultAccountBody);
		System.out.println("dayEndDifferenceAccountBody       : "+actdayEndDifferenceAccountBody        +" Value Expected : "+expdayEndDifferenceAccountBody);
		System.out.println("dayEndStockAccountBody            : "+actdayEndStockAccountBody             +" Value Expected : "+expdayEndStockAccountBody);
		System.out.println("dayEndWastageAccountBody          : "+actdayEndWastageAccountBody           +" Value Expected : "+expdayEndWastageAccountBody);
		System.out.println("roundOffAccountBody               : "+actroundOffAccountBody                +" Value Expected : "+exproundOffAccountBody);
		System.out.println("wastageCreditAccountBody          : "+actwastageCreditAccountBody           +" Value Expected : "+expwastageCreditAccountBody);
		System.out.println("accountingTagBody                 : "+actaccountingTagBody                  +" Value Expected : "+expaccountingTagBody);
		
		
		
		if(actsalesAccountBody==expsalesAccountBody && actcustomerDefaultAccountBody==expcustomerDefaultAccountBody && actpreOrderSalesAccountBody==exppreOrderSalesAccountBody
				&& actpreOrderCustomerDefaultAccountBody==exppreOrderCustomerDefaultAccountBody && actsalesReturnAccountBody==expsalesReturnAccountBody
				&& actcashAccountBody==expcashAccountBody && actcardAccountBody==expcardAccountBody && actcouponAccountBody==expcouponAccountBody 
				&& actcreditNoteAccountBody==expcreditNoteAccountBody && actpointsAccountBody==exppointsAccountBody && actePaymentAccountBody==expePaymentAccountBody
				&& actcreditSalesDefaultAccountBody==expcreditSalesDefaultAccountBody && actdiscountAccountBody==expdiscountAccountBody
				&& actgoodsExchangeAccountBody==expgoodsExchangeAccountBody && actitemExchangeDifferenceAccountBody==expitemExchangeDifferenceAccountBody
				&& actspoilageAccountBody==expspoilageAccountBody && actcashOpeningBalanceAccountBody==expcashOpeningBalanceAccountBody
				&& actcashInDefaultAccountBody==expcashInDefaultAccountBody && actcashOutDefaultAccountBody==expcashOutDefaultAccountBody
				&& actcashCollectionDefaultAccountBody==expcashCollectionDefaultAccountBody && actdayEndDifferenceAccountBody==expdayEndDifferenceAccountBody
				&& actdayEndStockAccountBody==expdayEndStockAccountBody && actdayEndWastageAccountBody==expdayEndWastageAccountBody
				&& actroundOffAccountBody==exproundOffAccountBody && actwastageCreditAccountBody==expwastageCreditAccountBody && actaccountingTagBody==expaccountingTagBody)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	public static boolean checkSavingAccountSettingsInPosPreferences() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		Thread.sleep(8000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
		pointOfSaleUtilitiesMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
		posUtilitiesPreferencesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posAccountBtn));
		posAccountBtn.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutletBtn));

		Select posOutletSelect = new Select(posOutLetDropDown);
		posOutletSelect.selectByVisibleText("Outlet1");
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int salesAccountListCount=salesAccountList.size();
		
		for(int i=0;i<salesAccountListCount;i++)
		{
			String data = salesAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Sales Account"))
			{
				salesAccountList.get(i).click();
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDefaultAccountTxt));
		customerDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int customerDefaultAccountListCount=customerDefaultAccountList.size();
		
		for(int i=0;i<customerDefaultAccountListCount;i++)
		{
			String data = customerDefaultAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Customer Default Account"))
			{
				customerDefaultAccountList.get(i).click();
				break;
			}
		}
		
		customerDefaultAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderSalesAccountTxt));
		preOrderSalesAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int preOrderSalesAccountListCount=preOrderSalesAccountList.size();
		
		for(int i=0;i<preOrderSalesAccountListCount;i++)
		{
			String data = preOrderSalesAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Pre Order Account"))
			{
				preOrderSalesAccountList.get(i).click();
				break;
			}
		}
		
		preOrderSalesAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderCustomerDefaultAccountTxt));
		preOrderCustomerDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int preOrderCustomerDefaultAccountListCount=preOrderCustomerDefaultAccountList.size();
		
		for(int i=0;i<preOrderCustomerDefaultAccountListCount;i++)
		{
			String data = preOrderCustomerDefaultAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Customer Default Account"))
			{
				preOrderCustomerDefaultAccountList.get(i).click();
				break;
			}
		}
		
		preOrderCustomerDefaultAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnAccountTxt));
		salesReturnAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int salesReturnAccountListCount=salesReturnAccountList.size();
		
		for(int i=0;i<salesReturnAccountListCount;i++)
		{
			String data = salesReturnAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Sales Return Account"))
			{
				salesReturnAccountList.get(i).click();
				break;
			}
		}
		
		salesReturnAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAccountTxt));
		cashAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int cashAccountListCount=cashAccountList.size();
		
		for(int i=0;i<cashAccountListCount;i++)
		{
			String data = cashAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Cash Account"))
			{
				cashAccountList.get(i).click();
				break;
			}
		}
		
		cashAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cardAccountTxt));
		cardAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int cardAccountListCount=cardAccountList.size();
		
		for(int i=0;i<cardAccountListCount;i++)
		{
			String data = cardAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Card Account"))
			{
				cardAccountList.get(i).click();
				break;
			}
		}
		
		cardAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(couponAccountTxt));
		couponAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int couponAccountListCount=couponAccountList.size();
		
		for(int i=0;i<couponAccountListCount;i++)
		{
			String data = couponAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Coupon Account"))
			{
				couponAccountList.get(i).click();
				break;
			}
		}
		
		couponAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNoteAccountTxt));
		creditNoteAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int creditNoteAccountListCount=creditNoteAccountList.size();
		
		for(int i=0;i<creditNoteAccountListCount;i++)
		{
			String data = creditNoteAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Credit Note Account"))
			{
				creditNoteAccountList.get(i).click();
				break;
			}
		}
		
		creditNoteAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointsAccountTxt));
		pointsAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int pointsAccountListCount=pointsAccountList.size();
		
		for(int i=0;i<pointsAccountListCount;i++)
		{
			String data = pointsAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Points Account"))
			{
				pointsAccountList.get(i).click();
				break;
			}
		}
		
		pointsAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ePaymentAccountTxt));
		ePaymentAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int ePaymentAccountListCount=ePaymentAccountList.size();
		
		for(int i=0;i<ePaymentAccountListCount;i++)
		{
			String data = ePaymentAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Bank"))
			{
				ePaymentAccountList.get(i).click();
				break;
			}
		}
		
		ePaymentAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditSalesDefaultAccountTxt));
		creditSalesDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int creditSalesDefaultAccountListCount=creditSalesDefaultAccountList.size();
		
		for(int i=0;i<creditSalesDefaultAccountListCount;i++)
		{
			String data = creditSalesDefaultAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Customer C"))
			{
				creditSalesDefaultAccountList.get(i).click();
				break;
			}
		}
		
		creditSalesDefaultAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountAccountTxt));
		discountAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int discountAccountListCount=discountAccountList.size();
		
		for(int i=0;i<discountAccountListCount;i++)
		{
			String data = discountAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Discount Account"))
			{
				discountAccountList.get(i).click();
				break;
			}
		}
		
		discountAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(goodsExchangeAccountTxt));
		goodsExchangeAccountTxt.sendKeys("p");
		
		Thread.sleep(2000);
		
		int goodsExchangeAccountListCount=goodsExchangeAccountList.size();
		
		for(int i=0;i<goodsExchangeAccountListCount;i++)
		{
			String data = goodsExchangeAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Profit/Loss A/C"))
			{
				goodsExchangeAccountList.get(i).click();
				break;
			}
		}
		
		goodsExchangeAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemExchangeDifferenceAccountTxt));
		itemExchangeDifferenceAccountTxt.sendKeys("p");
		
		Thread.sleep(2000);
		
		int itemExchangeDifferenceAccountListCount=itemExchangeDifferenceAccountList.size();
		
		for(int i=0;i<itemExchangeDifferenceAccountListCount;i++)
		{
			String data = itemExchangeDifferenceAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Profit/Loss A/C"))
			{
				itemExchangeDifferenceAccountList.get(i).click();
				break;
			}
		}
		
		itemExchangeDifferenceAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(spoilageAccountTxt));
		spoilageAccountTxt.sendKeys("p");
		
		Thread.sleep(2000);
		
		int spoilageAccountListCount=spoilageAccountList.size();
		
		for(int i=0;i<spoilageAccountListCount;i++)
		{
			String data = spoilageAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Profit/Loss A/C"))
			{
				spoilageAccountList.get(i).click();
				break;
			}
		}
		
		spoilageAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashOpeningBalanceAccountTxt));
		cashOpeningBalanceAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int cashOpeningBalanceAccountListCount=cashOpeningBalanceAccountList.size();
		
		for(int i=0;i<cashOpeningBalanceAccountListCount;i++)
		{
			String data = cashOpeningBalanceAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Cash"))
			{
				cashOpeningBalanceAccountList.get(i).click();
				break;
			}
		}
		
		cashOpeningBalanceAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashInDefaultAccountTxt));
		cashInDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int cashInDefaultAccountListCount=cashInDefaultAccountList.size();
		
		for(int i=0;i<cashInDefaultAccountListCount;i++)
		{
			String data = cashInDefaultAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Cash"))
			{
				cashInDefaultAccountList.get(i).click();
				break;
			}
		}
		
		cashInDefaultAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashOutDefaultAccountTxt));
		cashOutDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int cashOutDefaultAccountListCount=cashOutDefaultAccountList.size();
		
		for(int i=0;i<cashOutDefaultAccountListCount;i++)
		{
			String data = cashOutDefaultAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Bank Charges"))
			{
				cashOutDefaultAccountList.get(i).click();
				break;
			}
		}
		
		cashOutDefaultAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashCollectionDefaultAccountTxt));
		cashCollectionDefaultAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int cashCollectionDefaultAccountListCount=cashCollectionDefaultAccountList.size();
		
		for(int i=0;i<cashCollectionDefaultAccountListCount;i++)
		{
			String data = cashCollectionDefaultAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Cash Account"))
			{
				cashCollectionDefaultAccountList.get(i).click();
				break;
			}
		}
		
		cashCollectionDefaultAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayEndDifferenceAccountTxt));
		dayEndDifferenceAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int dayEndDifferenceAccountListCount=dayEndDifferenceAccountList.size();
		
		for(int i=0;i<dayEndDifferenceAccountListCount;i++)
		{
			String data = dayEndDifferenceAccountList.get(i).getText();
			if(data.equalsIgnoreCase("EOD Difference Account"))
			{
				dayEndDifferenceAccountList.get(i).click();
				break;
			}
		}
		
		dayEndDifferenceAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayEndStockAccountTxt));
		dayEndStockAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int dayEndStockAccountListCount=dayEndStockAccountList.size();
		
		for(int i=0;i<dayEndStockAccountListCount;i++)
		{
			String data = dayEndStockAccountList.get(i).getText();
			if(data.equalsIgnoreCase("EOD Difference Account"))
			{
				dayEndStockAccountList.get(i).click();
				break;
			}
		}
		
		dayEndStockAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayEndWastageAccountTxt));
		dayEndWastageAccountTxt.sendKeys("p");
		
		Thread.sleep(2000);
		
		int dayEndWastageAccountListCount=dayEndWastageAccountList.size();
		
		for(int i=0;i<dayEndWastageAccountListCount;i++)
		{
			String data = dayEndWastageAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Profit/Loss A/C"))
			{
				dayEndWastageAccountList.get(i).click();
				break;
			}
		}
		
		dayEndWastageAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(roundOffAccountTxt));
		roundOffAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int roundOffAccountListCount=roundOffAccountList.size();
		
		for(int i=0;i<roundOffAccountListCount;i++)
		{
			String data = roundOffAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Round Off Account"))
			{
				roundOffAccountList.get(i).click();
				break;
			}
		}
		
		roundOffAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wastageCreditAccountTxt));
		wastageCreditAccountTxt.sendKeys("p");
		
		Thread.sleep(2000);
		
		int wastageCreditAccountListCount=wastageCreditAccountList.size();
		
		for(int i=0;i<wastageCreditAccountListCount;i++)
		{
			String data = wastageCreditAccountList.get(i).getText();
			if(data.equalsIgnoreCase("Profit/Loss A/C"))
			{
				wastageCreditAccountList.get(i).click();
				break;
			}
		}
		
		wastageCreditAccountTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountingTagTxt));
		accountingTagTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		int accountingTagListCount=accountingTagList.size();
		
		for(int i=0;i<accountingTagListCount;i++)
		{
			String data = accountingTagList.get(i).getText();
			if(data.equalsIgnoreCase("Outlet1"))
			{
				accountingTagList.get(i).click();
				break;
			}
		}
		
		accountingTagTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
		posSaveBtn.click();
		
		Thread.sleep(2000);
		
		boolean actposInformationPopup      = posInformationPopup.isDisplayed();
		boolean actposInformationPopupBody  = posInformationPopupBody.isDisplayed();
		boolean actposInformationPopupOkBtn = posInformationPopupOkBtn.isDisplayed();
		
		boolean expposInformationPopup      = true;
		boolean expposInformationPopupBody  = true;
		boolean expposInformationPopupOkBtn = true;
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
		posInformationPopupOkBtn.click();
			
		System.out.println("***************************************checkSavingAccountSettingsInPosPreferences***************************************");
		 
		System.out.println("posInformationPopup       : "+actposInformationPopup     +" Value Expected : "+expposInformationPopup);
		System.out.println("posInformationPopupBody   : "+actposInformationPopupBody +" Value Expected : "+expposInformationPopupBody);
		System.out.println("posInformationPopupOkBtn  : "+actposInformationPopupOkBtn+" Value Expected : "+expposInformationPopupOkBtn);
		
		
		if(actposInformationPopup==expposInformationPopup && actposInformationPopupBody==expposInformationPopupBody
				&& actposInformationPopupOkBtn==expposInformationPopupOkBtn)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	@FindBy(xpath="//h5[@class='modal-title pos-modal-header-caption']")
	private static WebElement posInformationPopup;
	
	@FindBy(xpath="//div[@id='divMessageModalBody']")
	private static WebElement posInformationPopupBody;
	
	@FindBy(xpath="//*[@id='divMessageModalFooter']/div/div/div/div[1]/span")
	private static WebElement posInformationPopupOkBtn;
	
	
	
	public static boolean checkSavedAccountsInPointOfSalePreferencesMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		Thread.sleep(8000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
		pointOfSaleUtilitiesMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
		posUtilitiesPreferencesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posAccountBtn));
		posAccountBtn.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutletBtn));

		Select posOutletSelect = new Select(posOutLetDropDown);
		posOutletSelect.selectByVisibleText("Outlet1");
	
		Thread.sleep(2000);
		
		
			
		String actposOutLetDropDown                   = posOutLetDropDown.getAttribute("value");
		String actsalesAccountTxt                     = salesAccountTxt.getAttribute("value");
		String actcustomerDefaultAccountTxt           = customerDefaultAccountTxt.getAttribute("value");
		String actpreOrderSalesAccountTxt             = preOrderSalesAccountTxt.getAttribute("value");
		String actpreOrderCustomerDefaultAccountTxt   = preOrderCustomerDefaultAccountTxt.getAttribute("value");
		String actsalesReturnAccountTxt               = salesReturnAccountTxt.getAttribute("value");
		String actcashAccountTxt                      = cashAccountTxt.getAttribute("value");
		String actcardAccountTxt                      = cardAccountTxt.getAttribute("value");
		String actcouponAccountTxt                    = couponAccountTxt.getAttribute("value");
		String actcreditNoteAccountTxt                = creditNoteAccountTxt.getAttribute("value");
		String actpointsAccountTxt                    = pointsAccountTxt.getAttribute("value");
		String actePaymentAccountTxt                  = ePaymentAccountTxt.getAttribute("value");
		String actcreditSalesDefaultAccountTxt        = creditSalesDefaultAccountTxt.getAttribute("value");
		String actdiscountAccountTxt                  = discountAccountTxt.getAttribute("value");
		String actgoodsExchangeAccountTxt             = goodsExchangeAccountTxt.getAttribute("value");
		String actitemExchangeDifferenceAccountTxt    = itemExchangeDifferenceAccountTxt.getAttribute("value");
		String actspoilageAccountTxt                  = spoilageAccountTxt.getAttribute("value");
		String actcashOpeningBalanceAccountTxt        = cashOpeningBalanceAccountTxt.getAttribute("value");
		String actcashInDefaultAccountTxt             = cashInDefaultAccountTxt.getAttribute("value");
		String actcashOutDefaultAccountTxt            = cashOutDefaultAccountTxt.getAttribute("value");
		String actcashCollectionDefaultAccountTxt     = cashCollectionDefaultAccountTxt.getAttribute("value");
		String actdayEndDifferenceAccountTxt          = dayEndDifferenceAccountTxt.getAttribute("value");
		String actdayEndStockAccountTxt               = dayEndStockAccountTxt.getAttribute("value");
		String actdayEndWastageAccountTxt             = dayEndWastageAccountTxt.getAttribute("value");
		String actroundOffAccountTxt                  = roundOffAccountTxt.getAttribute("value");
		String actwastageCreditAccountTxt             = wastageCreditAccountTxt.getAttribute("value");
		String actaccountingTagTxt                    = accountingTagTxt.getAttribute("value");
		
		
		// Expected
		 
		String expposOutLetDropDown                   = "1";
		String expsalesAccountTxt                     = "Sales Account";
		String expcustomerDefaultAccountTxt           = "Customer Default Account";
		String exppreOrderSalesAccountTxt             = "Pre Order Account";
		String exppreOrderCustomerDefaultAccountTxt   = "Customer Default Account";
		String expsalesReturnAccountTxt               = "Sales Return Account";
		String expcashAccountTxt                      = "Cash Account";
		String expcardAccountTxt                      = "Card Account";
		String expcouponAccountTxt                    = "Coupon Account";
		String expcreditNoteAccountTxt                = "Credit Note Account";
		String exppointsAccountTxt                    = "Points Account";
		String expePaymentAccountTxt                  = "Bank";
		String expcreditSalesDefaultAccountTxt        = "Customer C";
		String expdiscountAccountTxt                  = "Discount Account";
		String expgoodsExchangeAccountTxt             = "Profit/Loss A/C";
		String expitemExchangeDifferenceAccountTxt    = "Profit/Loss A/C";
		String expspoilageAccountTxt                  = "Profit/Loss A/C";
		String expcashOpeningBalanceAccountTxt        = "Cash";
		String expcashInDefaultAccountTxt             = "Cash";
		String expcashOutDefaultAccountTxt            = "Bank Charges";
		String expcashCollectionDefaultAccountTxt     = "Cash Account";
		String expdayEndDifferenceAccountTxt          = "EOD Difference Account";
		String expdayEndStockAccountTxt               = "EOD Difference Account";
		String expdayEndWastageAccountTxt             = "Profit/Loss A/C";
		String exproundOffAccountTxt                  = "Round Off Account";
		String expwastageCreditAccountTxt             = "Profit/Loss A/C";
		String expaccountingTagTxt                    = "Outlet1";
			
		System.out.println("***************************************checkSavedAccountsInPointOfSalePreferencesMenu***************************************");
		 
		System.out.println("posOutLetDropDown                 : "+actposOutLetDropDown                  +" Value Expected : "+expposOutLetDropDown);
		System.out.println("salesAccountTxt                   : "+actsalesAccountTxt                    +" Value Expected : "+expsalesAccountTxt);
		System.out.println("customerDefaultAccountTxt         : "+actcustomerDefaultAccountTxt          +" Value Expected : "+expcustomerDefaultAccountTxt);
		System.out.println("preOrderSalesAccountTxt           : "+actpreOrderSalesAccountTxt            +" Value Expected : "+exppreOrderSalesAccountTxt);
		System.out.println("preOrderCustomerDefaultAccountTxt : "+actpreOrderCustomerDefaultAccountTxt  +" Value Expected : "+exppreOrderCustomerDefaultAccountTxt);
		System.out.println("salesReturnAccountTxt             : "+actsalesReturnAccountTxt              +" Value Expected : "+expsalesReturnAccountTxt);
		System.out.println("cashAccountTxt                    : "+actcashAccountTxt                     +" Value Expected : "+expcashAccountTxt);
		System.out.println("cardAccountTxt                    : "+actcardAccountTxt                     +" Value Expected : "+expcardAccountTxt);
		System.out.println("couponAccountTxt                  : "+actcouponAccountTxt                   +" Value Expected : "+expcouponAccountTxt);
		System.out.println("creditNoteAccountTxt              : "+actcreditNoteAccountTxt               +" Value Expected : "+expcreditNoteAccountTxt);
		System.out.println("pointsAccountTxt                  : "+actpointsAccountTxt                   +" Value Expected : "+exppointsAccountTxt);
		System.out.println("ePaymentAccountTxt                : "+actePaymentAccountTxt                 +" Value Expected : "+expePaymentAccountTxt);
		System.out.println("creditSalesDefaultAccountTxt      : "+actcreditSalesDefaultAccountTxt       +" Value Expected : "+expcreditSalesDefaultAccountTxt);
		System.out.println("discountAccountTxt                : "+actdiscountAccountTxt                 +" Value Expected : "+expdiscountAccountTxt);
		System.out.println("goodsExchangeAccountTxt           : "+actgoodsExchangeAccountTxt            +" Value Expected : "+expgoodsExchangeAccountTxt);
		System.out.println("itemExchangeDifferenceAccountTxt  : "+actitemExchangeDifferenceAccountTxt   +" Value Expected : "+expitemExchangeDifferenceAccountTxt);
		System.out.println("spoilageAccountTxt                : "+actspoilageAccountTxt                 +" Value Expected : "+expspoilageAccountTxt);
		System.out.println("cashOpeningBalanceAccountTxt      : "+actcashOpeningBalanceAccountTxt       +" Value Expected : "+expcashOpeningBalanceAccountTxt);
		System.out.println("cashInDefaultAccountTxt           : "+actcashInDefaultAccountTxt            +" Value Expected : "+expcashInDefaultAccountTxt);
		System.out.println("cashOutDefaultAccountTxt          : "+actcashOutDefaultAccountTxt           +" Value Expected : "+expcashOutDefaultAccountTxt);
		System.out.println("cashCollectionDefaultAccountTxt   : "+actcashCollectionDefaultAccountTxt    +" Value Expected : "+expcashCollectionDefaultAccountTxt);
		System.out.println("dayEndDifferenceAccountTxt        : "+actdayEndDifferenceAccountTxt         +" Value Expected : "+expdayEndDifferenceAccountTxt);
		System.out.println("dayEndStockAccountTxt             : "+actdayEndStockAccountTxt              +" Value Expected : "+expdayEndStockAccountTxt);
		System.out.println("dayEndWastageAccountTxt           : "+actdayEndWastageAccountTxt            +" Value Expected : "+expdayEndWastageAccountTxt);
		System.out.println("roundOffAccountTxt                : "+actroundOffAccountTxt                 +" Value Expected : "+exproundOffAccountTxt);
		System.out.println("wastageCreditAccountTxt           : "+actwastageCreditAccountTxt            +" Value Expected : "+expwastageCreditAccountTxt);
		System.out.println("accountingTagTxt                  : "+actaccountingTagTxt                   +" Value Expected : "+expaccountingTagTxt);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posCloseBtn));
		posCloseBtn.click();
		
		if(actposOutLetDropDown.equalsIgnoreCase(expposOutLetDropDown)
				&& actsalesAccountTxt.equalsIgnoreCase(expsalesAccountTxt) && actcustomerDefaultAccountTxt.equalsIgnoreCase(expcustomerDefaultAccountTxt) && actpreOrderSalesAccountTxt.equalsIgnoreCase(exppreOrderSalesAccountTxt)
				&& actpreOrderCustomerDefaultAccountTxt.equalsIgnoreCase(exppreOrderCustomerDefaultAccountTxt) && actsalesReturnAccountTxt.equalsIgnoreCase(expsalesReturnAccountTxt)
				&& actcashAccountTxt.equalsIgnoreCase(expcashAccountTxt) && actcardAccountTxt.equalsIgnoreCase(expcardAccountTxt) && actcouponAccountTxt.equalsIgnoreCase(expcouponAccountTxt) 
				&& actcreditNoteAccountTxt.equalsIgnoreCase(expcreditNoteAccountTxt) && actpointsAccountTxt.equalsIgnoreCase(exppointsAccountTxt) && actePaymentAccountTxt.equalsIgnoreCase(expePaymentAccountTxt)
				&& actcreditSalesDefaultAccountTxt.equalsIgnoreCase(expcreditSalesDefaultAccountTxt) && actdiscountAccountTxt.equalsIgnoreCase(expdiscountAccountTxt) && actgoodsExchangeAccountTxt.equalsIgnoreCase(expgoodsExchangeAccountTxt)
				&& actitemExchangeDifferenceAccountTxt.equalsIgnoreCase(expitemExchangeDifferenceAccountTxt) && actspoilageAccountTxt.equalsIgnoreCase(expspoilageAccountTxt) 
				&& actcashOpeningBalanceAccountTxt.equalsIgnoreCase(expcashOpeningBalanceAccountTxt) && actcashInDefaultAccountTxt.equalsIgnoreCase(expcashInDefaultAccountTxt) && actcashOutDefaultAccountTxt.equalsIgnoreCase(expcashOutDefaultAccountTxt)
				&& actcashCollectionDefaultAccountTxt.equalsIgnoreCase(expcashCollectionDefaultAccountTxt) && actdayEndDifferenceAccountTxt.equalsIgnoreCase(expdayEndDifferenceAccountTxt) 
				&& actdayEndStockAccountTxt.equalsIgnoreCase(expdayEndStockAccountTxt) && actdayEndWastageAccountTxt.equalsIgnoreCase(expdayEndWastageAccountTxt) && actroundOffAccountTxt.equalsIgnoreCase(exproundOffAccountTxt)
				&& actwastageCreditAccountTxt.equalsIgnoreCase(expwastageCreditAccountTxt) && actaccountingTagTxt.equalsIgnoreCase(expaccountingTagTxt))
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	
	@FindBy(xpath="//select[@id='ddlPOSVoucher']")
	private static WebElement pointOfSaleVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlJournalPosting']")
	private static WebElement journalPostingVouhcerDropDown;
	
	@FindBy(xpath="//select[@id='ddlPreOrderVoucher']")
	private static WebElement preOrderVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlPreOrderCancelVoucher']")
	private static WebElement preOrderCancelVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlSalesReturnVoucher']")
	private static WebElement salesReturnsVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlCashSalesReturnVoucher']")
	private static WebElement salesReturnsJournalVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlDeliveryNoteVoucher']")
	private static WebElement homeDeliveryVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlGiftVoucher']")
	private static WebElement giftVoucherSaleVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlCashInVoucher']")
	private static WebElement cashInVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlCashOutVoucher']")
	private static WebElement cashOutVouhcerDropDown;
	
	@FindBy(xpath="//select[@id='ddlCashCollVoucher']")
	private static WebElement cashCollectionVouhcerDropDown;
	
	@FindBy(xpath="//select[@id='ddlVochrTypeForKitng']")
	private static WebElement voucherTypeOfKittingDropDown;
	
	@FindBy(xpath="//select[@id='ddlVochrTypeForDeKitng']")
	private static WebElement voucherTypeOfDeKittingDropDown;
	
	@FindBy(xpath="//select[@id='ddlVoidAdjustVoucher']")
	private static WebElement voidAdjustmentVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlEODVoucher']")
	private static WebElement dayEndVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlEODWastagePostingVoucher']")
	private static WebElement wastageVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlIssueProcessVoucher']")
	private static WebElement issueProcessVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlReceiveFromProductionVoucher']")
	private static WebElement receiveFromProductionVoucherDropDown;
	
	@FindBy(xpath="//select[@id='ddlShortageInStockVoucher']")
	private static WebElement shortageOfStockVoucherDropDown;
	
	
	public static boolean checkPostingInPointOfSalePreferencesMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		Thread.sleep(8000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
		pointOfSaleUtilitiesMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
		posUtilitiesPreferencesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPostingBtn));
		posPostingBtn.click();
	
		Thread.sleep(2000);
		
		boolean actpointOfSaleVoucherDropDown           = pointOfSaleVoucherDropDown.isDisplayed();
		boolean actjournalPostingVouhcerDropDown        = journalPostingVouhcerDropDown.isDisplayed();
			
		boolean actpreOrderVoucherDropDown               = preOrderVoucherDropDown.isDisplayed();
		boolean actpreOrderCancelVoucherDropDown         = preOrderCancelVoucherDropDown.isDisplayed();
		boolean actsalesReturnsVoucherDropDown           = salesReturnsVoucherDropDown.isDisplayed();
		boolean actsalesReturnsJournalVoucherDropDown    = salesReturnsJournalVoucherDropDown.isDisplayed();
		boolean acthomeDeliveryVoucherDropDown           = homeDeliveryVoucherDropDown.isDisplayed();
		boolean actgiftVoucherSaleVoucherDropDown        = giftVoucherSaleVoucherDropDown.isDisplayed();
		boolean actcashInVoucherDropDown                 = cashInVoucherDropDown.isDisplayed();
		boolean actcashOutVouhcerDropDown                = cashOutVouhcerDropDown.isDisplayed();
		boolean actcashCollectionVouhcerDropDown         = cashCollectionVouhcerDropDown.isDisplayed();
		boolean actvoucherTypeOfKittingDropDown          = voucherTypeOfKittingDropDown.isDisplayed();
		boolean actvoucherTypeOfDeKittingDropDown        = voucherTypeOfDeKittingDropDown.isDisplayed();
		boolean actvoidAdjustmentVoucherDropDown         = voidAdjustmentVoucherDropDown.isDisplayed();
		boolean actdayEndVoucherDropDown                 = dayEndVoucherDropDown.isDisplayed();
		boolean actwastageVoucherDropDown                = wastageVoucherDropDown.isDisplayed();
		boolean actissueProcessVoucherDropDown           = issueProcessVoucherDropDown.isDisplayed();
		boolean actreceiveFromProductionVoucherDropDown  = receiveFromProductionVoucherDropDown.isDisplayed();
		boolean actshortageOfStockVoucherDropDown        = shortageOfStockVoucherDropDown.isDisplayed();
		
		
		// Expected
		
		boolean exppointOfSaleVoucherDropDown           = true;
		boolean expjournalPostingVouhcerDropDown        = true;
		 
		boolean exppreOrderVoucherDropDown               = true;
		boolean exppreOrderCancelVoucherDropDown         = true;
		boolean expsalesReturnsVoucherDropDown           = true;
		boolean expsalesReturnsJournalVoucherDropDown    = true;
		boolean exphomeDeliveryVoucherDropDown           = true;
		boolean expgiftVoucherSaleVoucherDropDown        = true;
		boolean expcashInVoucherDropDown                 = true;
		boolean expcashOutVouhcerDropDown                = true;
		boolean expcashCollectionVouhcerDropDown         = true;
		boolean expvoucherTypeOfKittingDropDown          = true;
		boolean expvoucherTypeOfDeKittingDropDown        = true;
		boolean expvoidAdjustmentVoucherDropDown         = true;
		boolean expdayEndVoucherDropDown                 = true;
		boolean expwastageVoucherDropDown                = true;
		boolean expissueProcessVoucherDropDown           = true;
		boolean expreceiveFromProductionVoucherDropDown  = true;
		boolean expshortageOfStockVoucherDropDown        = true;
			
		System.out.println("***************************************checkPostingInPointOfSalePreferencesMenu***************************************");
		 
		
		System.out.println("pointOfSaleVoucherDropDown            : "+actpointOfSaleVoucherDropDown            +" Value Expected : "+exppointOfSaleVoucherDropDown);
		System.out.println("journalPostingVouhcerDropDown         : "+actjournalPostingVouhcerDropDown         +" Value Expected : "+expjournalPostingVouhcerDropDown);
		System.out.println("preOrderVoucherDropDown               : "+actpreOrderVoucherDropDown               +" Value Expected : "+exppreOrderVoucherDropDown);
		System.out.println("preOrderCancelVoucherDropDown         : "+actpreOrderCancelVoucherDropDown         +" Value Expected : "+exppreOrderCancelVoucherDropDown);
		System.out.println("salesReturnsVoucherDropDown           : "+actsalesReturnsVoucherDropDown           +" Value Expected : "+expsalesReturnsVoucherDropDown);
		System.out.println("salesReturnsJournalVoucherDropDown    : "+actsalesReturnsJournalVoucherDropDown    +" Value Expected : "+expsalesReturnsJournalVoucherDropDown);
		System.out.println("homeDeliveryVoucherDropDown           : "+acthomeDeliveryVoucherDropDown           +" Value Expected : "+exphomeDeliveryVoucherDropDown);
		System.out.println("giftVoucherSaleVoucherDropDown        : "+actgiftVoucherSaleVoucherDropDown        +" Value Expected : "+expgiftVoucherSaleVoucherDropDown);
		System.out.println("cashInVoucherDropDown                 : "+actcashInVoucherDropDown                 +" Value Expected : "+expcashInVoucherDropDown);
		System.out.println("cashOutVouhcerDropDown                : "+actcashOutVouhcerDropDown                +" Value Expected : "+expcashOutVouhcerDropDown);
		System.out.println("cashCollectionVouhcerDropDown         : "+actcashCollectionVouhcerDropDown         +" Value Expected : "+expcashCollectionVouhcerDropDown);
		System.out.println("voucherTypeOfKittingDropDown          : "+actvoucherTypeOfKittingDropDown          +" Value Expected : "+expvoucherTypeOfKittingDropDown);
		System.out.println("voucherTypeOfDeKittingDropDown        : "+actvoucherTypeOfDeKittingDropDown        +" Value Expected : "+expvoucherTypeOfDeKittingDropDown);
		System.out.println("voidAdjustmentVoucherDropDown         : "+actvoidAdjustmentVoucherDropDown         +" Value Expected : "+expvoidAdjustmentVoucherDropDown);
		System.out.println("dayEndVoucherDropDown                 : "+actdayEndVoucherDropDown                 +" Value Expected : "+expdayEndVoucherDropDown);
		System.out.println("wastageVoucherDropDown                : "+actwastageVoucherDropDown                +" Value Expected : "+expwastageVoucherDropDown);
		System.out.println("issueProcessVoucherDropDown           : "+actissueProcessVoucherDropDown           +" Value Expected : "+expissueProcessVoucherDropDown);
		System.out.println("receiveFromProductionVoucherDropDown  : "+actreceiveFromProductionVoucherDropDown  +" Value Expected : "+expreceiveFromProductionVoucherDropDown);
		System.out.println("shortageOfStockVoucherDropDown        : "+actshortageOfStockVoucherDropDown        +" Value Expected : "+expshortageOfStockVoucherDropDown);
		
		if(actpointOfSaleVoucherDropDown==exppointOfSaleVoucherDropDown && actjournalPostingVouhcerDropDown==expjournalPostingVouhcerDropDown
				&& actpreOrderVoucherDropDown==exppreOrderVoucherDropDown && actpreOrderCancelVoucherDropDown==exppreOrderCancelVoucherDropDown
				&& actsalesReturnsVoucherDropDown==expsalesReturnsVoucherDropDown && actsalesReturnsJournalVoucherDropDown==expsalesReturnsJournalVoucherDropDown
				&& acthomeDeliveryVoucherDropDown==exphomeDeliveryVoucherDropDown
				&& actgiftVoucherSaleVoucherDropDown==expgiftVoucherSaleVoucherDropDown && actcashInVoucherDropDown==expcashInVoucherDropDown
				&& actcashOutVouhcerDropDown==expcashOutVouhcerDropDown && actcashCollectionVouhcerDropDown==expcashCollectionVouhcerDropDown 
				&& actvoucherTypeOfKittingDropDown==expvoucherTypeOfKittingDropDown && actvoucherTypeOfDeKittingDropDown==expvoucherTypeOfDeKittingDropDown
				&& actvoidAdjustmentVoucherDropDown==expvoidAdjustmentVoucherDropDown && actdayEndVoucherDropDown==expdayEndVoucherDropDown
				&& actwastageVoucherDropDown==expwastageVoucherDropDown && actissueProcessVoucherDropDown==expissueProcessVoucherDropDown
				&& actreceiveFromProductionVoucherDropDown==expreceiveFromProductionVoucherDropDown && actshortageOfStockVoucherDropDown==expshortageOfStockVoucherDropDown)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	
	public static boolean checkSavingPostingVoucherInPosPreference() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleVoucherDropDown));
		Select pointOfSaleVoucherDropDownSelect = new Select(pointOfSaleVoucherDropDown);
		pointOfSaleVoucherDropDownSelect.selectByVisibleText("POS Sales");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalPostingVouhcerDropDown));
		Select journalPostingVouhcerDropDownSelect = new Select(journalPostingVouhcerDropDown);
		journalPostingVouhcerDropDownSelect.selectByVisibleText("Credit Notes");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderVoucherDropDown));
		Select preOrderVoucherDropDownSelect = new Select(preOrderVoucherDropDown);
		preOrderVoucherDropDownSelect.selectByVisibleText("Sales Orders");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderCancelVoucherDropDown));
		Select preOrderCancelVoucherDropDownSelect = new Select(preOrderCancelVoucherDropDown);
		preOrderCancelVoucherDropDownSelect.selectByVisibleText("Non-Standard Journal Entries");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucherDropDown));
		Select salesReturnsVoucherDropDownSelect = new Select(salesReturnsVoucherDropDown);
		salesReturnsVoucherDropDownSelect.selectByVisibleText("Sales Returns");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsJournalVoucherDropDown));
		Select salesReturnsJournalVoucherDropDownSelect = new Select(salesReturnsJournalVoucherDropDown);
		salesReturnsJournalVoucherDropDownSelect.selectByVisibleText("Non-Standard Journal Entries");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeDeliveryVoucherDropDown));
		Select homeDeliveryVoucherDropDownSelect = new Select(homeDeliveryVoucherDropDown);
		homeDeliveryVoucherDropDownSelect.selectByVisibleText("POS Sales");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(giftVoucherSaleVoucherDropDown));
		Select giftVoucherSaleVoucherDropDownSelect = new Select(giftVoucherSaleVoucherDropDown);
		giftVoucherSaleVoucherDropDownSelect.selectByVisibleText("Credit Notes");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashInVoucherDropDown));
		Select cashInVoucherDropDownSelect = new Select(cashInVoucherDropDown);
		cashInVoucherDropDownSelect.selectByVisibleText("Credit Notes");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashOutVouhcerDropDown));
		Select cashOutVouhcerDropDownSelect = new Select(cashOutVouhcerDropDown);
		cashOutVouhcerDropDownSelect.selectByVisibleText("Credit Notes");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashCollectionVouhcerDropDown));
		Select cashCollectionVouhcerDropDownSelect = new Select(cashCollectionVouhcerDropDown);
		cashCollectionVouhcerDropDownSelect.selectByVisibleText("Credit Notes");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherTypeOfKittingDropDown));
		Select voucherTypeOfKittingDropDownSelect = new Select(voucherTypeOfKittingDropDown);
		voucherTypeOfKittingDropDownSelect.selectByVisibleText("Production Process");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherTypeOfDeKittingDropDown));
		Select voucherTypeOfDeKittingDropDownSelect = new Select(voucherTypeOfDeKittingDropDown);
		voucherTypeOfDeKittingDropDownSelect.selectByVisibleText("Production Process");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voidAdjustmentVoucherDropDown));
		Select voidAdjustmentVoucherDropDownSelect = new Select(voidAdjustmentVoucherDropDown);
		voidAdjustmentVoucherDropDownSelect.selectByVisibleText("Credit Notes");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayEndVoucherDropDown));
		Select dayEndVoucherDropDownselect = new Select(dayEndVoucherDropDown);
		dayEndVoucherDropDownselect.selectByVisibleText("Credit Notes");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wastageVoucherDropDown));
		Select wastageVoucherDropDownSelect = new Select(wastageVoucherDropDown);
		wastageVoucherDropDownSelect.selectByVisibleText("Shortages in Stock");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(issueProcessVoucherDropDown));
		Select issueProcessVoucherDropDownSelect = new Select(issueProcessVoucherDropDown);
		issueProcessVoucherDropDownSelect.selectByVisibleText("Production Process");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiveFromProductionVoucherDropDown));
		Select receiveFromProductionVoucherDropDownSelect = new Select(receiveFromProductionVoucherDropDown);
		receiveFromProductionVoucherDropDownSelect.selectByVisibleText("Production Process");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortageOfStockVoucherDropDown));
		Select shortageOfStockVoucherDropDownSelect = new Select(shortageOfStockVoucherDropDown);
		shortageOfStockVoucherDropDownSelect.selectByVisibleText("Shortages in Stock");
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
		posSaveBtn.click();
		
		Thread.sleep(2000);
		
		boolean actposInformationPopup      = posInformationPopup.isDisplayed();
		boolean actposInformationPopupBody  = posInformationPopupBody.isDisplayed();
		boolean actposInformationPopupOkBtn = posInformationPopupOkBtn.isDisplayed();
		
		boolean expposInformationPopup      = true;
		boolean expposInformationPopupBody  = true;
		boolean expposInformationPopupOkBtn = true;
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
		posInformationPopupOkBtn.click();
			
		System.out.println("***************************************checkSavingPostingVoucherInPosPreference***************************************");
		 
		System.out.println("posInformationPopup       : "+actposInformationPopup     +" Value Expected : "+expposInformationPopup);
		System.out.println("posInformationPopupBody   : "+actposInformationPopupBody +" Value Expected : "+expposInformationPopupBody);
		System.out.println("posInformationPopupOkBtn  : "+actposInformationPopupOkBtn+" Value Expected : "+expposInformationPopupOkBtn);
		
		
		if(actposInformationPopup==expposInformationPopup && actposInformationPopupBody==expposInformationPopupBody
				&& actposInformationPopupOkBtn==expposInformationPopupOkBtn)	
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	
	
	public static boolean checkSavedPostingInPointOfSalePreferencesMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		Thread.sleep(8000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
		pointOfSaleUtilitiesMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
		posUtilitiesPreferencesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPostingBtn));
		posPostingBtn.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleVoucherDropDown));
		Select pointOfSaleVoucherDropDownSelect = new Select(pointOfSaleVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalPostingVouhcerDropDown));
		Select journalPostingVouhcerDropDownSelect = new Select(journalPostingVouhcerDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderVoucherDropDown));
		Select preOrderVoucherDropDownSelect = new Select(preOrderVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderCancelVoucherDropDown));
		Select preOrderCancelVoucherDropDownSelect = new Select(preOrderCancelVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucherDropDown));
		Select salesReturnsVoucherDropDownSelect = new Select(salesReturnsVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsJournalVoucherDropDown));
		Select salesReturnsJournalVoucherDropDownSelect = new Select(salesReturnsJournalVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeDeliveryVoucherDropDown));
		Select homeDeliveryVoucherDropDownSelect = new Select(homeDeliveryVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(giftVoucherSaleVoucherDropDown));
		Select giftVoucherSaleVoucherDropDownSelect = new Select(giftVoucherSaleVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashInVoucherDropDown));
		Select cashInVoucherDropDownSelect = new Select(cashInVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashOutVouhcerDropDown));
		Select cashOutVouhcerDropDownSelect = new Select(cashOutVouhcerDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashCollectionVouhcerDropDown));
		Select cashCollectionVouhcerDropDownSelect = new Select(cashCollectionVouhcerDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherTypeOfKittingDropDown));
		Select voucherTypeOfKittingDropDownSelect = new Select(voucherTypeOfKittingDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherTypeOfDeKittingDropDown));
		Select voucherTypeOfDeKittingDropDownSelect = new Select(voucherTypeOfDeKittingDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voidAdjustmentVoucherDropDown));
		Select voidAdjustmentVoucherDropDownSelect = new Select(voidAdjustmentVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayEndVoucherDropDown));
		Select dayEndVoucherDropDownSelect = new Select(dayEndVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wastageVoucherDropDown));
		Select wastageVoucherDropDownSelect = new Select(wastageVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(issueProcessVoucherDropDown));
		Select issueProcessVoucherDropDownSelect = new Select(issueProcessVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiveFromProductionVoucherDropDown));
		Select receiveFromProductionVoucherDropDownSelect = new Select(receiveFromProductionVoucherDropDown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortageOfStockVoucherDropDown));
		Select shortageOfStockVoucherDropDownSelect = new Select(shortageOfStockVoucherDropDown);
		
		String actpointOfSaleVoucherDropDown            = pointOfSaleVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actjournalPostingVouhcerDropDown         = journalPostingVouhcerDropDownSelect.getFirstSelectedOption().getText();
		String actpreOrderVoucherDropDown               = preOrderVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actpreOrderCancelVoucherDropDown         = preOrderCancelVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actsalesReturnsVoucherDropDown           = salesReturnsVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actsalesReturnsJournalVoucherDropDown    = salesReturnsJournalVoucherDropDownSelect.getFirstSelectedOption().getText();
		String acthomeDeliveryVoucherDropDown           = homeDeliveryVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actgiftVoucherSaleVoucherDropDown        = giftVoucherSaleVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actcashInVoucherDropDown                 = cashInVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actcashOutVouhcerDropDown                = cashOutVouhcerDropDownSelect.getFirstSelectedOption().getText();
		String actcashCollectionVouhcerDropDown         = cashCollectionVouhcerDropDownSelect.getFirstSelectedOption().getText();
		String actvoucherTypeOfKittingDropDown          = voucherTypeOfKittingDropDownSelect.getFirstSelectedOption().getText();
		String actvoucherTypeOfDeKittingDropDown        = voucherTypeOfDeKittingDropDownSelect.getFirstSelectedOption().getText();
		String actvoidAdjustmentVoucherDropDown         = voidAdjustmentVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actdayEndVoucherDropDown                 = dayEndVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actwastageVoucherDropDown                = wastageVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actissueProcessVoucherDropDown           = issueProcessVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actreceiveFromProductionVoucherDropDown  = receiveFromProductionVoucherDropDownSelect.getFirstSelectedOption().getText();
		String actshortageOfStockVoucherDropDown        = shortageOfStockVoucherDropDownSelect.getFirstSelectedOption().getText();
		
		
		// Expected
		
		String exppointOfSaleVoucherDropDown           = "POS Sales";
		String expjournalPostingVouhcerDropDown        = "Credit Notes";
		 
		String exppreOrderVoucherDropDown               = "Sales Orders";
		String exppreOrderCancelVoucherDropDown         = "Non-Standard Journal Entries";
		String expsalesReturnsVoucherDropDown           = "Sales Returns";
		String expsalesReturnsJournalVoucherDropDown    = "Non-Standard Journal Entries";
		String exphomeDeliveryVoucherDropDown           = "POS Sales";
		String expgiftVoucherSaleVoucherDropDown        = "Credit Notes";
		String expcashInVoucherDropDown                 = "Credit Notes";
		String expcashOutVouhcerDropDown                = "Credit Notes";
		String expcashCollectionVouhcerDropDown         = "Credit Notes";
		String expvoucherTypeOfKittingDropDown          = "Production Process";
		String expvoucherTypeOfDeKittingDropDown        = "Production Process";
		String expvoidAdjustmentVoucherDropDown         = "Credit Notes";
		String expdayEndVoucherDropDown                 = "Credit Notes";
		String expwastageVoucherDropDown                = "Shortages in Stock";
		String expissueProcessVoucherDropDown           = "Production Process";
		String expreceiveFromProductionVoucherDropDown  = "Production Process";
		String expshortageOfStockVoucherDropDown        = "Shortages in Stock";
			
		System.out.println("***************************************checkSavedPostingInPointOfSalePreferencesMenu***************************************");
		 
		
		System.out.println("pointOfSaleVoucherDropDown            : "+actpointOfSaleVoucherDropDown            +" Value Expected : "+exppointOfSaleVoucherDropDown);
		System.out.println("journalPostingVouhcerDropDown         : "+actjournalPostingVouhcerDropDown         +" Value Expected : "+expjournalPostingVouhcerDropDown);
		System.out.println("preOrderVoucherDropDown               : "+actpreOrderVoucherDropDown               +" Value Expected : "+exppreOrderVoucherDropDown);
		System.out.println("preOrderCancelVoucherDropDown         : "+actpreOrderCancelVoucherDropDown         +" Value Expected : "+exppreOrderCancelVoucherDropDown);
		System.out.println("salesReturnsVoucherDropDown           : "+actsalesReturnsVoucherDropDown           +" Value Expected : "+expsalesReturnsVoucherDropDown);
		System.out.println("salesReturnsJournalVoucherDropDown    : "+actsalesReturnsJournalVoucherDropDown    +" Value Expected : "+expsalesReturnsJournalVoucherDropDown);
		System.out.println("homeDeliveryVoucherDropDown           : "+acthomeDeliveryVoucherDropDown           +" Value Expected : "+exphomeDeliveryVoucherDropDown);
		System.out.println("giftVoucherSaleVoucherDropDown        : "+actgiftVoucherSaleVoucherDropDown        +" Value Expected : "+expgiftVoucherSaleVoucherDropDown);
		System.out.println("cashInVoucherDropDown                 : "+actcashInVoucherDropDown                 +" Value Expected : "+expcashInVoucherDropDown);
		System.out.println("cashOutVouhcerDropDown                : "+actcashOutVouhcerDropDown                +" Value Expected : "+expcashOutVouhcerDropDown);
		System.out.println("cashCollectionVouhcerDropDown         : "+actcashCollectionVouhcerDropDown         +" Value Expected : "+expcashCollectionVouhcerDropDown);
		System.out.println("voucherTypeOfKittingDropDown          : "+actvoucherTypeOfKittingDropDown          +" Value Expected : "+expvoucherTypeOfKittingDropDown);
		System.out.println("voucherTypeOfDeKittingDropDown        : "+actvoucherTypeOfDeKittingDropDown        +" Value Expected : "+expvoucherTypeOfDeKittingDropDown);
		System.out.println("voidAdjustmentVoucherDropDown         : "+actvoidAdjustmentVoucherDropDown         +" Value Expected : "+expvoidAdjustmentVoucherDropDown);
		System.out.println("dayEndVoucherDropDown                 : "+actdayEndVoucherDropDown                 +" Value Expected : "+expdayEndVoucherDropDown);
		System.out.println("wastageVoucherDropDown                : "+actwastageVoucherDropDown                +" Value Expected : "+expwastageVoucherDropDown);
		System.out.println("issueProcessVoucherDropDown           : "+actissueProcessVoucherDropDown           +" Value Expected : "+expissueProcessVoucherDropDown);
		System.out.println("receiveFromProductionVoucherDropDown  : "+actreceiveFromProductionVoucherDropDown  +" Value Expected : "+expreceiveFromProductionVoucherDropDown);
		System.out.println("shortageOfStockVoucherDropDown        : "+actshortageOfStockVoucherDropDown        +" Value Expected : "+expshortageOfStockVoucherDropDown);
		
		if(actpointOfSaleVoucherDropDown.equalsIgnoreCase(exppointOfSaleVoucherDropDown) && actjournalPostingVouhcerDropDown.equalsIgnoreCase(expjournalPostingVouhcerDropDown)
				&& actpreOrderVoucherDropDown.equalsIgnoreCase(exppreOrderVoucherDropDown) && actpreOrderCancelVoucherDropDown.equalsIgnoreCase(exppreOrderCancelVoucherDropDown)
				&& actsalesReturnsVoucherDropDown.equalsIgnoreCase(expsalesReturnsVoucherDropDown) && actsalesReturnsJournalVoucherDropDown.equalsIgnoreCase(expsalesReturnsJournalVoucherDropDown)
				&& acthomeDeliveryVoucherDropDown.equalsIgnoreCase(exphomeDeliveryVoucherDropDown)
				&& actgiftVoucherSaleVoucherDropDown.equalsIgnoreCase(expgiftVoucherSaleVoucherDropDown) && actcashInVoucherDropDown.equalsIgnoreCase(expcashInVoucherDropDown)
				&& actcashOutVouhcerDropDown.equalsIgnoreCase(expcashOutVouhcerDropDown) && actcashCollectionVouhcerDropDown.equalsIgnoreCase(expcashCollectionVouhcerDropDown )
				&& actvoucherTypeOfKittingDropDown.equalsIgnoreCase(expvoucherTypeOfKittingDropDown) && actvoucherTypeOfDeKittingDropDown.equalsIgnoreCase(expvoucherTypeOfDeKittingDropDown)
				&& actvoidAdjustmentVoucherDropDown.equalsIgnoreCase(expvoidAdjustmentVoucherDropDown) && actdayEndVoucherDropDown.equalsIgnoreCase(expdayEndVoucherDropDown)
				&& actwastageVoucherDropDown.equalsIgnoreCase(expwastageVoucherDropDown) && actissueProcessVoucherDropDown.equalsIgnoreCase(expissueProcessVoucherDropDown)
				&& actreceiveFromProductionVoucherDropDown.equalsIgnoreCase(expreceiveFromProductionVoucherDropDown) && actshortageOfStockVoucherDropDown.equalsIgnoreCase(expshortageOfStockVoucherDropDown))
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
	
	
	
	// Pos Customization
	
	@FindBy(xpath="//input[@id='optTemplate']")
	private static WebElement templateComboBox;
	
	@FindBy(xpath="//span[@class='icon-export icon-font8']")
	private static WebElement exportBtn;
	
	@FindBy(xpath="//span[@class='icon-import icon-font8']")
	private static WebElement importBtn;
	
	@FindBy(xpath="//i[@class='icon-home icon-font5 theme_icon-color']")
	private static WebElement ribbonHomeBtn;
	
	@FindBy(xpath="//i[@class='icon-messaging icon-font5 theme_icon-color']")
	private static WebElement ribbonMessagingBtn;
	
	@FindBy(xpath="//i[@class='icon-member icon-font5 theme_icon-color']")
	private static WebElement ribbonMemberBtn;
	
	@FindBy(xpath="//i[@class='icon-salesman icon-font5 theme_icon-color']")
	private static WebElement ribbonSalesBtn;
	
	@FindBy(xpath="//div[@class='col-lg-4 col-md-4 col-sm-4 col-xs-12']//div[@class='navbar-custom-menu']/ul/li[3]/a/i")
	private static WebElement userribbonMemberBtn;
	
	@FindBy(xpath="//div[@class='col-lg-4 col-md-4 col-sm-4 col-xs-12']//div[@class='navbar-custom-menu']/ul/li[4]/a/i")
	private static WebElement userribbonSalesBtn;
	
	@FindBy(xpath="//i[@class='icon-employw icon-font5 theme_icon-color']")
	private static WebElement ribbonEmployeeBtn;
	
	@FindBy(xpath="//a[@id='dropdownMenu1']//i[@class='icon-custamize icon-font5 theme_icon-color']")
	private static WebElement ribbonCustomizeBtn;
	
	
	@FindBy(xpath="//i[@class='icon-pickoutput icon-font5 theme_icon-color']")
	private static WebElement ribbonPickOutPutBtn;
	
	@FindBy(xpath="//*[@id='pos_header']/div[3]/nav/div/ul/li[7]/a/i")
	private static WebElement userribbonPickOutPutBtn;
	
	/*@FindBy(xpath="//div[@class='col-lg-4 col-md-4 col-sm-4 col-xs-12']//div[@class='navbar-custom-menu']/ul/li[7]/a/i")
	private static WebElement userribbonPickOutPutBtn;*/
	
	@FindBy(xpath="//input[@id='txtBarcode']")
	private static WebElement scanBarCodeTxt;
	
	@FindBy(xpath="//input[@id='txtSearchProduct']")
	private static WebElement searchTxt;
	
	@FindBy(xpath="//div[@id='leftColumn']//input[@id='txtBarcode']")
	private static WebElement leftScanBarCodeTxt;
	
	@FindBy(xpath="//div[@id='leftColumn']//input[@id='txtSearchProduct']")
	private static WebElement leftsearchTxt;
	
	@FindBy(xpath="//div[@id='leftColumn']//i[@class='fa fa-search']")
	private static WebElement leftSearchBtn;
	
	@FindBy(xpath="//div[@id='leftColumn']//i[@class='icon-custamize icon-font5 theme_icon-color']")
	private static WebElement leftCustomizeBtn;
	
	@FindBy(xpath="//div[@id='rightColumn']//input[@id='txtBarcode']")
	private static WebElement rightScanBarCodeTxt;
	
	@FindBy(xpath="//div[@id='rightColumn']//input[@id='txtSearchProduct']")
	private static WebElement rightsearchTxt;
	
	@FindBy(xpath="//div[@id='rightColumn']//i[@class='fa fa-search']")
	private static WebElement rightSearchBtn;
	
	@FindBy(xpath="//div[@id='rightColumn']//i[@class='icon-custamize icon-font5 theme_icon-color']")
	private static WebElement rightCustomizeBtn;
	
	@FindBy(xpath="//div[@id='divFooterPanelColumn']//div//img")
	private static WebElement FootertCustomizeBtn;

	@FindBy(xpath="//h5[@class='modal-title pos-modal-header-caption']")
	private static WebElement customizeOptionsPopUpHeader;
	
	@FindBy(xpath="//span[@class='pos-modal-header-close']")
	private static WebElement customizeOptionsPoUpCloseBtn;
	
	@FindBy(xpath="//button[@id='btnCustomizationAddShortcut']")
	private static WebElement customizeAddShortcutBtn;
	
	@FindBy(xpath="//button[@id='btnCustomizationAddGroup']")
	private static WebElement customizeAddGropupBtn;
	
	
	
	@FindBy(xpath="//h5[@class='modal-title pos-modal-header-caption']")
	private static WebElement shortcutCustomizeHeader;
	
	@FindBy(xpath="//div[@id='divShortcutsCustomizationModalContent']//div[@class='modal-header pos-modal-header pos_themes_background']//img")
	private static WebElement shortcutCustomizationCloseBtn;
	
	@FindBy(xpath="//select[@id='ddlShortcutsCustomizationHotKey']")
	private static WebElement hotKeyDropDown;
	
	@FindBy(xpath="//select[@id='ddlShortcutsCustomizationCharacter']")
	private static WebElement characterDropDown;
	
	@FindBy(xpath="//input[@id='txtShortcutsCustomizationCaption1']")
	private static WebElement caption1Txt;
	
	@FindBy(xpath="//input[@id='txtShortcutsCustomizationCaption2']")
	private static WebElement caption2Txt;
	
	@FindBy(xpath="//input[@id='txtShortcutsCustomizationCaption3']")
	private static WebElement caption3Txt;
	
	@FindBy(xpath="//input[@id='txtShortcutsCustomizationFontStyle']")
	private static WebElement fontStyleTxt;
	
	@FindBy(xpath="//input[@id='FileUpload1']")
	private static WebElement backGroundChooseFileBtn;
	
	@FindBy(xpath="//div[@id='btnShortcutsCustomizationAdd']")
	private static WebElement addBtn;
	
	@FindBy(xpath="//div[@id='btnShortcutsCustomizationUpdate']")
	private static WebElement shortcutCustomizeUpdateBtn;
	
	@FindBy(xpath="//div[@id='btnShortcutsCustomizationCancel']")
	private static WebElement shortcutCustomizeCancelBtn;
	
	@FindBy(xpath="//div[@id='btnShortcutsCustomizationSave']")
	private static WebElement shortcutCustomizeSaveBtn;
	
	@FindBy(xpath="//div[@id='btnShortcutCustomizationClose']")
	private static WebElement shortcutCustomizeCloseBtn;
	
	@FindBy(xpath="//ul[@id='ProfileMenu']//li//span")
	private static List<WebElement> shortcutCustomizeLeftMenuList;
	
	@FindBy(xpath="//thead[@id='tHeadShortcutCustomizationRecord']/tr/td")
	private static List<WebElement> shortcutCustomizeHeaderList;
	
	@FindBy(xpath="//div[@id='id_focus8_wrapper_fullscreenmode']//tr[1]//td[1]//i[1]")
	private static WebElement sc_editRow1;
	
	@FindBy(xpath="//tr[1]//td[1]//i[2]")
	private static WebElement sc_deleteRow1;
	
	@FindBy(xpath="//div[@id='id_focus8_wrapper_fullscreenmode']//tr[2]//td[1]//i[1]")
	private static WebElement sc_editRow2;
	
	@FindBy(xpath="//tr[2]//td[1]//i[2]")
	private static WebElement sc_deleteRow2;
	
	@FindBy(xpath="//h5[contains(text(),'Point Of Sale Confirmation')]")
	private static WebElement pointOfSalesConfirmationMessage;
	
	@FindBy(xpath="//div[@id='divMessageModalHeader']//img")
	private static WebElement pointOfSalesConfirmationCloseBtn;
	
	@FindBy(xpath="//div[@id='divMessageModalBody']/div/div/div/label")
	private static WebElement pointOfSalesConfirmationBodyMessage;
	
	/*@FindBy(xpath="//span[@class='icon-ok icon-font6']")
	private static WebElement posConfirmYesBtn;*/

	@FindBy(xpath="//div[@id='divMessageModalFooter']/div/div/div[1]")
	private static WebElement posConfirmYesBtn;
	
	@FindBy(xpath="//div[@class='btn toolbar_button theme_button_color default_padding_toolbar_button']//span[@class='icon-cancel icon-font6']")
	private static WebElement posConfirmCancelBtn;
	
	@FindBy(xpath="//h5[contains(text(),'Default F1 Customization')]")
	private static WebElement defaultCustomizationPopUp;
	
	
	// Voucher
	
	@FindBy(xpath="//div[contains(text(),'Inventory')]")
	private static WebElement  inventoryMenu; 
	
		@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
		private static WebElement  inventoryTransactionsMenu; 
			
			@FindBy(xpath="//*[@id='139']/span")
			private static WebElement  inventoryTransactionsPurchasesMenu; 
		
				@FindBy(xpath="//*[@id='2010']/span")
				private static WebElement  requestForQuoteVoucher;
				
				@FindBy(xpath="//*[@id='2011']/span")
				private static WebElement  purchasesQuotationsVoucher;
					
				@FindBy(xpath="//a[@id='2012']//span[contains(text(),'Purchases Orders')]")
				private static WebElement  purchasesOrdersVoucher;
			
				@FindBy(xpath="//*[@id='2013']/span")
				private static WebElement  materialReceiptNotesVoucher;
					
			@FindBy(xpath="//*[@id='140']/span")
			private static WebElement  inventoyTransactionsSalesMenu; 
				
				@FindBy(xpath="//*[@id='2018']/span")
				private static WebElement  salesQuotationsVoucher;
				
				@FindBy(xpath="//*[@id='2019']/span")
				private static WebElement  deliveryNotesVoucher;
				
				@FindBy(xpath="//*[@id='2022']/span")
				private static WebElement  posSalesVoucher;
				
				@FindBy(xpath="//*[@id='2045']/span")
				private static WebElement  productionOrdersVoucher;
				
				@FindBy(xpath="//*[@id='2017']/span")
				private static WebElement  salesOrdersVoucher;
							
			@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
			private static WebElement  inventoryTransactionsStocksMenu; 
				
				@FindBy(xpath="//*[@id='2034']/span")
				private static WebElement  shortagesInStockVoucher;
				
				@FindBy(xpath="//*[@id='2035']/span")
				private static WebElement  excessesInStocksVoucher;
					
				@FindBy(xpath="//*[@id='2036']/span")
				private static WebElement  stockTransfersVoucher;
				
				@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
				private static WebElement  openingStocksVoucher;
				
				@FindBy(xpath="//a[@id='2061']//span[contains(text(),'Opening Stock New')]")
				private static WebElement  openingStocksNewVoucher;
				
				@FindBy(xpath="//*[@id='2038']/span")
				private static WebElement  materialRequisitionVoucher;
						
				@FindBy(xpath="//*[@id='2049']/span")
				private static WebElement  stockAdjustmentVoucher;
					
			@FindBy(xpath="//*[@id='164']/span")
			private static WebElement  holdAndUnholdStockVoucher;
			
			@FindBy(xpath="//*[@id='93']/span")
			private static WebElement  stockReconciliation;
			
			@FindBy(xpath="//*[@id='99']/span")
			private static WebElement  stockAllocation;
			
	
	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
	private static WebElement  newBtn;



	  public static void checkUserFriendlyMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage=errorMessage.getText();
			
			System.out.println("Open Page then Message Display  :  " + actErrorMessage);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			/*try
			{	
				System.out.println("In Try Block Validation Message  :  " + actErrorMessage);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
			}
			catch(Exception ee)
			{
				System.out.println("In Catch Block Validation Message  :  " + actErrorMessage);	
			}*/
		}
		catch(Exception e)
		{
			System.err.println("Error Message NOT Found or NOT Clickable");
			System.err.println(e.getMessage());
			
			String Exception=e.getMessage();
		}
	  }
	  

		
	  public boolean checkVoucherSavingMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage=errorMessage.getText();
			String expErrorMessage="Voucher saved successfully";
			String expErrorMessage1=": "+docno;
			
			System.out.println("SavingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage+" "+expErrorMessage1);
			
			if(actErrorMessage.startsWith(expErrorMessage) && actErrorMessage.endsWith(expErrorMessage1))
			{
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();
					
					return  true;
				}
				catch(Exception ee)
				{
					return true;
				}	
			}
			else
			{
				return false;
			}	
		}
		catch(Exception e)
		{
			System.err.println("UNABLE TO COMPARE");
			return false;
		}
	  }
	  
	  
  // Print Layout
	  
	  @FindBy(xpath="//select[@id='ddlPFSales']")
	  private static WebElement salesAccountDropdown;

	  @FindBy(xpath="//select[@id='ddlPFPreOrder']")
	  private static WebElement preOrderDropDown;

	  @FindBy(xpath="//select[@id='ddlPFPreOrderColl']")
	  private static WebElement preOrderCollectionDropDown;

	  @FindBy(xpath="//select[@id='ddlPFPreOrderCancel']")
	  private static WebElement preOrderCancellationDropDown;

	  @FindBy(xpath="//select[@id='ddlPFHomeDelivery']")
	  private static WebElement homeDeliveryDropDown;

	  @FindBy(xpath="//select[@id='ddlPFCashIn']")
	  private static WebElement cashInDropDown;

	  @FindBy(xpath="//select[@id='ddlPFCashOut']")
	  private static WebElement cashOutDropDown;

	  @FindBy(xpath="//select[@id='ddlPFCashColl']")
	  private static WebElement cashCollectionDropDown;

	  @FindBy(xpath="//select[@id='ddlPFEOD']")
	  private static WebElement dayEndDropDown;

	  @FindBy(xpath="//select[@id='ddlPFMessages']")
	  private static WebElement messagesDropDown;
	  
	  @FindBy(xpath="//select[@id='ddlPFGiftVouche']")
	  private static WebElement giftVoucherDropDown;
	  
	  @FindBy(xpath="//select[@id='ddlPFCreditNote']")
	  private static WebElement creditNoteDropDown;
	  
	  @FindBy(xpath="//select[@id='ddlPFSalesReturn']")
	  private static WebElement salessReturnsDropDown;
	  
	  @FindBy(xpath="//select[@id='ddlCSAdjustment']")
	  private static WebElement creditSalesAdjustmentDrop;
	  
	  @FindBy(xpath="//select[@id='ddlPrePaidWallet']")
	  private static WebElement prePaidWalletDrop;
	  
	  @FindBy(xpath="//select[@id='ddlPFTicket']")
	  private static WebElement ticketPrintFormatDropDown;
	  
	  @FindBy(xpath="//select[@id='ddlSaleToPrint']")
	  private static WebElement salesPrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlPreOrderToPrint']")
	  private static WebElement preOrderPrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlPreOrderCollToPrint']")
	  private static WebElement preOrderCollectionPrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlPreOrderCancelToPrint']")
	  private static WebElement preOrdeerCancellationPrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlHomeDeliveryToPrint']")
	  private static WebElement homeDeliveryPrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlCashInToPrint']")
	  private static WebElement cashInPrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlCashOutToPrint']")
	  private static WebElement cashOutPrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlCashCollToPrint']")
	  private static WebElement cashCollectionPrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlEODToPrint']")
	  private static WebElement dayEndPrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlMessageToPrint']")
	  private static WebElement messagePrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlGiftVoucherToPrint']")
	  private static WebElement giftVoucherPrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlCreditNoteToPrint']")
	  private static WebElement creditNotePrintDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlSaleReturnToPrint']")
	  private static WebElement salesReturnsPrintDropdown;

	  @FindBy(xpath="//select[@id='ddlCreditSaleAdjToPrint']")
	  private static WebElement creditSaleAdjustmentPrintDropdown;
	  
  public static boolean checkPosPrintLayoutMenuInPointOfSaleMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	  userNameDisplay.click();
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	  logoutOption.click();
	  
	  Thread.sleep(3000);
			
	  LoginPage lp=new LoginPage(getDriver()); 
	  
	  String unamelt="su";
					      
	  String pawslt="su";
					      
	  lp.enterUserName(unamelt);
					
	  lp.enterPassword(pawslt);
	  
	  lp.clickOnSignInBtn();
			
	  Thread.sleep(8000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
	  pointOfSaleMenu.click();
	
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
	  pointOfSaleUtilitiesMenu.click();
		
	  Thread.sleep(2000);
								
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
	  posUtilitiesPreferencesMenu.click();
		
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPrintFormatsBtn));
	  posPrintFormatsBtn.click();
	
	  Thread.sleep(2000);
		
	  boolean actsalesAccountDropdown = salesAccountDropdown.isDisplayed();
	  boolean actpreOrderDropDown = preOrderDropDown.isDisplayed();
	  boolean actpreOrderCollectionDropDown = preOrderCollectionDropDown.isDisplayed();
	  boolean actpreOrderCancellationDropDown = preOrderCancellationDropDown.isDisplayed();
	  boolean acthomeDeliveryDropDown = homeDeliveryDropDown.isDisplayed();
	  boolean actcashInDropDown = cashInDropDown.isDisplayed();
	  boolean actcashOutDropDown = cashOutDropDown.isDisplayed();
	  boolean actcashCollectionDropDown = cashCollectionDropDown.isDisplayed();
	  boolean actdayEndDropDown = dayEndDropDown.isDisplayed();
	  boolean actmessagesDropDown = messagesDropDown.isDisplayed();
	  boolean actgiftVoucherDropDown = giftVoucherDropDown.isDisplayed();
	  boolean actcreditNoteDropDown = creditNoteDropDown.isDisplayed();
	  boolean actsalessReturnsDropDown = salessReturnsDropDown.isDisplayed();
	  boolean actcreditSalesAdjustmentDrop = creditSalesAdjustmentDrop.isDisplayed();
	  boolean actticketPrintFormatDropDown = ticketPrintFormatDropDown.isDisplayed();
	  boolean actsalesPrintDropdown = salesPrintDropdown.isDisplayed();
	  boolean actpreOrderPrintDropdown = preOrderPrintDropdown.isDisplayed();
	  boolean actpreOrderCollectionPrintDropdown = preOrderCollectionPrintDropdown.isDisplayed();
	  boolean actpreOrdeerCancellationPrintDropdown = preOrdeerCancellationPrintDropdown.isDisplayed();
	  boolean acthomeDeliveryPrintDropdown = homeDeliveryPrintDropdown.isDisplayed();
	  boolean actcashInPrintDropdown = cashInPrintDropdown.isDisplayed();
	  boolean actcashOutPrintDropdown = cashOutPrintDropdown.isDisplayed();
	  boolean actcashCollectionPrintDropdown = cashCollectionPrintDropdown.isDisplayed();
	  boolean actdayEndPrintDropdown = dayEndPrintDropdown.isDisplayed();
	  boolean actmessagePrintDropdown = messagePrintDropdown.isDisplayed();
	  boolean actgiftVoucherPrintDropdown = giftVoucherPrintDropdown.isDisplayed();
	  boolean actcreditNotePrintDropdown = creditNotePrintDropdown.isDisplayed();
	  boolean actsalesReturnsPrintDropdown = salesReturnsPrintDropdown.isDisplayed();
	  boolean actcreditSaleAdjustmentPrintDropdown = creditSaleAdjustmentPrintDropdown.isDisplayed();
		
	  // Expected
		 
	  boolean expsalesAccountDropdown = salesAccountDropdown.isDisplayed();
	  boolean exppreOrderDropDown = preOrderDropDown.isDisplayed();
	  boolean exppreOrderCollectionDropDown = preOrderCollectionDropDown.isDisplayed();
	  boolean exppreOrderCancellationDropDown = preOrderCancellationDropDown.isDisplayed();
	  boolean exphomeDeliveryDropDown = homeDeliveryDropDown.isDisplayed();
	  boolean expcashInDropDown = cashInDropDown.isDisplayed();
	  boolean expcashOutDropDown = cashOutDropDown.isDisplayed();
	  boolean expcashCollectionDropDown = cashCollectionDropDown.isDisplayed();
	  boolean expdayEndDropDown = dayEndDropDown.isDisplayed();
	  boolean expmessagesDropDown = messagesDropDown.isDisplayed();
	  boolean expgiftVoucherDropDown = giftVoucherDropDown.isDisplayed();
	  boolean expcreditNoteDropDown = creditNoteDropDown.isDisplayed();
	  boolean expsalessReturnsDropDown = salessReturnsDropDown.isDisplayed();
	  boolean expcreditSalesAdjustmentDrop = creditSalesAdjustmentDrop.isDisplayed();
	  boolean expticketPrintFormatDropDown = ticketPrintFormatDropDown.isDisplayed();
	  boolean expsalesPrintDropdown = salesPrintDropdown.isDisplayed();
	  boolean exppreOrderPrintDropdown = preOrderPrintDropdown.isDisplayed();
	  boolean exppreOrderCollectionPrintDropdown = preOrderCollectionPrintDropdown.isDisplayed();
	  boolean exppreOrdeerCancellationPrintDropdown = preOrdeerCancellationPrintDropdown.isDisplayed();
	  boolean exphomeDeliveryPrintDropdown = homeDeliveryPrintDropdown.isDisplayed();
	  boolean expcashInPrintDropdown = cashInPrintDropdown.isDisplayed();
	  boolean expcashOutPrintDropdown = cashOutPrintDropdown.isDisplayed();
	  boolean expcashCollectionPrintDropdown = cashCollectionPrintDropdown.isDisplayed();
	  boolean expdayEndPrintDropdown = dayEndPrintDropdown.isDisplayed();
	  boolean expmessagePrintDropdown = messagePrintDropdown.isDisplayed();
	  boolean expgiftVoucherPrintDropdown = giftVoucherPrintDropdown.isDisplayed();
	  boolean expcreditNotePrintDropdown = creditNotePrintDropdown.isDisplayed();
	  boolean expsalesReturnsPrintDropdown = salesReturnsPrintDropdown.isDisplayed();
	  boolean expcreditSaleAdjustmentPrintDropdown = creditSaleAdjustmentPrintDropdown.isDisplayed();
	  
	  
	  System.out.println("salesAccountDropdown : "+actsalesAccountDropdown+" Value Expected : "+expsalesAccountDropdown);
	  System.out.println("preOrderDropDown : "+actpreOrderDropDown+" Value Expected : "+exppreOrderDropDown);
	  System.out.println("preOrderCollectionDropDown : "+actpreOrderCollectionDropDown+" Value Expected : "+exppreOrderCollectionDropDown);
	  System.out.println("preOrderCancellationDropDown : "+actpreOrderCancellationDropDown+" Value Expected : "+exppreOrderCancellationDropDown);
	  System.out.println("homeDeliveryDropDown : "+acthomeDeliveryDropDown+" Value Expected : "+exphomeDeliveryDropDown);
	  System.out.println("cashInDropDown : "+actcashInDropDown+" Value Expected : "+expcashInDropDown);
	  System.out.println("cashOutDropDown : "+actcashOutDropDown+" Value Expected : "+expcashOutDropDown);
	  System.out.println("cashCollectionDropDown : "+actcashCollectionDropDown+" Value Expected : "+expcashCollectionDropDown);
	  System.out.println("dayEndDropDown : "+actdayEndDropDown+" Value Expected : "+expdayEndDropDown);
	  System.out.println("messagesDropDown : "+actmessagesDropDown+" Value Expected : "+expmessagesDropDown);
	  System.out.println("giftVoucherDropDown : "+actgiftVoucherDropDown+" Value Expected : "+expgiftVoucherDropDown);
	  System.out.println("creditNoteDropDown : "+actcreditNoteDropDown+" Value Expected : "+expcreditNoteDropDown);
	  System.out.println("salessReturnsDropDown : "+actsalessReturnsDropDown+" Value Expected : "+expsalessReturnsDropDown);
	  System.out.println("creditSalesAdjustmentDrop : "+actcreditSalesAdjustmentDrop+" Value Expected : "+expcreditSalesAdjustmentDrop);
	  System.out.println("ticketPrintFormatDropDown : "+actticketPrintFormatDropDown+" Value Expected : "+expticketPrintFormatDropDown);
	  System.out.println("salesPrintDropdown : "+actsalesPrintDropdown+" Value Expected : "+expsalesPrintDropdown);
	  System.out.println("preOrderPrintDropdown : "+actpreOrderPrintDropdown+" Value Expected : "+exppreOrderPrintDropdown);
	  System.out.println("preOrderCollectionPrintDropdown : "+actpreOrderCollectionPrintDropdown+" Value Expected : "+exppreOrderCollectionPrintDropdown);
	  System.out.println("preOrdeerCancellationPrintDropdown : "+actpreOrdeerCancellationPrintDropdown+" Value Expected : "+exppreOrdeerCancellationPrintDropdown);
	  System.out.println("homeDeliveryPrintDropdown : "+acthomeDeliveryPrintDropdown+" Value Expected : "+exphomeDeliveryPrintDropdown);
	  System.out.println("cashInPrintDropdown : "+actcashInPrintDropdown+" Value Expected : "+expcashInPrintDropdown);
	  System.out.println("cashOutPrintDropdown : "+actcashOutPrintDropdown+" Value Expected : "+expcashOutPrintDropdown);
	  System.out.println("cashCollectionPrintDropdown : "+actcashCollectionPrintDropdown+" Value Expected : "+expcashCollectionPrintDropdown);
	  System.out.println("dayEndPrintDropdown : "+actdayEndPrintDropdown+" Value Expected : "+expdayEndPrintDropdown);
	  System.out.println("messagePrintDropdown : "+actmessagePrintDropdown+" Value Expected : "+expmessagePrintDropdown);
	  System.out.println("giftVoucherPrintDropdown : "+actgiftVoucherPrintDropdown+" Value Expected : "+expgiftVoucherPrintDropdown);
	  System.out.println("creditNotePrintDropdown : "+actcreditNotePrintDropdown+" Value Expected : "+expcreditNotePrintDropdown);
	  System.out.println("salesReturnsPrintDropdown : "+actsalesReturnsPrintDropdown+" Value Expected : "+expsalesReturnsPrintDropdown);
	  System.out.println("creditSaleAdjustmentPrintDropdown : "+actcreditSaleAdjustmentPrintDropdown+" Value Expected : "+expcreditSaleAdjustmentPrintDropdown);
	  
		
		if(actsalesAccountDropdown==expsalesAccountDropdown && actpreOrderDropDown==exppreOrderDropDown && actpreOrderCollectionDropDown==exppreOrderCollectionDropDown
				&& actpreOrderCancellationDropDown==exppreOrderCancellationDropDown && acthomeDeliveryDropDown==exphomeDeliveryDropDown && actcashInDropDown==expcashInDropDown
				&& actcashOutDropDown==expcashOutDropDown && actcashCollectionDropDown==expcashCollectionDropDown && actdayEndDropDown==expdayEndDropDown
				&& actmessagesDropDown==expmessagesDropDown && actgiftVoucherDropDown==expgiftVoucherDropDown && actcreditNoteDropDown==expcreditNoteDropDown
				&& actsalessReturnsDropDown==expsalessReturnsDropDown && actpreOrderPrintDropdown==exppreOrderPrintDropdown && actpreOrderCollectionPrintDropdown==exppreOrderCollectionPrintDropdown
				&& actpreOrdeerCancellationPrintDropdown==exppreOrdeerCancellationPrintDropdown && acthomeDeliveryPrintDropdown==exphomeDeliveryPrintDropdown
				&& actcashInPrintDropdown==expcashInPrintDropdown && actcashOutPrintDropdown==expcashOutPrintDropdown && actcashCollectionPrintDropdown==expcashCollectionPrintDropdown
				&& actdayEndPrintDropdown==expdayEndPrintDropdown && actmessagePrintDropdown==expmessagePrintDropdown && actgiftVoucherPrintDropdown==expgiftVoucherPrintDropdown
				&& actcreditNotePrintDropdown==expcreditNotePrintDropdown && actsalesReturnsPrintDropdown==expsalesReturnsPrintDropdown
				&& actcreditSaleAdjustmentPrintDropdown==expcreditSaleAdjustmentPrintDropdown)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
		
		
  
  
  public static boolean checkSavingPosPrintLayoutFormats() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
	
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
	  Select posOutLetDropDownSelect = new Select(posOutLetDropDown);
	  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountDropdown));
	  Select salesAccountDropdownSelect = new Select(salesAccountDropdown);
	  salesAccountDropdownSelect.selectByVisibleText("Bill Settlement");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderDropDown));
	  Select preOrderDropDownSelect = new Select(preOrderDropDown);
	  preOrderDropDownSelect.selectByVisibleText("Pre Order");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderCollectionDropDown));
	  Select preOrderCollectionDropDownSelect = new Select(preOrderCollectionDropDown);
	  preOrderCollectionDropDownSelect.selectByVisibleText("Pre Order Collection");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderCancellationDropDown));
	  Select preOrderCancellationDropDownSelect = new Select(preOrderCancellationDropDown);
	  preOrderCancellationDropDownSelect.selectByVisibleText("Pre Order");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeDeliveryDropDown));
	  Select homeDeliveryDropDownSelect = new Select(homeDeliveryDropDown);
	  homeDeliveryDropDownSelect.selectByVisibleText("Home Delivery");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashInDropDown));
	  Select cashInDropDownSelect = new Select(cashInDropDown);
	  cashInDropDownSelect.selectByVisibleText("Cash In");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashOutDropDown));
	  Select cashOutDropDownSelect = new Select(cashOutDropDown);
	  cashOutDropDownSelect.selectByVisibleText("Cash Out");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashCollectionDropDown));
	  Select cashCollectionDropDownSelect = new Select(cashCollectionDropDown);
	  cashCollectionDropDownSelect.selectByVisibleText("Cash Collection");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayEndDropDown));
	  Select dayEndDropDownSelect = new Select(dayEndDropDown);
	  dayEndDropDownSelect.selectByVisibleText("EOD");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(messagesDropDown));
	  Select messagesDropDownSelect = new Select(messagesDropDown);
	  messagesDropDownSelect.selectByVisibleText("Bill Settlement");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(giftVoucherDropDown));
	  Select giftVoucherDropDownSelect = new Select(giftVoucherDropDown);
	  giftVoucherDropDownSelect.selectByVisibleText("Bill Settlement");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNoteDropDown));
	  Select creditNoteDropDownSelect = new Select(creditNoteDropDown);
	  creditNoteDropDownSelect.selectByVisibleText("Credit Note");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salessReturnsDropDown));
	  Select salessReturnsDropDownSelect = new Select(salessReturnsDropDown);
	  salessReturnsDropDownSelect.selectByVisibleText("Sales Returns");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditSalesAdjustmentDrop));
	  Select creditSalesAdjustmentDropSelect = new Select(creditSalesAdjustmentDrop);
	  creditSalesAdjustmentDropSelect.selectByVisibleText("Credit Note");
	  
	 /* getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(prePaidWalletDrop));
	  Select prePaidWalletDropSelect = new Select(prePaidWalletDrop);
	  prePaidWalletDropSelect.selectByVisibleText("Bill Settlement");*/
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ticketPrintFormatDropDown));
	  Select ticketPrintFormatDropDownSelect = new Select(ticketPrintFormatDropDown);
	  ticketPrintFormatDropDownSelect.selectByVisibleText("Bill Settlement");
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
	  posSaveBtn.click();
		
	  String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
	  String exppointOfSalesConfirmationBodyMessage = "Outlet details saved successfully.";
		
	  System.out.println("pointOfSalesConfirmationBodyMessage : ."+actpointOfSalesConfirmationBodyMessage+". Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
	  posInformationPopupOkBtn.click();
	  
	  if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage))
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
  
  
  
  

  
  public static boolean checkSavedPrintFormatsOfOutlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	  userNameDisplay.click();
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	  logoutOption.click();
	  
	  Thread.sleep(3000);
			
	  LoginPage lp=new LoginPage(getDriver()); 
	  
	  String unamelt="su";
					      
	  String pawslt="su";
					      
	  lp.enterUserName(unamelt);
					
	  lp.enterPassword(pawslt);
	  
	  lp.clickOnSignInBtn();
			
	  Thread.sleep(8000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
	  pointOfSaleMenu.click();
	
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
	  pointOfSaleUtilitiesMenu.click();
		
	  Thread.sleep(2000);
								
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
	  posUtilitiesPreferencesMenu.click();
		
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPrintFormatsBtn));
	  posPrintFormatsBtn.click();
	
	  Thread.sleep(2000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
	  Select posOutLetDropDownSelect = new Select(posOutLetDropDown);
	  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountDropdown));
	  Select salesAccountDropdownSelect = new Select(salesAccountDropdown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderDropDown));
	  Select preOrderDropDownSelect = new Select(preOrderDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderCollectionDropDown));
	  Select preOrderCollectionDropDownSelect = new Select(preOrderCollectionDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preOrderCancellationDropDown));
	  Select preOrderCancellationDropDownSelect = new Select(preOrderCancellationDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeDeliveryDropDown));
	  Select homeDeliveryDropDownSelect = new Select(homeDeliveryDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashInDropDown));
	  Select cashInDropDownSelect = new Select(cashInDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashOutDropDown));
	  Select cashOutDropDownSelect = new Select(cashOutDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashCollectionDropDown));
	  Select cashCollectionDropDownSelect = new Select(cashCollectionDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayEndDropDown));
	  Select dayEndDropDownSelect = new Select(dayEndDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(messagesDropDown));
	  Select messagesDropDownSelect = new Select(messagesDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(giftVoucherDropDown));
	  Select giftVoucherDropDownSelect = new Select(giftVoucherDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNoteDropDown));
	  Select creditNoteDropDownSelect = new Select(creditNoteDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salessReturnsDropDown));
	  Select salessReturnsDropDownSelect = new Select(salessReturnsDropDown);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditSalesAdjustmentDrop));
	  Select creditSalesAdjustmentDropSelect = new Select(creditSalesAdjustmentDrop);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ticketPrintFormatDropDown));
	  Select ticketPrintFormatDropDownSelect = new Select(ticketPrintFormatDropDown);
	  
	  
	  
	  String actposOutLetDropDown            = posOutLetDropDownSelect.getFirstSelectedOption().getText();
	  String actsalesAccountDropdown         = salesAccountDropdownSelect.getFirstSelectedOption().getText();
	  String actpreOrderDropDown             = preOrderDropDownSelect.getFirstSelectedOption().getText();
	  String actpreOrderCollectionDropDown   = preOrderCollectionDropDownSelect.getFirstSelectedOption().getText();
	  String actpreOrderCancellationDropDown = preOrderCancellationDropDownSelect.getFirstSelectedOption().getText();
	  String acthomeDeliveryDropDown         = homeDeliveryDropDownSelect.getFirstSelectedOption().getText();
	  String actcashInDropDown               = cashInDropDownSelect.getFirstSelectedOption().getText();
	  String actcashOutDropDown              = cashOutDropDownSelect.getFirstSelectedOption().getText();
	  String actcashCollectionDropDown       = cashCollectionDropDownSelect.getFirstSelectedOption().getText();
	  String actdayEndDropDown               = dayEndDropDownSelect.getFirstSelectedOption().getText();
	  String actmessagesDropDown             = messagesDropDownSelect.getFirstSelectedOption().getText();
	  String actgiftVoucherDropDown          = giftVoucherDropDownSelect.getFirstSelectedOption().getText();
	  String actcreditNoteDropDown           = creditNoteDropDownSelect.getFirstSelectedOption().getText();
	  String actsalessReturnsDropDown        = salessReturnsDropDownSelect.getFirstSelectedOption().getText();
	  String actcreditSalesAdjustmentDrop    = creditSalesAdjustmentDropSelect.getFirstSelectedOption().getText();
	  String actticketPrintFormatDropDown    = ticketPrintFormatDropDownSelect.getFirstSelectedOption().getText();
	  
	  
	  String expposOutLetDropDown            = "Outlet1";
	  String expsalesAccountDropdown         = "Bill Settlement";
	  String exppreOrderDropDown             = "Pre Order";
	  String exppreOrderCollectionDropDown   = "Pre Order Collection";
	  String exppreOrderCancellationDropDown = "Pre Order";
	  String exphomeDeliveryDropDown         = "Home Delivery";
	  String expcashInDropDown               = "Cash In";
	  String expcashOutDropDown              = "Cash Out";
	  String expcashCollectionDropDown       = "Cash Collection";
	  String expdayEndDropDown               = "EOD";
	  String expmessagesDropDown             = "Bill Settlement";
	  String expgiftVoucherDropDown          = "Bill Settlement";
	  String expcreditNoteDropDown           = "Credit Note";
	  String expsalessReturnsDropDown        = "Sales Returns";
	  String expcreditSalesAdjustmentDrop    = "Credit Note";
	  String expticketPrintFormatDropDown    = "Bill Settlement";
	  
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posCloseBtn));
	  posCloseBtn.click();
	  
	  System.out.println("posOutLetDropDown : "+actposOutLetDropDown+" Value Expected : "+expposOutLetDropDown);
	  
	  System.out.println("salesAccountDropdown : "+actsalesAccountDropdown+" Value Expected : "+expsalesAccountDropdown);
	  System.out.println("preOrderDropDown : "+actpreOrderDropDown+" Value Expected : "+exppreOrderDropDown);
	  System.out.println("preOrderCollectionDropDown : "+actpreOrderCollectionDropDown+" Value Expected : "+exppreOrderCollectionDropDown);
	  System.out.println("preOrderCancellationDropDown : "+actpreOrderCancellationDropDown+" Value Expected : "+exppreOrderCancellationDropDown);
	  System.out.println("homeDeliveryDropDown : "+acthomeDeliveryDropDown+" Value Expected : "+exphomeDeliveryDropDown);
	  System.out.println("cashInDropDown : "+actcashInDropDown+" Value Expected : "+expcashInDropDown);
	  System.out.println("cashOutDropDown : "+actcashOutDropDown+" Value Expected : "+expcashOutDropDown);
	  System.out.println("cashCollectionDropDown : "+actcashCollectionDropDown+" Value Expected : "+expcashCollectionDropDown);
	  System.out.println("dayEndDropDown : "+actdayEndDropDown+" Value Expected : "+expdayEndDropDown);
	  System.out.println("messagesDropDown : "+actmessagesDropDown+" Value Expected : "+expmessagesDropDown);
	  System.out.println("giftVoucherDropDown : "+actgiftVoucherDropDown+" Value Expected : "+expgiftVoucherDropDown);
	  System.out.println("creditNoteDropDown : "+actcreditNoteDropDown+" Value Expected : "+expcreditNoteDropDown);
	  System.out.println("salessReturnsDropDown : "+actsalessReturnsDropDown+" Value Expected : "+expsalessReturnsDropDown);
	  System.out.println("creditSalesAdjustmentDrop : "+actcreditSalesAdjustmentDrop+" Value Expected : "+expcreditSalesAdjustmentDrop);
	  System.out.println("ticketPrintFormatDropDown : "+actticketPrintFormatDropDown+" Value Expected : "+expticketPrintFormatDropDown);
		
	  
	  if(actposOutLetDropDown.equalsIgnoreCase(expposOutLetDropDown)
			  && actsalesAccountDropdown.equalsIgnoreCase(expsalesAccountDropdown) && actpreOrderDropDown.equalsIgnoreCase(exppreOrderDropDown)
			  && actpreOrderCollectionDropDown.equalsIgnoreCase(exppreOrderCollectionDropDown)
			  && actpreOrderCancellationDropDown.equalsIgnoreCase(exppreOrderCancellationDropDown) && acthomeDeliveryDropDown.equalsIgnoreCase(exphomeDeliveryDropDown)
			  && actcashInDropDown.equalsIgnoreCase(expcashInDropDown)
			  && actcashOutDropDown.equalsIgnoreCase(expcashOutDropDown) && actcashCollectionDropDown.equalsIgnoreCase(expcashCollectionDropDown) 
			  && actdayEndDropDown.equalsIgnoreCase(expdayEndDropDown)
			  && actmessagesDropDown.equalsIgnoreCase(expmessagesDropDown) && actgiftVoucherDropDown.equalsIgnoreCase(expgiftVoucherDropDown) 
			  && actcreditNoteDropDown.equalsIgnoreCase(expcreditNoteDropDown)
			  && actsalessReturnsDropDown.equalsIgnoreCase(expsalessReturnsDropDown))
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
  
  
  // Payments
  
  @FindBy(xpath="//input[@id='chkAllowDenForPaymnt']")
  private static WebElement allowDenominstionForPaymentChkBox;
  
  @FindBy(xpath="//input[@id='chkAppCodeMandatoyForCC']")
  private static WebElement approvalCodeMandatoryForCreditCardChkBox;
  
  @FindBy(xpath="//input[@id='chkAppCodeMandatoyForDC']")
  private static WebElement approvalCodeMandatoryForDeditCardChkBox;
  
  @FindBy(xpath="//input[@id='chkAppCodeMandatoyForEP']")
  private static WebElement approvalCodeMandatoryForEPaymentChkBox;
  
  @FindBy(xpath="//input[@id='txtbox_ddlAllowedPayMethods']")
  private static WebElement allowedPaymentMethodsTxt;
  
  @FindBy(xpath="//ul[@id='ul_ddlAllowedPayMethods']//span[contains(text(),'Cash')]")
  private static WebElement cashChkBox;
  
  @FindBy(xpath="//ul[@id='ul_ddlAllowedPayMethods']//span[contains(text(),'CreditCard')]")
  private static WebElement creditCardChkBox;
  
  @FindBy(xpath="//ul[@id='ul_ddlAllowedPayMethods']//span[contains(text(),'DebitCard')]")
  private static WebElement debitCardChkBox;
  
  @FindBy(xpath="//ul[@id='ul_ddlAllowedPayMethods']//span[contains(text(),'Cheque')]")
  private static WebElement chequeChkBox;
  
  @FindBy(xpath="//ul[@id='ul_ddlAllowedPayMethods']//span[contains(text(),'GiftVoucher')]")
  private static WebElement gitVoucherChkBox;
  
  @FindBy(xpath="//ul[@id='ul_ddlAllowedPayMethods']//span[contains(text(),'CreditNote')]")
  private static WebElement CreditNoteChkBox;
  
  @FindBy(xpath="//input[@id='txtRoundoffValueCash']")
  private static WebElement cashRoundOffValueTxt;
  
  @FindBy(xpath="//select[@id='ddlRoundOffTypeCash']")
  private static WebElement cashRoundOffTypeDropDown;
  
  @FindBy(xpath="//input[@id='txtRoundoffValueCreditCard']")
  private static WebElement creditCardRoundOffValueTxt;
  
  @FindBy(xpath="//select[@id='ddlRoundOffTypeCreditCard']")
  private static WebElement creditCardRoundOffTypeDropDown;
  
  @FindBy(xpath="//input[@id='txtRoundoffValueDebitCard']")
  private static WebElement debitCardRoundOffValueTxt;
  
  @FindBy(xpath="//select[@id='ddlRoundOffTypeDebitCard']")
  private static WebElement debitCardRoundOffTypeDropDown;
  
  @FindBy(xpath="//input[@id='txtRoundoffValueCheque']")
  private static WebElement chequeRoundOffValueTxt;
  
  @FindBy(xpath="//select[@id='ddlRoundOffTypeCheque']")
  private static WebElement chequeRoundOffTypeDropDown;
  
  @FindBy(xpath="//input[@id='txtRoundoffValueGiftVoucher']")
  private static WebElement giftVoucherRoundOffValueTxt;
  
  @FindBy(xpath="//select[@id='ddlRoundOffTypeGiftVoucher']")
  private static WebElement giftVoucherRoundOffTypeDropDown;
  
  @FindBy(xpath="//input[@id='txtRoundoffValueCreditNote']")
  private static WebElement creditNoteRoundOffValueTxt;
  
  @FindBy(xpath="//select[@id='ddlRoundOffTypeCreditNote']")
  private static WebElement creditNoteRoundOffTypeDropDown;
  
  @FindBy(xpath="//input[@id='chkEnableNetRoundOff']")
  private static WebElement enableNetRoundOffInRetailRestaurantBillChkBox;
  
  @FindBy(xpath="//input[@id='txtNetRoundOff']")
  private static WebElement neteRoundOffValueTxt;
  
  @FindBy(xpath="//select[@id='ddlNetRoundOff']")
  private static WebElement netRoundOffTypeDropDown;
  
  @FindBy(xpath="//select[@id='ddlDefaultPayMethods']")
  private static WebElement defaultPaymentMethodDropDown;
  
  public static boolean checkPosPaymentstMenuInPointOfSaleMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	  userNameDisplay.click();
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	  logoutOption.click();
	  
	  Thread.sleep(3000);
			
	  LoginPage lp=new LoginPage(getDriver()); 
	  
	  String unamelt="su";
					      
	  String pawslt="su";
					      
	  lp.enterUserName(unamelt);
					
	  lp.enterPassword(pawslt);
	  
	  lp.clickOnSignInBtn();
			
	  Thread.sleep(8000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
	  pointOfSaleMenu.click();
	
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
	  pointOfSaleUtilitiesMenu.click();
		
	  Thread.sleep(2000);
								
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
	  posUtilitiesPreferencesMenu.click();
		
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPaymentBtn));
	  posPaymentBtn.click();
	
	  Thread.sleep(2000);
	  
	  boolean actallowDenominstionForPaymentChkBox             = allowDenominstionForPaymentChkBox.isDisplayed();
	  boolean actapprovalCodeMandatoryForCreditCardChkBox      = approvalCodeMandatoryForCreditCardChkBox.isDisplayed();
	  boolean actapprovalCodeMandatoryForDeditCardChkBox       = approvalCodeMandatoryForDeditCardChkBox.isDisplayed();
	  boolean actapprovalCodeMandatoryForEPaymentChkBox        = approvalCodeMandatoryForEPaymentChkBox.isDisplayed();
	  boolean actallowedPaymentMethodsTxt                      = allowedPaymentMethodsTxt.isDisplayed();
	  boolean actcashRoundOffValueTxt                          = cashRoundOffValueTxt.isDisplayed();
	  boolean actcashRoundOffTypeDropDown                      = cashRoundOffTypeDropDown.isDisplayed();
	  boolean actcreditCardRoundOffValueTxt                    = creditCardRoundOffValueTxt.isDisplayed();
	  boolean actcreditCardRoundOffTypeDropDown                = creditCardRoundOffTypeDropDown.isDisplayed();
	  boolean actdebitCardRoundOffValueTxt                     = debitCardRoundOffValueTxt.isDisplayed();
	  boolean actdebitCardRoundOffTypeDropDown                 = debitCardRoundOffTypeDropDown.isDisplayed();
	  boolean actchequeRoundOffValueTxt                        = chequeRoundOffValueTxt.isDisplayed();
	  boolean actchequeRoundOffTypeDropDown                    = chequeRoundOffTypeDropDown.isDisplayed();
	  boolean actgiftVoucherRoundOffValueTxt                   = giftVoucherRoundOffValueTxt.isDisplayed();
	  boolean actgiftVoucherRoundOffTypeDropDown               = giftVoucherRoundOffTypeDropDown.isDisplayed();
	  boolean actcreditNoteRoundOffValueTxt                    = creditNoteRoundOffValueTxt.isDisplayed();
	  boolean actcreditNoteRoundOffTypeDropDown                = creditNoteRoundOffTypeDropDown.isDisplayed();
	  boolean actenableNetRoundOffInRetailRestaurantBillChkBox = enableNetRoundOffInRetailRestaurantBillChkBox.isDisplayed();
	  boolean actdefaultPaymentMethodDropDown                  = defaultPaymentMethodDropDown.isDisplayed();
	  
	  boolean expallowDenominstionForPaymentChkBox             = true;
	  boolean expapprovalCodeMandatoryForCreditCardChkBox      = true;
	  boolean expapprovalCodeMandatoryForDeditCardChkBox       = true;
	  boolean expapprovalCodeMandatoryForEPaymentChkBox        = true;
	  boolean expallowedPaymentMethodsTxt                      = true;
	  boolean expcashRoundOffValueTxt                          = true;
	  boolean expcashRoundOffTypeDropDown                      = true;
	  boolean expcreditCardRoundOffValueTxt                    = true;
	  boolean expcreditCardRoundOffTypeDropDown                = true;
	  boolean expdebitCardRoundOffValueTxt                     = true;
	  boolean expdebitCardRoundOffTypeDropDown                 = true;
	  boolean expchequeRoundOffValueTxt                        = true;
	  boolean expchequeRoundOffTypeDropDown                    = true;
	  boolean expgiftVoucherRoundOffValueTxt                   = true;
	  boolean expgiftVoucherRoundOffTypeDropDown               = true;
	  boolean expcreditNoteRoundOffValueTxt                    = true;
	  boolean expcreditNoteRoundOffTypeDropDown                = true;
	  boolean expenableNetRoundOffInRetailRestaurantBillChkBox = true;
	  boolean expdefaultPaymentMethodDropDown                  = true;
	  
	  System.out.println("allowDenominstionForPaymentChkBox             : "+actallowDenominstionForPaymentChkBox+" Value Expected : "+expallowDenominstionForPaymentChkBox);
	  System.out.println("approvalCodeMandatoryForCreditCardChkBox      : "+actapprovalCodeMandatoryForCreditCardChkBox+" Value Expected : "+expapprovalCodeMandatoryForCreditCardChkBox);
	  System.out.println("approvalCodeMandatoryForDeditCardChkBox       : "+actapprovalCodeMandatoryForDeditCardChkBox+" Value Expected : "+expapprovalCodeMandatoryForDeditCardChkBox);
	  System.out.println("approvalCodeMandatoryForEPaymentChkBox        : "+actapprovalCodeMandatoryForEPaymentChkBox+" Value Expected : "+expapprovalCodeMandatoryForEPaymentChkBox);
	  System.out.println("allowedPaymentMethodsTxt                      : "+actallowedPaymentMethodsTxt+" Value Expected : "+expallowedPaymentMethodsTxt);
	  System.out.println("cashRoundOffValueTxt                          : "+actcashRoundOffValueTxt+" Value Expected : "+expcashRoundOffValueTxt);
	  System.out.println("cashRoundOffTypeDropDown                      : "+actcashRoundOffTypeDropDown+" Value Expected : "+expcashRoundOffTypeDropDown);
	  System.out.println("creditCardRoundOffValueTxt                    : "+actcreditCardRoundOffValueTxt+" Value Expected : "+expcreditCardRoundOffValueTxt);
	  System.out.println("creditCardRoundOffTypeDropDown                : "+actcreditCardRoundOffTypeDropDown+" Value Expected : "+expcreditCardRoundOffTypeDropDown);
	  System.out.println("debitCardRoundOffValueTxt                     : "+actdebitCardRoundOffValueTxt+" Value Expected : "+expdebitCardRoundOffValueTxt);
	  System.out.println("debitCardRoundOffTypeDropDown                 : "+actdebitCardRoundOffTypeDropDown+" Value Expected : "+expdebitCardRoundOffTypeDropDown);
	  System.out.println("chequeRoundOffValueTxt                        : "+actchequeRoundOffValueTxt+" Value Expected : "+expchequeRoundOffValueTxt);
	  System.out.println("chequeRoundOffTypeDropDown                    : "+actchequeRoundOffTypeDropDown+" Value Expected : "+expchequeRoundOffTypeDropDown);
	  System.out.println("giftVoucherRoundOffValueTxt                   : "+actgiftVoucherRoundOffValueTxt+" Value Expected : "+expgiftVoucherRoundOffValueTxt);
	  System.out.println("giftVoucherRoundOffTypeDropDown               : "+actgiftVoucherRoundOffTypeDropDown+" Value Expected : "+expgiftVoucherRoundOffTypeDropDown);
	  System.out.println("creditNoteRoundOffValueTxt                    : "+actcreditNoteRoundOffValueTxt+" Value Expected : "+expcreditNoteRoundOffValueTxt);
	  System.out.println("creditNoteRoundOffTypeDropDown                : "+actcreditNoteRoundOffTypeDropDown+" Value Expected : "+expcreditNoteRoundOffTypeDropDown);
	  System.out.println("enableNetRoundOffInRetailRestaurantBillChkBox : "+actenableNetRoundOffInRetailRestaurantBillChkBox+" Value Expected : "+expenableNetRoundOffInRetailRestaurantBillChkBox);
	  System.out.println("defaultPaymentMethodDropDown                  : "+actdefaultPaymentMethodDropDown+" Value Expected : "+expdefaultPaymentMethodDropDown);

	  
		
	  if(actallowDenominstionForPaymentChkBox==expallowDenominstionForPaymentChkBox && actapprovalCodeMandatoryForCreditCardChkBox==expapprovalCodeMandatoryForCreditCardChkBox 
				&& actapprovalCodeMandatoryForDeditCardChkBox==expapprovalCodeMandatoryForDeditCardChkBox && actapprovalCodeMandatoryForEPaymentChkBox==expapprovalCodeMandatoryForEPaymentChkBox
				&& actallowedPaymentMethodsTxt==expallowedPaymentMethodsTxt && actcashRoundOffValueTxt==expcashRoundOffValueTxt && actcashRoundOffTypeDropDown==expcashRoundOffTypeDropDown
				&& actcreditCardRoundOffValueTxt==expcreditCardRoundOffValueTxt && actcreditCardRoundOffTypeDropDown==expcreditCardRoundOffTypeDropDown
				&& actdebitCardRoundOffValueTxt==expdebitCardRoundOffValueTxt && actdebitCardRoundOffTypeDropDown==expdebitCardRoundOffTypeDropDown
				&& actchequeRoundOffValueTxt==expchequeRoundOffValueTxt && actchequeRoundOffTypeDropDown==expchequeRoundOffTypeDropDown
				&& actgiftVoucherRoundOffValueTxt==expgiftVoucherRoundOffValueTxt && actgiftVoucherRoundOffTypeDropDown==expgiftVoucherRoundOffTypeDropDown
				&& actcreditNoteRoundOffValueTxt==expcreditNoteRoundOffValueTxt && actcreditNoteRoundOffTypeDropDown==expcreditNoteRoundOffTypeDropDown
				&& actenableNetRoundOffInRetailRestaurantBillChkBox==expenableNetRoundOffInRetailRestaurantBillChkBox
				&& actdefaultPaymentMethodDropDown==expdefaultPaymentMethodDropDown)
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
		
		
  

  public static boolean checkSavingPosPayments() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
	
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
	  Select posOutLetDropDownSelect = new Select(posOutLetDropDown);
	  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allowedPaymentMethodsTxt));
	  allowedPaymentMethodsTxt.click();
	  
	  Thread.sleep(2000);
	  
	  cashChkBox.click();
	  
	  creditCardChkBox.click();
	  
	  debitCardChkBox.click();
	  
	  
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
	  posSaveBtn.click();
		
	  String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
	  String exppointOfSalesConfirmationBodyMessage = "Outlet details saved successfully.";
		
	  System.out.println("pointOfSalesConfirmationBodyMessage : ."+actpointOfSalesConfirmationBodyMessage+". Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
	  posInformationPopupOkBtn.click();
	  
	  if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage))
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
  
  
  
  

  
  public static boolean checkSavedPaymentsOfOutlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	  userNameDisplay.click();
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	  logoutOption.click();
	  
	  Thread.sleep(3000);
			
	  LoginPage lp=new LoginPage(getDriver()); 
	  
	  String unamelt="su";
					      
	  String pawslt="su";
					      
	  lp.enterUserName(unamelt);
					
	  lp.enterPassword(pawslt);
	  
	  lp.clickOnSignInBtn();
			
	  Thread.sleep(8000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
	  pointOfSaleMenu.click();
	
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
	  pointOfSaleUtilitiesMenu.click();
		
	  Thread.sleep(2000);
								
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
	  posUtilitiesPreferencesMenu.click();
		
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPaymentBtn));
	  posPaymentBtn.click();
	
	  Thread.sleep(2000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
	  Select posOutLetDropDownSelect = new Select(posOutLetDropDown);
	  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allowedPaymentMethodsTxt));
	  String actallowedPaymentMethodsTxt = allowedPaymentMethodsTxt.getAttribute("value");
	  String expallowedPaymentMethodsTxt = "Cash,CreditCard,DebitCard";
	  
	  
	  String actposOutLetDropDown            = posOutLetDropDownSelect.getFirstSelectedOption().getText();
	  
	  String expposOutLetDropDown            = "Outlet1";
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posCloseBtn));
	  posCloseBtn.click();
	  
	  System.out.println("posOutLetDropDown : "+actposOutLetDropDown+" Value Expected : "+expposOutLetDropDown);
	  
	  System.out.println("allowedPaymentMethodsTxt : "+actallowedPaymentMethodsTxt+" Value Expected : "+expallowedPaymentMethodsTxt);
		
	  
	  if(actposOutLetDropDown.equalsIgnoreCase(expposOutLetDropDown) && actallowedPaymentMethodsTxt.equalsIgnoreCase(expallowedPaymentMethodsTxt))
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
  
	
	  @FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
	  private static WebElement  invTransactionsMenu; 
	  
	  @FindBy(xpath="//a[@id='139']//span[contains(text(),'Purchases')]")
	  private static WebElement  invTransPurchasesMenu; 
	  
	  @FindBy(xpath="//a[@id='140']//span[contains(text(),'Sales')]")
	  private static WebElement  invTransSalesMenu; 
	  
	  @FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
	  private static WebElement  invTransStocksMenu; 
	  
	  @FindBy(xpath="//a[@id='200']//span[contains(text(),'Reports')]")
	  private static WebElement  inventoryReportsMenu; 
	    	
	  @FindBy(xpath="//span[contains(text(),'Order Management')]")
	  private static WebElement  orderManagementMenu; 
	  
	  @FindBy(xpath="//input[@id='id_header_268435460']")
	  private static WebElement  wareHouseTxt;
	  
	  @FindBy(xpath="//tbody[@id='id_header_268435460_table_data_body']/tr/td")
	  private static List<WebElement> wareHouseListCount;
	  
	  @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
	  private static WebElement  select1stRow_1stColumn;
		
	  @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
	  private static WebElement  select1stRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
		private static WebElement  select1stRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
		private static WebElement  select1stRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
		private static WebElement  select1stRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
		private static WebElement  select1stRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
		private static WebElement  select1stRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
		private static WebElement  select1stRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
		private static WebElement  select1stRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
		private static WebElement  select1stRow_10thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
		private static WebElement  select1stRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
		private static WebElement  select1stRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
		private static WebElement  select1stRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
		private static WebElement  select1stRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
		private static WebElement  select1stRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
		private static WebElement  select1stRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
		private static WebElement  select1stRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
		private static WebElement  select1stRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
		private static WebElement  select2ndRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
		private static WebElement  select2ndRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
		private static WebElement  select2ndRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
		private static WebElement  select2ndRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
		private static WebElement  select2ndRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
		private static WebElement  select2ndRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
		private static WebElement  select2ndRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
		private static WebElement  select2ndRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
		private static WebElement  select2ndRow_9thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
		private static WebElement  select2ndRow_11thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
		private static WebElement  select2ndRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
		private static WebElement  select2ndRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
		private static WebElement  select2ndRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
		private static WebElement  select2ndRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
		private static WebElement  select2ndRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
		private static WebElement  select2ndRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
		private static WebElement  select2ndRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
		private static WebElement  select2ndRow_19thColumn;
		
		@FindBy(xpath="//input[@id='id_body_26']")
		private static WebElement  enter_Quantity;
		
		@FindBy(xpath="//input[@id='id_body_27']")
		private static WebElement  enter_Rate;
		
		@FindBy(xpath="//*[@id='id_body_28']")
		private static WebElement  enter_Gross;
		
		@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[2]/div[1]/div/div[2]/div[1]/div[1]/div[1]/div[3]/div[4]/div/table/tbody/tr[1]/td[14]/input")
		private static WebElement  enter_Discount;
		
		@FindBy(xpath="//input[@id='id_body_13']")
		private static WebElement  enter_Batch;
		
		@FindBy(xpath="//input[@id='id_body_37']")
		private static WebElement enter_Expirydate;
		
		@FindBy(xpath="//input[@id='id_header_1']")
		private static WebElement  documentNumberTxt;
		
		@FindBy(xpath="//input[@id='id_header_268436556']")
		private static WebElement  outletTxt;

		

	  public boolean checkOpeningStocksNewVoucherSaveWithBatchItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransactionsMenu));
			invTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransStocksMenu));
			invTransStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksVoucher));
			openingStocksVoucher.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkUserFriendlyMessage();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.sendKeys(Keys.SPACE);
				
			int warehousecount=wareHouseListCount.size();
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=wareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("HYDERABAD"))
				{
					wareHouseListCount.get(i).click();
					break;
				}
			}
			
			wareHouseTxt.sendKeys(Keys.TAB);
			
			outletTxt.sendKeys("Outlet1");
			Thread.sleep(2000);
			outletTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			Thread.sleep(3000);
			
		    int itemcount=itemListCount.size();
			
			System.err.println(itemcount);
				
			for(int i=0 ; i < itemcount ;i++)
			{
				String data=itemListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("BR COGS ITEM"))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.click();
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys("10");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.click();
			enter_Batch.clear();
			enter_Batch.sendKeys("PosBatch");
			enter_Batch.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.click();
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	        String docno=documentNumberTxt.getAttribute("value");
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
	        voucherSaveBtn.click();
			
			boolean actVoucherSaveMessageWithDocumentNo  = checkVoucherSavingMessage(docno);
			boolean expVoucherSaveMessageWithDocumentNo  = true;
			
			System.out.println("VoucherSaveMessageWithDocumentNo : "+actVoucherSaveMessageWithDocumentNo+" Value Expected : "+expVoucherSaveMessageWithDocumentNo);
		
			if(actVoucherSaveMessageWithDocumentNo==expVoucherSaveMessageWithDocumentNo)
			{
				System.out.println("Test Pass : Unit Field Displayed with Dozens");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
				return false;
			}
		}
		catch (Exception e) 
		{
	    
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
	    }	
	  }
	  
	  @FindBy(xpath="//tbody[@id='id_body_23_table_data_body']/tr/td")
	  private static List<WebElement> itemListCount;
	  
	  @FindBy(xpath="//input[@id='id_body_23']")
	  private static WebElement  enter_ItemTxt;
	  
	  @FindBy(xpath="//input[@id='id_body_24']")
	  private static WebElement  enter_UnitTxt;
	  
	  @FindBy(xpath="//*[@id='id_transactionentry_save']/div[2]")
	  private static WebElement  voucherSaveBtn;
	  
	  @FindBy(xpath="//input[@id='foptCtrl_outlet']")
	  private static WebElement  lpOutLetTxt;
	  
	  @FindBy(xpath="//input[@id='foptCtrl_Counter']")
	  private static WebElement  lpCounterTxt;
	  
	
	  
	  @FindBy(xpath="//div[@id='dayInFieldSet1']//input[@class='Ftxtbox']")
	  private static WebElement dayinReferenceNoTxt;
	  
	  @FindBy(xpath="//td[@id='dpDayIn_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	  private static WebElement dayinDateCalendarBtn;
	  
	  @FindBy(xpath="//input[@id='tpDayIn']")
	  private static WebElement dayinTimeTxt;
	  
	  @FindBy(xpath="//input[@id='optCounterOptionControl']")
	  private static WebElement dayinCounterTxt;
	  
	  @FindBy(xpath="//div[@id='id_focus8_wrapper_fullscreenmode']//div[3]//div[2]//div[2]//input[1]")
	  private static WebElement dayinCashierTxt;
	  
	  @FindBy(xpath="//input[@id='txtOpeningBalance']")
	  private static WebElement dayinOpeningBalanceTxt;
	  
	  @FindBy(xpath="//input[@id='chkMultiCurrency']")
	  private static WebElement dayinConfirmCashBalanceChkBox;
	  
	  @FindBy(xpath="//*[@id='btnSaveMultiCurrency']/div[1]/span")
	  private static WebElement dayinSaveBtn;
	  
	
	  
	  @FindBy(xpath="//div[@id='divFuncShortFirstRow']/div/div/div[1]/div")
	  private static List<WebElement> rightPanelList;
	
	  @FindBy(xpath="//input[@id='txtSearchItem']")
	  private static WebElement codeTxt;
	  
	  @FindBy(xpath="//*[@id='divSearchItemHeader']/div[2]/span")
	  private static WebElement searchItemBtn;
	  
	  @FindBy(xpath="//*[@id='divSearchMemberHeader']/div[2]/span")
	  private static WebElement searchMemberBtn;
	  
	  @FindBy(xpath="//div[@class='col-lg-8 col-md-8 col-sm-12 col-xs-12 pos-padding-bottom5 input-group searchstyle']//i[@class='fa fa-search']")
	  private static WebElement searchEmployeeBtn;
	  
	  @FindBy(xpath="//tbody[@id='tbodySearchItem']/tr/td")
	  private static List<WebElement> rightPanelSearchBodyList;
	  
	  @FindBy(xpath="//tbody[@id='tbodySearchItem']//td[1]")
	  private static WebElement itemCodeRow1;
	  
	  
	  public boolean checkPosScreenOnLoginWithUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
			Thread.sleep(3000);
		
		    LoginPage lp=new LoginPage(getDriver()); 
			
			String unamelt="UserAllOptions";
					      
			String pawslt="12345";
					      
			lp.enterUserName(unamelt);
					
			lp.enterPassword(pawslt);
			
			lpOutLetTxt.sendKeys("outlet1");
			Thread.sleep(2000);
			lpOutLetTxt.sendKeys(Keys.TAB);
			
			lpCounterTxt.sendKeys("Counter Update");
			Thread.sleep(2000);
			lpCounterTxt.sendKeys(Keys.TAB);
					  
			lp.clickOnSignInBtn();
			
			Thread.sleep(6000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
			pointOfSaleMenu.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
			pointOfSaleMainScreenMenu.click();
			
			Thread.sleep(2000);
									
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMS));
			pointOfSaleMS.click();
			
			Thread.sleep(2000);
			
			String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
			String exppointOfSalesConfirmationBodyMessage = "Please do 'Day In' before proceeding further.";
			
			System.out.println("pointOfSalesConfirmationBodyMessage : "+actpointOfSalesConfirmationBodyMessage+" Value Expected : "+exppointOfSalesConfirmationBodyMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
			posInformationPopupOkBtn.click();
			
			boolean actdayinReferenceNoTxt           = dayinReferenceNoTxt.isDisplayed();
			boolean actdayinDateCalendarBtn          = dayinDateCalendarBtn.isDisplayed();
			boolean actdayinTimeTxt                  = dayinTimeTxt.isDisplayed();
			boolean actdayinCounterTxt               = dayinCounterTxt.isDisplayed();
			boolean actdayinCashierTxt               = dayinCashierTxt.isDisplayed();
			boolean actdayinOpeningBalanceTxt        = dayinOpeningBalanceTxt.isDisplayed();
			boolean actdayinConfirmCashBalanceChkBox = dayinConfirmCashBalanceChkBox.isDisplayed();
			
			boolean expdayinReferenceNoTxt           = true;
			boolean expdayinDateCalendarBtn          = true;
			boolean expdayinTimeTxt                  = true;
			boolean expdayinCounterTxt               = true;
			boolean expdayinCashierTxt               = true;
			boolean expdayinOpeningBalanceTxt        = true;
			boolean expdayinConfirmCashBalanceChkBox = true;
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayinConfirmCashBalanceChkBox));
			dayinConfirmCashBalanceChkBox.click();
			
			boolean actdayinSaveBtn = dayinSaveBtn.isDisplayed();
			boolean expdayinSaveBtn = true;
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayinSaveBtn));
			dayinSaveBtn.click();
			
			String expMessage = "Day In is Done";
			String actMessage = toastMessage.getText();
			
			toastMessageCloseBtn.click();
			
			System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			
			Thread.sleep(3000);
			
			int posFooterPanelListCount = posFooterPanelList.size();
			
			for(int i=0;i<posFooterPanelListCount;i++)
			{
				String data = posFooterPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Item"))
				{
					posFooterPanelList.get(i).click();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			
			int rightPanelListCount = rightPanelList.size();
			
			ArrayList<String> rightPanelListArray = new ArrayList<String>();			
			for(int i=0;i<rightPanelListCount;i++)
			{
				String data = rightPanelList.get(i).getText();
				
				rightPanelListArray.add(data);
			}
			
			
			String actrightPanelList = rightPanelListArray.toString();
			
			String exprightPanelList = "[Ctrl 1, Select Item by Code, Ctrl 2, Select Item by Name, Ctrl 3, Select Item by Alias, Ctrl 4, Advanced Search Item, Ctrl 5, Create Item, Ctrl 6, Quick Create Item, Ctrl 7, View Item, Ctrl 8, Edit Item, Ctrl 9, Add Item Comment – For Promotional Messages, Ctrl A, Substitute Item, Ctrl B, Related Item, Ctrl C, Schemes List related to the selected Item, Ctrl D, Star Items, Ctrl E, Item Query]";
			
			System.out.println("actrightPanelList : "+actrightPanelList);
			System.out.println("exprightPanelList : "+exprightPanelList);
			
			System.out.println("dayinReferenceNoTxt           : "+actdayinReferenceNoTxt          +" Value Expected : "+expdayinReferenceNoTxt);
			System.out.println("dayinDateCalendarBtn          : "+actdayinDateCalendarBtn         +" Value Expected : "+expdayinDateCalendarBtn);
			System.out.println("dayinTimeTxt                  : "+actdayinTimeTxt                 +" Value Expected : "+expdayinTimeTxt);
			System.out.println("dayinCounterTxt               : "+actdayinCounterTxt              +" Value Expected : "+expdayinCounterTxt);
			System.out.println("dayinCashierTxt               : "+actdayinCashierTxt              +" Value Expected : "+expdayinCashierTxt);
			System.out.println("dayinOpeningBalanceTxt        : "+actdayinOpeningBalanceTxt       +" Value Expected : "+expdayinOpeningBalanceTxt);
			System.out.println("dayinConfirmCashBalanceChkBox : "+actdayinConfirmCashBalanceChkBox+" Value Expected : "+expdayinConfirmCashBalanceChkBox);
			System.out.println("dayinSaveBtn                  : "+actdayinSaveBtn                 +" Value Expected : "+expdayinSaveBtn);
			
		
			if(actrightPanelList.equalsIgnoreCase(exprightPanelList) && actMessage.equalsIgnoreCase(expMessage)
					
					&& actdayinReferenceNoTxt==expdayinReferenceNoTxt && actdayinDateCalendarBtn==expdayinDateCalendarBtn && actdayinTimeTxt==expdayinTimeTxt
					&& actdayinCounterTxt==expdayinCounterTxt && actdayinCashierTxt==expdayinCashierTxt && actdayinOpeningBalanceTxt==expdayinOpeningBalanceTxt
					&& actdayinConfirmCashBalanceChkBox==expdayinConfirmCashBalanceChkBox && actdayinSaveBtn==expdayinSaveBtn)
			{
				System.out.println("Test Pass : Unit Field Displayed with Dozens");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
				return false;
			}
		}
		catch (Exception e) 
		{
	    
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
	    }	
	  }
	  
	  
	  
	  @FindBy(xpath="//tbody[@id='tbodySearchItem']/tr/td")
	  private static List<WebElement> itemBodyList; 
	  

	  @FindBy(xpath="//*[@id='Id_MRPBatch_Grid']")
	  private static WebElement  batchPopUPEmptyRows;
	  
	  @FindBy(xpath="//label[@id='lblitem']")
	private static WebElement batchItemName;
	
	@FindBy(xpath="//label[@id='lblTotalQty']")
	private static WebElement batchTotalQty;
	
	@FindBy(xpath="//label[@id='lblAdjustQty']")
	private static WebElement batchAdjustQty;
	
	@FindBy(xpath="//label[@id='lblBalnceQty']")
	private static WebElement batchBalance;
	
	@FindBy(xpath="//div[contains(@class,'col-xs-12 col-sm-12 col-md-12 col-lg-12 P_ingBottom')]//div[2]//input[1]")
	private static WebElement batchExipiringInRadioBtn;
	             
	@FindBy(xpath="//section[@id='page_Content']//div[@class='row']//div//div[3]//input[1]")
	private static WebElement batchExipiringAfetrRadioBtn;
	
	@FindBy(xpath="//input[@id='txtWithin']")
	private static WebElement batchWithInTxt;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-1']")
	private static WebElement batch_BatchNoRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-2']")
	private static WebElement batch_BaseQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-6']")
	private static WebElement batch_ExpiryInDateRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-7']")
	private static WebElement batch_RateRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-8']")
	private static WebElement batch_QtyAdjustedRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-14']")
	private static WebElement batch_PurchaseDateRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-1']")
	private static WebElement batch_BatchNoRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-2']")
	private static WebElement batch_BaseQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-6']")
	private static WebElement batch_ExpiryInDateRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-7']")
	private static WebElement batch_RateRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-8']")
	private static WebElement batch_QtyAdjustedRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-14']")
	private static WebElement batch_PurchaseDateRow2;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-1']")
	private static WebElement batch_BatchNoRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-2']")
	private static WebElement batch_BaseQtyRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-6']")
	private static WebElement batch_ExpiryInDateRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-7']")
	private static WebElement batch_RateRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-8']")
	private static WebElement batch_QtyAdjustedRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-14']")
	private static WebElement batch_PurchaseDateRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-1']")
	private static WebElement batch_BatchNoRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-2']")
	private static WebElement batch_BaseQtyRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-6']")
	private static WebElement batch_ExpiryInDateRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-7']")
	private static WebElement batch_RateRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-8']")
	private static WebElement batch_QtyAdjustedRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-14']")
	private static WebElement batch_PurchaseDateRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-1']")
	private static WebElement batch_BatchNoRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-2']")
	private static WebElement batch_BaseQtyRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-6']")
	private static WebElement batch_ExpiryInDateRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-7']")
	private static WebElement batch_RateRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-8']")
	private static WebElement batch_QtyAdjustedRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-14']")
	private static WebElement batch_PurchaseDateRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-1']")
	private static WebElement batch_BatchNoRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-2']")
	private static WebElement batch_BaseQtyRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-6']")
	private static WebElement batch_ExpiryInDateRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-7']")
	private static WebElement batch_RateRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-8']")
	private static WebElement batch_QtyAdjustedRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-14']")
	private static WebElement batch_PurchaseDateRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-1']")
	private static WebElement batch_BatchNoRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-2']")
	private static WebElement batch_BaseQtyRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-6']")
	private static WebElement batch_ExpiryInDateRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-7']")
	private static WebElement batch_RateRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-8']")
	private static WebElement batch_QtyAdjustedRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-14']")
	private static WebElement batch_PurchaseDateRow7;
	
	@FindBy(xpath="//i[@class='icon-refresh icon-font7']")
	private static WebElement batchRefreshBtn;
	
	@FindBy(xpath="//input[@id='Batch_Search']")
	private static WebElement batchSearchTxt;
	
	@FindBy(xpath="//input[@class='Fcheckbox batchcheck']")
	private static WebElement batchShowAllAvalibleBatches;
	
	@FindBy(xpath="//label[contains(text(),'Customization')]")
	private static WebElement batchCustomizationIcon;
	
	@FindBy(xpath="//i[@class='icon-pick icon-font5']")
	private static WebElement batchPickOnFIFOIcon;
	
	@FindBy(xpath="//i[@class='icon-ok icon-font7']")
	private static WebElement batchOkIcon;

	@FindBy(xpath="//div[@class='col-xs-12 col-sm-12 col-md-12 col-lg-12']//div[6]//label[1]")
	private static WebElement batchTotalAdjustedQtyFooter;
	
	@FindBy(xpath="//div[@class='col-xs-6 col-sm-6 col-md-1 col-lg-1 text-right']")
	private static WebElement batchTotalQtyFooter;
	
	@FindBy(xpath="//i[contains(@class,'icon-cancel icon-font7')]")
	private static WebElement batchCancelIcon;
	  
	  
	  public boolean checkSelectingItemAndSeletingBatchInBatchPopUp() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
			
			int rightPanelListCount = rightPanelList.size();
			
			for(int i=0;i<rightPanelListCount;i++)
			{
				String data = rightPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Select Item by Code"))
				{
					rightPanelList.get(i).click();
					break;
				}
			}	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
			codeTxt.click();
			codeTxt.sendKeys("BR COGS ITEM");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchItemBtn));
			searchItemBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCodeRow1));
			getAction().doubleClick(itemCodeRow1).build().perform();
			
			
			
			Thread.sleep(3000);
		
			
			String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
			String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
			
			
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			//act7=batch_ExpiryInDateRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			//act10=batch_PurchaseDateRow1.getText();

			


			expBatchName="BR COGS ITEM";
			expTotalQty="1.00";
			expAdjustedQty="1.00"; //0.00
			expBalance="0.00"; //1.00
			
			
			expTotalQtyFooter="120.00";
			expTotalAdjustedQtyFooter="1.00"; //0.00
			
			
			expRow1BatchNo="POSBATCH";
			expRow1BaseQty="120.00";
			expRow1Rate="0.83";
			expRow1AdjustedQty="1.00";// 0.00
			
			
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
				
			//First Row
			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			

			System.out.println("*********************************************** checkSelectingItemAndSeletingBatchInBatchPopUp  ********************************************");
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchName                    +" Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQty                     +" Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actAdjustedQty                  +" Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBalance                      +" Value Expected : "+expBalance);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalAdjustedQtyFooter       +" Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQtyFooter               +" Value Expected : "+expTotalQtyFooter);
			
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BatchNo                  +" Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BaseQty                  +" Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1Rate                     +" Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1AdjustedQty              +" Value Expected : "+expRow1AdjustedQty);
			

			if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty))
			{
				System.out.println("Test Pass : Unit Field Displayed with Dozens");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
				return false;
			}
		}
		catch (Exception e) 
		{
	    
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
	    }	
	  }
	  
	  
	  
	  public boolean checkBatchPopUPValuesAfterClickOnPickOnFifo() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			Thread.sleep(3000);
		
			
			String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
			String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
			
			
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			//act7=batch_ExpiryInDateRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			//act10=batch_PurchaseDateRow1.getText();

			


			expBatchName="BR COGS ITEM";
			expTotalQty="1.00";
			expAdjustedQty="1.00";
			expBalance="0.00";
			
			
			expTotalQtyFooter="120.00";
			expTotalAdjustedQtyFooter="1.00";
			
			
			expRow1BatchNo="POSBATCH";
			expRow1BaseQty="120.00";
			expRow1Rate="0.83";
			expRow1AdjustedQty="1.00";
			
			
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
				
			//First Row
			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			

			System.out.println("*********************************************** checkBatchPopUPValuesAfterClickOnPickOnFifo  ********************************************");
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchName                    +" Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQty                     +" Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actAdjustedQty                  +" Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actBalance                      +" Value Expected : "+expBalance);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalAdjustedQtyFooter       +" Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQtyFooter               +" Value Expected : "+expTotalQtyFooter);
			
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BatchNo                  +" Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BaseQty                  +" Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1Rate                     +" Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1AdjustedQty              +" Value Expected : "+expRow1AdjustedQty);
			

			if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty))
			{
				System.out.println("Test Pass : Unit Field Displayed with Dozens");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
				return false;
			}
		}
		catch (Exception e) 
		{
	    
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
	    }	
	  }
	  
	  
  @FindBy(xpath="//input[@id='txtChangePrice']")
  private static WebElement changePriceTxt;
  
  @FindBy(xpath="//div[@id='divChangePriceFooterRight']/div")
  private static WebElement changePriceOkBtn;
  
  @FindBy(xpath="//tbody[@id='tBodySelectedProduct']/tr/td")
  private static List<WebElement> bodyRowList;
  
  @FindBy(xpath="//tfoot[@id='tFootSelectedProduct']")
  private static List<WebElement> FooterRowList;
 	  
	  
  public boolean checkOkInBatchPopUpAndChangeRateofItemAndClickOK() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceTxt));
		changePriceTxt.click();
		changePriceTxt.sendKeys(Keys.END);
		changePriceTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		changePriceTxt.sendKeys("10");
		changePriceTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceOkBtn));
		changePriceOkBtn.click();
		
		Thread.sleep(3000);
		
		int bodyRowListCount = bodyRowList.size();
		
		ArrayList<String> bodyRowListArray = new ArrayList<String>();
		
		for(int i=0;i<bodyRowListCount;i++)
		{
			String data = bodyRowList.get(i).getText();
			bodyRowListArray.add(data);
		}
		
		String actbodyRowList = bodyRowListArray.toString();
		String expbodyRowList = "[, BR COGS ITEM, 1, 10.00, 10.00, 0.00, 5.00, POSBATCH, ]";
		
		System.out.println("actbodyRowList : "+actbodyRowList);
		System.out.println("expbodyRowList : "+expbodyRowList);
		
		int FooterRowListCount = FooterRowList.size();
		
		ArrayList<String> FooterRowListArray = new ArrayList<String>();
		
		for(int i=0;i<FooterRowListCount;i++)
		{
			String data = FooterRowList.get(i).getText();
			FooterRowListArray.add(data);
		}
		
		String actFooterRowList = FooterRowListArray.toString();
		String expFooterRowList = "[1.00 10.00 10.00 0.00 0.48]";
		
		System.out.println("actFooterRowList : "+actFooterRowList);
		System.out.println("expFooterRowList : "+expFooterRowList);
		
		String actposTotalValue    = posTotalValue.getText();
		String actposVatValue      = posVatValue.getText();
		String actposDiscountValue = posDiscountValue.getText();
		String actposNetValue      = posNetValue.getText();
		
		String expposTotalValue    = "10.00";
		String expposVatValue      = "0.48";
		String expposDiscountValue = "0.00";
		String expposNetValue      = "10";
		
		System.out.println("posTotalValue     : "+actposTotalValue   +" Value Expected : "+expposTotalValue);
		System.out.println("posVatValue       : "+actposVatValue     +" Value Expected : "+expposVatValue);
		System.out.println("posDiscountValue  : "+actposDiscountValue+" Value Expected : "+expposDiscountValue);
		System.out.println("posNetValue       : "+actposNetValue     +" Value Expected : "+expposNetValue);

		if(actbodyRowList.equalsIgnoreCase(expbodyRowList) && actFooterRowList.equalsIgnoreCase(expFooterRowList)
				&& actposTotalValue.equalsIgnoreCase(expposTotalValue) && actposVatValue.equalsIgnoreCase(expposVatValue)
				&& actposDiscountValue.equalsIgnoreCase(expposDiscountValue) && actposNetValue.equalsIgnoreCase(expposNetValue))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }  
	  
	  
  public boolean checkMemberOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Member"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		ArrayList<String> rightPanelListArray = new ArrayList<String>();			
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			rightPanelListArray.add(data);
		}
		
		
		String actrightPanelList = rightPanelListArray.toString();
		
		String exprightPanelList = "[Ctrl F, Select Member by Code, Ctrl G, Select Member by Name, Ctrl H, Select Member by Telephone, Ctrl I, Select Member by Barcode/Card, Ctrl J, Advanced Search Member, Ctrl K, Clear Member, Ctrl L, Create Member, Ctrl M, Quick Create Member, Ctrl N, View Member, Ctrl O, Edit Member]";
		
		System.out.println("actrightPanelList : "+actrightPanelList);
		System.out.println("exprightPanelList : "+exprightPanelList);
		
		
	
		if(actrightPanelList.equalsIgnoreCase(exprightPanelList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
 /* @FindBy(xpath="//div[@id='divMemberName']")
  private static WebElement memberNameDisplay;
  
  @FindBy(xpath="//div[@id='divMemberShipType']")
  private static WebElement memberTypeDisplay;*/
  
  /*@FindBy(xpath="//div[@id='divEmployeeName']")
  private static WebElement employeeNameDisplay;*/
  
  @FindBy(xpath="//tbody[@id='tbodySearchMember']//td[1]")
  private static WebElement memberCodeRow1;
  
 /* @FindBy(xpath="//*[@id='pos_header']/div[3]/nav/div/ul/li[3]/div/div/div/div[1]/div[3]")
  private static WebElement memberNameDisplay;
  
  @FindBy(xpath="//*[@id='pos_header']/div[3]/nav/div/ul/li[3]/div/div/div/div[2]/div[3]")
  private static WebElement memberTypeDisplay;
  
  @FindBy(xpath="//*[@id='pos_header']/div[3]/nav/div/ul/li[4]/div/div/div/div[1]/div[3]")
  private static WebElement employeeNameDisplay;*/
  
  @FindBy(xpath="/html/body/section/div[3]/div[1]/div[4]/div/div[3]/nav/div/ul/li[3]/div/div/div/div[1]/div[3]")
  private static WebElement memberNameDisplay;
  
  @FindBy(xpath="/html/body/section/div[3]/div[1]/div[4]/div/div[3]/nav/div/ul/li[3]/div/div/div/div[2]/div[3]")
  private static WebElement memberTypeDisplay;
  
  @FindBy(xpath="/html/body/section/div[3]/div[1]/div[4]/div/div[3]/nav/div/ul/li[4]/div/div/div/div[1]/div[3]")
  private static WebElement employeeNameDisplay;
  
  

  
  


  public boolean checkSelectingMember() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Member by Code"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMemberBtn));
		searchMemberBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberCodeRow1));
		getAction().doubleClick(memberCodeRow1).build().perform();
		
		
		Thread.sleep(2000);
		
		String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessage = "Points definition do not exist for the selected member. Do you want to continue?";
		
		System.out.println("pointOfSalesConfirmationBodyMessage : "+actpointOfSalesConfirmationBodyMessage+" Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonMemberBtn));
		userribbonMemberBtn.click();
		
		Thread.sleep(2000);
		
		String actmemberNameDisplay = memberNameDisplay.getText();
		String actmemberTypeDisplay = memberTypeDisplay.getText();
		
		String expmemberNameDisplay = "";
		String expmemberTypeDisplay = "";
		
		System.out.println("memberNameDisplay : "+actmemberNameDisplay+" Value Expected : "+expmemberNameDisplay);
		System.out.println("memberTypeDisplay : "+actmemberTypeDisplay+" Value Expected : "+expmemberTypeDisplay);

		if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage) && actmemberNameDisplay.equalsIgnoreCase(expmemberNameDisplay)
				&& actmemberTypeDisplay.equalsIgnoreCase(expmemberTypeDisplay))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
	  
	  
  public boolean checkEmployeeOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Employee"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		ArrayList<String> rightPanelListArray = new ArrayList<String>();			
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			rightPanelListArray.add(data);
		}
		
		
		String actrightPanelList = rightPanelListArray.toString();
		
		String exprightPanelList = "[Ctrl+Alt M, Select Employee by Name, Ctrl+Alt N, Select Employee by Code, Ctrl+Alt O, Select Employee by Alias, Ctrl+Alt P, Select Employee by Barcode/Card, Ctrl+Alt Q, Clear Employee, Ctrl+Alt R, Quick Create Employee]";
		
		System.out.println("actrightPanelList : "+actrightPanelList);
		System.out.println("exprightPanelList : "+exprightPanelList);
		
		
	
		if(actrightPanelList.equalsIgnoreCase(exprightPanelList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
	  
	  
  
  @FindBy(xpath="//tbody[@id='tbodySearchEmployee']//tr[1]/td[1]")
  private static WebElement employeeCodeRow1;

  public boolean checkSelectingEmployee() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Employee by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchEmployeeBtn));
		searchEmployeeBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(employeeCodeRow1));
		getAction().doubleClick(employeeCodeRow1).build().perform();
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonSalesBtn));
		userribbonSalesBtn.click();
		
		String actemployeeNameDisplay = employeeNameDisplay.getText();
		
		String expemployeeNameDisplay = "";
		
		System.out.println("employeeNameDisplay : "+actemployeeNameDisplay+" Valiu Expected : "+expemployeeNameDisplay);

		if(actemployeeNameDisplay.equalsIgnoreCase(expemployeeNameDisplay))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
	  
	 
  
  
  public boolean checkFunctionsOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Functions"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		ArrayList<String> rightPanelListArray = new ArrayList<String>();			
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			rightPanelListArray.add(data);
		}
		
		
		String actrightPanelList = rightPanelListArray.toString();
		
		String exprightPanelList = "[Ctrl+Alt 4, Credit Sale Adjustments, Ctrl+Alt 5, Manual Credit Note, Ctrl+Alt 6, Home Delivery, Ctrl+Alt 7, Home Delivery Picklist, Ctrl+Alt 8, Internet Link, Ctrl+Alt 9, Bill Settlement, Ctrl+Alt A, Bill Settlement - Cash, Ctrl+Alt B, Bill Settlement - Credit Card, Ctrl+Alt C, Bill Settlement - Debit Card, Ctrl+Alt D, Bill Settlement - Cheque, Ctrl+Alt E, Bill Settlement - Gift Voucher, Ctrl+Alt F, Bill Settlement - Credit Note, Ctrl+Alt G, Bill Settlement - Credit Sale, Ctrl+Alt H, Bill Settlement - EPayment, Ctrl+Alt I, Split Bill]";
		
		System.out.println("actrightPanelList : "+actrightPanelList);
		System.out.println("exprightPanelList : "+exprightPanelList);
		
		
	
		if(actrightPanelList.equalsIgnoreCase(exprightPanelList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
	  
  
  @FindBy(xpath="//div[@class='btnProductBillText'][contains(text(),'Cash')]")
  private static WebElement billSettlementCashTab;
  
  @FindBy(xpath="//input[@id='txtCashAmount']")
  private static WebElement billSettlementCashAmountTxt;
  
  @FindBy(xpath="//input[@id='txtSchemesDiscount']")
  private static WebElement billSettlementCashSchemeDiscountTxt;
  
  @FindBy(xpath="//button[@id='btnCashPay']")
  private static WebElement billSettlementCashPayButton;
  
  
  
  @FindBy(xpath="//div[@class='btnProductBillText'][contains(text(),'Credit Card')]")
  private static WebElement billSettlementCreditCardTab;
  
  @FindBy(xpath="//input[@id='txtCreditCardName']")
  private static WebElement billSettlementCreditCardNameOnCardTxt;
  
  @FindBy(xpath="//input[@id='txtCreditCardNumber']")
  private static WebElement billSettlementCreditCardNumberTxt;

  @FindBy(xpath="//input[@id='txtCreditCardAmount']")
  private static WebElement billSettlementCreditCardAmountTxt;
  
  @FindBy(xpath="//input[@id='txtCreditCardSchemeDiscount']")
  private static WebElement billSettlementCreditCardSchemeDiscountTxt;
  
  @FindBy(xpath="//input[@id='txtCreditCardCharges']")
  private static WebElement billSettlementCreditCardChargesTxt;
  
  @FindBy(xpath="//input[@id='txtCreditCardApprovalCode']")
  private static WebElement billSettlementCreditCardApprovalCodeTxt;
  
  @FindBy(xpath="//input[@id='txtCreditCardExpiryMonth']")
  private static WebElement billSettlementCreditCardExpiryMonthTxt;
  
  @FindBy(xpath="//input[@id='txtCreditCardExpiryYear']")
  private static WebElement billSettlementCreditCardExpiryYearTxt;
  
  @FindBy(xpath="//button[@id='btnCreditCardPay']")
  private static WebElement billSettlementCreditCardPayButton;
  
  
  
  
  @FindBy(xpath="//div[@class='btnProductBillText'][contains(text(),'Debit Card')]")
  private static WebElement billSettlementDebitCardTab;
  
  @FindBy(xpath="//input[@id='txtDebitCardName']")
  private static WebElement billSettlementDebitCardNameOnCardTxt;
  
  @FindBy(xpath="//input[@id='txtDebitCardNumber']")
  private static WebElement billSettlementDebitCardNumberTxt;
  
  @FindBy(xpath="//input[@id='txtDebitCardAmount']")
  private static WebElement billSettlementDebitCardAmountTxt;
  
  @FindBy(xpath="//input[@id='txtDebitCardSchemeDiscount']")
  private static WebElement billSettlementDebitCardSchemeDiscountTxt;
  
  @FindBy(xpath="//input[@id='txtDebitCardCharges']")
  private static WebElement billSettlementDebitCardCardChargesTxt;
  
  @FindBy(xpath="//input[@id='txtDebitCardApprovalCode']")
  private static WebElement billSettlementDebitCardApprovalCodeTxt;
  
  @FindBy(xpath="//input[@id='txtDebitCardExpiryMonth']")
  private static WebElement billSettlementDebitCardExpiryMonthTxt;
  
  @FindBy(xpath="//input[@id='txtDebitCardExpiryYear']")
  private static WebElement billSettlementDebitCardExpiryYearTxt;
  
  @FindBy(xpath="//button[@id='btnDebitCardPay']")
  private static WebElement billSettlementDebitCardPayButton;
  
  
  @FindBy(xpath="//div[@id='divModalBodySecondRightColumnFirstRow']//div/div/div/label")
  private static List<WebElement> billSettlementBillDetailsBodyList;
  
  @FindBy(xpath="//div[@id='divModalBodySecondRightColumnSecondRow']/div/div/div/label")
  private static List<WebElement> billSettlementBillDetailsFooterPanelList;
  
  @FindBy(xpath="//tbody[@id='tBodyCash']/tr/td")
  private static List<WebElement> cashBodyList;
  
  @FindBy(xpath="//i[@class='fa fa-edit fa-lg']")
  private static WebElement cashBodyEditRow1;
  
  @FindBy(xpath="//i[@class='fa fa-trash fa-lg']")
  private static WebElement cashBodyTrashtRow1;
  
  @FindBy(xpath="//button[@id='btnFooter']")
  private static WebElement doneBtn;
  
  public boolean checkSelectingBillSettlemtAndItsOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Bill Settlement"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		Thread.sleep(2000);
		
		
		boolean actbillSettlementCashAmountTxt         = billSettlementCashAmountTxt.isDisplayed();
		boolean actbillSettlementCashSchemeDiscountTxt = billSettlementCashSchemeDiscountTxt.isDisplayed();
		boolean actbillSettlementCashPayButton         = billSettlementCashPayButton.isDisplayed();
		
		boolean expbillSettlementCashAmountTxt         = true;
		boolean expbillSettlementCashSchemeDiscountTxt = true;
		boolean expbillSettlementCashPayButton         = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billSettlementCreditCardTab));
		billSettlementCreditCardTab.click();
		
		Thread.sleep(2000);
		
		boolean actbillSettlementCreditCardNameOnCardTxt     = billSettlementCreditCardNameOnCardTxt.isDisplayed();
		boolean actbillSettlementCreditCardNumberTxt         = billSettlementCreditCardNumberTxt.isDisplayed();
		boolean actbillSettlementCreditCardAmountTxt         = billSettlementCreditCardAmountTxt.isDisplayed();
		boolean actbillSettlementCreditCardSchemeDiscountTxt = billSettlementCreditCardSchemeDiscountTxt.isDisplayed();
		boolean actbillSettlementCreditCardChargesTxt        = billSettlementCreditCardChargesTxt.isDisplayed();
		boolean actbillSettlementCreditCardApprovalCodeTxt   = billSettlementCreditCardApprovalCodeTxt.isDisplayed();
		boolean actbillSettlementCreditCardExpiryMonthTxt    = billSettlementCreditCardExpiryMonthTxt.isDisplayed();
		boolean actbillSettlementCreditCardExpiryYearTxt     = billSettlementCreditCardExpiryYearTxt.isDisplayed();
		boolean actbillSettlementCreditCardPayButton         = billSettlementCreditCardPayButton.isDisplayed();
		
		boolean expbillSettlementCreditCardNameOnCardTxt     = true;
		boolean expbillSettlementCreditCardNumberTxt         = true;
		boolean expbillSettlementCreditCardAmountTxt         = true;
		boolean expbillSettlementCreditCardSchemeDiscountTxt = true;
		boolean expbillSettlementCreditCardChargesTxt        = true;
		boolean expbillSettlementCreditCardApprovalCodeTxt   = true;
		boolean expbillSettlementCreditCardExpiryMonthTxt    = true;
		boolean expbillSettlementCreditCardExpiryYearTxt     = true;
		boolean expbillSettlementCreditCardPayButton         = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billSettlementDebitCardTab));
		billSettlementDebitCardTab.click();
		
		Thread.sleep(2000);
		
		boolean actbillSettlementDebitCardNameOnCardTxt     = billSettlementDebitCardNameOnCardTxt.isDisplayed();
		boolean actbillSettlementDebitCardNumberTxt         = billSettlementDebitCardNumberTxt.isDisplayed();
		boolean actbillSettlementDebitCardAmountTxt         = billSettlementDebitCardAmountTxt.isDisplayed();
		boolean actbillSettlementDebitCardSchemeDiscountTxt = billSettlementDebitCardSchemeDiscountTxt.isDisplayed();
		boolean actbillSettlementDebitCardCardChargesTxt    = billSettlementDebitCardCardChargesTxt.isDisplayed();
		boolean actbillSettlementDebitCardApprovalCodeTxt   = billSettlementDebitCardApprovalCodeTxt.isDisplayed();
		boolean actbillSettlementDebitCardExpiryMonthTxt    = billSettlementDebitCardExpiryMonthTxt.isDisplayed();
		boolean actbillSettlementDebitCardExpiryYearTxt     = billSettlementDebitCardExpiryYearTxt.isDisplayed();
		boolean actbillSettlementDebitCardPayButton         = billSettlementDebitCardPayButton.isDisplayed();
		
		boolean expbillSettlementDebitCardNameOnCardTxt     = true;
		boolean expbillSettlementDebitCardNumberTxt         = true;
		boolean expbillSettlementDebitCardAmountTxt         = true;
		boolean expbillSettlementDebitCardSchemeDiscountTxt = true;
		boolean expbillSettlementDebitCardCardChargesTxt    = true;
		boolean expbillSettlementDebitCardApprovalCodeTxt   = true;
		boolean expbillSettlementDebitCardExpiryMonthTxt    = true;
		boolean expbillSettlementDebitCardExpiryYearTxt     = true;
		boolean expbillSettlementDebitCardPayButton         = true;
		
		
		int billSettlementBillDetailsBodyListCount = billSettlementBillDetailsBodyList.size();
		
		ArrayList<String> billSettlementBillDetailsBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<billSettlementBillDetailsBodyListCount;i++)
		{
			String data = billSettlementBillDetailsBodyList.get(i).getText();
			
			billSettlementBillDetailsBodyListArray.add(data);
		}
		
		String actbillSettlementBillDetailsBodyList = billSettlementBillDetailsBodyListArray.toString();
		String expbillSettlementBillDetailsBodyList = "[Bill Amount, :, 10.00, Discount, :, 0.00, Scheme, :, 0.00, Round Off, :, 0.00, Paid, :, 0.00, Balance, :, 10.00, Change, :, 0.00]";
		
		int billSettlementBillDetailsFooterPanelListCount = billSettlementBillDetailsFooterPanelList.size();
		
		ArrayList<String> billSettlementBillDetailsFooterPanelListArray = new ArrayList<String>();
		
		for(int i=0;i<billSettlementBillDetailsFooterPanelListCount;i++)
		{
			String data = billSettlementBillDetailsFooterPanelList.get(i).getText();
			
			billSettlementBillDetailsFooterPanelListArray.add(data);
		}
		
		String actbillSettlementBillDetailsFooterPanelList = billSettlementBillDetailsFooterPanelListArray.toString();
		String expbillSettlementBillDetailsFooterPanelList = "[Amount Payable, :, 10.00, Amount Paid, :, 0.00, Balance, :, 10.00]";
		
		
		System.out.println("billSettlementCashAmountTxt               : "+actbillSettlementCashAmountTxt+" Value Expected : "+expbillSettlementCashAmountTxt);
		System.out.println("billSettlementCashSchemeDiscountTxt       : "+actbillSettlementCashSchemeDiscountTxt+" Value Expected : "+expbillSettlementCashSchemeDiscountTxt);
		System.out.println("billSettlementCashPayButton               : "+actbillSettlementCashPayButton+" Value Expected : "+expbillSettlementCashPayButton);
		System.out.println("billSettlementCreditCardNameOnCardTxt     : "+actbillSettlementCreditCardNameOnCardTxt +" Value Expected : "+expbillSettlementCreditCardNameOnCardTxt);
		System.out.println("billSettlementCreditCardNumberTxt         : "+actbillSettlementCreditCardNumberTxt +" Value Expected : "+expbillSettlementCreditCardNumberTxt);
		System.out.println("billSettlementCreditCardAmountTxt         : "+actbillSettlementCreditCardAmountTxt +" Value Expected : "+expbillSettlementCreditCardAmountTxt);
		System.out.println("billSettlementCreditCardSchemeDiscountTxt : "+actbillSettlementCreditCardSchemeDiscountTxt +" Value Expected : "+expbillSettlementCreditCardSchemeDiscountTxt);
		System.out.println("billSettlementCreditCardChargesTxt        : "+actbillSettlementCreditCardChargesTxt +" Value Expected : "+expbillSettlementCreditCardChargesTxt);
		System.out.println("billSettlementCreditCardApprovalCodeTxt   : "+actbillSettlementCreditCardApprovalCodeTxt +" Value Expected : "+expbillSettlementCreditCardApprovalCodeTxt);
		System.out.println("billSettlementCreditCardExpiryMonthTxt    : "+actbillSettlementCreditCardExpiryMonthTxt +" Value Expected : "+expbillSettlementCreditCardExpiryMonthTxt);
		System.out.println("billSettlementCreditCardExpiryYearTxt     : "+actbillSettlementCreditCardExpiryYearTxt +" Value Expected : "+expbillSettlementCreditCardExpiryYearTxt);
		System.out.println("billSettlementCreditCardPayButton         : "+actbillSettlementCreditCardPayButton +" Value Expected : "+expbillSettlementCreditCardPayButton);
		System.out.println("billSettlementDebitCardNameOnCardTxt      : "+actbillSettlementDebitCardNameOnCardTxt +" Value Expected : "+expbillSettlementDebitCardNameOnCardTxt);
		System.out.println("billSettlementDebitCardNumberTxt          : "+actbillSettlementDebitCardNumberTxt +" Value Expected : "+expbillSettlementDebitCardNumberTxt);
		System.out.println("billSettlementDebitCardAmountTxt          : "+actbillSettlementDebitCardAmountTxt +" Value Expected : "+expbillSettlementDebitCardAmountTxt);
		System.out.println("billSettlementDebitCardSchemeDiscountTxt  : "+actbillSettlementDebitCardSchemeDiscountTxt +" Value Expected : "+expbillSettlementDebitCardSchemeDiscountTxt);
		System.out.println("billSettlementDebitCardCardChargesTxt     : "+actbillSettlementDebitCardCardChargesTxt +" Value Expected : "+expbillSettlementDebitCardCardChargesTxt);
		System.out.println("billSettlementDebitCardApprovalCodeTxt    : "+actbillSettlementDebitCardApprovalCodeTxt +" Value Expected : "+expbillSettlementDebitCardApprovalCodeTxt);
		System.out.println("billSettlementDebitCardExpiryMonthTxt     : "+actbillSettlementDebitCardExpiryMonthTxt +" Value Expected : "+expbillSettlementDebitCardExpiryMonthTxt);
		System.out.println("billSettlementDebitCardExpiryYearTxt      : "+actbillSettlementDebitCardExpiryYearTxt +" Value Expected : "+expbillSettlementDebitCardExpiryYearTxt);
		System.out.println("billSettlementDebitCardPayButton          : "+actbillSettlementDebitCardPayButton +" Value Expected : "+expbillSettlementDebitCardPayButton);
		
		System.out.println("actbillSettlementBillDetailsBodyList : "+actbillSettlementBillDetailsBodyList);
		System.out.println("expbillSettlementBillDetailsBodyList : "+expbillSettlementBillDetailsBodyList);
		
		System.out.println("actbillSettlementBillDetailsFooterPanelList : "+actbillSettlementBillDetailsFooterPanelList);
		System.out.println("expbillSettlementBillDetailsFooterPanelList : "+expbillSettlementBillDetailsFooterPanelList);
		

		if(actbillSettlementCashAmountTxt==expbillSettlementCashAmountTxt && actbillSettlementCashSchemeDiscountTxt==expbillSettlementCashSchemeDiscountTxt 
				&& actbillSettlementCashPayButton==expbillSettlementCashPayButton && actbillSettlementCreditCardNameOnCardTxt==expbillSettlementCreditCardNameOnCardTxt
				&& actbillSettlementCreditCardNumberTxt==expbillSettlementCreditCardNumberTxt && actbillSettlementCreditCardAmountTxt==expbillSettlementCreditCardAmountTxt
				&& actbillSettlementCreditCardSchemeDiscountTxt==expbillSettlementCreditCardSchemeDiscountTxt && actbillSettlementCreditCardChargesTxt==expbillSettlementCreditCardChargesTxt
				&& actbillSettlementCreditCardApprovalCodeTxt==expbillSettlementCreditCardApprovalCodeTxt && actbillSettlementCreditCardExpiryMonthTxt==expbillSettlementCreditCardExpiryMonthTxt
				&& actbillSettlementCreditCardExpiryYearTxt==expbillSettlementCreditCardExpiryYearTxt && actbillSettlementCreditCardPayButton==expbillSettlementCreditCardPayButton
				&& actbillSettlementDebitCardNameOnCardTxt==expbillSettlementDebitCardNameOnCardTxt && actbillSettlementDebitCardNumberTxt==expbillSettlementDebitCardNumberTxt
				&& actbillSettlementDebitCardAmountTxt==expbillSettlementDebitCardAmountTxt && actbillSettlementDebitCardSchemeDiscountTxt==expbillSettlementDebitCardSchemeDiscountTxt
				&& actbillSettlementDebitCardCardChargesTxt==expbillSettlementDebitCardCardChargesTxt && actbillSettlementDebitCardApprovalCodeTxt==expbillSettlementDebitCardApprovalCodeTxt
				&& actbillSettlementDebitCardExpiryMonthTxt==expbillSettlementDebitCardExpiryMonthTxt && actbillSettlementDebitCardExpiryYearTxt==expbillSettlementDebitCardExpiryYearTxt
				&& actbillSettlementDebitCardPayButton==expbillSettlementDebitCardPayButton
				
				&& actbillSettlementBillDetailsBodyList.equalsIgnoreCase(expbillSettlementBillDetailsBodyList)
				&& actbillSettlementBillDetailsFooterPanelList.equalsIgnoreCase(expbillSettlementBillDetailsFooterPanelList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
	  
  
  public boolean checkSelectingCashAndPrintBill() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billSettlementCashTab));
		billSettlementCashTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billSettlementCashPayButton));
		billSettlementCashPayButton.click();
		
		Thread.sleep(2000);
		
		boolean actcashBodyEditRow1   = cashBodyEditRow1.isDisplayed();
		boolean actcashBodyTrashtRow1 = cashBodyTrashtRow1.isDisplayed();
		
		boolean expcashBodyEditRow1   = true;
		boolean expcashBodyTrashtRow1 = true;
		
		System.out.println("cashBodyEditRow1   : "+actcashBodyEditRow1+" Value Expected : "+expcashBodyEditRow1);
		System.out.println("cashBodyTrashtRow1 : "+actcashBodyTrashtRow1+" Value Expected : "+expcashBodyTrashtRow1);
		
		int cashBodyListCount = cashBodyList.size();
		
		ArrayList<String> cashBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<cashBodyListCount;i++)
		{
			String data = cashBodyList.get(i).getText();
			
			cashBodyListArray.add(data);
		}
		
		String actcashBodyList = cashBodyListArray.toString();
		String expcashBodyList = "[, 10.00, 0.00]";
		
		System.out.println("actcashBodyList : "+actcashBodyList);
		System.out.println("expcashBodyList : "+expcashBodyList);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doneBtn));
		doneBtn.click();
		
		 File exportedFile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\BillPrint.pdf");
	   	   
		 if(exportedFile.exists())
		 {
			 exportedFile.delete();
		 }
		
		 Thread.sleep(6000);
		 
		 Robot r = new Robot();
		 r.keyPress(KeyEvent.VK_ENTER);
		 r.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(3000);
		
		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\BillPrint.exe");
		
		Thread.sleep(8000);
		
		getDriver().navigate().refresh();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
		pointOfSaleMainScreenMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMS));
		pointOfSaleMS.click();
		
		Thread.sleep(2000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Item"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonPickOutPutBtn));
		userribbonPickOutPutBtn.click();

		String actLogoutMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expLogoutMessage = "Are you sure to logout?";
		
		System.out.println("LogoutMessage : "+actLogoutMessage+" Value Expected : "+expLogoutMessage);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(2000);
		
		String actDayEndMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expDayEndMessage = "'Day End' is not done, do you want to do 'Day End'?";
		
		System.out.println("DayEndMessage : "+actDayEndMessage+" Value Expected : "+expDayEndMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(5000);
		

		if(actcashBodyList.equalsIgnoreCase(expcashBodyList) && actcashBodyEditRow1==expcashBodyEditRow1 && actcashBodyTrashtRow1==expcashBodyTrashtRow1
				&& actLogoutMessage.equalsIgnoreCase(expLogoutMessage) && actDayEndMessage.equalsIgnoreCase(expDayEndMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  // Day End
  
  @FindBy(xpath="//a[contains(text(),'Day End')]")
  private static WebElement dayEndTab;
  
  @FindBy(xpath="//input[@id='txtVoucherRefNo']")
  private static WebElement vouhcerReferenceNoTxt;
  
  @FindBy(xpath="//input[@id='txtCounterName']")
  private static WebElement deCounterTxt;
  
  @FindBy(xpath="//input[@id='txtCashierName']")
  private static WebElement deCashierTxt;
  
  @FindBy(xpath="//input[@id='txtCashInDrawer']")
  private static WebElement deCashInDrawerTxt;
  
  @FindBy(xpath="//input[@id='txtCardAmount']")
  private static WebElement deCardAmountTxt;
  
  @FindBy(xpath="//input[@id='txtChequeAmount']")
  private static WebElement deChequeAmountTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherAmount']")
  private static WebElement deGiftVouhcerAmountTxt;
  
  @FindBy(xpath="//input[@id='txtCreditNote']")
  private static WebElement deCreditNoteTxt;
  
  @FindBy(xpath="//input[@id='txtDiscountVoucherAmount']")
  private static WebElement deDiscountVoucherAmountTxt;
  
  @FindBy(xpath="//input[@id='txtCreditSalesAmount']")
  private static WebElement deCreditSalesAmountTxt;
  
  @FindBy(xpath="//input[@id='txtEPaymentAmount']")
  private static WebElement deEpayAmountTxt;
  
  @FindBy(xpath="//input[@id='txtPrePaidWalletAmount']")
  private static WebElement deprePaidWalletAmountTxt;
  
  @FindBy(xpath="//span[@class='icon-back icon-font6']")
  private static WebElement deBackBtn;
  
  @FindBy(xpath="//span[@class='icon-clear icon-font6']")
  private static WebElement deClearBtn;
  
  @FindBy(xpath="//div[@id='btnDayEndPost']//span[@class='icon-save icon-font6']")
  private static WebElement dePostBtn;
  
  @FindBy(xpath="//div[@id='btnDayEndPostandPrint']//span[@class='icon-save icon-font6']")
  private static WebElement dePostAndPrintBtn;
  
  @FindBy(xpath="//*[@id='formDayEndSummary']/div/div/div/label")
  private static List<WebElement> dayEndSummaryList;
  
  @FindBy(xpath="//tbody[@id='tBodyDayEndSumSummary']/tr/td")
  private static List<WebElement> SummaryTableList;
  
  @FindBy(xpath="//input[@id='rbtAfterDayEndNone']")
  private static WebElement noneRadioBtn;
  
  @FindBy(xpath="//input[@id='rbtAfterDayEndLogout']")
  private static WebElement logoutRadioBtn;
  
  @FindBy(xpath="//div[@id='btnProceedDayEndSummary']//span[@class='icon-save icon-font6']")
  private static WebElement proceedBtn;
  
  @FindBy(xpath="//span[@class='icon-print icon-font6']")
  private static WebElement printBtn;
  
  @FindBy(xpath="//span[@class='icon-close icon-font6']")
  private static WebElement decloseBtn; 
  
  
  public boolean checkDayEndTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		Thread.sleep(2000);
		
		
		
		boolean actdayEndTab                  = dayEndTab.isDisplayed();
		boolean actvouhcerReferenceNoTxt      = vouhcerReferenceNoTxt.isDisplayed();
		boolean actdeCounterTxt               = deCounterTxt.isDisplayed();
		boolean actdeCashierTxt               = deCashierTxt.isDisplayed();
		boolean actdeCashInDrawerTxt          = deCashInDrawerTxt.isDisplayed();
		boolean actdeCardAmountTxt            = deCardAmountTxt.isDisplayed();
		boolean actdeChequeAmountTxt          = deChequeAmountTxt.isDisplayed();
		
		JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		js1.executeScript("arguments[0].scrollIntoView();", deprePaidWalletAmountTxt);
		 
		boolean actdeGiftVouhcerAmountTxt     = deGiftVouhcerAmountTxt.isDisplayed();
		boolean actdeCreditNoteTxt            = deCreditNoteTxt.isDisplayed();
		boolean actdeDiscountVoucherAmountTxt = deDiscountVoucherAmountTxt.isDisplayed();
		boolean actdeCreditSalesAmountTxt     = deCreditSalesAmountTxt.isDisplayed();
		boolean actdeEpayAmountTxt            = deEpayAmountTxt.isDisplayed();
		boolean actdeprePaidWalletAmountTxt   = deprePaidWalletAmountTxt.isDisplayed();
		boolean actdeBackBtn                  = deBackBtn.isDisplayed();
		boolean actdeClearBtn                 = deClearBtn.isDisplayed();
		boolean actdePostBtn                  = dePostBtn.isDisplayed();
		boolean actdePostAndPrintBtn          = dePostAndPrintBtn.isDisplayed();
		
		boolean expdayEndTab                  = true;
		boolean expvouhcerReferenceNoTxt      = true;
		boolean expdeCounterTxt               = true;
		boolean expdeCashierTxt               = true;
		boolean expdeCashInDrawerTxt          = true;
		boolean expdeCardAmountTxt            = true;
		boolean expdeChequeAmountTxt          = true;
		boolean expdeGiftVouhcerAmountTxt     = true;
		boolean expdeCreditNoteTxt            = true;
		boolean expdeDiscountVoucherAmountTxt = true;
		boolean expdeCreditSalesAmountTxt     = true;
		boolean expdeEpayAmountTxt            = true;
		boolean expdeprePaidWalletAmountTxt   = true;
		boolean expdeBackBtn                  = true;
		boolean expdeClearBtn                 = true;
		boolean expdePostBtn                  = true;
		boolean expdePostAndPrintBtn          = true;
		
		System.out.println("dayEndTab                  : "+actdayEndTab+" Value Expected  : "+expdayEndTab);
		System.out.println("vouhcerReferenceNoTxt      : "+actvouhcerReferenceNoTxt+" Value Expected  : "+expvouhcerReferenceNoTxt);
		System.out.println("deCounterTxt               : "+actdeCounterTxt+" Value Expected  : "+expdeCounterTxt);
		System.out.println("deCashierTxt               : "+actdeCashierTxt+" Value Expected  : "+expdeCashierTxt);
		System.out.println("deCashInDrawerTxt          : "+actdeCashInDrawerTxt+" Value Expected  : "+expdeCashInDrawerTxt);
		System.out.println("deCardAmountTxt            : "+actdeCardAmountTxt+" Value Expected  : "+expdeCardAmountTxt);
		System.out.println("deChequeAmountTxt          : "+actdeChequeAmountTxt+" Value Expected  : "+expdeChequeAmountTxt);
		System.out.println("deGiftVouhcerAmountTxt     : "+actdeGiftVouhcerAmountTxt+" Value Expected  : "+expdeGiftVouhcerAmountTxt);
		System.out.println("deCreditNoteTxt            : "+actdeCreditNoteTxt+" Value Expected  : "+expdeCreditNoteTxt);
		System.out.println("deDiscountVoucherAmountTxt : "+actdeDiscountVoucherAmountTxt+" Value Expected  : "+expdeDiscountVoucherAmountTxt);
		System.out.println("deCreditSalesAmountTxt     : "+actdeCreditSalesAmountTxt+" Value Expected  : "+expdeCreditSalesAmountTxt);
		System.out.println("deEpayAmountTxt            : "+actdeEpayAmountTxt+" Value Expected  : "+expdeEpayAmountTxt);
		System.out.println("deprePaidWalletAmountTxt   : "+actdeprePaidWalletAmountTxt+" Value Expected  : "+expdeprePaidWalletAmountTxt);
		System.out.println("deBackBtn                  : "+actdeBackBtn+" Value Expected  : "+expdeBackBtn);
		System.out.println("deClearBtn                 : "+actdeClearBtn+" Value Expected  : "+expdeClearBtn);
		System.out.println("dePostBtn                  : "+actdePostBtn+" Value Expected  : "+expdePostBtn);
		System.out.println("dePostAndPrintBtn          : "+actdePostAndPrintBtn+" Value Expected  : "+expdePostAndPrintBtn);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dePostBtn));
		dePostBtn.click();
		
		Thread.sleep(2000);
		
		int dayEndSummaryListCount = dayEndSummaryList.size();
		
		ArrayList<String> dayEndSummaryListArray = new ArrayList<String>();
		
		for(int i=0;i<dayEndSummaryListCount;i++)
		{
			String data = dayEndSummaryList.get(i).getText();
			
			dayEndSummaryListArray.add(data);
		}
		
		String actdayEndSummaryList = dayEndSummaryListArray.toString();
		String expdayEndSummaryList = "[Opening Balance, :, 0.00, Sales, Cash Sales, :, 0.70, Credit Card Sales, :, 0.00, Debit Card Sales, :, 0.00, Cheque Sale, :, 0.00, Gift Voucher Sales, :, 0.00, Credit Note Sale, :, 0.00, Points Redemption Sale, :, 0.00, Discount Voucher Sales, :, 0.00, Credit Sales, :, 0.00, E-Payment Sale, :, 0.00, Pre Paid Wallet Sale, :, 0.00, Round Off Amount, :, 0.00, Pre Order Deposit, Cash, :, 0.00, Credit Card, :, 0.00, Debit Card, :, 0.00, Cheque, :, 0.00, Gift Voucher, :, 0.00, Credit Note, :, 0.00, Points Redemption, :, 0.00, Discount Voucher, :, 0.00, Credit Sale, :, 0.00, E-Payment, :, 0.00, Pre Paid Wallet, :, 0.00, Total Invoice Amount, :, 0.00, Sales Return, Cash Sales Return, :, 0.00, Coupon Sales Return, :, 0.00, Credit Note Sales Return, :, 0.00, Credit Card Sales Return, :, 0.00, Debit Card Sales Return, :, 0.00, EPayment Sales Return, :, 0.00, Cash In/Out, Cash In, :, 0.00, Cash Out, :, 0.00, Opening Balance, :, 0.00, Other Details, Closing Cash Balance, :, 0.70, Cash In Drawer, :, 0.00, Difference In Cash, :, 0.70, Cash Change, :, 0.00, Summary, Footer Fields Details]";
		
		System.out.println("actdayEndSummaryList : "+actdayEndSummaryList);
		System.out.println("expdayEndSummaryList : "+expdayEndSummaryList);
		
		int SummaryTableListCount = SummaryTableList.size();
		
		ArrayList<String> SummaryTableListArray = new ArrayList<String>();
		
		for(int i=0;i<SummaryTableListCount;i++)
		{
			String data = SummaryTableList.get(i).getText();
			
			SummaryTableListArray.add(data);
		}
		
		String actSummaryTableList = SummaryTableListArray.toString();
		String expSummaryTableList = "[Cash Amount, 0.7, 0, 0.7]";
		
		System.out.println("actSummaryTableList : "+actSummaryTableList);
		System.out.println("expSummaryTableList : "+expSummaryTableList	);
		
		boolean actnoneRadioBtn   = noneRadioBtn.isDisplayed();
		boolean actlogoutRadioBtn = logoutRadioBtn.isDisplayed();
		boolean actproceedBtn     = proceedBtn.isDisplayed();
		boolean actprintBtn       = printBtn.isDisplayed();
		boolean actdecloseBtn     = decloseBtn.isDisplayed();
		
		boolean expnoneRadioBtn   = true;
		boolean explogoutRadioBtn = true;
		boolean expproceedBtn     = true;
		boolean expprintBtn       = true;
		boolean expdecloseBtn     = true;
		
		System.out.println("noneRadioBtn   : "+actnoneRadioBtn  +" Value Expected : "+expnoneRadioBtn);
		System.out.println("logoutRadioBtn : "+actlogoutRadioBtn+" Value Expected : "+explogoutRadioBtn);
		System.out.println("proceedBtn     : "+actproceedBtn    +" Value Expected : "+expproceedBtn);
		System.out.println("printBtn       : "+actprintBtn      +" Value Expected : "+expprintBtn);
		System.out.println("decloseBtn     : "+actdecloseBtn    +" Value Expected : "+expdecloseBtn);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(proceedBtn));
		proceedBtn.click();
		
		Thread.sleep(3000);

		ArrayList<String> openTabs2 = new ArrayList<String>(getDriver().getWindowHandles());
		
	 	System.out.println("openTabs2"+openTabs2);
	
	 	getDriver().switchTo().window(openTabs2.get(1));
	 	
		Thread.sleep(2000);
		
	 	getDriver().close();
	
	 	Thread.sleep(2000);
	
	 	getDriver().switchTo().window(openTabs2.get(0));
		
		/*Robot r = new Robot();
		 r.keyPress(KeyEvent.VK_CONTROL);
		 r.keyPress(KeyEvent.VK_TAB);
		 
		 r.keyRelease(KeyEvent.VK_CONTROL);
		 r.keyRelease(KeyEvent.VK_TAB);*/
		
		
		
	 	if(actdayEndTab==expdayEndTab && actvouhcerReferenceNoTxt==expvouhcerReferenceNoTxt && actdeCounterTxt==expdeCounterTxt && actdeCashierTxt==expdeCashierTxt
				&& actdeCashInDrawerTxt==expdeCashInDrawerTxt && actdeCardAmountTxt==expdeCardAmountTxt && actdeChequeAmountTxt==expdeChequeAmountTxt
				&& actdeGiftVouhcerAmountTxt==expdeGiftVouhcerAmountTxt && actdeCreditNoteTxt==expdeCreditNoteTxt && actdeDiscountVoucherAmountTxt==expdeDiscountVoucherAmountTxt
				&& actdeCreditSalesAmountTxt==expdeCreditSalesAmountTxt && actdeEpayAmountTxt==expdeEpayAmountTxt && actdeprePaidWalletAmountTxt==expdeprePaidWalletAmountTxt
				&& actdeBackBtn==expdeBackBtn && actdeClearBtn==expdeClearBtn && actdePostBtn==expdePostBtn && actdePostAndPrintBtn==expdePostAndPrintBtn
				
	 			&& actdayEndSummaryList.equalsIgnoreCase(expdayEndSummaryList) && actSummaryTableList.equalsIgnoreCase(expSummaryTableList)
	 			
	 			&& actnoneRadioBtn==expnoneRadioBtn && actlogoutRadioBtn==explogoutRadioBtn && actproceedBtn==expproceedBtn
	 			&& actprintBtn==expprintBtn && actdecloseBtn==expdecloseBtn)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  
  
  //Main Screen/Point OF Sale
  
  
	@FindBy(xpath="//button[@id='5']")
	private static WebElement posSalesReturnF6;
	
	
	@FindBy(xpath="//div[@id='58']")
	private static WebElement posSalesReturnByReceipt;
	
	@FindBy(xpath="//div[@id='59']")
	private static WebElement posSalesReturnByMember;
	
	@FindBy(xpath="//div[@id='60']")
	private static WebElement posReprintSalesReturn;
	
	public boolean checkVouchersWhichArePosted() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
			/*Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();*/
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
			Thread.sleep(3000);
		
		    LoginPage lp=new LoginPage(getDriver()); 
			
			String unamelt="UserAllOptions";
					      
			String pawslt="12345";
					      
			lp.enterUserName(unamelt);
					
			lp.enterPassword(pawslt);
			
			lpOutLetTxt.sendKeys("outlet1");
			Thread.sleep(2000);
			lpOutLetTxt.sendKeys(Keys.TAB);
			
			lpCounterTxt.sendKeys("Counter Update");
			Thread.sleep(2000);
			lpCounterTxt.sendKeys(Keys.TAB);
					  
			lp.clickOnSignInBtn();
			
			Thread.sleep(6000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMenuTextHomePage));
			System.out.println("Setting buton is enabled");
			searchMenuTextHomePage.click();
			searchMenuTextHomePage.sendKeys("Credit Notes");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotesText));
			creditNotesText.click();		
				
			Thread.sleep(2000);
			
			boolean actvoucherBodyGridCN=voucherBodyGrid.getText().isEmpty();
			
			boolean expvoucherBodyGridCN=false;
			
			System.out.println("voucherBodyGridCN : "+actvoucherBodyGridCN+" Value Expected : "+expvoucherBodyGridCN);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
			voucherhomeCloseBtn.click();
			
			Thread.sleep(1000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMenuTextHomePage));
			System.out.println("Setting buton is enabled");
			searchMenuTextHomePage.click();
			searchMenuTextHomePage.sendKeys("Pos Sales");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalesText));
			posSalesText.click();		
				
			Thread.sleep(2000);
			
			boolean actvoucherBodyGridPS=voucherBodyGrid.getText().isEmpty();
			
			boolean expvoucherBodyGridPS=false;
			
			System.out.println("voucherBodyGridPS : "+actvoucherBodyGridPS+" Value Expected : "+expvoucherBodyGridPS);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
			voucherhomeCloseBtn.click();
			
			Thread.sleep(1000);
			
			
			
		 	if(actvoucherBodyGridCN==expvoucherBodyGridCN && actvoucherBodyGridPS==expvoucherBodyGridPS)
			{
				System.out.println("Test Pass : Unit Field Displayed with Dozens");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
				return false;
			}
		}
		catch (Exception e) 
		{
	    
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
	    }	
	  }
	
	
	
	public static boolean checkOptionsUnderSalesReturn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
		pointOfSaleMainScreenMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMS));
		pointOfSaleMS.click();
		
		Thread.sleep(6000);
		
		String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessage = "Please do 'Day In' before proceeding further.";
		
		System.out.println("pointOfSalesConfirmationBodyMessage : "+actpointOfSalesConfirmationBodyMessage+" Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
		posInformationPopupOkBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayinConfirmCashBalanceChkBox));
		dayinConfirmCashBalanceChkBox.click();
		
		boolean actdayinSaveBtn = dayinSaveBtn.isDisplayed();
		boolean expdayinSaveBtn = true;
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayinSaveBtn));
		dayinSaveBtn.click();
		
		String expMessage = "Day In is Done";
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
		Thread.sleep(3000);
		
		Thread.sleep(2000);
		
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Sales Returns"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		
		Thread.sleep(5000);
		
		int rightPanelListCount = rightPanelList.size();
		
		ArrayList<String> rightPanelListArray = new ArrayList<String>();			
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			rightPanelListArray.add(data);
		}
		
		
		String actrightPanelList = rightPanelListArray.toString();
		
		String exprightPanelList = "[Ctrl+Alt 1, Sales Return by Receipt, Ctrl+Alt 2, Sales Return by Member, Ctrl+Alt 3, Reprint Sales Return]";
		
		System.out.println("actrightPanelList : "+actrightPanelList);
		System.out.println("exprightPanelList : "+exprightPanelList);
		
		if(actrightPanelList.equalsIgnoreCase(exprightPanelList))
		{
			//excelReader.setCellData(xlfile, "Sheet1", 140, 9, resPass);
			return true;
		}
		else
		{
			//excelReader.setCellData(xlfile, "Sheet1", 140, 9, resFail);
			return false;
		}
	}
	
	
	
	@FindBy(xpath="//input[@id='optSalesReturnMemberName']")
	private static WebElement posSalMemberNameDrpdwn;
	
	@FindBy(xpath="//input[@id='txtSalesReturnBillNo']")
	private static WebElement posSalRetrnBillNo;
	
	@FindBy(xpath="//input[@id='dpSalesReturnTransDate']")
	private static WebElement posSalRetrnTransDate;
	
	@FindBy(xpath="//input[@id='txtSalesReturnMemberName']")
	private static WebElement posSalRetrnMemberName;
	
	@FindBy(xpath="//input[@id='dpSalesReturnReturnDate']")
	private static WebElement posSalRetrnReturnDate;
	
	@FindBy(xpath="//input[@id='txtSalesReturnNarration']")
	private static WebElement posSalRetrnNarrationTxt;
	
	@FindBy(xpath="//input[@id='chkTotalInvoice']")
	private static WebElement posSalRetrnReturnTotalInvoiceChkbox;
	
	@FindBy(xpath="//input[@id='txtSalesReturnBarcode']")
	private static WebElement posSalRetrnBarcodeTxt;
	
	@FindBy(xpath="//input[@id='txtSalesReturnSearchProduct']")
	private static WebElement posSalRetrnSearchitemTxt;
	
	@FindBy(xpath="//text[@id='txtNettAmount']")
	private static WebElement posSalRetrnNettAmount;
	
	@FindBy(xpath="//text[@id='txtReturnAmount']")
	private static WebElement posSalRetrnReturnAmount;
	
	@FindBy(xpath="//*[@id='btnSalesReturnPay']/div[1]/span")
	private static WebElement posSalRetrnPayBtn;
	
	@FindBy(xpath="//*[@id='divSalesReturnFooterMain']/div[2]/div/div[3]/div[2]/div[1]/span")
	private static WebElement posSalRetrnClearBtn;
	
	@FindBy(xpath="//*[@id='divSalesReturnFooterMain']/div[2]/div/div[3]/div[3]/div[1]/span")
	private static WebElement posSalRetrnCloseBtn;
	
	
	public boolean checkPOSSalesReturnByReceiptHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
				
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalesReturnByReceipt));
			posSalesReturnByReceipt.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalRetrnBillNo));
			posSalRetrnBillNo.click();
			
			boolean actposSalRetrnBillNo                        = posSalRetrnBillNo.isDisplayed();
			boolean actposSalRetrnTransDate                     = posSalRetrnTransDate.isDisplayed();
			boolean actposSalRetrnMemberName                    = posSalRetrnMemberName.isDisplayed();
			boolean actposSalRetrnReturnDate                    = posSalRetrnReturnDate.isDisplayed();
			boolean actposSalRetrnNarrationTxt                  = posSalRetrnNarrationTxt.isDisplayed();
			boolean actposSalRetrnReturnTotalInvoiceChkbox      = posSalRetrnReturnTotalInvoiceChkbox.isDisplayed();
			boolean actposSalRetrnBarcodeTxt                    = posSalRetrnBarcodeTxt.isDisplayed();
			boolean actposSalRetrnSearchitemTxt                 = posSalRetrnSearchitemTxt.isDisplayed();
			boolean actposSalRetrnNettAmount                    = posSalRetrnNettAmount.isDisplayed();
			boolean actposSalRetrnReturnAmount                  = posSalRetrnReturnAmount.isDisplayed();
			boolean actposPaymentBtn                            = posSalRetrnPayBtn.isDisplayed();
			boolean actposSalRetrnClearBtn                      = posSalRetrnClearBtn.isDisplayed();
			boolean actposSalRetrnCloseBtn                      = posSalRetrnCloseBtn.isDisplayed();
			
			boolean expposSalRetrnBillNo                   = true;
			boolean expposSalRetrnTransDate                = true;
			boolean expposSalRetrnMemberName               = true;
			boolean expposSalRetrnReturnDate               = true;
			boolean expposSalRetrnNarrationTxt             = true;
			boolean expposSalRetrnReturnTotalInvoiceChkbox = true;
			boolean expposSalRetrnBarcodeTxt               = true;
			boolean expposSalRetrnSearchitemTxt            = true;
			boolean expposSalRetrnNettAmount               = true;
			boolean expposSalRetrnReturnAmount             = true;
			boolean expposPaymentBtn                       = true;
			boolean expposSalRetrnClearBtn                 = true;
			boolean expposSalRetrnCloseBtn                 = true;
			
			
			System.out.println("posSalRetrnBillNo                     : "+actposSalRetrnBillNo          +" Value Expected : "+expposSalRetrnBillNo);
			System.out.println("posSalRetrnTransDate                  : "+actposSalRetrnTransDate              +" Value Expected : "+expposSalRetrnTransDate);
			System.out.println("posSalRetrnMemberName                 : "+actposSalRetrnMemberName                     +" Value Expected : "+expposSalRetrnMemberName);
			System.out.println("posSalRetrnReturnDate                 : "+actposSalRetrnReturnDate           +" Value Expected : "+expposSalRetrnReturnDate);
			System.out.println("posSalRetrnNarrationTxt               : "+actposSalRetrnNarrationTxt        +" Value Expected : "+expposSalRetrnNarrationTxt);
			System.out.println("posSalRetrnReturnTotalInvoiceChkbox   : "+actposSalRetrnReturnTotalInvoiceChkbox             +" Value Expected : "+expposSalRetrnReturnTotalInvoiceChkbox);
			System.out.println("posSalRetrnBarcodeTxt                 : "+actposSalRetrnBarcodeTxt             +" Value Expected : "+expposSalRetrnBarcodeTxt);
			System.out.println("posSalRetrnSearchitemTxt              : "+actposSalRetrnSearchitemTxt               +" Value Expected : "+expposSalRetrnSearchitemTxt);
			System.out.println("posSalRetrnNettAmount                 : "+actposSalRetrnNettAmount         +" Value Expected : "+expposSalRetrnNettAmount);
			System.out.println("posSalRetrnReturnAmount               : "+actposSalRetrnReturnAmount +" Value Expected : "+expposSalRetrnReturnAmount);
			System.out.println("posPaymentBtn                         : "+actposPaymentBtn                +" Value Expected : "+expposPaymentBtn);
			System.out.println("posSalRetrnClearBtn                   : "+actposSalRetrnClearBtn        +" Value Expected : "+expposSalRetrnClearBtn);
			System.out.println("posSalRetrnCloseBtn                   : "+actposSalRetrnCloseBtn         +" Value Expected : "+expposSalRetrnCloseBtn);
			
				
				
			Thread.sleep(2000);
			
			int posSalesReturnHeaderListCount = posSalesReturnHeaderList.size();
			
			ArrayList<String> posSalesReturnHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<posSalesReturnHeaderListCount;i++)
			{
				String data = posSalesReturnHeaderList.get(i).getText();
				
				posSalesReturnHeaderListArray.add(data);
			}
			
			String actposSalesReturnHeaderList = posSalesReturnHeaderListArray.toString();
			String expposSalesReturnHeaderList = "[, Item, Quantity, Rate, Gross, Discount, VAT, Returned, Quantity to Return, Batch, RMA, Return RMA]";
			
			System.out.println("actposSalesReturnHeaderList : "+actposSalesReturnHeaderList);
			System.out.println("expposSalesReturnHeaderList : "+expposSalesReturnHeaderList);
			
			if(actposSalRetrnBillNo==expposSalRetrnBillNo && actposSalRetrnTransDate==expposSalRetrnTransDate
					&& actposSalRetrnReturnDate==expposSalRetrnReturnDate && actposSalRetrnMemberName==expposSalRetrnMemberName && actposSalRetrnNarrationTxt==expposSalRetrnNarrationTxt
					&& actposSalRetrnBarcodeTxt==expposSalRetrnBarcodeTxt && actposSalRetrnReturnTotalInvoiceChkbox==expposSalRetrnReturnTotalInvoiceChkbox 
					&& actposSalRetrnSearchitemTxt==expposSalRetrnSearchitemTxt
					&& actposSalRetrnNettAmount==expposSalRetrnNettAmount && actposSalRetrnReturnAmount==expposSalRetrnReturnAmount
					&& actposPaymentBtn==expposPaymentBtn && actposSalRetrnClearBtn==expposSalRetrnClearBtn && actposSalRetrnCloseBtn==expposSalRetrnCloseBtn
					&& actposSalesReturnHeaderList.equalsIgnoreCase(expposSalesReturnHeaderList))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	

	
	public boolean checkLoadingFieldsInSalesReturnPopUpScreenOnSelectingBillNo() throws InterruptedException
	{
		
		try
		{
			
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalRetrnBillNo));
		posSalRetrnBillNo.click();
		
		posSalRetrnBillNo.sendKeys("1");
		
		Thread.sleep(2000);
		posSalRetrnBillNo.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalRetrnMemberName));
		String actposSalRetrnMemberName=posSalRetrnMemberName.getAttribute("value");
		String expposSalRetrnMemberName="TestMemberUpdate  ";
		
		System.out.println("Actual   posSalRetrnMemberName  :."+actposSalRetrnMemberName+".");
		System.out.println("Expected posSalRetrnMemberName  :"+expposSalRetrnMemberName);
		
		
		int posSalesReturnGridRow1Count = posSalesReturnGridRow1.size();
		
		ArrayList<String> posSalesReturnGridRow1Array = new ArrayList<String>();
		
		for(int i=0;i<posSalesReturnGridRow1Count;i++)
		{
			String data = posSalesReturnGridRow1.get(i).getText();
			
			posSalesReturnGridRow1Array.add(data);
		}
		
		String actposSalesReturnGridRow1 = posSalesReturnGridRow1Array.toString();
		String expposSalesReturnGridRow1 = "[, BR COGS ITEM, 1, 10.00, 10.00, 0, 5, 0.00, 0, POSBATCH, , ]";
		
		System.out.println("actposSalesReturnGridRow1 : "+actposSalesReturnGridRow1);
		System.out.println("expposSalesReturnGridRow1 : "+expposSalesReturnGridRow1);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalRetrnMemberName));
		String actposSalRetrnNettAmount=posSalRetrnNettAmount.getText();
		String expposSalRetrnNettAmount="10.00";
		
		System.out.println("posSalRetrnNettAmount  : "+actposSalRetrnNettAmount);
		System.out.println("posSalRetrnNettAmount  : "+expposSalRetrnNettAmount);
		
		
		if(actposSalRetrnNettAmount.equalsIgnoreCase(expposSalRetrnNettAmount) && 
				actposSalesReturnGridRow1.equalsIgnoreCase(expposSalesReturnGridRow1) && 
				actposSalRetrnMemberName.equalsIgnoreCase(expposSalRetrnMemberName))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	catch (Exception e) 
	{
		  String exception =e.getMessage();
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	}
}
	
	public boolean checkEnteringAmountinSalesReturnInGridAndClickOnPayButton() throws InterruptedException
	{
		
		try
		{
			
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridQtyToReturn));
		gridQtyToReturn.click();
		Thread.sleep(2000);
		enterQtyToReturn.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		
		Thread.sleep(3000);
		enterQtyToReturn.sendKeys("1");
		
		Thread.sleep(3000);
		enterQtyToReturn.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalRetrnMemberName));
		String actgridQtyToReturn=gridQtyToReturn.getText();
		String expgridQtyToReturn="1";
		
		System.out.println("Actual   gridQtyToReturn  : "+actgridQtyToReturn);
		System.out.println("Expected gridQtyToReturn  : "+expgridQtyToReturn);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalRetrnPayBtn));
		posSalRetrnPayBtn.click();
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(refundSettlementCashTab));
		
		boolean actrefundSettlementCashTab        = refundSettlementCashTab.isDisplayed();
		boolean actrefundSettlementGiftVoucherTab = refundSettlementGiftVoucherTab.isDisplayed();
		boolean actrefundSettlementCreditNoteTab  = refundSettlementCreditNoteTab.isDisplayed();
		
		
		boolean exprefundSettlementCashTab         = true;
		boolean exprefundSettlementGiftVoucherTab = true;
		boolean exprefundSettlementCreditNoteTab   = true;
		
		System.out.println(" actrefundSettlementCashTab         :"+actrefundSettlementCashTab        +" Value Expected : "+true);
		System.out.println(" actrefundSettlementGiftVoucherTab  :"+actrefundSettlementGiftVoucherTab +" Value Expected : "+true);
		System.out.println(" actrefundSettlementCreditNoteTab   :"+actrefundSettlementCreditNoteTab  +" Value Expected : "+true);
		
		if(actrefundSettlementCashTab==exprefundSettlementCashTab && 
				actrefundSettlementGiftVoucherTab==exprefundSettlementGiftVoucherTab && 
				actrefundSettlementCreditNoteTab==exprefundSettlementCreditNoteTab &&actgridQtyToReturn.equalsIgnoreCase(expgridQtyToReturn))
		{
			System.out.println(" Test Pass: Displayed All Tabs ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Displayed All Tabs ");
			return false;
		}
	}
	catch (Exception e) 
	{
		  String exception =e.getMessage();
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	}
}
	
	
	
	
	
	
	@FindBy(xpath="//*[@id='SalesReturnReturnedQuantity']")
	private static WebElement gridQtyToReturn;
	
	
	@FindBy(xpath="//*[@id='SalesReturnReturnedQuantity']/input")
	private static WebElement enterQtyToReturn;
	
	
	@FindBy(xpath="//*[@id='btnRefundSettlementCash']/div")
	private static WebElement refundSettlementCashTab;
	
	
	
	public boolean checkCashTabOptions() throws InterruptedException
	{
		
		try
		{
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(refundSettlementCashTab));
		refundSettlementCashTab.click();
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(refundSettlementCashTab));
		
		boolean actrefundSettlementCashTabMemberNameDrpdwn       = refundSettlementCashTabMemberNameDrpdwn.isDisplayed();
		boolean actrefundSettlementCashTabMemberCodeDrpdwn       = refundSettlementCashTabMemberCodeDrpdwn.isDisplayed();
		boolean actrefundSettlementCashTabMobileNo  			 = refundSettlementCashTabMobileNo.isDisplayed();
		boolean actrefundSettlementCashTabCashTxt				 = refundSettlementCashTabCashTxt.isDisplayed();
		
		
		boolean exprefundSettlementCashTabMemberNameDrpdwn       = true;
		boolean exprefundSettlementCashTabMemberCodeDrpdwn 		 = true;
		boolean exprefundSettlementCashTabMobileNo   			 = true;
		boolean exprefundSettlementCashTabCashTxt				 =true;

		
		System.out.println(" refundSettlementCashTabMemberNameDrpdwn     :"+actrefundSettlementCashTabMemberNameDrpdwn     +" Value Expected : "+exprefundSettlementCashTabMemberNameDrpdwn);
		System.out.println(" refundSettlementCashTabMemberCodeDrpdwn     :"+actrefundSettlementCashTabMemberCodeDrpdwn     +" Value Expected : "+exprefundSettlementCashTabMemberCodeDrpdwn);
		System.out.println(" refundSettlementCashTabMobileNo             :"+actrefundSettlementCashTabMobileNo             +" Value Expected : "+exprefundSettlementCashTabMobileNo);
		System.out.println(" refundSettlementCashTabCashTxt              :"+actrefundSettlementCashTabCashTxt              +" Value Expected : "+exprefundSettlementCashTabCashTxt);
		System.out.println(" refundSettlementCashTabCashTxt              :"+actrefundSettlementCashTabCashTxt              +" Value Expected : "+exprefundSettlementCashTabCashTxt);
		
		
		if(actrefundSettlementCashTabMemberNameDrpdwn==exprefundSettlementCashTabMemberNameDrpdwn && 
				actrefundSettlementCashTabMemberCodeDrpdwn==exprefundSettlementCashTabMemberCodeDrpdwn && 
				actrefundSettlementCashTabMobileNo==exprefundSettlementCashTabMobileNo && 
				actrefundSettlementCashTabCashTxt==exprefundSettlementCashTabCashTxt && 
				actrefundSettlementCashTabCashTxt==exprefundSettlementCashTabCashTxt)
		{
			System.out.println(" Test Pass: Displayed All Tabs ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Displayed All Tabs ");
			return false;
		}
	}
	catch (Exception e) 
	{
		  String exception =e.getMessage();
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	}
}
	
	
	public boolean checkGiftVoucherTabOptions() throws InterruptedException
	{
		
		/*try
		{
			*/
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(refundSettlementGiftVoucherTab));
		refundSettlementGiftVoucherTab.click();
		
		
		Thread.sleep(2000);
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(refundSettlementCashTabMemberNameDrpdwn));*/
		
		boolean actrefundSettlementCashTabMemberNameDrpdwn       = refundSettlementCashTabMemberNameDrpdwn.isDisplayed();
		boolean actrefundSettlementCashTabMemberCodeDrpdwn       = refundSettlementCashTabMemberCodeDrpdwn.isDisplayed();
		boolean actrefundSettlementCashTabMobileNo  			 = refundSettlementCashTabMobileNo.isDisplayed();
		boolean actgiftVoucherNameTxt				             = giftVoucherNameTxt.isDisplayed();
		boolean actgiftVoucherValue				                 = giftVoucherValue.isDisplayed();
		boolean actgiftVoucherStartingSeriesTxt				     = giftVoucherStartingSeriesTxt.isDisplayed();
		boolean actgiftVouTotalnoOfVoucherTxt				     = giftVouTotalnoOfVoucherTxt.isDisplayed();
		boolean actgiftVoucherEndingSeriesTxt				     = giftVoucherEndingSeriesTxt.isDisplayed();
		boolean actgiftTotalValueOfVoucherTxt                    = giftTotalValueOfVoucherTxt.isDisplayed();
		
		boolean exprefundSettlementCashTabMemberNameDrpdwn       = true;
		boolean exprefundSettlementCashTabMemberCodeDrpdwn 		 = true;
		boolean exprefundSettlementCashTabMobileNo   			 = true;
		boolean expgiftVoucherNameTxt				             = true;
		boolean expgiftVoucherValue				                 = true;
		boolean expgiftVoucherStartingSeriesTxt				     = true;
		boolean expgiftVouTotalnoOfVoucherTxt				     = true;
		boolean expgiftVoucherEndingSeriesTxt				     = true;
		boolean expgiftTotalValueOfVoucherTxt				     = true;

		
		System.out.println(" refundSettlementCashTabMemberNameDrpdwn     :"+actrefundSettlementCashTabMemberNameDrpdwn     +" Value Expected : "+exprefundSettlementCashTabMemberNameDrpdwn);
		System.out.println(" refundSettlementCashTabMemberCodeDrpdwn     :"+actrefundSettlementCashTabMemberCodeDrpdwn     +" Value Expected : "+exprefundSettlementCashTabMemberCodeDrpdwn);
		System.out.println(" refundSettlementCashTabMobileNo             :"+actrefundSettlementCashTabMobileNo             +" Value Expected : "+exprefundSettlementCashTabMobileNo);
		System.out.println(" giftVoucherNameTxt              			 :"+actgiftVoucherNameTxt                          +" Value Expected : "+expgiftVoucherNameTxt);
		System.out.println(" giftVoucherValue                            :"+actgiftVoucherValue                            +" Value Expected : "+expgiftVoucherValue);
		System.out.println(" giftVoucherStartingSeriesTxt                :"+actgiftVoucherStartingSeriesTxt                +" Value Expected : "+expgiftVoucherStartingSeriesTxt);
		System.out.println(" giftVouTotalnoOfVoucherTxt                  :"+actgiftVouTotalnoOfVoucherTxt                  +" Value Expected : "+expgiftVouTotalnoOfVoucherTxt);
		System.out.println(" giftVoucherEndingSeriesTxt                  :"+actgiftVoucherEndingSeriesTxt                  +" Value Expected : "+expgiftVoucherEndingSeriesTxt);
		System.out.println(" giftTotalValueOfVoucherTxt                  :"+actgiftTotalValueOfVoucherTxt                  +" Value Expected : "+expgiftTotalValueOfVoucherTxt);
		
		
		if(actrefundSettlementCashTabMemberNameDrpdwn==exprefundSettlementCashTabMemberNameDrpdwn && 
				actrefundSettlementCashTabMemberCodeDrpdwn==exprefundSettlementCashTabMemberCodeDrpdwn && 
				actrefundSettlementCashTabMobileNo==exprefundSettlementCashTabMobileNo && 
				actgiftVoucherNameTxt==expgiftVoucherNameTxt && 
				actgiftVoucherValue==expgiftVoucherValue && actgiftVoucherStartingSeriesTxt==expgiftVoucherStartingSeriesTxt &&
				actgiftVoucherEndingSeriesTxt==expgiftVoucherEndingSeriesTxt && actgiftTotalValueOfVoucherTxt==expgiftTotalValueOfVoucherTxt)
		{
			System.out.println(" Test Pass: Displayed All Fileds in Gift Voucher ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Displayed All Fileds in Gift Voucher ");
			return false;
		}
	}
	/*catch (Exception e) 
	{
		  String exception =e.getMessage();
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	}
}*/
	
	
	

	public boolean checkCreditNoteTabOptions() throws InterruptedException
	{
		
		try
		{
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(refundSettlementCreditNoteTab));
		refundSettlementCreditNoteTab.click();
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(refundSettlementCashTab));
		
		boolean actrefundSettlementCashTabMemberNameDrpdwn       = refundSettlementCashTabMemberNameDrpdwn.isDisplayed();
		boolean actrefundSettlementCashTabMemberCodeDrpdwn       = refundSettlementCashTabMemberCodeDrpdwn.isDisplayed();
		boolean actrefundSettlementCashTabMobileNo  			 = refundSettlementCashTabMobileNo.isDisplayed();
		boolean actcreditNoteAmountTxt				             = creditNoteAmountTxt.isDisplayed();
		boolean actcreditNoteNarrationTxt                        = creditNoteNarrationTxt.isDisplayed();
		boolean actcreditNoteValidTillTxt                        = creditNoteValidTillTxt.isDisplayed();
		
		boolean exprefundSettlementCashTabMemberNameDrpdwn       = true;
		boolean exprefundSettlementCashTabMemberCodeDrpdwn 		 = true;
		boolean exprefundSettlementCashTabMobileNo   			 = true;
		boolean expcreditNoteAmountTxt				             = true;
		boolean expcreditNoteNarrationTxt                        = true;
		boolean expcreditNoteValidTillTxt                        = true;

		
		System.out.println(" refundSettlementCashTabMemberNameDrpdwn     :"+actrefundSettlementCashTabMemberNameDrpdwn     +" Value Expected : "+exprefundSettlementCashTabMemberNameDrpdwn);
		System.out.println(" refundSettlementCashTabMemberCodeDrpdwn     :"+actrefundSettlementCashTabMemberCodeDrpdwn     +" Value Expected : "+exprefundSettlementCashTabMemberCodeDrpdwn);
		System.out.println(" refundSettlementCashTabMobileNo             :"+actrefundSettlementCashTabMobileNo             +" Value Expected : "+exprefundSettlementCashTabMobileNo);
		System.out.println(" creditNoteAmountTxt                         :"+actcreditNoteAmountTxt                         +" Value Expected : "+expcreditNoteAmountTxt);
		System.out.println(" creditNoteNarrationTxt                      :"+actcreditNoteNarrationTxt                      +" Value Expected : "+expcreditNoteNarrationTxt);
		System.out.println(" creditNoteValidTillTxt                      :"+actcreditNoteValidTillTxt                      +" Value Expected : "+expcreditNoteValidTillTxt);
		
		
		if(actrefundSettlementCashTabMemberNameDrpdwn==exprefundSettlementCashTabMemberNameDrpdwn && 
				actrefundSettlementCashTabMemberCodeDrpdwn==exprefundSettlementCashTabMemberCodeDrpdwn && 
				actrefundSettlementCashTabMobileNo==exprefundSettlementCashTabMobileNo && 
				actcreditNoteAmountTxt==expcreditNoteAmountTxt && 
				actcreditNoteNarrationTxt==expcreditNoteNarrationTxt && actcreditNoteValidTillTxt==expcreditNoteValidTillTxt)
		{
			System.out.println(" Test Pass: Displayed All Tabs ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Displayed All Tabs ");
			return false;
		}
	}
	catch (Exception e) 
	{
		  String exception =e.getMessage();
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	}
}
	
	public boolean checkPayWithCashInSalesRetuenByRecepit() throws InterruptedException
	{
		
		try
		{
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(refundSettlementCashTab));
		refundSettlementCashTab.click();
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(refundSettlementCashTabPayIcon));
		
		refundSettlementCashTabPayIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billDetailsCash));
		String actbillDetailsCash              = billDetailsCash.getText();
		String actbillDetailsGiftVoucher       = billDetailsGiftVoucher.getText();
		String actbillDetailsCreditNote  	   = billDetailsCreditNote.getText();
		String actbillDetailsAmtPayable		   = billDetailsAmtPayable.getText();
		String actbillDetailsAmtPaid           = billDetailsAmtPaid.getText();
		String actbillDetailsAmtBal            = billDetailsAmtBal.getText();
		
		String expbillDetailsCash               = "10.00";
		String expbillDetailsGiftVoucher 		= "0.00";
		String expbillDetailsCreditNote   		= "0.00";
		String expbillDetailsAmtPayable		    = "10.00";
		String expbillDetailsAmtPaid            = "10.00";
		String expbillDetailsAmtBal             = "0.00";

		
		System.out.println(" billDetailsCash            :"+actbillDetailsCash            +" Value Expected : "+expbillDetailsCash);
		System.out.println(" billDetailsGiftVoucher     :"+actbillDetailsGiftVoucher     +" Value Expected : "+expbillDetailsGiftVoucher);
		System.out.println(" billDetailsCreditNote      :"+actbillDetailsCreditNote      +" Value Expected : "+expbillDetailsCreditNote);
		System.out.println(" billDetailsAmtPayable      :"+actbillDetailsAmtPayable      +" Value Expected : "+expbillDetailsAmtPayable);
		System.out.println(" billDetailsAmtPaid         :"+actbillDetailsAmtPaid         +" Value Expected : "+expbillDetailsAmtPaid);
		System.out.println(" billDetailsAmtBal          :"+actbillDetailsAmtBal          +" Value Expected : "+expbillDetailsAmtBal);
		
		
		
		

        ArrayList<String>refundSettlementGridRowArray=new ArrayList<String>();
		
		int refundSettlementGridRowCount=refundSettlementGridRow.size();
			
		System.out.println(" refundSettlementGridRowCount  :  "+refundSettlementGridRowCount);
			
		for (int i = 0; i < refundSettlementGridRowCount; i++)
		{
			String data=refundSettlementGridRow.get(i).getText();
			refundSettlementGridRowArray.add(data);
		}
			
		String actrefundSettlementGridRow=refundSettlementGridRowArray.toString();
		String exprefundSettlementGridRow="[, 10.00]";
			
		System.err.println("  Actual    refundSettlementGridRow : "+actrefundSettlementGridRow);
		System.err.println("  Expected  refundSettlementGridRow : "+exprefundSettlementGridRow);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(refundSettlementDoneBtn));
		refundSettlementDoneBtn.click();
		
		
		Thread.sleep(5000);

		ArrayList<String> openTabs2 = new ArrayList<String>(getDriver().getWindowHandles());
		
	 	System.out.println("openTabs2"+openTabs2);
	
	 	getDriver().switchTo().window(openTabs2.get(1));
	 	
		Thread.sleep(2000);
		
	 	getDriver().close();
	
	 	Thread.sleep(2000);
	
	 	getDriver().switchTo().window(openTabs2.get(0));
		
	 	
	 	Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalRetrnCloseBtn));
		posSalRetrnCloseBtn.click();
		
	 	
	 	
		if(actbillDetailsCash.equalsIgnoreCase(expbillDetailsCash) && 
				actbillDetailsGiftVoucher.equalsIgnoreCase(expbillDetailsGiftVoucher) && 
				actbillDetailsCreditNote.equalsIgnoreCase(expbillDetailsCreditNote) && 
				actbillDetailsAmtPayable.equalsIgnoreCase(expbillDetailsAmtPayable) && 
				actbillDetailsAmtPaid.equalsIgnoreCase(expbillDetailsAmtPaid) && actbillDetailsAmtBal.equalsIgnoreCase(expbillDetailsAmtBal))
		{
			System.out.println(" Test Pass: Displayed All Tabs ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Displayed All Tabs ");
			return false;
		}
		
	}
	catch (Exception e) 
	{
		  String exception =e.getMessage();
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	}
}


	
	 public boolean checkSalesReturnByMemberHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
		/*	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
			Thread.sleep(3000);
		
		    LoginPage lp=new LoginPage(getDriver()); 
			
			String unamelt="UserAllOptions";
					      
			String pawslt="12345";
					      
			lp.enterUserName(unamelt);
					
			lp.enterPassword(pawslt);
			
			lpOutLetTxt.sendKeys("outlet1");
			Thread.sleep(2000);
			lpOutLetTxt.sendKeys(Keys.TAB);
			
			lpCounterTxt.sendKeys("Counter Update");
			Thread.sleep(2000);
			lpCounterTxt.sendKeys(Keys.TAB);
					  
			lp.clickOnSignInBtn();
			
			Thread.sleep(6000);
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
			pointOfSaleMenu.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
			pointOfSaleMainScreenMenu.click();
			
			Thread.sleep(2000);
									
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMS));
			pointOfSaleMS.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalesReturnF6));
			posSalesReturnF6.click();

*/		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalesReturnByMember));
			posSalesReturnByMember.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalMemberNameDrpdwn));
			posSalMemberNameDrpdwn.click();
			
			boolean actposSalRetrnBillNo                        = posSalMemberNameDrpdwn.isDisplayed();
			boolean actposSalRetrnTransDate                     = posSalRetrnTransDate.isDisplayed();
			boolean actposSalRetrnReturnDate                    = posSalRetrnReturnDate.isDisplayed();
			boolean actposSalRetrnNarrationTxt                  = posSalRetrnNarrationTxt.isDisplayed();
			boolean actposSalRetrnReturnTotalInvoiceChkbox      = posSalRetrnReturnTotalInvoiceChkbox.isDisplayed();
			boolean actposSalRetrnBarcodeTxt                    = posSalRetrnBarcodeTxt.isDisplayed();
			boolean actposSalRetrnSearchitemTxt                 = posSalRetrnSearchitemTxt.isDisplayed();
			boolean actposSalRetrnNettAmount                    = posSalRetrnNettAmount.isDisplayed();
			boolean actposSalRetrnReturnAmount                  = posSalRetrnReturnAmount.isDisplayed();
			boolean actposPaymentBtn                            = posSalRetrnPayBtn.isDisplayed();
			boolean actposSalRetrnClearBtn                      = posSalRetrnClearBtn.isDisplayed();
			boolean actposCloseBtn                              = posCloseBtn.isDisplayed();
			
			boolean expposSalRetrnBillNo                   = true;
			boolean expposSalRetrnTransDate                = true;
			boolean expposSalRetrnMemberName               = true;
			boolean expposSalRetrnReturnDate               = true;
			boolean expposSalRetrnNarrationTxt             = true;
			boolean expposSalRetrnReturnTotalInvoiceChkbox = true;
			boolean expposSalRetrnBarcodeTxt               = true;
			boolean expposSalRetrnSearchitemTxt            = true;
			boolean expposSalRetrnNettAmount               = true;
			boolean expposSalRetrnReturnAmount             = true;
			boolean expposPaymentBtn                       = true;
			boolean expposSalRetrnClearBtn                 = true;
			boolean expposCloseBtn                         = true;
			
			
			System.out.println("posSalRetrnBillNo                     : "+actposSalRetrnBillNo          +" Value Expected : "+expposSalRetrnBillNo);
			System.out.println("posSalRetrnTransDate                  : "+actposSalRetrnTransDate       +" Value Expected : "+expposSalRetrnTransDate);
			System.out.println("posSalRetrnReturnDate                 : "+actposSalRetrnReturnDate      +" Value Expected : "+expposSalRetrnReturnDate);
			System.out.println("posSalRetrnNarrationTxt               : "+actposSalRetrnNarrationTxt    +" Value Expected : "+expposSalRetrnNarrationTxt);
			System.out.println("posSalRetrnReturnTotalInvoiceChkbox   : "+actposSalRetrnReturnTotalInvoiceChkbox             +" Value Expected : "+expposSalRetrnReturnTotalInvoiceChkbox);
			System.out.println("posSalRetrnBarcodeTxt                 : "+actposSalRetrnBarcodeTxt       +" Value Expected : "+expposSalRetrnBarcodeTxt);
			System.out.println("posSalRetrnSearchitemTxt              : "+actposSalRetrnSearchitemTxt    +" Value Expected : "+expposSalRetrnSearchitemTxt);
			System.out.println("posSalRetrnNettAmount                 : "+actposSalRetrnNettAmount       +" Value Expected : "+expposSalRetrnNettAmount);
			System.out.println("posSalRetrnReturnAmount               : "+actposSalRetrnReturnAmount     +" Value Expected : "+expposSalRetrnReturnAmount);
			System.out.println("posPaymentBtn                         : "+actposPaymentBtn               +" Value Expected : "+expposPaymentBtn);
			System.out.println("posSalRetrnClearBtn                   : "+actposSalRetrnClearBtn         +" Value Expected : "+expposSalRetrnClearBtn);
			System.out.println("posCloseBtn                           : "+actposCloseBtn                 +" Value Expected : "+expposCloseBtn);
			
				
				
			Thread.sleep(2000);
			
			int posSalesReturnHeaderListCount = posSalesReturnHeaderList.size();
			
			ArrayList<String> posSalesReturnHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<posSalesReturnHeaderListCount;i++)
			{
				String data = posSalesReturnHeaderList.get(i).getText();
				
				posSalesReturnHeaderListArray.add(data);
			}
			
			String actposSalesReturnHeaderList = posSalesReturnHeaderListArray.toString();
			String expposSalesReturnHeaderList = "[, Item, Quantity, Rate, Gross, Discount, VAT, Returned, Quantity to Return, Batch, RMA, Return RMA]";
			
			System.out.println("actposSalesReturnHeaderList : "+actposSalesReturnHeaderList);
			System.out.println("expposSalesReturnHeaderList : "+expposSalesReturnHeaderList);
			
			if(actposSalRetrnBillNo==expposSalRetrnBillNo && actposSalRetrnTransDate==expposSalRetrnTransDate
					&& actposSalRetrnReturnDate==expposSalRetrnReturnDate && actposSalRetrnNarrationTxt==expposSalRetrnNarrationTxt
					&& actposSalRetrnBarcodeTxt==expposSalRetrnBarcodeTxt && actposSalRetrnReturnTotalInvoiceChkbox==expposSalRetrnReturnTotalInvoiceChkbox 
					&& actposSalRetrnSearchitemTxt==expposSalRetrnSearchitemTxt
					&& actposSalRetrnNettAmount==expposSalRetrnNettAmount && actposSalRetrnReturnAmount==expposSalRetrnReturnAmount
					&& actposPaymentBtn==expposPaymentBtn && actposSalRetrnClearBtn==expposSalRetrnClearBtn && actposCloseBtn==expposCloseBtn
					&& actposSalesReturnHeaderList.equalsIgnoreCase(expposSalesReturnHeaderList))
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
		
		
		
		public boolean checkSelectingMemeberNameInSalesReturnByMember() throws InterruptedException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalMemberNameDrpdwn));
			posSalMemberNameDrpdwn.click();
			
			posSalMemberNameDrpdwn.sendKeys("TestMemberUpdate");
			
			Thread.sleep(2000);
			
			posSalMemberNameDrpdwn.sendKeys(Keys.TAB);
			
			if(validationConfirmationMessage.getText().isEmpty())
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnPopUpCloseBtn));
				salesReturnPopUpCloseBtn.click();
				
				return true;
			}
			else
			{
				errorMessageCloseBtn.click();
				
				Thread.sleep(1000);
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnPopUpCloseBtn));
				salesReturnPopUpCloseBtn.click();
				
				return false;
			}
			

			/*boolean actfooterText = toastMessage.isDisplayed();
			boolean expfooterText = false;
			
			System.out.println("footerText : "+actfooterText+" Value Expected : "+expfooterText);
			
			if (actfooterText==expfooterText)
			{
				return true;
			}
			else
			{
				return false;
			}*/
			
		}
	
		public boolean checkreprintSalesReturnHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

			try
			{
				
				/*Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
				userNameDisplay.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
				logoutOption.click();
				
				Thread.sleep(3000);
			
			    LoginPage lp=new LoginPage(getDriver()); 
				
				String unamelt="UserAllOptions";
						      
				String pawslt="12345";
						      
				lp.enterUserName(unamelt);
						
				lp.enterPassword(pawslt);
				
				lpOutLetTxt.sendKeys("outlet1");
				Thread.sleep(2000);
				lpOutLetTxt.sendKeys(Keys.TAB);
				
				lpCounterTxt.sendKeys("Counter Update");
				Thread.sleep(2000);
				lpCounterTxt.sendKeys(Keys.TAB);
						  
				lp.clickOnSignInBtn();
				
				Thread.sleep(6000);
			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
				pointOfSaleMenu.click();
			
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
				pointOfSaleMainScreenMenu.click();
				
				Thread.sleep(2000);
										
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMS));
				pointOfSaleMS.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSalesReturnF6));
				posSalesReturnF6.click();
*/
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posReprintSalesReturn));
			    posReprintSalesReturn.click();
			    
				boolean actposSalRetrnBillNo                        = billNumRadioBtn.isDisplayed();
				boolean actposSalRetrnTransDate                     = memberNameRadioBtn.isDisplayed();
				boolean actposSalRetrnReturnDate                    = betweenDateRadioBtn.isDisplayed();
				boolean actposSalRetrnNarrationTxt                  = salesManRadioBtn.isDisplayed();
				boolean actposSalRetrnReturnTotalInvoiceChkbox      = billNumberTxt.isDisplayed();
				boolean actposSalRetrnBarcodeTxt                    = reprintSalesReturnsearchBtn.isDisplayed();
				boolean actposSalRetrnSearchitemTxt                 = printLastBillBtn.isDisplayed();
				boolean actposSalRetrnNettAmount                    = RSRprintBtn.isDisplayed();
				boolean actposSalRetrnReturnAmount                  = RSRClearBtn.isDisplayed();
				boolean actposPaymentBtn                            = RSRCLoseBtn.isDisplayed();
				
				boolean expposSalRetrnBillNo                   = true;
				boolean expposSalRetrnTransDate                = true;
				boolean expposSalRetrnMemberName               = true;
				boolean expposSalRetrnReturnDate               = true;
				boolean expposSalRetrnNarrationTxt             = true;
				boolean expposSalRetrnReturnTotalInvoiceChkbox = true;
				boolean expposSalRetrnBarcodeTxt               = true;
				boolean expposSalRetrnSearchitemTxt            = true;
				boolean expposSalRetrnNettAmount               = true;
				boolean expposSalRetrnReturnAmount             = true;
				boolean expposPaymentBtn                       = true;
				
				
				System.out.println("billNumRadioBtn                : "+actposSalRetrnBillNo          +" Value Expected : "+expposSalRetrnBillNo);
				System.out.println("memberNameRadioBtn             : "+actposSalRetrnTransDate       +" Value Expected : "+expposSalRetrnTransDate);
				System.out.println("betweenDateRadioBtn            : "+actposSalRetrnReturnDate      +" Value Expected : "+expposSalRetrnReturnDate);
				System.out.println("salesManRadioBtn               : "+actposSalRetrnNarrationTxt    +" Value Expected : "+expposSalRetrnNarrationTxt);
				System.out.println("billNumberTxt                  : "+actposSalRetrnReturnTotalInvoiceChkbox             +" Value Expected : "+expposSalRetrnReturnTotalInvoiceChkbox);
				System.out.println("reprintSalesReturnsearchBtn    : "+actposSalRetrnBarcodeTxt       +" Value Expected : "+expposSalRetrnBarcodeTxt);
				System.out.println("printLastBillBtn               : "+actposSalRetrnSearchitemTxt    +" Value Expected : "+expposSalRetrnSearchitemTxt);
				System.out.println("RSRprintBtn                    : "+actposSalRetrnNettAmount       +" Value Expected : "+expposSalRetrnNettAmount);
				System.out.println("RSRClearBtn                    : "+actposSalRetrnReturnAmount     +" Value Expected : "+expposSalRetrnReturnAmount);
				System.out.println("RSRCLoseBtn                    : "+actposPaymentBtn               +" Value Expected : "+expposPaymentBtn);
				
				
				
				if(actposSalRetrnBillNo==expposSalRetrnBillNo && actposSalRetrnTransDate==expposSalRetrnTransDate
						&& actposSalRetrnReturnDate==expposSalRetrnReturnDate && actposSalRetrnNarrationTxt==expposSalRetrnNarrationTxt
						&& actposSalRetrnBarcodeTxt==expposSalRetrnBarcodeTxt && actposSalRetrnReturnTotalInvoiceChkbox==expposSalRetrnReturnTotalInvoiceChkbox 
						&& actposSalRetrnSearchitemTxt==expposSalRetrnSearchitemTxt
						&& actposSalRetrnNettAmount==expposSalRetrnNettAmount && actposSalRetrnReturnAmount==expposSalRetrnReturnAmount
						&& actposPaymentBtn==expposPaymentBtn )
				{
					return true;
				}
				else
				{
					return false;
				}
				
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}
		
		
		
		public boolean checkReprintSalesReturnScreenByBillNumRadioBtn() throws InterruptedException
		{
			
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(billNumRadioBtn));
			if (billNumRadioBtn.isSelected()==false) 
			{
				
				billNumRadioBtn.click();
			}
			
			
			billNumberTxt.click();
			
			billNumberTxt.sendKeys("1");
			
			Thread.sleep(2000);

			billNumberTxt.sendKeys(Keys.TAB);
			
			
			reprintSalesReturnsearchBtn.click();
			
			
			boolean actbillNumRadioBtn=billNumRadioBtn.isSelected();
			boolean expbillNumRadioBtn=true;
			
			System.out.println("billNumRadioBtn  : "+actbillNumRadioBtn +" Value Expected  : "+expbillNumRadioBtn);
			
			ArrayList<String>reprintGridRowListArray=new ArrayList<String>();
			
			int reprintGridRowListCount=reprintGridRowList.size();
				
			System.out.println(" reprintGridRowListCount  :  "+reprintGridRowListCount);
				
			for (int i = 0; i < reprintGridRowListCount; i++)
			{
				String data=reprintGridRowList.get(i).getText();
				
				if (i==2)
				{
					
					data="Date Field";
				}
				
				reprintGridRowListArray.add(data);
			}
				
			String actreprintGridRowList=reprintGridRowListArray.toString();
			String expreprintGridRowList="[, 1, Date Field, -10.00, TestMemberUpdate, Employee1]";
				
			System.err.println("  Actual    reprintGridRowList : "+actreprintGridRowList);
			System.err.println("  Expected  reprintGridRowList : "+expreprintGridRowList);
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(RSRClearBtn));
			RSRClearBtn.click();
			
			if (actreprintGridRowList.equalsIgnoreCase(expreprintGridRowList) && actbillNumRadioBtn==expbillNumRadioBtn) 
			{
				System.out.println("Test Pass: Displayed Data As Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail: No Data Displayed ");
				return false;

			}
		}
		
		
		
		
		public boolean checkReprintSalesReturnScreenByMemberNameRadioBtn() throws InterruptedException
		{
			
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberNameRadioBtn));
			if (memberNameRadioBtn.isSelected()==false) 
			{
				
				memberNameRadioBtn.click();
			}
			
			
			RSRMemberNameTxt.click();
			
			RSRMemberNameTxt.sendKeys("TestMemberUpdate");
			
			Thread.sleep(2000);

			RSRMemberNameTxt.sendKeys(Keys.TAB);
			
			
			reprintSalesReturnsearchBtn.click();
			
			
			boolean actmemberNameRadioBtn=memberNameRadioBtn.isSelected();
			boolean expmemberNameRadioBtn=true;
			
			
			System.out.println("memberNameRadioBtn  : "+actmemberNameRadioBtn+" Value Expected :  "+expmemberNameRadioBtn );
			
			
			ArrayList<String>reprintGridRowListArray=new ArrayList<String>();
			
			int reprintGridRowListCount=reprintGridRowList.size();
				
			System.out.println(" reprintGridRowListCount  :  "+reprintGridRowListCount);
				
			for (int i = 0; i < reprintGridRowListCount; i++)
			{
				String data=reprintGridRowList.get(i).getText();
				
				if (i==2)
				{
					
					data="Date Field";
				}
				
				reprintGridRowListArray.add(data);
			}
				
			String actreprintGridRowList=reprintGridRowListArray.toString();
			String expreprintGridRowList="[, 1, Date Field, -10.00, TestMemberUpdate, Employee1]";
				
			System.err.println("  Actual    reprintGridRowList : "+actreprintGridRowList);
			System.err.println("  Expected  reprintGridRowList : "+expreprintGridRowList);
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(RSRClearBtn));
			RSRClearBtn.click();
			
			if (actreprintGridRowList.equalsIgnoreCase(expreprintGridRowList) && actmemberNameRadioBtn==expmemberNameRadioBtn) 
			{
				System.out.println("Test Pass: Displayed Data As Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail: No Data Displayed ");
				return false;

			}
		}
		
		

		public boolean checkReprintSalesReturnScreenByBillDateRadioBtn() throws InterruptedException
		{
			
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(BillDateRadioBtn));
			if (BillDateRadioBtn.isSelected()==false) 
			{
				
				BillDateRadioBtn.click();
			}
			
			
			/*RSRMemberNameTxt.click();
			
			RSRMemberNameTxt.sendKeys("TestMemberUpdate");
			
			Thread.sleep(2000);

			RSRMemberNameTxt.sendKeys(Keys.TAB);
			
			*/
			reprintSalesReturnsearchBtn.click();
			
			
			boolean actBillDateRadioBtn=BillDateRadioBtn.isSelected();
			boolean expBillDateRadioBtn=true;
			
			
			System.out.println("BillDateRadioBtn  :"+actBillDateRadioBtn  +" Value Expected  :"+expBillDateRadioBtn );
			
			ArrayList<String>reprintGridRowListArray=new ArrayList<String>();
			
			int reprintGridRowListCount=reprintGridRowList.size();
				
			System.out.println(" reprintGridRowListCount  :  "+reprintGridRowListCount);
				
			for (int i = 0; i < reprintGridRowListCount; i++)
			{
				String data=reprintGridRowList.get(i).getText();
				
				if (i==2)
				{
					
					data="Date Field";
				}
				
				reprintGridRowListArray.add(data);
			}
				
			String actreprintGridRowList=reprintGridRowListArray.toString();
			String expreprintGridRowList="[, 1, Date Field, -10.00, TestMemberUpdate, Employee1]";
				
			System.err.println("  Actual    reprintGridRowList : "+actreprintGridRowList);
			System.err.println("  Expected  reprintGridRowList : "+expreprintGridRowList);
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(RSRClearBtn));
			RSRClearBtn.click();
			
			if (actreprintGridRowList.equalsIgnoreCase(expreprintGridRowList) && actBillDateRadioBtn==expBillDateRadioBtn) 
			{
				System.out.println("Test Pass: Displayed Data As Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail: No Data Displayed ");
				return false;

			}
		}
		
		
		public boolean checkReprintSalesReturnScreenByBetweenDateRadioBtn() throws InterruptedException
		{
			
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(betweenDateRadioBtn));
			if (betweenDateRadioBtn.isSelected()==false) 
			{
				
				betweenDateRadioBtn.click();
			}
			
			
			/*RSRMemberNameTxt.click();
			
			RSRMemberNameTxt.sendKeys("TestMemberUpdate");
			
			Thread.sleep(2000);

			RSRMemberNameTxt.sendKeys(Keys.TAB);
			
			*/
			reprintSalesReturnsearchBtn.click();
			
			
			boolean actbetweenDateRadioBtn=betweenDateRadioBtn.isSelected();
			boolean expbetweenDateRadioBtn=true;
			
			
			System.out.println("betweenDateRadioBtn  : "+actbetweenDateRadioBtn +" Value Expected : "+expbetweenDateRadioBtn);
			
			ArrayList<String>reprintGridRowListArray=new ArrayList<String>();
			
			int reprintGridRowListCount=reprintGridRowList.size();
				
			System.out.println(" reprintGridRowListCount  :  "+reprintGridRowListCount);
				
			for (int i = 0; i < reprintGridRowListCount; i++)
			{
				String data=reprintGridRowList.get(i).getText();
				
				if (i==2)
				{
					
					data="Date Field";
				}
				
				reprintGridRowListArray.add(data);
			}
				
			String actreprintGridRowList=reprintGridRowListArray.toString();
			String expreprintGridRowList="[, 1, Date Field, -10.00, TestMemberUpdate, Employee1]";
				
			System.err.println("  Actual    reprintGridRowList : "+actreprintGridRowList);
			System.err.println("  Expected  reprintGridRowList : "+expreprintGridRowList);
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(RSRClearBtn));
			RSRClearBtn.click();
			
			if (actreprintGridRowList.equalsIgnoreCase(expreprintGridRowList) && actbetweenDateRadioBtn==expbetweenDateRadioBtn) 
			{
				System.out.println("Test Pass: Displayed Data As Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail: No Data Displayed ");
				return false;

			}
		}
		
		
		public boolean checkReprintSalesReturnScreenBySalesMan() throws InterruptedException
		{
			
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesManRadioBtn));
			if (salesManRadioBtn.isSelected()==false) 
			{
				
				salesManRadioBtn.click();
			}
			
			
			RSRSalesManTxt.click();
			
			RSRSalesManTxt.sendKeys("Employee1");
			
			Thread.sleep(2000);

			RSRSalesManTxt.sendKeys(Keys.TAB);
			
			
			reprintSalesReturnsearchBtn.click();
			
			
			boolean actsalesManRadioBtn=salesManRadioBtn.isSelected();
			boolean expsalesManRadioBtn=true;
			
			
			System.out.println("salesManRadioBtn  : "+actsalesManRadioBtn +" Value Expected : "+expsalesManRadioBtn);
			
			ArrayList<String>reprintGridRowListArray=new ArrayList<String>();
			
			int reprintGridRowListCount=reprintGridRowList.size();
				
			System.out.println(" reprintGridRowListCount  :  "+reprintGridRowListCount);
				
			for (int i = 0; i < reprintGridRowListCount; i++)
			{
				String data=reprintGridRowList.get(i).getText();
				
				if (i==2)
				{
					
					data="Date Field";
				}
				
				reprintGridRowListArray.add(data);
			}
				
			String actreprintGridRowList=reprintGridRowListArray.toString();
			String expreprintGridRowList="[, 1, Date Field, -10.00, TestMemberUpdate, Employee1]";
				
			System.err.println("  Actual    reprintGridRowList : "+actreprintGridRowList);
			System.err.println("  Expected  reprintGridRowList : "+expreprintGridRowList);
				
			
			if (actreprintGridRowList.equalsIgnoreCase(expreprintGridRowList) && actsalesManRadioBtn==expsalesManRadioBtn) 
			{
				System.out.println("Test Pass: Displayed Data As Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail: No Data Displayed ");
				return false;

			}
		}
		
		
		@FindBy(xpath="//tbody/tr[@id='1']/td[1]/input[1]")
		private static WebElement rsrRadioRow1;
		
		
		public boolean checkPrintAndPrintLastBillOptionsInRepruntSalesReturns() throws InterruptedException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesManRadioBtn));
			rsrRadioRow1.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(RSRprintBtn));
			RSRprintBtn.click();
			
				
			Thread.sleep(3000);

			ArrayList<String> openTabs2 = new ArrayList<String>(getDriver().getWindowHandles());
			
		 	System.out.println("openTabs2"+openTabs2);
		 	
		 	int actopenTabs2 = openTabs2.size();
		 	int expopenTabs2 = 2;
		 	
		 	System.out.println("openTabs2 : "+actopenTabs2+" Value Expected : "+expopenTabs2);
		
		 	getDriver().switchTo().window(openTabs2.get(1));
		 	
			Thread.sleep(2000);
			
		 	getDriver().close();
		
		 	Thread.sleep(2000);
		
		 	getDriver().switchTo().window(openTabs2.get(0));
			
		 	
		 	Thread.sleep(3000);
		 	
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(printLastBillBtn));
		 	printLastBillBtn.click();
		 	
		 	Thread.sleep(3000);

			ArrayList<String> openTabs3 = new ArrayList<String>(getDriver().getWindowHandles());
			
		 	System.out.println("openTabs3"+openTabs3);
		 	
		 	int actopenTabs3 = openTabs3.size();
		 	int expopenTabs3 = 2;
		 	
		 	System.out.println("openTabs3 : "+actopenTabs3+" Value Expected : "+expopenTabs3);
		
		 	getDriver().switchTo().window(openTabs3.get(1));
		 	
			Thread.sleep(2000);
			
		 	getDriver().close();
		
		 	Thread.sleep(2000);
		
		 	getDriver().switchTo().window(openTabs3.get(0));
			
		 	
		 	Thread.sleep(3000);
		 	
			
			if (actopenTabs2==expopenTabs2 && actopenTabs3==expopenTabs3) 
			{
				System.out.println("Test Pass: Displayed Data As Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail: No Data Displayed ");
				return false;

			}
		}
		
		
		@FindBy(xpath="//input[@id='optReprintBillSalesmanControl']")
		private static WebElement RSRSalesManTxt;
		
		
		
		
		@FindBy(xpath="//*[@id='tBodyReprintBill']/tr/td")
		private static List<WebElement> reprintGridRowList;
		
		
		@FindBy(xpath="//input[@id='rbtBillNumber']")
		private static WebElement billNumRadioBtn;
		
		@FindBy(xpath="//input[@id='rbtMemberName']")
		private static WebElement memberNameRadioBtn;
		
		@FindBy(xpath="//input[@id='optReprintBillControl']")
		private static WebElement RSRMemberNameTxt;
		
		
		@FindBy(xpath="//input[@id='rbtBillDate']")
		private static WebElement BillDateRadioBtn;
		
		@FindBy(xpath="//input[@id='rbtBeetweenDate']")
		private static WebElement betweenDateRadioBtn;
		
		@FindBy(xpath="//input[@id='rbtSalesMan']")
		private static WebElement salesManRadioBtn;
		
		@FindBy(xpath="//input[@id='divReprintBillNumber']")
		private static WebElement billNumberTxt;
		
		@FindBy(xpath="//*[@id='divReprintBillBody']/div[2]/div/div[2]/div[2]/div[1]")
		private static WebElement reprintSalesReturnsearchBtn;
		
		@FindBy(xpath="//*[@id='btnPrintLastBillReprintBill']/div[1]/span")
		private static WebElement printLastBillBtn;
		
		@FindBy(xpath="//*[@id='btnPrintReprintBill']/div[1]/span")
		private static WebElement RSRprintBtn;
		
		@FindBy(xpath="//*[@id='divReprintBillFooter']/div/div[2]/div[3]/div[1]/span")
		private static WebElement RSRClearBtn;
		
		@FindBy(xpath="//*[@id='divReprintBillFooter']/div/div[2]/div[4]/div[1]/span")
		private static WebElement RSRCLoseBtn;
		
	
	@FindBy(xpath="//input[@id='txtCreditNoteAmount']")
	private static WebElement creditNoteAmountTxt;
	
	@FindBy(xpath="//input[@id='txtCreditNoteNarration']")
	private static WebElement creditNoteNarrationTxt;
	
	@FindBy(xpath="//input[@id='dtpCreditNoteValidTill']")
	private static WebElement creditNoteValidTillTxt;
	
	
	@FindBy(xpath="//select[@id='ddlGiftVoucherName']")
	private static WebElement giftVoucherNameTxt;
	
	
	@FindBy(xpath="//input[@id='txtGiftVoucherValue']")
	private static WebElement giftVoucherValue;
	
	@FindBy(xpath="//input[@id='txtGiftVoucherStartingSeries']")
	private static WebElement giftVoucherStartingSeriesTxt;
	
	@FindBy(xpath="//input[@id='txtGiftTotalNoOfVoucher']")
	private static WebElement giftVouTotalnoOfVoucherTxt;
	
	@FindBy(xpath="//input[@id='txtGiftVoucherEndingSeries']")
	private static WebElement giftVoucherEndingSeriesTxt;
	
	@FindBy(xpath="//input[@id='txtGiftTotalValueOfVoucher']")
	private static WebElement giftTotalValueOfVoucherTxt;
	
	
	
	@FindBy(xpath="//input[@id='optMemberName']")
	private static WebElement refundSettlementCashTabMemberNameDrpdwn;
	
	@FindBy(xpath="//input[@id='optMemberType']")
	private static WebElement refundSettlementCashTabMemberCodeDrpdwn;
	
	@FindBy(xpath="//input[@id='txtMemberMobileNum']")
	private static WebElement refundSettlementCashTabMobileNo;
	
	@FindBy(xpath="//input[@id='txtCashAmount']")
	private static WebElement refundSettlementCashTabCashTxt;
	
	@FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalSecond']/div[@id='divRefundSettlementModal']/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[3]/div[1]/button[1]")
	private static WebElement refundSettlementCashTabPayIcon;
	
	@FindBy(xpath="//label[@id='lblBillCash']")
	private static WebElement billDetailsCash;
	
	@FindBy(xpath="//label[@id='lblBillGiftVoucher']")
	private static WebElement billDetailsGiftVoucher;
	
	@FindBy(xpath="//label[@id='lblBillCreditNote']")
	private static WebElement billDetailsCreditNote;
	
	@FindBy(xpath="//label[@id='lblAmountPayable']")
	private static WebElement billDetailsAmtPayable;
	
	@FindBy(xpath="//label[@id='lblAmountPaid']")
	private static WebElement billDetailsAmtPaid;
	
	@FindBy(xpath="//label[@id='lblAmountBalance']")
	private static WebElement billDetailsAmtBal;
	
	@FindBy(xpath="//*[@id='tBodyRefundCash']/tr/td")
	private static List<WebElement> refundSettlementGridRow;
	
	@FindBy(xpath="//button[@id='btnDoneRefundSettlementFooter']")
	private static WebElement refundSettlementDoneBtn;
	
	@FindBy(xpath="//*[@id='divRefundSettlementModalHeader']/span")
	private static WebElement refundSettleCloseBtn;
	
	@FindBy(xpath="//*[@id='divSalesReturnModalHeader']/span")
	private static WebElement salesReturnPopUpCloseBtn;
	
	
	
	@FindBy(xpath="//*[@id='btnRefundSettlementGiftVoucher']/div")
	private static WebElement refundSettlementGiftVoucherTab;
	
	@FindBy(xpath="//*[@id='btnRefundSettlementCreditNote']/div")
	private static WebElement refundSettlementCreditNoteTab;
	
	
	
 
  @FindBy(xpath="//span[@id='2027']")
  private static WebElement creditNotesText;
  
  @FindBy(xpath="//span[@id='2022']")
  private static WebElement posSalesText;
  
  @FindBy(xpath="//*[@id='tblBodyTransRender']")
  private static WebElement  voucherBodyGrid;
  
  @FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
  private static WebElement  voucherhomeCloseBtn;
  
  
  
  @FindBy(xpath="//span[@class='icon-back icon-font6']")
  private static WebElement backBtn;

  
  @FindBy(xpath="//tr[18]//td[1]")
  private static WebElement eighteenRow;
  
  public boolean checkSelectItemByNameInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		getDriver().navigate().refresh();
		
		Thread.sleep(6000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
		pointOfSaleMainScreenMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMS));
		pointOfSaleMS.click();
		
		Thread.sleep(3000);
		
		
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Item"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Item by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchItemBtn));
		searchItemBtn.click();
		
		Thread.sleep(2000);
		
		int itemBodyListCount = itemBodyList.size();
		
		ArrayList<String> itemBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<itemBodyListCount;i++)
		{
			String data = itemBodyList.get(i).getText();

			itemBodyListArray.add(data);
			
			if (i!=itemBodyListCount-1) 
			{
				int temp=i+1;
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();",itemBodyList.get(temp));
			}
		}	
		
		String actitemBodyList = itemBodyListArray.toString();
		String expitemBodyList = "[RMA FSITEM, RMA STITEM, 0.00, SI, STOCK ITEM, 0.00, BWI, BATCH WA ITEM, 0.00, BATCH IGNORE EXP LIFO ITEM, BATCH IGNORE EXP LIFO ITEM, 0.00, BATCH FIFO ITEM, BATCH FIFO ITEM, 0.00, BATCH BR ITEM, BATCH BR ITEM, 0.00, BRMI, BIN RAW MATERIAL ITEM, 0.00, BFGI, BIN FINISHED GOODS ITEM, 0.00, BBFGI, BATCH BIN FINISHED GOODS ITEM, 0.00, BBWNOSUI, BATCH BIN WITH NO STOCK UPDATE ITEM, 0.00, BBWNRI, BATCH BIN WITH NO RESERVATION ITEM, 0.00, RMA FITEM, RMA FITEM, 0.00, RMA RITEM, RMA RITEM, 0.00, RMA BATCH ITEM, RMA BATCH ITEM, 0.00, WA COGS ITEM, WA COGS ITEM, 0.00, FIFO COGS ITEM, FIFO COGS ITEM, 0.00, BR COGS ITEM, BR COGS ITEM, 0.00, STD RATE COGS ITEM, STD RATE COGS ITEM, 0.00]";
		
		System.out.println("actitemBodyList : "+actitemBodyList);
		System.out.println("expitemBodyList : "+expitemBodyList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
	
		
		if(actitemBodyList.equalsIgnoreCase(expitemBodyList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  
  
  public boolean checkSelectItemByAliasInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Item by Alias"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchItemBtn));
		searchItemBtn.click();
		
		Thread.sleep(2000);
		
		int itemBodyListCount = itemBodyList.size();
		
		ArrayList<String> itemBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<itemBodyListCount;i++)
		{
			String data = itemBodyList.get(i).getText();

			itemBodyListArray.add(data);
			
			if (i!=itemBodyListCount-1) 
			{
				int temp=i+1;
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();",itemBodyList.get(temp));
			}
		}	
		
		String actitemBodyList = itemBodyListArray.toString();
		String expitemBodyList = "[RMA FSITEM, RMA STITEM, 0.00, SI, STOCK ITEM, 0.00, BWI, BATCH WA ITEM, 0.00, BATCH IGNORE EXP LIFO ITEM, BATCH IGNORE EXP LIFO ITEM, 0.00, BATCH FIFO ITEM, BATCH FIFO ITEM, 0.00, BATCH BR ITEM, BATCH BR ITEM, 0.00, BRMI, BIN RAW MATERIAL ITEM, 0.00, BFGI, BIN FINISHED GOODS ITEM, 0.00, BBFGI, BATCH BIN FINISHED GOODS ITEM, 0.00, BBWNOSUI, BATCH BIN WITH NO STOCK UPDATE ITEM, 0.00, BBWNRI, BATCH BIN WITH NO RESERVATION ITEM, 0.00, RMA FITEM, RMA FITEM, 0.00, RMA RITEM, RMA RITEM, 0.00, RMA BATCH ITEM, RMA BATCH ITEM, 0.00, WA COGS ITEM, WA COGS ITEM, 0.00, FIFO COGS ITEM, FIFO COGS ITEM, 0.00, BR COGS ITEM, BR COGS ITEM, 0.00, STD RATE COGS ITEM, STD RATE COGS ITEM, 0.00]";
		
		System.out.println("actitemBodyList : "+actitemBodyList);
		System.out.println("expitemBodyList : "+expitemBodyList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
	
		
		if(actitemBodyList.equalsIgnoreCase(expitemBodyList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  @FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
  private static WebElement advanceSearchCustomizeBtn;
  
  @FindBy(xpath="//span[@id='a']")
  private static WebElement advanceSearchFilterBtn;
  
  @FindBy(xpath="//span[@class='icon-search icon-font6']")
  private static WebElement advanceSearchSearchBtn;
  
  @FindBy(xpath="//span[@class='icon-clear icon-font6']")
  private static WebElement advanceSearchClearBtn;
  
  @FindBy(xpath="//div[@class='toolbar_button_image']//span[@class='icon-close icon-font6']")
  private static WebElement advanceSearchCloseBtn;
  
  @FindBy(xpath="//thead[@id='theadAdvanceSearchItem']/tr/td")
  private static List<WebElement> advanceSearchHeaderList;
  
  @FindBy(xpath="//input[@id='txtfiltersearch']")
  private static WebElement filterSearch;
  
  @FindBy(xpath="//ul[@id='FilterFields_8031_2']/li/div/label")
  private static List<WebElement> customizeList;
  
  @FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Ok')]")
  private static WebElement customizeOkBtn;
  
  @FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
  private static WebElement customizeCancelBtn;
  
  @FindBy(xpath="//input[@id='8031_2_DefaultFilter_0']")
  private static WebElement customizeNameTxt;
  
  /*@FindBy(xpath="//body[@class='custom_scrollbar modal-open']/div[1]")
  private static WebElement footerText;*/
  
  @FindBy(xpath="/html[1]/body[1]/div[1]")
  private static WebElement footerText;
  
  public boolean checkAdvanceSearchItemInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Advanced Search Item"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		boolean actadvanceSearchCustomizeBtn = advanceSearchCustomizeBtn.isDisplayed();
		boolean actadvanceSearchFilterBtn    = advanceSearchFilterBtn.isDisplayed();
		boolean actadvanceSearchSearchBtn    = advanceSearchSearchBtn.isDisplayed();
		boolean actadvanceSearchClearBtn     = advanceSearchClearBtn.isDisplayed();
		boolean actadvanceSearchCloseBtn     = advanceSearchCloseBtn.isDisplayed();
		
		boolean expadvanceSearchCustomizeBtn = true;
		boolean expadvanceSearchFilterBtn    = true;
		boolean expadvanceSearchSearchBtn    = true;
		boolean expadvanceSearchClearBtn     = true;
		boolean expadvanceSearchCloseBtn     = true;
		

		System.out.println("advanceSearchCustomizeBtn : "+actadvanceSearchCustomizeBtn+" Value Expected : "+expadvanceSearchCustomizeBtn);
		System.out.println("advanceSearchFilterBtn    : "+actadvanceSearchFilterBtn+" Value Expected : "+expadvanceSearchFilterBtn);
		System.out.println("advanceSearchSearchBtn    : "+actadvanceSearchSearchBtn+" Value Expected : "+expadvanceSearchSearchBtn);
		System.out.println("advanceSearchClearBtn     : "+actadvanceSearchClearBtn+" Value Expected : "+expadvanceSearchClearBtn);
		System.out.println("advanceSearchCloseBtn     : "+actadvanceSearchCloseBtn+" Value Expected : "+expadvanceSearchCloseBtn);
		
		
		Thread.sleep(2000);
		
		int advanceSearchHeaderListCount = advanceSearchHeaderList.size();
		
		ArrayList<String> customadvanceSearchHeaderListArrayizeListArray = new ArrayList<String>();
		
		for(int i=0;i<advanceSearchHeaderListCount;i++)
		{
			String data = advanceSearchHeaderList.get(i).getText();

			customadvanceSearchHeaderListArrayizeListArray.add(data);
		}	
		
		String actadvanceSearchHeaderList = customadvanceSearchHeaderListArrayizeListArray.toString();
		String expadvanceSearchHeaderList = "[, Item Name, Item Code, Price]";
		
		System.out.println("actadvanceSearchHeaderList : "+actadvanceSearchHeaderList);
		System.out.println("expadvanceSearchHeaderList : "+expadvanceSearchHeaderList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(advanceSearchCustomizeBtn));
		advanceSearchCustomizeBtn.click();
		
		Thread.sleep(2000);
		
		
		boolean actfilterSearch       = filterSearch.isDisplayed();
		boolean actcustomizeOkBtn     = customizeOkBtn.isDisplayed();
		boolean actcustomizeCancelBtn = customizeCancelBtn.isDisplayed();
		
		boolean expfilterSearch       = true;
		boolean expcustomizeOkBtn     = true;
		boolean expcustomizeCancelBtn = true;
		
		System.out.println("filterSearch       : "+actfilterSearch+" Value Expected : "+expfilterSearch);
		System.out.println("customizeOkBtn     : "+actcustomizeOkBtn+" Value Expected : "+expcustomizeOkBtn);
		System.out.println("customizeCancelBtn : "+actcustomizeCancelBtn+" Value Expected : "+expcustomizeCancelBtn);

		
		int customizeListCount = customizeList.size();
		
		ArrayList<String> customizeListArray = new ArrayList<String>();
		
		for(int i=0;i<customizeListCount;i++)
		{
			String data = customizeList.get(i).getText();

			customizeListArray .add(data);
			
			if (i!=customizeListCount-1) 
			{
				int temp=i+1;
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();",customizeList.get(temp));
			}
		}	
		
		String actcustomizeList = customizeListArray.toString();
		String expcustomizeList = "[Name, Code, Reorder Level, Bin Capacity, Reorder Level, Standard Cost, Overhead cost, Indirect Cost %, Profit %, Code, Rate, Tolerance, Lead Time, Credit Days, Credit Limit, Reorder point, Reorder Quantity, Max inventory level, Min order Quantity, Max order quantity, Order multiple, BOM, Don’t show products expiring in (Days), Lead time (in days), Barcode, Batch, Printer, Description, Packing BOM, Start Date, End Date, Least Delivery Date, Safety Lead Time, Safety Stock, Re-order cycle, Body Id, Start date, End date, Replenish qty, Length, Width, Height, Weight]";
		
		System.out.println("actcustomizeList : "+actcustomizeList);
		System.out.println("expcustomizeList : "+expcustomizeList);
		
		for(int i=0;i<customizeListCount;i++)
		{
			String data = customizeList.get(i).getText();

			
			if (data.equalsIgnoreCase("Name")) 
			{
				customizeList.get(i).click();
				
				break;
			}
		}
		
		customizeOkBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeNameTxt));
		customizeNameTxt.click();
		customizeNameTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		customizeNameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(advanceSearchSearchBtn));
		advanceSearchSearchBtn.click();
	
		boolean actfooterText = toastMessage.isDisplayed();
		boolean expfooterText = false;
		
		System.out.println("footerText : "+actfooterText+" Value Expected : "+expfooterText);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(advanceSearchCloseBtn));
		advanceSearchCloseBtn.click();
		
		if(actadvanceSearchCustomizeBtn==expadvanceSearchCustomizeBtn && actadvanceSearchFilterBtn==expadvanceSearchFilterBtn && actadvanceSearchSearchBtn==expadvanceSearchSearchBtn
				&& actadvanceSearchClearBtn==expadvanceSearchClearBtn && actadvanceSearchCloseBtn==expadvanceSearchCloseBtn
				
				&& actfilterSearch==expfilterSearch && actcustomizeOkBtn==expcustomizeOkBtn && actcustomizeCancelBtn==expcustomizeCancelBtn
				
				&& actadvanceSearchHeaderList.equalsIgnoreCase(expadvanceSearchHeaderList) && actfooterText==expfooterText 
				&& actcustomizeList.equalsIgnoreCase(expcustomizeList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		} 
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
	
  
  @FindBy(xpath ="//*[@id='GenerateNewMasterModel']/div/div[2]/div[1]/ul/li")
  public static List<WebElement> itemNewHeaderTabList;
  
  @FindBy(xpath="//*[@id='divBtnGroup0']/div/a")
  private static WebElement ItemNewnewGeneralBtn;
			     
	     @FindBy(xpath="//input[@id='sName']")
	     private static WebElement newGeneralName;
	     
	     @FindBy(xpath="//input[@id='sCode']")
	     private static WebElement newGeneralCode;
	     
	     @FindBy(xpath="//select[@id='iProductType']")
	     private static WebElement newGeneralItemTypeDropDown;
	     
	     @FindBy(xpath="//input[@id='fReorderLevel']")
	     private static WebElement newGeneralReorderLevel;
	     
	     @FindBy(xpath="//input[@id='iBinCapacity']")
	     private static WebElement newGeneralBinCapacity;
	     
	     @FindBy(xpath="//select[@id='iValuationMethod']")
	     private static WebElement newGeneralValuationMethodDropDown;
	     
	     @FindBy(xpath="//input[@id='iCategory']")
	     private static WebElement newGeneralCategoryDropDown;
	     
	     @FindBy(xpath="//td[@id='iCategory_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	     private static WebElement newGeneralCategorySettingBtn;
	     
	     @FindBy(xpath="//select[@id='iProductMake']")
	     private static WebElement newGeneralItemMakeDropDown;
	     
	     @FindBy(xpath="//input[@id='Printer']")
	     private static WebElement newGeneralPrint;
	     
	     @FindBy(xpath="//input[@id='iAlternateCategory']")
	     private static WebElement newGeneralAlternativeCategoryDropdown;
	     
	     @FindBy(xpath="//td[@id='iAlternateCategory_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	     private static WebElement newGeneralAlternativeCategoryDropdownSettingBtn;
	     
	     @FindBy(xpath="//textarea[@id='sDescription']")
	     private static WebElement newGeneralDescription;
	     
	     @FindBy(xpath="//input[@id='bPerishableItem']")
	     private static WebElement newGeneralPerishableItemCheckBox;
	     
	     @FindBy(xpath="//input[@id='iBin']")
	     private static WebElement newGeneralBinDropdown;
	     
	     @FindBy(xpath="//td[@id='iBin_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	     private static WebElement newGeneralBinDropdownSettingBtn;

	     @FindBy(xpath="//input[@id='pImage']")
	     private static WebElement newGeneralUploadImageOrFileBtn;
  
  @FindBy(xpath ="//*[@id='newMasterDiv0']/div/div/div[2]/parent::div/div[1]")
  public static List<WebElement> itemNewBodyFieldsList;
  
  @FindBy(xpath="//*[@id='divBtnGroup1']/div/a")
  private static WebElement ItemNewUnitsBtn;
  
  
  @FindBy(xpath="//input[@id='iDefaultBaseUnit']")
  private static WebElement itemUnitsDefaultBaseUnitDropdown;
		     
  @FindBy(xpath="//td[@id='iDefaultBaseUnit_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
  private static WebElement itemUnitsDefaultBaseUnitSetting;
	 
  @FindBy(xpath="//input[@id='iDefaultSalesUnit']")
  private static WebElement itemUnitsDefaultSalesUnitDropdown;
		 
  @FindBy(xpath="//td[@id='iDefaultSalesUnit_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
  private static WebElement itemUnitsDefaultSalesUnitSettingsBtn;
	 
  @FindBy(xpath="//input[@id='iDefaultPurchaseUnit']")
  private static WebElement itemUnitsDefaultPurchaseUnitDropDown;
	 
  @FindBy(xpath="//td[@id='iDefaultPurchaseUnit_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
  private static WebElement itemUnitsDefaultPurchaseUnitSettingsBtn;
	 
  @FindBy(xpath="//input[@id='fLength']")
  private static WebElement itemUnitsLength;
	 
  @FindBy(xpath="//input[@id='fWidth']")
  private static WebElement itemUnitswidth;
	 
  @FindBy(xpath="//input[@id='fHeight']")
  private static WebElement itemUnitsHeight;
  
  @FindBy(xpath="//*[@id='fCBM']")
  private static WebElement itemUnitsCBM;
	 
  @FindBy(xpath="//input[@id='fWeight']")
  private static WebElement itemUnitsWeight;
	 
  @FindBy(xpath="//input[@id='iPalletUnit']")
  private static WebElement itemUnitsPalletUnitTxt;
	 
  @FindBy(xpath="//input[@id='fPalletQty']")
  private static WebElement itemUnitsPalletQtyTxt;
	 
  @FindBy(xpath="//input[@id='fPalletLength']")
  private static WebElement itemUnitsPalletLengthTXt;
	 
  @FindBy(xpath="//input[@id='fPalletWidth']")
  private static WebElement itemUnitsPalletWidthTxt;
	 
  @FindBy(xpath="//input[@id='fPalletHeight']")
  private static WebElement itemUnitsPalletHeightTxt;
  
  @FindBy(xpath ="//*[@id='newMasterDiv1']/div/div/div/label")
  public static List<WebElement> itemNewUnitBodyFieldsList;
  
  @FindBy(xpath="//*[@id='divBtnGroup2']/div/a")
  private static WebElement ItemNewSettingsBtn;
  
	     @FindBy(xpath="//*[@id='fStandardCost']")
	     private static WebElement NewSettingsStandardCost;
	     
	     @FindBy(xpath="//*[@id='fOverheadCost']")
	     private static WebElement NewSettingsOverheadCost;
	     	     
	     @FindBy(xpath="//*[@id='fIndirectCost']")
	     private static WebElement NewSettingsIndirectCost;
	     		     
	     @FindBy(xpath="//*[@id='fProfit']")
	     private static WebElement NewSettingsProfit;		     
	     
	     @FindBy(xpath="//*[@id='iDontshowproductexpireddays']")
	     private static WebElement NewSettingsDontshowproductexpireddays;
	     
	     @FindBy(xpath="//*[@id='iTaxCode']")
	     private static WebElement NewSettingsTaxCode;
	     
	     @FindBy(xpath="//*[@id='iTaxCode_input_settings']/span")
	     private static WebElement NewSettingsTaxCodeSttingsBtn;
	     
	     @FindBy(xpath="//*[@id='btnMasterSaveClick']")
	     private static WebElement NewSettingsSaveBtn; 
	     
	     @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	     private static WebElement NewSettingsCloseBtn;
	    
 @FindBy(xpath="//*[@id='divBtnGroup3']/div/a")
 private static WebElement ItemNewClassificationBtn;
       
	     @FindBy(xpath="//*[@id='iABCCodeValue']")
	     private static WebElement newItemClassificationABC_CodeValueDropdown;
	     
	     @FindBy(xpath="//*[@id='iABCCodeMargin']")
	     private static WebElement newItemClassificationABC_CodeMarginDropdOwn;
	     
	     @FindBy(xpath="//*[@id='iABCCodeRevenue']")
	     private static WebElement newItemClassificationABCCodeRevenueDropdown;
	     
	     @FindBy(xpath="//*[@id='iABCCodeCarryingCost']")
	     private static WebElement newItemClassificationABCCodeCarryingCostDropdown;
	    
	     @FindBy(xpath="//*[@id='sBarcode1']")
	     private static WebElement newItemClassificationBarcode1;
	     
	     @FindBy(xpath="//*[@id='sBarcode2']")
	     private static WebElement newItemClassificationBarcode2;
	     
	     @FindBy(xpath="//*[@id='sBarcode3']")
	     private static WebElement newItemClassificationBarcode3;
	     
	     @FindBy(xpath="//*[@id='iUnit1']")
		 private static WebElement newItemgridFirstrowUnit;
		
		 @FindBy(xpath="//*[@id='sBarcode1']")
		 private static WebElement newItemgridFirstrowBarcode;
		
		 //Grid element
				 
		 @FindBy(xpath="//*[@id='sBatch1']")
		 private static WebElement newItemClassificationgridFirstrowBatch;
		
		 @FindBy(xpath="//*[@id='iUnit2']")
		 private static WebElement newItemClassificationgridSecondrowUnit;
		
		 @FindBy(xpath="//*[@id='sBarcode2']")
		 private static WebElement newItemClassificationgridSecondrowBarcode;
		
		 @FindBy(xpath="//*[@id='sBatch2']")
		 private static WebElement newItemClassificationgridSecondrowBatch;
		
		 @FindBy(xpath="//*[@id='iUnit3']")
		 private static WebElement newItemClassificationgridThridrowUnit;
		
		 @FindBy(xpath="//*[@id='sBarcode3']")
		 private static WebElement newItemClassificationgridThridrowBarcode;
		
		 @FindBy(xpath="//*[@id='sBatch3']")
		 private static WebElement newItemClassificationgridThridrowBatch;
		
		 @FindBy(xpath="//*[@id='iUnit_input_settings']")
		 private static WebElement newItemClassificationgridUnitSettings;
	     
  @FindBy(xpath="//*[@id='divBtnGroup4']/div/a")
  private static WebElement ItemNewOtherDetailsBtn;

	     @FindBy(xpath="//input[@id='iCostOfIssueAccount']")
	     private static WebElement newOtherDetailsCostOfIssueitem;
	     
	     @FindBy(xpath="//td[@id='iCostOfIssueAccount_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	     private static WebElement newOtherDetailsCostOfIssueitemsettingsBtn;
	     
	     @FindBy(xpath="//input[@id='iStocksAccount']")
	     private static WebElement newOtherDetailsStocksitem;
	     
	     @FindBy(xpath="//td[@id='iStocksAccount_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	     private static WebElement newOtherDetailsiStocksitemsettingsBtn;
	     
	     @FindBy(xpath="//input[@id='iSalesAccount']")
	     private static WebElement newOtherDetailsSalesAccount;
	     
	     @FindBy(xpath="//td[@id='iSalesAccount_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	     private static WebElement newOtherDetailsSalesitemsettingsBtn;
	     
	     @FindBy(xpath="//input[@id='iWIPAccount']")
	     private static WebElement newOtherDetailsWIPitem;
	     
	     @FindBy(xpath="//td[@id='iWIPAccount_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
	     private static WebElement newOtherDetailsWIPitemsettingsBtn;
	     
	     @FindBy(xpath="//input[@id='iCostofShortageStockAC']")
	     private static WebElement newOtherDetailsCostofShortageStockAC;
	     
	     @FindBy(xpath="//td[@id='iCostofShortageStockAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
	     private static WebElement newOtherDetailsCostofShortageStockACsettingsBtn;
	     
	     @FindBy(xpath="//input[@id='iCostofExcessStockAC']")
	     private static WebElement newOtherDetailsCostofExcessStockAC;
	     
	     @FindBy(xpath="//td[@id='iCostofExcessStockAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
	     private static WebElement OtherDetailsCostofExcessStockACsettingsBtn;
	    
	     @FindBy(xpath="//input[@id='iCostofSaleReturnAC']")
	     private static WebElement OtherDetailsCostofSaleReturnAC;
	     
	     @FindBy(xpath="//td[@id='iCostofSaleReturnAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
	     private static WebElement OtherDetailsCostofSaleReturnACsettingsBtn;
	     
	     @FindBy(xpath="//input[@id='iPurchaseVarianceAC']")
	     private static WebElement OtherDetailsPurchaseVarianceAC;
	     
	     @FindBy(xpath="//td[@id='iPurchaseVarianceAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
	     private static WebElement OtherDetailsPurchaseVarianceACsettingsBtn;
	     
	     @FindBy(xpath="//*[@id='btnMasterSaveClick']")
	     private static WebElement newOtherDetailsSaveBtn;
	     
	     @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	     private static WebElement newOtherDetailsCloseBtn;
	     
  
  @FindBy(xpath="//*[@id='ioWarehouse1']")
	private static WebElement newOtherDetailsgridFirstrowWareHouse;
		     
      @FindBy(xpath="//*[@id='ioWarehouse_input_settings']/span")
      private static WebElement newGridWarehouseSettingBtn;

	@FindBy(xpath="//*[@id='1']")
	private static WebElement newOtherDetailsgridFirstrowSupplier;
		 	
      @FindBy(xpath="//*[@id='iSupplier_input_settings']/span")
     private static WebElement newGridSupplierSettingBtn;
		 	
	@FindBy(xpath="//*[@id='sSupCode1']")
	private static WebElement newOtherDetailsgridFirstrowCode;
	
	@FindBy(xpath="//*[@id='iStartDate1']")
	private static WebElement newOtherDetailsgridFirstrowStartDate;
	
	@FindBy(xpath="//*[@id='iEndDate1']")
	private static WebElement newOtherDetailsgridFirstrowEnddate;
	
	@FindBy(xpath="//*[@id='fRate1']")
	private static WebElement newOtherDetailsgridFirstrowRate;

	@FindBy(xpath="//*[@id='iTolerance1']")
	private static WebElement newOtherDetailsgridFirstTolerance;

	@FindBy(xpath="//*[@id='iLeadTime1']")
	private static WebElement newOtherDetailsgridFirstrowLeadTime;

	@FindBy(xpath="//*[@id='iCreditDays1']")
	private static WebElement newOtherDetailsgridFirstrowUnitCreditDays;
	
	@FindBy(xpath="//*[@id='iCreditLimit1']")
	private static WebElement newOtherDetailsgridFirstrowCreditLimit;

	@FindBy(xpath="//*[@id='LeastDeliveryDate1']")
	private static WebElement newOtherDetailsgridFirstrowLastDeliveryDate;

   
@FindBy(xpath="//*[@id='divBtnGroup5']/div/a")
private static WebElement ItemNewReplenishmentBtn;
   
   
   @FindBy(xpath="//*[@id='iDefaultReplenishment']")
   private static WebElement newreplenishmentDefaultReplenishment;
   
   @FindBy(xpath="//*[@id='iManufacturePolicy']")
   private static WebElement newreplenishmentManufacturePolicy;
   
   @FindBy(xpath="//*[@id='iPackingBOM']")
   private static WebElement newreplenishmentPackingBOM;
   
   @FindBy(xpath="//*[@id='iPackingBOM_input_settings']/span")
   private static WebElement newreplenishmentPackingBOMsettingsBtn;
   
   @FindBy(xpath="//*[@id='iBOM']")
   private static WebElement newreplenishmentBOM;
   
   @FindBy(xpath="//*[@id='iFlushing']")
   private static WebElement newreplenishmentFlushing;
   
   @FindBy(xpath="//*[@id='btnMasterSaveClick']")
   private static WebElement newreplenishmentSaveBtn;
   
   @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
   private static WebElement newreplenishmentCloseBtn;
   
   //Grid
   
   @FindBy(xpath="//*[@id='irWarehouse1']")
   private static WebElement newreplenishmentGridFirstRowWarehouse;
   
   @FindBy(xpath="//*[@id='irStartdate1']")
   private static WebElement newreplenishmentGridFirstRowStartDate;
   
   @FindBy(xpath="//*[@id='irEnddate1']")
   private static WebElement newreplenishmentGridFirstRowEndDate;
   
   @FindBy(xpath="//*[@id='iReplenishqty1']")
   private static WebElement newreplenishmentGridFirstRowReplenishqty;
 
   @FindBy(xpath="//*[@id='iReorderPolicy1']")
   private static WebElement newreplenishmentGridFirstRowReorderPolicy;
   
   @FindBy(xpath="//*[@id='fSafetyStock1']")
   private static WebElement newreplenishmentGridFirstRowSafetyStock;
   
   @FindBy(xpath="//*[@id='iSafetyLeadTime1']")
   private static WebElement newreplenishmentFirstRowSafetyLeadTime;
   
   @FindBy(xpath="//*[@id='fReordercycle1']")
   private static WebElement newreplenishmentFirstRowReordercycle;
   
   @FindBy(xpath="//*[@id='fReorderPoint1']")
   private static WebElement newreplenishmentFirstRowReorderPoint;
   
   @FindBy(xpath="//*[@id='fReorderQuantity1']")
   private static WebElement newreplenishmentFirstRowReorderQuantity;
   
   @FindBy(xpath="//*[@id='fMaxInventoryLevel1']")
   private static WebElement newreplenishmentFirstRowMaxInventoryLevel;
   
   @FindBy(xpath="//*[@id='iDefaultVendor1']")
   private static WebElement newreplenishmentFirstRowDefaultVendor;
   
   
   @FindBy(xpath="//*[@id='fMinOrderQuantity1']")
   private static WebElement newreplenishmentFirstRowMinOrderQuantity;
   
   
   @FindBy(xpath="//*[@id='fMaxOrderQuantity1']")
   private static WebElement newreplenishmentFirstRowMaxOrderQuantity1;
   
   
   @FindBy(xpath="//*[@id='fOrderMultiple1']")
   private static WebElement newreplenishmentFirstRowOrderMultiple;
		     
		     
@FindBy(xpath="//*[@id='divBtnGroup7']/div/a")
private static WebElement ItemNewOutletBtn;
   
   @FindBy(xpath="//*[@id='txtsrch-term0']")
   private static WebElement newOutletSearchOutlet;
   
   @FindBy(xpath="//*[@id='cmbUserTypeMaster']")
   private static WebElement newOutletAdvanceSearch;
   		     
   @FindBy(xpath="//*[@id='chkResizeGrid0']/span")
   private static WebElement newOutletResizeBtn;
   
   @FindBy(xpath="//*[@id='chkRetainSelection']")
   private static WebElement newOutletRetainSelctionCheckBox;

   @FindBy(xpath="//a[contains(text(),'Tariff')]")
   private static WebElement tariffTab;

   @FindBy(xpath="//input[@id='iTariffCode1']")
   private static WebElement tariffGridTariffCode;
		     
   @FindBy(xpath="//input[@id='iAffectedDate1']")
   private static WebElement  tariffGridAffecteddate;
		     
@FindBy(xpath="//*[@id='btnMasterSaveClick']/i")
private static WebElement itemCreationScreenSaveBtn;

@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
private static WebElement itemCreationScreenCloseBtn;
	     
  
  @FindBy(xpath ="//*[@id='newMasterDiv2']/div/div/div/label")
  public static List<WebElement> itemNewSettingsBodyFieldsList;
  
  @FindBy(xpath ="//*[@id='newMasterDiv3']/div/div/div/label")
  public static List<WebElement> itemNewClassificationBodyFieldsList;
  
  @FindBy(xpath ="//*[@id='newMasterDiv4']/div/div/div/label")
  public static List<WebElement> itemNewOtherDetailsBodyFieldsList;
  
  @FindBy(xpath ="//*[@id='newMasterDiv5']/div/div/div/label")
  public static List<WebElement> itemNewReplenishmentTabBodyFieldsList;
  
  
  public boolean checkCreateItemInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Create Item"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		Thread.sleep(2000);
		
		
		ArrayList<String> actitemNewHeaderTabList=new ArrayList<String>();
	 		
		int NewTabList =itemNewHeaderTabList.size();
	 		
		System.err.println("NewTabList   :  "+NewTabList);
		
		for (int i = 0; i < NewTabList; i++) 
		{
			String data=itemNewHeaderTabList.get(i).getText();
			actitemNewHeaderTabList.add(data);
		}
	 			
		String actMasterItemNewTabList=actitemNewHeaderTabList.toString();
		String expMasterItemNewTabList="[General, Units, Settings, Classification, Other Details, Replenishment, Outlet, ]";
	    	
		System.err.println("  Actual    MasterItemNewTabList : "+actMasterItemNewTabList);
		System.err.println("  Expected  MasterItemNewTabList : "+expMasterItemNewTabList);
		
		
		ArrayList<String> actitemNewBodyFieldsList=new ArrayList<String>();
	 		
		int BodyFielddList =itemNewBodyFieldsList.size();
	 		
		System.err.println("BodyFielddList   :  "+BodyFielddList);
	 		
		for (int i = 0; i < BodyFielddList; i++) 
		{
			String data=itemNewBodyFieldsList.get(i).getText();
			actitemNewBodyFieldsList.add(data);
		}	
		 
	 	
		String actMasterItemNewFieldList=actitemNewBodyFieldsList.toString();
		String expMasterItemNewFieldList="[, Name, Code, Item Type, Group, Reorder Level, Bin capacity, Valuation Method, , , , , , , , , , , , , , , Category, Item Make, Printer, Alternate Category, Description, , Bin, Image, ]";
	    	
		System.err.println("  Actual    MasterItemNewFieldList : "+actMasterItemNewFieldList);
		System.err.println("  Expected  MasterItemNewFieldList : "+expMasterItemNewFieldList);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
		ItemNewUnitsBtn.click();
	
		Thread.sleep(2000);
		
		ArrayList<String> actitemNewUnitBodyFieldsList=new ArrayList<String>();
	 		
 		int UnitBodyFielddList =itemNewUnitBodyFieldsList.size();
	 		
	 	System.err.println("BodyFielddList   :  "+BodyFielddList);
	 		
	 	for (int i = 1; i < UnitBodyFielddList; i++) 
	 	{
			String data=itemNewUnitBodyFieldsList.get(i).getText();
			actitemNewUnitBodyFieldsList.add(data);
		}
	 		
	 	
	 	String actMasterItemNewUnitFieldList=actitemNewUnitBodyFieldsList.toString();
	 	String expMasterItemNewUnitFieldList="[Default Base Unit, Default Sales Unit, Default Purchase Unit, Length, Width, Height, Weight]";
	    	
	    System.err.println("  Actual    Units : "+actMasterItemNewUnitFieldList);
	    System.err.println("  Expected  Units : "+expMasterItemNewUnitFieldList);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitSettingsBtn));
		boolean actUnitsBaseUnit              = itemUnitsDefaultBaseUnitDropdown.isDisplayed();
		boolean actUnitBaseUnitSettings       = itemUnitsDefaultBaseUnitSetting.isDisplayed();
		boolean actUnitSalesUnit              = itemUnitsDefaultSalesUnitDropdown.isDisplayed();
		boolean actUnitSalesUnitSettings      = itemUnitsDefaultSalesUnitSettingsBtn.isDisplayed();
		boolean actUnitsPurchase              = itemUnitsDefaultPurchaseUnitDropDown.isDisplayed();
		boolean actUnitsPurchaseSettings      = itemUnitsDefaultPurchaseUnitSettingsBtn.isDisplayed();
		boolean actUnitsLength                = itemUnitsLength.isDisplayed();
		boolean actUnitsWidth                 = itemUnitswidth.isDisplayed();
		boolean actUnitHeight                 = itemUnitsHeight.isDisplayed();
		boolean actUnitsWeight                = itemUnitsWeight.isDisplayed();

		boolean expUnitsBaseUnit              = true;
		boolean expUnitBaseUnitSettings       = true;
		boolean expUnitSalesUnit              = true;
		boolean expUnitSalesUnitSettings      = true;
		boolean expUnitsPurchase              = true;
		boolean expUnitsPurchaseSettings      = true;
		boolean expUnitsLength                = true;
		boolean expUnitsWidth                 = true;
		boolean expUnitHeight                 = true;
		boolean expUnitsWeight                = true;
		
		System.out.println("Base Unit Value Actual              :  " + actUnitsBaseUnit +         " Value Expected :  " + expUnitsBaseUnit);
		System.out.println("Base Unit Settings Value Actual     :  " + actUnitBaseUnitSettings +  " Value Expected :  " + expUnitBaseUnitSettings);
		System.out.println("Sale Unit Value Actual              :  " + actUnitSalesUnit +         " Value Expected :  " + expUnitSalesUnit);
		System.out.println("Sale Unit Settings Value Actual     :  " + actUnitSalesUnitSettings + " Value Expected :  " + expUnitSalesUnitSettings);
		System.out.println("Purchase Unit Value Actual          :  " + actUnitsPurchase +         " Value Expected :  " + expUnitsPurchase);
		System.out.println("Purchase Unit Settings Value Actual :  " + actUnitsPurchaseSettings + " Value Expected :  " + expUnitsPurchaseSettings);
		System.out.println("Unis Length Value Actual            :  " + actUnitsLength +           " Value Expected :  " + expUnitsLength);
		System.out.println("Units Width Value Actual            :  " + actUnitsWidth +            " Value Expected :  " + expUnitsWidth);
		System.out.println("Units Height Value Actual           :  " + actUnitHeight +            " Value Expected :  " + expUnitHeight);
		System.out.println("Units Weight Value Actual           :  " + actUnitsWeight +           " Value Expected :  " + expUnitsWeight);
		
		boolean TestResult=actUnitsBaseUnit == actUnitsBaseUnit && actUnitBaseUnitSettings == expUnitBaseUnitSettings
							&& actUnitSalesUnit == expUnitSalesUnit && actUnitSalesUnitSettings == expUnitSalesUnitSettings
							&& actUnitsPurchase == expUnitsPurchase && actUnitsPurchaseSettings == expUnitsPurchaseSettings
							&& actUnitsLength == expUnitsLength && actUnitsWidth == expUnitsWidth && actUnitHeight == expUnitHeight
							&& actUnitsWeight == expUnitsWeight;
		
		
		String actNewUnitBodyFileds=Boolean.toString(TestResult);
		String expNewUnitBodyFileds="true";
				
	    System.err.println("Actual   NewUnitBodyFileds       : "+actNewUnitBodyFileds);
	    System.err.println("Expected NewUnitBodyFileds       : "+expNewUnitBodyFileds);
		
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewSettingsBtn));
	    ItemNewSettingsBtn.click();
			
	    Thread.sleep(2000);
		  
	    ArrayList<String> actitemNewSettingsBodyFieldsList=new ArrayList<String>();
			
	    int SettingsBodyFielddList =itemNewSettingsBodyFieldsList.size();
		 		
	    System.err.println("SettingsBodyFielddList   :  "+SettingsBodyFielddList);
		 		
	    for (int i = 1; i < SettingsBodyFielddList; i++) 
	    {
	    	String data=itemNewSettingsBodyFieldsList.get(i).getText();
	    	actitemNewSettingsBodyFieldsList.add(data);
	    }
			 		
	    String actMasterItemNewSettingsFieldList=actitemNewSettingsBodyFieldsList.toString();
	    String expMasterItemNewSettingsFieldList="[Standard Cost, Overhead cost, Indirect Cost %, Profit %, Don’t show products expiring in (Days), Tax Code, Tax category]";
			    	
	    System.err.println("  Actual MasterItemNewFieldList : "+actMasterItemNewSettingsFieldList);
	    System.err.println("  Expected  MasterItemNewTabList : "+expMasterItemNewSettingsFieldList);
			
		  
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NewSettingsOverheadCost));

	    boolean actStandardCost               = NewSettingsStandardCost.isDisplayed();
	    boolean actOverheadCost               = NewSettingsOverheadCost.isDisplayed();
	    boolean actIndirectCost               = NewSettingsIndirectCost.isDisplayed();
	    boolean actProfit                     = NewSettingsProfit.isDisplayed();
	    boolean actDoNotShowProductExpiryDays = NewSettingsDontshowproductexpireddays.isDisplayed();
	    boolean actTaxCode                    = NewSettingsTaxCode.isDisplayed();
		  
	    boolean expStandardCost               = true;
	    boolean expOverheadCost               = true;
	    boolean expIndirectCost               = true;
	    boolean expProfit                     = true;
	    boolean expDoNotShowProductExpiryDays = true;
	    boolean expTaxCode                    = true;
	    

	    System.out.println("General Tab Value Actual         :  " + actStandardCost +              " Value Expected :  " + expStandardCost);
	    System.out.println("Unit Tab Value Actual            :  " + actOverheadCost +              " Value Expected :  " + expOverheadCost);
	    System.out.println("Settings Tab Value Actual        :  " + actIndirectCost +              " Value Expected :  " + expIndirectCost);
	    System.out.println("Classification Tab Value Actual  :  " + actProfit +                    " Value Expected :  " + expProfit);
	    System.out.println("Other Details Tab Value Actual   :  " + actDoNotShowProductExpiryDays+ " Value Expected :  " + expDoNotShowProductExpiryDays);
	    System.out.println("Replenishment Tab Value Actual   :  " + actTaxCode +                   " Value Expected :  " + expTaxCode);
		
		 
	    boolean testResult=actStandardCost == expStandardCost && actOverheadCost == actOverheadCost
	    		&&  actIndirectCost == expIndirectCost && actProfit == expProfit
	    		&& actDoNotShowProductExpiryDays == expDoNotShowProductExpiryDays && actTaxCode == expTaxCode;
		 
	    String actSettingBodyFileds=Boolean.toString(testResult);
	    String expSettingBodyFileds="true";
		 
	    System.err.println("actSettingBodyFileds  : "+actSettingBodyFileds);
	    System.err.println("expSettingBodyFileds   : "+expSettingBodyFileds);
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewClassificationBtn));
  	    ItemNewClassificationBtn.click();
		
  	    Thread.sleep(1000);
  	    
  	    
  	    ArrayList<String> actitemNewClassificationBodyFieldsList=new ArrayList<String>();
		
		int ClassificationBodyFielddList =itemNewClassificationBodyFieldsList.size();
	 		
	 	System.err.println("ClassificationBodyFielddList   :  "+ClassificationBodyFielddList);
	 		
	 	for (int i = 1; i < ClassificationBodyFielddList; i++) 
	 	{
			String data=itemNewClassificationBodyFieldsList.get(i).getText();
			actitemNewClassificationBodyFieldsList.add(data);
		}
	 		
	 	String actMasterItemNewClassificationFieldList=actitemNewClassificationBodyFieldsList.toString();
	 	String expMasterItemNewClassificationFieldList="[ABC-code value, ABC-code margin, ABC-code revenue, ABC-code carrying cost, Barcode 1, Barcode 2, Barcode 3]";
	    	
	    System.err.println("  Actual MasterItemNewClassificationFieldList : "+actMasterItemNewClassificationFieldList);
	    System.err.println("  Expected  MasterItemClassificationNewTabList : "+expMasterItemNewClassificationFieldList);
  	    
  	    
  	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newItemClassificationABC_CodeValueDropdown));

		boolean actCodeValue        = newItemClassificationABC_CodeValueDropdown.isDisplayed();
		boolean actCodeMargin       = newItemClassificationABC_CodeMarginDropdOwn.isDisplayed();
		boolean actCodeRevenue      = newItemClassificationABCCodeRevenueDropdown.isDisplayed();
		boolean actCodeCarryingCost = newItemClassificationABCCodeCarryingCostDropdown.isDisplayed();
		boolean actBarcode1         = newItemClassificationBarcode1.isDisplayed();
		boolean actBarcode2         = newItemClassificationBarcode2.isDisplayed();
		boolean actBarcode3         = newItemClassificationBarcode3.isDisplayed();
		boolean actGridUnit         = newItemgridFirstrowUnit.isDisplayed();
		boolean actGridBarcode      = newItemgridFirstrowBarcode.isDisplayed();

		boolean expCodeValue        = true;
		boolean expCodeMargin       = true;
		boolean expCodeRevenue      = true;
		boolean expCodeCarryingCost = true;
		boolean expBarcode1         = true;
		boolean expBarcode2         = true;
		boolean expBarcode3         = true;
		boolean expGridUnit         = true; 
		boolean expGridBarcode      = true;

	
		System.out.println("Code Value Value Actual          :  " + actCodeValue +        " Value Expected :  " + expCodeValue);
		System.out.println("Code Margin Value Actual         :  " + actCodeMargin +       " Value Expected :  " + expCodeMargin);
		System.out.println("CodeRevenue  Value Actual        :  " + actCodeRevenue +      " Value Expected :  " + expCodeRevenue);
		System.out.println("Classification Tab Value Actual  :  " + actCodeCarryingCost + " Value Expected :  "+ expCodeCarryingCost);
		System.out.println("CodeCarryingCost Value Actual    :  " + actBarcode1 +         " Value Expected :  " + expBarcode1);
		System.out.println("Barcode1 Value Actual            :  " + actBarcode2 +         " Value Expected :  " + expBarcode2);
		System.out.println("Barcode2 Value Actual            :  " + actBarcode3 +         " Value Expected :  " + expBarcode3);
		System.out.println("Barcode3 Value Actual            :  " + actGridUnit +         " Value Expected :  " + expGridUnit);
		System.out.println("GridBarcode Value Actual         :  " + actGridBarcode +      " Value Expected :  " + expGridBarcode);

		
		boolean TestResultClasification =actCodeValue == expCodeValue && actCodeMargin == expCodeMargin && actCodeRevenue == expCodeRevenue
							&& actCodeCarryingCost == expCodeCarryingCost  && actBarcode1 == expBarcode1 && actBarcode2 == expBarcode2
							&& actBarcode3 == expBarcode3 && actGridUnit == expGridUnit && actGridBarcode == expGridBarcode;
		
		
		String actClassificationTab=Boolean.toString(TestResult);
		String expClassificationTab="true";
		
		System.err.println("actClassificationTab  : "+actClassificationTab);
		System.err.println("expClassificationTab  : "+expClassificationTab);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewOtherDetailsBtn));
  		ItemNewOtherDetailsBtn.click();

  		
  		Thread.sleep(2000);
  		
        ArrayList<String> actitemNewOtherDetailsBodyFieldsList=new ArrayList<String>();
		
		int OtherDeailsBodyFielddList =itemNewOtherDetailsBodyFieldsList.size();
	 		
	 	System.err.println("OtherDeailsBodyFielddList   :  "+OtherDeailsBodyFielddList);
	 		
	 	for (int i = 1; i < OtherDeailsBodyFielddList; i++) 
	 	{
			String data=itemNewOtherDetailsBodyFieldsList.get(i).getText();
			actitemNewOtherDetailsBodyFieldsList.add(data);
		}
	 		
	 	String actMasterItemNewOtherDeailsFieldList=actitemNewOtherDetailsBodyFieldsList.toString();
	 	String expMasterItemNewOtherDeailsFieldList="[Cost of issue account, Stocks account, Sales account, WIP Account, Cost of Shortage Stock A/C, Cost of Excess Stock A/C, Cost of Sale Return A/C, Purchase Variance A/C, VAT expense account]";
	    	
	    System.err.println("  Actual MasterItemNewOtherDeailsFieldList : "+actMasterItemNewOtherDeailsFieldList);
	    System.err.println("  Expected  MasterItemOtherDeailsNewTabList : "+expMasterItemNewOtherDeailsFieldList);
  		
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostOfIssueitem));

  		boolean actCostofIssue           = newOtherDetailsCostOfIssueitem.isDisplayed();
  		boolean actStockAccount          = newOtherDetailsStocksitem.isDisplayed();
  		boolean actSalesAccount          = newOtherDetailsSalesAccount.isDisplayed();
  		boolean actWIPAccount            = newOtherDetailsWIPitem.isDisplayed();
  		boolean actShortagesStockAccount = newOtherDetailsCostofShortageStockAC.isDisplayed();
  		boolean actExcessAccount         = newOtherDetailsCostofExcessStockAC.isDisplayed();
  		boolean actReturnAccount         = OtherDetailsCostofSaleReturnAC.isDisplayed();
  		boolean actPurchaseVariance      = OtherDetailsPurchaseVarianceAC.isDisplayed();
  		boolean actGridWarehouse         = newOtherDetailsgridFirstrowWareHouse.isDisplayed();

  		boolean expCostofIssue           = true;
  		boolean expStockAccount          = true;
  		boolean expSalesAccount          = true;
  		boolean expWIPAccount            = true;
  		boolean expShortagesStockAccount = true;
  		boolean expExcessAccount         = true;
  		boolean expReturnAccount         = true;
  		boolean expPurchaseVariance      = true;
  		boolean expGridWarehouse         = true;

  		
  		System.out.println("Cost Of Issue Value Actual            :  " + actCostofIssue +          " Value Expected :  " + expCostofIssue);
  		System.out.println("StockAccount Value Actual             :  " + actStockAccount +         " Value Expected :  " + expStockAccount);
  		System.out.println("Sale sAccount Value Actual            :  " + actSalesAccount +         " Value Expected :  " + expSalesAccount);
  		System.out.println("WIPAccount Value Actual               :  " + actWIPAccount +           " Value Expected :  " + expWIPAccount);
  		System.out.println("ShortagesStockAccount Value Actual    :  " + actShortagesStockAccount+ " Value Expected :  " + expShortagesStockAccount);
  		System.out.println("ExcessAccount Value Actual            :  " + actExcessAccount +        " Value Expected :  " + expExcessAccount);
  		System.out.println("ReturnAccount Value Actual            :  " + actReturnAccount +        " Value Expected :  " + expReturnAccount);
  		System.out.println("PurchaseVariance Value Actual         :  " + actPurchaseVariance +     " Value Expected :  " + expPurchaseVariance);
  		System.out.println("GridWarehouse Value Actual            :  " + actGridWarehouse +        " Value Expected :  " + expGridWarehouse);
  		
  		
  		boolean testResultOtherDetails=actCostofIssue == expCostofIssue && actStockAccount == expStockAccount
										&& actSalesAccount == expSalesAccount && actWIPAccount == expWIPAccount
										&& actShortagesStockAccount == expShortagesStockAccount && actExcessAccount == expExcessAccount
										&& actReturnAccount == expReturnAccount && actPurchaseVariance == expPurchaseVariance
										&& actGridWarehouse == expGridWarehouse;
  		
  		
  		String actOtherDetailsResult=Boolean .toString(testResultOtherDetails);
  		String expOtherDetailsResult="true";
  		
  		System.out.println("OtherDetailsResult : "+actOtherDetailsResult+" VAalue Expected : "+expOtherDetailsResult);
  		
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewReplenishmentBtn));
		ItemNewReplenishmentBtn.click();

		
		Thread.sleep(2000);
		
		ArrayList<String> actitemNewReplenishmentTabBodyFieldsList=new ArrayList<String>();
			
		int ReplenishmentBodyFielddList =itemNewReplenishmentTabBodyFieldsList.size();
		 		
		System.err.println("ReplenishmentBodyFielddList   :  "+ReplenishmentBodyFielddList);
		 		
		for (int i = 1; i < ReplenishmentBodyFielddList; i++) 
		{
			String data=itemNewReplenishmentTabBodyFieldsList.get(i).getText();
			actitemNewReplenishmentTabBodyFieldsList.add(data);
		}
			 		
		String actMasterItemNewReplenishmentFieldList=actitemNewReplenishmentTabBodyFieldsList.toString();
		String expMasterItemNewReplenishmentFieldList="[Default Replenishment, Manufacture Policy, Packing BOM, BOM, Flushing]";
			    	
	    System.err.println("  Actual MasterItemNewReplenishmentFieldList : "+actMasterItemNewReplenishmentFieldList);
	    System.err.println("  Expected  MasterItemReplenishmentNewTabList : "+expMasterItemNewReplenishmentFieldList);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newreplenishmentDefaultReplenishment));

		boolean actDefaultReplenishment      = newreplenishmentDefaultReplenishment.isDisplayed();
		boolean actManufacturePolicy         = newreplenishmentManufacturePolicy.isDisplayed();
		boolean actPackingBOM                = newreplenishmentPackingBOM.isDisplayed();
		boolean actBOM                       = newreplenishmentBOM.isDisplayed();
		boolean actFlushing                  = newreplenishmentFlushing.isDisplayed();
		boolean actGridFirstRowWarehouse     = newreplenishmentGridFirstRowWarehouse.isDisplayed();
		boolean actGridFirstRowStartDate     = newreplenishmentGridFirstRowStartDate.isDisplayed();
		boolean actGridFirstRowEndDate       = newreplenishmentGridFirstRowEndDate.isDisplayed();
		boolean actGridFirstRowReplenishqty  = newreplenishmentGridFirstRowReplenishqty.isDisplayed();
		boolean actGridFirstRowReorderPolicy = newreplenishmentGridFirstRowReorderPolicy.isDisplayed();
		boolean actGridFirstRowSafetyStock   = newreplenishmentGridFirstRowSafetyStock.isDisplayed();
		boolean actFirstRowSafetyLeadTime    = newreplenishmentFirstRowSafetyLeadTime.isDisplayed();
		boolean actFirstRowReordercycle      = newreplenishmentFirstRowReordercycle.isDisplayed();
		boolean actFirstRowReorderPoint      = newreplenishmentFirstRowReorderPoint.isDisplayed();
		boolean actFirstRowReorderQuantity   = newreplenishmentFirstRowReorderQuantity.isDisplayed();
		boolean actFirstRowMaxInventoryLevel = newreplenishmentFirstRowMaxInventoryLevel.isDisplayed();
		boolean actFirstRowDefaultVendor     = newreplenishmentFirstRowDefaultVendor.isDisplayed();
		boolean actFirstRowMinOrderQuantity  = newreplenishmentFirstRowMinOrderQuantity.isDisplayed();
		boolean actFirstRowMaxOrderQuantity1 = newreplenishmentFirstRowMaxOrderQuantity1.isDisplayed();
		boolean actFirstRowOrderMultiple     = newreplenishmentFirstRowOrderMultiple.isDisplayed();

		boolean expDefaultReplenishment      = true;
		boolean expManufacturePolicy         = true;
		boolean expPackingBOM                = true;
		boolean expBOM                       = true;
		boolean expFlushing                  = true;
		boolean expGridFirstRowWarehouse     = true;
		boolean expGridFirstRowStartDate     = true;
		boolean expGridFirstRowEndDate       = true;
		boolean expGridFirstRowReplenishqty  = true;
		boolean expGridFirstRowReorderPolicy = true;
		boolean expGridFirstRowSafetyStock   = true;
		boolean expFirstRowSafetyLeadTime    = true;
		boolean expFirstRowReordercycle      = true;
		boolean expFirstRowReorderPoint      = true;
		boolean expFirstRowReorderQuantity   = true;
		boolean expFirstRowMaxInventoryLevel = true;
		boolean expFirstRowDefaultVendor     = true;
		boolean expFirstRowMinOrderQuantity  = true;
		boolean expFirstRowMaxOrderQuantity1 = true;
		boolean expFirstRowOrderMultiple     = true;

		System.out.println("Default Replenishment              :  " + actDefaultReplenishment +     "  Value Expected :  " + expDefaultReplenishment);
		System.out.println("Manufacture Policy             	   :  " + actManufacturePolicy +        "  Value Expected :  " + expManufacturePolicy);
		System.out.println("Packing BOM                        :  " + actPackingBOM +               "  Value Expected :  " + expPackingBOM);
		System.out.println("BOM                                :  " + actBOM +                      "  Value Expected :  " + expBOM);
		System.out.println("Flushing                           :  " + actFlushing +                 "  Value Expected :  " + expFlushing);
		System.out.println("Grid First Row Warehouse           :  " + actGridFirstRowWarehouse +    "  Value Expected :  " + expGridFirstRowWarehouse);
		System.out.println("Grid First Row Start Date          :  " + actGridFirstRowStartDate +    "  Value Expected :  " + expGridFirstRowStartDate);
		System.out.println("Grid First Row End Date            :  " + actGridFirstRowEndDate +      "  Value Expected :  " + expGridFirstRowEndDate);
		System.out.println("Grid First Row Replenishqty        :  " + actGridFirstRowReplenishqty+  "  Value Expected :  " + expGridFirstRowReplenishqty);
		System.out.println("Grid First Row Reorder Policy      :  " + actGridFirstRowReorderPolicy+ "  Value Expected :  " + expGridFirstRowReorderPolicy);
		System.out.println("Grid First Row Safety Stock        :  " + actGridFirstRowSafetyStock+   "  Value Expected :  " + expGridFirstRowSafetyStock);
		System.out.println("First Row Safety Lead Time         :  " + actFirstRowSafetyLeadTime +   "  Value Expected :  " + expFirstRowSafetyLeadTime);
		System.out.println("First Row Reorder cycle            :  " + actFirstRowReordercycle +     "  Value Expected :  " + expFirstRowReordercycle);
		System.out.println("First Row Reorder Point            :  " + actFirstRowReorderPoint +     "  Value Expected :  " + expFirstRowReorderPoint);
		System.out.println("First Row Reorder Quantity         :  " + actFirstRowReorderQuantity+   "  Value Expected :  " + expFirstRowReorderQuantity);
		System.out.println("First Row Max Inventory Level      :  " + actFirstRowMaxInventoryLevel+ "  Value Expected :  " + expFirstRowMaxInventoryLevel);
		System.out.println("First Row Default Vendor           :  " + actFirstRowDefaultVendor +    "  Value Expected :  " + expFirstRowDefaultVendor);
		System.out.println("First Row Min Order Quantity       :  " + actFirstRowMinOrderQuantity+  "  Value Expected :  " + expFirstRowMinOrderQuantity);
		System.out.println("First Row Max Order Quantity1      :  " + actFirstRowMaxOrderQuantity1+ "  Value Expected :  " + expFirstRowMaxOrderQuantity1);
		System.out.println("First Row Order Multiple           :  " + actFirstRowOrderMultiple +    "  Value Expected :  " + expFirstRowOrderMultiple);
		
		
		boolean testResultReplenishment=actDefaultReplenishment == actDefaultReplenishment && actManufacturePolicy == expManufacturePolicy
							&& actPackingBOM == expPackingBOM && actBOM == expBOM && actFlushing == expFlushing
							&& actGridFirstRowWarehouse == expGridFirstRowWarehouse
							&& actGridFirstRowStartDate == expGridFirstRowStartDate
							&& actGridFirstRowEndDate == expGridFirstRowEndDate
							&& actGridFirstRowReplenishqty == expGridFirstRowReplenishqty
							&& actGridFirstRowReorderPolicy == expGridFirstRowReorderPolicy
							&& actGridFirstRowSafetyStock == expGridFirstRowSafetyStock
							&& actFirstRowSafetyLeadTime == expFirstRowSafetyLeadTime
							&& actFirstRowReordercycle == expFirstRowReordercycle
							&& actFirstRowReorderPoint == expFirstRowReorderPoint
							&& actFirstRowReorderQuantity == expFirstRowReorderQuantity
							&& actFirstRowMaxInventoryLevel == expFirstRowMaxInventoryLevel
							&& actFirstRowDefaultVendor == expFirstRowDefaultVendor
							&& actFirstRowMinOrderQuantity == expFirstRowMinOrderQuantity
							&& actFirstRowMaxOrderQuantity1 == expFirstRowMaxOrderQuantity1
							&& actFirstRowOrderMultiple == expFirstRowOrderMultiple;
		
		String actReplenishmentResult=Boolean.toString(testResultReplenishment);
		String expReplenishmentResult="true";
		
		System.out.println("ReplenishmentResult : "+actReplenishmentResult+" Value Expected : "+expReplenishmentResult);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewOutletBtn));
		ItemNewOutletBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOutletSearchOutlet));

		boolean actOutletSearchIsDisplayed                  = newOutletSearchOutlet.isDisplayed();
		
		String actOutletSearchGetText   = newOutletSearchOutlet.getAttribute("placeholder");
		String expOutletSearchGetText   = "Search Outlet";
		
		System.err.println("OutletSearchGetText : "+actOutletSearchGetText+" Vlaue Expected : "+expOutletSearchGetText);
		
		boolean actOutletAdvanceSearch           = newOutletAdvanceSearch.isDisplayed();
		boolean actOutletResizeBtn               = newOutletResizeBtn.isDisplayed();
		boolean actOutletRetainSelectionCheckbox = newOutletRetainSelctionCheckBox.isDisplayed();

		boolean expOutletSearch                  = true;
		boolean expOutletAdvanceSearch           = true;
		boolean expOutletResizeBtn               = true;
		boolean expOutletRetainSelectionCheckbox = true;		

		System.out.println("Outlet Search                 :  " + actOutletSearchIsDisplayed +      "  Value Expected :  " + expOutletSearch);
		System.out.println("Advance Search             	  :  " + actOutletAdvanceSearch +          "  Value Expected :  " + expOutletAdvanceSearch);
		System.out.println("Resize Btn                    :  " + actOutletResizeBtn +              "  Value Expected :  " + expOutletResizeBtn);
		System.out.println("Retain Selection              :  " + actOutletRetainSelectionCheckbox+ "  Value Expected :  " + expOutletRetainSelectionCheckbox);
				
		                               
		
		boolean TestResultOutlet=actOutletSearchIsDisplayed == expOutletSearch && actOutletAdvanceSearch == expOutletAdvanceSearch
				           && actOutletResizeBtn == actOutletResizeBtn && actOutletRetainSelectionCheckbox == expOutletRetainSelectionCheckbox;
		
		String actOutletResult=Boolean.toString(TestResultOutlet);
		String expOutletResult="true";
		
		System.out.println("OutletResult : "+actOutletResult+" Value Expected : "+expOutletResult);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewnewGeneralBtn));
		ItemNewnewGeneralBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
		newGeneralName.sendKeys("Trail Item");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
		newGeneralCode.sendKeys("Trail Item");

		getAction().moveToElement(newGeneralCode).sendKeys(Keys.TAB).perform();
		newGeneralItemTypeDropDown.sendKeys("Raw material");
		newGeneralItemTypeDropDown.sendKeys(Keys.TAB);
		
		getAction().moveToElement(newGeneralCode).sendKeys(Keys.TAB).perform();
		newGeneralItemTypeDropDown.sendKeys("Raw material");
		newGeneralItemTypeDropDown.sendKeys(Keys.TAB);
		
		getAction().moveToElement(newGeneralValuationMethodDropDown).sendKeys(Keys.TAB).perform();
		newGeneralValuationMethodDropDown.sendKeys("Standard");
		newGeneralValuationMethodDropDown.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
		ItemNewUnitsBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultBaseUnitDropdown));
		itemUnitsDefaultBaseUnitDropdown.sendKeys("Pcs");
		Thread.sleep(2000);
		itemUnitsDefaultBaseUnitDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultSalesUnitDropdown));
		itemUnitsDefaultSalesUnitDropdown.sendKeys("Pcs");
		Thread.sleep(2000);
		itemUnitsDefaultSalesUnitDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitDropDown));
		itemUnitsDefaultPurchaseUnitDropDown.sendKeys("Dozs");
		Thread.sleep(2000);
		itemUnitsDefaultPurchaseUnitDropDown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MastersSaveBtn));
		MastersSaveBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonPickOutPutBtn));
		userribbonPickOutPutBtn.click();

		String actLogoutMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expLogoutMessage = "Are you sure to logout?";
		
		System.out.println("LogoutMessage : "+actLogoutMessage+" Value Expected : "+expLogoutMessage);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(2000);
		
		String actDayEndMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expDayEndMessage = "'Day End' is not done, do you want to do 'Day End'?";
		
		System.out.println("DayEndMessage : "+actDayEndMessage+" Value Expected : "+expDayEndMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmCancelBtn));
		posConfirmCancelBtn.click();
		
		Thread.sleep(3000);
		 
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
      	homeMenu.click();
      	Thread.sleep(2000);
      	
      	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterMenu));
      	homeMasterMenu.click();
      	
      	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItemMenu));
      	homeMasterItemMenu.click();
      	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItem_ItemMenu));
    	homeMasterItem_ItemMenu.click();
    	
    	Thread.sleep(2000);
		
		int itemListCount = itemList.size();
	 		
		for(int i=0;i<itemListCount;i++)
		{
			String data= itemList.get(i).getText();
	 			
			if(data.equalsIgnoreCase("TRAIL ITEM"))
			{
				itemList.get(i).click();
				itemListChkBox.get(i).click();
	 				
				break;
			}
		}
	 		
	 				
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
 		itemPropertiesBtn.click();

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStockbyBatchCheckbox));
		dontMaintainStockbyBatchCheckbox.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontinputBinChekbox));
		ItemPropertiesDontinputBinChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontMaintainStocksByRMAChekbox));
		ItemPropertiesDontMaintainStocksByRMAChekbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qualitiesRadioBtn));
		qualitiesRadioBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();
		
		boolean actSummaryErrorMessageCS  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessageCS  = true;
		
		
		String actSummaryValidationMessageCS= Boolean.toString(actSummaryErrorMessageCS);   
		String expSummaryValidationMessageCS="true";
		
		System.out.println("Saving COGS Account                  : " + actSummaryErrorMessageCS                + " Value Expected : " + expSummaryErrorMessageCS);
		
		System.out.println("actSummaryValidationMessageCS   : "+actSummaryValidationMessageCS);
		System.out.println("expSummaryValidationMessageCS   : "+expSummaryValidationMessageCS);	
		
		
		if(actMasterItemNewTabList.equalsIgnoreCase(expMasterItemNewTabList) && actMasterItemNewFieldList.equalsIgnoreCase(expMasterItemNewFieldList)
				&& actMasterItemNewUnitFieldList.equalsIgnoreCase(expMasterItemNewUnitFieldList) && actNewUnitBodyFileds.equalsIgnoreCase(expNewUnitBodyFileds)
				&& actMasterItemNewSettingsFieldList.equalsIgnoreCase(expMasterItemNewSettingsFieldList) && actSettingBodyFileds.equalsIgnoreCase(expSettingBodyFileds)
				&& actMasterItemNewClassificationFieldList.equalsIgnoreCase(expMasterItemNewClassificationFieldList) && actClassificationTab.equalsIgnoreCase(expClassificationTab)
				&& actMasterItemNewOtherDeailsFieldList.equalsIgnoreCase(expMasterItemNewOtherDeailsFieldList) && actOtherDetailsResult.equalsIgnoreCase(expOtherDetailsResult)		
				&& actMasterItemNewReplenishmentFieldList.equalsIgnoreCase(expMasterItemNewReplenishmentFieldList)
				&& actReplenishmentResult.equalsIgnoreCase(expReplenishmentResult)
				&& actOutletSearchGetText.equalsIgnoreCase(expOutletSearchGetText) && actOutletResult.equalsIgnoreCase(expOutletResult))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		} 
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  @FindBy(xpath="//*[@id='LandingGridBody']/tr/td[12]")
  private static List<WebElement> itemList;
	
  @FindBy(xpath="//*[@id='LandingGridBody']/tr/td[8]/div/label/input")
  private static List<WebElement> itemListChkBox;
  
  @FindBy(xpath="//*[@id='1000']/span")
  private static WebElement  homeMasterMenu;

  @FindBy(xpath="//*[@id='221']/span")
  private static WebElement  homeMasterItemMenu;

  @FindBy(xpath="//*[@id='1105']/span")
  private static WebElement  homeMasterItem_ItemMenu;
  
  @FindBy(xpath="//*[@id='btnProperties']")
  private static WebElement itemPropertiesBtn;

      @FindBy(xpath="//*[@id='viewheading']/div/span[2]")
      private static WebElement ItemPropertiesLabel;

	     @FindBy(xpath=" //*[@id='btnPropOk']/i")
	     private static WebElement ItemPropertiesOkBtn;
	     
	     @FindBy(xpath="//*[@id='divMasterProperty']/ul/li/span[2]")
	     private static WebElement ItemPropertiesCloseBtn;
	     
	     @FindBy(xpath="//*[@id='chkDontMaintainStockbyBatch']")
	     private static WebElement PropertiesDontMaintainStockbyBatchChekbox;
	     
	     @FindBy(xpath="//*[@id='chkDontinputBin']")
	     private static WebElement ItemPropertiesDontinputBinChekbox;
	     
	     @FindBy(xpath="//*[@id='chkDontMaintainStocksByRMA']")
	     private static WebElement ItemPropertiesDontMaintainStocksByRMAChekbox;
	     
	     @FindBy(xpath="//*[@id='chkInputBreakupofQuantitiesForEachCategories']")
	     private static WebElement ItemPropertiesInputBreakupofQuantitiesForEachCategoriesChekbox;
	     
	     @FindBy(xpath="//*[@id='chkDonotPrintBill']")
	     private static WebElement ItemPropertiesDonotPrintBillIfRateIsZeroChekbox;
	     
	     @FindBy(xpath="//*[@id='chkNotAllowedforHomeDelivery']")
	     private static WebElement ItemPropertiesNotAllowedforHomeDeliveryChekbox;
	     
	     @FindBy(xpath="//*[@id='chkStarProduct']")
	     private static WebElement ItemPropertiesStarProductChekbox;
	     
	     @FindBy(xpath="//*[@id='chkDonotUpdateStock']")
	     private static WebElement ItemPropertiesDonotUpdateStockChekbox;
	     
	     @FindBy(xpath="//*[@id='chkIgnoreExpiryforthisItem']")
	     private static WebElement ItemPropertiesIgnoreExpiryforthisItemChekbox;
	     
	     @FindBy(xpath="//*[@id='chkIgnoreFractionInQty']")
	     private static WebElement ItemPropertiesIgnoreFractionInQtyChekbox;
	     
	     @FindBy(xpath="//*[@id='rbnNone']")
	     private static WebElement ItemPropertiesNoneRadioBtn;
	     
	     @FindBy(xpath="//*[@id='rbnQualities']")
	     private static WebElement ItemPropertiesQualitesRadioBtn;
	     
	     @FindBy(xpath="//*[@id='rbnReserveBy']")
	     private static WebElement ItemPropertiesReserverByRadioBtn;
	     
	     @FindBy(xpath="//*[@id='chkBatch']")
	     private static WebElement ItemPropertiesBatchChekbox;
	     
	     @FindBy(xpath="//input[@id='chkBin']")
	     private static WebElement ItemPropertiesBinChekbox;
	     
	     @FindBy(xpath="//input[@id='chkRMA']")
	     private static WebElement ItemPropertiesRMAChekbox;
	     
	     @FindBy(xpath="//*[@id='ddlInventoryAllocation']")
	     private static WebElement ItemPropertiesInventoryAllocationDropdown;
	     
	     @FindBy(xpath="//*[@id='ddlStatus']")
	     private static WebElement ItemPropertiesActiveAndInactiveDropdown;
	
	     @FindBy(xpath="//*[@id='chkDoNotRestrictSelectionEvenIfRightsNotAllotted'] ")
	     private static WebElement ItemPropertiesDoNotRestrictSelectionEvenIfRightsNotAllottedChekbox;
	     
	     @FindBy(xpath="//*[@id='chkAllowOtherCompaniesToViewRecords']")
	     private static WebElement ItemPropertiesAllowOtherCompaniesToViewRecordsChekbox;

@FindBy(xpath="//*[@id='btnDelete']")
private static WebElement itemDeleteBtn;

@FindBy(xpath="//*[@id='btnClose']")
private static WebElement itemCloseBtn;

@FindBy(xpath="//*[@id='toggle_ribbon']")
private static WebElement itemToggleRibbonBtn;

	
	@FindBy(xpath="//span[contains(text(),'Item Properties')]")
	public static WebElement itemPropertiesLabel;

	
	@FindBy(xpath="//i[@class='icon-font7 icon-ok']")
	public static WebElement properties_okBtn;
	
	@FindBy(xpath="//i[@class='icon-font7 icon-close']")
	public static WebElement  properties_cancelBtn;

	
	@FindBy(xpath="//input[@id='chkDontMaintainStockbyBatch']")
	public static WebElement dontMaintainStockbyBatchCheckbox ;
	
	@FindBy(xpath="//input[@id='chkDontinputBin']")
	public static WebElement  dontinputBinCheckbox;
	
	@FindBy(xpath="//input[@id='chkDontMaintainStocksByRMA']")
	public static WebElement dontMaintainStocksByRMACheckbox ;
	
	@FindBy(xpath="//input[@id='chkInputBreakupofQuantitiesForEachCategories']")
	public static WebElement  inputBreakupofQuantitiesForEachCategoriesCheckbox;
	
	@FindBy(xpath="//input[@id='chkDonotPrintBill']")
	public static WebElement   doNotPrintInBillIfRateIszeroCheckbox;
	
	@FindBy(xpath="//input[@id='chkNotAllowedforHomeDelivery']")
	public static WebElement notAllowedforHomeDeliveryCheckbox ;
	
	@FindBy(xpath="//input[@id='chkStarProduct']")
	public static WebElement starProductCheckbox ;
	
	@FindBy(xpath="//input[@id='chkDonotUpdateStock']")
	public static WebElement  donotUpdateStockCheckbox;
	
	@FindBy(xpath="//input[@id='chkIgnoreExpiryforthisItem']")
	public static WebElement  ignoreExpiryforthisItemCheckBox;
	
	@FindBy(xpath="//input[@id='chkIgnoreFractionInQty']")
	public static WebElement  ignoreFractionInQtyCheckbox;
	
	@FindBy(xpath="//input[@id='rbnDefault']")
	public static WebElement  defaultRadioBtn;

	@FindBy(xpath="//label[@id='lblNone']")
	public static WebElement reservationNone;
	
	@FindBy(xpath="//input[@id='rbnQualities']")
	public static WebElement  qualitiesRadioBtn;
	
	@FindBy(xpath="//input[@id='rbnReserveBy']")
	public static WebElement  reserveByRadioBtn;
	
	@FindBy(xpath="//input[@id='chkBatch']")
	public static WebElement batchCheckbox ;
	
	@FindBy(xpath="//input[@id='chkBin']")
	public static WebElement binCheckbox ;
	
	@FindBy(xpath="//input[@id='chkRMA']")
	public static WebElement  RMACheckbox;
	
	
	
	@FindBy(xpath="//select[@id='ddlInventoryAllocation']")
	public static WebElement inventoryAllocationDropdown ;
	
    @FindBy(xpath="//select[@id='ddlStatus']")
	private static WebElement miscelliniousDropdown;   ///Active or Inactive
	
	@FindBy(xpath="//input[@id='chkDoNotRestrictSelectionEvenIfRightsNotAllotted']")
	private static WebElement  DonotrestricttheselectionevenifrightsarenotallottedChkbox;
	
	@FindBy(xpath="//input[@id='chkAllowOtherCompaniesToViewRecords']")
	private static WebElement  AllowOtherCompaniesToViewRecordChkbox;
  
  
  public static boolean checkErrorMessageIsDisplayingOrNotDisplaying() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
  {     
	   
	 System.out.println("************************   checkErrorMessageIsDisplayingOrNotDisplaying Method Executes.............    ******************************");
	   
	 boolean actValidationMessageIsEmptyDisplay      = validationConfirmationMessage.getText().isEmpty();
	 boolean expValidationMessageIsEmptyDisplay      = true;   
	
	 System.out.println("Error Message Is Displaying Or Not Displaying Value Actual : " + actValidationMessageIsEmptyDisplay + " Value Expected : " + expValidationMessageIsEmptyDisplay);
	 
	if (actValidationMessageIsEmptyDisplay == expValidationMessageIsEmptyDisplay)
	{
		//System.out.println("No Error Message Is Displaying On Opening Page,Click On Add, Edit, Delete Etc...... In Method : " + validationConfirmationMessage.getText());
		return true;
	} 
	else 
	{
		//System.err.println("Error Message Is Displaying On Opening Page, Click, Add, Edit, Delete Etc..... In Method : " + validationConfirmationMessage.getText());
		errorMessageCloseBtn.click();
		return false;
	}
 }
  
  @FindBy(xpath="//div[@id='divMasterPreview']//button[2]//i[1]")
  public static WebElement MastersSaveBtn;

  @FindBy(xpath="//button[@class='btn-link theme_icon-color closeMasterPartial btnGenerateMasterclose clsMasterPopupSaveClose']//i[@class='icon-close icon-font6']")
  public static WebElement MasterCloseBtn;
  
  
  public boolean checkSavedItemInSelectItemByNameInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		/*Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();*/
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="UserAllOptions";
				      
		String pawslt="12345";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
		
		lpOutLetTxt.sendKeys("outlet1");
		Thread.sleep(2000);
		lpOutLetTxt.sendKeys(Keys.TAB);
		
		lpCounterTxt.sendKeys("Counter Update");
		Thread.sleep(2000);
		lpCounterTxt.sendKeys(Keys.TAB);
				  
		lp.clickOnSignInBtn();
		
		Thread.sleep(6000);
		
		getDriver().navigate().refresh();
		
		Thread.sleep(6000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
		pointOfSaleMainScreenMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMS));
		pointOfSaleMS.click();
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Item"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Item by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchItemBtn));
		searchItemBtn.click();
		
		Thread.sleep(2000);
		
		int itemBodyListCount = itemBodyList.size();
		
		ArrayList<String> itemBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<itemBodyListCount;i++)
		{
			String data = itemBodyList.get(i).getText();

			itemBodyListArray.add(data);
			
			if (i!=itemBodyListCount-1) 
			{
				int temp=i+1;
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();",itemBodyList.get(temp));
			}
		}	
		
		String actitemBodyList = itemBodyListArray.toString();
		String expitemBodyList = "[RMA FSITEM, RMA STITEM, 0.00, SI, STOCK ITEM, 0.00, BWI, BATCH WA ITEM, 0.00, BATCH IGNORE EXP LIFO ITEM, BATCH IGNORE EXP LIFO ITEM, 0.00, BATCH FIFO ITEM, BATCH FIFO ITEM, 0.00, BATCH BR ITEM, BATCH BR ITEM, 0.00, BRMI, BIN RAW MATERIAL ITEM, 0.00, BFGI, BIN FINISHED GOODS ITEM, 0.00, BBFGI, BATCH BIN FINISHED GOODS ITEM, 0.00, BBWNOSUI, BATCH BIN WITH NO STOCK UPDATE ITEM, 0.00, BBWNRI, BATCH BIN WITH NO RESERVATION ITEM, 0.00, RMA FITEM, RMA FITEM, 0.00, RMA RITEM, RMA RITEM, 0.00, RMA BATCH ITEM, RMA BATCH ITEM, 0.00, WA COGS ITEM, WA COGS ITEM, 0.00, FIFO COGS ITEM, FIFO COGS ITEM, 0.00, BR COGS ITEM, BR COGS ITEM, 0.00, STD RATE COGS ITEM, STD RATE COGS ITEM, 0.00, Trail Item, Trail Item, 0.00]";
		
		System.out.println("actitemBodyList : "+actitemBodyList);
		System.out.println("expitemBodyList : "+expitemBodyList);
		
		for(int i=0;i<itemBodyListCount;i++)
		{
			String data = itemBodyList.get(i).getText();

			if (data.equalsIgnoreCase("Trail Item")) 
			{
				itemBodyList.get(i).click();
				
				break;
			}
		}	
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceTxt));
		changePriceTxt.click();
		changePriceTxt.sendKeys("10");
		changePriceTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceOkBtn));
		changePriceOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
		
		
		if(actitemBodyList.equalsIgnoreCase(expitemBodyList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  
  
  
  public boolean checkViewItemInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("View Item"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
		newGeneralName.click();
		
		String actnewGeneralName = newGeneralName.getAttribute("value");
		String expnewGeneralName = "Trail Item";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
		newGeneralCode.click();
		
		String actnewGeneralCode = newGeneralCode.getAttribute("value");
		String expnewGeneralCode = "Trail Item";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MasterCloseBtn));
		MasterCloseBtn.click();
		
		System.out.println("newGeneralName : "+actnewGeneralName+" Value expected : "+expnewGeneralName);
		System.out.println("newGeneralCode : "+actnewGeneralCode+" Value expected : "+expnewGeneralCode);
		
		
		if(actnewGeneralName.equalsIgnoreCase(expnewGeneralName) && actnewGeneralCode.equalsIgnoreCase(expnewGeneralCode))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  public boolean checkEditItemInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Edit Item"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
		newGeneralName.click();
		newGeneralName.sendKeys(Keys.END);
		newGeneralName.sendKeys(Keys.SHIFT,Keys.HOME);
		newGeneralName.sendKeys("Trail Item Update");
		newGeneralName.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
		newGeneralCode.sendKeys(Keys.END);
		newGeneralCode.sendKeys(Keys.SHIFT,Keys.HOME);
		newGeneralCode.sendKeys("Trail Item Update");
		newGeneralCode.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
		newGeneralName.click();
		
		String actnewGeneralName = newGeneralName.getAttribute("value");
		String expnewGeneralName = "Trail Item Update";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
		newGeneralCode.click();
		
		String actnewGeneralCode = newGeneralCode.getAttribute("value");
		String expnewGeneralCode = "Trail Item Update";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MastersSaveBtn));
		MastersSaveBtn.click();
		
		System.out.println("newGeneralName : "+actnewGeneralName+" Value expected : "+expnewGeneralName);
		System.out.println("newGeneralCode : "+actnewGeneralCode+" Value expected : "+expnewGeneralCode);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonPickOutPutBtn));
		userribbonPickOutPutBtn.click();

		String actLogoutMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expLogoutMessage = "Are you sure to logout?";
		
		System.out.println("LogoutMessage : "+actLogoutMessage+" Value Expected : "+expLogoutMessage);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(2000);
		
		String actDayEndMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expDayEndMessage = "'Day End' is not done, do you want to do 'Day End'?";
		
		System.out.println("DayEndMessage : "+actDayEndMessage+" Value Expected : "+expDayEndMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmCancelBtn));
		posConfirmCancelBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(3000);
	
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="UserAllOptions";
				      
		String pawslt="12345";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
		
		lpOutLetTxt.sendKeys("outlet1");
		Thread.sleep(2000);
		lpOutLetTxt.sendKeys(Keys.TAB);
		
		lpCounterTxt.sendKeys("Counter Update");
		Thread.sleep(2000);
		lpCounterTxt.sendKeys(Keys.TAB);
				  
		lp.clickOnSignInBtn();
		
		Thread.sleep(3000);
		
		
		if(actnewGeneralName.equalsIgnoreCase(expnewGeneralName) && actnewGeneralCode.equalsIgnoreCase(expnewGeneralCode))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  
  public boolean checkUpdatedItemInSelectItemByAliasInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
		pointOfSaleMainScreenMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMS));
		pointOfSaleMS.click();
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Item"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Item by Alias"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchItemBtn));
		searchItemBtn.click();
		
		Thread.sleep(2000);
		
		int itemBodyListCount = itemBodyList.size();
		
		ArrayList<String> itemBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<itemBodyListCount;i++)
		{
			String data = itemBodyList.get(i).getText();

			itemBodyListArray.add(data);
			
			if (i!=itemBodyListCount-1) 
			{
				int temp=i+1;
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();",itemBodyList.get(temp));
			}
		}	
		
		String actitemBodyList = itemBodyListArray.toString();
		String expitemBodyList = "[RMA FSITEM, RMA STITEM, 0.00, SI, STOCK ITEM, 0.00, BWI, BATCH WA ITEM, 0.00, BATCH IGNORE EXP LIFO ITEM, BATCH IGNORE EXP LIFO ITEM, 0.00, BATCH FIFO ITEM, BATCH FIFO ITEM, 0.00, BATCH BR ITEM, BATCH BR ITEM, 0.00, BRMI, BIN RAW MATERIAL ITEM, 0.00, BFGI, BIN FINISHED GOODS ITEM, 0.00, BBFGI, BATCH BIN FINISHED GOODS ITEM, 0.00, BBWNOSUI, BATCH BIN WITH NO STOCK UPDATE ITEM, 0.00, BBWNRI, BATCH BIN WITH NO RESERVATION ITEM, 0.00, RMA FITEM, RMA FITEM, 0.00, RMA RITEM, RMA RITEM, 0.00, RMA BATCH ITEM, RMA BATCH ITEM, 0.00, WA COGS ITEM, WA COGS ITEM, 0.00, FIFO COGS ITEM, FIFO COGS ITEM, 0.00, BR COGS ITEM, BR COGS ITEM, 0.00, STD RATE COGS ITEM, STD RATE COGS ITEM, 0.00, Trail Item Update, Trail Item Update, 0.00]";
		
		System.out.println("actitemBodyList : "+actitemBodyList);
		System.out.println("expitemBodyList : "+expitemBodyList);
		
		for(int i=0;i<itemBodyListCount;i++)
		{
			String data = itemBodyList.get(i).getText();

			if (data.equalsIgnoreCase("Trail Item Update")) 
			{
				itemBodyList.get(i).click();
				
				break;
			}
		}	
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceTxt));
		changePriceTxt.click();
		changePriceTxt.sendKeys("10");
		changePriceTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceOkBtn));
		changePriceOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
		
		
		if(actitemBodyList.equalsIgnoreCase(expitemBodyList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  @FindBy(xpath="//input[@id='optOutletControl']")
  private static WebElement commentOutLetCombox;
  
  @FindBy(xpath="//input[@id='optProductControl']")
  private static WebElement commentItemComboBox;
  
  @FindBy(xpath="//textarea[@id='txtAreaComments']")
  private static WebElement commentText;
  
  @FindBy(xpath="//input[@id='dpItemComment']")
  private static WebElement validTillDate;
  
  @FindBy(xpath="//td[@id='dpItemComment_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
  private static WebElement validTillDateCalendarBtn;
  
  @FindBy(xpath="//input[@id='optTimepickControl']")
  private static WebElement validTillTimeTxt;
  
  @FindBy(xpath="//input[@id='chkActive']")
  private static WebElement commentActiveChkBox;
  
  @FindBy(xpath="//span[@class='icon-search icon-font6']")
  private static WebElement commectSearchBtn;
  
  @FindBy(xpath="//span[@class='icon-save icon-font6']")
  private static WebElement commentSaveBtn;
  
  
  public boolean checkAddItemCommentInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		
		Thread.sleep(3000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Add Item Comment – For Promotional Messages"))
			{
				rightPanelList.get(i).click();
				
				break;
			}
		}	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(commentItemComboBox));
		boolean actcommentItemComboBox       = commentItemComboBox.isDisplayed();
		boolean actcommentText               = commentText.isDisplayed();
		boolean actvalidTillDate             = validTillDate.isDisplayed();
		boolean actvalidTillDateCalendarBtn  = validTillDateCalendarBtn.isDisplayed();
		boolean actvalidTillTimeTxt          = validTillTimeTxt.isDisplayed();
		boolean actcommentActiveChkBox       = commentActiveChkBox.isDisplayed();
		boolean actcommectSearchBtn          = commectSearchBtn.isDisplayed();
		boolean actcommentSaveBtn            = commentSaveBtn.isDisplayed();
		boolean actbackBtn                   = backBtn.isDisplayed();
		boolean actdeClearBtn                = deClearBtn.isDisplayed();
		
		boolean expcommentItemComboBox       = true;
		boolean expcommentText               = true;
		boolean expvalidTillDate             = true;
		boolean expvalidTillDateCalendarBtn  = true;
		boolean expvalidTillTimeTxt          = true;
		boolean expcommentActiveChkBox       = true;
		boolean expcommectSearchBtn          = true;
		boolean expcommentSaveBtn            = true;
		boolean expbackBtn                   = true;
		boolean expdeClearBtn                = true;
		
		System.out.println("commentItemComboBox      : "+actcommentItemComboBox+" Value Expected : "+expcommentItemComboBox);
		System.out.println("commentText              : "+actcommentText+" Value Expected : "+expcommentText);
		System.out.println("validTillDate            : "+actvalidTillDate+" Value Expected : "+expvalidTillDate);
		System.out.println("validTillDateCalendarBtn : "+actvalidTillDateCalendarBtn+" Value Expected : "+expvalidTillDateCalendarBtn);
		System.out.println("validTillTimeTxt         : "+actvalidTillTimeTxt+" Value Expected : "+expvalidTillTimeTxt);
		System.out.println("commentActiveChkBox      : "+actcommentActiveChkBox+" Value Expected : "+expcommentActiveChkBox);
		System.out.println("commectSearchBtn         : "+actcommectSearchBtn+" Value Expected : "+expcommectSearchBtn);
		System.out.println("commentSaveBtn           : "+actcommentSaveBtn+" Value Expected : "+expcommentSaveBtn);
		System.out.println("backBtn                  : "+actbackBtn+" Value Expected : "+expbackBtn);
		System.out.println("deClearBtn               : "+actdeClearBtn+" Value Expected : "+expdeClearBtn);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(commentText));
		commentText.click();
		commentText.sendKeys("Testing");
		commentText.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(commentActiveChkBox));
		commentActiveChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(commentSaveBtn));
		commentSaveBtn.click();
		
		String expMessage = "Item Saved Successfully";
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
		
		Thread.sleep(2000);
		
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Add Item Comment – For Promotional Messages"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		Thread.sleep(2000);
		
		String actcommentItemComboBoxText = commentItemComboBox.getAttribute("value");
		String expcommentItemComboBoxText = "Trail Item Update";
		
		String actcommentText1 = commentText.getAttribute("value");
		String expcommentText1 = "Testing";
		
		boolean actcommentActiveChkBox1 = commentActiveChkBox.isSelected();
		boolean expcommentActiveChkBox1 = true;
		
		System.out.println("commentItemComboBoxText : "+actcommentItemComboBoxText+" Value Expected : "+expcommentItemComboBoxText);
		System.out.println("commentText1            : "+actcommentText1+" Value Expected : "+expcommentText1);
		System.out.println("commentActiveChkBox1    : "+actcommentActiveChkBox1+" Value Expected : "+expcommentActiveChkBox1);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
		
		if(actcommentItemComboBox==expcommentItemComboBox && actcommentText==expcommentText
				&& actvalidTillDate==expvalidTillDate && actvalidTillDateCalendarBtn==expvalidTillDateCalendarBtn && actvalidTillTimeTxt==expvalidTillTimeTxt
				&& actcommentActiveChkBox==expcommentActiveChkBox && actcommectSearchBtn==expcommectSearchBtn && actcommentSaveBtn==expcommentSaveBtn
				&& actbackBtn==expbackBtn && actdeClearBtn==expdeClearBtn
				
				&& actMessage.equalsIgnoreCase(expMessage)
				
				&& actcommentItemComboBoxText.equalsIgnoreCase(expcommentItemComboBoxText) && actcommentText1.equalsIgnoreCase(expcommentText1)
				&& actcommentActiveChkBox1==expcommentActiveChkBox1)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  
  public boolean checkSchemeListRelatedToTheSelectedItemInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Schemes List related to the selected Item"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toastMessage));
		
		String expMessage = "No Schemes Found";
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  @FindBy(xpath="//input[@id='productQuery']")
	private static WebElement iq_ItemTxt;
	
	@FindBy(xpath="//button[contains(text(),'GetStock')]")
	private static WebElement iq_getStockBtn;
	
	@FindBy(xpath="//button[contains(text(),'Customize')]")
	private static WebElement iq_customizeBtn;
	
	@FindBy(xpath="//span[@id='id_productquery_button_clear']")
	private static WebElement iq_clearBtn;
	
	@FindBy(xpath="//span[@id='id_productquery_button_close']")
	private static WebElement iq_closeBtn;
	
	@FindBy(xpath="//label[contains(text(),'Opening Stock Quantity:')]")
	private static WebElement iq_OpeningStockQtyLable;
	
	@FindBy(xpath="//label[contains(text(),'Pending purchases orders :')]")
	private static WebElement iq_PendingPurchaseOrdersLable;
	
	@FindBy(xpath="//label[contains(text(),'Current Stock :')]")
	private static WebElement iq_CurrentStockLable;
	
	@FindBy(xpath="//label[contains(text(),'Pending Sales Orders :')]")
	private static WebElement iq_PendingSalesOrdersLable;
	
	@FindBy(xpath="//label[contains(text(),'Avg. Stock Rate :')]")
	private static WebElement iq_AvgStockRateLable;
	
	@FindBy(xpath="//label[contains(text(),'Qty to be Ordered :')]")
	private static WebElement iq_QtytobeOrderedLable;
	
	@FindBy(xpath="//label[contains(text(),'Base Unit :')]")
	private static WebElement iq_BaseUnitLable;
	
	@FindBy(xpath="//label[contains(text(),'Value :')]")
	private static WebElement iq_ValueLable;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Date')]")
	private static WebElement iq_PurDate;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Voucher No')]")
	private static WebElement iq_PurVoucherNo;
	
	@FindBy(xpath="//th[contains(text(),'Vendor')]")
	private static WebElement iq_PurVendor;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity')]")
	private static WebElement iq_PurQty;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Unit')]")
	private static WebElement iq_PurUnit;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Rate')]")
	private static WebElement iq_PurRate;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Currency')]")
	private static WebElement iq_PurCurrency;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity In Base')]")
	private static WebElement iq_PurQtyInBase;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Date')]")
	private static WebElement iq_SaleDate;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Voucher No')]")
	private static WebElement iq_SaleVoucherNo;
	
	@FindBy(xpath="//th[contains(text(),'Customer')]")
	private static WebElement iq_SaleCustomer;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity')]")
	private static WebElement iq_SaleQty;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Unit')]")
	private static WebElement iq_SaleUnit;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Rate')]")
	private static WebElement iq_SaleRate;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Currency')]")
	private static WebElement iq_SaleCurrency;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity In Base')]")
	private static WebElement iq_SaleQtyInBase;
  

	@FindBy(xpath="//span[@id='openingStock']")
	private static WebElement iq_OpeningStocks;
	
	@FindBy(xpath="//span[@id='currentStock']")
	private static WebElement iq_CurrentStock;
	
	@FindBy(xpath="//span[@id='avgStockRate']")
	private static WebElement iq_AvgStockRate;
	
	@FindBy(xpath="//span[@id='value']")
	private static WebElement iq_Value;
	
	@FindBy(xpath="//span[@id='iBaseUnit']")
	private static WebElement iq_BaseUnit;
	
	@FindBy(xpath="//span[@id='purchaseOrdered']")
	private static WebElement iq_PendingPurchaseOrders;
	
	@FindBy(xpath="//span[@id='salesOrdered']")
	private static WebElement iq_PendingSalesOrders;
	
	@FindBy(xpath="//span[@id='quantityToBeOrdered']")
	private static WebElement iq_QtyToBeOrdered;
	
	
	// Purchase Table
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[1]")
	private static WebElement pur1strow_1stColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[2]")
	private static WebElement pur1strow_2ndColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[3]")
	private static WebElement pur1strow_3rdColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[4]")
	private static WebElement pur1strow_4thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[5]")
	private static WebElement pur1strow_5thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[6]")
	private static WebElement pur1strow_6thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[7]")
	private static WebElement pur1strow_7thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[8]")
	private static WebElement pur1strow_8thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[9]")
	private static WebElement pur1strow_9thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[10]")
	private static WebElement pur1strow_10thColumn;
	
	
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[1]")
	private static WebElement pur2ndrow_1stColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[2]")
	private static WebElement pur2ndrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[3]")
	private static WebElement pur2ndrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[4]")
	private static WebElement pur2ndrow_4thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[5]")
	private static WebElement pur2ndrow_5thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[6]")
	private static WebElement pur2ndrow_6thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[7]")
	private static WebElement pur2ndrow_7thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[8]")
	private static WebElement pur2ndrow_8thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[9]")
	private static WebElement pur2ndrow_9thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[10]")
	private static WebElement pur2ndrow_10thColumn;
	
	
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[1]")
	private static WebElement pur3rdrow_1stColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[2]")
	private static WebElement pur3rdrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[3]")
	private static WebElement pur3rdrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[4]")
	private static WebElement pur3rdrow_4thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[5]")
	private static WebElement pur3rdrow_5thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[6]")
	private static WebElement pur3rdrow_6thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[7]")
	private static WebElement pur3rdrow_7thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[8]")
	private static WebElement pur3rdrow_8thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[9]")
	private static WebElement pur3rdrow_9thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[10]")
	private static WebElement pur3rdrow_10thColumn;
	
	
	// 4TH
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[1]")
	private static WebElement pur4throw_1stColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[2]")
	private static WebElement pur4throw_2ndColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[3]")
	private static WebElement pur4throw_3rdColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[4]")
	private static WebElement pur4throw_4thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[5]")
	private static WebElement pur4throw_5thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[6]")
	private static WebElement pur4throw_6thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[7]")
	private static WebElement pur4throw_7thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[8]")
	private static WebElement pur4throw_8thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[9]")
	private static WebElement pur4throw_9thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[10]")
	private static WebElement pur4throw_10thColumn;
	
	// 5TH
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[1]")
	private static WebElement pur5throw_1stColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[2]")
	private static WebElement pur5throw_2ndColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[3]")
	private static WebElement pur5throw_3rdColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[4]")
	private static WebElement pur5throw_4thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[5]")
	private static WebElement pur5throw_5thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[6]")
	private static WebElement pur5throw_6thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[7]")
	private static WebElement pur5throw_7thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[8]")
	private static WebElement pur5throw_8thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[9]")
	private static WebElement pur5throw_9thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[10]")
	private static WebElement pur5throw_10thColumn;
	
	// 6TH
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[1]")
	private static WebElement pur6throw_1stColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[2]")
	private static WebElement pur6throw_2ndColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[3]")
	private static WebElement pur6throw_3rdColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[4]")
	private static WebElement pur6throw_4thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[5]")
	private static WebElement pur6throw_5thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[6]")
	private static WebElement pur6throw_6thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[7]")
	private static WebElement pur6throw_7thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[8]")
	private static WebElement pur6throw_8thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[9]")
	private static WebElement pur6throw_9thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[10]")
	private static WebElement pur6throw_10thColumn;
	
	
	@FindBy(xpath="//td[contains(text(),'Quantity Purchased Till Date:')]")
	private static WebElement qtyPurchasedTillDate;
	
	@FindBy(xpath="//div[@class='form-group col-xs-12']//tr[7]//td[2]")
	private static WebElement purTotalWa;
			
			
	// Sales Table
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[1]")
	private static WebElement sal1strow_1stColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[2]")
	private static WebElement sal1strow_2ndColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[3]")
	private static WebElement sal1strow_3rdColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[4]")
	private static WebElement sal1strow_4thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[5]")
	private static WebElement sal1strow_5thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[6]")
	private static WebElement sal1strow_6thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[7]")
	private static WebElement sal1strow_7thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[8]")
	private static WebElement sal1strow_8thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[9]")
	private static WebElement sal1strow_9thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[10]")
	private static WebElement sal1strow_10thColumn;
	
	// 2nd
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[1]")
	private static WebElement sal2ndrow_1stColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[2]")
	private static WebElement sal2ndrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[3]")
	private static WebElement sal2ndrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[4]")
	private static WebElement sal2ndrow_4thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[5]")
	private static WebElement sal2ndrow_5thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[6]")
	private static WebElement sal2ndrow_6thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[7]")
	private static WebElement sal2ndrow_7thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[8]")
	private static WebElement sal2ndrow_8thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[9]")
	private static WebElement sal2ndrow_9thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[10]")
	private static WebElement sal2ndrow_10thColumn;
	
	// 3rd
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[1]")
	private static WebElement sal3rdrow_1stColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[2]")
	private static WebElement sal3rdrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[3]")
	private static WebElement sal3rdrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[4]")
	private static WebElement sal3rdrow_4thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[5]")
	private static WebElement sal3rdrow_5thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[6]")
	private static WebElement sal3rdrow_6thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[7]")
	private static WebElement sal3rdrow_7thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[8]")
	private static WebElement sal3rdrow_8thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[9]")
	private static WebElement sal3rdrow_9thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[10]")
	private static WebElement sal3rdrow_10thColumn;
	
	// 4th
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[1]")
	private static WebElement sal4throw_1stColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[2]")
	private static WebElement sal4throw_2ndColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[3]")
	private static WebElement sal4throw_3rdColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[4]")
	private static WebElement sal4throw_4thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[5]")
	private static WebElement sal4throw_5thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[6]")
	private static WebElement sal4throw_6thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[7]")
	private static WebElement sal4throw_7thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[8]")
	private static WebElement sal4throw_8thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[9]")
	private static WebElement sal4throw_9thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[10]")
	private static WebElement sal4throw_10thColumn;
	
	//5th
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[1]")
	private static WebElement sal5throw_1stColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[2]")
	private static WebElement sal5throw_2ndColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[3]")
	private static WebElement sal5throw_3rdColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[4]")
	private static WebElement sal5throw_4thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[5]")
	private static WebElement sal5throw_5thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[6]")
	private static WebElement sal5throw_6thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[7]")
	private static WebElement sal5throw_7thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[8]")
	private static WebElement sal5throw_8thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[9]")
	private static WebElement sal5throw_9thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[10]")
	private static WebElement sal5throw_10thColumn;
	
	//6th
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[1]")
	private static WebElement sal6throw_1stColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[2]")
	private static WebElement sal6throw_2ndColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[3]")
	private static WebElement sal6throw_3rdColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[4]")
	private static WebElement sal6throw_4thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[5]")
	private static WebElement sal6throw_5thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[6]")
	private static WebElement sal6throw_6thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[7]")
	private static WebElement sal6throw_7thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[8]")
	private static WebElement sal6throw_8thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[9]")
	private static WebElement sal6throw_9thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[10]")
	private static WebElement sal6throw_10thColumn;
	
	// 7th
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[1]")
	private static WebElement sal7throw_1stColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[2]")
	private static WebElement sal7throw_2ndColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[3]")
	private static WebElement sal7throw_3rdColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[4]")
	private static WebElement sal7throw_4thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[5]")
	private static WebElement sal7throw_5thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[6]")
	private static WebElement sal7throw_6thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[7]")
	private static WebElement sal7throw_7thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[8]")
	private static WebElement sal7throw_8thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[9]")
	private static WebElement sal7throw_9thColumn;
	
	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[10]")
	private static WebElement sal7throw_10thColumn;

	
	@FindBy(xpath="//td[contains(text(),'Quantity Sold Till Date:')]")
	private static WebElement qtySoldTillDate;
	
	@FindBy(xpath="//div[@class='col-xs-12 col-sm-12 col-md-12 col-lg-12']//tr[2]//td[2]")
	private static WebElement salTotalWa;
			
	
	
	// Warehouse Table
	
	@FindBy(xpath="//div[contains(text(),'Warehouse')]")
	private static WebElement BalancebyWareHouselable;
	
	@FindBy(xpath="//div[@id='PrdtDetails']//div[1]//div[1]//span[1]")
	private static WebElement BalancebyWareHouseExpandBtn;
	
	@FindBy(xpath="//*[@id='1']/td[2]")
	private static WebElement wh1strow_2ndColumn;
	
	@FindBy(xpath="//*[@id='1']/td[3]")
	private static WebElement wh1strow_3rdColumn;
	
	@FindBy(xpath="//*[@id='1']/td[4]")
	private static WebElement wh1strow_4thColumn;
	
	@FindBy(xpath="//*[@id='1']/td[5]")
	private static WebElement wh1strow_5thColumn;
	
	@FindBy(xpath="//*[@id='1']/td[6]")
	private static WebElement wh1strow_6thColumn;
	
	
	
	@FindBy(xpath="//*[@id='2']/td[2]")
	private static WebElement wh2ndrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='2']/td[3]")
	private static WebElement wh2ndrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='2']/td[4]")
	private static WebElement wh2ndrow_4thColumn;
	
	@FindBy(xpath="//*[@id='2']/td[5]")
	private static WebElement wh2ndrow_5thColumn;
	
	@FindBy(xpath="//*[@id='2']/td[6]")
	private static WebElement wh2ndrow_6thColumn;
	
	
	
	
	@FindBy(xpath="//*[@id='7']/td[2]")
	private static WebElement wh3rdrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='7']/td[3]")
	private static WebElement wh3rdrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='7']/td[4]")
	private static WebElement wh3rdrow_4thColumn;
	
	@FindBy(xpath="//*[@id='7']/td[5]")
	private static WebElement wh3rdrow_5thColumn;
	
	@FindBy(xpath="//*[@id='7']/td[6]")
	private static WebElement wh3rdrow_6thColumn;
	
	
	
	@FindBy(xpath="//div[@id='wiseDiv']//tr[2]//td[2]")
	private static WebElement whStockTotal;
	
	@FindBy(xpath="//div[@id='wiseDiv']//tr[2]//td[4]")
	private static WebElement whValueTotal;
	
	
	// Selling rate and buying rates
	
	@FindBy(xpath="//div[contains(text(),'Selling rates and Buying rates')]")
	private static WebElement sellingAndBuyingRateslable;
	
	@FindBy(xpath="//span[@id='ProdQuery_ShowSellandBuyRatesPopup']")
	private static WebElement sellingAndBuyingRatesExpandBtn;
	
	// 1st 
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[2]")
	private static WebElement sbr1strow_2ndColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[3]")
	private static WebElement sbr1strow_3rdColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[4]")
	private static WebElement sbr1strow_4thColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[5]")
	private static WebElement sbr1strow_5thColumn;
	
	// 2nd 
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[2]")
	private static WebElement sbr2ndrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[3]")
	private static WebElement sbr2ndrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[4]")
	private static WebElement sbr2ndrow_4thColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[5]")
	private static WebElement sbr2ndrow_5thColumn;
	
	//3rd
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[2]")
	private static WebElement sbr3rdrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[3]")
	private static WebElement sbr3rdrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[4]")
	private static WebElement sbr3rdrow_4thColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[5]")
	private static WebElement sbr3rdrow_5thColumn;
	
	// 4th
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[2]")
	private static WebElement sbr4throw_2ndColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[3]")
	private static WebElement sbr4throw_3rdColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[4]")
	private static WebElement sbr4throw_4thColumn;
	
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[5]")
	private static WebElement sbr4throw_5thColumn;
	
	
	
  public boolean checkItemQueryInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Item Query"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_ItemTxt));
		
		// Actual
		boolean actiq_ItemTxt						=iq_ItemTxt.isDisplayed();
		boolean actiq_getStockBtn					=iq_getStockBtn.isDisplayed();
		boolean actiq_customizeBtn					=iq_customizeBtn.isDisplayed();
		boolean actiq_clearBtn						=iq_clearBtn.isDisplayed();
		boolean actiq_closeBtn						=iq_closeBtn.isDisplayed();
		boolean actiq_OpeningStockQtyLable			=iq_OpeningStockQtyLable.isDisplayed();
		boolean actiq_CurrentStockLable				=iq_CurrentStockLable.isDisplayed();
		boolean actiq_AvgStockRateLable				=iq_AvgStockRateLable.isDisplayed();
		boolean actiq_ValueLable					=iq_ValueLable.isDisplayed();
		boolean actiq_BaseUnitLable					=iq_BaseUnitLable.isDisplayed();
		boolean actiq_PendingPurchaseOrdersLable	=iq_PendingPurchaseOrdersLable.isDisplayed();
		boolean actiq_PendingSalesOrdersLable		=iq_PendingSalesOrdersLable.isDisplayed();
		boolean actiq_QtytobeOrderedLable			=iq_QtytobeOrderedLable.isDisplayed();
		
		boolean actiq_PurDate						=iq_PurDate.isDisplayed();
		boolean actiq_PurVoucherNo					=iq_PurVoucherNo.isDisplayed();
		boolean actiq_PurVendor						=iq_PurVendor.isDisplayed();
		boolean actiq_PurQty						=iq_PurQty.isDisplayed();
		boolean actiq_PurUnit						=iq_PurUnit.isDisplayed();
		boolean actiq_PurRate						=iq_PurRate.isDisplayed();
		boolean actiq_PurCurrency					=iq_PurCurrency.isDisplayed();
		boolean actiq_PurQtyInBase					=iq_PurQtyInBase.isDisplayed();
		
		boolean actiq_SaleDate						=iq_SaleDate.isDisplayed();
		boolean actiq_SaleVoucherNo					=iq_SaleVoucherNo.isDisplayed();
		boolean actiq_SaleCustomer					=iq_SaleCustomer.isDisplayed();
		boolean actiq_SaleQty						=iq_SaleQty.isDisplayed();
		boolean actiq_SaleUnit						=iq_SaleUnit.isDisplayed();
		boolean actiq_SaleRate						=iq_SaleRate.isDisplayed();
		boolean actiq_SaleCurrency					=iq_SaleCurrency.isDisplayed();
		boolean actiq_SaleQtyInBase					=iq_SaleQtyInBase.isDisplayed();
		
		
		// Expected
		
		boolean expiq_ItemTxt						=true;
		boolean expiq_getStockBtn					=true;
		boolean expiq_customizeBtn					=true;
		boolean expiq_clearBtn						=true;
		boolean expiq_closeBtn						=true;
		boolean expiq_OpeningStockQtyLable			=true;
		boolean expiq_CurrentStockLable				=true;
		boolean expiq_AvgStockRateLable				=true;
		boolean expiq_ValueLable					=true;
		boolean expiq_BaseUnitLable					=true;
		boolean expiq_PendingPurchaseOrdersLable	=true;
		boolean expiq_PendingSalesOrdersLable		=true;
		boolean expiq_QtytobeOrderedLable			=true;
		
		boolean expiq_PurDate						=true;
		boolean expiq_PurVoucherNo					=true;
		boolean expiq_PurVendor						=true;
		boolean expiq_PurQty						=true;
		boolean expiq_PurUnit						=true;
		boolean expiq_PurRate						=true;
		boolean expiq_PurCurrency					=true;
		boolean expiq_PurQtyInBase					=true;
		
		boolean expiq_SaleDate						=true;
		boolean expiq_SaleVoucherNo					=true;
		boolean expiq_SaleCustomer					=true;
		boolean expiq_SaleQty						=true;
		boolean expiq_SaleUnit						=true;
		boolean expiq_SaleRate						=true;
		boolean expiq_SaleCurrency					=true;
		boolean expiq_SaleQtyInBase					=true;
		
		
		System.out.println("********************************checkItemQueryOptions*******************************");
		
		System.out.println("iq_ItemTxt     					 :   "+actiq_ItemTxt					+" Value Expected : "+expiq_ItemTxt);
		System.out.println("iq_getStockBtn     				 :   "+actiq_getStockBtn				+" Value Expected : "+expiq_getStockBtn);
		System.out.println("iq_customizeBtn    				 :   "+actiq_customizeBtn				+" Value Expected : "+expiq_customizeBtn);
		System.out.println("iq_clearBtn      				 :   "+actiq_clearBtn					+" Value Expected : "+expiq_clearBtn);
		System.out.println("iq_closeBtn      				 :   "+actiq_closeBtn					+" Value Expected : "+expiq_closeBtn);
		System.out.println("iq_OpeningStockQtyLable          :   "+actiq_OpeningStockQtyLable		+" Value Expected : "+expiq_OpeningStockQtyLable);
		System.out.println("iq_CurrentStockLable      		 :   "+actiq_CurrentStockLable			+" Value Expected : "+expiq_CurrentStockLable);
		System.out.println("iq_AvgStockRateLable      		 :   "+actiq_AvgStockRateLable			+" Value Expected : "+expiq_AvgStockRateLable);
		System.out.println("iq_ValueLable    				 :   "+actiq_ValueLable					+" Value Expected : "+expiq_ValueLable);
		System.out.println("iq_BaseUnitLable    			 :   "+actiq_BaseUnitLable				+" Value Expected : "+expiq_BaseUnitLable);
		System.out.println("iq_PendingPurchaseOrdersLable  	 :   "+actiq_PendingPurchaseOrdersLable	+" Value Expected : "+expiq_PendingPurchaseOrdersLable);
		System.out.println("iq_PendingSalesOrdersLable     	 :   "+actiq_PendingSalesOrdersLable	+" Value Expected : "+expiq_PendingSalesOrdersLable);
		System.out.println("iq_QtytobeOrderedLable     		 :   "+actiq_QtytobeOrderedLable		+" Value Expected : "+expiq_QtytobeOrderedLable);
		
		System.out.println("iq_PurDate    					 :   "+actiq_PurDate					+" Value Expected : "+expiq_PurDate);
		System.out.println("iq_PurVoucherNo      			 :   "+actiq_PurVoucherNo				+" Value Expected : "+expiq_PurVoucherNo);
		System.out.println("iq_PurVendor      				 :   "+actiq_PurVendor					+" Value Expected : "+expiq_PurVendor);
		System.out.println("iq_PurQty      					 :   "+actiq_PurQty						+" Value Expected : "+expiq_PurQty);
		System.out.println("iq_PurUnit      				 :   "+actiq_PurUnit					+" Value Expected : "+expiq_PurUnit);
		System.out.println("iq_PurRate      				 :   "+actiq_PurRate					+" Value Expected : "+expiq_PurRate);
		System.out.println("iq_PurCurrency      			 :   "+actiq_PurCurrency				+" Value Expected : "+expiq_PurCurrency);
		System.out.println("iq_PurQtyInBase      			 :   "+actiq_PurQtyInBase				+" Value Expected : "+expiq_PurQtyInBase);
		
		System.out.println("iq_SaleDate    					 :   "+actiq_SaleDate					+" Value Expected : "+expiq_SaleDate);
		System.out.println("iq_SaleVoucherNo      			 :   "+actiq_SaleVoucherNo				+" Value Expected : "+expiq_SaleVoucherNo);
		System.out.println("iq_SaleCustomer    				 :   "+actiq_SaleCustomer				+" Value Expected : "+expiq_SaleCustomer);
		System.out.println("iq_SaleQty      				 :   "+actiq_SaleQty					+" Value Expected : "+expiq_SaleQty);
		System.out.println("iq_SaleUnit      				 :   "+actiq_SaleUnit					+" Value Expected : "+expiq_SaleUnit);
		System.out.println("iq_SaleRate      				 :   "+actiq_SaleRate					+" Value Expected : "+expiq_SaleRate);
		System.out.println("iq_SaleCurrency      			 :   "+actiq_SaleCurrency				+" Value Expected : "+expiq_SaleCurrency);
		System.out.println("iq_SaleQtyInBase      			 :   "+actiq_SaleQtyInBase				+" Value Expected : "+expiq_SaleQtyInBase);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_ItemTxt));
		iq_ItemTxt.click();
		iq_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(5000);
		iq_ItemTxt.sendKeys(Keys.TAB);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_getStockBtn));
		iq_getStockBtn.click();
		
		Thread.sleep(5000);
		
		
		String actiq_OpeningStocks				=iq_OpeningStocks.getText();
		String actiq_PendingPurchaseOrders		=iq_PendingPurchaseOrders.getText();
		String actiq_CurrentStock				=iq_CurrentStock.getText();
		String actiq_PendingSalesOrders			=iq_PendingSalesOrders.getText();
		String actiq_AvgStockRate				=iq_AvgStockRate.getText();
		String actiq_QtyToBeOrdered				=iq_QtyToBeOrdered.getText();
		String actiq_Value						=iq_Value.getText();
		String actiq_BaseUnit     				=iq_BaseUnit.getText();
		
		String expiq_OpeningStocks				="120.00";
		String expiq_PendingPurchaseOrders		="0.00";
		String expiq_CurrentStock				="120.00";
		String expiq_PendingSalesOrders			="0.00";
		String expiq_AvgStockRate				="0.83";
		String expiq_QtyToBeOrdered				="0.00";
		String expiq_Value						="100.00";
		String expiq_BaseUnit     				="Pcs";
		
		// Recent Stock Transaction -Purchases
		
		
		
		// Recent Stock Transaction -Sales
		
		String actsalVoucherNoR1	=sal1strow_2ndColumn.getText();
		String actsalCustomerR1		=sal1strow_3rdColumn.getText();
		String actsalQtyR1			=sal1strow_4thColumn.getText();
		String actsalUnitR1			=sal1strow_5thColumn.getText();
		String actsalRateR1			=sal1strow_6thColumn.getText();
		String actsalCurrencyR1		=sal1strow_7thColumn.getText();
		String actsalQtyInBaseR1	=sal1strow_8thColumn.getText();
		
		
		String actsalTotalWa		=salTotalWa.getText();

		// Expected
		
		String expsalVoucherNoR1	="PosSal:1";
		String expsalCustomerR1		="Customer Default Account";
		String expsalQtyR1			="1.00";
		String expsalUnitR1			="Pcs";
		String expsalRateR1			="10.00";
		String expsalCurrencyR1		="INDIAN RUPEES";
		String expsalQtyInBaseR1	="1.0000000000";
		
		
		String expsalTotalWa		="1.00";
		
		
		// WareHouse Table
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(BalancebyWareHouseExpandBtn));
		BalancebyWareHouseExpandBtn.click();
		
		Thread.sleep(2000);
		
		getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
		
		
		String actwareHouseR1		=wh1strow_2ndColumn.getText();
		String actstockR1			=wh1strow_3rdColumn.getText();
		String actrateR1			=wh1strow_4thColumn.getText();
		String actvalueR1			=wh1strow_5thColumn.getText();
		
		
		String acttotalStock		=whStockTotal.getText();
		String acttotalValue		=whValueTotal.getText();
		
		// Expected
		
		String expwareHouseR1		="Outlet1";
		String expstockR1			="120.00";
		String exprateR1			="0.83";
		String expvalueR1			="100.00";
		
		
		String exptotalStock		="120.00";
		String exptotalValue		="100.00";
		
		
		// Seller And Buying rates Table
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sellingAndBuyingRatesExpandBtn));
		sellingAndBuyingRatesExpandBtn.click();
		
		Thread.sleep(2000);
		
		getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
		
		
		String actsellingRateR1		=sbr1strow_2ndColumn.getText();
		String actsellingValueR1	=sbr1strow_3rdColumn.getText();
		String actbuyingRateR1		=sbr1strow_4thColumn.getText();
		String actbuyingValueR1		=sbr1strow_5thColumn.getText();
		
		String actsellingRateR2		=sbr2ndrow_2ndColumn.getText();
		String actsellingValueR2	=sbr2ndrow_3rdColumn.getText();
		String actbuyingRateR2		=sbr2ndrow_4thColumn.getText();
		String actbuyingValueR2		=sbr2ndrow_5thColumn.getText();
		
		String actsellingRateR3		=sbr3rdrow_2ndColumn.getText();
		String actsellingValueR3	=sbr3rdrow_3rdColumn.getText();
		String actbuyingRateR3		=sbr3rdrow_4thColumn.getText();
		String actbuyingValueR3		=sbr3rdrow_5thColumn.getText();
		
		String actsellingRateR4		=sbr4throw_2ndColumn.getText();
		String actsellingValueR4	=sbr4throw_3rdColumn.getText();
		String actbuyingRateR4		=sbr4throw_4thColumn.getText();
		String actbuyingValueR4		=sbr4throw_5thColumn.getText();
		
		// Expected
		
		String expsellingRateR1		="so";
		String expsellingValueR1	="0.00";
		String expbuyingRateR1		="po";
		String expbuyingValueR1		="0.00";
		
		String expsellingRateR2		="st";
		String expsellingValueR2	="0.00";
		String expbuyingRateR2		="pt";
		String expbuyingValueR2		="0.00";
		
		String expsellingRateR3		="Val 3";
		String expsellingValueR3	="0.00";
		String expbuyingRateR3		="Val 3";
		String expbuyingValueR3		="0.00";
		
		String expsellingRateR4		="Val 4";
		String expsellingValueR4	="0.00";
		String expbuyingRateR4		="Val 4";
		String expbuyingValueR4		="0.00";
		
		
		
		System.out.println("************************************checkItemQueryOfBatchWAItem*************************************");
		
		System.out.println("iq_OpeningStocks     		 :   "+actiq_OpeningStocks					+" Value Expected : "+expiq_OpeningStocks);
		System.out.println("iq_PendingPurchaseOrders     :   "+actiq_PendingPurchaseOrders			+" Value Expected : "+expiq_PendingPurchaseOrders);
		System.out.println("iq_CurrentStock     		 :   "+actiq_CurrentStock					+" Value Expected : "+expiq_CurrentStock);
		System.out.println("iq_PendingSalesOrders     	 :   "+actiq_PendingSalesOrders				+" Value Expected : "+expiq_PendingSalesOrders);
		System.out.println("iq_AvgStockRate     		 :   "+actiq_AvgStockRate					+" Value Expected : "+expiq_AvgStockRate);
		System.out.println("iq_QtyToBeOrdered     		 :   "+actiq_QtyToBeOrdered					+" Value Expected : "+expiq_QtyToBeOrdered);
		System.out.println("iq_Value     				 :   "+actiq_Value							+" Value Expected : "+expiq_Value);
		System.out.println("iq_BaseUnit     			 :   "+actiq_BaseUnit						+" Value Expected : "+expiq_BaseUnit);
		
		
		System.out.println("********************* Sales ******************");
		
		System.out.println("salVoucherNoR1     			 :   "+actsalVoucherNoR1					+" Value Expected : "+expsalVoucherNoR1);
		System.out.println("salCustomerR1     			 :   "+actsalCustomerR1						+" Value Expected : "+expsalCustomerR1);
		System.out.println("salQtyR1     				 :   "+actsalQtyR1							+" Value Expected : "+expsalQtyR1);
		System.out.println("salUnitR1     				 :   "+actsalUnitR1							+" Value Expected : "+expsalUnitR1);
		System.out.println("salRateR1     				 :   "+actsalRateR1							+" Value Expected : "+expsalRateR1);
		System.out.println("salCurrencyR1     			 :   "+actsalCurrencyR1						+" Value Expected : "+expsalCurrencyR1);
		System.out.println("salQtyInBaseR1     			 :   "+actsalQtyInBaseR1					+" Value Expected : "+expsalQtyInBaseR1);
		
		System.out.println("salTotalWa                   :   "+actsalTotalWa                        +" Value expected : "+expsalTotalWa);
		
		
		System.out.println("********************* WareHouse ******************");
		
		System.out.println("wareHouseR1     			 :   "+actwareHouseR1						+" Value Expected : "+expwareHouseR1);
		System.out.println("stockR1     				 :   "+actstockR1							+" Value Expected : "+expstockR1);
		System.out.println("rateR1     				 	 :   "+actrateR1							+" Value Expected : "+exprateR1);
		System.out.println("valueR1     				 :   "+actvalueR1							+" Value Expected : "+expvalueR1);
		
		System.out.println("totalStock     				 :   "+acttotalStock						+" Value Expected : "+exptotalStock);
		System.out.println("totalValue     				 :   "+acttotalValue						+" Value Expected : "+exptotalValue);
		
		
		System.out.println("*************************Selling and Buying rates********************");
		
		System.out.println("sellingRateR1     			 :   "+actsellingRateR1						+" Value Expected : "+expsellingRateR1);
		System.out.println("sellingValueR1  			 :   "+actsellingValueR1					+" Value Expected : "+expsellingValueR1);
		System.out.println("buyingRateR1     			 :   "+actbuyingRateR1						+" Value Expected : "+expbuyingRateR1);
		System.out.println("buyingValueR1     			 :   "+actbuyingValueR1						+" Value Expected : "+expbuyingValueR1);
		
		System.out.println("sellingRateR2     			 :   "+actsellingRateR2						+" Value Expected : "+expsellingRateR2);
		System.out.println("sellingValueR2  			 :   "+actsellingValueR2					+" Value Expected : "+expsellingValueR2);
		System.out.println("buyingRateR2     			 :   "+actbuyingRateR2						+" Value Expected : "+expbuyingRateR2);
		System.out.println("buyingValueR2     			 :   "+actbuyingValueR2						+" Value Expected : "+expbuyingValueR2);
		
		System.out.println("sellingRateR3     			 :   "+actsellingRateR3						+" Value Expected : "+expsellingRateR3);
		System.out.println("sellingValueR3  			 :   "+actsellingValueR3					+" Value Expected : "+expsellingValueR3);
		System.out.println("buyingRateR3     			 :   "+actbuyingRateR3						+" Value Expected : "+expbuyingRateR3);
		System.out.println("buyingValueR3     			 :   "+actbuyingValueR3						+" Value Expected : "+expbuyingValueR3);
		
		System.out.println("sellingRateR4     			 :   "+actsellingRateR4						+" Value Expected : "+expsellingRateR4);
		System.out.println("sellingValueR4  			 :   "+actsellingValueR4					+" Value Expected : "+expsellingValueR4);
		System.out.println("buyingRateR4     			 :   "+actbuyingRateR4						+" Value Expected : "+expbuyingRateR4);
		System.out.println("buyingValueR4     			 :   "+actbuyingValueR4						+" Value Expected : "+expbuyingValueR4);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_closeBtn));
		iq_closeBtn.click();
		
		if(actiq_ItemTxt==expiq_ItemTxt && actiq_getStockBtn==expiq_getStockBtn && actiq_customizeBtn==expiq_customizeBtn && actiq_clearBtn==expiq_clearBtn
				&& actiq_closeBtn==expiq_closeBtn && actiq_OpeningStockQtyLable==expiq_OpeningStockQtyLable && actiq_CurrentStockLable==expiq_CurrentStockLable
				&& actiq_AvgStockRateLable==expiq_AvgStockRateLable && actiq_ValueLable==expiq_ValueLable && actiq_BaseUnitLable==expiq_BaseUnitLable
				&& actiq_PendingPurchaseOrdersLable==expiq_PendingPurchaseOrdersLable && actiq_PendingSalesOrdersLable==expiq_PendingSalesOrdersLable
				&& actiq_QtytobeOrderedLable==expiq_QtytobeOrderedLable
				
				&& actiq_PurDate==expiq_PurDate && actiq_PurVoucherNo==expiq_PurVoucherNo && actiq_PurVendor==expiq_PurVendor && actiq_PurQty==expiq_PurQty
				&& actiq_PurUnit==expiq_PurUnit && actiq_PurQtyInBase==expiq_PurQtyInBase && actiq_PurRate==expiq_PurRate && actiq_PurCurrency==expiq_PurCurrency
				
				&& actiq_SaleDate==expiq_SaleDate && actiq_SaleVoucherNo==expiq_SaleVoucherNo && actiq_SaleCustomer==expiq_SaleCustomer
				&& actiq_SaleQty==expiq_SaleQty && actiq_SaleUnit==expiq_SaleUnit && actiq_SaleRate==expiq_SaleRate
				&& actiq_SaleCurrency==expiq_SaleCurrency && actiq_SaleQtyInBase==expiq_SaleQtyInBase
				
				&& actiq_OpeningStocks.equalsIgnoreCase(expiq_OpeningStocks) && actiq_PendingPurchaseOrders.equalsIgnoreCase(expiq_PendingPurchaseOrders)
				&& actiq_CurrentStock.equalsIgnoreCase(expiq_CurrentStock) && actiq_PendingSalesOrders.equalsIgnoreCase(expiq_PendingSalesOrders)
				&& actiq_AvgStockRate.equalsIgnoreCase(expiq_AvgStockRate) && actiq_QtyToBeOrdered.equalsIgnoreCase(expiq_QtyToBeOrdered)
				&& actiq_Value.equalsIgnoreCase(expiq_Value) && actiq_BaseUnit.equalsIgnoreCase(expiq_BaseUnit)
				
				&& actsalVoucherNoR1.equalsIgnoreCase(expsalVoucherNoR1) && actsalCustomerR1.equalsIgnoreCase(expsalCustomerR1) && actsalQtyR1.equalsIgnoreCase(expsalQtyR1)
				&& actsalUnitR1.equalsIgnoreCase(expsalUnitR1) && actsalRateR1.equalsIgnoreCase(expsalRateR1) && actsalCurrencyR1.equalsIgnoreCase(expsalCurrencyR1)
				&& actsalQtyInBaseR1.equalsIgnoreCase(expsalQtyInBaseR1)
				
				&& actsalTotalWa.equalsIgnoreCase(expsalTotalWa)
				
				&& actwareHouseR1.equalsIgnoreCase(expwareHouseR1) && actstockR1.equalsIgnoreCase(expstockR1) 
				&& actrateR1.equalsIgnoreCase(exprateR1) && actvalueR1.equalsIgnoreCase(expvalueR1)
				
				
				&& acttotalStock.equalsIgnoreCase(exptotalStock) && acttotalValue.equalsIgnoreCase(exptotalValue)
				
				&& actsellingRateR1.equalsIgnoreCase(expsellingRateR1) && actsellingValueR1.equalsIgnoreCase(expsellingValueR1)
				&& actbuyingRateR1.equalsIgnoreCase(expbuyingRateR1) && actbuyingValueR1.equalsIgnoreCase(expbuyingValueR1)
				
				&& actsellingRateR2.equalsIgnoreCase(expsellingRateR2) && actsellingValueR2.equalsIgnoreCase(expsellingValueR2)
				&& actbuyingRateR2.equalsIgnoreCase(expbuyingRateR2) && actbuyingValueR2.equalsIgnoreCase(expbuyingValueR2)
				
				&& actsellingRateR3.equalsIgnoreCase(expsellingRateR3) && actsellingValueR3.equalsIgnoreCase(expsellingValueR3)
				&& actbuyingRateR3.equalsIgnoreCase(expbuyingRateR3) && actbuyingValueR3.equalsIgnoreCase(expbuyingValueR3)
				
				&& actsellingRateR4.equalsIgnoreCase(expsellingRateR4) && actsellingValueR4.equalsIgnoreCase(expsellingValueR4)
				&& actbuyingRateR4.equalsIgnoreCase(expbuyingRateR4) && actbuyingValueR4.equalsIgnoreCase(expbuyingValueR4))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  
  @FindBy(xpath="//tbody[@id='tbodySearchMember']/tr/td")
  private static List<WebElement> memberBodyList; 
  
  public boolean checkSelectMemberByNameInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Member"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Member by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMemberBtn));
		searchMemberBtn.click();
		
		Thread.sleep(2000);
		
		int memberBodyListCount = memberBodyList.size();
		
		ArrayList<String> memberBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<memberBodyListCount;i++)
		{
			String data = memberBodyList.get(i).getText();

			memberBodyListArray.add(data);
			
		}	
		
		String actmemberBodyList = memberBodyListArray.toString();
		String expmemberBodyList = "[TestMemberUpdate, TestMemberUpdate, ]";
		
		System.out.println("actmemberBodyList : "+actmemberBodyList);
		System.out.println("expmemberBodyList : "+expmemberBodyList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
	
		
		if(actmemberBodyList.equalsIgnoreCase(expmemberBodyList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  
  
  
  @FindBy(xpath="//input[@id='rdbtnMobile']")
  private static WebElement phoneRadioBtn;
  
  @FindBy(xpath="//input[@id='rdbtnResidence']")
  private static WebElement residenceRadioBtn;
  
  @FindBy(xpath="//input[@id='rdbtnOffice']")
  private static WebElement officeRadioBtn;
  
  
  public boolean checkSelectMemberByTelepohoneInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Member by Telephone"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMemberBtn));
		searchMemberBtn.click();
		
		Thread.sleep(2000);
		
		boolean actphoneRadioBtn     = phoneRadioBtn.isDisplayed();
		boolean actresidenceRadioBtn = residenceRadioBtn.isDisplayed();
		boolean actofficeRadioBtn    = officeRadioBtn.isDisplayed();
		
		boolean expphoneRadioBtn     = true;
		boolean expresidenceRadioBtn = true;
		boolean expofficeRadioBtn    = true;
		
		System.out.println("phoneRadioBtn     : "+actphoneRadioBtn    +" Value Expected : "+expphoneRadioBtn);
		System.out.println("residenceRadioBtn : "+actresidenceRadioBtn+" Value Expected : "+expresidenceRadioBtn);
		System.out.println("officeRadioBtn    : "+actofficeRadioBtn   +" Value Expected : "+expofficeRadioBtn);
		
		int memberBodyListCount = memberBodyList.size();
		
		ArrayList<String> memberBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<memberBodyListCount;i++)
		{
			String data = memberBodyList.get(i).getText();

			memberBodyListArray.add(data);
			
		}	
		
		String actmemberBodyList = memberBodyListArray.toString();
		String expmemberBodyList = "[TestMemberUpdate, TestMemberUpdate, 0]";
		
		System.out.println("actmemberBodyList : "+actmemberBodyList);
		System.out.println("expmemberBodyList : "+expmemberBodyList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
	
		
		if(actphoneRadioBtn==expphoneRadioBtn && actresidenceRadioBtn==expresidenceRadioBtn && actofficeRadioBtn==expofficeRadioBtn
				&& actmemberBodyList.equalsIgnoreCase(expmemberBodyList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  @FindBy(xpath="//input[@id='txtSearchMemberByCard']")
  private static WebElement cardTxt;
  
  @FindBy(xpath="//div[@class='col-lg-7 col-md-7 col-sm-7 col-xs-7 input-group searchstyle']//i[@class='fa fa-search']")
  private static WebElement cardSearchBtn;
  
  public boolean checkSelectMemberByBarCodeCardInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Member by Barcode/Card"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		Thread.sleep(2000);
		
		boolean actcardTxt                         = cardTxt.isDisplayed();
		boolean actcardSearchBtn                   = cardSearchBtn.isDisplayed();
		boolean actcustomizeOptionsPoUpCloseBtn    = customizeOptionsPoUpCloseBtn.isDisplayed();
		
		boolean expcardTxt                         = true;
		boolean expcardSearchBtn                   = true;
		boolean expcustomizeOptionsPoUpCloseBtn    = true;
		
		System.out.println("cardTxt                         : "+actcardTxt                        +" Value Expected : "+expcardTxt);
		System.out.println("cardSearchBtn                   : "+actcardSearchBtn                  +" Value Expected : "+expcardSearchBtn);
		System.out.println("customizeOptionsPoUpCloseBtn    : "+actcustomizeOptionsPoUpCloseBtn   +" Value Expected : "+expcustomizeOptionsPoUpCloseBtn);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cardSearchBtn));
		cardSearchBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toastMessage));
		
		String expMessage = "Member with Card Number not found.";
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeOptionsPoUpCloseBtn));
		customizeOptionsPoUpCloseBtn.click();
	
		
		if(actcardTxt==expcardTxt && actcardSearchBtn==expcardSearchBtn && actcustomizeOptionsPoUpCloseBtn==expcustomizeOptionsPoUpCloseBtn
				&& actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  @FindBy(xpath="//thead[@id='theadAdvanceSearchMember']/tr/td")
  private static List<WebElement> advanceSearchMemberHeaderList;
  
  
  @FindBy(xpath="//ul[@id='FilterFields_8031_1106']/li/div/label")
  private static List<WebElement> MembercustomizeList;
  
  @FindBy(xpath="//input[@id='8031_1106_DefaultFilter_0']")
  private static WebElement MembercustomizeNameTxt;
  
  public boolean checkAdvanceSearchMemberInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Advanced Search Member"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		boolean actadvanceSearchCustomizeBtn = advanceSearchCustomizeBtn.isDisplayed();
		boolean actadvanceSearchFilterBtn    = advanceSearchFilterBtn.isDisplayed();
		boolean actadvanceSearchSearchBtn    = advanceSearchSearchBtn.isDisplayed();
		boolean actadvanceSearchClearBtn     = advanceSearchClearBtn.isDisplayed();
		boolean actadvanceSearchCloseBtn     = advanceSearchCloseBtn.isDisplayed();
		
		boolean expadvanceSearchCustomizeBtn = true;
		boolean expadvanceSearchFilterBtn    = true;
		boolean expadvanceSearchSearchBtn    = true;
		boolean expadvanceSearchClearBtn     = true;
		boolean expadvanceSearchCloseBtn     = true;
		

		System.out.println("advanceSearchCustomizeBtn : "+actadvanceSearchCustomizeBtn+" Value Expected : "+expadvanceSearchCustomizeBtn);
		System.out.println("advanceSearchFilterBtn    : "+actadvanceSearchFilterBtn+" Value Expected : "+expadvanceSearchFilterBtn);
		System.out.println("advanceSearchSearchBtn    : "+actadvanceSearchSearchBtn+" Value Expected : "+expadvanceSearchSearchBtn);
		System.out.println("advanceSearchClearBtn     : "+actadvanceSearchClearBtn+" Value Expected : "+expadvanceSearchClearBtn);
		System.out.println("advanceSearchCloseBtn     : "+actadvanceSearchCloseBtn+" Value Expected : "+expadvanceSearchCloseBtn);
		
		
		Thread.sleep(2000);
		
		int advanceSearchMemberHeaderListCount = advanceSearchMemberHeaderList.size();
		
		ArrayList<String> advanceSearchMemberHeaderListArray = new ArrayList<String>();
		
		for(int i=0;i<advanceSearchMemberHeaderListCount;i++)
		{
			String data = advanceSearchMemberHeaderList.get(i).getText();

			advanceSearchMemberHeaderListArray.add(data);
		}	
		
		String actadvanceSearchHeaderList = advanceSearchMemberHeaderListArray.toString();
		String expadvanceSearchHeaderList = "[, Code, Name, Member Type, Telephone]";
		
		System.out.println("actadvanceSearchHeaderList : "+actadvanceSearchHeaderList);
		System.out.println("expadvanceSearchHeaderList : "+expadvanceSearchHeaderList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(advanceSearchCustomizeBtn));
		advanceSearchCustomizeBtn.click();
		
		Thread.sleep(2000);
		
		
		boolean actfilterSearch       = filterSearch.isDisplayed();
		boolean actcustomizeOkBtn     = customizeOkBtn.isDisplayed();
		boolean actcustomizeCancelBtn = customizeCancelBtn.isDisplayed();
		
		boolean expfilterSearch       = true;
		boolean expcustomizeOkBtn     = true;
		boolean expcustomizeCancelBtn = true;
		
		System.out.println("filterSearch       : "+actfilterSearch+" Value Expected : "+expfilterSearch);
		System.out.println("customizeOkBtn     : "+actcustomizeOkBtn+" Value Expected : "+expcustomizeOkBtn);
		System.out.println("customizeCancelBtn : "+actcustomizeCancelBtn+" Value Expected : "+expcustomizeCancelBtn);

		
		int MembercustomizeListCount = MembercustomizeList.size();
		
		ArrayList<String> MembercustomizeListArray = new ArrayList<String>();
		
		for(int i=0;i<MembercustomizeListCount;i++)
		{
			String data = MembercustomizeList.get(i).getText();

			MembercustomizeListArray .add(data);
			
			if (i!=MembercustomizeListCount-1) 
			{
				int temp=i+1;
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();",MembercustomizeList.get(temp));
			}
		}	
		
		String actcustomizeList = MembercustomizeListArray.toString();
		String expcustomizeList = "[Name, Code, Middle Name, Last Name, DOB, Zip Code, Phone (Res), Phone (Office), Mobile, E Mail, Fax, Points Accumulated, Distance from outlet, Reason for blacklist, Favourite Brand, Profession Details, Issue Date, Expiry Date, Name, Age, Relation, Mobile, Card Number, Anniversary Date, Last Purchase Date]";
		
		System.out.println("actcustomizeList : "+actcustomizeList);
		System.out.println("expcustomizeList : "+expcustomizeList);
		
		for(int i=0;i<MembercustomizeListCount;i++)
		{
			String data = MembercustomizeList.get(i).getText();

			
			if (data.equalsIgnoreCase("Name")) 
			{
				MembercustomizeList.get(i).click();
				
				break;
			}
		}
		
		customizeOkBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MembercustomizeNameTxt));
		MembercustomizeNameTxt.click();
		MembercustomizeNameTxt.sendKeys("TestMemberUpdate");
		Thread.sleep(2000);
		MembercustomizeNameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(advanceSearchSearchBtn));
		advanceSearchSearchBtn.click();
		
		boolean actfooterText = toastMessage.isDisplayed();
		boolean expfooterText = false;
		
		System.out.println("footerText : "+actfooterText+" Value Expected : "+expfooterText);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(advanceSearchCloseBtn));
		advanceSearchCloseBtn.click();
	
		
		if(actadvanceSearchCustomizeBtn==expadvanceSearchCustomizeBtn && actadvanceSearchFilterBtn==expadvanceSearchFilterBtn && actadvanceSearchSearchBtn==expadvanceSearchSearchBtn
				&& actadvanceSearchClearBtn==expadvanceSearchClearBtn && actadvanceSearchCloseBtn==expadvanceSearchCloseBtn
				
				&& actfilterSearch==expfilterSearch && actcustomizeOkBtn==expcustomizeOkBtn && actcustomizeCancelBtn==expcustomizeCancelBtn
				
				&& actadvanceSearchHeaderList.equalsIgnoreCase(expadvanceSearchHeaderList) && actfooterText==expfooterText 
				&& actcustomizeList.equalsIgnoreCase(expcustomizeList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		} 
		else
		{
			
			
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  

  public boolean checkCreateMemberInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Create Member"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		Thread.sleep(2000);
		
		int newHeaderTabListCount = newHeaderTabList.size();
		
		ArrayList<String> newHeaderTabListArray = new ArrayList<String>();
		
		for(int i=0;i<newHeaderTabListCount;i++)
		{
			String data = newHeaderTabList.get(i).getText();
			
			newHeaderTabListArray.add(data);
		}
		
		String actnewHeaderTabList = newHeaderTabListArray.toString();
		String expnewHeaderTabList = "[General, Contact Details, Other Details, Card Details, KYC, ]";
		
		System.out.println("actnewHeaderTabList : "+actnewHeaderTabList);
		System.out.println("expnewHeaderTabList : "+expnewHeaderTabList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();
		
		Thread.sleep(2000);
		
		boolean actmemberNameTxt                    = memberNameTxt.isDisplayed();
		boolean actmemberCodeTxt                    = memberCodeTxt.isDisplayed();
		boolean actmemberMiddleNameTxt              = memberMiddleNameTxt.isDisplayed();
		boolean actmemberLastNameTxt                = memberLastNameTxt.isDisplayed();
		boolean actmemberTitleDropDown              = memberTitleDropDown.isDisplayed();
		boolean actmemberGenderDropdown             = memberGenderDropdown.isDisplayed();
		boolean actmemberActiveChkBox               = memberActiveChkBox.isDisplayed();
		boolean actmemberDobChkBox                  = memberDobChkBox.isDisplayed();
		boolean actmemberDobCalendarBtn             = memberDobCalendarBtn.isDisplayed();
		boolean actmemberAgeTxt                     = memberAgeTxt.isDisplayed();
		boolean actmemberMemberTypeTxt              = memberMemberTypeTxt.isDisplayed();
		//boolean actmemberAttachPhotoBtn             = memberAttachPhotoBtn.isDisplayed();
		boolean actmemberSaveImgBtn                 = memberSaveImgBtn.isDisplayed();
		boolean actmemberEraseImgBtn                = memberEraseImgBtn.isDisplayed();
		boolean actmemberAnniversaryDateChkBox      = memberAnniversaryDateChkBox.isDisplayed();
		boolean actmemberAnniversaryDateCalendarBtn = memberAnniversaryDateCalendarBtn.isDisplayed();
		
		boolean expmemberNameTxt                    = true;
		boolean expmemberCodeTxt                    = true;
		boolean expmemberMiddleNameTxt              = true;
		boolean expmemberLastNameTxt                = true;
		boolean expmemberTitleDropDown              = true;
		boolean expmemberGenderDropdown             = true;
		boolean expmemberActiveChkBox               = true;
		boolean expmemberDobChkBox                  = true;
		boolean expmemberDobCalendarBtn             = true;
		boolean expmemberAgeTxt                     = true;
		boolean expmemberMemberTypeTxt              = true;
		//boolean expmemberAttachPhotoBtn             = true;
		boolean expmemberSaveImgBtn                 = true;
		boolean expmemberEraseImgBtn                = true;
		boolean expmemberAnniversaryDateChkBox      = true;
		boolean expmemberAnniversaryDateCalendarBtn = true;
		
		System.out.println("memberNameTxt                    : "+actmemberNameTxt                    +" Value Expected : "+expmemberNameTxt);
		System.out.println("memberCodeTxt                    : "+actmemberCodeTxt                    +" Value Expected : "+expmemberCodeTxt);
		System.out.println("memberMiddleNameTxt              : "+actmemberMiddleNameTxt              +" Value Expected : "+expmemberMiddleNameTxt);
		System.out.println("memberLastNameTxt                : "+actmemberLastNameTxt                +" Value Expected : "+expmemberLastNameTxt);
		System.out.println("memberTitleDropDown              : "+actmemberTitleDropDown              +" Value Expected : "+expmemberTitleDropDown);
		System.out.println("memberGenderDropdown             : "+actmemberGenderDropdown             +" Value Expected : "+expmemberGenderDropdown);
		System.out.println("memberActiveChkBox               : "+actmemberActiveChkBox               +" Value Expected : "+expmemberActiveChkBox);
		System.out.println("memberDobChkBox                  : "+actmemberDobChkBox                  +" Value Expected : "+expmemberDobChkBox);
		System.out.println("memberDobCalendarBtn             : "+actmemberDobCalendarBtn             +" Value Expected : "+expmemberDobCalendarBtn);
		System.out.println("memberAgeTxt                     : "+actmemberAgeTxt                     +" Value Expected : "+expmemberAgeTxt);
		System.out.println("memberMemberTypeTxt              : "+actmemberMemberTypeTxt              +" Value Expected : "+expmemberMemberTypeTxt);
		//System.out.println("memberAttachPhotoBtn             : "+actmemberAttachPhotoBtn             +" Value Expected : "+expmemberAttachPhotoBtn);
		System.out.println("memberSaveImgBtn                 : "+actmemberSaveImgBtn                 +" Value Expected : "+expmemberSaveImgBtn);
		System.out.println("memberEraseImgBtn                : "+actmemberEraseImgBtn                +" Value Expected : "+expmemberEraseImgBtn);
		System.out.println("memberAnniversaryDateChkBox      : "+actmemberAnniversaryDateChkBox      +" Value Expected : "+expmemberAnniversaryDateChkBox);
		System.out.println("memberAnniversaryDateCalendarBtn : "+actmemberAnniversaryDateCalendarBtn +" Value Expected : "+expmemberAnniversaryDateCalendarBtn);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerContactDetailsTab));
		headerContactDetailsTab.click();
		
		Thread.sleep(2000);
		
		boolean actmemberAddress1Txt                    = memberAddress1Txt.isDisplayed();
		boolean actmemberAddress2Txt                    = memberAddress2Txt.isDisplayed();
		boolean actmemberCountryTxt                     = memberCountryTxt.isDisplayed();
		boolean actmemberStateTxt                       = memberStateTxt.isDisplayed();
		boolean actmemberCityTxt                        = memberCityTxt.isDisplayed();
		boolean actmemberZipCodeTxt                     = memberZipCodeTxt.isDisplayed();
		boolean actmemberPreferedWayToContactDropdown   = memberPreferedWayToContactDropdown.isDisplayed();
		boolean actmemberPhoneResTxt                    = memberPhoneResTxt.isDisplayed();
		boolean actmemberPhoneOfcTxt                    = memberPhoneOfcTxt.isDisplayed();
		boolean actmemberMobileTxt                      = memberMobileTxt.isDisplayed();
		boolean actmemberEmailTxt                       = memberEmailTxt.isDisplayed();
		boolean actmemberFaxTxt                         = memberFaxTxt.isDisplayed();
		
		boolean expmemberAddress1Txt                    = true;
		boolean expmemberAddress2Txt                    = true;
		boolean expmemberCountryTxt                     = true;
		boolean expmemberStateTxt                       = true;
		boolean expmemberCityTxt                        = true;
		boolean expmemberZipCodeTxt                     = true;
		boolean expmemberPreferedWayToContactDropdown   = true;
		boolean expmemberPhoneResTxt                    = true;
		boolean expmemberPhoneOfcTxt                    = true;
		boolean expmemberMobileTxt                      = true;
		boolean expmemberEmailTxt                       = true;
		boolean expmemberFaxTxt                         = true;
		
		
		System.out.println("memberAddress1Txt                   : "+actmemberAddress1Txt                    +" Value Expected : "+expmemberAddress1Txt);
		System.out.println("memberAddress2Txt                   : "+actmemberAddress2Txt                    +" Value Expected : "+expmemberAddress2Txt);
		System.out.println("memberCountryTxt                    : "+actmemberCountryTxt                     +" Value Expected : "+expmemberCountryTxt);
		System.out.println("memberStateTxt                      : "+actmemberStateTxt                       +" Value Expected : "+expmemberStateTxt);
		System.out.println("memberCityTxt                       : "+actmemberCityTxt                        +" Value Expected : "+expmemberCityTxt);
		System.out.println("memberZipCodeTxt                    : "+actmemberZipCodeTxt                     +" Value Expected : "+expmemberZipCodeTxt);
		System.out.println("memberPreferedWayToContactDropdown  : "+actmemberPreferedWayToContactDropdown   +" Value Expected : "+expmemberPreferedWayToContactDropdown);
		System.out.println("memberPhoneResTxt                   : "+actmemberPhoneResTxt                    +" Value Expected : "+expmemberPhoneResTxt);
		System.out.println("memberPhoneOfcTxt                   : "+actmemberPhoneOfcTxt                    +" Value Expected : "+expmemberPhoneOfcTxt);
		System.out.println("memberMobileTxt                     : "+actmemberMobileTxt                      +" Value Expected : "+expmemberMobileTxt);
		System.out.println("memberEmailTxt                      : "+actmemberEmailTxt                       +" Value Expected : "+expmemberEmailTxt);
		System.out.println("memberFaxTxt                        : "+actmemberFaxTxt                         +" Value Expected : "+expmemberFaxTxt);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerOtherDetailsTab));
		headerOtherDetailsTab.click();
		
		Thread.sleep(2000);
		
		boolean actmemberPointsAccumlatedTxt            = memberPointsAccumlatedTxt.isDisplayed();
		boolean actmemberDeliveryChkBox                 = memberDeliveryChkBox.isDisplayed();
		boolean actmemberNearestOutletTxt               = memberNearestOutletTxt.isDisplayed();
		boolean actmemberDistanceFromOutletTxt          = memberDistanceFromOutletTxt.isDisplayed();
		boolean actmemberBlackListChkBox                = memberBlackListChkBox.isDisplayed();
		boolean actmemberReasonForBlackListTxt          = memberReasonForBlackListTxt.isDisplayed();
		boolean actmemberFavouriteBrandTxt              = memberFavouriteBrandTxt.isDisplayed();
		boolean actmemberProfessionDetailsTxt           = memberProfessionDetailsTxt.isDisplayed();
		boolean actmemberLastPurchaseDateChkBox         = memberLastPurchaseDateChkBox.isDisplayed();
		boolean actmemberLastPurchaseDateCalendarBtn    = memberLastPurchaseDateCalendarBtn.isDisplayed();
		boolean actmemberPointsRedemptionAccountTxt     = memberPointsRedemptionAccountTxt.isDisplayed();
		boolean actmemberCreditSalesAccountTxt          = memberCreditSalesAccountTxt.isDisplayed();
		
		boolean expmemberPointsAccumlatedTxt            = true;
		boolean expmemberDeliveryChkBox                 = true;
		boolean expmemberNearestOutletTxt               = true;
		boolean expmemberDistanceFromOutletTxt          = true;
		boolean expmemberBlackListChkBox                = true;
		boolean expmemberReasonForBlackListTxt          = true;
		boolean expmemberFavouriteBrandTxt              = true;
		boolean expmemberProfessionDetailsTxt           = true;
		boolean expmemberLastPurchaseDateChkBox         = true;
		boolean expmemberLastPurchaseDateCalendarBtn    = true;
		boolean expmemberPointsRedemptionAccountTxt     = true;
		boolean expmemberCreditSalesAccountTxt          = true;
		
		
		
		System.out.println("memberPointsAccumlatedTxt            : "+actmemberPointsAccumlatedTxt             +" Value Expected : "+expmemberPointsAccumlatedTxt);
		System.out.println("memberDeliveryChkBox                 : "+actmemberDeliveryChkBox                  +" Value Expected : "+expmemberDeliveryChkBox);
		System.out.println("memberNearestOutletTxt               : "+actmemberNearestOutletTxt                +" Value Expected : "+expmemberNearestOutletTxt);
		System.out.println("memberDistanceFromOutletTxt          : "+actmemberDistanceFromOutletTxt           +" Value Expected : "+expmemberDistanceFromOutletTxt);
		System.out.println("memberBlackListChkBox                : "+actmemberBlackListChkBox                 +" Value Expected : "+expmemberBlackListChkBox);
		System.out.println("memberReasonForBlackListTxt          : "+actmemberReasonForBlackListTxt           +" Value Expected : "+expmemberReasonForBlackListTxt);
		System.out.println("memberFavouriteBrandTxt              : "+actmemberFavouriteBrandTxt               +" Value Expected : "+expmemberFavouriteBrandTxt);
		System.out.println("memberProfessionDetailsTxt           : "+actmemberProfessionDetailsTxt            +" Value Expected : "+expmemberProfessionDetailsTxt);
		System.out.println("memberLastPurchaseDateChkBox         : "+actmemberLastPurchaseDateChkBox          +" Value Expected : "+expmemberLastPurchaseDateChkBox);
		System.out.println("memberLastPurchaseDateCalendarBtn    : "+actmemberLastPurchaseDateCalendarBtn     +" Value Expected : "+expmemberLastPurchaseDateCalendarBtn);
		System.out.println("memberPointsRedemptionAccountTxt     : "+actmemberPointsRedemptionAccountTxt      +" Value Expected : "+expmemberPointsRedemptionAccountTxt);
		System.out.println("memberCreditSalesAccountTxt          : "+actmemberCreditSalesAccountTxt           +" Value Expected : "+expmemberCreditSalesAccountTxt);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerCardDetailsTab));
		headerCardDetailsTab.click();
		
		Thread.sleep(2000);
		
		boolean actmemberPrimaryMemberToMergeCardTxt          = memberPrimaryMemberToMergeCardTxt.isDisplayed();
		boolean expmemberPrimaryMemberToMergeCardTxt 		  = true;
		
		int memberCardDetailsGridHeaderListCount = memberCardDetailsGridHeaderList.size();
		
		ArrayList<String> memberCardDetailsGridHeaderListArray = new ArrayList<String>();
		
		for(int i=0;i<memberCardDetailsGridHeaderListCount;i++)
		{
			String data = memberCardDetailsGridHeaderList.get(i).getText();
			
			memberCardDetailsGridHeaderListArray.add(data);
		}
		
		String actmemberCardDetailsGridHeaderList = memberCardDetailsGridHeaderListArray.toString();
		String expmemberCardDetailsGridHeaderList = "[, , Card Name, Card Number, Issue Date, Expiry Date, Active, , , , , , ]";
		
		
		System.out.println("memberPrimaryMemberToMergeCardTxt : "+actmemberPrimaryMemberToMergeCardTxt+" Value Expected : "+expmemberPrimaryMemberToMergeCardTxt);
		System.out.println("actmemberCardDetailsGridHeaderList   : "+actmemberCardDetailsGridHeaderList);
		System.out.println("expmemberCardDetailsGridHeaderList   : "+expmemberCardDetailsGridHeaderList);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerKycTab));
		headerKycTab.click();
		
		Thread.sleep(2000);
		
		
		int memberKycGridHeaderListCount = memberKycGridHeaderList.size();
		
		ArrayList<String> memberKycGridHeaderListArray = new ArrayList<String>();
		
		for(int i=0;i<memberKycGridHeaderListCount;i++)
		{
			String data = memberKycGridHeaderList.get(i).getText();
			
			memberKycGridHeaderListArray.add(data);
		}
		
		String actmemberKycGridHeaderList = memberKycGridHeaderListArray.toString();
		String expmemberKycGridHeaderList = "[, , , , , , , , , Name, Age, Relation, Mobile]";
		
		
		System.out.println("actmemberKycGridHeaderList : "+actmemberKycGridHeaderList);
		System.out.println("expmemberKycGridHeaderList : "+expmemberKycGridHeaderList);
		
		
		// Saving New Member
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberNameTxt));
		memberNameTxt.click();
		memberNameTxt.sendKeys("CreateMember");
		memberNameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberCodeTxt));
		memberCodeTxt.click();
		memberCodeTxt.sendKeys("CreateMember");
		memberCodeTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberMemberTypeTxt));
		memberMemberTypeTxt.click();
		memberMemberTypeTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		
		int memberMemberTypeBodyListCount = memberMemberTypeBodyList.size();
		
		for(int i=0;i<memberMemberTypeBodyListCount;i++)
		{
			String data = memberMemberTypeBodyList.get(i).getText();
			
			if(data.equalsIgnoreCase("TestMemeberType"))
			{
				memberMemberTypeBodyList.get(i).click();
				
				break;
			}
		}
		
		
		memberMemberTypeTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MastersSaveBtn));
		MastersSaveBtn.click();
		
		if(actnewHeaderTabList.equalsIgnoreCase(expnewHeaderTabList)
				&& actmemberNameTxt==expmemberNameTxt && actmemberCodeTxt==expmemberCodeTxt && actmemberMiddleNameTxt==expmemberMiddleNameTxt
				&& actmemberLastNameTxt==expmemberLastNameTxt && actmemberTitleDropDown==expmemberTitleDropDown && actmemberGenderDropdown==expmemberGenderDropdown
				&& actmemberActiveChkBox==expmemberActiveChkBox && actmemberDobChkBox==expmemberDobChkBox && actmemberDobCalendarBtn==expmemberDobCalendarBtn
				&& actmemberAgeTxt==expmemberAgeTxt && actmemberMemberTypeTxt==expmemberMemberTypeTxt /*&& actmemberAttachPhotoBtn==expmemberAttachPhotoBtn*/
				&& actmemberSaveImgBtn==expmemberSaveImgBtn && actmemberEraseImgBtn==expmemberEraseImgBtn && actmemberAnniversaryDateChkBox==expmemberAnniversaryDateChkBox
				&& actmemberAnniversaryDateCalendarBtn==expmemberAnniversaryDateCalendarBtn
				
				&& actmemberAddress1Txt==expmemberAddress1Txt && actmemberAddress2Txt==expmemberAddress2Txt && actmemberCountryTxt==expmemberCountryTxt
				&& actmemberStateTxt==expmemberStateTxt && actmemberCityTxt==expmemberCityTxt && actmemberZipCodeTxt==expmemberZipCodeTxt 
				&& actmemberPreferedWayToContactDropdown==expmemberPreferedWayToContactDropdown && actmemberPhoneResTxt==expmemberPhoneResTxt
				&& actmemberPhoneOfcTxt==expmemberPhoneOfcTxt && actmemberMobileTxt==expmemberMobileTxt && actmemberEmailTxt==expmemberEmailTxt
				&& actmemberFaxTxt==expmemberFaxTxt
				
				&& actmemberPointsAccumlatedTxt==expmemberPointsAccumlatedTxt && actmemberDeliveryChkBox==expmemberDeliveryChkBox && actmemberNearestOutletTxt==expmemberNearestOutletTxt
				&& actmemberDistanceFromOutletTxt==expmemberDistanceFromOutletTxt && actmemberBlackListChkBox==expmemberBlackListChkBox && actmemberReasonForBlackListTxt==expmemberReasonForBlackListTxt
				&& actmemberFavouriteBrandTxt==expmemberFavouriteBrandTxt && actmemberProfessionDetailsTxt==expmemberProfessionDetailsTxt && actmemberLastPurchaseDateChkBox==expmemberLastPurchaseDateChkBox
				&& actmemberLastPurchaseDateCalendarBtn==expmemberLastPurchaseDateCalendarBtn && actmemberPointsRedemptionAccountTxt==expmemberPointsRedemptionAccountTxt
				&& actmemberCreditSalesAccountTxt==expmemberCreditSalesAccountTxt
				
				&& actmemberPrimaryMemberToMergeCardTxt==expmemberPrimaryMemberToMergeCardTxt
				&& actmemberCardDetailsGridHeaderList.equalsIgnoreCase(expmemberCardDetailsGridHeaderList)
				&& actmemberKycGridHeaderList.equalsIgnoreCase(expmemberKycGridHeaderList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		} 
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  public boolean checkCreatedMemberThroughSelectMemberByNameInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Member"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Member by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMemberBtn));
		searchMemberBtn.click();
		
		Thread.sleep(2000);
		
		int memberBodyListCount = memberBodyList.size();
		
		ArrayList<String> memberBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<memberBodyListCount;i++)
		{
			String data = memberBodyList.get(i).getText();

			memberBodyListArray.add(data);
			
		}	
		
		String actmemberBodyList = memberBodyListArray.toString();
		String expmemberBodyList = "[TestMemberUpdate, TestMemberUpdate, , CreateMember, CreateMember, ]";
		
		System.out.println("actmemberBodyList : "+actmemberBodyList);
		System.out.println("expmemberBodyList : "+expmemberBodyList);
		
		for(int i=0;i<memberBodyListCount;i++)
		{
			String data = memberBodyList.get(i).getText();

			if(data.equalsIgnoreCase("CreateMember"))
			{
				//memberBodyList.get(i).click();
				getAction().doubleClick(memberBodyList.get(i)).build().perform();
				
				break;
			}
			
		}
		Thread.sleep(3000);
		
		String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessage = "Points definition do not exist for the selected member. Do you want to continue?";
		
		System.out.println("pointOfSalesConfirmationBodyMessage : "+actpointOfSalesConfirmationBodyMessage+" Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonMemberBtn));
		userribbonMemberBtn.click();
		
		Thread.sleep(2000);
		
		String actmemberNameDisplay = memberNameDisplay.getText();
		String actmemberTypeDisplay = memberTypeDisplay.getText();
		
		String expmemberNameDisplay = "";
		String expmemberTypeDisplay = "";
		
		System.out.println("memberNameDisplay : "+actmemberNameDisplay+" Value Expected : "+expmemberNameDisplay);
		System.out.println("memberTypeDisplay : "+actmemberTypeDisplay+" Value Expected : "+expmemberTypeDisplay);
		

		if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage) && actmemberNameDisplay.equalsIgnoreCase(expmemberNameDisplay)
				&& actmemberTypeDisplay.equalsIgnoreCase(expmemberTypeDisplay) && actmemberBodyList.equalsIgnoreCase(expmemberBodyList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  

  public boolean checkClearMemberInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Member"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Clear Member"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonMemberBtn));
		userribbonMemberBtn.click();
		
		boolean actmemberNameDisplay = memberNameDisplay.getText().isEmpty();
		boolean actmemberTypeDisplay = memberTypeDisplay.getText().isEmpty();
		
		boolean expmemberNameDisplay = true;
		boolean expmemberTypeDisplay = true;
		

		if(actmemberNameDisplay==expmemberNameDisplay && actmemberTypeDisplay==expmemberTypeDisplay)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  public boolean checkCreatedMemberThroughSelectMemberByTelephoneInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Member"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Member by Telephone"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMemberBtn));
		searchMemberBtn.click();
		
		Thread.sleep(2000);
		
		int memberBodyListCount = memberBodyList.size();
		
		ArrayList<String> memberBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<memberBodyListCount;i++)
		{
			String data = memberBodyList.get(i).getText();

			memberBodyListArray.add(data);
			
		}	
		
		String actmemberBodyList = memberBodyListArray.toString();
		String expmemberBodyList = "[TestMemberUpdate, TestMemberUpdate, 0, CreateMember, CreateMember, 0]";
		
		System.out.println("actmemberBodyList : "+actmemberBodyList);
		System.out.println("expmemberBodyList : "+expmemberBodyList);
		
		for(int i=0;i<memberBodyListCount;i++)
		{
			String data = memberBodyList.get(i).getText();

			if(data.equalsIgnoreCase("CreateMember"))
			{
				//memberBodyList.get(i).click();
				
				getAction().doubleClick(memberBodyList.get(i)).build().perform();
				
				break;
			}
			
		}
		Thread.sleep(2000);
		
		String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessage = "Points definition do not exist for the selected member. Do you want to continue?";
		
		System.out.println("pointOfSalesConfirmationBodyMessage : "+actpointOfSalesConfirmationBodyMessage+" Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonMemberBtn));
		userribbonMemberBtn.click();
		
		Thread.sleep(2000);
		
		String actmemberNameDisplay = memberNameDisplay.getText();
		String actmemberTypeDisplay = memberTypeDisplay.getText();
		
		String expmemberNameDisplay = "";
		String expmemberTypeDisplay = "";
		
		System.out.println("memberNameDisplay : "+actmemberNameDisplay+" Value Expected : "+expmemberNameDisplay);
		System.out.println("memberTypeDisplay : "+actmemberTypeDisplay+" Value Expected : "+expmemberTypeDisplay);
		

		if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage) && actmemberNameDisplay.equalsIgnoreCase(expmemberNameDisplay)
				&& actmemberTypeDisplay.equalsIgnoreCase(expmemberTypeDisplay) && actmemberBodyList.equalsIgnoreCase(expmemberBodyList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  public boolean checkViewMemberInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("View Member"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberMemberTypeTxt));
		
		String actmemberMemberTypeTxt = memberMemberTypeTxt.getAttribute("value");
		String expmemberMemberTypeTxt ="TestMemberType";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberNameTxt));
		memberNameTxt.click();
		
		String actmemberNameTxt = memberNameTxt.getAttribute("value");
		String expmemberNameTxt = "CreateMember";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberCodeTxt));
		memberCodeTxt.click();

		String actmemberCodeTxt = memberCodeTxt.getAttribute("value");
		String expmemberCodeTxt = "CreateMember";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MasterCloseBtn));
		MasterCloseBtn.click();
		
		System.out.println("memberMemberTypeTxt : "+actmemberMemberTypeTxt+" Value Expected : "+expmemberMemberTypeTxt);
		System.out.println("memberNameTxt       : "+actmemberNameTxt      +" Value Expected : "+expmemberNameTxt);
		System.out.println("memberCodeTxt       : "+actmemberCodeTxt      +" Value Expected : "+expmemberCodeTxt);
		
		
		if(actmemberMemberTypeTxt.equalsIgnoreCase(expmemberMemberTypeTxt) && actmemberNameTxt.equalsIgnoreCase(expmemberNameTxt)
				&& actmemberCodeTxt.equalsIgnoreCase(expmemberCodeTxt))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  public boolean checkEditMemberInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Edit Member"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberNameTxt));
		memberNameTxt.click();
		memberNameTxt.sendKeys(Keys.END);
		memberNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		memberNameTxt.sendKeys("CreateMemberUpdate");
		memberNameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberCodeTxt));
		memberCodeTxt.sendKeys(Keys.END);
		memberCodeTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		memberCodeTxt.sendKeys("CreateMemberUpdate");
		memberCodeTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MastersSaveBtn));
		MastersSaveBtn.click();
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonMemberBtn));
		userribbonMemberBtn.click();
		
		Thread.sleep(2000);
		
		String actmemberNameDisplay = memberNameDisplay.getText();
		String actmemberTypeDisplay = memberTypeDisplay.getText();
		
		String expmemberNameDisplay = "";
		String expmemberTypeDisplay = "";
		
		System.out.println("memberNameDisplay : "+actmemberNameDisplay+" Value Expected : "+expmemberNameDisplay);
		System.out.println("memberTypeDisplay : "+actmemberTypeDisplay+" Value Expected : "+expmemberTypeDisplay);
		
		if(actmemberNameDisplay.equalsIgnoreCase(expmemberNameDisplay) && actmemberTypeDisplay.equalsIgnoreCase(expmemberTypeDisplay))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  @FindBy(xpath="//tbody[@id='tbodySearchEmployee']/tr/td")
  private static List<WebElement> employeeBodyList; 
  
  public boolean checkSelectEmployeeyCodeInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Employee"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Employee by Code"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchEmployeeBtn));
		searchEmployeeBtn.click();
		
		Thread.sleep(2000);
		
		int employeeBodyListCount = employeeBodyList.size();
		
		ArrayList<String> employeeBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<employeeBodyListCount;i++)
		{
			String data = employeeBodyList.get(i).getText();

			employeeBodyListArray.add(data);
			
		}	
		
		String actemployeeBodyList = employeeBodyListArray.toString();
		String expemployeeBodyList = "[E2, SalesMan, E3, SalesMan]";
		
		System.out.println("actemployeeBodyList : "+actemployeeBodyList);
		System.out.println("expemployeeBodyList : "+expemployeeBodyList);
		
		for(int i=0;i<employeeBodyListCount;i++)
		{
			String data = employeeBodyList.get(i).getText();

			if(data.equalsIgnoreCase("E3"))
			{
				getAction().doubleClick(employeeBodyList.get(i)).build().perform();
				
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonSalesBtn));
		userribbonSalesBtn.click();
		
		Thread.sleep(2000);
		
		String actemployeeNameDisplay = employeeNameDisplay.getText();
		
		String expemployeeNameDisplay = "";
		
		System.out.println("employeeNameDisplay : "+actemployeeNameDisplay+" Value Expected : "+expemployeeNameDisplay);

	
		
		if(actemployeeBodyList.equalsIgnoreCase(expemployeeBodyList) && actemployeeNameDisplay.equalsIgnoreCase(expemployeeNameDisplay))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
 
  
  @FindBy(xpath="//input[@id='txtSearchEmployeeByCard']")
  private static WebElement employeeBarCodeTxt;
  
  @FindBy(xpath="//div[@class='col-lg-7 col-md-7 col-sm-7 col-xs-7 input-group searchstyle']//span[@class='input-group-addon']")
  private static WebElement employeeBarCodeSearchBtn;
  
  @FindBy(xpath="//span[@class='pos-modal-header-close']//img")
  private static WebElement employeeBarCodeCloseBtn;
  
  public boolean checkSelectEmployeeByBarCodeCardInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Employee"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Employee by Barcode/Card"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(employeeBarCodeTxt));
		
		boolean actemployeeBarCodeTxt         = employeeBarCodeTxt.isDisplayed();
		boolean actemployeeBarCodeSearchBtn   = employeeBarCodeSearchBtn.isDisplayed();
		boolean actemployeeBarCodeCloseBtn    = employeeBarCodeCloseBtn.isDisplayed();
		
		boolean expemployeeBarCodeTxt         = true;
		boolean expemployeeBarCodeSearchBtn   = true;
		boolean expemployeeBarCodeCloseBtn    = true;
		
		System.out.println("employeeBarCodeTxt        : "+actemployeeBarCodeTxt       +" Value Expected : "+expemployeeBarCodeTxt);
		System.out.println("employeeBarCodeSearchBtn  : "+actemployeeBarCodeSearchBtn +" Value Expected : "+expemployeeBarCodeSearchBtn);
		System.out.println("employeeBarCodeCloseBtn   : "+actemployeeBarCodeCloseBtn  +" Value Expected : "+expemployeeBarCodeCloseBtn);
		
		employeeBarCodeTxt.sendKeys("Employee2");
		
		employeeBarCodeSearchBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toastMessage));
		
		String expMessage = "Employee not Found";
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(employeeBarCodeCloseBtn));
		employeeBarCodeCloseBtn.click();
		
		
		if(actemployeeBarCodeTxt==expemployeeBarCodeTxt && actemployeeBarCodeSearchBtn==expemployeeBarCodeSearchBtn
				&& actemployeeBarCodeCloseBtn==expemployeeBarCodeCloseBtn)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  public boolean checkClearEmployeeInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Employee"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Clear Employee"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonSalesBtn));
		userribbonSalesBtn.click();
		
		Thread.sleep(2000);
		
		boolean actemployeeNameDisplay = employeeNameDisplay.getText().isEmpty();
		
		boolean expemployeeNameDisplay = true;
		

		if(actemployeeNameDisplay==expemployeeNameDisplay)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  public boolean checkSelectEmployeebyAliasInPosScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Employee"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Employee by Alias"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchEmployeeBtn));
		searchEmployeeBtn.click();
		
		Thread.sleep(2000);
		
		int employeeBodyListCount = employeeBodyList.size();
		
		ArrayList<String> employeeBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<employeeBodyListCount;i++)
		{
			String data = employeeBodyList.get(i).getText();

			employeeBodyListArray.add(data);
			
		}	
		
		String actemployeeBodyList = employeeBodyListArray.toString();
		String expemployeeBodyList = "[Employee2, SalesMan, Employee3, SalesMan]";
		
		System.out.println("actemployeeBodyList : "+actemployeeBodyList);
		System.out.println("expemployeeBodyList : "+expemployeeBodyList);
		
		for(int i=0;i<employeeBodyListCount;i++)
		{
			String data = employeeBodyList.get(i).getText();

			if(data.equalsIgnoreCase("Employee2"))
			{
				getAction().doubleClick(employeeBodyList.get(i)).build().perform();
				
				break;
			}
			
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backBtn));
		backBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonSalesBtn));
		userribbonSalesBtn.click();
		
		Thread.sleep(2000);
		
		String actemployeeNameDisplay = employeeNameDisplay.getText();
		
		String expemployeeNameDisplay = "";
		
		System.out.println("employeeNameDisplay : "+actemployeeNameDisplay+" Value Expected : "+expemployeeNameDisplay);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonPickOutPutBtn));
		userribbonPickOutPutBtn.click();

		String actLogoutMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expLogoutMessage = "Are you sure to logout?";
		
		System.out.println("LogoutMessage : "+actLogoutMessage+" Value Expected : "+expLogoutMessage);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(2000);
		
		String actDayEndMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expDayEndMessage = "'Day End' is not done, do you want to do 'Day End'?";
		
		System.out.println("DayEndMessage : "+actDayEndMessage+" Value Expected : "+expDayEndMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmCancelBtn));
		posConfirmCancelBtn.click();
		
		Thread.sleep(3000);
		
		
		if(actemployeeBodyList.equalsIgnoreCase(expemployeeBodyList) && actemployeeNameDisplay.equalsIgnoreCase(expemployeeNameDisplay))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  // Saving Counter , Outlet and Gift Vouhcers
  
  public boolean checkSavingCounter2AndOutlet2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
	  try
	  {
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
		pointOfSale.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counter));
		counter.click();
		
		Thread.sleep(2000);
		
		int posNameListCount = posNameList.size();
	 		
		for(int i=0;i<posNameListCount;i++)
		{
			String data= posNameList.get(i).getText();
			
			if(data.equalsIgnoreCase("Counter Update"))
			{
				posListChkBox.get(i).click();
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloneBtn));	
		masterCloneBtn.click();
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterNameTxt));
		counterNameTxt.click();
		counterNameTxt.sendKeys("Counter2");
		counterNameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterCodeTxt));
		counterCodeTxt.click();
		counterCodeTxt.sendKeys("Counter2");
		counterCodeTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(counterMacAddressTxt));
		counterMacAddressTxt.click();
		counterMacAddressTxt.sendKeys(Keys.END);
		counterMacAddressTxt.sendKeys(Keys.BACK_SPACE);
		counterMacAddressTxt.sendKeys("8");
		counterMacAddressTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		 
		String expSavingMessage="Saved Successfully";
		
		String actSavingMessage=checkValidationMessage(expSavingMessage);
		
		System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
		pointOfSale.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outlet));
		outlet.click();
		
		Thread.sleep(2000);
		
		int posNameListCountOutlet = posNameList.size();
	 		
		for(int i=0;i<posNameListCountOutlet;i++)
		{
			String data= posNameList.get(i).getText();
			
			if(data.equalsIgnoreCase("Outlet1"))
			{
				posListChkBox.get(i).click();
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloneBtn));	
		masterCloneBtn.click();
		
		Thread.sleep(2000);
		
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletNameTxt));
		outletNameTxt.click();
		outletNameTxt.sendKeys("Outlet2");
		outletNameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletCodeTxt));
		outletCodeTxt.click();
		outletCodeTxt.sendKeys("Outlet2");
		outletCodeTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
		placeofSupplyTxt.click();
		placeofSupplyTxt.sendKeys(Keys.END);
		placeofSupplyTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		placeofSupplyTxt.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		placeofSupplyTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		 
		String expMessage="Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
		
		
		
		if(actSavingMessage.equalsIgnoreCase(expSavingMessage) && actMessage.equalsIgnoreCase(expMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	catch (Exception e) 
	{
		  String exception =e.getMessage();
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	}
}
  
  

	public boolean checkGiftVoucherDefinitionHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
			pointOfSale.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(giftVoucher));
			giftVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(giftVoucherDefinition));
			giftVoucherDefinition.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
			     
			boolean actmasterNewBtn    	 		   =masterNewBtn.isDisplayed();
			boolean actmasterAddGroupBtn    	   =masterAddGroupBtn.isDisplayed();
			boolean actmasterEditBtn 			   =masterEditBtn.isDisplayed();
			boolean actmasterCloneBtn 			   =masterCloneBtn.isDisplayed();
			boolean actmasterPropertiesBtn 		   =masterPropertiesBtn.isDisplayed();
			boolean actmasterDeleteBtn 			   =masterDeleteBtn.isDisplayed();
			boolean actmasterCloseBtn 		 	   =masterCloseBtn.isDisplayed();
			boolean actmasterRibbonToExpandOptions =masterRibbonToExpandOptions.isDisplayed();
			
			boolean expmasterNewBtn    	 			=true;
			boolean expmasterAddGroupBtn    		=true;
			boolean expmasterEditBtn 				=true;
			boolean expmasterCloneBtn 				=true;
			boolean expmasterPropertiesBtn 			=true;
			boolean expmasterDeleteBtn 				=true;
			boolean expmasterCloseBtn 				=true;
			boolean expmasterRibbonToExpandOptions 	=true;
			
			
			
			System.out.println("masterNewBtn                  : "+actmasterNewBtn                +" Value Expected : "+expmasterNewBtn);
			System.out.println("masterAddGroupBtn             : "+actmasterAddGroupBtn           +" Value Expected : "+expmasterAddGroupBtn);
			System.out.println("masterEditBtn                 : "+actmasterEditBtn               +" Value Expected : "+expmasterEditBtn);
			System.out.println("masterCloneBtn                : "+actmasterCloneBtn              +" Value Expected : "+expmasterCloneBtn);
			System.out.println("masterPropertiesBtn           : "+actmasterPropertiesBtn         +" Value Expected : "+expmasterPropertiesBtn);
			System.out.println("masterDeleteBtn               : "+actmasterDeleteBtn             +" Value Expected : "+expmasterDeleteBtn);
			System.out.println("masterCloseBtn                : "+actmasterCloseBtn              +" Value Expected : "+expmasterCloseBtn);
			System.out.println("masterRibbonToExpandOptions   : "+actmasterRibbonToExpandOptions +" Value Expected : "+expmasterRibbonToExpandOptions);
				
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
			masterRibbonToExpandOptions.click();
				 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));	
			
			boolean actmasterGroupBtn    	 													=masterGroupBtn.isDisplayed();
			boolean actmasterDeleteAllBtn    	 												=masterDeleteAllBtn.isDisplayed();
			boolean actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
			boolean actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
			boolean actmasterAdvanceMasterImportORExportBtn    	 								=masterAdvanceMasterImportORExportBtn.isDisplayed();
			boolean actmasterAuthorInfoBtn    	 												=masterAuthorInfoBtn.isDisplayed();
			boolean actmasterMoveUpBtn    	 													=masterMoveUpBtn.isDisplayed();
			boolean actmasterMoveDownBtn    	 												=masterMoveDownBtn.isDisplayed();
			boolean actmasterSortBtn    	 													=masterSortBtn.isDisplayed();
			boolean actmasterMassUpdateBtn    	 												=masterMassUpdateBtn.isDisplayed();
			boolean actmasterImportFromXmlBtn    	 											=masterImportFromXmlBtn.isDisplayed();
			
			boolean expmasterGroupBtn    	 													=true;
			boolean expmasterDeleteAllBtn    	 												=true;
			boolean expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=true;
			boolean expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=true;
			boolean expmasterAdvanceMasterImportORExportBtn    	 								=true;
			boolean expmasterAuthorInfoBtn    	 												=true;
			boolean expmasterMoveUpBtn    	 													=true;
			boolean expmasterMoveDownBtn    	 												=true;
			boolean expmasterSortBtn    	 													=true;
			boolean expmasterMassUpdateBtn    	 												=true;
			boolean expmasterImportFromXmlBtn    	 											=true;
			
			
			
			System.out.println("masterGroupBtn                                                      : "+actmasterGroupBtn                                                      +" Value Expected : "+expmasterGroupBtn);
			System.out.println("masterDeleteAllBtn                                                  : "+actmasterDeleteAllBtn                                                  +" Value Expected : "+expmasterDeleteAllBtn);
			System.out.println("masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity : "+actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity +" Value Expected : "+expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity);
			System.out.println("masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          : "+actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          +" Value Expected : "+expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState);
			System.out.println("masterAdvanceMasterImportORExportBtn                                : "+actmasterAdvanceMasterImportORExportBtn                                +" Value Expected : "+expmasterAdvanceMasterImportORExportBtn);
			System.out.println("masterAuthorInfoBtn                                                 : "+actmasterAuthorInfoBtn                                                 +" Value Expected : "+expmasterAuthorInfoBtn);
			System.out.println("masterMoveUpBtn                                                     : "+actmasterMoveUpBtn                                                     +" Value Expected : "+expmasterMoveUpBtn);
			System.out.println("masterMoveDownBtn                                                   : "+actmasterMoveDownBtn                                                   +" Value Expected : "+expmasterMoveDownBtn);
			System.out.println("masterSortBtn                                                       : "+actmasterSortBtn                                                       +" Value Expected : "+expmasterSortBtn);
			System.out.println("masterMassUpdateBtn                                                 : "+actmasterMassUpdateBtn                                                 +" Value Expected : "+expmasterMassUpdateBtn);
			System.out.println("masterImportFromXmlBtn                                              : "+actmasterImportFromXmlBtn                                              +" Value Expected : "+expmasterImportFromXmlBtn);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
			 
			masterRibbonControlNextBtn.click(); 
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizemasterBtn));	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
			
			boolean actmasterExportFormatToXmlBtn     =masterExportFormatToXmlBtn.isDisplayed();
			
			boolean actmasterCustamizemasterBtn    	  =masterCustamizemasterBtn.isDisplayed();
			boolean actmasterCustamizeViewBtn    	  =masterCustamizeViewBtn.isDisplayed();
			boolean actmastercustamizeTreeBtn    	  =mastercustamizeTreeBtn.isDisplayed();
			
			boolean expmasterExportFormatToXmlBtn     =true;
			 
			boolean expmasterCustamizemasterBtn    	  =true;
			boolean expmasterCustamizeViewBtn    	  =true;
			boolean expmastercustamizeTreeBtn    	  =true;
			 
			 
			System.out.println("masterExportFormatToXmlBtn         : "+actmasterExportFormatToXmlBtn         +" Value Expected : "+expmasterExportFormatToXmlBtn);
			System.out.println("masterCustamizemasterBtn           : "+actmasterCustamizemasterBtn           +" Value Expected : "+expmasterCustamizemasterBtn);
			System.out.println("masterCustamizeViewBtn             : "+actmasterCustamizeViewBtn             +" Value Expected : "+expmasterCustamizeViewBtn);
			System.out.println("mastercustamizeTreeBtn             : "+actmastercustamizeTreeBtn             +" Value Expected : "+expmastercustamizeTreeBtn);
				
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizemasterBtn));
			masterCustamizemasterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(headerDetailsTAB));
			headerDetailsTAB.click();
			
			Thread.sleep(2000);
			
			int fcaptionListCount = fcaptionList.size();
			
			for(int i=0;i<fcaptionListCount;i++)
			{
				String data = fcaptionList.get(i).getText();
				
				if(data.equalsIgnoreCase("Starting Series Number"))
				{
					cusEditBtnList.get(i).click();
					
					break;
				}
			}
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
			propertiesTab.click();
			
			Thread.sleep(3000);
			
			if(hiddenChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hiddenChkBox));
				hiddenChkBox.click();
			}
			
			Thread.sleep(1000);
	       
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okbtn));
			okbtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Masokbtn));
			Masokbtn.click();
			
			if(actmasterNewBtn==expmasterNewBtn && actmasterAddGroupBtn==expmasterAddGroupBtn && actmasterEditBtn==expmasterEditBtn
					&& actmasterCloneBtn==expmasterCloneBtn && actmasterPropertiesBtn==expmasterPropertiesBtn && actmasterDeleteBtn==expmasterDeleteBtn
					&& actmasterCloseBtn==expmasterCloseBtn && actmasterRibbonToExpandOptions==expmasterRibbonToExpandOptions
					
					&& actmasterGroupBtn==expmasterGroupBtn && actmasterDeleteAllBtn==expmasterDeleteAllBtn 
					&& actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity==expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity
					&& actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState==expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState 
					&& actmasterAdvanceMasterImportORExportBtn==expmasterAdvanceMasterImportORExportBtn
					&& actmasterAuthorInfoBtn==expmasterAuthorInfoBtn && actmasterMoveUpBtn==expmasterMoveUpBtn && actmasterMoveDownBtn==expmasterMoveDownBtn
					&& actmasterSortBtn==expmasterSortBtn && actmasterMassUpdateBtn==expmasterMassUpdateBtn && actmasterImportFromXmlBtn==expmasterImportFromXmlBtn
					&& actmasterExportFormatToXmlBtn==expmasterExportFormatToXmlBtn
					
					&& actmasterCustamizemasterBtn==expmasterCustamizemasterBtn && actmasterCustamizeViewBtn==expmasterCustamizeViewBtn  
					&& actmastercustamizeTreeBtn==expmastercustamizeTreeBtn )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	@FindBy(xpath="//span[contains(text(),'Header Details')]")
	public static WebElement headerDetailsTAB; 
	
	@FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_default']/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[2]/ul[1]/li[2]/a[1]/span[1]")
	public static WebElement propertiesTab; 
	
	@FindBy(xpath="//input[@id='FieldsDetails_IsHidden']")
	public static WebElement hiddenChkBox; 
	
	@FindBy(xpath="//*[@id='extraFieldContainer_div']/div[1]/div[1]/div[1]/span")
	public static WebElement okbtn; 
	
	@FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_default']/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[5]/div[1]/span[1]")
	public static WebElement Masokbtn; 
	
	
	@FindBy(xpath="//*[@id='HeaderDetails_0']/div/div/table/tbody/tr/td[4]")
	public static List<WebElement> fcaptionList; 
	
	@FindBy(xpath="//*[@id='HeaderDetails_0']/div/div/table/tbody/tr/td[1]/i[1]")
	public static List<WebElement> cusEditBtnList; 

	
	@FindBy(xpath="//input[@id='sName']")
	private static WebElement gvdNameTxt;
	
	@FindBy(xpath="//input[@id='sCode']")
	private static WebElement gvdCodeTxt;
	
	@FindBy(xpath="//input[@id='iCurrency']")
	private static WebElement gvdCurrencyTxt;
	
	@FindBy(xpath="//input[@id='fDenomination']")
	private static WebElement gvdDenominationTxt;
	
	@FindBy(xpath="//input[@id='bInternal']")
	private static WebElement gvdInternalChkBox;
	
	@FindBy(xpath="//input[@id='bValidityApplicable']")
	private static WebElement gvdValidityApplicableChkBox;
	
	@FindBy(xpath="//input[@id='iAccount']")
	private static WebElement gvdAccountTxt;
	
	@FindBy(xpath="//input[@id='iGracePeriodForValidity']")
	private static WebElement gvdGracePeriodForValidity;
	
	@FindBy(xpath="//select[@id='iValidity']")
	private static WebElement gvdValidityDropDown;
	

	public boolean checkNewOptionInGiftVoucherDefintionAndAvailableFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			boolean actgvdNameTxt                   = gvdNameTxt.isDisplayed();
			boolean actgvdCodeTxt                   = gvdCodeTxt.isDisplayed();
			boolean actgvdCurrencyTxt               = gvdCurrencyTxt.isDisplayed();
			boolean actgvdDenominationTxt           = gvdDenominationTxt.isDisplayed();
			boolean actgvdInternalChkBox            = gvdInternalChkBox.isDisplayed();
			boolean actgvdValidityApplicableChkBox  = gvdValidityApplicableChkBox.isDisplayed();
			boolean actgvdAccountTxt                = gvdAccountTxt.isDisplayed();
			boolean actgvdGracePeriodForValidity    = gvdGracePeriodForValidity.isDisplayed();
			boolean actgvdValidityDropDown          = gvdValidityDropDown.isDisplayed();
			
			boolean expgvdNameTxt                   = true;
			boolean expgvdCodeTxt                   = true;
			boolean expgvdCurrencyTxt               = true;
			boolean expgvdDenominationTxt           = true;
			boolean expgvdInternalChkBox            = true;
			boolean expgvdValidityApplicableChkBox  = true;
			boolean expgvdAccountTxt                = true;
			boolean expgvdGracePeriodForValidity    = true;
			boolean expgvdValidityDropDown          = true;
			
			System.out.println("gvdNameTxt                  : "+actgvdNameTxt                  +" Value Expected : "+expgvdNameTxt);
			System.out.println("gvdCodeTxt                  : "+actgvdCodeTxt                  +" Value Expected : "+expgvdCodeTxt);
			System.out.println("gvdCurrencyTxt              : "+actgvdCurrencyTxt              +" Value Expected : "+expgvdCurrencyTxt);
			System.out.println("gvdDenominationTxt          : "+actgvdDenominationTxt          +" Value Expected : "+expgvdDenominationTxt);
			System.out.println("gvdInternalChkBox           : "+actgvdInternalChkBox           +" Value Expected : "+expgvdInternalChkBox);
			System.out.println("gvdValidityApplicableChkBox : "+actgvdValidityApplicableChkBox +" Value Expected : "+expgvdValidityApplicableChkBox);
			System.out.println("gvdAccountTxt               : "+actgvdAccountTxt               +" Value Expected : "+expgvdAccountTxt);
			System.out.println("gvdGracePeriodForValidity   : "+actgvdGracePeriodForValidity   +" Value Expected : "+expgvdGracePeriodForValidity);
			System.out.println("gvdValidityDropDown         : "+actgvdValidityDropDown         +" Value Expected : "+expgvdValidityDropDown);
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			
			if(actgvdNameTxt==expgvdNameTxt && actgvdCodeTxt==expgvdCodeTxt && actgvdCurrencyTxt==expgvdCurrencyTxt && actgvdDenominationTxt==expgvdDenominationTxt
					&& actgvdInternalChkBox==expgvdInternalChkBox && actgvdValidityApplicableChkBox==expgvdValidityApplicableChkBox 
					&& actgvdAccountTxt==expgvdAccountTxt && actgvdGracePeriodForValidity==expgvdGracePeriodForValidity && actgvdValidityDropDown==expgvdValidityDropDown)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	@FindBy(xpath="//input[@id='sStartingSeriesNumber']")
	private static WebElement startingSeriesNumberTxt;


	public boolean checkSavingGiftVoucherDefinitionWithAllMandateFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
			gvdNameTxt.click();
			gvdNameTxt.sendKeys("GiftVoucher");
			gvdNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
			gvdCodeTxt.click();
			gvdCodeTxt.sendKeys("GiftVoucher");
			gvdCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCurrencyTxt));
			gvdCurrencyTxt.click();
			gvdCurrencyTxt.sendKeys("Indian Rupees");
			Thread.sleep(2000);
			gvdCurrencyTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdDenominationTxt));
			gvdDenominationTxt.click();
			gvdDenominationTxt.sendKeys(Keys.END);
			gvdDenominationTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			gvdDenominationTxt.sendKeys("10");
			Thread.sleep(2000);
			gvdDenominationTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingSeriesNumberTxt));
			startingSeriesNumberTxt.click();
			startingSeriesNumberTxt.sendKeys(Keys.END);
			startingSeriesNumberTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			startingSeriesNumberTxt.sendKeys("001");
			Thread.sleep(2000);
			startingSeriesNumberTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdAccountTxt));
			gvdAccountTxt.click();
			gvdAccountTxt.sendKeys(Keys.END);
			gvdAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			gvdAccountTxt.sendKeys("Coupon Account");
			Thread.sleep(2000);
			gvdAccountTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			 
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			if(actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	

	public boolean checkSavedGiftVoucherDefinitionAndEditing() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("GiftVoucher") && posListChkBox.get(i).isSelected()==false)
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
			gvdNameTxt.click();
			
			String actgvdNameTxt = gvdNameTxt.getAttribute("value");
			String expgvdNameTxt = "GiftVoucher";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
			gvdCodeTxt.click();

			String actgvdCodeTxt = gvdCodeTxt.getAttribute("value");
			String expgvdCodeTxt = "GiftVoucher";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
			gvdNameTxt.click();
			gvdNameTxt.clear();
			gvdNameTxt.sendKeys("GiftVoucher1");
			gvdNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
			gvdCodeTxt.click();
			gvdCodeTxt.clear();
			gvdCodeTxt.sendKeys("GiftVoucher1");
			gvdCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="Updated Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			
			System.out.println("gvdNameTxt : "+actgvdNameTxt+" Value Expected : "+expgvdNameTxt);
			System.out.println("gvdCodeTxt : "+actgvdCodeTxt+" Value Expected : "+expgvdCodeTxt);
				 
			
			if(actgvdNameTxt.equalsIgnoreCase(expgvdNameTxt) && actgvdCodeTxt.equalsIgnoreCase(expgvdCodeTxt)
					&& actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	

	
	
	public boolean checkUpdatedGiftVoucherDefintionAndSaveGVDUsingCloneOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("GiftVoucher1"))
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				if(posListChkBox.get(i).isSelected()==false)
  	 				{
  	 					posListChkBox.get(i).click();
  	 				}
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
  	 		masterEditBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
			gvdNameTxt.click();
			
			String actgvdNameTxt = gvdNameTxt.getAttribute("value");
			String expgvdNameTxt = "GiftVoucher1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
			gvdCodeTxt.click();

			String actgvdCodeTxt = gvdCodeTxt.getAttribute("value");
			String expgvdCodeTxt = "GiftVoucher1";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloneBtn));
			editcloneBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
			gvdNameTxt.click();
			gvdNameTxt.sendKeys("GiftVoucherToDelete");
			gvdNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
			gvdCodeTxt.click();
			gvdCodeTxt.sendKeys("GiftVoucherToDelete");
			gvdCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="Saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			System.out.println("gvdNameTxt : "+actgvdNameTxt+" Value Expected : "+expgvdNameTxt);
			System.out.println("gvdCodeTxt : "+actgvdCodeTxt+" Value Expected : "+expgvdCodeTxt);
				 
			
			if(actgvdNameTxt.equalsIgnoreCase(expgvdNameTxt) && actgvdCodeTxt.equalsIgnoreCase(expgvdCodeTxt)
					&& actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	

	
	public static boolean checkSaveGVDThroughMasterCloneOptionAndDeleteGiftVoucherDefintion() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			if(selectAllHeaderChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			if(selectAllHeaderChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("GiftVoucher1"))
  	 			{
  	 				posNameList.get(i).click();
  	 				
  	 				if(posListChkBox.get(i).isSelected()==false)
  	 				{
  	 					posListChkBox.get(i).click();
  	 				}
  	 				break;
  	 			}
  	 		}
  	 		
  	 		
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloneBtn));
  	 		masterCloneBtn.click();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
			gvdNameTxt.click();
			gvdNameTxt.clear();
			gvdNameTxt.sendKeys("GiftVoucher2");
			gvdNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
			gvdCodeTxt.click();
			gvdCodeTxt.clear();
			gvdCodeTxt.sendKeys("GiftVoucher2");
			gvdCodeTxt.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdInternalChkBox));
			gvdInternalChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingSeriesNumberTxt));
			startingSeriesNumberTxt.click();
			startingSeriesNumberTxt.sendKeys(Keys.END);
			startingSeriesNumberTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			startingSeriesNumberTxt.sendKeys("100");
			Thread.sleep(2000);
			startingSeriesNumberTxt.sendKeys(Keys.TAB);
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			 
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			
			Thread.sleep(2000);
			
			if(selectAllHeaderChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			if(selectAllHeaderChkBox.isSelected()==true)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllHeaderChkBox));
				selectAllHeaderChkBox.click();
			}
			
			int posNameListCount1 = posNameList.size();
  	 		
  	 		for(int i=0;i<posNameListCount1;i++)
  	 		{
  	 			String data= posNameList.get(i).getText();
  	 			
  	 			if(data.equalsIgnoreCase("GiftVoucherToDelete"))
  	 			{
  	 				posNameList.get(i).click();
  	 				posListChkBox.get(i).click();
  	 				
  	 				break;
  	 			}
  	 		}
			 
			 
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
  	 		masterDeleteBtn.click();
	         
  	 		Thread.sleep(2000);
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
  	 		System.out.println(getMsgOnDelete.getText());
	         
  	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
  	 		clickOnOkInDelete.click();
	         
  	 		String expMessage="Record Deleted Successfully.";
	 		
  	 		String actMessage=checkValidationMessage(expMessage);
  	 		
				
  	 		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
  	 		
				
  	 		if(actMessage.equalsIgnoreCase(expMessage) && actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		} 
	}
	
	// Gift Voucher Registration
	
	
	@FindBy(xpath="//input[@id='optGVRegGiftVoucherName']")
	private static WebElement gvrGiftVoucherNameTxt;
	
	@FindBy(xpath="//input[@id='chkInternal']")
	private static WebElement gvrInternalChkBox;
	
	@FindBy(xpath="//input[@id='optGVRegOutlet']")
	private static WebElement gvrOutLetTxt;
	
	@FindBy(xpath="//input[@id='txtGVRegCode']")
	private static WebElement gvrCodeTxt;
	
	@FindBy(xpath="//input[@id='txtGVRegStartingSeries']")
	private static WebElement gvrStartingSeriesTxt;
	
	@FindBy(xpath="//input[@id='txtGVRegTotalVouchers']")
	private static WebElement gvrTotalNoOfVouchersTxt;
	
	@FindBy(xpath="//input[@id='txtGVRegEndingSeries']")
	private static WebElement gvrEndingSeriesTxt;
	
	@FindBy(xpath="//input[@id='txtGVRegVoucherValue']")
	private static WebElement gvrVoucherValueTxt;
	
	@FindBy(xpath="//input[@id='txtGVRegTotalValue']")
	private static WebElement gvrTotalValueTxt;
	
	@FindBy(xpath="//input[@id='dpGVRegActivationDate']")
	private static WebElement gvrDateOfValidationTxt;
	
	@FindBy(xpath="//td[@id='dpGVRegActivationDate_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement gvrDateOfValidationCalendarBtn;
	
	@FindBy(xpath="//input[@id='dpGVRegValidTill']")
	private static WebElement gvrValidTillTxt;
	
	@FindBy(xpath="//td[@id='dpGVRegValidTill_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement gvrValidTillCalendarBtn;
	
	@FindBy(xpath="//thead[@id='tHeadGVReg']/tr/td")
	private static List<WebElement> gvrHeaderList;
	
	@FindBy(xpath="//span[@class='icon-save icon-font6']")
	private static WebElement gvrSaveBtn;
	
	@FindBy(xpath="//span[@class='icon-update icon-font6']")
	private static WebElement gvrUpdateBtn;
	
	@FindBy(xpath="//div[@id='btnDeleteGVReg']")
	private static WebElement gvrDeleteBtn;
	
	@FindBy(xpath="//span[@class='icon-clear icon-font6']")
	private static WebElement gvrClearBtn;
	
	@FindBy(xpath="//span[@class='icon-close icon-font6']")
	private static WebElement gvrCloseBtn;
	  
	@FindBy(xpath="//i[@class='fa fa-edit fa-lg']")
	private static WebElement gvrEditRow1;
	
	@FindBy(xpath="//tr[@id='2']//i[@class='fa fa-edit fa-lg']")
	private static WebElement gvrEditRow2;
	
	@FindBy(xpath="//tbody[@id='tBodyGVReg']/tr/td[2]")
	private static List<WebElement> gvrbodyVoucherNoList;
	

	
	
	public boolean checkGiftVoucherRegistrationHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
			pointOfSale.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(giftVoucher));
			giftVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(giftVoucherRegistration));
			giftVoucherRegistration.click();
			
			boolean actgvrGiftVoucherNameTxt          = gvrGiftVoucherNameTxt.isDisplayed();
			boolean actgvrInternalChkBox              = gvrInternalChkBox.isDisplayed();
			boolean actgvrOutLetTxt                   = gvrOutLetTxt.isDisplayed();
			boolean actgvrCodeTxt                     = gvrCodeTxt.isDisplayed();
			boolean actgvrStartingSeriesTxt           = gvrStartingSeriesTxt.isDisplayed();
			boolean actgvrTotalNoOfVouchersTxt        = gvrTotalNoOfVouchersTxt.isDisplayed();
			boolean actgvrEndingSeriesTxt             = gvrEndingSeriesTxt.isDisplayed();
			boolean actgvrVoucherValueTxt             = gvrVoucherValueTxt.isDisplayed();
			boolean actgvrTotalValueTxt               = gvrTotalValueTxt.isDisplayed();
			boolean actgvrDateOfValidationTxt         = gvrDateOfValidationTxt.isDisplayed();
			boolean actgvrDateOfValidationCalendarBtn = gvrDateOfValidationCalendarBtn.isDisplayed();
			boolean actgvrValidTillTxt                = gvrValidTillTxt.isDisplayed();
			boolean actgvrValidTillCalendarBtn        = gvrValidTillCalendarBtn.isDisplayed();
			boolean actgvrSaveBtn                     = gvrSaveBtn.isDisplayed();
			boolean actgvrUpdateBtn                   = gvrUpdateBtn.isDisplayed();
			boolean actgvrDeleteBtn                   = gvrDeleteBtn.isDisplayed();
			boolean actgvrClearBtn                    = gvrClearBtn.isDisplayed();
			boolean actgvrCloseBtn                    = gvrCloseBtn.isDisplayed();
			
			
			boolean expgvrGiftVoucherNameTxt          = true;
			boolean expgvrInternalChkBox              = true;
			boolean expgvrOutLetTxt                   = true;
			boolean expgvrCodeTxt                     = true;
			boolean expgvrStartingSeriesTxt           = true;
			boolean expgvrTotalNoOfVouchersTxt        = true;
			boolean expgvrEndingSeriesTxt             = true;
			boolean expgvrVoucherValueTxt             = true;
			boolean expgvrTotalValueTxt               = true;
			boolean expgvrDateOfValidationTxt         = true;
			boolean expgvrDateOfValidationCalendarBtn = true;
			boolean expgvrValidTillTxt                = true;
			boolean expgvrValidTillCalendarBtn        = true;
			boolean expgvrSaveBtn                     = true;
			boolean expgvrUpdateBtn                   = true;
			boolean expgvrDeleteBtn                   = true;
			boolean expgvrClearBtn                    = true;
			boolean expgvrCloseBtn                    = true;

			
			System.out.println("gvrGiftVoucherNameTxt          : "+actgvrGiftVoucherNameTxt          +" Value Expected : "+expgvrGiftVoucherNameTxt);
			System.out.println("gvrInternalChkBox              : "+actgvrInternalChkBox              +" Value Expected : "+expgvrInternalChkBox);
			System.out.println("gvrOutLetTxt                   : "+actgvrOutLetTxt                   +" Value Expected : "+expgvrOutLetTxt);
			System.out.println("gvrCodeTxt                     : "+actgvrCodeTxt                     +" Value Expected : "+expgvrCodeTxt);
			System.out.println("gvrStartingSeriesTxt           : "+actgvrStartingSeriesTxt           +" Value Expected : "+expgvrStartingSeriesTxt);
			System.out.println("gvrTotalNoOfVouchersTxt        : "+actgvrTotalNoOfVouchersTxt        +" Value Expected : "+expgvrTotalNoOfVouchersTxt);
			System.out.println("gvrEndingSeriesTxt             : "+actgvrEndingSeriesTxt             +" Value Expected : "+expgvrEndingSeriesTxt);
			System.out.println("gvrVoucherValueTxt             : "+actgvrVoucherValueTxt             +" Value Expected : "+expgvrVoucherValueTxt);
			System.out.println("gvrTotalValueTxt               : "+actgvrTotalValueTxt               +" Value Expected : "+expgvrTotalValueTxt);
			System.out.println("gvrDateOfValidationTxt         : "+actgvrDateOfValidationTxt         +" Value Expected : "+expgvrDateOfValidationTxt);
			System.out.println("gvrDateOfValidationCalendarBtn : "+actgvrDateOfValidationCalendarBtn +" Value Expected : "+expgvrDateOfValidationCalendarBtn);
			System.out.println("gvrValidTillTxt                : "+actgvrValidTillTxt                +" Value Expected : "+expgvrValidTillTxt);
			System.out.println("gvrValidTillCalendarBtn        : "+actgvrValidTillCalendarBtn        +" Value Expected : "+expgvrValidTillCalendarBtn);
			System.out.println("gvrSaveBtn                     : "+actgvrSaveBtn                     +" Value Expected : "+expgvrSaveBtn);
			System.out.println("gvrUpdateBtn                   : "+actgvrUpdateBtn                   +" Value Expected : "+expgvrUpdateBtn);
			System.out.println("gvrDeleteBtn                   : "+actgvrDeleteBtn                   +" Value Expected : "+expgvrDeleteBtn);
			System.out.println("gvrClearBtn                    : "+actgvrClearBtn                    +" Value Expected : "+expgvrClearBtn);
			System.out.println("gvrCloseBtn                    : "+actgvrCloseBtn                    +" Value Expected : "+expgvrCloseBtn);
				
				
			Thread.sleep(2000);
			
			int gvrHeaderListCount = gvrHeaderList.size();
			
			ArrayList<String> gvrHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<gvrHeaderListCount;i++)
			{
				String data = gvrHeaderList.get(i).getText();
				
				gvrHeaderListArray.add(data);
			}
			
			String actgvrHeaderList = gvrHeaderListArray.toString();
			String expgvrHeaderList = "[, Voucher Name (Code), Starting Series Number, Ending Series Number, Voucher Value, Total Number Of Vouchers, Total Value, Date of Activation, Valid Till, Outlet]";
			
			System.out.println("actgvrHeaderList : "+actgvrHeaderList);
			System.out.println("expgvrHeaderList : "+expgvrHeaderList);
			
			if(actgvrGiftVoucherNameTxt==expgvrGiftVoucherNameTxt && actgvrInternalChkBox==expgvrInternalChkBox && actgvrOutLetTxt==expgvrOutLetTxt
					&& actgvrCodeTxt==expgvrCodeTxt && actgvrStartingSeriesTxt==expgvrStartingSeriesTxt && actgvrTotalNoOfVouchersTxt==expgvrTotalNoOfVouchersTxt
					&& actgvrEndingSeriesTxt==expgvrEndingSeriesTxt && actgvrVoucherValueTxt==expgvrVoucherValueTxt && actgvrTotalValueTxt==expgvrTotalValueTxt
					&& actgvrDateOfValidationTxt==expgvrDateOfValidationTxt && actgvrDateOfValidationCalendarBtn==expgvrDateOfValidationCalendarBtn
					&& actgvrValidTillTxt==expgvrValidTillTxt && actgvrValidTillCalendarBtn==expgvrValidTillCalendarBtn && actgvrSaveBtn==expgvrSaveBtn
					&& actgvrUpdateBtn==expgvrUpdateBtn && actgvrDeleteBtn==expgvrDeleteBtn && actgvrClearBtn==expgvrClearBtn
					&& actgvrCloseBtn==expgvrCloseBtn && actgvrHeaderList.equalsIgnoreCase(expgvrHeaderList))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	

	public boolean checkSavingExternalGiftVoucherRegistration() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrGiftVoucherNameTxt));
			gvrGiftVoucherNameTxt.click();
			gvrGiftVoucherNameTxt.sendKeys("GiftVoucher1");
			Thread.sleep(2000);
			gvrGiftVoucherNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrOutLetTxt));
			gvrOutLetTxt.click();
			gvrOutLetTxt.sendKeys("Outlet1");
			Thread.sleep(2000);
			gvrOutLetTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrCodeTxt));
			gvrCodeTxt.click();
			gvrCodeTxt.sendKeys("ExternalGV");
			Thread.sleep(2000);
			gvrCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrSaveBtn));
			gvrSaveBtn.click();
			
			String expMessage="Record Saved Successfully";
	 		
			String actMessage = toastMessage.getText();
			
			toastMessageCloseBtn.click();
			
			System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
				
			Thread.sleep(2000);
			
			boolean actgvrEditRow1 = gvrEditRow1.isDisplayed();
			boolean expgvrEditRow1 = true;
			
			System.out.println("gvrEditRow1 : "+actgvrEditRow1+" Value Expected : "+expgvrEditRow1);
			
			
			if(actMessage.equalsIgnoreCase(expMessage) && actgvrEditRow1==expgvrEditRow1)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
  
	
	public boolean checkSavedGiftVoucherRegistration() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrEditRow1));
			gvrEditRow1.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrGiftVoucherNameTxt));
			
			String actgvrGiftVoucherNameTxt = gvrGiftVoucherNameTxt.getAttribute("value");
			String expgvrGiftVoucherNameTxt = "GiftVoucher1";
			
			String actgvrOutLetTxt = gvrOutLetTxt.getAttribute("value");
			String expgvrOutLetTxt = "Outlet1";
			
			String actgvrCodeTxt = gvrCodeTxt.getAttribute("value");
			String expgvrCodeTxt = "ExternalGV";
			
			System.out.println("gvrGiftVoucherNameTxt : "+actgvrGiftVoucherNameTxt+" Value Expected : "+expgvrGiftVoucherNameTxt);
			System.out.println("gvrOutLetTxt          : "+actgvrOutLetTxt+" Value Expected : "+expgvrOutLetTxt);
			System.out.println("gvrCodeTxt            : "+actgvrCodeTxt+" Value Expected : "+expgvrCodeTxt);
			
			
			if(actgvrGiftVoucherNameTxt.equalsIgnoreCase(expgvrGiftVoucherNameTxt) && actgvrOutLetTxt.equalsIgnoreCase(expgvrOutLetTxt)
					&& actgvrCodeTxt.equalsIgnoreCase(expgvrCodeTxt))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	public boolean checkClearOptionGiftVoucherRegistration() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrClearBtn));
			gvrClearBtn.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrGiftVoucherNameTxt));
			
			boolean actgvrGiftVoucherNameTxt = gvrGiftVoucherNameTxt.getAttribute("value").isEmpty();
			boolean actgvrOutLetTxt          = gvrOutLetTxt.getAttribute("value").isEmpty();
			boolean actgvrCodeTxt            = gvrCodeTxt.getAttribute("value").isEmpty();
			
			boolean expgvrGiftVoucherNameTxt = true;
			boolean expgvrOutLetTxt          = true;
			boolean expgvrCodeTxt            = true;
			
			System.out.println("gvrGiftVoucherNameTxt : "+actgvrGiftVoucherNameTxt+" Value Expected : "+expgvrGiftVoucherNameTxt);
			System.out.println("gvrOutLetTxt          : "+actgvrOutLetTxt+" Value Expected : "+expgvrOutLetTxt);
			System.out.println("gvrCodeTxt            : "+actgvrCodeTxt+" Value Expected : "+expgvrCodeTxt);
			
			
			if(actgvrGiftVoucherNameTxt==expgvrGiftVoucherNameTxt && actgvrOutLetTxt==expgvrOutLetTxt  && actgvrCodeTxt==expgvrCodeTxt)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	
	
	public boolean checkSavingInteralGiftVoucherRegistration() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrGiftVoucherNameTxt));
			gvrGiftVoucherNameTxt.click();
			gvrGiftVoucherNameTxt.sendKeys("GiftVoucher2");
			Thread.sleep(2000);
			gvrGiftVoucherNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrOutLetTxt));
			gvrOutLetTxt.click();
			gvrOutLetTxt.sendKeys("Outlet1");
			Thread.sleep(2000);
			gvrOutLetTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrCodeTxt));
			gvrCodeTxt.click();
			gvrCodeTxt.sendKeys("InternalGV");
			gvrCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrTotalNoOfVouchersTxt));
			gvrTotalNoOfVouchersTxt.click();
			gvrTotalNoOfVouchersTxt.sendKeys("50");
			gvrTotalNoOfVouchersTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrSaveBtn));
			gvrSaveBtn.click();
			
			String expMessage="Record Saved Successfully";  // Ending series is of 2 letters so starting series also to be in1 letters
	 		
			String actMessage = toastMessage.getText();
			
			toastMessageCloseBtn.click();
			
			System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
				
			Thread.sleep(2000);
			
			boolean actgvrEditRow2 = gvrEditRow2.isDisplayed();
			boolean expgvrEditRow2 = true;
			
			System.out.println("gvrEditRow2 : "+actgvrEditRow2+" Value Expected : "+expgvrEditRow2);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvrCloseBtn));
			gvrCloseBtn.click();
			
			
			if(actMessage.equalsIgnoreCase(expMessage) && actgvrEditRow2==expgvrEditRow2)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
		
	
	
	
	 public boolean checkDiscountVoucherDefinitionHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				Thread.sleep(2000);
				
				
				System.out.println("************checkDiscountVoucherDefinitionHomePageOptions Method Executed****************************");
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
				homeMenu.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
				mastersMenu.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
				pointOfSale.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountVoucher));
				discountVoucher.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountVoucherDefinition));
				discountVoucherDefinition.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
				     
				boolean actmasterNewBtn    	 		   =masterNewBtn.isDisplayed();
				boolean actmasterAddGroupBtn    	   =masterAddGroupBtn.isDisplayed();
				boolean actmasterEditBtn 			   =masterEditBtn.isDisplayed();
				boolean actmasterCloneBtn 			   =masterCloneBtn.isDisplayed();
				boolean actmasterPropertiesBtn 		   =masterPropertiesBtn.isDisplayed();
				boolean actmasterDeleteBtn 			   =masterDeleteBtn.isDisplayed();
				boolean actmasterCloseBtn 		 	   =masterCloseBtn.isDisplayed();
				boolean actmasterRibbonToExpandOptions =masterRibbonToExpandOptions.isDisplayed();
				
				boolean expmasterNewBtn    	 			=true;
				boolean expmasterAddGroupBtn    		=true;
				boolean expmasterEditBtn 				=true;
				boolean expmasterCloneBtn 				=true;
				boolean expmasterPropertiesBtn 			=true;
				boolean expmasterDeleteBtn 				=true;
				boolean expmasterCloseBtn 				=true;
				boolean expmasterRibbonToExpandOptions 	=true;
				
				
				
				System.out.println("masterNewBtn                  : "+actmasterNewBtn                +" Value Expected : "+expmasterNewBtn);
				System.out.println("masterAddGroupBtn             : "+actmasterAddGroupBtn           +" Value Expected : "+expmasterAddGroupBtn);
				System.out.println("masterEditBtn                 : "+actmasterEditBtn               +" Value Expected : "+expmasterEditBtn);
				System.out.println("masterCloneBtn                : "+actmasterCloneBtn              +" Value Expected : "+expmasterCloneBtn);
				System.out.println("masterPropertiesBtn           : "+actmasterPropertiesBtn         +" Value Expected : "+expmasterPropertiesBtn);
				System.out.println("masterDeleteBtn               : "+actmasterDeleteBtn             +" Value Expected : "+expmasterDeleteBtn);
				System.out.println("masterCloseBtn                : "+actmasterCloseBtn              +" Value Expected : "+expmasterCloseBtn);
				System.out.println("masterRibbonToExpandOptions   : "+actmasterRibbonToExpandOptions +" Value Expected : "+expmasterRibbonToExpandOptions);
					
					
				Thread.sleep(2000);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
				masterRibbonToExpandOptions.click();
					 
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));	
				
				boolean actmasterGroupBtn    	 													=masterGroupBtn.isDisplayed();
				boolean actmasterDeleteAllBtn    	 												=masterDeleteAllBtn.isDisplayed();
				boolean actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
				boolean actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
				boolean actmasterAdvanceMasterImportORExportBtn    	 								=masterAdvanceMasterImportORExportBtn.isDisplayed();
				boolean actmasterAuthorInfoBtn    	 												=masterAuthorInfoBtn.isDisplayed();
				boolean actmasterMoveUpBtn    	 													=masterMoveUpBtn.isDisplayed();
				boolean actmasterMoveDownBtn    	 												=masterMoveDownBtn.isDisplayed();
				boolean actmasterSortBtn    	 													=masterSortBtn.isDisplayed();
				boolean actmasterMassUpdateBtn    	 												=masterMassUpdateBtn.isDisplayed();
				boolean actmasterImportFromXmlBtn    	 											=masterImportFromXmlBtn.isDisplayed();
				
				boolean expmasterGroupBtn    	 													=true;
				boolean expmasterDeleteAllBtn    	 												=true;
				boolean expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=true;
				boolean expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=true;
				boolean expmasterAdvanceMasterImportORExportBtn    	 								=true;
				boolean expmasterAuthorInfoBtn    	 												=true;
				boolean expmasterMoveUpBtn    	 													=true;
				boolean expmasterMoveDownBtn    	 												=true;
				boolean expmasterSortBtn    	 													=true;
				boolean expmasterMassUpdateBtn    	 												=true;
				boolean expmasterImportFromXmlBtn    	 											=true;
				
				
				
				System.out.println("masterGroupBtn                                                      : "+actmasterGroupBtn                                                      +" Value Expected : "+expmasterGroupBtn);
				System.out.println("masterDeleteAllBtn                                                  : "+actmasterDeleteAllBtn                                                  +" Value Expected : "+expmasterDeleteAllBtn);
				System.out.println("masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity : "+actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity +" Value Expected : "+expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity);
				System.out.println("masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          : "+actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          +" Value Expected : "+expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState);
				System.out.println("masterAdvanceMasterImportORExportBtn                                : "+actmasterAdvanceMasterImportORExportBtn                                +" Value Expected : "+expmasterAdvanceMasterImportORExportBtn);
				System.out.println("masterAuthorInfoBtn                                                 : "+actmasterAuthorInfoBtn                                                 +" Value Expected : "+expmasterAuthorInfoBtn);
				System.out.println("masterMoveUpBtn                                                     : "+actmasterMoveUpBtn                                                     +" Value Expected : "+expmasterMoveUpBtn);
				System.out.println("masterMoveDownBtn                                                   : "+actmasterMoveDownBtn                                                   +" Value Expected : "+expmasterMoveDownBtn);
				System.out.println("masterSortBtn                                                       : "+actmasterSortBtn                                                       +" Value Expected : "+expmasterSortBtn);
				System.out.println("masterMassUpdateBtn                                                 : "+actmasterMassUpdateBtn                                                 +" Value Expected : "+expmasterMassUpdateBtn);
				System.out.println("masterImportFromXmlBtn                                              : "+actmasterImportFromXmlBtn                                              +" Value Expected : "+expmasterImportFromXmlBtn);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
				 
				masterRibbonControlNextBtn.click(); 
				masterRibbonControlNextBtn.click();
				masterRibbonControlNextBtn.click();
				masterRibbonControlNextBtn.click();
				masterRibbonControlNextBtn.click();
				masterRibbonControlNextBtn.click();
				masterRibbonControlNextBtn.click();
				masterRibbonControlNextBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizemasterBtn));	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
				
				boolean actmasterExportFormatToXmlBtn     =masterExportFormatToXmlBtn.isDisplayed();
				
				boolean actmasterCustamizemasterBtn    	  =masterCustamizemasterBtn.isDisplayed();
				boolean actmasterCustamizeViewBtn    	  =masterCustamizeViewBtn.isDisplayed();
				boolean actmastercustamizeTreeBtn    	  =mastercustamizeTreeBtn.isDisplayed();
				
				boolean expmasterExportFormatToXmlBtn     =true;
				 
				boolean expmasterCustamizemasterBtn    	  =true;
				boolean expmasterCustamizeViewBtn    	  =true;
				boolean expmastercustamizeTreeBtn    	  =true;
				 
				 
				System.out.println("masterExportFormatToXmlBtn         : "+actmasterExportFormatToXmlBtn         +" Value Expected : "+expmasterExportFormatToXmlBtn);
				System.out.println("masterCustamizemasterBtn           : "+actmasterCustamizemasterBtn           +" Value Expected : "+expmasterCustamizemasterBtn);
				System.out.println("masterCustamizeViewBtn             : "+actmasterCustamizeViewBtn             +" Value Expected : "+expmasterCustamizeViewBtn);
				System.out.println("mastercustamizeTreeBtn             : "+actmastercustamizeTreeBtn             +" Value Expected : "+expmastercustamizeTreeBtn);
					
		       
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToMinimizeOptions));
				masterRibbonToMinimizeOptions.click();
				
				if(actmasterNewBtn==expmasterNewBtn && actmasterAddGroupBtn==expmasterAddGroupBtn && actmasterEditBtn==expmasterEditBtn
						&& actmasterCloneBtn==expmasterCloneBtn && actmasterPropertiesBtn==expmasterPropertiesBtn && actmasterDeleteBtn==expmasterDeleteBtn
						&& actmasterCloseBtn==expmasterCloseBtn && actmasterRibbonToExpandOptions==expmasterRibbonToExpandOptions
						
						&& actmasterGroupBtn==expmasterGroupBtn && actmasterDeleteAllBtn==expmasterDeleteAllBtn 
						&& actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity==expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity
						&& actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState==expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState 
						&& actmasterAdvanceMasterImportORExportBtn==expmasterAdvanceMasterImportORExportBtn
						&& actmasterAuthorInfoBtn==expmasterAuthorInfoBtn && actmasterMoveUpBtn==expmasterMoveUpBtn && actmasterMoveDownBtn==expmasterMoveDownBtn
						&& actmasterSortBtn==expmasterSortBtn && actmasterMassUpdateBtn==expmasterMassUpdateBtn && actmasterImportFromXmlBtn==expmasterImportFromXmlBtn
						&& actmasterExportFormatToXmlBtn==expmasterExportFormatToXmlBtn
						
						&& actmasterCustamizemasterBtn==expmasterCustamizemasterBtn && actmasterCustamizeViewBtn==expmasterCustamizeViewBtn  
						&& actmastercustamizeTreeBtn==expmastercustamizeTreeBtn )
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}
	  
	  
	    @FindBy(xpath="//select[@id='iDiscountType']")
		private static WebElement dvdDiscountTypeDrpDwn;
		
		@FindBy(xpath="//input[@id='fValue']")
		private static WebElement dvdValueTxt;
		
		
		@FindBy(xpath="//input[@id='bExternal']")
		private static WebElement dvdExternealChkBox;
		
		@FindBy(xpath="//input[@id='bSeriesNumberRequired']")
		private static WebElement dvdSerialNORquiredChkBox;
		
		@FindBy(xpath="//input[@id='bValidityApplicable']")
		private static WebElement dvdValidityApplicableChkBox;
		
		@FindBy(xpath="//input[@id='sSeriesNumber']")
		private static WebElement dvdSerialNumberTxt;
		
		@FindBy(xpath="//input[@id='bRedeemable']")
		private static WebElement dvdRedeemableChkBox;
		
	  public boolean checkNewOptionInDiscountVoucherDefintionAndAvailableFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				
				
				System.out.println("******************checkNewOptionInDiscountVoucherDefintionAndAvailableFields Method Executed***************************************");
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
				masterNewBtn.click();
				
				Thread.sleep(2000);
				
				boolean actgvdNameTxt                   = gvdNameTxt.isDisplayed();
				boolean actgvdCodeTxt                   = gvdCodeTxt.isDisplayed();
				boolean actgvdCurrencyTxt               = gvdCurrencyTxt.isDisplayed();
				boolean actdvdDiscountTypeDrpDwn        = dvdDiscountTypeDrpDwn.isDisplayed();
				boolean actdvdValueTxt            		= dvdValueTxt.isDisplayed();
				boolean actdvdExternealChkBox  			= dvdExternealChkBox.isDisplayed();
				boolean actdvdSerialNORquiredChkBox     = dvdSerialNORquiredChkBox.isDisplayed();
				boolean actdvdValidityApplicableChkBox  = dvdValidityApplicableChkBox.isDisplayed();
				boolean actdvdSerialNumberTxt          	= dvdSerialNumberTxt.isDisplayed();
				boolean actdvdRedeemableChkBox          = dvdRedeemableChkBox.isDisplayed();
				boolean actgvdAccountTxt          		= gvdAccountTxt.isDisplayed();
				
				boolean expgvdNameTxt                   = true;
				boolean expgvdCodeTxt                   = true;
				boolean expgvdCurrencyTxt               = true;
				boolean expdvdDiscountTypeDrpDwn        = true;
				boolean expdvdValueTxt                  = true;
			    boolean expdvdExternealChkBox  			= true;
				boolean expdvdSerialNORquiredChkBox     = true;
				boolean expdvdValidityApplicableChkBox  = true;
				boolean expdvdSerialNumberTxt          	= true;
				boolean expdvdRedeemableChkBox          = true;
				boolean expgvdAccountTxt         		= true;
				
				System.out.println("gvdNameTxt                  : "+actgvdNameTxt                  +" Value Expected : "+expgvdNameTxt);
				System.out.println("gvdCodeTxt                  : "+actgvdCodeTxt                  +" Value Expected : "+expgvdCodeTxt);
				System.out.println("gvdCurrencyTxt              : "+actgvdCurrencyTxt              +" Value Expected : "+expgvdCurrencyTxt);
				System.out.println("dvdDiscountTypeDrpDwn       : "+actdvdDiscountTypeDrpDwn       +" Value Expected : "+expdvdDiscountTypeDrpDwn);
				System.out.println("dvdValueTxt                 : "+actdvdValueTxt                 +" Value Expected : "+expdvdValueTxt);
				System.out.println("dvdExternealChkBox          : "+actdvdExternealChkBox          +" Value Expected : "+expdvdExternealChkBox);
				System.out.println("dvdSerialNORquiredChkBox    : "+actdvdSerialNORquiredChkBox    +" Value Expected : "+expdvdSerialNORquiredChkBox);
				System.out.println("dvdValidityApplicableChkBox : "+actdvdValidityApplicableChkBox +" Value Expected : "+expdvdValidityApplicableChkBox);
				System.out.println("dvdSerialNumberTxt          : "+actdvdSerialNumberTxt          +" Value Expected : "+expdvdSerialNumberTxt);
				System.out.println("dvdRedeemableChkBox         : "+actdvdRedeemableChkBox         +" Value Expected : "+expdvdRedeemableChkBox);
				System.out.println("gvdAccountTxt               : "+actgvdAccountTxt               +" Value Expected : "+expgvdAccountTxt);
				
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
				closeBtn.click();
				
				
				if(actgvdNameTxt==expgvdNameTxt && actgvdCodeTxt==expgvdCodeTxt && actgvdCurrencyTxt==expgvdCurrencyTxt && actdvdDiscountTypeDrpDwn==expdvdDiscountTypeDrpDwn
						&& actdvdExternealChkBox==expdvdExternealChkBox && actdvdValueTxt==expdvdValueTxt 
						&& actdvdSerialNORquiredChkBox==expdvdSerialNORquiredChkBox && actdvdValidityApplicableChkBox==expdvdValidityApplicableChkBox && actdvdSerialNumberTxt==expdvdSerialNumberTxt
						&& actdvdRedeemableChkBox==expdvdRedeemableChkBox && actgvdAccountTxt==expgvdAccountTxt )
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}

	  
	  

		public boolean checkSavingDiscountVoucherDefinitionWithAllMandateFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
				masterNewBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
				gvdNameTxt.click();
				gvdNameTxt.sendKeys("DiscountVoucher");
				gvdNameTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
				gvdCodeTxt.click();
				gvdCodeTxt.sendKeys("DiscountVoucher");
				gvdCodeTxt.sendKeys(Keys.TAB);
				
				
				Select dvdDiscountTypeDrpDwnSelect = new Select(dvdDiscountTypeDrpDwn);
				dvdDiscountTypeDrpDwnSelect.selectByVisibleText("Amount");
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvdValueTxt));
				dvdValueTxt.click();
				dvdValueTxt.sendKeys(Keys.HOME);
				dvdValueTxt.sendKeys("1");
				Thread.sleep(2000);
				dvdValueTxt.sendKeys(Keys.TAB);
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvdSerialNORquiredChkBox));
				dvdSerialNORquiredChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvdSerialNumberTxt));
				dvdSerialNumberTxt.click();
				dvdSerialNumberTxt.sendKeys("100");
				Thread.sleep(2000);
				dvdSerialNumberTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdAccountTxt));
				gvdAccountTxt.click();
				gvdAccountTxt.sendKeys(Keys.END);
				gvdAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				gvdAccountTxt.sendKeys("Discount Account");
				Thread.sleep(2000);
				gvdAccountTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCurrencyTxt));
				gvdCurrencyTxt.click();
				gvdCurrencyTxt.sendKeys("Indian Rupees");
				Thread.sleep(2000);
				gvdCurrencyTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				 
				String expSavingMessage="Saved Successfully";
				
				String actSavingMessage=checkValidationMessage(expSavingMessage);
				
				System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
				closeBtn.click();
				
				if(actSavingMessage.equalsIgnoreCase(expSavingMessage))
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}
		
		

		public boolean checkSavedDiscountVoucherDefinitionAndEditing() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				Thread.sleep(2000);
				
				int posNameListCount = posNameList.size();
		 		
		 		for(int i=0;i<posNameListCount;i++)
		 		{
		 			String data= posNameList.get(i).getText();
		 			
		 			if(data.equalsIgnoreCase("DiscountVoucher") && posListChkBox.get(i).isSelected()==false)
		 			{
		 				posNameList.get(i).click();
		 				
		 				posListChkBox.get(i).click();
		 				
		 				break;
		 			}
		 		}
		 		
		 		
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		 		masterEditBtn.click();
				
		 		Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
				gvdNameTxt.click();
				
				String actgvdNameTxt = gvdNameTxt.getAttribute("value");
				String expgvdNameTxt = "DiscountVoucher";
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
				gvdCodeTxt.click();

				String actgvdCodeTxt = gvdCodeTxt.getAttribute("value");
				String expgvdCodeTxt = "DiscountVoucher";
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
				gvdNameTxt.click();
				gvdNameTxt.clear();
				gvdNameTxt.sendKeys("DiscountVoucher1");
				gvdNameTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
				gvdCodeTxt.click();
				gvdCodeTxt.clear();
				gvdCodeTxt.sendKeys("DiscountVoucher1");
				gvdCodeTxt.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				 
				String expMessage="Updated Successfully";
				
				String actMessage=checkValidationMessage(expMessage);
				
				System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
				
				
				System.out.println("gvdNameTxt : "+actgvdNameTxt+" Value Expected : "+expgvdNameTxt);
				System.out.println("gvdCodeTxt : "+actgvdCodeTxt+" Value Expected : "+expgvdCodeTxt);
					 
				
				if(actgvdNameTxt.equalsIgnoreCase(expgvdNameTxt) && actgvdCodeTxt.equalsIgnoreCase(expgvdCodeTxt)
						&& actMessage.equalsIgnoreCase(expMessage))
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}
		
		
		

		
		
		public boolean checkUpdateDiscountVoucherDefintionAndSaveGVDUsingCloneOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				Thread.sleep(2000);
				
				int posNameListCount = posNameList.size();
		 		
		 		for(int i=0;i<posNameListCount;i++)
		 		{
		 			String data= posNameList.get(i).getText();
		 			
		 			if(data.equalsIgnoreCase("DiscountVoucher1"))
		 			{
		 				posNameList.get(i).click();
		 				
		 				if(posListChkBox.get(i).isSelected()==false)
		 				{
		 					posListChkBox.get(i).click();
		 				}
		 				break;
		 			}
		 		}
		 		
		 		
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		 		masterEditBtn.click();
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
				gvdNameTxt.click();
				
				String actgvdNameTxt = gvdNameTxt.getAttribute("value");
				String expgvdNameTxt = "DiscountVoucher1";
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
				gvdCodeTxt.click();

				String actgvdCodeTxt = gvdCodeTxt.getAttribute("value");
				String expgvdCodeTxt = "DiscountVoucher1";
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloneBtn));
				editcloneBtn.click();
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
				gvdNameTxt.click();
				gvdNameTxt.sendKeys("DiscountVoucherToDelete");
				gvdNameTxt.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
				gvdCodeTxt.click();
				gvdCodeTxt.sendKeys("DiscountVoucherToDelete");
				gvdCodeTxt.sendKeys(Keys.TAB);
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				 
				String expMessage="Saved Successfully";
				
				String actMessage=checkValidationMessage(expMessage);
				
				System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
				
				System.out.println("gvdNameTxt : "+actgvdNameTxt+" Value Expected : "+expgvdNameTxt);
				System.out.println("gvdCodeTxt : "+actgvdCodeTxt+" Value Expected : "+expgvdCodeTxt);
					 
				
				if(actgvdNameTxt.equalsIgnoreCase(expgvdNameTxt) && actgvdCodeTxt.equalsIgnoreCase(expgvdCodeTxt)
						&& actMessage.equalsIgnoreCase(expMessage))
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}
		
		@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
		 private static WebElement MasterHomeSearchTxt;
		
		
		public static boolean checkDeleteDiscountVoucherDefintion() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MasterHomeSearchTxt));
				MasterHomeSearchTxt.click();
				
				MasterHomeSearchTxt.sendKeys("DiscountVoucherToDelete");
				
				Thread.sleep(2000);
				
				
				MasterHomeSearchTxt.sendKeys(Keys.TAB);
				
				
				 
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
		 		masterDeleteBtn.click();
		         
		 		Thread.sleep(2000);
		         
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
		 		System.out.println(getMsgOnDelete.getText());
		         
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
		 		clickOnOkInDelete.click();
		         
		 		String expMessage="Record Deleted Successfully.";
		 		
		 		String actMessage=checkValidationMessage(expMessage);
		 		
					
		 		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
		 		
					
		 		if(actMessage.equalsIgnoreCase(expMessage) )
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			} 
		}

		
		public static boolean checkSavingDVDVoucherWithRedeemableOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				Thread.sleep(3000);
				 
		 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		 		masterNewBtn.click();
		         
		 		Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
				gvdNameTxt.click();
				gvdNameTxt.clear();
				gvdNameTxt.sendKeys("DiscountVoucher2");
				gvdNameTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
				gvdCodeTxt.click();
				gvdCodeTxt.clear();
				gvdCodeTxt.sendKeys("DiscountVoucher2");
				gvdCodeTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvdValueTxt));
				dvdValueTxt.click();
				dvdValueTxt.sendKeys(Keys.HOME);
				dvdValueTxt.sendKeys("1");
				Thread.sleep(2000);
				dvdValueTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvdRedeemableChkBox));
				dvdRedeemableChkBox.click();
				
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				 
				String expSavingMessage="Saved Successfully";
				
				String actSavingMessage=checkValidationMessage(expSavingMessage);
				
				System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
				
				
				
				if(actSavingMessage.equalsIgnoreCase(expSavingMessage))
				{
					System.out.println("Voucher Saved Successfully");
					return true;
				}
					
				else
				{
					System.out.println("Voucher  Not Saved Successfully");
				
					return false;
				}
			}
				catch (Exception e) 
				{
					  String exception =e.getMessage();
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
					  return false;
				}
			}

		
		// Discount Voucher Registration
		
		
			@FindBy(xpath="//input[@id='optDVRegDiscountVoucherName']")
			private static WebElement dvrGiftVoucherNameTxt;
			
			@FindBy(xpath="//input[@id='chkDvInternal']")
			private static WebElement dvrInternalChkBox;
			
			@FindBy(xpath="//input[@id='txtDVRegType']")
			private static WebElement dvrTypeTxt;
			
			@FindBy(xpath="//input[@id='txtDVRegCode']")
			private static WebElement dvrCodeTxt;
			
			@FindBy(xpath="//input[@id='txtDVRegValue']")
			private static WebElement dvrValueTxt;
			
			@FindBy(xpath="//input[@id='txtDVRegStartingSeries']")
			private static WebElement dvrStartingSeriesTxt;
			
			@FindBy(xpath="//input[@id='txtDVRegTotalVouchers']")
			private static WebElement dvrTotalNoOfVouchersTxt;
			
			@FindBy(xpath="//input[@id='txtDVRegEndingSeries']")
			private static WebElement dvrEndingSeriesTxt;
			
			@FindBy(xpath="//input[@id='txtDVRegVoucherValue']")
			private static WebElement dvrVoucherValueTxt;
			
			@FindBy(xpath="//input[@id='txtDVRegVoucherValue']")
			private static WebElement dvrTotalValueTxt;
			
			@FindBy(xpath="//input[@id='dpDVRegActivationDate']")
			private static WebElement dvrDateOfValidationTxt;
			
			@FindBy(xpath="//td[@id='dpDVRegActivationDate_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
			private static WebElement dvrDateOfValidationCalendarBtn;
			
			@FindBy(xpath="//input[@id='dpDVRegValidTill']")
			private static WebElement dvrValidTillTxt;
			
			@FindBy(xpath="//td[@id='dpDVRegValidTill_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
			private static WebElement dvrValidTillCalendarBtn;
			
			@FindBy(xpath="//thead[@id='tHeadDVReg']/tr/td")
			private static List<WebElement> dvrHeaderList;
			
			
			@FindBy(xpath="//thead[@id='tHeadSalesReturn']/tr/td")
			private static List<WebElement> posSalesReturnHeaderList;
			
			@FindBy(xpath="//*[@id='tBodySalesReturn']/tr/td")
			private static List<WebElement> posSalesReturnGridRow1;
			
			
			
			
			@FindBy(xpath="//span[@class='icon-save icon-font6']")
			private static WebElement dvrSaveBtn;
			
			@FindBy(xpath="//span[@class='icon-update icon-font6']")
			private static WebElement dvrUpdateBtn;
			
			@FindBy(xpath="//div[@id='btnDeleteDVReg']")
			private static WebElement dvrDeleteBtn;
			
			@FindBy(xpath="//span[@class='icon-clear icon-font6']")
			private static WebElement dvrClearBtn;
			
			@FindBy(xpath="//span[@class='icon-close icon-font6']")
			private static WebElement dvrCloseBtn;
			  
			@FindBy(xpath="//i[@class='fa fa-edit fa-lg']")
			private static WebElement dvrEditRow1;
			
			@FindBy(xpath="//tr[@id='2']//i[@class='fa fa-edit fa-lg']")
			private static WebElement dvrEditRow2;
			
			@FindBy(xpath="//tbody[@id='tBodyGVReg']/tr/td[2]")
			private static List<WebElement> dvrbodyVoucherNoList;
			

			
			
		
		
		
		public boolean checkDiscountVoucherRegistrationHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				Thread.sleep(2000);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
				homeMenu.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
				mastersMenu.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
				pointOfSale.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountVoucher));
				discountVoucher.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountVoucherRegistration));
				discountVoucherRegistration.click();
				
				boolean actdvrGiftVoucherNameTxt          = dvrGiftVoucherNameTxt.isDisplayed();
				boolean actdvrInternalChkBox              = dvrInternalChkBox.isDisplayed();
				boolean actdvrCodeTxt                     = dvrCodeTxt.isDisplayed();
				boolean actdvrStartingSeriesTxt           = dvrStartingSeriesTxt.isDisplayed();
				boolean actdvrTotalNoOfVouchersTxt        = dvrTotalNoOfVouchersTxt.isDisplayed();
				boolean actdvrEndingSeriesTxt             = dvrEndingSeriesTxt.isDisplayed();
				boolean actdvrVoucherValueTxt             = dvrVoucherValueTxt.isDisplayed();
				boolean actdvrTotalValueTxt               = dvrTotalValueTxt.isDisplayed();
				boolean actdvrDateOfValidationTxt         = dvrDateOfValidationTxt.isDisplayed();
				boolean actdvrDateOfValidationCalendarBtn = dvrDateOfValidationCalendarBtn.isDisplayed();
				boolean actdvrValidTillTxt                = dvrValidTillTxt.isDisplayed();
				boolean actdvrValidTillCalendarBtn        = dvrValidTillCalendarBtn.isDisplayed();
				boolean actdvrSaveBtn                     = dvrSaveBtn.isDisplayed();
				boolean actdvrUpdateBtn                   = dvrUpdateBtn.isDisplayed();
				boolean actdvrDeleteBtn                   = dvrDeleteBtn.isDisplayed();
				boolean actdvrClearBtn                    = dvrClearBtn.isDisplayed();
				boolean actdvrCloseBtn                    = dvrCloseBtn.isDisplayed();
				
				
				boolean expdvrGiftVoucherNameTxt          = true;
				boolean expdvrInternalChkBox              = true;
				boolean expdvrOutLetTxt                   = true;
				boolean expdvrCodeTxt                     = true;
				boolean expdvrStartingSeriesTxt           = true;
				boolean expdvrTotalNoOfVouchersTxt        = true;
				boolean expdvrEndingSeriesTxt             = true;
				boolean expdvrVoucherValueTxt             = true;
				boolean expdvrTotalValueTxt               = true;
				boolean expdvrDateOfValidationTxt         = true;
				boolean expdvrDateOfValidationCalendarBtn = true;
				boolean expdvrValidTillTxt                = true;
				boolean expdvrValidTillCalendarBtn        = true;
				boolean expdvrSaveBtn                     = true;
				boolean expdvrUpdateBtn                   = true;
				boolean expdvrDeleteBtn                   = true;
				boolean expdvrClearBtn                    = true;
				boolean expdvrCloseBtn                    = true;

				
				System.out.println("dvrGiftVoucherNameTxt          : "+actdvrGiftVoucherNameTxt          +" Value Expected : "+expdvrGiftVoucherNameTxt);
				System.out.println("dvrInternalChkBox              : "+actdvrInternalChkBox              +" Value Expected : "+expdvrInternalChkBox);
				System.out.println("dvrCodeTxt                     : "+actdvrCodeTxt                     +" Value Expected : "+expdvrCodeTxt);
				System.out.println("dvrStartingSeriesTxt           : "+actdvrStartingSeriesTxt           +" Value Expected : "+expdvrStartingSeriesTxt);
				System.out.println("dvrTotalNoOfVouchersTxt        : "+actdvrTotalNoOfVouchersTxt        +" Value Expected : "+expdvrTotalNoOfVouchersTxt);
				System.out.println("dvrEndingSeriesTxt             : "+actdvrEndingSeriesTxt             +" Value Expected : "+expdvrEndingSeriesTxt);
				System.out.println("dvrVoucherValueTxt             : "+actdvrVoucherValueTxt             +" Value Expected : "+expdvrVoucherValueTxt);
				System.out.println("dvrTotalValueTxt               : "+actdvrTotalValueTxt               +" Value Expected : "+expdvrTotalValueTxt);
				System.out.println("dvrDateOfValidationTxt         : "+actdvrDateOfValidationTxt         +" Value Expected : "+expdvrDateOfValidationTxt);
				System.out.println("dvrDateOfValidationCalendarBtn : "+actdvrDateOfValidationCalendarBtn +" Value Expected : "+expdvrDateOfValidationCalendarBtn);
				System.out.println("dvrValidTillTxt                : "+actdvrValidTillTxt                +" Value Expected : "+expdvrValidTillTxt);
				System.out.println("dvrValidTillCalendarBtn        : "+actdvrValidTillCalendarBtn        +" Value Expected : "+expdvrValidTillCalendarBtn);
				System.out.println("dvrSaveBtn                     : "+actdvrSaveBtn                     +" Value Expected : "+expdvrSaveBtn);
				System.out.println("dvrUpdateBtn                   : "+actdvrUpdateBtn                   +" Value Expected : "+expdvrUpdateBtn);
				System.out.println("dvrDeleteBtn                   : "+actdvrDeleteBtn                   +" Value Expected : "+expdvrDeleteBtn);
				System.out.println("dvrClearBtn                    : "+actdvrClearBtn                    +" Value Expected : "+expdvrClearBtn);
				System.out.println("dvrCloseBtn                    : "+actdvrCloseBtn                    +" Value Expected : "+expdvrCloseBtn);
					
					
				Thread.sleep(2000);
				
				int dvrHeaderListCount = dvrHeaderList.size();
				
				ArrayList<String> dvrHeaderListArray = new ArrayList<String>();
				
				for(int i=0;i<dvrHeaderListCount;i++)
				{
					String data = dvrHeaderList.get(i).getText();
					
					dvrHeaderListArray.add(data);
				}
				
				String actdvrHeaderList = dvrHeaderListArray.toString();
				String expdvrHeaderList = "[, Voucher Name (Code), Type, Starting Series Number, Ending Series Number, Voucher Value, Total Number Of Vouchers, Total Value, Date of Activation, Valid Till, Outlet]";
				
				System.out.println("actdvrHeaderList : "+actdvrHeaderList);
				System.out.println("expdvrHeaderList : "+expdvrHeaderList);
				
				if(actdvrGiftVoucherNameTxt==expdvrGiftVoucherNameTxt && actdvrInternalChkBox==expdvrInternalChkBox /*&& actdvrOutLetTxt==expdvrOutLetTxt*/
						&& actdvrCodeTxt==expdvrCodeTxt && actdvrStartingSeriesTxt==expdvrStartingSeriesTxt && actdvrTotalNoOfVouchersTxt==expdvrTotalNoOfVouchersTxt
						&& actdvrEndingSeriesTxt==expdvrEndingSeriesTxt && actdvrVoucherValueTxt==expdvrVoucherValueTxt && actdvrTotalValueTxt==expdvrTotalValueTxt
						&& actdvrDateOfValidationTxt==expdvrDateOfValidationTxt && actdvrDateOfValidationCalendarBtn==expdvrDateOfValidationCalendarBtn
						&& actdvrValidTillTxt==expdvrValidTillTxt && actdvrValidTillCalendarBtn==expdvrValidTillCalendarBtn && actdvrSaveBtn==expdvrSaveBtn
						&& actdvrUpdateBtn==expdvrUpdateBtn && actdvrDeleteBtn==expdvrDeleteBtn && actdvrClearBtn==expdvrClearBtn
						&& actdvrCloseBtn==expdvrCloseBtn && actdvrHeaderList.equalsIgnoreCase(expdvrHeaderList))
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}
		
		
		 @FindBy(xpath="//input[@id='txtDVRegTotalVouchers']")
		 private static WebElement totalNoOfVouchersTxt;
		
		 @FindBy(xpath="//input[@id='optDVRegOutlet']")
		 private static WebElement dvrOutLetTxt;
			

		public boolean checkSavingVoucherDiscountVoucherRegistration() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				Thread.sleep(2000);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrGiftVoucherNameTxt));
				dvrGiftVoucherNameTxt.click();
				dvrGiftVoucherNameTxt.sendKeys("DiscountVoucher1");
				Thread.sleep(2000);
				dvrGiftVoucherNameTxt.sendKeys(Keys.TAB);
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrCodeTxt));
				dvrCodeTxt.click();
				dvrCodeTxt.sendKeys("DiscountVoucher1");
				Thread.sleep(2000);
				dvrCodeTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(totalNoOfVouchersTxt));
				totalNoOfVouchersTxt.click();
				totalNoOfVouchersTxt.sendKeys("50");
				Thread.sleep(2000);
				totalNoOfVouchersTxt.sendKeys(Keys.TAB);
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrOutLetTxt));
				dvrOutLetTxt.click();
				dvrOutLetTxt.sendKeys("Outlet1");
				Thread.sleep(3000);
				dvrOutLetTxt.sendKeys(Keys.TAB);
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrSaveBtn));
				dvrSaveBtn.click();
				
				String expMessage="Record Saved Successfully";
		 		
				String actMessage = toastMessage.getText();
				
				toastMessageCloseBtn.click();
				
				System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
					
				Thread.sleep(2000);
				
				boolean actdvrEditRow1 = dvrEditRow1.isDisplayed();
				boolean expdvrEditRow1 = true;
				
				System.out.println("dvrEditRow1 : "+actdvrEditRow1+" Value Expected : "+expdvrEditRow1);
				
				
				if(actMessage.equalsIgnoreCase(expMessage) && actdvrEditRow1==expdvrEditRow1)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}
		
	  

		
		

		public boolean checkSavedDiscountVoucherRegistration() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrEditRow1));
				dvrEditRow1.click();
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrGiftVoucherNameTxt));
				
				String actdvrGiftVoucherNameTxt = dvrGiftVoucherNameTxt.getAttribute("value");
				String expdvrGiftVoucherNameTxt = "DiscountVoucher1";
				
				String actdvrOutLetTxt = dvrOutLetTxt.getAttribute("value");
				String expdvrOutLetTxt = "Outlet1";
				
				String actdvrCodeTxt = dvrCodeTxt.getAttribute("value");
				String expdvrCodeTxt = "DiscountVoucher1";
				
				System.out.println("dvrGiftVoucherNameTxt : "+actdvrGiftVoucherNameTxt+" Value Expected : "+expdvrGiftVoucherNameTxt);
				System.out.println("dvrOutLetTxt          : "+actdvrOutLetTxt+" Value Expected : "+expdvrOutLetTxt);
				System.out.println("dvrCodeTxt            : "+actdvrCodeTxt+" Value Expected : "+expdvrCodeTxt);
				
				
				if(actdvrGiftVoucherNameTxt.equalsIgnoreCase(expdvrGiftVoucherNameTxt) && actdvrOutLetTxt.equalsIgnoreCase(expdvrOutLetTxt)
						&& actdvrCodeTxt.equalsIgnoreCase(expdvrCodeTxt))
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}
		
		
		
		public boolean checkClearOptionDiscountVoucherRegistration() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrClearBtn));
				dvrClearBtn.click();
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrGiftVoucherNameTxt));
				
				boolean actdvrGiftVoucherNameTxt = dvrGiftVoucherNameTxt.getAttribute("value").isEmpty();
				boolean actdvrOutLetTxt          = dvrOutLetTxt.getAttribute("value").isEmpty();
				boolean actdvrCodeTxt            = dvrCodeTxt.getAttribute("value").isEmpty();
				
				boolean expdvrGiftVoucherNameTxt = true;
				boolean expdvrOutLetTxt          = true;
				boolean expdvrCodeTxt            = true;
				
				System.out.println("dvrGiftVoucherNameTxt : "+actdvrGiftVoucherNameTxt+" Value Expected : "+expdvrGiftVoucherNameTxt);
				System.out.println("dvrOutLetTxt          : "+actdvrOutLetTxt+" Value Expected : "+expdvrOutLetTxt);
				System.out.println("dvrCodeTxt            : "+actdvrCodeTxt+" Value Expected : "+expdvrCodeTxt);
				
				
				if(actdvrGiftVoucherNameTxt==expdvrGiftVoucherNameTxt && actdvrOutLetTxt==expdvrOutLetTxt  && actdvrCodeTxt==expdvrCodeTxt)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}
		
		
		
		
		public boolean checkSavingDiscountVoucherRegistration() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				Thread.sleep(2000);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrGiftVoucherNameTxt));
				dvrGiftVoucherNameTxt.click();
				dvrGiftVoucherNameTxt.sendKeys("DiscountVoucher2");
				Thread.sleep(2000);
				dvrGiftVoucherNameTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrOutLetTxt));
				dvrOutLetTxt.click();
				dvrOutLetTxt.sendKeys("Outlet1");
				Thread.sleep(2000);
				dvrOutLetTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrCodeTxt));
				dvrCodeTxt.click();
				dvrCodeTxt.sendKeys("DiscountVoucher2");
				dvrCodeTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dvrSaveBtn));
				dvrSaveBtn.click();
				
				String expMessage="Record Saved Successfully";
		 		
				String actMessage = toastMessage.getText();
				
				toastMessageCloseBtn.click();
				
				System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
					
				
				if(actMessage.equalsIgnoreCase(expMessage) )
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
		}

		
		
		/*
		// Saving Payment Method as Discount Voucher
		


		  public static boolean checkSavingPosPaymentsAsDiscountVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			  
			  Thread.sleep(3000);
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
			  pointOfSaleMenu.click();
			
			  Thread.sleep(3000);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
			  pointOfSaleUtilitiesMenu.click();
				
			  Thread.sleep(2000);
										
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
			  posUtilitiesPreferencesMenu.click();
				
			  Thread.sleep(2000);
					
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutletBtn));
			  posOutletBtn.click();
			
			  Thread.sleep(2000);

			  Select posOutletSelect = new Select(posOutLetDropDown);
			  posOutletSelect.selectByVisibleText("Outlet1");
			  
			  Thread.sleep(2000);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPaymentBtn));
			  posPaymentBtn.click();
			
			  Thread.sleep(2000);
			
					
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
			  Select posOutLetDropDownSelect = new Select(posOutLetDropDown);
			  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allowedPaymentMethodsTxt));
			  allowedPaymentMethodsTxt.click();
			  
			  Thread.sleep(2000);
			  
			  
			  Thread.sleep(2000);
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountVoucherChkBox));
			  if (discountVoucherChkBox.isSelected()==false) 
			  {
				  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountVoucherChkBox));
				  discountVoucherChkBox.click();
			  }
			  
			  Thread.sleep(2000);
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
			  posSaveBtn.click();
				
			  String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
			  String exppointOfSalesConfirmationBodyMessage = "Outlet details saved successfully.";
				
			  System.out.println("pointOfSalesConfirmationBodyMessage : ."+actpointOfSalesConfirmationBodyMessage+". Value Expected : "+exppointOfSalesConfirmationBodyMessage);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
			  posInformationPopupOkBtn.click();
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			  userNameDisplay.click();
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			  logoutOption.click();
			  
			  Thread.sleep(3000);
				
			  LoginPage lp=new LoginPage(getDriver()); 
				
			  String unamelt="useralloptions";
				
			  String pawslt="12345";
						      
			  lp.enterUserName(unamelt);
						
			  lp.enterPassword(pawslt);
				
			  lpOutLetTxt.sendKeys("outlet1");
			  Thread.sleep(2000);
			  lpOutLetTxt.sendKeys(Keys.TAB);
				
			  lpCounterTxt.sendKeys("Counter Update");
			  Thread.sleep(2000);
			  lpCounterTxt.sendKeys(Keys.TAB);
						  
			  lp.clickOnSignInBtn();
					
			  Thread.sleep(8000);
					
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
			  pointOfSaleMenu.click();
			
			  Thread.sleep(2000);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
			  pointOfSaleUtilitiesMenu.click();
				
			  Thread.sleep(2000);
										
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
			  posUtilitiesPreferencesMenu.click();
				
			  Thread.sleep(2000);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPaymentBtn));
			  posPaymentBtn.click();
			
			  Thread.sleep(2000);
					
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
			  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allowedPaymentMethodsTxt));
			  String actallowedPaymentMethodsTxt = allowedPaymentMethodsTxt.getAttribute("value");
			  String expallowedPaymentMethodsTxt = "Cash,CreditCard,DebitCard,GiftVoucher,DiscountVoucher";
			  
			  
			  String actposOutLetDropDown            = posOutLetDropDownSelect.getFirstSelectedOption().getText();
			  
			  String expposOutLetDropDown            = "Outlet1";
			
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posCloseBtn));
			  posCloseBtn.click();
			  
			  System.out.println("posOutLetDropDown : "+actposOutLetDropDown+" Value Expected : "+expposOutLetDropDown);
			  
			  System.out.println("allowedPaymentMethodsTxt : "+actallowedPaymentMethodsTxt+" Value Expected : "+expallowedPaymentMethodsTxt);
				
			  
			  
			  if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage)
					  && actposOutLetDropDown.equalsIgnoreCase(expposOutLetDropDown) && actallowedPaymentMethodsTxt.equalsIgnoreCase(expallowedPaymentMethodsTxt))
				
				{
					excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
					return false;
				}
			}	
		  */
	
	// Saving Payment Method as Gift Voucher
	
		  
		  @FindBy(xpath="//*[@id='ul_ddlAllowedPayMethods']//span[contains(text(),'DiscountVoucher')]")
		  private static WebElement discountVoucherChkBox;


  public static boolean checkSavingPosPaymentsAsGiftVoucherAndDiscountVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	  
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
	  pointOfSaleMenu.click();
	
	  Thread.sleep(3000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
	  pointOfSaleUtilitiesMenu.click();
		
	  Thread.sleep(2000);
								
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
	  posUtilitiesPreferencesMenu.click();
		
	  Thread.sleep(2000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutletBtn));
	  posOutletBtn.click();
	
	  Thread.sleep(2000);

	  Select posOutletSelect = new Select(posOutLetDropDown);
	  posOutletSelect.selectByVisibleText("Outlet1");
	  
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPaymentBtn));
	  posPaymentBtn.click();
	
	  Thread.sleep(2000);
	
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
	  Select posOutLetDropDownSelect = new Select(posOutLetDropDown);
	  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allowedPaymentMethodsTxt));
	  allowedPaymentMethodsTxt.click();
	  
	  Thread.sleep(2000);
	  
	  
	  Thread.sleep(2000);
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gitVoucherChkBox));
	  if (gitVoucherChkBox.isSelected()==false) 
	  {
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gitVoucherChkBox));
		  gitVoucherChkBox.click();
	  }
	  
	  Thread.sleep(2000);
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountVoucherChkBox));
	  if (discountVoucherChkBox.isSelected()==false) 
	  {
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountVoucherChkBox));
		  discountVoucherChkBox.click();
	  }
	  
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
	  posSaveBtn.click();
		
	  String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
	  String exppointOfSalesConfirmationBodyMessage = "Outlet details saved successfully.";
		
	  System.out.println("pointOfSalesConfirmationBodyMessage : ."+actpointOfSalesConfirmationBodyMessage+". Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
	  posInformationPopupOkBtn.click();
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	  userNameDisplay.click();
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	  logoutOption.click();
	  
	  Thread.sleep(3000);
		
	  LoginPage lp=new LoginPage(getDriver()); 
		
	  String unamelt="UserAllOptions";
		
	  String pawslt="12345";
				      
	  lp.enterUserName(unamelt);
				
	  lp.enterPassword(pawslt);
		
	  lpOutLetTxt.sendKeys("outlet1");
	  Thread.sleep(2000);
	  lpOutLetTxt.sendKeys(Keys.TAB);
		
	  lpCounterTxt.sendKeys("Counter Update");
	  Thread.sleep(2000);
	  lpCounterTxt.sendKeys(Keys.TAB);
				  
	  lp.clickOnSignInBtn();
			
	  Thread.sleep(8000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
	  pointOfSaleMenu.click();
	
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
	  pointOfSaleUtilitiesMenu.click();
		
	  Thread.sleep(2000);
								
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
	  posUtilitiesPreferencesMenu.click();
		
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPaymentBtn));
	  posPaymentBtn.click();
	
	  Thread.sleep(2000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
	  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allowedPaymentMethodsTxt));
	  String actallowedPaymentMethodsTxt = allowedPaymentMethodsTxt.getAttribute("value");
	  String expallowedPaymentMethodsTxt = "Cash,CreditCard,DebitCard,GiftVoucher,DiscountVoucher";
	  
	  
	  String actposOutLetDropDown            = posOutLetDropDownSelect.getFirstSelectedOption().getText();
	  
	  String expposOutLetDropDown            = "Outlet1";
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posCloseBtn));
	  posCloseBtn.click();
	  
	  System.out.println("posOutLetDropDown : "+actposOutLetDropDown+" Value Expected : "+expposOutLetDropDown);
	  
	  System.out.println("allowedPaymentMethodsTxt : "+actallowedPaymentMethodsTxt+" Value Expected : "+expallowedPaymentMethodsTxt);
		
	  
	  
	  if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage)
			  && actposOutLetDropDown.equalsIgnoreCase(expposOutLetDropDown) && actallowedPaymentMethodsTxt.equalsIgnoreCase(expallowedPaymentMethodsTxt))
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	
  
  
  
  
  public static boolean checkSavingPosSalesWithGiftVoucherSale() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
	  pointOfSaleMenu.click();
	
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
	  pointOfSaleUtilitiesMenu.click();
		
	  Thread.sleep(2000);
								
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
	  posUtilitiesPreferencesMenu.click();
		
	  Thread.sleep(2000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutletBtn));
	  posOutletBtn.click();
	
	  Thread.sleep(2000);

	  Select posOutletSelect = new Select(posOutLetDropDown);
	  posOutletSelect.selectByVisibleText("Outlet1");
	  
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPaymentBtn));
	  posPaymentBtn.click();
	
	  Thread.sleep(2000);
	
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
	  Select posOutLetDropDownSelect = new Select(posOutLetDropDown);
	  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allowedPaymentMethodsTxt));
	  allowedPaymentMethodsTxt.click();
	  
	  Thread.sleep(2000);
	  
	  gitVoucherChkBox.click();
	  
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
	  posSaveBtn.click();
		
	  String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
	  String exppointOfSalesConfirmationBodyMessage = "Outlet details saved successfully.";
		
	  System.out.println("pointOfSalesConfirmationBodyMessage : ."+actpointOfSalesConfirmationBodyMessage+". Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
	  posInformationPopupOkBtn.click();
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	  userNameDisplay.click();
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	  logoutOption.click();
	  
	  Thread.sleep(3000);
			
	  LoginPage lp=new LoginPage(getDriver()); 
	  
	  String unamelt="su";
					      
	  String pawslt="su";
					      
	  lp.enterUserName(unamelt);
					
	  lp.enterPassword(pawslt);
	  
	  lp.clickOnSignInBtn();
			
	  Thread.sleep(8000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
	  pointOfSaleMenu.click();
	
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
	  pointOfSaleUtilitiesMenu.click();
		
	  Thread.sleep(2000);
								
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
	  posUtilitiesPreferencesMenu.click();
		
	  Thread.sleep(2000);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPaymentBtn));
	  posPaymentBtn.click();
	
	  Thread.sleep(2000);
			
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
	  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allowedPaymentMethodsTxt));
	  String actallowedPaymentMethodsTxt = allowedPaymentMethodsTxt.getAttribute("value");
	  String expallowedPaymentMethodsTxt = "Cash,CreditCard,DebitCard,Gift Voucher";
	  
	  
	  String actposOutLetDropDown            = posOutLetDropDownSelect.getFirstSelectedOption().getText();
	  
	  String expposOutLetDropDown            = "Outlet1";
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posCloseBtn));
	  posCloseBtn.click();
	  
	  System.out.println("posOutLetDropDown : "+actposOutLetDropDown+" Value Expected : "+expposOutLetDropDown);
	  
	  System.out.println("allowedPaymentMethodsTxt : "+actallowedPaymentMethodsTxt+" Value Expected : "+expallowedPaymentMethodsTxt);
		
	  
	  
	  if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage)
			  && actposOutLetDropDown.equalsIgnoreCase(expposOutLetDropDown) && actallowedPaymentMethodsTxt.equalsIgnoreCase(expallowedPaymentMethodsTxt))
		
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
			return false;
		}
	}	

  

  public boolean checkSelectItemMemberAndEmployee() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		/* getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		  userNameDisplay.click();
		  
		  Thread.sleep(3000);*/
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		  userNameDisplay.click();
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		  logoutOption.click();
		  
		  Thread.sleep(3000);
			
		  LoginPage lp=new LoginPage(getDriver()); 
			
		  String unamelt="UserAllOptions";
			
		  String pawslt="12345";
					      
		  lp.enterUserName(unamelt);
					
		  lp.enterPassword(pawslt);
			
		  lpOutLetTxt.sendKeys("outlet1");
		  Thread.sleep(2000);
		  lpOutLetTxt.sendKeys(Keys.TAB);
			
		  lpCounterTxt.sendKeys("Counter Update");
		  Thread.sleep(2000);
		  lpCounterTxt.sendKeys(Keys.TAB);
					  
		  lp.clickOnSignInBtn();
				
		  Thread.sleep(8000);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
		pointOfSaleMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
		pointOfSaleMainScreenMenu.click();
		
		Thread.sleep(2000);
								
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMS));
		pointOfSaleMS.click();
		
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Item"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Item by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchItemBtn));
		searchItemBtn.click();
		
		Thread.sleep(2000);
		
		int itemBodyListCount = itemBodyList.size();
		
		
		for(int i=0;i<itemBodyListCount;i++)
		{
			String data = itemBodyList.get(i).getText();

			
			if (i!=itemBodyListCount-1) 
			{
				int temp=i+1;
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();",itemBodyList.get(temp));
				
				if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					getAction().doubleClick(itemBodyList.get(i)).build().perform();
					
					break;
				}
			}
		}	
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceTxt));
		changePriceTxt.click();
		changePriceTxt.sendKeys(Keys.END);
		changePriceTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		changePriceTxt.sendKeys("500");
		changePriceTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceOkBtn));
		changePriceOkBtn.click();
		
		Thread.sleep(3000);

		Thread.sleep(3000);
		
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Member"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCountMember = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCountMember;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Member by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMemberBtn));
		searchMemberBtn.click();
		
		Thread.sleep(2000);
		
		int memberBodyListCount = memberBodyList.size();
		
		
		for(int i=0;i<memberBodyListCount;i++)
		{
			String data = memberBodyList.get(i).getText();

			if(data.equalsIgnoreCase("TestMemberUpdate"))
			{
				getAction().doubleClick(memberBodyList.get(i)).build().perform();
			}
			
		}	
		
		Thread.sleep(2000);
		
		String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessage = "Points definition do not exist for the selected member. Do you want to continue?";
		
		System.out.println("pointOfSalesConfirmationBodyMessage : "+actpointOfSalesConfirmationBodyMessage+" Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(3000);
		
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Employee"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCountEmployee = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCountEmployee;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Employee by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchEmployeeBtn));
		searchEmployeeBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(employeeCodeRow1));
		getAction().doubleClick(employeeCodeRow1).build().perform();
	
		
		if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
	  
  

  public boolean checkTaskOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Task"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		ArrayList<String> rightPanelListArray = new ArrayList<String>();			
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			rightPanelListArray.add(data);
		}
		
		
		String actrightPanelList = rightPanelListArray.toString();
		
		String exprightPanelList = "[Alt N, Cash In, Alt O, Cash Out, Alt P, Cash Collection, Alt Q, Reprint Receipt/Bill, Alt R, Open – Day In, Alt S, Close – Day End, Alt T, Reprint Day End, Alt U, Purchase Order, Alt V, Gift Voucher Sale, Alt W, Gift Voucher Transfer, Alt X, Discount Voucher Transfer]";
		
		System.out.println("actrightPanelList : "+actrightPanelList);
		System.out.println("exprightPanelList : "+exprightPanelList);
		
		
	
		if(actrightPanelList.equalsIgnoreCase(exprightPanelList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
	
  
  
  @FindBy(xpath="//div[@id='divCashInOut']/div[2]/div[2]/div[1]/label/input")
  private static WebElement cashInCounterRadio;
  
  @FindBy(xpath="//div[@id='divCashInOut']/div[2]/div[2]/div[2]/label/input")
  private static WebElement cashInAccountRadio;
  
  @FindBy(xpath="//select[@id='ddlCounter']")
  private static WebElement ciFromCounterDropDown;
  
  @FindBy(xpath="//input[@id='txtAmount']")
  private static WebElement ciAmountTxt;
  
  @FindBy(xpath="//textarea[@id='txtRemarks']")
  private static WebElement ciRemarksTxt;
  
  @FindBy(xpath="//span[@class='icon-back icon-font6']")
  private static WebElement ciBackBtn;
  
  @FindBy(xpath="//div[@id='divCashInOutFooter']/div/div[2]")
  private static WebElement ciSaveBtn;
  
  @FindBy(xpath="//span[@class='icon-print icon-font6']")
  private static WebElement ciPrintAndSaveBtn;
  
  @FindBy(xpath="//span[@class='icon-search icon-font6']")
  private static WebElement ciSearchBtn;
  
  @FindBy(xpath="//span[@class='icon-clear icon-font6']")
  private static WebElement ciClearBtn;
  
  @FindBy(xpath="//select[@id='ddlAccount']")
  private static WebElement ciFromAccountDropDown;
  

  public boolean checkCashInThroughCounter() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Cash In"))
			{
				getAction().doubleClick(rightPanelList.get(i)).build().perform();
				
				break;
			}
		}
		
		boolean actcashInCounterRadio    = cashInCounterRadio.isDisplayed();
		boolean actcashInAccountRadio    = cashInAccountRadio.isDisplayed();
		boolean actciFromCounterDropDown = ciFromCounterDropDown.isDisplayed();
		boolean actciAmountTxt           = ciAmountTxt.isDisplayed();
		boolean actciRemarksTxt          = ciRemarksTxt.isDisplayed();
		boolean actciBackBtn             = ciBackBtn.isDisplayed();
		boolean actciSaveBtn             = ciSaveBtn.isDisplayed();
		boolean actciPrintAndSaveBtn     = ciPrintAndSaveBtn.isDisplayed();
		boolean actciSearchBtn           = ciSearchBtn.isDisplayed();
		boolean actciClearBtn            = ciClearBtn.isDisplayed();
		
		boolean expcashInCounterRadio    = true;
		boolean expcashInAccountRadio    = true;
		boolean expciFromCounterDropDown = true;
		boolean expciAmountTxt           = true;
		boolean expciRemarksTxt          = true;
		boolean expciBackBtn             = true;
		boolean expciSaveBtn             = true;
		boolean expciPrintAndSaveBtn     = true;
		boolean expciSearchBtn           = true;
		boolean expciClearBtn            = true;
		
		System.out.println("cashInCounterRadio    : "+actcashInCounterRadio    +" Value Expected : "+expcashInCounterRadio);
		System.out.println("cashInAccountRadio    : "+actcashInAccountRadio    +" Value Expected : "+expcashInAccountRadio);
		System.out.println("ciFromCounterDropDown : "+actciFromCounterDropDown +" Value Expected : "+expciFromCounterDropDown);
		System.out.println("ciAmountTxt           : "+actciAmountTxt           +" Value Expected : "+expciAmountTxt);
		System.out.println("ciRemarksTxt          : "+actciRemarksTxt          +" Value Expected : "+expciRemarksTxt);
		System.out.println("ciBackBtn             : "+actciBackBtn             +" Value Expected : "+expciBackBtn);
		System.out.println("ciSaveBtn             : "+actciSaveBtn             +" Value Expected : "+expciSaveBtn);
		System.out.println("ciPrintAndSaveBtn     : "+actciPrintAndSaveBtn     +" Value Expected : "+expciPrintAndSaveBtn);
		System.out.println("ciSearchBtn           : "+actciSearchBtn           +" Value Expected : "+expciSearchBtn);
		System.out.println("ciClearBtn            : "+actciClearBtn            +" Value Expected : "+expciClearBtn);
		
		Select ciFromCounterDropDownSelect = new Select(ciFromCounterDropDown);
		ciFromCounterDropDownSelect.selectByVisibleText("Counter2");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ciAmountTxt));
		ciAmountTxt.click();
		ciAmountTxt.sendKeys("10");
		ciAmountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ciSaveBtn));
		ciSaveBtn.click();
		
		String expMessage="Record saved successfully,Counter Entry : New Record No :-1";
 		
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
	
		if(actcashInCounterRadio==expcashInCounterRadio && actcashInAccountRadio==expcashInAccountRadio && actciFromCounterDropDown==expciFromCounterDropDown
				&& actciAmountTxt==expciAmountTxt && actciRemarksTxt==expciRemarksTxt && actciBackBtn==expciBackBtn && actciSaveBtn==expciSaveBtn
				&& actciPrintAndSaveBtn==expciPrintAndSaveBtn && actciSearchBtn==expciSearchBtn && actciClearBtn==expciClearBtn
				
				&& actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 

  
  public boolean checkCashInThroughAccount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashInAccountRadio));
		cashInAccountRadio.click();
		
		boolean actcashInCounterRadio    = cashInCounterRadio.isDisplayed();
		boolean actcashInAccountRadio    = cashInAccountRadio.isDisplayed();
		boolean actciFromAccountDropDown = ciFromAccountDropDown.isDisplayed();
		boolean actciAmountTxt           = ciAmountTxt.isDisplayed();
		boolean actciRemarksTxt          = ciRemarksTxt.isDisplayed();
		boolean actciBackBtn             = ciBackBtn.isDisplayed();
		boolean actciSaveBtn             = ciSaveBtn.isDisplayed();
		boolean actciPrintAndSaveBtn     = ciPrintAndSaveBtn.isDisplayed();
		boolean actciSearchBtn           = ciSearchBtn.isDisplayed();
		boolean actciClearBtn            = ciClearBtn.isDisplayed();
		
		boolean expcashInCounterRadio    = true;
		boolean expcashInAccountRadio    = true;
		boolean expciFromAccountDropDown = true;
		boolean expciAmountTxt           = true;
		boolean expciRemarksTxt          = true;
		boolean expciBackBtn             = true;
		boolean expciSaveBtn             = true;
		boolean expciPrintAndSaveBtn     = true;
		boolean expciSearchBtn           = true;
		boolean expciClearBtn            = true;
		
		System.out.println("cashInCounterRadio    : "+actcashInCounterRadio    +" Value Expected : "+expcashInCounterRadio);
		System.out.println("cashInAccountRadio    : "+actcashInAccountRadio    +" Value Expected : "+expcashInAccountRadio);
		System.out.println("ciFromAccountDropDown : "+actciFromAccountDropDown +" Value Expected : "+expciFromAccountDropDown);
		System.out.println("ciAmountTxt           : "+actciAmountTxt           +" Value Expected : "+expciAmountTxt);
		System.out.println("ciRemarksTxt          : "+actciRemarksTxt          +" Value Expected : "+expciRemarksTxt);
		System.out.println("ciBackBtn             : "+actciBackBtn             +" Value Expected : "+expciBackBtn);
		System.out.println("ciSaveBtn             : "+actciSaveBtn             +" Value Expected : "+expciSaveBtn);
		System.out.println("ciPrintAndSaveBtn     : "+actciPrintAndSaveBtn     +" Value Expected : "+expciPrintAndSaveBtn);
		System.out.println("ciSearchBtn           : "+actciSearchBtn           +" Value Expected : "+expciSearchBtn);
		System.out.println("ciClearBtn            : "+actciClearBtn            +" Value Expected : "+expciClearBtn);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ciAmountTxt));
		ciAmountTxt.click();
		ciAmountTxt.sendKeys("10");
		ciAmountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ciSaveBtn));
		ciSaveBtn.click();
		
		String expMessage="Record saved successfully,Account Posting : New Voucher No :-4";
 		
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
	
		if(actcashInCounterRadio==expcashInCounterRadio && actcashInAccountRadio==expcashInAccountRadio && actciFromAccountDropDown==expciFromAccountDropDown
				&& actciAmountTxt==expciAmountTxt && actciRemarksTxt==expciRemarksTxt && actciBackBtn==expciBackBtn && actciSaveBtn==expciSaveBtn
				&& actciPrintAndSaveBtn==expciPrintAndSaveBtn && actciSearchBtn==expciSearchBtn && actciClearBtn==expciClearBtn
				
				&& actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  
  

  public boolean checkCashOutThroughCounter() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Task"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Cash Out"))
			{
				getAction().doubleClick(rightPanelList.get(i)).build().perform();
				
				break;
			}
		}
		
		boolean actcashInCounterRadio    = cashInCounterRadio.isDisplayed();
		boolean actcashInAccountRadio    = cashInAccountRadio.isDisplayed();
		boolean actciFromCounterDropDown = ciFromCounterDropDown.isDisplayed();
		boolean actciAmountTxt           = ciAmountTxt.isDisplayed();
		boolean actciRemarksTxt          = ciRemarksTxt.isDisplayed();
		boolean actciBackBtn             = ciBackBtn.isDisplayed();
		boolean actciSaveBtn             = ciSaveBtn.isDisplayed();
		boolean actciPrintAndSaveBtn     = ciPrintAndSaveBtn.isDisplayed();
		boolean actciSearchBtn           = ciSearchBtn.isDisplayed();
		boolean actciClearBtn            = ciClearBtn.isDisplayed();
		
		boolean expcashInCounterRadio    = true;
		boolean expcashInAccountRadio    = true;
		boolean expciFromCounterDropDown = true;
		boolean expciAmountTxt           = true;
		boolean expciRemarksTxt          = true;
		boolean expciBackBtn             = true;
		boolean expciSaveBtn             = true;
		boolean expciPrintAndSaveBtn     = true;
		boolean expciSearchBtn           = true;
		boolean expciClearBtn            = true;
		
		System.out.println("cashInCounterRadio    : "+actcashInCounterRadio    +" Value Expected : "+expcashInCounterRadio);
		System.out.println("cashInAccountRadio    : "+actcashInAccountRadio    +" Value Expected : "+expcashInAccountRadio);
		System.out.println("ciFromCounterDropDown : "+actciFromCounterDropDown +" Value Expected : "+expciFromCounterDropDown);
		System.out.println("ciAmountTxt           : "+actciAmountTxt           +" Value Expected : "+expciAmountTxt);
		System.out.println("ciRemarksTxt          : "+actciRemarksTxt          +" Value Expected : "+expciRemarksTxt);
		System.out.println("ciBackBtn             : "+actciBackBtn             +" Value Expected : "+expciBackBtn);
		System.out.println("ciSaveBtn             : "+actciSaveBtn             +" Value Expected : "+expciSaveBtn);
		System.out.println("ciPrintAndSaveBtn     : "+actciPrintAndSaveBtn     +" Value Expected : "+expciPrintAndSaveBtn);
		System.out.println("ciSearchBtn           : "+actciSearchBtn           +" Value Expected : "+expciSearchBtn);
		System.out.println("ciClearBtn            : "+actciClearBtn            +" Value Expected : "+expciClearBtn);
		
		Select ciFromCounterDropDownSelect = new Select(ciFromCounterDropDown);
		ciFromCounterDropDownSelect.selectByVisibleText("Counter2");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ciAmountTxt));
		ciAmountTxt.click();
		ciAmountTxt.sendKeys("10");
		ciAmountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ciSaveBtn));
		ciSaveBtn.click();
		
		String expMessage="Record saved successfully,Counter Entry : New Record No :-3";
 		
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
	
		if(actcashInCounterRadio==expcashInCounterRadio && actcashInAccountRadio==expcashInAccountRadio && actciFromCounterDropDown==expciFromCounterDropDown
				&& actciAmountTxt==expciAmountTxt && actciRemarksTxt==expciRemarksTxt && actciBackBtn==expciBackBtn && actciSaveBtn==expciSaveBtn
				&& actciPrintAndSaveBtn==expciPrintAndSaveBtn && actciSearchBtn==expciSearchBtn && actciClearBtn==expciClearBtn
				
				&& actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 

  
  

  public boolean checkCashOutThroughAccount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashInAccountRadio));
		cashInAccountRadio.click();
		
		boolean actcashInCounterRadio    = cashInCounterRadio.isDisplayed();
		boolean actcashInAccountRadio    = cashInAccountRadio.isDisplayed();
		boolean actciFromAccountDropDown = ciFromAccountDropDown.isDisplayed();
		boolean actciAmountTxt           = ciAmountTxt.isDisplayed();
		boolean actciRemarksTxt          = ciRemarksTxt.isDisplayed();
		boolean actciBackBtn             = ciBackBtn.isDisplayed();
		boolean actciSaveBtn             = ciSaveBtn.isDisplayed();
		boolean actciPrintAndSaveBtn     = ciPrintAndSaveBtn.isDisplayed();
		boolean actciSearchBtn           = ciSearchBtn.isDisplayed();
		boolean actciClearBtn            = ciClearBtn.isDisplayed();
		
		boolean expcashInCounterRadio    = true;
		boolean expcashInAccountRadio    = true;
		boolean expciFromAccountDropDown = true;
		boolean expciAmountTxt           = true;
		boolean expciRemarksTxt          = true;
		boolean expciBackBtn             = true;
		boolean expciSaveBtn             = true;
		boolean expciPrintAndSaveBtn     = true;
		boolean expciSearchBtn           = true;
		boolean expciClearBtn            = true;
		
		System.out.println("cashInCounterRadio    : "+actcashInCounterRadio    +" Value Expected : "+expcashInCounterRadio);
		System.out.println("cashInAccountRadio    : "+actcashInAccountRadio    +" Value Expected : "+expcashInAccountRadio);
		System.out.println("ciFromAccountDropDown : "+actciFromAccountDropDown +" Value Expected : "+expciFromAccountDropDown);
		System.out.println("ciAmountTxt           : "+actciAmountTxt           +" Value Expected : "+expciAmountTxt);
		System.out.println("ciRemarksTxt          : "+actciRemarksTxt          +" Value Expected : "+expciRemarksTxt);
		System.out.println("ciBackBtn             : "+actciBackBtn             +" Value Expected : "+expciBackBtn);
		System.out.println("ciSaveBtn             : "+actciSaveBtn             +" Value Expected : "+expciSaveBtn);
		System.out.println("ciPrintAndSaveBtn     : "+actciPrintAndSaveBtn     +" Value Expected : "+expciPrintAndSaveBtn);
		System.out.println("ciSearchBtn           : "+actciSearchBtn           +" Value Expected : "+expciSearchBtn);
		System.out.println("ciClearBtn            : "+actciClearBtn            +" Value Expected : "+expciClearBtn);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ciAmountTxt));
		ciAmountTxt.click();
		ciAmountTxt.sendKeys("10");
		ciAmountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ciSaveBtn));
		ciSaveBtn.click();
		
		String expMessage="Record saved successfully,Account Posting : New Voucher No :-5";
 		
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
	
		if(actcashInCounterRadio==expcashInCounterRadio && actcashInAccountRadio==expcashInAccountRadio && actciFromAccountDropDown==expciFromAccountDropDown
				&& actciAmountTxt==expciAmountTxt && actciRemarksTxt==expciRemarksTxt && actciBackBtn==expciBackBtn && actciSaveBtn==expciSaveBtn
				&& actciPrintAndSaveBtn==expciPrintAndSaveBtn && actciSearchBtn==expciSearchBtn && actciClearBtn==expciClearBtn
				
				&& actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  @FindBy(xpath="//div[@id='divCashInOut']/div[2]/div[2]/div[1]/label/input")
  private static WebElement ccCounterRadio;
  

  public boolean checkCashCollection() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Task"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Cash Collection"))
			{
				getAction().doubleClick(rightPanelList.get(i)).build().perform();
				
				break;
			}
		}
		
		boolean actccCounterRadio        = ccCounterRadio.isDisplayed();
		boolean actciFromAccountDropDown = ciFromAccountDropDown.isDisplayed();
		boolean actciAmountTxt           = ciAmountTxt.isDisplayed();
		boolean actciRemarksTxt          = ciRemarksTxt.isDisplayed();
		boolean actciBackBtn             = ciBackBtn.isDisplayed();
		boolean actciSaveBtn             = ciSaveBtn.isDisplayed();
		boolean actciPrintAndSaveBtn     = ciPrintAndSaveBtn.isDisplayed();
		boolean actciSearchBtn           = ciSearchBtn.isDisplayed();
		boolean actciClearBtn            = ciClearBtn.isDisplayed();
		
		boolean expccCounterRadio        = true;
		boolean expciFromAccountDropDown = true;
		boolean expciAmountTxt           = true;
		boolean expciRemarksTxt          = true;
		boolean expciBackBtn             = true;
		boolean expciSaveBtn             = true;
		boolean expciPrintAndSaveBtn     = true;
		boolean expciSearchBtn           = true;
		boolean expciClearBtn            = true;
		
		System.out.println("ccCounterRadio        : "+actccCounterRadio        +" Value Expected : "+expccCounterRadio);
		System.out.println("ciFromAccountDropDown : "+actciFromAccountDropDown +" Value Expected : "+expciFromAccountDropDown);
		System.out.println("ciAmountTxt           : "+actciAmountTxt           +" Value Expected : "+expciAmountTxt);
		System.out.println("ciRemarksTxt          : "+actciRemarksTxt          +" Value Expected : "+expciRemarksTxt);
		System.out.println("ciBackBtn             : "+actciBackBtn             +" Value Expected : "+expciBackBtn);
		System.out.println("ciSaveBtn             : "+actciSaveBtn             +" Value Expected : "+expciSaveBtn);
		System.out.println("ciPrintAndSaveBtn     : "+actciPrintAndSaveBtn     +" Value Expected : "+expciPrintAndSaveBtn);
		System.out.println("ciSearchBtn           : "+actciSearchBtn           +" Value Expected : "+expciSearchBtn);
		System.out.println("ciClearBtn            : "+actciClearBtn            +" Value Expected : "+expciClearBtn);
		
		Select ciFromAccountDropDownSelect = new Select(ciFromAccountDropDown);
		ciFromAccountDropDownSelect.selectByVisibleText("Cash");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ciAmountTxt));
		ciAmountTxt.click();
		ciAmountTxt.sendKeys("10");
		ciAmountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ciSaveBtn));
		ciSaveBtn.click();
		
		String expMessage="Record saved successfully,Account Posting : New Voucher No :-6";
 		
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
	
		if(actccCounterRadio==expccCounterRadio && actciFromAccountDropDown==expciFromAccountDropDown
				&& actciAmountTxt==expciAmountTxt && actciRemarksTxt==expciRemarksTxt && actciBackBtn==expciBackBtn && actciSaveBtn==expciSaveBtn
				&& actciPrintAndSaveBtn==expciPrintAndSaveBtn && actciSearchBtn==expciSearchBtn && actciClearBtn==expciClearBtn
				
				&& actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  
  
  @FindBy(xpath="//input[@id='rbtBillNumber']")
  private static WebElement billNoRadio;
  
  @FindBy(xpath="//input[@id='rbtMemberName']")
  private static WebElement memberRadio;
  
  @FindBy(xpath="//input[@id='rbtBillDate']")
  private static WebElement billDateRadio;
  
  @FindBy(xpath="//input[@id='rbtBeetweenDate']")
  private static WebElement betweenDatesRadio;
  
  @FindBy(xpath="//input[@id='rbtSalesMan']")
  private static WebElement salesManRadio;
  
  @FindBy(xpath="//input[@id='divReprintBillNumber']")
  private static WebElement billNoTxt;
  
  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalMain']/div[@id='divReprintBillModal']/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[2]/div[2]/div[1]/div[1]/span[1]")
  private static WebElement billNoSearchBtn;
  
  @FindBy(xpath="//*[@id='tHeadReprintBill']/tr/td")
  private static List<WebElement> rePrintBillGridHeaderList;;
  
  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalMain']/div[@id='divReprintBillModal']/div[1]/div[1]/div[1]/div[3]/div[1]/div[2]/div[1]/div[1]/span[1]")
  private static WebElement rpbPrintLastBillBtn;
  
  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalMain']/div[@id='divReprintBillModal']/div[1]/div[1]/div[1]/div[3]/div[1]/div[2]/div[2]/div[1]/span[1]")
  private static WebElement rpbPrintBtn;
  
  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalMain']/div[@id='divReprintBillModal']/div[1]/div[1]/div[1]/div[3]/div[1]/div[2]/div[3]/div[1]/span[1]")
  private static WebElement rpbClearBtn;
  
  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalMain']/div[@id='divReprintBillModal']/div[1]/div[1]/div[1]/div[3]/div[1]/div[2]/div[4]/div[1]/span[1]")
  private static WebElement rpbCloseBtn;
  
  @FindBy(xpath="//tbody/tr[@id='1']/td[1]/input[1]")
  private static WebElement selectRadioRow1;
  
  @FindBy(xpath="//*[@id='tBodyReprintBill']")
  private static WebElement rePrintBillGridBody;
  
  public boolean checkReprintReceiptBill() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Task"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Reprint Receipt/Bill"))
			{
				getAction().doubleClick(rightPanelList.get(i)).build().perform();
				
				break;
			}
		}
		
		boolean actbillNoRadio         = billNoRadio.isDisplayed();
		boolean actmemberRadio         = memberRadio.isDisplayed();
		boolean actbillDateRadio       = billDateRadio.isDisplayed();
		boolean actbetweenDatesRadio   = betweenDatesRadio.isDisplayed();
		boolean actsalesManRadio       = salesManRadio.isDisplayed();
		boolean actbillNoTxt           = billNoTxt.isDisplayed();
		boolean actbillNoSearchBtn     = billNoSearchBtn.isDisplayed();
		boolean actrpbPrintLastBillBtn = rpbPrintLastBillBtn.isDisplayed();
		boolean actrpbPrintBtn         = rpbPrintBtn.isDisplayed();
		boolean actrpbClearBtn         = rpbClearBtn.isDisplayed();
		boolean actrpbCloseBtn         = rpbCloseBtn.isDisplayed();

		boolean expbillNoRadio         = true;
		boolean expmemberRadio         = true;
		boolean expbillDateRadio       = true;
		boolean expbetweenDatesRadio   = true;
		boolean expsalesManRadio       = true;
		boolean expbillNoTxt           = true;
		boolean expbillNoSearchBtn     = true;
		boolean exprpbPrintLastBillBtn = true;
		boolean exprpbPrintBtn         = true;
		boolean exprpbClearBtn         = true;
		boolean exprpbCloseBtn         = true;
		
		System.out.println("billNoRadio            : "+actbillNoRadio            +" Value Expected : "+expbillNoRadio);
		System.out.println("memberRadio            : "+actmemberRadio            +" Value Expected : "+expmemberRadio);
		System.out.println("billDateRadio          : "+actbillDateRadio          +" Value Expected : "+expbillDateRadio);
		System.out.println("betweenDatesRadio      : "+actbetweenDatesRadio      +" Value Expected : "+expbetweenDatesRadio);
		System.out.println("salesManRadio          : "+actsalesManRadio          +" Value Expected : "+expsalesManRadio);
		System.out.println("billNoTxt              : "+actbillNoTxt              +" Value Expected : "+expbillNoTxt);
		System.out.println("billNoSearchBtn        : "+actbillNoSearchBtn        +" Value Expected : "+expbillNoSearchBtn);
		System.out.println("rpbPrintLastBillBtn    : "+actrpbPrintLastBillBtn    +" Value Expected : "+exprpbPrintLastBillBtn);
		System.out.println("rpbPrintBtn            : "+actrpbPrintBtn            +" Value Expected : "+exprpbPrintBtn);
		System.out.println("rpbClearBtn            : "+actrpbClearBtn            +" Value Expected : "+exprpbClearBtn);
		System.out.println("rpbCloseBtn            : "+actrpbCloseBtn            +" Value Expected : "+exprpbCloseBtn);
		
		int rePrintBillGridHeaderListCount = rePrintBillGridHeaderList.size();
		
		ArrayList<String> rePrintBillGridHeaderListArray = new ArrayList<String>();
		
		for(int i=0;i<rePrintBillGridHeaderListCount;i++)
		{
			String data = rePrintBillGridHeaderList.get(i).getText();
			
			rePrintBillGridHeaderListArray.add(data);
		}
		
		String actrePrintBillGridHeaderList = rePrintBillGridHeaderListArray.toString();
		String exprePrintBillGridHeaderList = "[, Bill Number, Bill Date, Bill Amount, Member Name, Salesman]";
		
		System.out.println("actrePrintBillGridHeaderList : "+actrePrintBillGridHeaderList);
		System.out.println("exprePrintBillGridHeaderList : "+exprePrintBillGridHeaderList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billNoSearchBtn));
		billNoSearchBtn.click();
		
		Thread.sleep(2000);
		
		boolean actselectRadioRow1 = selectRadioRow1.isDisplayed();
		boolean expselectRadioRow1 = true;
		
		System.out.println("selectRadioRow1 : "+actselectRadioRow1+" Value Expected : "+expselectRadioRow1);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rpbClearBtn));
		rpbClearBtn.click();
		
		Thread.sleep(2000);
		
		boolean actrePrintBillGridBody = rePrintBillGridBody.getText().isEmpty();
		boolean exprePrintBillGridBody = true;
		
		System.out.println("rePrintBillGridBody : "+actrePrintBillGridBody+" Value Expected : "+exprePrintBillGridBody);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rpbPrintLastBillBtn));
		rpbPrintLastBillBtn.click();
		
		Thread.sleep(3000);

		ArrayList<String> openTabs2 = new ArrayList<String>(getDriver().getWindowHandles());
		
	 	System.out.println("openTabs2"+openTabs2);
	
	 	getDriver().switchTo().window(openTabs2.get(1));
	 	
		Thread.sleep(2000);
		
	 	getDriver().close();
	
	 	Thread.sleep(2000);
	
	 	getDriver().switchTo().window(openTabs2.get(0));
		
	 	
	 	Thread.sleep(3000);
	 	
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billNoSearchBtn));
		billNoSearchBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRadioRow1));
		selectRadioRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rpbPrintBtn));
		rpbPrintBtn.click();
		
		
		Thread.sleep(3000);

		ArrayList<String> openTabs3 = new ArrayList<String>(getDriver().getWindowHandles());
		
	 	System.out.println("openTabs2"+openTabs3);
	
	 	getDriver().switchTo().window(openTabs3.get(1));
	 	
		Thread.sleep(2000);
		
	 	getDriver().close();
	
	 	Thread.sleep(2000);
	
	 	getDriver().switchTo().window(openTabs3.get(0));
		
	 	
	 	Thread.sleep(3000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rpbCloseBtn));
	 	rpbCloseBtn.click();
	 	
		if(actbillNoRadio==expbillNoRadio && actmemberRadio==expmemberRadio && actbillDateRadio==expbillDateRadio && actbetweenDatesRadio==expbetweenDatesRadio
				&& actsalesManRadio==expsalesManRadio && actbillNoTxt==expbillNoTxt && actbillNoSearchBtn==expbillNoSearchBtn && actrpbPrintLastBillBtn==exprpbPrintLastBillBtn
				&& actrpbPrintBtn==exprpbPrintBtn && actrpbClearBtn==exprpbClearBtn && actrpbCloseBtn==exprpbCloseBtn 
				
				&& actrePrintBillGridHeaderList.equalsIgnoreCase(exprePrintBillGridHeaderList)
				
				&& actselectRadioRow1==expselectRadioRow1 && actrePrintBillGridBody==exprePrintBillGridBody)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  
  
  
  public boolean checkOpenDayInShortCut() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Task"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Open – Day In"))
			{
				getAction().doubleClick(rightPanelList.get(i)).build().perform();
				
				break;
			}
		}
		
		Thread.sleep(2000);
		
		String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessage = "Day End is not done";
		
		System.out.println("pointOfSalesConfirmationBodyMessage : "+actpointOfSalesConfirmationBodyMessage+" Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
		posInformationPopupOkBtn.click();
		
	 	
		if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  

  
  public boolean checkCloseDayEndShortCut() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Task"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Close – Day End"))
			{
				getAction().doubleClick(rightPanelList.get(i)).build().perform();
				
				break;
			}
		}
		
		Thread.sleep(2000);

		boolean actdayEndTab                  = dayEndTab.isDisplayed();
		boolean actvouhcerReferenceNoTxt      = vouhcerReferenceNoTxt.isDisplayed();
		boolean actdeCounterTxt               = deCounterTxt.isDisplayed();
		boolean actdeCashierTxt               = deCashierTxt.isDisplayed();
		boolean actdeCashInDrawerTxt          = deCashInDrawerTxt.isDisplayed();
		boolean actdeCardAmountTxt            = deCardAmountTxt.isDisplayed();
		boolean actdeChequeAmountTxt          = deChequeAmountTxt.isDisplayed();
		
		JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		js1.executeScript("arguments[0].scrollIntoView();", deprePaidWalletAmountTxt);
		 
		boolean actdeGiftVouhcerAmountTxt     = deGiftVouhcerAmountTxt.isDisplayed();
		boolean actdeCreditNoteTxt            = deCreditNoteTxt.isDisplayed();
		boolean actdeDiscountVoucherAmountTxt = deDiscountVoucherAmountTxt.isDisplayed();
		boolean actdeCreditSalesAmountTxt     = deCreditSalesAmountTxt.isDisplayed();
		boolean actdeEpayAmountTxt            = deEpayAmountTxt.isDisplayed();
		boolean actdeprePaidWalletAmountTxt   = deprePaidWalletAmountTxt.isDisplayed();
		boolean actdeBackBtn                  = deBackBtn.isDisplayed();
		boolean actdeClearBtn                 = deClearBtn.isDisplayed();
		boolean actdePostBtn                  = dePostBtn.isDisplayed();
		boolean actdePostAndPrintBtn          = dePostAndPrintBtn.isDisplayed();
		
		boolean expdayEndTab                  = true;
		boolean expvouhcerReferenceNoTxt      = true;
		boolean expdeCounterTxt               = true;
		boolean expdeCashierTxt               = true;
		boolean expdeCashInDrawerTxt          = true;
		boolean expdeCardAmountTxt            = true;
		boolean expdeChequeAmountTxt          = true;
		boolean expdeGiftVouhcerAmountTxt     = true;
		boolean expdeCreditNoteTxt            = true;
		boolean expdeDiscountVoucherAmountTxt = true;
		boolean expdeCreditSalesAmountTxt     = true;
		boolean expdeEpayAmountTxt            = true;
		boolean expdeprePaidWalletAmountTxt   = true;
		boolean expdeBackBtn                  = true;
		boolean expdeClearBtn                 = true;
		boolean expdePostBtn                  = true;
		boolean expdePostAndPrintBtn          = true;
		
		System.out.println("dayEndTab                  : "+actdayEndTab+" Value Expected  : "+expdayEndTab);
		System.out.println("vouhcerReferenceNoTxt      : "+actvouhcerReferenceNoTxt+" Value Expected  : "+expvouhcerReferenceNoTxt);
		System.out.println("deCounterTxt               : "+actdeCounterTxt+" Value Expected  : "+expdeCounterTxt);
		System.out.println("deCashierTxt               : "+actdeCashierTxt+" Value Expected  : "+expdeCashierTxt);
		System.out.println("deCashInDrawerTxt          : "+actdeCashInDrawerTxt+" Value Expected  : "+expdeCashInDrawerTxt);
		System.out.println("deCardAmountTxt            : "+actdeCardAmountTxt+" Value Expected  : "+expdeCardAmountTxt);
		System.out.println("deChequeAmountTxt          : "+actdeChequeAmountTxt+" Value Expected  : "+expdeChequeAmountTxt);
		System.out.println("deGiftVouhcerAmountTxt     : "+actdeGiftVouhcerAmountTxt+" Value Expected  : "+expdeGiftVouhcerAmountTxt);
		System.out.println("deCreditNoteTxt            : "+actdeCreditNoteTxt+" Value Expected  : "+expdeCreditNoteTxt);
		System.out.println("deDiscountVoucherAmountTxt : "+actdeDiscountVoucherAmountTxt+" Value Expected  : "+expdeDiscountVoucherAmountTxt);
		System.out.println("deCreditSalesAmountTxt     : "+actdeCreditSalesAmountTxt+" Value Expected  : "+expdeCreditSalesAmountTxt);
		System.out.println("deEpayAmountTxt            : "+actdeEpayAmountTxt+" Value Expected  : "+expdeEpayAmountTxt);
		System.out.println("deprePaidWalletAmountTxt   : "+actdeprePaidWalletAmountTxt+" Value Expected  : "+expdeprePaidWalletAmountTxt);
		System.out.println("deBackBtn                  : "+actdeBackBtn+" Value Expected  : "+expdeBackBtn);
		System.out.println("deClearBtn                 : "+actdeClearBtn+" Value Expected  : "+expdeClearBtn);
		System.out.println("dePostBtn                  : "+actdePostBtn+" Value Expected  : "+expdePostBtn);
		System.out.println("dePostAndPrintBtn          : "+actdePostAndPrintBtn+" Value Expected  : "+expdePostAndPrintBtn);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dePostBtn));
		dePostBtn.click();
		
		Thread.sleep(2000);
		
		int dayEndSummaryListCount = dayEndSummaryList.size();
		
		ArrayList<String> dayEndSummaryListArray = new ArrayList<String>();
		
		for(int i=0;i<dayEndSummaryListCount;i++)
		{
			String data = dayEndSummaryList.get(i).getText();
			
			dayEndSummaryListArray.add(data);
		}
		
		String actdayEndSummaryList = dayEndSummaryListArray.toString();
		String expdayEndSummaryList = "[Opening Balance, :, 0.00, Sales, Cash Sales, :, 0.00, Credit Card Sales, :, 0.00, Debit Card Sales, :, 0.00, Cheque Sale, :, 0.00, Gift Voucher Sales, :, 0.00, Credit Note Sale, :, 0.00, Points Redemption Sale, :, 0.00, Discount Voucher Sales, :, 0.00, Credit Sales, :, 0.00, E-Payment Sale, :, 7.00, Pre Paid Wallet Sale, :, 0.00, Round Off Amount, :, 0.00, Pre Order Deposit, Cash, :, 0.00, Credit Card, :, 0.00, Debit Card, :, 0.00, Cheque, :, 0.00, Gift Voucher, :, 0.00, Credit Note, :, 0.00, Points Redemption, :, 0.00, Discount Voucher, :, 0.00, Credit Sale, :, 0.00, E-Payment, :, 0.00, Pre Paid Wallet, :, 0.00, Total Invoice Amount, :, 100.00, Sales Return, Cash Sales Return, :, 0.70, Coupon Sales Return, :, 0.00, Credit Note Sales Return, :, 0.00, Credit Card Sales Return, :, 0.00, Debit Card Sales Return, :, 0.00, EPayment Sales Return, :, 0.00, Cash In/Out, Cash In, :, 20.00, Cash Out, :, 20.00, Opening Balance, :, 10.00, Other Details, Closing Cash Balance, :, -10.70, Cash In Drawer, :, 0.00, Difference In Cash, :, -10.70, Cash Change, :, 0.00, Summary, Footer Fields Details]";
		
		System.out.println("actdayEndSummaryList : "+actdayEndSummaryList);
		System.out.println("expdayEndSummaryList : "+expdayEndSummaryList);
		
		int SummaryTableListCount = SummaryTableList.size();
		
		ArrayList<String> SummaryTableListArray = new ArrayList<String>();
		
		for(int i=0;i<SummaryTableListCount;i++)
		{
			String data = SummaryTableList.get(i).getText();
			
			SummaryTableListArray.add(data);
		}
		
		String actSummaryTableList = SummaryTableListArray.toString();
		String expSummaryTableList = "[E-Payment Amount, 7, 0, 7]";
		
		System.out.println("actSummaryTableList : "+actSummaryTableList);
		System.out.println("expSummaryTableList : "+expSummaryTableList	);
		
		boolean actnoneRadioBtn   = noneRadioBtn.isDisplayed();
		boolean actlogoutRadioBtn = logoutRadioBtn.isDisplayed();
		boolean actproceedBtn     = proceedBtn.isDisplayed();
		boolean actprintBtn       = printBtn.isDisplayed();
		boolean actdecloseBtn     = decloseBtn.isDisplayed();
		
		boolean expnoneRadioBtn   = true;
		boolean explogoutRadioBtn = true;
		boolean expproceedBtn     = true;
		boolean expprintBtn       = true;
		boolean expdecloseBtn     = true;
		
		System.out.println("noneRadioBtn   : "+actnoneRadioBtn  +" Value Expected : "+expnoneRadioBtn);
		System.out.println("logoutRadioBtn : "+actlogoutRadioBtn+" Value Expected : "+explogoutRadioBtn);
		System.out.println("proceedBtn     : "+actproceedBtn    +" Value Expected : "+expproceedBtn);
		System.out.println("printBtn       : "+actprintBtn      +" Value Expected : "+expprintBtn);
		System.out.println("decloseBtn     : "+actdecloseBtn    +" Value Expected : "+expdecloseBtn);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(decloseBtn));
		decloseBtn.click();
		
		Thread.sleep(3000);

		if(actdayEndTab==expdayEndTab && actvouhcerReferenceNoTxt==expvouhcerReferenceNoTxt && actdeCounterTxt==expdeCounterTxt && actdeCashierTxt==expdeCashierTxt
				&& actdeCashInDrawerTxt==expdeCashInDrawerTxt && actdeCardAmountTxt==expdeCardAmountTxt && actdeChequeAmountTxt==expdeChequeAmountTxt
				&& actdeGiftVouhcerAmountTxt==expdeGiftVouhcerAmountTxt && actdeCreditNoteTxt==expdeCreditNoteTxt && actdeDiscountVoucherAmountTxt==expdeDiscountVoucherAmountTxt
				&& actdeCreditSalesAmountTxt==expdeCreditSalesAmountTxt && actdeEpayAmountTxt==expdeEpayAmountTxt && actdeprePaidWalletAmountTxt==expdeprePaidWalletAmountTxt
				&& actdeBackBtn==expdeBackBtn && actdeClearBtn==expdeClearBtn && actdePostBtn==expdePostBtn && actdePostAndPrintBtn==expdePostAndPrintBtn
				
	 			&& actdayEndSummaryList.equalsIgnoreCase(expdayEndSummaryList) && actSummaryTableList.equalsIgnoreCase(expSummaryTableList)
	 			
	 			&& actnoneRadioBtn==expnoneRadioBtn && actlogoutRadioBtn==explogoutRadioBtn && actproceedBtn==expproceedBtn
	 			&& actprintBtn==expprintBtn && actdecloseBtn==expdecloseBtn)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  
  @FindBy(xpath="//input[@id='dpReprintDayEndFromDate']")
  private static WebElement rdeFromDateTxt;
  
  @FindBy(xpath="//*[@id='dpReprintDayEndFromDate_input_image']/span")
  private static WebElement rdeFromDateCalendarBtn;
  
  @FindBy(xpath="//input[@id='dpReprintDayEndToDate']")
  private static WebElement rdeToDateTxt;
  
  @FindBy(xpath="//*[@id='dpReprintDayEndToDate_input_image']/span")
  private static WebElement rdeToDateCalendarBtn;
  
  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalMain']/div[@id='divReprintDayEndModal']/div[1]/div[1]/div[1]/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/span[1]")
  private static WebElement rdesearchBtn;
  
  @FindBy(xpath="//*[@id='tHeadReprintDayEnd']/tr/td")
  private static List<WebElement> rdeHeaderList;
  
  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalMain']/div[@id='divReprintDayEndModal']/div[1]/div[1]/div[1]/div[3]/div[1]/div[1]/div[1]/div[1]/div[1]/span[1]")
  private static WebElement rdePrintBtn;
  
  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalMain']/div[@id='divReprintDayEndModal']/div[1]/div[1]/div[1]/div[3]/div[1]/div[1]/div[1]/div[2]/div[1]/span[1]")
  private static WebElement rdeCloseBtn;
  
  public boolean checkReprintDayEndShortCut() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Task"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Reprint Day End"))
			{
				getAction().doubleClick(rightPanelList.get(i)).build().perform();
				
				break;
			}
		}
		
		Thread.sleep(2000);
		
		boolean actrdeFromDateTxt         = rdeFromDateTxt.isDisplayed();
		boolean actrdeFromDateCalendarBtn = rdeFromDateCalendarBtn.isDisplayed();
		boolean actrdeToDateTxt           = rdeToDateTxt.isDisplayed();
		boolean actrdeToDateCalendarBtn   = rdeToDateCalendarBtn.isDisplayed();
		boolean actrdesearchBtn           = rdesearchBtn.isDisplayed();
		boolean actrdePrintBtn            = rdePrintBtn.isDisplayed();
		boolean actrdeCloseBtn            = rdeCloseBtn.isDisplayed();
		
		boolean exprdeFromDateTxt         = true;
		boolean exprdeFromDateCalendarBtn = true;
		boolean exprdeToDateTxt           = true;
		boolean exprdeToDateCalendarBtn   = true;
		boolean exprdesearchBtn           = true;
		boolean exprdePrintBtn            = true;
		boolean exprdeCloseBtn            = true;
		
		System.out.println("rdeFromDateTxt         : "+actrdeFromDateTxt         +" Value Expected : "+exprdeFromDateTxt);
		System.out.println("rdeFromDateCalendarBtn : "+actrdeFromDateCalendarBtn +" Value Expected : "+exprdeFromDateCalendarBtn);
		System.out.println("rdeToDateTxt           : "+actrdeToDateTxt           +" Value Expected : "+exprdeToDateTxt);
		System.out.println("rdeToDateCalendarBtn   : "+actrdeToDateCalendarBtn   +" Value Expected : "+exprdeToDateCalendarBtn);
		System.out.println("rdesearchBtn           : "+actrdesearchBtn           +" Value Expected : "+exprdesearchBtn);
		System.out.println("rdePrintBtn            : "+actrdePrintBtn            +" Value Expected : "+exprdePrintBtn);
		System.out.println("rdeCloseBtn            : "+actrdeCloseBtn            +" Value Expected : "+exprdeCloseBtn);
		

		rdeFromDateCalendarBtn.click();
		
		Calendar calendar = Calendar.getInstance();
		
		calendar.add(Calendar.DATE, -5);
	
		Date yesterday = calendar.getTime();
	
		DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
		
		System.out.println(dfr.format(yesterday).toString());
	            
		rdeFromDateTxt.sendKeys(Keys.LEFT);
		Thread.sleep(2000);
		rdeFromDateTxt.sendKeys(Keys.HOME);
		Thread.sleep(2000);
		rdeFromDateTxt.sendKeys(dfr.format(yesterday).toString());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rdesearchBtn));
		rdesearchBtn.click();
		
		Thread.sleep(2000);
		
		boolean actselectRadioRow1 = selectRadioRow1.isDisplayed();
		boolean expselectRadioRow1 = true;
		
		System.out.println("selectRadioRow1 : "+actselectRadioRow1+" Value Expected : "+expselectRadioRow1);
		
		
		selectRadioRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rdePrintBtn));
		rdePrintBtn.click();
		
		Thread.sleep(3000);

		ArrayList<String> openTabs2 = new ArrayList<String>(getDriver().getWindowHandles());
		
	 	System.out.println("openTabs2"+openTabs2);
	
	 	getDriver().switchTo().window(openTabs2.get(1));
	 	
		Thread.sleep(2000);
		
	 	getDriver().close();
	
	 	Thread.sleep(2000);
	
	 	getDriver().switchTo().window(openTabs2.get(0));
		
	 	
	 	Thread.sleep(3000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rdeCloseBtn));
	 	rdeCloseBtn.click();

		if(actrdeFromDateTxt==exprdeFromDateTxt && actrdeFromDateCalendarBtn==exprdeFromDateCalendarBtn && actrdeToDateTxt==exprdeToDateTxt
				&& actrdeToDateCalendarBtn==exprdeToDateCalendarBtn && actrdesearchBtn==exprdesearchBtn && actrdePrintBtn==exprdePrintBtn
				&& actrdeCloseBtn==exprdeCloseBtn && actselectRadioRow1==expselectRadioRow1)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  
  
  @FindBy(xpath="//input[@id='optGiftVoucherTransferGiftVoucher']")
  private static WebElement gvtVoucherTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherTransferOutlet']")
  private static WebElement gvtFromOutletTxt;
  
  @FindBy(xpath="//input[@id='optGiftVoucherTransferOutlet']")
  private static WebElement gvtToOutletTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherTransferStartSeries']")
  private static WebElement gvtStartSeriesTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherTransferNoVouchers']")
  private static WebElement gvtNoOfVouchersTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherTransferEndSeries']")
  private static WebElement gvtEndingSeriesTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherTransferVoucherValue']")
  private static WebElement gvtVoucherValueTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherTransferTotalValue']")
  private static WebElement gvtTotalValueTxt;
  
  @FindBy(xpath="//div[contains(text(),'Add')]")
  private static WebElement gvtAddBtn;
  
  @FindBy(xpath="//div[contains(text(),'Save')]")
  private static WebElement gvtSaveBtn;
  
  @FindBy(xpath="//div[contains(text(),'Clear')]")
  private static WebElement gvtClearBtn;
  
  @FindBy(xpath="//*[@id='btnCloseGiftVoucherTransfer']/div[1]/span")
  private static WebElement gvtCloseBtn;
  
  
  public boolean checkGiftVoucherTransferShortCut() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Task"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Gift Voucher Transfer"))
			{
				getAction().doubleClick(rightPanelList.get(i)).build().perform();
				
				break;
			}
		}
		
		Thread.sleep(2000);
		
		boolean actgvtVoucherTxt       = gvtVoucherTxt.isDisplayed();
		boolean actgvtFromOutletTxt    = gvtFromOutletTxt.isDisplayed();
		boolean actgvtToOutletTxt      = gvtToOutletTxt.isDisplayed();
		boolean actgvtStartSeriesTxt   = gvtStartSeriesTxt.isDisplayed();
		boolean actgvtNoOfVouchersTxt  = gvtNoOfVouchersTxt.isDisplayed();
		boolean actgvtEndingSeriesTxt  = gvtEndingSeriesTxt.isDisplayed();
		boolean actgvtVoucherValueTxt  = gvtVoucherValueTxt.isDisplayed();
		boolean actgvtTotalValueTxt    = gvtTotalValueTxt.isDisplayed();
		boolean actgvtAddBtn           = gvtAddBtn.isDisplayed();
		boolean actgvtSaveBtn          = gvtSaveBtn.isDisplayed();
		boolean actgvtClearBtn         = gvtClearBtn.isDisplayed();
		boolean actgvtCloseBtn         = gvtCloseBtn.isDisplayed();
		
		boolean expgvtVoucherTxt       = true;
		boolean expgvtFromOutletTxt    = true;
		boolean expgvtToOutletTxt      = true;
		boolean expgvtStartSeriesTxt   = true;
		boolean expgvtNoOfVouchersTxt  = true;
		boolean expgvtEndingSeriesTxt  = true;
		boolean expgvtVoucherValueTxt  = true;
		boolean expgvtTotalValueTxt    = true;
		boolean expgvtAddBtn           = true;
		boolean expgvtSaveBtn          = true;
		boolean expgvtClearBtn         = true;
		boolean expgvtCloseBtn         = true;
		
		System.out.println("gvtVoucherTxt        : "+actgvtVoucherTxt         +" Value Expected : "+expgvtVoucherTxt);
		System.out.println("gvtFromOutletTxt     : "+actgvtFromOutletTxt      +" Value Expected : "+expgvtFromOutletTxt);
		System.out.println("gvtToOutletTxt       : "+actgvtToOutletTxt        +" Value Expected : "+expgvtToOutletTxt);
		System.out.println("gvtStartSeriesTxt    : "+actgvtStartSeriesTxt     +" Value Expected : "+expgvtStartSeriesTxt);
		System.out.println("gvtNoOfVouchersTxt   : "+actgvtNoOfVouchersTxt    +" Value Expected : "+expgvtNoOfVouchersTxt);
		System.out.println("gvtEndingSeriesTxt   : "+actgvtEndingSeriesTxt    +" Value Expected : "+expgvtEndingSeriesTxt);
		System.out.println("gvtVoucherValueTxt   : "+actgvtVoucherValueTxt    +" Value Expected : "+expgvtVoucherValueTxt);
		System.out.println("gvtTotalValueTxt     : "+actgvtTotalValueTxt      +" Value Expected : "+expgvtTotalValueTxt);
		System.out.println("gvtAddBtn            : "+actgvtAddBtn             +" Value Expected : "+expgvtAddBtn);
		System.out.println("gvtSaveBtn           : "+actgvtSaveBtn            +" Value Expected : "+expgvtSaveBtn);
		System.out.println("gvtClearBtn          : "+actgvtClearBtn           +" Value Expected : "+expgvtClearBtn);
		System.out.println("gvtCloseBtn          : "+actgvtCloseBtn           +" Value Expected : "+expgvtCloseBtn);
		

		if(actgvtVoucherTxt==expgvtVoucherTxt && actgvtFromOutletTxt==expgvtFromOutletTxt && actgvtToOutletTxt==expgvtToOutletTxt && actgvtStartSeriesTxt==expgvtStartSeriesTxt
				&& actgvtNoOfVouchersTxt==expgvtNoOfVouchersTxt && actgvtEndingSeriesTxt==expgvtEndingSeriesTxt && actgvtVoucherValueTxt==expgvtVoucherValueTxt
				&& actgvtTotalValueTxt==expgvtTotalValueTxt && actgvtAddBtn==expgvtAddBtn && actgvtSaveBtn==expgvtSaveBtn && actgvtClearBtn==expgvtClearBtn && actgvtCloseBtn==expgvtCloseBtn)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  
  @FindBy(xpath="//*[@id='tBodyGiftVoucherTransfer']/tr/td")
  private static List<WebElement> giftVoucherBodyGrid;
  

  public boolean checkSavingGiftVoucherInTransfer() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvtVoucherTxt));
		gvtVoucherTxt.click();
		gvtVoucherTxt.sendKeys("GiftVoucher2(InternalGV)");
		Thread.sleep(3000);
		gvtVoucherTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvtToOutletTxt));
		gvtToOutletTxt.click();
		gvtToOutletTxt.sendKeys("Outlet2");
		Thread.sleep(3000);
		gvtToOutletTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvtStartSeriesTxt));
		gvtStartSeriesTxt.click();
		gvtStartSeriesTxt.sendKeys("100");
		gvtStartSeriesTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvtNoOfVouchersTxt));
		gvtNoOfVouchersTxt.sendKeys("2");
		gvtNoOfVouchersTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvtAddBtn));
		gvtAddBtn.click();
		
		int giftVoucherBodyGridCount = giftVoucherBodyGrid.size();
		
		ArrayList<String> giftVoucherBodyGridArray = new ArrayList<String>();
		
		for(int i=0;i<giftVoucherBodyGridCount;i++)
		{
			String data = giftVoucherBodyGrid.get(i).getText();
			
			giftVoucherBodyGridArray.add(data);
		}
		
		String actgiftVoucherBodyGrid = giftVoucherBodyGridArray.toString();
		String expgiftVoucherBodyGrid = "[GiftVoucher2(InternalGV), Outlet1, Outlet2, 100, 2, 101, 10.00, 20.00]";
		
		
		System.out.println("actgiftVoucherBodyGrid : "+actgiftVoucherBodyGrid);
		System.out.println("expgiftVoucherBodyGrid : "+expgiftVoucherBodyGrid);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvtSaveBtn));
		gvtSaveBtn.click();
		
		String expMessage = "Record Save Successfully";
		String actMessage = toastMessage.getText();
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvtCloseBtn));
		gvtCloseBtn.click();
		
		if(actgiftVoucherBodyGrid.equalsIgnoreCase(expgiftVoucherBodyGrid) && actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  
  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalMain']/div[@id='divGiftVoucherSaleModal']/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/label[1]/input[1]")
  private static WebElement memberRadioBtn;

  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_fullscreenmode']/div[@id='divForModalMain']/div[@id='divGiftVoucherSaleModal']/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[2]/label[1]/input[1]")
  private static WebElement nonMemberRadioBtn;

  @FindBy(xpath="//input[@id='optGiftVoucherMemberCode']")
  private static WebElement gvsMemberCodeTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherMemberName']")
  private static WebElement gvsNameTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherMobileNo']")
  private static WebElement gvsMobileNoTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherEmail']")
  private static WebElement gvsEmailTxt;
  
  @FindBy(xpath="//select[@id='ddlGiftVoucherName']")
  private static WebElement gvsVoucherNameTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherValue']")
  private static WebElement gvsVoucherValueTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherStartingSeries']")
  private static WebElement gvsStartingSeriesTxt;
  
  @FindBy(xpath="//input[@id='txtGiftTotalNoOfVoucher']")
  private static WebElement gvsTotalNoOfVouchersTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherEndingSeries']")
  private static WebElement gvsEndingSeriesTxt;
  
  @FindBy(xpath="//input[@id='txtGiftTotalValueOfVoucher']")
  private static WebElement gvstotalValueTxt;
  
  @FindBy(xpath="//div[contains(text(),'Add')]")
  private static WebElement gvsAddBtn;
  
  @FindBy(xpath="//*[@id='tBodyGiftVoucherSale']/tr/td")
  private static List<WebElement> gvsBodyGrid;
  
  @FindBy(xpath="//tbody/tr[@id='2']/td[1]/i[1]")
  private static WebElement gvsDeleteRow1;
  
  @FindBy(xpath="//div[contains(text(),'Pay')]")
  private static WebElement gvsPayBtn;

  public boolean checkGiftVoucherSalesShortCut() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Task"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Gift Voucher Sale"))
			{
				getAction().doubleClick(rightPanelList.get(i)).build().perform();
				
				break;
			}
		}
		
		Thread.sleep(2000);
		
		boolean actmemberRadioBtn          = memberRadioBtn.isDisplayed();
		boolean actnonMemberRadioBtn       = nonMemberRadioBtn.isDisplayed();
		boolean actgvsMemberCodeTxt        = gvsMemberCodeTxt.isDisplayed();
		boolean actgvsNameTxt              = gvsNameTxt.isDisplayed();
		boolean actgvsMobileNoTxt          = gvsMobileNoTxt.isDisplayed();
		boolean actgvsEmailTxt             = gvsEmailTxt.isDisplayed();
		boolean actgvsVoucherNameTxt       = gvsVoucherNameTxt.isDisplayed();
		boolean actgvsVoucherValueTxt      = gvsVoucherValueTxt.isDisplayed();
		boolean actgvsStartingSeriesTxt    = gvsStartingSeriesTxt.isDisplayed();
		boolean actgvsTotalNoOfVouchersTxt = gvsTotalNoOfVouchersTxt.isDisplayed();
		boolean actgvsEndingSeriesTxt      = gvsEndingSeriesTxt.isDisplayed();
		boolean actgvstotalValueTxt        = gvstotalValueTxt.isDisplayed();
		boolean actgvsAddBtn               = gvsAddBtn.isDisplayed();
		boolean actgvsPayBtn               = gvsPayBtn.isDisplayed();
		
		boolean expmemberRadioBtn          = memberRadioBtn.isDisplayed();
		boolean expnonMemberRadioBtn       = nonMemberRadioBtn.isDisplayed();
		boolean expgvsMemberCodeTxt        = gvsMemberCodeTxt.isDisplayed();
		boolean expgvsNameTxt              = gvsNameTxt.isDisplayed();
		boolean expgvsMobileNoTxt          = gvsMobileNoTxt.isDisplayed();
		boolean expgvsEmailTxt             = gvsEmailTxt.isDisplayed();
		boolean expgvsVoucherNameTxt       = gvsVoucherNameTxt.isDisplayed();
		boolean expgvsVoucherValueTxt      = gvsVoucherValueTxt.isDisplayed();
		boolean expgvsStartingSeriesTxt    = gvsStartingSeriesTxt.isDisplayed();
		boolean expgvsTotalNoOfVouchersTxt = gvsTotalNoOfVouchersTxt.isDisplayed();
		boolean expgvsEndingSeriesTxt      = gvsEndingSeriesTxt.isDisplayed();
		boolean expgvstotalValueTxt        = gvstotalValueTxt.isDisplayed();
		boolean expgvsAddBtn               = gvsAddBtn.isDisplayed();
		boolean expgvsPayBtn               = gvsPayBtn.isDisplayed();
		
		System.out.println("memberRadioBtn            : "+actmemberRadioBtn          +" Value Expected : "+expmemberRadioBtn);
		System.out.println("nonMemberRadioBtn         : "+actnonMemberRadioBtn       +" Value Expected : "+expnonMemberRadioBtn);
		System.out.println("gvsMemberCodeTxt          : "+actgvsMemberCodeTxt        +" Value Expected : "+expgvsMemberCodeTxt);
		System.out.println("gvsNameTxt                : "+actgvsNameTxt              +" Value Expected : "+expgvsNameTxt);
		System.out.println("gvsMobileNoTxt            : "+actgvsMobileNoTxt          +" Value Expected : "+expgvsMobileNoTxt);
		System.out.println("gvsEmailTxt               : "+actgvsEmailTxt             +" Value Expected : "+expgvsEmailTxt);
		System.out.println("gvsVoucherNameTxt         : "+actgvsVoucherNameTxt       +" Value Expected : "+expgvsVoucherNameTxt);
		System.out.println("gvsVoucherValueTxt        : "+actgvsVoucherValueTxt      +" Value Expected : "+expgvsVoucherValueTxt);
		System.out.println("gvsStartingSeriesTxt      : "+actgvsStartingSeriesTxt    +" Value Expected : "+expgvsStartingSeriesTxt);
		System.out.println("gvsTotalNoOfVouchersTxt   : "+actgvsTotalNoOfVouchersTxt +" Value Expected : "+expgvsTotalNoOfVouchersTxt);
		System.out.println("gvsEndingSeriesTxt        : "+actgvsEndingSeriesTxt      +" Value Expected : "+expgvsEndingSeriesTxt);
		System.out.println("gvstotalValueTxt          : "+actgvstotalValueTxt        +" Value Expected : "+expgvstotalValueTxt);
		System.out.println("gvsAddBtn                 : "+actgvsAddBtn               +" Value Expected : "+expgvsAddBtn);
		System.out.println("gvsPayBtn                 : "+actgvsPayBtn               +" Value Expected : "+expgvsPayBtn);
		
		

		if(actmemberRadioBtn==expmemberRadioBtn && actnonMemberRadioBtn==expnonMemberRadioBtn && actgvsMemberCodeTxt==expgvsMemberCodeTxt && actgvsNameTxt==expgvsNameTxt
				&& actgvsMobileNoTxt==expgvsMobileNoTxt && actgvsEmailTxt==expgvsEmailTxt && actgvsVoucherNameTxt==expgvsVoucherNameTxt 
				&& actgvsVoucherValueTxt==expgvsVoucherValueTxt && actgvsStartingSeriesTxt==expgvsStartingSeriesTxt && actgvsTotalNoOfVouchersTxt==expgvsTotalNoOfVouchersTxt
				&& actgvsEndingSeriesTxt==expgvsEndingSeriesTxt && actgvstotalValueTxt==expgvstotalValueTxt && actgvsAddBtn==expgvsAddBtn && actgvsPayBtn==expgvsPayBtn)
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  
  public boolean checkLoadingGiftVoucherInternalForMember() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvsMemberCodeTxt));
		gvsMemberCodeTxt.click();
		gvsMemberCodeTxt.sendKeys("TestMemberUpdate");
		Thread.sleep(3000);
		gvsMemberCodeTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvsVoucherNameTxt));
		Select gvsVoucherNameTxtSelect = new Select(gvsVoucherNameTxt);
		gvsVoucherNameTxtSelect.selectByVisibleText(" GiftVoucher2(InternalGV) ");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvsStartingSeriesTxt));
		gvsStartingSeriesTxt.click();
		gvsStartingSeriesTxt.sendKeys(Keys.END);
		gvsStartingSeriesTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		gvsStartingSeriesTxt.sendKeys("102");
		Thread.sleep(3000);
		gvsStartingSeriesTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvsTotalNoOfVouchersTxt));
		gvsTotalNoOfVouchersTxt.click();
		gvsTotalNoOfVouchersTxt.sendKeys("2");
		gvsMemberCodeTxt.sendKeys(Keys.TAB);
		
		String actgvsMemberCodeTxt        = gvsMemberCodeTxt.getAttribute("value");
		String actgvsNameTxt              = gvsNameTxt.getAttribute("value");
		String actgvsMobileNoTxt          = gvsMobileNoTxt.getAttribute("value");
		boolean actgvsEmailTxt            = gvsEmailTxt.getAttribute("value").isEmpty();
		String actgvsVoucherNameTxt       = gvsVoucherNameTxt.getAttribute("value");
		String actgvsVoucherValueTxt      = gvsVoucherValueTxt.getAttribute("value");
		String actgvsStartingSeriesTxt    = gvsStartingSeriesTxt.getAttribute("value");
		String actgvsTotalNoOfVouchersTxt = gvsTotalNoOfVouchersTxt.getAttribute("value");
		String actgvsEndingSeriesTxt      = gvsEndingSeriesTxt.getAttribute("value");
		String actgvstotalValueTxt        = gvstotalValueTxt.getAttribute("value");
		
		String expgvsMemberCodeTxt        = "TestMemberUpdate";
		String expgvsNameTxt              = "TestMemberUpdate  ";
		String expgvsMobileNoTxt          = "0";
		boolean expgvsEmailTxt            = true;
		String expgvsVoucherNameTxt       = "2";
		String expgvsVoucherValueTxt      = "10";
		String expgvsStartingSeriesTxt    = "102";
		String expgvsTotalNoOfVouchersTxt = "2";
		String expgvsEndingSeriesTxt      = "103";
		String expgvstotalValueTxt        = "20";
		
		System.out.println("gvsMemberCodeTxt          : ."+actgvsMemberCodeTxt        +". Value Expected : "+expgvsMemberCodeTxt);
		System.out.println("gvsNameTxt                : ."+actgvsNameTxt              +". Value Expected : "+expgvsNameTxt);
		System.out.println("gvsMobileNoTxt            : ."+actgvsMobileNoTxt          +". Value Expected : "+expgvsMobileNoTxt);
		System.out.println("gvsEmailTxt               : ."+actgvsEmailTxt             +". Value Expected : "+expgvsEmailTxt);
		System.out.println("gvsVoucherNameTxt         : ."+actgvsVoucherNameTxt       +". Value Expected : "+expgvsVoucherNameTxt);
		System.out.println("gvsVoucherValueTxt        : ."+actgvsVoucherValueTxt      +". Value Expected : "+expgvsVoucherValueTxt);
		System.out.println("gvsStartingSeriesTxt      : ."+actgvsStartingSeriesTxt    +". Value Expected : "+expgvsStartingSeriesTxt);
		System.out.println("gvsTotalNoOfVouchersTxt   : ."+actgvsTotalNoOfVouchersTxt +". Value Expected : "+expgvsTotalNoOfVouchersTxt);
		System.out.println("gvsEndingSeriesTxt        : ."+actgvsEndingSeriesTxt      +". Value Expected : "+expgvsEndingSeriesTxt);
		System.out.println("gvstotalValueTxt          : ."+actgvstotalValueTxt        +". Value Expected : "+expgvstotalValueTxt);
		
		

		if(actgvsMemberCodeTxt.equalsIgnoreCase(expgvsMemberCodeTxt) && actgvsNameTxt.equalsIgnoreCase(expgvsNameTxt) && actgvsMobileNoTxt.equalsIgnoreCase(expgvsMobileNoTxt)
				 && actgvsEmailTxt==expgvsEmailTxt && actgvsVoucherNameTxt.equalsIgnoreCase(expgvsVoucherNameTxt)  && actgvsVoucherValueTxt.equalsIgnoreCase(expgvsVoucherValueTxt)
				 && actgvsStartingSeriesTxt.equalsIgnoreCase(expgvsStartingSeriesTxt) && actgvsTotalNoOfVouchersTxt.equalsIgnoreCase(expgvsTotalNoOfVouchersTxt)
				 && actgvsEndingSeriesTxt.equalsIgnoreCase(expgvsEndingSeriesTxt) && actgvstotalValueTxt.equalsIgnoreCase(expgvstotalValueTxt))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
  
  @FindBy(xpath="//label[@id='lblGiftVoucherNettAmount']")
  private static WebElement gvsNet;
  
  
  public boolean checkClickOnAddGiftVoucherInternalForMember() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvsAddBtn));
		gvsAddBtn.click();
		
		String actgvsNet        = gvsNet.getText();
		String expgvsNet        = "20.00";
		
		int gvsBodyGridCount = gvsBodyGrid.size();
		
		ArrayList<String> gvsBodyGridArray = new ArrayList<String>();
		
		for(int i=0;i<gvsBodyGridCount;i++)
		{
			String data = gvsBodyGrid.get(i).getText();
			
			gvsBodyGridArray.add(data);
		}
		
		String actgvsBodyGrid = gvsBodyGridArray.toString();
		String expgvsBodyGrid = "[, GiftVoucher2, 10, 102, 2, 103, 20]";
		
		System.out.println("actgvsBodyGrid : "+actgvsBodyGrid);
		System.out.println("expgvsBodyGrid : "+expgvsBodyGrid);
		
		System.out.println("gvsNet          : "+actgvsNet        +" Value Expected : "+expgvsNet);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvsPayBtn));
		gvsPayBtn.click();

		if(actgvsNet.equalsIgnoreCase(expgvsNet) && actgvsBodyGrid.equalsIgnoreCase(expgvsBodyGrid))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  } 
  
 
  @FindBy(xpath="//div[@id='divRowCreditCard']/button")
  private static List<WebElement> creditCardBtns;
  
  public boolean checkSelectingCreditCardAndCheckBillDetails() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billSettlementCreditCardTab));
		billSettlementCreditCardTab.click();
		
		Thread.sleep(2000);
		
		boolean actbillSettlementCreditCardNameOnCardTxt     = billSettlementCreditCardNameOnCardTxt.isDisplayed();
		boolean actbillSettlementCreditCardNumberTxt         = billSettlementCreditCardNumberTxt.isDisplayed();
		boolean actbillSettlementCreditCardAmountTxt         = billSettlementCreditCardAmountTxt.isDisplayed();
		boolean actbillSettlementCreditCardSchemeDiscountTxt = billSettlementCreditCardSchemeDiscountTxt.isDisplayed();
		boolean actbillSettlementCreditCardChargesTxt        = billSettlementCreditCardChargesTxt.isDisplayed();
		boolean actbillSettlementCreditCardApprovalCodeTxt   = billSettlementCreditCardApprovalCodeTxt.isDisplayed();
		boolean actbillSettlementCreditCardExpiryMonthTxt    = billSettlementCreditCardExpiryMonthTxt.isDisplayed();
		boolean actbillSettlementCreditCardExpiryYearTxt     = billSettlementCreditCardExpiryYearTxt.isDisplayed();
		boolean actbillSettlementCreditCardPayButton         = billSettlementCreditCardPayButton.isDisplayed();
		
		boolean expbillSettlementCreditCardNameOnCardTxt     = true;
		boolean expbillSettlementCreditCardNumberTxt         = true;
		boolean expbillSettlementCreditCardAmountTxt         = true;
		boolean expbillSettlementCreditCardSchemeDiscountTxt = true;
		boolean expbillSettlementCreditCardChargesTxt        = true;
		boolean expbillSettlementCreditCardApprovalCodeTxt   = true;
		boolean expbillSettlementCreditCardExpiryMonthTxt    = true;
		boolean expbillSettlementCreditCardExpiryYearTxt     = true;
		boolean expbillSettlementCreditCardPayButton         = true;
		
		
		int billSettlementBillDetailsBodyListCount = billSettlementBillDetailsBodyList.size();
		
		ArrayList<String> billSettlementBillDetailsBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<billSettlementBillDetailsBodyListCount;i++)
		{
			String data = billSettlementBillDetailsBodyList.get(i).getText();
			
			billSettlementBillDetailsBodyListArray.add(data);
		}
		
		String actbillSettlementBillDetailsBodyList = billSettlementBillDetailsBodyListArray.toString();
		String expbillSettlementBillDetailsBodyList = "[Bill Amount, :, 20.00, Discount, :, 0.00, Scheme, :, 0.00, Round Off, :, 0.00, Paid, :, 0.00, Balance, :, 20.00, Change, :, 0.00]";
		
		int billSettlementBillDetailsFooterPanelListCount = billSettlementBillDetailsFooterPanelList.size();
		
		ArrayList<String> billSettlementBillDetailsFooterPanelListArray = new ArrayList<String>();
		
		for(int i=0;i<billSettlementBillDetailsFooterPanelListCount;i++)
		{
			String data = billSettlementBillDetailsFooterPanelList.get(i).getText();
			
			billSettlementBillDetailsFooterPanelListArray.add(data);
		}
		
		String actbillSettlementBillDetailsFooterPanelList = billSettlementBillDetailsFooterPanelListArray.toString();
		String expbillSettlementBillDetailsFooterPanelList = "[Amount Payable, :, 20.00, Amount Paid, :, 0.00, Balance, :, 20.00]";
		
			
		System.out.println("billSettlementCreditCardNameOnCardTxt     : "+actbillSettlementCreditCardNameOnCardTxt +" Value Expected : "+expbillSettlementCreditCardNameOnCardTxt);
		System.out.println("billSettlementCreditCardNumberTxt         : "+actbillSettlementCreditCardNumberTxt +" Value Expected : "+expbillSettlementCreditCardNumberTxt);
		System.out.println("billSettlementCreditCardAmountTxt         : "+actbillSettlementCreditCardAmountTxt +" Value Expected : "+expbillSettlementCreditCardAmountTxt);
		System.out.println("billSettlementCreditCardSchemeDiscountTxt : "+actbillSettlementCreditCardSchemeDiscountTxt +" Value Expected : "+expbillSettlementCreditCardSchemeDiscountTxt);
		System.out.println("billSettlementCreditCardChargesTxt        : "+actbillSettlementCreditCardChargesTxt +" Value Expected : "+expbillSettlementCreditCardChargesTxt);
		System.out.println("billSettlementCreditCardApprovalCodeTxt   : "+actbillSettlementCreditCardApprovalCodeTxt +" Value Expected : "+expbillSettlementCreditCardApprovalCodeTxt);
		System.out.println("billSettlementCreditCardExpiryMonthTxt    : "+actbillSettlementCreditCardExpiryMonthTxt +" Value Expected : "+expbillSettlementCreditCardExpiryMonthTxt);
		System.out.println("billSettlementCreditCardExpiryYearTxt     : "+actbillSettlementCreditCardExpiryYearTxt +" Value Expected : "+expbillSettlementCreditCardExpiryYearTxt);
		System.out.println("billSettlementCreditCardPayButton         : "+actbillSettlementCreditCardPayButton +" Value Expected : "+expbillSettlementCreditCardPayButton);
		
		System.out.println("actbillSettlementBillDetailsBodyList : "+actbillSettlementBillDetailsBodyList);
		System.out.println("expbillSettlementBillDetailsBodyList : "+expbillSettlementBillDetailsBodyList);
		
		System.out.println("actbillSettlementBillDetailsFooterPanelList : "+actbillSettlementBillDetailsFooterPanelList);
		System.out.println("expbillSettlementBillDetailsFooterPanelList : "+expbillSettlementBillDetailsFooterPanelList);
		

		if(actbillSettlementCreditCardNameOnCardTxt==expbillSettlementCreditCardNameOnCardTxt
				&& actbillSettlementCreditCardNumberTxt==expbillSettlementCreditCardNumberTxt && actbillSettlementCreditCardAmountTxt==expbillSettlementCreditCardAmountTxt
				&& actbillSettlementCreditCardSchemeDiscountTxt==expbillSettlementCreditCardSchemeDiscountTxt && actbillSettlementCreditCardChargesTxt==expbillSettlementCreditCardChargesTxt
				&& actbillSettlementCreditCardApprovalCodeTxt==expbillSettlementCreditCardApprovalCodeTxt && actbillSettlementCreditCardExpiryMonthTxt==expbillSettlementCreditCardExpiryMonthTxt
				&& actbillSettlementCreditCardExpiryYearTxt==expbillSettlementCreditCardExpiryYearTxt && actbillSettlementCreditCardPayButton==expbillSettlementCreditCardPayButton
				
				&& actbillSettlementBillDetailsBodyList.equalsIgnoreCase(expbillSettlementBillDetailsBodyList)
				&& actbillSettlementBillDetailsFooterPanelList.equalsIgnoreCase(expbillSettlementBillDetailsFooterPanelList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  @FindBy(xpath="//*[@id='tblCreditCard']/tbody/tr/td")
  private static List<WebElement> creditCardBillRowList;
  
  @FindBy(xpath="//*[@id='divGiftVoucherSaleModalContent']/div[1]/span")
  private static WebElement gvSalesCloseBtn;
  
  public boolean checkSelectingHDFCCreditCardAndCheckBillDetailsAfterSelecting() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int creditCardBtnsCount = creditCardBtns.size();
		
		for(int i=0;i<creditCardBtnsCount;i++)
		{
			String data = creditCardBtns.get(i).getAttribute("data-cardname");
			
			if(data.equalsIgnoreCase("HDFC"))
			{
				creditCardBtns.get(i).click();
				
				break;
			}
		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billSettlementCreditCardPayButton));
		billSettlementCreditCardPayButton.click();
		
		Thread.sleep(2000);
		
		int creditCardBillRowListCount = creditCardBillRowList.size();
		
		ArrayList<String> creditCardBillRowListArray = new ArrayList<String>();
		
		for(int i=0;i<creditCardBillRowListCount;i++)
		{
			String data = creditCardBillRowList.get(i).getText();
			
			creditCardBillRowListArray.add(data);
		}
		
		String actcreditCardBillRowList = creditCardBillRowListArray.toString();
		String expcreditCardBillRowList = "[, HDFC CreditCard, , , 20.00, 0.00, 0.00, , ]";
		
		System.out.println("actcreditCardBillRowList : "+actcreditCardBillRowList);
		System.out.println("expcreditCardBillRowList : "+expcreditCardBillRowList);
		
		int billSettlementBillDetailsBodyListCount = billSettlementBillDetailsBodyList.size();
		
		ArrayList<String> billSettlementBillDetailsBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<billSettlementBillDetailsBodyListCount;i++)
		{
			String data = billSettlementBillDetailsBodyList.get(i).getText();
			
			billSettlementBillDetailsBodyListArray.add(data);
		}
		
		String actbillSettlementBillDetailsBodyList = billSettlementBillDetailsBodyListArray.toString();
		String expbillSettlementBillDetailsBodyList = "[Bill Amount, :, 20.00, Discount, :, 0.00, Scheme, :, 0.00, Round Off, :, 0.00, Paid, :, 20.00, Balance, :, 0.00, Change, :, 0.00]";
		
		int billSettlementBillDetailsFooterPanelListCount = billSettlementBillDetailsFooterPanelList.size();
		
		ArrayList<String> billSettlementBillDetailsFooterPanelListArray = new ArrayList<String>();
		
		for(int i=0;i<billSettlementBillDetailsFooterPanelListCount;i++)
		{
			String data = billSettlementBillDetailsFooterPanelList.get(i).getText();
			
			billSettlementBillDetailsFooterPanelListArray.add(data);
		}
		
		String actbillSettlementBillDetailsFooterPanelList = billSettlementBillDetailsFooterPanelListArray.toString();
		String expbillSettlementBillDetailsFooterPanelList = "[Amount Payable, :, 20.00, Amount Paid, :, 20.00, Balance, :, 0.00]";
		
		
		System.out.println("actbillSettlementBillDetailsBodyList : "+actbillSettlementBillDetailsBodyList);
		System.out.println("expbillSettlementBillDetailsBodyList : "+expbillSettlementBillDetailsBodyList);
		
		System.out.println("actbillSettlementBillDetailsFooterPanelList : "+actbillSettlementBillDetailsFooterPanelList);
		System.out.println("expbillSettlementBillDetailsFooterPanelList : "+expbillSettlementBillDetailsFooterPanelList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doneBtn));
		doneBtn.click();
		
		Thread.sleep(5000);

		ArrayList<String> openTabs2 = new ArrayList<String>(getDriver().getWindowHandles());
		
	 	System.out.println("openTabs2"+openTabs2);
	
	 	getDriver().switchTo().window(openTabs2.get(1));
	 	
		Thread.sleep(2000);
		
	 	getDriver().close();
	
	 	Thread.sleep(2000);
	
	 	getDriver().switchTo().window(openTabs2.get(0));
		
	 	
	 	Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvSalesCloseBtn));
		gvSalesCloseBtn.click();
		
		
		if(actbillSettlementBillDetailsBodyList.equalsIgnoreCase(expbillSettlementBillDetailsBodyList)
				&& actbillSettlementBillDetailsFooterPanelList.equalsIgnoreCase(expbillSettlementBillDetailsFooterPanelList)
				
				&& actcreditCardBillRowList.equalsIgnoreCase(expcreditCardBillRowList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  @FindBy(xpath="//*[@id='divPaymentTab']/div/button/div")
  private static List<WebElement> billSettlementHeaderTab;
  
  @FindBy(xpath="//input[@id='optGiftVoucherRegistration']")
  private static WebElement bsGvNameTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherNumber']")
  private static WebElement bsGvVoucherNoTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherValue']")
  private static WebElement bsGvVoucherValueTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherAmount']")
  private static WebElement bsGvVoucherAmountTxt;
  
  @FindBy(xpath="//input[@id='dtpGiftVoucherExpiryDate']")
  private static WebElement bsGvExpiryDateTxt;
  
  @FindBy(xpath="//input[@id='txtGiftVoucherSchemeDiscount']")
  private static WebElement bsGvSchemeDiscountTxt;
  
  @FindBy(xpath="//button[@id='btnGiftVoucherPay']")
  private static WebElement bsGvPayBtn;
  
  @FindBy(xpath="//*[@id='tBodyGiftVoucher']/tr/td")
  private static List<WebElement> bsGvBodyGrid;
  
  public boolean checkGiftVouhcerRedemption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Functions"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Bill Settlement"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		Thread.sleep(2000);
		
		int billSettlementHeaderTabCount = billSettlementHeaderTab.size();
		
		for(int i=0;i<billSettlementHeaderTabCount;i++)
		{
			String data = billSettlementHeaderTab.get(i).getText();
			
			if(data.equalsIgnoreCase("Gift Voucher"))
			{
				billSettlementHeaderTab.get(i).click();
				
				break;
			}
		}
		
		
		Thread.sleep(2000);
		
		boolean actbsGvNameTxt           = bsGvNameTxt.isDisplayed();
		boolean actbsGvVoucherNoTxt      = bsGvVoucherNoTxt.isDisplayed();
		boolean actbsGvVoucherValueTxt   = bsGvVoucherValueTxt.isDisplayed();
		boolean actbsGvVoucherAmountTxt  = bsGvVoucherAmountTxt.isDisplayed();
		boolean actbsGvExpiryDateTxt     = bsGvExpiryDateTxt.isDisplayed();
		boolean actbsGvSchemeDiscountTxt = bsGvSchemeDiscountTxt.isDisplayed();
		boolean actbsGvPayBtn            = bsGvPayBtn.isDisplayed();
		
		boolean expbsGvNameTxt           = true;
		boolean expbsGvVoucherNoTxt      = true;
		boolean expbsGvVoucherValueTxt   = true;
		boolean expbsGvVoucherAmountTxt  = true;
		boolean expbsGvExpiryDateTxt     = true;
		boolean expbsGvSchemeDiscountTxt = true;
		boolean expbsGvPayBtn            = true;
		
		System.out.println("bsGvNameTxt           : "+actbsGvNameTxt           +" Value Expected : "+expbsGvNameTxt);
		System.out.println("bsGvVoucherNoTxt      : "+actbsGvVoucherNoTxt      +" Value Expected : "+expbsGvVoucherNoTxt);
		System.out.println("bsGvVoucherValueTxt   : "+actbsGvVoucherValueTxt   +" Value Expected : "+expbsGvVoucherValueTxt);
		System.out.println("bsGvVoucherAmountTxt  : "+actbsGvVoucherAmountTxt  +" Value Expected : "+expbsGvVoucherAmountTxt);
		System.out.println("bsGvExpiryDateTxt     : "+actbsGvExpiryDateTxt     +" Value Expected : "+expbsGvExpiryDateTxt);
		System.out.println("bsGvSchemeDiscountTxt : "+actbsGvSchemeDiscountTxt +" Value Expected : "+expbsGvSchemeDiscountTxt);
		System.out.println("bsGvPayBtn            : "+actbsGvPayBtn            +" Value Expected : "+expbsGvPayBtn);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bsGvNameTxt));
		bsGvNameTxt.click();
		bsGvNameTxt.sendKeys("GiftVoucher2(InternalGV)");
		Thread.sleep(2000);
		bsGvNameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bsGvVoucherNoTxt));
		bsGvVoucherNoTxt.sendKeys("102");
		bsGvVoucherNoTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bsGvPayBtn));
		bsGvPayBtn.click();
		
		int bcGvBodyGridCount = bsGvBodyGrid.size();
		
		ArrayList<String> bcGvBodyGridArray = new ArrayList<String>();
		
		
		for(int i=0;i<bcGvBodyGridCount;i++)
		{
			String data = bsGvBodyGrid.get(i).getText();
			
			if(i==4)
			{
				data = "Date Field";
			}
			
			bcGvBodyGridArray.add(data);
		}
		
		String actbcGvBodyGrid = bcGvBodyGridArray.toString();
		String expbcGvBodyGrid = "[, 102, GiftVoucher2(InternalGV), 10.00, Date Field, 0.00]";
		
		System.out.println("actbcGvBodyGrid : "+actbcGvBodyGrid);
		System.out.println("expbcGvBodyGrid : "+expbcGvBodyGrid);
		
		if(actbsGvNameTxt==expbsGvNameTxt && actbsGvVoucherNoTxt==expbsGvVoucherNoTxt && actbsGvVoucherValueTxt==expbsGvVoucherValueTxt
				&& actbsGvVoucherAmountTxt==expbsGvVoucherAmountTxt && actbsGvExpiryDateTxt==expbsGvExpiryDateTxt
				&& actbsGvSchemeDiscountTxt==expbsGvSchemeDiscountTxt && actbsGvPayBtn==expbsGvPayBtn
				
				&& actbcGvBodyGrid.equalsIgnoreCase(expbcGvBodyGrid))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  
  public boolean checkPaymentMethodAsCreditCard() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int billSettlementHeaderTabCount = billSettlementHeaderTab.size();
		
		for(int i=0;i<billSettlementHeaderTabCount;i++)
		{
			String data = billSettlementHeaderTab.get(i).getText();
			
			if(data.equalsIgnoreCase("Credit Card"))
			{
				billSettlementHeaderTab.get(i).click();
				
				break;
			}
		}
		
		
		Thread.sleep(2000);
		int creditCardBtnsCount = creditCardBtns.size();
		
		for(int i=0;i<creditCardBtnsCount;i++)
		{
			String data = creditCardBtns.get(i).getAttribute("data-cardname");
			
			if(data.equalsIgnoreCase("ICICI"))
			{
				creditCardBtns.get(i).click();
				
				break;
			}
		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billSettlementCreditCardPayButton));
		billSettlementCreditCardPayButton.click();
		
		Thread.sleep(2000);
		
		int creditCardBillRowListCount = creditCardBillRowList.size();
		
		ArrayList<String> creditCardBillRowListArray = new ArrayList<String>();
		
		for(int i=0;i<creditCardBillRowListCount;i++)
		{
			String data = creditCardBillRowList.get(i).getText();
			
			creditCardBillRowListArray.add(data);
		}
		
		String actcreditCardBillRowList = creditCardBillRowListArray.toString();
		String expcreditCardBillRowList = "[, ICICI CreditCard, , , 490.00, 0.00, 0.00, , ]";
		
		System.out.println("actcreditCardBillRowList : "+actcreditCardBillRowList);
		System.out.println("expcreditCardBillRowList : "+expcreditCardBillRowList);
		
		int billSettlementBillDetailsBodyListCount = billSettlementBillDetailsBodyList.size();
		
		ArrayList<String> billSettlementBillDetailsBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<billSettlementBillDetailsBodyListCount;i++)
		{
			String data = billSettlementBillDetailsBodyList.get(i).getText();
			
			billSettlementBillDetailsBodyListArray.add(data);
		}
		
		String actbillSettlementBillDetailsBodyList = billSettlementBillDetailsBodyListArray.toString();
		String expbillSettlementBillDetailsBodyList = "[Bill Amount, :, 500.00, Discount, :, 0.00, Scheme, :, 0.00, Round Off, :, 0.00, Paid, :, 500.00, Balance, :, 0.00, Change, :, 0.00]";
		
		int billSettlementBillDetailsFooterPanelListCount = billSettlementBillDetailsFooterPanelList.size();
		
		ArrayList<String> billSettlementBillDetailsFooterPanelListArray = new ArrayList<String>();
		
		for(int i=0;i<billSettlementBillDetailsFooterPanelListCount;i++)
		{
			String data = billSettlementBillDetailsFooterPanelList.get(i).getText();
			
			billSettlementBillDetailsFooterPanelListArray.add(data);
		}
		
		String actbillSettlementBillDetailsFooterPanelList = billSettlementBillDetailsFooterPanelListArray.toString();
		String expbillSettlementBillDetailsFooterPanelList = "[Amount Payable, :, 500.00, Amount Paid, :, 500.00, Balance, :, 0.00]";
		
		
		System.out.println("actbillSettlementBillDetailsBodyList : "+actbillSettlementBillDetailsBodyList);
		System.out.println("expbillSettlementBillDetailsBodyList : "+expbillSettlementBillDetailsBodyList);
		
		System.out.println("actbillSettlementBillDetailsFooterPanelList : "+actbillSettlementBillDetailsFooterPanelList);
		System.out.println("expbillSettlementBillDetailsFooterPanelList : "+expbillSettlementBillDetailsFooterPanelList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doneBtn));
		doneBtn.click();
		
		Thread.sleep(5000);
		 
		 Robot r = new Robot();
		 r.keyPress(KeyEvent.VK_ESCAPE);
		 r.keyRelease(KeyEvent.VK_ESCAPE);

		
		
		if(actbillSettlementBillDetailsBodyList.equalsIgnoreCase(expbillSettlementBillDetailsBodyList)
				&& actbillSettlementBillDetailsFooterPanelList.equalsIgnoreCase(expbillSettlementBillDetailsFooterPanelList)
				
				&& actcreditCardBillRowList.equalsIgnoreCase(expcreditCardBillRowList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  @FindBy(xpath="//div[@id='divDiscountImages']/button")
  private static List<WebElement> bsDvButtonList;
  
  @FindBy(xpath="//input[@id='txtDiscountVoucherNumber']")
  private static WebElement bsDvVoucherNoTxt;
  
  @FindBy(xpath="//input[@id='txtDiscountVoucherValue']")
  private static WebElement bsDvVoucherValueTxt;
  
  @FindBy(xpath="//input[@id='dtpDiscountVoucherExpiryDate']")
  private static WebElement bsDvExpiryTxt;
  
  @FindBy(xpath="//input[@id='txtDiscountVoucherTotalVoucherValue']")
  private static WebElement bsDvTotalVoucherValueTxt;
  
  @FindBy(xpath="//button[@id='btnDiscountVoucherAdd']")
  private static WebElement bsDvAddBtn;
  
  @FindBy(xpath="//input[@id='txtDiscountVoucherNoofCoupon']")
  private static WebElement bsDvNoOfCouponsTxt;
  
  @FindBy(xpath="//*[@id='tBodyDiscountVoucher']/tr/td")
  private static List<WebElement> bsDvBodyGrid;
  
  @FindBy(xpath="//button[@id='btnDiscountVoucherPay']")
  private static WebElement bsDvPayBtn;
  
  public boolean checkSelectItemMemberAndEmployeeForDiscountSale() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	  try
	  {
		  
		Thread.sleep(3000);
		
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Item"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCount = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCount;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Item by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchItemBtn));
		searchItemBtn.click();
		
		Thread.sleep(2000);
		
		int itemBodyListCount = itemBodyList.size();
		
		
		for(int i=0;i<itemBodyListCount;i++)
		{
			String data = itemBodyList.get(i).getText();

			
			if (i!=itemBodyListCount-1) 
			{
				int temp=i+1;
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();",itemBodyList.get(temp));
				
				if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					getAction().doubleClick(itemBodyList.get(i)).build().perform();
					
					break;
				}
			}
		}	
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceTxt));
		changePriceTxt.click();
		changePriceTxt.sendKeys(Keys.END);
		changePriceTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		changePriceTxt.sendKeys("500");
		changePriceTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceOkBtn));
		changePriceOkBtn.click();
		
		Thread.sleep(3000);

		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Member"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCountMember = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCountMember;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Member by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMemberBtn));
		searchMemberBtn.click();
		
		Thread.sleep(2000);
		
		int memberBodyListCount = memberBodyList.size();
		
		
		for(int i=0;i<memberBodyListCount;i++)
		{
			String data = memberBodyList.get(i).getText();

			if(data.equalsIgnoreCase("TestMemberUpdate"))
			{
				getAction().doubleClick(memberBodyList.get(i)).build().perform();
			}
			
		}	
		
		Thread.sleep(2000);
		
		String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessage = "Points definition do not exist for the selected member. Do you want to continue?";
		
		System.out.println("pointOfSalesConfirmationBodyMessage : "+actpointOfSalesConfirmationBodyMessage+" Value Expected : "+exppointOfSalesConfirmationBodyMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(3000);
		
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Employee"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCountEmployee = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCountEmployee;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Select Employee by Name"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchEmployeeBtn));
		searchEmployeeBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(employeeCodeRow1));
		getAction().doubleClick(employeeCodeRow1).build().perform();
		
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Functions"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		int rightPanelListCountFunction = rightPanelList.size();
		
		for(int i=0;i<rightPanelListCountFunction;i++)
		{
			String data = rightPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Bill Settlement"))
			{
				rightPanelList.get(i).click();
				break;
			}
		}	
		
		Thread.sleep(2000);
		
		int billSettlementHeaderTabCount = billSettlementHeaderTab.size();
		
		for(int i=0;i<billSettlementHeaderTabCount;i++)
		{
			String data = billSettlementHeaderTab.get(i).getText();
			
			if(data.equalsIgnoreCase("Discount Voucher"))
			{
				billSettlementHeaderTab.get(i).click();
				
				break;
			}
		}
		
		
		Thread.sleep(2000);
		
		boolean actbsDvVoucherNoTxt         = bsDvVoucherNoTxt.isDisplayed();
		boolean actbsDvVoucherValueTxt      = bsDvVoucherValueTxt.isDisplayed();
		boolean actbsDvExpiryTxt            = bsDvExpiryTxt.isDisplayed();
		boolean actbsDvTotalVoucherValueTxt = bsDvTotalVoucherValueTxt.isDisplayed();
		boolean actbsDvAddBtn               = bsDvAddBtn.isDisplayed();

		boolean expbsDvVoucherNoTxt         = true;
		boolean expbsDvVoucherValueTxt      = true;
		boolean expbsDvExpiryTxt            = true;
		boolean expbsDvTotalVoucherValueTxt = true;
		boolean expbsDvAddBtn               = true;
		
		System.out.println("bsDvVoucherNoTxt         : "+actbsDvVoucherNoTxt        +" Value Expected : "+expbsDvVoucherNoTxt);
		System.out.println("bsDvVoucherValueTxt      : "+actbsDvVoucherValueTxt     +" Value Expected : "+expbsDvVoucherValueTxt);
		System.out.println("bsDvExpiryTxt            : "+actbsDvExpiryTxt           +" Value Expected : "+expbsDvExpiryTxt);
		System.out.println("bsDvTotalVoucherValueTxt : "+actbsDvTotalVoucherValueTxt+" Value Expected : "+expbsDvTotalVoucherValueTxt);
		System.out.println("bsDvAddBtn               : "+actbsDvAddBtn              +" Value Expected : "+expbsDvAddBtn);
		
		int bsDvButtonListCount = bsDvButtonList.size();
		
		for(int i=0;i<bsDvButtonListCount;i++)
		{
			String data = bsDvButtonList.get(i).getAttribute("data-imgname");
			
			if(data.equalsIgnoreCase("DiscountVoucher2"))
			{
				bsDvButtonList.get(i).click();
				
				break;
			}
		}
		
		Thread.sleep(2000);
		
		boolean actbsDvNoOfCouponsTxt     = bsDvNoOfCouponsTxt.isDisplayed();

		boolean expbsDvNoOfCouponsTxt     = true;
		
		System.out.println("bsDvNoOfCouponsTxt : "+actbsDvNoOfCouponsTxt+" Value Expected : "+expbsDvNoOfCouponsTxt);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bsDvNoOfCouponsTxt));
		bsDvNoOfCouponsTxt.click();
		bsDvNoOfCouponsTxt.sendKeys("2");
		bsDvNoOfCouponsTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bsDvAddBtn));
		bsDvAddBtn.click();
		
		
		int bsDvBodyGridCount = bsDvBodyGrid.size();
		
		ArrayList<String> bsDvBodyGridArray = new ArrayList<String>();
		
		
		for(int i=0;i<bsDvBodyGridCount;i++)
		{
			String data = bsDvBodyGrid.get(i).getText();
			
			if(i==5)
			{
				data = "Date Field";
			}
			
			bsDvBodyGridArray.add(data);
		}
		
		String actbsDvBodyGrid = bsDvBodyGridArray.toString();
		String expbsDvBodyGrid = "[, DiscountVoucher2, , 2, 20.00, Date Field]";
		
		System.out.println("actbsDvBodyGrid : "+actbsDvBodyGrid);
		System.out.println("expbsDvBodyGrid : "+expbsDvBodyGrid);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bsDvPayBtn));
		bsDvPayBtn.click();
		
		Thread.sleep(2000);
		
		String actpointOfSalesConfirmationBodyMessageDV = pointOfSalesConfirmationBodyMessage.getText();
		String exppointOfSalesConfirmationBodyMessageDV = "Changes may affect Items in the Bill. Can not edit details after 'Pay' click. Do you want to proceed?.";
		
		System.out.println("actpointOfSalesConfirmationBodyMessageDV : "+actpointOfSalesConfirmationBodyMessageDV);
		System.out.println("exppointOfSalesConfirmationBodyMessageDV : "+exppointOfSalesConfirmationBodyMessageDV);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
	
		if(actbsDvVoucherNoTxt==expbsDvVoucherNoTxt && actbsDvVoucherValueTxt==expbsDvVoucherValueTxt && actbsDvExpiryTxt==expbsDvExpiryTxt
				&& actbsDvTotalVoucherValueTxt==expbsDvTotalVoucherValueTxt && actbsDvAddBtn==expbsDvAddBtn
				&& actbsDvNoOfCouponsTxt==expbsDvNoOfCouponsTxt
				&& actbsDvBodyGrid.equalsIgnoreCase(expbsDvBodyGrid)
				&& actpointOfSalesConfirmationBodyMessageDV.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessageDV))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  @FindBy(xpath="//div[@id='divRowDebitCard']/button")
  private static List<WebElement> debittCardBtns;
  
  @FindBy(xpath="//*[@id='tBodyDebitCard']/tr/td")
  private static List<WebElement> debittCardBillRowList;
  
  public boolean checkPaymentMethodAsDebitCard() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	try
	{
		
		Thread.sleep(2000);
		
		int billSettlementHeaderTabCount = billSettlementHeaderTab.size();
		
		for(int i=0;i<billSettlementHeaderTabCount;i++)
		{
			String data = billSettlementHeaderTab.get(i).getText();
			
			if(data.equalsIgnoreCase("Debit Card"))
			{
				billSettlementHeaderTab.get(i).click();
				
				break;
			}
		}
		
		
		Thread.sleep(2000);
		int debittCardBtnscCount = debittCardBtns.size();
		
		for(int i=0;i<debittCardBtnscCount;i++)
		{
			String data = debittCardBtns.get(i).getAttribute("data-cardname");
			
			if(data.equalsIgnoreCase("ICICI"))
			{
				debittCardBtns.get(i).click();
				
				break;
			}
		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billSettlementDebitCardPayButton));
		billSettlementDebitCardPayButton.click();
		
		Thread.sleep(2000);
		
		int debittCardBillRowListCount = debittCardBillRowList.size();
		
		ArrayList<String> debittCardBillRowListArray = new ArrayList<String>();
		
		for(int i=0;i<debittCardBillRowListCount;i++)
		{
			String data = debittCardBillRowList.get(i).getText();
			
			debittCardBillRowListArray.add(data);
		}
		
		String actdebittCardBillRowList = debittCardBillRowListArray.toString();
		String expdebittCardBillRowList = "[, ICICI DebitCard, , , 480.00, 0.00, 0.00, , ]";
		
		System.out.println("actdebittCardBillRowList : "+actdebittCardBillRowList);
		System.out.println("expdebittCardBillRowList : "+expdebittCardBillRowList);
		
		int billSettlementBillDetailsBodyListCount = billSettlementBillDetailsBodyList.size();
		
		ArrayList<String> billSettlementBillDetailsBodyListArray = new ArrayList<String>();
		
		for(int i=0;i<billSettlementBillDetailsBodyListCount;i++)
		{
			String data = billSettlementBillDetailsBodyList.get(i).getText();
			
			billSettlementBillDetailsBodyListArray.add(data);
		}
		
		String actbillSettlementBillDetailsBodyList = billSettlementBillDetailsBodyListArray.toString();
		String expbillSettlementBillDetailsBodyList = "[Bill Amount, :, 500.00, Discount, :, 0.00, Scheme, :, 0.00, Round Off, :, 0.00, Paid, :, 500.00, Balance, :, 0.00, Change, :, 0.00]";
		
		int billSettlementBillDetailsFooterPanelListCount = billSettlementBillDetailsFooterPanelList.size();
		
		ArrayList<String> billSettlementBillDetailsFooterPanelListArray = new ArrayList<String>();
		
		for(int i=0;i<billSettlementBillDetailsFooterPanelListCount;i++)
		{
			String data = billSettlementBillDetailsFooterPanelList.get(i).getText();
			
			billSettlementBillDetailsFooterPanelListArray.add(data);
		}
		
		String actbillSettlementBillDetailsFooterPanelList = billSettlementBillDetailsFooterPanelListArray.toString();
		String expbillSettlementBillDetailsFooterPanelList = "[Amount Payable, :, 500.00, Amount Paid, :, 500.00, Balance, :, 0.00]";
		
		
		System.out.println("actbillSettlementBillDetailsBodyList : "+actbillSettlementBillDetailsBodyList);
		System.out.println("expbillSettlementBillDetailsBodyList : "+expbillSettlementBillDetailsBodyList);
		
		System.out.println("actbillSettlementBillDetailsFooterPanelList : "+actbillSettlementBillDetailsFooterPanelList);
		System.out.println("expbillSettlementBillDetailsFooterPanelList : "+expbillSettlementBillDetailsFooterPanelList);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doneBtn));
		doneBtn.click();
		
		Thread.sleep(5000);
		 
		 Robot r = new Robot();
		 r.keyPress(KeyEvent.VK_ESCAPE);
		 r.keyRelease(KeyEvent.VK_ESCAPE);
		 
		 Thread.sleep(3000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userribbonPickOutPutBtn));
		 userribbonPickOutPutBtn.click();

		String actLogoutMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expLogoutMessage = "Are you sure to logout?";
		
		System.out.println("LogoutMessage : "+actLogoutMessage+" Value Expected : "+expLogoutMessage);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
		posConfirmYesBtn.click();
		
		Thread.sleep(2000);
		
		String actDayEndMessage = pointOfSalesConfirmationBodyMessage.getText();
		String expDayEndMessage = "'Day End' is not done, do you want to do 'Day End'?";
		
		System.out.println("DayEndMessage : "+actDayEndMessage+" Value Expected : "+expDayEndMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmCancelBtn));
		posConfirmCancelBtn.click();

		
		
		if(actbillSettlementBillDetailsBodyList.equalsIgnoreCase(expbillSettlementBillDetailsBodyList)
				&& actbillSettlementBillDetailsFooterPanelList.equalsIgnoreCase(expbillSettlementBillDetailsFooterPanelList)
				
				&& actdebittCardBillRowList.equalsIgnoreCase(expdebittCardBillRowList))
		{
			System.out.println("Test Pass : Unit Field Displayed with Dozens");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Unit Field NOT Displayed with Dozens");
			return false;
		}
	}
	catch (Exception e) 
	{
    
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
   	 	return false;
    }	
  }
  
  
  
  
//Epayments
  
  

  
  @FindBy(xpath="//span[contains(text(),'E- Payment')]")
  private static WebElement epayMenu;
	
  @FindBy(xpath="//*[@id='sName']")
  private static WebElement epayNameTxt;
	
  @FindBy(xpath="//input[@id='sCode']")
  private static WebElement epayCode;
	
  @FindBy(xpath="//input[@id='iAccount']")
  private static WebElement epayAccDD;
	
  @FindBy(xpath="//select[@id='iPaymentChargesType']")
  private static WebElement epayPaymentChargesTypeDD;
	
  @FindBy(xpath="//input[@id='dPaymentChargesValue']")
  private static WebElement epayPaymentChargesTxt;
	
  @FindBy(xpath="//input[@id='iPaymentChargesAccount']")
  private static WebElement epayPaymentChargesAccDD;
	
  @FindBy(xpath="//*[@id='btnMasterSaveClick']/i")
  private static WebElement epaySaveBtn;
	
 
  

  public boolean checkEPaymentHomePageOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
			Thread.sleep(3000);
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
			Thread.sleep(3000);
		
		    LoginPage lp=new LoginPage(getDriver()); 
			
			String unamelt="UserAllOptions";
					      
			String pawslt="12345";
					      
			lp.enterUserName(unamelt);
					
			lp.enterPassword(pawslt);
			
			lpOutLetTxt.sendKeys("outlet1");
			Thread.sleep(2000);
			lpOutLetTxt.sendKeys(Keys.TAB);
			
			lpCounterTxt.sendKeys("Counter Update");
			Thread.sleep(2000);
			lpCounterTxt.sendKeys(Keys.TAB);
					  
			lp.clickOnSignInBtn();
			
			Thread.sleep(6000);
			
			Thread.sleep(2000);
			
			
			System.out.println("************checkEPaymentHomePageOptions Method Executed****************************");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSale));
			pointOfSale.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayMenu));
			epayMenu.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
			     
			boolean actmasterNewBtn    	 		   =masterNewBtn.isDisplayed();
			boolean actmasterAddGroupBtn    	   =masterAddGroupBtn.isDisplayed();
			boolean actmasterEditBtn 			   =masterEditBtn.isDisplayed();
			boolean actmasterCloneBtn 			   =masterCloneBtn.isDisplayed();
			boolean actmasterPropertiesBtn 		   =masterPropertiesBtn.isDisplayed();
			boolean actmasterDeleteBtn 			   =masterDeleteBtn.isDisplayed();
			boolean actmasterCloseBtn 		 	   =masterCloseBtn.isDisplayed();
			boolean actmasterRibbonToExpandOptions =masterRibbonToExpandOptions.isDisplayed();
			
			boolean expmasterNewBtn    	 			=true;
			boolean expmasterAddGroupBtn    		=true;
			boolean expmasterEditBtn 				=true;
			boolean expmasterCloneBtn 				=true;
			boolean expmasterPropertiesBtn 			=true;
			boolean expmasterDeleteBtn 				=true;
			boolean expmasterCloseBtn 				=true;
			boolean expmasterRibbonToExpandOptions 	=true;
			
			
			
			System.out.println("masterNewBtn                  : "+actmasterNewBtn                +" Value Expected : "+expmasterNewBtn);
			System.out.println("masterAddGroupBtn             : "+actmasterAddGroupBtn           +" Value Expected : "+expmasterAddGroupBtn);
			System.out.println("masterEditBtn                 : "+actmasterEditBtn               +" Value Expected : "+expmasterEditBtn);
			System.out.println("masterCloneBtn                : "+actmasterCloneBtn              +" Value Expected : "+expmasterCloneBtn);
			System.out.println("masterPropertiesBtn           : "+actmasterPropertiesBtn         +" Value Expected : "+expmasterPropertiesBtn);
			System.out.println("masterDeleteBtn               : "+actmasterDeleteBtn             +" Value Expected : "+expmasterDeleteBtn);
			System.out.println("masterCloseBtn                : "+actmasterCloseBtn              +" Value Expected : "+expmasterCloseBtn);
			System.out.println("masterRibbonToExpandOptions   : "+actmasterRibbonToExpandOptions +" Value Expected : "+expmasterRibbonToExpandOptions);
				
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
			masterRibbonToExpandOptions.click();
				 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));	
			
			boolean actmasterGroupBtn    	 													=masterGroupBtn.isDisplayed();
			boolean actmasterDeleteAllBtn    	 												=masterDeleteAllBtn.isDisplayed();
			boolean actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
			boolean actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
			boolean actmasterAdvanceMasterImportORExportBtn    	 								=masterAdvanceMasterImportORExportBtn.isDisplayed();
			boolean actmasterAuthorInfoBtn    	 												=masterAuthorInfoBtn.isDisplayed();
			boolean actmasterMoveUpBtn    	 													=masterMoveUpBtn.isDisplayed();
			boolean actmasterMoveDownBtn    	 												=masterMoveDownBtn.isDisplayed();
			boolean actmasterSortBtn    	 													=masterSortBtn.isDisplayed();
			boolean actmasterMassUpdateBtn    	 												=masterMassUpdateBtn.isDisplayed();
			boolean actmasterImportFromXmlBtn    	 											=masterImportFromXmlBtn.isDisplayed();
			
			boolean expmasterGroupBtn    	 													=true;
			boolean expmasterDeleteAllBtn    	 												=true;
			boolean expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=true;
			boolean expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=true;
			boolean expmasterAdvanceMasterImportORExportBtn    	 								=true;
			boolean expmasterAuthorInfoBtn    	 												=true;
			boolean expmasterMoveUpBtn    	 													=true;
			boolean expmasterMoveDownBtn    	 												=true;
			boolean expmasterSortBtn    	 													=true;
			boolean expmasterMassUpdateBtn    	 												=true;
			boolean expmasterImportFromXmlBtn    	 											=true;
			
			
			
			System.out.println("masterGroupBtn                                                      : "+actmasterGroupBtn                                                      +" Value Expected : "+expmasterGroupBtn);
			System.out.println("masterDeleteAllBtn                                                  : "+actmasterDeleteAllBtn                                                  +" Value Expected : "+expmasterDeleteAllBtn);
			System.out.println("masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity : "+actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity +" Value Expected : "+expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity);
			System.out.println("masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          : "+actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          +" Value Expected : "+expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState);
			System.out.println("masterAdvanceMasterImportORExportBtn                                : "+actmasterAdvanceMasterImportORExportBtn                                +" Value Expected : "+expmasterAdvanceMasterImportORExportBtn);
			System.out.println("masterAuthorInfoBtn                                                 : "+actmasterAuthorInfoBtn                                                 +" Value Expected : "+expmasterAuthorInfoBtn);
			System.out.println("masterMoveUpBtn                                                     : "+actmasterMoveUpBtn                                                     +" Value Expected : "+expmasterMoveUpBtn);
			System.out.println("masterMoveDownBtn                                                   : "+actmasterMoveDownBtn                                                   +" Value Expected : "+expmasterMoveDownBtn);
			System.out.println("masterSortBtn                                                       : "+actmasterSortBtn                                                       +" Value Expected : "+expmasterSortBtn);
			System.out.println("masterMassUpdateBtn                                                 : "+actmasterMassUpdateBtn                                                 +" Value Expected : "+expmasterMassUpdateBtn);
			System.out.println("masterImportFromXmlBtn                                              : "+actmasterImportFromXmlBtn                                              +" Value Expected : "+expmasterImportFromXmlBtn);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
			 
			masterRibbonControlNextBtn.click(); 
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			masterRibbonControlNextBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizemasterBtn));	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
			
			boolean actmasterExportFormatToXmlBtn     =masterExportFormatToXmlBtn.isDisplayed();
			
			boolean actmasterCustamizemasterBtn    	  =masterCustamizemasterBtn.isDisplayed();
			boolean actmasterCustamizeViewBtn    	  =masterCustamizeViewBtn.isDisplayed();
			boolean actmastercustamizeTreeBtn    	  =mastercustamizeTreeBtn.isDisplayed();
			
			boolean expmasterExportFormatToXmlBtn     =true;
			 
			boolean expmasterCustamizemasterBtn    	  =true;
			boolean expmasterCustamizeViewBtn    	  =true;
			boolean expmastercustamizeTreeBtn    	  =true;
			 
			 
			System.out.println("masterExportFormatToXmlBtn         : "+actmasterExportFormatToXmlBtn         +" Value Expected : "+expmasterExportFormatToXmlBtn);
			System.out.println("masterCustamizemasterBtn           : "+actmasterCustamizemasterBtn           +" Value Expected : "+expmasterCustamizemasterBtn);
			System.out.println("masterCustamizeViewBtn             : "+actmasterCustamizeViewBtn             +" Value Expected : "+expmasterCustamizeViewBtn);
			System.out.println("mastercustamizeTreeBtn             : "+actmastercustamizeTreeBtn             +" Value Expected : "+expmastercustamizeTreeBtn);
				
	       
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToMinimizeOptions));
			masterRibbonToMinimizeOptions.click();
			
			if(actmasterNewBtn==expmasterNewBtn && actmasterAddGroupBtn==expmasterAddGroupBtn && actmasterEditBtn==expmasterEditBtn
					&& actmasterCloneBtn==expmasterCloneBtn && actmasterPropertiesBtn==expmasterPropertiesBtn && actmasterDeleteBtn==expmasterDeleteBtn
					&& actmasterCloseBtn==expmasterCloseBtn && actmasterRibbonToExpandOptions==expmasterRibbonToExpandOptions
					
					&& actmasterGroupBtn==expmasterGroupBtn && actmasterDeleteAllBtn==expmasterDeleteAllBtn 
					&& actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity==expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity
					&& actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState==expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState 
					&& actmasterAdvanceMasterImportORExportBtn==expmasterAdvanceMasterImportORExportBtn
					&& actmasterAuthorInfoBtn==expmasterAuthorInfoBtn && actmasterMoveUpBtn==expmasterMoveUpBtn && actmasterMoveDownBtn==expmasterMoveDownBtn
					&& actmasterSortBtn==expmasterSortBtn && actmasterMassUpdateBtn==expmasterMassUpdateBtn && actmasterImportFromXmlBtn==expmasterImportFromXmlBtn
					&& actmasterExportFormatToXmlBtn==expmasterExportFormatToXmlBtn
					
					&& actmasterCustamizemasterBtn==expmasterCustamizemasterBtn && actmasterCustamizeViewBtn==expmasterCustamizeViewBtn  
					&& actmastercustamizeTreeBtn==expmastercustamizeTreeBtn )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
  
	
  public boolean checkNewOptionInEPaymentAndAvailableFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 	{
 		excelReader=new ExcelReader(POJOUtility.getExcelPath());
 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		
 		
 		try
 		{
 			
 			System.out.println("******************checkNewOptionInEPaymentAndAvailableFields Method Executed***************************************");
 			
 			Thread.sleep(2000);
 			
 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
 			masterNewBtn.click();
 			
 			Thread.sleep(2000);
 			
 			boolean actgvdNameTxt                   = epayNameTxt.isDisplayed();
 			boolean actgvdCodeTxt                   = epayCode.isDisplayed();
 			boolean actgvdCurrencyTxt               = epayAccDD.isDisplayed();
 			boolean actdvdDiscountTypeDrpDwn        = epayPaymentChargesTypeDD.isDisplayed();
 			boolean actdvdValueTxt            		= epayPaymentChargesTxt.isDisplayed();
 			boolean actdvdExternealChkBox  			= epayPaymentChargesAccDD.isDisplayed();
 			
 			
 			boolean expgvdNameTxt                   = true;
 			boolean expgvdCodeTxt                   = true;
 			boolean expgvdCurrencyTxt               = true;
 			boolean expdvdDiscountTypeDrpDwn        = true;
 			boolean expdvdValueTxt                  = true;
 		    boolean expdvdExternealChkBox  			= true;
 			
 			
 			System.out.println("gvdNameTxt                  : "+actgvdNameTxt                  +" Value Expected : "+expgvdNameTxt);
 			System.out.println("gvdCodeTxt                  : "+actgvdCodeTxt                  +" Value Expected : "+expgvdCodeTxt);
 			System.out.println("gvdCurrencyTxt              : "+actgvdCurrencyTxt              +" Value Expected : "+expgvdCurrencyTxt);
 			System.out.println("dvdDiscountTypeDrpDwn       : "+actdvdDiscountTypeDrpDwn       +" Value Expected : "+expdvdDiscountTypeDrpDwn);
 			System.out.println("dvdValueTxt                 : "+actdvdValueTxt                 +" Value Expected : "+expdvdValueTxt);
 			System.out.println("dvdExternealChkBox          : "+actdvdExternealChkBox          +" Value Expected : "+expdvdExternealChkBox);
 			
 			if(actgvdNameTxt==expgvdNameTxt && actgvdCodeTxt==expgvdCodeTxt && actgvdCurrencyTxt==expgvdCurrencyTxt && actdvdDiscountTypeDrpDwn==expdvdDiscountTypeDrpDwn
 					&& actdvdExternealChkBox==expdvdExternealChkBox && actdvdValueTxt==expdvdValueTxt )
 			{
 				return true;
 			}
 			else
 			{
 				return false;
 			}
 		}
 		catch (Exception e) 
 		{
 			  String exception =e.getMessage();
 			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
 			  return false;
 		}
 	}


  public boolean checkSavingEpaymemtWithAllMandateFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayNameTxt));
			epayNameTxt.click();
			epayNameTxt.sendKeys("googlePay");
			epayNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
			epayCode.click();
			epayCode.sendKeys("googlePay");
			epayCode.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayAccDD));
			epayAccDD.click();
			epayAccDD.sendKeys("Coupon Account");
			Thread.sleep(2000);
			epayAccDD.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayPaymentChargesTypeDD));
			epayPaymentChargesTypeDD.click();
			epayPaymentChargesTypeDD.sendKeys("Percentage");
			Thread.sleep(2000);
			epayPaymentChargesTypeDD.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayPaymentChargesTxt));
			epayPaymentChargesTxt.click();
			epayPaymentChargesTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			epayPaymentChargesTxt.sendKeys("2");
			Thread.sleep(2000);
			epayPaymentChargesTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayPaymentChargesAccDD));
			epayPaymentChargesAccDD.click();
			epayPaymentChargesAccDD.sendKeys(Keys.HOME);
			epayPaymentChargesAccDD.sendKeys("Financial Charges");
			Thread.sleep(2000);
			epayPaymentChargesAccDD.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epaySaveBtn));
			epaySaveBtn.click();
			
			 
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			if(actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		


	public boolean checkSavedEpaymentVoucherAndEditing() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
	 		
	 		for(int i=0;i<posNameListCount;i++)
	 		{
	 			String data= posNameList.get(i).getText();
	 			
	 			if(data.equalsIgnoreCase("googlePay") && posListChkBox.get(i).isSelected()==false)
	 			{
	 				posNameList.get(i).click();
	 				
	 				posListChkBox.get(i).click();
	 				
	 				break;
	 			}
	 		}
	 		
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
	 		masterEditBtn.click();
			
	 		Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
			gvdNameTxt.click();
			
			String actgvdNameTxt = epayNameTxt.getAttribute("value");
			String expgvdNameTxt = "googlePay";
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
			gvdCodeTxt.click();

			String actgvdCodeTxt = epayCode.getAttribute("value");
			String expgvdCodeTxt = "googlePay";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayNameTxt));
			epayNameTxt.click();
			epayNameTxt.clear();
			epayNameTxt.sendKeys("E-GooglePay");
			epayNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayCode));
			epayCode.click();
			epayCode.clear();
			epayCode.sendKeys("E-GooglePay");
			epayCode.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="Updated Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			
			System.out.println("gvdNameTxt : "+actgvdNameTxt+" Value Expected : "+expgvdNameTxt);
			System.out.println("gvdCodeTxt : "+actgvdCodeTxt+" Value Expected : "+expgvdCodeTxt);
				 
			
			if(actgvdNameTxt.equalsIgnoreCase(expgvdNameTxt) && actgvdCodeTxt.equalsIgnoreCase(expgvdCodeTxt)
					&& actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}
	
	
	

	
	
	public boolean checkUpdatedEpaymentAndSaveGVDUsingCloneOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			Thread.sleep(2000);
			
			int posNameListCount = posNameList.size();
	 		
	 		for(int i=0;i<posNameListCount;i++)
	 		{
	 			String data= posNameList.get(i).getText();
	 			
	 			if(data.equalsIgnoreCase("E-GooglePay"))
	 			{
	 				posNameList.get(i).click();
	 				
	 				if(posListChkBox.get(i).isSelected()==false)
	 				{
	 					posListChkBox.get(i).click();
	 				}
	 				break;
	 			}
	 		}
	 		
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
	 		masterEditBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
			gvdNameTxt.click();
			
			String actgvdNameTxt = gvdNameTxt.getAttribute("value");
			String expgvdNameTxt = "E-GooglePay";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
			gvdCodeTxt.click();

			String actgvdCodeTxt = gvdCodeTxt.getAttribute("value");
			String expgvdCodeTxt = "E-GooglePay";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloneBtn));
			editcloneBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdNameTxt));
			gvdNameTxt.click();
			gvdNameTxt.sendKeys("E-GooglePayDelete");
			gvdNameTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gvdCodeTxt));
			gvdCodeTxt.click();
			gvdCodeTxt.sendKeys("E-GooglePayToDelete");
			gvdCodeTxt.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			 
			String expMessage="Saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
			
			System.out.println("gvdNameTxt : "+actgvdNameTxt+" Value Expected : "+expgvdNameTxt);
			System.out.println("gvdCodeTxt : "+actgvdCodeTxt+" Value Expected : "+expgvdCodeTxt);
				 
			
			if(actgvdNameTxt.equalsIgnoreCase(expgvdNameTxt) && actgvdCodeTxt.equalsIgnoreCase(expgvdCodeTxt)
					&& actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}

  

	public static boolean checkDeleteEGooglePayToDelete() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MasterHomeSearchTxt));
			MasterHomeSearchTxt.click();
			
			MasterHomeSearchTxt.sendKeys("E-GooglePayDelete");
			
			Thread.sleep(4000);
			
			
			MasterHomeSearchTxt.sendKeys(Keys.TAB);
			
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
	 		masterDeleteBtn.click();
	         
	 		Thread.sleep(2000);
	         
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
	 		System.out.println(getMsgOnDelete.getText());
	         
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
	 		clickOnOkInDelete.click();
	         
	 		String expMessage="Record Deleted Successfully.";
	 		
	 		String actMessage=checkValidationMessage(expMessage);
	 		
				
	 		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
	 		
				
	 		if(actMessage.equalsIgnoreCase(expMessage) )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		} 
	}

  
	

	public boolean checkSavingEpaymemtAsPhonePay() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		try
		{
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayNameTxt));
			epayNameTxt.click();
			epayNameTxt.sendKeys("E-PhonePay");
			epayNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayCode));
			epayCode.click();
			epayCode.sendKeys("E-PhonePay");
			epayCode.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayAccDD));
			epayAccDD.click();
			epayAccDD.sendKeys("Coupon Account");
			Thread.sleep(2000);
			epayAccDD.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayPaymentChargesTypeDD));
			epayPaymentChargesTypeDD.click();
			epayPaymentChargesTypeDD.sendKeys("Amount");
			Thread.sleep(2000);
			epayPaymentChargesTypeDD.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayPaymentChargesTxt));
			epayPaymentChargesTxt.click();
			epayPaymentChargesTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			epayPaymentChargesTxt.sendKeys("5");
			Thread.sleep(2000);
			epayPaymentChargesTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epayPaymentChargesAccDD));
			epayPaymentChargesAccDD.click();
			epayPaymentChargesAccDD.sendKeys(Keys.HOME);
			epayPaymentChargesAccDD.sendKeys("Financial Charges");
			Thread.sleep(2000);
			epayPaymentChargesAccDD.sendKeys(Keys.TAB);
			
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(epaySaveBtn));
			epaySaveBtn.click();
			
			String expSavingMessage="Saved Successfully";
			
			String actSavingMessage=checkValidationMessage(expSavingMessage);
			
			System.out.println("SavingMessage : "+actSavingMessage+" Value Expected : "+expSavingMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			if(actSavingMessage.equalsIgnoreCase(expSavingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	}




	  //Pre Order
	    @FindBy(xpath="//button[@id='7']")
		private static WebElement posSalePreOrder8;
		
		
		@FindBy(xpath="//div[@id='76']")
		private static WebElement posPreOrderScreen;
		
		@FindBy(xpath="//div[@id='77']")
		private static WebElement posPreOrderCollection;
		
		@FindBy(xpath="//div[@id='78']")
		private static WebElement posPreOrderEnquiry;
	  

		@FindBy(xpath="//span[@id='spanPreOrderAnimate']")
		private static WebElement posScreenHeader;
	  
		@FindBy(xpath="//input[@id='txtbox_ddlPreorderPayMethods']")
		private static WebElement preorderPaymentMethodTxt;
	  
		

		
		@FindBy(xpath="//*[@id='ul_ddlPreorderPayMethods']/li[1]/div/label/input")
		private static WebElement preorderCashChkbox;
	  
		@FindBy(xpath="//*[@id='ul_ddlPreorderPayMethods']/li[2]/div/label/input")
		private static WebElement preorderCreditCardChkbox;
	  
		@FindBy(xpath="//*[@id='ul_ddlPreorderPayMethods']/li[3]/div/label/input")
		private static WebElement preorderDebitCardChkbox;
	  
		@FindBy(xpath="//*[@id='ul_ddlPreorderPayMethods']/li[4]/div/label/input")
		private static WebElement preorderChequeChkbox;
	  
		@FindBy(xpath="//*[@id='ul_ddlPreorderPayMethods']/li[5]/div/label/input")
		private static WebElement preorderGiftVoucherChkbox;
	  
		@FindBy(xpath="//*[@id='ul_ddlPreorderPayMethods']/li[6]/div/label/input")
		private static WebElement preorderCreditNoteChkbox;
	  
		
		@FindBy(xpath="//*[@id='ul_ddlPreorderPayMethods']/li[7]/div/label/input")
		private static WebElement preorderPointsRedemptionChkbox;
	  
		@FindBy(xpath="//*[@id='ul_ddlPreorderPayMethods']/li[8]/div/label/input")
		private static WebElement preorderDiscountVoucherChkbox;
	  
		
		@FindBy(xpath="//*[@id='ul_ddlPreorderPayMethods']/li[10]/div/label/input")
		private static WebElement preorderEPaymentChkbox;
		
		@FindBy(xpath="//input[@id='chkAllowEditPreOrder']")
		private static WebElement preorderEditChkbox;
	  
		@FindBy(xpath="//ul[@id='ul_ddlPreorderPayMethods']/li/div/label")
		private static List<WebElement> preOrderPaymentList;
		
		
		
		public boolean checkPreorderUnderPreference() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			 
			  
			  Thread.sleep(3000);
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
			  pointOfSaleMenu.click();
			
			  Thread.sleep(3000);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
			  pointOfSaleUtilitiesMenu.click();
				
			  Thread.sleep(2000);
										
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
			  posUtilitiesPreferencesMenu.click();
				
			  Thread.sleep(2000);
			  
			  
			  Thread.sleep(2000);
					
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutletBtn));
			  posOutletBtn.click();
			
			  Thread.sleep(2000);

			  Select posOutletSelect = new Select(posOutLetDropDown);
			  posOutletSelect.selectByVisibleText("Outlet1");
			  
			  

			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderBtn));
			  posPreOrderBtn.click();
			
			  
			  Thread.sleep(2000);
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preorderPaymentMethodTxt));
			  preorderPaymentMethodTxt.click();
			  
			  Thread.sleep(2000);
			  
			  int preOrderPaymentListCount = preOrderPaymentList.size();
			  
			  for(int i=0;i<preOrderPaymentListCount;i++)
			  {
				  preOrderPaymentList.get(i).click();
			  }
			  
			 /* preorderCashChkbox.click();
			  preorderCreditCardChkbox.click();
			  preorderDebitCardChkbox.click();
			  preorderChequeChkbox.click();
			  preorderGiftVoucherChkbox.click();
			  preorderCreditNoteChkbox.click();
			  preorderPointsRedemptionChkbox.click();
			  preorderDiscountVoucherChkbox.click();
			  preorderEPaymentChkbox.click();*/
			  
	          Thread.sleep(2000);

	          if(preorderEditChkbox.isSelected()==false)
	          {
				  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preorderEditChkbox));
				  preorderEditChkbox.click();
	          }
	          
	          
			  Thread.sleep(2000);
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posSaveBtn));
			  posSaveBtn.click();
				
			  String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
			  String exppointOfSalesConfirmationBodyMessage = "Outlet details saved successfully.";
				
			  System.out.println("pointOfSalesConfirmationBodyMessage : ."+actpointOfSalesConfirmationBodyMessage+". Value Expected : "+exppointOfSalesConfirmationBodyMessage);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posInformationPopupOkBtn));
			  posInformationPopupOkBtn.click();
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			  userNameDisplay.click();
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			  logoutOption.click();
			  
			  Thread.sleep(3000);
				
			  LoginPage lp=new LoginPage(getDriver()); 
				
			  String unamelt="useralloptions";
				
			  String pawslt="12345";
						      
			  lp.enterUserName(unamelt);
			  Thread.sleep(2000);		
			  
			  lp.enterPassword(pawslt);
				
			  lpOutLetTxt.sendKeys("outlet1");
			  Thread.sleep(2000);
			  lpOutLetTxt.sendKeys(Keys.TAB);
				
			  lpCounterTxt.sendKeys("Counter Update");
			  Thread.sleep(2000);
			  lpCounterTxt.sendKeys(Keys.TAB);
						  
			  lp.clickOnSignInBtn();
					
			  Thread.sleep(8000);
					
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
			  pointOfSaleMenu.click();
			
			  Thread.sleep(2000);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleUtilitiesMenu));
			  pointOfSaleUtilitiesMenu.click();
				
			  Thread.sleep(2000);
										
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posUtilitiesPreferencesMenu));
			  posUtilitiesPreferencesMenu.click();
				
			  Thread.sleep(2000);
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderBtn));
			  posPreOrderBtn.click();
			
			  Thread.sleep(2000);
					
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
			  Select posOutLetDropDownSelect = new Select(posOutLetDropDown);
			  
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posOutLetDropDown));
			  posOutLetDropDownSelect.selectByVisibleText("Outlet1");
			  

			  String actpreorderPaymentMethodTxt=preorderPaymentMethodTxt.getAttribute("value");
			  String exppreorderPaymentMethodTxt="Cash,CreditCard,DebitCard,Cheque,GiftVoucher,CreditNote,PointsRedemption,DiscountVoucher,CreditSale,E-Payment,Pre Paid Wallet";
			  
			  
			  System.out.println("Actual     preorderPaymentMethodTxt :"+actpreorderPaymentMethodTxt);
			  System.out.println(" Exepcted  preorderPaymentMethodTxt :"+exppreorderPaymentMethodTxt);
			 
			  
			  String actposOutLetDropDown            = posOutLetDropDownSelect.getFirstSelectedOption().getText();
			  
			  String expposOutLetDropDown            = "Outlet1";
		
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posCloseBtn));
			  posCloseBtn.click();
			  
			  System.out.println("posOutLetDropDown : "+actposOutLetDropDown+" Value Expected : "+expposOutLetDropDown);
			  
			  
			  if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage)
					  && actposOutLetDropDown.equalsIgnoreCase(expposOutLetDropDown) && actpreorderPaymentMethodTxt.equalsIgnoreCase(exppreorderPaymentMethodTxt))
				
				{
					//excelReader.setCellData(xlfile, "Sheet1", 156, 9, resPass);
					return true;
				}
				else
				{
					//excelReader.setCellData(xlfile, "Sheet1", 156, 9, resFail);
					return false;
				}
			}	
		
			 
		
		
		
		
		
		
		
		
		
		
		
		
		
	  public static boolean checkOptionsUnderSPreOrderUnderPOS() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
			Thread.sleep(3000);
		
		    LoginPage lp=new LoginPage(getDriver()); 
			
			String unamelt="UserAllOptions";
					      
			String pawslt="12345";
					      
			lp.enterUserName(unamelt);
					
			lp.enterPassword(pawslt);
			
			lpOutLetTxt.sendKeys("outlet1");
			Thread.sleep(2000);
			lpOutLetTxt.sendKeys(Keys.TAB);
			
			lpCounterTxt.sendKeys("Counter Update");
			Thread.sleep(2000);
			lpCounterTxt.sendKeys(Keys.TAB);
					  
			lp.clickOnSignInBtn();
			
			Thread.sleep(6000);
			
		    Thread.sleep(4000);
		    
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMenu));
			pointOfSaleMenu.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMainScreenMenu));
			pointOfSaleMainScreenMenu.click();
			
			Thread.sleep(2000);
									
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pointOfSaleMS));
			pointOfSaleMS.click();
			
			Thread.sleep(5000);
			
	        int posFooterPanelListCount = posFooterPanelList.size();
			
			for(int i=0;i<posFooterPanelListCount;i++)
			{
				String data = posFooterPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Pre Order"))
				{
					posFooterPanelList.get(i).click();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(posPreOrderScreen));
	        boolean display=posPreOrderScreen.isDisplayed() && posPreOrderCollection.isDisplayed() && 
					        posPreOrderEnquiry.isDisplayed() ;
	        
	        
	        System.out.println(" Display Result :   "+display +" Value Expected : "+true);
		    
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderScreen));
		    posPreOrderScreen.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posScreenHeader));
			posScreenHeader.click();
			
			
			String actposScreenHeader=posScreenHeader.getText();
			String expposScreenHeader="PreOrder Transaction";
			
			
			System.out.println("actposScreenHeader  : "+actposScreenHeader +" Value Expected  : "+expposScreenHeader );
			
			if(display==true &&actposScreenHeader.equalsIgnoreCase(expposScreenHeader) )
			{
				//excelReader.setCellData(xlfile, "Sheet1", 140, 9, resPass);
				return true;
			}
			else
			{
				//excelReader.setCellData(xlfile, "Sheet1", 140, 9, resFail);
				return false;
			}
		}
	  
	  
	  public boolean checkPreorderScreenOptionsWithItemAndMemberAndEmoployeeInPOS() throws InterruptedException
	  {
		  
		  
		  Thread.sleep(3000);
			
			int posFooterPanelListCount = posFooterPanelList.size();
			
			for(int i=0;i<posFooterPanelListCount;i++)
			{
				String data = posFooterPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Item"))
				{
					posFooterPanelList.get(i).click();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			int rightPanelListCount = rightPanelList.size();
			
			for(int i=0;i<rightPanelListCount;i++)
			{
				String data = rightPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Select Item by Name"))
				{
					rightPanelList.get(i).click();
					break;
				}
			}	
		  
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchItemBtn));
			searchItemBtn.click();
			
			Thread.sleep(2000);
			
			int itemBodyListCount = itemBodyList.size();
			
			ArrayList<String> itemBodyListArray = new ArrayList<String>();
			
			for(int i=0;i<itemBodyListCount;i++)
			{
				String data = itemBodyList.get(i).getText();

				itemBodyListArray.add(data);
				
				if (i!=itemBodyListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js = (JavascriptExecutor) getDriver();
					js.executeScript("arguments[0].scrollIntoView();",itemBodyList.get(temp));
				}
			}	
			
			for(int i=0;i<itemBodyListCount;i++)
			{
				String data = itemBodyList.get(i).getText();

				if (data.equalsIgnoreCase("STD RATE COGS ITEM")) 
				{
					itemBodyList.get(i).click();
					
					break;
				}
			}	
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceTxt));
			changePriceTxt.click();
			changePriceTxt.sendKeys("100");
			changePriceTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(changePriceOkBtn));
			changePriceOkBtn.click();
			
			
			for(int i=0;i<posFooterPanelListCount;i++)
			{
				String data = posFooterPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Member"))
				{
					posFooterPanelList.get(i).click();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			int rightPanelListCountMember = rightPanelList.size();
			
			for(int i=0;i<rightPanelListCountMember;i++)
			{
				String data = rightPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Select Member by Name"))
				{
					rightPanelList.get(i).click();
					break;
				}
			}	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMemberBtn));
			searchMemberBtn.click();
			
			Thread.sleep(2000);
			
			int memberBodyListCount = memberBodyList.size();
			
			
			for(int i=0;i<memberBodyListCount;i++)
			{
				String data = memberBodyList.get(i).getText();

				if(data.equalsIgnoreCase("TestMemberUpdate"))
				{
					getAction().doubleClick(memberBodyList.get(i)).build().perform();
				}
				
			}	
			
			Thread.sleep(2000);
			
			String actpointOfSalesConfirmationBodyMessage = pointOfSalesConfirmationBodyMessage.getText();
			String exppointOfSalesConfirmationBodyMessage = "Points definition do not exist for the selected member. Do you want to continue?";
			
			System.out.println("pointOfSalesConfirmationBodyMessage : "+actpointOfSalesConfirmationBodyMessage+" Value Expected : "+exppointOfSalesConfirmationBodyMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posConfirmYesBtn));
			posConfirmYesBtn.click();
			
			Thread.sleep(3000);
			
			
			for(int i=0;i<posFooterPanelListCount;i++)
			{
				String data = posFooterPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Employee"))
				{
					posFooterPanelList.get(i).click();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			int rightPanelListCountEmployee = rightPanelList.size();
			
			for(int i=0;i<rightPanelListCountEmployee;i++)
			{
				String data = rightPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Select Employee by Name"))
				{
					rightPanelList.get(i).click();
					break;
				}
			}	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchEmployeeBtn));
			searchEmployeeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(employeeCodeRow1));
			getAction().doubleClick(employeeCodeRow1).build().perform();
		
			
			if(actpointOfSalesConfirmationBodyMessage.equalsIgnoreCase(exppointOfSalesConfirmationBodyMessage))
			{
				System.out.println("Test Pass : Employee Linked");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Employee Linked");
				return false;
			}
		}

	  
	  
	  @FindBy(xpath="//*[@id='divPreOrderDetailsModalBody']/div[1]/div")
	  private static List<WebElement> billSettlementPreOrderBillDetailsBodyList;
	  
	  @FindBy(xpath="//*[@id='divPreOrderDetailsModalBody']/div[3]/div")
	  private static List<WebElement> billSettlementPreOrderPaymentBillDetailsList;
	  
	  @FindBy(xpath="//*[@id='divPreOrderDetailsModalBody']/div[4]/div")
	  private static List<WebElement> billSettlementPreOrderCollectionsDetailsList;
	  
	 
	  //preOrderDetails
	  
	  @FindBy(xpath="//*[@id='dpPreOrderDate']")
	  private static WebElement podOrderDateTxt;
	  
	  
	  @FindBy(xpath="//*[@id='optPreOrderOutlet']")
	  private static WebElement podOrderOutletDepdwn;
	  
	  @FindBy(xpath="//select[@id='ddlStatus']")
	  private static WebElement podStatus;
	  
	  @FindBy(xpath="//input[@id='optPreOrderProductionOutlet']")
	  private static WebElement podProductionOutletDrpdwn;
	  
	  @FindBy(xpath="//input[@id='txtPreOrderNetAmount']")
	  private static WebElement podNetAmountTxt;
	  
	  @FindBy(xpath="//input[@id='txtPreOrderDeposit']")
	  private static WebElement podDepositTxt;
	  
	  @FindBy(xpath="//input[@id='txtPreOrderBalancePending']")
	  private static WebElement podBalPendingTxt;
	  
	  @FindBy(xpath="//input[@id='optPreOrderPrePaymentOutlet']")
	  private static WebElement podPrePaymentOutlet;
	  
	  @FindBy(xpath="//input[@id='optPreOrderFinalPaymentOutlet']")
	  private static WebElement podFinalPaymentOutletDrpdwn;
	  
	  @FindBy(xpath="//input[@id='dpPreOrderCollectionDate']")
	  private static WebElement podCollDate;
	  
	  
	  @FindBy(xpath="//input[@id='optPreOrderCollectionOutlet']")
	  private static WebElement podCollOutlet;
	  

	  @FindBy(xpath="//input[@id='rbtNone']")
	  private static WebElement podNoneRadioBtn;
	  
	  @FindBy(xpath="//input[@id='rbtHomeDelivery']")
	  private static WebElement podHomeDeliveryRadioBtn;
	  
	  @FindBy(xpath="//input[@id='rbtPickUp']")
	  private static WebElement podPickRadioBtn;
	  
	  @FindBy(xpath="//*[@id='btnClose']/div[1]/span")
	  private static WebElement podCloseBtn;
	  
	  @FindBy(xpath="//*[@id='btnSaveOrPayIcon']/span")
	  private static WebElement podSaveBtn;
	  
	  @FindBy(xpath="//*[@id='txtPreOrderCollectionOrderNumber']")
	  private static WebElement preOrderCollOrderNum;
	  
	  @FindBy(xpath="//*[@id='optPreOrderCollectionOrderOutlet']")
	  private static WebElement preOrderCollOrderoutlet;
	  
	  @FindBy(xpath="//*[@id='optPreOrderCollectionProductionOutlet']")
	  private static WebElement preOrderCollProductionOutLet;
	  
	  @FindBy(xpath="//input[@id='txtPreOrderCollectionTotalAmount']")
	  private static WebElement preOrderCollTotalAmt;
	  
	  @FindBy(xpath="//input[@id='txtPreOrderCollectionDeposit']")
	  private static WebElement preOrderCollDeposit;
	  
	  
	  @FindBy(xpath="//input[@id='txtPreOrderCollectionBalancePending']")
	  private static WebElement preOrderCollBalPending;
	  
	  
	  
	  public boolean checkPreorderScreenOptionsWithFunctionInPOS() throws InterruptedException
	  {
		  
		    Thread.sleep(3000);
			
			int posFooterPanelListCount = posFooterPanelList.size();
			
			for(int i=0;i<posFooterPanelListCount;i++)
			{
				String data = posFooterPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Functions"))
				{
					posFooterPanelList.get(i).click();
					break;
				}
			}
			
			Thread.sleep(2000);
			
	       int rightPanelListCount = rightPanelList.size();
			
			for(int i=0;i<rightPanelListCount;i++)
			{
				String data = rightPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Bill Settlement"))
				{
					rightPanelList.get(i).click();
					break;
				}
			}	
			
			Thread.sleep(2000);
		  
			Thread.sleep(3000);
			
			boolean actpodOrderDateTxt     	       = podOrderDateTxt.isDisplayed();
			boolean actpodPreOrderOutlet           = podOrderOutletDepdwn.isDisplayed();
			boolean actpodStatus         		   = podStatus.isDisplayed();
			boolean actpodProductionOutletDrpdwn   = podProductionOutletDrpdwn.isDisplayed();
			boolean actpodNetAmountTxt        	   = podNetAmountTxt.isDisplayed();
			boolean actpodDepositTxt   			   = podDepositTxt.isDisplayed();
			boolean actpodBalPendingTxt            = podBalPendingTxt.isDisplayed();
			boolean actpodPrePaymentOutlet         = podPrePaymentOutlet.isDisplayed();
			boolean actpodFinalPaymentOutletDrpdwn = podFinalPaymentOutletDrpdwn.isDisplayed();
			
			JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
			js1.executeScript("arguments[0].scrollIntoView();", podCollDate);
			
			boolean exppodOrderDateTxt     			= true;
			boolean exppodPreOrderOutlet            = true;
			boolean exppodStatus         			= true;
			boolean exppodProductionOutletDrpdwn 	= true;
			boolean exppodNetAmountTxt        		= true;
			boolean exppodDepositTxt   				= true;
			boolean exppodBalPendingTxt    		    = true;
			boolean exppodPrePaymentOutlet     		= true;
			boolean exppodCollDate         			= true;
			boolean exppodFinalPaymentOutletDrpdwn  = true;
			boolean exppodCollOutlet         		= true;
			
			boolean actpodCollDate                 = podCollDate.isDisplayed();
			boolean actpodCollOutlet               = podCollOutlet.isDisplayed();
			
			
			
			/*Thread.sleep(3000);
			
			JavascriptExecutor js2 = (JavascriptExecutor) getDriver();
			js2.executeScript("arguments[0].scrollIntoView();", podOrderOutletDepdwn);
			
			Thread.sleep(4000);
			
			
			String actpodOrderOutletDropdown       = podOrderOutletDepdwn.getText();
			String actpodProductionOutletDropdown  = podProductionOutletDrpdwn.getText();
			String actpodNetAmountText    		   = podNetAmountTxt.getText();
			String actpodDepositText   			   = podDepositTxt.getText();
			String actpodBalPendingText    		   = podBalPendingTxt.getText();
			String actpodPrePaymentOutletdrpdwn    = podPrePaymentOutlet.getText();
			String actpodFinalPaymentOutletDrpdown = podFinalPaymentOutletDrpdwn.getText();
			
			
			String exppodOrderOutletDropdown         = "Outlet1";
			String exppodProductionOutletDropdown    = "Outlet1";
			String exppodNetAmountText               = "100.00";
			String exppodDepositText                 = "0";
			String exppodBalPendingText              = "100.00";
			String exppodPrePaymentOutletdrpdwn      = "Outlet1";
			String exppodFinalPaymentOutletDrpdown   = "Outlet1";*/
			
			System.out.println("podOrderDateTxt            : "+actpodOrderDateTxt            +" Value Expected : "+exppodOrderDateTxt);
			System.out.println("podPreOrderOutlet          : "+actpodPreOrderOutlet          +" Value Expected : "+exppodPreOrderOutlet);
			System.out.println("podStatus                  : "+actpodStatus                  +" Value Expected : "+exppodStatus);
			System.out.println("podProductionOutletDrpdwn  : "+actpodProductionOutletDrpdwn  +" Value Expected : "+exppodProductionOutletDrpdwn);
			System.out.println("podNetAmountTxt            : "+actpodNetAmountTxt            +" Value Expected : "+exppodNetAmountTxt);
			System.out.println("podDepositTxt              : "+actpodDepositTxt              +" Value Expected : "+exppodDepositTxt);
			System.out.println("podBalPendingTxt           : "+actpodBalPendingTxt           +" Value Expected : "+exppodBalPendingTxt);
			System.out.println("podPrePaymentOutlet        : "+actpodPrePaymentOutlet        +" Value Expected : "+exppodPrePaymentOutlet);
			System.out.println("podFinalPaymentOutletDrpdwn: "+actpodFinalPaymentOutletDrpdwn+" Value Expected : "+exppodFinalPaymentOutletDrpdwn);
			System.out.println("podCollDate                : "+actpodCollDate                +" Value Expected : "+exppodCollDate);
			System.out.println("podCollOutlet              : "+actpodCollOutlet              +" Value Expected : "+exppodCollOutlet);
			/*System.out.println("podOrderOutletDropdown     : "+actpodOrderOutletDropdown      +" Value Expected : "+exppodOrderOutletDropdown );
			System.out.println("podProductionOutletDropdown: "+actpodProductionOutletDropdown +" Value Expected : "+exppodProductionOutletDropdown);
			System.out.println("podNetAmountText           : "+actpodNetAmountText            +" Value Expected : "+exppodNetAmountText);
			System.out.println("podDepositTxt              : "+actpodDepositText              +" Value Expected : "+exppodDepositText);
			
			System.out.println("podPrePaymentOutletdrpdwn   : "+actpodPrePaymentOutletdrpdwn  +" Value Exepcted  : "+exppodPrePaymentOutletdrpdwn);
			System.out.println("podFinalPaymentOutletDrpdown  : "+actpodFinalPaymentOutletDrpdown +" Value Exepcted : "+exppodFinalPaymentOutletDrpdown);
			*/
			

			JavascriptExecutor js3 = (JavascriptExecutor) getDriver();
			js3.executeScript("arguments[0].scrollIntoView();", podSplInstructionTxt);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(podSplInstructionTxt));
			podSplInstructionTxt.click();
			podSplInstructionTxt.sendKeys("POS");
			podSplInstructionTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			  
		    getWebDriverWait().until(ExpectedConditions.elementToBeClickable(podSaveBtn));
		    podSaveBtn.click();
		  
		    Thread.sleep(10000);

			ArrayList<String> openTabs2 = new ArrayList<String>(getDriver().getWindowHandles());
			
		 	System.out.println("openTabs2"+openTabs2);
		
		 	Thread.sleep(2000);
		 	
		 	getDriver().switchTo().window(openTabs2.get(1));
		 	
			Thread.sleep(3000);
			
		 	getDriver().close();
		
		 	Thread.sleep(3000);
		
		 	getDriver().switchTo().window(openTabs2.get(0));
			 	
			
			if(actpodOrderDateTxt==exppodOrderDateTxt && actpodPreOrderOutlet==exppodPreOrderOutlet 
					&& actpodStatus==exppodStatus && actpodProductionOutletDrpdwn==exppodProductionOutletDrpdwn
					&& actpodNetAmountTxt==exppodNetAmountTxt && actpodDepositTxt==exppodDepositTxt
					&& actpodBalPendingTxt==exppodBalPendingTxt && actpodPrePaymentOutlet==exppodPrePaymentOutlet
					&& actpodFinalPaymentOutletDrpdwn==exppodFinalPaymentOutletDrpdwn && actpodCollDate==exppodCollDate/*
					&& actpodOrderOutletDropdown.equalsIgnoreCase(exppodOrderOutletDropdown)  && actpodProductionOutletDropdown.equalsIgnoreCase(exppodProductionOutletDropdown)
					&& actpodDepositText.equalsIgnoreCase(exppodDepositText) && actpodBalPendingText.equalsIgnoreCase(exppodBalPendingText)
					&& actpodFinalPaymentOutletDrpdown.equalsIgnoreCase(exppodFinalPaymentOutletDrpdown) && actpodFinalPaymentOutletDrpdown.equalsIgnoreCase(exppodFinalPaymentOutletDrpdown)*/)
			{
				System.out.println("Test Pass : Displayed PreOrder Details As Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Displayed PreOrder Details As Expected ");
				return false;
			}
		}
		
	  @FindBy(xpath="//*[@id='txtPreOrderSpecialInstruction']")
	  private static WebElement podSplInstructionTxt;
	                
	  @FindBy(xpath="//*[@id='divPreOrderDetailsModalFooter']/div/div[1]/div[1]/span")
	  private static WebElement podFooterBackBtn;
	  
	  @FindBy(xpath="//*[@id='divPreOrderCollectionModalFooter']/div/div[1]/div[1]")
	  private static WebElement podCollFooterBackBtn;
	  

	  
	  @FindBy(xpath="//*[@id='txtPreOrderMessageGreetings']")
	  private static WebElement podMessageGreetingsTxt;
	  
	  @FindBy(xpath="//*[@id='divPreOrderSearchModalBodyMain']/div/div/div/label")
	  private static List<WebElement> preorderSearchPopUpHeaderList;
	  
	  @FindBy(xpath="//*[@id='tHeadPreOrderSearch']/tr/td")
	  private static List<WebElement> preorderSearchPopUpBodyList;
	  
	  @FindBy(xpath="//*[@id='divPreOrderSearchModalBodyMain']/div[9]/div/div[1]/div[1]/span")
	  private static WebElement posPreOrderSearchBtn;
	  
	  @FindBy(xpath="//*[@id='tbodyPreOrderSearchRecord']/tr[1]/td[1]/i")
	  private static WebElement posPreOrderRow1Select;
	  
	  @FindBy(xpath="//*[@id='divPreorderSearchModalFooter']/div/div/div/div[1]/div[1]/span")
	  private static WebElement posPreOrderCollectionBtn;
	  
	  @FindBy(xpath="//*[@id='divPreorderSearchModalFooter']/div/div/div/div[2]/div[1]/span")
	  private static WebElement posPreOrderViewOrderBtn;
	  
	  @FindBy(xpath="//*[@id='divPreorderSearchModalFooter']/div/div/div/div[3]/div[1]/span")
	  private static WebElement posPreOrderEditBtn;
	  
	  @FindBy(xpath="//*[@id='tbodyPreOrderSearchRecord']/tr/td")
	  private static List<WebElement> posPreOrderGridRow1List;
	  
	  
	  @FindBy(xpath="//*[@id='divSaveOrPay']/div[1]/span")
	  private static WebElement posPreOrderPayBtn;
	  

	  
	  
	  public boolean checkPosPreOrderEnqirey() throws InterruptedException
	  {
		  
		  
		   Thread.sleep(2000);
	 
			
			int posFooterPanelListCount = posFooterPanelList.size();
			
			for(int i=0;i<posFooterPanelListCount;i++)
			{
				String data = posFooterPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Pre Order"))
				{
					posFooterPanelList.get(i).click();
					break;
				}
			}
			
			Thread.sleep(2000);
			
	       getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderScreen));
		   posPreOrderScreen.click();
			
	      
		   Thread.sleep(2000);
		 
			
			//int posFooterPanelListCount = posFooterPanelList.size();
			
			for(int i=0;i<posFooterPanelListCount;i++)
			{
				String data = posFooterPanelList.get(i).getText();
				
				if(data.equalsIgnoreCase("Pre Order"))
				{
					posFooterPanelList.get(i).click();
					break;
				}
			}
			
			Thread.sleep(2000);
		   
		   

	      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderEnquiry));
	      posPreOrderEnquiry.click();
	      
	      
	       ArrayList<String>preorderSearchPopUpHeaderListArray=new ArrayList<String>();
			
			int preorderSearchPopUpHeaderListCount=preorderSearchPopUpHeaderList.size();
				
			System.out.println(" preorderSearchPopUpHeaderListCount  :  "+preorderSearchPopUpHeaderListCount);
				
			for (int i = 0; i < preorderSearchPopUpHeaderListCount; i++)
			{
				String data=preorderSearchPopUpHeaderList.get(i).getText();
				preorderSearchPopUpHeaderListArray.add(data);
			}
				
			String actpreorderSearchPopUpHeaderList=preorderSearchPopUpHeaderListArray.toString();
			String exppreorderSearchPopUpHeaderList="[Order Number, Status, Order From Date, Order To Date, Collection From Date, Collection To Date, Order Outlet, Pre Payment Outlet, Collection Outlet, Final Payment Outlet, Member Name, Member Code, Non Member name, Phone Number]";
				
			System.err.println("  Actual    preorderSearchPopUpHeaderList : "+actpreorderSearchPopUpHeaderList);
			System.err.println("  Expected  preorderSearchPopUpHeaderList : "+exppreorderSearchPopUpHeaderList);
				
	     
	        ArrayList<String>preorderSearchPopUpBodyListArray=new ArrayList<String>();
			
			int preorderSearchPopUpBodyListCount=preorderSearchPopUpBodyList.size();
				
			System.out.println(" preorderSearchPopUpBodyListCount  :  "+preorderSearchPopUpBodyListCount);
				
			for (int i = 0; i < preorderSearchPopUpBodyListCount; i++)
			{
				String data=preorderSearchPopUpBodyList.get(i).getText();
				preorderSearchPopUpBodyListArray.add(data);
			}
				
			String actpreorderSearchPopUpBodyList=preorderSearchPopUpBodyListArray.toString();
			String exppreorderSearchPopUpBodyList="[, Order Number, Order Date, Order Outlet, Status, Collection Date, Collection Outlet, Production Outlet, Pre Payment Outlet, Member Name, Non Member name, Phone Number]";
				
			System.err.println("  Actual    preorderSearchPopUpBodyList : "+actpreorderSearchPopUpBodyList);
			System.err.println("  Expected  preorderSearchPopUpBodyList : "+exppreorderSearchPopUpBodyList);
				
	     
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderSearchBtn));
			posPreOrderSearchBtn.click();
			
			
	       ArrayList<String>posPreOrderGridRow1ListArray=new ArrayList<String>();
			
			int posPreOrderGridRow1ListCount=posPreOrderGridRow1List.size();
				
			System.out.println(" posPreOrderGridRow1ListCount  :  "+preorderSearchPopUpBodyListCount);
				
			for (int i = 0; i < posPreOrderGridRow1ListCount; i++)
			{
				String data=posPreOrderGridRow1List.get(i).getText();
				
				if (i==2) 
				{
					data="Date Fields";
				}
				if (i==5) 
				{
					data="Date Fields";
				}
				
				
				posPreOrderGridRow1ListArray.add(data);
			}
				
			String actposPreOrderGridRow1List=posPreOrderGridRow1ListArray.toString();
			String expposPreOrderGridRow1List="[, 1, Date Fields, Outlet1, New, Date Fields, Outlet1, Outlet1, Outlet1, TestMemberUpdate, , 0]";
				
			System.err.println("  Actual    posPreOrderGridRow1List : "+actposPreOrderGridRow1List);
			System.err.println("  Expected  posPreOrderGridRow1List : "+expposPreOrderGridRow1List);
				
			if (actposPreOrderGridRow1List.equalsIgnoreCase(expposPreOrderGridRow1List) && 
					actpreorderSearchPopUpBodyList.equalsIgnoreCase(exppreorderSearchPopUpBodyList) && 
					actpreorderSearchPopUpHeaderList.equalsIgnoreCase(exppreorderSearchPopUpHeaderList)) 
			{
				return true;
				
			}
			else 
			{

				return false;
			}
		  
		  
	  }
	  
	  
	  public boolean checkPOSPreOrderEditBeforeCollected() throws InterruptedException
	  {
		  
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderRow1Select));
		  posPreOrderRow1Select.click();
		  
		  Thread.sleep(2000);
		  
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderEditBtn));
		  posPreOrderEditBtn.click();
		  
		  Thread.sleep(3000);
		  
		  JavascriptExecutor js3 = (JavascriptExecutor) getDriver();
		  js3.executeScript("arguments[0].scrollIntoView();", podSplInstructionTxt);
			
		  Thread.sleep(2000);
		  
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(podSplInstructionTxt));
		  String actBeforeEdit=podSplInstructionTxt.getAttribute("value");
		  String expBeforeEdit="POS";
		  
		  
		  
		  System.out.println("actBeforeEdit  : "+actBeforeEdit+" Value Expected  : "+expBeforeEdit);
		  
		 
		  
		  Thread.sleep(2000);
		  
		  podSplInstructionTxt.click();
		  
		  podSplInstructionTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		  
		  podSplInstructionTxt.sendKeys("PreOrder UPDATE");
		  
		  
		  Thread.sleep(2000);
		  
		  podSplInstructionTxt.sendKeys(Keys.TAB);

		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(podSplInstructionTxt));
		  String actAfterEdit=podSplInstructionTxt.getAttribute("value");
		  String expAfterEdit="PreOrder UPDATE";
		  
		  System.out.println("actAfterEdit  : "+actAfterEdit+" Value Expected  : "+expAfterEdit);
		  
		  Thread.sleep(2000);
		  
		  
		  podSaveBtn.click();
		  
		  
		  Thread.sleep(5000);

		ArrayList<String> openTabs2 = new ArrayList<String>(getDriver().getWindowHandles());
		
	 	System.out.println("openTabs2"+openTabs2);

	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs2.get(1));
	 	
		Thread.sleep(2000);
		
	 	getDriver().close();

	 	Thread.sleep(3000);

	 	getDriver().switchTo().window(openTabs2.get(0));

	    Thread.sleep(2000);

			
		int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Pre Order"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);
			
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderScreen));
		 posPreOrderScreen.click();
			
	    
	   Thread.sleep(2000);
	 
		
		//int posFooterPanelListCount = posFooterPanelList.size();
		
		for(int i=0;i<posFooterPanelListCount;i++)
		{
			String data = posFooterPanelList.get(i).getText();
			
			if(data.equalsIgnoreCase("Pre Order"))
			{
				posFooterPanelList.get(i).click();
				break;
			}
		}
		
		  
		  if (actAfterEdit.equalsIgnoreCase(expAfterEdit) &&
				  actBeforeEdit.equalsIgnoreCase(expBeforeEdit))
		  {
			  System.out.println(" Test Pass : Edited Successfully");
			return true;
		  }
		  else 
		  {
			  System.out.println(" Test Fail : Edited Successfully");
			  return false;
		  }
	  }

	  
	  public boolean checkPOSPreOrderViewOrderBeforeCollection() throws InterruptedException
	  {
		  
		  Thread.sleep(2000);
		  
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderEnquiry));
		  posPreOrderEnquiry.click();
		  
		  Thread.sleep(2000);
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderSearchBtn));
		  posPreOrderSearchBtn.click();
		  
		  Thread.sleep(2000);
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderRow1Select));
		  posPreOrderRow1Select.click();
		  
		  Thread.sleep(2000);
		  
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderViewOrderBtn));
		  posPreOrderViewOrderBtn.click();
		  
		  
		  Thread.sleep(3000);
			
			String actpodOrderOutletDropdown       = podOrderOutletDepdwn.getAttribute("value");
			
			
			String actpodProductionOutletDropdown  = podProductionOutletDrpdwn.getAttribute("value");
			String actpodNetAmountText    		   = podNetAmountTxt.getAttribute("value");
			String actpodDepositText   			   = podDepositTxt.getAttribute("value");
			String actpodBalPendingText    		   = podBalPendingTxt.getAttribute("value");
			String actpodPrePaymentOutletdrpdwn    = podPrePaymentOutlet.getAttribute("value");
			String actpodFinalPaymentOutletDrpdown = podFinalPaymentOutletDrpdwn.getAttribute("value");
			
			
			String exppodOrderOutletDropdown         = "Outlet1";
			String exppodProductionOutletDropdown    = "Outlet1";
			String exppodNetAmountText               = "100.00";
			String exppodDepositText                 = "0"; //0.00
			String exppodBalPendingText              = "100.00";
			String exppodPrePaymentOutletdrpdwn      = "Outlet1";
			String exppodFinalPaymentOutletDrpdown   = "Outlet1";
		  
			System.out.println("podOrderOutletDropdown     : "+actpodOrderOutletDropdown      +" Value Expected : "+exppodOrderOutletDropdown );
			
			System.out.println("podProductionOutletDropdown: "+actpodProductionOutletDropdown +" Value Expected : "+exppodProductionOutletDropdown);
			System.out.println("podNetAmountText           : "+actpodNetAmountText            +" Value Expected : "+exppodNetAmountText);
			System.out.println("podDepositTxt              : "+actpodDepositText              +" Value Expected : "+exppodDepositText);
			System.out.println("podPrePaymentOutletdrpdwn   : "+actpodPrePaymentOutletdrpdwn  +" Value Exepcted  : "+exppodPrePaymentOutletdrpdwn);
			System.out.println("podFinalPaymentOutletDrpdo  : "+actpodFinalPaymentOutletDrpdown +" Value Exepcted : "+exppodFinalPaymentOutletDrpdown);

		
		  Thread.sleep(2000);
		  
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(podFooterBackBtn));
		  podFooterBackBtn.click();
		  
		  if (actpodOrderOutletDropdown.equalsIgnoreCase(exppodOrderOutletDropdown)  && actpodProductionOutletDropdown.equalsIgnoreCase(exppodProductionOutletDropdown)
					&& actpodDepositText.equalsIgnoreCase(exppodDepositText) && actpodBalPendingText.equalsIgnoreCase(exppodBalPendingText)
					&& actpodFinalPaymentOutletDrpdown.equalsIgnoreCase(exppodFinalPaymentOutletDrpdown) && actpodFinalPaymentOutletDrpdown.equalsIgnoreCase(exppodFinalPaymentOutletDrpdown))
		  {
			  System.out.println(" Test Pass : Edited Successfully");
			return true;
		  }
		  else 
		  {
			  System.out.println(" Test Fail : Edited Successfully");
			  return false;
		  }
	  }


	  public boolean checkPOSPreOrderCollection() throws InterruptedException
	  {
		  
		  Thread.sleep(2000);
		  
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderCollection));
		  posPreOrderCollection.click();
		  
		  
		  preOrderCollOrderNum.click();
		  
		  preOrderCollOrderNum.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		  preOrderCollOrderNum.sendKeys("1");
		  preOrderCollOrderNum.sendKeys(Keys.TAB);
		  
			Thread.sleep(3000);
			
			String actpreOrderCollOrderNum        = preOrderCollOrderNum.getAttribute("value");
			String actpodOrderOutletDropdown       = preOrderCollOrderoutlet.getAttribute("value");
			String actpodProductionOutletDropdown  = preOrderCollProductionOutLet.getAttribute("value");
			String actpodNetAmountText    		   = preOrderCollTotalAmt.getAttribute("value");
			String actpodDepositText   			   = preOrderCollDeposit.getAttribute("value");
			String actpodBalPendingText    		   = preOrderCollBalPending.getAttribute("value");
			
			String exppodOrderOutletDropdown         = "Outlet1";
			String exppodProductionOutletDropdown    = "Outlet1";
			String exppodNetAmountText               = "100.00";
			String exppodDepositText                 = "0.00";
			String exppodBalPendingText              = "100.00";
			String exppreOrderCollOrderNum           = "1";
			
			System.out.println("preOrderCollOrderNum;      : "+actpreOrderCollOrderNum +" Value Exepcted : "+exppreOrderCollOrderNum);
			System.out.println("podOrderOutletDropdown     : "+actpodOrderOutletDropdown      +" Value Expected : "+exppodOrderOutletDropdown );
			System.out.println("podProductionOutletDropdown: "+actpodProductionOutletDropdown +" Value Expected : "+exppodProductionOutletDropdown);
			System.out.println("podNetAmountText           : "+actpodNetAmountText            +" Value Expected : "+exppodNetAmountText);
			System.out.println("podDepositTxt              : "+actpodDepositText              +" Value Expected : "+exppodDepositText);
			System.out.println("podBalPendingText          : "+actpodBalPendingText  +" Value Exepcted  : "+exppodBalPendingText);
			
		  Thread.sleep(2000);
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(podCollFooterBackBtn));
		   podCollFooterBackBtn.click();
		  
		  if (actpodOrderOutletDropdown.equalsIgnoreCase(exppodOrderOutletDropdown)  && actpodProductionOutletDropdown.equalsIgnoreCase(exppodProductionOutletDropdown)
					&& actpodDepositText.equalsIgnoreCase(exppodDepositText) && actpodBalPendingText.equalsIgnoreCase(exppodBalPendingText)
					&& actpreOrderCollOrderNum.equalsIgnoreCase(exppreOrderCollOrderNum))
		  {
			  System.out.println(" Test Pass : Edited Successfully");
			return true;
		  }
		  else 
		  {
			  System.out.println(" Test Fail : Edited Successfully");
			  return false;
		  }
	  }
	  
	  

	  public boolean checkPOSPreOrderCollectionromPreOrderEnquirey() throws InterruptedException
	  {
		  
		  Thread.sleep(2000);
		  
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderCollection));
		  posPreOrderEnquiry.click();
		  
		
		  Thread.sleep(2000);
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderSearchBtn));
		  posPreOrderSearchBtn.click();
		  
		  Thread.sleep(2000);
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderRow1Select));
		  posPreOrderRow1Select.click();
		  
		  Thread.sleep(2000);
		  
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderCollectionBtn));
		  posPreOrderCollectionBtn.click();
		  
		
			Thread.sleep(3000);
			
			String actpreOrderCollOrderNum        = preOrderCollOrderNum.getAttribute("value");
			String actpodOrderOutletDropdown       = preOrderCollOrderoutlet.getAttribute("value");
			String actpodProductionOutletDropdown  = preOrderCollProductionOutLet.getAttribute("value");
			String actpodNetAmountText    		   = preOrderCollTotalAmt.getAttribute("value");
			String actpodDepositText   			   = preOrderCollDeposit.getAttribute("value");
			String actpodBalPendingText    		   = preOrderCollBalPending.getAttribute("value");
			
			String exppodOrderOutletDropdown         = "Outlet1";
			String exppodProductionOutletDropdown    = "Outlet1";
			String exppodNetAmountText               = "100.00";
			String exppodDepositText                 = "0.00";
			String exppodBalPendingText              = "100.00";
			String exppreOrderCollOrderNum           = "1";
			
			System.out.println("preOrderCollOrderNum;      : "+actpreOrderCollOrderNum +" Value Exepcted : "+exppreOrderCollOrderNum);
			System.out.println("podOrderOutletDropdown     : "+actpodOrderOutletDropdown      +" Value Expected : "+exppodOrderOutletDropdown );
			System.out.println("podProductionOutletDropdown: "+actpodProductionOutletDropdown +" Value Expected : "+exppodProductionOutletDropdown);
			System.out.println("podNetAmountText           : "+actpodNetAmountText            +" Value Expected : "+exppodNetAmountText);
			System.out.println("podDepositTxt              : "+actpodDepositText              +" Value Expected : "+exppodDepositText);
			System.out.println("podBalPendingText          : "+actpodBalPendingText  +" Value Exepcted  : "+exppodBalPendingText);
			
		  Thread.sleep(2000);
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(posPreOrderPayBtn));
		   posPreOrderPayBtn.click();
		  
		  if (actpodOrderOutletDropdown.equalsIgnoreCase(exppodOrderOutletDropdown)  && actpodProductionOutletDropdown.equalsIgnoreCase(exppodProductionOutletDropdown)
					&& actpodDepositText.equalsIgnoreCase(exppodDepositText) && actpodBalPendingText.equalsIgnoreCase(exppodBalPendingText)
					&& actpreOrderCollOrderNum.equalsIgnoreCase(exppreOrderCollOrderNum))
		  {
			  System.out.println(" Test Pass : Edited Successfully");
			return true;
		  }
		  else 
		  {
			  System.out.println(" Test Fail : Edited Successfully");
			  return false;
		  }
	  }
	  
	  
	  @FindBy(xpath="//*[@id='divPaymentTabInner']/button")
	  private static List<WebElement> billsetllementList;
		
	  @FindBy(xpath="//*[@id='divEPaymentRow']/label")
	  private static List<WebElement> epaymentRadioBtnList;
		
	  

	  
	  @FindBy(xpath="//input[@id='txtEPaymentAmount']")
	  private static WebElement epaymentAmttxt;

	  @FindBy(xpath="//*[@id='txtEPaymentSchemeDisc']")
	  private static WebElement ePaymentSchemeDiscTxt;

	  @FindBy(xpath="//*[@id='txtEPaymentTransactionId']")
	  private static WebElement ePaymentTransactionIdTxt;

	  @FindBy(xpath="//input[@id='txtEPaymentCharges']")
	  private static WebElement ePaymentChargesTxt;

	  @FindBy(xpath="//button[@id='btnEPaymentPay']")
	  private static WebElement ePaymentPayBtn;
	    
	  public boolean checkPOSPreOrderCollectionPaymentScreenWithEPayment() throws InterruptedException
	  {
		  
		  Thread.sleep(2000);
		  
		  ArrayList<String>actsettingWizardULList=new ArrayList<String>();
			
			int settingWizardULListCount=billsetllementList.size();
				
			System.out.println(" settingWizardULListCount  :  "+settingWizardULListCount);
				
			for (int i = 0; i < settingWizardULListCount; i++)
			{
				String data=billsetllementList.get(i).getText();
				
				if (data.equalsIgnoreCase("E-payment")) 
				{
					billsetllementList.get(i).click();
				}
			
				actsettingWizardULList.add(data);
			}
				
			String actsettingWizardUL=actsettingWizardULList.toString();
			String expsettingWizardUL="[Cash, Credit Card, Debit Card, Cheque, Gift Voucher, Credit Note, , , , E-Payment, ]";
				
			System.err.println("  Actual    settingWizardULList : "+actsettingWizardUL);
			System.err.println("  Expected  settingWizardULList : "+expsettingWizardUL);
			
			ArrayList<String>epaymentRadioBtnListArray=new ArrayList<String>();
				
			int epaymentRadioBtnListCount=epaymentRadioBtnList.size();
					
			System.out.println(" epaymentRadioBtnListCount  :  "+epaymentRadioBtnListCount);
					
			for (int i = 0; i < epaymentRadioBtnListCount; i++)
			{
					String data=epaymentRadioBtnList.get(i).getText();
					
					if (data.equalsIgnoreCase("E-GooglePay")) 
				{
						epaymentRadioBtnList.get(i).click();
				}
					epaymentRadioBtnListArray.add(data);
			}
					
			
			String actepaymentRadioBtnList=epaymentRadioBtnListArray.toString();
			String expepaymentRadioBtnList="[E-GooglePay, E-PhonePay]";
					
			System.err.println("  Actual    epaymentRadioBtnList : "+actepaymentRadioBtnList);
			System.err.println("  Expected  epaymentRadioBtnList : "+expepaymentRadioBtnList);
					
			Thread.sleep(3000);
			
			String actepaymentAmttxt           = epaymentAmttxt.getAttribute("value");
			
			String expepaymentAmttxt            = "100.00";
			System.out.println("epaymentAmttxt;         : "+actepaymentAmttxt          +" Value Exepcted : "+expepaymentAmttxt);
			
		  
		  if (actepaymentAmttxt.equalsIgnoreCase(expepaymentAmttxt)  )
		  {
			  System.out.println(" Test Pass : Edited Successfully");
			return true;
		  }
		  else 
		  {
			  System.out.println(" Test Fail : Edited Successfully");
			  return false;
		  }
			
	  }
	  
	  @FindBy(xpath="//*[@id='tBodyEPayment']/tr/td")
	  private static List<WebElement> epaymentBodyGridList;
	  
	  @FindBy(xpath="//*[@id='divModalBodySecondRightColumnFirstRow']/div")
	  private static List<WebElement> epaymentBillDetailsRightSidePannelList;
	  
	  
	  
	  public boolean checkPosBillSettlementScreenAfterClickOnPayBtn() throws InterruptedException
	  {
		  
			
			ArrayList<String>epaymentBillDetailsRightSidePannelListArray=new ArrayList<String>();
				
			int epaymentBillDetailsRightSidePannelListCount=billSettlementBillDetailsBodyList.size();
						
			System.out.println(" epaymentBillDetailsRightSidePannelList  :  "+epaymentBillDetailsRightSidePannelListCount);
						
			for (int i = 0; i < epaymentBillDetailsRightSidePannelListCount; i++)
			{
			     String data=billSettlementBillDetailsBodyList.get(i).getText();
				 epaymentBillDetailsRightSidePannelListArray.add(data);
			}
			
			String actepaymentBillDetailsRightSidePannelList=epaymentBillDetailsRightSidePannelListArray.toString();
			String expepaymentBillDetailsRightSidePannelList="[Bill Amount, :, 100.00, Discount, :, 0.00, Scheme, :, 0.00, Round Off, :, 0.00, Paid, :, 0.00, Balance, :, 100.00, Change, :, 0.00]";
						
			System.err.println("  Actual    epaymentBillDetailsRightSidePannelList : "+actepaymentBillDetailsRightSidePannelList);
			System.err.println("  Expected  epaymentBillDetailsRightSidePannelList : "+expepaymentBillDetailsRightSidePannelList);
						
			ArrayList<String>billSettlementBillDetailsFooterPanelListArray=new ArrayList<String>();
			
			int billSettlementBillDetailsFooterPanelListCount=billSettlementBillDetailsFooterPanelList.size();
						
			System.out.println(" billSettlementBillDetailsFooterPanelList  :  "+billSettlementBillDetailsFooterPanelListCount);
						
			for (int i = 0; i < billSettlementBillDetailsFooterPanelListCount; i++)
			{
			     String data=billSettlementBillDetailsFooterPanelList.get(i).getText();
			     billSettlementBillDetailsFooterPanelListArray.add(data);
			}
			
			String actbillSettlementBillDetailsFooterPanelList=billSettlementBillDetailsFooterPanelListArray.toString();
			String expbillSettlementBillDetailsFooterPanelList="[Amount Payable, :, 100.00, Amount Paid, :, 0.00, Balance, :, 100.00]";
						
			System.err.println("  Actual    billSettlementBillDetailsFooterPanelList : "+actbillSettlementBillDetailsFooterPanelList);
			System.err.println("  Expected  billSettlementBillDetailsFooterPanelList : "+expbillSettlementBillDetailsFooterPanelList);
					

		  Thread.sleep(2000);
		  
		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ePaymentPayBtn));
		  ePaymentPayBtn.click();
		
		  
		  ArrayList<String>epaymentRadioBtnListArray=new ArrayList<String>();
			
			int epaymentRadioBtnListCount=epaymentBodyGridList.size();
					
			System.out.println(" epaymentRadioBtnListCount  :  "+epaymentRadioBtnListCount);
					
			for (int i = 0; i < epaymentRadioBtnListCount; i++)
			{
					String data=epaymentBodyGridList.get(i).getText();
					
					epaymentRadioBtnListArray.add(data);
			}
					
			
			String actepaymentBodyGridList=epaymentRadioBtnListArray.toString();
			String expepaymentBodyGridList="[, E-GooglePay, 100.00, , 0.00, 0.00]";
					
			System.err.println("  Actual    epaymentBodyGridList : "+actepaymentBodyGridList);
			System.err.println("  Expected  epaymentBodyGridList : "+expepaymentBodyGridList);
					
			Thread.sleep(2000);
			
		   getWebDriverWait().until(ExpectedConditions.elementToBeClickable(doneBtn));
		   doneBtn.click();
	  
		   Thread.sleep(8000);

			ArrayList<String> openTabs2 = new ArrayList<String>(getDriver().getWindowHandles());
		
	        Thread.sleep(2000);
		 	
		 	getDriver().switchTo().window(openTabs2.get(1));
		 	
			Thread.sleep(3000);
			
		 	getDriver().close();
		
		 	Thread.sleep(3000);
		
		 	getDriver().switchTo().window(openTabs2.get(0));
			 	
		 	if (actepaymentBodyGridList.equalsIgnoreCase(expepaymentBodyGridList) && 
		 			actbillSettlementBillDetailsFooterPanelList.equalsIgnoreCase(expbillSettlementBillDetailsFooterPanelList))
		 	{
		 		System.out.println(" Test Pass: Payment Done Successfully With E-Payment");
				return true;
			}
		 	else 
		 	{
		 		System.out.println(" Test Fail: Payment Done Successfully With E-Payment");
				return false;
			}
	  }
	
	  
	 
	  //Schemes 
	  
	  
	//Schemes 
	  
	  
	  @FindBy(xpath="//input[@id='optSchemeName']")
	  private static WebElement schNameDrpdwn;
	  
	  @FindBy(xpath="//*[@id='divBtnClone']")
	  private static WebElement schCloneBtn;
	  
	  @FindBy(xpath="//*[@id='divBtnDelete']")
	  private static WebElement schDeleteBtn;
	  
	  @FindBy(xpath="//select[@id='ddlSchemeType']")
	  private static WebElement schTypeDrpdwn;
	   
	  @FindBy(xpath="//input[@id='dtpFromDate']")
	  private static WebElement schFromDateTxt;
	   
	  @FindBy(xpath="//input[@id='tpFromTime']")
	  private static WebElement schFromTimeTxt;
	   
	  @FindBy(xpath="//input[@id='dtpToDate']")
	  private static WebElement schToDateTxt;
	   
	  @FindBy(xpath="//input[@id='tpToTime']")
	  private static WebElement schToTimeTxt;
	   
	  @FindBy(xpath="//input[@id='txtOutlets']")
	  private static WebElement schOutletsTxt;
	   
	  @FindBy(xpath="//button[@id='btnGetOutlets']")
	  private static WebElement schLoadOutletbtn;
	  
	  @FindBy(xpath="//*[@id='divOutletTree']/ul/li/a")
	  private static List<WebElement> outletList;
	  
	  @FindBy(xpath="//*[@id='divOutletTree']/ul/li")
	  private static List<WebElement> outletChkBoxList;
	  
	  
		  @FindBy(xpath="//*[@id='3_anchor']/i[1]")
		  private static WebElement outlet2Chkbox;
		   
		  @FindBy(xpath="//*[@id='1_anchor']/i[1]")
		  private static WebElement outlet1Chkbox;
		   
		  @FindBy(xpath="//*[@id='btnOk']/div[1]/span")
		  private static WebElement outletPopOkBtn;
		  
	  @FindBy(xpath="//input[@id='txtbox_ddlWeekdays']")
	  private static WebElement schDaysTxt;
	   
	  @FindBy(xpath="//input[@id='txtbox_ddlSchemeFor']")
	  private static WebElement schSchemeForTxt;
	   
	  @FindBy(xpath="//input[@id='chkApplyToCreatedGroup']")
	  private static WebElement schApplyToCreatedGroupChkbox;
	   
	  @FindBy(xpath="//input[@id='chkCombineWithOtherSchemes']")
	  private static WebElement schCombineWithOtherSchemesChkbox;
	   
	  @FindBy(xpath="//input[@id='chkQuantity']")
	  private static WebElement schMinQtyChkbox;
	   
		  
		  @FindBy(xpath="//input[@id='txtMinQty']")
		  private static WebElement minQtyTxt;
		  
		  @FindBy(xpath="//input[@id='txtMaxQty']")
		  private static WebElement maxQtyTxt;

	  
	  @FindBy(xpath="//input[@id='chkValue']")
	  private static WebElement schMinValueChkbox;
	  
		  @FindBy(xpath="//input[@id='txtMinValue']")
		  private static WebElement minvalueTxt;
		  
		  @FindBy(xpath="//input[@id='txtMaxValue']")
		  private static WebElement maxValueTxt;
	  
	  @FindBy(xpath="//input[@id='chkBatchesExpiring']")
	  private static WebElement schBatchesExpireyChkbox;
	   
	  @FindBy(xpath="//input[@id='txtMinQty']")
	  private static WebElement schMinQtyTxt;
	   
	  @FindBy(xpath="//input[@id='txtMaxQty']")
	  private static WebElement schMaxQtyTxt;
	   
	  @FindBy(xpath="//input[@id='txtMinValue']")
	  private static WebElement schminValueTxt;
	   
	  @FindBy(xpath="//input[@id='txtMinValue']")
	  private static WebElement schMaxValueTxt;
	   
	  @FindBy(xpath="//select[@id='ddlBatchesExp']")
	  private static WebElement schBatchesExpiryDrpDwn;
	   
	  @FindBy(xpath="//input[@id='txtInDays']")
	  private static WebElement schBatchExpInDaysTxt;
	   
	  @FindBy(xpath="//select[@id='ddlDiscountType']")
	  private static WebElement schDiscTypeDrpdwn;
	   
	  @FindBy(xpath="//input[@id='txtDiscountAmt']")
	  private static WebElement schDiscAmtTxt;
	   
	  @FindBy(xpath="//input[@id='txtDiscountPer']")
	  private static WebElement schDiscPerTxt;
	   
	  @FindBy(xpath="//select[@id='ddlDiscountItemTypes']")
	  private static WebElement schDisPerOnItemDrpdwn;
	  
	  @FindBy(xpath="//*[@id='tbodyDVouchers']/tr/td[1]")
	  private static WebElement schdicVouRow1;
	  
	  @FindBy(xpath="//input[@id='optDVouchers']")
	  private static WebElement enterDisvoucher;
	 

	  
	  
	  @FindBy(xpath="//*[@id='theadItemDetails']/tr/th")
	  private static List<WebElement> schBodyGridList;
	   
	  @FindBy(xpath="//*[@id'theadItemDetails']/tr/th")
	  private static WebElement schShowItemChkbox;
	   
	  @FindBy(xpath="//select[@id='ddlTreeTypeOption']")
	  private static WebElement schShowItemDefaultDrpdwn;
	   
	  @FindBy(xpath="//select[@id='ddlSearchByField']")
	  private static WebElement schShowItemByNameDrpdwn;
	   
	  @FindBy(xpath="//select[@id='ddlSearchBy']")
	  private static WebElement schShowItemByItemDrpdwn;
	   
	  @FindBy(xpath="//div[@id='divBtnAdd']")
	  private static WebElement schAddBtn;
	   
	  
	 @FindBy(xpath="//*[@id='tbodyDiscountVouchers']/tr/td")
	 private static List<WebElement> schbodyGidList;
	 
	 @FindBy(xpath="//*[@id='tbodyDiscountVouchers']/tr/td[9]")
	 private static List<WebElement> schbodyGidDisTypeList;
	 
	 
	 /*@FindBy(xpath="//*[@id='divProductTree']/ul/li")
	 private static List<WebElement> selectItemList;
	 
	 

	 @FindBy(xpath="//*[@id='divMessageModalFooter']/div/div/div[1]/div[1]")
	 private static WebElement yesBtn;*/
	  


	  @FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_default']/div[1]/section[1]/div[1]/div[5]/div[2]/div[3]")
	  private static WebElement schSaveBtn;
	   

	   
	  @FindBy(xpath="//*[@id='divBtnClear']/div[1]/span")
	  private static WebElement schClearBtn;
	   
	  @FindBy(xpath="//*[@id='divSchemesHeader']/div[2]/div[7]/div[1]")
	  private static WebElement schCloseBtn;
	   
	  /*@FindBy(xpath="//a[@id='8002']")
	  private static WebElement homeMasterSchMenu;
	   
	  @FindBy(xpath="//*[@id='8012']")
	  private static WebElement schSchemeMenu;
	   
	  @FindBy(xpath="//a[@id='8013']")
	  private static WebElement schFreeItemMenu;
	   
	  @FindBy(xpath="//a[@id='8015']")
	  private static WebElement schDiscountMenu;
	   
	  @FindBy(xpath="//a[@id='8039']")
	  private static WebElement schSchMappingToCutomersMenu;*/
	   
	  
	  
	  public boolean checkSchemeMenuInMasters() throws EncryptedDocumentException, InvalidFormatException, IOException
	  {
		  
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				System.out.println("******************checkSchemeMenuInMasters Method Executed***************************************");
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
				homeMenu.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
				mastersMenu.click();
				
	           Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterSchMenu));
				homeMasterSchMenu.click();
				
				Thread.sleep(2000);
				
				boolean actschSchemeMenu                   = schSchemeMenu.isDisplayed();
				boolean actschFreeItemMenu                 = schFreeItemMenu.isDisplayed();
				boolean actschDiscountMenu                 = schDiscountMenu.isDisplayed();
				boolean actschSchMappingToCutomersMenu     = schSchMappingToCutomersMenu.isDisplayed();
				
				
				boolean expschSchemeMenu                   = true;
				boolean expschFreeItemMenu                 = true;
				boolean expschDiscountMenu                 = true;
				boolean expschSchMappingToCutomersMenu     = true;
				
				
				System.out.println("schSchemeMenu           : "+actschSchemeMenu              +" Value Expected : "+expschSchemeMenu);
				System.out.println("schFreeItemMenu         : "+actschFreeItemMenu            +" Value Expected : "+expschFreeItemMenu);
				System.out.println("schDiscountMenu         : "+actschDiscountMenu            +" Value Expected : "+expschDiscountMenu);
				System.out.println("schSchMappingToCutomers : "+actschSchMappingToCutomersMenu+" Value Expected : "+expschSchMappingToCutomersMenu);
				
				if(actschSchemeMenu==expschSchemeMenu&& actschFreeItemMenu==expschFreeItemMenu
						&& actschDiscountMenu==expschDiscountMenu && actschSchMappingToCutomersMenu==expschSchMappingToCutomersMenu)
				{
					System.out.println(" Test Pass : Displayed Menus Under Scheme In Masters ");
					return true;
				}
				else
				{
					System.out.println(" Test Fail:  Displayed Menus Under Scheme In Masters ");
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
	  }
	  
	  
	  public boolean checkSchemeHomePageOptions() throws InterruptedException
	  {
		    Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(schSchemeMenu));	
			schSchemeMenu.click();
			     
			Thread.sleep(6000);
			
			boolean actschNameDrpdwn    	 		   =schNameDrpdwn.isDisplayed();
			boolean actschTypeDrpdwn    	           =schTypeDrpdwn.isDisplayed();
			boolean actschFromDateTxt 			       =schFromDateTxt.isDisplayed();
			boolean actschFromTimeTxt 			       =schFromTimeTxt.isDisplayed();
			boolean actschToDateTxt 		           =schToDateTxt.isDisplayed();
			boolean actschToTimeTxt 			       =schToTimeTxt.isDisplayed();
			boolean actschOutletsTxt 		 	       =schOutletsTxt.isDisplayed();
			boolean actschLoadOutletbtn                =schLoadOutletbtn.isDisplayed();
			boolean actschDaysTxt    	 			   =schDaysTxt.isDisplayed();
			boolean actschSchemeForTxt    	 		   =schSchemeForTxt.isDisplayed();
			boolean actschApplyToCreatedGroupChkbox    =schApplyToCreatedGroupChkbox.isDisplayed();
			boolean actschCombineWithOtherSchemesChkbox =schCombineWithOtherSchemesChkbox.isDisplayed();
			boolean actschMinQtyChkbox    	 			=schMinQtyChkbox.isDisplayed();
			boolean actschMaxQtyTxt    	 				=schMaxQtyTxt.isDisplayed();
			boolean actschBatchesExpiryDrpDwn    	 	=schBatchesExpiryDrpDwn.isDisplayed();
			boolean actschBatchExpInDaysTxt    	 		=schBatchExpInDaysTxt.isDisplayed();
			boolean actschDiscTypeDrpdwn    	 		=schDiscTypeDrpdwn.isDisplayed();
			
			boolean expschNameDrpdwn    	 			=true;
			boolean expschTypeDrpdwn    				=true;
			boolean expschFromDateTxt 					=true;
			boolean expschFromTimeTxt 					=true;
			boolean expschToDateTxt 					=true;
			boolean expschToTimeTxt 					=true;
			boolean expschOutletsTxt 					=true;
			boolean expschLoadOutletbtn 				=true;
			boolean expschDaysTxt    	 				=true;
			boolean expschSchemeForTxt    	 			=true;
			boolean expschApplyToCreatedGroupChkbox   	=true;
			boolean expschCombineWithOtherSchemesChkbox =true;
			boolean expschMinQtyChkbox    	 			=true;
			boolean expschMaxQtyTxt    	 				=true;
			boolean expschBatchesExpiryDrpDwn    	 	=true;
			boolean expschBatchExpInDaysTxt    	 		=true;
			boolean expschDiscTypeDrpdwn    	        =true;
			boolean expschDiscAmtTxt    	 			=true;
			boolean expschShowItemChkbox    	 		=true;
			
			System.out.println("schNameDrpdwn             : "+actschNameDrpdwn           +" Value Expected : "+expschNameDrpdwn);
			System.out.println("schTypeDrpdwn             : "+actschTypeDrpdwn           +" Value Expected : "+expschTypeDrpdwn);
			System.out.println("schFromDateTxt            : "+actschFromDateTxt          +" Value Expected : "+expschFromDateTxt);
			System.out.println("schFromTimeTxt            : "+actschFromTimeTxt          +" Value Expected : "+expschFromTimeTxt);
			System.out.println("schToDateTxt              : "+actschToDateTxt            +" Value Expected : "+expschToDateTxt);
			System.out.println("schToTimeTxt              : "+actschToTimeTxt            +" Value Expected : "+expschToTimeTxt);
			System.out.println("schOutletsTxt             : "+actschOutletsTxt           +" Value Expected : "+expschOutletsTxt);
			System.out.println("schLoadOutletbtn          : "+actschLoadOutletbtn        +" Value Expected : "+expschLoadOutletbtn);
			System.out.println("schDaysTxt                : "+actschDaysTxt              +" Value Expected : "+expschDaysTxt);
			System.out.println("schSchemeForTxt           : "+actschSchemeForTxt         +" Value Expected : "+expschSchemeForTxt);
			System.out.println("schApplyToCreatedGroupCh  : "+actschApplyToCreatedGroupChkbox+" Value Expected : "+expschApplyToCreatedGroupChkbox);
			System.out.println("schCombineWithOtherSchemes: "+actschCombineWithOtherSchemesChkbox+" Value Expected : "+expschCombineWithOtherSchemesChkbox);
			System.out.println("schMinQtyChkbox           : "+actschMinQtyChkbox          +" Value Expected : "+expschMinQtyChkbox);
			System.out.println("schMaxQtyTxt              : "+actschMaxQtyTxt             +" Value Expected : "+expschMaxQtyTxt);
			System.out.println("schBatchesExpiryDrpDwn    : "+actschBatchesExpiryDrpDwn   +" Value Expected : "+expschBatchesExpiryDrpDwn);
			System.out.println("schBatchExpInDaysTxt      : "+actschBatchExpInDaysTxt     +" Value Expected : "+expschBatchExpInDaysTxt);
			System.out.println("schDiscTypeDrpdwn         : "+actschDiscTypeDrpdwn        +" Value Expected : "+expschDiscTypeDrpdwn);
			
			
			if(actschNameDrpdwn==expschNameDrpdwn && actschTypeDrpdwn==expschTypeDrpdwn&& actschFromDateTxt==expschFromDateTxt
					&& actschFromTimeTxt==expschFromTimeTxt&& actschToDateTxt==expschToDateTxt && actschToTimeTxt==expschToTimeTxt
					&& actschOutletsTxt==expschOutletsTxt && actschLoadOutletbtn==expschLoadOutletbtn
					
					&& actschDaysTxt==expschDaysTxt && actschSchemeForTxt==expschSchemeForTxt 
					&& actschApplyToCreatedGroupChkbox==expschApplyToCreatedGroupChkbox
					&& actschCombineWithOtherSchemesChkbox==expschCombineWithOtherSchemesChkbox 
					&& actschMinQtyChkbox==expschMinQtyChkbox
					&& actschMaxQtyTxt==expschMaxQtyTxt && actschBatchesExpiryDrpDwn==expschBatchesExpiryDrpDwn&& actschBatchExpInDaysTxt==expschBatchExpInDaysTxt
					&& actschDiscTypeDrpdwn==expschDiscTypeDrpdwn )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		

		  public boolean checkAddingSchemeInSchcmeScreenInPOSWithschemeWithOnBillDiscAmt() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  Thread.sleep(2000);
			  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schNameDrpdwn));
			  schNameDrpdwn.click();
			  
			  schNameDrpdwn.sendKeys("schemeWithOnBill");
			  Thread.sleep(2000);
			  
			  schNameDrpdwn.sendKeys(Keys.TAB);
			  
			  Select schTypeDrpdwnOption=new Select(schTypeDrpdwn);
			  schTypeDrpdwnOption.selectByVisibleText("On Bill");
			  
			  Thread.sleep(2000);
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schFromDateTxt));
			  schFromDateTxt.click();
			  schFromDateTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			  
			 Thread.sleep(2000);
				
			 DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			 Date date=new Date();
				
			 String docdate = df.format(date);  
			 Calendar c = Calendar.getInstance();
			 c.add(Calendar.DAY_OF_MONTH, 5);  
			
			 String FilterDate = df.format(c.getTime());  
			
			 System.out.println("df.format(date)  : "+df.format(date));
			 System.out.println("FilterDate  : "+FilterDate);
			  
			 schFromDateTxt.sendKeys(df.format(date));
			 schFromDateTxt.sendKeys(Keys.TAB);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schToDateTxt));
			 schToDateTxt.click();
			 schToDateTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 schToDateTxt.sendKeys(FilterDate);
			 Thread.sleep(2000);
			 
			 schToDateTxt.sendKeys(Keys.TAB);
			
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schLoadOutletbtn)); 
			  schLoadOutletbtn.click();
			  
			  Thread.sleep(2000);
			  int outletlistCount2=outletList.size();
			  	 
			  
			  for(int i=0;i<outletlistCount2;i++)
			  {
				  String data = outletList.get(i).getText();
					
				  if(data.equalsIgnoreCase("Outlet1") && /*outletChkBoxList.get(i).isSelected()==false*/ outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
					  
				  {
					  outletList.get(i).click();
					  break;
				  }
			  }
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletPopOkBtn));
			  outletPopOkBtn.click();
			 
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schCombineWithOtherSchemesChkbox));
			 schCombineWithOtherSchemesChkbox.click();
			 
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinValueChkbox));
			 schMinValueChkbox.click();
			 
			 minvalueTxt.click();
			 minvalueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 minvalueTxt.sendKeys("100");
			 minvalueTxt.sendKeys(Keys.TAB);
			 
			 maxValueTxt.click();
			 maxValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxValueTxt.sendKeys("200");
			 maxValueTxt.sendKeys(Keys.TAB);
			 
			 Thread.sleep(2000);
			 
			 Select schDiscTypeDrpdwnOption=new Select(schDiscTypeDrpdwn);
			 schDiscTypeDrpdwnOption.selectByVisibleText("Discount Amt");
			  
			 schDiscTypeDrpdwn.sendKeys(Keys.TAB);
			  
	         Thread.sleep(2000);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscAmtTxt));
			 schDiscAmtTxt.click();
			 schDiscAmtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 schDiscAmtTxt.sendKeys("100");
			
			 
			ArrayList<String>selectItemListArray=new ArrayList<String>();
				
			int selectItemListCount=selectItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=selectItemList.get(i).getText();
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js = (JavascriptExecutor) getDriver();
					
					js.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					selectItemList.get(i).click();
				}
			}
			
			
			 
			 Thread.sleep(2000);
			 
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schAddBtn));
			 schAddBtn.click();
			
			 
			 ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
						schbodyGidListArray.add(data);
					
				}
				
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , , AllItems]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			 
			/*
			JavascriptExecutor js = (JavascriptExecutor) getDriver();
	 	    js.executeScript("arguments[0].scrollIntoView();", schSaveBtn);
	        
			
	 	   Thread.sleep(2000);
	 	   
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schSaveBtn));
			schSaveBtn.click();
			
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expValidationMessage = "Details saved successfully.";
			String actValidationMessage = checkValidationMessage(expValidationMessage);*/
			
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList))
			{
				System.out.println(" Test Pass: scheme Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail: scheme Is Saved Successfully");
				return false;
			}
		  }

	  

		  public boolean checkAddingSchemeWithOnBillDiscPercentage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schLoadOutletbtn)); 
			  schLoadOutletbtn.click();
			  
			  Thread.sleep(2000);
			  int outletlistCount2=outletList.size();
			  	 
			  System.err.println(" Count : "+outletlistCount2);
			  
			  for(int i=0;i<outletlistCount2;i++)
			  {
				  String data = outletList.get(i).getText();
				  
				  System.err.println("Data : "+data+" index :"+i);
				  System.err.println("Chk Box : "+outletChkBoxList.get(i).getAttribute("aria-selected")+" index :"+i);
					
				  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				  {
					  outletList.get(i).click();
					  break;
				  }
			  }
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletPopOkBtn));
			  outletPopOkBtn.click();
			  
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schCombineWithOtherSchemesChkbox));
			 schCombineWithOtherSchemesChkbox.click();
				 
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinQtyChkbox));
			 schMinQtyChkbox.click();
			 
			 minQtyTxt.click();
			 minQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 minQtyTxt.sendKeys("10");
			 minQtyTxt.sendKeys(Keys.TAB);
			 
			 maxQtyTxt.click();
			 maxQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxQtyTxt.sendKeys("15");
			 maxQtyTxt.sendKeys(Keys.TAB);
			 
			 Thread.sleep(2000);
			 
			
			 Select schDiscTypeDrpdwnOption=new Select(schDiscTypeDrpdwn);
			 schDiscTypeDrpdwnOption.selectByVisibleText("Discount %");
			  
			 schDiscTypeDrpdwn.sendKeys(Keys.TAB);
			  
			 
	          Thread.sleep(2000);
			 
			
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscPerTxt));
			 schDiscPerTxt.click();
			 schDiscPerTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 schDiscPerTxt.sendKeys("10");
			 
			 Thread.sleep(2000);
			 schDiscPerTxt.sendKeys(Keys.TAB);

			 Select schDisPerOnItemDrpdwnOption=new Select(schDisPerOnItemDrpdwn);
			 schDisPerOnItemDrpdwnOption.selectByVisibleText("AnyOne");
			  
			 schDisPerOnItemDrpdwn.sendKeys(Keys.TAB);
			 
			 
			ArrayList<String>selectItemListArray=new ArrayList<String>();
				
			int selectItemListCount=selectItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=selectItemList.get(i).getText();
				
				System.out.println("Data : "+data);
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js = (JavascriptExecutor) getDriver();
					
					js.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					selectItemList.get(i).click();
				}
			}
			
			
			Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schAddBtn));
			 schAddBtn.click();
			 

			 ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
					
						schbodyGidListArray.add(data);
					
				}
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , , AllItems, , Combine, Quantity Based, 10.00, 15.00, 0.00, 0.00, 20, Discount %, 10.00, AnyOne, , , AllItems]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			
			
			
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
		  }

	@FindBy(xpath="//input[@id='optItem']")
	private static WebElement enterFreeItem;

	@FindBy(xpath="//body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[7]/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div[9]/div[2]/div[2]/table[1]/tbody[1]/tr[1]/td[1]")
	private static WebElement freeitemGridRow1;

	@FindBy(xpath="//input[@id='txtFixedRate']")
	private static WebElement schfixedRateTxt;

	@FindBy(xpath="//select[@id='ddlFixedRateOnItem']")
	private static WebElement schFixedRateDrpdwn;

		  
		  public boolean checkAddingSchemeWithCombinationOfValueAndQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schLoadOutletbtn)); 
			  schLoadOutletbtn.click();
			  
			  Thread.sleep(2000);
			  int outletlistCount2=outletList.size();
			  	 
			  
			  for(int i=0;i<outletlistCount2;i++)
			  {
				  String data = outletList.get(i).getText();
					
				  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				  {
					  outletList.get(i).click();
					  break;
				  }
			  }
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_OutletOkBtn));
			  fi_OutletOkBtn.click();
			  
			 Thread.sleep(2000);
			  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscTypeDrpdwn));
			  schDiscTypeDrpdwn.click();
			  
			  JavascriptExecutor js = (JavascriptExecutor) getDriver();
		 	  js.executeScript("arguments[0].scrollIntoView();", schCombineWithOtherSchemesChkbox);
		         
			
			 schCombineWithOtherSchemesChkbox.click();
			  
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinValueChkbox));
			 schMinValueChkbox.click();
			 
			 minvalueTxt.click();
			 minvalueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 minvalueTxt.sendKeys("1");
			 minvalueTxt.sendKeys(Keys.TAB);
			 
			 maxValueTxt.click();
			 maxValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxValueTxt.sendKeys("2");
			 maxValueTxt.sendKeys(Keys.TAB);
			  
			  
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinQtyChkbox));
			 schMinQtyChkbox.click();
			 
			 minQtyTxt.click();
			 minQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		
			 minQtyTxt.sendKeys("2");
			 minQtyTxt.sendKeys(Keys.TAB);
			 
			 maxQtyTxt.click();
			 maxQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxQtyTxt.sendKeys("5");
			 maxQtyTxt.sendKeys(Keys.TAB);
			 
			 Thread.sleep(2000);
			 
			
			 Select schDiscTypeDrpdwnOption=new Select(schDiscTypeDrpdwn);
			 schDiscTypeDrpdwnOption.selectByVisibleText("Free");
			  
			 schDiscTypeDrpdwn.sendKeys(Keys.TAB);
			  
		 
	         Thread.sleep(2000);
		 
	         JavascriptExecutor js2 = (JavascriptExecutor) getDriver();
	 	     js2.executeScript("arguments[0].scrollIntoView();", freeitemGridRow1);
		         
			
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeitemGridRow1));
			 freeitemGridRow1.click();
			 
			 enterFreeItem.sendKeys("Stock Item");
			 
			 enterFreeItem.sendKeys(Keys.TAB);
			 
			
			 
			ArrayList<String>selectItemListArray=new ArrayList<String>();
				
			int selectItemListCount=selectItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=selectItemList.get(i).getText();
				
				System.out.println("Data : "+data);
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
					
					js1.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					selectItemList.get(i).click();
				}
			}
			
	          Thread.sleep(2000);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schAddBtn));
			 schAddBtn.click();
			
			 ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
					
						schbodyGidListArray.add(data);
					
				}
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , , AllItems, , Combine, Quantity Based, 10.00, 15.00, 0.00, 0.00, 20, Discount %, 10.00, AnyOne, , , AllItems, , Combine, Both, 2.00, 5.00, 1.00, 2.00, 20, Free, 0.00, , 2@4(1), All Items, AllItems]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			 
			
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
		  }


		  public boolean checkAddingSchemeWithFixedRate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schLoadOutletbtn)); 
			  schLoadOutletbtn.click();
			  
			  Thread.sleep(2000);
			  int outletlistCount2=outletList.size();
			  	 
			  
			  for(int i=0;i<outletlistCount2;i++)
			  {
				  String data = outletList.get(i).getText();
					
				  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				  {
					  outletList.get(i).click();
					  break;
				  }
			  }
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_OutletOkBtn));
			  fi_OutletOkBtn.click();
			  
			 Thread.sleep(2000);
			  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscTypeDrpdwn));
			  schDiscTypeDrpdwn.click();
			  
			  JavascriptExecutor js = (JavascriptExecutor) getDriver();
		 	  js.executeScript("arguments[0].scrollIntoView();", schCombineWithOtherSchemesChkbox);
		         
			
			 schCombineWithOtherSchemesChkbox.click();
			  
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinQtyChkbox));
			 schMinQtyChkbox.click();
			 
			 minQtyTxt.click();
			 minQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		
			 minQtyTxt.sendKeys("11");
			 minQtyTxt.sendKeys(Keys.TAB);
			 
			 maxQtyTxt.click();
			 maxQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxQtyTxt.sendKeys("15");
			 maxQtyTxt.sendKeys(Keys.TAB);
			 
			 Thread.sleep(2000);
			 
			
			 Select schDiscTypeDrpdwnOption=new Select(schDiscTypeDrpdwn);
			 schDiscTypeDrpdwnOption.selectByVisibleText("Fixed Rate");
			  
			 schDiscTypeDrpdwn.sendKeys(Keys.TAB);
			  
			
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schfixedRateTxt));
			 schfixedRateTxt.click();
			 schfixedRateTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 schfixedRateTxt.sendKeys("10");
			 
			 schfixedRateTxt.sendKeys(Keys.TAB);
			 
			 schFixedRateDrpdwn.sendKeys("i");
			 
			 schFixedRateDrpdwn.sendKeys(Keys.TAB);
			 
			ArrayList<String>selectItemListArray=new ArrayList<String>();
				
			int selectItemListCount=selectItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=selectItemList.get(i).getText();
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
					
					js1.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					selectItemList.get(i).click();
				}
			}
			
	          Thread.sleep(2000);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schAddBtn));
			 schAddBtn.click();
			
			 ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
					
						schbodyGidListArray.add(data);
					
				}
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , , AllItems, , Combine, Quantity Based, 10.00, 15.00, 0.00, 0.00, 20, Discount %, 10.00, AnyOne, , , AllItems, , Combine, Both, 2.00, 5.00, 1.00, 2.00, 20, Free, 0.00, , 2@4(1), All Items, AllItems, , Combine, Quantity Based, 11.00, 15.00, 0.00, 0.00, 20, Fixed Rate, 10.00, Individually, , , AllItems]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			 
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
		  }
		
		  

		  public boolean checkAddingSchemeWithDiscountVouchersAndClickOnSave() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schLoadOutletbtn)); 
			  schLoadOutletbtn.click();
			  
			  Thread.sleep(2000);
			  int outletlistCount2=outletList.size();
			  	 
			  
			  for(int i=0;i<outletlistCount2;i++)
			  {
				  String data = outletList.get(i).getText();
					
				  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				  {
					  outletList.get(i).click();
					  break;
				  }
			  }
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletPopOkBtn));
			  outletPopOkBtn.click();
			  
			 Thread.sleep(2000);
			 
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscTypeDrpdwn));
			  schDiscTypeDrpdwn.click();
			  
			  JavascriptExecutor js = (JavascriptExecutor) getDriver();
		 	  js.executeScript("arguments[0].scrollIntoView();", schCombineWithOtherSchemesChkbox);
		         
			
			 schCombineWithOtherSchemesChkbox.click();
			  
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinValueChkbox));
			 schMinValueChkbox.click();
			 
			 minvalueTxt.click();
			 minvalueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		
			 minvalueTxt.sendKeys("1500");
			 minvalueTxt.sendKeys(Keys.TAB);
			 
			 maxValueTxt.click();
			 maxValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxValueTxt.sendKeys("2000");
			 maxValueTxt.sendKeys(Keys.TAB);
			 
			 Thread.sleep(2000);
			 
			
			 Select schDiscTypeDrpdwnOption=new Select(schDiscTypeDrpdwn);
			 schDiscTypeDrpdwnOption.selectByVisibleText("Discount Vouchers");
			  
			 schDiscTypeDrpdwn.sendKeys(Keys.TAB);
			  
			
			JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		 	js1.executeScript("arguments[0].scrollIntoView();", schdicVouRow1);
		         
			 
			schdicVouRow1.click();
			 
			 enterDisvoucher.click();
			 
			 enterDisvoucher.sendKeys("d");
			 
			 enterDisvoucher.sendKeys(Keys.TAB);
			 
			ArrayList<String>selectItemListArray=new ArrayList<String>();
				
			int selectItemListCount=selectItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=selectItemList.get(i).getText();
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
					
					js4.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					selectItemList.get(i).click();
				}
			}
			
	          Thread.sleep(2000);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schAddBtn));
			 schAddBtn.click();
			
			 ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
					
						schbodyGidListArray.add(data);
					
				}
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , , AllItems, , Combine, Quantity Based, 10.00, 15.00, 0.00, 0.00, 20, Discount %, 10.00, AnyOne, , , AllItems, , Combine, Both, 2.00, 5.00, 1.00, 2.00, 20, Free, 0.00, , 2@4(1), All Items, AllItems, , Combine, Quantity Based, 11.00, 15.00, 0.00, 0.00, 20, Fixed Rate, 10.00, Individually, , , AllItems, , Combine, Value Based, 0.00, 0.00, 1500.00, 2000.00, 20, Discount Vouchers, 0.00, 3(1), , , AllItems]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			
			/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schLoadOutletbtn)); 
			  schLoadOutletbtn.click();
			  
			  Thread.sleep(2000);
			  int outletlistCount3=outletList.size();
			  	 
			  
			  for(int i=0;i<outletlistCount3;i++)
			  {
				  String data = outletList.get(i).getText();
					
				  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				  {
					  outletList.get(i).click();
					  break;
				  }
			  }
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletPopOkBtn));
			  outletPopOkBtn.click();*/
			  
			 Thread.sleep(2000);
			 
			
			JavascriptExecutor js2 = (JavascriptExecutor) getDriver();
	 	    js2.executeScript("arguments[0].scrollIntoView();", schSaveBtn);
	        
			
	 	   Thread.sleep(2000);
	 	   
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schSaveBtn));
			schSaveBtn.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expValidationMessage = "Details saved successfully.";
			String actValidationMessage = checkValidationMessage(expValidationMessage);
			
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList) && 
					actValidationMessage.equalsIgnoreCase(expValidationMessage))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
		  }
		
		  
		  	  

		  public boolean checkAddingSchemeInSchcmeScreenInPOSWithschemeWithOnItemDiscAmt() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {

			  Thread.sleep(2000);
			  
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			  
			 LoginPage lp=new LoginPage(getDriver()); 
				
			String unamelt="useralloptions";
					      
			String pawslt="12345";
					      
			lp.enterUserName(unamelt);
					
			lp.enterPassword(pawslt);
					  
			lpOutLetTxt.sendKeys("outlet1");
			Thread.sleep(2000);
			lpOutLetTxt.sendKeys(Keys.TAB);
				
			lpCounterTxt.sendKeys("Counter Update");
			Thread.sleep(2000);
			lpCounterTxt.sendKeys(Keys.TAB);
			
			lp.clickOnSignInBtn();
			  
			  
			Thread.sleep(8000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
				
	         Thread.sleep(2000);
	         
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterSchMenu));
			homeMasterSchMenu.click();
			  
			  
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(schSchemeMenu));	
			schSchemeMenu.click();
		  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schNameDrpdwn));
			  schNameDrpdwn.click();
			  schNameDrpdwn.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			  Thread.sleep(2000);
			  schNameDrpdwn.sendKeys("schemeWithOnItem");
			  Thread.sleep(2000);
			  
			  schNameDrpdwn.sendKeys(Keys.TAB);
			  
			  Select schTypeDrpdwnOption=new Select(schTypeDrpdwn);
			  schTypeDrpdwnOption.selectByVisibleText("On Item");
			  
			  Thread.sleep(2000);
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schFromDateTxt));
			  schFromDateTxt.click();
			  schFromDateTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			  
			 Thread.sleep(2000);
				
			 DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			 Date date=new Date();
				
			 String docdate = df.format(date);  
			 Calendar c = Calendar.getInstance();
			 c.add(Calendar.DAY_OF_MONTH, 5);  
			
			 String FilterDate = df.format(c.getTime());  
			
			 System.out.println("df.format(date)  : "+df.format(date));
			 System.out.println("FilterDate  : "+FilterDate);
			  
			 schFromDateTxt.sendKeys(df.format(date));
			 schFromDateTxt.sendKeys(Keys.TAB);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schToDateTxt));
			 schToDateTxt.click();
			 schToDateTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 schToDateTxt.sendKeys(FilterDate);
			 Thread.sleep(2000);
			 
			 schToDateTxt.sendKeys(Keys.TAB);
			
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schLoadOutletbtn)); 
			 schLoadOutletbtn.click();
			 
			 int outletlistCount=outletList.size();
					 
			 for (int i = 0; i < outletlistCount; i++)
			 {
				String data=outletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1")) 
				
				{
					outletList.get(i).click();
				}
			 }
			 
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletPopOkBtn));
			 outletPopOkBtn.click();
			 
			 Thread.sleep(2000);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscTypeDrpdwn));
			 schDiscTypeDrpdwn.click();
			  
			  JavascriptExecutor js = (JavascriptExecutor) getDriver();
		 	  js.executeScript("arguments[0].scrollIntoView();", schCombineWithOtherSchemesChkbox);
		         
		 	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schCombineWithOtherSchemesChkbox));
			 schCombineWithOtherSchemesChkbox.click();
			 
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinValueChkbox));
			 schMinValueChkbox.click();
			 
			 minvalueTxt.click();
			 minvalueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 minvalueTxt.sendKeys("100");
			 minvalueTxt.sendKeys(Keys.TAB);
			 
			 maxValueTxt.click();
			 maxValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxValueTxt.sendKeys("200");
			 maxValueTxt.sendKeys(Keys.TAB);
			 
			 Thread.sleep(2000);
			 
			 Select schDiscTypeDrpdwnOption=new Select(schDiscTypeDrpdwn);
			 schDiscTypeDrpdwnOption.selectByVisibleText("Discount Amt");
			  
			 schDiscTypeDrpdwn.sendKeys(Keys.TAB);
			  
	         Thread.sleep(2000);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscAmtTxt));
			 schDiscAmtTxt.click();
			 schDiscAmtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 schDiscAmtTxt.sendKeys("100");
			
			 
			ArrayList<String>selectItemListArray=new ArrayList<String>();
				
			int selectItemListCount=selectItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=selectItemList.get(i).getText();
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
					
					js1.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					selectItemList.get(i).click();
				}
			}
			
			
			 
			 Thread.sleep(2000);
			 
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schAddBtn));
			 schAddBtn.click();
			
			 
			 ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
						schbodyGidListArray.add(data);
					
				}
				
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , ]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			
			
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList))
			{
				System.out.println(" Test Pass: scheme Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail: scheme Is Saved Successfully");
				return false;
			}
		  }

	  

		  public boolean checkAddingSchemeWithOnItemDiscPercentage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  
			 Thread.sleep(2000);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscTypeDrpdwn));
			 schDiscTypeDrpdwn.click();
			  
			  JavascriptExecutor js = (JavascriptExecutor) getDriver();
		 	  js.executeScript("arguments[0].scrollIntoView();", schCombineWithOtherSchemesChkbox);
		         
		 	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schCombineWithOtherSchemesChkbox));
			 schCombineWithOtherSchemesChkbox.click();
			 
			 
				 
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinQtyChkbox));
			 schMinQtyChkbox.click();
			 
			 minQtyTxt.click();
			 minQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 minQtyTxt.sendKeys("10");
			 minQtyTxt.sendKeys(Keys.TAB);
			 
			 maxQtyTxt.click();
			 maxQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxQtyTxt.sendKeys("15");
			 maxQtyTxt.sendKeys(Keys.TAB);
			 
			 Thread.sleep(2000);
			 
			
			 Select schDiscTypeDrpdwnOption=new Select(schDiscTypeDrpdwn);
			 schDiscTypeDrpdwnOption.selectByVisibleText("Discount %");
			  
			 schDiscTypeDrpdwn.sendKeys(Keys.TAB);
			  
			 
	          Thread.sleep(2000);
			 
			
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscPerTxt));
			 schDiscPerTxt.click();
			 schDiscPerTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 schDiscPerTxt.sendKeys("10");
			 
			 Thread.sleep(2000);
			 schDiscPerTxt.sendKeys(Keys.TAB);

			 Select schDisPerOnItemDrpdwnOption=new Select(schDisPerOnItemDrpdwn);
			 schDisPerOnItemDrpdwnOption.selectByVisibleText("AnyOne");
			  
			 schDisPerOnItemDrpdwn.sendKeys(Keys.TAB);
			 
			 
			ArrayList<String>selectItemListArray=new ArrayList<String>();
				
			int selectItemListCount=selectItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=selectItemList.get(i).getText();
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
					
					js1.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					selectItemList.get(i).click();
				}
			}
			
			
			Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schAddBtn));
			 schAddBtn.click();
			 

			 ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
					
						schbodyGidListArray.add(data);
					
				}
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , , , Combine, Quantity Based, 10.00, 15.00, 0.00, 0.00, 20, Discount %, 10.00, AnyOne, , ]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			
			
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
		  }

		  
		  public boolean checkAddingSchemeWithCombinationOfValueAndQtyOnItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscTypeDrpdwn));
			  schDiscTypeDrpdwn.click();
			  
			  JavascriptExecutor js = (JavascriptExecutor) getDriver();
		 	  js.executeScript("arguments[0].scrollIntoView();", schCombineWithOtherSchemesChkbox);
		         
			
			 schCombineWithOtherSchemesChkbox.click();
			  
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinValueChkbox));
			 schMinValueChkbox.click();
			 
			 minvalueTxt.click();
			 minvalueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 minvalueTxt.sendKeys("1");
			 minvalueTxt.sendKeys(Keys.TAB);
			 
			 maxValueTxt.click();
			 maxValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxValueTxt.sendKeys("2");
			 maxValueTxt.sendKeys(Keys.TAB);
			  
			  
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinQtyChkbox));
			 schMinQtyChkbox.click();
			 
			 minQtyTxt.click();
			 minQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		
			 minQtyTxt.sendKeys("2");
			 minQtyTxt.sendKeys(Keys.TAB);
			 
			 maxQtyTxt.click();
			 maxQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxQtyTxt.sendKeys("5");
			 maxQtyTxt.sendKeys(Keys.TAB);
			 
			 Thread.sleep(2000);
			 
			
			 Select schDiscTypeDrpdwnOption=new Select(schDiscTypeDrpdwn);
			 schDiscTypeDrpdwnOption.selectByVisibleText("Free");
			  
			 schDiscTypeDrpdwn.sendKeys(Keys.TAB);
			  
		 
	         Thread.sleep(2000);
		 
	         JavascriptExecutor js2 = (JavascriptExecutor) getDriver();
	 	     js2.executeScript("arguments[0].scrollIntoView();", freeitemGridRow1);
		         
			
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeitemGridRow1));
			 freeitemGridRow1.click();
			 
			 enterFreeItem.sendKeys("Stock Item");
			 
			 enterFreeItem.sendKeys(Keys.TAB);
			 
			
			 
			ArrayList<String>selectItemListArray=new ArrayList<String>();
				
			int selectItemListCount=selectItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=selectItemList.get(i).getText();
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
					
					js1.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					selectItemList.get(i).click();
				}
			}
			
	          Thread.sleep(2000);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schAddBtn));
			 schAddBtn.click();
			
			 ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
					
						schbodyGidListArray.add(data);
					
				}
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , , , Combine, Quantity Based, 10.00, 15.00, 0.00, 0.00, 20, Discount %, 10.00, AnyOne, , , , Combine, Both, 2.00, 5.00, 1.00, 2.00, 20, Free, 0.00, , 2@4(1), All Items]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			 
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
		  }


		  public boolean checkAddingSchemeWithFixedRateONItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscTypeDrpdwn));
			  schDiscTypeDrpdwn.click();
			  
			  JavascriptExecutor js = (JavascriptExecutor) getDriver();
		 	  js.executeScript("arguments[0].scrollIntoView();", schCombineWithOtherSchemesChkbox);
		         
			
			 schCombineWithOtherSchemesChkbox.click();
			  
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinQtyChkbox));
			 schMinQtyChkbox.click();
			 
			 minQtyTxt.click();
			 minQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		
			 minQtyTxt.sendKeys("11");
			 minQtyTxt.sendKeys(Keys.TAB);
			 
			 maxQtyTxt.click();
			 maxQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxQtyTxt.sendKeys("15");
			 maxQtyTxt.sendKeys(Keys.TAB);
			 
			 Thread.sleep(2000);
			 
			
			 Select schDiscTypeDrpdwnOption=new Select(schDiscTypeDrpdwn);
			 schDiscTypeDrpdwnOption.selectByVisibleText("Fixed Rate");
			  
			 schDiscTypeDrpdwn.sendKeys(Keys.TAB);
			  
			
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schfixedRateTxt));
			 schfixedRateTxt.click();
			 schfixedRateTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 schfixedRateTxt.sendKeys("10");
			 
			 schfixedRateTxt.sendKeys(Keys.TAB);
			 
			 schFixedRateDrpdwn.sendKeys("i");
			 
			 schFixedRateDrpdwn.sendKeys(Keys.TAB);
			 
			ArrayList<String>selectItemListArray=new ArrayList<String>();
				
			int selectItemListCount=selectItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=selectItemList.get(i).getText();
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
					
					js1.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					selectItemList.get(i).click();
				}
			}
			
	          Thread.sleep(2000);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schAddBtn));
			 schAddBtn.click();
			
			 ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
					
						schbodyGidListArray.add(data);
					
				}
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , , , Combine, Quantity Based, 10.00, 15.00, 0.00, 0.00, 20, Discount %, 10.00, AnyOne, , , , Combine, Both, 2.00, 5.00, 1.00, 2.00, 20, Free, 0.00, , 2@4(1), All Items, , Combine, Quantity Based, 11.00, 15.00, 0.00, 0.00, 20, Fixed Rate, 10.00, Individually, , ]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			 
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
		  }
		
		  

		  public boolean checkAddingSchemeWithDiscountVouchersAndClickOnSaveOnItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscTypeDrpdwn));
			  schDiscTypeDrpdwn.click();
			  
			  JavascriptExecutor js = (JavascriptExecutor) getDriver();
		 	  js.executeScript("arguments[0].scrollIntoView();", schCombineWithOtherSchemesChkbox);
		         
			
			 schCombineWithOtherSchemesChkbox.click();
			  
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schMinValueChkbox));
			 schMinValueChkbox.click();
			 
			 minvalueTxt.click();
			 minvalueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		
			 minvalueTxt.sendKeys("1500");
			 minvalueTxt.sendKeys(Keys.TAB);
			 
			 maxValueTxt.click();
			 maxValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxValueTxt.sendKeys("2000");
			 maxValueTxt.sendKeys(Keys.TAB);
			 
			 Thread.sleep(2000);
			 
			
			 Select schDiscTypeDrpdwnOption=new Select(schDiscTypeDrpdwn);
			 schDiscTypeDrpdwnOption.selectByVisibleText("Discount Vouchers");
			  
			 schDiscTypeDrpdwn.sendKeys(Keys.TAB);
			  
			
			JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		 	js1.executeScript("arguments[0].scrollIntoView();", schdicVouRow1);
		         
			 
			schdicVouRow1.click();
			 
			 enterDisvoucher.click();
			 
			 enterDisvoucher.sendKeys("d");
			 
			 enterDisvoucher.sendKeys(Keys.TAB);
			 
			ArrayList<String>selectItemListArray=new ArrayList<String>();
				
			int selectItemListCount=selectItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=selectItemList.get(i).getText();
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
					
					js4.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					selectItemList.get(i).click();
				}
			}
			
	          Thread.sleep(2000);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schAddBtn));
			 schAddBtn.click();
			
			 ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
					
						schbodyGidListArray.add(data);
					
				}
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , , , Combine, Quantity Based, 10.00, 15.00, 0.00, 0.00, 20, Discount %, 10.00, AnyOne, , , , Combine, Both, 2.00, 5.00, 1.00, 2.00, 20, Free, 0.00, , 2@4(1), All Items, , Combine, Quantity Based, 11.00, 15.00, 0.00, 0.00, 20, Fixed Rate, 10.00, Individually, , , , Combine, Value Based, 0.00, 0.00, 1500.00, 2000.00, 20, Discount Vouchers, 0.00, 3(1), , ]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			 
			
			JavascriptExecutor js2 = (JavascriptExecutor) getDriver();
	 	    js2.executeScript("arguments[0].scrollIntoView();", schSaveBtn);
	        
			
	 	   Thread.sleep(2000);
	 	   
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schSaveBtn));
			schSaveBtn.click();
			
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expValidationMessage = "Details saved successfully.";
			String actValidationMessage = checkValidationMessage(expValidationMessage);
			
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList) && 
					actValidationMessage.equalsIgnoreCase(expValidationMessage))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
		  }
		
		  
		  public boolean checkSavedSchemeWithOnItem() throws InterruptedException
		  
		  {
			  
	          Thread.sleep(2000);
			  
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schNameDrpdwn));
			  schNameDrpdwn.click();
			  
			  schNameDrpdwn.sendKeys("schemeWithOnItem");
			  Thread.sleep(2000);
			  
			  schNameDrpdwn.sendKeys(Keys.TAB);
			  
			  
			  ArrayList<String>schbodyGidListArray=new ArrayList<String>();
				
				int schbodyGidListCount=schbodyGidList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=schbodyGidList.get(i).getText();
					
					
						schbodyGidListArray.add(data);
					
				}
				
			String actschbodyGidList=schbodyGidListArray.toString();
			String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 100.00, 200.00, 20, Discount Amt, 100.00, , , , , Combine, Quantity Based, 10.00, 15.00, 0.00, 0.00, 20, Discount %, 10.00, AnyOne, , , , Combine, Both, 2.00, 5.00, 1.00, 2.00, 20, Free, 0.00, , 2@4(1.0000000), All Item, , Combine, Quantity Based, 11.00, 15.00, 0.00, 0.00, 20, Fixed Price, 10.00, Individually, , , , Combine, Value Based, 0.00, 0.00, 1500.00, 2000.00, 20, Discount Voucher, 0.00, 3(1), , ]";
				
			System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
			System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			 
			if (actschbodyGidList.equalsIgnoreCase(expschbodyGidList))
			{
				System.out.println(" Test Pass: Values Are Displayed are Expected ");
				return true;
				
			}
			else
			{

				System.out.println(" Test Fail: Values Are Displayed are Expected ");
				return false;
			}
		  }
		  
		  
		  @FindBy(xpath="//*[@id='tbodyDiscountVouchers']/tr[1]/td[1]/i[1]")
		  private static WebElement schGridRow1Btn;
		
		  
		  public boolean checkEditOptionInScheme() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			 
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schGridRow1Btn));
			 schGridRow1Btn.click();
			  
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscTypeDrpdwn));
			 schDiscTypeDrpdwn.click();
			  
			 JavascriptExecutor js = (JavascriptExecutor) getDriver();
		 	 js.executeScript("arguments[0].scrollIntoView();", schCombineWithOtherSchemesChkbox);
		         
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(minvalueTxt));
			 minvalueTxt.click();
			 minvalueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 minvalueTxt.sendKeys("99");
			 minvalueTxt.sendKeys(Keys.TAB);
			 
			 maxValueTxt.click();
			 maxValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 maxValueTxt.sendKeys("199");
			 maxValueTxt.sendKeys(Keys.TAB);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schLoadOutletbtn)); 
			  schLoadOutletbtn.click();
			  
			  Thread.sleep(2000);
			  int outletlistCount3=outletList.size();
			  	 
			  
			  for(int i=0;i<outletlistCount3;i++)
			  {
				  String data = outletList.get(i).getText();
					
				  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				  {
					  outletList.get(i).click();
					  break;
				  }
			  }
				
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletPopOkBtn));
			  outletPopOkBtn.click();
			  
			 Thread.sleep(2000);
			  
			 Thread.sleep(5000);
		 	   
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schSaveBtn));
			schSaveBtn.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expValidationMessage = "Details saved successfully.";
			String actValidationMessage = checkValidationMessage(expValidationMessage);
			
			
			Thread.sleep(2000);
			  
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schNameDrpdwn));
			schNameDrpdwn.click();
			  
			schNameDrpdwn.sendKeys("schemeWithOnItem");
			Thread.sleep(2000);
			  
			schNameDrpdwn.sendKeys(Keys.TAB);
			ArrayList<String>schbodyGidListArray=new ArrayList<String>();
			
			int schbodyGidListCount=schbodyGidList.size();
				
			System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
				
			for (int i = 0; i < schbodyGidListCount; i++)
			{
				String data=schbodyGidList.get(i).getText();
				
				
					schbodyGidListArray.add(data);
				
			}
			
		String actschbodyGidList=schbodyGidListArray.toString();
		String expschbodyGidList="[, Combine, Value Based, 0.00, 0.00, 99.00, 199.00, 20, Discount Amt, 100.00, , , , , Combine, Quantity Based, 10.00, 15.00, 0.00, 0.00, 20, Discount %, 10.00, AnyOne, , , , Combine, Both, 2.00, 5.00, 1.00, 2.00, 20, Free, 0.00, , 2@4(1.0000000), All Item, , Combine, Quantity Based, 11.00, 15.00, 0.00, 0.00, 20, Fixed Price, 10.00, Individually, , , , Combine, Value Based, 0.00, 0.00, 1500.00, 2000.00, 20, Discount Voucher, 0.00, 3(1), , ]";
			
		System.err.println("  Actual    schbodyGidList : "+actschbodyGidList);
		System.err.println("  Expected  schbodyGidList : "+expschbodyGidList);
			
			
			
			if (actValidationMessage.equalsIgnoreCase(expValidationMessage) &&
					actschbodyGidList.equalsIgnoreCase(expschbodyGidList))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
			  
		  }
		  
		  
		  
		  
		  public boolean checkCloneOptionInScheme() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schCloneBtn));
			schCloneBtn.click();
			  
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
	          
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schNameDrpdwn));
			schNameDrpdwn.click();
			  
			schNameDrpdwn.sendKeys("schemeWithCloneOption");
			Thread.sleep(2000);
			  
			schNameDrpdwn.sendKeys(Keys.TAB);
			  
			Thread.sleep(2000);
		 	   
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schSaveBtn));
			schSaveBtn.click();
			
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expValidationMessage = "Details saved successfully.";
			String actValidationMessage = checkValidationMessage(expValidationMessage);
			
			if (actValidationMessage.equalsIgnoreCase(expValidationMessage))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
		  }
			  
		  
		  public boolean checkDeleteOptionInScheme() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			  
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schNameDrpdwn));
			schNameDrpdwn.click();
			  
			schNameDrpdwn.sendKeys("schemeWithCloneOption");
			Thread.sleep(2000);
			  
			schNameDrpdwn.sendKeys(Keys.TAB);
			  
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDeleteBtn));
			schDeleteBtn.click();
			  
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expValidationMessage = "Deleted successfully.";
			String actValidationMessage = checkValidationMessage(expValidationMessage);
			
			if (actValidationMessage.equalsIgnoreCase(expValidationMessage))
			{
				System.out.println(" Test Pass: scheme With % Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  scheme With % Is Saved Successfully");
				return false;
			}
		  }
		
	//Free Item Starts From Here 
			  
	  @FindBy(xpath="//input[@id='optSchemeFreeItemName']")
	  private static WebElement fi_SchNameDrpdwn;
	  
	  @FindBy(xpath="//input[@id='dtpFreeItemFromDate']")
	  private static WebElement fi_fromDtTxt;
	  
	  @FindBy(xpath="//input[@id='dtpFreeItemToDate']")
	  private static WebElement fi_toDtTxt;
	  
	  @FindBy(xpath="//button[@id='btnGetFreeItemOutlets']")
	  private static WebElement fi_OutletBtn;
	  
	  @FindBy(xpath="//*[@id='divOutletTree']/ul/li/a")
	  private static List<WebElement> fi_OutletList;
	  

	  @FindBy(xpath="//div[@id='btnOk']")
	  private static WebElement fi_OutletOkBtn;
	  

	  
	  @FindBy(xpath="//input[@id='txtbox_ddlFreeItemSchemeFor']")
	  private static WebElement fi_SchemeForTxt;
	  
	  @FindBy(xpath="//*[@id='ul_ddlFreeItemSchemeFor']/li[1]/div/label/input")
	  private static WebElement fi_SchForPreOrderSchChkBox;
	  
	  @FindBy(xpath="//*[@id='ul_ddlFreeItemSchemeFor']/li[2]/div/label/input")
	  private static WebElement fi_SchForPurchaseSchChkBox;
	  
	  @FindBy(xpath="//input[@id='chkFreeItemCombineWithOtherSchemes']")
	  private static WebElement fi_CombineWithOtherSchChkBox;
	  
	  @FindBy(xpath="//input[@id='chkFreeItemQuantity']")
	  private static WebElement fi_QtyChkbox;
	  
	  @FindBy(xpath="//input[@id='txtFreeItemMinQty']")
	  private static WebElement fi_MinQtyTxt;
	  
	  @FindBy(xpath="//input[@id='txtFreeItemMaxQty']")
	  private static WebElement fi_MaxQtyTxt;
	  
	  @FindBy(xpath="//input[@id='chkFreeItemValue']")
	  private static WebElement fi_ValueChkBox;
	  
	  @FindBy(xpath="//input[@id='txtFreeItemMinValue']")
	  private static WebElement fi_MinValueTxt;
	  
	  @FindBy(xpath="//input[@id='txtFreeItemMaxValue']")
	  private static WebElement fi_MaxValueTxt;
	  
	  @FindBy(xpath="//*[@id='divFreeItemProductTreeControl']/div[3]//div/ul/li/a")
	  private static List<WebElement> fi_FreeeItemList;
	  
	  @FindBy(xpath="//*[@id='divProductTreeControl']/div[3]//div/ul/li/a")
	  private static List<WebElement> fi_CriteriaDefItemsList;
	  
	  @FindBy(xpath="//*[@id='tbodyFreeItemGrpDtls']/tr/td")
	  private static List<WebElement> fi_bodyGridList;
	  
	  

	  
	  @FindBy(xpath="//select[@id='ddlFreeItemDiscountType']")
	  private static WebElement fi_DiscountTypeDrpdwn;
	  
	  @FindBy(xpath="//input[@id='rbtFreeItemAllItem']")
	  private static WebElement fi_AllItemRadioBtn;
	  
	  @FindBy(xpath="//input[@id='rbtFreeItemAnyItem']")
	  private static WebElement fi_AnyItemRadioBtn;
	  
	  @FindBy(xpath="//input[@id='txtFreeItemDiscountAmt']")
	  private static WebElement fi_DiscountAmtTxt;
	  
	  @FindBy(xpath="//input[@id='txtFreeItemQuantity']")
	  private static WebElement fi_QtyTxt;
	  
	  @FindBy(xpath="//*[@id='theadFreeItemGrpDtls']/tr/th")
	  private static List<WebElement> fi_BodyGridHeaderList;
	  
	  @FindBy(xpath="//input[@id='txtFreeItemDiscountPer']")
	  private static WebElement fi_DiscountPerTxt;

	  @FindBy(xpath="//input[@id='txtFreeItemFixedRate']")
	  private static WebElement fi_FixedRateTxt;
	  
	  @FindBy(xpath="//input[@id='rbtFreeItemIndividually']")
	  private static WebElement fi_IndividuallyRadioBtn;

	  @FindBy(xpath="//*[@id='divBtnAdd']")
	  private static WebElement fi_AddBtn;

	  @FindBy(xpath="//div[@id='divBtnSave']")
	  private static WebElement fi_SaveBtn;

	  @FindBy(xpath="//*[@id='divBtnDelete']")
	  private static WebElement fi_DeleteBtn;

	  @FindBy(xpath="//*[@id='divSchemesFreeItemHeader']/div[2]/div[5]")
	  private static WebElement fi_ClearBtn;

	  @FindBy(xpath="//*[@id='divSchemesFreeItemHeader']/div[2]/div[7]")
	  private static WebElement fi_CloseBtn;

	  @FindBy(xpath="//*[@id='divSchemesFreeItemHeader']/div[2]/div[6]")
	  private static WebElement fi_CloneBtn;

	  
	  
	  
	  
	  
		  
	  public boolean checkFreeItemSchemeInMasters() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	  {
		  
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
			System.out.println("******************checkFreeItemSchemeInMasters Method Executed***************************************");
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
				
	        Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterSchMenu));
			homeMasterSchMenu.click();
				
		    Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(schFreeItemMenu));	
			schFreeItemMenu.click();
			     
			Thread.sleep(6000);
			
			boolean actfi_SchNameDrpdwn    	 		   =fi_SchNameDrpdwn.isDisplayed();
			boolean actschTypeDrpdwn    	           =fi_fromDtTxt.isDisplayed();
			boolean actschFromDateTxt 			       =fi_toDtTxt.isDisplayed();
			boolean actschFromTimeTxt 			       =fi_OutletBtn.isDisplayed();
			boolean actschToDateTxt 		           =fi_SchemeForTxt.isDisplayed();
			boolean actschToTimeTxt 			       =fi_CombineWithOtherSchChkBox.isDisplayed();
			boolean actschOutletsTxt 		 	       =fi_QtyChkbox.isDisplayed();
			boolean actschLoadOutletbtn                =fi_ValueChkBox.isDisplayed();
			boolean actschDaysTxt    	 			   =fi_DiscountTypeDrpdwn.isDisplayed();
			
			
			boolean expfi_SchNameDrpdwn    	 			=true;
			boolean expschTypeDrpdwn    				=true;
			boolean expschFromDateTxt 					=true;
			boolean expschFromTimeTxt 					=true;
			boolean expschToDateTxt 					=true;
			boolean expschToTimeTxt 					=true;
			boolean expschOutletsTxt 					=true;
			boolean expschLoadOutletbtn 				=true;
			boolean expschDaysTxt    	 				=true;
			
			System.out.println("fi_SchNameDrpdwn          : "+actfi_SchNameDrpdwn           +" Value Expected : "+expfi_SchNameDrpdwn);
			System.out.println("schTypeDrpdwn             : "+actschTypeDrpdwn           +" Value Expected : "+expschTypeDrpdwn);
			System.out.println("schFromDateTxt            : "+actschFromDateTxt          +" Value Expected : "+expschFromDateTxt);
			System.out.println("schFromTimeTxt            : "+actschFromTimeTxt          +" Value Expected : "+expschFromTimeTxt);
			System.out.println("schToDateTxt              : "+actschToDateTxt            +" Value Expected : "+expschToDateTxt);
			System.out.println("schToTimeTxt              : "+actschToTimeTxt            +" Value Expected : "+expschToTimeTxt);
			System.out.println("schOutletsTxt             : "+actschOutletsTxt           +" Value Expected : "+expschOutletsTxt);
			System.out.println("schLoadOutletbtn          : "+actschLoadOutletbtn        +" Value Expected : "+expschLoadOutletbtn);
			System.out.println("schDaysTxt                : "+actschDaysTxt              +" Value Expected : "+expschDaysTxt);
			
			
			ArrayList<String>actfi_BodyGridListArray=new ArrayList<String>();
			
			int actList=fi_BodyGridHeaderList.size();
			
			for (int i = 0; i < actList; i++) 
			{
				String data=fi_BodyGridHeaderList.get(i).getText();
				actfi_BodyGridListArray.add(data);
				
			}
			
			String actfi_BodyGridList=actfi_BodyGridListArray.toString();
			String expfi_BodyGridList="[, Item, Quantity, Free/Discount, Discount, Discount On]";
			
			System.out.println(" Actual fi_BodyGridList   : "+actfi_BodyGridList);
			System.out.println(" Expected  fi_BodyGridList: "+expfi_BodyGridList);
			
			if(actfi_SchNameDrpdwn==expfi_SchNameDrpdwn && actschTypeDrpdwn==expschTypeDrpdwn&& actschFromDateTxt==expschFromDateTxt
					&& actschFromTimeTxt==expschFromTimeTxt&& actschToDateTxt==expschToDateTxt && actschToTimeTxt==expschToTimeTxt
					&& actschOutletsTxt==expschOutletsTxt && actschLoadOutletbtn==expschLoadOutletbtn
					
					&& actschDaysTxt==expschDaysTxt && actfi_BodyGridList.equalsIgnoreCase(expfi_BodyGridList))
			{
				System.out.println(" Test Pass: Free item Screen Displayed ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail: Free item Screen Displayed ");
				return false;
			}
		}

	  

		  
	  public boolean checkAddingFreeItemSchemeWithDisAmt5Of1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		  
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchNameDrpdwn));
			fi_SchNameDrpdwn.click();
			fi_SchNameDrpdwn.sendKeys("FreeSchDisAmtWith5Of1");
			
			fi_SchNameDrpdwn.sendKeys(Keys.TAB);
			
			fi_fromDtTxt.click();
			
			fi_fromDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			 Date date=new Date();
				
			 String docdate = df.format(date);  
			 Calendar c = Calendar.getInstance();
			 c.add(Calendar.DAY_OF_MONTH, 5);  
			
			 String FilterDate = df.format(c.getTime());  
			
			 System.out.println("df.format(date)  : "+df.format(date));
			 System.out.println("FilterDate  : "+FilterDate);
			
			 fi_fromDtTxt.sendKeys(df.format(date));
			
			 fi_fromDtTxt.sendKeys(Keys.TAB);
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_toDtTxt));
			 fi_toDtTxt.click();
			 fi_toDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 fi_toDtTxt.sendKeys(FilterDate);
			 Thread.sleep(2000);
			 fi_toDtTxt.sendKeys(Keys.TAB);

			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_OutletBtn));
			 fi_OutletBtn.click();
			 
			 Thread.sleep(2000);
			
			 int fi_OutletListCount=fi_OutletList.size();
		  	 
			  
			  for(int i=0;i<fi_OutletListCount;i++)
			  {
				  String data = fi_OutletList.get(i).getText();
					
				  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				  {
					  fi_OutletList.get(i).click();
					  break;
				  }
			  }
			
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_OutletOkBtn));
			 fi_OutletOkBtn.click();
			 
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchemeForTxt));
			 fi_SchemeForTxt.click();
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchForPurchaseSchChkBox));
			 fi_SchForPurchaseSchChkBox.click();
			 
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_CombineWithOtherSchChkBox));
			 fi_CombineWithOtherSchChkBox.click();
			 
			 fi_QtyChkbox.click();
			 
			 fi_MinQtyTxt.click();
			 fi_MinQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 fi_MinQtyTxt.sendKeys("5");
			 fi_MinQtyTxt.sendKeys(Keys.TAB);
			 
			 fi_MaxQtyTxt.click();
			 fi_MaxQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 fi_MaxQtyTxt.sendKeys("5");
			 fi_MaxQtyTxt.sendKeys(Keys.TAB);
			 
			 
			 int fi_CriteriaDefItemsListCount=fi_CriteriaDefItemsList.size();
			
			 for (int i = 0; i < fi_CriteriaDefItemsListCount; i++)
			 {
				
				 String data=fi_CriteriaDefItemsList.get(i).getText();
				 
				 System.out.println("Data  : "+data);
				 
				 if (i!=fi_CriteriaDefItemsListCount-1) 
					{
						int temp=i+1;
						JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
						
						js4.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
					}
				 
				 
				 if (data.equalsIgnoreCase("STOCK ITEM Pcs -- SI - ? 0")) 
				 {
					
					 fi_CriteriaDefItemsList.get(i).click();
					 break;
				 }
			 }
			 
			 Thread.sleep(2000);
			 
	      Select option=new Select(fi_DiscountTypeDrpdwn);
	      option.selectByVisibleText("Discount Amt");
			 
	      fi_DiscountTypeDrpdwn.sendKeys(Keys.TAB);
			 
			 
	      fi_DiscountAmtTxt.click();
	      fi_DiscountAmtTxt.sendKeys("100");
	      fi_DiscountAmtTxt.sendKeys(Keys.TAB);

	      

			 int fi_FreeeItemListCount=fi_FreeeItemList.size();
			
			 for (int i = 0; i < fi_FreeeItemListCount; i++)
			 {
				
				 String data=fi_FreeeItemList.get(i).getText();
				 System.out.println("Data  : "+data);
				 
				 
				 if (i!=fi_FreeeItemListCount-1) 
					{
						int temp=i+1;
						JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
						
						js4.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
					}
				 
				 
				 if (data.equalsIgnoreCase("STOCK ITEM Pcs -- SI - ? 0")) 
				 {
					
					 fi_FreeeItemList.get(i).click();
					 break;
				 }
			 }
	      
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_AddBtn));
			 fi_AddBtn.click();
			 
			 
	         Thread.sleep(2000);
			 
			 JavascriptExecutor js = (JavascriptExecutor) getDriver();
			 js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
			 
			 
			 ArrayList<String>fi_bodyGridListArray=new ArrayList<String>();
			 
			 int fi_bodyGridListCount=fi_bodyGridList.size();
			 
			 for (int i = 0; i < fi_bodyGridListCount; i++)
			 {
				 String data=fi_bodyGridList.get(i).getText();
				 
				 fi_bodyGridListArray.add(data);
				 
			 }
			 
			 String actfi_bodyGridList=fi_bodyGridListArray.toString();
			 String expfi_bodyGridList="[, 4, 1.00, Discount Amt, 100.00, ]";
			 
			 System.out.println("Act fi_bodyGridList ; "+actfi_bodyGridList);
			 System.out.println("exp fi_bodyGridList ; "+expfi_bodyGridList);
		
			 
			 Thread.sleep(2000);
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SaveBtn));
			 
			 fi_SaveBtn.click();
			 
			 
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expValidationMessage = "Details saved successfully.";
			String actValidationMessage = checkValidationMessage(expValidationMessage);
			
			if (actValidationMessage.equalsIgnoreCase(expValidationMessage) && 
					actfi_bodyGridList.equalsIgnoreCase(expfi_bodyGridList))
			{
				System.out.println(" Test Pass: FreeItem With AdjustAmt Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  FreeItem With AdjustAmt Is Saved Successfully");
				return false;
			}
		  }
		
	  
	  public boolean checkAddingFreeItemSchemeWithDisPercentage10Of1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 	{
	 	  
	 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchNameDrpdwn));
	 		fi_SchNameDrpdwn.click();
	 		fi_SchNameDrpdwn.sendKeys("FreeSchWithDisPer10OF1");
	 		
	 		fi_SchNameDrpdwn.sendKeys(Keys.TAB);
	 		
	 		fi_fromDtTxt.click();
	 		
	 		fi_fromDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	 		
	 		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	 		Date date=new Date();
	 			
	 		String docdate = df.format(date);  
	 		Calendar c = Calendar.getInstance();
	 		c.add(Calendar.DAY_OF_MONTH, 5);  
	 		
	 		String FilterDate = df.format(c.getTime());  
	 		
	 		System.out.println("df.format(date)  : "+df.format(date));
	 		System.out.println("FilterDate  : "+FilterDate);
	 		
	 		fi_fromDtTxt.sendKeys(df.format(date));
	 		
	 		fi_fromDtTxt.sendKeys(Keys.TAB);
	 		 
	 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_toDtTxt));
	 		fi_toDtTxt.click();
	 		fi_toDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	 		fi_toDtTxt.sendKeys(FilterDate);
	 		Thread.sleep(2000);
	 		fi_toDtTxt.sendKeys(Keys.TAB);

	 		 
			  
	 		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_OutletBtn));
			 fi_OutletBtn.click();
			 
			 Thread.sleep(2000);
			
			 int fi_OutletListCount=fi_OutletList.size();
		  	 
			  
			  for(int i=0;i<fi_OutletListCount;i++)
			  {
				  String data = fi_OutletList.get(i).getText();
					
				  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				  {
					  fi_OutletList.get(i).click();
					  break;
				  }
			  }
			
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_OutletOkBtn));
			 fi_OutletOkBtn.click();
	 		 
	 		Thread.sleep(2000);
	 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchemeForTxt));
	 		fi_SchemeForTxt.click();
	 		 
	 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchForPurchaseSchChkBox));
	 		fi_SchForPurchaseSchChkBox.click();
	 		 
	 		 
	 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_CombineWithOtherSchChkBox));
	 		fi_CombineWithOtherSchChkBox.click();
	 		
	 		 fi_QtyChkbox.click();
			 
			 fi_MinQtyTxt.click();
			 fi_MinQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 fi_MinQtyTxt.sendKeys("10");
			 fi_MinQtyTxt.sendKeys(Keys.TAB);
			 
			 fi_MaxQtyTxt.click();
			 fi_MaxQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 fi_MaxQtyTxt.sendKeys("10");
			 fi_MaxQtyTxt.sendKeys(Keys.TAB);
			 
	 		 
	 		 
	 		 int fi_CriteriaDefItemsListCount=fi_CriteriaDefItemsList.size();
	 		
	 		 for (int i = 0; i < fi_CriteriaDefItemsListCount; i++)
	 		 {
	 			
	 			 String data=fi_CriteriaDefItemsList.get(i).getText();
	 			 
	 			 System.out.println("Data  : "+data);
	 			 
	 			 if (i!=fi_CriteriaDefItemsListCount-1) 
	 				{
	 					int temp=i+1;
	 					JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
	 					
	 					js4.executeScript("arguments[0].scrollIntoView();",fi_CriteriaDefItemsList.get(temp));
	 				}
	 			 
	 			 
	 			 if (data.equalsIgnoreCase("STOCK ITEM Pcs -- SI - ? 0")) 
	 			 {
	 				 fi_CriteriaDefItemsList.get(i).click();
	 				 break;
	 				 
	 			 }
	 		 }
	 		 
	 		Thread.sleep(2000);
	 		 
	        Select option=new Select(fi_DiscountTypeDrpdwn);
	       
	        option.selectByVisibleText("Discount %");
	 		 
	        fi_DiscountTypeDrpdwn.sendKeys(Keys.TAB);
	 		 
	 		 
	        fi_DiscountPerTxt.click();
	        fi_DiscountPerTxt.sendKeys("10");
	        fi_DiscountPerTxt.sendKeys(Keys.TAB);


	 		int fi_FreeeItemListCount=fi_FreeeItemList.size();
	 		
	 		for (int i = 0; i < fi_FreeeItemListCount; i++)
	 		{
	 			
	 			 String data=fi_FreeeItemList.get(i).getText();
	 			 System.out.println("Data  : "+data);
	 			 
	 			 if (i!=fi_FreeeItemListCount-1) 
	 				{
	 					int temp=i+1;
	 					JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
	 					
	 					js4.executeScript("arguments[0].scrollIntoView();",fi_FreeeItemList.get(temp));
	 				}
	 			 
	 			 
	 			 if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0")) 
	 			 {
	 				 fi_FreeeItemList.get(i).click();
	 				 break;
	 			 }
	 		}
	       
	 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_AddBtn));
	 		fi_AddBtn.click();
	 		 
	 		 
	        Thread.sleep(2000);
	 		 
	 		JavascriptExecutor js = (JavascriptExecutor) getDriver();
	 		js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
	 		 
	 		 
	 		ArrayList<String>fi_bodyGridListArray=new ArrayList<String>();
	 		 
	 		int fi_bodyGridListCount=fi_bodyGridList.size();
	 		 
	 		for (int i = 0; i < fi_bodyGridListCount; i++)
	 		{
	 			 String data=fi_bodyGridList.get(i).getText();
	 			 
	 			 fi_bodyGridListArray.add(data);
	 			 
	 		}
	 		 
	 		String actfi_bodyGridList=fi_bodyGridListArray.toString();
	 		String expfi_bodyGridList="[, 20, 1.00, Discount %, 10.00, Any Item]";
	 		 
	 		System.out.println("Act fi_bodyGridList ; "+actfi_bodyGridList);
	 		System.out.println("exp fi_bodyGridList ; "+expfi_bodyGridList);
	 	
	 		 
	 		Thread.sleep(2000);
	 		
	 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SaveBtn));
	 		 
	 		fi_SaveBtn.click();
	 		 
	 		Thread.sleep(2000);
	 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
	 		yesBtn.click();
	 		
	 		String expValidationMessage = "Details saved successfully.";
	 		String actValidationMessage = checkValidationMessage(expValidationMessage);
	 		
	 		if (actValidationMessage.equalsIgnoreCase(expValidationMessage) && 
	 				actfi_bodyGridList.equalsIgnoreCase(expfi_bodyGridList))
	 		{
	 			System.out.println(" Test Pass: FreeItem With AdjustAmt Is Saved Successfully");
	 			return true;
	 		}
	 		else 
	 		{
	 			System.out.println(" Test Fail:  FreeItem With AdjustAmt Is Saved Successfully");
	 			return false;
	 		}
	 	  }
	 	
	   


	public boolean checkAddingFreeItemSchemeWithFreeItem15Of5() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		  
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchNameDrpdwn));
			fi_SchNameDrpdwn.click();
			fi_SchNameDrpdwn.sendKeys("FreeSchWithFreeItem 15Of5");
			
			fi_SchNameDrpdwn.sendKeys(Keys.TAB);
			
			fi_fromDtTxt.click();
			
			fi_fromDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
				
			String docdate = df.format(date);  
			Calendar c = Calendar.getInstance();
			c.add(Calendar.DAY_OF_MONTH, 5);  
			
			String FilterDate = df.format(c.getTime());  
			
			System.out.println("df.format(date)  : "+df.format(date));
			System.out.println("FilterDate  : "+FilterDate);
			
			fi_fromDtTxt.sendKeys(df.format(date));
			fi_fromDtTxt.sendKeys(df.format(date));
			
			fi_fromDtTxt.sendKeys(Keys.TAB);
			 
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_toDtTxt));
			fi_toDtTxt.click();
			fi_toDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			fi_toDtTxt.sendKeys(FilterDate);
			Thread.sleep(2000);
			fi_toDtTxt.sendKeys(Keys.TAB);

			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_OutletBtn));
			 fi_OutletBtn.click();
			 
			 Thread.sleep(2000);
			
			 int fi_OutletListCount=fi_OutletList.size();
		  	 
			  
			  for(int i=0;i<fi_OutletListCount;i++)
			  {
				  String data = fi_OutletList.get(i).getText();
					
				  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				  {
					  fi_OutletList.get(i).click();
					  break;
				  }
			  }
			
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_OutletOkBtn));
			 fi_OutletOkBtn.click();
			 
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchemeForTxt));
			fi_SchemeForTxt.click();
			 
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchForPurchaseSchChkBox));
			fi_SchForPurchaseSchChkBox.click();
			 
			 
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_CombineWithOtherSchChkBox));
			fi_CombineWithOtherSchChkBox.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_QtyChkbox));
			 fi_QtyChkbox.click();
			 
			 fi_MinQtyTxt.click();
			 fi_MinQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 fi_MinQtyTxt.sendKeys("15");
			 fi_MinQtyTxt.sendKeys(Keys.TAB);
			 
			 fi_MaxQtyTxt.click();
			 fi_MaxQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 fi_MaxQtyTxt.sendKeys("15");
			 fi_MaxQtyTxt.sendKeys(Keys.TAB);
			 
			 
			 
			 int fi_CriteriaDefItemsListCount=fi_CriteriaDefItemsList.size();
			
			 for (int i = 0; i < fi_CriteriaDefItemsListCount; i++)
			 {
				
				 String data=fi_CriteriaDefItemsList.get(i).getText();
				 
				 System.out.println("Data  : "+data);
				 
				 if (i!=fi_CriteriaDefItemsListCount-1) 
					{
						int temp=i+1;
						JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
						
						js4.executeScript("arguments[0].scrollIntoView();",fi_CriteriaDefItemsList.get(temp));
					}
				  
				 
				 if (data.equalsIgnoreCase("STOCK ITEM Pcs -- SI - ? 0")) 
				 {
					 fi_CriteriaDefItemsList.get(i).click();
					 break;
					 
				 }
			 }
			 
			Thread.sleep(2000);
			 
	      Select option=new Select(fi_DiscountTypeDrpdwn);
	     
	      option.selectByVisibleText("Free Items");
			 
	      fi_DiscountTypeDrpdwn.sendKeys(Keys.TAB);
			 
			 
	      fi_QtyTxt.click();
	      fi_QtyTxt.sendKeys(Keys .END,Keys.SHIFT ,Keys .HOME);
	      fi_QtyTxt.sendKeys("5");
	      fi_QtyTxt.sendKeys(Keys.TAB);

			int fi_FreeeItemListCount=fi_FreeeItemList.size();
			 
			for (int i = 0; i < fi_FreeeItemListCount; i++)
			{
				
				 String data=fi_FreeeItemList.get(i).getText();
				 System.out.println("Data  : "+data);
				 
				 if (i!=fi_FreeeItemListCount-1) 
					{
						int temp=i+1;
						JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
						
						js4.executeScript("arguments[0].scrollIntoView();",fi_FreeeItemList.get(temp));
					}
				 
				 
				 if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0")) 
				 {
					 fi_FreeeItemList.get(i).click();
					 break;
				 }
			}
	     
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_AddBtn));
			fi_AddBtn.click();
			 
			 
	        Thread.sleep(2000);
			 
			JavascriptExecutor js = (JavascriptExecutor) getDriver();
			js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
			 
			 
			ArrayList<String>fi_bodyGridListArray=new ArrayList<String>();
			 
			int fi_bodyGridListCount=fi_bodyGridList.size();
			 
			for (int i = 0; i < fi_bodyGridListCount; i++)
			{
				 String data=fi_bodyGridList.get(i).getText();
				 
				 fi_bodyGridListArray.add(data);
				 
			}
			 
			String actfi_bodyGridList=fi_bodyGridListArray.toString();
			String expfi_bodyGridList="[, 20, 5.00, Free Item, 0.00, Any Item]";
			 
			System.out.println("Act fi_bodyGridList ; "+actfi_bodyGridList);
			System.out.println("exp fi_bodyGridList ; "+expfi_bodyGridList);
		
			 
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SaveBtn));
			 
			fi_SaveBtn.click();
			 
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expValidationMessage = "Details saved successfully.";
			String actValidationMessage = checkValidationMessage(expValidationMessage);
			
			if (actValidationMessage.equalsIgnoreCase(expValidationMessage) && 
					actfi_bodyGridList.equalsIgnoreCase(expfi_bodyGridList))
			{
				System.out.println(" Test Pass: FreeItem With AdjustAmt Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  FreeItem With AdjustAmt Is Saved Successfully");
				return false;
			}
		  }
		

	public boolean checkAddingFreeItemSchemeWithFixedRate20Of1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		  
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchNameDrpdwn));
			fi_SchNameDrpdwn.click();
			fi_SchNameDrpdwn.sendKeys("FreeSchWithFixedRate20Of1");
			
			fi_SchNameDrpdwn.sendKeys(Keys.TAB);
			
			fi_fromDtTxt.click();
			
			fi_fromDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
				
			String docdate = df.format(date);  
			Calendar c = Calendar.getInstance();
			c.add(Calendar.DAY_OF_MONTH, 5);  
			
			String FilterDate = df.format(c.getTime());  
			
			System.out.println("df.format(date)  : "+df.format(date));
			System.out.println("FilterDate  : "+FilterDate);
			
			fi_fromDtTxt.sendKeys(df.format(date));
			fi_fromDtTxt.sendKeys(df.format(date));
			
			fi_fromDtTxt.sendKeys(Keys.TAB);
			 
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_toDtTxt));
			fi_toDtTxt.click();
			fi_toDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			fi_toDtTxt.sendKeys(FilterDate);
			Thread.sleep(2000);
			fi_toDtTxt.sendKeys(Keys.TAB);

			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_OutletBtn));
			 fi_OutletBtn.click();
			 
			 Thread.sleep(2000);
			
			 int fi_OutletListCount=fi_OutletList.size();
		  	 
			  
			  for(int i=0;i<fi_OutletListCount;i++)
			  {
				  String data = fi_OutletList.get(i).getText();
					
				  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				  {
					  fi_OutletList.get(i).click();
					  break;
				  }
			  }
			
			  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_OutletOkBtn));
			 fi_OutletOkBtn.click();
			 
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchemeForTxt));
			fi_SchemeForTxt.click();
			 
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SchForPurchaseSchChkBox));
			fi_SchForPurchaseSchChkBox.click();
			 
			 
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_CombineWithOtherSchChkBox));
			fi_CombineWithOtherSchChkBox.click();
			
			 fi_QtyChkbox.click();
			 
			 fi_MinQtyTxt.click();
			 fi_MinQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 fi_MinQtyTxt.sendKeys("20");
			 fi_MinQtyTxt.sendKeys(Keys.TAB);
			 
			 fi_MaxQtyTxt.click();
			 fi_MaxQtyTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			 fi_MaxQtyTxt.sendKeys("20");
			 fi_MaxQtyTxt.sendKeys(Keys.TAB);
			 
			 
			 
			 int fi_CriteriaDefItemsListCount=fi_CriteriaDefItemsList.size();
			
			 for (int i = 0; i < fi_CriteriaDefItemsListCount; i++)
			 {
				
				 String data=fi_CriteriaDefItemsList.get(i).getText();
				 
				 System.out.println("Data  : "+data);
				 
				 if (i!=fi_CriteriaDefItemsListCount-1) 
					{
						int temp=i+1;
						JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
						
						js4.executeScript("arguments[0].scrollIntoView();",fi_CriteriaDefItemsList.get(temp));
					}
				  
				 
				 if (data.equalsIgnoreCase("STOCK ITEM Pcs -- SI - ? 0")) 
				 {
					 fi_CriteriaDefItemsList.get(i).click();
					 break;
					 
				 }
			 }
			 
			Thread.sleep(2000);
			 
	      Select option=new Select(fi_DiscountTypeDrpdwn);
	     
	      option.selectByVisibleText("Fixed Rate");
			 
	      fi_DiscountTypeDrpdwn.sendKeys(Keys.TAB);
			 
		  getWebDriverWait(). until(ExpectedConditions.elementToBeClickable(fi_FixedRateTxt));
	      fi_FixedRateTxt.click();
	      fi_FixedRateTxt.sendKeys(Keys .END,Keys.SHIFT ,Keys .HOME);
	      fi_FixedRateTxt.sendKeys("5");
	      fi_FixedRateTxt.sendKeys(Keys.TAB);

	      getWebDriverWait().until(ExpectedConditions. elementToBeClickable(fi_QtyTxt)); 
	      fi_QtyTxt.click();
	      fi_QtyTxt.sendKeys(Keys .END,Keys.SHIFT ,Keys .HOME);
	      fi_QtyTxt.sendKeys("5");
	      fi_QtyTxt.sendKeys(Keys.TAB);

	      
	      fi_IndividuallyRadioBtn.click();
	      
	      
			int fi_FreeeItemListCount=fi_FreeeItemList.size();
			 
			for (int i = 0; i < fi_FreeeItemListCount; i++)
			{
				
				 String data=fi_FreeeItemList.get(i).getText();
				 System.out.println("Data  : "+data);
				 
				 if (i!=fi_FreeeItemListCount-1) 
					{
						int temp=i+1;
						JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
						
						js4.executeScript("arguments[0].scrollIntoView();",fi_FreeeItemList.get(temp));
					}
				 
				 
				 if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0")) 
				 {
					 fi_FreeeItemList.get(i).click();
					 break;
				 }
			}
	     
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_AddBtn));
			fi_AddBtn.click();
			 
			 
	        Thread.sleep(2000);
			 
			JavascriptExecutor js = (JavascriptExecutor) getDriver();
			js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
			 
			 
			ArrayList<String>fi_bodyGridListArray=new ArrayList<String>();
			 
			int fi_bodyGridListCount=fi_bodyGridList.size();
			 
			for (int i = 0; i < fi_bodyGridListCount; i++)
			{
				 String data=fi_bodyGridList.get(i).getText();
				 
				 fi_bodyGridListArray.add(data);
				 
			}
			 
			String actfi_bodyGridList=fi_bodyGridListArray.toString();
			String expfi_bodyGridList="[, 20, 5.00, Fixed Rate, 5.00, Individually]";
			 
			System.out.println("Act fi_bodyGridList ; "+actfi_bodyGridList);
			System.out.println("exp fi_bodyGridList ; "+expfi_bodyGridList);
		
             
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(fi_SaveBtn));
			fi_SaveBtn.click();
			 
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expValidationMessage = "Details saved successfully.";
			String actValidationMessage = checkValidationMessage(expValidationMessage);
			
			if (actValidationMessage.equalsIgnoreCase(expValidationMessage) && 
					actfi_bodyGridList.equalsIgnoreCase(expfi_bodyGridList))
			{
				System.out.println(" Test Pass: FreeItem With AdjustAmt Is Saved Successfully");
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:  FreeItem With AdjustAmt Is Saved Successfully");
				return false;
			}
		  }
		
	  
	  @FindBy(xpath="//div[@id='sbtnAddPymntDiscount']")
	  private static WebElement pdSchAddBtn;
	  
	  @FindBy(xpath="//div[contains(text(),'Save')]")
	  private static WebElement pdSchSaveBtn;
	  
	  @FindBy(xpath="//div[contains(text(),'Delete')]")
	  private static WebElement pdSchDeleteBtn;
	  
	  @FindBy(xpath="//div[contains(text(),'Clear')]")
	  private static WebElement pdSchClearBtn;
	  
	  @FindBy(xpath="//div[@id='btnClonePymntDiscount']")
	  private static WebElement pdSchCloneBtn;
	  
	  @FindBy(xpath="//div[contains(text(),'Close')]")
	  private static WebElement pdSchCloseBtn;
	  
	  
	  
	  
	  @FindBy(xpath="//input[@id='optPaymentSchemeName']")
	  private static WebElement pdSchNameTxt;
	   
	  @FindBy(xpath="//select[@id='ddlSchemeTypePymnt']")
	  private static WebElement pdSchTypeDrpdwn;
	   
	  @FindBy(xpath="//input[@id='dtpFromDatePymnt']")
	  private static WebElement pdSchFromDateTxt;
	   
	  @FindBy(xpath="//td[@id='dtpFromDatePymnt_input_image']/span")
	  private static WebElement pdSchFromDateCalendarBtn;
	  
	  @FindBy(xpath="//input[@id='tpFromTimePymnt']")
	  private static WebElement pdSchFromTimeTxt;
	   
	  @FindBy(xpath="//input[@id='dtpToDatePymnt']")
	  private static WebElement pdSchToDateTxt;
	   
	  @FindBy(xpath="//td[@id='dtpToDatePymnt_input_image']/span")
	  private static WebElement pdSchToDateCalendarBtn;
	  
	  @FindBy(xpath="//input[@id='tpToTimePymnt']")
	  private static WebElement pdSchToTimeTxt;
	   
	  @FindBy(xpath="//input[@id='txtOutletsPymnt']")
	  private static WebElement pdSchOutletsTxt;
	   
	  @FindBy(xpath="//button[@id='btnGetOutletsPymnt']")
	  private static WebElement pdschLoadOutletbtn;
	  
		  @FindBy(xpath="//div[@id='divOutletTree']/ul/li/a")
		  private static List<WebElement> pdSchOutletList;
		  
		  @FindBy(xpath="//*[@id='divOutletTree']/ul/li")
		  private static List<WebElement> pdSchoutletChkBoxList;
		  

		  @FindBy(xpath="//div[contains(text(),'Ok')]")
		  private static WebElement pdoutletPopOkBtn;
		  
	  @FindBy(xpath="//input[@id='txtbox_ddlWeekdaysPymnt']")
	  private static WebElement pdSchDaysTxt;
	  
	  @FindBy(xpath="//ul[@id='ul_ddlWeekdaysPymnt']/li/div/label/span")
	  private static List<WebElement> pdSchDaysList;
	  
	  @FindBy(xpath="//select[@id='ddlDiscountPaymentType']")
	  private static WebElement pdpaymentTypeDropDown;
	  
	  @FindBy(xpath="//select[@id='ddlDiscountCardType']")
	  private static WebElement pdCardTypeDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlDiscountBankType']")
	  private static WebElement pdBankDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlDiscountGiftVoucherType']")
	  private static WebElement pdGiftVoucherTypeDropdown;
	  
	  @FindBy(xpath="//select[@id='ddlDiscountEPaymentType']")
	  private static WebElement pdEpaymentTypeDropdown;
	   
	  @FindBy(xpath="//input[@id='txtPaymentDiscountRemarks']")
	  private static WebElement pdRemarksTxt;
	   
	  @FindBy(xpath="//input[@id='chkCombineWithOtherSchemesPymnt']")
	  private static WebElement pdSchCombineWithOtherSchemesChkbox;
	   
	  @FindBy(xpath="//input[@id='rbtPaymentDiscountPercentage']")
	  private static WebElement pdPercentageRadio;
	   
	  @FindBy(xpath="//input[@id='rbtPaymentDiscountValue']")
	  private static WebElement pdValueRadio;
	  
	  @FindBy(xpath="//input[@id='txtPaymentDiscountValue']")
	  private static WebElement pdSchDiscountTxt;
	  
	   

	   
	  @FindBy(xpath="//input[@id='chkShowProduct']")
	  private static WebElement pdSchShowItemChkbox;
	   
	  @FindBy(xpath="//select[@id='ddlTreeTypeOption']")
	  private static WebElement pdSchShowItemDefaultDrpdwn;
	  
	  @FindBy(xpath="//input[@id='txtSearch']")
	  private static WebElement pdSchSearchTxt;
	  
	  @FindBy(xpath="//*[@id='divSearchTextOptionRow']/div[2]/div/div[1]/div/div[1]/div/span")
	  private static WebElement pdSchSearchBtn;
	   
	  @FindBy(xpath="//select[@id='ddlSearchByField']")
	  private static WebElement pdSchShowItemByNameDrpdwn;
	   
	  @FindBy(xpath="//select[@id='ddlSearchBy']")
	  private static WebElement pdSchShowItemByItemDrpdwn;
	   
	  
	 @FindBy(xpath="//*[@id='tbodyPaymentDiscount']/tr/td")
	 private static List<WebElement> pdSchbodyGridList;
	 
	 @FindBy(xpath="//*[@id='divProductTree']/ul/li/a")
	 private static List<WebElement> selectItemList;
	 
	 

	 @FindBy(xpath="//*[@id='divMessageModalFooter']/div/div/div[1]/div[1]")
	 private static WebElement yesBtn;
	  


	   
	  @FindBy(xpath="//a[@id='8002']")
	  private static WebElement homeMasterSchMenu;
	   
	  @FindBy(xpath="//*[@id='8012']")
	  private static WebElement schSchemeMenu;
	   
	  @FindBy(xpath="//a[@id='8013']")
	  private static WebElement schFreeItemMenu;
	   
	  @FindBy(xpath="//a[@id='8015']")
	  private static WebElement schDiscountMenu;
	  
	  @FindBy(xpath="//a[@id='8016']")
	  private static WebElement paymentDiscountMenu;
	  
	  @FindBy(xpath="//a[@id='8017']")
	  private static WebElement memberDiscountMenu;
	  
	  @FindBy(xpath="//a[@id='8018']")
	  private static WebElement employeeDiscountMenu;
	   
	  @FindBy(xpath="//a[@id='8039']")
	  private static WebElement schSchMappingToCutomersMenu;
	   
	  
	  
	  public boolean checkDiscountDefintionseMenuInMasters() throws EncryptedDocumentException, InvalidFormatException, IOException
	  {
		  
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
				homeMenu.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
				mastersMenu.click();
				
	           Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterSchMenu));
				homeMasterSchMenu.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscountMenu));
				schDiscountMenu.click();
				
				Thread.sleep(2000);
				
				boolean actpaymentDiscountMenu      = paymentDiscountMenu.isDisplayed();
				boolean actmemberDiscountMenu       = memberDiscountMenu.isDisplayed();
				boolean actemployeeDiscountMenu     = employeeDiscountMenu.isDisplayed();
				
				
				boolean exppaymentDiscountMenu      = true;
				boolean expmemberDiscountMenu       = true;
				boolean expemployeeDiscountMenu     = true;
				
				System.out.println("paymentDiscountMenu  : "+actpaymentDiscountMenu  +" Value Expected : "+exppaymentDiscountMenu);
				System.out.println("memberDiscountMenu   : "+actmemberDiscountMenu   +" Value Expected : "+expmemberDiscountMenu);
				System.out.println("employeeDiscountMenu : "+actemployeeDiscountMenu +" Value Expected : "+expemployeeDiscountMenu);
				
				if(actpaymentDiscountMenu==exppaymentDiscountMenu && actmemberDiscountMenu==expmemberDiscountMenu 
						&& actemployeeDiscountMenu==expemployeeDiscountMenu)
				{
					System.out.println(" Test Pass : Displayed Menus Under Scheme In Masters ");
					return true;
				}
				else
				{
					System.out.println(" Test Fail:  Displayed Menus Under Scheme In Masters ");
					return false;
				}
			}
			catch (Exception e) 
			{
				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			}
	  }
	  
	  
	  public boolean checkPaymentDiscountHomePageOptions() throws InterruptedException
	  {
		    Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentDiscountMenu));	
			paymentDiscountMenu.click();
			     
			Thread.sleep(3000);
			
			boolean actpdSchAddBtn                        = pdSchAddBtn.isDisplayed();
			boolean actpdSchSaveBtn                       = pdSchSaveBtn.isDisplayed();
			boolean actpdSchDeleteBtn                     = pdSchDeleteBtn.isDisplayed();
			boolean actpdSchClearBtn                      = pdSchClearBtn.isDisplayed();
			boolean actpdSchCloseBtn                      = pdSchCloseBtn.isDisplayed();
			boolean actpdSchNameTxt                       = pdSchNameTxt.isDisplayed();
			boolean actpdSchTypeDrpdwn                    = pdSchTypeDrpdwn.isDisplayed();
			boolean actpdSchFromDateTxt                   = pdSchFromDateTxt.isDisplayed();
			boolean actpdSchFromDateCalendarBtn           = pdSchFromDateCalendarBtn.isDisplayed();
			boolean actpdSchFromTimeTxt                   = pdSchFromTimeTxt.isDisplayed();
			boolean actpdSchToDateTxt                     = pdSchToDateTxt.isDisplayed();
			boolean actpdSchToDateCalendarBtn             = pdSchToDateCalendarBtn.isDisplayed();
			boolean actpdSchToTimeTxt                     = pdSchToTimeTxt.isDisplayed();
			boolean actpdSchOutletsTxt                    = pdSchOutletsTxt.isDisplayed();
			boolean actpdschLoadOutletbtn                 = pdschLoadOutletbtn.isDisplayed();
			boolean actpdSchDaysTxt                       = pdSchDaysTxt.isDisplayed();
			boolean actpdpaymentTypeDropDown              = pdpaymentTypeDropDown.isDisplayed();
			boolean actpdRemarksTxt                       = pdRemarksTxt.isDisplayed();
			boolean actpdSchCombineWithOtherSchemesChkbox = pdSchCombineWithOtherSchemesChkbox.isDisplayed();
			boolean actpdPercentageRadio                  = pdPercentageRadio.isDisplayed();
			boolean actpdValueRadio                       = pdValueRadio.isDisplayed();
			boolean actpdSchDiscountTxt                   = pdSchDiscountTxt.isDisplayed();
			boolean actpdSchShowItemChkbox                = pdSchShowItemChkbox.isDisplayed();
			boolean actpdSchShowItemDefaultDrpdwn         = pdSchShowItemDefaultDrpdwn.isDisplayed();
			boolean actpdSchSearchTxt                     = pdSchSearchTxt.isDisplayed();
			boolean actpdSchSearchBtn                     = pdSchSearchBtn.isDisplayed();
			boolean actpdSchShowItemByNameDrpdwn          = pdSchShowItemByNameDrpdwn.isDisplayed();
			boolean actpdSchShowItemByItemDrpdwn          = pdSchShowItemByItemDrpdwn.isDisplayed();

			
			int selectItemListCount = selectItemList.size();
			
			ArrayList<String> selectItemListArray = new ArrayList<String>();
			
			for(int i=0;i<selectItemListCount;i++)
			{
				String data = selectItemList.get(i).getText();
				
				if (i!=selectItemListCount-1) 
                {
                        int temp=i+1;
                        JavascriptExecutor js = (JavascriptExecutor) getDriver();
                        js.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
                }
				
				selectItemListArray.add(data);
			}
			
			String actselectItemList = selectItemListArray.toString();
			String expselectItemList = "[ITEMS GROUP, STOCK ITEM Pcs -- SI - ? 0, BATCH WA ITEM Pcs -- BWI - ? 0, BATCH IGNORE EXP LIFO ITEM Pcs -- BATCH IGNORE EXP LIFO ITEM - ? 0, BATCH FIFO ITEM -- BATCH FIFO ITEM - ? 0, BATCH BR ITEM Pcs -- BATCH BR ITEM - ? 0, BIN RAW MATERIAL ITEM Pcs -- BRMI - ? 0, BIN FINISHED GOODS ITEM Pcs -- BFGI - ? 0, BATCH BIN FINISHED GOODS ITEM Pcs -- BBFGI - ? 0, BATCH BIN WITH NO STOCK UPDATE ITEM Pcs -- BBWNOSUI - ? 0, BATCH BIN WITH NO RESERVATION ITEM Pcs -- BBWNRI - ? 0, RMA RITEM Pcs -- RMA RITEM - ? 0, RMA BATCH ITEM Pcs -- RMA BATCH ITEM - ? 0, WA COGS ITEM Pcs -- WA COGS ITEM - ? 0, FIFO COGS ITEM Pcs -- FIFO COGS ITEM - ? 0, BR COGS ITEM Pcs -- BR COGS ITEM - ? 0, STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0, Trail Item Update Pcs -- Trail Item Update - ? 0]";
			
			System.out.println("actselectItemList : "+actselectItemList);
			System.out.println("expselectItemList : "+expselectItemList);
			
			
			boolean exppdSchAddBtn                        = true;
			boolean exppdSchSaveBtn                       = true;
			boolean exppdSchDeleteBtn                     = true;
			boolean exppdSchClearBtn                      = true;
			boolean exppdSchCloseBtn                      = true;
			boolean exppdSchNameTxt                       = true;
			boolean exppdSchTypeDrpdwn                    = true;
			boolean exppdSchFromDateTxt                   = true;
			boolean exppdSchFromDateCalendarBtn           = true;
			boolean exppdSchFromTimeTxt                   = true;
			boolean exppdSchToDateTxt                     = true;
			boolean exppdSchToDateCalendarBtn             = true;
			boolean exppdSchToTimeTxt                     = true;
			boolean exppdSchOutletsTxt                    = true;
			boolean exppdschLoadOutletbtn                 = true;
			boolean exppdSchDaysTxt                       = true;
			boolean exppdpaymentTypeDropDown              = true;
			boolean exppdRemarksTxt                       = true;
			boolean exppdSchCombineWithOtherSchemesChkbox = true;
			boolean exppdPercentageRadio                  = true;
			boolean exppdValueRadio                       = true;
			boolean exppdSchDiscountTxt                   = true;
			boolean exppdSchShowItemChkbox                = true;
			boolean exppdSchShowItemDefaultDrpdwn         = true;
			boolean exppdSchSearchTxt                     = true;
			boolean exppdSchSearchBtn                     = true;
			boolean exppdSchShowItemByNameDrpdwn          = true;
			boolean exppdSchShowItemByItemDrpdwn          = true;
			
			System.out.println("pdSchAddBtn                          : "+actpdSchAddBtn           +" Value Expected : "+exppdSchAddBtn);
			System.out.println("pdSchSaveBtn                         : "+actpdSchSaveBtn           +" Value Expected : "+exppdSchSaveBtn);
			System.out.println("pdSchDeleteBtn                       : "+actpdSchDeleteBtn          +" Value Expected : "+exppdSchDeleteBtn);
			System.out.println("pdSchClearBtn                        : "+actpdSchClearBtn          +" Value Expected : "+exppdSchClearBtn);
			System.out.println("pdSchCloseBtn                        : "+actpdSchCloseBtn            +" Value Expected : "+exppdSchCloseBtn);
			System.out.println("pdSchNameTxt                         : "+actpdSchNameTxt            +" Value Expected : "+exppdSchNameTxt);
			System.out.println("pdSchTypeDrpdwn                      : "+actpdSchTypeDrpdwn           +" Value Expected : "+exppdSchTypeDrpdwn);
			System.out.println("pdSchFromDateTxt                     : "+actpdSchFromDateTxt        +" Value Expected : "+exppdSchFromDateTxt);
			System.out.println("pdSchFromDateCalendarBtn             : "+actpdSchFromDateCalendarBtn              +" Value Expected : "+exppdSchFromDateCalendarBtn);
			System.out.println("pdSchFromTimeTxt                     : "+actpdSchFromTimeTxt         +" Value Expected : "+exppdSchFromTimeTxt);
			System.out.println("pdSchToDateTxt                       : "+actpdSchToDateTxt+" Value Expected : "+exppdSchToDateTxt);
			System.out.println("pdSchToDateCalendarBtn               : "+actpdSchToDateCalendarBtn+" Value Expected : "+exppdSchToDateCalendarBtn);
			System.out.println("pdSchToTimeTxt                       : "+actpdSchToTimeTxt          +" Value Expected : "+exppdSchToTimeTxt);
			System.out.println("pdSchOutletsTxt                      : "+actpdSchOutletsTxt             +" Value Expected : "+exppdSchOutletsTxt);
			System.out.println("pdschLoadOutletbtn                   : "+actpdschLoadOutletbtn   +" Value Expected : "+exppdschLoadOutletbtn);
			System.out.println("pdSchDaysTxt                         : "+actpdSchDaysTxt     +" Value Expected : "+exppdSchDaysTxt);
			System.out.println("pdpaymentTypeDropDown                : "+actpdpaymentTypeDropDown        +" Value Expected : "+exppdpaymentTypeDropDown);
			System.out.println("pdRemarksTxt                         : "+actpdRemarksTxt        +" Value Expected : "+exppdRemarksTxt);
			System.out.println("pdSchCombineWithOtherSchemesChkbox   : "+actpdSchCombineWithOtherSchemesChkbox        +" Value Expected : "+exppdSchCombineWithOtherSchemesChkbox);
			System.out.println("pdPercentageRadio                    : "+actpdPercentageRadio        +" Value Expected : "+exppdPercentageRadio);
			System.out.println("pdValueRadio                         : "+actpdValueRadio        +" Value Expected : "+exppdValueRadio);
			System.out.println("pdSchDiscountTxt                     : "+actpdSchDiscountTxt        +" Value Expected : "+exppdSchDiscountTxt);
			System.out.println("pdSchShowItemChkbox                  : "+actpdSchShowItemChkbox        +" Value Expected : "+exppdSchShowItemChkbox);
			System.out.println("pdSchShowItemDefaultDrpdwn           : "+actpdSchShowItemDefaultDrpdwn        +" Value Expected : "+exppdSchShowItemDefaultDrpdwn);
			System.out.println("pdSchSearchTxt                       : "+actpdSchSearchTxt        +" Value Expected : "+exppdSchSearchTxt);
			System.out.println("pdSchSearchBtn                       : "+actpdSchSearchBtn        +" Value Expected : "+exppdSchSearchBtn);
			System.out.println("pdSchShowItemByNameDrpdwn            : "+actpdSchShowItemByNameDrpdwn        +" Value Expected : "+exppdSchShowItemByNameDrpdwn);
			System.out.println("pdSchShowItemByItemDrpdwn            : "+actpdSchShowItemByItemDrpdwn        +" Value Expected : "+exppdSchShowItemByItemDrpdwn);
			
			
			if(actpdSchAddBtn==exppdSchAddBtn && actpdSchSaveBtn==exppdSchSaveBtn && actpdSchDeleteBtn==exppdSchDeleteBtn &&  actpdSchClearBtn==exppdSchClearBtn
					&& actpdSchCloseBtn==exppdSchCloseBtn && actpdSchNameTxt==exppdSchNameTxt && actpdSchTypeDrpdwn==exppdSchTypeDrpdwn && actpdSchFromDateTxt==exppdSchFromDateTxt
					&& actpdSchFromDateCalendarBtn==exppdSchFromDateCalendarBtn && actpdSchFromTimeTxt==exppdSchFromTimeTxt && actpdSchToDateTxt==exppdSchToDateTxt
					&& actpdSchToDateCalendarBtn==exppdSchToDateCalendarBtn && actpdSchToTimeTxt==exppdSchToTimeTxt && actpdSchOutletsTxt==exppdSchOutletsTxt
					&& actpdschLoadOutletbtn==exppdschLoadOutletbtn && actpdSchDaysTxt==exppdSchDaysTxt && actpdpaymentTypeDropDown==exppdpaymentTypeDropDown 
					&& actpdRemarksTxt==exppdRemarksTxt && actpdSchCombineWithOtherSchemesChkbox==exppdSchCombineWithOtherSchemesChkbox && actpdPercentageRadio==exppdPercentageRadio
					&& actpdValueRadio==exppdValueRadio && actpdSchDiscountTxt==exppdSchDiscountTxt && actpdSchShowItemChkbox==exppdSchShowItemChkbox 
					&& actpdSchShowItemDefaultDrpdwn==exppdSchShowItemDefaultDrpdwn && actpdSchSearchTxt==exppdSchSearchTxt && actpdSchSearchBtn==exppdSchSearchBtn
					&& actpdSchShowItemByNameDrpdwn==exppdSchShowItemByNameDrpdwn && actpdSchShowItemByItemDrpdwn==exppdSchShowItemByItemDrpdwn
					
					&& actselectItemList.equalsIgnoreCase(expselectItemList))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	  
	  
	public boolean checkSavingPaymentDiscountWithDifferentDiscountTypesOnBill() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		 try
		{
			getAction().sendKeys(Keys.PAGE_UP).build().perform();
			
		 
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys("PD ON BILL");
			pdSchNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchTypeDrpdwn));
			Select pdSchTypeDrpdwnSelect = new Select(pdSchTypeDrpdwn);
			pdSchTypeDrpdwnSelect.selectByVisibleText("On Bill");
			
			Calendar calendar = Calendar.getInstance();
			
		    calendar.add(Calendar.DATE, 5);
		
		    Date date = calendar.getTime();
		
		    DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
		    
		    System.out.println(dfr.format(date).toString());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchToDateTxt));
			pdSchToDateTxt.click();
			pdSchToDateTxt.sendKeys(Keys.END);
			pdSchToDateTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchToDateTxt.sendKeys(dfr.format(date).toString());
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			int pdSchOutletListCount = pdSchOutletList.size();
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			Select pdpaymentTypeDropDownSelect = new Select(pdpaymentTypeDropDown);
			pdpaymentTypeDropDownSelect.selectByVisibleText(" Cash ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("CASH");
			
			
			if(pdPercentageRadio.isSelected()==false)
			{
				pdPercentageRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("2");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			// Credit Card
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			pdpaymentTypeDropDownSelect.selectByVisibleText(" Credit Card ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdCardTypeDropdown));
			Select pdCardTypeDropdownSelect = new Select(pdCardTypeDropdown);
			pdCardTypeDropdownSelect.selectByVisibleText("HDFC CreditCard");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdBankDropdown));
			Select pdBankDropdownSelect = new Select(pdBankDropdown);
			pdBankDropdownSelect.selectByVisibleText("Bank");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("Credit Card");
			
			
			if(pdValueRadio.isSelected()==false)
			{
				pdValueRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("20");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			// Debit Card
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			pdpaymentTypeDropDownSelect.selectByVisibleText(" Debit Card ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdCardTypeDropdown));
			pdCardTypeDropdownSelect.selectByVisibleText("ICICI DebitCard");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdBankDropdown));
			pdBankDropdownSelect.selectByVisibleText("Bank");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("Debit Card");
			
			
			if(pdPercentageRadio.isSelected()==false)
			{
				pdPercentageRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("10");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			// Gift Voucher
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") && pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			pdpaymentTypeDropDownSelect.selectByVisibleText(" Gift Voucher ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdGiftVoucherTypeDropdown));
			Select pdGiftVoucherTypeDropdownSelect = new Select(pdGiftVoucherTypeDropdown);
			pdGiftVoucherTypeDropdownSelect.selectByVisibleText("GiftVoucher1");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("GV");
			
			
			if(pdValueRadio.isSelected()==false)
			{
				pdValueRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("15");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			// Epayment
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") && pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			pdpaymentTypeDropDownSelect.selectByVisibleText(" E-Payment ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdEpaymentTypeDropdown));
			Select pdEpaymentTypeDropdownSelect = new Select(pdEpaymentTypeDropdown);
			pdEpaymentTypeDropdownSelect.selectByVisibleText("E-GooglePay");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("GPay");
			
			
			if(pdValueRadio.isSelected()==false)
			{
				pdValueRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("15");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSaveBtn));
			pdSchSaveBtn.click();
			
			String actPopupMessage = pointOfSalesConfirmationBodyMessage.getText();
			String expPopupMessage = "Are you sure to Save/Update?";
			
			System.out.println("PopupMessage : "+actPopupMessage+" Value Expected : "+expPopupMessage);
			
			posConfirmYesBtn.click();
			
			
			String expMessage = "Details Saved Successfully";
			String actMessage = toastMessage.getText();
			
			toastMessageCloseBtn.click();
			
			System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			
			if(actPopupMessage.equalsIgnoreCase(expPopupMessage) && actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println(" Test Pass : Displayed Menus Under Scheme In Masters ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail:  Displayed Menus Under Scheme In Masters ");
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	 }
		
  @FindBy(xpath="//*[@id='tbodyPaymentDiscount']/tr/td[1]/i[1]")
  private static List<WebElement> pdGridEditBtn;
  
  @FindBy(xpath="//*[@id='tbodyPaymentDiscount']/tr/td[3]")
  private static List<WebElement> pdGridPaymentTypeList;
	
	
	public boolean checkSavedPaymentDiscountOnBillAndUpdateIt() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		 try
		{
			
		 
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys("PD ON BILL");
			Thread.sleep(2000);
			pdSchNameTxt.sendKeys(Keys.TAB);
			
			int pdSchbodyGridListCount = pdSchbodyGridList.size();
			
			ArrayList<String> pdSchbodyGridListArray = new ArrayList<String>();
			
			for(int i=0;i<pdSchbodyGridListCount;i++)
			{
				String data = pdSchbodyGridList.get(i).getText();
				
				pdSchbodyGridListArray.add(data);
			}
			
			String actpdSchbodyGridList = pdSchbodyGridListArray.toString();
			String exppdSchbodyGridList = "[, Combine, Cash, , , , , 2, , CASH, , , Combine, Credit Card, HDFC CreditCard, Bank, , , 20, , Credit Card, , , Combine, Debit Card, ICICI DebitCard, Bank, , , 10, , Debit Card, , , Combine, Gift Voucher, , , GiftVoucher1, , 15, , GV, , , Combine, E-Payment, , , , E-GooglePay, 15, , GPay, ]";
			
			System.out.println("actpdSchbodyGridList : "+actpdSchbodyGridList);
			System.out.println("exppdSchbodyGridList : "+exppdSchbodyGridList);
			
			int pdGridPaymentTypeListCount = pdGridPaymentTypeList.size();
			
			for(int i=0;i<pdGridPaymentTypeListCount;i++)
			{
				String data = pdGridPaymentTypeList.get(i).getText();
				
				if(data.equalsIgnoreCase("Credit Card"))
				{
					pdGridEditBtn.get(i).click();
					
					break;
				}
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("10");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys(Keys.END);
			pdSchNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchNameTxt.sendKeys("PD ON BILL");
			Thread.sleep(2000);
			pdSchNameTxt.sendKeys(Keys.TAB);
			
			int pdSchbodyGridListCountUpdate = pdSchbodyGridList.size();
			
			ArrayList<String> pdSchbodyGridListArrayUpdate = new ArrayList<String>();
			
			for(int i=0;i<pdSchbodyGridListCountUpdate;i++)
			{
				String data = pdSchbodyGridList.get(i).getText();
				
				pdSchbodyGridListArrayUpdate.add(data);
			}
			
			String actpdSchbodyGridListUpdate = pdSchbodyGridListArray.toString();
			String exppdSchbodyGridListUpdate = "[, Combine, Cash, , , , , 2, , CASH, , , Combine, Credit Card, HDFC CreditCard, Bank, , , 20, , Credit Card, , , Combine, Debit Card, ICICI DebitCard, Bank, , , 10, , Debit Card, , , Combine, Gift Voucher, , , GiftVoucher1, , 15, , GV, , , Combine, E-Payment, , , , E-GooglePay, 15, , GPay, ]";
			
			System.out.println("actpdSchbodyGridListUpdate : "+actpdSchbodyGridListUpdate);
			System.out.println("exppdSchbodyGridListUpdate : "+exppdSchbodyGridListUpdate);	
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSaveBtn));
			pdSchSaveBtn.click();
			
			String actPopupMessage = pointOfSalesConfirmationBodyMessage.getText();
			String expPopupMessage = "Are you sure to Save/Update?";
			
			System.out.println("PopupMessage : "+actPopupMessage+" Value Expected : "+expPopupMessage);
			
			posConfirmYesBtn.click();
			
			
			String expMessage = "Details Updated Successfully";
			String actMessage = toastMessage.getText();
			
			toastMessageCloseBtn.click();
			
			System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			
			
			if(actpdSchbodyGridList.equalsIgnoreCase(exppdSchbodyGridList) && actpdSchbodyGridListUpdate.equalsIgnoreCase(exppdSchbodyGridListUpdate)
					&& actPopupMessage.equalsIgnoreCase(expPopupMessage) && actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println(" Test Pass : Displayed Menus Under Scheme In Masters ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail:  Displayed Menus Under Scheme In Masters ");
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
		
	 }
	
	@FindBy(xpath="//*[@id='tbodyPaymentDiscount']")
	private static WebElement pdSchbodyGridEmpty;
	
	public boolean checkUpdatedPaymentDiscountOnBillAndCheckClearOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			getAction().sendKeys(Keys.PAGE_UP).build().perform();
		 
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys(Keys.END);
			pdSchNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchNameTxt.sendKeys("PD ON BILL");
			Thread.sleep(2000);
			pdSchNameTxt.sendKeys(Keys.TAB);
			
			int pdSchbodyGridListCount = pdSchbodyGridList.size();
			
			ArrayList<String> pdSchbodyGridListArray = new ArrayList<String>();
			
			for(int i=0;i<pdSchbodyGridListCount;i++)
			{
				String data = pdSchbodyGridList.get(i).getText();
				
				pdSchbodyGridListArray.add(data);
			}
			
			String actpdSchbodyGridList = pdSchbodyGridListArray.toString();
			String exppdSchbodyGridList = "[, Combine, Cash, , , , , 2, , CASH, , , Combine, Credit Card, HDFC CreditCard, Bank, , , 10, , Credit Card, , , Combine, Debit Card, ICICI DebitCard, Bank, , , 10, , Debit Card, , , Combine, Gift Voucher, , , GiftVoucher1, , 15, , GV, , , Combine, E-Payment, , , , E-GooglePay, 15, , GPay, ]";
			
			System.out.println("actpdSchbodyGridList : "+actpdSchbodyGridList);
			System.out.println("exppdSchbodyGridList : "+exppdSchbodyGridList);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchClearBtn));
			pdSchClearBtn.click();
			
			String actPopupMessage = pointOfSalesConfirmationBodyMessage.getText();
			String expPopupMessage = "Are you sure to Clear?";
			
			System.out.println("PopupMessage : "+actPopupMessage+" Value Expected : "+expPopupMessage);
			
			posConfirmYesBtn.click();
			
			boolean actpdSchbodyGridEmpty = pdSchbodyGridEmpty.getText().isEmpty();
			boolean exppdSchbodyGridEmpty = true;
			
			System.out.println("pdSchbodyGridEmpty : "+actpdSchbodyGridEmpty+" Value Expected : "+exppdSchbodyGridEmpty);
			
			
			if(actpdSchbodyGridList.equalsIgnoreCase(exppdSchbodyGridList) && actpdSchbodyGridEmpty==exppdSchbodyGridEmpty
					&& actPopupMessage.equalsIgnoreCase(expPopupMessage))
			{
				System.out.println(" Test Pass : Displayed Menus Under Scheme In Masters ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail:  Displayed Menus Under Scheme In Masters ");
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	 }
	
	
	
	@FindBy(xpath="//div[@id='divProductSearchTree']/ul/li/a/i[1]")
	private static List<WebElement> itemPopupChkBoxList;
	
	@FindBy(xpath="//div[@id='divProductSearchTree']/ul/li/a")
	private static List<WebElement> itemPopupNameList;
	
	@FindBy(xpath="//div[contains(text(),'Ok')]")
	private static WebElement itemPopupOkBtn;
	
	public boolean checkSavingPaymentDiscountWithDifferentDiscountTypesOnItem() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			getAction().sendKeys(Keys.PAGE_UP).build().perform();
			
		 
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys(Keys.END);
			pdSchNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchNameTxt.sendKeys("PD ON ITEM");
			pdSchNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchTypeDrpdwn));
			Select pdSchTypeDrpdwnSelect = new Select(pdSchTypeDrpdwn);
			pdSchTypeDrpdwnSelect.selectByVisibleText("On Item");
			
			Calendar calendar = Calendar.getInstance();
			
		    calendar.add(Calendar.DATE, 5);
		
		    Date date = calendar.getTime();
		
		    DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
		    
		    System.out.println(dfr.format(date).toString());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchToDateTxt));
			pdSchToDateTxt.click();
			pdSchToDateTxt.sendKeys(Keys.END);
			pdSchToDateTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchToDateTxt.sendKeys(dfr.format(date).toString());
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			int pdSchOutletListCount = pdSchOutletList.size();
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			Select pdpaymentTypeDropDownSelect = new Select(pdpaymentTypeDropDown);
			pdpaymentTypeDropDownSelect.selectByVisibleText(" Cash ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("CASH");
			
			
			if(pdPercentageRadio.isSelected()==false)
			{
				pdPercentageRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("2");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSearchTxt));
			pdSchSearchTxt.click();
			pdSchSearchTxt.sendKeys(Keys.END);
			pdSchSearchTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchSearchTxt.sendKeys("STD RATE COGS ITEM");
			pdSchSearchTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSearchBtn));
			pdSchSearchBtn.click();
			
			Thread.sleep(2000);
			
			int itemPopupNameListCount = itemPopupNameList.size();
			
			for(int i=0;i<itemPopupNameListCount;i++)
			{
				String data = itemPopupNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					itemPopupChkBoxList.get(i).click();
					
					break;
				}
			}
			
			itemPopupOkBtn.click();
			
			
			getAction().sendKeys(Keys.PAGE_UP).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			// Credit Card
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			pdpaymentTypeDropDownSelect.selectByVisibleText(" Credit Card ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdCardTypeDropdown));
			Select pdCardTypeDropdownSelect = new Select(pdCardTypeDropdown);
			pdCardTypeDropdownSelect.selectByVisibleText("HDFC CreditCard");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdBankDropdown));
			Select pdBankDropdownSelect = new Select(pdBankDropdown);
			pdBankDropdownSelect.selectByVisibleText("Bank");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("Credit Card");
			
			
			if(pdValueRadio.isSelected()==false)
			{
				pdValueRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("20");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSearchTxt));
			pdSchSearchTxt.click();
			pdSchSearchTxt.sendKeys(Keys.END);
			pdSchSearchTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchSearchTxt.sendKeys("STD RATE COGS ITEM");
			pdSchSearchTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSearchBtn));
			pdSchSearchBtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<itemPopupNameListCount;i++)
			{
				String data = itemPopupNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					itemPopupChkBoxList.get(i).click();
					
					break;
				}
			}
			
			itemPopupOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			// Debit Card
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") && pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			pdpaymentTypeDropDownSelect.selectByVisibleText(" Debit Card ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdCardTypeDropdown));
			pdCardTypeDropdownSelect.selectByVisibleText("ICICI DebitCard");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdBankDropdown));
			pdBankDropdownSelect.selectByVisibleText("Bank");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("Debit Card");
			
			
			if(pdPercentageRadio.isSelected()==false)
			{
				pdPercentageRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("10");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSearchTxt));
			pdSchSearchTxt.click();
			pdSchSearchTxt.sendKeys(Keys.END);
			pdSchSearchTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchSearchTxt.sendKeys("STD RATE COGS ITEM");
			pdSchSearchTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSearchBtn));
			pdSchSearchBtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<itemPopupNameListCount;i++)
			{
				String data = itemPopupNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					itemPopupChkBoxList.get(i).click();
					
					break;
				}
			}
			
			itemPopupOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			// Gift Voucher
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			pdpaymentTypeDropDownSelect.selectByVisibleText(" Gift Voucher ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdGiftVoucherTypeDropdown));
			Select pdGiftVoucherTypeDropdownSelect = new Select(pdGiftVoucherTypeDropdown);
			pdGiftVoucherTypeDropdownSelect.selectByVisibleText("GiftVoucher1");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("GV");
			
			
			if(pdValueRadio.isSelected()==false)
			{
				pdValueRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("15");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSearchTxt));
			pdSchSearchTxt.click();
			pdSchSearchTxt.sendKeys(Keys.END);
			pdSchSearchTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchSearchTxt.sendKeys("STD RATE COGS ITEM");
			pdSchSearchTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSearchBtn));
			pdSchSearchBtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<itemPopupNameListCount;i++)
			{
				String data = itemPopupNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					itemPopupChkBoxList.get(i).click();
					
					break;
				}
			}
			
			itemPopupOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			// Epayment
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			pdpaymentTypeDropDownSelect.selectByVisibleText(" E-Payment ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdEpaymentTypeDropdown));
			Select pdEpaymentTypeDropdownSelect = new Select(pdEpaymentTypeDropdown);
			pdEpaymentTypeDropdownSelect.selectByVisibleText("E-GooglePay");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("GPay");
			
			
			if(pdValueRadio.isSelected()==false)
			{
				pdValueRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("15");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSearchTxt));
			pdSchSearchTxt.click();
			pdSchSearchTxt.sendKeys(Keys.END);
			pdSchSearchTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchSearchTxt.sendKeys("STD RATE COGS ITEM");
			pdSchSearchTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSearchBtn));
			pdSchSearchBtn.click();
			
			Thread.sleep(2000);
			
			
			for(int i=0;i<itemPopupNameListCount;i++)
			{
				String data = itemPopupNameList.get(i).getText();
				
				if(data.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					itemPopupChkBoxList.get(i).click();
					
					break;
				}
			}
			
			itemPopupOkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSaveBtn));
			pdSchSaveBtn.click();
			
			String actPopupMessage = pointOfSalesConfirmationBodyMessage.getText();
			String expPopupMessage = "Are you sure to Save/Update?";
			
			System.out.println("PopupMessage : "+actPopupMessage+" Value Expected : "+expPopupMessage);
			
			posConfirmYesBtn.click();
			
			
			String expMessage = "Details Saved Successfully";
			String actMessage = toastMessage.getText();
			
			toastMessageCloseBtn.click();
			
			System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			
			if(actPopupMessage.equalsIgnoreCase(expPopupMessage) && actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println(" Test Pass : Displayed Menus Under Scheme In Masters ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail:  Displayed Menus Under Scheme In Masters ");
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	 }
	
	
	
	
	public boolean checkSavedPaymentDiscountOnItemAndUpdateIt() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		 try
		{
			
		 
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys(Keys.END);
			pdSchNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchNameTxt.sendKeys("PD ON ITEM");
			Thread.sleep(2000);
			pdSchNameTxt.sendKeys(Keys.TAB);
			
			int pdSchbodyGridListCount = pdSchbodyGridList.size();
			
			ArrayList<String> pdSchbodyGridListArray = new ArrayList<String>();
			
			for(int i=0;i<pdSchbodyGridListCount;i++)
			{
				String data = pdSchbodyGridList.get(i).getText();
				
				pdSchbodyGridListArray.add(data);
			}
			
			String actpdSchbodyGridList = pdSchbodyGridListArray.toString();
			String exppdSchbodyGridList = "[, Combine, Cash, , , , , 2, 20, CASH, , , Combine, Credit Card, HDFC CreditCard, Bank, , , 20, 20, Credit Card, , , Combine, Debit Card, ICICI DebitCard, Bank, , , 10, 20, Debit Card, , , Combine, Gift Voucher, , , GiftVoucher1, , 15, 20, GV, , , Combine, E-Payment, , , , E-GooglePay, 15, 20, GPay, ]";
			
			System.out.println("actpdSchbodyGridList : "+actpdSchbodyGridList);
			System.out.println("exppdSchbodyGridList : "+exppdSchbodyGridList);
			
			int pdGridPaymentTypeListCount = pdGridPaymentTypeList.size();
			
			for(int i=0;i<pdGridPaymentTypeListCount;i++)
			{
				String data = pdGridPaymentTypeList.get(i).getText();
				
				if(data.equalsIgnoreCase("Credit Card"))
				{
					pdGridEditBtn.get(i).click();
					
					break;
				}
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("10");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys(Keys.END);
			pdSchNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchNameTxt.sendKeys("PD ON BILL");
			Thread.sleep(2000);
			pdSchNameTxt.sendKeys(Keys.TAB);
			
			int pdSchbodyGridListCountUpdate = pdSchbodyGridList.size();
			
			ArrayList<String> pdSchbodyGridListArrayUpdate = new ArrayList<String>();
			
			for(int i=0;i<pdSchbodyGridListCountUpdate;i++)
			{
				String data = pdSchbodyGridList.get(i).getText();
				
				pdSchbodyGridListArrayUpdate.add(data);
			}
			
			String actpdSchbodyGridListUpdate = pdSchbodyGridListArray.toString();
			String exppdSchbodyGridListUpdate = "[, Combine, Cash, , , , , 2, 20, CASH, , , Combine, Credit Card, HDFC CreditCard, Bank, , , 20, 20, Credit Card, , , Combine, Debit Card, ICICI DebitCard, Bank, , , 10, 20, Debit Card, , , Combine, Gift Voucher, , , GiftVoucher1, , 15, 20, GV, , , Combine, E-Payment, , , , E-GooglePay, 15, 20, GPay, ]";
			
			System.out.println("actpdSchbodyGridListUpdate : "+actpdSchbodyGridListUpdate);
			System.out.println("exppdSchbodyGridListUpdate : "+exppdSchbodyGridListUpdate);	
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSaveBtn));
			pdSchSaveBtn.click();
			
			String actPopupMessage = pointOfSalesConfirmationBodyMessage.getText();
			String expPopupMessage = "Are you sure to Save/Update?";
			
			System.out.println("PopupMessage : "+actPopupMessage+" Value Expected : "+expPopupMessage);
			
			posConfirmYesBtn.click();
			
			
			String expMessage = "Details Updated Successfully";
			String actMessage = toastMessage.getText();
			
			toastMessageCloseBtn.click();
			
			System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			
			
			if(actpdSchbodyGridList.equalsIgnoreCase(exppdSchbodyGridList) && actpdSchbodyGridListUpdate.equalsIgnoreCase(exppdSchbodyGridListUpdate)
					&& actPopupMessage.equalsIgnoreCase(expPopupMessage) && actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println(" Test Pass : Displayed Menus Under Scheme In Masters ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail:  Displayed Menus Under Scheme In Masters ");
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
		
	 }
	
	
	public boolean checkUpdatedPaymentDiscountOnItemAndCheckClearOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			getAction().sendKeys(Keys.PAGE_UP).build().perform();
		 
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys(Keys.END);
			pdSchNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchNameTxt.sendKeys("PD ON ITEM");
			Thread.sleep(2000);
			pdSchNameTxt.sendKeys(Keys.TAB);
			
			int pdSchbodyGridListCount = pdSchbodyGridList.size();
			
			ArrayList<String> pdSchbodyGridListArray = new ArrayList<String>();
			
			for(int i=0;i<pdSchbodyGridListCount;i++)
			{
				String data = pdSchbodyGridList.get(i).getText();
				
				pdSchbodyGridListArray.add(data);
			}
			
			String actpdSchbodyGridList = pdSchbodyGridListArray.toString();
			String exppdSchbodyGridList = "[, Combine, Cash, , , , , 2, 20, CASH, , , Combine, Credit Card, HDFC CreditCard, Bank, , , 20, 20, Credit Card, , , Combine, Debit Card, ICICI DebitCard, Bank, , , 10, 20, Debit Card, , , Combine, Gift Voucher, , , GiftVoucher1, , 15, 20, GV, , , Combine, E-Payment, , , , E-GooglePay, 15, 20, GPay, ]";
			
			System.out.println("actpdSchbodyGridList : "+actpdSchbodyGridList);
			System.out.println("exppdSchbodyGridList : "+exppdSchbodyGridList);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchClearBtn));
			pdSchClearBtn.click();
			
			String actPopupMessage = pointOfSalesConfirmationBodyMessage.getText();
			String expPopupMessage = "Are you sure to Clear?";
			
			System.out.println("PopupMessage : "+actPopupMessage+" Value Expected : "+expPopupMessage);
			
			posConfirmYesBtn.click();
			
			boolean actpdSchbodyGridEmpty = pdSchbodyGridEmpty.getText().isEmpty();
			boolean exppdSchbodyGridEmpty = true;
			
			System.out.println("pdSchbodyGridEmpty : "+actpdSchbodyGridEmpty+" Value Expected : "+exppdSchbodyGridEmpty);
			
			
			if(actpdSchbodyGridList.equalsIgnoreCase(exppdSchbodyGridList) && actpdSchbodyGridEmpty==exppdSchbodyGridEmpty
					&& actPopupMessage.equalsIgnoreCase(expPopupMessage))
			{
				System.out.println(" Test Pass : Displayed Menus Under Scheme In Masters ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail:  Displayed Menus Under Scheme In Masters ");
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	 }
	
	
	
	@FindBy(xpath="//*[@id='optPaymentSchemeName_table_data_body']/tr/td")
	private static List<WebElement> pdSchNameBodyList;
	
	public boolean checkSavingPaymentDiscountToDelete() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		 try
		{
			getAction().sendKeys(Keys.PAGE_UP).build().perform();
			
		 
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys(Keys.END);
			pdSchNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchNameTxt.sendKeys("To Delete");
			Thread.sleep(2000);
			pdSchNameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchTypeDrpdwn));
			Select pdSchTypeDrpdwnSelect = new Select(pdSchTypeDrpdwn);
			pdSchTypeDrpdwnSelect.selectByVisibleText("On Bill");
			
			Calendar calendar = Calendar.getInstance();
			
		    calendar.add(Calendar.DATE, 5);
		
		    Date date = calendar.getTime();
		
		    DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
		    
		    System.out.println(dfr.format(date).toString());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchToDateTxt));
			pdSchToDateTxt.click();
			pdSchToDateTxt.sendKeys(Keys.END);
			pdSchToDateTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchToDateTxt.sendKeys(dfr.format(date).toString());
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdschLoadOutletbtn));
			pdschLoadOutletbtn.click();
			
			Thread.sleep(2000);
			
			int pdSchOutletListCount = pdSchOutletList.size();
			
			for(int i=0;i<pdSchOutletListCount;i++)
			{
				String data = pdSchOutletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				{
					pdSchOutletList.get(i).click();
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdoutletPopOkBtn));
			pdoutletPopOkBtn.click();
			
			if(pdSchCombineWithOtherSchemesChkbox.isSelected()==false)
			{
				pdSchCombineWithOtherSchemesChkbox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdpaymentTypeDropDown));
			Select pdpaymentTypeDropDownSelect = new Select(pdpaymentTypeDropDown);
			pdpaymentTypeDropDownSelect.selectByVisibleText(" Cash ");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdRemarksTxt));
			pdRemarksTxt.click();
			pdRemarksTxt.sendKeys("CASH");
			
			
			if(pdPercentageRadio.isSelected()==false)
			{
				pdPercentageRadio.click();
			}
			
			pdSchDiscountTxt.click();
			pdSchDiscountTxt.clear();
			pdSchDiscountTxt.sendKeys("2");
			pdSchDiscountTxt.sendKeys(Keys.TAB);
			
			getAction().sendKeys(Keys.PAGE_UP).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchAddBtn));
			pdSchAddBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchSaveBtn));
			pdSchSaveBtn.click();
			
			String actPopupMessage = pointOfSalesConfirmationBodyMessage.getText();
			String expPopupMessage = "Are you sure to Save/Update?";
			
			System.out.println("PopupMessage : "+actPopupMessage+" Value Expected : "+expPopupMessage);
			
			posConfirmYesBtn.click();
			
			
			String expMessage = "Details Saved Successfully";
			String actMessage = toastMessage.getText();
			
			toastMessageCloseBtn.click();
			
			System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			
			
			if(actPopupMessage.equalsIgnoreCase(expPopupMessage) && actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println(" Test Pass : Displayed Menus Under Scheme In Masters ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail:  Displayed Menus Under Scheme In Masters ");
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	 }
	
	
	public boolean checkDeletingPaymentDiscountToDeleteAndClose() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		 try
		{
			getAction().sendKeys(Keys.PAGE_UP).build().perform();
			
		 
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys(Keys.END);
			pdSchNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			pdSchNameTxt.sendKeys(Keys.SPACE);
			
			
			int pdSchNameBodyListCount = pdSchNameBodyList.size();
			
			for(int i=0;i<pdSchNameBodyListCount;i++)
			{
				String data = pdSchNameBodyList.get(i).getText();
				
				if(data.equalsIgnoreCase("To Delete"))
				{
					pdSchNameBodyList.get(i).click();
					
					break;
				}
			}
			
			pdSchNameTxt.sendKeys(Keys.TAB);
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchDeleteBtn));
			pdSchDeleteBtn.click();
			
			String actPopupMessage = pointOfSalesConfirmationBodyMessage.getText();
			String expPopupMessage = "Are you sure to Delete?";
			
			System.out.println("PopupMessage : "+actPopupMessage+" Value Expected : "+expPopupMessage);
			
			posConfirmYesBtn.click();
			
			getDriver().navigate().refresh();
			
			Thread.sleep(5000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
			
           Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterSchMenu));
			homeMasterSchMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(schDiscountMenu));
			schDiscountMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentDiscountMenu));
			paymentDiscountMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchNameTxt));
			pdSchNameTxt.click();
			pdSchNameTxt.sendKeys(Keys.SPACE);
			
			
			int actpdSchNameBodyList = pdSchNameBodyList.size();
			int exppdSchNameBodyList = 2;
			
			System.out.println("pdSchNameBodyList : "+actpdSchNameBodyList+" value Expected : "+exppdSchNameBodyList);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdSchCloseBtn));
			pdSchCloseBtn.click();
			
			
			if(actPopupMessage.equalsIgnoreCase(expPopupMessage) && actpdSchNameBodyList==exppdSchNameBodyList)
			{
				System.out.println(" Test Pass : Displayed Menus Under Scheme In Masters ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail:  Displayed Menus Under Scheme In Masters ");
				return false;
			}
		}
		catch (Exception e) 
		{
			  String exception =e.getMessage();
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		}
	 }
	

	// POS Member Discount Elements

	@FindBy (xpath="//input[@id='optMemberSchemeName']")
	private static WebElement md_SchemeNameTxt;

	@FindBy (xpath="//select[@id='ddlSchemeTypeMem']")
	private static WebElement md_SchemeTypeDrpdwn;

	@FindBy (xpath="//input[@id='dtpFromDateMem']")
	private static WebElement md_FromDateTxt;

	@FindBy (xpath="//td[@id='dtpFromDateMem_input_image']/span")
	private static WebElement md_FromDateCalendarBtn;

	@FindBy (xpath="//input[@id='tpFromTimeMem']")
	private static WebElement md_FromTimeTxt;

	@FindBy (xpath="//input[@id='dtpToDateMem']")
	private static WebElement md_ToDateTxt;

	@FindBy (xpath="//td[@id='dtpToDateMem_input_image']/span")
	private static WebElement md_ToDateCalendarBtn;

	@FindBy (xpath="//input[@id='tpToTimeMem']")
	private static WebElement md_ToTimeTxt;

	@FindBy (xpath="//select[@id='ddlMemberTypeScheme']")
	private static WebElement md_MemberTypeDrpdwn;

	@FindBy (xpath="//input[@id='txtOutletsMem']")
	private static WebElement md_OutletsTxt;

	@FindBy (xpath="//button[@id='btnGetOutletsMem']")
	private static WebElement md_OutletsBtn;


	// Discount Applicable

	@FindBy (xpath="//input[@id='chkMemberSchemeNone']")
	private static WebElement md_NoneChkBox;

	@FindBy (xpath="//input[@id='chkMemberSchemeFirstPurchase']")
	private static WebElement md_FirstTimePurchaseChkBox;

	@FindBy (xpath="//input[@id='chkMemberSchemeRegular']")
	private static WebElement md_RegularChkBox;

	@FindBy (xpath="//input[@id='rbtMemberDiscountWeekly']")
	private static WebElement md_WeeklyRadio;

	@FindBy (xpath="//input[@id='rbtMemberDiscountMonthly']")
	private static WebElement md_MonthlyRadio;

	@FindBy (xpath="//input[@id='rbtMemberDiscountOverAll']")
	private static WebElement md_OverAllRadioBtn;

	@FindBy (xpath="//input[@id='txtMemberDiscountTimes']")
	private static WebElement md_DiscTimes;

	@FindBy (xpath="//input[@id='chkCombineWithOtherSchemesMem']")
	private static WebElement md_CombinewithOtherChkbox;

	@FindBy (xpath="//*[@id='theadMemberDiscountDetails']/tr/th")
	private static List<WebElement> md_BodyGridHeaderList;

	@FindBy (xpath="//*[@id='tbodyMemberDiscount']/tr/td")
	private static List<WebElement> md_BodyGridList;

	@FindBy (xpath="//input[@id='txtMemberDiscountRemarks']")
	private static WebElement md_RemarksTxt;


	@FindBy (xpath="//input[@id='txtMemberDiscountValue']")
	private static WebElement md_DiscountTxt;

	@FindBy (xpath="//input[@id='rbtMemberDiscountPercentage']")
	private static WebElement md_DicPercentageRadioBtn;


	@FindBy (xpath="//input[@id='rbtMemberDiscountValue']")
	private static WebElement md_DiscValueRadioBtn;

	@FindBy (xpath="//input[@id='chkShowProduct']")
	private static WebElement md_ShowItemChkbox;

	@FindBy (xpath="//*[@id='divProductTree']/ul/li/a")
	private static List<WebElement> md_ItemList;

	@FindBy (xpath="//*[@id='btnAddMemDiscount']")
	private static WebElement md_AddBtn;

	@FindBy (xpath="//*[@id='btnSaveMemDiscount']")
	private static WebElement md_SaveBtn;

	@FindBy (xpath="//*[@id='btnDeleteMemDiscount']")
	private static WebElement md_DeleteBtn;

	@FindBy (xpath="//*[@id='btnClearMemDiscount']")
	private static WebElement md_ClearBtn;

	@FindBy (xpath="//div[@id='btnCloneMemDiscount']")
	private static WebElement mdCloneBtn_;

	@FindBy (xpath="//*[@id='divMemberSchemesDiscountHeader']/div[2]/div[6]")
	private static WebElement md_CloseBtn;





	public boolean checkHomePageOptionsInMemberDiscount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
			System.out.println("******************checkHomePageOptionsInMemberDiscount Method Executed***************************************");
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
				
	        Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterSchMenu));
			homeMasterSchMenu.click();
				
		    Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountDefMenu));	
		    discountDefMenu.click();
			
		    
		    Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberDiscountMenu));	
			memberDiscountMenu.click();
			
		    
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_SchemeNameTxt));
			boolean actfi_SchNameDrpdwn    	 		   =md_SchemeNameTxt.isDisplayed();
			boolean actschTypeDrpdwn    	           =md_SchemeTypeDrpdwn.isDisplayed();
			boolean actschFromDateTxt 			       =md_FromDateTxt.isDisplayed();
			boolean actschFromTimeTxt 			       =md_ToDateTxt.isDisplayed();
			boolean actschToDateTxt 		           =md_MemberTypeDrpdwn.isDisplayed();
			boolean actschToTimeTxt 			       =md_OutletsBtn.isDisplayed();
			boolean actschOutletsTxt 		 	       =md_AddBtn.isDisplayed();
			boolean actschLoadOutletbtn                =md_NoneChkBox.isDisplayed();
			boolean actschDaysTxt    	 			   =md_CombinewithOtherChkbox.isDisplayed();
			
			
			boolean expfi_SchNameDrpdwn    	 			=true;      
			boolean expschTypeDrpdwn    				=true;
			boolean expschFromDateTxt 					=true;
			boolean expschFromTimeTxt 					=true;
			boolean expschToDateTxt 					=true;
			boolean expschToTimeTxt 					=true;
			boolean expschOutletsTxt 					=true;
			boolean expschLoadOutletbtn 				=true;
			boolean expschDaysTxt    	 				=true;
			
			System.out.println("fi_SchNameDrpdwn          : "+actfi_SchNameDrpdwn           +" Value Expected : "+expfi_SchNameDrpdwn);
			System.out.println("schTypeDrpdwn             : "+actschTypeDrpdwn           +" Value Expected : "+expschTypeDrpdwn);
			System.out.println("schFromDateTxt            : "+actschFromDateTxt          +" Value Expected : "+expschFromDateTxt);
			System.out.println("schFromTimeTxt            : "+actschFromTimeTxt          +" Value Expected : "+expschFromTimeTxt);
			System.out.println("schToDateTxt              : "+actschToDateTxt            +" Value Expected : "+expschToDateTxt);
			System.out.println("schToTimeTxt              : "+actschToTimeTxt            +" Value Expected : "+expschToTimeTxt);
			System.out.println("schOutletsTxt             : "+actschOutletsTxt           +" Value Expected : "+expschOutletsTxt);
			System.out.println("schLoadOutletbtn          : "+actschLoadOutletbtn        +" Value Expected : "+expschLoadOutletbtn);
			System.out.println("schDaysTxt                : "+actschDaysTxt              +" Value Expected : "+expschDaysTxt);
			
			
			ArrayList<String>md_BodyGridHeaderListArray=new ArrayList<String>();
			
			int actList=md_BodyGridHeaderList.size();
			
			for (int i = 0; i < actList; i++) 
			{
				String data=md_BodyGridHeaderList.get(i).getText();
				md_BodyGridHeaderListArray.add(data);
				
			}
			
			String actmd_BodyGridHeaderList=md_BodyGridHeaderListArray.toString();
			String expmd_BodyGridHeaderList="[, , Discount, Mandatory Items, Remarks, ]";
			
			System.out.println(" Actual md_BodyGridHeaderList   : "+actmd_BodyGridHeaderList);
			System.out.println(" Expected  md_BodyGridHeaderList: "+expmd_BodyGridHeaderList);
			
			if(actfi_SchNameDrpdwn==expfi_SchNameDrpdwn && actschTypeDrpdwn==expschTypeDrpdwn&& actschFromDateTxt==expschFromDateTxt
					&& actschFromTimeTxt==expschFromTimeTxt&& actschToDateTxt==expschToDateTxt && actschToTimeTxt==expschToTimeTxt
					&& actschOutletsTxt==expschOutletsTxt && actschLoadOutletbtn==expschLoadOutletbtn
					
					&& actschDaysTxt==expschDaysTxt && actmd_BodyGridHeaderList.equalsIgnoreCase(expmd_BodyGridHeaderList))
			{
				System.out.println(" Test Pass: Free item Screen Displayed ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail: Free item Screen Displayed ");
				return false;
			}
	}


	public boolean checkAddingMemberDiscountTypeOnBillWithGoldenType() throws InterruptedException
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_SchemeNameTxt));
		md_SchemeNameTxt.click();
		md_SchemeNameTxt.sendKeys("MemberDisOnBill");
		md_SchemeNameTxt.sendKeys(Keys.TAB);
		
		
		Select option=new Select(md_SchemeTypeDrpdwn);
		option.selectByVisibleText("On Bill");
		
		md_SchemeTypeDrpdwn.sendKeys(Keys.TAB);
		

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_FromDateTxt));
		md_FromDateTxt.click();
		md_FromDateTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		
		
		 DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		 Date date=new Date();
			
		 String docdate = df.format(date);  
		 Calendar c = Calendar.getInstance();
		 c.add(Calendar.DAY_OF_MONTH, 5);  
		
		 String FilterDate = df.format(c.getTime());  
		
		 System.out.println("df.format(date)  : "+df.format(date));
		 System.out.println("FilterDate  : "+FilterDate);
		  
		 md_FromDateTxt.sendKeys(df.format(date));
		 
		 md_FromDateTxt.sendKeys(Keys.TAB);
		
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_ToDateTxt));
		 md_ToDateTxt.click();
		 md_ToDateTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		 md_ToDateTxt.sendKeys(FilterDate);
		 Thread.sleep(2000);
		 md_ToDateTxt.sendKeys(Keys.TAB);
		 
		 Select option1=new Select(md_MemberTypeDrpdwn);
		 option1.selectByVisibleText("GoldMemberType");

		 md_MemberTypeDrpdwn.sendKeys(Keys.TAB);
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_OutletsBtn));
		 md_OutletsBtn.click();
		 
		 Thread.sleep(2000);
		 
		 int outletlistCount=outletList.size();
		 
		 for (int i = 0; i < outletlistCount; i++)
		 {
			String data=outletList.get(i).getText();
			
			if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
			{
				outletList.get(i).click();
				
				break;
			}
		 }

		 fi_OutletOkBtn.click();

		 
		 if (md_RegularChkBox.isSelected()==false) 
		 {
			 md_RegularChkBox.click();
		 }
		 if (md_WeeklyRadio.isSelected()==false) 
		 {
			 md_WeeklyRadio.click();
		 }
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_DiscTimes));
		 md_DiscTimes.click();
		 md_DiscTimes.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		 md_DiscTimes.sendKeys("2");
		 md_DiscTimes.sendKeys(Keys.TAB);
	     	 
		 
		 if (md_CombinewithOtherChkbox.isSelected()==false) 
		 {
			 md_CombinewithOtherChkbox.click();
		 }
		
		 md_RemarksTxt.click();
		 
		 md_RemarksTxt.sendKeys("DicWithGoldenMemberOnBill");
		 
		 md_RemarksTxt.sendKeys(Keys.TAB);

		 Thread.sleep(2000);
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_DicPercentageRadioBtn));
		 
		 if (md_DicPercentageRadioBtn.isSelected()==false) 
		 {
			 md_DicPercentageRadioBtn.click();
		 }
		
		 md_DiscountTxt.click();
		 md_DiscountTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	     md_DiscountTxt.sendKeys("2");
		 
		 md_DiscountTxt.sendKeys(Keys.TAB);
		 
		 
		ArrayList<String>selectItemListArray=new ArrayList<String>();
			
		int selectItemListCount=md_ItemList.size();
				
		System.out.println(" selectItemList  :  "+selectItemListCount);
				
		for (int i = 0; i < selectItemListCount; i++)
		{
				
			String data=md_ItemList.get(i).getText();
			System.out.println(" Data : "+data);	
			
			if (i!=selectItemListCount-1) 
			{
				int temp=i+1;
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
					
				js.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
			}
				
			if (data.equalsIgnoreCase("STOCK ITEM Pcs -- SI - ? 0"))
			{
				selectItemList.get(i).click();
					break;
				}
			}
			
			 
		Thread.sleep(2000);
			 
			 
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_AddBtn));
		md_AddBtn.click();
			
			 
		ArrayList<String>md_BodyGridListArray=new ArrayList<String>();
				
		int schbodyGidListCount=md_BodyGridList.size();
					
		System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
		for (int i = 0; i < schbodyGidListCount; i++)
		{
			String data=md_BodyGridList.get(i).getText();
					
			md_BodyGridListArray.add(data);
					
		}
				
				
		String actmd_BodyGridList=md_BodyGridListArray.toString();
		String expmd_BodyGridList="[, Combine, 2, , DicWithGoldenMemberOnBill, ]";
				
		System.err.println("  Actual    md_BodyGridList : "+actmd_BodyGridList);
		System.err.println("  Expected  md_BodyGridList : "+expmd_BodyGridList);
			
		 
		if (actmd_BodyGridList.equalsIgnoreCase(expmd_BodyGridList)) 
		{
			
			 System.out.println(" Test Pass: GoldMember Type Is Added SUccessfully");
			 return true;
		 } 
		 else 
		 {

			 System.out.println(" Test Fail: GoldMember Type Is Added SUccessfully");
			 return false;
		}
	}


	public boolean checkAddingMemberDiscountTypeOnBillWithSilverType() throws InterruptedException
	{
		
		Thread.sleep(3000);
		
		 Select option1=new Select(md_MemberTypeDrpdwn);
		 option1.selectByVisibleText("SilverMemberType");

		 md_MemberTypeDrpdwn.sendKeys(Keys.TAB);
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_OutletsBtn));
		 md_OutletsBtn.click();
		 
		 /*Thread.sleep(2000);
		 
		 int outletlistCount=outletList.size();
		 
		 for (int i = 0; i < outletlistCount; i++)
		 {
			String data=outletList.get(i).getText();
			
			if(data.equalsIgnoreCase("Outlet1") && outletList.get(i).isSelected()==false) 
			{
				Thread.sleep(2000);
				outletList.get(i).click();
			}
		 }*/

		 fi_OutletOkBtn.click();

		 
		 if (md_RegularChkBox.isSelected()==false) 
		 {
			 md_RegularChkBox.click();
		 }
		 if (md_WeeklyRadio.isSelected()==false) 
		 {
			 md_WeeklyRadio.click();
		 }
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_DiscTimes));
		 md_DiscTimes.click();
		 md_DiscTimes.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		 md_DiscTimes.sendKeys("4");
		 md_DiscTimes.sendKeys(Keys.TAB);
	     	 
		 
		 if (md_CombinewithOtherChkbox.isSelected()==false) 
		 {
			 md_CombinewithOtherChkbox.click();
		 }
		
		 md_RemarksTxt.click();
		 
		 md_RemarksTxt.sendKeys("DicWithSilverMemberOnBill");
		 
		 md_RemarksTxt.sendKeys(Keys.TAB);
		 
		 if (md_DicPercentageRadioBtn.isSelected()==false) 
		 {
			 md_DicPercentageRadioBtn.click();
		 }
		
		 md_DiscountTxt.click();
		 md_DiscountTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	     md_DiscountTxt.sendKeys("4");
		 
		 md_DiscountTxt.sendKeys(Keys.TAB);
		 
		 
		 
		 ArrayList<String>selectItemListArray=new ArrayList<String>();
			
			int selectItemListCount=md_ItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=md_ItemList.get(i).getText();
				
				System.out.println("Data  : "+data);
				
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js = (JavascriptExecutor) getDriver();
					
					js.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					System.out.println("11111");
					Thread.sleep(2000);
					selectItemList.get(i).click();
					System.out.println("11111");
					break;
				}
			}
			
			 
			 Thread.sleep(2000);
			 
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_AddBtn));
			 md_AddBtn.click();
			
			 
			 ArrayList<String>md_BodyGridListArray=new ArrayList<String>();
				
				int schbodyGidListCount=md_BodyGridList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=md_BodyGridList.get(i).getText();
					
					md_BodyGridListArray.add(data);
					
				}
				
				
			String actmd_BodyGridList=md_BodyGridListArray.toString();
			String expmd_BodyGridList="[, Combine, 2, , DicWithGoldenMemberOnBill, , , Combine, 4, 20, DicWithSilverMemberOnBill, ]";
				
			System.err.println("  Actual    md_BodyGridList : "+actmd_BodyGridList);
			System.err.println("  Expected  md_BodyGridList : "+expmd_BodyGridList);
			
		
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_OutletsBtn));
			 md_OutletsBtn.click();
			 
			 Thread.sleep(2000);
			 /*
			 int outletlistCount=outletList.size();
			 for (int i = 0; i < outletlistCount; i++)
			 {
				String data=outletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") && outletList.get(i).isSelected()==false) 
				{
					Thread.sleep(2000);
					outletList.get(i).click();
				}
			 }*/

			 fi_OutletOkBtn.click();

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_SaveBtn));
			md_SaveBtn.click();
			
			
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expMessage = "Details Saved Successfully";
	 		
			String actMessage = toastMessage.getText();
			
			toastMessageCloseBtn.click();
			
			System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_CloseBtn));
			md_CloseBtn.click();
			
		 
		 if (actmd_BodyGridList.equalsIgnoreCase(expmd_BodyGridList) && 
				 actMessage.equalsIgnoreCase(expMessage)) 
		 {
			
			 System.out.println(" Test Pass: Member Dic is Saved ");
			 return true;
		 } 
		 else 
		 {
			 System.out.println(" Test Fail: Member Dic is Saved ");
			 return false;

		}
	}




	public boolean checkAddingMemberDiscountTypeOnItemWithGoldenType() throws InterruptedException
	{
		
		
		System.out.println("******************checkAddingMemberDiscountTypeOnItemWithGoldenType Method Executed***************************************");
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
			
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterSchMenu));
		homeMasterSchMenu.click();
			
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountDefMenu));	
	    discountDefMenu.click();
		
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(memberDiscountMenu));	
		memberDiscountMenu.click();
		
	    
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_SchemeNameTxt));
		
		md_SchemeNameTxt.click();
		Thread.sleep(2000);
		md_SchemeNameTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		md_SchemeNameTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		md_SchemeNameTxt.sendKeys("MemberDisOnItem");
		Thread.sleep(2000);
		md_SchemeNameTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		Select option=new Select(md_SchemeTypeDrpdwn);
		option.selectByVisibleText("On Item");
		
		md_SchemeTypeDrpdwn.sendKeys(Keys.TAB);
		

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_FromDateTxt));
		md_FromDateTxt.click();
		md_FromDateTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		
		
		 DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		 Date date=new Date();
			
		 String docdate = df.format(date);  
		 Calendar c = Calendar.getInstance();
		 c.add(Calendar.DAY_OF_MONTH, 5);  
		
		 String FilterDate = df.format(c.getTime());  
		
		 System.out.println("df.format(date)  : "+df.format(date));
		 System.out.println("FilterDate  : "+FilterDate);
		  
		 md_FromDateTxt.sendKeys(df.format(date));
		 
		 md_FromDateTxt.sendKeys(Keys.TAB);
		
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_ToDateTxt));
		 md_ToDateTxt.click();
		 md_ToDateTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		 md_ToDateTxt.sendKeys(FilterDate);
		 Thread.sleep(2000);
		 md_ToDateTxt.sendKeys(Keys.TAB);
		 
		 Select option1=new Select(md_MemberTypeDrpdwn);
		 option1.selectByVisibleText("GoldMemberType");

		 md_MemberTypeDrpdwn.sendKeys(Keys.TAB);
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_OutletsBtn));
		 md_OutletsBtn.click();
		 
		 
		 Thread.sleep(2000);
		 
		 int outletlistCount=outletList.size();
		 
		 for (int i = 0; i < outletlistCount; i++)
		 {
			String data=outletList.get(i).getText();
			
			if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
			{
				outletList.get(i).click();
				
				break;
			}
		 }
		 Thread.sleep(2000);
		 
		 fi_OutletOkBtn.click();

		 
		 if (md_RegularChkBox.isSelected()==false) 
		 {
			 md_RegularChkBox.click();
		 }
		 if (md_WeeklyRadio.isSelected()==false) 
		 {
			 md_WeeklyRadio.click();
		 }
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_DiscTimes));
		 md_DiscTimes.click();
		 md_DiscTimes.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		 md_DiscTimes.sendKeys("2");
		 md_DiscTimes.sendKeys(Keys.TAB);
	     	 
		 
		 if (md_CombinewithOtherChkbox.isSelected()==false) 
		 {
			 md_CombinewithOtherChkbox.click();
		 }
		
		 md_RemarksTxt.click();
		 
		 md_RemarksTxt.sendKeys("DicWithGoldenMemberItem");
		 
		 md_RemarksTxt.sendKeys(Keys.TAB);

		 Thread.sleep(2000);
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_DicPercentageRadioBtn));
		 
		 if (md_DicPercentageRadioBtn.isSelected()==false) 
		 {
			 md_DicPercentageRadioBtn.click();
		 }
		
		 md_DiscountTxt.click();
		 md_DiscountTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	     md_DiscountTxt.sendKeys("2");
		 
		 md_DiscountTxt.sendKeys(Keys.TAB);

		 
		 Thread.sleep(2000);
		 
		ArrayList<String>selectItemListArray=new ArrayList<String>();
			
		int selectItemListCount=md_ItemList.size();
				
		System.out.println(" selectItemList  :  "+selectItemListCount);
		
		Thread.sleep(2000);
		for (int i = 0; i < selectItemListCount; i++)
		{
				
			String data=md_ItemList.get(i).getText();
			System.out.println(" Data : ."+data+".");	
			
			if (i!=selectItemListCount-1) 
			{
				int temp=i+1;
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
					
				js.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
			}
				
			if (data.equalsIgnoreCase("STOCK ITEM Pcs -- SI - ? 0"))
			{
				Thread.sleep(2000);
				
				md_ItemList.get(i).click();
				
				Thread.sleep(2000);
				break;
			}
		}
			
			 
		Thread.sleep(2000);
			 
			 
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_AddBtn));
		md_AddBtn.click();
			
			 
		ArrayList<String>md_BodyGridListArray=new ArrayList<String>();
				
		int schbodyGidListCount=md_BodyGridList.size();
					
		System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
		for (int i = 0; i < schbodyGidListCount; i++)
		{
			String data=md_BodyGridList.get(i).getText();
					
			md_BodyGridListArray.add(data);
					
		}
				
				
		String actmd_BodyGridList=md_BodyGridListArray.toString();
		String expmd_BodyGridList="[, Combine, 2, 4, DicWithGoldenMemberItem, ]";
				
		System.err.println("  Actual    md_BodyGridList : "+actmd_BodyGridList);
		System.err.println("  Expected  md_BodyGridList : "+expmd_BodyGridList);
			
		 
		if (actmd_BodyGridList.equalsIgnoreCase(expmd_BodyGridList)) 
		{
			
			 System.out.println(" Test Pass: GoldMember Type Is Added SUccessfully");
			 return true;
		 } 
		 else 
		 {

			 System.out.println(" Test Fail: GoldMember Type Is Added SUccessfully");
			 return false;
		}
	}


	public boolean checkAddingMemberDiscountTypeOnItemWithSilverType() throws InterruptedException
	{
		
		Thread.sleep(3000);
		
		 Select option1=new Select(md_MemberTypeDrpdwn);
		 option1.selectByVisibleText("SilverMemberType");

		 md_MemberTypeDrpdwn.sendKeys(Keys.TAB);
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_OutletsBtn));
		 md_OutletsBtn.click();
		 
		 Thread.sleep(2000);
		 
		 int outletlistCount=outletList.size();
		 
		 for (int i = 0; i < outletlistCount; i++)
		 {
			String data=outletList.get(i).getText();
			
			if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
			{
				outletList.get(i).click();
				
				break;
			}
		 }
		 Thread.sleep(2000);
		 
		 fi_OutletOkBtn.click();

		 
		 if (md_RegularChkBox.isSelected()==false) 
		 {
			 md_RegularChkBox.click();
		 }
		 if (md_WeeklyRadio.isSelected()==false) 
		 {
			 md_WeeklyRadio.click();
		 }
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_DiscTimes));
		 md_DiscTimes.click();
		 md_DiscTimes.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		 md_DiscTimes.sendKeys("4");
		 md_DiscTimes.sendKeys(Keys.TAB);
	     	 
		 
		 if (md_CombinewithOtherChkbox.isSelected()==false) 
		 {
			 md_CombinewithOtherChkbox.click();
		 }
		
		 md_RemarksTxt.click();
		 
		 md_RemarksTxt.sendKeys("DicWithSilverMemberOnItem");
		 
		 md_RemarksTxt.sendKeys(Keys.TAB);
		 
		 if (md_DicPercentageRadioBtn.isSelected()==false) 
		 {
			 md_DicPercentageRadioBtn.click();
		 }
		
		 md_DiscountTxt.click();
		 md_DiscountTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	     md_DiscountTxt.sendKeys("4");
		 
		 md_DiscountTxt.sendKeys(Keys.TAB);
		 
		 
		 
		 ArrayList<String>selectItemListArray=new ArrayList<String>();
			
			int selectItemListCount=md_ItemList.size();
				
			System.out.println(" selectItemList  :  "+selectItemListCount);
				
			for (int i = 0; i < selectItemListCount; i++)
			{
				
				String data=md_ItemList.get(i).getText();
				
				System.out.println("Data  : "+data);
				
				
				if (i!=selectItemListCount-1) 
				{
					int temp=i+1;
					JavascriptExecutor js = (JavascriptExecutor) getDriver();
					
					js.executeScript("arguments[0].scrollIntoView();",selectItemList.get(temp));
				}
				
				if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0"))
				{
					System.out.println("11111");
					Thread.sleep(2000);
					md_ItemList.get(i).click();
					System.out.println("11111");
					break;
				}
			}
			
			 
			 Thread.sleep(2000);
			 
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_AddBtn));
			 md_AddBtn.click();
			
			 
			 ArrayList<String>md_BodyGridListArray=new ArrayList<String>();
				
				int schbodyGidListCount=md_BodyGridList.size();
					
				System.out.println(" schbodyGidList  :  "+schbodyGidListCount);
					
				for (int i = 0; i < schbodyGidListCount; i++)
				{
					String data=md_BodyGridList.get(i).getText();
					
					md_BodyGridListArray.add(data);
					
				}
				
				
			String actmd_BodyGridList=md_BodyGridListArray.toString();
			String expmd_BodyGridList="[, Combine, 2, 4, DicWithGoldenMemberItem, , , Combine, 4, 20, DicWithSilverMemberOnItem, ]";
				
			System.err.println("  Actual    md_BodyGridList : "+actmd_BodyGridList);
			System.err.println("  Expected  md_BodyGridList : "+expmd_BodyGridList);
			
		
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_OutletsBtn));
			 md_OutletsBtn.click();
			 
			 Thread.sleep(2000);
			 

			 
			 for (int i = 0; i < outletlistCount; i++)
			 {
				String data=outletList.get(i).getText();
				
				if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
				{
					outletList.get(i).click();
					
					break;
				}
			 }
			 Thread.sleep(2000);
			 
			 fi_OutletOkBtn.click();
			
			 Thread.sleep(2000);
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(md_SaveBtn));
			md_SaveBtn.click();
			
			
			Thread.sleep(2000);
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
			yesBtn.click();
			
			String expMessage = "Details Saved Successfully";
	 		
			String actMessage = toastMessage.getText();
			
			toastMessageCloseBtn.click();
			
			System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
			
			
		 
		 if (actmd_BodyGridList.equalsIgnoreCase(expmd_BodyGridList) && 
				 actMessage.equalsIgnoreCase(expMessage)) 
		 {
			
			 System.out.println(" Test Pass: Member Dic is Saved ");
			 return true;
		 } 
		 else 
		 {
			 System.out.println(" Test Fail: Member Dic is Saved ");
			 return false;

		}
	}




















	//Employee Discount

	@FindBy (xpath="//input[@id='optEmployeeSchemeName']")
	private static WebElement ed_SchName;

	@FindBy (xpath="//select[@id='ddlSchemeTypeEmp']")
	private static WebElement ed_SchTypeDrpdwn;

	@FindBy (xpath="//*[@id='dtpFromDateEmp']")
	private static WebElement ed_FromDtTxt;

	@FindBy (xpath="//*[@id='dtpToDateEmp']")
	private static WebElement ed_ToDtTxt;

	@FindBy (xpath="//button[@id='btnGetOutletsEmp']")
	private static WebElement ed_OutletBtn;

	@FindBy (xpath="//input[@id='txtbox_ddlSchemeForEmp']")
	private static WebElement ed_SchemeFor;

	@FindBy (xpath="//input[@id='chkCombineWithOtherSchemesEmp']")
	private static WebElement ed_CombineWithOtherSchemeChkbox;

	@FindBy (xpath="//select[@id='ddlDiscountEmployeeDesignation']")
	private static WebElement ed_DesignDrpdwn;

	@FindBy (xpath="//input[@id='txtEmployeeDiscountRemarks']")
	private static WebElement ed_RemarksTxt;

	@FindBy (xpath="//input[@id='rbtEmployeeDiscountPercentage']")
	private static WebElement ed_DiscountPerRadioBtn;

	@FindBy (xpath="//input[@id='rbtEmployeeDiscountValue']")
	private static WebElement ed_DiscountValueRadioBtn;

	@FindBy (xpath="//input[@id='txtEmployeeDiscountValue']")
	private static WebElement ed_DiscountValueTxt;

	@FindBy (xpath="//*[@id='chkShowProduct']")
	private static WebElement ed_ShowItemCkbox;

	@FindBy (xpath="//*[@id='divProductTree']/ul/li")
	private static List<WebElement> ed_ItemsList;

	@FindBy (xpath="//*[@id='tbodyEmployeeDiscount']/tr/td")
	private static List<WebElement> ed_gridList;


	@FindBy (xpath="//*[@id='btnAddEmpDiscount']")
	private static WebElement ed_AddBtn;

	@FindBy (xpath="//*[@id='btnSaveEmpDiscount']")
	private static WebElement ed_SaveBtn;

	@FindBy (xpath="//*[@id='btnDeleteEmpDiscount']")
	private static WebElement ed_DeleteBtn;

	@FindBy (xpath="//*[@id='btnClearEmpDiscount']")
	private static WebElement ed_ClearBtn;

	@FindBy (xpath="//*[@id='btnCloneEmpDiscount']")
	private static WebElement ed_CloneBtn;

	@FindBy (xpath="//*[@id='divEmployeeSchemesDiscountHeader']/div[2]/div[6]")
	private static WebElement ed_CloseBtn;

	@FindBy (xpath="//*[@id='theadEmployeeDiscountDetails']/tr/th")
	private static List<WebElement> ed_BodyHeaderList; 

	@FindBy (xpath="//*[@id='8015']")
	private static WebElement discountDefMenu; 



	public boolean checkHomePageOptionsInEmployeeDiscount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
			System.out.println("******************checkHomePageOptionsInEmployeeDiscount Method Executed***************************************");
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
				
	        Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterSchMenu));
			homeMasterSchMenu.click();
				
		    Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountDefMenu));	
		    discountDefMenu.click();
			
		    
		    Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(employeeDiscountMenu));	
		    employeeDiscountMenu.click();
			
		    
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_SchName));
			boolean actfi_SchNameDrpdwn    	 		   =ed_SchName.isDisplayed();
			boolean actschTypeDrpdwn    	           =ed_SchTypeDrpdwn.isDisplayed();
			boolean actschFromDateTxt 			       =ed_FromDtTxt.isDisplayed();
			boolean actschFromTimeTxt 			       =ed_ToDtTxt.isDisplayed();
			boolean actschToDateTxt 		           =ed_DesignDrpdwn.isDisplayed();
			boolean actschToTimeTxt 			       =ed_OutletBtn.isDisplayed();
			boolean actschOutletsTxt 		 	       =ed_SchemeFor.isDisplayed();
			boolean actschLoadOutletbtn                =ed_CombineWithOtherSchemeChkbox.isDisplayed();
			boolean actschDaysTxt    	 			   =ed_DiscountValueTxt.isDisplayed();
			
			
			boolean expfi_SchNameDrpdwn    	 			=true;
			boolean expschTypeDrpdwn    				=true;
			boolean expschFromDateTxt 					=true;
			boolean expschFromTimeTxt 					=true;
			boolean expschToDateTxt 					=true;
			boolean expschToTimeTxt 					=true;
			boolean expschOutletsTxt 					=true;
			boolean expschLoadOutletbtn 				=true;
			boolean expschDaysTxt    	 				=true;
			
			System.out.println("fi_SchNameDrpdwn          : "+actfi_SchNameDrpdwn           +" Value Expected : "+expfi_SchNameDrpdwn);
			System.out.println("schTypeDrpdwn             : "+actschTypeDrpdwn           +" Value Expected : "+expschTypeDrpdwn);
			System.out.println("schFromDateTxt            : "+actschFromDateTxt          +" Value Expected : "+expschFromDateTxt);
			System.out.println("schFromTimeTxt            : "+actschFromTimeTxt          +" Value Expected : "+expschFromTimeTxt);
			System.out.println("schToDateTxt              : "+actschToDateTxt            +" Value Expected : "+expschToDateTxt);
			System.out.println("schToTimeTxt              : "+actschToTimeTxt            +" Value Expected : "+expschToTimeTxt);
			System.out.println("schOutletsTxt             : "+actschOutletsTxt           +" Value Expected : "+expschOutletsTxt);
			System.out.println("schLoadOutletbtn          : "+actschLoadOutletbtn        +" Value Expected : "+expschLoadOutletbtn);
			System.out.println("schDaysTxt                : "+actschDaysTxt              +" Value Expected : "+expschDaysTxt);
			
			
			ArrayList<String>actfi_BodyGridListArray=new ArrayList<String>();
			
			int actList=ed_BodyHeaderList.size();
			
			for (int i = 0; i < actList; i++) 
			{
				String data=ed_BodyHeaderList.get(i).getText();
				actfi_BodyGridListArray.add(data);
				
			}
			
			String actfi_BodyGridList=actfi_BodyGridListArray.toString();
			String expfi_BodyGridList="[, , Designation, Discount, Mandatory Items, Remarks, ]";
			
			System.out.println(" Actual fi_BodyGridList   : "+actfi_BodyGridList);
			System.out.println(" Expected  fi_BodyGridList: "+expfi_BodyGridList);
			
			if(actfi_SchNameDrpdwn==expfi_SchNameDrpdwn && actschTypeDrpdwn==expschTypeDrpdwn&& actschFromDateTxt==expschFromDateTxt
					&& actschFromTimeTxt==expschFromTimeTxt&& actschToDateTxt==expschToDateTxt && actschToTimeTxt==expschToTimeTxt
					&& actschOutletsTxt==expschOutletsTxt && actschLoadOutletbtn==expschLoadOutletbtn
					
					&& actschDaysTxt==expschDaysTxt && actfi_BodyGridList.equalsIgnoreCase(expfi_BodyGridList))
			{
				System.out.println(" Test Pass: Free item Screen Displayed ");
				return true;
			}
			else
			{
				System.out.println(" Test Fail: Free item Screen Displayed ");
				return false;
			}
	}


	public boolean chechAddingEmplyeeTypeSalesManOnBill() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_SchName));
		ed_SchName.click();
		ed_SchName.sendKeys("EmplyeeDisOnBill");
		ed_SchName.sendKeys(Keys.TAB);
		
		
		Select option=new Select(ed_SchTypeDrpdwn);
		option.selectByVisibleText("On Bill");
		
		ed_SchTypeDrpdwn.sendKeys(Keys.TAB);
		

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_FromDtTxt));
		ed_FromDtTxt.click();
		ed_FromDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		
		
		 DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		 Date date=new Date();
			
		 String docdate = df.format(date);  
		 Calendar c = Calendar.getInstance();
		 c.add(Calendar.DAY_OF_MONTH, 5);  
		
		 String FilterDate = df.format(c.getTime());  
		
		 System.out.println("df.format(date)  : "+df.format(date));
		 System.out.println("FilterDate  : "+FilterDate);
		  
		 ed_FromDtTxt.sendKeys(df.format(date));
		 
		 ed_FromDtTxt.sendKeys(Keys.TAB);
		
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_ToDtTxt));
		 ed_ToDtTxt.click();
		 ed_ToDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		 ed_ToDtTxt.sendKeys(FilterDate);
		 Thread.sleep(2000);
		 ed_ToDtTxt.sendKeys(Keys.TAB);
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_OutletBtn));
		 ed_OutletBtn.click();
		 
		 Thread.sleep(2000);
		 
		 int outletlistCount=outletList.size();
		 
		 for (int i = 0; i < outletlistCount; i++)
		 {
			String data=outletList.get(i).getText();
			
			if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
			{
				outletList.get(i).click();
				
				break;
			}
		 }


		 fi_OutletOkBtn.click();
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_CombineWithOtherSchemeChkbox));
		 if (ed_CombineWithOtherSchemeChkbox.isSelected()==false) 
		 {
			 ed_CombineWithOtherSchemeChkbox.click();
		 }
		 
		 Select desgin=new Select(ed_DesignDrpdwn);
		 desgin.selectByVisibleText(" SalesMan ");
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_RemarksTxt)); 
		 ed_RemarksTxt.click();
		 ed_RemarksTxt.sendKeys("OnBill Discount");
		 
		 ed_RemarksTxt.sendKeys(Keys.TAB);
		
		 if (ed_DiscountPerRadioBtn.isSelected()==false) 
		 {
			 ed_DiscountPerRadioBtn.click();
		 }
		
		ed_DiscountValueTxt.click();
		ed_DiscountValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		ed_DiscountValueTxt.sendKeys("2");
		ed_DiscountValueTxt.sendKeys(Keys.TAB);
		

		int ed_ItemsListCount=ed_ItemsList.size();
		 
		for (int i = 0; i < ed_ItemsListCount; i++)
		{
			
			 String data=ed_ItemsList.get(i).getText();
			 
			 System.out.println("Data  : "+data);
			 
			 if (i!=ed_ItemsListCount-1) 
				{
					int temp=i+1;
					
					JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
					
					js4.executeScript("arguments[0].scrollIntoView();",ed_ItemsList.get(temp));
				}
			 
			 if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0")) 
			 {
				 ed_ItemsList.get(i).click();
				 break;
			 }
		}
	 
		Thread.sleep(2000);
		
		JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		js1.executeScript("arguments[0].scrollIntoView();", ed_AddBtn);
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_AddBtn));
		ed_AddBtn.click();
		 
	    Thread.sleep(2000);
		 
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
		 
		ArrayList<String>ed_gridListArray=new ArrayList<String>();
		 
		int ed_gridListCount=ed_gridList.size();
		 
		for (int i = 0; i < ed_gridListCount; i++)
		{
			 String data=ed_gridList.get(i).getText();
			 
			 ed_gridListArray.add(data);
			 
		}
		 
		String acted_gridList=ed_gridListArray.toString();
		String exped_gridList="[, Combine, SalesMan, 2, 20, OnBill Discount, ]";
		 
		System.out.println("Act ed_gridList ; "+acted_gridList);
		System.out.println("exp ed_gridList ; "+exped_gridList);
		
		if (acted_gridList.equalsIgnoreCase(exped_gridList) ) 
		{
			System.out.println("Test Pass : Displayed All values ");
			return true;
			
		}
		else
		{
			System.out.println("Test Fail : Displayed All values ");
			return false;
		}
	 }



	public boolean chechAddingEmployeeTypeSalesGirlOnBill() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_OutletBtn));
		 ed_OutletBtn.click();
		 
		 Thread.sleep(2000);
		 
		 int outletlistCount=outletList.size();
		 
		 for (int i = 0; i < outletlistCount; i++)
		 {
			String data=outletList.get(i).getText();
			
			if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
			{
				outletList.get(i).click();
				
				break;
			}
		 }


		 fi_OutletOkBtn.click();

		
			 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_CombineWithOtherSchemeChkbox));
		 if (ed_CombineWithOtherSchemeChkbox.isSelected()==false) 
		 {
			 ed_CombineWithOtherSchemeChkbox.click();
		 }
		 
		 
		 Select desgin=new Select(ed_DesignDrpdwn);
		 desgin.selectByVisibleText(" SalesGirl ");
		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_RemarksTxt)); 
		 ed_RemarksTxt.click();
		 ed_RemarksTxt.sendKeys("OnBill Discount");
		 
		 ed_RemarksTxt.sendKeys(Keys.TAB);
		
		 if (ed_DiscountValueRadioBtn.isSelected()==false) 
		 {
			 ed_DiscountValueRadioBtn.click();
		 }
		
		ed_DiscountValueTxt.click();
		ed_DiscountValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		ed_DiscountValueTxt.sendKeys("2");
		ed_DiscountValueTxt.sendKeys(Keys.TAB);
		

		int ed_ItemsListCount=ed_ItemsList.size();
		 
		for (int i = 0; i < ed_ItemsListCount; i++)
		{
			
			 String data=ed_ItemsList.get(i).getText();
			 
			 System.out.println("Data  : "+data);
			 
			 if (i!=ed_ItemsListCount-1) 
				{
					int temp=i+1;
					
					JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
					
					js4.executeScript("arguments[0].scrollIntoView();",ed_ItemsList.get(temp));
				}
			 
			 if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0")) 
			 {
				 ed_ItemsList.get(i).click();
				 break;
			 }
		}
	 
		Thread.sleep(2000);
		
		JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		js1.executeScript("arguments[0].scrollIntoView();", ed_AddBtn);
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_AddBtn));
		ed_AddBtn.click();
		 
	    Thread.sleep(2000);
		 
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
		 
		ArrayList<String>ed_gridListArray=new ArrayList<String>();
		 
		int ed_gridListCount=ed_gridList.size();
		 
		for (int i = 0; i < ed_gridListCount; i++)
		{
			 String data=ed_gridList.get(i).getText();
			 
			 ed_gridListArray.add(data);
			 
		}
		 
		String acted_gridList=ed_gridListArray.toString();
		String exped_gridList="[, Combine, SalesMan, 2, 20, OnBill Discount, , , Combine, SalesGirl, 2, 20, OnBill Discount, ]";
		 
		System.out.println("Act ed_gridList ; "+acted_gridList);
		System.out.println("exp ed_gridList ; "+exped_gridList);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_OutletBtn));
		ed_OutletBtn.click();
		 
		Thread.sleep(2000);

		fi_OutletOkBtn.click();
		
		
	    Thread.sleep(2000);
		
		js.executeScript("arguments[0].scrollIntoView();", ed_SaveBtn);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_SaveBtn));
		ed_SaveBtn.click();
		
		Thread.sleep(2000);
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
		yesBtn.click();

		String expMessage = "Details saved successfully.";
		String actMessage = toastMessage.getText();
		
		System.out.println("Toast Message Displayed : "+actMessage+" value Expected : "+expMessage);
		
		toastMessageCloseBtn.click();
		
		System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
		if (acted_gridList.equalsIgnoreCase(exped_gridList) ) 
		{
			System.out.println("Test Pass : Employee Discount Is Added Successfully ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Employee Discount Is Added Successfully ");
			return false;
		}
	 }


		  
	public boolean checkSavingSchemeOnItemOfEmplyeDiscount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
	  	
		  
		  Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();
				
	        Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterSchMenu));
			homeMasterSchMenu.click();
				
		    Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(discountDefMenu));	
		    discountDefMenu.click();
			
		    
		    Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(employeeDiscountMenu));	
		    employeeDiscountMenu.click();
			
		    Thread.sleep(2000);
	  	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_SchName));
	  	 ed_SchName.click();
	  	Thread.sleep(2000);
	  	 ed_SchName.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	  	Thread.sleep(2000);
	  	 ed_SchName.sendKeys(Keys.SPACE);
	  	Thread.sleep(2000);
	  	 ed_SchName.sendKeys("EmplyeeDisOnItem");
	  	Thread.sleep(2000);
	  	 ed_SchName.sendKeys(Keys.TAB);
	  	
	  	
	  	 Select option=new Select(ed_SchTypeDrpdwn);
	  	 option.selectByVisibleText("On Item");
	  	
	  	 ed_SchTypeDrpdwn.sendKeys(Keys.TAB);

	  	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_FromDtTxt));
	  	 ed_FromDtTxt.click();
	  	 ed_FromDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	  	
	  	
	  	 DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	  	 Date date=new Date();
	  		
	  	 String docdate = df.format(date);  
	  	 Calendar c = Calendar.getInstance();
	  	 c.add(Calendar.DAY_OF_MONTH, 5);  
	  	
	  	 String FilterDate = df.format(c.getTime());  
	  	
	  	 System.out.println("df.format(date)  : "+df.format(date));
	  	 System.out.println("FilterDate  : "+FilterDate);
	  	  
	  	 ed_FromDtTxt.sendKeys(df.format(date));
	  	 
	  	 ed_FromDtTxt.sendKeys(Keys.TAB);
	  	
	  	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_ToDtTxt));
	  	 ed_ToDtTxt.click();
	  	 ed_ToDtTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	  	 ed_ToDtTxt.sendKeys(FilterDate);
	  	 Thread.sleep(2000);
	  	 ed_ToDtTxt.sendKeys(Keys.TAB);
	  	 
	  	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_OutletBtn));
	  	 ed_OutletBtn.click();
	  	 
	  	 Thread.sleep(2000);
	  	 
	  	 int outletlistCount=outletList.size();
	  	 
	  	for(int i=0;i<outletlistCount;i++)
		  {
			  String data = outletList.get(i).getText();
				
			  if(data.equalsIgnoreCase("Outlet1") &&  pdSchoutletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
			  {
				  outletList.get(i).click();
					
				  break;
			  }
		  }
			
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletPopOkBtn));
		  outletPopOkBtn.click();
	  	 
	  	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_CombineWithOtherSchemeChkbox));
	  	 if (ed_CombineWithOtherSchemeChkbox.isSelected()==false) 
	  	 {
	  		 ed_CombineWithOtherSchemeChkbox.click();
	  	 }
	  	 
	  	 Select desgin=new Select(ed_DesignDrpdwn);
	  	 desgin.selectByVisibleText(" SalesMan ");
	  	 
	  	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_RemarksTxt)); 
	  	 ed_RemarksTxt.click();
	  	 ed_RemarksTxt.sendKeys("OnItem Discount");
	  	 
	  	 ed_RemarksTxt.sendKeys(Keys.TAB);
	  	
	  	 if (ed_DiscountPerRadioBtn.isSelected()==false) 
	  	 {
	  		 ed_DiscountPerRadioBtn.click();
	  	 }
	  	
	  	ed_DiscountValueTxt.click();
	  	ed_DiscountValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	  	ed_DiscountValueTxt.sendKeys("4");
	  	ed_DiscountValueTxt.sendKeys(Keys.TAB);
	  	

	  	int ed_ItemsListCount=ed_ItemsList.size();
	  	 
	  	for (int i = 0; i < ed_ItemsListCount; i++)
	  	{
	  		
	  		 String data=ed_ItemsList.get(i).getText();
	  		 
	  		 System.out.println("Data  : "+data);
	  		 
	  		 if (i!=ed_ItemsListCount-1) 
	  			{
	  				int temp=i+1;
	  				
	  				JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
	  				
	  				js4.executeScript("arguments[0].scrollIntoView();",ed_ItemsList.get(temp));
	  			}
	  		 
	  		 if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0")) 
	  		 {
	  			 ed_ItemsList.get(i).click();
	  			 break;
	  		 }
	  	}
	   
	  	Thread.sleep(2000);
	  	
	  	JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
	  	js1.executeScript("arguments[0].scrollIntoView();", ed_AddBtn);
	  	
	  	
	  	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_AddBtn));
	  	ed_AddBtn.click();
	  	 
	    Thread.sleep(2000);
	  	 
	  	JavascriptExecutor js = (JavascriptExecutor) getDriver();
	  	js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
	  	 
	  	ArrayList<String>ed_gridListArray=new ArrayList<String>();
	  	 
	  	int ed_gridListCount=ed_gridList.size();
	  	 
	  	for (int i = 0; i < ed_gridListCount; i++)
	  	{
	  		 String data=ed_gridList.get(i).getText();
	  		 
	  		 ed_gridListArray.add(data);
	  		 
	  	}
	  	 
	  	String acted_gridList=ed_gridListArray.toString();
	  	String exped_gridList="[, Combine, SalesMan, 4, 20, OnItem Discount, ]";
	  	 
	  	System.out.println("Act ed_gridList ; "+acted_gridList);
	  	System.out.println("exp ed_gridList ; "+exped_gridList);
	  	
	  	
	  	Thread.sleep(2000);
	  	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_OutletBtn));
	  	ed_OutletBtn.click();
	  	 
	  	for(int i=0;i<outletlistCount;i++)
		  {
	  		 Thread.sleep(2000);
			  String data = outletList.get(i).getText();
				
			  Thread.sleep(2000);
			  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
			  {
				  outletList.get(i).click();
				  break;
			  }
		  }
			
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletPopOkBtn));
		  outletPopOkBtn.click();

	  	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_CombineWithOtherSchemeChkbox));
	  	 if (ed_CombineWithOtherSchemeChkbox.isSelected()==false) 
	  	 {
	  		 ed_CombineWithOtherSchemeChkbox.click();
	  	 }
	  	 
	  	 Select desgin1=new Select(ed_DesignDrpdwn);
	  	 desgin1.selectByVisibleText(" SalesGirl ");
	  	 
	  	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_RemarksTxt)); 
	  	 ed_RemarksTxt.click();
	  	 ed_RemarksTxt.sendKeys("OnItem Discount");
	  	 
	  	 ed_RemarksTxt.sendKeys(Keys.TAB);
	  	
	  	 if (ed_DiscountValueRadioBtn.isSelected()==false) 
	  	 {
	  		 ed_DiscountValueRadioBtn.click();
	  	 }
	  	
	  	ed_DiscountValueTxt.click();
	  	ed_DiscountValueTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	  	ed_DiscountValueTxt.sendKeys("2");
	  	ed_DiscountValueTxt.sendKeys(Keys.TAB);
	  	

	  	for (int i = 0; i < ed_ItemsListCount; i++)
	  	{
	  		
	  		 String data=ed_ItemsList.get(i).getText();
	  		 
	  		 System.out.println("Data  : "+data);
	  		 
	  		 if (i!=ed_ItemsListCount-1) 
	  			{
	  				int temp=i+1;
	  				
	  				JavascriptExecutor js4 = (JavascriptExecutor) getDriver();
	  				
	  				js4.executeScript("arguments[0].scrollIntoView();",ed_ItemsList.get(temp));
	  			}
	  		 
	  		 if (data.equalsIgnoreCase("STD RATE COGS ITEM Pcs -- STD RATE COGS ITEM - ? 0")) 
	  		 {
	  			 ed_ItemsList.get(i).click();
	  			 break;
	  		 }
	  	}
	   
	  	Thread.sleep(2000);
	  	
	  	js1.executeScript("arguments[0].scrollIntoView();", ed_AddBtn);
	  	
	  	
	  	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_AddBtn));
	  	ed_AddBtn.click();
	  	 
	    Thread.sleep(2000);
	  	 
	  	js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
	  	 
	  	 
	  	for (int i = 0; i < ed_gridListCount; i++)
	  	{
	  		 String data=ed_gridList.get(i).getText();
	  		 
	  		 ed_gridListArray.add(data);
	  		 
	  	}
	  	 
	  	String acted_gridList1=ed_gridListArray.toString();
	  	String exped_gridList1="[, Combine, SalesMan, 4, 20, OnItem Discount, , , Combine, SalesMan, 4, 20, OnItem Discount, ]";
	  	 
	  	System.out.println("Act ed_gridList1 ; "+acted_gridList1);
	  	System.out.println("exp ed_gridList1 ; "+exped_gridList1);
	  	
	  	Thread.sleep(2000);
	  	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_OutletBtn));
	  	ed_OutletBtn.click();
	  	 
	  	for(int i=0;i<outletlistCount;i++)
		  {
	  		 Thread.sleep(2000);
			  String data = outletList.get(i).getText();
				
			  Thread.sleep(2000);
			  if(data.equalsIgnoreCase("Outlet1") &&  outletChkBoxList.get(i).getAttribute("aria-selected").equalsIgnoreCase("false"))
			  {
				  outletList.get(i).click();
				  break;
			  }
		  }
			
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outletPopOkBtn));
		  outletPopOkBtn.click();
	  	
	      Thread.sleep(2000);
	  	
	  	js.executeScript("arguments[0].scrollIntoView();", ed_SaveBtn);
	  	
	  	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_SaveBtn));
	  	ed_SaveBtn.click();
	  	
	  	Thread.sleep(2000);
	  	
	  	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(yesBtn));
	  	yesBtn.click();

	  	String expMessage = "Details Saved Successfully";
	  	String actMessage = toastMessage.getText();
	  	
	  	System.out.println("Toast Message Displayed : "+actMessage+" value Expected : "+expMessage);
	  	
	  	toastMessageCloseBtn.click();
	  	
	  	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ed_CloseBtn));
	  	ed_CloseBtn.click();
	  	
	  	System.out.println("Message : "+actMessage+" Value Expected : "+expMessage);
	  	
	  	if (acted_gridList.equalsIgnoreCase(exped_gridList) && actMessage.equalsIgnoreCase(expMessage) ) 
	  	{
	  		System.out.println("Test Pass : Employee Item Discount Is Saved Successfully ");
	  		return true;
	  	}
	  	else
	  	{
	  		System.out.println("Test Fail : Employee Item Discount Is Saved Successfully ");
	  		return false;
	  	}
	   }


	
  
	 public PointOfSalePage(WebDriver driver)
	 {
	    	
	    	PageFactory.initElements(driver, this);
	    	
	 }
	
	
}
