
package com.focus.Pages;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.security.auth.login.CredentialExpiredException;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.omg.Messaging.SyncScopeHelper;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;

public class SmokeDocCustViewPage extends BaseEngine  
{


	
	//Dash board Page
	@FindBy(xpath="//*[@id='dashName']")
    public static WebElement labelDashboard ;
	
	@FindBy(xpath="//*[@id='Select_dash']")
	public static WebElement selectDashboard ;
		
	@FindBy(xpath="//*[@id='Dashboard_AddDash']")
    public static WebElement newAddDashBoard;
	 
    @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
    public static WebElement dashboardCustomizationSettings;
    
    
    
    @FindBy(xpath="//input[@id='donotshow']")
   	public static WebElement doNotShowCheckbox;
       
    @FindBy(xpath="//span[@class='pull-right']")
   	public static WebElement CloseBtnINDCInDemoPopupScreen;
    
    
    
	 
public static void checkPopUpWindow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	 Thread.sleep(5000);
       
       try 
       {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
			doNotShowCheckbox.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDCInDemoPopupScreen));
			CloseBtnINDCInDemoPopupScreen.click(); 
			
			System.err.println("POP UP DISPLAYED AND CLOSED SUCCESSFULLY");
			
		} 
       catch (Exception e)
       {
       	System.err.println("NO POP UP DISPLAYED");
		}

   	
   	Thread.sleep(4000);
}
		 



public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
        try
        {
                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
                String actErrorMessage=errorMessage.getText();
                String expErrorMessage=ExpMessage;

                try
                {
                
	                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
	                errorMessageCloseBtn.click();

	                System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
	                
	                return actErrorMessage;
                }
                catch(Exception ee)
                {
                	
                	System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
                	
                	return actErrorMessage;
                }
        }
        catch(Exception e)
        {
                System.err.println("Error Message NOT Found or NOT Clickable");
                System.err.println(e.getMessage());
                
                String Exception=e.getMessage();
            
                return Exception;
        }
}
		

	
	@FindBy(xpath="//button[contains(text(),'Ok')]")
	public static WebElement loginRefreshOkBtn;
	
	
	
	public static void checkRefershPopOnlogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
	
	try 
	{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginRefreshOkBtn));
	loginRefreshOkBtn.click();
	
	
	} 
	catch (Exception e)
	{
	System.err.println("NO ALERT POP UP DISPLAYED");
	}
	
	
	Thread.sleep(4000);
	}
       
	
	 public static String xlfile;
	 public static String resPass="Pass";
	 public static String resFail="Fail";
	 public static ExcelReader excelReader;
	
	 public static String xlSheetName = "SmokeDocumentCustomization";	
		
	 
	public boolean checkDocumentCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	
	    /*LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
				
		lp.enterPassword(pawslt);
				  
		lp.clickOnSignInBtn();
		
		//checkRefershPopOnlogin();
				        
		//checkPopUpWindow();
		
	    Thread.sleep(8000);
	*/
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		
		boolean DocumentCustomization45Btn	=documentCustomization45Btn.isDisplayed();
		
		
		String actdocumentCustomization45Btn=Boolean.toString(DocumentCustomization45Btn);
		
		String  expdocumentCustomization45Btn	=excelReader.getCellData(xlSheetName, 9, 7);
        
        excelReader.setCellData(xlfile, xlSheetName, 9, 8, actdocumentCustomization45Btn);
		
		
		System.out.println("********************************checkDocumentCustomization********************************");
		
		System.out.println("DocumentCustomization45Btn : "+actdocumentCustomization45Btn+"  value expected  "+expdocumentCustomization45Btn);
		
		if(actdocumentCustomization45Btn.equalsIgnoreCase(expdocumentCustomization45Btn))
		{
			System.out.println("Test Pass : Documentation Customization Tab is Available");
			excelReader.setCellData(xlfile, xlSheetName, 8, 9, resPass);
			return true;
	
		}
		else
		{
			System.out.println("Test Fail : Documentation Customization Tab is Not Available");
			excelReader.setCellData(xlfile, xlSheetName, 8, 9, resFail);
			return false;
		}
	}
		
			
		
	public boolean checkDocumentCustomizationOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchBox));
		
		boolean actsearchBox                             	=searchBox.isDisplayed();
		boolean actcreateVoucherBtn							=createVoucherBtn.isDisplayed();
		boolean actdeletevoucherBtn							=deletevoucherBtn.isDisplayed();
		boolean actreceiptsBtn								=receiptsBtn.isDisplayed();
		boolean actpaymentsBtn								=paymentsBtn.isDisplayed();
		boolean actpettyCashBtn								=pettyCashBtn.isDisplayed();
		boolean actpostDatedreceiptsBtn						=postDatedreceiptsBtn.isDisplayed();
		boolean actpostDatedpaymentsBtn						=postDatedpaymentsBtn.isDisplayed();
		boolean actpurchaseVouchersBtn						=purchaseVouchersBtn.isDisplayed();
		boolean actpurchaseReturnsBtn						=purchaseReturnsBtn.isDisplayed();
		boolean actpurcahseOrdersBtn						=purcahseOrdersBtn.isDisplayed();
		boolean actjobOrdersBtn								=jobOrdersBtn.isDisplayed();
		boolean actmaterialReceiptsNotesBtn					=materialReceiptsNotesBtn.isDisplayed();
		boolean actsalesInvoiceBtn							=salesInvoiceBtn.isDisplayed();
		boolean actcashSalesBtn       						=cashSalesBtn.isDisplayed();
		boolean acthirePurcahseSalesBtn						=hirePurcahseSalesBtn.isDisplayed();
		boolean actposSalesBtn								=posSalesBtn.isDisplayed();
		boolean actsalesReturnsBtn							=salesReturnsBtn.isDisplayed();
		boolean actsalesOrdersBtn							=salesOrdersBtn.isDisplayed();
		boolean actproductionOrderBtn						=productionOrderBtn.isDisplayed();
		boolean actdeliveryNotesBtn							=deliveryNotesBtn.isDisplayed();
		boolean actnonStandardjournalEntriesBtn				=nonStandardjournalEntriesBtn.isDisplayed();
		boolean actinterDepartmentalJVBtn					=interDepartmentalJVBtn.isDisplayed();
		boolean actdebitNotesLineWiseBtn					=debitNotesLineWiseBtn.isDisplayed();
		boolean actcreditNotesLineWiseBtn					=creditNotesLineWiseBtn.isDisplayed();
		boolean actfixedAssetDepreciationVoucherBtn			=fixedAssetDepreciationVoucherBtn.isDisplayed();
		boolean actjournalEntriesBtn						=journalEntriesBtn.isDisplayed();
		boolean actdebitNotesBtn							=debitNotesBtn.isDisplayed();
		boolean actcreditNotesBtn							=creditNotesBtn.isDisplayed();
		boolean actpayRollPostingsBtn						=payRollPostingsBtn.isDisplayed();
		boolean actopeningBalancesBtn						=openingBalancesBtn.isDisplayed();
		boolean actshortageInStocksBtn						=shortageInStocksBtn.isDisplayed();
		boolean actexcessInStocksBtn						=excessInStocksBtn.isDisplayed();
		boolean actstockTransfersBtn						=stockTransfersBtn.isDisplayed();
		boolean actopeningStocksBtn							=openingStocksBtn.isDisplayed();
		boolean actissuesToProductionBtn					=issuesToProductionBtn.isDisplayed();
		boolean actreceiptsFromProductionBtn				=receiptsFromProductionBtn.isDisplayed();
		boolean actreturnsFromShopfloorBtn					=returnsFromShopfloorBtn.isDisplayed();
		boolean actjobWorkIssuesBtn							=jobWorkIssuesBtn.isDisplayed();
		boolean actjobWorkReeceiptsBtn						=jobWorkReeceiptsBtn.isDisplayed();
		boolean actpurchaseQuotationsBtn					=purchaseQuotationsBtn.isDisplayed();
		boolean actsalesQuotationsBtn						=salesQuotationsBtn.isDisplayed();
		boolean actjobOrderBtn								=jobOrderBtn.isDisplayed();
		boolean actupdateBtn								=updateBtn.isDisplayed();
		boolean actCloseBtnINDC									=CloseBtnINDC.isDisplayed();
		
		
		boolean expsearchBox								=true;
		boolean expcreateVoucherBtn							=true;
		boolean expdeletevoucherBtn							=true;
		boolean expreceiptsBtn								=true;
		boolean exppaymentsBtn								=true;
		boolean exppettyCashBtn								=true;
		boolean exppostDatedreceiptsBtn						=true;
		boolean exppostDatedpaymentsBtn						=true;
		boolean exppurchaseVouchersBtn						=true;
		boolean exppurchaseReturnsBtn						=true;
		boolean exppurcahseOrdersBtn						=true;
		boolean expjobOrdersBtn								=true;
		boolean expmaterialReceiptsNotesBtn					=true;
		boolean expsalesInvoiceBtn							=true;
		boolean expcashSalesBtn								=true;
		boolean exphirePurcahseSalesBtn						=true;
		boolean expposSalesBtn								=true;
		boolean expsalesReturnsBtn							=true;
		boolean expsalesOrdersBtn							=true;
		boolean expproductionOrderBtn						=true;		
		boolean expdeliveryNotesBtn							=true;
		boolean expnonStandardjournalEntriesBtn				=true;
		boolean expinterDepartmentalJVBtn					=true;
		boolean expdebitNotesLineWiseBtn					=true;
		boolean expcreditNotesLineWiseBtn					=true;
		boolean expfixedAssetDepreciationVoucherBtn			=true;
		boolean expjournalEntriesBtn						=true;
		boolean expdebitNotesBtn							=true;
		boolean expcreditNotesBtn							=true;
		boolean exppayRollPostingsBtn						=true;
		boolean expopeningBalancesBtn						=true;
		boolean expshortageInStocksBtn						=true;
		boolean expexcessInStocksBtn						=true;
		boolean expstockTransfersBtn						=true;
		boolean expopeningStocksBtn							=true;
		boolean expissuesToProductionBtn					=true;
		boolean expreceiptsFromProductionBtn				=true;
		boolean expreturnsFromShopfloorBtn					=true;
		boolean expjobWorkIssuesBtn							=true;
		boolean expjobWorkReeceiptsBtn						=true;
		boolean exppurchaseQuotationsBtn					=true;
		boolean expsalesQuotationsBtn						=true;
		boolean expjobOrderBtn								=true;
		boolean expupdateBtn								=true;
		boolean expCloseBtnINDC									=true;
		
		
		System.out.println("***********************************************checkDocumentCustomizationOptions***************************************************");
		
		System.out.println("SearchBox                         : "+actsearchBox                         +"  value expected  "+expsearchBox);
		System.out.println("CreateVoucherBtn                  : "+actcreateVoucherBtn                  +"  value expected  "+expcreateVoucherBtn);
		System.out.println("DeletevoucherBtn                  : "+actdeletevoucherBtn                  +"  value expected  "+expdeletevoucherBtn);
		System.out.println("ReceiptsBtn                       : "+actreceiptsBtn                       +"  value expected  "+expreceiptsBtn);
		System.out.println("PaymentsBtn                       : "+actpaymentsBtn                       +"  value expected  "+exppaymentsBtn);
		System.out.println("PettyCashBtn                      : "+actpettyCashBtn                      +"  value expected  "+exppettyCashBtn);
		System.out.println("PostDatedreceiptsBtn              : "+actpostDatedreceiptsBtn              +"  value expected  "+exppostDatedreceiptsBtn);
		System.out.println("PostDatedpaymentsBtn              : "+actpostDatedpaymentsBtn              +"  value expected  "+exppostDatedpaymentsBtn);
		System.out.println("PurchaseVouchersBtn               : "+actpurchaseVouchersBtn               +"  value expected  "+exppurchaseVouchersBtn);
		System.out.println("PurchaseReturnsBtn                : "+actpurchaseReturnsBtn                +"  value expected  "+exppurchaseReturnsBtn);
		System.out.println("PurcahseOrdersBtn                 : "+actpurcahseOrdersBtn                 +"  value expected  "+exppurcahseOrdersBtn);
		System.out.println("JobOrdersBtn                      : "+actjobOrdersBtn                      +"  value expected  "+expjobOrdersBtn);
		System.out.println("MaterialReceiptsNotesBtn          : "+actmaterialReceiptsNotesBtn          +"  value expected  "+expmaterialReceiptsNotesBtn);
		System.out.println("SalesInvoiceBtn                   : "+actsalesInvoiceBtn                   +"  value expected  "+expsalesInvoiceBtn);
		System.out.println("CashSalesBtn                      : "+actcashSalesBtn                      +"  value expected  "+expcashSalesBtn);
		System.out.println("HirePurcahseSalesBtn              : "+acthirePurcahseSalesBtn              +"  value expected  "+exphirePurcahseSalesBtn);
		System.out.println("PosSalesBtn                       : "+actposSalesBtn                       +"  value expected  "+expposSalesBtn);
		System.out.println("SalesReturnsBtn                   : "+actsalesReturnsBtn                   +"  value expected  "+expsalesReturnsBtn);
		System.out.println("SalesOrdersBtn                    : "+actsalesOrdersBtn                    +"  value expected  "+expsalesOrdersBtn);
		System.out.println("ProductionOrderBtn                : "+actproductionOrderBtn                +"  value expected  "+expproductionOrderBtn);
		System.out.println("DeliveryNotesBtn                  : "+actdeliveryNotesBtn                  +"  value expected  "+expdeliveryNotesBtn);
		System.out.println("NonStandardjournalEntriesBtn      : "+actnonStandardjournalEntriesBtn      +"  value expected  "+expnonStandardjournalEntriesBtn);
		System.out.println("InterDepartmentalJVBtn            : "+actinterDepartmentalJVBtn            +"  value expected  "+expinterDepartmentalJVBtn);
		System.out.println("DebitNotesLineWiseBtn             : "+actdebitNotesLineWiseBtn             +"  value expected  "+expdebitNotesLineWiseBtn);
		System.out.println("CreditNotesLineWiseBtn            : "+actcreditNotesLineWiseBtn            +"  value expected  "+expcreditNotesLineWiseBtn);
		System.out.println("FixedAssetDepreciationVoucherBtn  : "+actfixedAssetDepreciationVoucherBtn  +"  value expected  "+expfixedAssetDepreciationVoucherBtn);
		System.out.println("JournalEntriesBtn                 : "+actjournalEntriesBtn                 +"  value expected  "+expjournalEntriesBtn);
		System.out.println("DebitNotesBtn                     : "+actdebitNotesBtn                     +"  value expected  "+expdebitNotesBtn);
		System.out.println("CreditNotesBtn                    : "+actcreditNotesBtn                    +"  value expected  "+expcreditNotesBtn);
		System.out.println("PayRollPostingsBtn                : "+actpayRollPostingsBtn                +"  value expected  "+exppayRollPostingsBtn);
		System.out.println("OpeningBalancesBtn                : "+actopeningBalancesBtn                +"  value expected  "+expopeningBalancesBtn);
		System.out.println("ShortageInStocksBtn               : "+actshortageInStocksBtn               +"  value expected  "+expshortageInStocksBtn);
		System.out.println("ExcessInStocksBtn                 : "+actexcessInStocksBtn                 +"  value expected  "+expexcessInStocksBtn);
		System.out.println("StockTransfersBtn                 : "+actstockTransfersBtn                 +"  value expected  "+expstockTransfersBtn);
		System.out.println("OpeningStocksBtn                  : "+actopeningStocksBtn                  +"  value expected  "+expopeningStocksBtn);
		System.out.println("IssuesToProductionBtn             : "+actissuesToProductionBtn             +"  value expected  "+expissuesToProductionBtn);
		System.out.println("ReceiptsFromProductionBtn         : "+actreceiptsFromProductionBtn         +"  value expected  "+expreceiptsFromProductionBtn);
		System.out.println("ReturnsFromShopfloorBtn           : "+actreturnsFromShopfloorBtn           +"  value expected  "+expreturnsFromShopfloorBtn);
		System.out.println("JobWorkIssuesBtn                  : "+actjobWorkIssuesBtn                  +"  value expected  "+expjobWorkIssuesBtn);
		System.out.println("JobWorkReeceiptsBtn               : "+actjobWorkReeceiptsBtn               +"  value expected  "+expjobWorkReeceiptsBtn);
		System.out.println("PurchaseQuotationsBtn             : "+actpurchaseQuotationsBtn             +"  value expected  "+exppurchaseQuotationsBtn);
		System.out.println("SalesQuotationsBtn                : "+actsalesQuotationsBtn                +"  value expected  "+expsalesQuotationsBtn);
		System.out.println("JobOrderBtn                       : "+actjobOrderBtn                       +"  value expected  "+expjobOrderBtn);
		System.out.println("UpdateBtn                         : "+actupdateBtn                         +"  value expected  "+expupdateBtn);
		System.out.println("CloseBtnINDC                          : "+actCloseBtnINDC                          +"  value expected  "+expCloseBtnINDC);
		
		
		boolean actMethod=actsearchBox==expsearchBox  && actcreateVoucherBtn==expcreateVoucherBtn  && actdeletevoucherBtn==expdeletevoucherBtn  && actreceiptsBtn==expreceiptsBtn  && 
				actpaymentsBtn==exppaymentsBtn  && actpettyCashBtn==exppettyCashBtn  && actpostDatedreceiptsBtn==exppostDatedreceiptsBtn  && 
				actpostDatedpaymentsBtn==exppostDatedpaymentsBtn  && actpurchaseVouchersBtn==exppurchaseVouchersBtn  && actpurchaseReturnsBtn==exppurchaseReturnsBtn  &&
				actpurcahseOrdersBtn==exppurcahseOrdersBtn  && actjobOrdersBtn==expjobOrdersBtn  && actmaterialReceiptsNotesBtn==expmaterialReceiptsNotesBtn  &&
				actsalesInvoiceBtn==expsalesInvoiceBtn  && actcashSalesBtn==expcashSalesBtn  && acthirePurcahseSalesBtn==exphirePurcahseSalesBtn  &&
				actposSalesBtn==expposSalesBtn  && actsalesReturnsBtn==expsalesReturnsBtn  && actsalesOrdersBtn==expsalesOrdersBtn  && actproductionOrderBtn==expproductionOrderBtn  &&
				actdeliveryNotesBtn==expdeliveryNotesBtn  && actnonStandardjournalEntriesBtn==expnonStandardjournalEntriesBtn  && actinterDepartmentalJVBtn==expinterDepartmentalJVBtn  &&
				actdebitNotesLineWiseBtn==expdebitNotesLineWiseBtn  && actcreditNotesLineWiseBtn==expcreditNotesLineWiseBtn  && actfixedAssetDepreciationVoucherBtn==expfixedAssetDepreciationVoucherBtn  &&
				actjournalEntriesBtn==expjournalEntriesBtn  && actdebitNotesBtn==expdebitNotesBtn  && actcreditNotesBtn==expcreditNotesBtn  && actpayRollPostingsBtn==exppayRollPostingsBtn  &&
				actopeningBalancesBtn==expopeningBalancesBtn  && actshortageInStocksBtn==expshortageInStocksBtn  && actexcessInStocksBtn==expexcessInStocksBtn  &&
				actstockTransfersBtn==expstockTransfersBtn  && actopeningStocksBtn==expopeningStocksBtn  && actissuesToProductionBtn==expissuesToProductionBtn  &&
				actreceiptsFromProductionBtn==expreceiptsFromProductionBtn  && actreturnsFromShopfloorBtn==expreturnsFromShopfloorBtn  && actjobWorkIssuesBtn==expjobWorkIssuesBtn  &&
				actjobWorkReeceiptsBtn==expjobWorkReeceiptsBtn  && actpurchaseQuotationsBtn==exppurchaseQuotationsBtn  && actsalesQuotationsBtn==expsalesQuotationsBtn  &&
				actjobOrderBtn==expjobOrderBtn  && actupdateBtn==expupdateBtn  && actCloseBtnINDC==expCloseBtnINDC;
		
		
		String actResult=Boolean.toString(actMethod);
		String expResult=excelReader.getCellData(xlSheetName, 11, 7);
        
        excelReader.setCellData(xlfile, xlSheetName, 11, 8, actResult);
		
		
		if(actResult.equalsIgnoreCase(expResult))		
		{
			System.out.println("Test Pass : Document Customization  options are Displayed as Expected");
			excelReader.setCellData(xlfile, xlSheetName, 10, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Document Customization  options are Not Displayed as Expected");
			excelReader.setCellData(xlfile, xlSheetName, 10, 9, resFail);
			return false;
		}
	}

	@FindBy(xpath="//div[@id='idGlobalError']")
	public static WebElement validationConfirmationMessage;
	
	public boolean checkUpdatebuttonwithoutselectinganyVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		boolean ValidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage =Boolean.toString(ValidationConfirmationMessage);
		
		String  expvalidationConfirmationMessage =excelReader.getCellData(xlSheetName, 13, 7);
        
        excelReader.setCellData(xlfile, xlSheetName, 13, 8, actvalidationConfirmationMessage);
		
		System.out.println("*********************************checkUpdatebuttonwithoutselectinganyVoucher****************************");
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		if(actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage))
		{
		
			/*String expMessage="";
			
			String actMessage=checkValidationMessage(expMessage);
			*/
			System.out.println("Test Pass : displaying message to select Any Voucher");
			excelReader.setCellData(xlfile, xlSheetName, 12, 9, resPass);
			return true;
			
		}
		else
		{
			System.out.println("Test Fail : Not displaying message to select Any Voucher");
			excelReader.setCellData(xlfile, xlSheetName, 12, 9, resFail);
			return false;
		}
	}
	
	
	// Adding Tags , Currency < Exchange Local Exchange, Due date For Receipts
	
		public boolean 	checkTagsCurrencyAndDueDateOfReceipts() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptsBtn));
			receiptsBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 15, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 15, 7);
			excelReader.setCellData(xlfile, xlSheetName, 15, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select s2=new Select(positionDropdown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 16, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 16, 7);
			excelReader.setCellData(xlfile, xlSheetName, 16, 8, actPositionR1C1);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText("Header");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
			inputExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
			inputLocalExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
			dueDateDropdown.click();
			Select s3=new Select(dueDateDropdown);
			s3.selectByVisibleText("Header");
			
			
			Select AddCurrencyInDropdown=new Select(addCurrencyInDropdown);
			String actaddCurrencyInDropdown=AddCurrencyInDropdown.getFirstSelectedOption().getText();
			String expaddCurrencyInDropdown=excelReader.getCellData(xlSheetName, 17, 7);
			excelReader.setCellData(xlfile, xlSheetName, 17, 8, actaddCurrencyInDropdown);	
			
			
			Select DueDateDropdown=new Select(dueDateDropdown);
			String actdueDateDropdown=DueDateDropdown.getFirstSelectedOption().getText();
			String expdueDateDropdown=excelReader.getCellData(xlSheetName, 18, 7);
			excelReader.setCellData(xlfile, xlSheetName, 18, 8, actdueDateDropdown);	
			
			
			
			
			boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
			boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
			
			
			
			boolean expinputExchangeRateChkBox		=true;
			boolean expinputLocalExchangeRateChkBox	=true;
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expMessage=excelReader.getCellData(xlSheetName, 19, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 19, 8, actMessage);
			
			System.out.println("****************************************checkTagsCurrencyAndDueDateOfReceipts**************************************");
			
			System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
			System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
			System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
			System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
			System.out.println("MastersR1C1                   : "+actMastersR1C1                   +"  value expected  "+expMastersR1C1);
			System.out.println("PositionR1C1                  : "+actPositionR1C1                  +"  value expected  "+expPositionR1C1 );
			System.out.println("Message                       : "+actMessage                       +"  value expected  "+expMessage );
			
			
			
			if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
				actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown) && 
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 14, 9, resPass);
				System.out.println("Test Pass : Recepit Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 14, 9, resFail);
				System.out.println("Test Fail :Recepit Voucher is Created Successfully");
				return false;
			}
		}
		


		
	
		public boolean 	checkCreatingNewVoucherInReceipts() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
			createVoucherBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
			titleTxt.click();
			titleTxt.clear();
			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 21, 6));
			titleTxt.sendKeys(Keys.TAB);
			
			
			String actTitle=titleTxt.getAttribute("value");
			String expTitle=excelReader.getCellData(xlSheetName, 21, 7);
			excelReader.setCellData(xlfile, xlSheetName, 21, 8, actTitle);
			
			
			System.err.println(" Recepits Title    : "+actTitle +" Value Expected : "+expTitle);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 22, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 22, 7);
			excelReader.setCellData(xlfile, xlSheetName, 22, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select p1=new Select(positionDropdown);
			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 23, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 23, 7);
			excelReader.setCellData(xlfile, xlSheetName, 23, 8, actPositionR1C1);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			masters2.click();
			
			Select s2=new Select(masterDropDown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 24, 6));
			
			Select getValuesOfMasterC2=new Select(masterDropDown);
			String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR2C1=excelReader.getCellData(xlSheetName, 24, 7);
			excelReader.setCellData(xlfile, xlSheetName, 24, 8, actMastersR2C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			position2.click();
			
			positionDropdown.click();
			
			Select p2=new Select(positionDropdown);
			p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 25, 6));
			
			Select getValueOfPostionC2=new Select(positionDropdown);
			String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR2C2=excelReader.getCellData(xlSheetName, 25, 7);
			excelReader.setCellData(xlfile, xlSheetName, 25, 8, actPositionR2C2);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText("Header");
			
			if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
				inputExchangeRateChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
				inputLocalExchangeRateChkBox.click();
				
			}
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
			editLayoutHeaderTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 26, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 26, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
		   String expMessage=excelReader.getCellData(xlSheetName, 27, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 27, 8, actMessage);
			
			System.out.println("****************************************checkTagsCurrencyAndDueDateOfReceipts**************************************");
			
			
			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
			System.out.println("PositionR1C1                  : "+actPositionR1C1        +"  value expected  "+expPositionR1C1 );
			System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
			System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
			
			
			
			if(actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 20, 9, resPass);
				System.out.println("Test Pass : Recepit Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 20, 9, resFail);
				System.out.println("Test Fail :Recepit Voucher is Created Successfully");
				return false;
			}
		}
		

	
		
		public boolean 	checkTagsCurrencyAndDueDateOfPayment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsBtn));
			paymentsBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 29, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 29, 7);
			excelReader.setCellData(xlfile, xlSheetName, 29, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select s2=new Select(positionDropdown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 30, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 30, 7);
			excelReader.setCellData(xlfile, xlSheetName, 30, 8, actPositionR1C1);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText(excelReader.getCellData(xlSheetName, 31, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
			inputExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
			inputLocalExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
			dueDateDropdown.click();
			Select s3=new Select(dueDateDropdown);
			s3.selectByVisibleText(excelReader.getCellData(xlSheetName, 32, 6));
			
			
			Select AddCurrencyInDropdown=new Select(addCurrencyInDropdown);
			String actaddCurrencyInDropdown=AddCurrencyInDropdown.getFirstSelectedOption().getText();
			String expaddCurrencyInDropdown=excelReader.getCellData(xlSheetName, 31, 7);
			excelReader.setCellData(xlfile, xlSheetName, 31, 8, actaddCurrencyInDropdown);	
			
			
			Select DueDateDropdown=new Select(dueDateDropdown);
			String actdueDateDropdown=DueDateDropdown.getFirstSelectedOption().getText();
			String expdueDateDropdown=excelReader.getCellData(xlSheetName, 32, 7);
			excelReader.setCellData(xlfile, xlSheetName, 32, 8, actdueDateDropdown);	
			
			
			
			
			boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
			boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
			
			
			
			boolean expinputExchangeRateChkBox		=true;
			boolean expinputLocalExchangeRateChkBox	=true;
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expMessage=excelReader.getCellData(xlSheetName, 33, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 33, 8, actMessage);
			
			System.out.println("****************************************checkTagsCurrencyAndDueDateOfPayments**************************************");
			
			System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
			System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
			System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
			System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
			System.out.println("MastersR1C1                   : "+actMastersR1C1                   +"  value expected  "+expMastersR1C1);
			System.out.println("PositionR1C1                  : "+actPositionR1C1                  +"  value expected  "+expPositionR1C1 );
			System.out.println("Message                       : "+actMessage                       +"  value expected  "+expMessage );
			
			
			
			if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
				actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown) && 
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 28, 9, resPass);
				System.out.println("Test Pass : Recepit Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 28, 9, resFail);
				System.out.println("Test Fail :Recepit Voucher is Created Successfully");
				return false;
			}
		}
		


		
	
		public boolean 	checkCreatingNewVoucherInPayments() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
			createVoucherBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
			titleTxt.click();
			titleTxt.clear();
			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 35, 6));
			titleTxt.sendKeys(Keys.TAB);
			
			
			String actTitle=titleTxt.getAttribute("value");
			String expTitle=excelReader.getCellData(xlSheetName, 35, 7);
			excelReader.setCellData(xlfile, xlSheetName, 35, 8, actTitle);
			
			
			System.err.println(" Recepits Title    : "+actTitle +" Value Expected : "+expTitle);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 36, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 36, 7);
			excelReader.setCellData(xlfile, xlSheetName, 36, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select p1=new Select(positionDropdown);
			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 37, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 37, 7);
			excelReader.setCellData(xlfile, xlSheetName, 37, 8, actPositionR1C1);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			masters2.click();
			
			Select s2=new Select(masterDropDown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 38, 6));
			
			Select getValuesOfMasterC2=new Select(masterDropDown);
			String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR2C1=excelReader.getCellData(xlSheetName, 38, 7);
			excelReader.setCellData(xlfile, xlSheetName, 38, 8, actMastersR2C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			position2.click();
			
			positionDropdown.click();
			
			Select p2=new Select(positionDropdown);
			p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 39, 6));
			
			Select getValueOfPostionC2=new Select(positionDropdown);
			String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR2C2=excelReader.getCellData(xlSheetName, 39, 7);
			excelReader.setCellData(xlfile, xlSheetName, 39, 8, actPositionR2C2);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText("Header");
			
			if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
				inputExchangeRateChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
				inputLocalExchangeRateChkBox.click();
				
			}
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
			editLayoutHeaderTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 40, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 40, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
		   String expMessage=excelReader.getCellData(xlSheetName, 41, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 41, 8, actMessage);
			
			System.out.println("****************************************checkCreatingNewVoucherInPayments**************************************");
			
			
			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
			System.out.println("PositionR1C1                  : "+actPositionR1C1        +"  value expected  "+expPositionR1C1 );
			System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
			System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
			
			
			
			if(actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 34, 9, resPass);
				System.out.println("Test Pass : Recepit Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 34, 9, resFail);
				System.out.println("Test Fail :Recepit Voucher is Created Successfully");
				return false;
			}
		}
		
		
		
		
		
		public boolean 	checkTagsCurrencyAndDueDateOfPostDatedRecepits() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postDatedreceiptsBtn));
			postDatedreceiptsBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 43, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 43, 7);
			excelReader.setCellData(xlfile, xlSheetName, 43, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select s2=new Select(positionDropdown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 44, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 44, 7);
			excelReader.setCellData(xlfile, xlSheetName, 44, 8, actPositionR1C1);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText(excelReader.getCellData(xlSheetName, 45, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
			inputExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
			inputLocalExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
			dueDateDropdown.click();
			Select s3=new Select(dueDateDropdown);
			s3.selectByVisibleText(excelReader.getCellData(xlSheetName, 46, 6));
			
			
			Select AddCurrencyInDropdown=new Select(addCurrencyInDropdown);
			String actaddCurrencyInDropdown=AddCurrencyInDropdown.getFirstSelectedOption().getText();
			String expaddCurrencyInDropdown=excelReader.getCellData(xlSheetName, 45, 7);
			excelReader.setCellData(xlfile, xlSheetName, 45, 8, actaddCurrencyInDropdown);	
			
			
			Select DueDateDropdown=new Select(dueDateDropdown);
			String actdueDateDropdown=DueDateDropdown.getFirstSelectedOption().getText();
			String expdueDateDropdown=excelReader.getCellData(xlSheetName, 46, 7);
			excelReader.setCellData(xlfile, xlSheetName, 46, 8, actdueDateDropdown);	
			
			
			
			
			boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
			boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
			
			
			
			boolean expinputExchangeRateChkBox		=true;
			boolean expinputLocalExchangeRateChkBox	=true;
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expMessage=excelReader.getCellData(xlSheetName, 47, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 47, 8, actMessage);
			
			System.out.println("****************************************checkTagsCurrencyAndDueDateOfPostDatedRecepits**************************************");
			
			System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
			System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
			System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
			System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
			System.out.println("MastersR1C1                   : "+actMastersR1C1                   +"  value expected  "+expMastersR1C1);
			System.out.println("PositionR1C1                  : "+actPositionR1C1                  +"  value expected  "+expPositionR1C1 );
			System.out.println("Message                       : "+actMessage                       +"  value expected  "+expMessage );
			
			
			
			if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
				actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown) && 
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 42, 9, resPass);
				System.out.println("Test Pass : Recepit Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 42, 9, resFail);
				System.out.println("Test Fail :Recepit Voucher is Created Successfully");
				return false;
			}
		}
		


		
	
		public boolean 	checkCreatingNewVoucherInPostDatedRecepits() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
			createVoucherBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
			titleTxt.click();
			titleTxt.clear();
			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 49, 6));
			titleTxt.sendKeys(Keys.TAB);
			
			
			String actTitle=titleTxt.getAttribute("value");
			String expTitle=excelReader.getCellData(xlSheetName, 49, 7);
			excelReader.setCellData(xlfile, xlSheetName, 49, 8, actTitle);
			
			
			System.err.println(" Recepits Title    : "+actTitle +" Value Expected : "+expTitle);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 50, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 50, 7);
			excelReader.setCellData(xlfile, xlSheetName, 50, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select p1=new Select(positionDropdown);
			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 51, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 51, 7);
			excelReader.setCellData(xlfile, xlSheetName, 51, 8, actPositionR1C1);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			masters2.click();
			
			Select s2=new Select(masterDropDown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 52, 6));
			
			Select getValuesOfMasterC2=new Select(masterDropDown);
			String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR2C1=excelReader.getCellData(xlSheetName, 52, 7);
			excelReader.setCellData(xlfile, xlSheetName, 52, 8, actMastersR2C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			position2.click();
			
			positionDropdown.click();
			
			Select p2=new Select(positionDropdown);
			p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 53, 6));
			
			Select getValueOfPostionC2=new Select(positionDropdown);
			String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR2C2=excelReader.getCellData(xlSheetName, 53, 7);
			excelReader.setCellData(xlfile, xlSheetName, 53, 8, actPositionR2C2);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText("Header");
			
			if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
				inputExchangeRateChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
				inputLocalExchangeRateChkBox.click();
				
			}
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
			editLayoutHeaderTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 54, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 54, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
		   String expMessage=excelReader.getCellData(xlSheetName, 55, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 55, 8, actMessage);
			
			System.out.println("****************************************checkCreatingNewVoucherInPostDatedRecepits**************************************");
			
			
			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
			System.out.println("PositionR1C1                  : "+actPositionR1C1        +"  value expected  "+expPositionR1C1 );
			System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
			System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
			
			
			
			if(actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 48, 9, resPass);
				System.out.println("Test Pass : Recepit Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 48, 9, resFail);
				System.out.println("Test Fail :Recepit Voucher is Created Successfully");
				return false;
			}
		}
		

		
		
		
		
		public boolean 	checkTagsCurrencyAndDueDateOfPostDatedPayments() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postDatedpaymentsBtn));
			postDatedpaymentsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 57, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 57, 7);
			excelReader.setCellData(xlfile, xlSheetName, 57, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select s2=new Select(positionDropdown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 58, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 58, 7);
			excelReader.setCellData(xlfile, xlSheetName, 58, 8, actPositionR1C1);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText(excelReader.getCellData(xlSheetName, 59, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
			inputExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
			inputLocalExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
			dueDateDropdown.click();
			Select s3=new Select(dueDateDropdown);
			s3.selectByVisibleText(excelReader.getCellData(xlSheetName, 60, 6));
			
			
			Select AddCurrencyInDropdown=new Select(addCurrencyInDropdown);
			String actaddCurrencyInDropdown=AddCurrencyInDropdown.getFirstSelectedOption().getText();
			String expaddCurrencyInDropdown=excelReader.getCellData(xlSheetName, 59, 7);
			excelReader.setCellData(xlfile, xlSheetName, 59, 8, actaddCurrencyInDropdown);	
			
			
			Select DueDateDropdown=new Select(dueDateDropdown);
			String actdueDateDropdown=DueDateDropdown.getFirstSelectedOption().getText();
			String expdueDateDropdown=excelReader.getCellData(xlSheetName, 60, 7);
			excelReader.setCellData(xlfile, xlSheetName, 60, 8, actdueDateDropdown);	
			
			
			
			
			boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
			boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
			
			
			
			boolean expinputExchangeRateChkBox		=true;
			boolean expinputLocalExchangeRateChkBox	=true;
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expMessage=excelReader.getCellData(xlSheetName, 61, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 61, 8, actMessage);
			
			System.out.println("****************************************checkTagsCurrencyAndDueDateOfPostDatedRecepits**************************************");
			
			System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
			System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
			System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
			System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
			System.out.println("MastersR1C1                   : "+actMastersR1C1                   +"  value expected  "+expMastersR1C1);
			System.out.println("PositionR1C1                  : "+actPositionR1C1                  +"  value expected  "+expPositionR1C1 );
			System.out.println("Message                       : "+actMessage                       +"  value expected  "+expMessage );
			
			
			
			if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
				actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown) && 
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 56, 9, resPass);
				System.out.println("Test Pass : post Dtaed Payments Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 56, 9, resFail);
				System.out.println("Test Fail :Recepit Voucher is Created Successfully");
				return false;
			}
		}
		


		
	
		public boolean 	checkCreatingNewVoucherInPostDatedPayments() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
			createVoucherBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
			titleTxt.click();
			titleTxt.clear();
			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 63, 6));
			titleTxt.sendKeys(Keys.TAB);
			
			
			String actTitle=titleTxt.getAttribute("value");
			String expTitle=excelReader.getCellData(xlSheetName, 63, 7);
			excelReader.setCellData(xlfile, xlSheetName, 63, 8, actTitle);
			
			
			System.err.println(" POst Datated Payments Title    : "+actTitle +" Value Expected : "+expTitle);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 64, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 64, 7);
			excelReader.setCellData(xlfile, xlSheetName, 64, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select p1=new Select(positionDropdown);
			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 65, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 65, 7);
			excelReader.setCellData(xlfile, xlSheetName, 65, 8, actPositionR1C1);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			masters2.click();
			
			Select s2=new Select(masterDropDown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 66, 6));
			
			Select getValuesOfMasterC2=new Select(masterDropDown);
			String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR2C1=excelReader.getCellData(xlSheetName, 66, 7);
			excelReader.setCellData(xlfile, xlSheetName, 66, 8, actMastersR2C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			position2.click();
			
			positionDropdown.click();
			
			Select p2=new Select(positionDropdown);
			p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 67, 6));
			
			Select getValueOfPostionC2=new Select(positionDropdown);
			String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR2C2=excelReader.getCellData(xlSheetName, 67, 7);
			excelReader.setCellData(xlfile, xlSheetName, 67, 8, actPositionR2C2);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText("Header");
			
			if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
				inputExchangeRateChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
				inputLocalExchangeRateChkBox.click();
				
			}
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
			editLayoutHeaderTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 68, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 68, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
		   String expMessage=excelReader.getCellData(xlSheetName, 69, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 69, 8, actMessage);
			
			System.out.println("****************************************checkCreatingNewVoucherInPostDatedPayments**************************************");
			
			
			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
			System.out.println("PositionR1C1                  : "+actPositionR1C1        +"  value expected  "+expPositionR1C1 );
			System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
			System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
			
			
			
			if(actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 62, 9, resPass);
				System.out.println("Test Pass : Recepit Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 62, 9, resFail);
				System.out.println("Test Fail :Recepit Voucher is Created Successfully");
				return false;
			}
		}
		
		
		
		

		
			
		
		
		public boolean 	checkTagsCurrencyAndDueDateOfPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersBtn));
			purchaseVouchersBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
			titleTxt.click();
			
			String acttitleTxt						=titleTxt.getAttribute("value");
			String exptitleTxt						=excelReader.getCellData(xlSheetName, 70, 7);
			excelReader.setCellData(xlfile, xlSheetName, 70, 8, acttitleTxt);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 71, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 71, 7);
			excelReader.setCellData(xlfile, xlSheetName, 71, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select p1=new Select(positionDropdown);
			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 72, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 72, 7);
			excelReader.setCellData(xlfile, xlSheetName, 72, 8, actPositionR1C1);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			masters2.click();
			
			Select s2=new Select(masterDropDown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 73, 6));
			
			Select getValuesOfMasterC2=new Select(masterDropDown);
			String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR2C1=excelReader.getCellData(xlSheetName, 73, 7);
			excelReader.setCellData(xlfile, xlSheetName, 73, 8, actMastersR2C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			position2.click();
			
			positionDropdown.click();
			
			Select p2=new Select(positionDropdown);
			p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 74, 6));
			
			Select getValueOfPostionC2=new Select(positionDropdown);
			String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR2C2=excelReader.getCellData(xlSheetName, 74, 7);
			excelReader.setCellData(xlfile, xlSheetName, 74, 8, actPositionR2C2);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			
			if(updateStockChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
				updateStockChkBox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText(excelReader.getCellData(xlSheetName, 75, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
			inputExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
			inputLocalExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
			dueDateDropdown.click();
			Select s3=new Select(dueDateDropdown);
			s3.selectByVisibleText(excelReader.getCellData(xlSheetName, 76, 6));
			
			
			Select AddCurrencyInDropdown=new Select(addCurrencyInDropdown);
			String actaddCurrencyInDropdown=AddCurrencyInDropdown.getFirstSelectedOption().getText();
			String expaddCurrencyInDropdown=excelReader.getCellData(xlSheetName, 75, 7);
			excelReader.setCellData(xlfile, xlSheetName, 75, 8, actaddCurrencyInDropdown);	
			
			
			Select DueDateDropdown=new Select(dueDateDropdown);
			String actdueDateDropdown=DueDateDropdown.getFirstSelectedOption().getText();
			String expdueDateDropdown=excelReader.getCellData(xlSheetName, 76, 7);
			excelReader.setCellData(xlfile, xlSheetName, 76, 8, actdueDateDropdown);	
			
			
			
			
			boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
			boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
			
			
			
			boolean expinputExchangeRateChkBox		=true;
			boolean expinputLocalExchangeRateChkBox	=true;
			
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expMessage=excelReader.getCellData(xlSheetName, 77, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 77, 8, actMessage);*/
			
			System.out.println("****************************************checkTagsCurrencyAndDueDateOfPostDatedRecepits**************************************");
			
			System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
			System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
			System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
			System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
			System.out.println("MastersR1C1                   : "+actMastersR1C1                   +"  value expected  "+expMastersR1C1);
			System.out.println("PositionR1C1                  : "+actPositionR1C1                  +"  value expected  "+expPositionR1C1 );
			//System.out.println("Message                       : "+actMessage                       +"  value expected  "+expMessage );
			System.out.println("MastersR1C2                   : "+actMastersR2C1         		   +"  value expected  "+expMastersR2C1);
			System.out.println("PositionR2C2                  : "+actPositionR2C2                  +"  value expected  "+expPositionR2C2);
			
			
			if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
				actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown) && 
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				/*actMessage.equalsIgnoreCase(expMessage) &&*/ actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && 
				actPositionR2C2.equalsIgnoreCase(expPositionR2C2))
			{
				excelReader.setCellData(xlfile, xlSheetName, 70, 9, resPass);
				System.out.println("Test Pass : Purchase Voucher is Saved Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 70, 9, resFail);
				System.out.println("Test Fail :Purchase Voucher is Saved Successfully");
				return false;
			}
		}
		


	
	


public boolean checkSavingFieldsinFooterTabEditScreenPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
	editScreenFooterTab.click();
	
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
	editScreenaddBtn.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
	editScreenCaptionTxt.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
	editScreenCaptionTxt.click();
	editScreenCaptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 79, 6));
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
	editScreenNoOfDecimalsTxt.click();
	editScreenNoOfDecimalsTxt.sendKeys(excelReader.getCellData(xlSheetName, 80, 6));
	
	Thread.sleep(1000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
	EditScreenAddToStockDropDown.click();
	Select s2=new Select(EditScreenAddToStockDropDown);
	s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 81, 6));  
	
	Thread.sleep(1000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
	editScreenAddToNetDropdown.click();
	Select s3=new Select(editScreenAddToNetDropdown);
	s3.selectByVisibleText(excelReader.getCellData(xlSheetName, 82, 6));
	
	Thread.sleep(1000);

	
	editScreenAddToNetDropdown.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
	editScreenFieldOkBtn.click();
	
	System.out.println("*****************************************checkSavingFieldsinFooterTabEditScreeninPurchaseVoucher***************************************");
	
	String expMessage=excelReader.getCellData(xlSheetName, 83, 7);
    
	String actMessage=checkValidationMessage(expMessage);
	excelReader.setCellData(xlfile, xlSheetName, 83, 8, actMessage);
	
	//Changes Done 
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
	updateBtn.click();
	
	String expSavingMessage=excelReader.getCellData(xlSheetName, 92, 7);
	
	String actSavingMessage=checkValidationMessage(expMessage);
	
	excelReader.setCellData(xlfile, xlSheetName, 92, 8, actMessage);
	
	
	
	if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, xlSheetName, 78, 9, resPass);
			System.out.println("Test Pass : Purchase Voucher is Saved Successfully");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 78, 9, resFail);
			System.out.println("Test Fail :Purchase Voucher is Saved Successfully");
			return false;
		}
		
}
	
	

	public boolean checkRDBodyaddingFieldinPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
		editScreenBodyTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		editScreenCaptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 85, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys(excelReader.getCellData(xlSheetName, 86, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		
		Select s2=new Select(EditScreenAddToStockDropDown);
		s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 87, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		
		Select s3=new Select(editScreenAddToNetDropdown);
		s3.selectByVisibleText(excelReader.getCellData(xlSheetName, 88, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddFieldsBehaviourDropdown));
		editScreenAddFieldsBehaviourDropdown.click();
		
		Select s=new Select(editScreenAddFieldsBehaviourDropdown);
		s.selectByVisibleText(excelReader.getCellData(xlSheetName, 90, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		editScreenAddBehaviourformulaTxt.click();
		editScreenAddBehaviourformulaTxt.sendKeys(excelReader.getCellData(xlSheetName, 91, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("******************************************checkRDBodyaddingField*****************************************");
		
		String expMessage=excelReader.getCellData(xlSheetName, 89, 7);
	    
		String actMessage=checkValidationMessage(expMessage);
		excelReader.setCellData(xlfile, xlSheetName, 89, 8, actMessage);
		
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expSavingMessage=excelReader.getCellData(xlSheetName, 92, 7);
		
		String actSavingMessage=checkValidationMessage(expMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 92, 8, actMessage);
		*/
			
		if(actMessage.equalsIgnoreCase(expMessage) )
		{
			System.out.println("Test Pass : Data Saved Succesfully");
			excelReader.setCellData(xlfile, xlSheetName, 84, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Data NOT Saved");
			excelReader.setCellData(xlfile, xlSheetName, 84, 9, resFail);
			return false;		
		}
	}
	
	
	
	
	
		public boolean 	checkCreatingNewVoucherPurchaseVoucherNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
			createVoucherBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
			titleTxt.click();
			titleTxt.clear();
			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 94, 6));
			titleTxt.sendKeys(Keys.TAB);
			
			
			String actTitle=titleTxt.getAttribute("value");
			String expTitle=excelReader.getCellData(xlSheetName, 94, 7);
			excelReader.setCellData(xlfile, xlSheetName, 94, 8, actTitle);
			
			
			System.err.println(" PurchaseVoucherNew Title    : "+actTitle +" Value Expected : "+expTitle);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 95, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 95, 7);
			excelReader.setCellData(xlfile, xlSheetName, 95, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select p1=new Select(positionDropdown);
			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 96, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 96, 7);
			excelReader.setCellData(xlfile, xlSheetName, 96, 8, actPositionR1C1);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			masters2.click();
			
			Select s2=new Select(masterDropDown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 97, 6));
			
			Select getValuesOfMasterC2=new Select(masterDropDown);
			String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR2C1=excelReader.getCellData(xlSheetName, 97, 7);
			excelReader.setCellData(xlfile, xlSheetName, 97, 8, actMastersR2C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			position2.click();
			
			positionDropdown.click();
			
			Select p2=new Select(positionDropdown);
			p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 98, 6));
			
			Select getValueOfPostionC2=new Select(positionDropdown);
			String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR2C2=excelReader.getCellData(xlSheetName, 98, 7);
			excelReader.setCellData(xlfile, xlSheetName, 98, 8, actPositionR2C2);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText("Header");
			
			if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
				inputExchangeRateChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
				inputLocalExchangeRateChkBox.click();
				
			}
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
			editLayoutHeaderTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 99, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 99, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
		   String expMessage=excelReader.getCellData(xlSheetName, 100, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 100, 8, actMessage);
			
			System.out.println("****************************************checkCreatingNewVoucherInPurchaseVoucherNew**************************************");
			
			
			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
			System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
			System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
			
			
			
			if(actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 93, 9, resPass);
				System.out.println("Test Pass : Recepit Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 93, 9, resFail);
				System.out.println("Test Fail :Recepit Voucher is Created Successfully");
				return false;
			}
		}
		
		
		
		

		public boolean 	checkCreatingNewVoucherPurchaseVoucheVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
			createVoucherBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
			titleTxt.click();
			titleTxt.clear();
			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 102, 6));
			titleTxt.sendKeys(Keys.TAB);
			
			
			String actTitle=titleTxt.getAttribute("value");
			String expTitle=excelReader.getCellData(xlSheetName, 102, 7);
			excelReader.setCellData(xlfile, xlSheetName, 102, 8, actTitle);
			
			
			System.err.println(" PurchaseVoucherVAt Title    : "+actTitle +" Value Expected : "+expTitle);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 103, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 103, 7);
			excelReader.setCellData(xlfile, xlSheetName, 103, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select p1=new Select(positionDropdown);
			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 104, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 104, 7);
			excelReader.setCellData(xlfile, xlSheetName, 104, 8, actPositionR1C1);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			masters2.click();
			
			Select s2=new Select(masterDropDown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 105, 6));
			
			Select getValuesOfMasterC2=new Select(masterDropDown);
			String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR2C1=excelReader.getCellData(xlSheetName, 105, 7);
			excelReader.setCellData(xlfile, xlSheetName, 105, 8, actMastersR2C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			position2.click();
			
			positionDropdown.click();
			
			Select p2=new Select(positionDropdown);
			p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 106, 6));
			
			Select getValueOfPostionC2=new Select(positionDropdown);
			String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR2C2=excelReader.getCellData(xlSheetName, 106, 7);
			excelReader.setCellData(xlfile, xlSheetName, 106, 8, actPositionR2C2);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText("Header");
			
			if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
				inputExchangeRateChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
				inputLocalExchangeRateChkBox.click();
				
			}
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
			editLayoutHeaderTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 107, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 107, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
		   String expMessage=excelReader.getCellData(xlSheetName, 108, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 108, 8, actMessage);
			
			System.out.println("****************************************checkCreatingNewVoucherInPostDatedPayments**************************************");
			
			
			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
			System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
			System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
			
			
			
			if(actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 101, 9, resPass);
				System.out.println("Test Pass : PV VAT Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 101, 9, resFail);
				System.out.println("Test Fail :PV VAT  Voucher is Created Successfully");
				return false;
			}
		}
		
		    
		    

			public boolean 	checkCreatingNewVoucherPVVATView() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
				createVoucherBtn.click();
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
				documentsTab.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
				titleTxt.click();
				titleTxt.clear();
				titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 110, 6));
				titleTxt.sendKeys(Keys.TAB);
				
				
				String actTitle=titleTxt.getAttribute("value");
				String expTitle=excelReader.getCellData(xlSheetName, 110, 7);
				excelReader.setCellData(xlfile, xlSheetName, 110, 8, actTitle);
				
				
				System.err.println(" PVVATView Title    : "+actTitle +" Value Expected : "+expTitle);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
				masters1.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
				masterDropDown.click();
				
				Select s1=new Select(masterDropDown);
				s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 111, 6));
				
				Select getValuesOfMasterC1=new Select(masterDropDown);
				String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
				String expMastersR1C1=excelReader.getCellData(xlSheetName, 111, 7);
				excelReader.setCellData(xlfile, xlSheetName, 111, 8, actMastersR1C1);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
				position1.click();
				
				positionDropdown.click();
				
				Select p1=new Select(positionDropdown);
				p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 112, 6));
				
				Select getValueOfPostionC1=new Select(positionDropdown);
				String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
				String expPositionR1C1=excelReader.getCellData(xlSheetName, 112, 7);
				excelReader.setCellData(xlfile, xlSheetName, 112, 8, actPositionR1C1);	
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
				masters2.click();
				
				Select s2=new Select(masterDropDown);
				s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 113, 6));
				
				Select getValuesOfMasterC2=new Select(masterDropDown);
				String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
				String expMastersR2C1=excelReader.getCellData(xlSheetName, 113, 7);
				excelReader.setCellData(xlfile, xlSheetName, 113, 8, actMastersR2C1);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
				position2.click();
				
				positionDropdown.click();
				
				Select p2=new Select(positionDropdown);
				p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 114, 6));
				
				Select getValueOfPostionC2=new Select(positionDropdown);
				String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
				String expPositionR2C2=excelReader.getCellData(xlSheetName, 114, 7);
				excelReader.setCellData(xlfile, xlSheetName, 114, 8, actPositionR2C2);	
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
				miscellaneousTab.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
				addCurrencyInDropdown.click();
				Select s=new Select(addCurrencyInDropdown);
				s.selectByVisibleText("Header");
				
				if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
					inputExchangeRateChkBox.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
					inputLocalExchangeRateChkBox.click();
					
				}
				

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
				editLayoutTab.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
				editLayoutHeaderTab.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
				editLayoutLoadFieldsBtn.click();
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
				Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
				editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 115, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
				editLayoutselectAllBtn.click();

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
				editLayoutokBtn.click();
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
				editLayoutTab.click();
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
				editLayoutBodyTab.click();
				
				Thread.sleep(3000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
				editLayoutLoadFieldsBtn.click();
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
				editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 115, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
				editLayoutselectAllBtn.click();

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
				editLayoutokBtn.click();
				
				Thread.sleep(2000);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
				updateBtn.click();
				
			   String expMessage=excelReader.getCellData(xlSheetName, 116, 7);
				
				String actMessage=checkValidationMessage(expMessage);
				
				excelReader.setCellData(xlfile, xlSheetName, 116, 8, actMessage);
				
				System.out.println("****************************************checkCreatingNewVoucherInPVVATView**************************************");
				
				
				System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
				System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
				System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
				System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
				
				
				
				if(actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&
					actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
					actMessage.equalsIgnoreCase(expMessage))
				{
					excelReader.setCellData(xlfile, xlSheetName, 109, 9, resPass);
					System.out.println("Test Pass : PV VAT  View Voucher is Created Successfully");
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, xlSheetName, 109, 9, resFail);
					System.out.println("Test Fail :PV VAT  View Voucher is Created Successfully");
					return false;
				}
			}
			
			
    
    public boolean 	checkTagsCurrencyAndDueDateOfSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt						=titleTxt.getAttribute("value");
		String exptitleTxt						=excelReader.getCellData(xlSheetName, 117, 7);
		excelReader.setCellData(xlfile, xlSheetName, 117, 8, acttitleTxt);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 118, 6));
		
		Select getValuesOfMasterC1=new Select(masterDropDown);
		String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
		String expMastersR1C1=excelReader.getCellData(xlSheetName, 118, 7);
		excelReader.setCellData(xlfile, xlSheetName, 118, 8, actMastersR1C1);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select p1=new Select(positionDropdown);
		p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 119, 6));
		
		Select getValueOfPostionC1=new Select(positionDropdown);
		String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
		String expPositionR1C1=excelReader.getCellData(xlSheetName, 119, 7);
		excelReader.setCellData(xlfile, xlSheetName, 119, 8, actPositionR1C1);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		Select s2=new Select(masterDropDown);
		s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 120, 6));
		
		Select getValuesOfMasterC2=new Select(masterDropDown);
		String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
		String expMastersR2C1=excelReader.getCellData(xlSheetName, 120, 7);
		excelReader.setCellData(xlfile, xlSheetName, 120, 8, actMastersR2C1);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		positionDropdown.click();
		
		Select p2=new Select(positionDropdown);
		p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 121, 6));
		
		Select getValueOfPostionC2=new Select(positionDropdown);
		String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
		String expPositionR2C2=excelReader.getCellData(xlSheetName, 121, 7);
		excelReader.setCellData(xlfile, xlSheetName, 121, 8, actPositionR2C2);	
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
		
		
		if(updateStockChkBox.isSelected()==false && selectAccountInEveryLineChkBox.isSelected()==false )
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
			updateStockChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountInEveryLineChkBox));
			selectAccountInEveryLineChkBox.click();
			
			
		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText(excelReader.getCellData(xlSheetName, 122, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s3=new Select(dueDateDropdown);
		s3.selectByVisibleText(excelReader.getCellData(xlSheetName, 123, 6));
		
		
		Select AddCurrencyInDropdown=new Select(addCurrencyInDropdown);
		String actaddCurrencyInDropdown=AddCurrencyInDropdown.getFirstSelectedOption().getText();
		String expaddCurrencyInDropdown=excelReader.getCellData(xlSheetName, 122, 7);
		excelReader.setCellData(xlfile, xlSheetName, 122, 8, actaddCurrencyInDropdown);	
		
		
		Select DueDateDropdown=new Select(dueDateDropdown);
		String actdueDateDropdown=DueDateDropdown.getFirstSelectedOption().getText();
		String expdueDateDropdown=excelReader.getCellData(xlSheetName, 123, 7);
		excelReader.setCellData(xlfile, xlSheetName, 123, 8, actdueDateDropdown);	
		
		
		
		
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		
		
		
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
		editScreenBodyTab.click();
		
        Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		
		editScreenCaptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 125, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		editScreenPreloadTxt.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preloadformulaTxt));
		preloadformulaTxt.click();
		
		preloadformulaTxt.sendKeys(excelReader.getCellData(xlSheetName, 126, 6));
		preloadFormulaokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys(excelReader.getCellData(xlSheetName, 127, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		
		Select selectstock=new Select(EditScreenAddToStockDropDown);
		selectstock.selectByVisibleText(excelReader.getCellData(xlSheetName, 128, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		
		Select selectaddtonet=new Select(editScreenAddToNetDropdown);
		selectaddtonet.selectByVisibleText(excelReader.getCellData(xlSheetName, 129, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("*****************************************checkinputingDatainAddFieldsinEditScreenDeliveryNotes******************************************");

		String expMessage=excelReader.getCellData(xlSheetName, 130, 7);
		String actMessage=checkValidationMessage(expMessage);		
		
		excelReader.setCellData(xlfile, xlSheetName, 130, 8, actMessage);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		editScreenCaptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 131, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		editScreenPreloadTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preloadformulaTxt));
		preloadformulaTxt.click();
		preloadformulaTxt.sendKeys(excelReader.getCellData(xlSheetName, 132, 6));
		preloadFormulaokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys(excelReader.getCellData(xlSheetName, 133, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		
		Select selectstock2=new Select(EditScreenAddToStockDropDown);
		selectstock2.selectByVisibleText(excelReader.getCellData(xlSheetName, 134, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		
		Select selectaddtonet2=new Select(editScreenAddToNetDropdown);
		selectaddtonet2.selectByVisibleText(excelReader.getCellData(xlSheetName, 135, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		String expMessage2=excelReader.getCellData(xlSheetName, 136, 7);
		String actMessage2=checkValidationMessage(expMessage);		
		
		excelReader.setCellData(xlfile, xlSheetName, 136, 8, actMessage);
		
		
		

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		editScreenCaptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 137, 6));
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys(excelReader.getCellData(xlSheetName, 138, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		
		Select selectstock3=new Select(EditScreenAddToStockDropDown);
		selectstock3.selectByVisibleText(excelReader.getCellData(xlSheetName, 139, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		
		Select selectaddtonet3=new Select(editScreenAddToNetDropdown);
		selectaddtonet3.selectByVisibleText(excelReader.getCellData(xlSheetName, 140, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		String expMessage3=excelReader.getCellData(xlSheetName, 141, 7);
		String actMessage3=checkValidationMessage(expMessage);		
		
		excelReader.setCellData(xlfile, xlSheetName, 141, 8, actMessage);
		
		
		

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		editScreenCaptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 142, 6));
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys(excelReader.getCellData(xlSheetName, 143, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		
		Select selectstock4=new Select(EditScreenAddToStockDropDown);
		selectstock4.selectByVisibleText(excelReader.getCellData(xlSheetName, 144, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		
		Select selectaddtonet4=new Select(editScreenAddToNetDropdown);
		selectaddtonet4.selectByVisibleText(excelReader.getCellData(xlSheetName, 145, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		String expMessage4=excelReader.getCellData(xlSheetName, 146, 7);
		String actMessage4=checkValidationMessage(expMessage);		
		
		excelReader.setCellData(xlfile, xlSheetName, 146, 8, actMessage);
				
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));
		
		boolean acteditScreenBody1stRowEditBtn					=editScreenBody1stRowEditBtn.isDisplayed();
		boolean acteditScreenBody2ndRowEditBtn					=editScreenBody2ndRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody1stRowEditBtn					=true;
		boolean expeditScreenBody2ndRowEditBtn					=true;
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		Select editLayoutLoadFieldsDropdownSelect =new Select(editScreenLoadFieldsDropdown);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 147, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLayoutokBtn));
		editScreenLayoutokBtn.click();

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessageUpdate=excelReader.getCellData(xlSheetName, 124, 7);
		
		String actMessageUpdate=checkValidationMessage(expMessageUpdate);
		
		excelReader.setCellData(xlfile, xlSheetName, 124, 8, actMessageUpdate);
		
		
		System.out.println("****************************************checkTagsCurrencyAndDueDateOfSalesInvoice*************************************");
		
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
		System.out.println("MastersR1C1                   : "+actMastersR1C1                   +"  value expected  "+expMastersR1C1);
		System.out.println("PositionR1C1                  : "+actPositionR1C1                  +"  value expected  "+expPositionR1C1 );
		System.out.println("Message                       : "+actMessage                       +"  value expected  "+expMessage );
		System.out.println("MastersR1C2                   : "+actMastersR2C1         		   +"  value expected  "+expMastersR2C1);
		System.out.println("PositionR2C2                  : "+actPositionR2C2                  +"  value expected  "+expPositionR2C2);
		System.out.println("EditScreenBody1stRowEditBtn : "+acteditScreenBody1stRowEditBtn+"  value expected  "+expeditScreenBody1stRowEditBtn);
		System.out.println("EditScreenBody2ndRowEditBtn : "+acteditScreenBody2ndRowEditBtn+"  value expected  "+expeditScreenBody2ndRowEditBtn);
		System.out.println("Upadte Message                : "+actMessageUpdate                       +"  value expected  "+expMessageUpdate );
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown) && 
			actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
			actMessage.equalsIgnoreCase(expMessage) && actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && 
			actPositionR2C2.equalsIgnoreCase(expPositionR2C2) && acteditScreenBody1stRowEditBtn==expeditScreenBody1stRowEditBtn
			&& acteditScreenBody2ndRowEditBtn==expeditScreenBody2ndRowEditBtn && actMessageUpdate.equalsIgnoreCase(expMessageUpdate))
		{
			excelReader.setCellData(xlfile, xlSheetName, 117, 9, resPass);
			System.out.println("Test Pass : Purchase Voucher is Saved Successfully");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 117, 9, resFail);
			System.out.println("Test Fail :Purchase Voucher is Saved Successfully");
			return false;
		}
	}
	



   

      public boolean checkCreatingNewVoucherSalesInvoiceNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
			createVoucherBtn.click();
			
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
			titleTxt.click();
			titleTxt.clear();
			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 149, 6));
			titleTxt.sendKeys(Keys.TAB);
			
			
			String actTitle=titleTxt.getAttribute("value");
			String expTitle=excelReader.getCellData(xlSheetName, 149, 7);
			excelReader.setCellData(xlfile, xlSheetName, 149, 8, actTitle);
			
			
			System.err.println(" SAles invoice N	 Title    : "+actTitle +" Value Expected : "+expTitle);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 150, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 150, 7);
			excelReader.setCellData(xlfile, xlSheetName, 150, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select p1=new Select(positionDropdown);
			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 151, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 151, 7);
			excelReader.setCellData(xlfile, xlSheetName, 151, 8, actPositionR1C1);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			masters2.click();
			
			Select s2=new Select(masterDropDown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 152, 6));
			
			Select getValuesOfMasterC2=new Select(masterDropDown);
			String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR2C1=excelReader.getCellData(xlSheetName, 152, 7);
			excelReader.setCellData(xlfile, xlSheetName, 152, 8, actMastersR2C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			position2.click();
			
			positionDropdown.click();
			
			Select p2=new Select(positionDropdown);
			p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 153, 6));
			
			Select getValueOfPostionC2=new Select(positionDropdown);
			String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR2C2=excelReader.getCellData(xlSheetName, 153, 7);
			excelReader.setCellData(xlfile, xlSheetName, 153, 8, actPositionR2C2);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText("Header");
			
			if(updateStockChkBox.isSelected()==false && selectAccountInEveryLineChkBox.isSelected()==false )
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
				updateStockChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountInEveryLineChkBox));
				selectAccountInEveryLineChkBox.click();
				
				
			}
			
			
			if(updateStockChkBox.isSelected()==false && selectAccountInEveryLineChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
				updateStockChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountInEveryLineChkBox));
				selectAccountInEveryLineChkBox.click();
			}
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
			editLayoutHeaderTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 154, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
		   String expMessage=excelReader.getCellData(xlSheetName, 155, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 155, 8, actMessage);
			
			System.out.println("****************************************checkCreatingNewVoucherSalesInvoiceNew**************************************");
			
			
			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
			System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
			System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
			
			
			
			if(actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 148, 9, resPass);
				System.out.println("Test Pass : PV VAT  View Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 148, 9, resFail);
				System.out.println("Test Fail :PV VAT  View Voucher is Created Successfully");
				return false;
			}
		}
		

     

     public boolean checkCreatingNewVoucherSalesInvoicVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
			createVoucherBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
			titleTxt.click();
			titleTxt.clear();
			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 157, 6));
			titleTxt.sendKeys(Keys.TAB);
			
			
			String actTitle=titleTxt.getAttribute("value");
			String expTitle=excelReader.getCellData(xlSheetName, 157, 7);
			excelReader.setCellData(xlfile, xlSheetName, 157, 8, actTitle);
			
			
			System.err.println(" SAles invoice VAT	 Title    : "+actTitle +" Value Expected : "+expTitle);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 158, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 158, 7);
			excelReader.setCellData(xlfile, xlSheetName, 158, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select p1=new Select(positionDropdown);
			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 159, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 159, 7);
			excelReader.setCellData(xlfile, xlSheetName, 159, 8, actPositionR1C1);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			masters2.click();
			
			Select s2=new Select(masterDropDown);
			s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 160, 6));
			
			Select getValuesOfMasterC2=new Select(masterDropDown);
			String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR2C1=excelReader.getCellData(xlSheetName, 160, 7);
			excelReader.setCellData(xlfile, xlSheetName, 160, 8, actMastersR2C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			position2.click();
			
			positionDropdown.click();
			
			Select p2=new Select(positionDropdown);
			p2.selectByVisibleText(excelReader.getCellData(xlSheetName, 161, 6));
			
			Select getValueOfPostionC2=new Select(positionDropdown);
			String actPositionR2C2=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR2C2=excelReader.getCellData(xlSheetName, 161, 7);
			excelReader.setCellData(xlfile, xlSheetName, 161, 8, actPositionR2C2);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText("Header");
			
			if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
				inputExchangeRateChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
				inputLocalExchangeRateChkBox.click();
				
			}
			
			
			if(updateStockChkBox.isSelected()==false && selectAccountInEveryLineChkBox.isSelected()==false )
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
				updateStockChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountInEveryLineChkBox));
				selectAccountInEveryLineChkBox.click();
				
				
			}
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
			editLayoutHeaderTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 162, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
		   String expMessage=excelReader.getCellData(xlSheetName, 163, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 163, 8, actMessage);
			
			System.out.println("****************************************checkCreatingNewVoucherInSalesInvoiceVat**************************************");
			
			
			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
			System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
			System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
			
			
			
			if(actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 156, 9, resPass);
				System.out.println("Test Pass : PV VAT  View Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 156, 9, resFail);
				System.out.println("Test Fail :PV VAT  View Voucher is Created Successfully");
				return false;
			}
		}
		

       
        
        

        public boolean checkCreatingNewVoucherDebitNotesVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  		{
  			excelReader=new ExcelReader(POJOUtility.getExcelPath());
  			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
  			
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitNotesBtn));
  			debitNotesBtn.click();
  			
  			
  			Thread.sleep(2000);
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
  			createVoucherBtn.click();
  			
  			
  			Thread.sleep(2000);
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
  			documentsTab.click();
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
  			titleTxt.click();
  			titleTxt.clear();
  			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 165, 6));
  			titleTxt.sendKeys(Keys.TAB);
  			
  			
  			String actTitle=titleTxt.getAttribute("value");
  			String expTitle=excelReader.getCellData(xlSheetName, 165, 7);
  			excelReader.setCellData(xlfile, xlSheetName, 165, 8, actTitle);
  			
  			
  			System.err.println(" SAles invoice N	 Title    : "+actTitle +" Value Expected : "+expTitle);
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
  			masters1.click();
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
  			masterDropDown.click();
  			
  			Select s1=new Select(masterDropDown);
  			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 166, 6));
  			
  			Select getValuesOfMasterC1=new Select(masterDropDown);
  			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
  			String expMastersR1C1=excelReader.getCellData(xlSheetName, 166, 7);
  			excelReader.setCellData(xlfile, xlSheetName, 166, 8, actMastersR1C1);
  			
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
  			position1.click();
  			
  			positionDropdown.click();
  			
  			Select p1=new Select(positionDropdown);
  			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 167, 6));
  			
  			Select getValueOfPostionC1=new Select(positionDropdown);
  			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
  			String expPositionR1C1=excelReader.getCellData(xlSheetName, 167, 7);
  			excelReader.setCellData(xlfile, xlSheetName, 167, 8, actPositionR1C1);	
  			
  			
  			
  			
  			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
  			miscellaneousTab.click();
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
  			addCurrencyInDropdown.click();
  			Select s=new Select(addCurrencyInDropdown);
  			s.selectByVisibleText("Header");
  			
  			if(updateStockChkBox.isSelected()==false && selectAccountInEveryLineChkBox.isSelected()==false && postVATchkBox.isSelected()==false)
  			{
  				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
  				updateStockChkBox.click();
  				
  				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountInEveryLineChkBox));
  				selectAccountInEveryLineChkBox.click();
  				
  				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postVATchkBox));
  				postVATchkBox.click();
  			}
  			
  			
  			if(updateStockChkBox.isSelected()==false && selectAccountInEveryLineChkBox.isSelected()==false)
  			{
  				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
  				updateStockChkBox.click();
  				
  				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountInEveryLineChkBox));
  				selectAccountInEveryLineChkBox.click();
  			}
  			

  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
  			editLayoutTab.click();
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
  			editLayoutHeaderTab.click();
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
  			editLayoutLoadFieldsBtn.click();
  			
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
  			Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
  			
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
  			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 154, 6));
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
  			editLayoutselectAllBtn.click();

  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
  			editLayoutokBtn.click();
  			
  			
  			Thread.sleep(2000);
  			
*/  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
  			updateBtn.click();
  			
  		   String expMessage=excelReader.getCellData(xlSheetName, 171, 7);
  			
  			String actMessage=checkValidationMessage(expMessage);
  			
  			excelReader.setCellData(xlfile, xlSheetName, 171, 8, actMessage);
  			
  			System.out.println("****************************************checkCreatingNewVoucherDebitnotesVAT**************************************");
  			
  			
  			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
  			////System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
  			//System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
  			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
  			
  			
  			
  			if(/*actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&*/
  				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
  				actMessage.equalsIgnoreCase(expMessage))
  			{
  				excelReader.setCellData(xlfile, xlSheetName, 164, 9, resPass);
  				System.out.println("Test Pass : Debit Notes  VAT Voucher is Created Successfully");
  				return true;
  			}
  			else
  			{
  				excelReader.setCellData(xlfile, xlSheetName, 164, 9, resFail);
  				System.out.println("Test Fail :Debit Notes  VAT Voucher is Created Successfully");
  				return false;
  			}
  		}
  		

    
    public boolean checkCreatingNewVoucherCreditNotesVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotesBtn));
			creditNotesBtn.click();
			
			
			Thread.sleep(4000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
			createVoucherBtn.click();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			documentsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
			titleTxt.click();
			titleTxt.clear();
			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 173, 6));
			titleTxt.sendKeys(Keys.TAB);
			
			
			String actTitle=titleTxt.getAttribute("value");
			String expTitle=excelReader.getCellData(xlSheetName, 173, 7);
			excelReader.setCellData(xlfile, xlSheetName, 173, 8, actTitle);
			
			
			System.err.println(" Credit Notes VAT	 Title    : "+actTitle +" Value Expected : "+expTitle);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			masters1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
			masterDropDown.click();
			
			Select s1=new Select(masterDropDown);
			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 174, 6));
			
			Select getValuesOfMasterC1=new Select(masterDropDown);
			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
			String expMastersR1C1=excelReader.getCellData(xlSheetName, 174, 7);
			excelReader.setCellData(xlfile, xlSheetName, 174, 8, actMastersR1C1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			position1.click();
			
			positionDropdown.click();
			
			Select p1=new Select(positionDropdown);
			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 175, 6));
			
			Select getValueOfPostionC1=new Select(positionDropdown);
			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
			String expPositionR1C1=excelReader.getCellData(xlSheetName, 175, 7);
			excelReader.setCellData(xlfile, xlSheetName, 175, 8, actPositionR1C1);	
			
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
			addCurrencyInDropdown.click();
			Select s=new Select(addCurrencyInDropdown);
			s.selectByVisibleText("Header");
			
			if(updateStockChkBox.isSelected()==false && selectAccountInEveryLineChkBox.isSelected()==false && postVATchkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
				updateStockChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountInEveryLineChkBox));
				selectAccountInEveryLineChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postVATchkBox));
				postVATchkBox.click();
			}
			
			
			if(updateStockChkBox.isSelected()==false && selectAccountInEveryLineChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
				updateStockChkBox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountInEveryLineChkBox));
				selectAccountInEveryLineChkBox.click();
			}
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
			editLayoutHeaderTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 154, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			
			Thread.sleep(2000);
			
*/  			
			
/*
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutAddFieldsBtn));
			editLayoutAddFieldsBtn.click();
			
			*/
			
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
		   String expMessage=excelReader.getCellData(xlSheetName, 179, 7);
			
			String actMessage=checkValidationMessage(expMessage);
			
			excelReader.setCellData(xlfile, xlSheetName, 179, 8, actMessage);
			
			System.out.println("****************************************checkCreatingNewVoucherCreditnotesVAT**************************************");
			
			
			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
			////System.out.println("MastersR1C2                   : "+actMastersR2C1         +"  value expected  "+expMastersR2C1);
			//System.out.println("PositionR2C2                  : "+actPositionR2C2        +"  value expected  "+expPositionR2C2);
			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
			
			
			
			if(/*actMastersR2C1.equalsIgnoreCase(expMastersR2C1) && actPositionR2C2.equalsIgnoreCase(expPositionR2C2) &&*/
				actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
				actMessage.equalsIgnoreCase(expMessage))
			{
				excelReader.setCellData(xlfile, xlSheetName, 172, 9, resPass);
				System.out.println("Test Pass : Credit Notes  VAT Voucher is Created Successfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 172, 9, resFail);
				System.out.println("Test Fail :Credit Notes  VAT Voucher is Created Successfully");
				return false;
			}
		}
		


	public boolean checkOpeningBalanceVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancesBtn));
		openingBalancesBtn.click();
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		
		
		String actTitle=titleTxt.getAttribute("value");
		String expTitle=excelReader.getCellData(xlSheetName, 191, 7);
		excelReader.setCellData(xlfile, xlSheetName, 191, 8, actTitle);
		
		
		System.err.println(" Credit Notes VAT	 Title    : "+actTitle +" Value Expected : "+expTitle);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 192, 6));
		
		Select getValuesOfMasterC1=new Select(masterDropDown);
		String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
		String expMastersR1C1=excelReader.getCellData(xlSheetName, 192, 7);
		excelReader.setCellData(xlfile, xlSheetName, 192, 8, actMastersR1C1);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select p1=new Select(positionDropdown);
		p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 193, 6));
		
		Select getValueOfPostionC1=new Select(positionDropdown);
		String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
		String expPositionR1C1=excelReader.getCellData(xlSheetName, 193, 7);
		excelReader.setCellData(xlfile, xlSheetName, 193, 8, actPositionR1C1);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		
		if (updateFAChkBox.isSelected()==false) 
		{
			updateFAChkBox.click();
		}
		
		
		if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
			inputExchangeRateChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
			inputLocalExchangeRateChkBox.click();
			
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
	    String expMessage=excelReader.getCellData(xlSheetName, 197, 7);
		
		String actMessage=checkValidationMessage(expMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 197, 8, actMessage);
		
		System.out.println("****************************************checkCreatingNewVoucherOpeningBalance********************************");
		
		
		System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
		System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
		
		
		
		if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
			actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, xlSheetName, 190, 9, resPass);
			System.out.println("Test Pass : Credit Notes  VAT Voucher is Created Successfully");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 190, 9, resFail);
			System.out.println("Test Fail :Credit Notes  VAT Voucher is Created Successfully");
			return false;
		}
	}
	



        public boolean checkCreatingNewVoucherOpeningBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  		{
  			excelReader=new ExcelReader(POJOUtility.getExcelPath());
  			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
  			
  			
  			
  			Thread.sleep(2000);
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
  			createVoucherBtn.click();
  			
  			
  			Thread.sleep(2000);
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
  			documentsTab.click();
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
  			titleTxt.click();
  			titleTxt.clear();
  			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 199, 6));
  			titleTxt.sendKeys(Keys.TAB);
  			
  			
  			String actTitle=titleTxt.getAttribute("value");
  			String expTitle=excelReader.getCellData(xlSheetName, 199, 7);
  			excelReader.setCellData(xlfile, xlSheetName, 199, 8, actTitle);
  			
  			
  			System.err.println(" Opening Balnce	New Title    : "+actTitle +" Value Expected : "+expTitle);
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
  			masters1.click();
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
  			masterDropDown.click();
  			
  			Select s1=new Select(masterDropDown);
  			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 200, 6));
  			
  			Select getValuesOfMasterC1=new Select(masterDropDown);
  			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
  			String expMastersR1C1=excelReader.getCellData(xlSheetName, 200, 7);
  			excelReader.setCellData(xlfile, xlSheetName, 200, 8, actMastersR1C1);
  			
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
  			position1.click();
  			
  			positionDropdown.click();
  			
  			Select p1=new Select(positionDropdown);
  			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 201, 6));
  			
  			Select getValueOfPostionC1=new Select(positionDropdown);
  			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
  			String expPositionR1C1=excelReader.getCellData(xlSheetName, 201, 7);
  			excelReader.setCellData(xlfile, xlSheetName, 201, 8, actPositionR1C1);	
  			
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
  			miscellaneousTab.click();
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
  			addCurrencyInDropdown.click();
  			Select s=new Select(addCurrencyInDropdown);
  			s.selectByVisibleText("Header");
  			
  			if (updateFAChkBox.isSelected()==false) 
  			{
  				updateFAChkBox.click();
  			}
  			
  			
  			if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
  			{
  				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
  				inputExchangeRateChkBox.click();
  				
  				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
  				inputLocalExchangeRateChkBox.click();
  				
  			}
  			
  			  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
  			updateBtn.click();
  			
  		    String expMessage=excelReader.getCellData(xlSheetName, 205, 7);
  			
  			String actMessage=checkValidationMessage(expMessage);
  			
  			excelReader.setCellData(xlfile, xlSheetName, 205, 8, actMessage);
  			
  			System.out.println("****************************************checkCreatingNewVoucherDebitnotesVAT**************************************");
  			
  			
  			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
  			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
  			
  			
  			if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
  				actMessage.equalsIgnoreCase(expMessage))
  			{
  				excelReader.setCellData(xlfile, xlSheetName, 198, 9, resPass);
  				System.out.println("Test Pass : Debit Notes  VAT Voucher is Created Successfully");
  				return true;
  			}
  			else
  			{
  				excelReader.setCellData(xlfile, xlSheetName, 198, 9, resFail);
  				System.out.println("Test Fail :Debit Notes  VAT Voucher is Created Successfully");
  				return false;
  			}
  		}
  		

      


    	public boolean checkopeningStocksVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		excelReader=new ExcelReader(POJOUtility.getExcelPath());
    		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksBtn));
    		openingStocksBtn.click();
    		
    		
    		Thread.sleep(2000);
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
    		documentsTab.click();
    		
    		
    		
    		String actTitle=titleTxt.getAttribute("value");
    		String expTitle=excelReader.getCellData(xlSheetName, 207, 7);
    		excelReader.setCellData(xlfile, xlSheetName, 207, 8, actTitle);
    		
    		
    		System.err.println(" Opening Stock 	 Title    : "+actTitle +" Value Expected : "+expTitle);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
    		masters1.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
    		masterDropDown.click();
    		
    		Select s1=new Select(masterDropDown);
    		s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 208, 6));
    		
    		Select getValuesOfMasterC1=new Select(masterDropDown);
    		String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
    		String expMastersR1C1=excelReader.getCellData(xlSheetName, 208, 7);
    		excelReader.setCellData(xlfile, xlSheetName, 208, 8, actMastersR1C1);
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
    		position1.click();
    		
    		positionDropdown.click();
    		
    		Select p1=new Select(positionDropdown);
    		p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 209, 6));
    		
    		Select getValueOfPostionC1=new Select(positionDropdown);
    		String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
    		String expPositionR1C1=excelReader.getCellData(xlSheetName, 209, 7);
    		excelReader.setCellData(xlfile, xlSheetName, 209, 8, actPositionR1C1);	
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
    		miscellaneousTab.click();
    		/*
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
    		addCurrencyInDropdown.click();
    		Select s=new Select(addCurrencyInDropdown);
    		s.selectByVisibleText("Header");*/
    		
    		
    		if (updateFAChkBox.isSelected()==false) 
    		{
    			updateFAChkBox.click();
    		}
    		
    		
    		/*if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
    			inputExchangeRateChkBox.click();
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
    			inputLocalExchangeRateChkBox.click();
    			
    		}*/
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
    		updateBtn.click();
    		
    	    String expMessage=excelReader.getCellData(xlSheetName, 213, 7);
    		
    		String actMessage=checkValidationMessage(expMessage);
    		
    		excelReader.setCellData(xlfile, xlSheetName, 213, 8, actMessage);
    		
    		System.out.println("****************************************checkCreatingNewVoucherOpeningBalance********************************");
    		
    		
    		System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
    		System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
    		
    		
    		
    		if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
    			actMessage.equalsIgnoreCase(expMessage))
    		{
    			excelReader.setCellData(xlfile, xlSheetName, 206, 9, resPass);
    			System.out.println("Test Pass : Credit Notes  VAT Voucher is Created Successfully");
    			return true;
    		}
    		else
    		{
    			excelReader.setCellData(xlfile, xlSheetName, 206, 9, resFail);
    			System.out.println("Test Fail :Credit Notes  VAT Voucher is Created Successfully");
    			return false;
    		}
    	}
    	



            public boolean checkCreatingNewVoucherOpeningStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
      		{
      			excelReader=new ExcelReader(POJOUtility.getExcelPath());
      			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
      			
      			
      			
      			Thread.sleep(2000);
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
      			createVoucherBtn.click();
      			
      			
      			Thread.sleep(4000);
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
      			documentsTab.click();
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
      			titleTxt.click();
      			titleTxt.clear();
      			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 215, 6));
      			
      			titleTxt.sendKeys(Keys.TAB);
      			
      			
      			String actTitle=titleTxt.getAttribute("value");
      			String expTitle=excelReader.getCellData(xlSheetName, 215, 7);
      			excelReader.setCellData(xlfile, xlSheetName, 215, 8, actTitle);
      			
      			
      			System.err.println(" Opening Stock	New Title    : "+actTitle +" Value Expected : "+expTitle);
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
      			masters1.click();
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
      			masterDropDown.click();
      			
      			Select s1=new Select(masterDropDown);
      			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 216, 6));
      			
      			Select getValuesOfMasterC1=new Select(masterDropDown);
      			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
      			String expMastersR1C1=excelReader.getCellData(xlSheetName, 216, 7);
      			excelReader.setCellData(xlfile, xlSheetName, 216, 8, actMastersR1C1);
      			
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
      			position1.click();
      			
      			positionDropdown.click();
      			
      			Select p1=new Select(positionDropdown);
      			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 217, 6));
      			
      			Select getValueOfPostionC1=new Select(positionDropdown);
      			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
      			String expPositionR1C1=excelReader.getCellData(xlSheetName, 217, 7);
      			excelReader.setCellData(xlfile, xlSheetName, 217, 8, actPositionR1C1);	
      			
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
      			miscellaneousTab.click();
      			
      			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
      			addCurrencyInDropdown.click();
      			Select s=new Select(addCurrencyInDropdown);
      			s.selectByVisibleText("Header");*/
      			
      			if (updateFAChkBox.isSelected()==false) 
      			{
      				updateFAChkBox.click();
      			}
      			
      			
      			/*if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
      			{
      				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
      				inputExchangeRateChkBox.click();
      				
      				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
      				inputLocalExchangeRateChkBox.click();
      				
      			}*/
      			
      			  			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
      			updateBtn.click();
      			
      		    String expMessage=excelReader.getCellData(xlSheetName, 221, 7);
      			
      			String actMessage=checkValidationMessage(expMessage);
      			
      			excelReader.setCellData(xlfile, xlSheetName, 221, 8, actMessage);
      			
      			System.out.println("****************************************checkCreatingNewVoucherOpeningStockNew**************************************");
      			
      			
      			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
      			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
      			
      			
      			if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
      				actMessage.equalsIgnoreCase(expMessage))
      			{
      				excelReader.setCellData(xlfile, xlSheetName, 214, 9, resPass);
      				System.out.println("Test Pass : Debit Notes  VAT Voucher is Created Successfully");
      				return true;
      			}
      			else
      			{
      				excelReader.setCellData(xlfile, xlSheetName, 214, 9, resFail);
      				System.out.println("Test Fail :Debit Notes  VAT Voucher is Created Successfully");
      				return false;
      			}
      		}
      		
		
		
		
		
		
		
		

    	public boolean checkopeningStocksTransfer() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		excelReader=new ExcelReader(POJOUtility.getExcelPath());
    		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersBtn));
    		stockTransfersBtn.click();
    		
    		
    		Thread.sleep(2000);
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
    		documentsTab.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
    		
    		String actTitle=titleTxt.getAttribute("value");
    		String expTitle=excelReader.getCellData(xlSheetName, 223, 7);
    		excelReader.setCellData(xlfile, xlSheetName, 223, 8, actTitle);
    		
    		
    		System.err.println(" Opening Stock 	 Title    : "+actTitle +" Value Expected : "+expTitle);
    		/*
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
    		masters1.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
    		masterDropDown.click();
    		
    		Select s1=new Select(masterDropDown);
    		s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 208, 6));
    		
    		Select getValuesOfMasterC1=new Select(masterDropDown);
    		String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
    		String expMastersR1C1=excelReader.getCellData(xlSheetName, 208, 7);
    		excelReader.setCellData(xlfile, xlSheetName, 208, 8, actMastersR1C1);
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
    		position1.click();
    		
    		positionDropdown.click();
    		
    		Select p1=new Select(positionDropdown);
    		p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 209, 6));
    		
    		Select getValueOfPostionC1=new Select(positionDropdown);
    		String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
    		String expPositionR1C1=excelReader.getCellData(xlSheetName, 209, 7);
    		excelReader.setCellData(xlfile, xlSheetName, 209, 8, actPositionR1C1);	
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
    		miscellaneousTab.click();*/
    		/*
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
    		addCurrencyInDropdown.click();
    		Select s=new Select(addCurrencyInDropdown);
    		s.selectByVisibleText("Header");*/
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
    		miscellaneousTab.click();
    		
    		if (updateFAChkBox.isSelected()==false) 
    		{
    			updateFAChkBox.click();
    		}
    		
    		
    		/*if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
    			inputExchangeRateChkBox.click();
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
    			inputLocalExchangeRateChkBox.click();
    			
    		}*/
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
    		updateBtn.click();
    		
    	    String expMessage=excelReader.getCellData(xlSheetName, 229, 7);
    		
    		String actMessage=checkValidationMessage(expMessage);
    		
    		excelReader.setCellData(xlfile, xlSheetName, 229, 8, actMessage);
    		
    		System.out.println("****************************************checkCreatingNewVoucherStockTransfer********************************");
    		
    		
    		//System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
    		System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
    		
    		
    		
    		if(/*actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) &&*/ 
    			actMessage.equalsIgnoreCase(expMessage))
    		{
    			excelReader.setCellData(xlfile, xlSheetName, 222, 9, resPass);
    			System.out.println("Test Pass : Credit Notes  VAT Voucher is Created Successfully");
    			return true;
    		}
    		else
    		{
    			excelReader.setCellData(xlfile, xlSheetName, 222, 9, resFail);
    			System.out.println("Test Fail :Credit Notes  VAT Voucher is Created Successfully");
    			return false;
    		}
    	}
    	



            public boolean checkCreatingNewVoucherStockTransfer() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
      		{
      			excelReader=new ExcelReader(POJOUtility.getExcelPath());
      			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
      			
      			
      			Thread.sleep(2000);
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
      			createVoucherBtn.click();
      			
      			
      			Thread.sleep(4000);
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
      			documentsTab.click();
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
      			titleTxt.click();
      			titleTxt.clear();
      			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 231, 6));
      			
      			titleTxt.sendKeys(Keys.TAB);
      			
      			
      			String actTitle=titleTxt.getAttribute("value");
      			String expTitle=excelReader.getCellData(xlSheetName, 231, 7);
      			excelReader.setCellData(xlfile, xlSheetName, 231, 8, actTitle);
      			
      			
      			System.err.println(" Opening Stock	New Title    : "+actTitle +" Value Expected : "+expTitle);
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
      			masters1.click();
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
      			masterDropDown.click();
      			
      			Select s1=new Select(masterDropDown);
      			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 232, 6));
      			
      			Select getValuesOfMasterC1=new Select(masterDropDown);
      			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
      			String expMastersR1C1=excelReader.getCellData(xlSheetName, 232, 7);
      			excelReader.setCellData(xlfile, xlSheetName, 232, 8, actMastersR1C1);
      			
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
      			position1.click();
      			
      			positionDropdown.click();
      			
      			Select p1=new Select(positionDropdown);
      			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 233, 6));
      			
      			Select getValueOfPostionC1=new Select(positionDropdown);
      			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
      			String expPositionR1C1=excelReader.getCellData(xlSheetName, 233, 7);
      			excelReader.setCellData(xlfile, xlSheetName, 233, 8, actPositionR1C1);	
      			
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
      			miscellaneousTab.click();
      			
      			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
      			addCurrencyInDropdown.click();
      			Select s=new Select(addCurrencyInDropdown);
      			s.selectByVisibleText("Header");*/
      			
      			if (updateFAChkBox.isSelected()==false) 
      			{
      				updateFAChkBox.click();
      			}
      			
      			
      			/*if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
      			{
      				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
      				inputExchangeRateChkBox.click();
      				
      				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
      				inputLocalExchangeRateChkBox.click();
      				
      			}*/
      			
      			  			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
      			updateBtn.click();
      			
      		    String expMessage=excelReader.getCellData(xlSheetName, 237, 7);
      			
      			String actMessage=checkValidationMessage(expMessage);
      			
      			excelReader.setCellData(xlfile, xlSheetName, 237, 8, actMessage);
      			
      			System.out.println("****************************************checkCreatingNewVoucherOpeningStockNew**************************************");
      			
      			
      			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
      			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
      			
      			
      			if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
      				actMessage.equalsIgnoreCase(expMessage))
      			{
      				excelReader.setCellData(xlfile, xlSheetName, 230, 9, resPass);
      				System.out.println("Test Pass : Stock Transfer New  Voucher is Created Successfully");
      				return true;
      			}
      			else
      			{
      				excelReader.setCellData(xlfile, xlSheetName, 230, 9, resFail);
      				System.out.println("Test Fail :Stock Transfer New  Voucher is Created Successfully");
      				return false;
      			}
      		}
      		

	
		

    	public boolean checkShortageStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		excelReader=new ExcelReader(POJOUtility.getExcelPath());
    		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortageInStocksBtn));
    		shortageInStocksBtn.click();
    		
    		
    		Thread.sleep(2000);
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
    		documentsTab.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
    		
    		String actTitle=titleTxt.getAttribute("value");
    		String expTitle=excelReader.getCellData(xlSheetName, 239, 7);
    		excelReader.setCellData(xlfile, xlSheetName, 239, 8, actTitle);
    		
    		
    		System.err.println(" Opening Stock 	 Title    : "+actTitle +" Value Expected : "+expTitle);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
    		masters1.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
    		masterDropDown.click();
    		
    		Select s1=new Select(masterDropDown);
    		s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 240, 6));
    		
    		Select getValuesOfMasterC1=new Select(masterDropDown);
    		String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
    		String expMastersR1C1=excelReader.getCellData(xlSheetName, 240, 7);
    		excelReader.setCellData(xlfile, xlSheetName, 240, 8, actMastersR1C1);
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
    		position1.click();
    		
    		positionDropdown.click();
    		
    		Select p1=new Select(positionDropdown);
    		p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 241, 6));
    		
    		Select getValueOfPostionC1=new Select(positionDropdown);
    		String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
    		String expPositionR1C1=excelReader.getCellData(xlSheetName, 241, 7);
    		excelReader.setCellData(xlfile, xlSheetName, 241, 8, actPositionR1C1);	
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
    		miscellaneousTab.click();
    		/*
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
    		addCurrencyInDropdown.click();
    		Select s=new Select(addCurrencyInDropdown);
    		s.selectByVisibleText("Header");*/
    		
    		
    		if (updateFAChkBox.isSelected()==false) 
    		{
    			updateFAChkBox.click();
    		}
    		
    		
    		/*if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
    			inputExchangeRateChkBox.click();
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
    			inputLocalExchangeRateChkBox.click();
    			
    		}*/
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
    		editScreenTab.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
    		editScreenBodyTab.click();
    		
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
    		editScreenaddBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
    		editScreenCaptionTxt.click();
    		editScreenCaptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 242, 6));
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
    		editScreenPreloadTxt.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preloadformulaTxt));
    		preloadformulaTxt.click();
    		preloadformulaTxt.sendKeys(excelReader.getCellData(xlSheetName, 243, 6));
    		preloadFormulaokBtn.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
    		editScreenNoOfDecimalsTxt.click();
    		editScreenNoOfDecimalsTxt.sendKeys(excelReader.getCellData(xlSheetName, 244, 6));
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
    		EditScreenAddToStockDropDown.click();
    		
    		Select selectstock2=new Select(EditScreenAddToStockDropDown);
    		selectstock2.selectByVisibleText(excelReader.getCellData(xlSheetName, 245, 6));
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
    		editScreenAddToNetDropdown.click();
    		
    		Select selectaddtonet2=new Select(editScreenAddToNetDropdown);
    		selectaddtonet2.selectByVisibleText(excelReader.getCellData(xlSheetName, 246, 6));
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
    		editScreenFieldOkBtn.click();
    		
    		String expMessage2=excelReader.getCellData(xlSheetName, 247, 7);
    		String actMessage2=checkValidationMessage(expMessage2);		
    		
    		excelReader.setCellData(xlfile, xlSheetName, 247, 8, actMessage2);
    		

    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
    		updateBtn.click();
    		
    	    String expMessage=excelReader.getCellData(xlSheetName, 248, 7);
    		
    		String actMessage=checkValidationMessage(expMessage);
    		
    		excelReader.setCellData(xlfile, xlSheetName, 248, 8, actMessage);
    		
    		System.out.println("****************************************checkShortageInStockVoucher********************************");
    		
    		
    		System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
    		System.out.println("Position                      : "+actPositionR1C1        +"  value expected  "+expPositionR1C1);
    		System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
    		System.out.println("Message2                       : "+actMessage2             +"  value expected  "+expMessage2 );
    		
    		
    		
    		if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) &&
    			actMessage.equalsIgnoreCase(expMessage))
    		{
    			excelReader.setCellData(xlfile, xlSheetName, 238, 9, resPass);
    			System.out.println("Test Pass : Shortage In Stocks Voucher is Created Successfully");
    			return true;
    		}
    		else
    		{
    			excelReader.setCellData(xlfile, xlSheetName, 238, 9, resFail);
    			System.out.println("Test Fail : Shortage In Stocks Voucher is Created Successfully");
    			return false;
    		}
    	}
    	



            public boolean checkCreatingNewVoucherShortageInStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
      		{
      			excelReader=new ExcelReader(POJOUtility.getExcelPath());
      			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
      			
      			
      			Thread.sleep(2000);
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
      			createVoucherBtn.click();
      			
      			
      			Thread.sleep(4000);
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
      			documentsTab.click();
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
      			titleTxt.click();
      			titleTxt.clear();
      			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 250, 6));
      			
      			titleTxt.sendKeys(Keys.TAB);
      			
      			
      			String actTitle=titleTxt.getAttribute("value");
      			String expTitle=excelReader.getCellData(xlSheetName, 250, 7);
      			excelReader.setCellData(xlfile, xlSheetName, 250, 8, actTitle);
      			
      			
      			System.err.println(" Stortage in Stocks New Title    : "+actTitle +" Value Expected : "+expTitle);
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
      			masters1.click();
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
      			masterDropDown.click();
      			
      			Select s1=new Select(masterDropDown);
      			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 251, 6));
      			
      			Select getValuesOfMasterC1=new Select(masterDropDown);
      			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
      			String expMastersR1C1=excelReader.getCellData(xlSheetName, 251, 7);
      			excelReader.setCellData(xlfile, xlSheetName, 251, 8, actMastersR1C1);
      			
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
      			position1.click();
      			
      			positionDropdown.click();
      			
      			Select p1=new Select(positionDropdown);
      			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 252, 6));
      			
      			Select getValueOfPostionC1=new Select(positionDropdown);
      			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
      			String expPositionR1C1=excelReader.getCellData(xlSheetName, 252, 7);
      			excelReader.setCellData(xlfile, xlSheetName, 252, 8, actPositionR1C1);	
      			
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
      			miscellaneousTab.click();
      			
      			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
      			addCurrencyInDropdown.click();
      			Select s=new Select(addCurrencyInDropdown);
      			s.selectByVisibleText("Header");*/
      			
      			if (updateFAChkBox.isSelected()==false) 
      			{
      				updateFAChkBox.click();
      			}
      			
      			
      			/*if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
      			{
      				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
      				inputExchangeRateChkBox.click();
      				
      				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
      				inputLocalExchangeRateChkBox.click();
      				
      			}*/
      			
      			  			
      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
        		editScreenTab.click();
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
        		editScreenBodyTab.click();
        		

        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
        		editScreenLoadFieldsBtn.click();
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
        		editScreenLoadFieldsDropdown.click();
        		
        		
        		Thread.sleep(2000);
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
        		Select editLayoutLoadFieldsDropdownSelect =new Select(editScreenLoadFieldsDropdown);
        		
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
        		editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 253, 6));
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
        		editLayoutselectAllBtn.click();

        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLayoutokBtn));
        		editScreenLayoutokBtn.click();

      			
      			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
      			updateBtn.click();
      			
      		    String expMessage=excelReader.getCellData(xlSheetName, 254, 7);
      			
      			String actMessage=checkValidationMessage(expMessage);
      			
      			excelReader.setCellData(xlfile, xlSheetName, 254, 8, actMessage);
      			
      			System.out.println("****************************************checkCreatingNewVoucherStortageinStock**************************************");
      			
      			
      			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
      			System.out.println("Postion                       : "+actPositionR1C1         +"  value expected  "+expPositionR1C1);
      			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
      			
      			
      			if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
      				actMessage.equalsIgnoreCase(expMessage))
      			{
      				excelReader.setCellData(xlfile, xlSheetName, 249, 9, resPass);
      				System.out.println("Test Pass : Stock Transfer New  Voucher is Created Successfully");
      				return true;
      			}
      			else
      			{
      				excelReader.setCellData(xlfile, xlSheetName, 249, 9, resFail);
      				System.out.println("Test Fail :Stock Transfer New  Voucher is Created Successfully");
      				return false;
      			}
      		}
            
            
            
           
          
            

        	public boolean checkExcessInStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
        	{
        		excelReader=new ExcelReader(POJOUtility.getExcelPath());
        		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
        		
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(excessInStocksBtn));
        		excessInStocksBtn.click();
        		
        		
        		Thread.sleep(2000);
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
        		documentsTab.click();
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
        		
        		String actTitle=titleTxt.getAttribute("value");
        		String expTitle=excelReader.getCellData(xlSheetName, 256, 7);
        		excelReader.setCellData(xlfile, xlSheetName, 256, 8, actTitle);
        		
        		
        		System.err.println("Excess in Stocks  	 Title    : "+actTitle +" Value Expected : "+expTitle);
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
        		masters1.click();
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
        		masterDropDown.click();
        		
        		Select s1=new Select(masterDropDown);
        		s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 257, 6));
        		
        		Select getValuesOfMasterC1=new Select(masterDropDown);
        		String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
        		String expMastersR1C1=excelReader.getCellData(xlSheetName, 257, 7);
        		excelReader.setCellData(xlfile, xlSheetName, 257, 8, actMastersR1C1);
        		
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
        		position1.click();
        		
        		positionDropdown.click();
        		
        		Select p1=new Select(positionDropdown);
        		p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 258, 6));
        		
        		Select getValueOfPostionC1=new Select(positionDropdown);
        		String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
        		String expPositionR1C1=excelReader.getCellData(xlSheetName, 258, 7);
        		excelReader.setCellData(xlfile, xlSheetName, 258, 8, actPositionR1C1);	
        		
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
        		miscellaneousTab.click();
        		/*
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
        		addCurrencyInDropdown.click();
        		Select s=new Select(addCurrencyInDropdown);
        		s.selectByVisibleText("Header");*/
        		
        		
        		if (updateFAChkBox.isSelected()==false) 
        		{
        			updateFAChkBox.click();
        		}
        		
        		
        		/*if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
        		{
        			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
        			inputExchangeRateChkBox.click();
        			
        			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
        			inputLocalExchangeRateChkBox.click();
        			
        		}*/
        		
        		
        		        		
        		
        		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
        		updateBtn.click();
        		
        	    String expMessage=excelReader.getCellData(xlSheetName, 262, 7);
        		
        		String actMessage=checkValidationMessage(expMessage);
        		
        		excelReader.setCellData(xlfile, xlSheetName, 262, 8, actMessage);
        		
        		System.out.println("****************************************checkShortageInStockVoucher********************************");
        		
        		
        		System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
        		System.out.println("Position                      : "+actPositionR1C1        +"  value expected  "+expPositionR1C1);
        		System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
        		
        		
        		
        		
        		if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) &&
        			actMessage.equalsIgnoreCase(expMessage))
        		{
        			excelReader.setCellData(xlfile, xlSheetName, 255, 9, resPass);
        			System.out.println("Test Pass : Shortage In Stocks Voucher is Created Successfully");
        			return true;
        		}
        		else
        		{
        			excelReader.setCellData(xlfile, xlSheetName, 255, 9, resFail);
        			System.out.println("Test Fail : Shortage In Stocks Voucher is Created Successfully");
        			return false;
        		}
        	}
        	



                public boolean checkCreatingNewVoucherExcessInStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
          		{
          			excelReader=new ExcelReader(POJOUtility.getExcelPath());
          			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
          			
          			
          			Thread.sleep(2000);
          			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
          			createVoucherBtn.click();
          			
          			
          			Thread.sleep(4000);
          			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
          			documentsTab.click();
          			
          			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
          			titleTxt.click();
          			titleTxt.clear();
          			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 264, 6));
          			
          			titleTxt.sendKeys(Keys.TAB);
          			
          			
          			String actTitle=titleTxt.getAttribute("value");
          			String expTitle=excelReader.getCellData(xlSheetName, 264, 7);
          			excelReader.setCellData(xlfile, xlSheetName, 264, 8, actTitle);
          			
          			
          			System.err.println(" Stortage in Stocks New Title    : "+actTitle +" Value Expected : "+expTitle);
          			
          			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
          			masters1.click();
          			
          			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
          			masterDropDown.click();
          			
          			Select s1=new Select(masterDropDown);
          			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 265, 6));
          			
          			Select getValuesOfMasterC1=new Select(masterDropDown);
          			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
          			String expMastersR1C1=excelReader.getCellData(xlSheetName, 265, 7);
          			excelReader.setCellData(xlfile, xlSheetName, 265, 8, actMastersR1C1);
          			
          			
          			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
          			position1.click();
          			
          			positionDropdown.click();
          			
          			Select p1=new Select(positionDropdown);
          			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 266, 6));
          			
          			Select getValueOfPostionC1=new Select(positionDropdown);
          			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
          			String expPositionR1C1=excelReader.getCellData(xlSheetName, 266, 7);
          			excelReader.setCellData(xlfile, xlSheetName, 266, 8, actPositionR1C1);	
          			
          			
          			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
          			miscellaneousTab.click();
          			
          			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
          			addCurrencyInDropdown.click();
          			Select s=new Select(addCurrencyInDropdown);
          			s.selectByVisibleText("Header");*/
          			
          			if (updateFAChkBox.isSelected()==false) 
          			{
          				updateFAChkBox.click();
          			}
          			
          			
          			/*if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
          			{
          				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
          				inputExchangeRateChkBox.click();
          				
          				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
          				inputLocalExchangeRateChkBox.click();
          				
          			}*/
          			
          			  			
          			          			
          			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
          			updateBtn.click();
          			
          		    String expMessage=excelReader.getCellData(xlSheetName, 270, 7);
          			
          			String actMessage=checkValidationMessage(expMessage);
          			
          			excelReader.setCellData(xlfile, xlSheetName, 270, 8, actMessage);
          			
          			System.out.println("****************************************checkCreatingNewVoucherExcessinStock**************************************");
          			
          			
          			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
          			System.out.println("Postion                       : "+actPositionR1C1         +"  value expected  "+expPositionR1C1);
          			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
          			
          			
          			if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
          				actMessage.equalsIgnoreCase(expMessage))
          			{
          				excelReader.setCellData(xlfile, xlSheetName, 263, 9, resPass);
          				System.out.println("Test Pass : Stock Transfer New  Voucher is Created Successfully");
          				return true;
          			}
          			else
          			{
          				excelReader.setCellData(xlfile, xlSheetName, 263, 9, resFail);
          				System.out.println("Test Fail :Stock Transfer New  Voucher is Created Successfully");
          				return false;
          			}
          		}
                
            
                
                
                
            
            	public boolean checkJournalEnteries() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
            	{
            		excelReader=new ExcelReader(POJOUtility.getExcelPath());
            		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
            		
            		
            		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesBtn));
            		journalEntriesBtn.click();
            		
            		
            		Thread.sleep(2000);
            		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
            		documentsTab.click();
            		
            		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
            		
            		String actTitle=titleTxt.getAttribute("value");
            		String expTitle=excelReader.getCellData(xlSheetName, 272, 7);
            		excelReader.setCellData(xlfile, xlSheetName, 272, 8, actTitle);
            		
            		
            		System.err.println("Excess in Stocks  	 Title    : "+actTitle +" Value Expected : "+expTitle);
            		
            		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
            		masters1.click();
            		
            		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
            		masterDropDown.click();
            		
            		Select s1=new Select(masterDropDown);
            		s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 273, 6));
            		
            		Select getValuesOfMasterC1=new Select(masterDropDown);
            		String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
            		String expMastersR1C1=excelReader.getCellData(xlSheetName, 273, 7);
            		excelReader.setCellData(xlfile, xlSheetName, 273, 8, actMastersR1C1);
            		
            		
            		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
            		position1.click();
            		
            		positionDropdown.click();
            		
            		Select p1=new Select(positionDropdown);
            		p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 274, 6));
            		
            		Select getValueOfPostionC1=new Select(positionDropdown);
            		String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
            		String expPositionR1C1=excelReader.getCellData(xlSheetName, 274, 7);
            		excelReader.setCellData(xlfile, xlSheetName, 274, 8, actPositionR1C1);	
            		
            		
            		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
            		miscellaneousTab.click();
            		
            		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
            		addCurrencyInDropdown.click();
            		Select s=new Select(addCurrencyInDropdown);
            		s.selectByVisibleText("Header");
            		
            		
            		if (updateFAChkBox.isSelected()==false) 
            		{
            			updateFAChkBox.click();
            		}
            		
            		
            		if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
            		{
            			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
            			inputExchangeRateChkBox.click();
            			
            			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
            			inputLocalExchangeRateChkBox.click();
            			
            		}
            		
            		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
            		dueDateDropdown.click();
            		Select s2=new Select(dueDateDropdown);
            		s2.selectByVisibleText("Header");
            		        		
            		
            		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
            		updateBtn.click();
            		
            	    String expMessage=excelReader.getCellData(xlSheetName, 275, 7);
            		
            		String actMessage=checkValidationMessage(expMessage);
            		
            		excelReader.setCellData(xlfile, xlSheetName, 275, 8, actMessage);
            		
            		System.out.println("****************************************checkjournalEnteriesVoucher********************************");
            		
            		
            		System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
            		System.out.println("Position                      : "+actPositionR1C1        +"  value expected  "+expPositionR1C1);
            		System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
            		
            		
            		
            		
            		if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) &&
            			actMessage.equalsIgnoreCase(expMessage))
            		{
            			excelReader.setCellData(xlfile, xlSheetName, 271, 9, resPass);
            			System.out.println("Test Pass : Shortage In Stocks Voucher is Created Successfully");
            			return true;
            		}
            		else
            		{
            			excelReader.setCellData(xlfile, xlSheetName, 271, 9, resFail);
            			System.out.println("Test Fail : Shortage In Stocks Voucher is Created Successfully");
            			return false;
            		}
            	}
            	
                
         public boolean checkCreatingNewVoucherjournalEntries() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    		{
    			excelReader=new ExcelReader(POJOUtility.getExcelPath());
    			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
    			
    			
    			Thread.sleep(2000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
    			createVoucherBtn.click();
    			
    			
    			Thread.sleep(4000);
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
    			documentsTab.click();
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
    			titleTxt.click();
    			titleTxt.clear();
    			titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 277, 6));
    			
    			titleTxt.sendKeys(Keys.TAB);
    			
    			
    			String actTitle=titleTxt.getAttribute("value");
    			String expTitle=excelReader.getCellData(xlSheetName, 277, 7);
    			excelReader.setCellData(xlfile, xlSheetName, 277, 8, actTitle);
    			
    			
    			System.err.println(" Stortage in Stocks New Title    : "+actTitle +" Value Expected : "+expTitle);
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
    			masters1.click();
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
    			masterDropDown.click();
    			
    			Select s1=new Select(masterDropDown);
    			s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 278, 6));
    			
    			Select getValuesOfMasterC1=new Select(masterDropDown);
    			String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
    			String expMastersR1C1=excelReader.getCellData(xlSheetName, 278, 7);
    			excelReader.setCellData(xlfile, xlSheetName, 278, 8, actMastersR1C1);
    			
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
    			position1.click();
    			
    			positionDropdown.click();
    			
    			Select p1=new Select(positionDropdown);
    			p1.selectByVisibleText(excelReader.getCellData(xlSheetName, 279, 6));
    			
    			Select getValueOfPostionC1=new Select(positionDropdown);
    			String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
    			String expPositionR1C1=excelReader.getCellData(xlSheetName, 279, 7);
    			excelReader.setCellData(xlfile, xlSheetName, 279, 8, actPositionR1C1);	
    			
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
    			miscellaneousTab.click();
    			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
    			addCurrencyInDropdown.click();
    			Select s=new Select(addCurrencyInDropdown);
    			s.selectByVisibleText("Header");
    			
    			if (updateFAChkBox.isSelected()==false) 
    			{
    				updateFAChkBox.click();
    			}
    			
    			
    			if (inputExchangeRateChkBox.isSelected()==false && inputLocalExchangeRateChkBox.isSelected()==false) 
    			{
    				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
    				inputExchangeRateChkBox.click();
    				
    				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
    				inputLocalExchangeRateChkBox.click();
    				
    			}
    			
    			  			
    			          			
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
    			updateBtn.click();
    			
    		    String expMessage=excelReader.getCellData(xlSheetName, 280, 7);
    			
    			String actMessage=checkValidationMessage(expMessage);
    			
    			excelReader.setCellData(xlfile, xlSheetName, 280, 8, actMessage);
    			
    			System.out.println("****************************************checkCreatingNewVoucherJournalEntries**************************************");
    			
    			
    			System.out.println("MastersR1C1                   : "+actMastersR1C1         +"  value expected  "+expMastersR1C1);
    			System.out.println("Postion                       : "+actPositionR1C1        +"  value expected  "+expPositionR1C1);
    			System.out.println("Message                       : "+actMessage             +"  value expected  "+expMessage );
    			
    			
    			if(actPositionR1C1 .equalsIgnoreCase(expPositionR1C1 ) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1) && 
    				actMessage.equalsIgnoreCase(expMessage))
    			{
    				excelReader.setCellData(xlfile, xlSheetName, 276, 9, resPass);
    				System.out.println("Test Pass : JV Vat New  Voucher is Created Successfully");
    				return true;
    			}
    			else
    			{
    				excelReader.setCellData(xlfile, xlSheetName, 276, 9, resFail);
    				System.out.println("Test Fail :jv vat  New  Voucher is Created Successfully");
    				return false;
    			}
    		}
              
                
   	     
   	  @FindBy(xpath = "//*[@id='dashName']")
 	 public static WebElement dashboard;
 	 
   	 public static int cSize; 
   	     
   	public static boolean checkLoginCompanyWithValidCredentials() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 	{
 		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		 
 		 getDriver().navigate().refresh();
		 Thread.sleep(3000);
		 
		 getDriver().navigate().refresh();
		 Thread.sleep(3000);
 			
 		 LoginPage lp=new LoginPage(getDriver()); 
 			
 	     String unamelt="su";
 	      
 	     String pawslt="su";
 	      
         lp.enterUserName(unamelt);

         lp.enterPassword(pawslt);
         
         String compname="Automation Company";
		 	
		 Select oSelect = new Select(companyDropDownList);
		 
		 List <WebElement> elementCount = oSelect.getOptions();
		
		 int cqSize = elementCount.size();
		 
		 int zqSize=cSize+1;
		 
		 System.out.println("CompanyDropdownList Count :"+cqSize);
		 
		 System.out.println("Company dropdown is :"+ zqSize);
	 
	 
	 //Select dropdown= new Select(lp.companyDropDownList);
	  int i;
	  
	  //List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
		
		  elementCount.get(i).getText();
  	  String optionName = elementCount.get(i).getText();
  	  if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
  	  {
  		  System.out.println("q"+elementCount.get(i).getText());
  		  elementCount.get(i).click();
  		  
  	  }
    
    }
   
         lp.clickOnSignInBtn();
               
         Thread.sleep(5000);
            	
     	 String userInfo=userNameTxt.getText();
     	
      	 System.out.println("User Info : "+userInfo);
     	
     	 System.out.println("User Info Capture Text :"+userNameTxt.getText());
     
     	 
         getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogoImg));
         companyLogoImg.click();
 	    	
     	 String getCompanyTxt=companyName.getText();
     	 String getLoginCompanyName=getCompanyTxt.substring(0, 19);
     	 System.out.println("company name :"+ getLoginCompanyName);
     	companyLogoImg.click();
     	
     	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboardName));
     	
     	 String getDashboard=dashboardName.getText();
     	
     	 System.out.println(getDashboard);

 		  if(userInfo.equalsIgnoreCase("SU") && getLoginCompanyName.equalsIgnoreCase("Automation Company ") &&
 		    		getDashboard.equalsIgnoreCase("Dashboard"))
 		  {
 				excelReader.setCellData(xlfile, "Sheet1", 7, 9, resPass);
 				return true;
 		  }
 		  else
 		  {
 				excelReader.setCellData(xlfile, "Sheet1", 7, 9, resFail);
 				return true;
 		  }
 	 }

   	     
 		
            	
     public boolean checkUserCreatedVoucherDisplayWithDocumentTabInDocumentCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  	 {
  		excelReader=new ExcelReader(POJOUtility.getExcelPath());
  		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
  		
  		System.out.println("**************  checkUserCreatedVoucherDisplayInDocumentCustomization Method Executes.............  *****************");
  		
  		
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
  			settingsmenuBtn.click();
  			
  			Thread.sleep(2000);
  			
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
  			ConfigureTransactionBtn.click();
  			
  		    Thread.sleep(2000);
  		    
  		  Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PreferencesBtn));
			PreferencesBtn.click();
			
		    Thread.sleep(2000);
  			
  		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
  		    documentCustomization45Btn.click();
  			
  		    Thread.sleep(2000);
  			
  		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersNewVoucherBtn));
  		    purchaseVouchersNewVoucherBtn.click();
  		    
  		    Thread.sleep(2000);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalExpandBtn));
		    generalExpandBtn.click();
		    Thread.sleep(3000);
  				 
  		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
  		    titleTxt.click();
 		 
  		    String actTitleTxt=titleTxt.getAttribute("value");
  		    String expTitleTxt= "Purchase Voucher VAT";
  		
  		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocumentTxtInDocCust));
  		    String actBaseDocumentName = baseDocumentTxtInDocCust.getAttribute("value");
  		    String expBaseDocumentName = "Purchases Vouchers 301";
  		 
  		  Thread.sleep(3000);
  		    getAction().moveToElement(menuSelectionExpandBtn).build().perform();
  		  
		    Thread.sleep(3000);
  		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR1C1)); 
  		    mastersR1C1.click();
  		
  		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
  		    masterDropDown.click();
  		
  		    Select getValuesOfMasterC1=new Select(masterDropDown);
  		    String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
  		    String expMastersR1C1="Warehouse";
  		    
  		    Thread.sleep(2000);
  		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersPositionR1C2));
  		    mastersPositionR1C2.click();
  		
  		    positionDropdown.click();
  		    Select getValueOfPostionC1=new Select(positionDropdown);
  		    String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
  		    String expPositionR1C1="Body";	
  		
  		    Thread.sleep(2000);
  		    
  		    
  		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR2C1)); 
  		    mastersR2C1.click();
  		
  		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
  		    masterDropDown.click();
  		
  		    Select getValuesOfMasterC2=new Select(masterDropDown);
  		    String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
  		    String expMastersR2C1="Department";
  		  
  		  Thread.sleep(2000);
  		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersPositionR2C2));
  		    mastersPositionR2C2.click();
  		
  		    positionDropdown.click();
  		    Select getValueOfPostionC2=new Select(positionDropdown);
  		    String actPositionR2C2=getValueOfPostionC2.getFirstSelectedOption().getText();
  		    String expPositionR2C2="Header";	
  	
  		    System.out.println("TitleTxt               : " + actTitleTxt             + "  value expected  " + expTitleTxt);
  		    System.out.println("Base Doucment          : " + actBaseDocumentName     + "  value expected  " + expBaseDocumentName);
  		    System.out.println("Row One Master         : " + actMastersR1C1          + "  value expected  " + expMastersR1C1);
  		    System.out.println("Row One Position       : " + actPositionR1C1         + "  value expected  " + expPositionR1C1);
  		    System.out.println("Row Two Master         : " + actMastersR2C1          + "  value expected  " + expMastersR2C1);
  	        System.out.println("Row Tow Position       : " + actPositionR2C2         + "  value expected  " + expPositionR2C2);
  		
  		    boolean actdocumentsTab        = documentsTab.isDisplayed();
  		    boolean actmiscellaneousTab    = miscellaneousTab.isDisplayed();
  		    boolean acteditScreenTab       = editScreenTab.isDisplayed();
  		    boolean actinventoryoptionsTab = inventoryoptionsTab.isDisplayed();
  		    boolean acteditLayoutTab       = editLayoutTab.isDisplayed();
  		 
  		
  		    boolean expdocumentsTab        = true;
  		    boolean expmiscellaneousTab    = true;
  	        boolean expeditScreenTab       = true;
  		    boolean expinventoryoptionsTab = true;
  		    boolean expeditLayoutTab       = true;
  		  


  		    System.out.println("DocumentsTab           : " + actdocumentsTab         + "  value expected  " + expdocumentsTab);
  		    System.out.println("MiscellaneousTab       : " + actmiscellaneousTab     + "  value expected  " + expmiscellaneousTab);
  		    System.out.println("EditScreenTab          : " + acteditScreenTab        + "  value expected  " + expeditScreenTab);
  		    System.out.println("InventoryoptionsTab    : " + actinventoryoptionsTab  + "  value expected  " + expinventoryoptionsTab);
  		    System.out.println("EditLayoutTab          : " + acteditLayoutTab        + "  value expected  " + expeditLayoutTab);
  		   

			  boolean actviewsBtn             = viewsBtn.isDisplayed();
			  boolean actexternalFunctionsBtn = externalFunctionsBtn.isDisplayed();
			  boolean actschemesBtn           = schemesBtn.isDisplayed();
			  boolean actexportFieldBtn      = exportFieldBtn.isDisplayed();
			  boolean acttriggersBtn          = triggerBtn.isDisplayed();
			  boolean actdocumentNumberingBtn = documentNumberingBtn.isDisplayed();
			  boolean acthirePurBtn      = hirePurBtn.isDisplayed();
			  boolean actrulesBtn             = rulesBtn.isDisplayed();
			  boolean actreportBtn           = reportBtn.isDisplayed();
			
  		    boolean expviewsBtn             = true;
  		    boolean expexternalFunctionsBtn = true;
  		    boolean expschemesBtn           = true;
  		    boolean expexportFieldsBtn      = true;
  		    boolean exptriggersBtn          = true;
  		    boolean expdocumentNumberingBtn = true;
  		    boolean exphirePurchaseBtn      = true;
  		    boolean exprulesBtn             = true;
  		    boolean expreportsBtn           = true;		

  		    System.out.println("ViewsBtn               : " + actviewsBtn                 + "  value expected  " + expviewsBtn);
  	  	    System.out.println("ExternalFunctionsBtn   : " + actexternalFunctionsBtn     + "  value expected  " + expexternalFunctionsBtn);
  		    System.out.println("SchemesBtn             : " + actschemesBtn               + "  value expected  " + expschemesBtn);
  		    System.out.println("ExportFieldsBtn        : " + actexportFieldBtn          + "  value expected  " + expexportFieldsBtn);
  		    System.out.println("TriggersBtn            : " + acttriggersBtn              + "  value expected  " + exptriggersBtn);
  		    System.out.println("DocumentNumberingBtn   : " + actdocumentNumberingBtn     + "  value expected  " + expdocumentNumberingBtn);
  	        System.out.println("HirePurchaseBtn        : " + acthirePurBtn          + "  value expected  " + exphirePurchaseBtn);
  		    System.out.println("RulesBtn               : " + actrulesBtn                 + "  value expected  " + exprulesBtn);
  		    System.out.println("ReportsBtn             : " + actreportBtn               + "  value expected  " + expreportsBtn);
  		    System.out.println("Row One Master         : " + actMastersR1C1          + "  value expected  " + expMastersR1C1);
  		
  		   if(/*actMastersR1C1.equalsIgnoreCase(expMastersR1C1)
  				&& actPositionR1C1.equalsIgnoreCase(expPositionR1C1) 
  				
  				&& actMastersR2C1.equalsIgnoreCase(expMastersR2C1)
  				&& actPositionR2C2.equalsIgnoreCase(expPositionR2C2)   
  				
  				&&*/ actdocumentsTab==expdocumentsTab 
  				&& actmiscellaneousTab==expmiscellaneousTab && acteditScreenTab==expeditScreenTab && actinventoryoptionsTab==expinventoryoptionsTab 
  				&& acteditLayoutTab==expeditLayoutTab
  						
  			    && actviewsBtn==expviewsBtn && actexternalFunctionsBtn==expexternalFunctionsBtn && actschemesBtn==expschemesBtn 
  			    && actexportFieldBtn==expexportFieldsBtn && acttriggersBtn==exptriggersBtn && actdocumentNumberingBtn==expdocumentNumberingBtn 
  			    && acthirePurBtn==exphirePurchaseBtn && actrulesBtn==exprulesBtn && actreportBtn==expreportsBtn)
  		  {
  			System.out.println("Test Pass : Toogle Options in Sales Orders As Expected");
  			excelReader.setCellData(xlfile, xlSheetName,  281, 9, resPass);
  			return true;
  		  }
  		  else
  		  {
  			System.out.println("Test Fail : Toogle Options in Sales Orders As Expected");
  			excelReader.setCellData(xlfile, xlSheetName,  281, 9, resFail);
  			return false;
  		  }
  		
  	  }
          	    

     
	  public boolean checkCreatedVoucherMiscellaneousTabInDocumentCustoimization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("**************  checkCreatedVoucherMiscellaneousTabInDocumentCustoimization Method Executes.............  *****************");
		
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		  miscellaneousTab.click();
			  
		  Thread.sleep(2000);
		  Thread.sleep(2000);
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountSettingsExpandBtn));
		  vendorAccountSettingsExpandBtn.click();
		  Thread.sleep(2000);
		  
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abbreviationTxt));
		  abbreviationTxt.click();		
		 
		  String actAbbreviationTxt=abbreviationTxt.getAttribute("value");
		  String expAbbreviationTxt= "NDT48";
		  excelReader.setCellData(xlfile, xlSheetName, 289, 8, actAbbreviationTxt);
			
		  boolean actabbreviationTxt                                     = abbreviationTxt.isDisplayed();
		  boolean actdefaultAccount1Txt                                  = defaultAccount1Txt.isDisplayed();
		  boolean actdefaultAccount2Txt                                  = defaultAccount2Txt.isDisplayed();
		  
		  boolean actdontRestrictAccount1TypeChkBox                      = dontRestrictAccount1TypeChkBox.isDisplayed();
		  boolean actdontRestrictAccount2TypeChkBox                      = dontRestrictAccount2TypeChkBox.isDisplayed();
		  boolean actdontRestrictOnLoginAccountChkBox                    = dontRestrictOnLoginAccountChkBox.isDisplayed();
		  boolean actdontRestrictOnLoginTagChkBox                        = dontRestrictOnLoginTagChkBox.isDisplayed();
		  boolean actenableVersionChkBox                                 = enableVersionChkBox.isDisplayed();
		  boolean actprintUsingDefaultPrinterAndFormatChkBox             = printUsingDefaultPrinterAndFormatChkBox.isDisplayed();
		  
		  
		  boolean actchangeTransactionDateWhenAuthorizedChkBox           = changeTransactionDateWhenAuthorizedChkBox.isDisplayed();
		  boolean actdateCannotBePriortoPrevdateChkBox                   = dateCannotBePriortoPrevdateChkBox.isDisplayed();
		  boolean actdetailedDisplayInSummaryBarChkBox                   = detailedDisplayInSummaryBarChkBox.isDisplayed();
		  boolean actdontAllowEditThisDocChkBox                          = dontAllowEditThisDocChkBox.isDisplayed();
		  boolean actdontAllowInputDateChkBox                            = dontAllowInputDateChkBox.isDisplayed();
		  
		  boolean actcheckbudgetDropdown                                 = checkbudgetDropdown.isDisplayed();
		  boolean actpickEmailFromDropdown                               = pickEmailFromDropdown.isDisplayed();
		  boolean actdontpostCOGS                                        = dontpostCOGS.isDisplayed();
		  
		  
		  Thread.sleep(2000);
		  getAction().moveToElement(postingDetailsEpandBtn).build().perform();
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsEpandBtn));
		  postingDetailsEpandBtn.click();
		  Thread.sleep(3000);
		  
		  boolean actupdateFAChkBox                                      = updateFAChkBox.isDisplayed();
		  boolean actselectAccountInEveryLineChkBox                      = selectAccountInEveryLineChkBox.isDisplayed();
		  boolean actdetailedPostingChkbox                               = detailedPostingChkbox.isDisplayed();
		  boolean actupdateStockChkBox                                   = updateStockChkBox.isDisplayed();
		  boolean actallowChangingUpdateStock                            = allowChangingUpdateStock.isDisplayed();
		  boolean actpostServicetaxChkBox                                = postServicetaxChkBox.isDisplayed();
		  boolean actpostTDSchkBox                                       = postTDSchkBox.isDisplayed();
		  boolean actpostVATchkBox                                       = postVATchkBox.isDisplayed();
		  boolean actlinkToLetterOfCreditChkBox                          = linkToLetterOfCreditChkBox.isDisplayed();
		  boolean actdontcheckcreditlimitChkBox                          = dontcheckcreditlimitChkBox.isDisplayed();
		  
		  
		  if (updateStockChkBox.isSelected()==false)
		  {
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
			  updateStockChkBox.click();
		  } 
		  
		  
		  Thread.sleep(2000);
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictionExpandBtn));
		  restrictionExpandBtn.click();
		  Thread.sleep(2000);
		  
		  
		  
		  
		  
		  boolean actstopRadio                                           = stopRadio.isDisplayed();
		  boolean actwarnAndAllowRadio                                   = warnAndAllowRadio.isDisplayed();
		  boolean actentryRestrictConditionTxt                           = entryRestrictConditionTxt.isDisplayed();
	  	  boolean actentryRestrictMessageTxt                             = entryRestrictMessageTxt.isDisplayed();
	  	  
	  	 Thread.sleep(2000);
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyExpandBtnInDc));
		  currencyExpandBtnInDc.click();
		  Thread.sleep(2000);
		  
		  
		  boolean actaddCurrencyInDropdown                               = addCurrencyInDropdown.isDisplayed();
		  boolean actinputExchangeRateChkBox                             = inputExchangeRateChkBox.isDisplayed();
		  boolean actinputLocalExchangeRateChkBox                        = inputLocalExchangeRateChkBox.isDisplayed();
		  boolean actpostExchangeRateDifferrenceChkBox                   = postExchangeRateDifferrenceChkBox.isDisplayed();
		  boolean actpostExchangeRateDifferenceBasedOnStandardRuleChkBox = postExchangeRateDifferenceBasedOnStandardRuleChkBox.isDisplayed();
		  
		  Thread.sleep(2000);
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AR_APExpandBtn));
		  AR_APExpandBtn.click();
		  Thread.sleep(2000);
		  
		  
		  boolean actdueDateDropdown                                     = dueDateDropdown.isDisplayed();
		  boolean actarapOptionsDropdown                                 = arapOptionsDropdown.isDisplayed();
		  boolean actoptionsdDropdown                                    = optionsdDropdown.isDisplayed();
		  //boolean actselectbillsbeforeAmountChkBox                       = selectbillsbeforeAmountChkBox.isDisplayed();
		  boolean actpostDiscountBasedOnCrediDaysChkBox                  = postDiscountBasedOnCrediDaysChkBox.isDisplayed();
		  boolean actinputPaymenttermsChkBox                             = inputPaymenttermsChkBox.isDisplayed();
		  boolean actnarrationDropdown                                   = narrationDropdown.isDisplayed();
		  
		  Thread.sleep(2000);
			
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		  dueDateDropdown.click();
		  Select s1=new Select(dueDateDropdown);
		  s1.selectByVisibleText("Header");
		  
		  Thread.sleep(2000);
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(applyRulesOnExpandBtn));
		  applyRulesOnExpandBtn.click();
		  Thread.sleep(2000);
		  
		  
		  boolean actapplyRulesOnExternalModuleChkbox                    = applyRulesOnExternalModuleChkbox.isDisplayed();
		  boolean actapplyRulesOnLinkChkBox                              = applyRulesOnLinkChkBox.isDisplayed();
		  boolean actapplyRulesOnSetItemsChkBox                          = applyRulesOnSetItemsChkBox.isDisplayed();
		  
		  
		  Thread.sleep(2000);
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(applyDependyOnExpandBtn));
		  applyDependyOnExpandBtn.click();
		  Thread.sleep(2000);
		  
		  
		  boolean actapplyDependencyOnExternalModuleChkbox               = applyDependencyOnExternalModuleChkbox.isDisplayed();
		  boolean actapplyDependencyOnLinkChkBox                         = applyDependencyOnLinkChkBox.isDisplayed();
		  boolean actapplyDependencyOnSetItemsChkBox                     = applyDependencyOnSetItemsChkBox.isDisplayed(); 
			
		  boolean expabbreviationTxt                                     = true;
		  boolean expdefaultAccount1Txt                                  = true;
		  boolean expdefaultAccount2Txt                                  = true;
		  boolean expchangeTransactionDateWhenAuthorizedChkBox           = true;
		  boolean expdateCannotBePriortoPrevdateChkBox                   = true;
		  boolean expdetailedDisplayInSummaryBarChkBox                   = true;
		  boolean expdontAllowEditThisDocChkBox                          = true;
		  boolean expdontAllowInputDateChkBox                            = true;
		  boolean expdontRestrictAccount1TypeChkBox                      = true;
		  boolean expdontRestrictAccount2TypeChkBox                      = true;
		  boolean expdontRestrictOnLoginAccountChkBox                    = true;
		  boolean expdontRestrictOnLoginTagChkBox                        = true;
		  boolean expenableVersionChkBox                                 = true;
		  boolean expprintUsingDefaultPrinterAndFormatChkBox             = true;
		  boolean expcheckbudgetDropdown                                 = true;
		  boolean exppickEmailFromDropdown                               = true;
		  boolean expstopRadio                                           = true;
		  boolean expwarnAndAllowRadio                                   = true;
		  boolean expentryRestrictConditionTxt                           = true;
		  boolean expentryRestrictMessageTxt                             = true;
		  boolean expdontpostCOGS                                        = true;
		  boolean expupdateFAChkBox                                      = true;
		  boolean expselectAccountInEveryLineChkBox                      = true;
		  boolean expdetailedPostingChkbox                               = true;
		  boolean expupdateStockChkBox                                   = true;
		  boolean expallowChangingUpdateStock                            = true;
		  boolean exppostServicetaxChkBox                                = true;
		  boolean exppostTDSchkBox                                       = true;
		  boolean exppostVATchkBox                                       = true;
		  boolean explinkToLetterOfCreditChkBox                          = true;
		  boolean expdontcheckcreditlimitChkBox                          = true;
		  boolean expaddCurrencyInDropdown                               = true;
		  boolean expinputExchangeRateChkBox                             = true;
		  boolean expinputLocalExchangeRateChkBox                        = true;
		  boolean exppostExchangeRateDifferrenceChkBox                   = true;
		  boolean exppostExchangeRateDifferenceBasedOnStandardRuleChkBox = true;
		  boolean expdueDateDropdown                                     = true;
		  boolean exparapOptionsDropdown                                 = true;
		  boolean expoptionsdDropdown                                    = true;
		  //boolean expselectbillsbeforeAmountChkBox                       = true;
		  boolean exppostDiscountBasedOnCrediDaysChkBox                  = true;
		  boolean expinputPaymenttermsChkBox                             = true;
		  boolean expnarrationDropdown                                   = true;
		  boolean expapplyRulesOnExternalModuleChkbox                    = true;
		  boolean expapplyRulesOnLinkChkBox                              = true;
		  boolean expapplyRulesOnSetItemsChkBox                          = true;
		  boolean expapplyDependencyOnExternalModuleChkbox               = true;
		  boolean expapplyDependencyOnLinkChkBox                         = true;
		  boolean expapplyDependencyOnSetItemsChkBox                     = true; 
		 
		
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		  updateBtn.click();
			
		  String expMessage="Data Saved SuccessFully";
			
		  String actMessage=checkValidationMessage(expMessage);
			
		  System.out.println("AbbreviationTxt isDisplaying                         : " + actabbreviationTxt                                      + "  value expected  " + expabbreviationTxt);
		  System.out.println("DefaultAccount1Txt                                   : " + actdefaultAccount1Txt                                   + "  value expected  " + expdefaultAccount1Txt);
		  System.out.println("DefaultAccount2Txt                                   : " + actdefaultAccount2Txt                                   + "  value expected  " + expdefaultAccount2Txt);
	      System.out.println("ChangeTransactionDateWhenAuthorizedChkBox            : " + actchangeTransactionDateWhenAuthorizedChkBox            + "  value expected  " + expchangeTransactionDateWhenAuthorizedChkBox);
		  System.out.println("DateCannotBePriortoPrevdateChkBox                    : " + actdateCannotBePriortoPrevdateChkBox                    + "  value expected  " + expdateCannotBePriortoPrevdateChkBox);
		  System.out.println("DetailedDisplayInSummaryBarChkBox                    : " + actdetailedDisplayInSummaryBarChkBox                    + "  value expected  " + expdetailedDisplayInSummaryBarChkBox);
		  System.out.println("DontAllowEditThisDocChkBox                           : " + actdontAllowEditThisDocChkBox                           + "  value expected  " + expdontAllowEditThisDocChkBox);
		  System.out.println("DontAllowInputDateChkBox                             : " + actdontAllowInputDateChkBox                             + "  value expected  " + expdontAllowInputDateChkBox);
		  System.out.println("DontRestrictAccount1TypeChkBox                       : " + actdontRestrictAccount1TypeChkBox                       + "  value expected  " + expdontRestrictAccount1TypeChkBox);
		  System.out.println("DontRestrictAccount2TypeChkBox                       : " + actdontRestrictAccount2TypeChkBox                       + "  value expected  " + expdontRestrictAccount2TypeChkBox);
		  System.out.println("DontRestrictOnLoginAccountChkBox                     : " + actdontRestrictOnLoginAccountChkBox                     + "  value expected  " + expdontRestrictOnLoginAccountChkBox);
		  System.out.println("DontRestrictOnLoginTagChkBox                         : " + actdontRestrictOnLoginTagChkBox                         + "  value expected  " + expdontRestrictOnLoginTagChkBox);
		  System.out.println("EnableVersionChkBox                                  : " + actenableVersionChkBox                                  + "  value expected  " + expenableVersionChkBox);
		  System.out.println("PrintUsingDefaultPrinterAndFormatChkBox              : " + actprintUsingDefaultPrinterAndFormatChkBox              + "  value expected  " + expprintUsingDefaultPrinterAndFormatChkBox);
		  System.out.println("CheckbudgetDropdown                                  : " + actcheckbudgetDropdown                                  + "  value expected  " + expcheckbudgetDropdown);
		  System.out.println("PickEmailFromDropdown                                : " + actpickEmailFromDropdown                                + "  value expected  " + exppickEmailFromDropdown);
		  System.out.println("StopRadio                                            : " + actstopRadio                                            + "  value expected  " + expstopRadio);
		  System.out.println("WarnAndAllowRadio                                    : " + actwarnAndAllowRadio                                    + "  value expected  " + expwarnAndAllowRadio);
		  System.out.println("EntryRestrictConditionTxt                            : " + actentryRestrictConditionTxt                            + "  value expected  " + expentryRestrictConditionTxt);
	      System.out.println("EntryRestrictMessageTxt                              : " + actentryRestrictMessageTxt                              + "  value expected  " + expentryRestrictMessageTxt);
	      System.out.println("DontpostCOGS                                         : " + actdontpostCOGS                                         + "  value expected  " + expdontpostCOGS);
	      System.out.println("UpdateFAChkBox                                       : " + actupdateFAChkBox                                       + "  value expected  " + expupdateFAChkBox);
	      System.out.println("SelectAccountInEveryLineChkBox                       : " + actselectAccountInEveryLineChkBox                       + "  value expected  " + expselectAccountInEveryLineChkBox);
	      System.out.println("DetailedPostingChkbox                                : " + actdetailedPostingChkbox                                + "  value expected  " + expdetailedPostingChkbox);
	      System.out.println("UpdateStockChkBox                                    : " + actupdateStockChkBox                                    + "  value expected  " + expupdateStockChkBox);
	      System.out.println("AllowChangingUpdateStock                             : " + actallowChangingUpdateStock                             + "  value expected  " + expallowChangingUpdateStock);
	      System.out.println("PostServicetaxChkBox                                 : " + actpostServicetaxChkBox                                 + "  value expected  " + exppostServicetaxChkBox);
	      System.out.println("PostTDSchkBox                                        : " + actpostTDSchkBox                                        + "  value expected  " + exppostTDSchkBox);
	      System.out.println("PostVATchkBox                                        : " + actpostVATchkBox                                        + "  value expected  " + exppostVATchkBox);
	      System.out.println("LinkToLetterOfCreditChkBox                           : " + actlinkToLetterOfCreditChkBox                           + "  value expected  " + explinkToLetterOfCreditChkBox);
	      System.out.println("DontcheckcreditlimitChkBox                           : " + actdontcheckcreditlimitChkBox                           + "  value expected  " + expdontcheckcreditlimitChkBox);
	  	  System.out.println("AddCurrencyInDropdown                                : " + actaddCurrencyInDropdown                                + "  value expected  " + expaddCurrencyInDropdown);
		  System.out.println("InputExchangeRateChkBox                              : " + actinputExchangeRateChkBox                              + "  value expected  " + expinputExchangeRateChkBox);
		  System.out.println("InputLocalExchangeRateChkBox                         : " + actinputLocalExchangeRateChkBox                         + "  value expected  " + expinputLocalExchangeRateChkBox);
		  System.out.println("PostExchangeRateDifferrenceChkBox                    : " + actpostExchangeRateDifferrenceChkBox                    + "  value expected  " + exppostExchangeRateDifferrenceChkBox);
		  System.out.println("PostExchangeRateDifferenceBasedOnStandardRuleChkBox  : " + actpostExchangeRateDifferenceBasedOnStandardRuleChkBox  + "  value expected  " + exppostExchangeRateDifferenceBasedOnStandardRuleChkBox);
		  System.out.println("DueDateDropdown                                      : " + actdueDateDropdown                                      + "  value expected  " + expdueDateDropdown);
		  System.out.println("ArapOptionsDropdown                                  : " + actarapOptionsDropdown                                  + "  value expected  " + exparapOptionsDropdown);
		  System.out.println("OptionsdDropdown                                     : " + actoptionsdDropdown                                     + "  value expected  " + expoptionsdDropdown);
		 // System.out.println("selectbillsbeforeAmountChkBox                        : " + actselectbillsbeforeAmountChkBox                        + "  value expected  " + expselectbillsbeforeAmountChkBox);
		  System.out.println("PostDiscountBasedOnCrediDaysChkBox                   : " + actpostDiscountBasedOnCrediDaysChkBox                   + "  value expected  " + exppostDiscountBasedOnCrediDaysChkBox);
		  System.out.println("InputPaymenttermsChkBox                              : " + actinputPaymenttermsChkBox                              + "  value expected  " + expinputPaymenttermsChkBox);
		  System.out.println("NarrationDropdown                                    : " + actnarrationDropdown                                    + "  value expected  " + expnarrationDropdown);
		  System.out.println("ApplyRulesOnExternalModuleChkbox                     : " + actapplyRulesOnExternalModuleChkbox                     + "  value expected  " + expapplyRulesOnExternalModuleChkbox);
		  System.out.println("ApplyRulesOnLinkChkBox                               : " + actapplyRulesOnLinkChkBox                               + "  value expected  " + expapplyRulesOnLinkChkBox);
		  System.out.println("ApplyRulesOnSetItemsChkBox                           : " + actapplyRulesOnSetItemsChkBox                           + "  value expected  " + expapplyRulesOnSetItemsChkBox);
		  System.out.println("ApplyDependencyOnExternalModuleChkbox                : " + actapplyDependencyOnExternalModuleChkbox                + "  value expected  " + expapplyDependencyOnExternalModuleChkbox);
		  System.out.println("ApplyDependencyOnLinkChkBox                          : " + actapplyDependencyOnLinkChkBox                          + "  value expected  " + expapplyDependencyOnLinkChkBox);
		  System.out.println("ApplyDependencyOnSetItemsChkBox                      : " + actapplyDependencyOnSetItemsChkBox                      + "  value expected  " + expapplyDependencyOnSetItemsChkBox);

		  boolean updateFAChkBoxIsSelect                                    = updateFAChkBoxSelected.isSelected();
		  String actupdateFAChkBoxIsSelect                                  =Boolean.toString(updateFAChkBoxIsSelect);
		  excelReader.setCellData(xlfile, xlSheetName, 290, 8, actupdateFAChkBoxIsSelect);
		
	      Select currencyIsSelectValue                                         = new Select(addCurrencyInDropdown);
	      String actAddCurrencyDropdownSelectValue                             = currencyIsSelectValue.getFirstSelectedOption().getText();
	      excelReader.setCellData(xlfile, xlSheetName, 292, 8, actAddCurrencyDropdownSelectValue);
	      
		  boolean inputExchangeRateChkBoxIsSelect                           = inputExchangeRateChkBox.isDisplayed();
		  String actinputExchangeRateChkBoxIsSelect                         =Boolean.toString(inputExchangeRateChkBoxIsSelect);
		  excelReader.setCellData(xlfile, xlSheetName, 293, 8, actinputExchangeRateChkBoxIsSelect);
		  
		  boolean inputLocalExchangeRateChkBoxIsSelect                      = inputLocalExchangeRateChkBox.isDisplayed();
		  String actinputLocalExchangeRateChkBoxIsSelect                    =Boolean.toString(inputLocalExchangeRateChkBoxIsSelect);
		  excelReader.setCellData(xlfile, xlSheetName, 294, 8, actinputLocalExchangeRateChkBoxIsSelect);
		  
		  Select dueDateValue                                                  = new Select(dueDateDropdown);
		  String actValueOfDueDate                                             = dueDateValue.getFirstSelectedOption().getText();
		  excelReader.setCellData(xlfile, xlSheetName, 295, 8, actValueOfDueDate); 
		  
		  Select arapDropdownValue                                             = new Select(arapOptionsDropdown);
		  String actARAPDropdownValue                                          = arapDropdownValue.getFirstSelectedOption().getText();
		  excelReader.setCellData(xlfile, xlSheetName, 296, 8, actARAPDropdownValue);
		  
		  String expupdateFAChkBoxIsSelect                                    = excelReader.getCellData(xlSheetName, 290, 7);
		  String expupdateStockChkBoxIsSelect                                 = excelReader.getCellData(xlSheetName, 291, 7);
	     
	      String expAddCurrencyDropdownSelectValue                             =excelReader.getCellData(xlSheetName, 292, 7);      
	      String expinputExchangeRateChkBoxIsSelect                           = excelReader.getCellData(xlSheetName, 293, 7);
	      String expinputLocalExchangeRateChkBoxIsSelect                      = excelReader.getCellData(xlSheetName, 294, 7);

		  String expValueOfDueDate                                             = excelReader.getCellData(xlSheetName, 295, 7);
		  String expARAPDropdownValue                                          = excelReader.getCellData(xlSheetName, 296, 7);;
		  	  
		  System.out.println("Update FA is Displaying            : " + actupdateFAChkBoxIsSelect                + "  value expected  " + expupdateFAChkBoxIsSelect);
		  System.out.println("Currency Dropdown Value            : " + actAddCurrencyDropdownSelectValue        + "  value expected  " + expAddCurrencyDropdownSelectValue);
	      System.out.println("Exchange Rate Is Displaying        : " + actinputExchangeRateChkBoxIsSelect       + "  value expected  " + expinputExchangeRateChkBoxIsSelect);
		  System.out.println("Local Exchange Rate Is Displaying  : " + actinputLocalExchangeRateChkBoxIsSelect  + "  value expected  " + expinputLocalExchangeRateChkBoxIsSelect);
		  System.out.println("Due Date Value is Displaying       : " + actValueOfDueDate                        + "  value expected  " + expValueOfDueDate);
		  System.out.println("ARAP Dropdown Value                : " + actARAPDropdownValue                     + "  value expected  " + expARAPDropdownValue);
		    
		  if(actabbreviationTxt==expabbreviationTxt && actdefaultAccount1Txt==expdefaultAccount1Txt &&
				actdefaultAccount2Txt==expdefaultAccount2Txt && actchangeTransactionDateWhenAuthorizedChkBox==expchangeTransactionDateWhenAuthorizedChkBox &&
				actdateCannotBePriortoPrevdateChkBox==expdateCannotBePriortoPrevdateChkBox && actdetailedDisplayInSummaryBarChkBox==expdetailedDisplayInSummaryBarChkBox &&
				actdontAllowEditThisDocChkBox==expdontAllowEditThisDocChkBox && actdontAllowInputDateChkBox==expdontAllowInputDateChkBox &&
				actdontRestrictAccount1TypeChkBox==expdontRestrictAccount1TypeChkBox && actdontRestrictAccount2TypeChkBox==expdontRestrictAccount2TypeChkBox &&
				actdontRestrictOnLoginAccountChkBox==expdontRestrictOnLoginAccountChkBox && actdontRestrictOnLoginTagChkBox==expdontRestrictOnLoginTagChkBox &&
				actenableVersionChkBox==expenableVersionChkBox && actprintUsingDefaultPrinterAndFormatChkBox==expprintUsingDefaultPrinterAndFormatChkBox &&
				actcheckbudgetDropdown==expcheckbudgetDropdown && actpickEmailFromDropdown==exppickEmailFromDropdown && actstopRadio==expstopRadio &&
				actwarnAndAllowRadio==expwarnAndAllowRadio && actentryRestrictConditionTxt==expentryRestrictConditionTxt && actentryRestrictMessageTxt==expentryRestrictMessageTxt &&
				actdontpostCOGS==expdontpostCOGS && actupdateFAChkBox==expupdateFAChkBox && actselectAccountInEveryLineChkBox==expselectAccountInEveryLineChkBox &&
				actdetailedPostingChkbox==expdetailedPostingChkbox && actupdateStockChkBox==expupdateStockChkBox && actallowChangingUpdateStock==expallowChangingUpdateStock &&
				actpostServicetaxChkBox==exppostServicetaxChkBox && actpostTDSchkBox==exppostTDSchkBox && actpostVATchkBox==exppostVATchkBox &&
				actlinkToLetterOfCreditChkBox==explinkToLetterOfCreditChkBox && actdontcheckcreditlimitChkBox==expdontcheckcreditlimitChkBox && 
				actaddCurrencyInDropdown==expaddCurrencyInDropdown && actinputExchangeRateChkBox==expinputExchangeRateChkBox && actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox &&
				actpostExchangeRateDifferrenceChkBox==exppostExchangeRateDifferrenceChkBox && actpostExchangeRateDifferenceBasedOnStandardRuleChkBox==exppostExchangeRateDifferenceBasedOnStandardRuleChkBox &&
				actdueDateDropdown==expdueDateDropdown && actarapOptionsDropdown==exparapOptionsDropdown && actoptionsdDropdown==expoptionsdDropdown
				&& actpostDiscountBasedOnCrediDaysChkBox==exppostDiscountBasedOnCrediDaysChkBox &&
				actinputPaymenttermsChkBox==expinputPaymenttermsChkBox && actnarrationDropdown==expnarrationDropdown && actapplyRulesOnExternalModuleChkbox==expapplyRulesOnExternalModuleChkbox &&
				actapplyRulesOnLinkChkBox==expapplyRulesOnLinkChkBox && actapplyRulesOnSetItemsChkBox==expapplyRulesOnSetItemsChkBox &&
				actapplyDependencyOnExternalModuleChkbox==expapplyDependencyOnExternalModuleChkbox && actapplyDependencyOnLinkChkBox==expapplyDependencyOnLinkChkBox &&
				actapplyDependencyOnSetItemsChkBox==expapplyDependencyOnSetItemsChkBox
				
				&& actupdateFAChkBoxIsSelect.equalsIgnoreCase(expupdateFAChkBoxIsSelect) /*&& actupdateStockChkBoxIsSelect.equalsIgnoreCase(expupdateStockChkBoxIsSelect)*/
				&& actAddCurrencyDropdownSelectValue.equalsIgnoreCase(expAddCurrencyDropdownSelectValue) && actinputExchangeRateChkBoxIsSelect.equalsIgnoreCase(expinputExchangeRateChkBoxIsSelect)
				&& actinputLocalExchangeRateChkBoxIsSelect.equalsIgnoreCase(actinputLocalExchangeRateChkBoxIsSelect) && actValueOfDueDate.equalsIgnoreCase(expValueOfDueDate)
				&& actARAPDropdownValue.equalsIgnoreCase(expARAPDropdownValue))
			{
				System.out.println("Test Pass : Abbreviation Contain CasSal As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 288, 9, resPass);
				return true;
			}
		    else
			{
				System.out.println("Test Fail : Abbreviation Does NotContain CasSal As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 288, 9, resFail);
				return false;
			}
	   
	 }		
		
	  

	 
	  
	  @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_DefaultValue']")
	  public static WebElement editScreenDefaultValue;
	  
	  @FindBy(xpath="//tbody[@id='formulaGrideditScreen_FieldsCustomization_Formula_body']/tr/td[3]")
		public static List<WebElement>  editScreenFormulaNameList;
		
		@FindBy(xpath="//tbody[@id='formulaGrideditScreen_FieldsCustomization_Formula_body']/tr/td[4]")
		public static List<WebElement>  editScreenFormulaVariableList;
		
		@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_Formula_Ok']")
		public static WebElement formulaokBtn;
		
		@FindBy(xpath="//tbody[@id='formulaGrideditScreen_FieldsCustomization_PreLoad_body']/tr/td[3]")
		public static List<WebElement>  editScreenPreloadNameList;
		
		@FindBy(xpath="//tbody[@id='formulaGrideditScreen_FieldsCustomization_PreLoad_body']/tr/td[4]")
		public static List<WebElement>  editScreenPreloadVariableList;
		
		@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
		public static WebElement preloadokBtn;


	  public boolean checkCreatedVoucherEditScreenTabInDocumentCustoimization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("**************  checkCreatedVoucherMiscellaneousTabInDocumentCustoimization Method Executes.............  *****************");
		
		/*try
		{*/
		

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
			settingsmenuBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
		    Thread.sleep(2000);
		    
		  Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PreferencesBtn));
		PreferencesBtn.click();
		
	    Thread.sleep(2000);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		    documentCustomization45Btn.click();
			
		    Thread.sleep(2000);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersNewVoucherBtn));
		    purchaseVouchersNewVoucherBtn.click();
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			editScreenTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(editScreenBodyTab));
			
			boolean acteditScreenBodyTab                     =editScreenBodyTab.isDisplayed();
			boolean acteditScreenFooterTab                   =editScreenFooterTab.isDisplayed();
			boolean acteditScreenaddBtn                      =editScreenaddBtn.isDisplayed();
			boolean acteditScreenLoadFieldsBtn               =editScreenLoadFieldsBtn.isDisplayed();
			boolean acteditScreenPreviousBtn                 =editScreenPreviousBtn.isDisplayed();
			boolean acteditScreenNextBtn                     =editScreenNextBtn.isDisplayed();
			boolean acteditScreenBehaviourDropdown           =editScreenBehaviourDropdown.isDisplayed();
			boolean acteditScreenQuantityPreloadedTxt        =editScreenQuantityPreloadedTxt.isDisplayed();
			
			boolean expeditScreenBodyTab                     =true;
			boolean expeditScreenFooterTab                   =true;
			boolean expeditScreenaddBtn						 =true;
			boolean expeditScreenLoadFieldsBtn				 =true;
			boolean expeditScreenPreviousBtn				 =true;
			boolean expeditScreenNextBtn					 =true;
			boolean expeditScreenBehaviourDropdown			 =true;
			boolean expeditScreenQuantityPreloadedTxt		 =true;
			
			 System.out.println("Edit SCreen OPtion            : " + acteditScreenBodyTab                + "  value expected  " + expeditScreenBodyTab);
			 System.out.println("Edit SCreen OPtion            : " + acteditScreenFooterTab              + "  value expected  " + expeditScreenFooterTab);
			 System.out.println("Edit SCreen OPtion            : " + acteditScreenaddBtn                 + "  value expected  " + expeditScreenaddBtn);
			 System.out.println("Edit SCreen OPtion            : " + acteditScreenLoadFieldsBtn          + "  value expected  " + expeditScreenLoadFieldsBtn);
			 System.out.println("Edit SCreen OPtion            : " + acteditScreenPreviousBtn            + "  value expected  " + expeditScreenPreviousBtn);
			 System.out.println("Edit SCreen OPtion            : " + acteditScreenNextBtn                + "  value expected  " + expeditScreenNextBtn);
			 System.out.println("Edit SCreen OPtion            : " + acteditScreenBehaviourDropdown      + "  value expected  " + expeditScreenBehaviourDropdown);
			 System.out.println("Edit SCreen OPtion            : " + acteditScreenQuantityPreloadedTxt   + "  value expected  " + expeditScreenQuantityPreloadedTxt);
			
			boolean actMethod=acteditScreenBodyTab==expeditScreenBodyTab && acteditScreenFooterTab==expeditScreenFooterTab && 
					 acteditScreenaddBtn==expeditScreenaddBtn && acteditScreenLoadFieldsBtn==expeditScreenLoadFieldsBtn && 
					 acteditScreenPreviousBtn==expeditScreenPreviousBtn && acteditScreenNextBtn==expeditScreenNextBtn &&
					 acteditScreenBehaviourDropdown==expeditScreenBehaviourDropdown && acteditScreenQuantityPreloadedTxt==expeditScreenQuantityPreloadedTxt;
			 
			 
			String actResult=Boolean.toString(actMethod);
			String expResult= excelReader.getCellData(xlSheetName, 298, 7);
			excelReader.setCellData(xlfile, xlSheetName, 298, 8, actResult);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
    		editScreenBodyTab.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenSecondRowEdit));
    		editScreenSecondRowEdit.click();
    		
    		
    		Thread.sleep(2000);
    		
    		for(int i=0;i<3;i++)
    		{
	    		if(getIsAlertPresent())
	    		{
		    		getWaitForAlert();
		    		
		    		getAlert().accept();
	    		}
    		}
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
    		editScreenCaptionTxt.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValue));
    		editScreenDefaultValue.click();
    		editScreenDefaultValue.sendKeys(Keys.HOME);
    		editScreenDefaultValue.sendKeys(Keys.SHIFT, Keys.END);
    		editScreenDefaultValue.sendKeys("4");
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesTab));
    		editScreenPropertiesTab.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesReadOnly));
    		editScreenPropertiesReadOnly.click();
    		
    		Thread.sleep(3000);
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
			editScreenFieldOkBtn.click();

  			
    		Thread.sleep(3000);
    		
    		
    		int editScreenbodyCaptionCount = editScreenbodyCaption.size();
		 	
		 	for(int i=0;i<editScreenbodyCaptionCount;i++)
		 	{
		 		String data = editScreenbodyCaption.get(i).getText();
		 		
		 		if(data.equalsIgnoreCase("VAT"))
		 		{
		 			String gross = null,discount = null,vat = null;
		 			
		 			editScreenbodyEditBtn.get(i).click();
		 			
		 			Thread.sleep(2000);
		 			
		 			
		 			getAction().moveToElement(editScreenAddBehaviourformulaTxt).pause(1000).build().perform();
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxtTxt));
		 			editScreenAddBehaviourformulaTxtTxt.click();
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		 			editScreenAddBehaviourformulaTxt.click();
		 			Thread.sleep(1000);
		 			editScreenAddBehaviourformulaTxt.click();
		 			Thread.sleep(1000);
		 			editScreenAddBehaviourformulaTxt.click();
		 			
		 			Thread.sleep(2000);
		 			
		 			int editScreenFormulaNameListCount = editScreenFormulaNameList.size();
		 			
		 			System.err.println("editScreenFormulaNameListCount : "+editScreenFormulaNameListCount);
		 			
		 			for(int j=0;j<editScreenFormulaNameListCount;j++)
		 			{
		 				getAction().moveToElement(editScreenFormulaNameList.get(j)).build().perform();
		 				
		 				String formuladata = editScreenFormulaNameList.get(j).getText();
		 				
			 			if(formuladata.equalsIgnoreCase("Gross Amt"))
		     			{
		     				gross=editScreenFormulaVariableList.get(j).getText();
		     				
		     				System.out.println("gross  : "+gross);
		     				
		     			}
			 			
			 			
			 			if(formuladata.equalsIgnoreCase("Discount Calculated Value"))
		     			{
		     				discount=editScreenFormulaVariableList.get(j).getText();
		     				
		     				System.out.println("discount  : "+discount);
		     				
		     			}
			 			
			 			
			 			if(formuladata.equalsIgnoreCase("VAT Input"))
		     			{
		     				vat=editScreenFormulaVariableList.get(j).getText();
		     				
		     				System.out.println("vat  : "+vat);
		     				
		     			}
		 			}
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		 			editScreenAddBehaviourformulaTxt.clear();
		 			
		 			editScreenAddBehaviourformulaTxt.sendKeys("("+gross+"-"+discount+")"+"*"+vat+"/"+"100");
		 			Thread.sleep(2000);
		 			
		 			/*formulaokBtn.click();*/
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
					editScreenFieldOkBtn.click();
					
					String expMessage1		="Data Saved Successfully";
					
					String actMessage1		=checkValidationMessage(expMessage1);
		 			
		 		}
		 		
		 		
		 		Thread.sleep(3000);
		 		if(data.equalsIgnoreCase("Taxable"))
		 		{
		 			String gross = null,vat = null;
		 			
		 			editScreenbodyEditBtn.get(i).click();
		 			
		 			
		 			getAction().moveToElement(editScreenPreloadTxt).pause(1000).build().perform();
		 			
		 			

		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourPreloadTxtTxt));
		 			editScreenAddBehaviourPreloadTxtTxt.click();
		
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		 			editScreenPreloadTxt.click();
		 			Thread.sleep(1000);

		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		 			editScreenPreloadTxt.click();
		 			Thread.sleep(1000);
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		 			editScreenPreloadTxt.click();
		 			
		 			int editScreenPreloadNameListCount = editScreenPreloadNameList.size();
		 			
		 			for(int j=0;j<editScreenPreloadNameListCount;j++)
		 			{
		 				getAction().moveToElement(editScreenPreloadNameList.get(j)).build().perform();
		 				String preloaddata = editScreenPreloadNameList.get(j).getText();
		 			
			 			if(preloaddata.equalsIgnoreCase("Gross Amt"))
		     			{
		     				gross=editScreenPreloadVariableList.get(j).getText();
		     				
		     				System.out.println("gross  : "+gross);
		     				
		     			}
			 			
			 			if(preloaddata.equalsIgnoreCase("VAT Calculated Value"))
		     			{
		     				vat=editScreenPreloadVariableList.get(j).getText();
		     				
		     				System.out.println("vat  : "+vat);
		     				
		     			}
			 			
		 			}
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		 			editScreenPreloadTxt.clear();
		 			
		 			editScreenPreloadTxt.sendKeys("&"+"("+gross+"-"+vat+")");
		 			
		 			
		 			/*preloadokBtn.click();*/
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
					editScreenFieldOkBtn.click();
					
					String expMessage1		="Data Saved Successfully";
					
					String actMessage1		=checkValidationMessage(expMessage1);
		 			
		 		}
		 		
		 	}
		 	
		 	/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody3rdRowFormula));
		 	String acteditScreenbody4thRowFormula = editScreenbody3rdRowFormula.getText();
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody3rdRowPreload));
		 	String acteditScreenbody4thRowPreload = editScreenbody3rdRowPreload.getText();
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody4thRowPreload));
		 	String acteditScreenbody5thRowPreload = editScreenbody4thRowPreload.getText();
		 	
		 	String expeditScreenbody4thRowFormula = "(gr) *sb4/100";
		 	String expeditScreenbody4thRowPreload = "vatrt*vatdt";
		 	String expeditScreenbody5thRowPreload = "&(gr-sbo4)";*/
    		
    		
    		
  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
  			updateBtn.click();
  			
  			if(errorMessageCloseBtn.isDisplayed())
  			{
  				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
  				errorMessageCloseBtn.click();
  			}
  			
  						
			 if( actResult.equalsIgnoreCase(expResult))
			{
				
					System.out.println("Test Pass : Edit Screen Options Are Available as Expected");
					excelReader.setCellData(xlfile, xlSheetName, 297, 9, resPass);
					return  true;
				}
				else
				{
					System.out.println("Test Fail : Edit Screen Options Are Not Available");
					excelReader.setCellData(xlfile, xlSheetName, 297, 9, resFail);
					return  false;
				}
			
	    }
		/*catch (Exception e) 
		  {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 297, 10, e.getMessage());
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		  }
	 }	*/	
	
	  
	    // Bin
	    @FindBy(xpath="//select[@id='inventoryOpt_BinsPick']")
	    public static WebElement binsPickDropDown;

	    public boolean checkCreatedVoucherInventoryTabInDocumentCustoimization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	    {
	     excelReader=new ExcelReader(POJOUtility.getExcelPath());
	     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	     System.out.println("**************  checkCreatedVoucherInventoryTabInDocumentCustoimization Method Executes.............  *****************");
		
		  
			Thread.sleep(3000);
		   
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryoptionsTab));
			inventoryoptionsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(costOfIssueAccountTxt));
				
			boolean actcostOfIssueAccountTxt									=costOfIssueAccountTxt.isDisplayed();
			boolean actsalesPurchaseACTxt 										=salesPurchaseACTxt.isDisplayed();
			boolean actitemRateDropdown 										=itemRateDropdown.isDisplayed();
			boolean actreservationTypeDropdown 									=reservationTypeDropdown.isDisplayed();
			boolean actapplyrateSchemesChkBox 									=applyrateSchemesChkBox.isDisplayed();
			boolean actpickFreeSchemesQtyAfterEveryLineChkBox 					=pickFreeSchemesQtyAfterEveryLineChkBox.isDisplayed();
			boolean actdisplayUnitNamebeforeEveryQtyChkBox 						=displayUnitNamebeforeEveryQtyChkBox.isDisplayed();
			boolean actdontInputItemsChkBox 									=dontInputItemsChkBox.isDisplayed();
			boolean actdontInputQtyAndRateChkBox 								=dontInputQtyAndRateChkBox.isDisplayed();
			boolean actdontPopupBinSelectionAfterQuantityChkBox 				=dontPopupBinSelectionAfterQuantityChkBox.isDisplayed();
			boolean acthideRateAndGrossChkBox 									=hideRateAndGrossChkBox.isDisplayed();
			boolean acthideRateAndGrossfromNormalUsersChkBox 					=hideRateAndGrossfromNormalUsersChkBox.isDisplayed();
			boolean acthirePurchaseBehaviourChkBox 								=hirePurchaseBehaviourChkBox.isDisplayed();
			boolean actinputAsCounterBillChkBox 								=inputAsCounterBillChkBox.isDisplayed();
			boolean actinputBinLocationChkBox 									=inputBinLocationChkBox.isDisplayed();
			boolean actinputItemByAttributeChkBox 								=inputItemByAttributeChkBox.isDisplayed();
			boolean actqcrequiredforThisDocChkBox 								=qcrequiredforThisDocChkBox.isDisplayed();
			boolean actrecalculateTheRateInReceiptFromProductionOnSavingChkBox 	=recalculateTheRateInReceiptFromProductionOnSavingChkBox.isDisplayed();
			boolean actrestricttheitemFromBeingRepeatedInEntryChkBox 			=restricttheitemFromBeingRepeatedInEntryChkBox.isDisplayed();
			boolean actshowVendorAssignedItemsChkBox 							=showVendorAssignedItemsChkBox.isDisplayed();
			boolean actinputBarcodeChkBox 										=inputBarcodeChkBox.isDisplayed();
			boolean actshowHeldStockChkBox 										=showHeldStockChkBox.isDisplayed();
			boolean actcrossDocChkBox 											=crossDocChkBox.isDisplayed();
			boolean actallocateStockChkBox 										=allocateStockChkBox.isDisplayed();
			boolean actenableRFIDChkBox 										=enableRFIDChkBox.isDisplayed();
			boolean actenableQCChkBox 											=enableQCChkBox.isDisplayed();
			boolean actdontmakeThertaeZeroWhenItemisChangedChkBox 				=dontmakeThertaeZeroWhenItemisChangedChkBox.isDisplayed();
			boolean actbatchPickDropdown 										=batchPickDropdown.isDisplayed();
			boolean actallowExpiredbatchesToBeSelectedChkBox 					=allowExpiredbatchesToBeSelectedChkBox.isDisplayed();
			boolean actloadbatchesbeforeQuantityChkBox 							=loadbatchesbeforeQuantityChkBox.isDisplayed();
			boolean actreserveStockByBatchesChkBox 								=reserveStockByBatchesChkBox.isDisplayed();
			boolean actinputBatchEvenIfStockIsnotUpdatedChkBox 					=inputBatchEvenIfStockIsnotUpdatedChkBox.isDisplayed();
			boolean actnotApplicbleChkBox 										=notApplicbleChkBox.isDisplayed();
			boolean actfromTemplateChkBox 										=fromTemplateChkBox.isDisplayed();
			boolean actfromFieldChkBox 											=fromFieldChkBox.isDisplayed();
			boolean actbinsPickDropDown 										=binsPickDropDown.isDisplayed();
			
			boolean expcostOfIssueAccountTxt									=true;
			boolean expsalesPurchaseACTxt 										=true;
			boolean expitemRateDropdown 										=true;
			boolean expreservationTypeDropdown 									=true;
			boolean expapplyrateSchemesChkBox 									=true;
			boolean exppickFreeSchemesQtyAfterEveryLineChkBox 					=true;
			boolean expdisplayUnitNamebeforeEveryQtyChkBox 						=true;
			boolean expdontInputItemsChkBox 									=true;
			boolean expdontInputQtyAndRateChkBox 								=true;
			boolean expdontPopupBinSelectionAfterQuantityChkBox 				=true;
			boolean exphideRateAndGrossChkBox 									=true;
			boolean exphideRateAndGrossfromNormalUsersChkBox 					=true;
			boolean exphirePurchaseBehaviourChkBox 								=true;
			boolean expinputAsCounterBillChkBox 								=true;
			boolean expinputBinLocationChkBox 									=true;
			boolean expinputItemByAttributeChkBox 								=true;
			boolean expqcrequiredforThisDocChkBox 								=true;
			boolean exprecalculateTheRateInReceiptFromProductionOnSavingChkBox 	=true;
			boolean exprestricttheitemFromBeingRepeatedInEntryChkBox 			=true;
			boolean expshowVendorAssignedItemsChkBox 							=true;
			boolean expinputBarcodeChkBox 										=true;
			boolean expshowHeldStockChkBox 										=true;
			boolean expcrossDocChkBox 											=true;
			boolean expallocateStockChkBox 										=true;
			boolean expenableRFIDChkBox 										=true;
			boolean expenableQCChkBox 											=true;
			boolean expdontmakeThertaeZeroWhenItemisChangedChkBox 				=true;
			boolean expbatchPickDropdown 										=true;
			boolean expallowExpiredbatchesToBeSelectedChkBox 					=true;
			boolean exploadbatchesbeforeQuantityChkBox 							=true;
			boolean expreserveStockByBatchesChkBox 								=true;
			boolean expinputBatchEvenIfStockIsnotUpdatedChkBox 					=true;
			boolean expnotApplicbleChkBox 										=true;
			boolean expfromTemplateChkBox 										=true;
			boolean expfromFieldChkBox 											=true;
			boolean expbinsPickDropDown 										=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemRateDropdown));
			
			ArrayList<String> actitemRateDropdownList = new ArrayList<String>(); 
			
			Select itemSelect=new Select(itemRateDropdown);
			
			int itemCount=itemSelect.getOptions().size();
			
			for(int i=0;i<itemCount;i++)
			{
				String options=itemSelect.getOptions().get(i).getText();
				actitemRateDropdownList.add(options);
			}
			
			ArrayList<String>  expitemRateDropdownList= new ArrayList<String>(); 
			expitemRateDropdownList.add("Cannot be below Cost");
			expitemRateDropdownList.add("Cannot be changed");
			expitemRateDropdownList.add("Editable");
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickDropdown));
			
			ArrayList<String>  actbatchDropdownList= new ArrayList<String>(); 
			
			Select batchSelect=new Select(batchPickDropdown);
			
			int batchCount=batchSelect.getOptions().size();
			
			for(int i=0;i<batchCount;i++)
			{
				String options=batchSelect.getOptions().get(i).getText();
				actbatchDropdownList.add(options);
			}
			
			ArrayList<String>  expbatchDropdownList= new ArrayList<String>(); 
			
			expbatchDropdownList.add("Manual");
			expbatchDropdownList.add("FIFO on Manufacturing date");
			expbatchDropdownList.add("FIFO on Expiry date");
			expbatchDropdownList.add("FIFO on Batch Rate");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsPickDropDown));
			
			ArrayList<String>  actbinDropdownList= new ArrayList<String>();
			
			Select binSelect=new Select(binsPickDropDown);
			
			int binCount=binSelect.getOptions().size();
			
			for(int i=0;i<binCount;i++)
			{
				String options=binSelect.getOptions().get(i).getText();
				actbinDropdownList.add(options);
			}
			
			ArrayList<String>  expbinDropdownList= new ArrayList<String>(); 
			
			expbinDropdownList.add("Manual");
			expbinDropdownList.add("Auto");
				
			
			System.out.println("CostOfIssueAccountTxt                                   : "+actcostOfIssueAccountTxt                                   +" Value Expected : "+expcostOfIssueAccountTxt);
			System.out.println("SalesPurchaseACTxt                                      : "+actsalesPurchaseACTxt                                      +" Value Expected : "+expsalesPurchaseACTxt);
			System.out.println("ItemRateDropdown                                        : "+actitemRateDropdown                                        +" Value Expected : "+expitemRateDropdown);
			//System.out.println("ReservationTypeDropdown                                 : "+actreservationTypeDropdown                                 +" Value Expected : "+expreservationTypeDropdown);
			System.out.println("ApplyrateSchemesChkBox                                  : "+actapplyrateSchemesChkBox                                  +" Value Expected : "+expapplyrateSchemesChkBox);
			System.out.println("PickFreeSchemesQtyAfterEveryLineChkBox                  : "+actpickFreeSchemesQtyAfterEveryLineChkBox                  +" Value Expected : "+exppickFreeSchemesQtyAfterEveryLineChkBox);
			System.out.println("DisplayUnitNamebeforeEveryQtyChkBox                     : "+actdisplayUnitNamebeforeEveryQtyChkBox                     +" Value Expected : "+expdisplayUnitNamebeforeEveryQtyChkBox);
			System.out.println("DontInputItemsChkBox                                    : "+actdontInputItemsChkBox                                    +" Value Expected : "+expdontInputItemsChkBox);
			System.out.println("DontInputQtyAndRateChkBox                               : "+actdontInputQtyAndRateChkBox                               +" Value Expected : "+expdontInputQtyAndRateChkBox);
			System.out.println("DontPopupBinSelectionAfterQuantityChkBox                : "+actdontPopupBinSelectionAfterQuantityChkBox                +" Value Expected : "+expdontPopupBinSelectionAfterQuantityChkBox);
			System.out.println("HideRateAndGrossChkBox                                  : "+acthideRateAndGrossChkBox                                  +" Value Expected : "+exphideRateAndGrossChkBox);
			System.out.println("HideRateAndGrossfromNormalUsersChkBox                   : "+acthideRateAndGrossfromNormalUsersChkBox                   +" Value Expected : "+exphideRateAndGrossfromNormalUsersChkBox);
			System.out.println("HirePurchaseBehaviourChkBox                             : "+acthirePurchaseBehaviourChkBox                             +" Value Expected : "+exphirePurchaseBehaviourChkBox);
			System.out.println("InputAsCounterBillChkBox                                : "+actinputAsCounterBillChkBox                                +" Value Expected : "+expinputAsCounterBillChkBox);
			System.out.println("InputBinLocationChkBox                                  : "+actinputBinLocationChkBox                                  +" Value Expected : "+expinputBinLocationChkBox);
			System.out.println("InputItemByAttributeChkBox                              : "+actinputItemByAttributeChkBox                              +" Value Expected : "+expinputItemByAttributeChkBox);
			System.out.println("QcrequiredforThisDocChkBox                              : "+actqcrequiredforThisDocChkBox                              +" Value Expected : "+expqcrequiredforThisDocChkBox);
			System.out.println("RecalculateTheRateInReceiptFromProductionOnSavingChkBox : "+actrecalculateTheRateInReceiptFromProductionOnSavingChkBox +" Value Expected : "+exprecalculateTheRateInReceiptFromProductionOnSavingChkBox);
			System.out.println("RestricttheitemFromBeingRepeatedInEntryChkBox           : "+actrestricttheitemFromBeingRepeatedInEntryChkBox           +" Value Expected : "+exprestricttheitemFromBeingRepeatedInEntryChkBox);
			System.out.println("ShowVendorAssignedItemsChkBox                           : "+actshowVendorAssignedItemsChkBox                           +" Value Expected : "+expshowVendorAssignedItemsChkBox);
			System.out.println("InputBarcodeChkBox                                      : "+actinputBarcodeChkBox                                      +" Value Expected : "+expinputBarcodeChkBox);
			System.out.println("ShowHeldStockChkBox                                     : "+actshowHeldStockChkBox                                     +" Value Expected : "+expshowHeldStockChkBox);
			System.out.println("CrossDocChkBox                                          : "+actcrossDocChkBox                                          +" Value Expected : "+expcrossDocChkBox);
			System.out.println("AllocateStockChkBox                                     : "+actallocateStockChkBox                                     +" Value Expected : "+expallocateStockChkBox);
			System.out.println("EnableRFIDChkBox                                        : "+actenableRFIDChkBox                                        +" Value Expected : "+expenableRFIDChkBox);
			System.out.println("EnableQCChkBox                                          : "+actenableQCChkBox                                          +" Value Expected : "+expenableQCChkBox);
			System.out.println("DontmakeThertaeZeroWhenItemisChangedChkBox              : "+actdontmakeThertaeZeroWhenItemisChangedChkBox              +" Value Expected : "+expdontmakeThertaeZeroWhenItemisChangedChkBox);
			System.out.println("BatchPickDropdown                                       : "+actbatchPickDropdown                                       +" Value Expected : "+expbatchPickDropdown);
			System.out.println("AllowExpiredbatchesToBeSelectedChkBox                   : "+actallowExpiredbatchesToBeSelectedChkBox                   +" Value Expected : "+expallowExpiredbatchesToBeSelectedChkBox);
			System.out.println("LoadbatchesbeforeQuantityChkBox                         : "+actloadbatchesbeforeQuantityChkBox                         +" Value Expected : "+exploadbatchesbeforeQuantityChkBox);
			System.out.println("ReserveStockByBatchesChkBox                             : "+actreserveStockByBatchesChkBox                             +" Value Expected : "+expreserveStockByBatchesChkBox);
			System.out.println("InputBatchEvenIfStockIsnotUpdatedChkBox                 : "+actinputBatchEvenIfStockIsnotUpdatedChkBox                 +" Value Expected : "+expinputBatchEvenIfStockIsnotUpdatedChkBox);
			System.out.println("NotApplicbleChkBox                                      : "+actnotApplicbleChkBox                                      +" Value Expected : "+expnotApplicbleChkBox);
			System.out.println("FromTemplateChkBox                                      : "+actfromTemplateChkBox                                      +" Value Expected : "+expfromTemplateChkBox);
			System.out.println("FromFieldChkBox                                         : "+actfromFieldChkBox                                         +" Value Expected : "+expfromFieldChkBox);
			System.out.println("BinsPickDropDown                                        : "+actbinsPickDropDown                                        +" Value Expected : "+expbinsPickDropDown);
			
			System.out.println("ItemRateDropdownList                                    : "+actitemRateDropdownList                                    +" Value Expected : "+expitemRateDropdownList);
			System.out.println("BatchDropdownList                                       : "+actbatchDropdownList                                       +" Value Expected : "+expbatchDropdownList);
			System.out.println("BinDropdownList                                         : "+actbinDropdownList                                         +" Value Expected : "+expbinDropdownList);
			
			
			
			boolean actMethod=actcostOfIssueAccountTxt==expcostOfIssueAccountTxt && actsalesPurchaseACTxt==expsalesPurchaseACTxt && actitemRateDropdown==expitemRateDropdown
			        && actapplyrateSchemesChkBox==expapplyrateSchemesChkBox
					&& actpickFreeSchemesQtyAfterEveryLineChkBox==exppickFreeSchemesQtyAfterEveryLineChkBox && actdisplayUnitNamebeforeEveryQtyChkBox==expdisplayUnitNamebeforeEveryQtyChkBox
					&& actdontInputItemsChkBox==expdontInputItemsChkBox && actdontInputQtyAndRateChkBox==expdontInputQtyAndRateChkBox 
					&& actdontPopupBinSelectionAfterQuantityChkBox==expdontPopupBinSelectionAfterQuantityChkBox && acthideRateAndGrossChkBox==exphideRateAndGrossChkBox
					&& acthideRateAndGrossfromNormalUsersChkBox==exphideRateAndGrossfromNormalUsersChkBox && acthirePurchaseBehaviourChkBox==exphirePurchaseBehaviourChkBox
					&& actinputAsCounterBillChkBox==expinputAsCounterBillChkBox && actinputBinLocationChkBox==expinputBinLocationChkBox
					&& actinputItemByAttributeChkBox==expinputItemByAttributeChkBox && actqcrequiredforThisDocChkBox==expqcrequiredforThisDocChkBox
					&& actrecalculateTheRateInReceiptFromProductionOnSavingChkBox==exprecalculateTheRateInReceiptFromProductionOnSavingChkBox
					&& actrestricttheitemFromBeingRepeatedInEntryChkBox==exprestricttheitemFromBeingRepeatedInEntryChkBox && actshowVendorAssignedItemsChkBox==expshowVendorAssignedItemsChkBox
					&& actinputBarcodeChkBox==expinputBarcodeChkBox && actshowHeldStockChkBox==expshowHeldStockChkBox && actcrossDocChkBox==expcrossDocChkBox
					&& actallocateStockChkBox==expallocateStockChkBox && actenableRFIDChkBox==expenableRFIDChkBox && actenableQCChkBox==expenableQCChkBox
					&& actdontmakeThertaeZeroWhenItemisChangedChkBox==expdontmakeThertaeZeroWhenItemisChangedChkBox && actbatchPickDropdown==expbatchPickDropdown
					&& actallowExpiredbatchesToBeSelectedChkBox==expallowExpiredbatchesToBeSelectedChkBox && actloadbatchesbeforeQuantityChkBox==exploadbatchesbeforeQuantityChkBox
					&& actreserveStockByBatchesChkBox==expreserveStockByBatchesChkBox && actinputBatchEvenIfStockIsnotUpdatedChkBox==expinputBatchEvenIfStockIsnotUpdatedChkBox
					&& actnotApplicbleChkBox==expnotApplicbleChkBox && actfromTemplateChkBox==expfromTemplateChkBox && actfromFieldChkBox==expfromFieldChkBox
					&& actbinsPickDropDown==expbinsPickDropDown
					
			        && actitemRateDropdownList.equals(expitemRateDropdownList) && actbatchDropdownList.equals(expbatchDropdownList) 
			        && actbinDropdownList.equals(expbinDropdownList);
			
			
			String actResult=Boolean.toString(actMethod);
			String expResult= excelReader.getCellData(xlSheetName, 300, 7);
			excelReader.setCellData(xlfile, xlSheetName, 300, 8, actResult);
			
			if(actResult.equalsIgnoreCase(expResult))
			{
				excelReader.setCellData(xlfile, xlSheetName, 299, 9, resPass);
				System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 299, 9, resFail);
				System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
				return false;	
			
	 }
	    }
 
	    //Edit Layout
		  
	   
		
		@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[4]/div[1]/div[2]/div[2]/div[2]/table/tbody/tr/td[1]/span[2]")
		public static WebElement  editscreenDeleteBtn; 
		    
       
	    
	    public boolean checkCreatedVoucherEditLayoutInDocumentCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	    {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
			Thread.sleep(4000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(4000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(editLayoutHeaderTab));
			
			boolean actEditLayoutHeaderIsDispalyed=editLayoutHeaderTab.isDisplayed();
			boolean expEditLayoutHeaderIsDisplayed=true;
			
			boolean actEditLayoutBodyIsDispalyed=editLayoutBodyTab.isDisplayed();
			boolean expEditLayoutBodyIsDisplayed=true;
			
			boolean actEditLayoutAddBtnIsDispalyed=editLayoutAddBtn.isDisplayed();
			boolean expEditLayoutAddBtnIsDisplayed=true;
			
			boolean actEditLayoutLoadBtnIsDispalyed=editLayoutLoadBtn.isDisplayed();
			boolean expEditLayoutLoadBtnDisplayed=true;
			
			boolean actEditLayoutCustomizeBtnIsDispalyed=editLayoutCustomizeBtn.isDisplayed();
			boolean expEditLayoutCustomizeBtnIsDisplayed=true;
			
			
			String actdata,expdata;
			 Thread.sleep(2000);
			actdata=editLayoutHeader1stRowCaption.getText();
			expdata= excelReader.getCellData(xlSheetName, 302, 7);
			excelReader.setCellData(xlfile, xlSheetName, 302, 8, actdata);
	
			
			System.out.println("Edit Layout Header Is Display Value Actual    : " + actEditLayoutHeaderIsDispalyed       + " Value Expected : " + expEditLayoutHeaderIsDisplayed);
			System.out.println("Edit Layout Body Is Display Value Actual      : " + actEditLayoutBodyIsDispalyed         + " Value Expected : " + expEditLayoutBodyIsDisplayed);
            
			System.out.println("Edit Layout Add Is Display Value Actual       : " + actEditLayoutAddBtnIsDispalyed       + " Value Expected : " + expEditLayoutAddBtnIsDisplayed);
			System.out.println("Edit Layout Load Is Display Value Actual      : " + actEditLayoutLoadBtnIsDispalyed      + " Value Expected : " + expEditLayoutLoadBtnDisplayed);
            
			System.out.println("Edit Layout Customize Is Display Value Actual : " + actEditLayoutCustomizeBtnIsDispalyed + " Value Expected : " + expEditLayoutCustomizeBtnIsDisplayed);
			
			System.out.println("Narration Filed Is Displayed Value Actual     : " + actdata                              + "Value Expected : " + expdata);
					
			
			boolean actMethod=actEditLayoutHeaderIsDispalyed==expEditLayoutHeaderIsDisplayed && actEditLayoutBodyIsDispalyed==expEditLayoutBodyIsDisplayed 
					&& actEditLayoutAddBtnIsDispalyed==expEditLayoutAddBtnIsDisplayed && actEditLayoutLoadBtnIsDispalyed==expEditLayoutLoadBtnDisplayed
					&& actEditLayoutCustomizeBtnIsDispalyed==expEditLayoutCustomizeBtnIsDisplayed && actdata.equalsIgnoreCase(expdata);
			
			String actResult=Boolean.toString(actMethod);
			String expResult= excelReader.getCellData(xlSheetName, 303, 7);
			excelReader.setCellData(xlfile, xlSheetName, 303, 8, actResult);
					
			
			if(actResult.equalsIgnoreCase(expResult))
			{
				System.out.println("Test Pass : Header Tab is Displayed in Edit layout");
				excelReader.setCellData(xlfile, xlSheetName, 301, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Header Tab is Not Displayed in Edit layout");
				excelReader.setCellData(xlfile, xlSheetName, 301, 9, resFail);
				return false;
	
		}
	    }
			

                
	    @FindBy(xpath="//a[@id='771']")
		public static WebElement  pvVATView;

		  public boolean checkDocumentCustomizationReopenToAddFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvVATView));
				
				boolean CreatedVoucher=pvVATView.isDisplayed();
				
				String actCreatedVoucher=Boolean.toString(CreatedVoucher);
				
				String expCreatedVoucher= excelReader.getCellData(xlSheetName, 305, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 305, 8, actCreatedVoucher);
				
				
				System.out.println("Edit Layout Edit Is Display Value Actual      : " + actCreatedVoucher         + " Value Expected : " + expCreatedVoucher);
				
				pvVATView.click();			
				
				Thread.sleep(2000);
				
				
				if(actCreatedVoucher.equalsIgnoreCase(expCreatedVoucher))
				{
					System.out.println("Test Pass : Documentation Customization PV VAT View  is Available");
					excelReader.setCellData(xlfile, xlSheetName, 304, 9, resPass);
					return true;

				}
				else
				{
					System.out.println("Test Fail : Documentation Customization PV VAT is Not Available");
					excelReader.setCellData(xlfile, xlSheetName, 304, 9, resFail);
					return false;
				}
				
				}
				 catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 304, 10, e.getMessage());
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					  return false;
				  }
			}
			


			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div/label/span")
			public static List<WebElement>  editScreenLoadFieldTxtList;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div/label/input")
			public static List<WebElement>  editScreenLoadFieldchkboxList;
			
			
			
		  
		  

		  public boolean checkDeleteOptionInEditScreenTabInDocumentCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			System.out.println("**************  checkCreatedVoucherMiscellaneousTabInDocumentCustoimization Method Executes.............  *****************");
			
			try
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
							
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
				editScreenTab.click();
			

				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
				editScreenBodyTab.click();
			
				
				int editScreenbodyCaptionCount = editScreenbodyCaption.size();
	    		
	    		System.err.println("editScreenbodyCaption : "+editScreenbodyCaptionCount);
	    		
	    		for(int i=0;i<editScreenbodyCaptionCount;i++)
	    		{
	    			String data = editScreenbodyCaption.get(i).getText();
	    			
	    			if(data.equalsIgnoreCase("RD"))
	    			{
	    				editScreenbodyDeleteBtn.get(i).click();
	    				
	    				break;
	    			}
	    		}	
	    		
	    		
	    		
				boolean IsAlertDisplayOnClickOnDelete=getIsAlertPresent();
				
				String actIsAlertDisplayOnClickOnDelete=Boolean.toString(IsAlertDisplayOnClickOnDelete);
				
				String expIsAlertDisplayOnClickOnDelete=excelReader.getCellData(xlSheetName, 307, 7);
				excelReader.setCellData(xlfile, xlSheetName, 307, 8, actIsAlertDisplayOnClickOnDelete);
				
				System.out.println("Edit Layout Header Is Display Value Actual    : " + actIsAlertDisplayOnClickOnDelete       + " Value Expected : " + expIsAlertDisplayOnClickOnDelete);
				
				String actGetAlertMsg=getAlert().getText();
				String expGetAlertMsg=excelReader.getCellData(xlSheetName, 308, 7);
				excelReader.setCellData(xlfile, xlSheetName, 308, 8, actIsAlertDisplayOnClickOnDelete);
				
				System.out.println("Edit Layout Body Is Display Value Actual      : " + actGetAlertMsg         + " Value Expected : " + expGetAlertMsg);
	            
				
				getAlert().accept();
				
				
				if (errorMessage.isDisplayed()==true) 
	    		{
	    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
	    			errorMessageCloseBtn.click();
				}
				
				
				 Thread.sleep(5000);
				
				/*getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(editScreenBody1stRowDeleteBtn));
				editScreenBody1stRowDeleteBtn.click();
				
				boolean IsAlertDisplayOnClickOnDelete1=getIsAlertPresent();
				
				String actIsAlertDisplayOnClickOnDelete1=Boolean.toString(IsAlertDisplayOnClickOnDelete1);
				
				String expIsAlertDisplayOnClickOnDelete1=excelReader.getCellData(xlSheetName, 307, 7);
				excelReader.setCellData(xlfile, xlSheetName, 307, 8, actIsAlertDisplayOnClickOnDelete);
				
				System.out.println("Edit Layout Header Is Display Value Actual    : " + actIsAlertDisplayOnClickOnDelete       + " Value Expected : " + expIsAlertDisplayOnClickOnDelete);
				
				String actGetAlertMsg1=getAlert().getText();
				String expGetAlertMsg1=excelReader.getCellData(xlSheetName, 308, 7);
				excelReader.setCellData(xlfile, xlSheetName, 308, 8, actIsAlertDisplayOnClickOnDelete);
				
				System.out.println("Edit Layout Body Is Display Value Actual      : " + actGetAlertMsg         + " Value Expected : " + expGetAlertMsg);
	            
				
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessageCloseBtnINDC));
				errorMessageCloseBtnINDC.click();*/
				
				 
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
	    		editScreenLoadFieldsBtn.click();
	    		
	    		Thread.sleep(2000);
	    		
	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
	    		editScreenLoadFieldsDropdown.click();
	    	
	    		Thread.sleep(2000);
	    		
	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
	    		Select editLayoutLoadFieldsDropdownSelect =new Select(editScreenLoadFieldsDropdown);
	    		
	    		
	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
	    		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoices");
	    		
    
	    		int editScreenLoadFieldTxtListCount = editScreenLoadFieldTxtList.size();
	    		
	    		System.err.println("editScreenLoadFieldTxtListCount : "+editScreenLoadFieldTxtListCount);
	    		
	    		for(int i=0;i<editScreenLoadFieldTxtListCount;i++)
	    		{
	    			String data = editScreenLoadFieldTxtList.get(i).getText();
	    			
	    			if(data.equalsIgnoreCase("Avg Rate"))
	    			{
	    				editScreenLoadFieldchkboxList.get(i).click();
	    				
	    				break;
	    			}
	    		}	
	    		
	    		

	    		int editScreenLoadFieldTxtListCount1 = editScreenLoadFieldTxtList.size();
	    		
	    		System.err.println("editScreenLoadFieldTxtListCount1 : "+editScreenLoadFieldTxtListCount);
	    		
	    		for(int i=0;i<editScreenLoadFieldTxtListCount1;i++)
	    		{
	    			String data = editScreenLoadFieldTxtList.get(i).getText();
	    			
	    			if(data.equalsIgnoreCase("Avg Rate(O)"))
	    			{
	    				editScreenLoadFieldchkboxList.get(i).click();
	    				
	    				break;
	    			}
	    		}	
	    		
	    		 Thread.sleep(2000);
	    		 
	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLayoutokBtn));
	    		editScreenLayoutokBtn.click();

	  			
	    		Thread.sleep(3000);
	    		
	    		
	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBehaviourDropdown));
				editScreenBehaviourDropdown.click();
				
				Select s= new Select(editScreenBehaviourDropdown);
				s.selectByVisibleText("Rate");
			
				editScreenBehaviourDropdown.click();
	    		
	    		Thread.sleep(5000);
	    		
	    		
	    		
	  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
	  			updateBtn.click();
	  			
	  			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				
				
				
				if(actIsAlertDisplayOnClickOnDelete.equalsIgnoreCase(expIsAlertDisplayOnClickOnDelete) && actGetAlertMsg.equalsIgnoreCase(expGetAlertMsg))
				{
					
					System.out.println("Test Pass : Edit Screen Options Are Available as Expected");
					excelReader.setCellData(xlfile, xlSheetName, 306, 9, resPass);
					return  true;
				}
				else
				{
					System.out.println("Test Fail : Edit Screen Options Are Not Available");
					excelReader.setCellData(xlfile, xlSheetName, 306, 9, resFail);
					return  false;
				}
		    }
			catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 198, 10, e.getMessage());
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			  }
		  }		

		   
		
		  @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_tabs']/li[3]/a")
		  public static WebElement  editScreenRulesTab; 
		  
		 
		  public boolean checkEditOptionInEditScreenTabInDocumentCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			System.out.println("**************  checkCreatedVoucherMiscellaneousTabInDocumentCustoimization Method Executes.............  *****************");
			
			try
			{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody2ndRowEditBtn));
				editScreenBody2ndRowEditBtn.click();
				
				Thread.sleep(2000);
				
			   if (getIsAlertPresent()==true) 
			    {
					getAlert().accept();
				}
				    
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(editScreenFieldDetailsTab));				
						
				boolean acteditscreenfielddetailstab         = editScreenFieldDetailsTab.isDisplayed();
			    boolean acteditscreenfieldpropertiestab      = editScreenPropertiesTab.isDisplayed();
			    boolean acteditscreenrulestab                = editScreenRulesTab.isDisplayed();
			    boolean acteditscreenfieldexternalmodulestab = editScreenExternalModulesTab.isDisplayed();
			    
			    boolean expeditscreenfielddetailstab         = true;
			    boolean expeditscreenfieldpropertiestab      = true;
			    boolean expeditscreenrulestab                = true;
			    boolean expeditscreenfieldexternalmodulestab = true;
				
			    System.out.println("Edit Layout Body Is Display Value Actual      : " + acteditscreenfielddetailstab         + " Value Expected : " + expeditscreenfielddetailstab);
			    System.out.println("Edit Layout Body Is Display Value Actual      : " + acteditscreenfieldpropertiestab         + " Value Expected : " + expeditscreenfieldpropertiestab);
			    System.out.println("Edit Layout Body Is Display Value Actual      : " + acteditscreenfieldpropertiestab         + " Value Expected : " + expeditscreenrulestab);
			    System.out.println("Edit Layout Body Is Display Value Actual      : " + acteditscreenfieldexternalmodulestab         + " Value Expected : " + expeditscreenfieldexternalmodulestab);
			    
					    
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
				editScreenCaptionTxt.click();
				
				String actdata=editScreenCaptionTxt.getAttribute("value");
				String expdata= excelReader.getCellData(xlSheetName, 310, 7);
				excelReader.setCellData(xlfile, xlSheetName, 310, 8, actdata);
				
				  
				System.out.println(" Field Caption : "+actdata +" Value Expected : "+expdata);
				  
				if(actdata.equalsIgnoreCase(expdata)  && acteditscreenfielddetailstab==expeditscreenfielddetailstab && 
				     acteditscreenfieldpropertiestab==expeditscreenfieldpropertiestab && acteditscreenrulestab==expeditscreenrulestab && 
					 acteditscreenfieldexternalmodulestab==expeditscreenfieldexternalmodulestab)
				{
						System.out.println("Test Pass : Saved Data is able to Edit");
						excelReader.setCellData(xlfile, xlSheetName, 309, 9, resPass);
						return true;
				}
				else
				{
						System.out.println("Test Fail : Saved Data is NOT-able to Edit");
						excelReader.setCellData(xlfile, xlSheetName, 309, 9, resFail);
						return false;
				}
				}
			
			catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 309, 10, e.getMessage());
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			  }
		 }		

			
          
                
                
                
			
		  		    
		    //Edit Screen web elements
		    
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[1]/label/span")
		  	public static WebElement editscreenPropertiesAuditTrail;  
		      
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[2]/label/span")
		  	public static WebElement editscreenPropertiesCantExport;  
		      
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[3]/label/span")
		  	public static WebElement editScreenPropertiesCantImport;  
		      
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[4]/label/span")
		  	public static WebElement editScreenPropertiesHidden;  

		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[5]/label/span")
		  	public static WebElement editScreenPropertiesMandatory;  

		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[6]/label/span")
		  	public static WebElement editScreenPropertiesNotAvblForReports;  
		    
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[7]/label/span")
		  	public static WebElement editScreenPropertiesReadOnly;  
		    
		    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[7]/label/input")
		  	public static WebElement editScreenPropertiesReadOnlySelected;  
		    
  

			public boolean 	checkPropertiesTabOptionsinEditScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{	
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutPropertiesTab));
				editLayoutPropertiesTab.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(editscreenPropertiesAuditTrail));
				
				
			    boolean acteditscreenPropertiesAuditTrail=editscreenPropertiesAuditTrail.isDisplayed();
				boolean acteditscreenPropertiesCantExport=editscreenPropertiesCantExport.isDisplayed();
				boolean acteditScreenPropertiesCantImport=editScreenPropertiesCantImport.isDisplayed();
				boolean acteditScreenPropertiesHidden=editScreenPropertiesHidden.isDisplayed();
				boolean acteditScreenPropertiesMandatory=editScreenPropertiesMandatory.isDisplayed();
				boolean acteditScreenPropertiesNotAvblForReports=editScreenPropertiesNotAvblForReports.isDisplayed();
				
				
				
				boolean expeditscreenPropertiesAuditTrail=true;
				boolean expeditscreenPropertiesCantExport=true;
				boolean expeditScreenPropertiesCantImport=true;
				boolean expeditScreenPropertiesHidden=true;
				boolean expeditScreenPropertiesMandatory=true;
				boolean expeditScreenPropertiesNotAvblForReports=true;
				
				boolean actMethod=acteditscreenPropertiesAuditTrail==expeditscreenPropertiesAuditTrail && acteditscreenPropertiesCantExport==expeditscreenPropertiesCantExport && 
						            acteditScreenPropertiesCantImport==expeditScreenPropertiesCantImport && acteditScreenPropertiesHidden==expeditScreenPropertiesHidden &&
						            acteditScreenPropertiesMandatory==expeditScreenPropertiesMandatory && acteditScreenPropertiesNotAvblForReports==expeditScreenPropertiesNotAvblForReports;
				
				String actResult=Boolean.toString(actMethod);
				String expResult= excelReader.getCellData(xlSheetName, 312, 7);
				 excelReader.setCellData(xlfile, xlSheetName, 312, 8, actResult);
				
				if(actResult.equalsIgnoreCase(expResult))
				{
					System.out.println("Test pass : Properties Tab Fields Are As Expected");
					excelReader.setCellData(xlfile, xlSheetName, 311, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Properties Tab Fields Are Not As Expected");
					excelReader.setCellData(xlfile, xlSheetName, 311, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 311, 10, e.getMessage());
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					  return false;
				  }
			}
			

			
		 
			
			public boolean checkPropertiesOptionHiddenAndClickOnApplyInEditScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
				try
				{
				Thread.sleep(3000);			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesHidden));
				editScreenPropertiesHidden.click();
				
				Thread.sleep(3000);	
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
	            editScreenFieldOkBtn.click();
				
	            
	            
	            String expMessageClickOnApply = excelReader.getCellData(xlSheetName, 314, 7);
	   		 
		        String actMessageClickOnApply = checkValidationMessage(expMessageClickOnApply);
		     	
		     	excelReader.setCellData(xlfile, xlSheetName, 314, 8, actMessageClickOnApply);

	           
				 if(actMessageClickOnApply.equalsIgnoreCase(actMessageClickOnApply)) 
				 {
					System.out.println("Test Pass : Data Saved In Edit Screeen Field Details");
					excelReader.setCellData(xlfile, xlSheetName, 313, 9, resPass);
					
					return true;
				 }
				 else
				 {
					System.out.println("Test Fail : Data NOT Saved In Edit Screeen Field Details");
					excelReader.setCellData(xlfile, xlSheetName, 313, 9, resFail);
					
					return false;
					
				 }
				}
				catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 313, 10, e.getMessage());
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					  return false;
				  }
			}
				
			
			
			public boolean checkFooterTabOptionsEditScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					
					
				Thread.sleep(3000);	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
				editScreenFooterTab.click();
				
				Thread.sleep(2000);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editscreenDeleteBtn));
				editscreenDeleteBtn.click();
				
				boolean IsAlertDisplayOnClickOnDelete=getIsAlertPresent();
				
				String actIsAlertDisplayOnClickOnDelete=Boolean.toString(IsAlertDisplayOnClickOnDelete);
				String  expIsAlertDisplayOnClickOnDelete= excelReader.getCellData(xlSheetName, 316, 7);
				excelReader.setCellData(xlfile, xlSheetName, 316, 8, actIsAlertDisplayOnClickOnDelete);
				
				
				
				System.out.println("editScreenFooterTab Is Display Value Actual    : " + actIsAlertDisplayOnClickOnDelete       + " Value Expected : " + expIsAlertDisplayOnClickOnDelete);
				
				String actGetAlertMsg=getAlert().getText();
				String expGetAlertMsg= excelReader.getCellData(xlSheetName, 317, 7);
				excelReader.setCellData(xlfile, xlSheetName, 317, 8, actGetAlertMsg);
				
				System.out.println("Edit Layout Body Is Display Value Actual      : " + actGetAlertMsg         + " Value Expected : " + expGetAlertMsg);
	           	
				getAlert().accept();
				
			
				if(actIsAlertDisplayOnClickOnDelete.equalsIgnoreCase(expIsAlertDisplayOnClickOnDelete) && actGetAlertMsg.equalsIgnoreCase(expGetAlertMsg))
				{
					
					System.out.println("Test Pass : Edit Screen Options Are Available as Expected");
					excelReader.setCellData(xlfile, xlSheetName, 315, 9, resPass);
					return  true;
				}
				else
				{
					System.out.println("Test Fail : Edit Screen Options Are Not Available");
					excelReader.setCellData(xlfile, xlSheetName, 315, 9, resFail);
					return  false;
				}	
			}
			catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 315, 10, e.getMessage());
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			  }
			}

			
			
			public boolean 	checkAddFieldOptionsinFooterTabEditScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
				try
				{
					
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
				editScreenTab.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
				editScreenaddBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(editScreenCaptionTxt));
				
				boolean acteditScreenCaptionTxt=editScreenCaptionTxt.isDisplayed();
				boolean acteditScreenFieldDetailsTab=editScreenFieldDetailsTab.isDisplayed();
				boolean acteditScreenPropertiesTab=editScreenPropertiesTab.isDisplayed();
				boolean acteditScreenExternalModulesTab=editScreenExternalModulesTab.isDisplayed();
				boolean acteditScreenFieldOkBtn=editScreenFieldOkBtn.isDisplayed();
				boolean acteditScreenCloseBtnINDCInDc=editScreencloseBtnInDc.isDisplayed();
				
				
				boolean expeditScreenCaptionTxt=true;
				boolean expeditScreenFieldDetailsTab=true;
				boolean expeditScreenPropertiesTab=true;
				boolean expeditScreenExternalModulesTab=true;
				boolean expeditScreenFieldOkBtn=true;
				boolean expeditScreenCloseBtnINDCInDc=true;
				
				boolean actMethod= acteditScreenCaptionTxt==expeditScreenCaptionTxt && acteditScreenFieldDetailsTab==expeditScreenFieldDetailsTab &&  
						acteditScreenPropertiesTab==expeditScreenPropertiesTab && acteditScreenExternalModulesTab==expeditScreenExternalModulesTab && 
						acteditScreenFieldOkBtn==expeditScreenFieldOkBtn && acteditScreenCloseBtnINDCInDc==expeditScreenCloseBtnINDCInDc;
				
	            String actResult=Boolean.toString(actMethod);
	            String expResult=excelReader.getCellData(xlSheetName, 319, 7);
	  		    excelReader.setCellData(xlfile, xlSheetName, 319, 8, actResult);


				if(actResult.equalsIgnoreCase(expResult))
				{
					System.out.println("Test Pass : Add Field Options Are Displayed ");
					excelReader.setCellData(xlfile, xlSheetName, 318, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test fail : Add Field Options Are Not Displayed ");
					excelReader.setCellData(xlfile, xlSheetName, 318, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 318, 10, e.getMessage());
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					  return false;
				  }
			}
			
			
			
			public boolean 	checkinputingDatainAddFieldsinFooterTabEditScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
		        Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
				editScreenCaptionTxt.click();
				
				editScreenCaptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 321, 6));
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
				editScreenPreloadTxt.click();
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preloadformulaTxt));
				preloadformulaTxt.click();
				
				preloadformulaTxt.sendKeys(excelReader.getCellData(xlSheetName, 322, 6));
				preloadFormulaokBtn.click();
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
				EditScreenAddToStockDropDown.click();
						
				Select s1=new Select(EditScreenAddToStockDropDown);
				s1.selectByVisibleText(excelReader.getCellData(xlSheetName, 323, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
				editScreenAddToNetDropdown.click();
				
				Select s2=new Select(editScreenAddToNetDropdown);
				s2.selectByVisibleText(excelReader.getCellData(xlSheetName, 324, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
				editScreenFieldOkBtn.click();

	     		
					
	     		String expMessageClickOnApply = excelReader.getCellData(xlSheetName, 325, 7);
	        		 
	  	        String actMessageClickOnApply = checkValidationMessage(expMessageClickOnApply);
	  	     	
	  	     	excelReader.setCellData(xlfile, xlSheetName, 325, 8, actMessageClickOnApply);
	     		
	  	     	
	  	     	Thread.sleep(2000);
	  	     	
	  	     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
				CloseBtnINDC.click();
	  	     	
				 if(actMessageClickOnApply.equalsIgnoreCase(expMessageClickOnApply)) 
				 {
					System.out.println("Test Pass : Data Saved In Edit Screeen Field Details");
					excelReader.setCellData(xlfile, xlSheetName, 320, 9, resPass);
					return true;
				 }
				 else
				 {
					System.out.println("Test Fail : Data NOT Saved In Edit Screeen Field Details");
					excelReader.setCellData(xlfile, xlSheetName, 320, 9, resFail);
					return false;
					
				 }
				}
				catch (Exception e) 
				  {
					  String exception =e.getMessage();
					  excelReader.setExceptionInExcel(xlfile, xlSheetName, 320, 10, e.getMessage());
					  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					  return false;
				  }
			}
			

		

		public boolean checkDocumentCustomizationReopenToAddFieldsInEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			 try
			 {
							
				
		/*		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDCInDocumentCustomization));
				CloseBtnINDCInDocumentCustomization.click();
		*/		
				
				
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
				settingsmenuBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
				ConfigureTransactionBtn.click();
					
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
				documentCustomization45Btn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(pvVATView));
				
				boolean CreatedVoucher=pvVATView.isDisplayed();
				
				String actCreatedVoucher=Boolean.toString(CreatedVoucher);
				String expCreatedVoucher=excelReader.getCellData(xlSheetName, 327, 7);
				 excelReader.setCellData(xlfile, xlSheetName, 327, 8, actCreatedVoucher);
				
				System.out.println("Edit Layout Edit Is Display Value Actual      : " + actCreatedVoucher         + " Value Expected : " + expCreatedVoucher);
	        
				pvVATView.click();
				
			
				if(actCreatedVoucher.equalsIgnoreCase(expCreatedVoucher))
				{
					System.out.println("Test Pass : Documentation Customization Tab is Available");
					excelReader.setCellData(xlfile, xlSheetName, 326, 9, resPass);
					return true;

				}
				else
				{
					System.out.println("Test Fail : Documentation Customization Tab is Not Available");
					excelReader.setCellData(xlfile, xlSheetName, 326, 9, resFail);
					return false;
				}
			 }
			 catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 326, 10, e.getMessage());
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			  }
		
			}
			
		
		
		    @FindBy(xpath="//table[@id='editLayout_headerTable']//tbody//tr[1]//td//span[1]")
			public static WebElement editLayouEditBtn;
		   
		    
		    @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[1]/div[1]/ul/li[6]/div/span[2]")
			public static WebElement pvViewEditLayoutTab;
			 
		    
		    
		    
		    
		  public boolean checktheNarrationinHeaderTabEditLayoutinPVVATVIEW() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
				
			Thread.sleep(2000);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTabInDc));
			editLayoutTabInDc.click();
			
			String actdata,expdata;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeader1stRowCaption));
			editLayoutHeader1stRowCaption.click();
				
			Thread.sleep(3000);
			
			actdata=editLayoutHeader1stRowCaption.getText();
			expdata=excelReader.getCellData(xlSheetName, 329, 7);
			excelReader.setCellData(xlfile, xlSheetName, 329, 8, actdata);

			
			System.out.println("actdata"+actdata);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayouEditBtn));
			editLayouEditBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutFieldDetailsTab));
			
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutFieldDetailsTab));
			
			boolean acteditLayoutFieldDetailsTab					=editLayoutFieldDetailsTab.isDisplayed();
			boolean actformattingTab								=formattingTab.isDisplayed();
			boolean acteditLayoutPropertiesTab						=editLayoutPropertiesTab.isDisplayed();
			boolean acteditLayoutRulesTab							=editLayoutRulesTab.isDisplayed();
			boolean acteditlayoutExternalModulesTab					=editlayoutExternalModulesTab.isDisplayed();
			
			boolean expeditLayoutFieldDetailsTab					=true;
			boolean expformattingTab								=true;
			boolean expeditLayoutPropertiesTab						=true;
			boolean expeditLayoutRulesTab							=true;
			boolean expeditlayoutExternalModulesTab					=true;
		
			
			System.out.println("Caption As                             : " + actdata                         +" Value Expected : " + expdata);
	        System.out.println("Edit Layout Field Details Tab          : " + acteditLayoutFieldDetailsTab    +" Value Expected : " + expeditLayoutFieldDetailsTab);
	        System.out.println("formatting Tab                         : " + actformattingTab                +" Value Expected : " + expformattingTab);
	        System.out.println("edit Layout Rules Tab                  : " + acteditLayoutRulesTab           +" Value Expected : " + expeditLayoutRulesTab);
	        System.out.println("editlayoutExternalModulesTab           : " + acteditlayoutExternalModulesTab +" Value Expected : " + expeditlayoutExternalModulesTab);
	      
			
			boolean actMethod= actdata.equalsIgnoreCase(expdata)  && acteditLayoutFieldDetailsTab==expeditLayoutFieldDetailsTab && actformattingTab==expformattingTab &&  
					acteditLayoutRulesTab==expeditLayoutRulesTab && acteditlayoutExternalModulesTab==expeditlayoutExternalModulesTab;
					

			
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData(xlSheetName, 330, 7);
			excelReader.setCellData(xlfile, xlSheetName, 330, 8, actResult);
			
			if(actResult.equalsIgnoreCase(expResult))
			
			{
				System.out.println("Test Pass : Add Fields Options Are Displayed As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 328, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Add Fields Options Are Not Displayed As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 328, 9, resFail);
				return false;
			
		}
		  }
		
		

			@FindBy(xpath="//*[@id='editLayout_addFieldsPopupDiv']/div/div[1]/div/span[1]/i")
			
			public static WebElement editScreenFieldOkBtn;  
		
		public boolean checkFieldDetailsTabInputDefaultValueAndPropertiesOptionReadOnlyAndClickOnApplyInEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutDefaultValueTxt));
	    	editLayoutDefaultValueTxt.click();
			editLayoutDefaultValueTxt.sendKeys(excelReader.getCellData(xlSheetName, 332, 6));
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutPropertiesTab));
			editLayoutPropertiesTab.click();
			
			
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditTrailChkBox));
			boolean actauditTrailChkBox              = auditTrailChkBox.isDisplayed();
	 		boolean acthiddenChkbox                  = hiddenChkbox.isDisplayed();
	 		boolean actmergeFieldChkBox              = mergeFieldChkBox.isDisplayed();
	 		boolean actmandatorychkBox               = mandatorychkBox.isDisplayed();
	 		boolean actcantImportChkbox              = cantImportChkbox.isSelected();
	 		boolean actcantExportChkBox              = cantExportChkBox.isDisplayed();
	 		boolean actnotAvailableForReportsChkBox  = notAvailableForReportsChkBox.isDisplayed();
	 		boolean actreadOnlyChkBox                = readOnlyChkBox.isDisplayed();

	 		boolean expauditTrailChkBox              = true;
	 		boolean exphiddenChkbox                  = true;
	 		boolean expmergeFieldChkBox              = true;
	 		boolean expmandatorychkBox               = true;
	 		boolean expcantExportChkBox              = true;
	 		boolean expnotAvailableForReportsChkBox  = true;
	 		boolean expreadOnlyChkBox                = true;

	 		System.out.println("auditTrailChkBox Value Actual    : " + actauditTrailChkBox             +" Value Expected : " + expauditTrailChkBox);
	 		System.out.println("hiddenChkbox Value Actual        : " + acthiddenChkbox                 +" Value Expected : " + exphiddenChkbox);
	 		System.out.println("mergeFieldChkBox Value Actual    : " + actmergeFieldChkBox             +" Value Expected : " + expmergeFieldChkBox);
	 		System.out.println("mandatorychkBox Value Actual     : " + actmandatorychkBox   		   +" Value Expected : " + expmandatorychkBox);
	 		System.out.println("cantExportChkBox Value Actual    : " + actcantExportChkBox             +" Value Expected : " + expcantExportChkBox);
	 		System.out.println("notAvailableForReportsChkBox     : " + actnotAvailableForReportsChkBox +" Value Expected : " + expnotAvailableForReportsChkBox);
	 		System.out.println("readOnlyChkBox Value Actual      : " + actreadOnlyChkBox               +" Value Expected : " + expreadOnlyChkBox);

	 		
	 		Boolean displayResult=actauditTrailChkBox == expauditTrailChkBox && acthiddenChkbox == exphiddenChkbox
	 				&& actmergeFieldChkBox == expmergeFieldChkBox && actmandatorychkBox == expmandatorychkBox && 
	 				actcantExportChkBox==expcantExportChkBox && actnotAvailableForReportsChkBox==expnotAvailableForReportsChkBox && 
	 				actreadOnlyChkBox==expreadOnlyChkBox;
	 		
	 		
	 		String actDisplayResult=Boolean.toString(displayResult);
	 		String expDisplayResult=excelReader.getCellData(xlSheetName, 333, 7);
	 		
	 		excelReader.setCellData(xlfile, xlSheetName, 333, 8, actDisplayResult);
	 		
			
	 		Thread.sleep(3000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(readOnlyChkBox));
			readOnlyChkBox.click();
			
			
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
			editScreenFieldOkBtn.click();
			
			
			String expMessageClickOnApply = excelReader.getCellData(xlSheetName, 334, 7);
  		 
 	        String actMessageClickOnApply = checkValidationMessage(expMessageClickOnApply);
 	     	
 	     	excelReader.setCellData(xlfile, xlSheetName, 334, 8, actMessageClickOnApply);
    		
			
			 if(actDisplayResult.equalsIgnoreCase(expDisplayResult) && actMessageClickOnApply.equalsIgnoreCase(expMessageClickOnApply))
			 {
				System.out.println("Test Pass : Data Saved In Edit Screeen Field Details");
				excelReader.setCellData(xlfile, xlSheetName, 331, 9, resPass);
				return true;
			 }
			 else
			 {
				System.out.println("Test Fail : Data NOT Saved In Edit Screeen Field Details");
				excelReader.setCellData(xlfile, xlSheetName, 331, 9, resFail);
				return false;
				
			 }
		
		}
		
		
	  
	    
	    @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[1]/div[2]/table/tbody/tr/td[1]/span[1]")
		public static WebElement editBtnInEditLayoutBody;
		
		
	    @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[2]/div[2]/table/tbody/tr/td[1]/span[2]")
		public static WebElement deleteBtnInEditLayoutBody;
		
	    
	    @FindBy(xpath="//*[@id='editLayout_bodyrow_1 _3']")
		public static WebElement sremarksGetText;
		
	    
	    
		public boolean checkRemarksFielddBodyTabInEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			
			Thread.sleep(3000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
			editLayoutLoadFieldsBtn.click();
						
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
    		Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
			editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 335, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
			editLayoutselectAllBtn.click();

			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
			editLayoutokBtn.click();
			
			Thread.sleep(5000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			
			Thread.sleep(2000);
			
	        String actRemarks,expRemarks;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sremarksGetText));
			sremarksGetText.click();
				
			actRemarks=sremarksGetText.getText();
			expRemarks=excelReader.getCellData(xlSheetName, 336, 7);
			 excelReader.setCellData(xlfile, xlSheetName, 336, 8, actRemarks);
			
			System.out.println("actdata"+actRemarks+" Value Expected : "+expRemarks);
	
			
			
			 if(actRemarks.equalsIgnoreCase(expRemarks))
			 {
				System.out.println("Test Pass : Data Saved In Edit Screeen Field Details");
				excelReader.setCellData(xlfile, xlSheetName, 335, 9, resPass);
				return true;
			 }
			 else
			 {
				System.out.println("Test Fail : Data NOT Saved In Edit Screeen Field Details");
				excelReader.setCellData(xlfile, xlSheetName, 335, 9, resFail);
				return false;
				
			 }
			
		}
		
			
		
		 public boolean checkDeleteOptionInEditLayoutTabInDocumentCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			System.out.println("**************  checkCreatedVoucherMiscellaneousTabInDocumentCustoimization Method Executes.............  *****************");
			
			try
			{
				
				Thread.sleep(3000);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(deleteBtnInEditLayoutBody));
				deleteBtnInEditLayoutBody.click();
				
				boolean IsAlertDisplayOnClickOnDelete=getIsAlertPresent();
				
				String actIsAlertDisplayOnClickOnDelete=Boolean.toString(IsAlertDisplayOnClickOnDelete);
				String  expIsAlertDisplayOnClickOnDelete=excelReader.getCellData(xlSheetName, 338, 7);
				excelReader.setCellData(xlfile, xlSheetName, 338, 8, actIsAlertDisplayOnClickOnDelete);

				
				System.out.println("Edit Layout Header Is Display Value Actual    : " + actIsAlertDisplayOnClickOnDelete       + " Value Expected : " + expIsAlertDisplayOnClickOnDelete);
				
				String actGetAlertMsg=getAlert().getText();
				String expGetAlertMsg=excelReader.getCellData(xlSheetName, 339, 7);
				excelReader.setCellData(xlfile, xlSheetName, 339, 8, actGetAlertMsg);

				
				System.out.println("Edit Layout Body Is Display Value Actual      : " + actGetAlertMsg         + " Value Expected : " + expGetAlertMsg);
	            				
				getAlert().accept();

				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				
				
				if(actIsAlertDisplayOnClickOnDelete.equalsIgnoreCase(expIsAlertDisplayOnClickOnDelete) && actGetAlertMsg.equalsIgnoreCase(expGetAlertMsg))
				{
					
					System.out.println("Test Pass : Edit Screen Options Are Available as Expected");
					excelReader.setCellData(xlfile, xlSheetName, 337, 9, resPass);
					return  true;
				}
				else
				{
					System.out.println("Test Fail : Edit Screen Options Are Not Available");
					excelReader.setCellData(xlfile, xlSheetName, 337, 9, resFail);
					return  false;
				}
		    }
			catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 337, 10, e.getMessage());
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			  }
		  }		

		

		
		public boolean 	checkAddFieldApplyButtonInEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutAddFieldsBtn));
			editLayoutAddFieldsBtn.click();
				
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutCaptionTxt));
			editLayoutCaptionTxt.click();
			
			editLayoutCaptionTxt.sendKeys(excelReader.getCellData(xlSheetName, 340, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutApplyBtn));
			editLayoutApplyBtn.click();
			
			
			String expMessageClickOnApply = excelReader.getCellData(xlSheetName, 341, 7);
	   		 
 	        String actMessageClickOnApply = checkValidationMessage(expMessageClickOnApply);
 	     	
 	     	excelReader.setCellData(xlfile, xlSheetName, 341, 8, actMessageClickOnApply);
			
			
 	     	
 	     	/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
			CloseBtnINDC.click();*/
 	     	
			if(actMessageClickOnApply.equalsIgnoreCase(expMessageClickOnApply))
			{
				System.out.println("Test Pass : Remarks Added Successfully");
				excelReader.setCellData(xlfile, xlSheetName, 340, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Remarks NOT Added Successfully");
				excelReader.setCellData(xlfile, xlSheetName, 340, 9, resFail);
				return false;
			}
			}
			
			catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 340, 10, e.getMessage());
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			  }
			
		}
		
     

		public boolean checkToggleExpansionINDocumentCustomizationVoucherScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			

		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsBtn));

		  boolean actviewsBtn             = viewsBtn.isDisplayed();
		  boolean actexternalFunctionsBtn = externalFunctionsBtn.isDisplayed();
		  boolean actschemesBtn           = schemesBtn.isDisplayed();
		  boolean actexportFieldsBtn      = exportFieldBtn.isDisplayed();
		  boolean acttriggersBtn          = triggersBtn.isDisplayed();
		  boolean actdocumentNumberingBtn = documentNumberingBtn.isDisplayed();
		  boolean acthirePurchaseBtn      = hirePurBtn.isDisplayed();
		  boolean actrulesBtn             = rulesBtn.isDisplayed();
		  boolean actreportsBtn           = reportBtn.isDisplayed();
		
		  boolean expviewsBtn             = true;
		  boolean expexternalFunctionsBtn = true;
		  boolean expschemesBtn           = true;
		  boolean expexportFieldsBtn      = true;
		  boolean exptriggersBtn          = true;
		  boolean expdocumentNumberingBtn = true;
		  boolean exphirePurchaseBtn      = true;
		  boolean exprulesBtn             = true;
		  boolean expreportsBtn           = true;	
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsBtn));
		  viewsBtn.click();
		  
		

		  System.out.println("ViewsBtn               : " + actviewsBtn                 + "  value expected  " + expviewsBtn);
	  	  System.out.println("ExternalFunctionsBtn   : " + actexternalFunctionsBtn     + "  value expected  " + expexternalFunctionsBtn);
		  System.out.println("SchemesBtn             : " + actschemesBtn               + "  value expected  " + expschemesBtn);
		  System.out.println("ExportFieldsBtn        : " + actexportFieldsBtn          + "  value expected  " + expexportFieldsBtn);
		  System.out.println("TriggersBtn            : " + acttriggersBtn              + "  value expected  " + exptriggersBtn);
		  System.out.println("DocumentNumberingBtn   : " + actdocumentNumberingBtn     + "  value expected  " + expdocumentNumberingBtn);
	      System.out.println("HirePurchaseBtn        : " + acthirePurchaseBtn          + "  value expected  " + exphirePurchaseBtn);
		  System.out.println("RulesBtn               : " + actrulesBtn                 + "  value expected  " + exprulesBtn);
		  System.out.println("ReportsBtn             : " + actreportsBtn               + "  value expected  " + expreportsBtn);
			
		  
		  boolean actMethod=actviewsBtn==expviewsBtn && actexternalFunctionsBtn==expexternalFunctionsBtn && actschemesBtn==expschemesBtn 
				    && actexportFieldsBtn==expexportFieldsBtn && acttriggersBtn==exptriggersBtn && actdocumentNumberingBtn==expdocumentNumberingBtn 
				    && acthirePurchaseBtn==exphirePurchaseBtn && actrulesBtn==exprulesBtn && actreportsBtn==expreportsBtn;
		  
		  
		  String actResult=Boolean.toString(actMethod);
		  String expResult=excelReader.getCellData(xlSheetName, 343, 7);
		  excelReader.setCellData(xlfile, xlSheetName, 343, 8, actResult);
		  
		  
			   if(actResult.equalsIgnoreCase(expResult) )
			  {
				System.out.println("Test Pass : Toogle Options  As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 342, 9, resPass);
				return true;
			  }
			  else
			  {
				System.out.println("Test Fail : Toogle Options  Expected");
				excelReader.setCellData(xlfile, xlSheetName, 342, 9, resFail);
				return false;
			  }
		       }
		
		@FindBy(xpath = "//*[@id='views_tabContent']/div[1]/div/span")
		public static List<WebElement> viewTabHeaderList;
		
		 
		
		
		//Views TAB	
		@FindBy(xpath="//span[contains(text(),'Views')]")
		public static WebElement  viewsTAB;
		
		@FindBy(xpath="//input[@id='views_existingViews']")
		public static WebElement  ViewExistingViewTxt;
		
		@FindBy(xpath="//*[@id='views_existingViews_input_container']/div[2]/table/tbody/tr/td[3]/i")
		public static WebElement  viewExistingSettingIcon;
		
		@FindBy(xpath="//*[@id='panelsStayOpen-collapseOne']/div[2]/div/label[1]/span")
		public static WebElement  viewsAuthorizeOnlyChkbox;
		
		@FindBy(xpath="//*[@id='panelsStayOpen-collapseOne']/div[2]/div/label[2]/span")
		public static WebElement  viewBodyReadOnlyChkbox;
		
		@FindBy(xpath="//*[@id='panelsStayOpen-collapseOne']/div[2]/div/label[3]/span")
		public static WebElement  viewHideNetFromSummaryChkbox;
		
		//Grid Body 
		//To Obtain Number rows present in Grid
		@FindBy(xpath="//*[@id='views_FieldsTable']/tbody/tr")
		public static List<WebElement>  viewsGridBodyList;
		
	    //To Edit First Row in Body Grid
		@FindBy(xpath="//div[@id='views_tabContent']//tr[1]//td[1]//span[1]")
		public static WebElement  row1EditBtn;
		
		@FindBy(xpath="//div[@id='views_tabContent']//tr[2]//td[1]//span[1]")
		public static WebElement  row2EditBtn;
		
		@FindBy(xpath="//div[@id='views_tabContent']//tr[3]//td[1]//span[1]")
		public static WebElement  row3EditBtn;
		
		
	
		
		
		
		//Footer Elements
		//Users
		
		//Users CheckBoxes List
		@FindBy(xpath="//*[@id='views_lstUsers']/li/div/label/input")
		public static List<WebElement>  viewsUsersCheckBoxList;
		
		//Users Name Label List 
		
		//Users Select 
		@FindBy(xpath="//*[@id='id_documentcustomization_views_list_users']/li[1]/div/label/span")
		public static WebElement  viewSuChkbox;
		
		@FindBy(xpath="//ul[@id='views_lstUsers']//li[2]//div[1]//label[1]")
		public static WebElement  viewsUserAccPOTransRestrictionsChkbox;
		
		@FindBy(xpath="//*[@id='id_documentcustomization_views_list_users']/li[2]/div/label/span")
		public static WebElement  viewsUserAllOptionsSTChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[4]//div[1]//label[1]")
		public static WebElement  viewsUserBlockWithTimeChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[5]//div[1]//label[1]")
		public static WebElement  viewsUserItemPOExclusionChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[6]//div[1]//label[1]")
		public static WebElement  viewsUserItemPOTransRestrictionsChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[7]//div[1]//label[1]")
		public static WebElement  viewsUserSendEmailLoginFailureChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[8]//div[1]//label[1]")
		public static WebElement  viewsUserSendEmailLoginSuccessChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[9]//div[1]//label[1]")
		public static WebElement  viewsUserUGChangePasswordChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[10]//div[1]//label[1]")
		public static WebElement  viewsUserWithAccDisableRolechkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[11]//div[1]//label[1]")
		public static WebElement  viewsUserWithAccRestrictionsReportVChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[12]//div[1]//label[1]")
		public static WebElement  viewsUserWithAllowMulLoginChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[13]//div[1]//label[1]")
		public static WebElement  viewsUserWithDNotLockChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[14]//div[1]//label[1]")
		public static WebElement  viewsUserWithLoadOptionChkbox;

		@FindBy(xpath="//ul[@id='views_lstUsers']//li[15]//div[1]//label[1]")
		public static WebElement  viewsUserWithPurchaseFAINVChkbox ;

		
		
		//Roles
		
		//Roles CheckBoxes List 
		@FindBy(xpath="//*[@id='views_lstRoles']/li/div/label/input")
		public static List<WebElement>  viewsRolesCheckBoxList;
		
		
		
		
		@FindBy(xpath="//ul[@id='views_lstRoles']//li[1]//div[1]//label[1]")
		public static WebElement  viewsPurchaseINVAndFAChkbox;
		
		@FindBy(xpath="//ul[@id='views_lstRoles']//li[2]//div[1]//label[1]")
		public static WebElement  viewsRoleWithAllProTransRightChkbox;

		@FindBy(xpath="//ul[@id='views_lstRoles']//li[3]//div[1]//label[1]")
		public static WebElement  viewsSampleRole1Chkbox;
		
		
		@FindBy(xpath="//ul[@id='views_lstRoles']//li[4]//div[1]//label[1]")
		public static WebElement  viewsSORestForEntryRoleChkbox;
		
		@FindBy(xpath="//ul[@id='views_lstRoles']//li[5]//div[1]//label[1]")
		public static WebElement  viewsSORestForEntryRoleExclusionChkbbox;
		
		
		
		//Always load Document from
		
		@FindBy(xpath="//input[@id='views_chkAllowExtraEntriesManually']")
		public static WebElement  viewsExtraEntryManuallychkbox;
		
		@FindBy(xpath="//input[@id='views_rdoNone']")
		public static WebElement  viewsNoneRadioBtn;
		
		@FindBy(xpath="//input[@id='views_rdoLinks']")
		public static WebElement  viewLinksRadioBtn;
		
		@FindBy(xpath="//input[@id='views_rdoPendingbills']")
		public static WebElement  viewsPendingbillsRadioBtn;
		
		
		
		//Triggers
		
		
		
		/*@FindBy(xpath="//span[contains(text(),'Triggers')]")
		public static WebElement  triggersTab;*/
		
		@FindBy(xpath="//*[@id='triggers_existTriggers']")
		public static WebElement  editLayoutTriggerName;
		
		@FindBy(xpath="//*[@id='triggers_existTriggers']")
		public static WebElement  editLayoutTriggerName1;
		
		
		@FindBy(xpath="//td[@id='triggers_existTriggers_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
		public static WebElement  triggersExistTriggersSettingBtn;
		
		
		
	
		
		@FindBy(xpath="//input[@id='advancefilter_master_17_1_']")
		public static WebElement  triggersValueTxt;
		
		@FindBy(xpath="//*[@id='17_1_AdvanceFilter_']/table/tbody/tr/td[5]/input")
		public static WebElement  triggersValueToEnterTxt;
		
		
		@FindBy(xpath="//tbody//span[@class='icon-close icon-font6']")
		public static WebElement  triggersTrigCreteriaCloseBtnINDC;
		
		@FindBy(xpath="//tbody//span[@class='icon-pluse icon-font6']")
		public static WebElement  triggersTrigCreteriaAddBtn;
		
		@FindBy(xpath="//tr[2]//td[6]//span[1]")
		public static WebElement  triggersTrigCretriaRow2CloseBtnINDC;
		
		
		//Action
		@FindBy(xpath="//input[@id='triggers_chkraiseNewDoc']")
		public static WebElement  triggersRiseANewDocChkbox;
		
		@FindBy(xpath="//input[@id='triggers_chksuspend']")
		public static WebElement  triggersSuspendedChkboxs;
		
		@FindBy(xpath="//input[@id='rdbOnSave']")
		public static WebElement  triggersOnSaveRadioBtn;
		
		@FindBy(xpath="//input[@id='rdbOnAuthorization']")
		public static WebElement  triggersOnAuthorizatinRadioBtn;
		
		@FindBy(xpath="//input[@id='triggers_chksendAlert']")
		public static WebElement  triggersSendAlertChkbox;
		
		@FindBy(xpath="//select[@id='triggers_sendAlert']")
		public static WebElement  triggersSendAlertDrpdwn;
		
		@FindBy(xpath="//*[@id='triggers_FieldsDiv']/div[2]/div[3]/div[1]/button")
		public static WebElement  triggersSendAlertExpansionBtn;
		
		@FindBy(xpath="//input[@id='id_trigger_alertdateformula']")
		public static WebElement  triggersAlertDataFormula;
		
		@FindBy(xpath="//input[@id='triggers_chksendEmail']")
		public static WebElement  triggersSendEmailChkbox;
		
		@FindBy(xpath="//input[@id='Triggers_LayoutID']")
		public static WebElement  triggersSendEmailDrpdwn;
		
		@FindBy(xpath="//div[@class='col-xs-12 col-sm-6']//div[2]//button[1]")
		public static WebElement  triggersSendEmailExpansionBtn;
		
		@FindBy(xpath="//input[@id='triggers_chksendSMS']")
		public static WebElement  triggersSendSMSChkbox;
		
		@FindBy(xpath="//select[@id='triggers_sendSMS']")
		public static WebElement  triggersSendSMSDrpdwn;
		
		@FindBy(xpath="//div[@class='col-xs-12 col-sm-6']//div[@class='col-xs-12']//div[3]//button[1]")
		public static WebElement  triggersSendSMSExpansionBtn;
		
		@FindBy(xpath="//input[@id='triggers_smsconfirm']")
		public static WebElement  triggersConformBeforeSendingChkbox;
		
		@FindBy(xpath="//input[@id='triggers_smsonedit']")
		public static WebElement  triggersSendSMSonEdit;
		
		@FindBy(xpath="//select[@id='triggers_PhoneNo']")
		public static WebElement  triggersPhoneNoDrpdwn;
		
		@FindBy(xpath="//input[@id='triggers_chksendTypeCustomeVendor']")
		public static WebElement  triggersCustmerORVendorChkbox;
		
		@FindBy(xpath="//input[@id='triggers_chksendTypeLogin']")
		public static WebElement  triggersLoginChkbox;
		
		@FindBy(xpath="//input[@id='triggers_chksendTypeExtraField']")
		public static WebElement  triggersExtraFieldChkbox;
		
		@FindBy(xpath="//input[@id='triggers_Role']")
		public static WebElement  triggersRoleChkbox;
		
		@FindBy(xpath="//input[@id='triggers_Auth']")
		public static WebElement  triggersAuthorisationChkbox;
		
		@FindBy(xpath="//select[@id='triggers_Auth_DD']")
		public static WebElement  triggersDefaultDrpdwn;
		


		public boolean checkViewTabHeaderOptionsINVeiwTabUnderDocumentCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			Thread.sleep(4000);
			
			
			  boolean actviewsExportIcon               = viewsExportIcon.isDisplayed();
			  boolean actviewImportIcon                = viewImportIcon.isDisplayed();
			  boolean actviewsInsertInformColmnIcon    = viewsInsertInformColmnIcon.isDisplayed();
			  boolean actviewInformFiledIcon           = viewInformFiledIcon.isDisplayed();
			  boolean actviewsCreateRuleIcon           = viewsCreateRuleIcon.isDisplayed();
			  boolean actviewLoadDefaultsIcon          = viewLoadDefaultsIcon.isDisplayed();
			  boolean actviewsRefereshIcon             = viewsRefereshIcon.isDisplayed();
			  boolean actviewsDeleteViewIcon           = viewsDeleteViewIcon.isDisplayed();
			  boolean actviewSaveView                  = viewSaveView.isDisplayed();
			  
			  Thread.sleep(3000);
			/*  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewSettingsExpandBtn));
			  viewSettingsExpandBtn.click();
			  Thread.sleep(3000);*/
			  boolean actViewExistingViewTxt           = ViewExistingViewTxt.isDisplayed();
			  boolean actviewsAuthorizeOnlyChkbox      = viewsAuthorizeOnlyChkbox.isDisplayed();
			  boolean actviewBodyReadOnlyChkbox        = viewBodyReadOnlyChkbox.isDisplayed();
			  boolean actviewHideNetFromSummaryChkbox  = viewHideNetFromSummaryChkbox.isDisplayed();
			
			  
			  boolean expviewsExportIcon               = true;
			  boolean expviewImportIcon 			   = true;
			  boolean expviewsInsertInformColmnIcon    = true;
			  boolean expviewInformFiledIcon           = true;
			  boolean expviewsCreateRuleIcon           = true;
			  boolean expviewLoadDefaultsIcon          = true;
			  boolean expviewsRefereshIcon             = true;
			  boolean expviewsDeleteViewIcon           = true;
			  boolean expviewSaveView                  = true;	
			  boolean expViewExistingViewTxt           = true;
			  boolean expviewsAuthorizeOnlyChkbox      = true;
			  boolean expviewBodyReadOnlyChkbox        = true;
			  boolean expviewHideNetFromSummaryChkbox  = true;	
			  
			  
			  System.out.println("*********************************checkViewTabHeaderOptions**************************");

			  System.out.println("viewsExportIcon               : " + actviewsExportIcon            + "  value expected  " + expviewsExportIcon);
		  	  System.out.println("viewImportIcon                : " + actviewImportIcon             + "  value expected  " + expviewImportIcon);
			  System.out.println("viewsInsertInformColmnIcon    : " + actviewsInsertInformColmnIcon + "  value expected  " + expviewsInsertInformColmnIcon);
			  System.out.println("viewInformFiledIcon           : " + actviewInformFiledIcon        + "  value expected  " + expviewInformFiledIcon);
			  System.out.println("viewsCreateRuleIcon           : " + actviewsCreateRuleIcon        + "  value expected  " + expviewsCreateRuleIcon);
			  System.out.println("viewLoadDefaultsIcon          : " + actviewLoadDefaultsIcon       + "  value expected  " + expviewLoadDefaultsIcon);
		      System.out.println("viewsRefereshIcon             : " + actviewsRefereshIcon          + "  value expected  " + expviewsRefereshIcon);
			  System.out.println("viewsDeleteViewIcon           : " + actviewsDeleteViewIcon        + "  value expected  " + expviewsDeleteViewIcon);
			  System.out.println("ReportsBtn                    : " + actviewSaveView               + "  value expected  " + expviewSaveView);
			  System.out.println("ViewExistingViewTxt           : " + actViewExistingViewTxt        + "  value expected  " + expViewExistingViewTxt);
		      System.out.println("viewsAuthorizeOnlyChkbox      : " + actviewsAuthorizeOnlyChkbox   + "  value expected  " + expviewsAuthorizeOnlyChkbox);
			  System.out.println("viewsDeleteViewIcon           : " + actviewsDeleteViewIcon        + "  value expected  " + expviewsDeleteViewIcon);
			  System.out.println("viewHideNetFromSummaryChkbox  : " + actviewHideNetFromSummaryChkbox+ "  value expected  " + expviewHideNetFromSummaryChkbox);
			
			  
			  boolean actMethod= actviewsExportIcon==expviewsExportIcon 
						&& actviewImportIcon==expviewImportIcon && actviewsInsertInformColmnIcon==expviewsInsertInformColmnIcon && actviewInformFiledIcon==expviewInformFiledIcon 
						&& actviewsCreateRuleIcon==expviewsCreateRuleIcon && actviewLoadDefaultsIcon==expviewLoadDefaultsIcon
								
					    && actviewsRefereshIcon==expviewsRefereshIcon && actviewsDeleteViewIcon==expviewsDeleteViewIcon && actviewSaveView==expviewSaveView && 
					    actViewExistingViewTxt==expViewExistingViewTxt && actviewsAuthorizeOnlyChkbox==expviewsAuthorizeOnlyChkbox && 
					    actviewBodyReadOnlyChkbox==expviewBodyReadOnlyChkbox && actviewHideNetFromSummaryChkbox==expviewHideNetFromSummaryChkbox;
			  
			  
			  String actResult=Boolean.toString(actMethod);
			  String expResult=excelReader.getCellData(xlSheetName, 345, 7);
			  excelReader.setCellData(xlfile, xlSheetName, 345, 8, actResult);
			  
				   if(actResult.equalsIgnoreCase(expResult))
				  {
					System.out.println("Test Pass : View Tab Header  Options  As Expected");
					excelReader.setCellData(xlfile, xlSheetName, 344, 9, resPass);
					return true;
				  }
				  else
				  {
					System.out.println("Test Fail : View Tab Header  Options  As Expected");
					excelReader.setCellData(xlfile, xlSheetName, 344, 9, resFail);
					return false;
				  }
			

			    }

		
		
		public boolean checkFieldTypesinBodyGridViewTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
			 
			Thread.sleep(2000);
			
			int Count = viewsGridFiledsList.size();
			
			String actFiledCount=Integer.toString(Count);
			String expFiledCount= "35"; //28
			excelReader.setCellData(xlfile, xlSheetName, 346, 8, actFiledCount);			
			
			System.out.println("Count    : "+Count);
			
			ArrayList<String> actviewsGridFiledsList  = new ArrayList<String>();
			
			for (int i = 0; i < Count; i++) 
			{
				String data		                              = viewsGridFiledsList.get(i).getText();
				actviewsGridFiledsList.add(data);
			}
			
			String actFieldList					  = actviewsGridFiledsList.toString();
			String expFieldList					  = "[DocNo, Date, Time, VendorAC, UpdateStock, RaiseReceipt, DueDate, Currency, ExchangeRate, Department, LocExchangeRate, Place of supply, Jurisdiction, sNarration, PermitNo, Warehouse, Item, TaxCode, PurchaseAC, Unit, RD, Avg Rate, Avg Rate(O), Quantity, Rate, Gross, Discount, VAT, Taxable, Batch, Bins, ExpDate, RMA, FD%, VAT advance]";
			
			//excelReader.setCellData(xlfile, xlSheetName, 347, 8, actFieldList);
				    	
			System.err.println("Field Names Display Text Actual Values      :  " + actFieldList);
			System.out.println("Field Names Display Text Expected Values    :  " + expFieldList);
			
			if(actFiledCount.equalsIgnoreCase(expFiledCount) && actFieldList.equalsIgnoreCase(expFieldList))
			{
				System.out.println("Test Pass : Body Grid Filed Options  As Expected");
			    excelReader.setCellData(xlfile, xlSheetName, 346, 9, resPass);
				return true;
			  }
			  else
			  {
				System.out.println("Test Fail :  Body Grid Filed Options  As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 346, 9, resFail);
				return false;
			  }
			
			
		}
			
			
			
			public boolean checkLoginUsersinViewsTabUnderDocumentCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				  
				  Thread.sleep(3000);
				  getAction().moveToElement(loginExpandBtn).build().perform();
				  Thread.sleep(2000);
				  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginExpandBtn));
				  loginExpandBtn.click();
				  Thread.sleep(3000);
					
				  Thread.sleep(2000);
					
				int Count = viewsUsersList.size();
				
				String actFiledCount=Integer.toString(Count);
				String expFiledCount= excelReader.getCellData(xlSheetName, 348, 7);
				excelReader.setCellData(xlfile, xlSheetName, 348, 8, actFiledCount);
				
				
				ArrayList<String> actviewsUsersList  = new ArrayList<String>();
				
				for (int i = 0; i < Count; i++) 
				{
					String data		                              = viewsUsersList.get(i).getText();
					actviewsUsersList.add(data);
				}
				
				String actUsersList					  = actviewsUsersList.toString();
				String expUsersList					  = excelReader.getCellData(xlSheetName, 349, 7);
				excelReader.setCellData(xlfile, xlSheetName, 349, 8, actUsersList);
					    	
				System.err.println("Financials Menu Names Display Text Actual Values      :  " + actUsersList);
				System.out.println("Financials Menu Names Display Text Expected Values    :  " + expUsersList);
				
				
				if(actFiledCount.equalsIgnoreCase(expFiledCount) && actUsersList.equalsIgnoreCase(expUsersList))
				{
					System.out.println("Test Pass : Users  As Expected");
					excelReader.setCellData(xlfile, xlSheetName, 348, 9, resPass);
					return true;
				  }
				  else
				  {
					System.out.println("Test Fail :  Users As Expected");
					excelReader.setCellData(xlfile, xlSheetName, 348, 9, resFail);
					return false;
				  }
				
				
	           }
			


     public boolean checkRolesInViewsTabUnderDocumentCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
				Thread.sleep(2000);
			
			int Count = viewsRolesList.size();
		
			
			String actRoleCount=Integer.toString(Count);
			String expRoleCount= excelReader.getCellData(xlSheetName, 350, 7);
			excelReader.setCellData(xlfile, xlSheetName, 350, 8, actRoleCount);
			
			System.out.println("Count    : "+Count);
			
			ArrayList<String> actviewsRolesList  = new ArrayList<String>();
			
			for (int i = 0; i < Count; i++) 
			{
				String data		                              = viewsRolesList.get(i).getText();
				actviewsRolesList.add(data);
			}
			
			String actRolesList					  = actviewsRolesList.toString();
			String expRolesList					  = "[Role ST, Test]";
			excelReader.setCellData(xlfile, xlSheetName, 351, 8, actRolesList);
				    	
			System.err.println("Roles Display Text Actual Values      :  " + actRolesList);
			System.out.println("Roles DisplayText Expected Values     :  " + expRolesList);
			
			
			if(actRoleCount.equalsIgnoreCase(expRoleCount) && actRolesList.equalsIgnoreCase(expRolesList))
			{
				System.out.println("Test Pass : Users  As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 350, 9, resPass);
				return true;
			  }
			  else
			  {
				System.out.println("Test Fail :  Users As Expected");
				excelReader.setCellData(xlfile, xlSheetName, 350, 9, resFail);
				return false;
			  }
			
		   }
		
		
	
				
		
		
		public boolean checkCreatingViewInViewTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			  Thread.sleep(3000);
			  getAction().moveToElement(viewSettingsExpandBtn).build().perform();
			  Thread.sleep(2000);
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ViewExistingViewTxt));
			ViewExistingViewTxt.click();
			
			ViewExistingViewTxt.sendKeys(excelReader.getCellData(xlSheetName, 353, 6));
			
			ViewExistingViewTxt.sendKeys(Keys.TAB);

			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ViewExistingViewTxt));
			ViewExistingViewTxt.click();
			
			ViewExistingViewTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			
			ViewExistingViewTxt.sendKeys(Keys.SPACE);
			Thread.sleep(2000);
			ViewExistingViewTxt.sendKeys(excelReader.getCellData(xlSheetName, 353, 6));
			Thread.sleep(2000);
			ViewExistingViewTxt.sendKeys(Keys.TAB);
			
			
			
            Thread.sleep(7000);
			
			int Count = viewsGridFiledsList.size();
			
			
			System.out.println("Count    : "+Count);
			
			ArrayList<String> actviewsGridFiledsList  = new ArrayList<String>();
			
			for (int i = 0; i < Count; i++) 
			{
				String data		  = viewsGridFiledsList.get(i).getText();

	    		if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 354, 6)))
				
				{
	    			viewsGridFiledsEditList.get(i).click();
					
					break;
				}
			}
			
		
            
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewGridRow2EditBtn));
            getAction().doubleClick(viewGridRow2EditBtn).build().perform();
            
            
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldDetails_DataTypeDrpdwn));			
			fieldDetails_DataTypeDrpdwn.click();
			
			Select data=new Select(fieldDetails_DataTypeDrpdwn);
			data.selectByVisibleText("Read Only");
			
			String actDataType=data.getFirstSelectedOption().getText();
			String expDataType=excelReader.getCellData(xlSheetName, 355, 7);
			excelReader.setCellData(xlfile, xlSheetName, 355, 8, actDataType);

			
			System.err.println("FiledCaption For date In Create View  : "+actDataType);
			
           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldDetails_ApplyBtn));
           fieldDetails_ApplyBtn.click();
			
           
           Thread.sleep(2000);
           
           
			  Thread.sleep(3000);
			  getAction().moveToElement(alwaysLoadDocumentFromExpandBtn).build().perform();
			  Thread.sleep(2000);
           
           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsUserAllOptionsSTChkbox));
           viewsUserAllOptionsSTChkbox.click();
			
           Thread.sleep(2000);
           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewSaveView));
           viewSaveView.click();
           
           String expMessage= excelReader.getCellData(xlSheetName, 356, 7);
           
           String actMessage=checkValidationMessage(expMessage);
           
           excelReader.setCellData(xlfile, xlSheetName, 356, 8, actMessage);
           
           if (actMessage.equalsIgnoreCase(expMessage) && actDataType.equalsIgnoreCase(expDataType)) 
           { 
   			System.out.println("Test Pass : Toogle Options in Sales Orders As Expected");
   			excelReader.setCellData(xlfile, xlSheetName,  352, 9, resPass);
   			return true;
   		  }
   		  else
   		  {
   			System.out.println("Test Fail : Toogle Options in Sales Orders As Expected");
   			excelReader.setCellData(xlfile, xlSheetName,  352, 9, resFail);
   			return false;
   		  }
   		}
   	
	
		
		public boolean checkDeleteinCreatedViewInViewTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
			
			Thread.sleep(2000);
			JavascriptExecutor jse = (JavascriptExecutor)getDriver();
			jse.executeScript("arguments[0].scrollIntoView(true);", ViewExistingViewTxt);
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ViewExistingViewTxt));
			ViewExistingViewTxt.click();
			
			ViewExistingViewTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			
			ViewExistingViewTxt.sendKeys(Keys.SPACE);
			Thread.sleep(2000);
			ViewExistingViewTxt.sendKeys(excelReader.getCellData(xlSheetName, 358, 6));
			Thread.sleep(2000);
			ViewExistingViewTxt.sendKeys(Keys.TAB);
			
			
			Thread.sleep(5000);
			
			int Count = viewsGridFiledsList.size();
			
			
			System.out.println("Count    : "+Count);
			
			ArrayList<String> actviewsGridFiledsList  = new ArrayList<String>();
			
			for (int i = 0; i < Count; i++) 
			{
				String data		  = viewsGridFiledsList.get(i).getText();

	    		if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 359, 6)))
				{
	    			viewsGridFiledsEditList.get(i).click();
					
					break;
				}
			}
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldDetails_DataTypeDrpdwn));
			
			fieldDetails_DataTypeDrpdwn.click();
			
			Select data=new Select(fieldDetails_DataTypeDrpdwn);
			data.selectByVisibleText("Read Only");
			
			String actDataType=data.getFirstSelectedOption().getText();
			String expDataType=excelReader.getCellData(xlSheetName, 360, 7);
			excelReader.setCellData(xlfile, xlSheetName, 360, 8, actDataType);

			
			System.err.println("FiledCaption  For date in Create For Delete: "+actDataType);
			
			
           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldDetails_ApplyBtn));
           fieldDetails_ApplyBtn.click();
			
           Thread.sleep(2000);
           
           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsUserAllOptionsSTChkbox));
           viewsUserAllOptionsSTChkbox.click();
			
           Thread.sleep(2000);
           
           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewSaveView));
           viewSaveView.click();
           
           String expMessage=excelReader.getCellData(xlSheetName, 361, 7);
           
           String actMessage=checkValidationMessage(expMessage);
                       
           excelReader.setCellData(xlfile, xlSheetName, 361, 8, actMessage);
           
           
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsDeleteViewIcon));
			viewsDeleteViewIcon.click();
           
			getWaitForAlert();
			
			String actAlertMessage=getAlert().getText();
			
			String expAlertMessage=excelReader.getCellData(xlSheetName, 362, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 362, 8, actAlertMessage);
		
			System.out.println("Alert Message on Deleteing the Voucher :  "+actAlertMessage +"  "+expAlertMessage);
			
			 getAlert().accept();
			
			 String expDeleteMessage=excelReader.getCellData(xlSheetName, 363, 7);
	            
	         String actDeleteMessage=checkValidationMessage(expDeleteMessage);
	            
	         excelReader.setCellData(xlfile, xlSheetName, 363, 8, actDeleteMessage);
	         
           if (actMessage.equalsIgnoreCase(expMessage)&& actDeleteMessage.equalsIgnoreCase(expDeleteMessage) && 
           		actDataType.equalsIgnoreCase(expDataType)) 
           {
           	System.out.println(" Test Pass:  Created View is Deleted View Successfull in Views TAB");
           	excelReader.setCellData(xlfile, xlSheetName,  357, 9, resPass);
				return true;
			}
           else
           {
           	System.out.println("Test Fail:  Created View is Deleted View Successfull in Views TAB");
           	excelReader.setCellData(xlfile, xlSheetName,  357, 9, resFail);
               return false;
			}
		
		}

		
		public boolean checkEditinginBodyFieldAndFooterFieldinInViewTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ViewExistingViewTxt));
			ViewExistingViewTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(7000);
			
			int Count = viewsGridFiledsList.size();
					
			System.out.println("Count    : "+Count);
			
			ArrayList<String> actviewsGridFiledsList  = new ArrayList<String>();
			
			for (int i = 0; i < Count; i++) 
			{
				String data		  = viewsGridFiledsList.get(i).getText();

	    		if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 365, 6)))
				{
	    			viewsGridFiledsEditList.get(i).click();
					
					break;
				}
			}
			
		
			
           Thread.sleep(2000);
           
           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewSaveView));
           viewSaveView.click();
           
           String expMessage=excelReader.getCellData(xlSheetName, 369, 7);
           
           String actMessage=checkValidationMessage(expMessage);
           
           excelReader.setCellData(xlfile, xlSheetName, 369, 8, actMessage);
           
           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
           updateBtn.click();

           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
           CloseBtnINDC.click();
			   

           
           
			
           if (actMessage.equalsIgnoreCase(expMessage) /*&& actDataType.equalsIgnoreCase(expDataType)*/ /*&& 
           		actDefaultValue.equalsIgnoreCase(expDefaultValue)*/) 
           {
           	System.out.println(" Test Pass:  Created View is Edited  Successfull in Views TAB");
           	excelReader.setCellData(xlfile, xlSheetName,  364, 9, resPass);
				return true;
			}
           else
           {
           	System.out.println("Test Fail:  Created View is Not Edited uuccessfull in Views TAB");
           	excelReader.setCellData(xlfile, xlSheetName,  364, 9, resFail);
               return false;
			}
		
	  }
	
		

		public boolean checkNavigateToDocumentCustomizationVoucherScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
		  Thread.sleep(2000);
		
	      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(serachMenuTextHomePage));
		  System.out.println("Setting buton is enabled");
		  serachMenuTextHomePage.click();
		  serachMenuTextHomePage.sendKeys("Configure Transactons");
		  serachMenuTextHomePage.sendKeys(Keys.ENTER);
		  
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		  documentCustomization45Btn.click();
		
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersNewVoucherBtn));
		  purchaseVouchersNewVoucherBtn.click();
					  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
	      boolean actdocumentsTab        = documentsTab.isDisplayed();
	      boolean actmiscellaneousTab    = miscellaneousTab.isDisplayed();
		  boolean acteditScreenTab       = editScreenTab.isDisplayed();
		  boolean actinventoryoptionsTab = inventoryoptionsTab.isDisplayed();
		  boolean acteditLayoutTab       = editLayoutTab.isDisplayed();
		
		
		  boolean expdocumentsTab        = true;
		  boolean expmiscellaneousTab    = true;
	      boolean expeditScreenTab       = true;
		  boolean expinventoryoptionsTab = true;
		  boolean expeditLayoutTab       = true;
		


		  System.out.println("DocumentsTab           : " + actdocumentsTab         + "  value expected  " + expdocumentsTab);
		  System.out.println("MiscellaneousTab       : " + actmiscellaneousTab     + "  value expected  " + expmiscellaneousTab);
		  System.out.println("EditScreenTab          : " + acteditScreenTab        + "  value expected  " + expeditScreenTab);
		  System.out.println("InventoryoptionsTab    : " + actinventoryoptionsTab  + "  value expected  " + expinventoryoptionsTab);
		  System.out.println("EditLayoutTab          : " + acteditLayoutTab        + "  value expected  " + expeditLayoutTab);
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsBtn));

		  boolean actviewsBtn             = viewsBtn.isDisplayed();
		  boolean actexternalFunctionsBtn = externalFunctionsBtn.isDisplayed();
		  boolean actschemesBtn           = schemesBtn.isDisplayed();
		  boolean actexportFieldsBtn      = exportFieldBtn.isDisplayed();
		  boolean acttriggersBtn          = triggersBtn.isDisplayed();
		  boolean actdocumentNumberingBtn = documentNumberingBtn.isDisplayed();
		  boolean acthirePurchaseBtn      = hirePurBtn.isDisplayed();
		  boolean actrulesBtn             = rulesBtn.isDisplayed();
		  boolean actreportsBtn           = reportBtn.isDisplayed();
		
		  boolean expviewsBtn             = true;
		  boolean expexternalFunctionsBtn = true;
		  boolean expschemesBtn           = true;
		  boolean expexportFieldsBtn      = true;
		  boolean exptriggersBtn          = true;
		  boolean expdocumentNumberingBtn = true;
		  boolean exphirePurchaseBtn      = true;
		  boolean exprulesBtn             = true;
		  boolean expreportsBtn           = true;	
	
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsBtn));
		  viewsBtn.click();
		
		  System.out.println("ViewsBtn               : " + actviewsBtn                 + "  value expected  " + expviewsBtn);
	  	  System.out.println("ExternalFunctionsBtn   : " + actexternalFunctionsBtn     + "  value expected  " + expexternalFunctionsBtn);
		  System.out.println("SchemesBtn             : " + actschemesBtn               + "  value expected  " + expschemesBtn);
		  System.out.println("ExportFieldsBtn        : " + actexportFieldsBtn          + "  value expected  " + expexportFieldsBtn);
		  System.out.println("TriggersBtn            : " + acttriggersBtn              + "  value expected  " + exptriggersBtn);
		  System.out.println("DocumentNumberingBtn   : " + actdocumentNumberingBtn     + "  value expected  " + expdocumentNumberingBtn);
	      System.out.println("HirePurchaseBtn        : " + acthirePurchaseBtn          + "  value expected  " + exphirePurchaseBtn);
		  System.out.println("RulesBtn               : " + actrulesBtn                 + "  value expected  " + exprulesBtn);
		  System.out.println("ReportsBtn             : " + actreportsBtn               + "  value expected  " + expreportsBtn);
			
			   if( actdocumentsTab==expdocumentsTab 
					&& actmiscellaneousTab==expmiscellaneousTab && acteditScreenTab==expeditScreenTab && actinventoryoptionsTab==expinventoryoptionsTab 
					&& acteditLayoutTab==expeditLayoutTab
							
				    && actviewsBtn==expviewsBtn && actexternalFunctionsBtn==expexternalFunctionsBtn && actschemesBtn==expschemesBtn 
				    && actexportFieldsBtn==expexportFieldsBtn && acttriggersBtn==exptriggersBtn && actdocumentNumberingBtn==expdocumentNumberingBtn 
				    && acthirePurchaseBtn==exphirePurchaseBtn && actrulesBtn==exprulesBtn && actreportsBtn==expreportsBtn)
			  {
				System.out.println("Test Pass : Toogle Options  As Expected");
				//excelReader.setCellData(xlfile, xlSheetName, 105, 9, resPass);
				return true;
			  }
			  else
			  {
				System.out.println("Test Fail : Toogle Options  Expected");
				//excelReader.setCellData(xlfile, xlSheetName, 105, 9, resFail);
				return false;
			  }

		    }
		
		
		public boolean checkFooterFieldinInViewTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			  Thread.sleep(3000);
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewSettingsExpandBtn));
			  viewSettingsExpandBtn.click();
			  Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ViewExistingViewTxt));
			ViewExistingViewTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(5000);
			
			int Count = viewsGridFiledsList.size();
			
			
			System.out.println("Count    : "+Count);
			
			ArrayList<String> actviewsGridFiledsList  = new ArrayList<String>();
			
			Thread.sleep(2000);

			for (int i = 0; i < Count; i++) 
			{
				String data		  = viewsGridFiledsList.get(i).getText();
			
				
				if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 367, 6)))
				{
					System.err.println("in : "+data);
					
					viewsGridFiledsEditList.get(i).click();
					
					break;
				}
			}
			
			
			Thread.sleep(2000);
           
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldDetails_DefaultValueTxt));
			fieldDetails_DefaultValueTxt.click();
			
			fieldDetails_DefaultValueTxt.sendKeys(Keys.SHIFT,Keys.HOME);
           
			fieldDetails_DefaultValueTxt.sendKeys(excelReader.getCellData(xlSheetName, 368, 6));
           
			fieldDetails_DefaultValueTxt.sendKeys(Keys.TAB);
           
			
			String actDefaultValue=fieldDetails_DefaultValueTxt.getAttribute("value");
			String expDefaultValue=excelReader.getCellData(xlSheetName, 368, 7);
			excelReader.setCellData(xlfile, xlSheetName, 368, 8, actDefaultValue);

			
			System.err.println("actDefaultValue   : "+actDefaultValue +" Value Expected  : "+expDefaultValue);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldDetails_ApplyBtn));
	        fieldDetails_ApplyBtn.click();
				
			
           Thread.sleep(2000);
           
           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewSaveView));
           viewSaveView.click();
           
           String expMessage=excelReader.getCellData(xlSheetName, 369, 7);
           
           String actMessage=checkValidationMessage(expMessage);
           
           excelReader.setCellData(xlfile, xlSheetName, 369, 8, actMessage);
           
           System.out.println(" Body Filed : "+actMessage+"  Value Expected : "+expMessage);
           
           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
           updateBtn.click();

           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
           CloseBtnINDC.click();
			
           if (actMessage.equalsIgnoreCase(expMessage) && 
           		actDefaultValue.equalsIgnoreCase(expDefaultValue)) 
           {
           	System.out.println(" Test Pass:  Created View is Edited  Successfull in Views TAB");
           	excelReader.setCellData(xlfile, xlSheetName,  364, 9, resPass);
				return true;
			}
           else
           {
           	System.out.println("Test Fail:  Created View is Not Edited uuccessfull in Views TAB");
           	excelReader.setCellData(xlfile, xlSheetName,  364, 9, resFail);
               return false;
			}
			
			
		}
	

			  

		
		
		
		
		
		@FindBy(xpath = "//input[@class='btn btn-link']")
		public static WebElement rulesTabAddRuleBtn;

		@FindBy(xpath = "//input[@id='txtMasterRuleName_DocCustRules']")
		public static WebElement rulesTabRuleNameTxt;

		@FindBy(xpath = "//td[@id='txtMasterRuleName_DocCustRules_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
		public static WebElement rulesTabRuleNameSettingBtn;

		@FindBy(xpath = "//*[@id='Conditions-Context_Menu_DocCustRules']/li[2]/a")
		public static WebElement rulesTabElseTab;

		
		@FindBy(xpath = "//*[@id='Conditions-Context_Menu_DocCustRules']/li[1]/a")
		public static WebElement rulesTabIFTab;
		
		@FindBy(xpath = "//input[@id='txtField_RC_1_1_DocCustRules']")
		public static WebElement rulesTabIFSelectTabTxt;
		
		@FindBy(xpath = "//select[@id='ddlMasterFields_RULES_DocCustRules']")
		public static WebElement rulesTabIFSelectTabDrpdwn;
		
		

		@FindBy(xpath = "//select[@id='ddlExtraFields_1_1_DocCustRules']")
		public static WebElement rulesTabExtraFieldDrpdwn;
		
		
						 
		@FindBy(xpath = "//select[@id='ddlOperators_RC_1_1_DocCustRules']")
		public static WebElement rulesTabOperatorsDrpdwn;

		@FindBy(xpath = "//select[@id='ddlCompareWith_RC_1_1_DocCustRules']")
		public static WebElement rulesTabCompareWithDrpdwn;

		@FindBy(xpath = "//input[@id='txtCompareType_RC_1_1_DocCustRules']")
		public static WebElement rulesTabValueTxt;

		
		@FindBy(xpath = "//input[@id='txtCompareType_RC_1_1_DocCustRules']")
		public static WebElement rulesTabConditionTxttoEnter;
		
		@FindBy(xpath = "//input[@id='optControl_RulesCondition_DocCustRules']	")
		public static WebElement rulesTabConditionTxt;
		
		
		
		
		                  
		@FindBy(xpath = "//input[@id='optControl_RulesCondition_DocCustRules']")
		public static WebElement rulesTabConditioDrpdwn;

		
		
		
		@FindBy(xpath = "//select[@id='ddlConjunction_RC_1_1_DocCustRules']")
		public static WebElement rulesTabConjunctionDrpdwn;

		@FindBy(xpath = "//input[@id='chkNoRuleCondition_DocCustRules']")
		public static WebElement rulesTabNoConditionChkbbox;

		@FindBy(xpath = "//i[@id='iconRuleSettings_DocCustRules']")
		public static WebElement rulesTabSettingsAddIcon;

		@FindBy(xpath = "//span[@class='icon-close icon-font7']")
		public static WebElement rulesTabIfConditionCloseBtnINDC;

		@FindBy(xpath = "//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[1]/a/span")
		public static WebElement rulesTab_IFFormattingTab;

		@FindBy(xpath = "//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[2]/a/span")
		public static WebElement rulesTab_IFMesssageTab;

		@FindBy(xpath = "//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[3]/a/span")
		public static WebElement rulesTab_IFAlertsTab;

		@FindBy(xpath = "//*[@id='Rule_Else_DocCustRules']/div/div[1]/ul/li[1]/a/span")
		public static WebElement rulesTab_ElseFormattingTab;

		@FindBy(xpath = "//*[@id='Rule_Else_DocCustRules']/div/div[1]/ul/li[2]/a/span")
		public static WebElement rulesTab_ElseMessageTab;
		                 
		@FindBy(xpath = "//*[@id='Rule_Else_DocCustRules']/div/div[1]/ul/li[3]/a/span")
		public static WebElement rulesTab_ElseAlertsTab;
		
		@FindBy(xpath = "//button[@id='btnAddRule']")
		public static WebElement rulesTab_SaveRuleBtn;

		@FindBy(xpath = "//button[contains(text(),'Delete Rule')]")
		public static WebElement rulesTab_DeleteRuleBtn;

		
		
		
		public static boolean checkRuleTabInDocumentCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
		  excelReader=new ExcelReader(POJOUtility.getExcelPath());
		  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(serachMenuTextHomePage));
			System.out.println("Setting buton is enabled");
			serachMenuTextHomePage.click();
			serachMenuTextHomePage.sendKeys("Configure Transactions");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMenuTextClick));
			searchMenuTextClick.click();	  
			
			Thread.sleep(8000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
			documentCustomization45Btn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersNewVoucherBtn));
			purchaseVouchersNewVoucherBtn.click();
							 	
			
				
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesBtn));
			rulesBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabAddRuleBtn));
			
			boolean actRuleAdd=rulesTabAddRuleBtn.isDisplayed();
			
			rulesTabAddRuleBtn.click();
			
			String actRuleAddBtnDisplay=Boolean.toString(actRuleAdd);
			String expRuleAddBtnDisplay=excelReader.getCellData(xlSheetName, 371, 7);
			excelReader.setCellData(xlfile, xlSheetName, 371, 8, actRuleAddBtnDisplay);

			if(actRuleAddBtnDisplay.equalsIgnoreCase(expRuleAddBtnDisplay))
			{
           	System.out.println(" Test Pass:  Add Link is Displayed ");
           	excelReader.setCellData(xlfile, xlSheetName,  370, 9, resPass);
				return true;
			}
           else
           {
           	System.out.println("Test Fail: Add Rule Link is Not Displayed ");
           	excelReader.setCellData(xlfile, xlSheetName,  370, 9, resFail);
               return false;
			}
			}
			
	
			public boolean checkRuleTabOptions() throws EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabRuleNameTxt));
				rulesTabRuleNameTxt.click();
				  
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabRuleNameTxt));
			
				boolean actrulesTabRuleNameTxt                           = rulesTabRuleNameTxt.isDisplayed();
				boolean actrulesTabRuleNameSettingBtn                    = rulesTabRuleNameSettingBtn.isDisplayed();
				boolean actrulesTabElseTab                               = rulesTabElseTab.isDisplayed(); 
				boolean actrulesTabIFSelectTabDrpdwn                     = rulesTabIFSelectTabTxt.isDisplayed(); 
				boolean actrulesTabOperatorsDrpdwn                       = rulesTabOperatorsDrpdwn.isDisplayed();
				boolean actrulesTabCompareWithDrpdwn                     = rulesTabCompareWithDrpdwn.isDisplayed();
				boolean actrulesTabValueTxt                              = rulesTabValueTxt.isDisplayed();
				boolean actrulesTabConjunctionDrpdwn                     = rulesTabConjunctionDrpdwn.isDisplayed();
				boolean actrulesTabNoConditionChkbbox                    = rulesTabNoConditionChkbbox.isDisplayed();
				boolean actrulesTabSettingsAddIcon                       = rulesTabSettingsAddIcon.isDisplayed();
				boolean actrulesTabIfConditionCloseBt                    = rulesTabIfConditionCloseBtnINDC.isDisplayed();
				boolean actrulesTab_IFFormattingTab                      = rulesTab_IFFormattingTab.isDisplayed();
				boolean actrulesTab_IFMessageTab                         = rulesTab_IFMesssageTab.isDisplayed();
				boolean actrulesTab_IFFAlertsTab                         = rulesTab_IFAlertsTab.isDisplayed();
				boolean actrulesTabNewRecordChkbox                       = rulesTabNewRecordChkbox.isDisplayed();
				boolean actrulesTabeditChkbox                            = rulesTabEditChkbox.isDisplayed();
				boolean actrulesTabLoadChkbox                            = rulesTabLoadChkbox.isDisplayed();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabElseTab));
				rulesTabElseTab.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTab_ElseFormattingTab));
				boolean actrulesTab_ElseFormattingTab                    =rulesTab_ElseFormattingTab.isDisplayed();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTab_ElseMessageTab));
				boolean actrulesTab_ElseMessageTab                       =rulesTab_ElseMessageTab.isDisplayed();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTab_ElseAlertsTab));
				boolean actrulesTab_ElseFAlertsTab                       =rulesTab_ElseAlertsTab.isDisplayed();
				boolean actrulesTab_SaveRuleBtn                          =rulesTab_SaveRuleBtn.isDisplayed();
				boolean actrulesTab_DeleteRuleBtn                        =rulesTab_DeleteRuleBtn.isDisplayed();
						
				boolean exprulesTabNewRecordChkbox =true;
				boolean exprulesTabeditChkbox=true;
				boolean exprulesTabLoadChkbox=true;
				boolean exprulesTabRuleNameTxt                           = true;
				boolean exprulesTabRuleNameSettingBtn                    = true;
				boolean exprulesTabElseTab                               = true; 
				boolean exprulesTabIFSelectTabDrpdwn                     = true;  
				boolean exprulesTabOperatorsDrpdwn                       = true;
				boolean exprulesTabCompareWithDrpdwn                     = true;
				boolean exprulesTabValueTxt                              = true;
				boolean exprulesTabConjunctionDrpdwn                     = true;
				boolean exprulesTabNoConditionChkbbox                    = true;
				boolean exprulesTabSettingsAddIcon                       = true;
				boolean exprulesTabIfConditionCloseBt                    = true;
				boolean exprulesTab_IFFormattingTab                      = true;
				boolean exprulesTab_IFMessageTab                         = true;
				boolean exprulesTab_IFFAlertsTab                         = true;
				boolean exprulesTab_ElseFormattingTab                    = true;
				boolean exprulesTab_ElseMessageTab       				 = true;
				boolean exprulesTab_ElseAlertsTab						 = true;
				boolean exprulesTab_SaveRuleBtn                          = true;
				boolean exprulesTab_DeleteRuleBtn                        = true;
				
				
			    System.out.println("rulesTabRuleNameTxt Value Actual                : " + actrulesTabRuleNameTxt          +" Value Expected : " + exprulesTabRuleNameTxt);
		        System.out.println("rulesTabRuleNameSetting Value Actual            : " + actrulesTabRuleNameSettingBtn   +" Value Expected : " + exprulesTabRuleNameSettingBtn);
		        System.out.println("rulesTabElseTab Value Actual                    : " + actrulesTabElseTab 			  +" Value Expected : " + exprulesTabElseTab);
		        System.out.println("rulesTabIFSelectTabDrpdwn Value Actual          : " + actrulesTabIFSelectTabDrpdwn    +" Value Expected : " + exprulesTabIFSelectTabDrpdwn);
		        System.out.println("rulesTabOperatorsDrpdwn Value Actual            : " + actrulesTabOperatorsDrpdwn      +" Value Expected : " + exprulesTabOperatorsDrpdwn);
		        System.out.println("rulesTabCompareWithDrpdwn Value Actual          : " + actrulesTabCompareWithDrpdwn    +" Value Expected : " + exprulesTabCompareWithDrpdwn);
		        System.out.println("rulesTabValueTxt Value Actual                   : " + actrulesTabValueTxt             +" Value Expected : " + exprulesTabValueTxt);
		        System.out.println("rulesTabConjunctionDrpdwn Value Actual          : " + actrulesTabConjunctionDrpdwn    +" Value Expected : " + exprulesTabConjunctionDrpdwn);
		        System.out.println("rulesTabNoConditionChkbbox Value Actual         : " + actrulesTabNoConditionChkbbox   +" Value Expected : " + exprulesTabNoConditionChkbbox);
		        System.out.println("rulesTabSettingsAddIcon Value Actual            : " + actrulesTabSettingsAddIcon      +" Value Expected : " + exprulesTabSettingsAddIcon);
		        System.out.println("rulesTabIfConditionCloseBt Value Actual         : " + actrulesTabIfConditionCloseBt   +" Value Expected : " + exprulesTabIfConditionCloseBt);
		        System.out.println("rulesTab_IFFormattingTab Analysis Value Actual  : " + actrulesTab_IFFormattingTab     +" Value Expected : " + exprulesTab_IFFormattingTab);
		        System.out.println("rulesTab_IFFormattingTab  Menu Value Actual     : " + actrulesTab_IFMessageTab        +" Value Expected : " + exprulesTab_IFMessageTab);
		        System.out.println("rulesTab_IFFAlertsTab Indent Value Actual       : " + actrulesTab_IFFAlertsTab        +" Value Expected : " + exprulesTab_IFFAlertsTab);
		        System.out.println("ElseFormattingTab Analysis Value Actual         : " + actrulesTab_ElseFormattingTab   +" Value Expected : " + exprulesTab_ElseFormattingTab);
		        System.out.println("ElseFormattingTab  Menu Value Actual            : " + actrulesTab_ElseMessageTab      +" Value Expected : " + exprulesTab_ElseMessageTab);
		        System.out.println("ElseFAlertsTab Indent Value Actual              : " + actrulesTab_ElseFAlertsTab      +" Value Expected : " + exprulesTab_ElseAlertsTab);
		        System.out.println("Save Rule Value Actual                          : " + actrulesTab_SaveRuleBtn         +" Value Expected : " + exprulesTab_SaveRuleBtn);
		        System.out.println("Delete Value Actual                             : " + actrulesTab_DeleteRuleBtn       +" Value Expected : " + exprulesTab_DeleteRuleBtn);
		         
		        System.out.println("Record Value Actual                             : " + actrulesTabNewRecordChkbox       +" Value Expected : " + exprulesTabNewRecordChkbox );
		        System.out.println("Edit Value Actual                               : " + actrulesTabeditChkbox       +" Value Expected : " + exprulesTabeditChkbox);
		        System.out.println("Load Value Actual                               : " + actrulesTabLoadChkbox       +" Value Expected : " + exprulesTabLoadChkbox);
		        
		        boolean displayResult=actrulesTabRuleNameTxt==exprulesTabRuleNameTxt && actrulesTabRuleNameSettingBtn==exprulesTabRuleNameSettingBtn
										&& actrulesTabElseTab==exprulesTabElseTab && actrulesTabIFSelectTabDrpdwn==exprulesTabIFSelectTabDrpdwn
										&& actrulesTabOperatorsDrpdwn==exprulesTabOperatorsDrpdwn && actrulesTabCompareWithDrpdwn==exprulesTabCompareWithDrpdwn
										&& actrulesTabValueTxt==exprulesTabValueTxt && actrulesTabConjunctionDrpdwn==exprulesTabConjunctionDrpdwn
										&& actrulesTabNoConditionChkbbox==exprulesTabNoConditionChkbbox && actrulesTabSettingsAddIcon==exprulesTabSettingsAddIcon
										&& actrulesTabIfConditionCloseBt==exprulesTabIfConditionCloseBt && actrulesTab_IFFormattingTab==exprulesTab_IFFormattingTab
										&& actrulesTab_IFMessageTab==exprulesTab_IFMessageTab && actrulesTab_IFFAlertsTab==exprulesTab_IFFAlertsTab
										&& actrulesTab_ElseFormattingTab==exprulesTab_ElseFormattingTab && actrulesTab_ElseMessageTab==exprulesTab_ElseMessageTab
										&& actrulesTab_ElseFAlertsTab==exprulesTab_ElseAlertsTab && actrulesTab_DeleteRuleBtn==exprulesTab_DeleteRuleBtn && 
										actrulesTabNewRecordChkbox==exprulesTabNewRecordChkbox && actrulesTabeditChkbox==exprulesTabeditChkbox && 
										actrulesTabLoadChkbox==exprulesTabLoadChkbox;
		        
		        String actDisplayResult=Boolean.toString(displayResult);
		        String expDisplayResult=excelReader.getCellData(xlSheetName, 373, 7);
		        
		        excelReader.setCellData(xlfile, xlSheetName, 373, 8, actDisplayResult);
		    
				if(actDisplayResult.equalsIgnoreCase(expDisplayResult))
				{
	            	System.out.println(" Test Pass:  Add Link is Displayed ");
	            	excelReader.setCellData(xlfile, xlSheetName,  372, 9, resPass);
					return true;
				}
	            else
	            {
	            	System.out.println("Test Fail: Add Rule Link is Not Displayed ");
	            	excelReader.setCellData(xlfile, xlSheetName,  372, 9, resFail);
	                return false;
				}
				}
			
			catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 372, 10, e.getMessage());
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			  }
		}
		
		
		public boolean checkCreatingRuleinRuleTAbUnderDocumentCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
                Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabIFTab));
				rulesTabIFTab.click();
				
				 Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabRuleNameTxt));
				rulesTabRuleNameTxt.click();
				
				
				rulesTabRuleNameTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				
				rulesTabRuleNameTxt.sendKeys(Keys.BACK_SPACE);		
				
				Thread.sleep(1000);
				
				rulesTabRuleNameTxt.sendKeys(excelReader.getCellData(xlSheetName, 375, 6));
				
				Thread.sleep(2000);
				rulesTabRuleNameTxt.sendKeys(Keys.TAB);
							
				String actRuleName=rulesTabRuleNameTxt.getText();
				String expRuleName=excelReader.getCellData(xlSheetName, 375, 7);
				excelReader.setCellData(xlfile, xlSheetName, 375, 8, actRuleName);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabNewRecordChkbox));
				rulesTabNewRecordChkbox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabEditChkbox));
				rulesTabEditChkbox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabOnLeaveChkbox));
				rulesTabOnLeaveChkbox.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabActiveChkbox));
				rulesTabActiveChkbox.click();
				
				boolean RulesTabNewRecordChkbox=rulesTabNewRecordChkbox.isSelected();
				String actRulesTabNewRecordChkbox=Boolean.toString(RulesTabNewRecordChkbox);
				String expRulesTabNewRecordChkbox=excelReader.getCellData(xlSheetName, 376, 7);
				excelReader.setCellData(xlfile, xlSheetName, 376, 8, actRulesTabNewRecordChkbox);
				
				boolean RulesTabEditChkbox=rulesTabEditChkbox.isSelected();
				String actRulesTabEditChkbox=Boolean.toString(RulesTabEditChkbox);
				String expRulesTabEditChkbox=excelReader.getCellData(xlSheetName, 377, 7);
				excelReader.setCellData(xlfile, xlSheetName, 377, 8, actRulesTabEditChkbox);
				
				boolean RulesTabOnLeaveChkbox=rulesTabOnLeaveChkbox.isSelected();
				String actRulesTabOnLeaveChkbox=Boolean.toString(RulesTabOnLeaveChkbox);
				String exRrulesTabOnLeaveChkbox=excelReader.getCellData(xlSheetName, 378, 7);
				excelReader.setCellData(xlfile, xlSheetName, 378, 8, actRulesTabOnLeaveChkbox);;
				
				boolean RulesTabActiveChkbox=rulesTabNewRecordChkbox.isSelected();
				String actRulesTabActiveChkbox=Boolean.toString(RulesTabActiveChkbox);
				String expRulesTabActiveChkbox=excelReader.getCellData(xlSheetName, 379, 7);
				excelReader.setCellData(xlfile, xlSheetName, 379, 8, actRulesTabActiveChkbox);
							
				rulesTabIFSelectTabTxt.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabIFSelectTabDrpdwn));
				Select account=new Select(rulesTabIFSelectTabDrpdwn);
				account.selectByVisibleText(excelReader.getCellData(xlSheetName, 380, 6));
				rulesTabIFSelectTabDrpdwn.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
								
				rulesTabExtraFieldDrpdwn.click();
				
				rulesTabExtraFieldDrpdwn.sendKeys(Keys.ARROW_DOWN);
				rulesTabExtraFieldDrpdwn.sendKeys(Keys.TAB);
			
				rulesTabOperatorsDrpdwn.click();
				
				rulesTabOperatorsDrpdwn.sendKeys(Keys.ARROW_DOWN);
				
				rulesTabOperatorsDrpdwn.sendKeys(Keys.TAB);
							
				rulesTabValueTxt.click();
				
				Thread.sleep(1000);
				Select Value=new Select(rulesTabCompareWithDrpdwn);
				Value.selectByValue("1");
				rulesTabCompareWithDrpdwn.sendKeys(Keys.TAB);
				rulesTabCompareWithDrpdwn.sendKeys(Keys.TAB);
							
				Thread.sleep(2000);
				rulesTabConditionTxt.sendKeys(Keys.SPACE);
				rulesTabConditionTxt.sendKeys(Keys.BACK_SPACE);
				Thread.sleep(2000);
				
				rulesTabConditionTxt.sendKeys(excelReader.getCellData(xlSheetName, 381, 6));
							
				Thread.sleep(4000);
				rulesTabConditionTxt.sendKeys(Keys.TAB);

				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid1stRow_1stcol));
				rulesGrid1stRow_1stcol.click();
				
				rulesIFEnterFiled.sendKeys(excelReader.getCellData(xlSheetName, 382, 6));
				rulesIFEnterFiled.sendKeys(Keys.TAB);
				rulesIFEnterChangeValueDrpdwn.sendKeys(excelReader.getCellData(xlSheetName, 383, 6));
				
				rulesIFEnterChangeValueDrpdwn.sendKeys(Keys.TAB);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesIFEnterValue));
							
				rulesIFEnterValue.sendKeys(excelReader.getCellData(xlSheetName, 384, 6));
				
				rulesIFEnterValue.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabGrid1st_10thCol));
				rulesTabGrid1st_10thCol.click();
				
				rulesTabGridMandatoryChkbox.click();
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_1stcol));
				rulesGrid2ndRow_1stcol.click();
				
				rulesIFEnterFiled.sendKeys(excelReader.getCellData(xlSheetName, 385, 6));
				rulesIFEnterFiled.sendKeys(Keys.TAB);
				rulesIFEnterChangeValueDrpdwn.sendKeys(excelReader.getCellData(xlSheetName, 386, 6));
										
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_5thcol));
				rulesGrid2ndRow_5thcol.click();
				Thread.sleep(2000);
				
				rulesTabIFGridEnterCaption.sendKeys(excelReader.getCellData(xlSheetName, 387, 6));
				
				rulesTabIFGridEnterCaption.sendKeys(Keys.TAB);			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTab_IFMesssageTab));
				rulesTab_IFMesssageTab.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rules_MessageTabGeneralTXT));
				rules_MessageTabGeneralTXT.sendKeys(excelReader.getCellData(xlSheetName, 388, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabElseTab));
				rulesTabElseTab.click();
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGridElse1stRow_1stcol));
				rulesGridElse1stRow_1stcol.click();
				
				rulesElseEnterFiled.sendKeys(excelReader.getCellData(xlSheetName, 389, 6));
				rulesElseEnterFiled.sendKeys(Keys.TAB);
				rulesElseEnterChangeValueDrpdwn.sendKeys(excelReader.getCellData(xlSheetName, 390, 6));
				
				rulesElseEnterChangeValueDrpdwn.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGridElse2ndRow_1stcol));
				rulesGridElse2ndRow_1stcol.click();
				
				rulesElseEnterFiled.sendKeys(excelReader.getCellData(xlSheetName, 392, 6));
				rulesElseEnterFiled.sendKeys(Keys.TAB);
				rulesElseEnterChangeValueDrpdwn.sendKeys(excelReader.getCellData(xlSheetName, 393, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGridElse2ndRow_5thcol));
				rulesGridElse2ndRow_5thcol.click();
				Thread.sleep(2000);
				
				rulesTabElseGridEnterCaption.sendKeys(excelReader.getCellData(xlSheetName, 394, 6));
				
				rulesTabElseGridEnterCaption.sendKeys(Keys.TAB);			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTab_SaveRuleBtn));
				rulesTab_SaveRuleBtn.click();
				
				String expMessageOnSaveRule = excelReader.getCellData(xlSheetName, 395, 7);
				String actMessageOnSaveRule=checkValidationMessage(expMessageOnSaveRule);
							
				excelReader.setCellData(xlfile, xlSheetName, 395, 8, actMessageOnSaveRule);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
				updateBtn.click();
				
				
	           getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
	           CloseBtnINDC.click();
					
				
				String expMessageOnClickOnUpdate = excelReader.getCellData(xlSheetName, 396, 7);
				String actMessageOnClickOnUpdate=checkValidationMessage(expMessageOnSaveRule);
				
				excelReader.setCellData(xlfile, xlSheetName, 396, 8, actMessageOnClickOnUpdate);
				
				if (actMessageOnSaveRule.equalsIgnoreCase(expMessageOnSaveRule) && 
						actMessageOnClickOnUpdate.equalsIgnoreCase(expMessageOnClickOnUpdate))
				{
	            	System.out.println(" Test Pass:  Rule Created Successful");
	            	excelReader.setCellData(xlfile, xlSheetName,  374, 9, resPass);
					return true;
				}
	            else
	            {
	            	System.out.println("Test Fail:  Rule not Created ");
	            	excelReader.setCellData(xlfile, xlSheetName,  374, 9, resFail);
	                return false;
				}
			 }
			 catch (Exception e) 
		     {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 374, 10, e.getMessage());
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			}
		}
		
		
		                  
		@FindBy(xpath = "//input[@id='txtGeneralMsg_RuleIfMsg_DocCustRules']")
		public static WebElement rules_MessageTabGeneralTXT;

		@FindBy(xpath = "//input[@id='txtCaptionFormat_IF_DocCustRules']")
		public static WebElement rulesTabIFGridEnterCaption;

		@FindBy(xpath = "//input[@id='txtCaptionFormat_Else_DocCustRules']")
		public static WebElement rulesTabElseGridEnterCaption;
		
		
		@FindBy(xpath = "//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-10']")
		public static WebElement rulesTabGrid1st_10thCol;
	
		@FindBy(xpath = "//input[@id='chkMandatoryFormat_IF_DocCustRules']")
		public static WebElement rulesTabGridMandatoryChkbox;		
		
		@FindBy(xpath = "//input[@id='chkNewRecord_Rule_DocCustRules']")
		public static WebElement rulesTabNewRecordChkbox;

		@FindBy(xpath = "//input[@id='chkEdit_Rule_DocCustRules']")
		public static WebElement rulesTabEditChkbox;

		@FindBy(xpath = "//input[@id='chkLoad_Rule_DocCustRules']")
		public static WebElement rulesTabLoadChkbox;

		@FindBy(xpath = "//input[@id='chkOnLeave_Rule_DocCustRules']")
		public static WebElement rulesTabOnLeaveChkbox;

		@FindBy(xpath = "//input[@id='chkOnEnter_Rule_DocCustRules']")
		public static WebElement rulesTabOnEnterChkbox;

		@FindBy(xpath = "//input[@id='chkBeforeDelete_Rule_DocCustRules']")
		public static WebElement rulesTabBeforeDeleteChkbox;

		@FindBy(xpath = "//input[@id='chkIsRuleActive_Rule_DocCustRules']")
		public static WebElement rulesTabActiveChkbox;
		
	 	
		    @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-1']")
		 	public static WebElement rulesGrid1stRow_1stcol ;
		     
		    @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_2-1']")
		 	public static WebElement rulesGrid2ndRow_1stcol ;
		    
		    @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_2-4']")
		 	public static WebElement rulesGrid2ndRow_4thcol ;
		    
		    @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_2-5']")
		 	public static WebElement rulesGrid2ndRow_5thcol ;	    
		    
		    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-1']")
		 	public static WebElement rulesGridElse1stRow_1stcol ;
		     
		    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_2-1']")
		 	public static WebElement rulesGridElse2ndRow_1stcol ;
		    
		    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_2-4']")
		 	public static WebElement rulesGridElse2ndRow_4thcol ;
		    
		    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_2-5']")
		 	public static WebElement rulesGridElse2ndRow_5thcol ;
		    
		    @FindBy(xpath="//select[@id='ddlFieldsDiv_Rule_IF_DocCustRules']")
		 	public static WebElement rulesIFEnterFiled ;
		     
		    @FindBy(xpath="//select[@id='ddlFieldsDiv_Rule_ELSE_DocCustRules']")
		 	public static WebElement rulesElseEnterFiled ;
		   
		     
		   
		   
		     @FindBy(xpath="//select[@id='ddlChangeValueFormat_IF_DocCustRules']")
		 	 public static WebElement rulesIFEnterChangeValueDrpdwn;
		     
		     @FindBy(xpath="//select[@id='ddlChangeValueFormat_ELSE_DocCustRules']")
		 	 public static WebElement rulesElseEnterChangeValueDrpdwn;

		   
		     
		     @FindBy(xpath="//input[@id='txtTextField']")
		 	 public static WebElement rulesIFEnterValue;
		     
		     //Completion of Rule Tab
		   
		  		    
		    
		  // Document Numbering Tab
			 
		 	@FindBy(xpath="//a[@id='771']")
		 	public static WebElement  purchaseVocuherVatView;	
		 	
		 	@FindBy(xpath="//span[@class='dropdown icon-menuicon1 icon-font6 theme_color-inverse pull-right']")
		 	public static WebElement  docNumberingToggleBtn;	
		 	
		 	
		 	
		 	
		 	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_1-0']")
		 	public static WebElement  docNUmneringFirstRowIndex;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_1-1']")
		 	public static WebElement  typeRow1;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_1-2']")
		 	public static WebElement  fieldValueRow1;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_1-3']")
		 	public static WebElement  startingCharacterRow1;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_1-4']")
		 	public static WebElement  noofCharactersRow1;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_2-0']")
		 	public static WebElement  docNUmneringSecondRowIndex;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_2-1']")
		 	public static WebElement  typeRow2;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_2-2']")
		 	public static WebElement  fieldValueRow2;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_2-3']")
		 	public static WebElement  startingCharacterRow2;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_2-4']")
		 	public static WebElement  noofCharactersRow2;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_3-0']")
		 	public static WebElement  docNUmneringThkirdRowIndex;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_3-1']")
		 	public static WebElement  typeRow3;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_3-2']")
		 	public static WebElement  fieldValueRow3;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_3-3']")
		 	public static WebElement  startingCharacterRow3;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_3-4']")
		 	public static WebElement  noofCharactersRow3;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_4-0']")
		 	public static WebElement  docNUmneringFourthRowIndex;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_4-1']")
		 	public static WebElement  typeRow4;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_4-2']")
		 	public static WebElement  fieldValueRow4;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_4-3']")
		 	public static WebElement  startingCharacterRow4;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_4-4']")
		 	public static WebElement  noofCharactersRow4;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_5-0']")
		 	public static WebElement  docNUmneringFifthRowIndex;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_5-1']")
		 	public static WebElement  typeRow5;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_5-2']")
		 	public static WebElement  fieldValueRow5;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_5-3']")
		 	public static WebElement  startingCharacterRow5;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_5-4']")
		 	public static WebElement  noofCharactersRow5;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_6-0']")
		 	public static WebElement  docNUmneringSixthRowIndex;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_6-1']")
		 	public static WebElement  typeRow6;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_6-2']")
		 	public static WebElement  fieldValueRow6;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_6-3']")
		 	public static WebElement  startingCharacterRow6;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_6-4']")
		 	public static WebElement  noofCharactersRow6;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_7-0']")
		 	public static WebElement  docNUmneringSeventhRowIndex;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_7-1']")
		 	public static WebElement  typeRow7;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_7-2']")
		 	public static WebElement  fieldValueRow7;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_7-3']")
		 	public static WebElement  startingCharacterRow7;	
		 	
		 	@FindBy(xpath="//td[@id='docNum_Table_col_7-4']")
		 	public static WebElement  noofCharactersRow7;	
		 	
		 	
		 	
		 	@FindBy(xpath="//select[@id='docNum_TypeDropDown']")
		 	public static WebElement  typeDropDown;	
		 	
		 	@FindBy(xpath="//input[@id='docNum_FieldORValueDropDown']")
		 	public static WebElement  fieldValueTxt;	
		 	
		 	@FindBy(xpath="//select[@id='docNum_FieldORValueDropDown']")
		 	public static WebElement  fieldValueDropDown;	
		 	
		 	@FindBy(xpath="//input[@id='docNum_startCharacterTxtbox']")
		 	public static WebElement  startingCharacterTxt;	
		 	
		 	@FindBy(xpath="//input[@id='docNum_noofCharacterTxtbox']")
		 	public static WebElement  noOfCharacterTxt;
		 	
		 	
		 	
		 
		 			
		 		
		 	@FindBy(xpath="//*[@id='tabsHideDiv']/ul/li/span[2]")
		 	public static List<WebElement>  toggleBtnList;
		 	
		 	
		 	public boolean checkNavigateToDocumentNumberingTabInPurchaseVoucherVatView() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		 excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 	     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(serachMenuTextHomePage));
					System.out.println("Setting buton is enabled");
					serachMenuTextHomePage.click();
					Thread.sleep(2000);
					serachMenuTextHomePage.sendKeys("Configure Transactions");
					
					
					Thread.sleep(3000);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PreferencesBtn));
					PreferencesBtn.click();
					Thread.sleep(2000);
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
					documentCustomization45Btn.click();
					
					
					Thread.sleep(2000);
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersNewVoucherBtn));
					purchaseVouchersNewVoucherBtn.click();
									 	    	
					Thread.sleep(2000);
					
					boolean acttoggleBtnList = documentNumberingBtn.isDisplayed();
					boolean exptoggleBtnList = true;
		 	    	
		 	    	
		 			
		 			if(acttoggleBtnList == exptoggleBtnList) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 404, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 404, 9, resFail);
		 				return false;
		 			}
		 	     }
		 	    
		 
		 			
		 	public boolean checkHeaderBodyandFooterFieldsinDocumentNUmberingTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		 excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 	     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberingBtn));
		 	    	documentNumberingBtn.click();
		 	    	
		 	    	// Header
		 	    	Thread.sleep(2000);
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsLabel));
		 	    	
		 	    	int docNumberingGridHeaderCount = docNumberingGridHeader.size();

		 	    	ArrayList<String> docNumberingGridHeaderArray=new ArrayList<String>();

		 	    	for(int i=0;i<docNumberingGridHeaderCount;i++)
		 	    	{
		 	    		String data = docNumberingGridHeader.get(i).getText();
		 	    		docNumberingGridHeaderArray.add(data);
		 	    	}

		 	    	String actdocNumberingGridHeader = docNumberingGridHeaderArray.toString();

		 	    	String expdocNumberingGridHeader = excelReader.getCellData(xlSheetName, 407, 7);
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 407, 8, actdocNumberingGridHeader);
		 			
		 			System.out.println("Header Display Value Actual      : " + actdocNumberingGridHeader);
		 			System.out.println("Header Display Value Expected    : " + expdocNumberingGridHeader);
		 			
		 			// Body
		 			
		 			int docNumberingGridBodyCount = docNumberingGridBody.size();
		 	    	
		 	    	ArrayList<String> docNumberingGridBodyArray=new ArrayList<String>();

		 	    	for(int i=0;i<docNumberingGridBodyCount;i++)
		 	    	{
		 	    		String data = docNumberingGridBody.get(i).getText();
		 	    		docNumberingGridBodyArray.add(data);
		 	    	}

		 	    	String actdocNumberingGridBody = docNumberingGridBodyArray.toString();

		 	    	String expdocNumberingGridBody = excelReader.getCellData(xlSheetName, 408, 7);
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 408, 8, actdocNumberingGridBody);
		 			
		 			System.out.println("Body Display Value Actual      : " + actdocNumberingGridBody);
		 			System.out.println("Body Display Value Expected    : " + expdocNumberingGridBody);
		 			
		 			// Footer
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsLabel));
		 			
		 	    	String actdocNumberAppearAsLabel = docNumberAppearAsLabel.getText();
		 	    	
		 	    	String expdocNumberAppearAsLabel = excelReader.getCellData(xlSheetName, 409, 7);
		 	    	
		 	    	excelReader.setCellData(xlfile, xlSheetName, 409, 8, actdocNumberAppearAsLabel);
		 			
		 			System.out.println("Footer Display Value Actual      : " + actdocNumberAppearAsLabel);
		 			System.out.println("Footer Display Value Expected    : " + expdocNumberAppearAsLabel);
		 			
		 			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsValue));
		 			
		 	    	boolean docNumberAppearAsValuedisplay = docNumberAppearAsValue.getText().isEmpty();
		 	    	
		 	    	String actdocNumberAppearAsValue = Boolean.toString(docNumberAppearAsValuedisplay);
		 	    	
		 	    	String expdocNumberAppearAsValue = excelReader.getCellData(xlSheetName, 410, 7);
		 	    	
		 	    	excelReader.setCellData(xlfile, xlSheetName, 410, 8, actdocNumberAppearAsValue);
		 			
		 			System.out.println("Footer Display Value Actual      : " + actdocNumberAppearAsValue);
		 			System.out.println("Footer Display Value Expected    : " + expdocNumberAppearAsValue);*/
		 			
		 			if(actdocNumberingGridHeader.equalsIgnoreCase(expdocNumberingGridHeader) && actdocNumberingGridBody.equalsIgnoreCase(expdocNumberingGridBody)
		 					&& actdocNumberAppearAsLabel.equalsIgnoreCase(expdocNumberAppearAsLabel)/*  actdocNumberAppearAsValue.equalsIgnoreCase(expdocNumberAppearAsValue)*/) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 406, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 406, 9, resFail);
		 				return false;
		 			}
		 	     }
		 	  
		 			
		 			
		 	public boolean checkTypeDropdownValues() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		 excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 	     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		 
		 	     try
		 	     {
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeRow1));
		 	    	typeRow1.click();
		 	    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeDropDown));
		 	    	typeDropDown.click();
		 	    	
		 	    	Select typeDropDownSelect= new Select(typeDropDown);
		 	    	
		 	    	List<WebElement> typeDropDownoptions = typeDropDownSelect.getOptions();
		 	    	
		 	    	ArrayList<String> typeDropDownArray=new ArrayList<String>();
		 			 
		 	    	int typeDropDownCount = typeDropDownoptions.size();
		 	    	
		 	    	for(int i=0;i<typeDropDownCount;i++)
		 	    	{
		 	    		String data = typeDropDownoptions.get(i).getText();
		 	    		typeDropDownArray.add(data);
		 	    	}
		 	    	
		 	    	String acttypeDropDown = typeDropDownArray.toString();

		 	    	String exptypeDropDown = "[Login, Character Input, Date, Input, Increment, Department, Place of supply, Jurisdiction]";
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 412, 8, acttypeDropDown);
		 	    	
		 			
		 			System.out.println("typeDropDown Display Value Actual      : " + acttypeDropDown);
		 			System.out.println("typeDropDown Display Value Expected    : " + exptypeDropDown);
		 			
		 			if(acttypeDropDown.equalsIgnoreCase(exptypeDropDown)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 411, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 411, 9, resFail);
		 				return false;
		 			}
		 	     }
		 	     catch (Exception e) 
		 	     {
		 			 String exception =e.getMessage().substring(0, 50);
		 	         excelReader.setExceptionInExcel(xlfile, xlSheetName, 411, 10, exception);
		 	         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		 	         return false;
		 	     }
		 	}		
		 				
		 			
		 			
		 	public boolean checkLoadingValesinFieldsOnSelectingLoginInTypeDropDown() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		 
		 		try
		 		{
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeDropDown));
		 			Select typeDropDownSelect = new Select(typeDropDown);
		 			
		 			typeDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 413, 6));
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldValueRow1));
		 			fieldValueRow1.click();
		 		    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldValueDropDown));
		 	    	fieldValueDropDown.click();
		 	    	
		 	    	Select ss= new Select(fieldValueDropDown);
		 	    	
		 	    	List<WebElement> fieldValueDropDownOptions = ss.getOptions();
		 	    	
		 	    	ArrayList<String> fieldValueDropDownArray=new ArrayList<String>();
		 			 
		 	    	int fieldValueDropDownCount = fieldValueDropDownOptions.size();
		 	    	
		 	    	for(int i=0;i<fieldValueDropDownCount;i++)
		 	    	{
		 	    		String data = fieldValueDropDownOptions.get(i).getText();
		 	    		fieldValueDropDownArray.add(data);
		 	    	}
		 	    	
		 	    	String actfieldValueDropDown = fieldValueDropDownArray.toString();

		 	    	String expfieldValueDropDown = excelReader.getCellData(xlSheetName, 414, 7);
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 414, 8, actfieldValueDropDown);
		 	    	
		 			
		 			System.out.println("fieldValueDropDown Display Value Actual      : " + actfieldValueDropDown);
		 			System.out.println("fieldValueDropDown Display Value Expected    : " + expfieldValueDropDown);
		 			
		 			if(actfieldValueDropDown.equalsIgnoreCase(expfieldValueDropDown)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 413, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 413, 9, resFail);
		 				return false;
		 			}
		 	     }
		 	     catch (Exception e) 
		 	     {
		 			 String exception =e.getMessage().substring(0, 50);
		 	         excelReader.setExceptionInExcel(xlfile, xlSheetName, 413, 10, exception);
		 	         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		 	         return false;
		 	     }
		 	}		
		 			
		 			
		 			
		 			
		 	public boolean checkSelectingLoginNameandInputingStartingValueandNoofCharactersandCheckFooterValue() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		 
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldValueDropDown));
		 			Select typeDropDownSelect= new Select(fieldValueDropDown);
		 			
		 			typeDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 415, 6));
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingCharacterRow1));
		 			startingCharacterRow1.click();
		 			
		 			startingCharacterTxt.sendKeys(Keys.BACK_SPACE);
		 			startingCharacterTxt.sendKeys(excelReader.getCellData(xlSheetName, 416, 6));
		 		    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noofCharactersRow1));
		 	    	noofCharactersRow1.click();
		 	    	
		 	    	noOfCharacterTxt.sendKeys(excelReader.getCellData(xlSheetName, 417, 6));
		 	    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeRow2));
		 	    	typeRow2.click();

		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsValue));
		 	    	
		 	    	String actdocNumberAppearAsValue = docNumberAppearAsValue.getText();
		 	    	
		 	    	String expdocNumberAppearAsValue = excelReader.getCellData(xlSheetName, 416, 7);
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 416, 8, actdocNumberAppearAsValue);
		 	    	
		 			
		 			System.out.println("docNumberAppearAsValue Display Value Actual      : " + actdocNumberAppearAsValue);
		 			System.out.println("docNumberAppearAsValue Display Value Expected    : " + expdocNumberAppearAsValue);
		 			
		 			if(actdocNumberAppearAsValue.equalsIgnoreCase(expdocNumberAppearAsValue)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 415, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 415, 9, resFail);
		 				return false;
		 			}
		 	   
		 	}		
		 			
		 				
		 			
		 	public boolean checkInputingCharacterInputInSecondRowAndCheckFooterValue() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		 
		 		
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeDropDown));
		 			typeDropDown.click();
		 			
		 			Select typeDropDownSelect = new Select(typeDropDown);
		 			
		 			typeDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 418, 6));
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldValueRow2));
		 			fieldValueRow2.click();
		 			
		 			Select fieldValueDropDownSelect = new Select(fieldValueDropDown);
		 			
		 			fieldValueDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 419, 6));
		 			
		 		    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noofCharactersRow2));
		 	    	noofCharactersRow2.click();
		 	    	
		 	    	noOfCharacterTxt.sendKeys(excelReader.getCellData(xlSheetName, 420, 6));
		 	    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeRow3));
		 	    	typeRow3.click();

		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsValue));
		 	    	
		 	    	String actdocNumberAppearAsValue = docNumberAppearAsValue.getText();
		 	    	
		 	    	String expdocNumberAppearAsValue = excelReader.getCellData(xlSheetName, 419, 7);
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 419, 8, actdocNumberAppearAsValue);
		 	    	
		 			
		 			System.out.println("docNumberAppearAsValue Display Value Actual      : " + actdocNumberAppearAsValue);
		 			System.out.println("docNumberAppearAsValue Display Value Expected    : " + expdocNumberAppearAsValue);
		 			
		 			if(actdocNumberAppearAsValue.equalsIgnoreCase(expdocNumberAppearAsValue)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 418, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 418, 9, resFail);
		 				return false;
		 			}
		 	   
		 	}		
		 			
		 			
		 			
		 	public boolean checkLoadingValesinFieldsOnSelectingWareHouseInTypeDropDown() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		 
		 		
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeDropDown));
		 			Select typeDropDownSelect= new Select(typeDropDown);
		 			
		 			typeDropDownSelect.selectByVisibleText("Department");
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldValueRow3));
		 			fieldValueRow3.click();
		 		    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldValueDropDown));
		 	    	fieldValueDropDown.click();
		 	    			 	    	
		 	    	Thread.sleep(2000);
		 	    
		 	    	Select fieldValueDropDownSelect= new Select(fieldValueDropDown);
		 	    	
		 	    	List<WebElement> fieldValueDropDownOptions = fieldValueDropDownSelect.getOptions();
		 	    	
		 	    	ArrayList<String> fieldValueDropDownArray=new ArrayList<String>();
		 			 
		 	    	int fieldValueDropDownCount = fieldValueDropDownOptions.size();
		 	    	
		 	    	for(int i=0;i<fieldValueDropDownCount;i++)
		 	    	{
		 	    		String data = fieldValueDropDownOptions.get(i).getText();
		 	    		fieldValueDropDownArray.add(data);
		 	    	}
		 	    	
		 	    	String actfieldValueDropDown = fieldValueDropDownArray.toString();

		 	    	String expfieldValueDropDown = "[Name, Code, Group Level 1, Group Level 1 Code]";
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 422, 8, actfieldValueDropDown);
		 				    		
		 			System.out.println("fieldValueDropDown Display Value Actual      : " + actfieldValueDropDown);
		 			System.out.println("fieldValueDropDown Display Value Expected    : " + expfieldValueDropDown);
		 			
		 			if(actfieldValueDropDown.equalsIgnoreCase(expfieldValueDropDown)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 421, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 421, 9, resFail);
		 				return false;
		 			}
		 	  
		 	}		
		 			
		 				
		 		
		 	public boolean checkSelectingNameandInputingStartingValueandNoofCharactersandCheckFooterValue() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		 
		 		try
		 		{
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldValueDropDown));
		 			Select fieldValueDropDownSelect= new Select(fieldValueDropDown);
		 			
		 			fieldValueDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 423, 6));
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingCharacterRow3));
		 			startingCharacterRow3.click();
		 			
		 			startingCharacterTxt.sendKeys(Keys.BACK_SPACE);
		 			startingCharacterTxt.sendKeys(excelReader.getCellData(xlSheetName, 424, 6));
		 		    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noofCharactersRow3));
		 	    	noofCharactersRow3.click();
		 	    	
		 	    	noOfCharacterTxt.sendKeys(excelReader.getCellData(xlSheetName, 425, 6));
		 	    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeRow4));
		 	    	typeRow4.click();
		 	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsValue));
		 	    	
		 	    	String actdocNumberAppearAsValue = docNumberAppearAsValue.getText();
		 	    	
		 	    	String expdocNumberAppearAsValue = excelReader.getCellData(xlSheetName, 424, 7);
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 424, 8, actdocNumberAppearAsValue);
		 	    	
		 			
		 			System.out.println("docNumberAppearAsValue Display Value Actual      : " + actdocNumberAppearAsValue);
		 			System.out.println("docNumberAppearAsValue Display Value Expected    : " + expdocNumberAppearAsValue);
		 			
		 			if(actdocNumberAppearAsValue.equalsIgnoreCase(expdocNumberAppearAsValue)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 423, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 423, 9, resFail);
		 				return false;
		 			}
		 	     }
		 	     catch (Exception e) 
		 	     {
		 			 String exception =e.getMessage().substring(0, 50);
		 	         excelReader.setExceptionInExcel(xlfile, xlSheetName, 423, 10, exception);
		 	         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		 	         return false;
		 	     }
		 	}		
		 			
		 	public boolean checkInputingCharacterInputInFourthRowAndCheckFooterValue() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 	
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeDropDown));
		 			typeDropDown.click();
		 			
		 			Select typeDropDownSelect = new Select(typeDropDown);
		 			
		 			typeDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 426, 6));
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldValueRow4));
		 			fieldValueRow4.click();
		 			
		 			Select fieldValueDropDownSelect = new Select(fieldValueDropDown);
		 			
		 			fieldValueDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 427, 6));
		 			
		 		    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noofCharactersRow4));
		 	    	noofCharactersRow4.click();
		 	    	
		 	    	noOfCharacterTxt.sendKeys(excelReader.getCellData(xlSheetName, 428, 6));
		 	    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeRow5));
		 	    	typeRow5.click();

		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsValue));
		 	    	
		 	    	String actdocNumberAppearAsValue = docNumberAppearAsValue.getText();
		 	    	
		 	    	String expdocNumberAppearAsValue = excelReader.getCellData(xlSheetName, 427, 7);
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 427, 8, actdocNumberAppearAsValue);
		 	    	
		 			
		 			System.out.println("docNumberAppearAsValue Display Value Actual      : " + actdocNumberAppearAsValue);
		 			System.out.println("docNumberAppearAsValue Display Value Expected    : " + expdocNumberAppearAsValue);
		 			
		 			if(actdocNumberAppearAsValue.equalsIgnoreCase(expdocNumberAppearAsValue)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 426, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 426, 9, resFail);
		 				return false;
		 			}
		 	    
		 	}		
		 	
		 	public boolean checkInputingInputInTypeColumnInFifthRowAndCheckFooterValue() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		 
		 		
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeDropDown));
		 			typeDropDown.click();
		 			
		 			Select typeDropDownSelect = new Select(typeDropDown);
		 			
		 			typeDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 429, 6));
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldValueRow5));
		 			fieldValueRow5.click();
		 			
		 			
		 			fieldValueTxt.sendKeys(excelReader.getCellData(xlSheetName, 430, 6));
		 			
		 		    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noofCharactersRow5));
		 	    	noofCharactersRow5.click();
		 	    	
		 	    	noOfCharacterTxt.sendKeys(excelReader.getCellData(xlSheetName, 431, 6));
		 	    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeRow6));
		 	    	typeRow6.click();

		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsValue));
		 	    	
		 	    	String actdocNumberAppearAsValue = docNumberAppearAsValue.getText();
		 	    	
		 	    	String expdocNumberAppearAsValue = excelReader.getCellData(xlSheetName, 430, 7);
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 430, 8, actdocNumberAppearAsValue);
		 	    	
		 			
		 			System.out.println("docNumberAppearAsValue Display Value Actual      : " + actdocNumberAppearAsValue);
		 			System.out.println("docNumberAppearAsValue Display Value Expected    : " + expdocNumberAppearAsValue);
		 			
		 			if(actdocNumberAppearAsValue.equalsIgnoreCase(expdocNumberAppearAsValue)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 429, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 429, 9, resFail);
		 				return false;
		 			}
		 	   
		 	}		
		 			
		 	
		 	public boolean checkInputingIncrementInTypeColumnInFifthRowAndCheckFooterValue() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 	
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeDropDown));
		 			typeDropDown.click();
		 			
		 			Select typeDropDownSelect = new Select(typeDropDown);
		 			
		 			typeDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 432, 6));
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldValueRow6));
		 			fieldValueRow6.click();
		 			
		 			
		 			fieldValueTxt.sendKeys(excelReader.getCellData(xlSheetName, 433, 6));
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingCharacterRow6));
		 			startingCharacterRow6.click();
		 	    	
		 	    	startingCharacterTxt.sendKeys(excelReader.getCellData(xlSheetName, 434, 6));
		 			
		 		    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noofCharactersRow6));
		 	    	noofCharactersRow6.click();
		 	    	
		 	    	noOfCharacterTxt.sendKeys(excelReader.getCellData(xlSheetName, 435, 6));
		 	    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(typeRow7));
		 	    	typeRow7.click();

		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsValue));
		 	    	
		 	    	String actdocNumberAppearAsValue = docNumberAppearAsValue.getText();
		 	    	
		 	    	String expdocNumberAppearAsValue = excelReader.getCellData(xlSheetName, 433, 7);
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 433, 8, actdocNumberAppearAsValue);
		 	    	
		 			
		 			System.out.println("docNumberAppearAsValue Display Value Actual      : " + actdocNumberAppearAsValue);
		 			System.out.println("docNumberAppearAsValue Display Value Expected    : " + expdocNumberAppearAsValue);
		 			
		 			if(actdocNumberAppearAsValue.equalsIgnoreCase(expdocNumberAppearAsValue)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 432, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 432, 9, resFail);
		 				return false;
		 		
		 	}	
		 	}
		 	
		 	public boolean checkSavingOnClickingUpdateOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		 
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		 			updateBtn.click();
		 			
		 			String expSaveMessage = excelReader.getCellData(xlSheetName, 437, 7);
		 			 
		 			String actSaveMessage = checkValidationMessage(expSaveMessage);
		 			 
		 			excelReader.setCellData(xlfile, xlSheetName, 437, 8, actSaveMessage);
		 			
		 			System.out.println("SaveMessage Display Value Actual      : " + actSaveMessage);
		 			System.out.println("SaveMessage Display Value Expected    : " + expSaveMessage);
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		 			CloseBtnINDC.click();
		 			
		 			if(actSaveMessage.equalsIgnoreCase(expSaveMessage)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 436, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 436, 9, resFail);
		 				return false;
		 			}
		 	    
		 	}		
		 			
		 		@FindBy(xpath="//*[@id='768']")	
		 		public static WebElement purchaseVouchersBtnn;
		 		
		 		@FindBy(xpath="//*[@id='dvSearchBx']/div[2]/span[1]")	
		 		public static WebElement purchaseVouchersNewBtnn;
		 		
		 		@FindBy(xpath="//*[@id='769']")	
		 		public static WebElement purchaseVouchersVATBtn;
		 		
		 	
		 	public boolean checkSavedFieldsinPvVatViewVoucherDocumentNUmberingTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 	{	
		 		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 		
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(serachMenuTextHomePage));
					System.out.println("Setting buton is enabled");
					serachMenuTextHomePage.click();
					serachMenuTextHomePage.sendKeys("Configure Transactions");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchMenuTextClick));
					searchMenuTextClick.click();	  
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
					documentCustomization45Btn.click();
					Thread.sleep(3000);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVATBtn));//*[@id="768"]
					purchaseVouchersVATBtn.click();
		 	    	
		 	    	
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberingBtn));
		 	    	documentNumberingBtn.click();
		 	    	
		 	    	// Header
		 	    	Thread.sleep(2000);
		 	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsLabel));
		 	    	
		 	    	int docNumberingGridHeaderCount = docNumberingGridHeader.size();

		 	    	ArrayList<String> docNumberingGridHeaderArray=new ArrayList<String>();

		 	    	for(int i=0;i<docNumberingGridHeaderCount;i++)
		 	    	{
		 	    		String data = docNumberingGridHeader.get(i).getText();
		 	    		docNumberingGridHeaderArray.add(data);
		 	    	}

		 	    	String actdocNumberingGridHeader = docNumberingGridHeaderArray.toString();

		 	    	String expdocNumberingGridHeader = excelReader.getCellData(xlSheetName, 439, 7);
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 439, 8, actdocNumberingGridHeader);
		 			
		 			System.out.println("Header Display Value Actual      : " + actdocNumberingGridHeader);
		 			System.out.println("Header Display Value Expected    : " + expdocNumberingGridHeader);
		 			
		 			// Body
		 			
		 			int docNumberingGridBodyCount = docNumberingGridBody.size();
		 	    	
		 	    	ArrayList<String> docNumberingGridBodyArray=new ArrayList<String>();

		 	    	for(int i=0;i<docNumberingGridBodyCount;i++)
		 	    	{
		 	    		String data = docNumberingGridBody.get(i).getText();
		 	    		docNumberingGridBodyArray.add(data);
		 	    	}

		 	    	String actdocNumberingGridBody = docNumberingGridBodyArray.toString();

		 	    	String expdocNumberingGridBody = "[1, Login, Login Name, 0, 2, 2, Character Input, /, 0, 1, 3, Department, Name, 0, 3, 4, Character Input, /, 0, 1, 5, Input, TEXT, 0, 1, 6, Increment, 0, 0, 1, 7,  ,  ,  ,  , 8,  ,  ,  ,  , 9,  ,  ,  ,  , 10,  ,  ,  ,  , 11,  ,  ,  ,  , 12,  ,  ,  ,  , 13,  ,  ,  ,  , 14,  ,  ,  ,  , 15,  ,  ,  ,  , 16,  ,  ,  ,  , 17,  ,  ,  ,  , 18,  ,  ,  ,  , 19,  ,  ,  ,  , 20,  ,  ,  ,  ]";
		 	    	
		 			excelReader.setCellData(xlfile, xlSheetName, 440, 8, actdocNumberingGridBody);
		 			
		 			System.out.println("Body Display Value Actual      : " + actdocNumberingGridBody);
		 			System.out.println("Body Display Value Expected    : " + expdocNumberingGridBody);
		 			
		 			// Footer
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsLabel));
		 			
		 	    	String actdocNumberAppearAsLabel = docNumberAppearAsLabel.getText();
		 	    	
		 	    	String expdocNumberAppearAsLabel = excelReader.getCellData(xlSheetName, 441, 7);
		 	    	
		 	    	excelReader.setCellData(xlfile, xlSheetName, 441, 8, actdocNumberAppearAsLabel);
		 			
		 			System.out.println("Footer Display Value Actual      : " + actdocNumberAppearAsLabel);
		 			System.out.println("Footer Display Value Expected    : " + expdocNumberAppearAsLabel);
		 			
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(docNumberAppearAsValue));
		 			
		 	    	String actdocNumberAppearAsValue = docNumberAppearAsValue.getText();
		 	    	
		 	    	String expdocNumberAppearAsValue = excelReader.getCellData(xlSheetName, 442, 7);
		 	    	
		 	    	excelReader.setCellData(xlfile, xlSheetName, 442, 8, actdocNumberAppearAsValue);
		 			
		 			System.out.println("Footer Display Value Actual      : " + actdocNumberAppearAsValue);
		 			System.out.println("Footer Display Value Expected    : " + expdocNumberAppearAsValue);
		 			
		 			
		 			
		 			
		 			if(actdocNumberingGridHeader.equalsIgnoreCase(expdocNumberingGridHeader) && actdocNumberingGridBody.equalsIgnoreCase(expdocNumberingGridBody)
		 					&& actdocNumberAppearAsLabel.equalsIgnoreCase(expdocNumberAppearAsLabel) && actdocNumberAppearAsValue.equalsIgnoreCase(expdocNumberAppearAsValue)) 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 438, 9, resPass);
		 				return true;
		 			} 
		 			else 
		 			{
		 				excelReader.setCellData(xlfile, xlSheetName, 438, 9, resFail);
		 				return false;
		 			}
		 	   
		 	}	
		 	

		  
		  @FindBy(xpath="//select[@id='triggers_allVoucherDropDown']")
		  public static WebElement editLayoutTriggersAllVouchers;  	
		  
		  
		  @FindBy(xpath="//*[@id='17_1_AdvanceFilter_']/table/tbody/tr/td[1]/select")
		  public static WebElement editLayoutTriggerValue;  		
	  
		  
		public boolean 	checkRaiseDocumentOptionInTriggers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
				
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
				Thread.sleep(2000);
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersBtn));
				triggersBtn.click();
				
				Thread.sleep(4000);
				  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(TriggersExpandBtn));
				  TriggersExpandBtn.click();
				
				
				
					
				Thread.sleep(4000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggerName1));
				editLayoutTriggerName1.click();
				editLayoutTriggerName1.clear();
				Thread.sleep(1000);
				editLayoutTriggerName1.sendKeys(excelReader.getCellData(xlSheetName, 444, 6));
				editLayoutTriggerName1.sendKeys(Keys.TAB);			
				Thread.sleep(3000);
				editLayoutTriggerName1.sendKeys(Keys.TAB);	
				Thread.sleep(2000);
				
				
				
				
				  Thread.sleep(3000);
					  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ActionExpandBtn));
					  ActionExpandBtn.click();
						
					  Thread.sleep(3000);
						  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AlertExpandBtn));
						  AlertExpandBtn.click();
						  Thread.sleep(2000);
				editLayoutTriggerValue.click();
				editLayoutTriggerValue.sendKeys(Keys.TAB);
				
				//editLayoutTriggerName.sendKeys(Keys.TAB);
				
				/*editLayoutTriggerValue.click();
				editLayoutTriggerValue.sendKeys(Keys.TAB);
					
				
				if (errorMessage.isDisplayed()==true) 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtnINDC));
					errorMessageCloseBtnINDC.click();
				}*/
				
				
				Thread.sleep(3000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggerRaiseDoc));
				editLayoutTriggerRaiseDoc.click();
				
				Thread.sleep(3000);
					
				getAction().moveToElement(editLayoutTriggersAllVouchers).build().perform();
				Thread.sleep(3000);
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(editLayoutTriggersAllVouchers));
				boolean allVoucher=editLayoutTriggersAllVouchers.isDisplayed();
				
				String actAllVouchersDisplay=Boolean.toString(allVoucher);
				String expAllVouchersDisplay=excelReader.getCellData(xlSheetName, 445, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 445, 8, actAllVouchersDisplay);
				
				if(actAllVouchersDisplay.equalsIgnoreCase(expAllVouchersDisplay))
				{
					System.out.println("Test Pass : All Vouchers Displayed Successfully");
					excelReader.setCellData(xlfile, xlSheetName, 443, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : All Vouchers NOt Displayed  Successfully");
					excelReader.setCellData(xlfile, xlSheetName, 443, 9, resFail);
					return false;
				}
				}
				
				
			
			                     
				  @FindBy(xpath="//*[@id='panelsStayOpen-collapseThree']/div[2]/label[1]/span")
				  public static WebElement editLayoutTriggerRaiseDoc;  	
				
			public boolean 	checkSaveOptionInTriggerTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				
				Thread.sleep(4000);
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggersAllVouchers));//*[@id="triggers_allVoucherDropDown"]
				editLayoutTriggersAllVouchers.click();
				editLayoutTriggersAllVouchers.sendKeys(excelReader.getCellData(xlSheetName, 446, 6));
				editLayoutTriggersAllVouchers.sendKeys(Keys.TAB);*/
				
				
				
				Select sc =new Select(editLayoutTriggersAllVouchers);
				sc.selectByVisibleText("Purchases Orders");
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggersSaveBtn));
				editLayoutTriggersSaveBtn.click();
				
				
				String expSaveMessage = excelReader.getCellData(xlSheetName, 447, 7);
	 			 
	 			String actSaveMessage = checkValidationMessage(expSaveMessage);
	 			 
	 			excelReader.setCellData(xlfile, xlSheetName, 447, 8, actSaveMessage);
				
				
				if(actSaveMessage.equalsIgnoreCase(expSaveMessage))
				{
					System.out.println("Test Pass :Trigger Saved  Successfully");
					excelReader.setCellData(xlfile, xlSheetName, 446, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Trigger Not Saved  Successfully");
					excelReader.setCellData(xlfile, xlSheetName, 446, 9, resFail);
					return false;
				}
			}
				
			
			


		public boolean 	checkDeleteTriggerOptionInTriggers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
				
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggerName1));
				editLayoutTriggerName1.click();
				editLayoutTriggerName1.sendKeys(Keys.END);
				editLayoutTriggerName1.sendKeys(Keys.SHIFT,Keys.HOME);
				editLayoutTriggerName1.sendKeys(excelReader.getCellData(xlSheetName, 448, 6));
				Thread.sleep(2000);
				editLayoutTriggerName1.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggerDeleteBtn));
				editLayoutTriggerDeleteBtn.click();
						
				 getWaitForAlert();
				 
				boolean AlertPresent=getIsAlertPresent();
				
				String actAlertPresent=Boolean.toString(AlertPresent);
				String expAlertPresent=excelReader.getCellData(xlSheetName, 449, 7);
				excelReader.setCellData(xlfile, xlSheetName, 449, 8, actAlertPresent);
				
				System.out.println(" ALert is Present : "+actAlertPresent+" Value Expected : "+expAlertPresent);
				
	           
				System.out.println("Select Options In Inventory Tab and Click on Update  Value Actual : " + actAlertPresent +  " Value Expected : " + expAlertPresent);
			       
				String actMessageOnUpdateInAlert = getAlert().getText();
				String expMessageOnUpdateInAlert = excelReader.getCellData(xlSheetName, 450, 7);
				
				excelReader.setCellData(xlfile, xlSheetName, 450, 8, actMessageOnUpdateInAlert);
				
				System.out.println("Select Options In Inventory Tab and Click on Ok  Value Actual : " + actMessageOnUpdateInAlert +  " Value Expected : " + expMessageOnUpdateInAlert);
			    
				Thread.sleep(2000);
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				
				
				if(actAlertPresent.equalsIgnoreCase(expAlertPresent) && actMessageOnUpdateInAlert.equalsIgnoreCase(expMessageOnUpdateInAlert))
				{
					System.out.println("Test Pass : Trigger Deleted  Successfully");
					excelReader.setCellData(xlfile, xlSheetName, 448, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :Created Trigger Not Deleted  Successfully");
					excelReader.setCellData(xlfile, xlSheetName, 448, 9, resFail);
					return false;
				}
			}
		
			
		  
			  
			
		  
			
			
			/*@FindBy(xpath="//div[@id='rightPanelMain']//li[8]//ul[1]//li[1]//a[1]")
			public static WebElement  triggerVendorAcName;
			*/
			
			/*@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[12]/div[1]/div[3]/div/div[1]/div/span/div[1]/table/tbody/tr/td[2]/div/ul/li[8]/ul/li[1]/a")
			public static WebElement  triggerVendorAcName;
			*/
			
		
			
			@FindBy(xpath="//*[@id='4']")
			public static WebElement  triggerVendorAc;
			
			@FindBy(xpath="//*[@id='5002']")
			public static WebElement  triggerNameUnderVendor;
			
			
			public boolean 	checkSaveTriggerWithRaiseDocumentOptionInTriggers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggerName1));
				editLayoutTriggerName1.click();
				editLayoutTriggerName1.sendKeys(Keys.END);
				editLayoutTriggerName1.sendKeys(Keys.SHIFT,Keys.HOME);
				editLayoutTriggerName1.sendKeys(excelReader.getCellData(xlSheetName, 451, 6));
				editLayoutTriggerName1.sendKeys(Keys.TAB);			
				Thread.sleep(3000);
				editLayoutTriggerName1.sendKeys(Keys.TAB);	
				Thread.sleep(2000);
				
				
				  Thread.sleep(3000);
				  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ActionExpandBtn));
				  ActionExpandBtn.click();
					
				  Thread.sleep(3000);
					  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AlertExpandBtn));
					  AlertExpandBtn.click();
					  Thread.sleep(2000);
				editLayoutTriggerValue.click();
				editLayoutTriggerValue.sendKeys(Keys.TAB);
					
				Thread.sleep(5000);
			
				triggersConjuctionDrpdwn.click();
                Thread.sleep(2000);		
				triggersConjuctionDrpdwn.sendKeys(Keys.ARROW_DOWN);			
				triggersConjuctionDrpdwn.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersSelectFieldTxt));
				triggersSelectFieldTxt.click();
							
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggerVendorACExpansionBtn));
				triggerVendorACExpansionBtn.click();
				
				Thread.sleep(5000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggerVendorAcName));
				triggerVendorAcName.click();
				
				Thread.sleep(2000);
			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersSelectOperdrpdwn));
				triggersSelectOperdrpdwn.click();
				triggersSelectOperdrpdwn.sendKeys("Equal");
				
				
				Thread.sleep(5000);
				triggersSelectOperdrpdwn.sendKeys(Keys.TAB);
				
				Thread.sleep(5000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersCompareWithdrpdwn));
				triggersCompareWithdrpdwn.click();
				
				triggersCompareWithdrpdwn.sendKeys(Keys.ARROW_DOWN);
				Thread.sleep(2000);
				triggersCompareWithdrpdwn.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersCompareWithdrpdwn));
				triggersCompareWithdrpdwn.click();
				
				
				Thread.sleep(2000);
							
				triggersValueTxt.click();
				
				triggersValueToEnterTxt.click();
				Thread.sleep(3000);
				triggersValueToEnterTxt.sendKeys("Vendor A");	
							
				Thread.sleep(2000);
				
				triggersValueToEnterTxt.sendKeys(Keys.TAB);
	
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggerRaiseDoc));
				editLayoutTriggerRaiseDoc.click();
				
				getAction().moveToElement(editLayoutTriggersAllVouchers).build().perform();
				Thread.sleep(3000);
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(editLayoutTriggersAllVouchers));
				boolean actdata=editLayoutTriggersAllVouchers.isDisplayed();
				boolean expdata=true;
				
							
			/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggersAllVouchers));
				editLayoutTriggersAllVouchers.click();
				editLayoutTriggersAllVouchers.sendKeys("Job Orders");
				editLayoutTriggersAllVouchers.sendKeys(Keys.ENTER);*/
				
				Select sc = new Select(editLayoutTriggersAllVouchers);
						sc.selectByVisibleText("Job Order");//Job Order
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggersSaveBtn));
				editLayoutTriggersSaveBtn.click();
				
				String expSaveMessage = excelReader.getCellData(xlSheetName, 453, 7);
	 			String actSaveMessage = checkValidationMessage(expSaveMessage);
	 			excelReader.setCellData(xlfile, xlSheetName, 453, 8, actSaveMessage);
				
				
	 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
				updateBtn.click();
				
				
				String expUpdateMessage = excelReader.getCellData(xlSheetName, 454, 7);
	 			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
	 			excelReader.setCellData(xlfile, xlSheetName, 454, 8, actUpdateMessage);
	 			
	 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
	 			CloseBtnINDC.click();
	 			
				if(actdata==expdata && actSaveMessage.equalsIgnoreCase(expSaveMessage))
				{
					System.out.println("Test Pass : Trigger  Added Successfully");
					excelReader.setCellData(xlfile, xlSheetName, 451, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Trigger NOT Added Successfully");
					excelReader.setCellData(xlfile, xlSheetName, 451, 9, resFail);
					return false;
				}
			}
		  


			@FindBy(xpath="//*[@id='17_1_AdvanceFilter']/table/tbody/tr/td[5]/input")
			public static WebElement  triggersValue;
			            
        	
			public boolean 	checkEditingInTriggersTabUnderPVVATView() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
										
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(serachMenuTextHomePage));
				System.out.println("Setting buton is enabled");
				serachMenuTextHomePage.click();
				serachMenuTextHomePage.sendKeys("Configure Transactions");
				serachMenuTextHomePage.sendKeys(Keys.ENTER);
				
				Thread.sleep(4000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PreferencesBtn));
				PreferencesBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
				documentCustomization45Btn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersNewVoucherBtn));
				purchaseVouchersNewVoucherBtn.click();
	 	   			
		        Thread.sleep(2000);
					
				
				Thread.sleep(2000);
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersBtn));
				triggersBtn.click();			

				Thread.sleep(2000);		
				
				
				Thread.sleep(2000);
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(TriggersExpandBtn));
			    TriggersExpandBtn.click();			

				Thread.sleep(2000);	
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggerName));
				editLayoutTriggerName.click();
				
				editLayoutTriggerName.sendKeys(Keys.SHIFT,Keys.HOME);
				editLayoutTriggerName.sendKeys(Keys.BACK_SPACE);
				
				editLayoutTriggerName.sendKeys(Keys.CLEAR);
				
				Thread.sleep(2000);
				editLayoutTriggerName.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				  Thread.sleep(3000);
				  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ActionExpandBtn));
				  ActionExpandBtn.click();
					
				  Thread.sleep(3000);
					  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AlertExpandBtn));
					  AlertExpandBtn.click();
					  Thread.sleep(2000);
				
				triggersValueTxtGetValue.click();
				
				Thread.sleep(2000);
							
				triggersValueTxt.sendKeys("Vendor B");	
							
				Thread.sleep(2000);
				
				triggersValueTxt.sendKeys(Keys.TAB);
				
                Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersConjuctionDrpdwn));
				Select triggersConjuctionDrpdwnSelect = new Select(triggersConjuctionDrpdwn);
				String acttriggersConjuctionDrpdwn=triggersConjuctionDrpdwnSelect.getFirstSelectedOption().getText();
				String exptriggersConjuctionDrpdwn=" Where ";
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersSelectFieldTxt));
                String acttriggersSelectFieldTxt= triggersSelectFieldTxt.getAttribute("value");
                String exptriggersSelectFieldTxt="Name";
               
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersSelectOperdrpdwn));
				Select triggersSelectOperdrpdwnSelect = new Select(triggersSelectOperdrpdwn);
				String acttriggersSelectOperdrpdwn=triggersSelectOperdrpdwnSelect.getFirstSelectedOption().getText();
				String exptriggersSelectOperdrpdwn=" Equal to ";
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersCompareWithdrpdwn));
				Select triggersCompareWithdrpdwnSelect = new Select(triggersCompareWithdrpdwn);
				String acttriggersCompareWithdrpdwn=triggersCompareWithdrpdwnSelect.getFirstSelectedOption().getText();
				String exptriggersCompareWithdrpdwn=" value ";
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(triggersSelectFieldTxt));
                String acttriggersValueToEnterTxt= triggersValueTxtGetValue.getAttribute("value");
                String exptriggersValueToEnterTxt="Vendor B";
                
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(editLayoutTriggersAllVouchers));
				boolean actdata=editLayoutTriggersAllVouchers.isDisplayed();
				boolean expdata=true;
				
				System.out.println("triggersConjuctionDrpdwn  : ."+acttriggersConjuctionDrpdwn  +". Value Expected :"+exptriggersConjuctionDrpdwn);
				System.out.println("triggersSelectFieldTxt    : ."+acttriggersSelectFieldTxt    +". Value Expected :"+exptriggersSelectFieldTxt);
				System.out.println("triggersSelectOperdrpdwn  : ."+acttriggersSelectOperdrpdwn  +". Value Expected :"+exptriggersSelectOperdrpdwn);
				System.out.println("triggersCompareWithdrpdwn : ."+acttriggersCompareWithdrpdwn +". Value Expected :"+exptriggersCompareWithdrpdwn);
				System.out.println("triggersValueToEnterTxt   : ."+acttriggersValueToEnterTxt   +". Value Expected :"+exptriggersValueToEnterTxt);
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTriggersSaveBtn));
				editLayoutTriggersSaveBtn.click();
				
				String expSaveMessage = excelReader.getCellData(xlSheetName, 453, 7);
	 			String actSaveMessage = checkValidationMessage(expSaveMessage);
	 			excelReader.setCellData(xlfile, xlSheetName, 453, 8, actSaveMessage);			
				
	 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
				updateBtn.click();
								
				String expUpdateMessage = excelReader.getCellData(xlSheetName, 454, 7);
	 			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
	 			excelReader.setCellData(xlfile, xlSheetName, 454, 8, actUpdateMessage);
				
				if(actdata==expdata && actSaveMessage.equalsIgnoreCase(expSaveMessage) && 
						acttriggersCompareWithdrpdwn.equalsIgnoreCase(exptriggersCompareWithdrpdwn) && 
						acttriggersConjuctionDrpdwn.equalsIgnoreCase(exptriggersConjuctionDrpdwn) && 
						acttriggersSelectFieldTxt.equalsIgnoreCase(exptriggersSelectFieldTxt) && 
						acttriggersSelectOperdrpdwn.equalsIgnoreCase(exptriggersSelectOperdrpdwn) && 
						acttriggersValueToEnterTxt.equalsIgnoreCase(exptriggersValueToEnterTxt)
						&& actUpdateMessage.equalsIgnoreCase(expUpdateMessage))
				{
					System.out.println("Test Pass : Trigger  Edited Successfully");
					excelReader.setCellData(xlfile, xlSheetName, 451, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Trigger NOT Edited Successfully");
					excelReader.setCellData(xlfile, xlSheetName, 451, 9, resFail);
					return false;
				}
			}
		  

	   public boolean checkLogoutUserDocumentCustOptions() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	   {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		 try
			{
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			  userNameDisplay.click();
			 
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			  logoutOption.click();
			  
			  Thread.sleep(2000);
			  
			  boolean actUserLoginPage              = username.isDisplayed() && username.isEnabled()
	                                                  && password.isDisplayed() && password.isEnabled();
	                                         
			  boolean expUserLoginPage              = true;
			  
			  if(actUserLoginPage==expUserLoginPage)  
		      {
				System.out.println("***Test Pass: Login Successfull***");
				excelReader.setCellData(xlfile, xlSheetName, 285, 9, resPass);
				return true;
			  }
		      else
		      {
		  	 
				System.out.println("***Test Fail: Login Not Successfull***");
				excelReader.setCellData(xlfile, xlSheetName, 285, 9, resFail);
				return false;
			  }
			}
			catch (Exception e)
			{
			 	String exception = e.getMessage();
			 	excelReader.setCellData(xlfile, xlSheetName, 285, 10, exception);	
				return false;
			}
		}
	
		     

                 

       
			
			
			
			  
//33

		  
	
	
	public boolean checkSalesOrderVoucherfromtheDocumentsList() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersBtn));

		boolean actsalesOrdersBtn		=salesOrdersBtn.isDisplayed();
		boolean expsalesOrdersBtn		=true;
		
		System.out.println("***************************************checkSalesOrderVoucherfromtheDocumentsList***********************************************");
		
		System.out.println("SalesOrdersBtn   : "+actsalesOrdersBtn+"  value expected  "+expsalesOrdersBtn);
				
		if(actsalesOrdersBtn==expsalesOrdersBtn)
		{
			System.out.println("Test Pass : displaying Sales Order in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 103, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not displaying Sales Order in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 103, 9, resFail);
			return false;
		}
	}
		
	
	
	public boolean checkSalesOrdersOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersBtn));
		salesOrdersBtn.click();
		
		  Thread.sleep(2000);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalExpandBtn));
		    generalExpandBtn.click();
		    Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt					=titleTxt.getAttribute("value");
		String exptitleTxt					="Sales Orders";
		
		boolean actdocumentsTab				=documentsTab.isDisplayed();
		boolean actmiscellaneousTab			=miscellaneousTab.isDisplayed();
		boolean acteditScreenTab			=editScreenTab.isDisplayed();
		boolean actinventoryoptionsTab		=inventoryoptionsTab.isDisplayed();
		boolean acteditLayoutTab			=editLayoutTab.isDisplayed();
		
		
		boolean expdocumentsTab				=true;
		boolean expmiscellaneousTab			=true;
		boolean expeditScreenTab			=true;
		boolean expinventoryoptionsTab		=true;
		boolean expeditLayoutTab			=true;
		
		
		System.out.println("*************************************checkSalesOrdersOptions**************************************");
		
		System.out.println("TitleTxt             : "+acttitleTxt             +"  value expected  "+exptitleTxt);
		System.out.println("DocumentsTab         : "+actdocumentsTab         +"  value expected  "+expdocumentsTab);
		System.out.println("MiscellaneousTab     : "+actmiscellaneousTab     +"  value expected  "+expmiscellaneousTab);
		System.out.println("EditScreenTab        : "+acteditScreenTab        +"  value expected  "+expeditScreenTab);
		System.out.println("InventoryoptionsTab  : "+actinventoryoptionsTab  +"  value expected  "+expinventoryoptionsTab);
		System.out.println("EditLayoutTab        : "+acteditLayoutTab        +"  value expected  "+expeditLayoutTab);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt) && actdocumentsTab==expdocumentsTab && actmiscellaneousTab==expmiscellaneousTab && acteditScreenTab==expeditScreenTab &&
			actinventoryoptionsTab==expinventoryoptionsTab && acteditLayoutTab==expeditLayoutTab)
		{
			System.out.println("Test Pass : SalesOrdersOptions All Tabs And Title are Displaying");
			excelReader.setCellData(xlfile, "Sheet2", 104, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : SalesOrdersOptions All Tabs And Title are Not  Displaying");
			excelReader.setCellData(xlfile, "Sheet2", 104, 9, resFail);
			return false;
		}
		}
	

	
	
	public boolean checkToggleOptionsSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsBtn));
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsBtn));

		  boolean actviewsBtn             = viewsBtn.isDisplayed();
		  boolean actexternalFunctionsBtn = externalFunctionsBtn.isDisplayed();
		  boolean actschemesBtn           = schemesBtn.isDisplayed();
		  boolean actexportFieldsBtn      = exportFieldBtn.isDisplayed();
		  boolean acttriggersBtn          = triggersBtn.isDisplayed();
		  boolean actdocumentNumberingBtn = documentNumberingBtn.isDisplayed();
		  boolean acthirePurchaseBtn      = hirePurBtn.isDisplayed();
		  boolean actrulesBtn             = rulesBtn.isDisplayed();
		  boolean actreportsBtn           = reportBtn.isDisplayed();
		
		  boolean expviewsBtn             = true;
		  boolean expexternalFunctionsBtn = true;
		  boolean expschemesBtn           = true;
		  boolean expexportFieldsBtn      = true;
		  boolean exptriggersBtn          = true;
		  boolean expdocumentNumberingBtn = true;
		  boolean exphirePurchaseBtn      = true;
		  boolean exprulesBtn             = true;
		  boolean expreportsBtn           = true;	
		
		System.out.println("*************************************checkToggleOptionsSalesOrders*******************************************");
		
		System.out.println("ViewsBtn               : "+actviewsBtn              +"  value expected  "+expviewsBtn);
		System.out.println("ExternalFunctionsBtn   : "+actexternalFunctionsBtn  +"  value expected  "+expexternalFunctionsBtn);
		System.out.println("SchemesBtn             : "+actschemesBtn            +"  value expected  "+expschemesBtn);
		System.out.println("ExportFieldsBtn        : "+actexportFieldsBtn       +"  value expected  "+expexportFieldsBtn);
		System.out.println("TriggersBtn            : "+acttriggersBtn           +"  value expected  "+exptriggersBtn);
		System.out.println("DocumentNumberingBtn   : "+actdocumentNumberingBtn  +"  value expected  "+expdocumentNumberingBtn);
		System.out.println("HirePurchaseBtn        : "+acthirePurchaseBtn       +"  value expected  "+exphirePurchaseBtn);
		System.out.println("RulesBtn               : "+actrulesBtn              +"  value expected  "+exprulesBtn);
		System.out.println("ReportsBtn             : "+actreportsBtn            +"  value expected  "+expreportsBtn);
		
		if(actviewsBtn==expviewsBtn && actexternalFunctionsBtn==expexternalFunctionsBtn && actschemesBtn==expschemesBtn && actexportFieldsBtn==expexportFieldsBtn &&
			acttriggersBtn==exptriggersBtn && actdocumentNumberingBtn==expdocumentNumberingBtn && acthirePurchaseBtn==exphirePurchaseBtn && actrulesBtn==exprulesBtn &&
			actreportsBtn==expreportsBtn)
		{
			System.out.println("Test Pass : Toogle Options in Sales Orders As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 105, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Toogle Options in Sales Orders As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 105, 9, resFail);
			return false;
		}
			
	}		
	
	public boolean checkSelectingTagsAndSaveThroughUpdateSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2)); 
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s3=new Select(masterDropDown);
		s3.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		positionDropdown.click();
		Select s4=new Select(positionDropdown);
		s4.selectByVisibleText("Body");
		
		position2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("*********************************checkSelectingTagsAndSaveThroughUpdateSalesOrders*********************************");
		
		String expMessage		="Data Saved Successfully";
		
		String actMessage		=checkValidationMessage(expMessage);
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 106, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 106, 9, resFail);
			return false;
		}
	}
		
		
	public boolean checkCloseButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		
		boolean actlabelDashboard						=labelDashboard.isDisplayed();
		boolean actselectDashboard						=selectDashboard.isDisplayed();
		boolean actnewAddDashBoard						=newAddDashBoard.isDisplayed();
		boolean actdashboardCustomizationSettings		=dashboardCustomizationSettings.isDisplayed();
		
		boolean explabelDashboard						=true;
		boolean expselectDashboard						=true;
		boolean expnewAddDashBoard						=true;
		boolean expdashboardCustomizationSettings		=true;
		
		System.out.println("*****************************************checkCloseButton********************************************");
		
		System.out.println("LabelDashboard                  : "+actlabelDashboard                  +"  value expected  "+explabelDashboard);
		System.out.println("SelectDashboard                 : "+actselectDashboard                 +"  value expected  "+expselectDashboard);
		System.out.println("NewAddDashBoard                 : "+actnewAddDashBoard                 +"  value expected  "+expnewAddDashBoard);
		System.out.println("DashboardCustomizationSettings  : "+actdashboardCustomizationSettings  +"  value expected  "+expdashboardCustomizationSettings);
		
		 if(actlabelDashboard==explabelDashboard && actselectDashboard==expselectDashboard && actnewAddDashBoard==expnewAddDashBoard &&
			 actdashboardCustomizationSettings==expdashboardCustomizationSettings)
		 {
			 excelReader.setCellData(xlfile, "Sheet2", 107, 9, resPass);
			 return true;
		 }
		 else
		 {
			 excelReader.setCellData(xlfile, "Sheet2", 107, 9, resFail);
			 return false;
		 }
	
	}
	

	public boolean checkSaveTagsMasterSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersBtn));
		salesOrdersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
	
		String actmasters1			=masters1.getText();
		String actposition1			=position1.getText();
		String actmasters2			=masters2.getText();
		String actposition2			=position2.getText();
		
		String expmasters1			="Department";
		String expposition1			="Header";
		String expmasters2			="Warehouse";
		String expposition2			="Body";
		
		System.out.println("*****************************************checkSaveTagsMasterSalesOrders********************************************");
		
		System.out.println("Masters1   : "+actmasters1  +"  value expected  "+expmasters1);
		System.out.println("Position1  : "+actposition1 +"  value expected  "+expposition1);
		System.out.println("Masters2   : "+actmasters2  +"  value expected  "+expmasters2);
		System.out.println("Position2  : "+actposition2 +"  value expected  "+expposition2);
		
		if(actmasters1.equalsIgnoreCase(expmasters1) && actposition1.equalsIgnoreCase(expposition1) && expmasters2.equalsIgnoreCase(expmasters2) && 
			actposition2.equalsIgnoreCase(expposition2))
		{
			System.out.println("Test Pass : selected Values Are Validated");
			excelReader.setCellData(xlfile, "Sheet2", 108, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : selected Values Are Not  Validated");
			excelReader.setCellData(xlfile, "Sheet2", 108, 9, resPass);
			return false;
		}
	}
	
	
	
	
	public boolean checkEditingtheTagsSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRow));
		secondRow.click();
		
		deleterowBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Body");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
	
		System.out.println("********************************************checkEditingtheTagsSalesOrders*****************************************");
		
		String expMessage	="Data Saved Successfully";
		
		String actMessage	=checkValidationMessage(expMessage);
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 109, 9, resPass);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
			CloseBtnINDC.click();
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 109, 9, resPass);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
			CloseBtnINDC.click();
			return false;
		}
	}
		
	
	
	
	public boolean checkUpdatedTagsDisplaySalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersBtn));
		salesOrdersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		
		String actmasters1			=masters1.getText();
		String actposition1			=position1.getText();
		
		String expmasters1			="Warehouse";
		String expposition1			="Body";
		
		System.out.println("*****************************************checkUpdatedTagsDisplaySalesOrders********************************************");
		
		System.out.println("Masters1     : "+actmasters1  +"  value expected  "+expmasters1);
		System.out.println("Position1    : "+actposition1 +"  value expected  "+expposition1);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actmasters1.equalsIgnoreCase(expmasters1) &&  actposition1.equalsIgnoreCase(expposition1))
		{
			System.out.println("Test Pass : Updated Values Are Validated");
			excelReader.setCellData(xlfile, "Sheet2", 110, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : updated Values Are Not  Validated");
			excelReader.setCellData(xlfile, "Sheet2", 110, 9, resPass);
			return false;
		}
	}
	
	
	
	
	public boolean checkSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		
		boolean actsalesInvoiceBtn			=salesInvoiceBtn.isDisplayed();
		
		boolean expsalesInvoiceBtn			=true;
		
		System.out.println("*****************************************checkSalesInvoice********************************************");
		
		System.out.println("SalesInvoiceBtn    : "+actsalesInvoiceBtn+"  value expected  "+expsalesInvoiceBtn);
		
		if(actsalesInvoiceBtn==expsalesInvoiceBtn)
		{
			System.out.println("Test Pass : displaying Sales Invoice in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2",111, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Not displaying Sales Invoice in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 111, 9, resFail);
			return false;
		}
		}
	 
	
	
	
	public boolean checkSalesInvoiceOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		  Thread.sleep(2000);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalExpandBtn));
		    generalExpandBtn.click();
		    Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt					=titleTxt.getAttribute("value");
		String exptitleTxt					="Sales Invoices";
		
		boolean actdocumentsTab				=documentsTab.isDisplayed();
		boolean actmiscellaneousTab			=miscellaneousTab.isDisplayed();
		boolean acteditScreenTab			=editScreenTab.isDisplayed();
		boolean actinventoryoptionsTab		=inventoryoptionsTab.isDisplayed();
		boolean acteditLayoutTab			=editLayoutTab.isDisplayed();
	
		
		boolean expdocumentsTab				=true;
		boolean expmiscellaneousTab			=true;
		boolean expeditScreenTab			=true;
		boolean expinventoryoptionsTab		=true;
		boolean expeditLayoutTab			=true;
		
		System.out.println("*****************************************checkSalesInvoiceOptions********************************************");
		
		System.out.println("TitleTxt            : "+acttitleTxt             +"  value expected  "+exptitleTxt);
		System.out.println("DocumentsTab        : "+actdocumentsTab         +"  value expected  "+expdocumentsTab);
		System.out.println("MiscellaneousTab    : "+actmiscellaneousTab     +"  value expected  "+expmiscellaneousTab);
		System.out.println("EditScreenTab       : "+acteditScreenTab        +"  value expected  "+expeditScreenTab);
		System.out.println("InventoryoptionsTab : "+actinventoryoptionsTab  +"  value expected  "+expinventoryoptionsTab);
		System.out.println("EditLayoutTab       : "+acteditLayoutTab        +"  value expected  "+expeditLayoutTab);
	
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt) && actdocumentsTab==expdocumentsTab && actmiscellaneousTab==expmiscellaneousTab && acteditScreenTab==expeditScreenTab &&
			actinventoryoptionsTab==expinventoryoptionsTab && acteditLayoutTab==expeditLayoutTab)	
		{
			System.out.println("Test Pass : SalesInvoiceOptions All Tabs are Displaying");
			excelReader.setCellData(xlfile, "Sheet2", 112, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : SalesInvoiceOptions All Tabs are Not  Displaying");
			excelReader.setCellData(xlfile, "Sheet2", 112, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkToggleOptionsSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsBtn));

		boolean actviewsBtn						=viewsBtn.isDisplayed();
		boolean actexternalFunctionsBtn			=externalFunctionsBtn.isDisplayed();
		boolean actschemesBtn					=schemesBtn.isDisplayed();
		boolean actexportFieldsBtn				=exportFieldBtn.isDisplayed();
		boolean acttriggersBtn					=triggersBtn.isDisplayed();
		
		boolean expviewsBtn						=true;
		boolean expexternalFunctionsBtn			=true;
		boolean expschemesBtn					=true;
		boolean expexportFieldsBtn				=true;
		boolean exptriggersBtn					=true;
		
		System.out.println("*****************************************checkToggleOptionsSalesInvoice********************************************");
		
		System.out.println("ViewsBtn              : "+actviewsBtn              +"  value expected  "+expviewsBtn);
		System.out.println("ExternalFunctionsBtn  : "+actexternalFunctionsBtn  +"  value expected  "+expexternalFunctionsBtn);
		System.out.println("SchemesBtn            : "+actschemesBtn            +"  value expected  "+expschemesBtn);
		System.out.println("ExportFieldsBtn       : "+actexportFieldsBtn       +"  value expected  "+expexportFieldsBtn);
		System.out.println("TriggersBtn           : "+acttriggersBtn           +"  value expected  "+exptriggersBtn);
		
		if(actviewsBtn==expviewsBtn && actexternalFunctionsBtn==expexternalFunctionsBtn && actschemesBtn==expschemesBtn && actexportFieldsBtn==expexportFieldsBtn &&
			acttriggersBtn==exptriggersBtn)
		{
			System.out.println("Test Pass : Toogle Options in Sales Orders As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 113, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Toogle Options in Sales Orders As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 113, 9, resFail);
			return false;
		}
			
	}	
	
	
	
		
	public boolean checkLoadMastersSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loadMastersBtn));
		
		boolean actloadMastersBtn			=loadMastersBtn.isDisplayed();
		
		boolean exploadMastersBtn			=true;
		
		System.out.println("*****************************************checkLoadMastersSalesInvoice********************************************");
		
		System.out.println("LoadMastersBtn     : "+actloadMastersBtn+"  value expected  "+exploadMastersBtn);
		
		if(actloadMastersBtn==exploadMastersBtn)
		{
			System.out.println("Test Pass : Load Masters Btn is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 114, 9, resPass);
			return true;
			
		}
		else
		{
			System.out.println("Test Fail : Load Masters Btn is Not  Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 114, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkLoadMastersOptionsInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loadMastersBtn));
		loadMastersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loadmasterDropDown));
		
		boolean actloadmasterDropDown			=loadmasterDropDown.isDisplayed();
		boolean actselectAllBtn					=selectAllBtn.isDisplayed();
		boolean actokBtn						=okBtn.isDisplayed();
		boolean actresetBtn						=resetBtn.isDisplayed();
		
		boolean exploadmasterDropDown			=true;
		boolean expselectAllBtn					=true;
		boolean expokBtn						=true;
		boolean expresetBtn						=true;
		
		System.out.println("*****************************************checkLoadMastersOptionsInSalesInvoice********************************************");
		
		System.out.println("LoadmasterDropDown    : "+actloadmasterDropDown   +"  value expected  "+exploadmasterDropDown);
		System.out.println("SelectAllBtn          : "+actselectAllBtn         +"  value expected  "+expselectAllBtn);
		System.out.println("OkBtn                 : "+actokBtn                +"  value expected  "+expokBtn);
		System.out.println("ResetBtn              : "+actresetBtn             +"  value expected  "+expresetBtn);
		
		if(actloadmasterDropDown==exploadmasterDropDown && actselectAllBtn==expselectAllBtn && actokBtn==expokBtn && actresetBtn==expresetBtn)
		{
			System.out.println("Test Pass : Load Masters Fields Are Displayed As expected");
			excelReader.setCellData(xlfile, "Sheet2", 115, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Load Masters Fields Are  Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 115, 9, resFail);
			return false;
		}	
	}
	
	
	 
	
	public boolean checkMastersInLoadMasters() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loadmasterDropDown));
		loadmasterDropDown.click();
		
		Select s=new Select(loadmasterDropDown);
		
		int actloadmasterDropDown			=s.getOptions().size();
		int exploadmasterDropDown			=28;
		
		System.out.println("*****************************************checkMastersInLoadMasters********************************************");
		
		System.out.println("LoadmasterDropDownSize     : "+actloadmasterDropDown+"  value expected  "+exploadmasterDropDown);
		
		if(exploadmasterDropDown==actloadmasterDropDown)
		{
			System.out.println("Test Pass : Load master dropdown Showing All vouchers");
			excelReader.setCellData(xlfile, "Sheet2", 116, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Load master dropdown Not  Showing All vouchers");
			excelReader.setCellData(xlfile, "Sheet2", 116, 9, resFail);
			return false;
		}
	}
	
	

	public boolean checkTagMasterSelectThroughLoadmaster()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		loadmasterDropDown.sendKeys("Sales Orders");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtn)); 
		okBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position1.click();
		
		positionDropdown.click();
		Select s=new Select(positionDropdown);
		s.selectByVisibleText("Header");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2)); 
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s3=new Select(masterDropDown);
		s3.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		positionDropdown.click();
		Select s4=new Select(positionDropdown);
		s4.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position3));
		position3.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		
		String actmasters1				=masters1.getText();
		String actposition1				=position1.getText();
		String actmasters2				=masters2.getText();
		String actposition2				=position2.getText();
		
		String expmasters1				="Warehouse";
		String expposition1				="Header";
		String expmasters2				="Department";
		String expposition2				="Header";
		
		System.out.println("*****************************************checkTagMasterSelectThroughLoadmaster********************************************");
		
		System.out.println("Masters1      : "+actmasters1    +"  value expected  "+expmasters1);
		System.out.println("Position1     : "+actposition1   +"  value expected  "+expposition1);
		System.out.println("Masters2      : "+actmasters2    +"  value expected  "+expmasters2);
		System.out.println("Position2     : "+actposition2   +"  value expected  "+expposition2);
		
		if(actmasters1.equalsIgnoreCase(expmasters1) &&  actposition1.equalsIgnoreCase(expposition1) && actmasters2.equalsIgnoreCase(expmasters2) && 
			actposition2.equalsIgnoreCase(expposition2))
		{
			System.out.println("Test Pass : selected Values Are Validated");
			excelReader.setCellData(xlfile, "Sheet2", 117, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : selected Values Are Not  Validated");
			excelReader.setCellData(xlfile, "Sheet2", 117, 9, resPass);
			return false;
		}
	}
	
	
	
	public boolean checkSavingSalesInvoiceTagsWithLoadMaster()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("**********************************checkSavingSalesInvoiceTagsWithLoadMaster************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 118, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 118, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkSavedTagsinSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		
		String actmasters1				=masters1.getText();
		String actposition1				=position1.getText();
		String actmasters2				=masters2.getText();
		String actposition2				=position2.getText();
		
		String expmasters1				="Warehouse";
		String expposition1				="Header";
		String expmasters2				="Department";
		String expposition2				="Header";
		
		System.out.println("*****************************************checkSavedTagsinSalesInvoice********************************************");
		
		System.out.println("Masters1     : "+actmasters1     +"  value expected  "+expmasters1);
		System.out.println("Position1    : "+actposition1    +"  value expected  "+expposition1);
		System.out.println("Masters2     : "+actmasters2     +"  value expected  "+expmasters2);
		System.out.println("Position2    : "+actposition2    +"  value expected  "+expposition2);
		
		if(actmasters1.equalsIgnoreCase(expmasters1) &&  actposition1.equalsIgnoreCase(expposition1)/* && actmasters2.equalsIgnoreCase(expmasters2) && 
				actposition2.equalsIgnoreCase(expposition2)*/)
		{
			System.out.println("Test Pass : selected Values Are Validated");
			excelReader.setCellData(xlfile, "Sheet2", 119, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : selected Values Are Not  Validated");
			excelReader.setCellData(xlfile, "Sheet2", 119, 9, resFail);
			return false;
		}
	}
	
	
	
	
	
	public boolean checkPurchaseOrderVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purcahseOrdersBtn));
		
		boolean actpurcahseOrdersBtn		=purcahseOrdersBtn.isDisplayed();
		
		boolean exppurcahseOrdersBtn		=true;
		
		System.out.println("*****************************************checkPurchaseOrderVoucher********************************************");
		
		System.out.println("PurcahseOrdersBtn    : "+actpurcahseOrdersBtn   +"  value expected  "+exppurcahseOrdersBtn);
		
		if(actpurcahseOrdersBtn==exppurcahseOrdersBtn)
		{
			System.out.println("Test Pass : displaying Purchase Order in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 120, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not displaying Purchase Order in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 120, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkDocumentTagInPurcahseOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purcahseOrdersBtn));
		purcahseOrdersBtn.click();
		
		  Thread.sleep(2000);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalExpandBtn));
		    generalExpandBtn.click();
		    Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt				=titleTxt.getAttribute("value");
		String exptitleTxt				="Purchases Orders";
		
		
		//Here updating the Document Tags of Purchase Order
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Body");
	
		boolean actdocumentsTab					=documentsTab.isDisplayed();
		boolean actmiscellaneousTab				=miscellaneousTab.isDisplayed();
		boolean acteditScreenTab				=editScreenTab.isDisplayed();
		boolean actinventoryoptionsTab			=inventoryoptionsTab.isDisplayed();
		boolean acteditLayoutTab				=editLayoutTab.isDisplayed();
		
		boolean expdocumentsTab					=true;
		boolean expmiscellaneousTab				=true;
		boolean expeditScreenTab				=true;
		boolean expinventoryoptionsTab			=true;
		boolean expeditLayoutTab				=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
        CloseBtnINDC.click();
		
		System.out.println("*****************************************checkDocumentTagInPurcahseOrder********************************************");
		
		System.out.println("TitleTxt             : "+acttitleTxt              +"  value expected  "+exptitleTxt);
		System.out.println("DocumentsTab         : "+actdocumentsTab          +"  value expected  "+expdocumentsTab);
		System.out.println("MiscellaneousTab     : "+actmiscellaneousTab      +"  value expected  "+expmiscellaneousTab);
		System.out.println("EditScreenTab        : "+acteditScreenTab         +"  value expected  "+expeditScreenTab);
		System.out.println("InventoryoptionsTab  : "+actinventoryoptionsTab   +"  value expected  "+expinventoryoptionsTab);
		System.out.println("EditLayoutTab        : "+acteditLayoutTab         +"  value expected  "+expeditLayoutTab);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt) && actdocumentsTab==expdocumentsTab && actmiscellaneousTab==expmiscellaneousTab &&
			acteditScreenTab==expeditScreenTab && actinventoryoptionsTab==expinventoryoptionsTab && acteditLayoutTab==expeditLayoutTab 
			)
		{
			System.out.println("Test Pass : Title Contain Purchases Orders As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 121, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Does NotContain Purchases Orders As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 121, 9, resFail);
			return false;
		}
	}	
	
	
	

	public boolean checkMaterialReceiptNotes()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		 settingsmenuBtn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		 ConfigureTransactionBtn.click();
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		 documentCustomization45Btn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(materialReceiptsNotesBtn));
		 
		 boolean actmaterialReceiptsNotesBtn			=materialReceiptsNotesBtn.isDisplayed();
		 
		 boolean expmaterialReceiptsNotesBtn			=true;
		 
		 System.out.println("*****************************************checkMaterialReceiptNotes********************************************");
		 
		 System.out.println("MaterialReceiptsNotesBtn   : "+actmaterialReceiptsNotesBtn   +"  value expected  "+expmaterialReceiptsNotesBtn);
		
		 if(actmaterialReceiptsNotesBtn==expmaterialReceiptsNotesBtn)
		 {
			 System.out.println("Test Pass : displaying MaterialReceiptsNote in the Voucher list");
			 excelReader.setCellData(xlfile, "Sheet2", 122, 9, resPass);
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Fail : Not displaying MaterialReceiptsNote in the Voucher list");
			 excelReader.setCellData(xlfile, "Sheet2", 122, 9, resFail);
			 return false;
		 }
	}
	
	
	
	
	public boolean checkDocumentTagInMaterialReceiptNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(materialReceiptsNotesBtn));
		materialReceiptsNotesBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTabForMaterialReceiptNotes));
		documentsTabForMaterialReceiptNotes.click();
		
		  Thread.sleep(2000);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalExpandBtn));
		    generalExpandBtn.click();
		    Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt					=titleTxt.getAttribute("value");
		String exptitleTxt					="Material Receipt Notes";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Body");
		
		boolean actdocumentsTabForMaterialReceiptNotes				=documentsTabForMaterialReceiptNotes.isDisplayed();
		boolean actmiscellaneousTab									=miscellaneousTab.isDisplayed();
		boolean acteditScreenTab									=editScreenTab.isDisplayed();
		boolean actinventoryoptionsTab								=inventoryoptionsTab.isDisplayed();
		boolean acteditLayoutTab									=editLayoutTab.isDisplayed();
		
		
		boolean expdocumentsTabForMaterialReceiptNotes				=true;
		boolean expmiscellaneousTab									=true;
		boolean expeditScreenTab									=true;
		boolean expinventoryoptionsTab								=true;
		boolean expeditLayoutTab									=true;
		boolean exptoogleExpandBtn									=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		System.out.println("**************************************checkDocumentTagInMaterialReceiptNotes********************************************");
		
		System.out.println("TitleTxt                             : "+acttitleTxt                             +"  value expected  "+exptitleTxt);
		System.out.println("DocumentsTabForMaterialReceiptNotes  : "+actdocumentsTabForMaterialReceiptNotes  +"  value expected  "+expdocumentsTabForMaterialReceiptNotes);
		System.out.println("MiscellaneousTab                     : "+actmiscellaneousTab                     +"  value expected  "+expmiscellaneousTab);
		System.out.println("EditScreenTab                        : "+acteditScreenTab                        +"  value expected  "+expeditScreenTab);
		System.out.println("InventoryoptionsTab                  : "+actinventoryoptionsTab                  +"  value expected  "+expinventoryoptionsTab);
		System.out.println("EditLayoutTab                        : "+acteditLayoutTab                        +"  value expected  "+expeditLayoutTab);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt) && actdocumentsTabForMaterialReceiptNotes==expdocumentsTabForMaterialReceiptNotes && 
			actmiscellaneousTab==expmiscellaneousTab && acteditScreenTab==expeditScreenTab && actinventoryoptionsTab==expinventoryoptionsTab &&
			acteditLayoutTab==expeditLayoutTab)
		{
			System.out.println("Test Pass : Title Contain Material Receipt Notes As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 123, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Does NotContain Material Receipt Notes As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 123, 9, resFail);
			return false;
		}
	}	
	
	
	
	
	
	public boolean checkPurchaseReturns()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsBtn));
		
		boolean actpurchaseReturnsBtn				=purchaseReturnsBtn.isDisplayed();
		
		boolean exppurchaseReturnsBtn				=true;
		
		System.out.println("**************************************checkPurchaseReturns********************************************");
		
		System.out.println("PurchaseReturnsBtn    : "+actpurchaseReturnsBtn   +"  value expected  "+exppurchaseReturnsBtn);
		
		if(actpurchaseReturnsBtn==exppurchaseReturnsBtn)
		{
			System.out.println("Test Pass : displaying Purchases Returns in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 124, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not displaying Purchases Returns in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 124, 9, resFail);
			return false;
		}
	}
	
	
	
	
	
	public boolean checkDocumentTagInPurcahseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsBtn));
		 purchaseReturnsBtn.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		 documentsTab.click();
		 
		  Thread.sleep(2000);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalExpandBtn));
		    generalExpandBtn.click();
		    Thread.sleep(3000);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		 titleTxt.click();
		
		 String acttitleTxt					=titleTxt.getAttribute("value");
		 String exptitleTxt					="Purchases Returns";
		 
		 System.out.println("***************************************checkDocumentTagInPurcahseReturns****************************************");
		
		 System.out.println("TitleTxt : "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
	     masters1.click();
	 	
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		 masterDropDown.click();
		
		 Select s1=new Select(masterDropDown);
		 //s1.selectByVisibleText("Warehouse");
		 
		 masterDropDown.sendKeys("Warehouse");
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		 position1.click();
		
		 positionDropdown.click();
		 Select s2=new Select(positionDropdown);
		 positionDropdown.sendKeys("Body");
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2)); 
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s3=new Select(masterDropDown);
		s3.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		positionDropdown.click();
		
		Select s4=new Select(positionDropdown);
		s4.selectByVisibleText("Header");
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
	 
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title Contain Purchases Returns As Expected");
		    excelReader.setCellData(xlfile, "Sheet2", 125, 9, resPass);
		    return true;
		}
		else
		{
			 System.out.println("Test Fail : Title Does NotContain Purchases Returns As Expected");
			 excelReader.setCellData(xlfile, "Sheet2", 125, 9, resPass);
			 return false;
		}
	}	
	
	
	

	
	
	
	public boolean checkDeliveryNotes()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		 settingsmenuBtn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		 ConfigureTransactionBtn.click();
			
		 Thread.sleep(2000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		 documentCustomization45Btn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deliveryNotesBtn));
		 
		 boolean actdeliveryNotesBtn				=deliveryNotesBtn.isDisplayed();
		 
		 boolean expdeliveryNotesBtn				=true;
		 
		 System.out.println("**************************************checkDeliveryNotes********************************************");
		 
		 System.out.println("DeliveryNotesBtn     : "+actdeliveryNotesBtn    +"  value expected  "+expdeliveryNotesBtn);
		 
		 if(actdeliveryNotesBtn==expdeliveryNotesBtn)
		 {
			 System.out.println("Test Pass : displaying Delivery Notes in the Voucher list");
			 excelReader.setCellData(xlfile, "Sheet2", 126, 9, resPass);
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Fail : Not displaying Delivery Notes in the Voucher list");
			 excelReader.setCellData(xlfile, "Sheet2", 126, 9, resFail);
			 return false;
		 }
	}
	
	
	
	
	public boolean checkDocumentTagInDeliveryNotes()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deliveryNotesBtn));
		deliveryNotesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt					=titleTxt.getAttribute("value");
		String exptitleTxt					="Delivery Notes";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Body");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		System.out.println("**************************************checkDocumentTagInDeliveryNotes********************************************");
		
		System.out.println("TitleTxt      : "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title Contain Delivery Notes As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 127, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Does NotContain Delivery Notes As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 127, 9, resFail);
			return false;
		}
	}	
	
	
	
	 
	
	public boolean checkSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchBox));
		 
		 boolean actsearchBox					=searchBox.isDisplayed();
		 
		 boolean expsearchBox					=true;
		 
		 System.out.println("**************************************************checkSearch******************************************************");
		 
		 System.out.println("SearchBox : "+actsearchBox+"  value expected  "+expsearchBox);
		 
		 if(actsearchBox==expsearchBox)
		 {
			 System.out.println("Test Pass : Search box is Diaplayed");
			 excelReader.setCellData(xlfile, "Sheet2", 128, 9, resPass);
			 return true;
		 }
		 else
		 {
			 System.out.println("Test fail : Search box is Not  Displayed");
			 excelReader.setCellData(xlfile, "Sheet2", 128, 9, resFail);
			 return false;
		 }
	}
	
	
	
	
	public boolean checkOpeningStocks()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		 searchBox.click();
		 searchBox.sendKeys("Opening Stocks");
	 	 searchBox.sendKeys(Keys.TAB);
	 	 
	 	 Thread.sleep(4000);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksBtn));
		 
		 boolean actopeningStocksBtn			=openingStocksBtn.isDisplayed();
		 
		 boolean expopeningStocksBtn			=true;
		 
		 System.out.println("**********************************************checkOpeningStocks******************************************************");
		 
		 System.out.println("OpeningStocksBtn :     "+actopeningStocksBtn+"  value expected  "+expopeningStocksBtn);
		 
		 if(actopeningStocksBtn==expopeningStocksBtn)
		 {
			 System.out.println("Test Pass : displaying Opening Stocks in the Voucher list");
			 excelReader.setCellData(xlfile, "Sheet2", 129, 9, resPass);
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Fail : Not displaying Opening Stocks in the Voucher list");
			 excelReader.setCellData(xlfile, "Sheet2", 129, 9, resFail);
			 return false;
		 }
	}
	
	
	
	
	public boolean checkDocumentTagInOpeningStocks()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksBtn));
		openingStocksBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt					=titleTxt.getAttribute("value");
		String exptitleTxt					="Opening Stocks";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Body");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		System.out.println("**********************************************checkDocumentTagInOpeningStocks******************************************************");
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		 System.out.println("TitleTxt :   "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title Contain Opening Stocks As Expected");
			 excelReader.setCellData(xlfile, "Sheet2", 130, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Does NotContain Opening Stocks As Expected");
			 excelReader.setCellData(xlfile, "Sheet2", 130, 9, resFail);
			return false;
		}
	}	
	
	
	
	
	
	public boolean checkExcessInStocks()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchBox));
		
		searchBox.click();
		searchBox.clear();
		searchBox.sendKeys(Keys.SPACE);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(excessInStocksBtn));
		
		boolean actexcessInStocksBtn				=excessInStocksBtn.isDisplayed();
		
		boolean expexcessInStocksBtn				=true;
		
		System.out.println("**********************************************checkExcessInStocks******************************************************");
		 
		System.out.println("ExcessInStocksBtn :   "+actexcessInStocksBtn+"  value expected  "+expexcessInStocksBtn);
		
		if(actexcessInStocksBtn==expexcessInStocksBtn)
		{
			System.out.println("Test Pass : displaying Excesses in Stocks in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 131, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not displaying Excesses in Stocks in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 131, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean checkDocumentTagInExcessInStocks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(excessInStocksBtn));
		excessInStocksBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt						=titleTxt.getAttribute("value");
		String exptitleTxt						="Excesses in Stocks";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Body");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("*****************************************checkDocumentTagInExcessInStocks*********************************************");
		
		System.out.println("TitleTxt   : "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title Contain Excesses in Stocks As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 132, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Does NotContain Excesses in Stocks As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 132, 9, resFail);
			return false;
		}
	}	
	
	
	
	public boolean checkShortageInStock()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		 settingsmenuBtn.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		 ConfigureTransactionBtn.click();
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		 documentCustomization45Btn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortageInStocksBtn));
		 
		 boolean actshortageInStocksBtn				=shortageInStocksBtn.isDisplayed();
		 
		 boolean expshortageInStocksBtn				=true;
		 
		 System.out.println("*****************************************checkShortageInStock*********************************************");
		 
		 System.out.println("ShortageInStocksBtn : "+actshortageInStocksBtn+"  value expected  "+expshortageInStocksBtn);
		 
		 if(actshortageInStocksBtn==expshortageInStocksBtn)
		 {
			 System.out.println("Test Pass : displaying Shortages in Stock in the Voucher list");
			 excelReader.setCellData(xlfile, "Sheet2", 133, 9, resPass);
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Fail : Not displaying Shortages in Stock in the Voucher list");
			 excelReader.setCellData(xlfile, "Sheet2", 133, 9, resFail);
			 return false;
		 }
	}
	
	
	
	
	public boolean checkDocumentTagInShortagesInStock()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortageInStocksBtn));
		shortageInStocksBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt					=titleTxt.getAttribute("value");
		String exptitleTxt					="Shortages in Stock";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Body");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("************************************************checkDocumentTagInShortagesInStock*********************************************************");
		
		System.out.println("TitleTxt      : "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title Contain Shortages in Stock As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 134, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Does NotContain Shortages in Stock As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 134, 9, resFail);
			return false;
		}
	}	
	
	
	
	
	
	public boolean checkSalesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		 settingsmenuBtn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		 ConfigureTransactionBtn.click();
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		 documentCustomization45Btn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsBtn));
		 
		 boolean actsalesReturnsBtn					=salesReturnsBtn.isDisplayed();
		 
		 boolean expsalesReturnsBtn					=true;
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsBtn));
		
		System.out.println("**********************************************checkSalesReturns******************************************************");
		
		System.out.println("SalesReturnsBtn    : "+actsalesReturnsBtn+"  value expected  "+expsalesReturnsBtn);
		
		if(actsalesReturnsBtn==expsalesReturnsBtn)
		{
			System.out.println("Test Pass : displaying Sales Returns in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 135, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not displaying Sales Returns in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 135, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean checkDocumentTagInSalesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsBtn));
		salesReturnsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt					=titleTxt.getAttribute("value");
		String exptitleTxt					="Sales Returns";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Body");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2)); 
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s3=new Select(masterDropDown);
		s3.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		positionDropdown.click();
		
		Select s4=new Select(positionDropdown);
		s4.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
        CloseBtnINDC.click();
		
		System.out.println("**********************************************checkDocumentTagInSalesReturns******************************************************");
		
		System.out.println("TitleTxt        : "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title Contain Sales Returns As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 136, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Does NotContain Sales ReturnsAs Expected");
			excelReader.setCellData(xlfile, "Sheet2", 136, 9, resFail);
			return false;
		}
	}	
	

	
	
	
	public boolean checkDocumentTagInPurcahseVouchers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersBtn));
		purchaseVouchersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt						=titleTxt.getAttribute("value");
		String exptitleTxt						="Purchases Vouchers";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Body");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2)); 
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s3=new Select(masterDropDown);
		s3.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		positionDropdown.click();
		Select s4=new Select(positionDropdown);
		s4.selectByVisibleText("Header");
		
		position2.click();
		
		System.out.println("*************************************************checkDocumentTagInPurcahseVouchers******************************************************");
		
		System.out.println("TitleTxt   : "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title Contain Purchases Vouchers As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 138, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Does NotContain Purchases Vouchers As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 138, 9, resFail);
			return false;
		}
	}	
	
	
	
	public boolean checkSaveBySelectingTagInAllVouchers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("**************************************checkSaveBySelectingTagInAllVouchers*************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 139, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 139, 9, resFail);
			return false;
		}
	}
	
	
	
	
	
	public boolean checkCashSalesVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashSalesBtn));
			
		boolean actcashSalesBtn					=cashSalesBtn.isDisplayed();
		
		boolean expcashSalesBtn					=true;
		
		System.out.println("*********************************************checkCashSalesVoucher*****************************************************");
		
		System.out.println("CashSalesBtn : "+actcashSalesBtn+"  value expected  "+expcashSalesBtn);
			
		if(actcashSalesBtn==expcashSalesBtn)
		{
			System.out.println("Test Pass : displaying Purchases Vouchers in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 140, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not displaying Purchases Vouchers in the Voucher list");
			excelReader.setCellData(xlfile, "Sheet2", 140, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkMiscellaneousTabInCashSales() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashSalesBtn));
		cashSalesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		
		boolean actmiscellaneousTab					=miscellaneousTab.isDisplayed();
		
		boolean expmiscellaneousTab					=true;
		
		System.out.println("***********************************************checkMiscellaneousTabInCashSales************************************************");
		
		System.out.println("MiscellaneousTab : "+actmiscellaneousTab+"  value expected  "+expmiscellaneousTab);
		
		if(actmiscellaneousTab==expmiscellaneousTab)
		{
			System.out.println("Test Pass : miscellaneousTab is Displayed In Cash Sales Voucher");
			excelReader.setCellData(xlfile, "Sheet2", 141, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail :  miscellaneousTab is Not Displayed In Cash Sales Voucher");
			excelReader.setCellData(xlfile, "Sheet2", 141, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkAbbreviationInCashSales() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abbreviationTxt));
		abbreviationTxt.click();
		
		String actabbreviationTxt												=abbreviationTxt.getAttribute("value");
		String expabbreviationTxt												="CasSal";
		
		boolean actabbreviation													=abbreviationTxt.isDisplayed();
		boolean actdefaultAccount1Txt											=defaultAccount1Txt.isDisplayed();
		boolean actdefaultAccount2Txt											=defaultAccount2Txt.isDisplayed();
		boolean actchangeTransactionDateWhenAuthorizedChkBox					=changeTransactionDateWhenAuthorizedChkBox.isDisplayed();
		boolean actdateCannotBePriortoPrevdateChkBox							=dateCannotBePriortoPrevdateChkBox.isDisplayed();
		boolean actdetailedDisplayInSummaryBarChkBox							=detailedDisplayInSummaryBarChkBox.isDisplayed();
		boolean actdontAllowEditThisDocChkBox									=dontAllowEditThisDocChkBox.isDisplayed();
		boolean actdontAllowInputDateChkBox										=dontAllowInputDateChkBox.isDisplayed();
		boolean actdontRestrictAccount1TypeChkBox								=dontRestrictAccount1TypeChkBox.isDisplayed();
		boolean actdontRestrictAccount2TypeChkBox								=dontRestrictAccount2TypeChkBox.isDisplayed();
		boolean actdontRestrictOnLoginAccountChkBox								=dontRestrictOnLoginAccountChkBox.isDisplayed();
		boolean actdontRestrictOnLoginTagChkBox									=dontRestrictOnLoginTagChkBox.isDisplayed();
		boolean actenableVersionChkBox											=enableVersionChkBox.isDisplayed();
		boolean actprintUsingDefaultPrinterAndFormatChkBox						=printUsingDefaultPrinterAndFormatChkBox.isDisplayed();
		boolean actcheckbudgetDropdown											=checkbudgetDropdown.isDisplayed();
		boolean actpickEmailFromDropdown										=pickEmailFromDropdown.isDisplayed();
		boolean actstopRadio													=stopRadio.isDisplayed();
		boolean actwarnAndAllowRadio											=warnAndAllowRadio.isDisplayed();
		boolean actentryRestrictConditionTxt									=entryRestrictConditionTxt.isDisplayed();
		boolean actentryRestrictMessageTxt										=entryRestrictMessageTxt.isDisplayed();
		boolean actdontpostCOGS													=dontpostCOGS.isDisplayed();
		boolean actupdateFAChkBox												=updateFAChkBox.isDisplayed();
		boolean actselectAccountInEveryLineChkBox								=selectAccountInEveryLineChkBox.isDisplayed();
		boolean actdetailedPostingChkbox										=detailedPostingChkbox.isDisplayed();
		boolean actupdateStockChkBox											=updateStockChkBox.isDisplayed();
		boolean actallowChangingUpdateStock										=allowChangingUpdateStock.isDisplayed();
		boolean actpostServicetaxChkBox											=postServicetaxChkBox.isDisplayed();
		boolean actpostTDSchkBox												=postTDSchkBox.isDisplayed();
		boolean actpostVATchkBox												=postVATchkBox.isDisplayed();
		boolean actlinkToLetterOfCreditChkBox									=linkToLetterOfCreditChkBox.isDisplayed();
		boolean actdontcheckcreditlimitChkBox									=dontcheckcreditlimitChkBox.isDisplayed();
		boolean actaddCurrencyInDropdown										=addCurrencyInDropdown.isDisplayed();
		boolean actinputExchangeRateChkBox										=inputExchangeRateChkBox.isDisplayed();
		boolean actinputLocalExchangeRateChkBox									=inputLocalExchangeRateChkBox.isDisplayed();
		boolean actpostExchangeRateDifferrenceChkBox							=postExchangeRateDifferrenceChkBox.isDisplayed();
		boolean actpostExchangeRateDifferenceBasedOnStandardRuleChkBox			=postExchangeRateDifferenceBasedOnStandardRuleChkBox.isDisplayed();
		boolean actdueDateDropdown												=dueDateDropdown.isDisplayed();
		boolean actarapOptionsDropdown											=arapOptionsDropdown.isDisplayed();
		boolean actoptionsdDropdown												=optionsdDropdown.isDisplayed();
		//boolean actselectbillsbeforeAmountChkBox								=selectbillsbeforeAmountChkBox.isDisplayed();
		boolean actpostDiscountBasedOnCrediDaysChkBox							=postDiscountBasedOnCrediDaysChkBox.isDisplayed();
		boolean actinputPaymenttermsChkBox										=inputPaymenttermsChkBox.isDisplayed();
		boolean actnarrationDropdown											=narrationDropdown.isDisplayed();
		boolean actapplyRulesOnExternalModuleChkbox								=applyRulesOnExternalModuleChkbox.isDisplayed();
		boolean actapplyRulesOnLinkChkBox										=applyRulesOnLinkChkBox.isDisplayed();
		boolean actapplyRulesOnSetItemsChkBox									=applyRulesOnSetItemsChkBox.isDisplayed();
		boolean actapplyDependencyOnExternalModuleChkbox						=applyDependencyOnExternalModuleChkbox.isDisplayed();
		boolean actapplyDependencyOnLinkChkBox									=applyDependencyOnLinkChkBox.isDisplayed();
		boolean actapplyDependencyOnSetItemsChkBox								=applyDependencyOnSetItemsChkBox.isDisplayed(); 
		
		boolean expabbreviation													=true;
		boolean expdefaultAccount1Txt											=true;
		boolean expdefaultAccount2Txt											=true;
		boolean expchangeTransactionDateWhenAuthorizedChkBox					=true;
		boolean expdateCannotBePriortoPrevdateChkBox							=true;
		boolean expdetailedDisplayInSummaryBarChkBox							=true;
		boolean expdontAllowEditThisDocChkBox									=true;
		boolean expdontAllowInputDateChkBox										=true;
		boolean expdontRestrictAccount1TypeChkBox								=true;
		boolean expdontRestrictAccount2TypeChkBox								=true;
		boolean expdontRestrictOnLoginAccountChkBox								=true;
		boolean expdontRestrictOnLoginTagChkBox									=true;
		boolean expenableVersionChkBox											=true;
		boolean expprintUsingDefaultPrinterAndFormatChkBox						=true;
		boolean expcheckbudgetDropdown											=true;
		boolean exppickEmailFromDropdown										=true;
		boolean expstopRadio													=true;
		boolean expwarnAndAllowRadio											=true;
		boolean expentryRestrictConditionTxt									=true;
		boolean expentryRestrictMessageTxt										=true;
		boolean expdontpostCOGS													=true;
		boolean expupdateFAChkBox												=true;
		boolean expselectAccountInEveryLineChkBox								=true;
		boolean expdetailedPostingChkbox										=true;
		boolean expupdateStockChkBox											=true;
		boolean expallowChangingUpdateStock										=true;
		boolean exppostServicetaxChkBox											=true;
		boolean exppostTDSchkBox												=true;
		boolean exppostVATchkBox												=true;
		boolean explinkToLetterOfCreditChkBox									=true;
		boolean expdontcheckcreditlimitChkBox									=true;	
		boolean expaddCurrencyInDropdown										=true;
		boolean expinputExchangeRateChkBox										=true;
		boolean expinputLocalExchangeRateChkBox									=true;
		boolean exppostExchangeRateDifferrenceChkBox							=true;
		boolean exppostExchangeRateDifferenceBasedOnStandardRuleChkBox			=true;
		boolean expdueDateDropdown												=true;
		boolean exparapOptionsDropdown											=true;
		boolean expoptionsdDropdown												=true;
		//boolean expselectbillsbeforeAmountChkBox								=true;
		boolean exppostDiscountBasedOnCrediDaysChkBox							=true;
		boolean expinputPaymenttermsChkBox										=true;
		boolean expnarrationDropdown											=true;
		boolean expapplyRulesOnExternalModuleChkbox								=true;
		boolean expapplyRulesOnLinkChkBox										=true;
		boolean expapplyRulesOnSetItemsChkBox									=true;
		boolean expapplyDependencyOnExternalModuleChkbox						=true;
		boolean expapplyDependencyOnLinkChkBox									=true;
		boolean expapplyDependencyOnSetItemsChkBox								=true; 

		System.out.println("*********************************************checkAbbreviationInCashSales**********************************************");

		System.out.println("AbbreviationTxt                                      : "+actabbreviationTxt                                      +"  value expected  "+expabbreviationTxt);
		System.out.println("AbbreviationTxt isDisplaying                         : "+actabbreviation                                         +"  value expected  "+expabbreviation);
		System.out.println("DefaultAccount1Txt                                   : "+actdefaultAccount1Txt                                   +"  value expected  "+expdefaultAccount1Txt);
		System.out.println("DefaultAccount2Txt                                   : "+actdefaultAccount2Txt                                   +"  value expected  "+expdefaultAccount2Txt);
		System.out.println("ChangeTransactionDateWhenAuthorizedChkBox            : "+actchangeTransactionDateWhenAuthorizedChkBox            +"  value expected  "+expchangeTransactionDateWhenAuthorizedChkBox);
		System.out.println("DateCannotBePriortoPrevdateChkBox                    : "+actdateCannotBePriortoPrevdateChkBox                    +"  value expected  "+expdateCannotBePriortoPrevdateChkBox);
		System.out.println("DetailedDisplayInSummaryBarChkBox                    : "+actdetailedDisplayInSummaryBarChkBox                    +"  value expected  "+expdetailedDisplayInSummaryBarChkBox);
		System.out.println("DontAllowEditThisDocChkBox                           : "+actdontAllowEditThisDocChkBox                           +"  value expected  "+expdontAllowEditThisDocChkBox);
		System.out.println("DontAllowInputDateChkBox                             : "+actdontAllowInputDateChkBox                             +"  value expected  "+expdontAllowInputDateChkBox);
		System.out.println("DontRestrictAccount1TypeChkBox                       : "+actdontRestrictAccount1TypeChkBox                       +"  value expected  "+expdontRestrictAccount1TypeChkBox);
		System.out.println("DontRestrictAccount2TypeChkBox                       : "+actdontRestrictAccount2TypeChkBox                       +"  value expected  "+expdontRestrictAccount2TypeChkBox);
		System.out.println("DontRestrictOnLoginAccountChkBox                     : "+actdontRestrictOnLoginAccountChkBox                     +"  value expected  "+expdontRestrictOnLoginAccountChkBox);
		System.out.println("DontRestrictOnLoginTagChkBox                         : "+actdontRestrictOnLoginTagChkBox                         +"  value expected  "+expdontRestrictOnLoginTagChkBox);
		System.out.println("EnableVersionChkBox                                  : "+actenableVersionChkBox                                  +"  value expected  "+expenableVersionChkBox);
		System.out.println("PrintUsingDefaultPrinterAndFormatChkBox              : "+actprintUsingDefaultPrinterAndFormatChkBox              +"  value expected  "+expprintUsingDefaultPrinterAndFormatChkBox);
		System.out.println("CheckbudgetDropdown                                  : "+actcheckbudgetDropdown                                  +"  value expected  "+expcheckbudgetDropdown);
		System.out.println("PickEmailFromDropdown                                : "+actpickEmailFromDropdown                                +"  value expected  "+exppickEmailFromDropdown);
		System.out.println("StopRadio                                            : "+actstopRadio                                            +"  value expected  "+expstopRadio);
		System.out.println("WarnAndAllowRadio                                    : "+actwarnAndAllowRadio                                    +"  value expected  "+expwarnAndAllowRadio);
		System.out.println("EntryRestrictConditionTxt                            : "+actentryRestrictConditionTxt                            +"  value expected  "+expentryRestrictConditionTxt);
		System.out.println("EntryRestrictMessageTxt                              : "+actentryRestrictMessageTxt                              +"  value expected  "+expentryRestrictMessageTxt);
		System.out.println("DontpostCOGS                                         : "+actdontpostCOGS                                         +"  value expected  "+expdontpostCOGS);
		System.out.println("UpdateFAChkBox                                       : "+actupdateFAChkBox                                       +"  value expected  "+expupdateFAChkBox);
		System.out.println("SelectAccountInEveryLineChkBox                       : "+actselectAccountInEveryLineChkBox                       +"  value expected  "+expselectAccountInEveryLineChkBox);
		System.out.println("DetailedPostingChkbox                                : "+actdetailedPostingChkbox                                +"  value expected  "+expdetailedPostingChkbox);
		System.out.println("UpdateStockChkBox                                    : "+actupdateStockChkBox                                    +"  value expected  "+expupdateStockChkBox);
		System.out.println("AllowChangingUpdateStock                             : "+actallowChangingUpdateStock                             +"  value expected  "+expallowChangingUpdateStock);
		System.out.println("PostServicetaxChkBox                                 : "+actpostServicetaxChkBox                                 +"  value expected  "+exppostServicetaxChkBox);
		System.out.println("PostTDSchkBox                                        : "+actpostTDSchkBox                                        +"  value expected  "+exppostTDSchkBox);
		System.out.println("PostVATchkBox                                        : "+actpostVATchkBox                                        +"  value expected  "+exppostVATchkBox);
		System.out.println("LinkToLetterOfCreditChkBox                           : "+actlinkToLetterOfCreditChkBox                           +"  value expected  "+explinkToLetterOfCreditChkBox);
		System.out.println("DontcheckcreditlimitChkBox                           : "+actdontcheckcreditlimitChkBox                           +"  value expected  "+expdontcheckcreditlimitChkBox);
		System.out.println("AddCurrencyInDropdown                                : "+actaddCurrencyInDropdown                                +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox                              : "+actinputExchangeRateChkBox                              +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox                         : "+actinputLocalExchangeRateChkBox                         +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("PostExchangeRateDifferrenceChkBox                    : "+actpostExchangeRateDifferrenceChkBox                    +"  value expected  "+exppostExchangeRateDifferrenceChkBox);
		System.out.println("PostExchangeRateDifferenceBasedOnStandardRuleChkBox  : "+actpostExchangeRateDifferenceBasedOnStandardRuleChkBox  +"  value expected  "+exppostExchangeRateDifferenceBasedOnStandardRuleChkBox);
		System.out.println("DueDateDropdown                                      : "+actdueDateDropdown                                      +"  value expected  "+expdueDateDropdown);
		System.out.println("ArapOptionsDropdown                                  : "+actarapOptionsDropdown                                  +"  value expected  "+exparapOptionsDropdown);
		System.out.println("OptionsdDropdown                                     : "+actoptionsdDropdown                                     +"  value expected  "+expoptionsdDropdown);
		//System.out.println("SelectbillsbeforeAmountChkBox                        : "+actselectbillsbeforeAmountChkBox                        +"  value expected  "+expselectbillsbeforeAmountChkBox);
		System.out.println("PostDiscountBasedOnCrediDaysChkBox                   : "+actpostDiscountBasedOnCrediDaysChkBox                   +"  value expected  "+exppostDiscountBasedOnCrediDaysChkBox);
		System.out.println("InputPaymenttermsChkBox                              : "+actinputPaymenttermsChkBox                              +"  value expected  "+expinputPaymenttermsChkBox);
		System.out.println("NarrationDropdown                                    : "+actnarrationDropdown                                    +"  value expected  "+expnarrationDropdown);
		System.out.println("ApplyRulesOnExternalModuleChkbox                     : "+actapplyRulesOnExternalModuleChkbox                     +"  value expected  "+expapplyRulesOnExternalModuleChkbox);
		System.out.println("ApplyRulesOnLinkChkBox                               : "+actapplyRulesOnLinkChkBox                               +"  value expected  "+expapplyRulesOnLinkChkBox);
		System.out.println("ApplyRulesOnSetItemsChkBox                           : "+actapplyRulesOnSetItemsChkBox                           +"  value expected  "+expapplyRulesOnSetItemsChkBox);
		System.out.println("ApplyDependencyOnExternalModuleChkbox                : "+actapplyDependencyOnExternalModuleChkbox                +"  value expected  "+expapplyDependencyOnExternalModuleChkbox);
		System.out.println("ApplyDependencyOnLinkChkBox                          : "+actapplyDependencyOnLinkChkBox                          +"  value expected  "+expapplyDependencyOnLinkChkBox);
		System.out.println("ApplyDependencyOnSetItemsChkBox                      : "+actapplyDependencyOnSetItemsChkBox                      +"  value expected  "+expapplyDependencyOnSetItemsChkBox);
		
		if(actabbreviationTxt.equalsIgnoreCase(expabbreviationTxt) && actabbreviation==expabbreviation && actdefaultAccount1Txt==expdefaultAccount1Txt &&
			actdefaultAccount2Txt==expdefaultAccount2Txt && actchangeTransactionDateWhenAuthorizedChkBox==expchangeTransactionDateWhenAuthorizedChkBox &&
			actdateCannotBePriortoPrevdateChkBox==expdateCannotBePriortoPrevdateChkBox && actdetailedDisplayInSummaryBarChkBox==expdetailedDisplayInSummaryBarChkBox &&
			actdontAllowEditThisDocChkBox==expdontAllowEditThisDocChkBox && actdontAllowInputDateChkBox==expdontAllowInputDateChkBox &&
			actdontRestrictAccount1TypeChkBox==expdontRestrictAccount1TypeChkBox && actdontRestrictAccount2TypeChkBox==expdontRestrictAccount2TypeChkBox &&
			actdontRestrictOnLoginAccountChkBox==expdontRestrictOnLoginAccountChkBox && actdontRestrictOnLoginTagChkBox==expdontRestrictOnLoginTagChkBox &&
			actenableVersionChkBox==expenableVersionChkBox && actprintUsingDefaultPrinterAndFormatChkBox==expprintUsingDefaultPrinterAndFormatChkBox &&
			actcheckbudgetDropdown==expcheckbudgetDropdown && actpickEmailFromDropdown==exppickEmailFromDropdown && actstopRadio==expstopRadio &&
			actwarnAndAllowRadio==expwarnAndAllowRadio && actentryRestrictConditionTxt==expentryRestrictConditionTxt && actentryRestrictMessageTxt==expentryRestrictMessageTxt &&
			actdontpostCOGS==expdontpostCOGS && actupdateFAChkBox==expupdateFAChkBox && actselectAccountInEveryLineChkBox==expselectAccountInEveryLineChkBox &&
			actdetailedPostingChkbox==expdetailedPostingChkbox && actupdateStockChkBox==expupdateStockChkBox && actallowChangingUpdateStock==expallowChangingUpdateStock &&
			actpostServicetaxChkBox==exppostServicetaxChkBox && actpostTDSchkBox==exppostTDSchkBox && actpostVATchkBox==exppostVATchkBox &&
			actlinkToLetterOfCreditChkBox==explinkToLetterOfCreditChkBox && actdontcheckcreditlimitChkBox==expdontcheckcreditlimitChkBox && 
			actaddCurrencyInDropdown==expaddCurrencyInDropdown && actinputExchangeRateChkBox==expinputExchangeRateChkBox && actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox &&
			actpostExchangeRateDifferrenceChkBox==exppostExchangeRateDifferrenceChkBox && actpostExchangeRateDifferenceBasedOnStandardRuleChkBox==exppostExchangeRateDifferenceBasedOnStandardRuleChkBox &&
			actdueDateDropdown==expdueDateDropdown && actarapOptionsDropdown==exparapOptionsDropdown && actoptionsdDropdown==expoptionsdDropdown &&
			/*actselectbillsbeforeAmountChkBox==expselectbillsbeforeAmountChkBox &&*/ actpostDiscountBasedOnCrediDaysChkBox==exppostDiscountBasedOnCrediDaysChkBox &&
			actinputPaymenttermsChkBox==expinputPaymenttermsChkBox && actnarrationDropdown==expnarrationDropdown && actapplyRulesOnExternalModuleChkbox==expapplyRulesOnExternalModuleChkbox &&
			actapplyRulesOnLinkChkBox==expapplyRulesOnLinkChkBox && actapplyRulesOnSetItemsChkBox==expapplyRulesOnSetItemsChkBox &&
			actapplyDependencyOnExternalModuleChkbox==expapplyDependencyOnExternalModuleChkbox && actapplyDependencyOnLinkChkBox==expapplyDependencyOnLinkChkBox &&
			actapplyDependencyOnSetItemsChkBox==expapplyDependencyOnSetItemsChkBox)
		{
			System.out.println("Test Pass : Abbreviation Contain CasSal As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 142, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Abbreviation Does NotContain CasSal As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 142, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean checkUpdateStocksOptioninCashSales() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
		
		boolean actupdateStockChkBox			=updateStockChkBox.isDisplayed();
		
		boolean expupdateStockChkBox			=true;
		
		System.out.println("*********************************************checkUpdateStocksOptioninCashSales**********************************************");
		
		System.out.println("UpdateStockChkBox    : "+actupdateStockChkBox+"  value expected  "+expupdateStockChkBox);
		
		if(actupdateStockChkBox==expupdateStockChkBox)
		{
			System.out.println("Test Pass : Update Stock Option Is Available As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 143, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Update Stock Option Is Not Available");
			excelReader.setCellData(xlfile, "Sheet2", 143, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkSavingInCashSales() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.err.println("First : "+updateStockChkBox.isSelected());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
		updateStockChkBox.click();
		
		System.err.println("AfetrClick : "+updateStockChkBox.isSelected());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
	    updateBtn.click();
	    
	    System.out.println("*****************************************checkSavingInCashSales***************************************");
	    
	    String expMessage="Data Saved SuccessFully";
		
	    String actMessage=checkValidationMessage(expMessage);
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
	
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Saving data Successfuly");
			excelReader.setCellData(xlfile, "Sheet2", 144, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Saving data Successfuly");
			excelReader.setCellData(xlfile, "Sheet2", 144, 9, resFail);
			CloseBtnINDC.click();
			return false;
	    }
	}
	
	
	
	public boolean checkSavedOptionsInCashSales() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashSalesBtn));
		cashSalesBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abbreviationTxt));
		abbreviationTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
		
		boolean resOfUodateStockCheckbox			=updateStockChkBox.isSelected();
	
		boolean expresOfUodateStockCheckbox			=true;
		
		System.out.println("***********************************************checkSavedOptionsInCashSales**************************************************");
		
		System.out.println("ResOfUodateStockCheckbox : "+resOfUodateStockCheckbox+"  value expected  "+expresOfUodateStockCheckbox);
		
		if(resOfUodateStockCheckbox==expresOfUodateStockCheckbox)
		{
			System.out.println("Test Pass : Update Stocks Is Enabled In Cash Sales");
			excelReader.setCellData(xlfile, "Sheet2", 145, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Update Stocks Is Not Enabled In Cash Sales");
			excelReader.setCellData(xlfile, "Sheet2", 145, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkUpdateInCashSales() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.err.println("2nd First : "+updateStockChkBox.isSelected());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
		updateStockChkBox.click();
		
		System.err.println("2nd Second : "+updateStockChkBox.isSelected());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("******************************************checkUpdateInCashSales******************************************");
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Updating data Successfuly");
			excelReader.setCellData(xlfile, "Sheet2", 146, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Not Updating data Successfuly");
			excelReader.setCellData(xlfile, "Sheet2", 146, 9, resFail);
			return false;
			
		}
	}
	
	
		
	public boolean checkUpdatedOptionSaveOrNotInCashSales() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashSalesBtn));
		cashSalesBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abbreviationTxt));
		abbreviationTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
		
		boolean actupdateStockChkBox			=updateStockChkBox.isSelected();
		
		boolean expupdateStockChkBox			=false;
		
		System.out.println("***************************************checkUpdatedOptionSaveOrNotInCashSales********************************************");
		
		System.out.println("UpdateStockChkBox : "+actupdateStockChkBox+"  value expected  "+expupdateStockChkBox);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actupdateStockChkBox==expupdateStockChkBox)
		{
			System.out.println("Test Pass : Update Stocks Is Un-Checked In Cash Sales");
			excelReader.setCellData(xlfile, "Sheet2", 147, 9, resFail);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Update Stocks Is Checked In Cash Sales");
			excelReader.setCellData(xlfile, "Sheet2", 147, 9, resPass);
			return false;
		}
	}
		
		
	
	
		
	
	public boolean checkEditScreenPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersBtn));
		purchaseVouchersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		
		boolean acteditScreenTab			=editScreenTab.isDisplayed();
		
		boolean expeditScreenTab			=true;
		
		System.out.println("*******************************************checkEditScreenPurchaseVoucher************************************************");
		
		System.out.println("EditScreenTab     : "+acteditScreenTab+"  value expected  "+expeditScreenTab);
		
		if(acteditScreenTab==expeditScreenTab)
		{
			System.out.println("Test Pass : editScreenTab is Displayed In Purchase Voucher");
			excelReader.setCellData(xlfile, "Sheet2", 148, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail :  editScreenTab is Not Displayed In Purchase Voucher");
			excelReader.setCellData(xlfile, "Sheet2", 148, 9, resFail);
			return false;
		}
	}
		
		
		
	public boolean checkEditScreenOptionsInPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
		
		boolean acteditScreenBodyTab						=editScreenBodyTab.isDisplayed();
		boolean acteditScreenFooterTab						=editScreenFooterTab.isDisplayed();
		boolean acteditScreenaddBtn							=editScreenaddBtn.isDisplayed();
		boolean acteditScreenLoadFieldsBtn					=editScreenLoadFieldsBtn.isDisplayed();
		boolean acteditScreenPreviousBtn					=editScreenPreviousBtn.isDisplayed();
		boolean acteditScreenNextBtn						=editScreenNextBtn.isDisplayed();
		boolean acteditScreenBehaviourDropdown				=editScreenBehaviourDropdown.isDisplayed();
		boolean acteditScreenQuantityPreloadedTxt			=editScreenQuantityPreloadedTxt.isDisplayed();
		

		boolean expeditScreenBodyTab						=true;
		boolean expeditScreenFooterTab						=true;
		boolean expeditScreenaddBtn							=true;
		boolean expeditScreenLoadFieldsBtn					=true;
		boolean expeditScreenPreviousBtn					=true;
		boolean expeditScreenNextBtn						=true;
		boolean expeditScreenBehaviourDropdown				=true;
		boolean expeditScreenQuantityPreloadedTxt			=true;
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBehaviourDropdown));
		editScreenBehaviourDropdown.click();
		
		Select s= new Select(editScreenBehaviourDropdown);
		s.selectByVisibleText("Formula");
		
		editScreenBehaviourDropdown.click();
		
		boolean acteditScreenformulaTxt			=editScreenformulaTxt.isDisplayed();
		
		boolean expeditScreenformulaTxt			=true;
		
		System.out.println("*******************************************checkEditScreenOptionsInPurchaseVoucher*******************************************");
		
		System.out.println("EditScreenBodyTab                : "+acteditScreenBodyTab               +"  value expected  "+expeditScreenBodyTab);
		System.out.println("EditScreenFooterTab              : "+acteditScreenFooterTab             +"  value expected  "+expeditScreenFooterTab);
		System.out.println("EditScreenaddBtn                 : "+acteditScreenaddBtn                +"  value expected  "+expeditScreenaddBtn);
		System.out.println("EditScreenLoadFieldsBtn          : "+acteditScreenLoadFieldsBtn         +"  value expected  "+expeditScreenLoadFieldsBtn);
		System.out.println("EditScreenPreviousBtn            : "+acteditScreenPreviousBtn           +"  value expected  "+expeditScreenPreviousBtn);
		System.out.println("EditScreenNextBtn                : "+acteditScreenNextBtn               +"  value expected  "+expeditScreenNextBtn);
		System.out.println("EditScreenBehaviourDropdown      : "+acteditScreenBehaviourDropdown     +"  value expected  "+expeditScreenBehaviourDropdown);
		System.out.println("EditScreenQuantityPreloadedTxt   : "+acteditScreenQuantityPreloadedTxt  +"  value expected  "+expeditScreenQuantityPreloadedTxt);
		System.out.println("EditScreenformulaTxt             : "+acteditScreenformulaTxt            +"  value expected  "+expeditScreenformulaTxt);
		
		if(acteditScreenBodyTab==expeditScreenBodyTab && acteditScreenFooterTab==expeditScreenFooterTab && acteditScreenaddBtn==expeditScreenaddBtn &&
				acteditScreenLoadFieldsBtn==expeditScreenLoadFieldsBtn && acteditScreenPreviousBtn==expeditScreenPreviousBtn &&
				acteditScreenNextBtn==expeditScreenNextBtn && acteditScreenBehaviourDropdown==expeditScreenBehaviourDropdown &&
				acteditScreenQuantityPreloadedTxt==expeditScreenQuantityPreloadedTxt && acteditScreenformulaTxt==expeditScreenformulaTxt)
		{	
			System.out.println("Test Pass : Edit Screen Options Are Available as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 149, 9, resPass);
			return  true;
		}
		else
		{
			System.out.println("Test Fail : Edit Screen Options Are Not Available");
			excelReader.setCellData(xlfile, "Sheet2", 149, 9, resFail);
			return  false;
		}
	}
			
	
		
		
		
	public boolean checkAddButtonOptionsInPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldDetailsTab));
		
		boolean acteditScreenFieldDetailsTab			=editScreenFieldDetailsTab.isDisplayed();
		boolean acteditScreenPropertiesTab				=editScreenPropertiesTab.isDisplayed();
		boolean acteditScreenExternalModulesTab			=editScreenExternalModulesTab.isDisplayed();
		
		boolean expeditScreenFieldDetailsTab			=true;
		boolean expeditScreenPropertiesTab				=true;
		boolean expeditScreenExternalModulesTab			=true;
		
		System.out.println("****************************************checkAddButtonOptionsInPurchaseVoucher******************************************");
		
		System.out.println("EditScreenFieldDetailsTab     : "+acteditScreenFieldDetailsTab     +"  value expected  "+expeditScreenFieldDetailsTab);
		System.out.println("EditScreenPropertiesTab       : "+acteditScreenPropertiesTab       +"  value expected  "+expeditScreenPropertiesTab);
		System.out.println("EditScreenExternalModulesTab  : "+acteditScreenExternalModulesTab  +"  value expected  "+expeditScreenExternalModulesTab);
		
			if(acteditScreenFieldDetailsTab==expeditScreenFieldDetailsTab && acteditScreenPropertiesTab==expeditScreenPropertiesTab && 
				acteditScreenExternalModulesTab==expeditScreenExternalModulesTab)
			{
				System.out.println("Test Pass : FiledDetails,Properties,.External Modules are Displayed As Expected ");
				excelReader.setCellData(xlfile, "Sheet2", 150, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Tabs are Not Displayed ");
				excelReader.setCellData(xlfile, "Sheet2", 150, 9, resFail);
				return false;
			}
		
		}
		
	
	
	public boolean checkApplybuttonintheCreationFieldwithEmpty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("***************************************checkApplybuttonintheCreationFieldwithEmpty*******************************************");
		
		String expMessage="please enter screen field caption";
		
		String actMessage=checkValidationMessage(expMessage);
	
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Showing Error Message");
			excelReader.setCellData(xlfile, "Sheet2", 151, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Showing Error Message");
			excelReader.setCellData(xlfile, "Sheet2", 151, 9, resFail);
			return false;
		}
	}
	

	
	public boolean checkApplybuttonintheCreationFieldwithinputingdata() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		editScreenCaptionTxt.sendKeys("Formula");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddFieldsBehaviourDropdown));
		editScreenAddFieldsBehaviourDropdown.click();
		
		Select s=new Select(editScreenAddFieldsBehaviourDropdown);
		s.selectByVisibleText("Formula");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		editScreenAddBehaviourformulaTxt.click();
		editScreenAddBehaviourformulaTxt.sendKeys("qty*rt");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("**************************************checkApplybuttonintheCreationFieldwithinputingdata*************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Data Saved In Edit Screeen Field Details");
			excelReader.setCellData(xlfile, "Sheet2", 152, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Data NOT Saved In Edit Screeen Field Details");
			excelReader.setCellData(xlfile, "Sheet2", 152, 9, resFail);
			return false;
		}
	}
	
	@FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody/tr")
	public static List<WebElement> editScreenBodyRowList;
	
	@FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody/tr/td/span[1]")
	public static List<WebElement> editScreenbodyEditBtn;
	
	@FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody/tr/td[3]")
	public static List<WebElement> editScreenbodyCaption;
	
	public boolean checkEditoptionEditScreeninPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		int editScreenbodyCaptionCount = editScreenbodyCaption.size();
		
		System.err.println("editScreenbodyCaption : "+editScreenbodyCaptionCount);
		
		for(int i=0;i<editScreenbodyCaptionCount;i++)
		{
			String data = editScreenbodyCaption.get(i).getText();
			
			if(data.equalsIgnoreCase("Formula"))
			{
				editScreenbodyEditBtn.get(i).click();
			}
		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		
		String acteditScreenCaptionTxt=editScreenCaptionTxt.getAttribute("value");
		String expeditScreenCaptionTxt="Formula";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		editScreenAddBehaviourformulaTxt.click();
		
		String acteditScreenAddBehaviourformulaTxt				=editScreenAddBehaviourformulaTxt.getAttribute("value");
		String expeditScreenAddBehaviourformulaTxt				="qty*rt";
		
		System.out.println("************************************checkEditoptionEditScreeninPurchaseVoucher****************************************");
		
		System.out.println("EditScreenCaptionTxt              : "+acteditScreenCaptionTxt              +"  value expected  "+expeditScreenCaptionTxt);
		System.out.println("EditScreenAddBehaviourformulaTxt  : "+acteditScreenAddBehaviourformulaTxt  +"  value expected  "+expeditScreenAddBehaviourformulaTxt);
		
		if(acteditScreenCaptionTxt.equalsIgnoreCase(expeditScreenCaptionTxt) && acteditScreenAddBehaviourformulaTxt.equalsIgnoreCase(expeditScreenAddBehaviourformulaTxt))
		{
			System.out.println("Test Pass : Saved Data is able to Edit");
			excelReader.setCellData(xlfile, "Sheet2", 153, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Saved Data is NOT-able to Edit");
			excelReader.setCellData(xlfile, "Sheet2", 153, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkClosebuttonEditscreenInPurchaseVoucher()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreencloseBtnInDc));
		editScreencloseBtnInDc.click();
		
		boolean acteditScreenBodyTab					=editScreenBodyTab.isDisplayed();
		boolean acteditScreenFooterTab					=editScreenFooterTab.isDisplayed();
		boolean acteditScreenLoadFieldsBtn				=editScreenLoadFieldsBtn.isDisplayed();
		boolean acteditScreenaddBtn						=editScreenaddBtn.isDisplayed();
		boolean acteditScreenPreviousBtn				=editScreenPreviousBtn.isDisplayed();
		boolean acteditScreenNextBtn					=editScreenNextBtn.isDisplayed();
		boolean acteditScreenBehaviourDropdown			=editScreenBehaviourDropdown.isDisplayed();
		boolean acteditScreenQuantityPreloadedTxt		=editScreenQuantityPreloadedTxt.isDisplayed();
		boolean acteditScreenformulaTxt					=editScreenformulaTxt.isDisplayed();
		
		boolean expeditScreenBodyTab					=true;
		boolean expeditScreenFooterTab					=true;
		boolean expeditScreenLoadFieldsBtn				=true;
		boolean expeditScreenaddBtn						=true;
		boolean expeditScreenPreviousBtn				=true;
		boolean expeditScreenNextBtn					=true;
		boolean expeditScreenBehaviourDropdown			=true;
		boolean expeditScreenQuantityPreloadedTxt		=true;
		boolean expeditScreenformulaTxt					=true;
		
		System.out.println("****************************************checkClosebuttonEditscreenInPurchaseVoucher*********************************************");
		
		System.out.println("EditScreenBodyTab               : "+acteditScreenBodyTab               +"  value expected  "+expeditScreenBodyTab);
		System.out.println("EditScreenFooterTab             : "+acteditScreenFooterTab             +"  value expected  "+expeditScreenFooterTab);
		System.out.println("EditScreenLoadFieldsBtn         : "+acteditScreenLoadFieldsBtn         +"  value expected  "+expeditScreenLoadFieldsBtn);
		System.out.println("EditScreenaddBtn                : "+acteditScreenaddBtn                +"  value expected  "+expeditScreenaddBtn);
		System.out.println("EditScreenPreviousBtn           : "+acteditScreenPreviousBtn           +"  value expected  "+expeditScreenPreviousBtn);
		System.out.println("EditScreenNextBtn               : "+acteditScreenNextBtn               +"  value expected  "+expeditScreenNextBtn);
		System.out.println("EditScreenBehaviourDropdown     : "+acteditScreenBehaviourDropdown     +"  value expected  "+expeditScreenBehaviourDropdown);
		System.out.println("EditScreenQuantityPreloadedTxt  : "+acteditScreenQuantityPreloadedTxt  +"  value expected  "+expeditScreenQuantityPreloadedTxt);
		System.out.println("EditScreenformulaTxt            : "+acteditScreenformulaTxt            +"  value expected  "+expeditScreenformulaTxt);
		
		if(acteditScreenBodyTab==expeditScreenBodyTab && acteditScreenFooterTab==expeditScreenFooterTab && acteditScreenLoadFieldsBtn==expeditScreenLoadFieldsBtn &&
				acteditScreenaddBtn==expeditScreenaddBtn && acteditScreenPreviousBtn==expeditScreenPreviousBtn && acteditScreenNextBtn==expeditScreenNextBtn &&
				acteditScreenBehaviourDropdown==expeditScreenBehaviourDropdown && acteditScreenQuantityPreloadedTxt==expeditScreenQuantityPreloadedTxt &&
				acteditScreenformulaTxt==expeditScreenformulaTxt)
		{
			System.out.println("Test Pass : Close Btn Is Working properly ");
			excelReader.setCellData(xlfile, "Sheet2", 154, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Close Btn Is NOT Working properly ");
			excelReader.setCellData(xlfile, "Sheet2", 154, 9, resFail);
			return false;
		}
	}
	
	@FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody/tr/td/span[2]")
	public static List<WebElement> editScreenbodyDeleteBtn;
	
	
	public boolean checkDeleteoptionEditscreeninPurchasevoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		int editScreenbodyCaptionCount = editScreenbodyCaption.size();
		
		System.err.println("editScreenbodyCaption : "+editScreenbodyCaptionCount);
		
		for(int i=0;i<editScreenbodyCaptionCount;i++)
		{
			String data = editScreenbodyCaption.get(i).getText();
			
			if(data.equalsIgnoreCase("Formula"))
			{
				editScreenbodyDeleteBtn.get(i).click();
				
				break;
			}
		}	
		
		
		getWaitForAlert();
		
		String actAlertTxt			=getAlert().getText();
		String expAlertTxt			="Are you sure that you want to delete?";
		
		getAlert().accept();
		
		String expMessage  ="Data deleted Successfully";
		String actMessage  =checkValidationMessage(expMessage);
		
		System.out.println("*************************************checkDeleteoptionEditscreeninPurchasevoucher*****************************************");
		
		System.out.println("AlertTxt    : "+actAlertTxt +"  value expected  "+expAlertTxt);
		System.out.println("ErrorMsg    : "+actMessage  +"  value expected  "+expMessage);
		
		if(actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Deleting Field Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 155, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Deleting Field");
			excelReader.setCellData(xlfile, "Sheet2", 155, 9, resFail);
			return false;
		}
	}
	
	


	public boolean checkFooterTabEditScreenInPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
	    
	    boolean acteditScreenFooterTab				=editScreenFooterTab.isDisplayed();
	    
	    boolean expeditScreenFooterTab				=true;
	    
	    System.out.println("***************************************checkFooterTabEditScreenInPurchaseVoucher******************************************");
	    
	    System.out.println("EditScreenFooterTab      : "+acteditScreenFooterTab+"  value expected  "+expeditScreenFooterTab);
	    
		if(acteditScreenFooterTab==expeditScreenFooterTab)
		{
			System.out.println("Test Pass : Footer Tab is Available In purchase Voucher Edit Screen");
			excelReader.setCellData(xlfile, "Sheet2", 156, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Footer Tab is Not Available");
			excelReader.setCellData(xlfile, "Sheet2", 156, 9, resFail);
			return false;
		}
	}
	 
	
	
	
	public boolean checkFooterTabOptionsEditScreeninPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
		editScreenFooterTab.click();
		
		boolean acteditScreenaddBtn					=editScreenaddBtn.isDisplayed();
		
		boolean expeditScreenaddBtn					=true;
		
		System.out.println("****************************************checkFooterTabOptionsEditScreeninPurchaseVoucher*******************************************");
		
		System.out.println("EditScreenaddBtn       : "+acteditScreenaddBtn+"  value expected  "+expeditScreenaddBtn);
		
		if(acteditScreenaddBtn==expeditScreenaddBtn)
		{
			System.out.println("Test Pass : Footer Tab Options Are Available");
            excelReader.setCellData(xlfile, "Sheet2", 157, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Footer Tab Options Are NOT Available");
            excelReader.setCellData(xlfile, "Sheet2", 157, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkFooterTabAddbuttoninEditScreeninPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldDetailsTab));
				
		boolean acteditScreenFieldDetailsTab				=editScreenFieldDetailsTab.isDisplayed();
		boolean acteditScreenPropertiesTab					=editScreenPropertiesTab.isDisplayed();
		boolean acteditScreenExternalModulesTab				=editScreenExternalModulesTab.isDisplayed();
		boolean acteditScreenformattingTab					=editScreenformattingTab.isDisplayed();
		
		boolean expeditScreenFieldDetailsTab				=true;
		boolean expeditScreenPropertiesTab					=true;
		boolean expeditScreenExternalModulesTab				=true;
		boolean expeditScreenformattingTab					=true;
		
		System.out.println("*************************************checkFooterTabAddbuttoninEditScreeninPurchaseVoucher*********************************************");
		
		System.out.println("EditScreenFieldDetailsTab       : "+acteditScreenFieldDetailsTab     +"  value expected  "+expeditScreenFieldDetailsTab);
		System.out.println("EditScreenPropertiesTab         : "+acteditScreenPropertiesTab       +"  value expected  "+expeditScreenPropertiesTab);
		System.out.println("EditScreenExternalModulesTab    : "+acteditScreenExternalModulesTab  +"  value expected  "+expeditScreenExternalModulesTab);
		System.out.println("EditScreenformattingTab         : "+acteditScreenformattingTab       +"  value expected  "+expeditScreenformattingTab);
		
		if(acteditScreenFieldDetailsTab==expeditScreenFieldDetailsTab && acteditScreenPropertiesTab==expeditScreenPropertiesTab &&
				acteditScreenExternalModulesTab==expeditScreenExternalModulesTab && acteditScreenformattingTab==expeditScreenformattingTab)
		{
			System.out.println("Test Pass : FiledDetails,Properties,.External Modules are Displayed As Expected ");
			excelReader.setCellData(xlfile, "Sheet2", 158, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Tabs are Not Displayed ");
			excelReader.setCellData(xlfile, "Sheet2", 158, 9, resFail);
			return false;
		}
	}
	
	  
	public boolean checkFooterTabApplybuttonintheCreationField() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		editScreenFieldOkBtn.click();
		
		System.out.println("*****************************checkFooterTabApplybuttonintheCreationField**************************");

		String expMessage="please enter screen field caption";
		
		String actMessage=checkValidationMessage(expMessage);
			
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Showing Error Message");
			excelReader.setCellData(xlfile, "Sheet2", 159, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Showing Error Message");
			excelReader.setCellData(xlfile, "Sheet2", 159, 9, resFail);
			return false;
		}
	}

	
	
	
	public boolean checkSavingFieldsinFooterTabEditScreeninPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		
		editScreenCaptionTxt.sendKeys("Formula");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddFieldsBehaviourDropdown));
		
		editScreenAddFieldsBehaviourDropdown.click();
		
		Select s=new Select(editScreenAddFieldsBehaviourDropdown);
		s.selectByVisibleText("Formula");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		editScreenAddBehaviourformulaTxt.click();
		editScreenAddBehaviourformulaTxt.sendKeys("qty*rt");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("*****************************************checkSavingFieldsinFooterTabEditScreeninPurchaseVoucher***************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Data Saved In Edit Screeen Field Details");
			excelReader.setCellData(xlfile, "Sheet2", 160, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Data NOT Saved In Edit Screeen Field Details");
			excelReader.setCellData(xlfile, "Sheet2", 160, 9, resFail);
			return false;
			
		}
	}
	
	
	
	
	public boolean checkEditoptionInFooterTabEditScreeninPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowEditBtn));
		editScreenFooter1stRowEditBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		
		String acteditScreenCaptionTxt						=editScreenCaptionTxt.getAttribute("value");
		String expeditScreenCaptionTxt						="Formula";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		editScreenAddBehaviourformulaTxt.click();
		
		String acteditScreenAddBehaviourformulaTxt			=editScreenAddBehaviourformulaTxt.getAttribute("value");
		String expeditScreenAddBehaviourformulaTxt			="qty*rt";
		
		System.out.println("****************************************checkEditoptionInFooterTabEditScreeninPurchaseVoucher*****************************************");
		
		System.out.println("EditScreenCaptionTxt              : "+acteditScreenCaptionTxt              +"  value expected  "+expeditScreenCaptionTxt);
		System.out.println("EditScreenAddBehaviourformulaTxt  : "+acteditScreenAddBehaviourformulaTxt  +"  value expected  "+expeditScreenAddBehaviourformulaTxt);
		
		if(acteditScreenCaptionTxt.equalsIgnoreCase(expeditScreenCaptionTxt) && acteditScreenAddBehaviourformulaTxt.equalsIgnoreCase(expeditScreenAddBehaviourformulaTxt))
		{
			System.out.println("Test Pass : Saved Data is able to Edit");
            excelReader.setCellData(xlfile, "Sheet2", 161, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Saved Data is NOT-able to Edit");
            excelReader.setCellData(xlfile, "Sheet2", 161, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkDeleteoptionInFooterTabEditScreeninPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreencloseBtnInDc));
		editScreencloseBtnInDc.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowDeleteBtn));
		editScreenFooter1stRowDeleteBtn.click();

		getWaitForAlert();
		
		String actAlertTxt				=getAlert().getText();
		String expAlertTxt				="Are you sure that you want to delete?";
		
		getAlert().accept();
		
		String expMessage="Data deleted Successfully";

		String actMessage=checkValidationMessage(expMessage);
		
		System.out.println("***********************************checkDeleteoptionInFooterTabEditScreeninPurchaseVoucher*****************************************");
		
		System.out.println("AlertTxt    : "+actAlertTxt  +"  value expected  "+expAlertTxt);
		System.out.println("ErrorMsg    : "+actMessage   +"  value expected  "+expMessage);
		
		if(actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Deleting Field Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 162, 9, resPass);
			return true;
			
		}else
		{
			System.out.println("Test Fail : Not Deleting Field");
			excelReader.setCellData(xlfile, "Sheet2", 162, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean checkaddingFDFooterField() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		editScreenCaptionTxt.sendKeys("FD%");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys("2");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		Select s2=new Select(EditScreenAddToStockDropDown);
		s2.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		Select s3=new Select(editScreenAddToNetDropdown);
		s3.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("*****************************************checkaddingFDFooterField***************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Data Saved Succesfuuly");
			excelReader.setCellData(xlfile, "Sheet2", 163, 9, resPass);
			return true;
			
		}
		else
		{
			System.out.println("Test Fail : Data NOT Saved");
			excelReader.setCellData(xlfile, "Sheet2", 163, 9, resFail);
			return false;		
		}
	}
	
	
	
	 
	
	public boolean checkRDBodyaddingField() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
		editScreenBodyTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		editScreenCaptionTxt.sendKeys("RD");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys("2");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		
		Select s2=new Select(EditScreenAddToStockDropDown);
		s2.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		
		Select s3=new Select(editScreenAddToNetDropdown);
		s3.selectByVisibleText("Deduct");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddFieldsBehaviourDropdown));
		editScreenAddFieldsBehaviourDropdown.click();
		
		Select s=new Select(editScreenAddFieldsBehaviourDropdown);
		s.selectByVisibleText("Formula");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		editScreenAddBehaviourformulaTxt.click();
		editScreenAddBehaviourformulaTxt.sendKeys("&(gr*sf1)/tgr");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("******************************************checkRDBodyaddingField*****************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
			
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Data Saved Succesfully");
			excelReader.setCellData(xlfile, "Sheet2", 164, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Data NOT Saved");
			excelReader.setCellData(xlfile, "Sheet2", 164, 9, resFail);
			return false;		
		}
	}
	
	
	
	
	public boolean checkRatePreloadValue() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenRatePreloadLabel));
		
		boolean acteditScreenRatePreloadLabel				=editScreenRatePreloadLabel.isDisplayed();
		
		boolean expeditScreenRatePreloadLabel				=true;
		
		System.out.println("***********************************checkRatePreloadValue******************************************");
		
		System.out.println("editScreenRatePreloadLabel : "+acteditScreenRatePreloadLabel+"  value expected  "+expeditScreenRatePreloadLabel);
		
		if(acteditScreenRatePreloadLabel==expeditScreenRatePreloadLabel)
		{
			System.out.println("Test Pass : Rate Preload Is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 165, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Rate Preload Is NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 165, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean checkBehaviourOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBehaviourDropdown));
		editScreenBehaviourDropdown.click();
		
		Select s=new Select(editScreenBehaviourDropdown);
		
		int acteditScreenBehaviourDropdown				=s.getOptions().size();
		int expeditScreenBehaviourDropdown				=18;
		
		System.out.println("************************************checkBehaviourOptions*************************************");
		
		System.out.println("EditScreenBehaviourDropdown    : "+acteditScreenBehaviourDropdown+"  value expected  "+expeditScreenBehaviourDropdown);
		
		if(acteditScreenBehaviourDropdown==expeditScreenBehaviourDropdown)
		{
			System.out.println("Test Pass : Behaviour Options Are As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 166, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Behaviour Options Are NOT As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 166, 9, resFail);
			return false;
		}
	}
	

	public boolean checkMasterValues() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBehaviourDropdown));
		editScreenBehaviourDropdown.click();
		
		Select s=new Select(editScreenBehaviourDropdown);
		
		String acteditScreenBehaviourDropdownPO,acteditScreenBehaviourDropdownPT,expeditScreenBehaviourDropdownPO,expeditScreenBehaviourDropdownPT;
		
		acteditScreenBehaviourDropdownPO			=s.getOptions().get(3).getText();
		
		acteditScreenBehaviourDropdownPT			=s.getOptions().get(4).getText();
		
		expeditScreenBehaviourDropdownPO			="po";
		expeditScreenBehaviourDropdownPT			="pt";
		
		System.out.println("********************************************checkMasterValues***********************************************");
		
		System.out.println("EditScreenBehaviourDropdownPO : "+acteditScreenBehaviourDropdownPO+"  value expected  "+expeditScreenBehaviourDropdownPO);
		System.out.println("EditScreenBehaviourDropdownPT : "+acteditScreenBehaviourDropdownPT+"  value expected  "+expeditScreenBehaviourDropdownPT);
		
		if(acteditScreenBehaviourDropdownPO.equalsIgnoreCase(expeditScreenBehaviourDropdownPO) && acteditScreenBehaviourDropdownPT.equalsIgnoreCase(expeditScreenBehaviourDropdownPT))
		{
			System.out.println("Test Pass : Master values are displayed as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 167, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Master values are NOT displayed As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 167, 9, resFail);
			return false;
		}
	}
	
	

	public boolean checkUpdatebuttoninEditScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBehaviourDropdown));
		editScreenBehaviourDropdown.click();
		
		Select s=new Select(editScreenBehaviourDropdown);
		s.selectByVisibleText("Purchase4");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("*****************************************checkUpdatebuttoninEditScreen*************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Updating data Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 168, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Updating data Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 168, 9, resFail);
			return false;
		}
	}
		
	
	
	
	
		
	public boolean checkUpdatedValueEditScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersBtn));
		purchaseVouchersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBehaviourDropdown));
		
		String acteditScreenBehaviourDropdown				=editScreenBehaviourDropdown.getAttribute("value");
	
		String expeditScreenBehaviourDropdown				="6";
		
		System.out.println("******************************************checkUpdatedValueEditScreen**********************************************");
		
		System.out.println("EditScreenBehaviourDropdown    : "+acteditScreenBehaviourDropdown+"  value expected  "+expeditScreenBehaviourDropdown);
		
		if(acteditScreenBehaviourDropdown.equalsIgnoreCase(expeditScreenBehaviourDropdown))
		{
			System.out.println("Test Pass : Updated data is Saved Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 169, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Updated data is NOT Saved Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 169, 9, resFail);
			return false;
		}
	}
	
	 
	
	
	
	public boolean 	checkUpdatingValueInEditScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBehaviourDropdown));
		editScreenBehaviourDropdown.click();
		
		Select s=new Select(editScreenBehaviourDropdown);
		s.selectByVisibleText("Rate");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("*****************************************checkUpdatingValueInEditScreen***************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Updating data Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 170, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Updating data Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 170, 9, resFail);
			return false;
		}
	}
	
	

	
	public boolean 	checkLoadFieldsinBodyTabinMaterialReceiptsNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(materialReceiptsNotesBtn));
		materialReceiptsNotesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));		
		
		boolean acteditScreenLoadFieldsBtn					=editScreenLoadFieldsBtn.isDisplayed();
		
		boolean expeditScreenLoadFieldsBtn					=true;
		
		System.out.println("***********************************checkLoadFieldsinBodyTabinMaterialReceiptsNotes*************************************");
		
		System.out.println("EditScreenLoadFieldsBtn : "+acteditScreenLoadFieldsBtn+"  value expected  "+expeditScreenLoadFieldsBtn);
		
		if(acteditScreenLoadFieldsBtn==expeditScreenLoadFieldsBtn)
		{
			System.out.println("Test Pass : Load Fields Btn Is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 171, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Load Fields Btn Is Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 171, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkLoadFiledsOptionsBodyTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		
		boolean acteditScreenLoadFieldsDropdown				=editScreenLoadFieldsDropdown.isDisplayed();
		boolean acteditScreenselectAllBtn					=editScreenselectAllBtn.isDisplayed();
		boolean acteditScreenokBtn							=editScreenokBtn.isDisplayed();
		
		boolean expeditScreenLoadFieldsDropdown				=true;
		boolean expeditScreenselectAllBtn					=true;
		boolean expeditScreenokBtn							=true;
		
		System.out.println("**********************************************checkLoadFiledsOptionsBodyTab*************************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown   : "+acteditScreenLoadFieldsDropdown  +"  value expected  "+expeditScreenLoadFieldsDropdown);
		System.out.println("EditScreenselectAllBtn         : "+acteditScreenselectAllBtn        +"  value expected  "+expeditScreenselectAllBtn);
		System.out.println("EditScreenokBtn                : "+acteditScreenokBtn               +"  value expected  "+expeditScreenokBtn);
		
		if(acteditScreenLoadFieldsDropdown==expeditScreenLoadFieldsDropdown && acteditScreenselectAllBtn==expeditScreenselectAllBtn &&
				acteditScreenokBtn==expeditScreenokBtn)
		{
			System.out.println("Test Pass : Load Fileds options Are As expected");
			excelReader.setCellData(xlfile, "Sheet2", 172, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Load Fileds options Are Not As expected");
			excelReader.setCellData(xlfile, "Sheet2", 172, 9, resFail);
			return false;
		}
	}
	

	
	public boolean 	checkLoadFieldsDropdownOptionsinBodyTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();

		Select s=new Select(editScreenLoadFieldsDropdown);
		
		int acteditScreenLoadFieldsDropdown				=s.getOptions().size();
		int expeditScreenLoadFieldsDropdown				=29;
		
		System.out.println("*****************************************checkLoadFieldsDropdownOptionsinBodyTab*******************************************");
		
		System.out.println("editScreenLoadFieldsDropdown  : "+acteditScreenLoadFieldsDropdown+"  value expected  "+expeditScreenLoadFieldsDropdown);

		if(acteditScreenLoadFieldsDropdown==expeditScreenLoadFieldsDropdown)
		{
			System.out.println("Test Pass : LoadField Dropdown Options Are as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 173, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : LoadField Dropdown Options Are Not as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 173, 9, resFail);
			return false;
		}
	}
		

	
	
	
	
	public boolean 	checkselectingPurchseVoucherFromLoadFieldsDropdownBodyTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		
		s.selectByVisibleText("Purchases Vouchers");
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields1stChkBox));	
		
		
		boolean acteditScreenLoadFields1stChkBox			=editScreenLoadFields1stChkBox.isDisplayed();
		
		boolean expeditScreenLoadFields1stChkBox			=true;
		
		System.out.println("****************************************checkselectingPurchseVoucherFromLoadFieldsDropdownBodyTab*******************************************");
		
		System.out.println("EditScreenLoadFields1stChkBox   : "+acteditScreenLoadFields1stChkBox+"  value expected  "+expeditScreenLoadFields1stChkBox);
		
		if(acteditScreenLoadFields1stChkBox==expeditScreenLoadFields1stChkBox)
		{
			System.out.println("Test Pass : RD Check box is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 174, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : RD Check box is NOt Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 174, 9, resFail);
			return false;
		}
	}
	
	@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div/label")
	public static List<WebElement> editScreenloadFieldsList;
	
	
	public boolean  checkRDBodyField() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		int editScreenloadFieldsListCount = editScreenloadFieldsList.size();
		
		System.err.println("editScreenloadFieldsList : "+editScreenloadFieldsListCount);
		
		for(int i=0;i<editScreenloadFieldsListCount;i++)
		{
			String data = editScreenloadFieldsList.get(i).getText();
			
			if(data.equalsIgnoreCase("RD"))
			{
				editScreenloadFieldsList.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));	
		
		boolean acteditScreenBody1stRowEditBtn			=editScreenBody1stRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody1stRowEditBtn			=true;
		
		System.out.println("***************************************checkRDBodyField*****************************************");
		
		System.out.println("EditScreenBody1stRowEditBtn  : "+acteditScreenBody1stRowEditBtn+"  value expected  "+expeditScreenBody1stRowEditBtn);
		
		if(acteditScreenBody1stRowEditBtn==expeditScreenBody1stRowEditBtn)
		{
			System.out.println("Test Pass : RD is Displayed In Body Field");
			excelReader.setCellData(xlfile, "Sheet2", 175, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : RD id Not Displayed In Body Field");
			excelReader.setCellData(xlfile, "Sheet2", 175, 9, resFail);
			return false;
		}
	}
	

	
	public boolean 	checkFormualaBodyaddingField() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		int editScreenbodyCaptionCount = editScreenbodyCaption.size();
		
		System.err.println("editScreenbodyCaption : "+editScreenbodyCaptionCount);
		
		for(int i=0;i<editScreenbodyCaptionCount;i++)
		{
			String data = editScreenbodyCaption.get(i).getText();
			
			if(data.equalsIgnoreCase("RD"))
			{
				editScreenbodyEditBtn.get(i).click();
			}
		}	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		editScreenAddBehaviourformulaTxt.click();
		
		String acteditScreenAddBehaviourformulaTxt			=editScreenAddBehaviourformulaTxt.getAttribute("value");
		String expeditScreenAddBehaviourformulaTxt			="&(gr*sf1)/tgr";
		
		System.out.println("********************************************checkFormualaBodyaddingField****************************************************");
		
		System.out.println("EditScreenAddBehaviourformulaTxt : "+acteditScreenAddBehaviourformulaTxt+"  value expected  "+expeditScreenAddBehaviourformulaTxt);
		
		if(acteditScreenAddBehaviourformulaTxt.equalsIgnoreCase(expeditScreenAddBehaviourformulaTxt))
		{
			System.out.println("Test Pass : Formula is As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 176, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Formula is Not As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 176, 9, resFail);
			return false;
		}
	}

	
	public boolean 	checkFooterTabinEditScreenInMaterialReceiptsNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreencloseBtnInDc));
		editScreencloseBtnInDc.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));	
		
		boolean acteditScreenFooterTab				=editScreenFooterTab.isDisplayed();
		
		boolean expeditScreenFooterTab				=true;
		
		System.out.println("*************************************checkFooterTabinEditScreenInMaterialReceiptsNotes**************************************");
		
		System.out.println("EditScreenFooterTab : "+acteditScreenFooterTab+"  value expected  "+expeditScreenFooterTab);
		
		if(acteditScreenFooterTab==expeditScreenFooterTab)
		{
			System.out.println("Test Pass : Footer Tab Is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 177, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Footer Tab Is Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 177, 9, resFail);
			return false;
		}
	}
	
		
	
	public boolean 	checkLoadFieldsinFooterTabinMaterialReceiptsNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
		editScreenFooterTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		
		boolean acteditScreenLoadFieldsBtn				=editScreenLoadFieldsBtn.isDisplayed();
		
		boolean expeditScreenLoadFieldsBtn				=true;
		
		System.out.println("*************************************checkLoadFieldsinFooterTabinMaterialReceiptsNotes****************************************");
		
		System.out.println("EditScreenLoadFieldsBtn : "+acteditScreenLoadFieldsBtn+"  value expected  "+expeditScreenLoadFieldsBtn);
		
		if(acteditScreenLoadFieldsBtn==expeditScreenLoadFieldsBtn)
		{
			System.out.println("Test Pass : Load Fields Option Is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 178, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Load Fields Option Is Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 178, 9, resFail);
			return false;
		}
	}
	
	
	public boolean 	checkLoadFieldOptionsInMaterialreceiptNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));	
		
		boolean acteditScreenLoadFieldsDropdown				=editScreenLoadFieldsDropdown.isDisplayed();
		boolean acteditScreenselectAllBtn					=editScreenselectAllBtn.isDisplayed();
		boolean acteditScreenokBtn							=editScreenokBtn.isDisplayed();
		
		boolean expeditScreenLoadFieldsDropdown				=true;
		boolean expeditScreenselectAllBtn					=true;
		boolean expeditScreenokBtn							=true;
		
		System.out.println("******************************************checkLoadFieldOptionsInMaterialreceiptNotes********************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown    : "+acteditScreenLoadFieldsDropdown  +"  value expected  "+expeditScreenLoadFieldsDropdown);
		System.out.println("EditScreenselectAllBtn          : "+acteditScreenselectAllBtn        +"  value expected  "+expeditScreenselectAllBtn);
		System.out.println("EditScreenokBtn                 : "+acteditScreenokBtn               +"  value expected  "+expeditScreenokBtn);
		
		if(acteditScreenLoadFieldsDropdown==expeditScreenLoadFieldsDropdown && acteditScreenselectAllBtn==expeditScreenselectAllBtn && 
				acteditScreenokBtn==expeditScreenokBtn)
		{
			System.out.println("Test Pass : Load Fileds options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 179, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Load Fileds options Are Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 179, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkLoadFieldsDropdownOptionsinFooterTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		
		int acteditScreenLoadFieldsDropdown				=s.getOptions().size();
		
		int expeditScreenLoadFieldsDropdown				=29;
		
		System.out.println("***********************************checkLoadFieldsDropdownOptionsinFooterTab************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown    : "+acteditScreenLoadFieldsDropdown+"  value expected  "+expeditScreenLoadFieldsDropdown);
		
		if(acteditScreenLoadFieldsDropdown==expeditScreenLoadFieldsDropdown)
		{
			System.out.println("Test Pass : LoadField Dropdown Options Are as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 180, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : LoadField Dropdown Options Are Not as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 180, 9, resFail);
			return false;
		}
	}
	
	
	public boolean 	checkselectingPurchseVoucherFromLoadFieldsDropdownFooterTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		
		s.selectByVisibleText("Purchases Vouchers");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields1stChkBox));
		
		boolean acteditScreenLoadFields1stChkBox			=editScreenLoadFields1stChkBox.isDisplayed();
		
		boolean expeditScreenLoadFields1stChkBox			=true;
		
		System.out.println("***********************************checkselectingPurchseVoucherFromLoadFieldsDropdownFooterTab************************************");
		
		System.out.println("EditScreenLoadFields1stChkBox   : "+acteditScreenLoadFields1stChkBox+"  value expected  "+expeditScreenLoadFields1stChkBox);
		
		if(acteditScreenLoadFields1stChkBox==expeditScreenLoadFields1stChkBox)
		{
			System.out.println("Test Pass : FD Check box is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 181, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : FD Check box is NOt Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 181, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean  checkFDSavingInFooterTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields1stChkBox));
		editScreenLoadFields1stChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowEditBtn));
		
		boolean acteditScreenFooter1stRowEditBtn			=editScreenFooter1stRowEditBtn.isDisplayed();
		
		boolean expeditScreenFooter1stRowEditBtn			=true;
		
		System.out.println("******************************************checkFDSavingInFooterTab*****************************************");
		
		System.out.println("EditScreenFooter1stRowEditBtn   : "+acteditScreenFooter1stRowEditBtn+"  value expected  "+expeditScreenFooter1stRowEditBtn);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(acteditScreenFooter1stRowEditBtn==expeditScreenFooter1stRowEditBtn)
		{
			System.out.println("Test Pass : FD is Displayed In Footer Tab");
			excelReader.setCellData(xlfile, "Sheet2", 182, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : RD id Not Displayed In Footer Tab");
			excelReader.setCellData(xlfile, "Sheet2", 182, 9, resFail);
			return false;
		}
	}
	

	
	public boolean  checkLoadFieldsinBodyTabpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsBtn));
		purchaseReturnsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		
		boolean acteditScreenLoadFieldsBtn				=editScreenLoadFieldsBtn.isDisplayed();
		
		boolean expeditScreenLoadFieldsBtn				=true;
		
		System.out.println("***************************************checkLoadFieldsinBodyTabpurchaseReturns****************************************");

		System.out.println("EditScreenLoadFieldsBtn : "+acteditScreenLoadFieldsBtn+"  value expected  "+expeditScreenLoadFieldsBtn);
		
		if(acteditScreenLoadFieldsBtn==expeditScreenLoadFieldsBtn)
		{
			System.out.println("Test Pass : Load Fields Is Displayed In Purchase Returns");
			excelReader.setCellData(xlfile, "Sheet2", 183, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Load Fields Is NOT Displayed In Purchase Returns");
			excelReader.setCellData(xlfile, "Sheet2", 183, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean  checkLoadFieldsOptioninEditScreenpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		
		boolean acteditScreenLoadFieldsDropdown				=editScreenLoadFieldsDropdown.isDisplayed();
		boolean acteditScreenselectAllBtn					=editScreenselectAllBtn.isDisplayed();
		boolean acteditScreenokBtn							=editScreenokBtn.isDisplayed();
		
		boolean expeditScreenLoadFieldsDropdown				=true;
		boolean expeditScreenselectAllBtn					=true;
		boolean expeditScreenokBtn							=true;
		
		System.out.println("*******************************************checkLoadFieldsOptioninEditScreenpurchaseReturns*****************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown  : "+acteditScreenLoadFieldsDropdown  +"  value expected  "+expeditScreenLoadFieldsDropdown);
		System.out.println("EditScreenselectAllBtn        : "+acteditScreenselectAllBtn        +"  value expected  "+expeditScreenselectAllBtn);
		System.out.println("EditScreenokBtn               : "+acteditScreenokBtn               +"  value expected  "+expeditScreenokBtn);
		
		if(acteditScreenLoadFieldsDropdown==expeditScreenLoadFieldsDropdown && acteditScreenselectAllBtn==expeditScreenselectAllBtn && 
				acteditScreenokBtn==expeditScreenokBtn)
		{
			System.out.println("Test Pass : Load Field Options Are Displayed ");
			excelReader.setCellData(xlfile, "Sheet2", 184, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Load Field Options Are Not Displayed ");
			excelReader.setCellData(xlfile, "Sheet2", 184, 9, resPass);
			return false;
		}
	}
	
	
	
	public boolean  checkSelectcomboOptionsinEditScreenpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		
		int expeditScreenLoadFieldsDropdown					=29;
		int acteditScreenLoadFieldsDropdown					=s.getOptions().size();
		
		System.out.println("***************************************checkSelectcomboOptionsinEditScreenpurchaseReturns***************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown 	: "+acteditScreenLoadFieldsDropdown+"  value expected  "+expeditScreenLoadFieldsDropdown);
		
		if(acteditScreenLoadFieldsDropdown==expeditScreenLoadFieldsDropdown)
		{
			System.out.println("Test Pass : LoadField Dropdown Options Are as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 185, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : LoadField Dropdown Options Are Not as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 185, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean  checkSelectpurchaseVouchersOptioninEditScreenpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		String acteditScreenLoadFieldsDropdown				=s.getOptions().get(1).getText();
		String expeditScreenLoadFieldsDropdown				="Purchases Vouchers";
		
		System.out.println("*********************************checkSelectpurchaseVouchersOptioninEditScreenpurchaseReturns*************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown   : "+acteditScreenLoadFieldsDropdown+"  value expected  "+expeditScreenLoadFieldsDropdown);
		
		if(acteditScreenLoadFieldsDropdown.equalsIgnoreCase(expeditScreenLoadFieldsDropdown))
		{
			System.out.println("Test Pass : Purchases Vouchers is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 186, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Purchases Vouchers is NOt Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 186, 9, resFail);
			return false;
		}
		
	}
	
	
	
	public boolean  checkRDinEditScreenpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		s.selectByVisibleText("Purchases Vouchers");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		
		boolean acteditScreenLoadFields1stChkBox				=editScreenLoadFields1stChkBox.isDisplayed();
		
		boolean expeditScreenLoadFields1stChkBox				=true;
		
		System.out.println("***************************************************checkRDinEditScreenpurchaseReturns***************************************************");
		
		System.out.println("EditScreenLoadFields1stChkBox    : "+acteditScreenLoadFields1stChkBox+"  value expected  "+expeditScreenLoadFields1stChkBox);
		
		if(acteditScreenLoadFields1stChkBox==expeditScreenLoadFields1stChkBox)
		{
			System.out.println("Test Pass : RD Check box is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 187, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : RD Check box is NOt Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 187, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean  checkSelectedRDinEditScreenpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		int editScreenloadFieldsListCount = editScreenloadFieldsList.size();
		
		for(int i=0;i<editScreenloadFieldsListCount;i++)
		{
			String data = editScreenloadFieldsList.get(i).getText();
			
			if(data.equalsIgnoreCase("RD"))
			{
				editScreenloadFieldsList.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));
		
		boolean acteditScreenBody1stRowEditBtn				=editScreenBody1stRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody1stRowEditBtn				=true;
		
		System.out.println("************************************checkSelectedRDinEditScreenpurchaseReturns**********************************");
		
		System.out.println("EditScreenBody1stRowEditBtn    : "+acteditScreenBody1stRowEditBtn+"  value expected  "+expeditScreenBody1stRowEditBtn);
		
		if(acteditScreenBody1stRowEditBtn==expeditScreenBody1stRowEditBtn)
		{
			System.out.println("Test Pass : RD is Displayed In Body Field");
			excelReader.setCellData(xlfile, "Sheet2", 188, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : RD id Not Displayed In Body Field");
			excelReader.setCellData(xlfile, "Sheet2", 188, 9, resFail);
			return false;
		}
	}
	
	
	public boolean 	checkFormulaTextOptioninEditScreenpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		int editScreenbodyCaptionCount = editScreenbodyCaption.size();
		
		System.err.println("editScreenbodyCaption : "+editScreenbodyCaptionCount);
		
		for(int i=0;i<editScreenbodyCaptionCount;i++)
		{
			String data = editScreenbodyCaption.get(i).getText();
			
			if(data.equalsIgnoreCase("RD"))
			{
				editScreenbodyEditBtn.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		editScreenAddBehaviourformulaTxt.click();
		
		String acteditScreenAddBehaviourformulaTxt			=editScreenAddBehaviourformulaTxt.getAttribute("value");
		String expeditScreenAddBehaviourformulaTxt			="&(gr*sf1)/tgr";
		
		System.out.println("***********************************checkFormulaTextOptioninEditScreenpurchaseReturns****************************************");
		
		System.out.println("EditScreenAddBehaviourformulaTxt : "+acteditScreenAddBehaviourformulaTxt+"  value expected  "+expeditScreenAddBehaviourformulaTxt);
		
		if(acteditScreenAddBehaviourformulaTxt.equalsIgnoreCase(expeditScreenAddBehaviourformulaTxt))
		{
			System.out.println("Test Pass : Formula is As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 189, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Formula is Not As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 189, 9, resFail);
			return false;
		}
	}

	
	public boolean 	checkFooterTabinEditScreeninPurchasesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreencloseBtnInDc));
		editScreencloseBtnInDc.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
		
		boolean acteditScreenFooterTab					=editScreenFooterTab.isDisplayed();
		
		boolean expeditScreenFooterTab					=true;
		
		System.out.println("******************************************checkFooterTabinEditScreeninPurchasesReturns*******************************************");
		
		System.out.println("EditScreenFooterTab      : "+acteditScreenFooterTab+"  value expected  "+expeditScreenFooterTab);
		
		if(acteditScreenFooterTab==expeditScreenFooterTab)
		{
			System.out.println("Test Pass : Footer Tab Is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 190, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Footer Tab Is Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 190, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkLoadFieldsinFooterTabinpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
		editScreenFooterTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		
		boolean acteditScreenLoadFieldsBtn					=editScreenLoadFieldsBtn.isDisplayed();
		
		boolean expeditScreenLoadFieldsBtn					=true;
		
		System.out.println("***************************************checkLoadFieldsinFooterTabinpurchaseReturns********************************************");
		
		System.out.println("EditScreenLoadFieldsBtn     : "+acteditScreenLoadFieldsBtn+"  value expected  "+expeditScreenLoadFieldsBtn);
		
		if(acteditScreenLoadFieldsBtn==expeditScreenLoadFieldsBtn)
		{
			System.out.println("Test Pass : Load Fields Is Displayed In Purchase Returns");
			excelReader.setCellData(xlfile, "Sheet2", 191, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Load Fields Is NOT Displayed In Purchase Returns");
			excelReader.setCellData(xlfile, "Sheet2", 191, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkLoadFieldsOptionsFooterinEditScreenpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		
		boolean acteditScreenLoadFieldsDropdown					=editScreenLoadFieldsDropdown.isDisplayed();
		boolean acteditScreenselectAllBtn						=editScreenselectAllBtn.isDisplayed();
		boolean acteditScreenokBtn								=editScreenokBtn.isDisplayed();
		
		boolean expeditScreenLoadFieldsDropdown					=true;
		boolean expeditScreenselectAllBtn						=true;
		boolean expeditScreenokBtn								=true;
		
		System.out.println("**************************************checkLoadFieldsOptionsFooterinEditScreenpurchaseReturns******************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown  : "+acteditScreenLoadFieldsDropdown  +"  value expected  "+expeditScreenLoadFieldsDropdown);
		System.out.println("EditScreenselectAllBtn        : "+acteditScreenselectAllBtn        +"  value expected  "+expeditScreenselectAllBtn);
		System.out.println("EditScreenokBtn               : "+acteditScreenokBtn               +"  value expected  "+expeditScreenokBtn);
		
		if(acteditScreenLoadFieldsDropdown==expeditScreenLoadFieldsDropdown && acteditScreenselectAllBtn==expeditScreenselectAllBtn &&
			acteditScreenokBtn==expeditScreenokBtn)
		{
			System.out.println("Test Pass : Load Field Options Are Displayed ");
			excelReader.setCellData(xlfile, "Sheet2", 192, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Load Field Options Are Not Displayed ");
			excelReader.setCellData(xlfile, "Sheet2", 192, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkSelectcomboOptionsinFooterEditScreenpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		
		int acteditScreenLoadFieldsDropdown				=s.getOptions().size();
		int expeditScreenLoadFieldsDropdown				=29;
		
		System.out.println("************************************checkSelectcomboOptionsinFooterEditScreenpurchaseReturns***************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown : "+acteditScreenLoadFieldsDropdown+"  value expected  "+expeditScreenLoadFieldsDropdown);
		
		if(acteditScreenLoadFieldsDropdown==expeditScreenLoadFieldsDropdown)
		{
			System.out.println("Test Pass : LoadField Dropdown Options Are as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 193, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : LoadField Dropdown Options Are Not as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 193, 9, resFail);
			return false;
		}
	}
	
	
	public boolean 	checkSelectpurchaseVouchersOptioninFooterEditScreenpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		
		String acteditScreenLoadFieldsDropdown				=s.getOptions().get(1).getText();
		String expeditScreenLoadFieldsDropdown				="Purchases Vouchers";

		System.out.println("******************************checkSelectpurchaseVouchersOptioninFooterEditScreenpurchaseReturns********************************");

		System.out.println("EditScreenLoadFieldsDropdown : "+acteditScreenLoadFieldsDropdown+"  value expected  "+expeditScreenLoadFieldsDropdown);
		
		if(acteditScreenLoadFieldsDropdown.equalsIgnoreCase(expeditScreenLoadFieldsDropdown))
		{
			System.out.println("Test Pass : Purchases Vouchers is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 194, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Purchases Vouchers is NOt Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 194, 9, resFail);
			return false;
		}
	}
	
	
	public boolean 	checkFDOptioninFooterEditScreenpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		
		s.selectByVisibleText("Purchases Vouchers"); 
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields1stChkBox));
		
		boolean acteditScreenLoadFields1stChkBox				=editScreenLoadFields1stChkBox.isDisplayed();

		boolean expeditScreenLoadFields1stChkBox				=true;
		
		System.out.println("*****************************************checkFDOptioninFooterEditScreenpurchaseReturns*****************************************");
		
		System.out.println("EditScreenLoadFields1stChkBox : "+acteditScreenLoadFields1stChkBox+"  value expected  "+expeditScreenLoadFields1stChkBox);
		
		if(acteditScreenLoadFields1stChkBox==expeditScreenLoadFields1stChkBox)
		{
			System.out.println("Test Pass : FD Check box is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 195, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : FD Check box is NOt Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 195, 9, resFail);
			return false;
		}
	  }

	
	
	public boolean 	checkSelectedFDinFooterTabpurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields1stChkBox));
		editScreenLoadFields1stChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowEditBtn));
		
		boolean acteditScreenFooter1stRowEditBtn				=editScreenFooter1stRowEditBtn.isDisplayed();
		
		boolean expeditScreenFooter1stRowEditBtn				=true;
		
		System.out.println("*************************************checkSelectedFDinFooterTabpurchaseReturns*****************************************");
		
		System.out.println("EditScreenFooter1stRowEditBtn  : "+acteditScreenFooter1stRowEditBtn+"  value expected  "+expeditScreenFooter1stRowEditBtn);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(acteditScreenFooter1stRowEditBtn==expeditScreenFooter1stRowEditBtn)
		{
			System.out.println("Test Pass : FD is Displayed In Footer Tab");
			excelReader.setCellData(xlfile, "Sheet2", 196, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : FD id Not Displayed In Footer Tab");
			excelReader.setCellData(xlfile, "Sheet2", 196, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkLoadFieldsinBodyTabSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersBtn));
		salesOrdersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		
		boolean acteditScreenLoadFieldsBtn				=editScreenLoadFieldsBtn.isDisplayed();
		
		boolean expeditScreenLoadFieldsBtn				=true;
		
		System.out.println("***********************************checkLoadFieldsinBodyTabSalesOrder***********************************");
		
		System.out.println("EditScreenLoadFieldsBtn : "+acteditScreenLoadFieldsBtn+"  value expected  "+expeditScreenLoadFieldsBtn);
		
		if(acteditScreenLoadFieldsBtn==expeditScreenLoadFieldsBtn)
		{
			System.out.println("Test Pass : Load Fields Is Displayed In SalesOrders");
			excelReader.setCellData(xlfile, "Sheet2", 197, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Load Fields Is NOT Displayed In SalesOrders");
			excelReader.setCellData(xlfile, "Sheet2", 197, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkLoadFieldsOptionsinEditScreenSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		
		boolean acteditScreenLoadFieldsDropdown				=editScreenLoadFieldsDropdown.isDisplayed();
		boolean acteditScreenselectAllBtn					=editScreenselectAllBtn.isDisplayed();
		boolean acteditScreenokBtn							=editScreenokBtn.isDisplayed();
		
		boolean expeditScreenLoadFieldsDropdown				=true;
		boolean expeditScreenselectAllBtn					=true;
		boolean expeditScreenokBtn							=true;
		
		System.out.println("**************************************checkLoadFieldsOptionsinEditScreenSalesOrder***********************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown  : "+acteditScreenLoadFieldsDropdown  +"  value expected  "+expeditScreenLoadFieldsDropdown);
		System.out.println("EditScreenselectAllBtn        : "+acteditScreenselectAllBtn        +"  value expected  "+expeditScreenselectAllBtn);
		System.out.println("EditScreenokBtn               : "+acteditScreenokBtn               +"  value expected  "+expeditScreenokBtn);
		
		if(acteditScreenLoadFieldsDropdown==expeditScreenLoadFieldsDropdown && acteditScreenselectAllBtn==expeditScreenselectAllBtn &&
				acteditScreenokBtn==expeditScreenokBtn)
		{
			System.out.println("Test Pass : Load Fields Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 198, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Load Fields Options Are Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 198, 9, resFail);
			return false;
		}
	}

	
	
	public boolean 	checkSelectcomboOptionsinEditScreenSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		int acteditScreenLoadFieldsDropdown				=s.getOptions().size();
		int expeditScreenLoadFieldsDropdown				=29;

		System.out.println("************************************editScreenLoadFieldsDropdown******************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown : "+acteditScreenLoadFieldsDropdown+"  value expected  "+expeditScreenLoadFieldsDropdown);
		
		if(acteditScreenLoadFieldsDropdown==expeditScreenLoadFieldsDropdown)
		{
			System.out.println("Test Pass : LoadField Dropdown Options Are as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 199, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : LoadField Dropdown Options Are Not as Expected");
			excelReader.setCellData(xlfile, "Sheet2", 199, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkselectingMaterialReceiptnotesFromLoadFieldsDropdown() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		String acteditScreenLoadFieldsDropdown				=s.getOptions().get(4).getText();
		String expeditScreenLoadFieldsDropdown				="Material Receipt Notes";
		
		System.out.println("**************************************checkselectingMaterialReceiptnotesFromLoadFieldsDropdown********************************************");
		
		System.out.println("EditScreenLoadFieldsDropdown : "+acteditScreenLoadFieldsDropdown+"  value expected  "+expeditScreenLoadFieldsDropdown);
		
		if(acteditScreenLoadFieldsDropdown.equalsIgnoreCase(expeditScreenLoadFieldsDropdown))
		{
			System.out.println("Test Pass : Material Receipt Notes is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 200, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Material Receipt Notes is NOt Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 200, 9, resFail);
			return false;
		}
	}

	
	
	public boolean 	checkRDEditScreenLoadFieldsSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		s.selectByVisibleText("Material Receipt Notes");
		
		editScreenLoadFieldsDropdown.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields1stChkBox));
		
		boolean acteditScreenLoadFields1stChkBox				=editScreenLoadFields1stChkBox.isDisplayed();
		
		boolean expeditScreenLoadFields1stChkBox				=true;
		
		System.out.println("**************************************checkRDEditScreenLoadFieldsSalesOrders**************************************");
		
		System.out.println("EditScreenLoadFields1stChkBox    : "+acteditScreenLoadFields1stChkBox+"  value expected  "+expeditScreenLoadFields1stChkBox);
		
		if(acteditScreenLoadFields1stChkBox==expeditScreenLoadFields1stChkBox)
		{
			System.out.println("Test Pass : RD Check box is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 201, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : RD Check box is NOt Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 201, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkSelectedRDinEditScreenSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		int editScreenloadFieldsListCount = editScreenloadFieldsList.size();
		
		for(int i=0;i<editScreenloadFieldsListCount;i++)
		{
			String data = editScreenloadFieldsList.get(i).getText();
			
			if(data.equalsIgnoreCase("RD"))
			{
				editScreenloadFieldsList.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));
		
		boolean acteditScreenBody1stRowEditBtn					=editScreenBody1stRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody1stRowEditBtn					=true;
		
		System.out.println("*****************************************checkSelectedRDinEditScreenSalesOrder***********************************************");
		
		System.out.println("EditScreenBody1stRowEditBtn : "+acteditScreenBody1stRowEditBtn+"  value expected  "+expeditScreenBody1stRowEditBtn);
		
		if(acteditScreenBody1stRowEditBtn==expeditScreenBody1stRowEditBtn)
		{
			System.out.println("Test Pass : RD is Displayed In Body Tab");
			excelReader.setCellData(xlfile, "Sheet2", 202, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : RD id Not Displayed In Body Tab");
			excelReader.setCellData(xlfile, "Sheet2", 202, 9, resFail);
			return false;
		}
	}
	
	
	public boolean 	checkFormulaTextOptioninSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		int editScreenbodyCaptionCount = editScreenbodyCaption.size();
		
		System.err.println("editScreenbodyCaption : "+editScreenbodyCaptionCount);
		
		for(int i=0;i<editScreenbodyCaptionCount;i++)
		{
			String data = editScreenbodyCaption.get(i).getText();
			
			if(data.equalsIgnoreCase("RD"))
			{
				editScreenbodyEditBtn.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		editScreenAddBehaviourformulaTxt.click();
		
		String acteditScreenAddBehaviourformulaTxt				=editScreenAddBehaviourformulaTxt.getAttribute("value");
		String expeditScreenAddBehaviourformulaTxt				="&(gr*sf1)/tgr";
		
		System.out.println("***************************************checkFormulaTextOptioninSalesOrder*******************************************");
		
		System.out.println("EditScreenAddBehaviourformulaTxt   : "+acteditScreenAddBehaviourformulaTxt+"  value expected  "+expeditScreenAddBehaviourformulaTxt);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreencloseBtnInDc));
		editScreencloseBtnInDc.click();
		
		if(acteditScreenAddBehaviourformulaTxt.equalsIgnoreCase(expeditScreenAddBehaviourformulaTxt))
		{
			System.out.println("Test Pass : Formula is As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 203, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Formula is Not As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 203, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkAddingFieldAQInEditScreenBodySalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));		
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		
		editScreenCaptionTxt.sendKeys("AQ");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		
		Select s2=new Select(EditScreenAddToStockDropDown);
		s2.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		
		Select s3=new Select(editScreenAddToNetDropdown);
		s3.selectByVisibleText("Not Applicable");
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("*************************************checkAddingFieldAQInEditScreenBodySalesOrder*************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Data Saved Succesfuuly");
			excelReader.setCellData(xlfile, "Sheet2", 204, 9, resPass);
			return true;
			
		}
		else
		{
			System.out.println("Test Fail : Data NOT Saved");
			excelReader.setCellData(xlfile, "Sheet2", 204, 9, resFail);
			return false;		
		}
	}
		
		
	
	
	public boolean 	checkAddingFieldFQInEditScreenBodySalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));		
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		editScreenCaptionTxt.sendKeys("FQ");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys("2");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		
		Select s2=new Select(EditScreenAddToStockDropDown);
		s2.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		
		Select s3=new Select(editScreenAddToNetDropdown);
		s3.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("*******************************************checkAddingFieldFQInEditScreenBodySalesOrder******************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Data Saved Succesfuuly");
			excelReader.setCellData(xlfile, "Sheet2", 205, 9, resPass);
			return true;
			
		}
		else
		{
			System.out.println("Test Fail : Data NOT Saved");
			excelReader.setCellData(xlfile, "Sheet2", 205, 9, resFail);
			return false;		
		}
	}
	
	
	
	
	public boolean 	checkQuantityPreloadEditScreenSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qtyPreloadedTxt));
		qtyPreloadedTxt.click();
		
		boolean actqtyPreloadedLabel					=qtyPreloadedLabel.isDisplayed();
		boolean actqtyPreloadedTxt						=qtyPreloadedTxt.isDisplayed();
		boolean actqtyPreloadedformulaTxt				=qtyPreloadedformulaTxt.isDisplayed();
		
		boolean expqtyPreloadedLabel=true;
		boolean expqtyPreloadedTxt=true;
		boolean expqtyPreloadedformulaTxt=true;
		
		System.out.println("****************************************checkQuantityPreloadEditScreenSalesOrder********************************************");
		
		System.out.println("QtyPreloadedLabel           : "+actqtyPreloadedLabel       +"  value expected  "+expqtyPreloadedLabel);
		System.out.println("QtyPreloadedTxt             : "+actqtyPreloadedTxt         +"  value expected  "+expqtyPreloadedTxt);
		System.out.println("QtyPreloadedformulaTxt      : "+actqtyPreloadedformulaTxt  +"  value expected  "+expqtyPreloadedformulaTxt);
		
		if(actqtyPreloadedLabel==expqtyPreloadedLabel && actqtyPreloadedTxt==expqtyPreloadedTxt && actqtyPreloadedformulaTxt==expqtyPreloadedformulaTxt)
		{
			System.out.println("Test Pass : Quantity Preloaded Fileds Are As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 206, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Quantity Preloaded Fileds Are Not As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 206, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkFormulaScreenEditScreenSalesorder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qtyPreloadedformulaTxt));
		qtyPreloadedformulaTxt.click();
		
		Thread.sleep(3000);
		
		boolean actqtyPreloadedFormulaSearchTxt					=qtyPreloadedFormulaSearchTxt.isDisplayed();
		boolean actqtyPreloadedFormulaokBtn						=qtyPreloadedFormulaokBtn.isDisplayed();
		boolean actqtyPreloadedFormulacancelBtn					=qtyPreloadedFormulacancelBtn.isDisplayed();
		
		boolean expqtyPreloadedFormulaSearchTxt					=true;
		boolean expqtyPreloadedFormulaokBtn						=true;
		boolean expqtyPreloadedFormulacancelBtn					=true;
		
		System.out.println("******************************************checkFormulaScreenEditScreenSalesorder******************************************");
		
		System.out.println("QtyPreloadedFormulaSearchTxt     : "+actqtyPreloadedFormulaSearchTxt  +"  value expected  "+expqtyPreloadedFormulaSearchTxt);
		System.out.println("QtyPreloadedFormulaokBtn         : "+actqtyPreloadedFormulaokBtn      +"  value expected  "+expqtyPreloadedFormulaokBtn);
		System.out.println("QtyPreloadedFormulacancelBtn     : "+actqtyPreloadedFormulacancelBtn  +"  value expected  "+expqtyPreloadedFormulacancelBtn);
		
		if(actqtyPreloadedFormulaSearchTxt==expqtyPreloadedFormulaSearchTxt && actqtyPreloadedFormulaokBtn==expqtyPreloadedFormulaokBtn &&
			actqtyPreloadedFormulacancelBtn==expqtyPreloadedFormulacancelBtn)
		{
			System.out.println("Test Pass : Formula Screeen Is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 207, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Formula Screeen Is Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 207, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkinputingDatainFormulaScreenEditScreenSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qtyPreloadedformulaTxt));
		qtyPreloadedformulaTxt.click();
		qtyPreloadedformulaTxt.sendKeys("&(SBO2+SBO3)");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qtyPreloadedFormulaokBtn));
		qtyPreloadedFormulaokBtn.click();
		
		String actqtyPreloadedTxt,expqtyPreloadedTxt;
		actqtyPreloadedTxt					=qtyPreloadedTxt.getAttribute("value");
		expqtyPreloadedTxt					="&(SBO2+SBO3)";
		
		System.out.println("************************************checkinputingDatainFormulaScreenEditScreenSalesOrder**************************************");
		
		System.out.println("QtyPreloadedTxt       : "+actqtyPreloadedTxt+"  value expected  "+expqtyPreloadedTxt);
		
		if(actqtyPreloadedTxt.equalsIgnoreCase(expqtyPreloadedTxt))
		{
			System.out.println("Test Pass : Data inputed in Formula Screen");
			excelReader.setCellData(xlfile, "Sheet2", 208, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Data Not inputed in Formula Screen");
			excelReader.setCellData(xlfile, "Sheet2", 208, 9, resFail);
			return false;
		}
		
	}
	
	
	
	
	public boolean 	checkUpdateOptionEditScreenSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		System.out.println("*****************************************checkUpdateOptionEditScreenSalesOrder**************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Update Option Working As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 209, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Update Option NOt Working As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 209, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkEditScreeninSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		
		boolean acteditScreenTab						=editScreenTab.isDisplayed();
		
		boolean expeditScreenTab						=true;
		
		System.out.println("*************************************checkEditScreeninSalesInvoice***************************************");
		
		System.out.println("EditScreenTab : "+acteditScreenTab+"  value expected  "+expeditScreenTab);
		
		if(acteditScreenTab==expeditScreenTab)
		{
			System.out.println("Test Pass : Edit Screen Tab Is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 210, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Edit Screen Tab Is Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 210, 9, resFail);
			return  false;
		}
	}
	
	
	public boolean 	checkSelectingRDAQFQFromLoadFieldsSalesOrderCheckinBodyTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		s.selectByVisibleText("Sales Orders");

		int editScreenloadFieldsListCount = editScreenloadFieldsList.size();
		
		for(int i=0;i<editScreenloadFieldsListCount;i++)
		{
			String data = editScreenloadFieldsList.get(i).getText();
			
			if(data.equalsIgnoreCase("RD") || data.equalsIgnoreCase("AQ") || data.equalsIgnoreCase("FQ"))
			{
				editScreenloadFieldsList.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));
		
		boolean acteditScreenBody1stRowEditBtn					=editScreenBody1stRowEditBtn.isDisplayed();
		boolean acteditScreenBody2ndRowEditBtn					=editScreenBody2ndRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody1stRowEditBtn					=true;
		boolean expeditScreenBody2ndRowEditBtn					=true;
		
		System.out.println("************************************checkSelectingRDAQFQFromLoadFieldsSalesOrderCheckinBodyTab************************************");
		
		System.out.println("EditScreenBody1stRowEditBtn      : "+acteditScreenBody1stRowEditBtn +"  value expected  "+expeditScreenBody1stRowEditBtn);
		System.out.println("EditScreenBody2ndRowEditBtn      : "+acteditScreenBody2ndRowEditBtn +"  value expected  "+expeditScreenBody2ndRowEditBtn);
		
		if(acteditScreenBody1stRowEditBtn==expeditScreenBody1stRowEditBtn && acteditScreenBody2ndRowEditBtn==expeditScreenBody2ndRowEditBtn)
		{
			System.out.println("Test Pass : RDAQFQ are displayed In Body Tab");
			excelReader.setCellData(xlfile, "Sheet2", 211, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : RDAQFQ are NOT displayed In Body Tab");
			excelReader.setCellData(xlfile, "Sheet2", 211, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkInputingDatainQuantityPreloadFormulaEditScreenSalesinvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qtyPreloadedTxt));
		qtyPreloadedTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qtyPreloadedformulaTxt));
		qtyPreloadedformulaTxt.click();
		qtyPreloadedformulaTxt.sendKeys("&(SBO2+SBO3)");
		
		qtyPreloadedFormulaokBtn.click();
		
		String actqtyPreloadedTxt					=qtyPreloadedTxt.getAttribute("value");
		String expqtyPreloadedTxt					="&(SBO2+SBO3)";
		
		System.out.println("*************************************checkInputingDatainQuantityPreloadFormulaEditScreenSalesinvoice***********************************");
		
		System.out.println("QtyPreloadedTxt : "+actqtyPreloadedTxt+"  value expected  "+expqtyPreloadedTxt);
		
		if(actqtyPreloadedTxt.equalsIgnoreCase(expqtyPreloadedTxt))
		{
			System.out.println("Test Pass : Formula Updated In Sales Invoice Edit Screen");
			excelReader.setCellData(xlfile, "Sheet2", 212, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Formula Not  Updated In Sales Invoice Edit Screen");
			excelReader.setCellData(xlfile, "Sheet2", 212, 9, resFail);
			return false;
		}
	}
	
	
	
	
	
	public boolean 	checkUpdateOptionEditScreenSalesinvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		System.out.println("*************************************checkUpdateOptionEditScreenSalesinvoice**************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Update Option Working As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 213, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Update Option NOt Working As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 213, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkEditScreeninDeliveryNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deliveryNotesBtn));
		deliveryNotesBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		
		boolean acteditScreenTab					=editScreenTab.isDisplayed();
		
		boolean expeditScreenTab					=true;
		
		System.out.println("**************************************checkEditScreeninDeliveryNotes******************************************");
		
		System.out.println("EditScreenTab      : "+acteditScreenTab+"  value expected  "+expeditScreenTab);
		
		if(acteditScreenTab==expeditScreenTab)
		{
			System.out.println("Test Pass : Edit Screen Tab Is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 214, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Edit Screen Tab Is Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 214, 9, resFail);
			return  false;
		}
	}
	
	
	
	public boolean 	checkAddFieldOptionsinEditScreenDeliverynotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
	    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		
		boolean acteditScreenCaptionTxt						=editScreenCaptionTxt.isDisplayed();
		boolean acteditScreenFieldDetailsTab				=editScreenFieldDetailsTab.isDisplayed();
		boolean acteditScreenPropertiesTab					=editScreenPropertiesTab.isDisplayed();
		boolean acteditScreenExternalModulesTab				=editScreenExternalModulesTab.isDisplayed();
		boolean acteditScreenFieldOkBtn						=editScreenFieldOkBtn.isDisplayed();
		boolean acteditScreenCloseBtnINDCInDc						=editScreencloseBtnInDc.isDisplayed();
		
		boolean expeditScreenCaptionTxt						=true;
		boolean expeditScreenFieldDetailsTab				=true;
		boolean expeditScreenPropertiesTab					=true;
		boolean expeditScreenExternalModulesTab				=true;
		boolean expeditScreenFieldOkBtn						=true;
		boolean expeditScreenCloseBtnINDCInDc						=true;
		
		System.out.println("***************************************checkAddFieldOptionsinEditScreenDeliverynotes***************************************");
		
		System.out.println("EditScreenCaptionTxt          : "+acteditScreenCaptionTxt          +"  value expected  "+expeditScreenCaptionTxt);
		System.out.println("EditScreenFieldDetailsTab     : "+acteditScreenFieldDetailsTab     +"  value expected  "+expeditScreenFieldDetailsTab);
		System.out.println("EditScreenPropertiesTab       : "+acteditScreenPropertiesTab       +"  value expected  "+expeditScreenPropertiesTab);
		System.out.println("EditScreenExternalModulesTab  : "+acteditScreenExternalModulesTab  +"  value expected  "+expeditScreenExternalModulesTab);
		System.out.println("editScreenFieldOkBtn            : "+acteditScreenFieldOkBtn            +"  value expected  "+expeditScreenFieldOkBtn);
		System.out.println("editScreenCloseBtnINDCInDc            : "+acteditScreenCloseBtnINDCInDc            +"  value expected  "+expeditScreenCloseBtnINDCInDc);
		
		if(acteditScreenCaptionTxt==expeditScreenCaptionTxt && acteditScreenFieldDetailsTab==expeditScreenFieldDetailsTab &&
			acteditScreenPropertiesTab==expeditScreenPropertiesTab && acteditScreenExternalModulesTab==expeditScreenExternalModulesTab &&
			acteditScreenFieldOkBtn==expeditScreenFieldOkBtn && acteditScreenCloseBtnINDCInDc==expeditScreenCloseBtnINDCInDc)
		{
			System.out.println("Test Pass : Add Field Options Are Displayed ");
			excelReader.setCellData(xlfile, "Sheet2", 215, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test fail : Add Field Options Are Not Displayed ");
			excelReader.setCellData(xlfile, "Sheet2", 215, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkinputingDatainAddFieldsinEditScreenDeliveryNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		
		editScreenCaptionTxt.sendKeys("Avg Rate");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		editScreenPreloadTxt.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preloadformulaTxt));
		preloadformulaTxt.click();
		
		preloadformulaTxt.sendKeys("&rtstk");
		preloadFormulaokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys("2");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		
		Select s1=new Select(EditScreenAddToStockDropDown);
		s1.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		
		Select s2=new Select(editScreenAddToNetDropdown);
		s2.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("*****************************************checkinputingDatainAddFieldsinEditScreenDeliveryNotes******************************************");

		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		editScreenCaptionTxt.sendKeys("Avg Rate(O)");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		editScreenPreloadTxt.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preloadformulaTxt));
		preloadformulaTxt.click();
		preloadformulaTxt.sendKeys("&rtstk(O)");
		preloadFormulaokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.click();
		editScreenNoOfDecimalsTxt.sendKeys("2");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		
		Select s3=new Select(EditScreenAddToStockDropDown);
		s3.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		
		Select s4=new Select(editScreenAddToNetDropdown);
		s4.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		String expMessage1=" ";
		
		String actMessage1=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));
		
		boolean acteditScreenBody1stRowEditBtn					=editScreenBody1stRowEditBtn.isDisplayed();
		boolean acteditScreenBody2ndRowEditBtn					=editScreenBody2ndRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody1stRowEditBtn					=true;
		boolean expeditScreenBody2ndRowEditBtn					=true;
		
		System.out.println("EditScreenBody1stRowEditBtn : "+acteditScreenBody1stRowEditBtn+"  value expected  "+expeditScreenBody1stRowEditBtn);
		System.out.println("EditScreenBody2ndRowEditBtn : "+acteditScreenBody2ndRowEditBtn+"  value expected  "+expeditScreenBody2ndRowEditBtn);
		
		if(acteditScreenBody1stRowEditBtn==expeditScreenBody1stRowEditBtn && acteditScreenBody2ndRowEditBtn==expeditScreenBody2ndRowEditBtn)
		{
			System.out.println("Test Pass : Inputed data in add field and saved successfully");
			excelReader.setCellData(xlfile, "Sheet2", 216, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail :  Inputed data in add field and Not  saved successfully");
			excelReader.setCellData(xlfile, "Sheet2", 216, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkUpdateOptionInEditScreenDeliveryNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("***************************************checkUpdateOptionInEditScreenDeliveryNotes*************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Update Option Working As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 217, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Update Option NOt Working As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 217, 9, resFail);
			return false;
		}
	}

	
	
	public boolean 	checkeditLayoutTabinMaterialReceiptNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(materialReceiptsNotesBtn));
		materialReceiptsNotesBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		
		boolean acteditLayoutTab					=editLayoutTab.isDisplayed();
		
		boolean expeditLayoutTab					=true;
		
		System.out.println("**************************************checkeditLayoutTabinMaterialReceiptNotes***************************************");
		
		System.out.println("EditLayoutTab 			: "+acteditLayoutTab+"  value expected  "+expeditLayoutTab);
		
		if(acteditLayoutTab==expeditLayoutTab)
		{
			System.out.println("Test Pass : Edit Layout Is Displayed In Material Receipt Notes");
			excelReader.setCellData(xlfile, "Sheet2", 218, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Edit Layout Is Not Displayed In Material Receipt Notes");
			excelReader.setCellData(xlfile, "Sheet2", 218, 9, resFail);
			return false;
		}
	}
		
	
	
	
	public boolean 	checkHeadertabinEditLayoutMaterialReceiptNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		
		boolean acteditLayoutHeaderTab					=editLayoutHeaderTab.isDisplayed();
		
		boolean expeditLayoutHeaderTab					=true;
		
		System.out.println("*************************************checkHeadertabinEditLayoutMaterialReceiptNotes******************************************");
		
		System.out.println("EditLayoutHeaderTab 	: "+acteditLayoutHeaderTab+"  value expected  "+expeditLayoutHeaderTab);
		
		if(acteditLayoutHeaderTab==expeditLayoutHeaderTab)
		{
			System.out.println("Test Pass : Header Tab is Displayed in Edit layout");
			excelReader.setCellData(xlfile, "Sheet2", 219, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Header Tab is Not Displayed in Edit layout");
			excelReader.setCellData(xlfile, "Sheet2", 219, 9, resFail);
			return false;
		}
	}
		
	
	
	
	
	public boolean 	checktheNarrationinHeaderTabEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		String acteditLayoutHeader1stRowCaption,expeditLayoutHeader1stRowCaption;
		
		acteditLayoutHeader1stRowCaption					=editLayoutHeader1stRowCaption.getText();
		expeditLayoutHeader1stRowCaption					="Narration";
		
		System.out.println("***********************************checktheNarrationinHeaderTabEditLayout*************************************");
		
		System.out.println("EditLayoutHeader1stRowCaption : "+acteditLayoutHeader1stRowCaption+"  value expected  "+expeditLayoutHeader1stRowCaption);
		
		if(acteditLayoutHeader1stRowCaption.equalsIgnoreCase(expeditLayoutHeader1stRowCaption))
		{
			System.out.println("Test Pass : Narration is Displayed in Header Tab ");
			excelReader.setCellData(xlfile, "Sheet2", 220, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Narration is Not Displayed in Header Tab ");
			excelReader.setCellData(xlfile, "Sheet2", 220, 9, resFail);
			return false;
		}
	}
	
	
		
	public boolean 	checkAddbuttoninHeaderTabEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutAddFieldsBtn));
		
		boolean acteditLayoutAddFieldsBtn					=editLayoutAddFieldsBtn.isDisplayed();
		
		boolean expeditLayoutAddFieldsBtn					=true;
		
		System.out.println("***********************************checkAddbuttoninHeaderTabEditLayout**************************************");
		
		System.out.println("EditLayoutAddFieldsBtn : "+acteditLayoutAddFieldsBtn+"  value expected  "+expeditLayoutAddFieldsBtn);
		
		if(acteditLayoutAddFieldsBtn==expeditLayoutAddFieldsBtn)
		{
			System.out.println("Test Pass : Add Fields Option is Displayed In HeaderTab");
			excelReader.setCellData(xlfile, "Sheet2", 221, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Add Fields Option is Not Displayed In HeaderTab");
			excelReader.setCellData(xlfile, "Sheet2", 221, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkAddFieldOptionsInHeaderTabEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutAddFieldsBtn));
		editLayoutAddFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutFieldDetailsTab));
		
		boolean acteditLayoutFieldDetailsTab					=editLayoutFieldDetailsTab.isDisplayed();
		boolean actformattingTab								=formattingTab.isDisplayed();
		boolean acteditLayoutPropertiesTab						=editLayoutPropertiesTab.isDisplayed();
		boolean acteditLayoutRulesTab							=editLayoutRulesTab.isDisplayed();
		boolean acteditlayoutExternalModulesTab					=editlayoutExternalModulesTab.isDisplayed();
		
		boolean expeditLayoutFieldDetailsTab					=true;
		boolean expformattingTab								=true;
		boolean expeditLayoutPropertiesTab						=true;
		boolean expeditLayoutRulesTab							=true;
		boolean expeditlayoutExternalModulesTab					=true;
		
		System.out.println("**************************************checkAddFieldOptionsInHeaderTabEditLayout***************************************");
		
		System.out.println("EditLayoutFieldDetailsTab       : "+acteditLayoutFieldDetailsTab     +"  value expected  "+expeditLayoutFieldDetailsTab);
		System.out.println("FormattingTab                   : "+actformattingTab                 +"  value expected  "+expformattingTab);
		System.out.println("EditLayoutPropertiesTab         : "+acteditLayoutPropertiesTab       +"  value expected  "+expeditLayoutPropertiesTab);
		System.out.println("EditLayoutRulesTab              : "+acteditLayoutRulesTab            +"  value expected  "+expeditLayoutRulesTab);
		System.out.println("EditlayoutExternalModulesTab    : "+acteditlayoutExternalModulesTab  +"  value expected  "+expeditlayoutExternalModulesTab);
		
		if(acteditLayoutFieldDetailsTab==expeditLayoutFieldDetailsTab && actformattingTab==expformattingTab &&
			acteditLayoutPropertiesTab==expeditLayoutPropertiesTab && acteditLayoutRulesTab==expeditLayoutRulesTab &&
			acteditlayoutExternalModulesTab==expeditlayoutExternalModulesTab)
		{
			System.out.println("Test Pass : Add Fields Options Are Displayed As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 222, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Add Fields Options Are Not Displayed As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 222, 9, resFail);
			return false;
		}
	}
	
		
		
	public boolean 	checkFieldDetailstabOptionsEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{	
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutFieldDetailsTab));
		editLayoutFieldDetailsTab.click();
		
		boolean acteditLayoutCaptionTxt						=editLayoutCaptionTxt.isDisplayed();
		boolean acteditLayoutMaxSizeTxt						=editLayoutMaxSizeTxt.isDisplayed();
		boolean acteditLayoutApplyBtn						=editLayoutApplyBtn.isDisplayed();
		boolean acteditLayoutCloseBtnINDC						=editLayoutCloseBtnINDC.isDisplayed();
		
		boolean expeditLayoutCaptionTxt						=true;
		boolean expeditLayoutMaxSizeTxt						=true;
		boolean expeditLayoutApplyBtn						=true;
		boolean expeditLayoutCloseBtnINDC						=true;
		
		System.out.println("************************************checkFieldDetailstabOptionsEditLayout*************************************");
		
		System.out.println("EditLayoutCaptionTxt      : "+acteditLayoutCaptionTxt  +"  value expected  "+expeditLayoutCaptionTxt);
		System.out.println("EditLayoutMaxSizeTxt      : "+acteditLayoutMaxSizeTxt  +"  value expected  "+expeditLayoutMaxSizeTxt);
		System.out.println("EditLayoutApplyBtn        : "+acteditLayoutApplyBtn    +"  value expected  "+expeditLayoutApplyBtn);
		System.out.println("EditLayoutCloseBtnINDC        : "+acteditLayoutCloseBtnINDC    +"  value expected  "+expeditLayoutCloseBtnINDC);
		
		if(acteditLayoutCaptionTxt==expeditLayoutCaptionTxt && acteditLayoutMaxSizeTxt==expeditLayoutMaxSizeTxt && acteditLayoutApplyBtn==expeditLayoutApplyBtn &&
			acteditLayoutCloseBtnINDC==expeditLayoutCloseBtnINDC)
		{
			System.out.println("Test Pass : Field Details Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 223, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Field Details Options Are Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 223, 9, resFail);
			return false;
			
		}
	}
		
	
	public boolean 	checkPropertiesTabOptionsinEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutPropertiesTab));
		editLayoutPropertiesTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditTrailChkBox));
		
		boolean actauditTrailChkBox						=auditTrailChkBox.isDisplayed();
		boolean acthiddenChkbox							=hiddenChkbox.isDisplayed();
		boolean actmergeFieldChkBox						=mergeFieldChkBox.isDisplayed();
		boolean actmandatorychkBox						=mandatorychkBox.isDisplayed();
		
		boolean expauditTrailChkBox						=true;
		boolean exphiddenChkbox							=true;
		boolean expmergeFieldChkBox						=true;
		boolean expmandatorychkBox						=true;
		
		System.out.println("*********************************checkPropertiesTabOptionsinEditLayout********************************");
		
		System.out.println("AuditTrailChkBox       : "+actauditTrailChkBox  +"  value expected  "+expauditTrailChkBox);
		System.out.println("HiddenChkbox           : "+acthiddenChkbox      +"  value expected  "+exphiddenChkbox);
		System.out.println("MergeFieldChkBox       : "+actmergeFieldChkBox  +"  value expected  "+expmergeFieldChkBox);
		System.out.println("MandatorychkBox        : "+actmandatorychkBox   +"  value expected  "+expmandatorychkBox);
		
		if(actauditTrailChkBox==expauditTrailChkBox && acthiddenChkbox==exphiddenChkbox && actmergeFieldChkBox==expmergeFieldChkBox &&
			actmandatorychkBox==expmandatorychkBox)
		{
			System.out.println("Test pass : Properties Tab Fields Are As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 224, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Properties Tab Fields Are Not As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 224, 9, resFail);
			return false;
		}
	}
	
		
	
	
	
	public boolean 	checkformattingTabOptionsinEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(formattingTab));
		formattingTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(columnSpanDropdown));
		
		boolean actcolumnSpanDropdown					=columnSpanDropdown.isDisplayed();
		boolean actrowSpandropdown						=rowSpandropdown.isDisplayed();
		boolean actenableFontChkbox						=enableFontChkbox.isDisplayed();
		
		boolean expcolumnSpanDropdown					=true;
		boolean exprowSpandropdown						=true;
		boolean expenableFontChkbox						=true;
		
		System.out.println("ColumnSpanDropdown      : "+actcolumnSpanDropdown  +"  value expected  "+expcolumnSpanDropdown);
		System.out.println("RowSpandropdown         : "+actrowSpandropdown     +"  value expected  "+exprowSpandropdown);
		System.out.println("EnableFontChkbox        : "+actenableFontChkbox    +"  value expected  "+expenableFontChkbox);

		if(actcolumnSpanDropdown==expcolumnSpanDropdown && actrowSpandropdown==exprowSpandropdown && actenableFontChkbox==expenableFontChkbox)
		{
			System.out.println("Test pass : Formatting Tab Fields Are As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 225, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Formatting Tab Fields Are Not As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 225, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkRulesTabOptionsInEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutRulesTab));
		editLayoutRulesTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickhereToAddRuleBtn));
		
		boolean actclickhereToAddRuleBtn					=clickhereToAddRuleBtn.isDisplayed();
		
		boolean expclickhereToAddRuleBtn					=true;
		
		System.out.println("****************************************checkRulesTabOptionsInEditLayout*********************************************");
		
		System.out.println("ClickhereToAddRuleBtn      : "+actclickhereToAddRuleBtn+"  value expected  "+expclickhereToAddRuleBtn);
		
		if(actclickhereToAddRuleBtn==expclickhereToAddRuleBtn)
		{
			System.out.println("Test pass : Rules Tab Fields Are As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 226, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Rules Tab Fields Are Not As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 226, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkExternalModulesTabOptionsInEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
	    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editlayoutExternalModulesTab));
		editlayoutExternalModulesTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(materialReceiptNotesELV_onEventDropdown));
		
		boolean actonEventDropdown							=materialReceiptNotesELV_onEventDropdown.isDisplayed();
		boolean actModuleNameOrURlTxt						=materialReceiptNotesELV_ModuleNameOrURlTxt.isDisplayed();
		boolean actInsertBtn								=materialReceiptNotesELV_InsertBtn.isDisplayed();
		boolean actRemoveBtn								=materialReceiptNotesELV_RemoveBtn.isDisplayed();
		
		boolean exponEventDropdown							=true;
		boolean expModuleNameOrURlTxt						=true;
		boolean expInsertBtn								=true;
		boolean expRemoveBtn								=true;
		
		System.out.println("********************************checkExternalModulesTabOptionsInEditLayout***********************************");
		
		System.out.println("MaterialReceiptNotesELV_onEventDropdown        : "+actonEventDropdown     +"  value expected  "+exponEventDropdown);
		System.out.println("MaterialReceiptNotesELV_ModuleNameOrURlTxt     : "+actModuleNameOrURlTxt  +"  value expected  "+expModuleNameOrURlTxt);
		System.out.println("MaterialReceiptNotesELV_InsertBtn              : "+actInsertBtn           +"  value expected  "+expInsertBtn);
		System.out.println("MaterialReceiptNotesELV_RemoveBtn              : "+actRemoveBtn           +"  value expected  "+expRemoveBtn);
		
		if(actonEventDropdown==exponEventDropdown && actModuleNameOrURlTxt==expModuleNameOrURlTxt && actInsertBtn==expInsertBtn &&
			actRemoveBtn==expRemoveBtn)
		{
			System.out.println("Test pass : External Modules Tab Fields Are As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 227, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : External Modules Tab Fields Are Not As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 227, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkApplyButtonInEdtiLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutFieldDetailsTab));
		editLayoutFieldDetailsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutCaptionTxt));
		editLayoutCaptionTxt.click();
		editLayoutCaptionTxt.sendKeys("Remarks");
		editLayoutCaptionTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutApplyBtn));
		editLayoutApplyBtn.click();
		
		System.out.println("***************************************checkApplyButtonInEdtiLayout**************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Remarks Added Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 228, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Remarks NOT Added Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 228, 9, resFail);
			return false;
		}
	}
	

	
	public boolean 	checkUpdateandCloseinEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("****************************************checkUpdateandCloseinEditLayout*****************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Remarks Added Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 229, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Remarks NOT Added Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 229, 9, resFail);
			return false;
		}
	}
	
	
	
	
	
	public boolean 	checkAddingFieldThroughLoadFieldsEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jobOrderBtn));
		jobOrderBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		
		boolean acteditLayoutLoadFieldsBtn					=editLayoutLoadFieldsBtn.isDisplayed();
		
		boolean expeditLayoutLoadFieldsBtn					=true;
		
		System.out.println("***************************************checkAddingFieldThroughLoadFieldsEditLayout*************************************");
		
		System.out.println("EditLayoutLoadFieldsBtn      : "+acteditLayoutLoadFieldsBtn+"  value expected  "+expeditLayoutLoadFieldsBtn);
		
		if(acteditLayoutLoadFieldsBtn==expeditLayoutLoadFieldsBtn)
		{
			System.out.println("Test Pass : Load Fields Is Displayed In Edit Layout Screen");
			excelReader.setCellData(xlfile, "Sheet2", 230, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test fail : Load Fields Is Not Displayed In Edit Layout Screen");
			excelReader.setCellData(xlfile, "Sheet2", 230, 9, resFail);
			return false;
		}
	}
	 
	
	
	
	
	public boolean 	checkMaterialReceiptNotesinLoadFieldsDropdownEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		Select s=new Select(editLayoutLoadFieldsDropdown);
		s.selectByVisibleText("Material Receipt Notes");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFields1stChkBox));
		
		boolean acteditLayoutLoadFields1stChkBox					=editLayoutLoadFields1stChkBox.isDisplayed();
		boolean acteditLayoutLoadFields2ndChkBox					=editLayoutLoadFields2ndChkBox.isDisplayed();
		
		boolean expeditLayoutLoadFields1stChkBox					=true;
		boolean expeditLayoutLoadFields2ndChkBox					=true;
		
		System.out.println("**************************************checkMaterialReceiptNotesinLoadFieldsDropdownEditLayout***************************************");
		
		System.out.println("EditLayoutLoadFields1stChkBox     : "+acteditLayoutLoadFields1stChkBox+"  value expected  "+expeditLayoutLoadFields1stChkBox);
		System.out.println("EditLayoutLoadFields2ndChkBox     : "+acteditLayoutLoadFields2ndChkBox+"  value expected  "+expeditLayoutLoadFields2ndChkBox);
		
		if(acteditLayoutLoadFields1stChkBox==expeditLayoutLoadFields1stChkBox && acteditLayoutLoadFields2ndChkBox==expeditLayoutLoadFields2ndChkBox)
		{
			System.out.println("Test Pass : Remarks Check Box Is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 231, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Remarks Check Box Is Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 231, 9, resFail);
			return false;
		}
	}
	
	
	
		
	public boolean 	checkSelectingRemarksandUpdateinEditLayout() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFields2ndChkBox));
		editLayoutLoadFields2ndChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		String acteditLayoutHeader2ndRowCaption					=editLayoutHeader2ndRowCaption.getText();
		String expeditLayoutHeader2ndRowCaption					="Remarks";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("****************************************checkSelectingRemarksandUpdateinEditLayout***************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		System.out.println("EditLayoutHeader2ndRowCaption : "+acteditLayoutHeader2ndRowCaption+"  value expected  "+expeditLayoutHeader2ndRowCaption);
		
		if(acteditLayoutHeader2ndRowCaption.equalsIgnoreCase(expeditLayoutHeader2ndRowCaption)  &&  actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test pass : Selected Remarks Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 232, 9, resPass);
			CloseBtnINDC.click();
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selected Remarks");
			excelReader.setCellData(xlfile, "Sheet2", 232, 9, resFail);
			CloseBtnINDC.click();
			return false;
		}
	}
	
	
	
	
	public boolean 	checkEditLayoutinSalesinvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		
		boolean acteditLayoutBodyTab					=editLayoutBodyTab.isDisplayed();
		
		boolean expeditLayoutBodyTab					=true;
		
		System.out.println("******************************************checkEditLayoutinSalesinvoice*************************************************");
		
		System.out.println("EditLayoutBodyTab      : "+acteditLayoutBodyTab+"  value expected  "+expeditLayoutBodyTab);
		
		if(acteditLayoutBodyTab==expeditLayoutBodyTab)
		{
			System.out.println("Test Pass : Body Tab Is Displayed In Edit Layout Screen");
			excelReader.setCellData(xlfile, "Sheet2", 233, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test fail : Body Tab Is Not Displayed In Edit Layout Screen");
			excelReader.setCellData(xlfile, "Sheet2", 233, 9, resFail);
			return false;
		}
	}
	 
	
	
	public boolean 	checkAddingFieldInEditLayoutSalesinvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutAddFieldsBtn));
		
		boolean acteditLayoutAddFieldsBtn					=editLayoutAddFieldsBtn.isDisplayed();
		
		boolean expeditLayoutAddFieldsBtn					=true;
		
		System.out.println("***********************************checkAddingFieldInEditLayoutSalesinvoice******************************************");
		
		System.out.println("EditLayoutAddFieldsBtn       : "+acteditLayoutAddFieldsBtn+"  value expected  "+expeditLayoutAddFieldsBtn);
		
		if(acteditLayoutAddFieldsBtn==expeditLayoutAddFieldsBtn)
		{
			System.out.println("Test Pass : Add Fields Is Displayed In Body tab");
			excelReader.setCellData(xlfile, "Sheet2", 234, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test fail : Add Fields Is NOt Displayed In Body tab");
			excelReader.setCellData(xlfile, "Sheet2", 234, 9, resFail);
			return false;
		}
	}
	

	
	public boolean 	checkInputingdataandUpdateInEditLayoutsalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutAddFieldsBtn));
		editLayoutAddFieldsBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutCaptionTxt));
		editLayoutCaptionTxt.click();
		editLayoutCaptionTxt.sendKeys("Remarks");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutApplyBtn));
		editLayoutApplyBtn.click();
		
		String exp="Data Saved Successfully";
		
		String act=checkValidationMessage(exp);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutbody1stRowCaption));
		
		String acteditLayoutbody1stRowCaption					=editLayoutbody1stRowCaption.getText();

		String expeditLayoutbody1stRowCaption					="Remarks";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("*************************************checkInputingdataandUpdateInEditLayoutsalesInvoice*****************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		System.out.println("EditLayoutbody1stRowCaption : "+acteditLayoutbody1stRowCaption+"  value expected  "+expeditLayoutbody1stRowCaption);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(acteditLayoutbody1stRowCaption.equalsIgnoreCase(expeditLayoutbody1stRowCaption)  &&  actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test pass : Selected Remarks Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 235, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selected Remarks");
			excelReader.setCellData(xlfile, "Sheet2", 235, 9, resFail);
			return false;
		}
		
	}
	
	
	
	
	public boolean 	checkInventoryTabinSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersBtn));
		salesOrdersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryoptionsTab));
		
		boolean actinventoryoptionsTab						=inventoryoptionsTab.isDisplayed();
		
		boolean expinventoryoptionsTab						=true;
		
		System.out.println("***********************************checkInventoryTabinSalesOrders****************************************");
		
		System.out.println("InventoryoptionsTab           : "+actinventoryoptionsTab+"  value expected  "+expinventoryoptionsTab);
		
		if(actinventoryoptionsTab==expinventoryoptionsTab)
		{
			System.out.println("Test Pass : inventoryoptionsTab Is Displayed In Sales Orders");
			excelReader.setCellData(xlfile, "Sheet2", 236, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test fail : inventoryoptionsTab Is Not Displayed In Sales Orders ");
			excelReader.setCellData(xlfile, "Sheet2", 236, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkOptionsasbelowNoneManualReseravtionAutomaticReservationinSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryoptionsTab));
		inventoryoptionsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reservationTypeDropdown));
		reservationTypeDropdown.click();
		
		Select s=new Select(reservationTypeDropdown);
		
		int actreservationTypeDropdown						=s.getOptions().size();
		int expreservationTypeDropdown						=4;
		
		System.out.println("**********************************checkOptionsasbelowNoneManualReseravtionAutomaticReservationinSalesOrders***********************************");
		
		System.out.println("ReservationTypeDropdown        : "+actreservationTypeDropdown+"  value expected  "+expreservationTypeDropdown);
		
		if(actreservationTypeDropdown==expreservationTypeDropdown)
		{
			System.out.println("Test Pass : Reservation Dropdown Options Are As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 237, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Reservation Dropdown Options Are Not As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 237, 9, resFail);
			return false;
		}
		
	}
	
	
	
	
	public boolean 	checktoselectandupdateInInventoryoptionsinSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		reservationTypeDropdown.sendKeys("Manual reservation");
		Thread.sleep(2000);
		reservationTypeDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("***************************************checktoselectandupdateInInventoryoptionsinSalesOrders***************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test pass : Selected Remarks Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 238, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selected Remarks");
			excelReader.setCellData(xlfile, "Sheet2", 238, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkManualinSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersBtn));
		salesOrdersBtn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryoptionsTab));
		inventoryoptionsTab.click();
		
		reservationTypeDropdown.sendKeys("Manual reservation");
		reservationTypeDropdown.sendKeys(Keys.TAB);
		
		String actreservationTypeDropdown						=reservationTypeDropdown.getAttribute("value");
		String expreservationTypeDropdown						="3";
		
		System.out.println("*******************************************checkManualinSalesOrders*********************************************");
		
		System.out.println("ReservationTypeDropdown       : "+actreservationTypeDropdown+"  value expected  "+expreservationTypeDropdown);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actreservationTypeDropdown.equalsIgnoreCase(expreservationTypeDropdown))
		{
			System.out.println("Test Pass : Selected data is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 239, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Selected data is Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 239, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkReservationTypeinSalesInvoices() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryoptionsTab));
		inventoryoptionsTab.click();	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reservationTypeDropdown));
		reservationTypeDropdown.click();
		
		Select s=new Select(reservationTypeDropdown);
		int actreservationTypeDropdown						=s.getOptions().size();
		int expreservationTypeDropdown						=4;
		
		System.out.println("***************************************checkReservationTypeinSalesInvoices****************************************");
		
		System.out.println("ReservationTypeDropdown          : "+actreservationTypeDropdown+"  value expected  "+expreservationTypeDropdown);
		
		if(actreservationTypeDropdown==expreservationTypeDropdown)
		{
			System.out.println("Test Pass : Reservation Dropdown Options Are As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 240, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Reservation Dropdown Options Are Not As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 240, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkSelectReleaseandClosetheDocumentinSalesinvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reservationTypeDropdown));
		Select s=new Select(reservationTypeDropdown);
		s.selectByVisibleText("Release");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("****************************************checkSelectReleaseandClosetheDocumentinSalesinvoice****************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test pass : Selected Remarks Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 241, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selected Remarks");
			excelReader.setCellData(xlfile, "Sheet2", 241, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkSelectedReleaseinSalesInvoices() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryoptionsTab));
		inventoryoptionsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reservationTypeDropdown));
		
		String actreservationTypeDropdown						=reservationTypeDropdown.getAttribute("value");
		String expreservationTypeDropdown						="1";
		
		System.out.println("************************************checkSelectedReleaseinSalesInvoices*************************************");
		
		System.out.println("ReservationTypeDropdown       : "+actreservationTypeDropdown+"  value expected  "+expreservationTypeDropdown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actreservationTypeDropdown.equalsIgnoreCase(expreservationTypeDropdown))
		{
			System.out.println("Test Pass : Selected data is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 242, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Selected data is Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 242, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkCreateVoucherWithoutSelectingAnyVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		this.getDriver().navigate().refresh();
	
		Thread.sleep(9000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchBox));
		searchBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		System.out.println("*********************************************checkCreateVoucherWithoutSelectingAnyVoucher*************************************************");
		
		String expMessage="Please select any base voucher type";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
        CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Error Message displayed");
			
			excelReader.setCellData(xlfile, "Sheet2", 243, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Not  displayed");
			excelReader.setCellData(xlfile, "Sheet2", 243, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkTitleasNewDocdoOpeningOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		username.sendKeys("su");
		username.sendKeys(Keys.TAB);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
        password.sendKeys("su");
        password.sendKeys(Keys.TAB);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
        signIn.click();
        
        //checkRefershPopOnlogin();
        
        //checkPopUpWindow();
        
        Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksBtn));
		openingStocksBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));	
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));	
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt						=titleTxt.getAttribute("value");
		String exptitleTxt						="New Doc Type 44";
		
		System.out.println("*********************************checkTitleasNewDocdoOpeningOrders********************************");
		
		System.out.println("Title For the Document      : "+acttitleTxt+"  value expected  "+exptitleTxt);

		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 244, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title is NOT as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 244, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktoinputandBaseDocumentasOpeningdoOpeningOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Opening Stocks New");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocumentTxtInDocCust));
		baseDocumentTxtInDocCust.click();
		
		String actbaseDocumentTxt						=baseDocumentTxtInDocCust.getAttribute("value");
		
		String expbaseDocumentTxt						="Opening Stocks 201";
		
		System.out.println("***********************************checktoinputandBaseDocumentasOpeningdoOpeningOrders**************************************");
		
		System.out.println("The Base document Title as follows    : "+actbaseDocumentTxt+"  value expected  "+expbaseDocumentTxt);
		
		if(actbaseDocumentTxt.equalsIgnoreCase(expbaseDocumentTxt))
		{
			System.out.println("Test Pass : Title Changed and BaseDoc Is AS Expected");
			excelReader.setCellData(xlfile, "Sheet2", 245, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Not Chnaged Or Base Document Is Not As Expected ");
			excelReader.setCellData(xlfile, "Sheet2", 245, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktoselectandsavewithoutanyerrorsandclosetheDocumentdoOpeningStocks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s=new Select(masterDropDown);
		s.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s1=new Select(positionDropdown);
		s1.selectByVisibleText("Header");
		
		position1.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("*******************************checktoselectandsavewithoutanyerrorsandclosetheDocumentdoOpeningStocks******************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 246, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 246, 9, resFail);
			return false;
		}
     }
	
	
	
	public boolean 	checkCreateDocumentinthePurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersBtn));
		purchaseVouchersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt							=titleTxt.getAttribute("value");
		String exptitleTxt							="New Doc Type 45";

		System.out.println("******************************************checkCreateDocumentinthePurchaseVoucher**********************************************");
		
		System.out.println("The Title Of the Purchase voucher   : "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 247, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title is NOT as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 247, 9, resFail);
			return false;
		}
	}
	
	
	public boolean 	checktoinputandBaseDocumentasPurchasedoPurchaseOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Purchase Vouchers N");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocumentTxtInDocCust));
		baseDocumentTxtInDocCust.click();
		
		String actbaseDocumentTxt							=baseDocumentTxtInDocCust.getAttribute("value");
		String expbaseDocumentTxt							="Purchases Vouchers 301";
		
		System.out.println("*************************************checktoinputandBaseDocumentasPurchasedoPurchaseOrders******************************************");
		
		System.out.println("The Purchase Vouchers     : "+actbaseDocumentTxt+"  value expected  "+expbaseDocumentTxt);
		
		if(actbaseDocumentTxt.equalsIgnoreCase(expbaseDocumentTxt))
		{
			System.out.println("Test Pass : Title Changed and BaseDoc Is AS Expected");
			excelReader.setCellData(xlfile, "Sheet2", 248, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Not Chnaged Or Base Document Is Not As Expected ");
			excelReader.setCellData(xlfile, "Sheet2", 248, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktoselectandsavewithoutanyerrorsandclosetheDocumentdoPurchaseOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s=new Select(masterDropDown);
		s.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		positionDropdown.click();
		
		Select s1=new Select(positionDropdown);
		s1.selectByVisibleText("Header");
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s2=new Select(masterDropDown);
		s2.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		positionDropdown.click();
		
		Select s4=new Select(positionDropdown);
		s4.selectByVisibleText("Header");
		position1.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("*******************************checktoselectandsavewithoutanyerrorsandclosetheDocumentdoPurchaseOrders**********************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 249, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 249, 9, resFail);
			return false;
		}
		}
	
	
	
	
	public boolean 	checkCreateDocumentintheSalesOrderVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersBtn));
		salesOrdersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt=titleTxt.getAttribute("value");
		String exptitleTxt="New Doc Type 46";
		
		System.out.println("*************************************************checkCreateDocumentintheSalesOrderVoucher**********************************************");
		
		System.out.println("Sales Order Title : "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 250, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title is NOT as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 250, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktoinputandBaseDocumentasSalesdoSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Auto Sales Order");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocumentTxtInDocCust));
		baseDocumentTxtInDocCust.click();
		
		String actbaseDocumentTxt=baseDocumentTxtInDocCust.getAttribute("value");
		String expbaseDocumentTxt="Sales Orders 1602";
		
		System.out.println("********************************************checktoinputandBaseDocumentasSalesdoSalesOrders*****************************************");
		
		System.out.println("BaseDocumentTxt : "+actbaseDocumentTxt+"  value expected  "+expbaseDocumentTxt);
		
		if(actbaseDocumentTxt.equalsIgnoreCase(expbaseDocumentTxt))
		{
			System.out.println("Test Pass : Title Changed and BaseDoc Is AS Expected");
			excelReader.setCellData(xlfile, "Sheet2", 251, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Not Chnaged Or Base Document Is Not As Expected ");
			excelReader.setCellData(xlfile, "Sheet2", 251, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktoselectandsavewithoutanyerrorsandclosetheDocumentdoSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s=new Select(masterDropDown);
		s.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		Select s1=new Select(positionDropdown);
		s1.selectByVisibleText("Header");
		position1.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("********************************checktoselectandsavewithoutanyerrorsandclosetheDocumentdoSalesOrders********************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 252, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 252, 9, resFail);
			return false;
		}
	}
	
	
	
	
	
	public boolean 	checkCreateDocumentintheSalesInvoiceVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt=titleTxt.getAttribute("value");
		String exptitleTxt="New Doc Type 47";
		
		System.out.println("*****************************************checkCreateDocumentintheSalesInvoiceVoucher*******************************************");
		
		System.out.println("The Title for the Document Tag of Sales Invoice : "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 253, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title is NOT as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 253, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktoinputandBaseDocumentasSalesInvoicedoSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Auto Sales Invoice");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocumentTxtInDocCust));
	    baseDocumentTxtInDocCust.click();
		
		String actbaseDocumentTxt=baseDocumentTxtInDocCust.getAttribute("value");
		String expbaseDocumentTxt="Sales Invoices d04";
		
		System.out.println("*********************************checktoinputandBaseDocumentasSalesInvoicedoSalesOrder***********************************");
		
		System.out.println("BaseDocumentTxt : "+actbaseDocumentTxt+"  value expected  "+expbaseDocumentTxt);
		
		if(actbaseDocumentTxt.equalsIgnoreCase(expbaseDocumentTxt))
		{
			System.out.println("Test Pass : Title Changed and BaseDoc Is AS Expected");
			excelReader.setCellData(xlfile, "Sheet2", 254, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Not Chnaged Or Base Document Is Not As Expected ");
			excelReader.setCellData(xlfile, "Sheet2", 254, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktoselectandsavewithoutanyerrorsandclosetheDocumentdoSalesinvoiceOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s=new Select(masterDropDown);
		s.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		Select s1=new Select(positionDropdown);
		s1.selectByVisibleText("Header");
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s2=new Select(masterDropDown);
		s2.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		Select s3=new Select(positionDropdown);
		s3.selectByVisibleText("Header");
		position2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("*******************************checktoselectandsavewithoutanyerrorsandclosetheDocumentdoSalesinvoiceOrders*******************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 255, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 255, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkCreateDocumentintheSalesInvoiceVoucher2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt=titleTxt.getAttribute("value");
		
		String exptitleTxt="New Doc Type 48";
		
		System.out.println("*****************************************checkCreateDocumentintheSalesInvoiceVoucher2*********************************************");
		
		System.out.println("Sales Invoice Voucher 2 Data : "+acttitleTxt+"  value expected  "+exptitleTxt);		
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 256, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title is NOT as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 256, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktoinputandBaseDocumentasSalesInvoicedoSalesOrder2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Sales Invoice N");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocumentTxtInDocCust));
		baseDocumentTxtInDocCust.click();
		
		String actbaseDocumentTxt=baseDocumentTxtInDocCust.getAttribute("value");
		String expbaseDocumentTxt="Sales Invoices d05";
		
		System.out.println("**********************************checktoinputandBaseDocumentasSalesInvoicedoSalesOrder2********************************");
		
		System.out.println("BaseDocumentTxt : "+actbaseDocumentTxt+"  value expected  "+expbaseDocumentTxt);
		
		if(actbaseDocumentTxt.equalsIgnoreCase(expbaseDocumentTxt))
		{
			System.out.println("Test Pass : Title Changed and BaseDoc Is AS Expected");
			excelReader.setCellData(xlfile, "Sheet2", 257, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Not Chnaged Or Base Document Is Not As Expected ");
			excelReader.setCellData(xlfile, "Sheet2", 257, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktoselectandsavewithoutanyerrorsandclosetheDocumentdoSalesinvoiceOrders2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s=new Select(masterDropDown);
		s.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s1=new Select(positionDropdown);
		s1.selectByVisibleText("Body");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s2=new Select(masterDropDown);
		s2.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		positionDropdown.click();
		
		Select s3=new Select(positionDropdown);
		s3.selectByVisibleText("Header");
		
		position2.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("******************************checktoselectandsavewithoutanyerrorsandclosetheDocumentdoSalesinvoiceOrders2*****************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 258, 9, resPass);
			return true;
		}else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 258, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checkCreateDocumentintheStockTransferVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersBtn));
		stockTransfersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		/*boolean acttitle=titleTxt.isDisplayed();
		
		boolean exptitle=true;
		
		System.out.println("*******************************checkCreateDocumentintheStockTransferVoucher********************************");
		
		System.out.println("TitleTxt isDisplaying: "+acttitle+"  value expected  "+exptitle);
		
		if(acttitle==exptitle)
		{
			titleTxt.click();
		}
		else
		{
			Thread.sleep(5000);
			titleTxt.click();
		}*/
		
		
		
		String acttitleTxt =titleTxt.getAttribute("value");
		String exptitleTxt ="New Doc Type 49";
		
		System.out.println("*******************************checkCreateDocumentintheStockTransferVoucher********************************");
		
		System.out.println("Stock Transfer Title is : "+acttitleTxt+"  value expected  "+exptitleTxt);
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 259, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title is NOT as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 259, 9, resFail);
			return false;
		}
	}
	
	
	
	
	public boolean 	checktoinputandBaseDocumentasStockTransferdoStockOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Stock Transfer New");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocumentTxtInDocCust));
		baseDocumentTxtInDocCust.click();
		
		String actbaseDocumentTxt=baseDocumentTxtInDocCust.getAttribute("value");
		String expbaseDocumentTxt="Stock Transfers c01";
		
		System.out.println("********************************checktoinputandBaseDocumentasStockTransferdoStockOrders*********************************");
		
		System.out.println("Voucher Stock Transfer : "+actbaseDocumentTxt+"  value expected  "+expbaseDocumentTxt);
		
		if(actbaseDocumentTxt.equalsIgnoreCase(expbaseDocumentTxt))
		{
			System.out.println("Test Pass : Title Changed and BaseDoc Is AS Expected");
			excelReader.setCellData(xlfile, "Sheet2", 260, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Not Chnaged Or Base Document Is Not As Expected ");
			excelReader.setCellData(xlfile, "Sheet2", 260, 9, resFail);
			return false;
		}
	}
	
	
	
	
	
	public boolean 	checktoselectandsavewithoutanyerrorsandclosetheDocumentdoStockOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s=new Select(masterDropDown);
		s.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		Select s1=new Select(positionDropdown);
		s1.selectByVisibleText("Body");
		
		position1.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("********************************checktoselectandsavewithoutanyerrorsandclosetheDocumentdoStockOrders*************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 261, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 261, 9, resFail);
			return false;
		}
	}
	
	
	
	
	/*public boolean 	checkCreateDocumentinthePurchaseVoucher2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersBtn));
		purchaseVouchersBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt=titleTxt.getAttribute("value");
		String exptitleTxt="New Doc Type 50";
		
		if(acttitleTxt.equalsIgnoreCase(exptitleTxt))
		{
			System.out.println("Test Pass : Title as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 262, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title is NOT as expected ");
			excelReader.setCellData(xlfile, "Sheet2", 262, 9, resFail);
			return false;
		}
	}
	
	
	public boolean 	checktoinputandBaseDocumentasPurchasedoPurchaseOrders2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		titleTxt.clear();
		titleTxt.sendKeys("Purchase Voucher New Two");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocumentTxt));
		baseDocumentTxt.click();
		
		String actbaseDocumentTxt=baseDocumentTxt.getAttribute("value");
		String expbaseDocumentTxt="Purchases Vouchers 302";
		
		if(actbaseDocumentTxt.equalsIgnoreCase(expbaseDocumentTxt))
		{
			System.out.println("Test Pass : Title Changed and BaseDoc Is AS Expected");
			excelReader.setCellData(xlfile, "Sheet2", 263, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Title Not Chnaged Or Base Document Is Not As Expected ");
			excelReader.setCellData(xlfile, "Sheet2", 263, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktoselectandsavewithoutanyerrorsandclosetheDocumentdoPurchaseOrders2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s=new Select(masterDropDown);
		s.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		positionDropdown.click();
		
		Select s1=new Select(positionDropdown);
		s1.selectByVisibleText("Body");
		
		position1.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		
		String Actdata=errorMessage.getText();
		String Expdata="Data Saved Successfully";
		
		if(Actdata.equalsIgnoreCase(Expdata))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			excelReader.setCellData(xlfile, "Sheet2", 264, 9, resPass);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtnINDC));
			errorMessageCloseBtnINDC.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
			CloseBtnINDC.click();
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			excelReader.setCellData(xlfile, "Sheet2", 264, 9, resFail);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtnINDC));
			errorMessageCloseBtnINDC.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
			CloseBtnINDC.click();
			return false;
		}
		}
	
	
	
	
	public boolean 	checkUpdatedpurchaseVoucherNewInDocumentCustomize() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		if(purchaseVoucherNew.isDisplayed())
		{
			System.out.println("Test Pass : Purchase Voucher New Is Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 265, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Purchase Voucher New Is NOt Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 265, 9, resFail);
			return false;
		}
	}
	*/


	public boolean 	checkCreationdoPurchaseOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutAddFieldsBtn));
		editLayoutAddFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutCaptionTxt));
		
		boolean acteditLayoutCaptionTxt=editLayoutCaptionTxt.isDisplayed();
		
		boolean expeditLayoutCaptionTxt=true;
		
		System.out.println("******************************checkCreationdoPurchaseOrders*******************************");
		
		System.out.println("EditLayoutCaptionTxt : "+acteditLayoutCaptionTxt+"  value expected  "+expeditLayoutCaptionTxt);
		
		if(acteditLayoutCaptionTxt==expeditLayoutCaptionTxt)
		{
			System.out.println("Test Pass : Add Button Fileds Are Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 266, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Add Button Fileds Are Not Displayed");
			excelReader.setCellData(xlfile, "Sheet2", 266, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checkinEditlayoutofHeaderdoPurchaseOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutCaptionTxt));
		editLayoutCaptionTxt.click();
		editLayoutCaptionTxt.sendKeys("Test");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutApplyBtn));
		editLayoutApplyBtn.click();
		
		System.out.println("****************************************checkinEditlayoutofHeaderdoPurchaseOrders************************************");
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		
		boolean acteditLayoutHeaderTab=editLayoutHeaderTab.isDisplayed();
		
		boolean expeditLayoutHeaderTab=true;
		
		System.out.println("EditLayoutHeaderTab : "+acteditLayoutHeaderTab+"  value expected  "+expeditLayoutHeaderTab);
		
		if(acteditLayoutHeaderTab==expeditLayoutHeaderTab)
		{
			System.out.println("Test Pass : Inputed data in Caption and saved");
			excelReader.setCellData(xlfile, "Sheet2", 267, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Inputed data in Caption and saved");
			excelReader.setCellData(xlfile, "Sheet2", 267, 9, resPass);
			return false;
		}
	}
	
	
	
	
	
	public boolean 	checkUpdateandclosetheDocumentCustomizationdoPurchaseOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("*************************************checkUpdateandclosetheDocumentCustomizationdoPurchaseOrders************************************");
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Updating data successfully");
			excelReader.setCellData(xlfile, "Sheet2", 268, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Updating data successfully");
			excelReader.setCellData(xlfile, "Sheet2", 268, 9, resFail);
			return false;
		}
	}
	
	
	public boolean 	checkAddingFieldsthroughEditScreenthroughLoadFieldssalesInvoiceN() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(1000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceN));
		salesInvoiceN.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		s.selectByVisibleText("Delivery Notes");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields1stChkBox));
		editScreenLoadFields1stChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		String acteditScreenbody4thRowCaption,expeditScreenbody4thRowCaption;
		acteditScreenbody4thRowCaption=editScreenbody5thRowCaption.getText();
		expeditScreenbody4thRowCaption="Avg Rate";
		
		System.out.println("**********************************checkAddingFieldsthroughEditScreenthroughLoadFieldssalesInvoiceN********************************");
		
		System.out.println("EditScreenbody4thRowCaption : "+acteditScreenbody4thRowCaption+"  value expected  "+expeditScreenbody4thRowCaption);
		
		if(acteditScreenbody4thRowCaption.equalsIgnoreCase(expeditScreenbody4thRowCaption))
		{
			System.out.println("Test Pass : Loading Feilds Edit Screen Ssales Invoice New Two Successfully");
			excelReader.setCellData(xlfile, "Sheet2", 269, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Loading Feilds Edit Screen Ssales Invoice New Two ");
			excelReader.setCellData(xlfile, "Sheet2", 269, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean 	checktheSettingsandUpdateandclosethedoSalesOrders2() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		System.out.println("****************************************checktheSettingsandUpdateandclosethedoSalesOrders2************************************");

		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();	

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println("Test Pass : Updating data successfully");
			excelReader.setCellData(xlfile, "Sheet2", 270, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Updating data successfully");
			excelReader.setCellData(xlfile, "Sheet2", 270, 9, resFail);
			return false;
		}
	}
	
	
	
	//New Code modified from here onwards for extra vouchers for rtstk(0)
	
	public boolean 	checkLoadingFieldsinPurchaseVoucherNewFromDeliveryNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		s.selectByVisibleText("Delivery Notes");
		
		editScreenLoadFieldsDropdown.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields2ndChkBox));
		editScreenLoadFields2ndChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));
		
		boolean acteditScreenBody1stRowEditBtn=editScreenBody1stRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody1stRowEditBtn=true;
		
		System.out.println("*********************************checkLoadingFieldsinPurchaseVoucherNewFromDeliveryNotes**********************************");
		
		System.out.println("EditScreenBody1stRowEditBtn : "+acteditScreenBody1stRowEditBtn+"  value expected  "+expeditScreenBody1stRowEditBtn);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(acteditScreenBody1stRowEditBtn==expeditScreenBody1stRowEditBtn)
		{
			
			excelReader.setCellData(xlfile, "Sheet2", 271, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			
			excelReader.setCellData(xlfile, "Sheet2", 271, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	public boolean 	checkLoadingFieldsinSalesInvoiceNFromDeliveryNotes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceN));
		salesInvoiceN.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		editScreenLoadFieldsDropdown.sendKeys("Delivery Notes");
		Thread.sleep(2000);
		editScreenLoadFieldsDropdown.sendKeys(Keys.TAB);
		editScreenLoadFieldsDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields2ndChkBox));
		editScreenLoadFields2ndChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));	
		
		boolean acteditScreenBody1stRowEditBtn=editScreenBody1stRowEditBtn.isDisplayed();
		boolean acteditScreenBody2ndRowEditBtn=editScreenBody2ndRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody1stRowEditBtn=true;
		boolean expeditScreenBody2ndRowEditBtn=true;
		
		System.out.println("****************************************checkLoadingFieldsinSalesInvoiceNFromDeliveryNotes**************************************");
		
		System.out.println("EditScreenBody1stRowEditBtn : "+acteditScreenBody1stRowEditBtn+"  value expected  "+expeditScreenBody1stRowEditBtn);
		System.out.println("EditScreenBody2ndRowEditBtn : "+acteditScreenBody2ndRowEditBtn+"  value expected  "+expeditScreenBody2ndRowEditBtn);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved Successfully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(acteditScreenBody1stRowEditBtn==expeditScreenBody1stRowEditBtn && acteditScreenBody2ndRowEditBtn==expeditScreenBody2ndRowEditBtn)
		{
			excelReader.setCellData(xlfile, "Sheet2", 272, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 272, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	
	
	public boolean 	checkAddingAvgRate2inEditScreenShortageinStocks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
	
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortageInStocksBtn));
		shortageInStocksBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.click();
		editScreenCaptionTxt.sendKeys("Avg Rate(O)");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		editScreenPreloadTxt.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(preloadformulaTxt));
		preloadformulaTxt.click();
		preloadformulaTxt.sendKeys("&rtstk(O)");
		preloadFormulaokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(EditScreenAddToStockDropDown));
		EditScreenAddToStockDropDown.click();
		Select s1=new Select(EditScreenAddToStockDropDown);
		s1.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDropdown));
		editScreenAddToNetDropdown.click();
		Select s2=new Select(editScreenAddToNetDropdown);
		s2.selectByVisibleText("Not Applicable");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));
		
		boolean acteditScreenBody1stRowEditBtn=editScreenBody1stRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody1stRowEditBtn=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage1=" ";
		
		String actMessage1=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		
		System.out.println("*********************************checkAddingAvgRate2inEditScreenShortageinStocks**********************************");
		
		System.out.println("EditScreenBody1stRowEditBtn : "+acteditScreenBody1stRowEditBtn+"  value expected  "+expeditScreenBody1stRowEditBtn);
			
		if(acteditScreenBody1stRowEditBtn==expeditScreenBody1stRowEditBtn)
		{
			excelReader.setCellData(xlfile, "Sheet2", 273, 9, resPass);
			System.out.println("Test Pass : Inputed data in add field and saved successfully");
			return true;
		}	
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 273, 9, resFail);
			System.out.println("Test Fail :  Inputed data in add field and Not  saved successfully");
			return false;
		}
	}

	
	
	
	
	public boolean 	checkLoadingFieldsinPurchaseReturnsFromShortageinStocks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsBtn));
		purchaseReturnsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		s.selectByVisibleText("Shortages in Stock");
		
		editScreenLoadFieldsDropdown.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields1stChkBox));
		editScreenLoadFields1stChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody2ndRowEditBtn));	
		
		boolean acteditScreenBody2ndRowEditBtn=editScreenBody2ndRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody2ndRowEditBtn=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("***************************************checkLoadingFieldsinPurchaseReturnsFromShortageinStocks************************************");
		
		System.out.println("EditScreenBody2ndRowEditBtn : "+acteditScreenBody2ndRowEditBtn+"  value expected  "+expeditScreenBody2ndRowEditBtn);
		
		if(acteditScreenBody2ndRowEditBtn==expeditScreenBody2ndRowEditBtn)
		{
			excelReader.setCellData(xlfile, "Sheet2", 274, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 274, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	public boolean 	checkLoadingFieldsinSalesReturnsFromShortageinStocks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsBtn));
		salesReturnsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		
		Select s=new Select(editScreenLoadFieldsDropdown);
		s.selectByVisibleText("Shortages in Stock");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields1stChkBox));
		editScreenLoadFields1stChkBox.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));	
		
		boolean acteditScreenBody1stRowEditBtn=editScreenBody1stRowEditBtn.isDisplayed();
		
		boolean expeditScreenBody1stRowEditBtn=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("********************************checkLoadingFieldsinSalesReturnsFromShortageinStocks***********************************");
		
		System.out.println("EditScreenBody1stRowEditBtn : "+acteditScreenBody1stRowEditBtn+"  value expected  "+expeditScreenBody1stRowEditBtn);
		
		if(acteditScreenBody1stRowEditBtn==expeditScreenBody1stRowEditBtn)
		{
			excelReader.setCellData(xlfile, "Sheet2", 275, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 275, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	

	// Changing RD Net Value As DEDUCT Of Sales Invoice (Default) Voucher

	public boolean 	checkAddToNetValueForSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody1stRowEditBtn));
		editScreenBody1stRowEditBtn.click();
		
		Select s=new Select(editScreenAddToNetDropdown);
		s.selectByVisibleText("Deduct");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		System.out.println("***************************************checkAddToNetValueForSalesInvoice*************************************");
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
	
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdown.click();
		editScreenLoadFieldsDropdown.sendKeys("Delivery Notes");
		Thread.sleep(2000);
		editScreenLoadFieldsDropdown.sendKeys(Keys.TAB);
		editScreenLoadFieldsDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields1stChkBox));
		editScreenLoadFields1stChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields2ndChkBox));
		editScreenLoadFields2ndChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage1="Data Saved Successfully";
		
		String actMessage1=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actMessage1.equalsIgnoreCase(expMessage1))
		{
			excelReader.setCellData(xlfile, "Sheet2", 276, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 276, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	

	
	// Update Stock Option , Currency , Due date in Miscellaneous Tab For Purchase Voucher
	
	public boolean 	checkUpdateTagsUpdateStockOptionCurrencyAndDueDateOfPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersBtn));
		purchaseVouchersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
		
		if(updateStockChkBox.isSelected()==false)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateStockChkBox));
			updateStockChkBox.click();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s1=new Select(dueDateDropdown);
		s1.selectByVisibleText("Header");
		
		boolean actupdateStockChkBox			=updateStockChkBox.isSelected();
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		
		boolean expupdateStockChkBox			=true;
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("***********************************checkUpdateTagsUpdateStockOptionCurrencyAndDueDateOfPurchaseVoucher************************************");
		
		System.out.println("UpdateStockChkBox             : "+actupdateStockChkBox            +"  value expected  "+expupdateStockChkBox);
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown        +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox      +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown              +"  value expected  "+expdueDateDropdown);
		
		if(actupdateStockChkBox==expupdateStockChkBox && actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && 
			actinputExchangeRateChkBox==expinputExchangeRateChkBox && actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && 
			actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 277, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 277, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	
	// Currency , Due date in Miscellaneous Tab For Purchase Voucher New
	
	public boolean 	checkCurrencyAndDueDateOfPurchaseVoucherNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
	
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
		purchaseVoucherNew.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s1=new Select(dueDateDropdown);
		s1.selectByVisibleText("Header");
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("**************************************checkCurrencyAndDueDateOfPurchaseVoucherNew***************************************");
		
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown        +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox      +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown              +"  value expected  "+expdueDateDropdown);
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox && 
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 278, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 278, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	// Currency , Due date in Miscellaneous Tab For Sales Invoice
	
	public boolean 	checkCurrencyAndDueDateOfSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
	
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s1=new Select(dueDateDropdown);
		s1.selectByVisibleText("Header");
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();

		System.out.println("************************************checkCurrencyAndDueDateOfSalesInvoice***********************************");
		
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown        +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox      +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown              +"  value expected  "+expdueDateDropdown);
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox && 
			 actinputExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 279, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 279, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	// Currency , Due date in Miscellaneous Tab  for Auto Sales Invoice
	
	public boolean 	checkCurrencyAndDueDateAndForAutoSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoSalesInvoice));
		autoSalesInvoice.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s1=new Select(dueDateDropdown);
		s1.selectByVisibleText("Header");
		dueDateDropdown.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(arapOptionsDropdown));
		arapOptionsDropdown.click();
		Select s2=new Select(arapOptionsDropdown);
		s2.selectByVisibleText("Always new reference");
		arapOptionsDropdown.click();
		Thread.sleep(2000);
		arapOptionsDropdown.sendKeys(Keys.TAB);
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		String actARAPdropdown					=s2.getFirstSelectedOption().getText(); 
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		String expARAPdropdown					="Always new reference";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("*******************************************checkCurrencyAndDueDateAndForAutoSalesInvoice***************************************");
		
		System.out.println("AddCurrencyInDropdown          : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox        : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox   : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown                : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
		System.out.println("ARAPdropdown                   : "+actARAPdropdown                  +"  value expected  "+expARAPdropdown);
				
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox && 
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown) && 
			actARAPdropdown.equalsIgnoreCase(expARAPdropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 280, 9, resPass);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 280, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	//Currency , Due date in Miscellaneous Tab  for Sales Invoice N
	
	public boolean 	checkCurrencyDueDateAndReservationTypeOfSalesInvoiceN() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceN));
		salesInvoiceN.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		int editScreenbodyCaptionCount = editScreenbodyCaption.size();
		
		System.err.println("editScreenbodyCaption : "+editScreenbodyCaptionCount);
		
		for(int i=0;i<editScreenbodyCaptionCount;i++)
		{
			String data = editScreenbodyCaption.get(i).getText();
			
			if(data.equalsIgnoreCase("AQ"))
			{
				editScreenbodyDeleteBtn.get(i).click();
				
				break;
			}
		}	
		
		
		getWaitForAlert();
		
		getAlert().accept();
		
		System.out.println("************************************checkCurrencyDueDateAndReservationTypeOfSalesInvoiceN*********************************");
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		int editScreenbodyCaptionCount1 = editScreenbodyCaption.size();
		
		System.err.println("editScreenbodyCaption : "+editScreenbodyCaptionCount);
		
		for(int i=0;i<editScreenbodyCaptionCount1;i++)
		{
			String data = editScreenbodyCaption.get(i).getText();
			
			if(data.equalsIgnoreCase("FQ"))
			{
				editScreenbodyDeleteBtn.get(i).click();
				
				break;
			}
		}	
		
		getWaitForAlert();
		
		getAlert().accept();
		
		String expMessage1=" ";
		
		String actMessage1=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qtyPreloadedTxt));
		qtyPreloadedTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qtyPreloadedformulaTxt));
		qtyPreloadedformulaTxt.click();
		qtyPreloadedformulaTxt.clear();
		qtyPreloadedformulaTxt.sendKeys("SBO2+SBO3");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qtyPreloadedFormulaokBtn));
		qtyPreloadedFormulaokBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAmountInEveryLineChkBox));
		selectAmountInEveryLineChkBox.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		addCurrencyInDropdown.sendKeys("Header");
		addCurrencyInDropdown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		dueDateDropdown.sendKeys("Header");
		dueDateDropdown.sendKeys(Keys.TAB);
		
		boolean actselectAmountInEveryLineChkBox	=selectAmountInEveryLineChkBox.isSelected();
		String actaddCurrencyInDropdown				=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox			=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox		=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown					=dueDateDropdown.getAttribute("value");
		boolean actselectbillsbeforeAmountChkBox	=selectbillsbeforeAmountChkBox.isSelected();
		
		boolean expselectAmountInEveryLineChkBox	=true;
		String expaddCurrencyInDropdown				="1";
		boolean expinputExchangeRateChkBox			=true;
		boolean expinputLocalExchangeRateChkBox		=true;
		String expdueDateDropdown					="1";
		boolean expselectbillsbeforeAmountChkBox	=true;
		
		
		System.out.println("SelectAmountInEveryLineChkBox : "+actselectAmountInEveryLineChkBox +"  value expected  "+expselectAmountInEveryLineChkBox);
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
		System.out.println("SelectbillsbeforeAmountChkBox : "+actselectbillsbeforeAmountChkBox +"  value expected  "+expselectbillsbeforeAmountChkBox);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryoptionsTab));
		inventoryoptionsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reservationTypeDropdown));
		reservationTypeDropdown.click();
		reservationTypeDropdown.sendKeys("None");
		reservationTypeDropdown.sendKeys(Keys.TAB);
		
		String actreservationTypeDropdown=reservationTypeDropdown.getAttribute("value");
		
		String expreservationTypeDropdown="0";
		
		System.out.println("ReservationTypeDropdown : "+actreservationTypeDropdown+"  value expected  "+expreservationTypeDropdown);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessageupdateBtn="Data Saved SuccessFully";
		
		String actMessageupdateBtn=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		if(actselectAmountInEveryLineChkBox==expselectAmountInEveryLineChkBox && actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) &&
				actinputExchangeRateChkBox==expinputExchangeRateChkBox && actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox &&
				actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown) /*&& actselectbillsbeforeAmountChkBox==expselectbillsbeforeAmountChkBox*/
				&& actreservationTypeDropdown.equalsIgnoreCase(expreservationTypeDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 281, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 281, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	// Changing Reservation Type For AutoSales Orders As Auto 
	
	public boolean 	checkReservationTypeOfAutoSalesOrders() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		Thread.sleep(1000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoSalesOrders));
		autoSalesOrders.click();
		
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryoptionsTab));
		inventoryoptionsTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reservationTypeDropdown));
		reservationTypeDropdown.click();
		Select s2=new Select(reservationTypeDropdown);
		s2.selectByVisibleText("Auto reservation");
		
		String actreservationTypeDropdown=reservationTypeDropdown.getAttribute("value");
		
		String expreservationTypeDropdown="2";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("**************************************checkReservationTypeOfAutoSalesOrders**************************************");
		
		System.out.println("ReservationTypeDropdown : "+actreservationTypeDropdown+"  value expected  "+expreservationTypeDropdown);
		
		if(actreservationTypeDropdown.equalsIgnoreCase(expreservationTypeDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 282, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 282, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
			
		}
	}
	
	
	// Currency ,Due date Exchange Local Exchange of Sales returns
	
	public boolean 	checkCurrencyAndDueDateOfSalesReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsBtn));
		salesReturnsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s1=new Select(dueDateDropdown);
		s1.selectByVisibleText("Header");
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("**************************************checkCurrencyAndDueDateOfSalesReturns**************************************");
		
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown        +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox      +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown              +"  value expected  "+expdueDateDropdown);
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 283, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 283, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
		

	// Currency ,Due date Exchange Local Exchange of Purchase returns
	
	public boolean 	checkCurrencyAndDueDateOfPurchaseReturns() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsBtn));
		purchaseReturnsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s1=new Select(dueDateDropdown);
		s1.selectByVisibleText("Header");
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("*****************************************checkCurrencyAndDueDateOfPurchaseReturns*****************************************");
		
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 284, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 284, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
		
	// Creation Of Receipts Voucher And Adding Its Properties AR/Ap as FIFO And Select bill by amount
	
	public boolean 	checkCreatingAndUpdatingPropertiesFordoReceiptsVoucherFIFO() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));	
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt=titleTxt.getAttribute("value");
		String exptitleTxt="New Doc Type 50";	
		
		titleTxt.clear();
		titleTxt.sendKeys("Receipts FIFO");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocumentTxtInDocCust));
		baseDocumentTxtInDocCust.click();
		
		String actbaseDocumentTxt=baseDocumentTxtInDocCust.getAttribute("value");
		
		String expbaseDocumentTxt="Receipts 1201";
		
		System.out.println("The Base document Title as fallows"+actbaseDocumentTxt+"  value expected  "+expbaseDocumentTxt);
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(arapOptionsDropdown));
		arapOptionsDropdown.click();
		Select s=new Select(arapOptionsDropdown);
		s.selectByVisibleText("Auto adjust on FIFO");
		
		arapOptionsDropdown.click();
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		String actarapOptionsDropdown			=arapOptionsDropdown.getAttribute("value");
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		String exparapOptionsDropdown			="0";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		System.out.println("***********************************checkCreatingAndUpdatingPropertiesFordoReceiptsVoucherFIFO***********************************");
		
		System.out.println("AddCurrencyInDropdown          : "+actaddCurrencyInDropdown        +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox        : "+actinputExchangeRateChkBox      +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox   : "+actinputLocalExchangeRateChkBox +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown                : "+actdueDateDropdown              +"  value expected  "+expdueDateDropdown);
		System.out.println("ArapOptionsDropdown            : "+actarapOptionsDropdown          +"  value expected  "+exparapOptionsDropdown);
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown) && 
			actarapOptionsDropdown.equalsIgnoreCase(exparapOptionsDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 286, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 286, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	public boolean 	checkCreatingAndUpdatingPropertiesWithARAPFordoReceiptsVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));	
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		
		String acttitleTxt=titleTxt.getAttribute("value");
		String exptitleTxt="New Doc Type 51";	
		
		titleTxt.clear();
		titleTxt.sendKeys("Receipts ARAP");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseDocumentTxtInDocCust));
		baseDocumentTxtInDocCust.click();
		
		String actbaseDocumentTxt=baseDocumentTxtInDocCust.getAttribute("value");

		String expbaseDocumentTxt="Receipts 1202";
		
		System.out.println("The Base document Title as fallows"+actbaseDocumentTxt+"  value expected  "+expbaseDocumentTxt);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
		
		getAction().sendKeys(Keys.END).build().perform();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(arapOptionsDropdown));
		
		Select arap=new Select(arapOptionsDropdown);
		
		arap.selectByVisibleText("Set manually");
		
		/*arapOptionsDropdown.click();
		arapOptionsDropdown.sendKeys("Set manually");
		Thread.sleep(2000);
		arapOptionsDropdown.sendKeys(Keys.TAB);*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectbillsbeforeAmountChkBox));
		selectbillsbeforeAmountChkBox.click();
		
		String actaddCurrencyInDropdown				=addCurrencyInDropdown.getAttribute("value"); 
		boolean actinputExchangeRateChkBox			=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox		=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown					=dueDateDropdown.getAttribute("value");
		String actarapOptionsDropdown				=arapOptionsDropdown.getAttribute("value");
		boolean actselectbillsbeforeAmountChkBox	=selectbillsbeforeAmountChkBox.isSelected();

		String expaddCurrencyInDropdown				="1"; 
		boolean expinputExchangeRateChkBox			=true;
		boolean expinputLocalExchangeRateChkBox		=true;
		String expdueDateDropdown					="1";
		String exparapOptionsDropdown				="2";
		boolean expselectbillsbeforeAmountChkBox	=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		System.out.println("***********************************checkCreatingAndUpdatingPropertiesWithARAPFordoReceiptsVoucher*********************************");
		
		System.out.println("AddCurrencyInDropdown          : "+actaddCurrencyInDropdown          +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox        : "+actinputExchangeRateChkBox        +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox   : "+ actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown                : "+actdueDateDropdown                +"  value expected  "+expdueDateDropdown);
		System.out.println("ArapOptionsDropdown            : "+actarapOptionsDropdown            +"  value expected  "+exparapOptionsDropdown);
		System.out.println("SelectbillsbeforeAmountChkBox  : "+actselectbillsbeforeAmountChkBox  +"  value expected  "+expselectbillsbeforeAmountChkBox);
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox && 
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown) &&
			actarapOptionsDropdown.equalsIgnoreCase(exparapOptionsDropdown) && actselectbillsbeforeAmountChkBox==expselectbillsbeforeAmountChkBox)
		{
			excelReader.setCellData(xlfile, "Sheet2", 286, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 286, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	// Updating Tags Currency Due Date Exchange Local Exchange For payments
	
	public boolean 	checkTagsCurrencyAndDueDateOfPayments() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsBtn));
		paymentsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s3=new Select(dueDateDropdown);
		s3.selectByVisibleText("Header");
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("************************************checkTagsCurrencyAndDueDateOfPayments*************************************");
		
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 287, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 287, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	
	// Updating Tags Currency Due Date Exchange Local Exchange For Petty Cash
	
	public boolean 	checkTagsCurrencyAndDueDateOfPettyCash() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBtn));
		pettyCashBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s3=new Select(dueDateDropdown);
		s3.selectByVisibleText("Header");
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("****************************************checkTagsCurrencyAndDueDateOfPettyCash************************************");
		
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 288, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 288, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	
	// Updating Tags Currency Due Date Exchange Local Exchange For PostDate Receipts
	
	public boolean 	checkTagsCurrencyAndDueDateOfPostDatedReceipts() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postDatedreceiptsBtn));
		postDatedreceiptsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s3=new Select(dueDateDropdown);
		s3.selectByVisibleText("Header");
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("*******************************************checkTagsCurrencyAndDueDateOfPostDatedReceipts******************************************");
		
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown         +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox       +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox  +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown               +"  value expected  "+expdueDateDropdown);
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 289, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 289, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	// Updating Tags Currency Due Date Exchange Local Exchange For PostDate Payments
	
	public boolean 	checkTagsCurrencyAndDueDateOfPostDatedPayment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postDatedpaymentsBtn));
		postDatedpaymentsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s3=new Select(dueDateDropdown);
		s3.selectByVisibleText("Header");
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("****************************************checkTagsCurrencyAndDueDateOfPostDatedPayments***********************************");
		
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown        +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox      +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown              +"  value expected  "+expdueDateDropdown);
		
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox && 
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 290, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 290, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	// Updating Tags Currency Due Date Exchange Local Exchange For PostDate Journal Entries
	
	public boolean 	checkTagsCurrencyAndDueDateOfJournalEntries() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesBtn));
		journalEntriesBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select s1=new Select(masterDropDown);
		s1.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select s2=new Select(positionDropdown);
		s2.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
		miscellaneousTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCurrencyInDropdown));
		addCurrencyInDropdown.click();
		Select s=new Select(addCurrencyInDropdown);
		s.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputExchangeRateChkBox));
		inputExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputLocalExchangeRateChkBox));
		inputLocalExchangeRateChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateDropdown));
		dueDateDropdown.click();
		Select s3=new Select(dueDateDropdown);
		s3.selectByVisibleText("Header");
		
		String actaddCurrencyInDropdown			=addCurrencyInDropdown.getAttribute("value");
		boolean actinputExchangeRateChkBox		=inputExchangeRateChkBox.isSelected();
		boolean actinputLocalExchangeRateChkBox	=inputLocalExchangeRateChkBox.isSelected();
		String actdueDateDropdown				=dueDateDropdown.getAttribute("value");
		
		String expaddCurrencyInDropdown			="1";
		boolean expinputExchangeRateChkBox		=true;
		boolean expinputLocalExchangeRateChkBox	=true;
		String expdueDateDropdown				="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expMessage="Data Saved SuccessFully";
		
		String actMessage=checkValidationMessage(expMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("****************************************checkTagsCurrencyAndDueDateOfJournalEntries*****************************************");
		
		System.out.println("AddCurrencyInDropdown         : "+actaddCurrencyInDropdown        +"  value expected  "+expaddCurrencyInDropdown);
		System.out.println("InputExchangeRateChkBox       : "+actinputExchangeRateChkBox      +"  value expected  "+expinputExchangeRateChkBox);
		System.out.println("InputLocalExchangeRateChkBox  : "+actinputLocalExchangeRateChkBox +"  value expected  "+expinputLocalExchangeRateChkBox);
		System.out.println("DueDateDropdown               : "+actdueDateDropdown              +"  value expected  "+expdueDateDropdown);
		
		if(actaddCurrencyInDropdown.equalsIgnoreCase(expaddCurrencyInDropdown) && actinputExchangeRateChkBox==expinputExchangeRateChkBox &&
			actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox && actdueDateDropdown.equalsIgnoreCase(expdueDateDropdown))
		{
			excelReader.setCellData(xlfile, "Sheet2", 291, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 291, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
		}
	}
	
	
	
	

	public boolean 	checkVATvouchersCreation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();
		Thread.sleep(2000);
		// Purchases Voucher VAT Voucher
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersBtn));
		purchaseVouchersBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Purchases Voucher VAT");
		titleTxt.sendKeys(Keys.TAB);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select masterDropDownSelect=new Select(masterDropDown);
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdown.click();
		
		Select positionDropdownSelect=new Select(positionDropdown);
		positionDropdownSelect.selectByVisibleText("Body");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
		editScreenBodyTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		Select editScreenLoadFieldsDropdownSelect =new Select(editScreenLoadFieldsDropdown);
		editScreenLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody2ndRowEditBtn));
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
		editScreenFooterTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdownSelect.selectByVisibleText("Purchases Vouchers");
		
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expPVVATmessage ="Data Saved Successfully";
		String actPVVATmessage =checkValidationMessage(expPVVATmessage);
		
		// Purchase Returns VAT Voucher
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsBtn));
		purchaseReturnsBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Purchases Returns VAT");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
		editScreenBodyTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields3rdChkBox));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody2ndRowEditBtn));
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
		editScreenFooterTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdownSelect.selectByVisibleText("Purchases Vouchers");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expPRVATmessage ="Data Saved Successfully";
		String actPRVATmessage =checkValidationMessage(expPRVATmessage);
		
		// Sales Invoice VAT
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Sales Invoices VAT");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
		editScreenBodyTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields3rdChkBox));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody2ndRowEditBtn));
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
		editScreenFooterTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdownSelect.selectByVisibleText("Purchases Vouchers");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expSIVATmessage ="Data Saved Successfully";
		String actSIVATmessage =checkValidationMessage(expSIVATmessage);
		
		// Sales Returns VAT
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsBtn));
		salesReturnsBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Sales Returns VAT");
		titleTxt.sendKeys(Keys.TAB);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
		editScreenBodyTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields3rdChkBox));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody2ndRowEditBtn));
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
		editScreenFooterTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdownSelect.selectByVisibleText("Purchases Vouchers");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Sales Invoice N");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expSRVATmessage ="Data Saved Successfully";
		String actSRVATmessage =checkValidationMessage(expSRVATmessage);
		
		// Receipts Voucher VAT
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptsBtn));
		receiptsBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Receipts VAT");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expRECVATmessage ="Data Saved Successfully";
		String actRECVATmessage =checkValidationMessage(expRECVATmessage);
		
		// Payments VAT
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsBtn));
		paymentsBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Payments VAT");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expPAYVATmessage ="Data Saved Successfully";
		String actPAYVATmessage =checkValidationMessage(expPAYVATmessage);
		
		// PettyCash Voucher VAT
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBtn));
		pettyCashBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		Thread.sleep(2000);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("PettyCash VAT");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expPettycashVATmessage ="Data Saved Successfully";
		String actPettycashVATmessage =checkValidationMessage(expPettycashVATmessage);
		
		// JV VAT
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesBtn));
		journalEntriesBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("JV VAT");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expJVVATmessage ="Data Saved Successfully";
		String actJVVATmessage =checkValidationMessage(expJVVATmessage);
		
		// Non JV VAT
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nonStandardjournalEntriesBtn));
		nonStandardjournalEntriesBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Non JV VAT");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expNJVVATmessage ="Data Saved Successfully";
		String actNJVVATmessage =checkValidationMessage(expNJVVATmessage);
		
		// Debit Notes VAT

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitNotesBtn));
		debitNotesBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Debit Notes VAT");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expDebitVATmessage ="Data Saved Successfully";
		String actDebitVATmessage =checkValidationMessage(expDebitVATmessage);
		
		// Credit Notes VAT
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotesBtn));
		creditNotesBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys("Credit Notes VAT");
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		masterDropDownSelect.selectByVisibleText("Warehouse");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		masterDropDownSelect.selectByVisibleText("Department");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();

		positionDropdownSelect.selectByVisibleText("Header");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText("Receipts");
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBody1stRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String expCreditVATmessage ="Data Saved Successfully";
		String actCreditVATmessage =checkValidationMessage(expCreditVATmessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
		CloseBtnINDC.click();
		
		System.out.println("******************************************checkVATvouchersCreation*****************************************");
		
		System.out.println("PVVATmessage        : "+actPVVATmessage        +" Value Expected : "+expPVVATmessage);
		System.out.println("PRVATmessage        : "+actPRVATmessage        +" Value Expected : "+expPRVATmessage);
		System.out.println("SIVATmessage        : "+actSIVATmessage        +" Value Expected : "+expSIVATmessage);
		System.out.println("SRVATmessage        : "+actSRVATmessage        +" Value Expected : "+expSRVATmessage);
		System.out.println("RECVATmessage       : "+actRECVATmessage       +" Value Expected : "+expRECVATmessage);
		System.out.println("PAYVATmessage       : "+actPAYVATmessage       +" Value Expected : "+expPAYVATmessage);
		System.out.println("PettycashVATmessage : "+actPettycashVATmessage +" Value Expected : "+expPettycashVATmessage);
		System.out.println("JVVATmessage        : "+actJVVATmessage        +" Value Expected : "+expJVVATmessage);
		System.out.println("NJVVATmessage       : "+actNJVVATmessage       +" Value Expected : "+expNJVVATmessage);
		System.out.println("DebitVATmessage     : "+actDebitVATmessage     +" Value Expected : "+expDebitVATmessage);
		System.out.println("CreditVATmessage    : "+actCreditVATmessage    +" Value Expected : "+expCreditVATmessage);
		
		
		if(actPVVATmessage.equalsIgnoreCase(expPVVATmessage) && actPRVATmessage.equalsIgnoreCase(expPRVATmessage) && actSIVATmessage.equalsIgnoreCase(expSIVATmessage)
				&& actSRVATmessage.equalsIgnoreCase(expSRVATmessage) && actRECVATmessage.equalsIgnoreCase(expRECVATmessage)
				&& actPAYVATmessage.equalsIgnoreCase(expPAYVATmessage) && actPettycashVATmessage.equalsIgnoreCase(expPettycashVATmessage)
				&& actJVVATmessage.equalsIgnoreCase(expJVVATmessage) && actNJVVATmessage.equalsIgnoreCase(expNJVVATmessage)
				&& actDebitVATmessage.equalsIgnoreCase(expDebitVATmessage) && actCreditVATmessage.equalsIgnoreCase(expCreditVATmessage))
		{
			excelReader.setCellData(xlfile, "Sheet2", 282, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			
			
			
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet2", 282, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			
			
			
			return false;
			
		}
	}
	
	

	 @FindBy(xpath="//*[@id='0']")
	 public static WebElement generalInSettingwizard;
	
	 @FindBy(xpath="//*[@id='1']")
	 public static WebElement vatInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[2]/a")
	 public static WebElement posInSettingwizard;
		 
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[3]/a")
	 public static WebElement inventoryInSettingwizard;
	 
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[4]/a")
	 public static WebElement financialInSettingwizard;

	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[5]/a")
	 public static WebElement tdsInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[6]/a")
	 public static WebElement wmsInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[7]/a")
	 public static WebElement gstInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[8]/a")
	 public static WebElement mrpOneInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[9]/a")
	 public static WebElement mrpTwoInSettingwizard;
	

	 @FindBy(xpath="//*[@id='SettingWizardUL']/li")
	 public static List<WebElement> settingWizardULList;
	 
	
	 
	 @FindBy(xpath="//*[@id='105']/span")
	 public static WebElement  settingsSettingsWizard;
	 
	
	 
public boolean checkOpenSettingWizardPageIsOpen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkOpenSettingWizardPageIsOpen Method Executes.............   *****************************");
	
	try
	{		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsSettingsWizard));
		settingsSettingsWizard.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mrpTwoInSettingwizard));
		
		boolean actGeneralOption                    = generalInSettingwizard.isDisplayed();
		boolean actVatOption                        = vatInSettingwizard.isDisplayed();
       boolean actPosOption                        = posInSettingwizard.isDisplayed();
       boolean actInventoryOption                  = inventoryInSettingwizard.isDisplayed();
       boolean actFinancialOption                  = financialInSettingwizard.isDisplayed();
       boolean actTdsOption                        = tdsInSettingwizard.isDisplayed();       
       boolean actwmsOption                        = wmsInSettingwizard.isDisplayed();       
       boolean actgstOption                        = gstInSettingwizard.isDisplayed();       
       boolean actmrpOneOption                     = mrpOneInSettingwizard.isDisplayed();
       boolean actmrpTwoOption                     = mrpTwoInSettingwizard.isDisplayed();       
      
		boolean expGeneralOption                    = true;
		boolean expVatOption                        = true;
       boolean expPosOption                        = true;
       boolean expInventoryOption                  = true;
       boolean expFinancialOption                  = true;
       boolean expTdsOption                        = true;       
       boolean expwmsOption                        = true;       
       boolean expgstOption                        = true;       
       boolean expmrpOneOption                     = true;
       boolean expmrpTwoOption                     = true;;      
       
       System.out.println("General Value Actual                  : " + actGeneralOption +      " Value Expected : " + expGeneralOption);
       System.out.println("VAT Value Actual                      : " + actVatOption +          " Value Expected : " + expVatOption);
       System.out.println("POS Value Actual                      : " + actPosOption +          " Value Expected : " + expPosOption);
       System.out.println("Inventory Value Actual                : " + actInventoryOption +    " Value Expected : " + expInventoryOption);
       System.out.println("Financial Value Actual                : " + actFinancialOption +    " Value Expected : " + expFinancialOption);
       System.out.println("TDS Value Actual                      : " + actTdsOption +          " Value Expected : " + expTdsOption);     
       System.out.println("WMS Value Actual                      : " + actwmsOption +          " Value Expected : " + expwmsOption);
       System.out.println("GST Value Actual                      : " + actgstOption +          " Value Expected : " + expgstOption);
       System.out.println("MRP One Value Actual                  : " + actmrpOneOption +       " Value Expected : " + expmrpOneOption);
       System.out.println("MRP Two Value Actual                  : " + actmrpTwoOption +       " Value Expected : " + expmrpTwoOption);
       
       
       
       ArrayList<String>actsettingWizardULList=new ArrayList<String>();
		
		int settingWizardULListCount=settingWizardULList.size();
			
		System.out.println(" settingWizardULListCount  :  "+settingWizardULListCount);
			
		for (int i = 0; i < settingWizardULListCount; i++)
		{
			String data=settingWizardULList.get(i).getText();
			actsettingWizardULList.add(data);
		}
			
		String actsettingWizardUL=actsettingWizardULList.toString();
		String expsettingWizardUL=excelReader.getCellData(xlSheetName, 124, 7);
			
		System.err.println("  Actual settingWizardULList : "+actsettingWizardUL);
		System.err.println("  Expected  settingWizardULList : "+expsettingWizardUL);
			
		excelReader.setCellData(xlfile, xlSheetName, 124, 8, actsettingWizardUL);
       
       
		if(actGeneralOption==expGeneralOption && actVatOption==expVatOption 
	
				&& actPosOption==expPosOption && actInventoryOption==expInventoryOption 
				&& actFinancialOption==expFinancialOption && actTdsOption==expTdsOption
				&& actwmsOption==expwmsOption && actgstOption==expgstOption 
				&& expgstOption==expmrpOneOption && actmrpTwoOption==expmrpTwoOption && 
				
				actsettingWizardUL.endsWith(expsettingWizardUL)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 123, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 123, 9, resFail);
			return false;
		}
   }
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 123, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	
 }


@FindBy(xpath="//div[@id='dvSettingWizard']//li[1]/a")
public static WebElement  settingsWizardGeneralBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[2]/a")
public static WebElement  settingsWizardVATBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[3]/a")
public static WebElement  settingsWizardPOSBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[4]/a")
public static WebElement  settingsWizardInventoryBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[5]/a")
public static WebElement  settingsWizardFinancialBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[6]/a")
public static WebElement  settingsWizardTDSBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[7]/a")
public static WebElement  settingsWizardWMSBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[8]/a")
public static WebElement  settingsWizardGSTBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[9]/a")
public static WebElement  settingsWizardMRP1Btn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[10]/a")
public static WebElement  settingsWizardMRP2Btn;

@FindBy(xpath="//div[@class='Fcheckbox col-xs-12 col-sm-8']//label[1]/input")
public static WebElement  settingsWizardVATActivateVATChkbox;

@FindBy(xpath="//div[@id='dvRightSettingWizard']/div[2]/div[1]/div/div/label")
public static List<WebElement> settingsWizardVATVouchersList;

@FindBy(xpath="//div[@id='dvRightSettingWizard']/div[2]/div[1]/div/div/label/input")
public static List<WebElement> settingsWizardVATVoucherChkboxList;

@FindBy(xpath="//div[@id='dvSelectedVouchers']/div/label")
public static List<WebElement> settingsWizardVATSelectedVouchersList;

@FindBy(xpath="//label[contains(text(),'Gross')]/input")
public static WebElement settingsWizardVATGrossChkbox;

@FindBy(xpath="//label[contains(text(),'RD')]/input")
public static WebElement settingsWizardVATRDChkbox;

@FindBy(xpath="//label[(text()='Avg Rate')]/input")
public static WebElement settingsWizardVATAvgRateChkbox;

@FindBy(xpath="//label[(text()='Avg Rate(O)')]/input")
public static WebElement settingsWizardVATAvgRateOChkbox;

@FindBy(xpath="//label[(text()='AQ')]/input")
public static WebElement settingsWizardVATAQChkbox;

@FindBy(xpath="//label[(text()='FQ')]/input")
public static WebElement settingsWizardVATFQChkbox;

@FindBy(xpath="//label[(text()='VAT')]/input")
public static WebElement settingsWizardVATChkbox;

@FindBy(xpath="//label[(text()='Taxable')]/input")
public static WebElement settingsWizardTaxableChkbox;

@FindBy(xpath="//span[@class='icon-update icon-font6']")
public static WebElement settingsWizardUpdateBtn;

@FindBy(xpath="//*[@id='myNavbarVATAuditFile']/ul/li/div[2]/div[1]/span")
public static WebElement settingsWizardVAtCloseBtnINDC;

@FindBy(xpath="//input[@id='chkVATInclusive']")
public static WebElement settingsWizardVATInclusiveChkbox;







public boolean checkSaveVatOptionsInSettingsWizard() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	 
 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
 try
 {
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATBtn));
	settingsWizardVATBtn.click();
	
	Thread.sleep(3000);
	
	int actVouchersCount		=settingsWizardVATVouchersList.size();
	int expVouchersCount		=63;
	
	for (int i = 0; i < actVouchersCount; i++) 
	{
		String data=settingsWizardVATVouchersList.get(i).getText();
		
		int sl=i+1;
		
		System.out.println("VAT Activation Voucher "+sl+": "+data);
		
		if (data.contains("VAT")) 
		{
			settingsWizardVATVouchersList.get(i).click();
		}
	}
	
	
	int actVoucherChkboxList			=settingsWizardVATVoucherChkboxList.size();
	
	int selectedVouchersCount			=0;
	
	for (int i = 0; i < actVoucherChkboxList; i++) 
	{
		boolean selected=settingsWizardVATVoucherChkboxList.get(i).isSelected();
		
		if (selected) 
		{
			selectedVouchersCount=selectedVouchersCount+1;
		}
	}
	
	int actSelectedVouchersCount		=selectedVouchersCount;
	int expSelectedVouchersCount		=settingsWizardVATSelectedVouchersList.size();
	
	boolean actVouchersSelected=true;
	boolean expVouchersSelected=true;

	if (actSelectedVouchersCount==expSelectedVouchersCount) 
	{
		Set<String> expSelectedVouchersList= new HashSet<String>();
		  
		expSelectedVouchersList.add("Purchases Voucher VAT");
		expSelectedVouchersList.add("Purchases Returns VAT");
		expSelectedVouchersList.add("Sales Invoices VAT");
		expSelectedVouchersList.add("Sales Returns VAT");
		expSelectedVouchersList.add("Receipts VAT");
		expSelectedVouchersList.add("Payments VAT");
		expSelectedVouchersList.add("PettyCash VAT");
		expSelectedVouchersList.add("JV VAT");
		expSelectedVouchersList.add("Non JV VAT");
		expSelectedVouchersList.add("Debit Notes VAT");
		expSelectedVouchersList.add("Credit Notes VAT");
		  
	  Set<String> actSelectedVouchersList=new HashSet<String>();
	  
	  for (int i = 0; i < expSelectedVouchersCount; i++) 
	  {
		  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
		  
		  actSelectedVouchersList.add(voucher);
	  }
	  
	  System.out.println(actSelectedVouchersList);
	  System.out.println(expSelectedVouchersList);
	  
	  actVouchersSelected=actSelectedVouchersList.equals(expSelectedVouchersList);
	}
	
	
	
	System.err.println("1");
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 126, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	
	boolean actPurchasesVoucherVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	boolean actPurchasesVoucherVATRD				=settingsWizardVATRDChkbox.isDisplayed();
	boolean actPurchasesVoucherVATAvgRate			=settingsWizardVATAvgRateChkbox.isDisplayed();
	boolean actPurchasesVoucherVATAvgRateO			=settingsWizardVATAvgRateOChkbox.isDisplayed();
	
	boolean expPurchasesVoucherVATGross				=true;
	boolean expPurchasesVoucherVATRD				=true;
	boolean expPurchasesVoucherVATAvgRate			=true;
	boolean expPurchasesVoucherVATAvgRateO			=true;
	
	settingsWizardVATGrossChkbox.click();
	settingsWizardVATRDChkbox.click();
	settingsWizardVATAvgRateChkbox.click();
	settingsWizardVATAvgRateOChkbox.click();
	
	
	System.err.println("2");
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 127, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	System.err.println("1sdgfadgegdsfg");
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	boolean actPurchasesReturnsVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	boolean actPurchasesReturnsVATRD				=settingsWizardVATRDChkbox.isDisplayed();
	boolean actPurchasesReturnsVATAvgRateO			=settingsWizardVATAvgRateOChkbox.isDisplayed();
	
	boolean expPurchasesReturnsVATGross				=true;
	boolean expPurchasesReturnsVATRD				=true;
	boolean expPurchasesReturnsVATAvgRateO			=true;
	
	System.err.println("1dddddddd");
	
	settingsWizardVATGrossChkbox.click();
	settingsWizardVATRDChkbox.click();
	settingsWizardVATAvgRateOChkbox.click();
	
	
	
	System.err.println("3");
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 128, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	boolean actSalesInvoiceVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	boolean actSalesInvoiceVATRD				=settingsWizardVATRDChkbox.isDisplayed();
	boolean actSalesInvoiceVATAQ				=settingsWizardVATAQChkbox.isDisplayed();
	boolean actSalesInvoiceVATFQ				=settingsWizardVATFQChkbox.isDisplayed();
	boolean actSalesInvoiceVATAvgRate			=settingsWizardVATAvgRateChkbox.isDisplayed();
	boolean actSalesInvoiceVATAvgRateO			=settingsWizardVATAvgRateOChkbox.isDisplayed();
	/*boolean actSalesInvoiceVAT					=settingsWizardVATChkbox.isDisplayed();
	boolean actSalesInvoiceTaxable				=settingsWizardTaxableChkbox.isDisplayed();*/
	
	boolean expSalesInvoiceVATGross				=true;
	boolean expSalesInvoiceVATRD				=true;
	boolean expSalesInvoiceVATAQ				=true;
	boolean expSalesInvoiceVATFQ				=true;
	boolean expSalesInvoiceVATAvgRate			=true;
	boolean expSalesInvoiceVATAvgRateO			=true;
	/*boolean expSalesInvoiceVAT					=true;
	boolean expSalesInvoiceTaxable				=true;*/
	
	settingsWizardVATGrossChkbox.click();
	settingsWizardVATRDChkbox.click();
	settingsWizardVATAQChkbox.click();
	settingsWizardVATFQChkbox.click();
	settingsWizardVATAvgRateChkbox.click();
	settingsWizardVATAvgRateOChkbox.click();
	/*settingsWizardVATChkbox.click();
	settingsWizardTaxableChkbox.click();*/
	settingsWizardVATInclusiveChkbox.click();

	
	System.err.println("4");
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 129, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	boolean actSalesReturnsVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	boolean actSalesReturnsVATAvgRateO			=settingsWizardVATAvgRateOChkbox.isDisplayed();
	
	boolean expSalesReturnsVATGross				=true;
	boolean expSalesReturnsVATAvgRateO			=true;
	
	settingsWizardVATGrossChkbox.click();
	settingsWizardVATAvgRateOChkbox.click();
	
	
	
	System.err.println("5");
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 130, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	
	boolean actReceiptsVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expReceiptsVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	System.err.println("6");
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 131, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	
	boolean actPaymentsVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expPaymentsVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	System.err.println("7");
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 132, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	
	
	boolean actPettyCashVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expPettyCashVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	System.err.println("8");
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 133, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	
	boolean actJVVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expJVVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	System.err.println("9");
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 134, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	
	boolean actNonJVVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expNonJVVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	System.err.println("10");
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 135, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	
	boolean actDebitNotesVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expDebitNotesVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	System.err.println("11");
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
   {
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 136, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	 }
	
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	
	boolean actCreditNotesVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expCreditNotesVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	Thread.sleep(2000);
	
	System.err.println("12");
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 137, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATGrossChkbox));
	
	
	boolean actSalesInvoiceGrossIsSelected					=settingsWizardVATGrossChkbox.isSelected();
	boolean actSalesInvoiceRDIsSelected						=settingsWizardVATRDChkbox.isSelected();
	boolean actSalesInvoiceAQIsSelected						=settingsWizardVATAQChkbox.isSelected();
	boolean actSalesInvoiceFQIsSelected						=settingsWizardVATFQChkbox.isSelected();
	boolean actSalesInvoiceAvgRateIsSelected				=settingsWizardVATAvgRateChkbox.isSelected();
	boolean actSalesInvoiceAvgRateOIsSelected				=settingsWizardVATAvgRateOChkbox.isSelected();
	boolean actSalesInvoiceVATInclusiveIsSelected			=settingsWizardVATInclusiveChkbox.isSelected();
	
	boolean expSalesInvoiceGrossIsSelected					=true;
	boolean expSalesInvoiceRDIsSelected						=true;
	boolean expSalesInvoiceAQIsSelected						=true;
	boolean expSalesInvoiceFQIsSelected						=true;
	boolean expSalesInvoiceAvgRateIsSelected				=true;
	boolean expSalesInvoiceAvgRateOIsSelected				=true;
	boolean expSalesInvoiceVATInclusiveIsSelected			=true;

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardUpdateBtn));
	settingsWizardUpdateBtn.click();
	
	String expSaveSettingWizardVATmessage = excelReader.getCellData(xlSheetName, 138, 7);
	 
	 String actSaveSettingWizardVATmessage = checkValidationMessage(expSaveSettingWizardVATmessage);
	 
	 excelReader.setCellData(xlfile, xlSheetName, 138, 8, actSaveSettingWizardVATmessage);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVAtCloseBtnINDC));
	settingsWizardVAtCloseBtnINDC.click();
	
	System.out.println("****************************************************checkSettingsWizard****************************************************");
	
	System.out.println("settingsWizardVATVouchersListCount    : " + actVouchersCount                         + "  value expected  " + expVouchersCount);
	System.out.println("SelectedVouchersCount                 : " + actSelectedVouchersCount                 + "  value expected  " + expSelectedVouchersCount);
	System.out.println("VouchersSelected                      : " + actVouchersSelected                      + "  value expected  " + expVouchersSelected);
	System.out.println("PurchasesVoucherVATGross              : " + actPurchasesVoucherVATGross              + "  value expected  " + expPurchasesVoucherVATGross);
	System.out.println("PurchasesVoucherVATRD                 : " + actPurchasesVoucherVATRD                 + "  value expected  " + expPurchasesVoucherVATRD);
	System.out.println("PurchasesVoucherVATAvgRate            : " + actPurchasesVoucherVATAvgRate            + "  value expected  " + expPurchasesVoucherVATAvgRate);
	System.out.println("PurchasesVoucherVATAvgRateO           : " + actPurchasesVoucherVATAvgRateO           + "  value expected  " + expPurchasesVoucherVATAvgRateO);
	System.out.println("PurchasesReturnsVATGross              : " + actPurchasesReturnsVATGross              + "  value expected  " + expPurchasesReturnsVATGross);
	System.out.println("PurchasesReturnsVATRD                 : " + actPurchasesReturnsVATRD                 + "  value expected  " + expPurchasesReturnsVATRD);
	System.out.println("PurchasesReturnsVATAvgRateO           : " + actPurchasesReturnsVATAvgRateO           + "  value expected  " + expPurchasesReturnsVATAvgRateO);
	System.out.println("SalesInvoiceVATGross                  : " + actSalesInvoiceVATGross                  + "  value expected  " + expSalesInvoiceVATGross);
	System.out.println("SalesInvoiceVATRD                     : " + actSalesInvoiceVATRD                     + "  value expected  " + expSalesInvoiceVATRD);
	System.out.println("SalesInvoiceVATAQ                     : " + actSalesInvoiceVATAQ                     + "  value expected  " + expSalesInvoiceVATAQ);
	System.out.println("SalesInvoiceVATFQ                     : " + actSalesInvoiceVATFQ                     + "  value expected  " + expSalesInvoiceVATFQ);
	System.out.println("SalesInvoiceVATAvgRate                : " + actSalesInvoiceVATAvgRate                + "  value expected  " + expSalesInvoiceVATAvgRate);
	System.out.println("SalesInvoiceVATAvgRateO               : " + actSalesInvoiceVATAvgRateO               + "  value expected  " + expSalesInvoiceVATAvgRateO);
	System.out.println("SalesReturnsVATGross                  : " + actSalesReturnsVATGross                  + "  value expected  " + expSalesReturnsVATGross);
	System.out.println("SalesReturnsVATAvgRateO               : " + actSalesReturnsVATAvgRateO               + "  value expected  " + expSalesReturnsVATAvgRateO);
	System.out.println("ReceiptsVATGross                      : " + actReceiptsVATGross                      + "  value expected  " + expReceiptsVATGross);
	System.out.println("PaymentsVATGross                      : " + actPaymentsVATGross                      + "  value expected  " + expPaymentsVATGross);
	System.out.println("PettyCashVATGross                     : " + actPettyCashVATGross                     + "  value expected  " + expPettyCashVATGross);
	System.out.println("JVVATGross                            : " + actJVVATGross                            + "  value expected  " + expJVVATGross);
	System.out.println("NonJVVATGross                         : " + actNonJVVATGross                         + "  value expected  " + expNonJVVATGross);
	System.out.println("DebitNotesVATGross                    : " + actDebitNotesVATGross                    + "  value expected  " + expDebitNotesVATGross);
	System.out.println("CreditNotesVATGross                   : " + actCreditNotesVATGross                   + "  value expected  " + expCreditNotesVATGross);
	System.out.println("SalesInvoiceGrossIsSelected           : " + actSalesInvoiceGrossIsSelected           + "  value expected  " + expSalesInvoiceGrossIsSelected);
	System.out.println("SalesInvoiceRDIsSelected              : " + actSalesInvoiceRDIsSelected              + "  value expected  " + expSalesInvoiceRDIsSelected);
	System.out.println("SalesInvoiceAQIsSelected              : " + actSalesInvoiceAQIsSelected              + "  value expected  " + expSalesInvoiceAQIsSelected);
	System.out.println("SalesInvoiceFQIsSelected              : " + actSalesInvoiceFQIsSelected              + "  value expected  " + expSalesInvoiceFQIsSelected);
	System.out.println("SalesInvoiceAvgRateIsSelected         : " + actSalesInvoiceAvgRateIsSelected         + "  value expected  " + expSalesInvoiceAvgRateIsSelected);
	System.out.println("SalesInvoiceAvgRateOIsSelected        : " + actSalesInvoiceAvgRateOIsSelected        + "  value expected  " + expSalesInvoiceAvgRateOIsSelected);
	System.out.println("SalesInvoiceVATInclusiveIsSelected    : " + actSalesInvoiceVATInclusiveIsSelected    + "  value expected  " + expSalesInvoiceVATInclusiveIsSelected);
	System.out.println("Error Message                         : " + actSaveSettingWizardVATmessage           + "  value expected  " + expSaveSettingWizardVATmessage);
	
	
	boolean displayResult=actVouchersCount==expVouchersCount && actSelectedVouchersCount==expSelectedVouchersCount && actVouchersSelected==expVouchersSelected &&
			 actPurchasesVoucherVATGross==expPurchasesVoucherVATGross && actPurchasesVoucherVATRD==expPurchasesVoucherVATRD && 
			 actPurchasesVoucherVATAvgRate==expPurchasesVoucherVATAvgRate && actPurchasesVoucherVATAvgRateO==expPurchasesVoucherVATAvgRateO &&
			 actPurchasesReturnsVATGross==expPurchasesReturnsVATGross && actPurchasesReturnsVATRD==expPurchasesReturnsVATRD &&
			 actPurchasesReturnsVATAvgRateO==expPurchasesReturnsVATAvgRateO && actSalesInvoiceVATGross==expSalesInvoiceVATGross &&
			 actSalesInvoiceVATRD==expSalesInvoiceVATRD && actSalesInvoiceVATAQ==expSalesInvoiceVATAQ && actSalesInvoiceVATFQ==expSalesInvoiceVATFQ &&
			 actSalesInvoiceVATAvgRate==expSalesInvoiceVATAvgRate && actSalesInvoiceVATAvgRateO==expSalesInvoiceVATAvgRateO && 
			 actSalesReturnsVATGross==expSalesReturnsVATGross && actSalesReturnsVATAvgRateO==expSalesReturnsVATAvgRateO && actReceiptsVATGross==expReceiptsVATGross &&
			 actPaymentsVATGross==expPaymentsVATGross && actPettyCashVATGross==expPettyCashVATGross && actJVVATGross==expJVVATGross && actNonJVVATGross==expNonJVVATGross &&
			 actDebitNotesVATGross==expDebitNotesVATGross && actCreditNotesVATGross==expCreditNotesVATGross && actSalesInvoiceGrossIsSelected==expSalesInvoiceGrossIsSelected &&
			 actSalesInvoiceRDIsSelected==expSalesInvoiceRDIsSelected && actSalesInvoiceAQIsSelected==expSalesInvoiceAQIsSelected && 
			 actSalesInvoiceFQIsSelected==expSalesInvoiceFQIsSelected && actSalesInvoiceAvgRateIsSelected==expSalesInvoiceAvgRateIsSelected && 
			 actSalesInvoiceAvgRateOIsSelected==expSalesInvoiceAvgRateOIsSelected && actSalesInvoiceVATInclusiveIsSelected==expSalesInvoiceVATInclusiveIsSelected ;
	
	
	String actDisplayResult=Boolean.toString(displayResult);
	String expDisplayResult=excelReader.getCellData(xlSheetName, 139, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 139, 8, actDisplayResult);
	
	
	if (actDisplayResult.equalsIgnoreCase(expDisplayResult) && actSaveSettingWizardVATmessage.equalsIgnoreCase(expSaveSettingWizardVATmessage)) 
	{
		
		excelReader.setCellData(xlfile, xlSheetName, 125, 9, resPass);
		return true;
	} 
	else 
	{
		excelReader.setCellData(xlfile, xlSheetName, 125, 9, resFail);
		return false;
	}
 }
 catch (Exception e) 
 {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 125, 10, e.getMessage());
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
 }	
}


//CHECKING TAXCODE PLACE OF SUPPLY AND JURISDICTION MASTERS ON UPDATING ABOVE SETTINGSIN VAT

@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[10]")
public static List<WebElement> nameList;

@FindBy(xpath="//span[contains(text(),'Place of supply')]")
public static WebElement placeOfSupply;

@FindBy(xpath="//span[contains(text(),'Jurisdiction')]")
public static WebElement jurisdiction;

@FindBy(xpath ="//*[@id='LandingGridBody']/tr/td[10]")
public static List<WebElement> masterTaxCodeList;

@FindBy (xpath="//*[@id='1161']/span")
public static WebElement taxCode;

@FindBy(xpath = "//span[@id='btnClose']")
public static WebElement cancelIcon;

@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _8']")
public static WebElement  editScreenbody4thRowFormula;

@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _9']")
public static WebElement  editScreenbody4thRowPreload;

@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _9']")
public static WebElement  editScreenbody5thRowPreload;

@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='editIcon']")
public static WebElement  editScreenbody4thRowEditBtn;

@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='editIcon']")
public static WebElement  editScreenbody5thRowEditBtn;


@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _8']")
public static WebElement  editScreenbody5thRowFormula;


@FindBy(xpath="//td[@id='editScreen_bodyrow_6 _9']")
public static WebElement  editScreenbody6thRowPreload;


public boolean checkPurchaseVoucheVATAfterVatSettingsbySiignOffAndSignIn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
{
  excelReader = new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("******************** checkVATMastersTaxCode Method Executes...OU..........   *****************************");

  try
  {
	
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	userNameDisplay.click();
	  
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	logoutOption.click();
	
	LoginPage lp=new LoginPage(getDriver()); 
	
	String unamelt="su";
			      
	String pawslt="su";
			      
	lp.enterUserName(unamelt);
			
	lp.enterPassword(pawslt);
			  
	lp.clickOnSignInBtn();
	
	//checkRefershPopOnlogin();
			        
	//checkPopUpWindow();
	
    Thread.sleep(8000);

    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
	settingsmenuBtn.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
	ConfigureTransactionBtn.click();
	  
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
	documentCustomization45Btn.click();
	   
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNewTwo)); 
 	purchaseVoucherNewTwo.click();
		
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
 	documentsTab.click();
 	
 	String actmasters1 = masters1.getText();
 	String actmasters2 = masters2.getText();
 	String actmasters3 = masters3.getText();
 	String actmasters4 = masters4.getText();
 	
 	String actposition1 = position1.getText();
 	String actposition2 = position2.getText();
 	String actposition3 = position3.getText();
 	String actposition4 = position4.getText();
 	
 	String actshowDependency2 = showDependency2.getText();
 	
 	String expmasters1 = "Warehouse";
 	String expmasters2 = "Department";
 	String expmasters3 = "Place Of Supply";
 	String expmasters4 = "Jurisdction";
 	
 	String expposition1 = "Body";
 	String expposition2 = "Header";
 	String expposition3 = "Header";
 	String expposition4 = "Header";
 	
 	String expshowDependency2 = "Jurisdction";
 	
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
 	miscellaneousTab.click();
 	
 	Thread.sleep(3000);
 	
 	if(selectAccountInEveryLineChkBox.isSelected()==false)
 	{
 		selectAccountInEveryLineChkBox.click();
 	}
 	
 	if(detailedPostingChkbox.isSelected()==true)
 	{
 		detailedPostingChkbox.click();
 		
 	}
 	
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
 	editScreenTab.click();
 	
 	String acteditScreenbody4thRowFormula; 
 	String acteditScreenbody4thRowPreload; 
 	String acteditScreenbody5thRowPreload;
 	
 	int editScreenbodyCaptionCount = editScreenbodyCaption.size();
	
	System.err.println("editScreenbodyCaption : "+editScreenbodyCaptionCount);
	
	if(editScreenbodyCaptionCount==6)
	{
		acteditScreenbody4thRowFormula = editScreenbody5thRowFormula.getText();
	 	acteditScreenbody4thRowPreload = editScreenbody5thRowPreload.getText();
	 	acteditScreenbody5thRowPreload = editScreenbody6thRowPreload.getText();
	}
	else
	{
		acteditScreenbody4thRowFormula = editScreenbody4thRowFormula.getText();
	 	acteditScreenbody4thRowPreload = editScreenbody4thRowPreload.getText();
	 	acteditScreenbody5thRowPreload = editScreenbody5thRowPreload.getText();
	}
 	
 	String expeditScreenbody4thRowFormula = "(gr) *sb4/100";
 	String expeditScreenbody4thRowPreload = "vatrt*vatdt";
 	String expeditScreenbody5thRowPreload = "&(gr-sbo4)";
 	
 	System.out.println("masters1  : " + actmasters1  +" Value Expected : " + expmasters1);
 	System.out.println("masters2  : " + actmasters2  +" Value Expected : " + expmasters2);
 	System.out.println("masters3  : " + actmasters3  +" Value Expected : " + expmasters3);
 	System.out.println("masters4  : " + actmasters4  +" Value Expected : " + expmasters4);
 	
 	System.out.println("position1  : " + actposition1  +" Value Expected : " + expposition1);
 	System.out.println("position2  : " + actposition2  +" Value Expected : " + expposition2);
 	System.out.println("position3  : " + actposition3  +" Value Expected : " + expposition3);
 	System.out.println("position4  : " + actposition4  +" Value Expected : " + expposition4);
 	
 	System.out.println("showDependency2  : " + actshowDependency2  +" Value Expected : " + expshowDependency2);
 	
 	System.out.println("editScreenbody4thRowFormula : "+acteditScreenbody4thRowFormula +" Value Expected : "+ expeditScreenbody4thRowFormula);
 	System.out.println("editScreenbody4thRowPreload : "+acteditScreenbody4thRowPreload +" Value Expected : "+ expeditScreenbody4thRowPreload);
 	System.out.println("editScreenbody5thRowPreload : "+acteditScreenbody5thRowPreload +" Value Expected : "+ expeditScreenbody5thRowPreload);
 
	
	if (actmasters1.equalsIgnoreCase(expmasters1) && actmasters2.equalsIgnoreCase(expmasters2) && actmasters3.equalsIgnoreCase(expmasters3)
			&& actmasters4.equalsIgnoreCase(expmasters4) && actposition1.equalsIgnoreCase(expposition1) && actposition2.equalsIgnoreCase(expposition2)
			&& actposition3.equalsIgnoreCase(expposition3) && actposition4.equalsIgnoreCase(expposition4) && actshowDependency2.equalsIgnoreCase(expshowDependency2)
			&& acteditScreenbody4thRowFormula.equalsIgnoreCase(expeditScreenbody4thRowFormula) && acteditScreenbody4thRowPreload.equalsIgnoreCase(expeditScreenbody4thRowPreload)
			&& acteditScreenbody5thRowPreload.equalsIgnoreCase(expeditScreenbody5thRowPreload))
	{
		return true;
	}
	else
	{
		int editScreenbodyCaptionCount1 = editScreenbodyCaption.size();
		
		System.err.println("editScreenbodyCaption : "+editScreenbodyCaptionCount);
		
		for(int i=0;i<editScreenbodyCaptionCount1;i++)
		{
			String data = editScreenbodyCaption.get(i).getText();
			
			if(data.equalsIgnoreCase("VAT"))
			{
				editScreenbodyEditBtn.get(i).click();
			}
		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
		editScreenAddBehaviourformulaTxt.click();
		editScreenAddBehaviourformulaTxt.clear();
		editScreenAddBehaviourformulaTxt.sendKeys("(gr) *sb4/100");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourFormulaokBtn));
		editScreenAddBehaviourFormulaokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		editScreenPreloadTxt.click();
		editScreenPreloadTxt.clear();
		editScreenPreloadTxt.sendKeys("vatrt*vatdt");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		String expMessage1		="Data Saved Successfully";
		
		String actMessage1		=checkValidationMessage(expMessage1);
		
		Thread.sleep(2000);
		
		for(int i=0;i<editScreenbodyCaptionCount1;i++)
		{
			String data = editScreenbodyCaption.get(i).getText();
			
			if(data.equalsIgnoreCase("Taxable"))
			{
				editScreenbodyEditBtn.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
		editScreenPreloadTxt.click();
		editScreenPreloadTxt.clear();
		editScreenPreloadTxt.sendKeys("&(gr-sbo4)");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
		editScreenFieldOkBtn.click();
		
		String expMessage2		="Data Saved Successfully";
		
		String actMessage2		=checkValidationMessage(expMessage2);		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		
		String expMessage3		="Data Saved Successfully";
		
		String actMessage3		=checkValidationMessage(expMessage3);
		
		if(actMessage1.equalsIgnoreCase(expMessage1) && actMessage2.equalsIgnoreCase(expMessage2) &&  actMessage3.equalsIgnoreCase(expMessage3))
		{
			System.out.println("Test Pass : Selecting Tags Successfully And Updating");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Not Selecting Tags and Not Updating");
			return false;
		}
	}
 }
  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
}

/*
	public boolean checkSalesInvoiceSettingsofAccountInMiscellaneousTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
			salesInvoiceBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			miscellaneousTab.click();
			
			Thread.sleep(2000);
			
			if(selectAccountInEveryLineChkBox.isSelected()==false)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountInEveryLineChkBox));
				selectAccountInEveryLineChkBox.click();
			}
			
			if(detailedPostingChkbox.isSelected()==true)
			
			{
				detailedPostingChkbox.click();
			}
			
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
				
			String expMessage	="Data Saved Successfully";
			
			String actMessage	=checkValidationMessage(expMessage);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println("Test Pass : Selecting Tags Successfully And Updating");
				excelReader.setCellData(xlfile, "Sheet2", 109, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
				CloseBtnINDC.click();
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Selecting Tags and Not Updating");
				excelReader.setCellData(xlfile, "Sheet2", 109, 9, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
				CloseBtnINDC.click();
				return false;
			}
		}
*/




@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[10]")
public static List<WebElement> departmentNameList;

@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[8]")
public static List<WebElement> departmentindex;


@FindBy(xpath="//input[@id='Jurisdiction']")
public static WebElement jurisdictionTxt;

@FindBy (xpath="/html[1]/body[1]/section[1]/div[2]/aside[1]/section[1]/ul[1]/li[1]/ul[1]/li[3]/ul[1]/li[10]/a[1]/span[1]")
public static WebElement departmentMenu;

@FindBy(xpath="//i[@class='icon-font6 icon-edit']")
public static WebElement masterEditBtn; 

public boolean checkUpdatingJurisdictionForDubaiDepartment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
{
  excelReader = new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("******************** checkVATMastersTaxCode Method Executes.............   *****************************");

  try
  {
	   
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
  	homeMenu.click();
	   
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu)); 
 	mastersMenu.click();
		
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentMenu));
 	departmentMenu.click();
 	
 	int departmentNameListCount = departmentNameList.size();
 	
 	ArrayList<String> departmentNameListArray = new ArrayList<String>();
 	
 	for(int i=0;i<=departmentNameListCount;i++)
 	{
 		
 		String data = departmentNameList.get(i).getText();
 		if(data.equalsIgnoreCase("Dubai"))
 		{
 			departmentindex.get(i).click();
 			break;
 		}
 		
 	}
 	
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
 	masterEditBtn.click();
	
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
 	jurisdictionTxt.click();
 	jurisdictionTxt.sendKeys(Keys.END);
 	jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
 	Thread.sleep(1000);
 	jurisdictionTxt.sendKeys("DUBAI");
 	Thread.sleep(3000);
 	jurisdictionTxt.sendKeys(Keys.TAB);
 	
 	
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 	saveBtn.click();
	 
	 
	 String expMessage="Updated Successfully";
		
	 String actMessage=checkValidationMessage(expMessage);
	 
	 System.out.println(" Error Message    "+actMessage +" Value Expected  :"+expMessage);
	 
	 if(actMessage.equalsIgnoreCase(expMessage))
	 {
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtnINDC));
		 masterCloseBtnINDC.click();
		 	
		 return true;
	 }
	 else
	 {
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtnINDC));
		 masterCloseBtnINDC.click();
		 	
		 return false;
	 }
 }
  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
}


public boolean checkVATMastersTaxCode() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
{
  excelReader = new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("******************** checkVATMastersTaxCode Method Executes.............   *****************************");

  try
  {
	   
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
  	homeMenu.click();
	   
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu)); 
 	mastersMenu.click();
		
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(taxCode));
	taxCode.click();
	
	/*Thread.sleep(2000);
	
	
	ArrayList<String> actmasterTaxCodeList=new ArrayList<String>();
	
	int masterTaxCodeListCount =masterTaxCodeList.size();
	
	System.err.println("masterTaxCodeListCount   :  "+masterTaxCodeListCount);
	
	for (int i = 0; i < masterTaxCodeListCount; i++) 
	{
		String data=masterTaxCodeList.get(i).getText();
		actmasterTaxCodeList.add(data);
	}
	

	String actmasterTaxCode=actmasterTaxCodeList.toString();
	String expmasterTaxCode=excelReader.getCellData(xlSheetName, 141, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 141, 8, actmasterTaxCode);*/
	
	
	
	Thread.sleep(2000);
	
	int actTaxCodeNameListCount					=nameList.size();
	int expTaxCodeNameListCount					=19;
	
	Set<String> expNameList = new HashSet<String>();
	expNameList.add("Std Rate");
	expNameList.add("Zero Rate");
	expNameList.add("Exempted");
	expNameList.add("Intra GCC");
	expNameList.add("Amendments to output tax");
	expNameList.add("Amendments to input tax");
	expNameList.add("NA");
	expNameList.add("Reverse charge");
	expNameList.add("Import VAT");
	expNameList.add("Reverse charge for expenses");
	expNameList.add("Correction or prev Qtr");
	expNameList.add("Tourist Tax");
	expNameList.add("Import Tax");
	expNameList.add("Amendments");
	expNameList.add("Exports");
	expNameList.add("Out of scope - Sales");
	expNameList.add("RCM Sales");
	expNameList.add("Standard Rated Purchase - Recoverable");
	expNameList.add("Standard Rated Purchase - Non-Recoverable");
	
	Set<String> actNameList = new HashSet<String>();
	
	for (int i = 0; i < actTaxCodeNameListCount; i++) 
	{
		String data = nameList.get(i).getText();
		System.err.println("data : "+data);
		actNameList.add(data);
	}
	
	System.out.println("*************************************checkVATMastersTaxCode***************************************");
	
	System.out.println("TaxCodeNameListCount : "+actTaxCodeNameListCount+"  value expected  "+expTaxCodeNameListCount);
	System.out.println(actNameList);
	System.out.println(expNameList);
	
	String actmasterTaxCode=actNameList.toString();
	String expmasterTaxCode=expNameList.toString();
	
	System.out.println("masterTaxCode Actual   : "+ actmasterTaxCode);
	System.out.println("masterTaxCode Expected : "+ expmasterTaxCode);
	
	excelReader.setCellData(xlfile, xlSheetName, 141, 8, actmasterTaxCode);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cancelIcon));
	cancelIcon.click();
	
	if (actmasterTaxCode.equalsIgnoreCase(expmasterTaxCode) && actTaxCodeNameListCount==expTaxCodeNameListCount)
	{
		excelReader.setCellData(xlfile, xlSheetName, 140, 9, resPass);
		return true;
	}
	else
	{
		
		excelReader.setCellData(xlfile, xlSheetName, 140, 9, resFail);
		return false;
	}
 }
  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 140, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
}

//STANDARD RATE

@FindBy (xpath="//*[@id='21']/span")  
public static WebElement calendar;

 @FindBy (xpath="//*[@id='153']/span")
 public static WebElement currentlyOpenReports;

 @FindBy (xpath="//*[@id='22']/span")
 public static WebElement reportDesigner;

 @FindBy (xpath="//*[@id='143']/span")
 public static WebElement batchReportPrinting;

 @FindBy (xpath="//*[@id='23']/span")
 public static WebElement scheduleReport;

 @FindBy (xpath="//*[@id='112']/span")
 public static WebElement renumberVouchers;

 @FindBy (xpath="//*[@id='114']/span")
 public static WebElement repostVouchers;

 @FindBy (xpath="//*[@id='122']/span")
 public static WebElement adjustForeginExchange;

 @FindBy (xpath="//*[@id='128']/span")
 public static WebElement transactionImport;

 @FindBy (xpath="//*[@id='106']/span")
 public static WebElement dataStatistics;
		
 @FindBy (xpath="//*[@id='149']/span")
 public static WebElement ediGeneration;

 @FindBy (xpath="//span[contains(text(),'Standard Rate')]")
 public static WebElement standardRate;

 @FindBy (xpath="//*[@id='250']/span")
 public static WebElement taskManager;

 @FindBy (xpath="//*[@id='647']/span")
 public static WebElement authorizationDetails;

 @FindBy (xpath="//*[@id='37']/span")
 public static WebElement autoAdjust;

 @FindBy (xpath="//*[@id='259']/span")
 public static WebElement regroup;

 @FindBy (xpath="//*[@id='3316']/span")
 public static WebElement manualAdjustment;

 @FindBy (xpath="//*[@id='3319']/span")
 public static WebElement releaseReveration;

 @FindBy (xpath="//*[@id='3323']/span")
 public static WebElement authorizationAuditReport;

 @FindBy (xpath="//*[@id='3326']/span")
 public static WebElement integrations;

 @FindBy (xpath="//*[@id='LandingGridBody']/tr/td[10]")
 public static List<WebElement> placeOfSupplyList;
 

 
 public static boolean checkVATMastersPlaceOfSupply() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	
	try
	{
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	 	homeMenu.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
	 	mastersMenu.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOfSupply));
	 	placeOfSupply.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	int actPlaceOfSupplyNameListCount					=nameList.size();
	 	int expPlaceOfSupplyNameListCount					=6;
	 	
	 	
	 	ArrayList<String> actplaceOfSupplyList=new ArrayList<String>();
		
		int placeOfSupplyListCount =placeOfSupplyList.size();
		
		System.err.println("placeOfSupplyListCount   :  "+placeOfSupplyListCount);
		
		for (int i = 0; i < placeOfSupplyListCount; i++) 
		{
			String data=placeOfSupplyList.get(i).getText();
			actplaceOfSupplyList.add(data);
		}
		

		String actplaceOfSupply=actplaceOfSupplyList.toString();
		String expplaceOfSupply=excelReader.getCellData(xlSheetName, 143, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 143, 8, actplaceOfSupply);
	 	
	 	
	 	
	 /*	
	 	Set<String> expNameList = new HashSet<String>();
	 	expNameList.add("UAE");
	 	expNameList.add("GCC Group");
	 	expNameList.add("Others");
	 	expNameList.add("GCC");
	 	expNameList.add("Freezone");
	 	expNameList.add("Inter company");
	 	
	 	Set<String> actNameList = new HashSet<String>();
	 	
	 	for (int i = 0; i < actPlaceOfSupplyNameListCount; i++) 
	 	{
	 		String data = nameList.get(i).getText();
	 		
	 		actNameList.add(data);
		}
	 	
	 	System.out.println("*************************************checkVATMastersPlaceOfSupply***************************************");
	 	
	 	System.out.println("PlaceOfSupplyNameListCount : "+actPlaceOfSupplyNameListCount+"  value expected  "+expPlaceOfSupplyNameListCount);
	 	System.out.println(actNameList);
	 	System.out.println(expNameList);*/
	 	
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cancelIcon));
	 	cancelIcon.click();
	 	
	 	if (actPlaceOfSupplyNameListCount==expPlaceOfSupplyNameListCount &&  actplaceOfSupply.equalsIgnoreCase(expplaceOfSupply))
	 	{
	 		
	 		excelReader.setCellData(xlfile, xlSheetName, 142, 9, resPass);
	 		return true;
	 	}
	 	else
	 	{
	 		excelReader.setCellData(xlfile, xlSheetName, 142, 9, resFail);
	 		return false;
	 	}
	  }
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 142, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	 }	

 
/* @FindBy (xpath="//*[@id='LandingGridBody']/tr/td[10]")
 public static List<WebElement> jurisdictionList;*/

 
 public static boolean checkVATMastersJurisdiction() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 
	try
	{
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	 	homeMenu.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
	 	mastersMenu.click();
	 	
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdiction));
	 	jurisdiction.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	int actJurisdictionNameListCount					=nameList.size();
	 	int expJurisdictionNameListCount					=6;
	 	
       ArrayList<String> actplaceOfSupplyList=new ArrayList<String>();
		
		int placeOfSupplyListCount =placeOfSupplyList.size();
		
		System.err.println("placeOfSupplyListCount   :  "+placeOfSupplyListCount);
		
		for (int i = 0; i < placeOfSupplyListCount; i++) 
		{
			String data=placeOfSupplyList.get(i).getText();
			actplaceOfSupplyList.add(data);
		}
		

		String actplaceOfSupply=actplaceOfSupplyList.toString();
		String expplaceOfSupply=excelReader.getCellData(xlSheetName, 145, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 145, 8, actplaceOfSupply);
	 	
	 	/*
	 	Set<String> expNameList = new HashSet<String>();
	 	expNameList.add("UAE");
	 	expNameList.add("GCC Group");
	 	expNameList.add("Others");
	 	expNameList.add("GCC");
	 	expNameList.add("Freezone");
	 	expNameList.add("Inter company");
	 	
	 	Set<String> actNameList = new HashSet<String>();
	 	
	 	for (int i = 0; i < actJurisdictionNameListCount; i++) 
	 	{
	 		String data = nameList.get(i).getText();
	 		
	 		actNameList.add(data);
		}
	 	
	 	System.out.println("*************************************checkVatMastersJurisdiction***************************************");
	 	
	 	System.out.println("PlaceOfSupplyNameListCount : "+actJurisdictionNameListCount+"  value expected  "+expJurisdictionNameListCount);
	 	System.out.println(actNameList);
	 	System.out.println(expNameList);*/
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cancelIcon));
	 	cancelIcon.click();
	 	
	 	if (actJurisdictionNameListCount==expJurisdictionNameListCount && 
	 			actplaceOfSupply.equalsIgnoreCase(expplaceOfSupply))
	 	{
	 		excelReader.setCellData(xlfile, xlSheetName, 144, 9, resPass);
	 		return true;
	 	}
	 	else
	 	{
	 		
	 		excelReader.setCellData(xlfile, xlSheetName, 144, 9, resFail);
	 		return false;
	 	}
	 	
	  }
	   catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 144, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	 	
	 }	
 
 
	
	
	////////////////////////////////////////
	
	/*@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
	public static WebElement  editScreenFooter1stRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
	public static WebElement  editScreenFooter2ndRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _3']")
	public static WebElement  editScreentbody1stRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _3']")
	public static WebElement  editScreenbody2ndRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _3']")
	public static WebElement  editScreenbody3rdRowCaption;*/
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _3']")
	public static WebElement  editScreenbody4thRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _3']")
	public static WebElement  editScreenbody5thRowCaption;
	
	///////////////////////////////////////////////////////
	
	
	@FindBy(xpath="//a[@id='257']")
	public static WebElement  openingStocksNew;
	
	@FindBy(xpath="//a[@id='769']")
	public static WebElement  purchaseVoucherNew;
	
	@FindBy(xpath="//a[@id='5634']")
	public static WebElement  autoSalesOrders;
	
	@FindBy(xpath="//a[@id='3332']")
	public static WebElement  autoSalesInvoice;
	
	@FindBy(xpath="//a[@id='3333']")
	public static WebElement  salesInvoiceN;
	
	@FindBy(xpath="//a[@id='3073']")
	public static WebElement  stockTransferNew;
	
	@FindBy(xpath="//a[@id='770']")
	public static WebElement  purchaseVoucherNewTwo;
	
	

	
///////////////////////////////////////////////////	

//Documents Tab


	
	@FindBy(xpath="//li[@id='navigationtab1']")
	public static WebElement  documentsTabForMaterialReceiptNotes;
	

	@FindBy(xpath="//i[@class='icon-load-from icon-font7']")
	public static WebElement  loadMastersBtn;
	
				@FindBy(xpath="//select[@id='doc_voucherDropDown']")
				public static WebElement  loadmasterDropDown;
				
				@FindBy(xpath="//button[@id='btnSelectDependMaster']")
				public static WebElement  selectAllBtn;
				
				@FindBy(xpath="//button[contains(text(),'Reset')]")
				public static WebElement  resetBtn;
				
				@FindBy(xpath="//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
				public static WebElement  okBtn;
	
	@FindBy(xpath="//*[@id='editScreen_CustomizeButtons']/span[1]")
	public static WebElement  deleteTagBtn;
	
	@FindBy(xpath="//i[@class='icon-add-group icon-font7']")
	public static WebElement  addGroupBtn;
	
				@FindBy(xpath="//input[@id='doc_GroupName']")
				public static WebElement  groupNameTXt;
				
				@FindBy(xpath="//button[contains(text(),'Add')]")
				public static WebElement  addBtn;
				
				@FindBy(xpath="//div[@class='col-xs-12 form-group']//button[@id='btnCancel']")
				public static WebElement  cancelBtn;

	@FindBy(xpath="//div[@id='voucherTabContent']//span[2]")
	public static WebElement  deletegroupBtn;
	
	//@FindBy(xpath="//input[@id='doc_title']")
	//public static WebElement  titleTxt;
	
	
	
	@FindBy(xpath="//input[@id='txtbox_doc_Accountdepandency']")
	public static WebElement  accountDependencyTxt;
	
				@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentGainAC')]")
				public static WebElement  iExchangeAdjustmentGainACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentLossAC')]")
				public static WebElement  iExchangeAdjustmentLossACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPrimaryAccount')]")
				public static WebElement  iPrimaryAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCity')]")
				public static WebElement  iCityChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDeliveryCity')]")
				public static WebElement  iDeliverycityChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iBankAc')]")
				public static WebElement  iBankACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPDCDiscountedAC')]")
				public static WebElement  iPDCDiscountedACChkBox;
				
	@FindBy(xpath="//input[@id='txtbox_doc_Productdepandency']")
	public static WebElement  itemDependencyTxt;
	
				@FindBy(xpath="//span[contains(text(),'Outlet__')]")
				public static WebElement  outletChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofShortageStockAC')]")
				public static WebElement  iCostofShortageStockACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofExcessStockAC')]")
				public static WebElement  iCostofExcessStockACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofSaleReturnAC')]")
				public static WebElement  iCostofSaleReturnACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPurchaseVarianceAC')]")
				public static WebElement  iPurchaseVarianceACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultBaseUnit')]")
				public static WebElement  iDefaultBaseUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultSalesUnit')]")
				public static WebElement  iDefaultSalesUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultPurchaseUnit')]")
				public static WebElement  iDefaultPurchaseUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostOfIssueAccount')]")
				public static WebElement  iCostOfIssueAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iStocksAccount')]")
				public static WebElement  iStocksAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iSalesAccount')]")
				public static WebElement  iSalesAccountChkBox;
				
				@FindBy(xpath="//li[12]//div[1]//label[1]//span[1]")
				public static WebElement  otherdetails1Box;
				
				@FindBy(xpath="//li[13]//div[1]//label[1]//span[1]")
				public static WebElement  replenishment1ChkBox;
				
				@FindBy(xpath="//span[contains(text(),'Reorder__')]")
				public static WebElement  reorderChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCategory')]")
				public static WebElement  iCategoryChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iWIPAccount')]")
				public static WebElement  iWIPAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'Classification__')]")
				public static WebElement  classificationChkBox;
				
				@FindBy(xpath="//li[18]//div[1]//label[1]//span[1]")
				public static WebElement  repelenishment2ChkBox;
				
				@FindBy(xpath="//li[19]//div[1]//label[1]//span[1]")
				public static WebElement  otherDetails2ChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iBin')]")
				public static WebElement  iBinChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iAlternateCategory')]")
				public static WebElement  iAlternateCategoryChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iTaxCode')]")
				public static WebElement  iTaxCodeChkBox;
	
	@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
	public static WebElement  accountfilterDropdown;
	
	@FindBy(xpath="//select[@id='doc_Itemdepandency_Filter']")
	public static WebElement  itemfilterDropdown;
	
	
	// Documents Grid Elements
	
		// first row 
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-0']")
	public static WebElement  firstrow;
	
	@FindBy(xpath="//div[contains(text(),'Delete Row')]")
	public static WebElement  deleterowBtn;
	
	@FindBy(xpath="//div[contains(text(),'Insert Row')]")
	public static WebElement  insertRowBtn;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
	public static WebElement  masters1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
	public static WebElement  position1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-3']")
	public static WebElement  showDependency1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-4']")
	public static WebElement  group1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-5']")
	public static WebElement  filter1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-6']")
	public static WebElement  mandatory1;
	
	
	// Second Row... delete and insert row are same
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-0']")
	public static WebElement  secondRow;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
	public static WebElement  masters2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
	public static WebElement  position2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-3']")
	public static WebElement  showDependency2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-4']")
	public static WebElement  group2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-5']")
	public static WebElement  filter2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-6']")
	public static WebElement  mandatory2;
	
	
	// Third Row... delete and insert row are same
	
		@FindBy(xpath="//td[@id='doc_TagsTable_col_3-0']")
		public static WebElement  thirdRow;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_3-1']")
		public static WebElement  masters3;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_3-2']")
		public static WebElement  position3;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_3-3']")
		public static WebElement  showDependency3;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_3-4']")
		public static WebElement  group3;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_3-5']")
		public static WebElement  filter3;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_3-6']")
		public static WebElement  mandatory3;
		
		
		// Forth Row... delete and insert row are same
		
			@FindBy(xpath="//td[@id='doc_TagsTable_col_4-0']")
			public static WebElement  forthRow;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_4-1']")
			public static WebElement  masters4;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_4-2']")
			public static WebElement  position4;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_4-3']")
			public static WebElement  showDependency4;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_4-4']")
			public static WebElement  group4;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_4-5']")
			public static WebElement  filter4;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_4-6']")
			public static WebElement  mandatory4;
	
	
	
	// After clicking *** Properties Changes which are same for all rows
	
	@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
	public static WebElement  masterDropDown;
	
	@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
	public static WebElement  positionDropdown;
	
	@FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
	public static WebElement  showDependencyDropdown;
	
	@FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
	public static WebElement  groupTxt;
	
	@FindBy(xpath="//select[@id='docFilter']")
	public static WebElement  filterDropdown;
	
	@FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
	public static WebElement  mandatoryDropDown;
	
	// Grid Elements completed
	
	// Right Panel 
	
	// Home ***************************
	
	@FindBy(xpath="//*[@id='id_menu_tree_1']/a/i")
	public static WebElement  homeExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_2']/a/i")
				public static WebElement  companyExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_3']/a/i")
							public static WebElement  newComapanyBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_131']/a/i")
							public static WebElement  yearEndProcesBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_125']/a/i")
							public static WebElement  interComapnyTransactionBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_134']/a/i")
							public static WebElement  synchronizationBtn;
							
				@FindBy(xpath="//*[@id='id_menu_tree_6']/a/i")
				public static WebElement  securityBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_1000']/a/i")
				public static WebElement  mastersExpandBtn;
			
							@FindBy(xpath="//*[@id='id_menu_tree_220']/a/i")
							public static WebElement  currencyBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_221']/a/i")
							public static WebElement  itemBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_8002']/a/i")
							public static WebElement  schemesExpandBtn;
							
										@FindBy(xpath="//*[@id='id_menu_tree_8015']/a/i")
										public static WebElement  discountDefinitionBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_224']/a/i")
							public static WebElement  mrpBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_225']/a/i")
							public static WebElement  qcBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_234']/a/i")
							public static WebElement  warehouseManagementSystemBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_251']/a/i")
							public static WebElement  maintainceBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8001']/a/i")
							public static WebElement  pointofSaleExpandBtn;
							
										@FindBy(xpath="//*[@id='id_menu_tree_8005']/a/i")
										public static WebElement  memberBtn;
										
										@FindBy(xpath="//*[@id='id_menu_tree_8006']/a/i")
										public static WebElement  giftVoucherBtn;
										
										@FindBy(xpath="//*[@id='id_menu_tree_1025']/a/i")
										public static WebElement  pointOfSaleTableManagementBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_1103']/a/i")
							public static WebElement  payrollBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_1056']/a/i")
							public static WebElement  tdsAnnexureBtn;
							
				@FindBy(xpath="//*[@id='id_menu_tree_16']/a/i")
				public static WebElement  settingsExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_66']/a/i")
							public static WebElement  authorizationBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_25']/a/i")
				public static WebElement  datamanagementBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_20']/a/i")
				public static WebElement  utilitiesBtn;
	
				
	// Finance *************************			
				
	@FindBy(xpath="//*[@id='id_menu_tree_60']/a/i")
	public static WebElement  financeExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_61']/a/i")
				public static WebElement  financeTransactionExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_2001']/a/i")
							public static WebElement  cashBankBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_2007']/a/i")
							public static WebElement  financePurchasesBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_2014']/a/i")
							public static WebElement  financeSalesBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_2023']/a/i")
							public static WebElement  journalsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_2039']/a/i")
							public static WebElement  manufacturingBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_219']/a/i")
							public static WebElement  autoPostingsBtn;
							
				@FindBy(xpath="//*[@id='id_menu_tree_62']/a/i")
				public static WebElement  creditManagementExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_217']/a/i")
							public static WebElement  delinquencyBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_81']/a/i")
				public static WebElement  financeReportsExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_82']/a/i")
							public static WebElement  cashAndBankBookBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_502']/a/i")
							public static WebElement  salesReportBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_506']/a/i")
							public static WebElement  purchaseReportBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_207']/a/i")
							public static WebElement  vatBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_514']/a/i")
							public static WebElement  registersBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_523']/a/i")
							public static WebElement  salesAndPurchaseAnalysisBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_568']/a/i")
							public static WebElement  miscellaneousAnalysisBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_536']/a/i")
							public static WebElement  masterInformationBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_520']/a/i")
							public static WebElement  financeReportsAuditTrialBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_50001']/a/i")
				public static WebElement  fixedAssetBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_530']/a/i")
				public static WebElement  finalAccountsBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_558']/a/i")
				public static WebElement  receiveableAndPayableAnalysisExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_605']/a/i")
							public static WebElement  customerDetailBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_607']/a/i")
							public static WebElement  customerSummaryBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_606']/a/i")
							public static WebElement  vendorDetailBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_608']/a/i")
							public static WebElement  vendorSummaryBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_3301']/a/i")
				public static WebElement  budgetExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_3304']/a/i")
							public static WebElement  reviseBudgetBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_3321']/a/i")
							public static WebElement  budgetReportsBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_3311']/a/i")
				public static WebElement  onlinepaymentsBtn;
				
//Inventory   *************************
				
	@FindBy(xpath="//*[@id='id_menu_tree_135']/a/i")
	public static WebElement  inventoryExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_137']/a/i")
				public static WebElement  inventoryTransactionExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_139']/a/i")
							public static WebElement  inventoryPurchasesBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_140']/a/i")
							public static WebElement  inventorySalesBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_2033']/a/i")
							public static WebElement  stocksBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_200']/a/i")
				public static WebElement  inventoryReportsExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_540']/a/i")
							public static WebElement  binsReportBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_621']/a/i")
							public static WebElement  stockAgeingAnalysisBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_550']/a/i")
				public static WebElement  ordermanagementExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_600']/a/i")
							public static WebElement  analysisOfLinkedUnlinkedDocumentsBtn;
							
//Fixed Asset************************							
	
	@FindBy(xpath="//*[@id='id_menu_tree_136']/a/i")
	public static WebElement  fixedAssetExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_138']/a/i")
				public static WebElement  fixedAssetTransactionExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_50010']/a/i")
							public static WebElement  fixedAssetReportsBtn;
							
//Production ***********************							
	
	@FindBy(xpath="//*[@id='id_menu_tree_3000']/a/i")
	public static WebElement  productionExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_3001']/a/i")
				public static WebElement  productionTransactionBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_625']/a/i")
				public static WebElement  productionReportBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_3006']/a/i")
				public static WebElement  mrpSettingsBtn;
				
//Point Of Sale ***********************************				
	
	@FindBy(xpath="//*[@id='id_menu_tree_8000']/a/i")
	public static WebElement  pointofSale_ExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_8004']/a/i")
				public static WebElement  mainScreenBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_8500']/a/i")
				public static WebElement  posReportsExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_8501']/a/i")
							public static WebElement  retailSaleReportBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8507']/a/i")
							public static WebElement  summarysalesReportBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8513']/a/i")
							public static WebElement  preOrderReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8523']/a/i")
							public static WebElement  memberReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8530']/a/i")
							public static WebElement  memberPointsReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8535']/a/i")
							public static WebElement  itemReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8540']/a/i")
							public static WebElement  cashReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8545']/a/i")
							public static WebElement  stockReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8550']/a/i")
							public static WebElement  periodicSalesReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8556']/a/i")
							public static WebElement  lastYearComaprisionReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8562']/a/i")
							public static WebElement  miscellaneousReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8571']/a/i")
							public static WebElement  restaurantReportsBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_8900']/a/i")
				public static WebElement  reportsTableManagementBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_8003']/a/i")
				public static WebElement  utilitiesExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_8027']/a/i")
							public static WebElement  bbqConversionBtn;
	
	
//Quality Control *****************  	
	
	
	
	@FindBy(xpath="//*[@id='id_menu_tree_150']/a/i")
	public static WebElement  qualityControlExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_151']/a/i")
				public static WebElement  qualityControlTransactionBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_152']/a/i")
				public static WebElement  qualityControlReportsBtn;


    
 // Views Tab
	
    
	@FindBy(xpath="//span[@class='icon-views'")
	public static WebElement  viewsTab;
	

	
// Export Fields 
	
	@FindBy(xpath="//span[contains(text(),'Export Fields')]")
	public static WebElement exportFieldsTab;
	
// Triggers
	
	@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
	public static WebElement  triggersTab;	
	
//  Document Numbering
	
	@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
	public static WebElement  documentNumberingTab;
	
// Hire Purchase	
	
	@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
	public static WebElement hirePurchasetab;
	

	
// Reports Tab	
	
	@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
	public static WebElement  reportsTab;	
	
// Schemes

	@FindBy(xpath="//span[contains(text(),'Schemes')]")
	public static WebElement schemestab;	
		
    
    
	
	
////////////////////////////////////////////////////////////////////////////////
	
	
	//-*-------------------------------------------------------------------------------------------------------------	
		
	// Miscellaneous Tab
					
	
		
		@FindBy(xpath="//input[@id='misc_Abbrivation']")
		public static WebElement  abbreviationTxt;
		
		@FindBy(xpath="//input[@id='misc_defaultAcc']")
		public static WebElement  defaultAccount1Txt;
		
		@FindBy(xpath="//*[@id='misc_defaultAcc_input_image']/span")
		public static WebElement  defaultAccount1Dropdown;
		
		@FindBy(xpath="//*[@id='misc_defaultAcc_input_settings']/span")
		public static WebElement  defaultAccount1SettingBtn;
		
		@FindBy(xpath="//div[@id='misc_defaultAcc_customize_popup_container']")
		public static WebElement  defaultAccount1ContainerTxt;
		
		@FindBy(xpath="//div[@id='misc_defaultAcc_customize_popup_footer']//input[1]")
		public static WebElement  defaultAccount1StandardfieldsBtn;
		
					@FindBy(xpath="//select[@id='misc_defaultAcc_customize_popup_standardfields_list']")
					public static WebElement  defaultAccount1FieldsDropdown;
					
					@FindBy(xpath="//input[@id='misc_defaultAcc_customize_popup_standardfields_header']")
					public static WebElement  defaultAccount1HeaderTxt;
					
					@FindBy(xpath="//select[@id='misc_defaultAcc_customize_popup_standardfields_alignment']")
					public static WebElement  defaultAccount1AllignmentDropdown;
					
					@FindBy(xpath="//input[@id='misc_defaultAcc_customize_popup_standardfields_width']")
					public static WebElement  defaultAccount1WidthTxt;
					
					@FindBy(xpath="//section[@id='page_Content']//input[3]")
					public static WebElement  defaultAccount1StandardFieldsokBtn;
					
					@FindBy(xpath="//section[@id='page_Content']//input[4]")
					public static WebElement  defaultAccount1StanadardFieldscancelBtn;
		
		@FindBy(xpath="//div[@id='misc_defaultAcc_search_container']//input[2]")
		public static WebElement  defaultAccount1DeleteColumnBtn;
		
		@FindBy(xpath="//section[@id='page_Content']//input[3]")
		public static WebElement  defaultAccount1okBtn;
		
		@FindBy(xpath="//section[@id='page_Content']//input[4]")
		public static WebElement  defaultAccount1cancelBtn;
		
		@FindBy(xpath="//input[@id='misc_defaultAcc2']")
		public static WebElement  defaultAccount2Txt;

		@FindBy(xpath="//*[@id='misc_defaultAcc2_input_image']/span")
		public static WebElement  defaultAccount2Dropdown;
		
		@FindBy(xpath="//*[@id='misc_defaultAcc2_input_settings']/span")
		public static WebElement  defaultAccount2SettingBtn;
		
		@FindBy(xpath="//div[@id='misc_defaultAcc2_customize_popup_container']")
		public static WebElement  defaultAccount2ContainerTxt;
		
		@FindBy(xpath="//div[@id='misc_defaultAcc2_customize_popup_footer']//input[1]")
		public static WebElement  defaultAccount2StandardfieldsBtn;
		
					@FindBy(xpath="//select[@id='misc_defaultAcc2_customize_popup_standardfields_list']")
					public static WebElement  defaultAccount2FieldsDropdown;
					
					@FindBy(xpath="//input[@id='misc_defaultAcc2_customize_popup_standardfields_header']")
					public static WebElement  defaultAccount2HeaderTxt;
					
					@FindBy(xpath="//select[@id='misc_defaultAcc2_customize_popup_standardfields_alignment']")
					public static WebElement  defaultAccount2AllignmentDropdown;
					
					@FindBy(xpath="//input[@id='misc_defaultAcc2_customize_popup_standardfields_width']")
					public static WebElement  defaultAccount2WidthTxt;
					
					@FindBy(xpath="//section[@id='page_Content']//input[3]")
					public static WebElement  defaultAccount2StandardFieldsokBtn;
					
					@FindBy(xpath="//section[@id='page_Content']//input[4]")
					public static WebElement  defaultAccount2StanadardFieldscancelBtn;
		
		@FindBy(xpath="//div[@id='misc_defaultAcc2_search_container']//input[2]")
		public static WebElement  defaultAccount2DeleteColumnBtn;
		
		@FindBy(xpath="//section[@id='page_Content']//input[3]")
		public static WebElement  defaultAccount2okBtn;
		
		@FindBy(xpath="//section[@id='page_Content']//input[4]")
		public static WebElement  defaultAccount2cancelBtn;
		
		@FindBy(xpath="//input[@id='misc_chkallowDeptAppropriation']")
		public static WebElement  allowDeptAppropriationChkBox;
		
		@FindBy(xpath="//input[@id='misc_restrictionentryCondition_textbox']")
		public static WebElement  entryRestrictConditionTxt;
		
					@FindBy(xpath="//input[@id='misc_restrictionentryCondition_formulaText']")
					public static WebElement  miscformulaTxt;
					
					@FindBy(xpath="//div[@id='misc_restrictionentryCondition_expandedFormula']")
					public static WebElement  miscexpandeFormula;
					
					 // Grid Elements 
					
					@FindBy(xpath="//span[@class='icon-collepse icon-font8']")
					public static WebElement  miscTransactionExpandBtn;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_2-2']")
					public static WebElement  miscQuantity;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_2-3']")
					public static WebElement  miscqty;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_3-2']")
					public static WebElement  miscRate;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_3-3']")
					public static WebElement  miscrt;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_4-2']")
					public static WebElement  miscAlternateQty;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_4-3']")
					public static WebElement  miscqtya;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_5-2']")
					public static WebElement  miscGrossAmount;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_5-3']")
					public static WebElement  miscgr;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_6-2']")
					public static WebElement  miscStockValue;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_6-3']")
					public static WebElement  miscstkv;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_7-2']")
					public static WebElement  miscAccount;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_7-3']")
					public static WebElement  miscacc;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_8-2']")
					public static WebElement  miscAccount2;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_8-3']")
					public static WebElement  miscacc2;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_9-2']")
					public static WebElement  miscExchangeRate;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_9-3']")
					public static WebElement  miscexrt;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_10-2']")
					public static WebElement  miscQtyinBaseUnit;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_10-3']")
					public static WebElement  miscqtyb;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_11-2']")
					public static WebElement  miscCurrency;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_11-3']")
					public static WebElement  misccrn;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_12-2']")
					public static WebElement  miscValueOfThetagMasterIDofTheTag;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_12-3']")
					public static WebElement  misctgval;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_13-2']")
					public static WebElement  miscNetAmount;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_13-3']")
					public static WebElement  miscnet;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_14-2']")
					public static WebElement  miscNetAmountInOriginalCurrency;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_14-3']")
					public static WebElement  miscneto;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_15-2']")
					public static WebElement  miscTotalQuantity;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_15-3']")
					public static WebElement  misctqty;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_16-2']")
					public static WebElement  miscTotalGross;
					
					@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_16-3']")
					public static WebElement  misctgr;
					
					// grid completed
					
					
					@FindBy(xpath="//input[@id='misc_restrictionentryCondition_availableVariables']")
					public static WebElement  searchTxt;
					
					@FindBy(xpath="//button[@id='misc_restrictionentryCondition_PlusOpt']")
					public static WebElement  plusBtn;
					
					@FindBy(xpath="//button[contains(text(),'-')]")
					public static WebElement  minusBtn;
					
					@FindBy(xpath="//button[contains(text(),'/')]")
					public static WebElement  divideBtn;
					
					@FindBy(xpath="//button[contains(text(),'*')]")
					public static WebElement  multiplyBtn;
			
					@FindBy(xpath="//button[5]")
					public static WebElement  brackets1Btn;
					
					@FindBy(xpath="//button[6]")
					public static WebElement  brackets2Btn;
					
					@FindBy(xpath="//button[contains(text(),'~')]")
					public static WebElement  tildeBtn;
					
					@FindBy(xpath="//button[contains(text(),'&')]")
					public static WebElement  andBtn;
					
					@FindBy(xpath="//button[contains(text(),'%')]")
					public static WebElement  percentBtn;
					
					@FindBy(xpath="//button[contains(text(),']')]")
					public static WebElement  squarebracketBtn;
					
					@FindBy(xpath="//button[contains(text(),'|')]")
					public static WebElement  verticalBarBtn;
					
					@FindBy(xpath="//button[contains(text(),'\')]")
					public static WebElement  backSlashBtn;
					
					@FindBy(xpath="//button[contains(text(),'<')]")
					public static WebElement  lessThanbtn;
					
					@FindBy(xpath="//button[contains(text(),'>')]")
					public static WebElement  greaterThanBtn;
					
					@FindBy(xpath="//button[contains(text(),'!')]")
					public static WebElement  exclamationBtn;
					
					@FindBy(xpath="//button[contains(text(),'=')]")
					public static WebElement  equalBtn;
					
					@FindBy(xpath="//button[contains(text(),'?:')]")
					public static WebElement  questionBtn;
				
					@FindBy(xpath="//button[contains(text(),'^')]")
					public static WebElement  caretBtn;
					
					@FindBy(xpath="//button[contains(text(),'DateDiff()')]")
					public static WebElement  dateDiffBtn;
					
					@FindBy(xpath="//button[contains(text(),'Cond()')]")
					public static WebElement  condBtn;
					
					@FindBy(xpath="//button[contains(text(),'Min()')]")
					public static WebElement  minBtn;
					
					@FindBy(xpath="//button[contains(text(),'Max()')]")
					public static WebElement  maxBtn;
					
					@FindBy(xpath="//button[@id='misc_restrictionentryCondition_Ok']")
					public static WebElement  entryRestrictConditionokBtn;
					
					@FindBy(xpath="//button[@id='misc_restrictionentryCondition_Cancel']")
					public static WebElement  entryRestrictConditioncancelBtn;
					
		@FindBy(xpath="//input[@id='misc_restrictionEntryMessage']")
		public static WebElement  entryRestrictMessageTxt;
		
	
		

		
	

//**----------------------------------------------------------------------------------------------------------    
// Edit Screen Tab     
	
		@FindBy(xpath="//a[contains(text(),'Field Details')]")
		public static WebElement editScreenFieldDetailsTab;
   
	
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Columnwidth']")
		public static WebElement editScreenColumnWidthTxt;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
		public static WebElement editScreenValueInBaseCurrencyChkBox;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
		public static WebElement editScreenHideFromSummaryChkBox;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkPostToAcc']")
		public static WebElement editScreenPostToAccountChkBox;  
	 
		@FindBy(xpath="//input[@id='acc1-1']")
		public static WebElement editScreenAccount1Radio;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1']")
		public static WebElement editScreenAccount1Txt;  
	   
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_image']/span")
		public static WebElement editScreenAccount1ExpandBtn;  
	   
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_settings']/span")
		public static WebElement editScreenAccount1SettingsBtn;  
	   
				    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_container']")
					public static WebElement editScreenAccount1Container;  
				    
				    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_footer']//input[1]")
					public static WebElement editScreenAccount1StandardFiledsBtn;  
				    
							    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_list']")
								public static WebElement editScreenAccount1StandardFiledsDropdown;  
							    
							    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_header']")
								public static WebElement editScreenAccount1StandardFiledsHeaderTxt;  
							    
							    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_alignment']")
								public static WebElement editScreenAccount1StandardFiledsAllignmentDropdown; 
							    
							    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_width']")
								public static WebElement editScreenAccount1StandardFiledsWidthTxt;  
							    
							    @FindBy(xpath="//section[@id='page_Content']//input[3]")
								public static WebElement editScreenAccount1StandardFiledsokBtn;  
							    
							    @FindBy(xpath="//section[@id='page_Content']//input[4]")
								public static WebElement editScreenAccount1StandardFiledscancelBtn;  
				    
				    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_search_container']//input[2]")
					public static WebElement editScreenAccount1deleteColumnBtn;
				    
				    @FindBy(xpath="//section[@id='page_Content']//input[3]")
				   	public static WebElement editScreenAccount1okBtn;  
				       
				       @FindBy(xpath="//section[@id='page_Content']//input[4]")
				   	public static WebElement editScreenAccount1cancelBtn;
	
	
        @FindBy(xpath="//input[@id='chkPostToAccountAllowEntry']")
		public static WebElement editScreenAccount1AllowEntryChkBox;
        
		@FindBy(xpath="//input[@id='acc2-2']")
		public static WebElement editScreenAccount2Radio;  
		    
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2']")
		public static WebElement editScreenAccount2Txt;  
		    
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_image']/span")
		public static WebElement editScreenAccount2ExpandBtn;
	  
	   @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_settings']/span")
	  	public static WebElement editScreenAccount2SettingsBtn;  
	      
	  			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_container']")
	  				public static WebElement editScreenAccount2Container;  
	  			    
	  			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_footer']//input[1]")
	  				public static WebElement editScreenAccount2StandardFiledsBtn;  
	  			    
	  						    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_list']")
	  							public static WebElement editScreenAccount2StandardFiledsDropdown;  
	  						    
	  						    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_header']")
	  							public static WebElement editScreenAccount2StandardFiledsHeaderTxt;  
	  						    
	  						    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_alignment']")
	  							public static WebElement editScreenAccount2StandardFiledsAllignmentDropdown; 
	  						    
	  						    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_width']")
	  							public static WebElement editScreenAccount2StandardFiledsWidthTxt;  
	  						    
	  						    @FindBy(xpath="//section[@id='page_Content']//input[3]")
	  							public static WebElement editScreenAccount2StandardFiledsokBtn;  
	  						    
	  						    @FindBy(xpath="//section[@id='page_Content']//input[4]")
	  							public static WebElement editScreenAccount2StandardFiledscancelBtn;  
	  			    
	  			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_search_container']//input[2]")
	  				public static WebElement editScreenAccount2deleteColumnBtn;
	  			    
	  			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
	  			   	public static WebElement editScreenAccount2okBtn;  
	  			       
	  			       @FindBy(xpath="//section[@id='page_Content']//input[4]")
	  			   	public static WebElement editScreenAccount2cancelBtn;
	   
	   @FindBy(xpath="//input[@id='chkPostToAccount1AllowEntry']")
	   public static WebElement editScreenAccount2AllowEntryChkBox;
	  			       
	   @FindBy(xpath="//input[@id='acc1-3']")
	   public static WebElement editScreenAccount1VariableRadio; 
	  
	   @FindBy(xpath="//input[@id='Account_1Var']")
	   public static WebElement editScreenAccount1VariableTxt;
	   
	   @FindBy(xpath="//input[@id='acc2-4']")
	   public static WebElement editScreenAccount2VariableRadio; 
	  
	   @FindBy(xpath="//input[@id='Account_2Var']")
	   public static WebElement editScreenAccount2VariableTxt;
	   
	   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RegularExpr']")
	   public static WebElement editScreenRegularExpTxt; 
	   
	   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_ErrorMsg']")
	   public static WebElement editScreenerrorMessageTxt; 
	
	 // properties  
	   
	
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkAuditTrail']")
	  public static WebElement editScreenauditTrailChkBox;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantExprt']")
	  public static WebElement editScreencantExportChkBox;  
	  
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantImprt']")
	  public static WebElement editScreencantImportChkbox; 
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkHidden']")
	  public static WebElement editScreenhiddenChkbox;  
	  
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkMandatory']")
	  public static WebElement editScreenmandatorychkBox; 
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkNotAvailForReports']")
	  public static WebElement editScreennotAvailableForReportsChkBox;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkReadOnly']")
	  public static WebElement editScreenreadOnlyChkBox;  
	 
	
	  
	
	 
	  @FindBy(xpath="//a[@href='#editScreen_FieldsCustomization_ExternalModules']")
	  public static WebElement editScreenExternalModulesTab; 
	  
	  @FindBy(xpath="//select[@id='cmbOnEvent_VT_769_7']")
	  public static WebElement editScreenOnEventDrpDwn; 
	  
	  @FindBy(xpath="//select[@id='cmbModuleType_VT_769_7']")
	  public static WebElement editScreenModuleTypeDrpDwn; 
	  
	  @FindBy(xpath="//select[@id='cmbClassname_VT_769_7']")
	  public static WebElement editScreenClassNameDrpDwn; 
	  
	  @FindBy(xpath="//input[@id='txtModuleName_VT_769_7']")
	  public static WebElement editScreenModuleNameTxt; 
	  
	  @FindBy(xpath="//select[@id='cmbFunctionName_VT_769_7']")
	  public static WebElement editScreenFunctionNameDrpDwn; 
	  
	  @FindBy(xpath="//input[@id='btnInsert_VT_769_7']")
	  public static WebElement editScreenInsertBtn; 
	  
	  @FindBy(xpath="//input[@id='btnRemove_VT_769_7']")
	  public static WebElement editScreenRemoveBtn; 
	  
	  
	// External Module Tab is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
	// External Functions(External Fields) Changes From Screen to Screen
	
	  
	  // Formatting Tab
	  
	  @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_tabs']/li[3]/a")
	    public static WebElement editScreenformattingTab;

		@FindBy(xpath="//*[@id='fontFamily_editScreen_FieldsCustomization_FontCtrl']")
	    public static WebElement editScreenFontFamilyDropdown;
		
	    @FindBy(xpath="//*[@id='fontStyle_editScreen_FieldsCustomization_FontCtrl']")
	    public static WebElement editScreenFontStyleDropdown;

	    @FindBy(xpath="//*[@id='fontWeight_editScreen_FieldsCustomization_FontCtrl']")
	    public static WebElement editScreenFontWeightDropdown;

		@FindBy(xpath="//*[@id='fontSizes_editScreen_FieldsCustomization_FontCtrl']")
		public static WebElement editScreenFontSizeDropdown;
		
		@FindBy(xpath="//*[@id='fontForeColor_editScreen_FieldsCustomization_FontCtrl']")
		public static WebElement editScreenForeColourDropdown;
		
		@FindBy(xpath="//*[@id='fontBackColor_editScreen_FieldsCustomization_FontCtrl']")
		public static WebElement editScreenBackColourDropdown;
		
		@FindBy(xpath="//*[@id='chkBaseline_editScreen_FieldsCustomization_FontCtrl']")
		public static WebElement editScreenBaseLineCheckbox;
		
		@FindBy(xpath="//*[@id='chkOverLine_editScreen_FieldsCustomization_FontCtrl']")
		public static WebElement editScreenOverLineCheckbox;
		
		@FindBy(xpath="//*[@id='chkStrikeThrough_editScreen_FieldsCustomization_FontCtrl']")
		public static WebElement EditScreenStrikeThroughCheckbox;
		
		@FindBy(xpath="//*[@id='chkUnderline_editScreen_FieldsCustomization_FontCtrl']")
		public static WebElement editScreenUnderlineCheckbox;
		
		@FindBy(xpath="//*[@id='previewfont_editScreen_FieldsCustomization_FontCtrl']")
		public static WebElement editScreenFontPreviewTxt;
		
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Formatting_chkenableFont']")
		public static WebElement editScreenenableFontChkbox;
	
	  
	  @FindBy(xpath="//span[@class='dropdown-toggle theme_button_color']")
	  public static WebElement editScreenCustomizeGridBtn;
	     
	  @FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
	  public static WebElement editScreenLoadFieldsDropdown;  
	     
	  @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[1]")
	  public static WebElement editScreenselectAllBtn;  
	  
	  @FindBy(xpath="//div[@id='editScreen_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
	  public static WebElement editScreenokBtn;  
	     
	  @FindBy(xpath="//input[@id='searchlayout2']")
	  public static WebElement editScreenSearchTxt;  
	
	  @FindBy(xpath="//*[@id='editScreen_tabContent']/label")
		public static WebElement editScreenRatePreloadLabel;
	  
	  
	  
	  
	  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
	  public static WebElement  formulaTxt;
		
	  @FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_expandedFormula']")
	  public static WebElement  expandeFormula;
		
	 // Grid Elements 
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_1-2']//span[@class='icon-collepse icon-font8']")
	public static WebElement  editScreenTransactionExpandBtn;
	
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-2']")
				public static WebElement  editScreenQuantity;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-3']")
				public static WebElement  editScreenqty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-2']")
				public static WebElement  editScreenRate;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-3']")
				public static WebElement  editScreenrt;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-2']")
				public static WebElement  editScreenAlternateQty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-3']")
				public static WebElement  editScreenqtya;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-2']")
				public static WebElement  editScreengrossAmount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-3']")
				public static WebElement  editScreengr;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-2']")
				public static WebElement  editScreenStockValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-3']")
				public static WebElement  editScreenstkv;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-2']")
				public static WebElement  editScreenAccount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-3']")
				public static WebElement  EditScreenacc;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-2']")
				public static WebElement  editScreenAccount2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-3']")
				public static WebElement  editScreenacc2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-2']")
				public static WebElement  editScreenExchangeRate;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-3']")
				public static WebElement  editScreenexrt;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-2']")
				public static WebElement  editScreenqtyinBaseUnit;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-3']")
				public static WebElement  editScreenqtyb;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-2']")
				public static WebElement  editScreenCurrency;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-3']")
				public static WebElement  editScreencrn;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-2']")
				public static WebElement  editScreenValueOfThetagMasterIDofTheTag;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-3']")
				public static WebElement  editScreentgval;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-2']")
				public static WebElement  editScreenNetAmount;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-3']")
				public static WebElement  EditScreennet;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-2']")
				public static WebElement  editScreenNetAmountInOriginalCurrency;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-3']")
				public static WebElement  editScreenneto;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-2']")
				public static WebElement  editScreenTotalQuantity;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-3']")
				public static WebElement  editScreentqty;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-2']")
				public static WebElement  editScreenTotalGross;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-3']")
				public static WebElement  editScreentgr;
				
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_17-2']//span[@class='icon-expand icon-font8']")
	public static WebElement  screenFiledExpandBtn;
	
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-2']")
				public static WebElement  mrnQtyInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-3']")
				public static WebElement  sb1;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-2']")
				public static WebElement  mrnQtyCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-3']")
				public static WebElement  sbo1;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-2']")
				public static WebElement  qtyBalancedInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-3']")
				public static WebElement  sb2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-2']")
				public static WebElement  qtyCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-3']")
				public static WebElement  sbO2;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-2']")
				public static WebElement  averagerateInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-3']")
				public static WebElement  sb3;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-2']")
				public static WebElement  avreageRateCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-3']")
				public static WebElement  sbO3;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-2']")
				public static WebElement  addValueInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-3']")
				public static WebElement  sb4;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-2']")
				public static WebElement  addValueInputCalculatedValue;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-3']")
				public static WebElement  sbO4;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_26-2']//span[@class='icon-collepse icon-font8']")
	public static WebElement  layoutFieldExpandBtn;
	
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-2']")
				public static WebElement  appropriateBasedOnInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-3']")
				public static WebElement  lh0;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-2']")
				public static WebElement  additionalValueInput;
				
				@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-3']")
				public static WebElement  lh1;
				
	// grid completed
	
	
	@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
	public static WebElement  editScreenqtyFormulaSearchTxt;
	
	@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_PlusOpt']")
	public static WebElement  editScreenqtyPlusBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'-')]")
	public static WebElement  editScreenqtyMinusBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[3]")
	public static WebElement  editScreenqtyDivideBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'*')]")
	public static WebElement  editScreenqtyMultiplyBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[5]")
	public static WebElement  editScreenqtyBrackets1Btn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[6]")
	public static WebElement  editScreenqtyBrackets2Btn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'~')]")
	public static WebElement  editScreenqtyTildeBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'&')]")
	public static WebElement  editScreenqtyAndBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'%')]")
	public static WebElement  editScreenqtyPercentBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//div[@id='operationButtons']//button[@class='btn btn-link'][contains(text(),']')]")
	public static WebElement  editScreenqtySquarebracketBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'|')]")
	public static WebElement  editScreenqtyVerticalBarBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'\')]")
	public static WebElement  editScreenqtyBackSlashBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'<')]")
	public static WebElement  editScreenqtyLessThanbtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'>')]")
	public static WebElement  editScreenqtyGreaterThanBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
	public static WebElement  editScreenqtyExclamationBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
	public static WebElement  editScreenqtyEqualBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'?:')]")
	public static WebElement  editScreenqtyQuestionBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'^')]")
	public static WebElement  editScreenqtyCaretBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'DateDiff()')]")
	public static WebElement  editScreenqtyDateDiffBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Cond()')]")
	public static WebElement  editScreenqtyCondBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Min()')]")
	public static WebElement  editScreenqtyMinBtn;
	
	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Max()')]")
	public static WebElement  editScreenqtyMaxBtn;
	
	@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
	public static WebElement  editScreenqtyConditionokBtn;
	
	@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
	public static WebElement  editScreenqtyConditioncancelBtn;
	
	
	///////////
	@FindBy(xpath="//*[@id='editScreen_qtyFormula_textbox']")
	public static WebElement  editScreenformulaTxt;
	
	
	// CustomizeGrid
	
	@FindBy(xpath="//i[@class='icon-custamize icon-font7']")
	public static WebElement editScreencustomizeGridBtn;  
	  
	@FindBy(xpath="//span[contains(text(),'Apportion')")
	public static WebElement editScreenApportionBtn;
	     
	@FindBy(xpath="//span[contains(text(),'Audit Trial')]")
	public static WebElement editScreenAuditTrialBtn;  
	    
	@FindBy(xpath="//span[contains(text(),'Back color')]")
	public static WebElement editScreenbackColorBtn;  
	     
	@FindBy(xpath="//span[contains(text(),'Banner text')]")
	public static WebElement editScreenbannerTextBtn;  
	 
	  @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
	  public static WebElement editScreencannotBeExportedBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
	  public static WebElement editScreencannotBeImportedBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Column Span')]")
	  public static WebElement editScreencolumnSpanBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
	  public static WebElement editScreencopyFromParentBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'DataType')]")
	  public static WebElement editScreendataTypeBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Default Value')]")
	  public static WebElement editScreenDefaultValueBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Error message')]")
	  public static WebElement editScreenerrorMessageBtn;  
	 
	  @FindBy(xpath="//span[contains(text(),'External module attached')]")
	  public static WebElement editScreenExternalModuleAttachedBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Field Order')]")
	  public static WebElement editScreenFilterOrderBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Font')]")
	  public static WebElement editScreenFontBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Group Name')]")
	  public static WebElement editScreengroupNameBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
	  public static WebElement editScreenHideLeftPanelBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Information Field')]")
	  public static WebElement editScreenInformationFieldBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Mandatory')]")
	  public static WebElement editScreenMandatoryBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Mass Update')]")
	  public static WebElement editScreenMassupdateBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
	  public static WebElement editScreenMaximumValueBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Merge Field')]")
	  public static WebElement editScreenMergerFieldBtn;  
	  
	  @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
	  public static WebElement editScreenMinimumValueBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'No Of Decimals')]")
	  public static WebElement editScreenNoOfDecimalsBtn;  
	  
	  @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
	  public static WebElement editScreenNotAvailableForReportsBtn; 
	     
	  @FindBy(xpath="//span[contains(text(),'Read Only')]")
	  public static WebElement editScreenReadOnlyBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Regular expression')]")
	  public static WebElement editScreenRegularExpressionBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Restrict formula')]")
	  public static WebElement editScreenRestrictFormulaBtn;  
	  
	  @FindBy(xpath="//span[contains(text(),'Restrict Message')]")
	  public static WebElement editScreenRestrictMessageBtn;  
	  
	  @FindBy(xpath="//span[contains(text(),'Round Offs')]")
	  public static WebElement editScreenRoundsOffsBtn;  
	
	  @FindBy(xpath="//span[contains(text(),'Row Span')]")
	  public static WebElement editScreenRowSpanBtn; 
	     
	  @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
	  public static WebElement editScreenRuleAttachedBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Tooltip')]")
	  public static WebElement editScreenToolTipBtn;  
	     
	  @FindBy(xpath="//span[contains(text(),'Variable name')]")
	  public static WebElement editScreenVariableNameBtn;  
	 
	  
	  
	  
	
	 // Body Tab 
	  
	 
	  
	  @FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody/tr")
	  public static List<WebElement> editScreenBodyTabRowsCount;
	  
	  @FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody")
	  public static WebElement editScreenBodyTabTable;
	
	  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='editIcon']")
	  public static WebElement  editScreenBody1stRowEditBtn; 
	  
	  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='deleteIcon']")
	  public static WebElement  editScreenBody1stRowDeleteBtn; 
	  
	  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _3']")
	  public static WebElement  editScreenBody1stRowCaption;
	  
	  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _8']")
	  public static WebElement  editScreenBody1stRowFormula;
	  
	  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='editIcon']")
	  public static WebElement  editScreenBody2ndRowEditBtn; 
	  
	  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='deleteIcon']")
	  public static WebElement  editScreenBody2ndRowDeleteBtn; 
	  
	  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _3']")
	  public static WebElement  editScreenBody2ndRowCaption;
	  
	  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _8']")
	  public static WebElement  editScreenBody2ndRowFormula;
	  
	  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-up-arrow Fbutton']")
	  public static WebElement  editScreenBodyUpArrowBtn; 
	
	  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-down-arrow Fbutton']")
	  public static WebElement  editScreenBodyDownArrowBtn;
					
	// Footer Tab
	  
	  @FindBy(xpath="//a[contains(text(),'Footer')]")
	  public static WebElement  editScreenFooterTab;  
	  
	  @FindBy(xpath="//*[@id='editScreen_footerTable']/tbody/tr")
	  public static List<WebElement> editScreenFooterTabRowsCount;
	  
	  @FindBy(xpath="//*[@id='editScreen_footerTable']/tbody")
	  public static WebElement editScreenFooterTabTable;
	  
	  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='editIcon']")
	  public static WebElement  editScreenFooter1stRowEditBtn; 
	  
	  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='deleteIcon']")
	  public static WebElement  editScreenFooter1stRowDeleteBtn; 
	  
	  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
	  public static WebElement  editScreenFooter1stRowCaption; 
	  
	  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _8']")
	  public static WebElement  editScreenFooter1stRowFormula; 
	  
	  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='editIcon']")
	  public static WebElement  editScreenFooter2ndRowEditBtn; 
	  
	  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='deleteIcon']")
	  public static WebElement  editScreenFooter2ndRowDeleteBtn; 
	  
	  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-up-arrow Fbutton']")
	  public static WebElement  editScreenFooterUpArrowBtn; 
	
	  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-down-arrow Fbutton']")
	  public static WebElement  editScreenFooterDownArrowBtn; 
	  
	/////
	  	@FindBy(xpath="//label[contains(text(),'Quantity preloaded')]")
		public static WebElement qtyPreloadedLabel;
		
		@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
		public static WebElement qtyPreloadedTxt;
		
		@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
		public static WebElement qtyPreloadedformulaTxt;
		
		@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
		public static WebElement qtyPreloadedFormulaSearchTxt;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
		public static WebElement qtyPreloadedFormulaokBtn;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
		public static WebElement qtyPreloadedFormulacancelBtn;


		@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[1]/label/span")
		public static WebElement editScreenLoadFields1stChkBox;
		
		@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[2]/label/span")
		public static WebElement editScreenLoadFields2ndChkBox;
		
		@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[3]/label/span")
		public static WebElement editScreenLoadFields3rdChkBox;
		
		@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[4]/label/span")
		public static WebElement editScreenLoadFields4thChkBox;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_formulaText']")
		public static WebElement  preloadformulaTxt;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_availableVariables']")
		public static WebElement  preloadFormulaSearchTxt;
		
		@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
		public static WebElement  preloadFormulaokBtn;
			
		@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Cancel']")
		public static WebElement  preloadFormulacancelBtn;
		
		
		///////////////////////////////////////////////////////////////////////////////////


//**------------------------------------------------------------------------------------------------------------- 

// Edit Layout Tab  
   
 
   
   

	@FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_input_image']/span")
	public static WebElement  editLayOutCaptionExpandBtn;
	
	@FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_input_settings']/span")
	public static WebElement  editLayoutCaptionSettingsBtn;

				@FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_container']")
				public static WebElement  editLayoutCaptionSettingsContainer;
										
				@FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_footer']//input[1]")
				public static WebElement  editLayoutCaptionSettingsStandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_standardfields_list']")
							public static WebElement  editLayoutCaptionSettingsStandardFieldFielddropdown;
																
							@FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_standardfields_header']")
							public static WebElement  editLayoutCaptionSettingsStandardFieldHeaderTxt;
															
							@FindBy(xpath="//select[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_standardfields_alignment']")
							public static WebElement  editLayoutCaptionSettingsStandardFieldAlignmentdropdown;
																
							@FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_standardfields_width']")
							public static WebElement  editLayoutCaptionSettingStandardFieldsWidthTxt;
																
							@FindBy(xpath="//section[@id='page_Content']//input[3]")
							public static WebElement  editLayoutCaptionSettingsStandardFieldokBtn;
																
							@FindBy(xpath="//section[@id='page_Content']//input[4]")
							public static WebElement  editLayoutCaptionSettingsStandardFieldcancelBtn;
										
										
				@FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_search_container']//input[2]")
				public static WebElement  editLayoutCaptionSettingsDeleteColumnBtn;
										
				@FindBy(xpath="//section[@id='page_Content']//input[3]")
				public static WebElement  editLayoutCaptionSettingsokBtn;
							
				@FindBy(xpath="//section[@id='page_Content']//input[4]")
				public static WebElement  editLayoutCaptionSettingscancelBtn;
   
   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Name']")
	public static WebElement editLayoutNameTxt;
   
   @FindBy(xpath="//select[@id='EditLayout_FieldsCustomization_FieldDetails_DataType']")
	public static WebElement editLayoutDataTypeDropdown;
   
   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Maxsize']")
	public static WebElement editLayoutMaxSizeTxt;
   
   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_defaultValue']")
	public static WebElement editLayoutDefaultValueTxt;
   
   @FindBy(xpath="//select[@id='EditLayout_FieldsCustomization_FieldDetails_controlType']")
	public static WebElement editLayoutControlTypeDropdown;
   
   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_toolTip']")
	public static WebElement editLayoutToolTipTxt;
   
   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_toolTip']")
	public static WebElement editlayoutUniqueDropdown;
   
   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_groupName']")
	public static WebElement editLayoutgroupNameTXt;
   
   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_entryValidation']")
	public static WebElement editLayoutEntryValidationTxt;
   
   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_entryValidationMsg']")
	public static WebElement editLayoutValidationMessageTxt;
   
   @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_FieldDetails']/div[20]/fieldset/legend/label/span")
	public static WebElement editLayoutPostToAccountChkBox;
   
   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_FieldDetails_defaultAcc1']")
	public static WebElement editLayoutAccount1Txt;
   
   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_FieldDetails_defaultAcc2']")
	public static WebElement editLayoutAccount2Txt;
   
   @FindBy(xpath="//input[@id='txtEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement editLayoutRegularExpTxt;
   
   //  PopUp  RegularExpresiion Window
   
   @FindBy(xpath="//input[@id='txtREditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement regularExpTxt;  
   
   @FindBy(xpath="//input[@id='txtTestStringEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement testStringTxt;  
   
   @FindBy(xpath="//button[contains(text(),'Test')]")
	public static WebElement testBtn;  
   
   @FindBy(xpath="//a[contains(text(),'Characters and Repetitions')]")
	public static WebElement characterAndRepetitionsTab;  
   
   @FindBy(xpath="//input[@id='txtCharAndRepititionEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement characterAndRepetitionsRegularExpTxt;  
 
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[1]/div[2]/button")
	public static WebElement characterAndRepetitionsRegularExpInsertBtn;  
   
   @FindBy(xpath="//input[@id='chkMatchOnlyIfAbsentEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement matchOnlyIfAbsentChkbox;  
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[1]/label/input")
	public static WebElement anyCharacterRadio;  
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[2]/label/input")
	public static WebElement alphanumericRadio;  
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[3]/label/input")
	public static WebElement digitRadio;  
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[4]/label/input")
	public static WebElement whiteSpaceRadio;  
   
   @FindBy(xpath="//div[@class='col-sm-10 Fradiobox padding']//input[1]")
	public static WebElement specificCharacterRadio;  
   
   @FindBy(xpath="//input[@id='txtSpecificCharEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement specificCharacterBtn;  
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[7]/label/input")
	public static WebElement namedClassRadio; 
   
   @FindBy(xpath="//select[@id='ddlNamedClassEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement namedClassdropdown;  
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[9]/label/input")
	public static WebElement specifiedSetRadio;  
   
   @FindBy(xpath="//select[@id='ddlSpecifiedSetEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement specifiedsetDropdown;  
   
   @FindBy(xpath="//input[@id='chkAsFewAsPossibleEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement asFewAsPossibleChkBox;  
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[3]/fieldset/div/div[2]/div[1]/div[1]/label/input")
	public static WebElement justOnceRadio;  
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[3]/fieldset/div/div[2]/div[1]/div[2]/label/input")
  	public static WebElement anyNumberRadio; 
  
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[3]/fieldset/div/div[2]/div[1]/div[3]/label/input")
  	public static WebElement oneOrMoreRadio; 
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[3]/fieldset/div/div[2]/div[1]/div[4]/label/input")
  	public static WebElement zeroOrOneRadio; 
   
   @FindBy(xpath="//div[@class='col-sm-12 padding border']//div[1]//label[1]//input[1]")
  	public static WebElement exactlyRadio; 
   
   @FindBy(xpath="//input[@id='nExactlyNEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement exactlyDropdown;  
   
   @FindBy(xpath="//div[@class='col-sm-12 padding border']//div[3]//label[1]//input[1]")
	public static WebElement atleastRadio;  
   
   @FindBy(xpath="//input[@id='mAtLeastNEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement atleastDropdown;  
   
   @FindBy(xpath="//div[@class='Fradiobox col-sm-12']//input[1]")
	public static WebElement betweenNandMBtn;  
   
   @FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Ok')]")
	public static WebElement regularExpokBtn;  
   
   @FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Close')]")
	public static WebElement regularExpcancelBtn;  
   
   
   //
   
   @FindBy(xpath="//a[contains(text(),'Groups and Options')]")
	public static WebElement groupAndOptionsTab;  
   
   @FindBy(xpath="//input[@id='txtGrpAndOptEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement groupAndOptionRegularExpTxt;  
   
   @FindBy(xpath="//button[contains(text(),'Result')]")
	public static WebElement resultBtn;  
   
   @FindBy(xpath="//fieldset[@id='dvDefineAMatchGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[@class='col-sm-12']//div[1]//label[1]//input[1]")
	public static WebElement numbereedCapturedRadio;  
   
   @FindBy(xpath="//fieldset[@id='dvDefineAMatchGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[2]//label[1]//input[1]")
	public static WebElement nonCapturingGroupRadio;  
   
   @FindBy(xpath="//fieldset[@id='dvDefineAMatchGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[3]//label[1]//input[1]")
	public static WebElement namedCaptureRadio;  
   
   @FindBy(xpath="//input[@id='txtNamedCaptureEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement namedCaptureTxt;  
   
   @FindBy(xpath="//fieldset[@id='dvDefineAMatchGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[5]//label[1]//input[1]")
	public static WebElement balancingGrpRadio;  
   
   @FindBy(xpath="//input[@id='txtBalancingGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	public static WebElement balancingGrpTxt;  
   
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp1']//div[7]//label[1]//input[1]")
	public static WebElement matchSuffixButEcludeItRadio;  
   
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp1']//div[8]//label[1]//input[1]")
  	public static WebElement matchPrefixButEcludeItRadio;  
      
   @FindBy(xpath="//label[text()='Match if suffix is not present (?']")
  	public static WebElement matchIfSuffixIsNotPresentRadio;  
      
   @FindBy(xpath="//div[@id='editLayout_FieldsCustomization_FieldDetails_validationDiv']//div[10]//label[1]")
  	public static WebElement matchIfPrefixIsNotPresentRadio;  
      
   @FindBy(xpath="//div[@id='editLayout_FieldsCustomization_FieldDetails_validationDiv']//div[11]//label[1]")
  	public static WebElement greedySubExpressionRadio;  
      
   @FindBy(xpath="//div[@id='editLayout_FieldsCustomization_FieldDetails_validationDiv']//div[12]//label[1]")
  	public static WebElement commentRadio;  
      
   @FindBy(xpath="//input[@id='txtCommentEditLayout_FieldsCustomization_FieldDetails_regularExp']")
  	public static WebElement commentTxt;  
      
   @FindBy(xpath="//input[@id='chkWithANewNonCaptureGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']")
  	public static WebElement withInANonCapturingGroupChkBox;  
      
   @FindBy(xpath="//input[@id='chkUntilEndOfEncloseGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']")
  	public static WebElement untilEndOfEnclosingGroupChkBox;  
      
   @FindBy(xpath="//fieldset[@id='dvOptionsEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[@class='col-sm-12']//div[1]//label[1]//input[1]")
  	public static WebElement ignoreCaseChkBox;  
      
   @FindBy(xpath="//fieldset[@id='dvOptionsEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[2]//label[1]//input[1]")
  	public static WebElement multiLineChkBox;  
      
   @FindBy(xpath="//fieldset[@id='dvOptionsEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[3]//label[1]//input[1]")
  	public static WebElement singleLineChkBox;  
      
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp1']//div[4]//label[1]//input[1]")
  	public static WebElement explicitCaptureChkBox;  
      
   @FindBy(xpath="//fieldset[@id='dvOptionsEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[5]//label[1]//input[1]")
  	public static WebElement ignorePatternWhiteSpaceChkBox;  
     
  // 
   
   @FindBy(xpath="//a[contains(text(),'Special Characters')]")
  	public static WebElement sepecialCharactersTab;  
      
   @FindBy(xpath="//input[@id='txtSpecialCharEditLayout_FieldsCustomization_FieldDetails_regularExp']")
  	public static WebElement specialCharacterRegularExpTxt;  
      
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']//button[@class='Fbutton'][contains(text(),'Insert')]")
  	public static WebElement specialCharacterRegularExpInsertBtn;  
      
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[1]/label/input")
  	public static WebElement bellRadio;  
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[2]/label/input")
  	public static WebElement backSpaceRadio; 
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[3]/label/input")
  	public static WebElement tabRadio; 
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[4]/label/input")
  	public static WebElement carriageReturnRadio; 
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[5]/label/input")
  	public static WebElement verticalTabRadio; 
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[6]/label/input")
  	public static WebElement formfeedRadio; 
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[7]/label/input")
  	public static WebElement newLineRadio; 
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[8]/label/input")
  	public static WebElement escapeRadio; 
      
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[1]/div/div[1]/label/input")
  	public static WebElement beginningOfStringOrLineRadio; 
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[1]/div/div[2]/label/input")
  	public static WebElement endOfStringOrLineRadio;
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[1]/div/div[3]/label/input")
  	public static WebElement alterNationRadio;
 
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[1]/label/input")
  	public static WebElement beginningOfStringRadio;
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[2]/label/input")
  	public static WebElement endOfStringOrBeforeNewLineAtEndRadio;
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[3]/label/input")
  	public static WebElement endOfStringRadio;
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[4]/label/input")
  	public static WebElement beginningOfCurrentSearchRadio;
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[5]/label/input")
  	public static WebElement firsOrLastCharacterInWordRadio;
   
   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[6]/label/input")
  	public static WebElement noOfFirstOfLastCharacterInWordRadio;
     
   //
   
   @FindBy(xpath="//a[contains(text(),'Exiting')]")
  	public static WebElement excitngTab;
   
   //
      
   @FindBy(xpath="//ul[@class='nav nav-tabs']//a[contains(text(),'Help')]")
  	public static WebElement helpTab;  
      
   @FindBy(xpath="//div[@class='col-xs-12 col-sm-3']//div[1]//label[1]//input[1]")
  	public static WebElement syntaxElementsRadio;  
      
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[2]//label[1]//input[1]")
  	public static WebElement charactersRadio;  
      
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[3]//label[1]//input[1]")
  	public static WebElement quantifierRadio;  
      
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[4]//label[1]//input[1]")
  	public static WebElement anchorsRadio;  
      
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[5]//label[1]//input[1]")
  	public static WebElement characterClassradio;  
      
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[6]//label[1]//input[1]")
  	public static WebElement extendedgroupsRadio;  
      
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[7]//label[1]//input[1]")
  	public static WebElement backReferenceRadio;  
      
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[8]//label[1]//input[1]")
  	public static WebElement subExpcallRadio;  
      
   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[9]//label[1]//input[1]")
  	public static WebElement capturedGroupRadio;  
      
   @FindBy(xpath="//pre[@id='preHelpEditLayout_FieldsCustomization_FieldDetails_regularExp']")
  	public static WebElement helpField;  
   
   @FindBy(xpath="//span[contains(text(),'Apply')]")
  	public static WebElement editLayoutApplyBtn;  
      
   @FindBy(xpath="//span[@id='editLayout_FieldsCustomization_Close']//i[@class='icon-cancel icon-font7']")
  	public static WebElement editLayoutCloseBtnINDC;
   
   
   
   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_errorMsg']")
  	public static WebElement editLayouterrorMessageTxt;
   
 
   @FindBy(xpath="//div[@id='editLayout_copyFieldsOptFields']//div[1]//label[1]//input[1]")
	public static WebElement editLayoutLoadFields1stChkBox;
	
	@FindBy(xpath="//div[@id='editLayout_copyFieldsOptFields']//div[2]//label[1]//input[1]")
	public static WebElement editLayoutLoadFields2ndChkBox;
	
	@FindBy(xpath="//div[@id='editLayout_copyFieldsOptFields']//div[3]//label[1]//input[1]")
	public static WebElement editLayoutLoadFields3rdChkBox;
   
   
   
   
   
   
   
   
 //Properties Tab 

  
  
      
   
   // External Module is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
   // External Functions(External Fields) is same but Changes From Screen to Screen
   
   
		
		@FindBy(xpath="//td[@id='editLayout_headerrow_1 _4']")
		public static WebElement  editLayoutHeader1stRowCaption;
		
		@FindBy(xpath="//td[@id='editLayout_headerrow_2 _4']")
		public static WebElement  editLayoutHeader2ndRowCaption;
		
		@FindBy(xpath="//td[@id='editLayout_bodyrow_1 _4']")
		public static WebElement  editLayoutbody1stRowCaption;
		
		
		@FindBy(xpath="//td[@id='editLayout_bodyrow_2 _4']")
		public static WebElement  editLayoutbody2ndRowCaption;
	
	
      
   
   @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[2]")
   public static WebElement editScreenLayoutokBtn;
   
 
   
   
   @FindBy(xpath="//input[@id='searchlayout']")
  	public static WebElement editLayoutSearchTxt;  
      
   @FindBy(xpath="//button[@id='btnEditLayoutPrev']")
  	public static WebElement editLayoutPreviousBtn;  
      
   @FindBy(xpath="//button[@id='btnEditLayoutNext']")
  	public static WebElement editLayoutNextBtn;  
      
   @FindBy(xpath="//span[@class='dropdown-toggle theme_button_color']")
  	public static WebElement customizeGridBtn;  
      
   @FindBy(xpath="//li[@id='editLayout_hiddenColumn_34']//span[contains(text(),'Audit Trail')]")
  	public static WebElement editLayoutAuditTrialBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Back color')]")
  	public static WebElement backColorBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Banner text')]")
  	public static WebElement bannerTextBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Behaviour')]")
  	public static WebElement behaviourBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Calender Type')]")
  	public static WebElement calenderTypeBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
  	public static WebElement cannotBeExportedBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
  	public static WebElement cannotBeImportedBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Character casing')]")
  	public static WebElement characterCasingBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Column Span')]")
  	public static WebElement columnSpanBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
  	public static WebElement copyFromParentBtn;  
      
   @FindBy(xpath="//span[contains(text(),'DataType')]")
  	public static WebElement dataTypeBtn;  
      
   @FindBy(xpath="//li[@id='editLayout_hiddenColumn_11']//span[contains(text(),'Default')]")
  	public static WebElement defaultBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Display Control Type')]")
  	public static WebElement controlTypeBtn;  
      
   @FindBy(xpath="//span[contains(text(),'EntryValidation')]")
  	public static WebElement entryValidationBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Error message')]")
  	public static WebElement errorMessageBtn;  
      
   @FindBy(xpath="//span[contains(text(),'External Display Member')]")
  	public static WebElement externalDisplaymemberBtn;  
      
   @FindBy(xpath="//span[contains(text(),'External module attached')]")
  	public static WebElement externalModuleAttachedBtn;  
      
   @FindBy(xpath="//span[contains(text(),'External Table Name')]")
  	public static WebElement externalTableNameBtn;  
      
   @FindBy(xpath="//span[contains(text(),'External Value Member')]")
  	public static WebElement externalValuememberBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Filter condition')]")
  	public static WebElement filterConditionBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Font')]")
  	public static WebElement fontBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Group Name')]")
  	public static WebElement groupNameBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Hidden in group')]")
  	public static WebElement hiddenInGroupBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
  	public static WebElement hideLeftPanelBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Information Field')]")
  	public static WebElement informationFieldBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Interval Value')]")
  	public static WebElement intervalValueBtn;  
      
   @FindBy(xpath="//li[@id='editLayout_hiddenColumn_28']//span[contains(text(),'Mandatory')]")
  	public static WebElement mandatoryBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Mandatory Fields')]")
  	public static WebElement mandatoryFieldsBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Mandatory in group')]")
  	public static WebElement mandatoryInGroupBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Mass Update')]")
  	public static WebElement massupdateBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
  	public static WebElement maximumValueBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Merge Field')]")
  	public static WebElement mergerFieldBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
  	public static WebElement minimumValueBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
  	public static WebElement notAvailableForReportsBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Read Only')]")
  	public static WebElement readOnlyBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Regular expression')]")
  	public static WebElement regularExpressionBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Row Span')]")
  	public static WebElement rowSpanBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
  	public static WebElement ruleAttachedBtn;  
      
   @FindBy(xpath="//span[contains(text(),'ScrollBar')]")
  	public static WebElement scrollBarBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Spellcheck')]")
  	public static WebElement spellCheckBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Text Align')]")
  	public static WebElement textAllignBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Tooltip')]")
  	public static WebElement toolTipBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Validation Message')]")
  	public static WebElement validationMessageBtn;  
      
   @FindBy(xpath="//span[contains(text(),'Word wrap')]")
  	public static WebElement wordWrapBtn;  
      
 // Header Tab  
     
   
   @FindBy(xpath="//td[@id='editLayout_headerrow_1 _1']//span[@id='editIcon']")
  	public static WebElement  editLayoutHeader1stRowEditBtn; 
   
   @FindBy(xpath="//td[@id='editLayout_headerrow_1 _1']//span[@id='deleteIcon']")
  	public static WebElement  editLayoutHeader1stRowDeleteBtn; 
   
   @FindBy(xpath="//td[@id='editLayout_headerrow_2 _1']//span[@id='editIcon']")
  	public static WebElement  editLayoutHeader2ndRowEditBtn; 
   
   @FindBy(xpath="//td[@id='editLayout_headerrow_2 _1']//span[@id='deleteIcon']")
  	public static WebElement  editLayoutHeader2ndRowDeleteBtn; 
   
   @FindBy(xpath="//div[@id='editLayout_header']//button[@class='icon-up-arrow Fbutton']")
  	public static WebElement  editLayoutHeaderUpArrowBtn; 

   @FindBy(xpath="//div[@id='editLayout_header']//button[@class='icon-down-arrow Fbutton']")
  	public static WebElement  editLayoutHeaderDownArrowBtn; 
   
  // Body Tab 
   
   @FindBy(xpath="//td[@id='editLayout_bodyrow_1 _1']//span[@id='editIcon']")
  	public static WebElement  editLayoutBody1stRowEditBtn; 
   
   @FindBy(xpath="//td[@id='editLayout_bodyrow_1 _1']//span[@id='deleteIcon']")
  	public static WebElement  editLayoutBody1stRowDeleteBtn; 
   
   @FindBy(xpath="//td[@id='editLayout_bodyrow_2 _1']//span[@id='editIcon']")
  	public static WebElement  editLayoutBody2ndRowEditBtn; 
   
   @FindBy(xpath="//td[@id='editLayout_bodyrow_2 _1']//span[@id='deleteIcon']")
  	public static WebElement  editLayoutBody2ndRowDeleteBtn; 
   
   @FindBy(xpath="//div[@id='editLayout_body']//button[@class='icon-up-arrow Fbutton']")
  	public static WebElement  editLayoutBodyUpArrowBtn; 

   @FindBy(xpath="//div[@id='editLayout_body']//button[@class='icon-down-arrow Fbutton']")
  	public static WebElement  editLayoutBodyDownArrowBtn;
   

//**-------------------------------------------------------------------------------------------------------  

	// External Functions/ External fields Tab 
	// External Module in Edit Screen.Edit Layout,Views Are Also in this
	// External Functions/Edit Screen===EFES
	// Edit Layout/ Views====ELV
	
	
	@FindBy(xpath="//span[contains(text(),'External Functions')]")
  	public static WebElement  externalFunctionsTab; 
	
	
	/////////////
   
	// Receipts External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4608_5']")
  	public static WebElement  receiptsEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4608_5']")
  	public static WebElement  receiptsEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_4608_5']")
  	public static WebElement  receiptsEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_4608_5']")
  	public static WebElement  receiptsEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_4608_5']")
  	public static WebElement  receiptsEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4608_5']")
  	public static WebElement  receiptsEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_5+_0']")
  	public static WebElement  receiptsEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_5+_1']")
  	public static WebElement  receiptsEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_5+_2']")
  	public static WebElement  receiptsEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4608_5']")
  	public static WebElement  receiptsEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_4608_5']")
  	public static WebElement  receiptsEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_4608_5']")
  	public static WebElement  receiptsEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_4608_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  receiptsEFES_CloseBtnINDC; 
   
   
   // Receipts Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4608_7']")
  	public static WebElement  receiptsELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4608_7']")
  	public static WebElement  receiptsELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_4608_7']")
  	public static WebElement  receiptsELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_4608_7']")
  	public static WebElement  receiptsELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_4608_7']")
  	public static WebElement  receiptsELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4608_7']")
  	public static WebElement  receiptsELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_7+_0']")
  	public static WebElement  receiptsELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_7+_1']")
  	public static WebElement  receiptsELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_7+_2']")
  	public static WebElement  receiptsELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4608_7']")
  	public static WebElement  receiptsELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_4608_7']")
  	public static WebElement  receiptsELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_4608_7']")
  	public static WebElement  receiptsELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_4608_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  receiptsELV_CloseBtnINDC;
	
   
  ////// 
   
	// Payments External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4864_5']")
  	public static WebElement  paymentsEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4864_5']")
  	public static WebElement  paymentsEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_4864_5']")
  	public static WebElement  paymentsEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_4864_5']")
  	public static WebElement  paymentsEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_4864_5']")
  	public static WebElement  paymentsEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4864_5']")
  	public static WebElement  paymentsEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_5+_0']")
  	public static WebElement  paymentsEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_5+_1']")
  	public static WebElement  paymentsEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_5+_2']")
  	public static WebElement  paymentsEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4864_5']")
  	public static WebElement  paymentsEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_4864_5']")
  	public static WebElement  paymentsEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_4864_5']")
  	public static WebElement  paymentsEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_4864_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  paymentsEFES_CloseBtnINDC; 
   
   
   // Payments Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4864_7']")
  	public static WebElement  paymentsELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4864_7']")
  	public static WebElement  paymentsELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_4864_7']")
  	public static WebElement  paymentsELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_4864_7']")
  	public static WebElement  paymentsELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_4864_7']")
  	public static WebElement  paymentsELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4864_7']")
  	public static WebElement  paymentsELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_7+_0']")
  	public static WebElement  paymentsELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_7+_1']")
  	public static WebElement  paymentsELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_7+_2']")
  	public static WebElement  paymentsELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4864_7']")
  	public static WebElement  paymentsELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_4864_7']")
  	public static WebElement  paymentsELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_4864_7']")
  	public static WebElement  paymentsELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_4864_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  paymentsELV_CloseBtnINDC;
   
   
 ////////////////  
   
	// PettyCash External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5120_5']")
  	public static WebElement  pettyCashEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5120_5']")
  	public static WebElement  pettyCashEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_5120_5']")
  	public static WebElement  pettyCashEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_5120_5']")
  	public static WebElement  pettyCashEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_5120_5']")
  	public static WebElement  pettyCashEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5120_5']")
  	public static WebElement  pettyCashEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_5+_0']")
  	public static WebElement  pettyCashEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_5+_1']")
  	public static WebElement  pettyCashEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_5+_2']")
  	public static WebElement  pettyCashEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5120_5']")
  	public static WebElement  pettyCashEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_5120_5']")
  	public static WebElement  pettyCashEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_5120_5']")
  	public static WebElement  pettyCashEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_5120_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  pettyCashEFES_CloseBtnINDC; 
   
   
   // PettyCash Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5120_7']")
  	public static WebElement  pettyCashELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5120_7']")
  	public static WebElement  pettyCashELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_5120_7']")
  	public static WebElement  pettyCashELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_5120_7']")
  	public static WebElement  pettyCashELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_5120_7']")
  	public static WebElement  pettyCashELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5120_7']")
  	public static WebElement  pettyCashELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_7+_0']")
  	public static WebElement  pettyCashELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_7+_1']")
  	public static WebElement  pettyCashELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_7+_2']")
  	public static WebElement  pettyCashELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5120_7']")
  	public static WebElement  pettyCashELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_5120_7']")
  	public static WebElement  pettyCashELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_5120_7']")
  	public static WebElement  pettyCashELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_5120_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  pettyCashELV_CloseBtnINDC;
   
 /////////////////////////////////
   
   
	// PostDatedReceipts External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5888_5']")
  	public static WebElement  postDatedReceiptsEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5888_5']")
  	public static WebElement  postDatedReceiptsEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_5888_5']")
  	public static WebElement  postDatedReceiptsEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_5888_5']")
  	public static WebElement  postDatedReceiptsEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_5888_5']")
  	public static WebElement  postDatedReceiptsEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5888_5']")
  	public static WebElement  postDatedReceiptsEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_5+_0']")
  	public static WebElement  postDatedReceiptsEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_5+_1']")
  	public static WebElement  postDatedReceiptsEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_5+_2']")
  	public static WebElement  postDatedReceiptsEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5888_5']")
  	public static WebElement  postDatedReceiptsEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_5888_5']")
  	public static WebElement  postDatedReceiptsEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_5888_5']")
  	public static WebElement  postDatedReceiptsEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_5888_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  postDatedReceiptsEFES_CloseBtnINDC; 
   
   
   // PostDatedReceipts Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5888_7']")
  	public static WebElement  postDatedReceiptsELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5888_7']")
  	public static WebElement  postDatedReceiptsELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_5888_7']")
  	public static WebElement  postDatedReceiptsELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_5888_7']")
  	public static WebElement  postDatedReceiptsELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_5888_7']")
  	public static WebElement  postDatedReceiptsELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5888_7']")
  	public static WebElement  postDatedReceiptsELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_7+_0']")
  	public static WebElement  postDatedReceiptsELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_7+_1']")
  	public static WebElement  postDatedReceiptsELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_7+_2']")
  	public static WebElement  postDatedReceiptsELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5888_7']")
  	public static WebElement  postDatedReceiptsELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_5888_7']")
  	public static WebElement  postDatedReceiptsELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_5888_7']")
  	public static WebElement  postDatedReceiptsELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_5888_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  postDatedReceiptsELV_CloseBtnINDC;
   
   
   ///////////////////////////////
   
	// PostDatedPayments External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7168_5']")
  	public static WebElement  postDatedPaymentsEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7168_5']")
  	public static WebElement  postDatedPaymentsEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_7168_5']")
  	public static WebElement  postDatedPaymentsEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_7168_5']")
  	public static WebElement  postDatedPaymentsEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_7168_5']")
  	public static WebElement  postDatedPaymentsEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7168_5']")
  	public static WebElement  postDatedPaymentsEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_5+_0']")
  	public static WebElement  postDatedPaymentsEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_5+_1']")
  	public static WebElement  postDatedPaymentsEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_5+_2']")
  	public static WebElement  postDatedPaymentsEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7168_5']")
  	public static WebElement  postDatedPaymentsEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_7168_5']")
  	public static WebElement  postDatedPaymentsEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_7168_5']")
  	public static WebElement  postDatedPaymentsEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_7168_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  postDatedPaymentsEFES_CloseBtnINDC; 
   
   
   // PostDatedPayments Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7168_7']")
  	public static WebElement  postDatedPaymentsELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7168_7']")
  	public static WebElement  postDatedPaymentsELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_7168_7']")
  	public static WebElement  postDatedPaymentsELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_7168_7']")
  	public static WebElement  postDatedPaymentsELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_7168_7']")
  	public static WebElement  postDatedPaymentsELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7168_7']")
  	public static WebElement  postDatedPaymentsELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_7+_0']")
  	public static WebElement  postDatedPaymentsELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_7+_1']")
  	public static WebElement  postDatedPaymentsELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_7+_2']")
  	public static WebElement  postDatedPaymentsELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7168_7']")
  	public static WebElement  postDatedPaymentsELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_7168_7']")
  	public static WebElement  postDatedPaymentsELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_7168_7']")
  	public static WebElement  postDatedPaymentsELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_7168_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  postDatedPaymentsELV_CloseBtnINDC;
   
   
   
   /////////////////////////
   
   
	// purchaseVouchers External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_768_5']")
  	public static WebElement  purchaseVouchersEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_768_5']")
  	public static WebElement  purchaseVouchersEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_768_5']")
  	public static WebElement  purchaseVouchersEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_768_5']")
  	public static WebElement  purchaseVouchersEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_768_5']")
  	public static WebElement  purchaseVouchersEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_768_5']")
  	public static WebElement  purchaseVouchersEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_768_5+_0']")
  	public static WebElement  purchaseVouchersEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_768_5+_1']")
  	public static WebElement  purchaseVouchersEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_768_5+_2']")
  	public static WebElement  purchaseVouchersEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_768_5']")
  	public static WebElement  purchaseVouchersEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_768_5']")
  	public static WebElement  purchaseVouchersEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_768_5']")
  	public static WebElement  purchaseVouchersEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_768_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  purchaseVouchersEFES_CloseBtnINDC; 
   
   
   // purchaseVouchers Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_768_7']")
  	public static WebElement  purchaseVouchersELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_768_7']")
  	public static WebElement  purchaseVouchersELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_768_7']")
  	public static WebElement  purchaseVouchersELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_768_7']")
  	public static WebElement  purchaseVouchersELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_768_7']")
  	public static WebElement  purchaseVouchersELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_768_7']")
  	public static WebElement  purchaseVouchersELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_768_7+_0']")
  	public static WebElement  purchaseVouchersELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_768_7+_1']")
  	public static WebElement  purchaseVouchersELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_768_7+_2']")
  	public static WebElement  purchaseVouchersELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_768_7']")
  	public static WebElement  purchaseVouchersELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_768_7']")
  	public static WebElement  purchaseVouchersELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_768_7']")
  	public static WebElement  purchaseVouchersELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_768_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  purchaseVouchersELV_CloseBtnINDC;
   
   /////////////////
   
   
	// PurchaseReturns External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_6400_5']")
  	public static WebElement  purchaseReturnsEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_6400_5']")
  	public static WebElement  purchaseReturnsEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_6400_5']")
  	public static WebElement  purchaseReturnsEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_6400_5']")
  	public static WebElement  purchaseReturnsEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_6400_5']")
  	public static WebElement  purchaseReturnsEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_6400_5']")
  	public static WebElement  purchaseReturnsEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_5+_0']")
  	public static WebElement  purchaseReturnsEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_5+_1']")
  	public static WebElement  purchaseReturnsEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_5+_2']")
  	public static WebElement  purchaseReturnsEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_6400_5']")
  	public static WebElement  purchaseReturnsEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_6400_5']")
  	public static WebElement  purchaseReturnsEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_6400_5']")
  	public static WebElement  purchaseReturnsEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_6400_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  purchaseReturnsEFES_CloseBtnINDC; 
   
   
   // PurchaseReturns Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_6400_7']")
  	public static WebElement  purchaseReturnsELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_6400_7']")
  	public static WebElement  purchaseReturnsELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_6400_7']")
  	public static WebElement  purchaseReturnsELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_6400_7']")
  	public static WebElement  purchaseReturnsELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_6400_7']")
  	public static WebElement  purchaseReturnsELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_6400_7']")
  	public static WebElement  purchaseReturnsELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_7+_0']")
  	public static WebElement  purchaseReturnsELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_7+_1']")
  	public static WebElement  purchaseReturnsELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_7+_2']")
  	public static WebElement  purchaseReturnsELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_6400_7']")
  	public static WebElement  purchaseReturnsELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_6400_7']")
  	public static WebElement  purchaseReturnsELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_6400_7']")
  	public static WebElement  purchaseReturnsELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_6400_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  purchaseReturnsELV_CloseBtnINDC;
   
   
   /////////////////////////
   
	// SalesInvoices External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3328_5']")
  	public static WebElement  salesInvoicesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3328_5']")
  	public static WebElement  salesInvoicesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3328_5']")
  	public static WebElement  salesInvoicesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3328_5']")
  	public static WebElement  salesInvoicesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3328_5']")
  	public static WebElement  salesInvoicesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3328_5']")
  	public static WebElement  salesInvoicesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_5+_0']")
  	public static WebElement  salesInvoicesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_5+_1']")
  	public static WebElement  salesInvoicesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_5+_2']")
  	public static WebElement  salesInvoicesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3328_5']")
  	public static WebElement  salesInvoicesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3328_5']")
  	public static WebElement  salesInvoicesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3328_5']")
  	public static WebElement  salesInvoicesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3328_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  salesInvoicesEFES_CloseBtnINDC; 
   
   
   // SalesInvoices Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3328_7']")
  	public static WebElement  salesInvoicesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3328_7']")
  	public static WebElement  salesInvoicesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3328_7']")
  	public static WebElement  salesInvoicesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3328_7']")
  	public static WebElement  salesInvoicesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3328_7']")
  	public static WebElement  salesInvoicesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3328_7']")
  	public static WebElement  salesInvoicesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_7+_0']")
  	public static WebElement  salesInvoicesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_7+_1']")
  	public static WebElement  salesInvoicesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_7+_2']")
  	public static WebElement  salesInvoicesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3328_7']")
  	public static WebElement  salesInvoicesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3328_7']")
  	public static WebElement  salesInvoicesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3328_7']")
  	public static WebElement  salesInvoicesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3328_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  salesInvoicesELV_CloseBtnINDC;
   
   
   ////////////////
   
	// SalesReturns External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1792_5']")
  	public static WebElement  salesReturnsEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1792_5']")
  	public static WebElement  salesReturnsEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_1792_5']")
  	public static WebElement  salesReturnsEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_1792_5']")
  	public static WebElement  salesReturnsEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_1792_5']")
  	public static WebElement  salesReturnsEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1792_5']")
  	public static WebElement  salesReturnsEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_5+_0']")
  	public static WebElement  salesReturnsEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_5+_1']")
  	public static WebElement  salesReturnsEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_5+_2']")
  	public static WebElement  salesReturnsEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1792_5']")
  	public static WebElement  salesReturnsEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_1792_5']")
  	public static WebElement  salesReturnsEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_1792_5']")
  	public static WebElement  salesReturnsEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_1792_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  salesReturnsEFES_CloseBtnINDC; 
   
   
   // SalesReturns Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1792_7']")
  	public static WebElement  salesReturnsELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1792_7']")
  	public static WebElement  salesReturnsELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_1792_7']")
  	public static WebElement  salesReturnsELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_1792_7']")
  	public static WebElement  salesReturnsELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_1792_7']")
  	public static WebElement  salesReturnsELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1792_7']")
  	public static WebElement  salesReturnsELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_7+_0']")
  	public static WebElement  salesReturnsELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_7+_1']")
  	public static WebElement  salesReturnsELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_7+_2']")
  	public static WebElement  salesReturnsELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1792_7']")
  	public static WebElement  salesReturnsELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_1792_7']")
  	public static WebElement  salesReturnsELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_1792_7']")
  	public static WebElement  salesReturnsELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_1792_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  salesReturnsELV_CloseBtnINDC;
   
   ///////////
   
	// CashSales External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3329_5']")
  	public static WebElement  cashSalesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3329_5']")
  	public static WebElement  cashSalesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3329_5']")
  	public static WebElement  cashSalesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3329_5']")
  	public static WebElement  cashSalesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3329_5']")
  	public static WebElement  cashSalesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3329_5']")
  	public static WebElement  cashSalesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_5+_0']")
  	public static WebElement  cashSalesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_5+_1']")
  	public static WebElement  cashSalesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_5+_2']")
  	public static WebElement  cashSalesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3329_5']")
  	public static WebElement  cashSalesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3329_5']")
  	public static WebElement  cashSalesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3329_5']")
  	public static WebElement  cashSalesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3329_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  cashSalesEFES_CloseBtnINDC; 
   
   
   // CashSales Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3329_7']")
  	public static WebElement  cashSalesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3329_7']")
  	public static WebElement  cashSalesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3329_7']")
  	public static WebElement  cashSalesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3329_7']")
  	public static WebElement  cashSalesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3329_7']")
  	public static WebElement  cashSalesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3329_7']")
  	public static WebElement  cashSalesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_7+_0']")
  	public static WebElement  cashSalesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_7+_1']")
  	public static WebElement  cashSalesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_7+_2']")
  	public static WebElement  cashSalesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3329_7']")
  	public static WebElement  cashSalesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3329_7']")
  	public static WebElement  cashSalesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3329_7']")
  	public static WebElement  cashSalesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3329_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  cashSalesELV_CloseBtnINDC;
   
   ////////////
   
	// HirePurchaseSales External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3330_5']")
  	public static WebElement  hirePurchaseSalesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3330_5']")
  	public static WebElement  hirePurchaseSalesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3330_5']")
  	public static WebElement  hirePurchaseSalesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3330_5']")
  	public static WebElement  hirePurchaseSalesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3330_5']")
  	public static WebElement  hirePurchaseSalesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3330_5']")
  	public static WebElement  hirePurchaseSalesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_5+_0']")
  	public static WebElement  hirePurchaseSalesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_5+_1']")
  	public static WebElement  hirePurchaseSalesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_5+_2']")
  	public static WebElement  hirePurchaseSalesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3330_5']")
  	public static WebElement  hirePurchaseSalesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3330_5']")
  	public static WebElement  hirePurchaseSalesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3330_5']")
  	public static WebElement  hirePurchaseSalesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3330_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  hirePurchaseSalesEFES_CloseBtnINDC; 
   
   
   // HirePurchaseSales Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3330_7']")
  	public static WebElement  hirePurchaseSalesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3330_7']")
  	public static WebElement  hirePurchaseSalesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3330_7']")
  	public static WebElement  hirePurchaseSalesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3330_7']")
  	public static WebElement  hirePurchaseSalesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3330_7']")
  	public static WebElement  hirePurchaseSalesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3330_7']")
  	public static WebElement  hirePurchaseSalesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_7+_0']")
  	public static WebElement  hirePurchaseSalesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_7+_1']")
  	public static WebElement  hirePurchaseSalesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_7+_2']")
  	public static WebElement  hirePurchaseSalesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3330_7']")
  	public static WebElement  hirePurchaseSalesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3330_7']")
  	public static WebElement  hirePurchaseSalesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3330_7']")
  	public static WebElement  hirePurchaseSalesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3330_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  hirePurchaseSalesELV_CloseBtnINDC;
   
   
   /////////////////
   
   
	// JournalEntries External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8704_5']")
  	public static WebElement  journalEntriesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8704_5']")
  	public static WebElement  journalEntriesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_8704_5']")
  	public static WebElement  journalEntriesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_8704_5']")
  	public static WebElement  journalEntriesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_8704_5']")
  	public static WebElement  journalEntriesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8704_5']")
  	public static WebElement  journalEntriesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_5+_0']")
  	public static WebElement  journalEntriesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_5+_1']")
  	public static WebElement  journalEntriesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_5+_2']")
  	public static WebElement  journalEntriesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8704_5']")
  	public static WebElement  journalEntriesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_8704_5']")
  	public static WebElement  journalEntriesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_8704_5']")
  	public static WebElement  journalEntriesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_8704_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  journalEntriesEFES_CloseBtnINDC; 
   
   
   // JournalEntries Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8704_7']")
  	public static WebElement  JournalEntriesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8704_7']")
  	public static WebElement  JournalEntriesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_8704_7']")
  	public static WebElement  JournalEntriesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_8704_7']")
  	public static WebElement  JournalEntriesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_8704_7']")
  	public static WebElement  JournalEntriesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8704_7']")
  	public static WebElement  JournalEntriesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_7+_0']")
  	public static WebElement  JournalEntriesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_7+_1']")
  	public static WebElement  JournalEntriesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_7+_2']")
  	public static WebElement  JournalEntriesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8704_7']")
  	public static WebElement  JournalEntriesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_8704_7']")
  	public static WebElement  JournalEntriesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_8704_7']")
  	public static WebElement  JournalEntriesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_8704_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  JournalEntriesELV_CloseBtnINDC;
   
   //////////////
   
	// ForexJV External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8448_5']")
  	public static WebElement  ForexJVEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8448_5']")
  	public static WebElement  ForexJVEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_8448_5']")
  	public static WebElement  ForexJVEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_8448_5']")
  	public static WebElement  ForexJVEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_8448_5']")
  	public static WebElement  ForexJVEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8448_5']")
  	public static WebElement  ForexJVEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_5+_0']")
  	public static WebElement  ForexJVEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_5+_1']")
  	public static WebElement  ForexJVEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_5+_2']")
  	public static WebElement  ForexJVEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8448_5']")
  	public static WebElement  ForexJVEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_8448_5']")
  	public static WebElement  ForexJVEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_8448_5']")
  	public static WebElement  ForexJVEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_8448_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  ForexJVEFES_CloseBtnINDC; 
   
   
   // ForexJV Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8448_7']")
  	public static WebElement  ForexJVELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8448_7']")
  	public static WebElement  ForexJVELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_8448_7']")
  	public static WebElement  ForexJVELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_8448_7']")
  	public static WebElement  ForexJVELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_8448_7']")
  	public static WebElement  ForexJVELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8448_7']")
  	public static WebElement  ForexJVELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_7+_0']")
  	public static WebElement  ForexJVELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_7+_1']")
  	public static WebElement  ForexJVELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_7+_2']")
  	public static WebElement  ForexJVELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8448_7']")
  	public static WebElement  ForexJVELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_8448_7']")
  	public static WebElement  ForexJVELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_8448_7']")
  	public static WebElement  ForexJVELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_8448_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  ForexJVELV_CloseBtnINDC;
   
   ///////////
   
	// InterDepartmentalJV External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3585_5']")
  	public static WebElement  InterDepartmentalJVEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3585_5']")
  	public static WebElement  InterDepartmentalJVEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3585_5']")
  	public static WebElement  InterDepartmentalJVEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3585_5']")
  	public static WebElement  InterDepartmentalJVEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3585_5']")
  	public static WebElement  InterDepartmentalJVEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3585_5']")
  	public static WebElement  InterDepartmentalJVEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_5+_0']")
  	public static WebElement  InterDepartmentalJVEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_5+_1']")
  	public static WebElement  InterDepartmentalJVEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_5+_2']")
  	public static WebElement  InterDepartmentalJVEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3585_5']")
  	public static WebElement  InterDepartmentalJVEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3585_5']")
  	public static WebElement  InterDepartmentalJVEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3585_5']")
  	public static WebElement  InterDepartmentalJVEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3585_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  InterDepartmentalJVEFES_CloseBtnINDC; 
   
   
   // InterDepartmentalJV Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3585_7']")
  	public static WebElement  InterDepartmentalJVELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3585_7']")
  	public static WebElement  InterDepartmentalJVELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3585_7']")
  	public static WebElement  InterDepartmentalJVELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3585_7']")
  	public static WebElement  InterDepartmentalJVELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3585_7']")
  	public static WebElement  InterDepartmentalJVELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3585_7']")
  	public static WebElement  InterDepartmentalJVELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_7+_0']")
  	public static WebElement  InterDepartmentalJVELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_7+_1']")
  	public static WebElement  InterDepartmentalJVELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_7+_2']")
  	public static WebElement  InterDepartmentalJVELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3585_7']")
  	public static WebElement  InterDepartmentalJVELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3585_7']")
  	public static WebElement  InterDepartmentalJVELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3585_7']")
  	public static WebElement  InterDepartmentalJVELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3585_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  InterDepartmentalJVELV_CloseBtnINDC;
   
   //////////////
   
	// NonStandardJournalEntries External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3584_5']")
  	public static WebElement  NonStandardjournalEntriesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3584_5']")
  	public static WebElement  NonStandardjournalEntriesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3584_5']")
  	public static WebElement  NonStandardjournalEntriesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3584_5']")
  	public static WebElement  NonStandardjournalEntriesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3584_5']")
  	public static WebElement  NonStandardjournalEntriesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3584_5']")
  	public static WebElement  NonStandardjournalEntriesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_5+_0']")
  	public static WebElement  NonStandardjournalEntriesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_5+_1']")
  	public static WebElement  NonStandardjournalEntriesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_5+_2']")
  	public static WebElement  NonStandardjournalEntriesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3584_5']")
  	public static WebElement  NonStandardjournalEntriesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3584_5']")
  	public static WebElement  NonStandardjournalEntriesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3584_5']")
  	public static WebElement  NonStandardjournalEntriesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3584_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  NonStandardjournalEntriesEFES_CloseBtnINDC; 
   
   
   // NonStandardJournalEntries Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3584_7']")
  	public static WebElement  nonStandardJournalEntriesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3584_7']")
  	public static WebElement  nonStandardJournalEntriesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3584_7']")
  	public static WebElement  nonStandardJournalEntriesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3584_7']")
  	public static WebElement  nonStandardJournalEntriesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3584_7']")
  	public static WebElement  nonStandardJournalEntriesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3584_7']")
  	public static WebElement  nonStandardJournalEntriesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_7+_0']")
  	public static WebElement  nonStandardJournalEntriesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_7+_1']")
  	public static WebElement  nonStandardJournalEntriesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_7+_2']")
  	public static WebElement  nonStandardJournalEntriesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3584_7']")
  	public static WebElement  nonStandardJournalEntriesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3584_7']")
  	public static WebElement  nonStandardJournalEntriesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3584_7']")
  	public static WebElement  nonStandardJournalEntriesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3584_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  nonStandardJournalEntriesELV_CloseBtnINDC;
   
   ///////////////
   
	// DebitNotes External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3840_5']")
  	public static WebElement  debitNotesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3840_5']")
  	public static WebElement  debitNotesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3840_5']")
  	public static WebElement  debitNotesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3840_5']")
  	public static WebElement  debitNotesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3840_5']")
  	public static WebElement  debitNotesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3840_5']")
  	public static WebElement  debitNotesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_5+_0']")
  	public static WebElement  debitNotesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_5+_1']")
  	public static WebElement  debitNotesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_5+_2']")
  	public static WebElement  debitNotesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3840_5']")
  	public static WebElement  debitNotesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3840_5']")
  	public static WebElement  debitNotesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3840_5']")
  	public static WebElement  debitNotesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3840_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  debitNotesEFES_CloseBtnINDC; 
   
   
   // DebitNotes Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3840_7']")
  	public static WebElement  debitNotesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3840_7']")
  	public static WebElement  debitNotesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3840_7']")
  	public static WebElement  debitNotesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3840_7']")
  	public static WebElement  debitNotesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3840_7']")
  	public static WebElement  debitNotesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3840_7']")
  	public static WebElement  debitNotesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_7+_0']")
  	public static WebElement  debitNotesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_7+_1']")
  	public static WebElement  debitNotesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_7+_2']")
  	public static WebElement  debitNotesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3840_7']")
  	public static WebElement  debitNotesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3840_7']")
  	public static WebElement  debitNotesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3840_7']")
  	public static WebElement  debitNotesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3840_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  debitNotesELV_CloseBtnINDC;
   
   /////////////
   
	// DebitNotesLineWise External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3586_5']")
  	public static WebElement  debitNotesLineWiseEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3586_5']")
  	public static WebElement  debitNotesLineWiseEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3586_5']")
  	public static WebElement  debitNotesLineWiseEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3586_5']")
  	public static WebElement  debitNotesLineWiseEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3586_5']")
  	public static WebElement  debitNotesLineWiseEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3586_5']")
  	public static WebElement  debitNotesLineWiseEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_5+_0']")
  	public static WebElement  debitNotesLineWiseEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_5+_1']")
  	public static WebElement  debitNotesLineWiseEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_5+_2']")
  	public static WebElement  debitNotesLineWiseEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3586_5']")
  	public static WebElement  debitNotesLineWiseEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3586_5']")
  	public static WebElement  debitNotesLineWiseEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3586_5']")
  	public static WebElement  debitNotesLineWiseEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3586_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  debitNotesLineWiseEFES_CloseBtnINDC; 
   
   
   // DebitNotesLineWise Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3586_7']")
  	public static WebElement  debitNotesLineWiseELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3586_7']")
  	public static WebElement  debitNotesLineWiseELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3586_7']")
  	public static WebElement  debitNotesLineWiseELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3586_7']")
  	public static WebElement  debitNotesLineWiseELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3586_7']")
  	public static WebElement  debitNotesLineWiseELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3586_7']")
  	public static WebElement  debitNotesLineWiseELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_7+_0']")
  	public static WebElement  debitNotesLineWiseELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_7+_1']")
  	public static WebElement  debitNotesLineWiseELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_7+_2']")
  	public static WebElement  debitNotesLineWiseELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3586_7']")
  	public static WebElement  debitNotesLineWiseELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3586_7']")
  	public static WebElement  debitNotesLineWiseELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3586_7']")
  	public static WebElement  debitNotesLineWiseELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3586_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  debitNotesLineWiseELV_CloseBtnINDC;
   
   /////////////////////
   
	// CreditNotes External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4096_5']")
  	public static WebElement  creditNotesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4096_5']")
  	public static WebElement  creditNotesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_4096_5']")
  	public static WebElement  creditNotesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_4096_5']")
  	public static WebElement  creditNotesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_4096_5']")
  	public static WebElement  creditNotesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4096_5']")
  	public static WebElement  creditNotesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_5+_0']")
  	public static WebElement  creditNotesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_5+_1']")
  	public static WebElement  creditNotesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_5+_2']")
  	public static WebElement  creditNotesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4096_5']")
  	public static WebElement  creditNotesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_4096_5']")
  	public static WebElement  creditNotesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_4096_5']")
  	public static WebElement  creditNotesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_4096_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  creditNotesEFES_CloseBtnINDC; 
   
   
   // CreditNotes Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4096_7']")
  	public static WebElement  creditNotesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4096_7']")
  	public static WebElement  creditNotesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_4096_7']")
  	public static WebElement  creditNotesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_4096_7']")
  	public static WebElement  creditNotesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_4096_7']")
  	public static WebElement  creditNotesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4096_7']")
  	public static WebElement  creditNotesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_7+_0']")
  	public static WebElement  creditNotesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_7+_1']")
  	public static WebElement  creditNotesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_7+_2']")
  	public static WebElement  creditNotesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4096_7']")
  	public static WebElement  creditNotesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_4096_7']")
  	public static WebElement  creditNotesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_4096_7']")
  	public static WebElement  creditNotesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_4096_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  creditNotesELV_CloseBtnINDC;
   
   ///////////////////
   
	// CreditNotesLineWise External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3587_5']")
  	public static WebElement  creditNotesLineWiseEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3587_5']")
  	public static WebElement  creditNotesLineWiseEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3587_5']")
  	public static WebElement  creditNotesLineWiseEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3587_5']")
  	public static WebElement  creditNotesLineWiseEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3587_5']")
  	public static WebElement  creditNotesLineWiseEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3587_5']")
  	public static WebElement  creditNotesLineWiseEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_5+_0']")
  	public static WebElement  creditNotesLineWiseEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_5+_1']")
  	public static WebElement  creditNotesLineWiseEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_5+_2']")
  	public static WebElement  creditNotesLineWiseEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3587_5']")
  	public static WebElement  creditNotesLineWiseEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3587_5']")
  	public static WebElement  creditNotesLineWiseEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3587_5']")
  	public static WebElement  creditNotesLineWiseEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3587_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  creditNotesLineWiseEFES_CloseBtnINDC; 
   
   
   // CreditNotesLineWise Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3587_7']")
  	public static WebElement  creditNotesLineWiseELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3587_7']")
  	public static WebElement  creditNotesLineWiseELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3587_7']")
  	public static WebElement  creditNotesLineWiseELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3587_7']")
  	public static WebElement  creditNotesLineWiseELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3587_7']")
  	public static WebElement  creditNotesLineWiseELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3587_7']")
  	public static WebElement  creditNotesLineWiseELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_7+_0']")
  	public static WebElement  creditNotesLineWiseELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_7+_1']")
  	public static WebElement  creditNotesLineWiseELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_7+_2']")
  	public static WebElement  creditNotesLineWiseELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3587_7']")
  	public static WebElement  creditNotesLineWiseELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3587_7']")
  	public static WebElement  creditNotesLineWiseELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3587_7']")
  	public static WebElement  creditNotesLineWiseELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3587_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  creditNotesLineWiseELV_CloseBtnINDC;
   
   
   ///////////////////////////
   
	// OpeningBalances External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_256_5']")
  	public static WebElement  openingBalancesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_256_5']")
  	public static WebElement  openingBalancesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_256_5']")
  	public static WebElement  openingBalancesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_256_5']")
  	public static WebElement  openingBalancesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_256_5']")
  	public static WebElement  openingBalancesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_256_5']")
  	public static WebElement  openingBalancesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_256_5+_0']")
  	public static WebElement  openingBalancesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_256_5+_1']")
  	public static WebElement  openingBalancesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_256_5+_2']")
  	public static WebElement  openingBalancesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_256_5']")
  	public static WebElement  openingBalancesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_256_5']")
  	public static WebElement  openingBalancesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_256_5']")
  	public static WebElement  openingBalancesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_256_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  openingBalancesEFES_CloseBtnINDC; 
   
   
   // OpeningBalances Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_256_7']")
  	public static WebElement  openingBalancesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_256_7']")
  	public static WebElement  openingBalancesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_256_7']")
  	public static WebElement  openingBalancesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_256_7']")
  	public static WebElement  openingBalancesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_256_7']")
  	public static WebElement  openingBalancesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_256_7']")
  	public static WebElement  openingBalancesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_256_7+_0']")
  	public static WebElement  openingBalancesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_256_7+_1']")
  	public static WebElement  openingBalancesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_256_7+_2']")
  	public static WebElement  openingBalancesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_256_7']")
  	public static WebElement  openingBalancesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_256_7']")
  	public static WebElement  openingBalancesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_256_7']")
  	public static WebElement  openingBalancesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_256_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  openingBalancesELV_CloseBtnINDC;
   
   
   //////////////////////////////////
   
	// FixedAssetDepreciationVoucher External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3588_5']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3588_5']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3588_5']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3588_5']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3588_5']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3588_5']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_5+_0']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_5+_1']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_5+_2']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3588_5']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3588_5']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3588_5']")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3588_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  fixedAssetDepreciationVoucherEFES_CloseBtnINDC; 
   
   
   // FixedAssetDepreciationVoucher Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3588_7']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3588_7']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3588_7']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3588_7']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3588_7']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3588_7']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_7+_0']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_7+_1']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_7+_2']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3588_7']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3588_7']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3588_7']")
  	public static WebElement  fixedAssetDepreciationVoucherELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3588_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  fixedAssetDepreciationVoucherELV_CloseBtnINDC;
   
   /////////////////////
   
	// RequestForQuote External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8192_5']")
  	public static WebElement  requestForQuoteEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8192_5']")
  	public static WebElement  requestForQuoteEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_8192_5']")
  	public static WebElement  requestForQuoteEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_8192_5']")
  	public static WebElement  requestForQuoteEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_8192_5']")
  	public static WebElement  requestForQuoteEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8192_5']")
  	public static WebElement  requestForQuoteEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_5+_0']")
  	public static WebElement  requestForQuoteEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_5+_1']")
  	public static WebElement  requestForQuoteEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_5+_2']")
  	public static WebElement  requestForQuoteEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8192_5']")
  	public static WebElement  requestForQuoteEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_8192_5']")
  	public static WebElement  requestForQuoteEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_8192_5']")
  	public static WebElement  requestForQuoteEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_8192_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  requestForQuoteEFES_CloseBtnINDC; 
   
   
   // RequestForQuote Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8192_7']")
  	public static WebElement  requestForQuoteELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8192_7']")
  	public static WebElement  requestForQuoteELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_8192_7']")
  	public static WebElement  requestForQuoteELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_8192_7']")
  	public static WebElement  requestForQuoteELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_8192_7']")
  	public static WebElement  requestForQuoteELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8192_7']")
  	public static WebElement  requestForQuoteELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_7+_0']")
  	public static WebElement  requestForQuoteELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_7+_1']")
  	public static WebElement  requestForQuoteELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_7+_2']")
  	public static WebElement  requestForQuoteELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8192_7']")
  	public static WebElement  requestForQuoteELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_8192_7']")
  	public static WebElement  requestForQuoteELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_8192_7']")
  	public static WebElement  requestForQuoteELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_8192_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  requestForQuoteELV_CloseBtnINDC;
   
   //////////////////////
   
	// PurchasesQuotations External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2304_5']")
  	public static WebElement  purchasesQuotationsEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2304_5']")
  	public static WebElement  purchasesQuotationsEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_2304_5']")
  	public static WebElement  purchasesQuotationsEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_2304_5']")
  	public static WebElement  purchasesQuotationsEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_2304_5']")
  	public static WebElement  purchasesQuotationsEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2304_5']")
  	public static WebElement  purchasesQuotationsEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_5+_0']")
  	public static WebElement  purchasesQuotationsEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_5+_1']")
  	public static WebElement  purchasesQuotationsEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_5+_2']")
  	public static WebElement  purchasesQuotationsEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2304_5']")
  	public static WebElement  purchasesQuotationsEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_2304_5']")
  	public static WebElement  purchasesQuotationsEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_2304_5']")
  	public static WebElement  purchasesQuotationsEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_2304_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  purchasesQuotationsEFES_CloseBtnINDC; 
   
   
   // PurchasesQuotations Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2304_7']")
  	public static WebElement  purchasesQuotationsELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2304_7']")
  	public static WebElement  purchasesQuotationsELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_2304_7']")
  	public static WebElement  purchasesQuotationsELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_2304_7']")
  	public static WebElement  purchasesQuotationsELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_2304_7']")
  	public static WebElement  purchasesQuotationsELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2304_7']")
  	public static WebElement  purchasesQuotationsELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_7+_0']")
  	public static WebElement  purchasesQuotationsELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_7+_1']")
  	public static WebElement  purchasesQuotationsELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_7+_2']")
  	public static WebElement  purchasesQuotationsELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2304_7']")
  	public static WebElement  purchasesQuotationsELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_2304_7']")
  	public static WebElement  purchasesQuotationsELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_2304_7']")
  	public static WebElement  purchasesQuotationsELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_2304_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  purchasesQuotationsELV_CloseBtnINDC;
   
   
   ///////////////////////////
   
	// PurchasesOrders External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2560_5']")
  	public static WebElement  purchasesOrdersEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2560_5']")
  	public static WebElement  purchasesOrdersEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_2560_5']")
  	public static WebElement  purchasesOrdersEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_2560_5']")
  	public static WebElement  purchasesOrdersEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_2560_5']")
  	public static WebElement  purchasesOrdersEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2560_5']")
  	public static WebElement  purchasesOrdersEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_5+_0']")
  	public static WebElement  purchasesOrdersEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_5+_1']")
  	public static WebElement  purchasesOrdersEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_5+_2']")
  	public static WebElement  purchasesOrdersEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2560_5']")
  	public static WebElement  purchasesOrdersEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_2560_5']")
  	public static WebElement  purchasesOrdersEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_2560_5']")
  	public static WebElement  purchasesOrdersEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_2560_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  purchasesOrdersEFES_CloseBtnINDC; 
   
   
   // PurchasesOrders Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2560_7']")
  	public static WebElement  purchasesOrdersELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2560_7']")
  	public static WebElement  purchasesOrdersELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_2560_7']")
  	public static WebElement  purchasesOrdersELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_2560_7']")
  	public static WebElement  purchasesOrdersELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_2560_7']")
  	public static WebElement  purchasesOrdersELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2560_7']")
  	public static WebElement  purchasesOrdersELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_7+_0']")
  	public static WebElement  purchasesOrdersELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_7+_1']")
  	public static WebElement  purchasesOrdersELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_7+_2']")
  	public static WebElement  purchasesOrdersELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2560_7']")
  	public static WebElement  purchasesOrdersELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_2560_7']")
  	public static WebElement  purchasesOrdersELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_2560_7']")
  	public static WebElement  purchasesOrdersELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_2560_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  purchasesOrdersELV_CloseBtnINDC;
   
   /////////////////////////
   

	// MaterialReceiptNotes External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1280_5']")
  	public static WebElement  materialReceiptNotesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1280_5']")
  	public static WebElement  materialReceiptNotesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_1280_5']")
  	public static WebElement  materialReceiptNotesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_1280_5']")
  	public static WebElement  materialReceiptNotesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_1280_5']")
  	public static WebElement  materialReceiptNotesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1280_5']")
  	public static WebElement  materialReceiptNotesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_5+_0']")
  	public static WebElement  materialReceiptNotesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_5+_1']")
  	public static WebElement  materialReceiptNotesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_5+_2']")
  	public static WebElement  materialReceiptNotesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1280_5']")
  	public static WebElement  materialReceiptNotesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_1280_5']")
  	public static WebElement  materialReceiptNotesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_1280_5']")
  	public static WebElement  materialReceiptNotesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_1280_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  materialReceiptNotesEFES_CloseBtnINDC; 
   
   
   // MaterialReceiptNotes Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1280_7']")
  	public static WebElement  materialReceiptNotesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1280_7']")
  	public static WebElement  materialReceiptNotesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_1280_7']")
  	public static WebElement  materialReceiptNotesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_1280_7']")
  	public static WebElement  materialReceiptNotesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_1280_7']")
  	public static WebElement  materialReceiptNotesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1280_7']")
  	public static WebElement  materialReceiptNotesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_7+_0']")
  	public static WebElement  materialReceiptNotesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_7+_1']")
  	public static WebElement  materialReceiptNotesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_7+_2']")
  	public static WebElement  materialReceiptNotesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1280_7']")
  	public static WebElement  materialReceiptNotesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_1280_7']")
  	public static WebElement  materialReceiptNotesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_1280_7']")
  	public static WebElement  materialReceiptNotesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_1280_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  materialReceiptNotesELV_CloseBtnINDC;
   
   
   /////////////////////
   
//SalesQuotations External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7424_5']")
  	public static WebElement  salesQuotationsEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7424_5']")
  	public static WebElement  salesQuotationsEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_7424_5']")
  	public static WebElement  salesQuotationsEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_7424_5']")
  	public static WebElement  salesQuotationsEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_7424_5']")
  	public static WebElement  salesQuotationsEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7424_5']")
  	public static WebElement  salesQuotationsEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_5+_0']")
  	public static WebElement  salesQuotationsEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_5+_1']")
  	public static WebElement  salesQuotationsEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_5+_2']")
  	public static WebElement  salesQuotationsEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7424_5']")
  	public static WebElement  salesQuotationsEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_7424_5']")
  	public static WebElement  salesQuotationsEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_7424_5']")
  	public static WebElement  salesQuotationsEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_7424_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  salesQuotationsEFES_CloseBtnINDC; 
   
   
   // SalesQuotations Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7424_7']")
  	public static WebElement  salesQuotationsELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7424_7']")
  	public static WebElement  salesQuotationsELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_7424_7']")
  	public static WebElement  salesQuotationsELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_7424_7']")
  	public static WebElement  salesQuotationsELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_7424_7']")
  	public static WebElement  salesQuotationsELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7424_7']")
  	public static WebElement  salesQuotationsELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_7+_0']")
  	public static WebElement  salesQuotationsELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_7+_1']")
  	public static WebElement  salesQuotationsELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_7+_2']")
  	public static WebElement  salesQuotationsELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7424_7']")
  	public static WebElement  salesQuotationsELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_7424_7']")
  	public static WebElement  salesQuotationsELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_7424_7']")
  	public static WebElement  salesQuotationsELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_7424_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  salesQuotationsELV_CloseBtnINDC;
   
   
   ////////////////////////////
   
//DeliveryNotes External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_6144_5']")
  	public static WebElement  deliveryNotesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_6144_5']")
  	public static WebElement  deliveryNotesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_6144_5']")
  	public static WebElement  deliveryNotesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_6144_5']")
  	public static WebElement  deliveryNotesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_6144_5']")
  	public static WebElement  deliveryNotesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_6144_5']")
  	public static WebElement  deliveryNotesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_5+_0']")
  	public static WebElement  deliveryNotesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_5+_1']")
  	public static WebElement  deliveryNotesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_5+_2']")
  	public static WebElement  deliveryNotesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_6144_5']")
  	public static WebElement  deliveryNotesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_6144_5']")
  	public static WebElement  deliveryNotesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_6144_5']")
  	public static WebElement  deliveryNotesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_6144_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  deliveryNotesEFES_CloseBtnINDC; 
   
   
   // DeliveryNotes Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_6144_7']")
  	public static WebElement  deliveryNotesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_6144_7']")
  	public static WebElement  deliveryNotesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_6144_7']")
  	public static WebElement  deliveryNotesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_6144_7']")
  	public static WebElement  deliveryNotesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_6144_7']")
  	public static WebElement  deliveryNotesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_6144_7']")
  	public static WebElement  deliveryNotesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_7+_0']")
  	public static WebElement  deliveryNotesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_7+_1']")
  	public static WebElement  deliveryNotesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_7+_2']")
  	public static WebElement  deliveryNotesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_6144_7']")
  	public static WebElement  deliveryNotesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_6144_7']")
  	public static WebElement  deliveryNotesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_6144_7']")
  	public static WebElement  deliveryNotesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_6144_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  deliveryNotesELV_CloseBtnINDC;
   
   
   /////////////////
   

	// PosSales External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3331_5']")
  	public static WebElement  posSalesEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3331_5']")
  	public static WebElement  posSalesEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3331_5']")
  	public static WebElement  posSalesEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3331_5']")
  	public static WebElement  posSalesEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3331_5']")
  	public static WebElement  posSalesEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3331_5']")
  	public static WebElement  posSalesEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_5+_0']")
  	public static WebElement  posSalesEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_5+_1']")
  	public static WebElement  posSalesEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_5+_2']")
  	public static WebElement  posSalesEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3331_5']")
  	public static WebElement  posSalesEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3331_5']")
  	public static WebElement  posSalesEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3331_5']")
  	public static WebElement  posSalesEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3331_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  posSalesEFES_CloseBtnINDC; 
   
   
   // PosSales Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3331_7']")
  	public static WebElement  posSalesELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3331_7']")
  	public static WebElement  posSalesELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3331_7']")
  	public static WebElement  posSalesELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3331_7']")
  	public static WebElement  posSalesELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3331_7']")
  	public static WebElement  posSalesELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3331_7']")
  	public static WebElement  posSalesELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_7+_0']")
  	public static WebElement  posSalesELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_7+_1']")
  	public static WebElement  posSalesELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_7+_2']")
  	public static WebElement  posSalesELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3331_7']")
  	public static WebElement  posSalesELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3331_7']")
  	public static WebElement  posSalesELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3331_7']")
  	public static WebElement  posSalesELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3331_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  posSalesELV_CloseBtnINDC;
   
   /////////////////
   
	// ProductionOrders External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5633_5']")
  	public static WebElement  productionOrdersEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5633_5']")
  	public static WebElement  productionOrdersEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_5633_5']")
  	public static WebElement  productionOrdersEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_5633_5']")
  	public static WebElement  productionOrdersEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_5633_5']")
  	public static WebElement  productionOrdersEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5633_5']")
  	public static WebElement  productionOrdersEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_5+_0']")
  	public static WebElement  productionOrdersEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_5+_1']")
  	public static WebElement  productionOrdersEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_5+_2']")
  	public static WebElement  productionOrdersEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5633_5']")
  	public static WebElement  productionOrdersEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_5633_5']")
  	public static WebElement  productionOrdersEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_5633_5']")
  	public static WebElement  productionOrdersEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_5633_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  productionOrdersEFES_CloseBtnINDC; 
   
   
   // ProductionOrders Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5633_7']")
  	public static WebElement  productionOrdersELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5633_7']")
  	public static WebElement  productionOrdersELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_5633_7']")
  	public static WebElement  productionOrdersELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_5633_7']")
  	public static WebElement  productionOrdersELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_5633_7']")
  	public static WebElement  productionOrdersELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5633_7']")
  	public static WebElement  productionOrdersELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_7+_0']")
  	public static WebElement  productionOrdersELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_7+_1']")
  	public static WebElement  productionOrdersELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_7+_2']")
  	public static WebElement  productionOrdersELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5633_7']")
  	public static WebElement  productionOrdersELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_5633_7']")
  	public static WebElement  productionOrdersELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_5633_7']")
  	public static WebElement  productionOrdersELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_5633_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  productionOrdersELV_CloseBtnINDC;
   
   
   /////////////////////////
   
	// SalesOrders External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5632_5']")
  	public static WebElement  salesOrdersEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5632_5']")
  	public static WebElement  salesOrdersEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_5632_5']")
  	public static WebElement  salesOrdersEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_5632_5']")
  	public static WebElement  salesOrdersEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_5632_5']")
  	public static WebElement  salesOrdersEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5632_5']")
  	public static WebElement  salesOrdersEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_5+_0']")
  	public static WebElement  salesOrdersEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_5+_1']")
  	public static WebElement  salesOrdersEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_5+_2']")
  	public static WebElement  salesOrdersEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5632_5']")
  	public static WebElement  salesOrdersEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_5632_5']")
  	public static WebElement  salesOrdersEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_5632_5']")
  	public static WebElement  salesOrdersEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_5632_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  salesOrdersEFES_CloseBtnINDC; 
   
   
   // SalesOrders Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5632_7']")
  	public static WebElement  salesOrdersELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5632_7']")
  	public static WebElement  salesOrdersELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_5632_7']")
  	public static WebElement  salesOrdersELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_5632_7']")
  	public static WebElement  salesOrdersELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_5632_7']")
  	public static WebElement  salesOrdersELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5632_7']")
  	public static WebElement  salesOrdersELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_7+_0']")
  	public static WebElement  salesOrdersELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_7+_1']")
  	public static WebElement  salesOrdersELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_7+_2']")
  	public static WebElement  salesOrdersELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5632_7']")
  	public static WebElement  salesOrdersELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_5632_7']")
  	public static WebElement  salesOrdersELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_5632_7']")
  	public static WebElement  salesOrdersELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_5632_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  salesOrdersELV_CloseBtnINDC;
   
   
   ////////////////////////////
   
	// ShortageInStocks External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5376_5']")
  	public static WebElement  shortageInStocksEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5376_5']")
  	public static WebElement  shortageInStocksEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_5376_5']")
  	public static WebElement  shortageInStocksEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_5376_5']")
  	public static WebElement  shortageInStocksEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_5376_5']")
  	public static WebElement  shortageInStocksEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5376_5']")
  	public static WebElement  shortageInStocksEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_5+_0']")
  	public static WebElement  shortageInStocksEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_5+_1']")
  	public static WebElement  shortageInStocksEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_5+_2']")
  	public static WebElement  shortageInStocksEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5376_5']")
  	public static WebElement  shortageInStocksEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_5376_5']")
  	public static WebElement  shortageInStocksEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_5376_5']")
  	public static WebElement  shortageInStocksEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_5376_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  shortageInStocksEFES_CloseBtnINDC; 
   
   
   // ShortageInStocks Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5376_7']")
  	public static WebElement  shortageInStocksELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5376_7']")
  	public static WebElement  shortageInStocksELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_5376_7']")
  	public static WebElement  shortageInStocksELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_5376_7']")
  	public static WebElement  shortageInStocksELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_5376_7']")
  	public static WebElement  shortageInStocksELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5376_7']")
  	public static WebElement  shortageInStocksELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_7+_0']")
  	public static WebElement  shortageInStocksELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_7+_1']")
  	public static WebElement  shortageInStocksELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_7+_2']")
  	public static WebElement  shortageInStocksELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5376_7']")
  	public static WebElement  shortageInStocksELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_5376_7']")
  	public static WebElement  shortageInStocksELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_5376_7']")
  	public static WebElement  shortageInStocksELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_5376_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  shortageInStocksELV_CloseBtnINDC;
   
   /////////////////////////////
   
	// ExcessInStocks External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2048_5']")
  	public static WebElement  excessInStocksEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2048_5']")
  	public static WebElement  excessInStocksEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_2048_5']")
  	public static WebElement  excessInStocksEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_2048_5']")
  	public static WebElement  excessInStocksEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_2048_5']")
  	public static WebElement  excessInStocksEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2048_5']")
  	public static WebElement  excessInStocksEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_5+_0']")
  	public static WebElement  excessInStocksEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_5+_1']")
  	public static WebElement  excessInStocksEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_5+_2']")
  	public static WebElement  excessInStocksEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2048_5']")
  	public static WebElement  excessInStocksEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_2048_5']")
  	public static WebElement  excessInStocksEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_2048_5']")
  	public static WebElement  excessInStocksEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_2048_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  excessInStocksEFES_CloseBtnINDC; 
   
   
   // ExcessInStocks Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2048_7']")
  	public static WebElement  excessInStocksELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2048_7']")
  	public static WebElement  excessInStocksELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_2048_7']")
  	public static WebElement  excessInStocksELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_2048_7']")
  	public static WebElement  excessInStocksELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_2048_7']")
  	public static WebElement  excessInStocksELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2048_7']")
  	public static WebElement  excessInStocksELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_7+_0']")
  	public static WebElement  excessInStocksELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_7+_1']")
  	public static WebElement  excessInStocksELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_7+_2']")
  	public static WebElement  excessInStocksELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2048_7']")
  	public static WebElement  excessInStocksELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_2048_7']")
  	public static WebElement  excessInStocksELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_2048_7']")
  	public static WebElement  excessInStocksELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_2048_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  excessInStocksELV_CloseBtnINDC;
   
   ///////////////////////
   
	// StockTransfers External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3072_5']")
  	public static WebElement  stockTransfersEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3072_5']")
  	public static WebElement  stockTransfersEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3072_5']")
  	public static WebElement  stockTransfersEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3072_5']")
  	public static WebElement  stockTransfersEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3072_5']")
  	public static WebElement  stockTransfersEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3072_5']")
  	public static WebElement  stockTransfersEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_5+_0']")
  	public static WebElement  stockTransfersEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_5+_1']")
  	public static WebElement  stockTransfersEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_5+_2']")
  	public static WebElement  stockTransfersEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3072_5']")
  	public static WebElement  stockTransfersEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3072_5']")
  	public static WebElement  stockTransfersEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3072_5']")
  	public static WebElement  stockTransfersEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3072_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  stockTransfersEFES_CloseBtnINDC; 
   
   
   // StockTransfers Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3072_7']")
  	public static WebElement  stockTransfersELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3072_7']")
  	public static WebElement  stockTransfersELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_3072_7']")
  	public static WebElement  stockTransfersELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_3072_7']")
  	public static WebElement  stockTransfersELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_3072_7']")
  	public static WebElement  stockTransfersELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3072_7']")
  	public static WebElement  stockTransfersELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_7+_0']")
  	public static WebElement  stockTransfersELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_7+_1']")
  	public static WebElement  stockTransfersELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_7+_2']")
  	public static WebElement  stockTransfersELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3072_7']")
  	public static WebElement  stockTransfersELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_3072_7']")
  	public static WebElement  stockTransfersELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_3072_7']")
  	public static WebElement  stockTransfersELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_3072_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  stockTransfersELV_CloseBtnINDC;
   
   
   /////////////////////////
   
	// OpeningStocks External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_512_5']")
  	public static WebElement  openingStocksEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_512_5']")
  	public static WebElement  openingStocksEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_512_5']")
  	public static WebElement  openingStocksEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_512_5']")
  	public static WebElement  openingStocksEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_512_5']")
  	public static WebElement  openingStocksEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_512_5']")
  	public static WebElement  openingStocksEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_512_5+_0']")
  	public static WebElement  openingStocksEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_512_5+_1']")
  	public static WebElement  openingStocksEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_512_5+_2']")
  	public static WebElement  openingStocksEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_512_5']")
  	public static WebElement  openingStocksEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_512_5']")
  	public static WebElement  openingStocksEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_512_5']")
  	public static WebElement  openingStocksEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_512_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  openingStocksEFES_CloseBtnINDC; 
   
   
   // OpeningStocks Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_512_7']")
  	public static WebElement  openingStocksELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_512_7']")
  	public static WebElement  openingStocksELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_512_7']")
  	public static WebElement  openingStocksELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_512_7']")
  	public static WebElement  openingStocksELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_512_7']")
  	public static WebElement  openingStocksELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_512_7']")
  	public static WebElement  openingStocksELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_512_7+_0']")
  	public static WebElement  openingStocksELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_512_7+_1']")
  	public static WebElement  openingStocksELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_512_7+_2']")
  	public static WebElement  openingStocksELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_512_7']")
  	public static WebElement  openingStocksELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_512_7']")
  	public static WebElement  openingStocksELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_512_7']")
  	public static WebElement  openingStocksELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_512_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  openingStocksELV_CloseBtnINDC;
   
   /////////////////////////////
   
	// MaterialRequisition External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7936_5']")
  	public static WebElement  materialRequisitionEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7936_5']")
  	public static WebElement  materialRequisitionEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_7936_5']")
  	public static WebElement  materialRequisitionEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_7936_5']")
  	public static WebElement  materialRequisitionEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_7936_5']")
  	public static WebElement  materialRequisitionEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7936_5']")
  	public static WebElement  materialRequisitionEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_5+_0']")
  	public static WebElement  materialRequisitionEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_5+_1']")
  	public static WebElement  materialRequisitionEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_5+_2']")
  	public static WebElement  materialRequisitionEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7936_5']")
  	public static WebElement  materialRequisitionEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_7936_5']")
  	public static WebElement  materialRequisitionEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_7936_5']")
  	public static WebElement  materialRequisitionEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_7936_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  materialRequisitionEFES_CloseBtnINDC; 
   
   
   // MaterialRequisition Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7936_7']")
  	public static WebElement  materialRequisitionELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7936_7']")
  	public static WebElement  materialRequisitionELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_7936_7']")
  	public static WebElement  materialRequisitionELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_7936_7']")
  	public static WebElement  materialRequisitionELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_7936_7']")
  	public static WebElement  materialRequisitionELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7936_7']")
  	public static WebElement  materialRequisitionELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_7+_0']")
  	public static WebElement  materialRequisitionELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_7+_1']")
  	public static WebElement  materialRequisitionELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_7+_2']")
  	public static WebElement  materialRequisitionELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7936_7']")
  	public static WebElement  materialRequisitionELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_7936_7']")
  	public static WebElement  materialRequisitionELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_7936_7']")
  	public static WebElement  materialRequisitionELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_7936_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  materialRequisitionELV_CloseBtnINDC;
   
   
   //////////////////////////////////////
   
   // stockAdjustment External Functions/ Edit Screen---EFES
	
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1023_5']")
  	public static WebElement  stockAdjustmentEFES_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1023_5']")
  	public static WebElement  stockAdjustmentEFES_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_1023_5']")
  	public static WebElement  stockAdjustmentEFES_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_1023_5']")
  	public static WebElement  stockAdjustmentEFES_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_1023_5']")
  	public static WebElement  stockAdjustmentEFES_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1023_5']")
  	public static WebElement  stockAdjustmentEFES_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_5+_0']")
  	public static WebElement  stockAdjustmentEFES_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_5+_1']")
  	public static WebElement  stockAdjustmentEFES_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_5+_2']")
  	public static WebElement  stockAdjustmentEFES_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1023_5']")
  	public static WebElement  stockAdjustmentEFES_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_1023_5']")
  	public static WebElement  stockAdjustmentEFES_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_1023_5']")
  	public static WebElement  stockAdjustmentEFES_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_1023_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  stockAdjustmentEFES_CloseBtnINDC; 
   
   
   // StockAdjustment Edit Layout/ Views-----ELV
   
   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1023_7']")
  	public static WebElement  stockAdjustmentELV_onEventDropdown; 

   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1023_7']")
  	public static WebElement  stockAdjustmentELV_ButtonCaptionTxt; 
   
   @FindBy(xpath="//select[@id='cmbModuleType_VT_1023_7']")
  	public static WebElement  stockAdjustmentELV_ModuleTypeDropdown;
		
   @FindBy(xpath="//input[@id='txtModuleName_VT_1023_7']")
  	public static WebElement  stockAdjustmentELV_ModuleNameOrURlTxt; 
   
   @FindBy(xpath="//select[@id='cmbClassname_VT_1023_7']")
  	public static WebElement  stockAdjustmentELV_ClassNameDropdown;
		
   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1023_7']")
  	public static WebElement  stockAdjustmentELV_FunctionNameDropdown; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_7+_0']")
  	public static WebElement  stockAdjustmentELV_AvailableInToolBarRadio;
		
   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_7+_1']")
  	public static WebElement  stockAdjustmentELV_AvailableOnScreenRadio; 
   
   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_7+_2']")
  	public static WebElement  stockAdjustmentELV_BothRadio;
		
   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1023_7']")
  	public static WebElement  stockAdjustmentELV_ExecuteOnServerChkBox; 
   
   @FindBy(xpath="//input[@id='btnInsert_VT_1023_7']")
  	public static WebElement  stockAdjustmentELV_InsertBtn;
		
   @FindBy(xpath="//input[@id='btnRemove_VT_1023_7']")
  	public static WebElement  stockAdjustmentELV_RemoveBtn; 
   
   @FindBy(xpath="//div[@id='dvDLLS_VT_1023_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
  	public static WebElement  stockAdjustmentELV_CloseBtnINDC;
   
   
   
   //////////////////////////////////////////////////////////////////////
   
   
   
   //Grid Elements
   
   @FindBy(xpath="//section[@id='page_Content']//tr[1]//td[1]//input[1]")
  	public static WebElement  selectRow1ChkBox; 
   
   @FindBy(xpath="//section[@id='page_Content']//tr[2]//td[1]//input[1]")
  	public static WebElement  selectRow2ChkBox; 
   
   ////////////////////////////////
   
   @FindBy(xpath="//a[contains(text(),'antlr.runtime.dll')]")
  	public static WebElement  antlrruntimedllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Antlr3.Runtime.dll')]")
  	public static WebElement  antlr3RuntimedllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Aspose.Pdf.Builder.dll')]")
  	public static WebElement  asposePdfBuilderdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Aspose.Pdf.dll')]")
  	public static WebElement  asposePdfdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Common.Logging.dll')]")
  	public static WebElement  commonLoggingdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Common.Logging.Log4Net.dll')]")
  	public static WebElement  commonLoggingLog4NetdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'DocumentFormat.OpenXml.dll')]")
  	public static WebElement  documentFormatOpenXmldllBtn;
		
   @FindBy(xpath="//a[contains(text(),'EPPlus.dll')]")
  	public static WebElement  ePPlusdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Facebook.dll')]")
  	public static WebElement  facebookdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'FControls.dll')]")
  	public static WebElement  fControlsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.AccountMgmt.BL.dll')]")
  	public static WebElement  focusAccountMgmtBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.AccountMgmt.DataStructs.dll')]")
  	public static WebElement  focusAccountMgmtDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Common.BL.dll')]")
  	public static WebElement  focusCommonBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Common.DataStructs.dll')]")
  	public static WebElement  focusCommonDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Company.BL.dll')]")
  	public static WebElement  focusCompanyBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Company.DataStructs.dll')]")
  	public static WebElement  focusCompanyDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.CoreMasters.BL.dll')]")
  	public static WebElement  focusCoreMastersBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.CoreMasters.DataStructs.dll')]")
  	public static WebElement  focusCoreMastersDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.CoreTransaction.BL.dll')]")
  	public static WebElement  focusCoreTransactionBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.CoreTransaction.DataStructs.dll')]")
  	public static WebElement  focusCoreTransactionDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.CreditManagement.BL.dll')]")
  	public static WebElement  focusCreditManagementBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.CreditManagement.DataStructs.dll')]")
  	public static WebElement  focusCreditManagementDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.DashBoard.BL.dll')]")
  	public static WebElement  focusDashBoardBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.DashBoard.DataStructs.dll')]")
  	public static WebElement  focusDashBoardDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.DatabaseFactory.dll')]")
  	public static WebElement  focusDatabaseFactorydllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.DataLayer.dll')]")
  	public static WebElement  focusDataLayerdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.DataManagement.BL.dll')]")
  	public static WebElement  focusDataManagementBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.DataManagement.DataStructs.dll')]")
  	public static WebElement  focusDataManagementDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.DBMnt.BL.dll')]")
  	public static WebElement  focusDBMntBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Export.dll')]")
  	public static WebElement  focusExportdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.ExternalCall.BL.dll')]")
  	public static WebElement  focusExternalCallBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.ExternalPosting.BL.dll')]")
  	public static WebElement  focusExternalPostingBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.ExternalPosting.DataStructs.dll')]")
  	public static WebElement  focusExternalPostingDataStructsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.FixedAssets.BL.dll')]")
  	public static WebElement  focusFixedAssetsBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.FixedAssets.DataStructs.dll')]")
  	public static WebElement  focusFixedAssetsDataStructsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.GST.BL.DLL')]")
  	public static WebElement  focusGSTBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.GST.DataStructs.DLL')]")
  	public static WebElement  focusGSTDataStructsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Home.BL.dll')]")
  	public static WebElement  focusHomeBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Home.DataStructs.dll')]")
  	public static WebElement  focusHomeDataStructsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.HRMS.DS.DLL')]")
  	public static WebElement  focusHRMSDSdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.HRMS.Infrastructure.dll')]")
  	public static WebElement  focusHRMSInfrastructuredllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Maintenance.BL.dll')]")
  	public static WebElement  focusMaintenanceBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Maintenance.DataStructs.dll')]")
  	public static WebElement  focusMaintenanceDataStructsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Masters.BL.dll')]")
  	public static WebElement  focusMastersBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Masters.DataStructs.dll')]")
  	public static WebElement  focusMastersDataStructsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Migration.BL.dll')]")
  	public static WebElement  focusMigrationBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.MRP.DataStructs.dll')]")
  	public static WebElement  focusMRPDataStructsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.MRP8.BL.dll')]")
  	public static WebElement  focusMRP8BLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.MRP8.DataStructs.dll')]")
  	public static WebElement  focusMRP8DataStructsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Organization.BL.dll')]")
  	public static WebElement  focusOrganizationBLdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Organization.DataStructs.dll')]")
  	public static WebElement  focusOrganizationDataStructsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Pay.Datastructs.dll')]")
  	public static WebElement  focusPayDatastructsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Pos.BusinessLayer.dll')]")
  	public static WebElement  focusPosBusinessLayerdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Pos.BusinessObjects.dll')]")
  	public static WebElement  focusPosBusinessObjectsdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Pos.Common.dll')]")
  	public static WebElement  focusPosCommondllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Pos.DataAccessLayer.dll')]")
  	public static WebElement  focusPosDataAccessLayerdllBtn;
		
   @FindBy(xpath="//a[contains(text(),'Focus.Printing.dll')]")
  	public static WebElement  focusPrintingdllBtn;
   
   @FindBy(xpath="//a[contains(text(),'Focus.Pronghorn.BL.dll')]")
  	public static WebElement  focusPronghornBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.QC.BL.dll')]")
  	public static WebElement  focusQCBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.QC.DataStructs.dll')]")
  	public static WebElement  focusQCDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.RD.BL.dll')]")
  	public static WebElement  focusRDBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.RD.DataStructs.dll')]")
  	public static WebElement  focusRDDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Security.BL.dll')]")
  	public static WebElement  focusSecurityBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Security.DataStructs.dll')]")
  	public static WebElement  focusSecurityDataStructsdllBtn; 
      
   @FindBy(xpath="//a[contains(text(),'Focus.Security.Web.dll')]")
  	public static WebElement  focusSecurityWebdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Session.BL.dll')]")
  	public static WebElement  focusSessionBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Synchronization.BL.dll')]")
  	public static WebElement  focusSynchronizationBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Synchronization.DataStructs.dll')]")
  	public static WebElement  focusSynchronizationDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Tds.BL.dll')]")
  	public static WebElement  focusTdsBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Transactions.BL.dll')]")
  	public static WebElement  focusTransactionsBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Transactions.DataStructs.dll')]")
  	public static WebElement  focusTransactionsDataStructsdllBtn; 
      
   @FindBy(xpath="//a[contains(text(),'Focus.TranSettings.BL.dll')]")
  	public static WebElement  focusTranSettingsBLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.TranSettings.DataStructs.dll')]")
  	public static WebElement  focusTranSettingsDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Web.Mvc.Controls.dll')]")
  	public static WebElement  focusWebMvcControlsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Web.Mvc.dll')]")
  	public static WebElement  focusWebMvcdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Web.Mvc.Resources.dll')]")
  	public static WebElement  focusWebMvcResourcesdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.Web.Mvc.Session.dll')]")
  	public static WebElement  focusWebMvcSessiondllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus.WMS.BL.dll')]")
  	public static WebElement  focusWMSBLdllBtn; 
      
   @FindBy(xpath="//a[contains(text(),'Focus.WMS.DataStructs.dll')]")
  	public static WebElement  focusWMSDataStructsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Focus8W.dll')]")
  	public static WebElement  focus8WdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'FocusWpfControls.dll')]")
  	public static WebElement  focusWpfControlsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'FusionCharts.dll')]")
  	public static WebElement  fusionChartsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'FWebControls.dll')]")
  	public static WebElement  fWebControlsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Google.Apis.Auth.dll')]")
  	public static WebElement  googleApisAuthdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Google.Apis.Auth.PlatformServices.dll')]")
  	public static WebElement  googleApisAuthPlatformServicesdllBtn; 
      
   @FindBy(xpath="//a[contains(text(),'Google.Apis.Core.dll')]")
  	public static WebElement  googleApisCoredllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Google.Apis.dll')]")
  	public static WebElement  googleApisdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Google.Apis.PlatformServices.dll')]")
  	public static WebElement  googleApisPlatformServicesdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Hammock.dll')]")
  	public static WebElement  hammockdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'ICSharpCode.SharpZipLib.dll')]")
  	public static WebElement  iCSharpCodeSharpZipLibdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Ionic.Zip.dll')]")
  	public static WebElement  ionicZipdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'itextsharp.dll')]")
  	public static WebElement  itextsharpdllBtn; 
      
   @FindBy(xpath="//a[contains(text(),'log4net.dll')]")
  	public static WebElement  log4netdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.Activities.Build.dll')]")
  	public static WebElement  microsoftActivitiesBuilddllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.AspNet.SignalR.Core.dll')]")
  	public static WebElement  microsoftAspNetSignalRCoredllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.AspNet.SignalR.SystemWeb.dll')]")
  	public static WebElement  microsoftAspNetSignalRSystemWebdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.Office.Interop.Outlook.DLL')]")
  	public static WebElement  microsoftOfficeInteropOutlookdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.Owin.dll')]")
  	public static WebElement  microsoftOwindllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.Owin.Host.SystemWeb.dll')]")
  	public static WebElement  microsoftOwinHostSystemWebdllBtn; 
      
   @FindBy(xpath="//a[contains(text(),'Microsoft.Owin.Security.Cookies.dll')]")
  	public static WebElement  microsoftOwinSecurityCookiesdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.Owin.Security.dll')]")
  	public static WebElement  microsoftOwinSecuritydllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.Practices.EnterpriseLibrary.Common.dll')]")
  	public static WebElement  microsoftPracticesEnterpriseLibraryCommondllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.Practices.EnterpriseLibrary.Data.dll')]")
  	public static WebElement  microsoftPracticesEnterpriseLibraryDatadllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.Practices.ObjectBuilder2.dll')]")
  	public static WebElement  microsoftPracticesObjectBuilder2dllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.Practices.Unity.dll')]")
  	public static WebElement  microsoftPracticesUnitydllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Microsoft.VisualStudio.QualityTools.UnitTestFramew')]")
  	public static WebElement  microsoftVisualStudioQualityToolsUnitTestFramew; 
    
   @FindBy(xpath="//a[contains(text(),'Microsoft.Web.Infrastructure.dll')]")
  	public static WebElement  microsoftWebInfrastructuredllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'MVC4ControlsToolkit.dll')]")
  	public static WebElement  mVvc4ControlsToolkitdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'MVCControlsToolkit.Business.dll')]")
  	public static WebElement  mvcControlsToolkitBusinessdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'MySqlSL.dll')]")
  	public static WebElement  mySqlSLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Newtonsoft.Json.dll')]")
  	public static WebElement  newtonsoftJsondllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'NPOI.dll')]")
  	public static WebElement  npoidllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'NPOI.Extension.dll')]")
  	public static WebElement  npoiExtensiondllBtn; 
      
   @FindBy(xpath="//a[contains(text(),'NPOI.OOXML.dll')]")
  	public static WebElement  npoiOOXMLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'NPOI.OpenXml4Net.dll')]")
  	public static WebElement  npoiOpenXml4NetdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'NPOI.OpenXmlFormats.dll')]")
  	public static WebElement  npoiOpenXmlFormatsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'office.DLL')]")
  	public static WebElement  officedllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'OracleSL.dll')]")
  	public static WebElement  oracleSLdllBtn; 
   
   @FindBy(xpath="//a[119]")
  	public static WebElement  owindllBtn; 
   
   @FindBy(xpath="//a[120]")
  	public static WebElement  resourcesdll1Btn; 
      
   @FindBy(xpath="//a[contains(text(),'ResPOS.dll')]")
  	public static WebElement  resPOSdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Spring.Core.dll')]")
  	public static WebElement  springCoredllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Spring.Web.dll')]")
  	public static WebElement  springWebdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Spring.Web.Mvc3.dll')]")
  	public static WebElement  springWebMvc3dllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'SqlServerSL.dll')]")
  	public static WebElement  sqlServerSLdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'SRVTextToImage.dll')]")
  	public static WebElement  srvTextToImagedllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'StackExchange.Redis.dll')]")
  	public static WebElement  stackExchangeRedisdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'stdole.dll')]")
  	public static WebElement  stdoledllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'SyntaxLayer.dll')]")
  	public static WebElement  syntaxLayerdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.ComponentModel.Composition.Registration.dll')]")
  	public static WebElement  systemComponentModelCompositionRegistrationdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.IO.Compression.dll')]")
  	public static WebElement  systemIOCompressiondllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.IO.Compression.FileSystem.dll')]")
  	public static WebElement  systemIOCompressionFileSystemdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.Net.Http.dll')]")
  	public static WebElement  systemNetHttpdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.Net.Http.WebRequest.dll')]")
  	public static WebElement  systemNetHttpWebRequestdllBtn; 
      
   @FindBy(xpath="//a[contains(text(),'System.Reflection.Context.dll')]")
  	public static WebElement  systemReflectionContextdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.ServiceModel.Internals.dll')]")
  	public static WebElement  systemServiceModelInternalsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.Web.Helpers.dll')]")
  	public static WebElement  systemWebHelpersdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.Web.Mvc.dll')]")
  	public static WebElement  systemWebMvcdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.Web.Optimization.dll')]")
  	public static WebElement  systemWebOptimizationdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.Web.Razor.dll')]")
  	public static WebElement  systemWebRazordllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.Web.WebPages.Deployment.dll')]")
  	public static WebElement  systemWebWebPagesDeploymentdllBtn; 
      
   @FindBy(xpath="//a[contains(text(),'System.Web.WebPages.dll')]")
  	public static WebElement  systemWebWebPagesdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.Web.WebPages.Razor.dll')]")
  	public static WebElement  systemWebWebPagesRazordllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.Windows.dll')]")
  	public static WebElement  systemWindowsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'System.Xml.Serialization.dll')]")
  	public static WebElement  systemXmlSerializationdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'Transitionals.dll')]")
  	public static WebElement  transitionalsdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'TweetSharp.dll')]")
  	public static WebElement  tweetSharpdllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'WebActivator.dll')]")
  	public static WebElement  webActivatordllBtn; 
      
   @FindBy(xpath="//a[contains(text(),'WebGrease.dll')]")
  	public static WebElement  webGreasedllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'WebMatrix.Data.dll')]")
  	public static WebElement  webMatrixDatadllBtn; 
   
   @FindBy(xpath="//a[contains(text(),'WebMatrix.WebData.dll')]")
  	public static WebElement  webMatrixWebDatadllBtn; 
   
   @FindBy(xpath="//a[152]")
  	public static WebElement  resourcesdll2Btn; 
   
   @FindBy(xpath="//a[153]")
  	public static WebElement  resourcesdll3Btn; 
   
   
	
 //**---------------------------------------------------------------------------------------------	
 	
 // Rules Tab	
 	
 	
 	@FindBy(xpath="//span[contains(text(),'Rules')]")
 	public static WebElement  rulesTab;

 	@FindBy(xpath="//input[@class='btn btn-link']")
 	public static WebElement clickhereToAddRuleBtn;
 	
 	@FindBy(xpath="//input[@id='txtMasterRuleName_DocCustRules']")
 	public static WebElement  ruleNameTxt;
 	
 	@FindBy(xpath="//span[@class='optioncontrol_arrow_margin icon-down-arrow']")
 	public static WebElement  ruleNameDropdown;

     @FindBy(xpath="//*[@id='txtMasterRuleName_DocCustRules_input_settings']/span")
 	public static WebElement  ruleNameSetingsBtn ;
         
         ////////////*****************pop
         
         @FindBy(xpath="//div[@id='txtMasterRuleName_DocCustRules_customize_popup_container']")
     	public static WebElement ruleNameContainer;
      
     	   @FindBy(xpath="//div[@id='txtMasterRuleName_DocCustRules_customize_popup_footer']//input[1]")
     	   public static WebElement ruleNameStandardFieldsBtn;
     	   
     				     @FindBy(xpath="//select[@id='txtMasterRuleName_DocCustRules_customize_popup_standardfields_list']")
     				     public static WebElement ruleNameStandardField_Fielddropdown;
     				
     				     @FindBy(xpath="//input[@id='txtMasterRuleName_DocCustRules_customize_popup_standardfields_header']")
     				     public static WebElement ruleNameStandardField_HeaderText;
     				
     				     @FindBy(xpath="//select[@id='txtMasterRuleName_DocCustRules_customize_popup_standardfields_alignment']")
     				     public static WebElement ruleNameStandardField_AlignmentDropdown;
     				
     				     @FindBy(xpath="//input[@id='txtMasterRuleName_DocCustRules_customize_popup_standardfields_width']")
     				     public static WebElement ruleNameStandardField_WidthText;
     				
     				     @FindBy(xpath="//section[@id='page_Content']//input[3]")
     				     public static WebElement ruleNameStandardField_okBtn;
     				
     				     @FindBy(xpath="//section[@id='page_Content']//input[4]")
     				     public static WebElement ruleNameStandardField_CanceBtn;
     	
 	    				     
 	    	  @FindBy(xpath="//div[@id='txtMasterRuleName_DocCustRules_search_container']//input[2]")
 	    	  public static WebElement ruleNameDeleteColoumnBtn;
 	    	 
 	    	  @FindBy(xpath="//section[@id='page_Content']//input[3]")
 	    	  public static WebElement ruleNameokBtn;
 	    	 
 	    	  @FindBy(xpath="//section[@id='page_Content']//input[4]")
 	    	  public static WebElement ruleNamecancelBtn;
 	
 	@FindBy(xpath="//input[@id='chkNewRecord_Rule_DocCustRules']")
 	public static WebElement rulesNewRecordChekbox ;
     
     @FindBy(xpath="//input[@id='chkEdit_Rule_DocCustRules']")
 	public static WebElement rulesEditChekbox ;
     
     @FindBy(xpath="//input[@id='chkLoad_Rule_DocCustRules']")
 	public static WebElement rulesLoadChekbox ;
   
     @FindBy(xpath="//input[@id='chkOnLeave_Rule_DocCustRules']")
 	public static WebElement rulesOnLeaveChekbox ;
     
     @FindBy(xpath="//input[@id='chkBeforeDelete_Rule_DocCustRules']")
 	public static WebElement rulesBeforeDeleteChekbox ;
     
     @FindBy(xpath="//input[@id='chkOnEnter_Rule_DocCustRules']")
 	public static WebElement rulesOnEnterChekbox ;
     
     @FindBy(xpath="//input[@id='chkIsRuleActive_Rule_DocCustRules']")
 	public static WebElement rulesActiveChekbox ;
     
     @FindBy(xpath="//input[@id='chkNoRuleCondition_DocCustRules']")
 	public static WebElement rulesNoConditionChekbox;
      
      
     //
     @FindBy(xpath="//li[@class='IF-Tab']//a")
 	public static WebElement rulesIfTab ;
     
     @FindBy(xpath="//li[@class='ELSE-Tab']//a")
 	public static WebElement rulesElseTab ;
     
     // if 
 	
     @FindBy(xpath="//input[@id='txtField_RC_1_1_DocCustRules']")
 	public static WebElement rulesIf_SelectFieldDropdown ;
     
     @FindBy(xpath="//select[@id='ddlOperators_RC_1_1_DocCustRules']")
 	public static WebElement rulesIf_OPerationTypeDropdown ;
     
     @FindBy(xpath="//select[@id='ddlCompareWith_RC_1_1_DocCustRules']")
 	public static WebElement rulesIf_CompareTypeDropdown;          //Value,Field,Formula---Related
     
     @FindBy(xpath="//input[@id='txtCompareType_RC_1_1_DocCustRules']")
 	public static WebElement rulesIf_ValueTxt;
     
     @FindBy(xpath="//select[@id='ddlConjunction_RC_1_1_DocCustRules']")
 	public static WebElement rulesIf_ConditionDropdown;          //Only,And,Or--RelatedDD
     
     
   //IF **** Customize Formatting Grid

 	@FindBy(xpath="//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[1]/a/span")
 	public static WebElement rulesIFformattingTabBtn ;
     
 	
 	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-0']")
 	public static WebElement rulesIFFormattingRow1Btn;
 	
 	@FindBy(xpath="//div[contains(text(),'Select Row')]")
 	public static WebElement rulesIFFormattingSelectRowBtn;
 	
 	@FindBy(xpath="//div[contains(text(),'Delete Row')]")
 	public static WebElement rulesIFFormattingDeleteRowBtn;
 	
 	@FindBy(xpath="//div[contains(text(),'Insert Row')]")
 	public static WebElement rulesIFFormattingInsertRowBtn;
 	
 	
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-1']")
 	public static WebElement rulesIFFormattingGridFieldName1 ;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-2']")
 	public static WebElement rulesIFFormattingGridChangeValue1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-3']")
 	public static WebElement rulesIFFormattingGridField1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-4']")
 	public static WebElement rulesIFFormattingGridValue1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-5']")
 	public static WebElement rulesIFFormattingGridCaption1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-6']")
 	public static WebElement rulesIFFormattingGridRegularExpression1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-7']")
 	public static WebElement rulesIFFormattingGridErrorMesage1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-8']")
 	public static WebElement rulesIFFormattingGridBannerText1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-9']")
 	public static WebElement rulesIFFormattingGridToolTip1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-10']")
 	public static WebElement rulesIFFormattingGridmandatory1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-11']")
 	public static WebElement rulesIFFormattingGridHidden1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-12']")
 	public static WebElement rulesIFFormattingGridDisable1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-13']")
 	public static WebElement rulesIFFormattingGridSpellCheck1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-14']")
 	public static WebElement rulesIFFormattingGridAligement1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-15']")
 	public static WebElement rulesIFFormattingGridCharacterCasting1;
     
     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-16']")
 	public static WebElement rulesIFFormattingGridSelectFont1;
     
     
    //
     @FindBy(xpath="//select[@id='ddlFieldsDiv_Rule_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridFieldNameDropdown ;
     
     @FindBy(xpath="//td[@id='ddlChangeValueFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridChangeValueDropdown;
     
     @FindBy(xpath="//input[@id='txtCaptionFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridCaptionTxt;
     
     @FindBy(xpath="//input[@id='txtRegExFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridRegularExpressionTxt;
     
     @FindBy(xpath="//input[@id='txtErrorMsgForamt_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridErrorMesageTxt;
     
     @FindBy(xpath="//input[@id='txtBannertextFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridBannerTextTxt;
     
     @FindBy(xpath="//input[@id='txtTooltipFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridToolTipTxt;
     
     @FindBy(xpath="//input[@id='chkMandatoryFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridmandatorychkBox;
     
     @FindBy(xpath="//input[@id='chkHiddenFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridhiddenChkbox;
     
     @FindBy(xpath="//input[@id='chkDisableFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridDisableChkBox;
     
     @FindBy(xpath="//input[@id='chkSpecllCheckFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridspellCheckChkBox;
     
     @FindBy(xpath="//select[@id='ddlAlignmentFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridAligementDropdown;
     
     @FindBy(xpath="//select[@id='ddlCharCasingFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridCharacterCastingDropdown;
     
     @FindBy(xpath="//button[@id='btnFontFormat_IF_DocCustRules']")
 	public static WebElement rulesIFFormattingGridSelectFontBtn;
     
                          
     
     			@FindBy(xpath="//*[@id='myFontControl_IF_Save']")
     			public static WebElement fontIfsaveBtn;

     			@FindBy(xpath="//*[@id='myFontControl_IF_Close']")
 				public static WebElement fontIfCloseBtnINDC;
 			    
     			@FindBy(xpath="//*[@id='fontFamily_ctrlFontControl_IF']")
 			    public static WebElement fontIfFontFamilyDropdown;
     
 			    @FindBy(xpath="//*[@id='fontStyle_ctrlFontControl_IF']")
 			    public static WebElement fontIfFontStyleDropdown;
     
 			    @FindBy(xpath="//*[@id='fontWeight_ctrlFontControl_IF']")
 			    public static WebElement fontIfFontWeightDropdown;
  
 				@FindBy(xpath="//*[@id='fontSizes_ctrlFontControl_IF']")
 				public static WebElement fontIfFontSizeDropdown;
 				
 				@FindBy(xpath="//*[@id='fontForeColor_ctrlFontControl_IF']")
 				public static WebElement fontIfForeColourDropdown;
 				
 				@FindBy(xpath="//*[@id='fontBackColor_ctrlFontControl']")
 				public static WebElement fontIfBackColourDropdown;
 				
 				@FindBy(xpath="//*[@id='chkBaseline_ctrlFontControl']")
 				public static WebElement fontIfBaseLineCheckbox;
 				
 				@FindBy(xpath="//*[@id='chkOverLine_ctrlFontControl_IF']")
 				public static WebElement fontIfOverLineCheckbox;
 				
 				@FindBy(xpath="//*[@id='chkStrikeThrough_ctrlFontControl_IF']")
 				public static WebElement fontIfStrikeThroughCheckbox;
 				
 				@FindBy(xpath="//*[@id='chkUnderline_ctrlFontControl_IF']")
 				public static WebElement fontIfUnderlineCheckbox;
 				
 				@FindBy(xpath="//*[@id='previewfont_ctrlFontControl_IF']")
 				public static WebElement fontIfFontPreviewTxt;
 				
 				@FindBy(xpath="//*[@id='chkEnableFont_ctrlFontControl_IF']")
 				public static WebElement fontIfEnableFontCheckbox;
     
 	@FindBy(xpath="//button[@id='btnAddRule']")
 	public static WebElement saveRuleBtn;
 	
 	@FindBy(xpath="//button[contains(text(),'Delete Rule')]")
 	public static WebElement deleteRuleBtn;
 	

 	/// Rules--------IF Tab-------Message

    @FindBy(xpath="//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[2]/a/span")
 	public static WebElement rulesIFMessageTab ;
     
    @FindBy(xpath="//input[@id='txtGeneralMsg_RuleIfMsg_DocCustRules']")
 	public static WebElement rulesIFMessagesGenralMessageTxt;
     
    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleIF_DocCustRules']/div[1]/div[2]/label/input")
 	public static WebElement rulesIFMessagesInformationRadio;
     
    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleIF_DocCustRules']/div[2]/div[2]/label/input")
 	public static WebElement rulesIFMessagesWarnAndProceddRadio;
     
    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleIF_DocCustRules']/div[3]/div[2]/label/input")
 	public static WebElement rulesIFMessagesWarnAndStopRadio;
    
 	
 ///// IF Tab ****Alerts-----Grid Elements

    @FindBy(xpath="//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[3]/a/span")
 	public static WebElement rulesIFAlertTab ;

    @FindBy(xpath="//input[@id='txtAlertMsg_RuleIfAlert_DocCustRules']")
 	public static WebElement rulesIfAlertMessageTxt;
     
    @FindBy(xpath="//button[@id='custmizeAlertTemplate_RuleIF_DocCustRules']")
    public static WebElement rulesIfCustmizeTemplateDropdown;
     
     @FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-0']")
 	public static WebElement rulesIfAlertRow1;
 	
 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-1']")
 	public static WebElement rulesIfAlertType1;
     
 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-2']")
 	public static WebElement rulesIfAlertToWhom1;
     
 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-3']")
 	public static WebElement rulesIfAlertSms1;
     
 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-4']")
 	public static WebElement rulesIfAlertEmail1;
     
 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-5']")
 	public static WebElement rulesIfAlertDashBoard1;
     
 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-6']")
 	public static WebElement rulesIfAlertPopUp1;
     
 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-7']")
 	public static WebElement rulesIfAlertGTalk1;
     
 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-8']")
 	public static WebElement rulesIfAlertSendSepcificMessage1;
   
 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-9']")
 	public static WebElement rulesIfAlertSpecificMesage1;
 		
    @FindBy(xpath="//select[@id='ddlTypeAlert_IF_DocCustRules']")
 	public static WebElement rulesIFAlertsGridTypeDropdown;
     
    @FindBy(xpath="//Select[@id='ddlRolesAlert_IF_DocCustRules']")
 	public static WebElement rulesIFAlertsGridToWhomDropdown;
     
    @FindBy(xpath="//select[@id='ddlUsersAlert_IF_DocCustRules']")
 	public static WebElement rulesIFAlertsGridSmsDropdown;
     
    @FindBy(xpath="//select[@id='ddlEmailAlert_IF_DocCustRules']")
 	public static WebElement rulesIFAlertsGridEmailDropdown;
     
    @FindBy(xpath="//select[@id='ddlDashboardAlert_IF_DocCustRules']")
 	public static WebElement rulesIFAlertsGridDashBoardDropdown;
     
    @FindBy(xpath="//select[@id='ddlPopupAlert_IF_DocCustRules']")
 	public static WebElement rulesIFAlertsGridPopUpDropdown;
     
    @FindBy(xpath="//select[@id='ddlGTalkAlert_IF_DocCustRules']")
 	public static WebElement rulesIFAlertsGridGTalkDropdown;
     
    @FindBy(xpath="//input[@id='chkSendMsgAlert_IF_DocCustRules']")
 	public static WebElement rulesIFAlertsGridSendSpecificMessageChkBox;
     
    @FindBy(xpath="//input[@id='txtSpecificMsgAlert_IF_DocCustRules']")
 	public static WebElement rulesIFAlertsGridSpecificMessageTxt;
     


     // Right Click On Page
     
    @FindBy(xpath="//a[@id='btnAddNewCondition']")
  	public static WebElement rulesAddNewConditionBtn;
      
    @FindBy(xpath="//a[@id='btnRemoveCondition']")
  	public static WebElement rulesRemoveConditionBtn;
      
     
    //ELSE **** Customize Formatting Grid
     
 	@FindBy(xpath="//div[@id='Rule_Else_DocCustRules']//ul[@class='nav nav-tabs tab-container-div theme_sub_Tab-Dark']//li[1]//a[1]")
 	public static WebElement rulesELSEformattingTabBtn ;
     
 	
 	@FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-0']")
 	public static WebElement rulesElseFormattingRow1Btn;
 	
 	@FindBy(xpath="//div[contains(text(),'Select Row')]")
 	public static WebElement rulesElseFormattingSelectRowBtn;
 	
 	@FindBy(xpath="//div[contains(text(),'Delete Row')]")
 	public static WebElement rulesElseFormattingDeleteRowBtn;
 	
 	@FindBy(xpath="//div[contains(text(),'Insert Row')]")
 	public static WebElement rulesElseFormattingInsertRowBtn;
 	
 	
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-1']")
 	public static WebElement rulesElseFormattingGridFieldName1 ;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-2']")
 	public static WebElement rulesElseFormattingGridChangeValue1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-3']")
 	public static WebElement rulesElseFormattingGridField1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-4']")
 	public static WebElement rulesElseFormattingGridValue1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-5']")
 	public static WebElement rulesElseFormattingGridCaption1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-6']")
 	public static WebElement rulesElseFormattingGridRegularExpression1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-7']")
 	public static WebElement rulesElseFormattingGridErrorMesage1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-8']")
 	public static WebElement rulesElseFormattingGridBannerText1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-9']")
 	public static WebElement rulesElseFormattingGridToolTip1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-10']")
 	public static WebElement rulesElseFormattingGridmandatory1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-11']")
 	public static WebElement rulesElseFormattingGridHidden1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-12']")
 	public static WebElement rulesElseFormattingGridDisable1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-13']")
 	public static WebElement rulesElseFormattingGridSpellCheck1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-14']")
 	public static WebElement rulesElseFormattingGridAligement1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-15']")
 	public static WebElement rulesElseFormattingGridCharacterCasting1;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-16']")
 	public static WebElement rulesElseFormattingGridSelectFont1;
     
     
  
    @FindBy(xpath="//select[@id='ddlFieldsDiv_Rule_ELSE_DocCustRules']")
 	public static WebElement rulesElseFormattingGridFieldNameDropdown ;
     
    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-2']//select[@id='ddlChangeValueFormat_IF_DocCustRules']")
 	public static WebElement rulesElseFormattingGridChangeValueDropdown;
     
    @FindBy(xpath="//input[@id='txtCaptionFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridCaptionTxt;
     
    @FindBy(xpath="//input[@id='txtRegExFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridRegularExpressionTxt;
     
    @FindBy(xpath="//input[@id='txtErrorMsgForamt_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridErrorMesageTxt;
     
    @FindBy(xpath="//input[@id='txtBannertextFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridBannerTextTxt;
     
    @FindBy(xpath="//input[@id='txtTooltipFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridToolTipTxt;
     
    @FindBy(xpath="//input[@id='chkMandatoryFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridmandatorychkBox;
     
    @FindBy(xpath="//input[@id='chkHiddenFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridhiddenChkbox;
     
    @FindBy(xpath="//input[@id='chkDisableFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridDisableChkBox;
     
    @FindBy(xpath="//input[@id='chkSpecllCheckFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridspellCheckChkBox;
     
    @FindBy(xpath="//select[@id='ddlAlignmentFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridAligementDropdown;
     
    @FindBy(xpath="//select[@id='ddlCharCasingFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridCharacterCastingDropdown;
     
    @FindBy(xpath="//button[@id='btnFontFormat_Else_DocCustRules']")
 	public static WebElement rulesElseFormattingGridSelectFontBtn;
     
                          
     
     			@FindBy(xpath="//*[@id='myFontControl_ELSE_Save']")
     			public static WebElement fontElsesaveBtn;

     			@FindBy(xpath="//*[@id='myFontControl_ELSE_Close']")
 				public static WebElement fontElseCloseBtnINDC;
 			    
     			@FindBy(xpath="//*[@id='fontFamily_ctrlFontControl_ELSE']")
 			    public static WebElement fontElseFontFamilyDropdown;
     
 			    @FindBy(xpath="//*[@id='fontStyle_ctrlFontControl_ELSE']")
 			    public static WebElement fontElseFontStyleDropdown;
     
 			    @FindBy(xpath="//*[@id='fontWeight_ctrlFontControl_ELSE']")
 			    public static WebElement fontElseFontWeightDropdown;
  
 				@FindBy(xpath="//*[@id='fontSizes_ctrlFontControl_ELSE']")
 				public static WebElement fontElseFontSizeDropdown;
 				
 				@FindBy(xpath="//*[@id='fontForeColor_ctrlFontControl_ELSE']")
 				public static WebElement fontElseForeColourDropdown;
 				
 				@FindBy(xpath="//*[@id='fontBackColor_ctrlFontControl']")
 				public static WebElement fontElseBackColourDropdown;
 				
 				@FindBy(xpath="//*[@id='chkBaseline_ctrlFontControl']")
 				public static WebElement fontElseBaseLineCheckbox;
 				
 				@FindBy(xpath="//*[@id='chkOverLine_ctrlFontControl_ELSE']")
 				public static WebElement fontElseOverLineCheckbox;
 				
 				@FindBy(xpath="//*[@id='chkStrikeThrough_ctrlFontControl_ELSE']")
 				public static WebElement fontElseStrikeThroughCheckbox;
 				
 				@FindBy(xpath="//*[@id='chkUnderline_ctrlFontControl_ELSE']")
 				public static WebElement fontElseUnderlineCheckbox;
 				
 				@FindBy(xpath="//*[@id='previewfont_ctrlFontControl_ELSE']")
 				public static WebElement fontElseFontPreviewTxt;
 				
 				@FindBy(xpath="//*[@id='chkEnableFont_ctrlFontControl_ELSE']")
 				public static WebElement fontElseEnableFontCheckbox;
     
 	

 	/// Rules--------ELSE Tab-------Message
 	
    @FindBy(xpath="//div[@id='Rule_Else_DocCustRules']//ul[@class='nav nav-tabs tab-container-div theme_sub_Tab-Dark']//li[2]//a[1]")
 	public static WebElement rulesElseEMessageTab ;
     
    @FindBy(xpath="//input[@id='txtGeneralMsg_RuleElseMsg_DocCustRules']")
 	public static WebElement rulesElseMessagesGenralMessageTxt;
     
    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleElse_DocCustRules']/div[1]/div[2]/label/input")
 	public static WebElement rulesElseMessagesInformationRadio;
     
    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleElse_DocCustRules']/div[2]/div[2]/label/input")
 	public static WebElement rulesElseMessagesWarnAndProceddRadio;
     
    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleElse_DocCustRules']/div[3]/div[2]/label/input")
 	public static WebElement rulesElseMessagesWarnAndStopRadio;
    
 	
     ///// ELSE Tab ****Alerts-----
     

    @FindBy(xpath="//div[@id='Rule_Else_DocCustRules']//li[3]//a[1]")
 	public static WebElement rulesElseAlertTab ;

    @FindBy(xpath="//input[@id='txtAlertMsg_RuleElseAlert_DocCustRules']")
 	public static WebElement rulesElseAlertMessageTxt;
     
     @FindBy(xpath="//button[@id='custmizeAlertTemplate_RuleELse_DocCustRules']")
     public static WebElement rulesElseCustmizeTemplateDropdown;
     
     @FindBy(xpath="//div[@class='dropup pull-right open']//a[contains(text(),'E-mail Template')]")
     public static WebElement rulesElseCustmizeTempEmailTemplate;
     
     // Pop Up  Window Of EmailTemplate 
     @FindBy(xpath="//i[@class='icon-font6 icon-new']")
 	 public static WebElement  emailTempNewdropdown;
 	
 				@FindBy(xpath="//*[@id='forHf']/span[1]/ul/li/a[1]")
 				public static WebElement  emailTempNew_LayoutBtn;
 				
 				@FindBy(xpath="//*[@id='forHf']/span[1]/ul/li/a[2]")
 				public static WebElement  emailTempNew_PageBtn;
 				
 	@FindBy(xpath="//i[@class='icon-font6 icon-open']")
 	public static WebElement  emailTempOpendropdown;
 	
 				@FindBy(xpath="//*[@id='forHf']/span[2]/ul/li/a[1]")
 				public static WebElement  emailTempOpenBtn;
 				
 							@FindBy(xpath="//*[@id='3']")
 							public static WebElement  emailTempOpenBtn_First;
 							
 							@FindBy(xpath="//*[@id='7']")
 							public static WebElement  emailTempOpenBtn_Second;
 							
 							@FindBy(xpath="//button[@id='btn_PopUpOk']")
 							public static WebElement  emailTempOpenBtn_okBtn;
 							
 							@FindBy(xpath="//*[@id='id_PopUp']/div/div/div[3]/button[2]")
 							public static WebElement  emailTempOpenBtn_cancelBtn;
 				
 				@FindBy(xpath="//*[@id='forHf']/span[2]/ul/li/a[2]")
 				public static WebElement emailTempFromXMLBtn;
 	
 	@FindBy(xpath="//i[@class='icon-font6 icon-save']")
 	public static WebElement  emailTempSavedropdown;
 	
 				@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[1]")
 				public static WebElement  emailTempSaveBtn;
 				
 							@FindBy(xpath="//input[@id='id_PopuplayoutName']")
 							public static WebElement  emailTempSaveTxtField;
 							
 							@FindBy(xpath="//input[@id='id_PopuplayoutName']")
 							public static WebElement  emailTempSave_okBtn;
 							
 							@FindBy(xpath="//*[@id='id_PopUp']/div/div/div[3]/button[2]")
 							public static WebElement  emailTempSave_CancekBtn;
 				
 				@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[2]")
 				public static WebElement  emailTempSaveAsBtn; //Clicking popup is same as savebtn popup
 				
 				@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[3]")
 				public static WebElement  emailTempSaveAsImageBtn; //No Response
 				
 				@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[4]")
 				public static WebElement  emailTempSaveAsXMLBtn; // Downloads xml file
 				
 				@FindBy(xpath="//*[@id='forHf']/span[23]/ul/li/a[5]")
 				public static WebElement  emailTempSaveAsHTMLBtn; // Showing Error
 				
 	@FindBy(xpath="//*[@id='forHf']/span[4]")
 	public static WebElement  emailTempRemovedropdown;
 				
 				@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[1]")
 				public static WebElement  emailTempRemoveBtn; //Raises popup
 							
 				@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[2]")
 				public static WebElement  emailTempRemoveCurrentPageBtn; //Raises popup
 							
 				@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[3]")
 				public static WebElement  emailTempRemoveControlBtn;				
 				
 	@FindBy(xpath="//*[@id='forHf']/span[5]")
 	public static WebElement  emailTempPageNo;
 	
 	@FindBy(xpath="//*[@id='forHf']/span[6]")
 	public static WebElement  emailTempControldrpdown;
 				
 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[1]")
 				public static WebElement  emailTempStaticTextBtn;
 							
 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[2]")
 				public static WebElement  emailTempBitmapBtn;
 							
 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[3]")
 				public static WebElement  emailTempBodyGridBtn;	
 				
 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[4]")
 				public static WebElement  emailTempRectangleBtn;	
 				
 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[5]")
 				public static WebElement  emailTempEcllipseBtn;	
 				
 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[6]")
 				public static WebElement  emailTempLineBtn;	
 				
 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[7]")
 				public static WebElement  emailTempAreaBtn;
 				
 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[8]")
 				public static WebElement  emailTempTableBtn;	
 				
 	@FindBy(xpath="//*[@id='forHf']/span[7]")
 	public static WebElement  emailTempAlignmentdropdown;
 							
 				@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[1]")
 				public static WebElement  emailTempLeftAlignmentBtn;
 										
 				@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[2]")
 				public static WebElement  emailTempRightAlignmentBtn;
 				
 				@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[3]")
 				public static WebElement  emailTempTopAlignmentBtn;	
 				
 				@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[4]")
 				public static WebElement  emailTempBottomAlignmentBtn;
 				
 	@FindBy(xpath="//*[@id='forHf']/span[8]")
 	public static WebElement  emailTempSizedropdown;
 				
 				@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[1]")
 				public static WebElement  emailTempSameSizeBtn;
 										
 				@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[2]")
 				public static WebElement  emailTempSameWidthBtn;
 				
 				@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[3]")
 				public static WebElement  emailTempSameHeightBtn;
 				
 	@FindBy(xpath="//*[@id='forHf']/span[9]")
 	public static WebElement  emailTempPrintdropdown;
 							
 				@FindBy(xpath="//*[@id='forHf']/span[9]/ul/li/a[1]")
 				public static WebElement  emailTempPrint_PrintBtn;
 													
 				@FindBy(xpath="//*[@id='forHf']/span[9]/ul/li/a[2]")
 				public static WebElement  emailTempPrint_PreviewBtn;
 				
 							@FindBy(xpath="//*[@id='fit-button']")
 							public static WebElement emailTempPreview_FitToWidthBtn;
 							
 							@FindBy(xpath="//*[@id='zoom-in-button']")
 							public static WebElement emailTempPreview_ZoomInBtn;
 							
 							@FindBy(xpath="//*[@id='zoom-out-button']")
 							public static WebElement emailTempPreview_ZoomOutBtn;
 							
 				@FindBy(xpath="//*[@id='forHf']/span[9]/ul/li/a[3]")
 				public static WebElement  emailTempPageSetUpBtn;
 				
 							@FindBy(xpath="//*[@id='id_PageSetUpPreview']")
 							public static WebElement  emailTempPageSetupPagePreviewField;
 							
 							@FindBy(xpath="//*[@id='id_PageType']")
 							public static WebElement  emailTempPageSetupPaperSizedropdown;
 							
 							@FindBy(xpath="//*[@id='id_PaperOrientation'][@value='0']")
 							public static WebElement  emailTempPageSetupPotraitRadio;
 							
 							@FindBy(xpath="//*[@id='id_PaperOrientation'][@value='1']")
 							public static WebElement  emailTempPageSetupLandScapeRadio;
 							
 							@FindBy(xpath="//*[@id='id_PaperUnit'][@value='0']")
 							public static WebElement  emailTempPageSetupCentimetersRadio;
 							
 							@FindBy(xpath="//*[@id='id_PaperUnit'][@value='1']")
 							public static WebElement  emailTempPageSetupInchesRadio;
 							
 							@FindBy(xpath="//*[@id='id_PageSizeLeftMarginDisplay']")
 							public static WebElement  emailTempPageSetupLeftTxt;
 							
 							@FindBy(xpath="//*[@id='id_PageSizeRightMarginDisplay']")
 							public static WebElement  emailTempPageSetupRightTxt;
 							
 							@FindBy(xpath="//*[@id='id_PageSizeTopMarginDisplay']")
 							public static WebElement  emailTempPageSetupTopTxt;
 							
 							@FindBy(xpath="//*[@id='id_PageSizeTopMarginDisplay']")
 							public static WebElement  emailTempPageSetupBottomTxt;
 							
 							@FindBy(xpath="//*[@id='id_PageSetupokBtn']")
 							public static WebElement  emailTempPageSetupokBtn;
 							
 							@FindBy(xpath="//*[@id='id_PageSetupcancelBtn']")
 							public static WebElement  emailTempPageSetUpcancelBtn;

 	@FindBy(xpath="//*[@id='id_InvoiceDesingCancel'")
 	public static WebElement  emailTempExitBtn;	
 	
 	// Fields Tab
 	
 	@FindBy(xpath="//*[@id='LiDesignField'")
 	public static WebElement  emailTempFieldsTab;
 	
 	@FindBy(xpath="//span[contains(text(),'Master Fields')]")
 	public static WebElement  masterFieldsExpandBtn;
 	
 				@FindBy(xpath="//span[contains(text(),'DocNo')]")
 				public static WebElement  masterFieldsDocNodraganddrop;
 	
 				@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Date')]")
 				public static WebElement  masterFieldsDatedraganddrop;
 	
 				@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Time')]")
 				public static WebElement  masterFieldsTimedraganddrop;
 	
 				@FindBy(xpath="//span[contains(text(),'PurchaseAC')]")
 				public static WebElement  masterFieldsPurchaseACdraganddrop;
 	
 				@FindBy(xpath="//span[contains(text(),'VendorAC')]")
 				public static WebElement  masterFieldsVendorACdraganddrop;
 	
 				@FindBy(xpath="//span[contains(text(),'UpdateStock')]")
 				public static WebElement  masterFieldsUpdateStockdraganddrop;
 	
 				@FindBy(xpath="//span[contains(text(),'RaiseReceipt')]")
 				public static WebElement  masterFieldsRaiseReceiptdraganddrop;
 	
 				@FindBy(xpath="//span[contains(text(),'AppropriateOn')]")
 				public static WebElement  masterFieldsAppropriateOndraganddrop;
 	
 				@FindBy(xpath="//span[contains(text(),'AdditionalValue')]")
 				public static WebElement  masterFieldsAdditionalValuedraganddrop;
 	
 				@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Item')]")
 				public static WebElement  masterFieldsItemdraganddrop;
 	
 				@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Quantity')]")
 				public static WebElement  masterFieldsQuantitydraganddrop;
 	
 				@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Rate')]")
 				public static WebElement  masterFieldsRatedraganddrop;
 	
 				@FindBy(xpath="//span[contains(text(),'MRN Qty')]")
 				public static WebElement  masterFieldsMRNqtydraganddrop;
 	
 				@FindBy(xpath="//span[contains(text(),'Gross')]")
 				public static WebElement  masterFieldsGrossdraganddrop;
 	
 				@FindBy(xpath="//span[contains(text(),'Qty balance')]")
 				public static WebElement  masterFieldsQtyBalancedraganddrop;
 	
 				@FindBy(xpath="//span[contains(text(),'Average rate')]")
 				public static WebElement  masterFieldsAverageRatedraganddrop;
 				
 				@FindBy(xpath="//span[contains(text(),'Add Value')]")
 				public static WebElement  masterFieldsAddValuedraganddrop;
 	
 	// Properties Tab
 				
 	@FindBy(xpath="//*[@id='LiProp'")
 	public static WebElement   emailTempPropertiesTab;				

 	// RightPanel expand Btn
 	
 	@FindBy(xpath="//*[@id='LiFieldDivList'")
 	public static WebElement emailTempRightPanelMaxMinIcon;
     
     
    ////////////////// 
     
     
     @FindBy(xpath="//div[@class='dropup pull-right open']//a[contains(text(),'SMS Template')]")
    	public static WebElement rulesElseCustmizeTempSmsTemplate;

     
     // Same as Trigger PopUp Customize Template Window
     // Named As Template
     
     
     // Grid Elements
     
    @FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-0']")
 	public static WebElement rulesElseAlertRow1;
 	
 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-1']")
 	public static WebElement rulesElseAlertType1;
     
 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-2']")
 	public static WebElement rulesElseAlertToWhom1;
     
 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-3']")
 	public static WebElement rulesElseAlertSms1;
     
 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-4']")
 	public static WebElement rulesElseAlertEmail1;
     
 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-5']")
 	public static WebElement rulesElseAlertDashBoard1;
     
 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-6']")
 	public static WebElement rulesElseAlertPopUp1;
     
 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-7']")
 	public static WebElement rulesElseAlertGTalk1;
     
 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-8']")
 	public static WebElement rulesElseAlertSendSepcificMessage1;
   
 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-9']")
 	public static WebElement rulesElseAlertSpecificMesage1;
 		
 	
    @FindBy(xpath="//select[@id='ddlTypeAlert_Else_DocCustRules']")
 	public static WebElement rulesELSEAlertsGridTypeDropdown;
     
    @FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-2']//select[@id='ddlRolesAlert_IF_DocCustRules']")
 	public static WebElement rulesELSEAlertsGridToWhomDropdown;
     
    @FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-3']//select[@id='ddlUsersAlert_IF_DocCustRules']")
 	public static WebElement rulesELSEAlertsGridSmsDropdown;
     
    @FindBy(xpath="//select[@id='ddlEmailAlert_Else_DocCustRules']")
 	public static WebElement rulesElseAlertsGridEmailDropdown;
     
    @FindBy(xpath="//select[@id='ddlDashboardAlert_Else_DocCustRules']")
 	public static WebElement rulesElseAlertsGridDashBoardDropdown;
     
    @FindBy(xpath="//select[@id='ddlPopupAlert_Else_DocCustRules']")
 	public static WebElement rulesElseAlertsGridPopUpDropdown;
     
    @FindBy(xpath="//select[@id='ddlGTalkAlert_Else_DocCustRules']")
 	public static WebElement rulesElseAlertsGridGTalkDropdown;
     
    @FindBy(xpath="//input[@id='chkSendMsgAlert_Else_DocCustRules']")
 	public static WebElement rulesElseAlertsGridSendSpecificMessageChkBox;
     
    @FindBy(xpath="//input[@id='txtSpecElseicMsgAlert_Else_DocCustRules']")
 	public static WebElement rulesElseAlertsGridSpecificMessageTxt;
   
 	
   //*-------------------------------------------------------------------------------------------------------------------	
   	
//   	Inventory Options
   	
   
   	
   	@FindBy(xpath="//input[@id='InventoryOpt_costOfIssueAcc']")
   	public static WebElement  costOfIssueAccountTxt;
   	
   	@FindBy(xpath="//*[@id='InventoryOpt_costOfIssueAcc_input_image']/span")
   	public static WebElement  costOfIssueAccountDropdown;
   	
   	@FindBy(xpath="//*[@id='InventoryOpt_costOfIssueAcc_input_settings']/span")
   	public static WebElement  costOfIssueAccountSettingBtn;
   	
   	@FindBy(xpath="//div[@id='InventoryOpt_costOfIssueAcc_customize_popup_container']")
   	public static WebElement  costOfIssueAccountContainerTxt;
   	
   	@FindBy(xpath="//div[@id='InventoryOpt_costOfIssueAcc_customize_popup_footer']//input[1]")
   	public static WebElement  costOfIssueAccountStandardfieldsBtn;
   	
   				@FindBy(xpath="//select[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_list']")
   				public static WebElement  costOfIssueAccountFieldsDropdown;
   				
   				@FindBy(xpath="//input[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_header']")
   				public static WebElement  costOfIssueAccountHeaderTxt;
   				
   				@FindBy(xpath="//select[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_alignment']")
   				public static WebElement  costOfIssueAccountAllignmentDropdown;
   				
   				@FindBy(xpath="//input[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_width']")
   				public static WebElement  costOfIssueAccountWidthTxt;
   				
   				@FindBy(xpath="//section[@id='page_Content']//input[3]")
   				public static WebElement  costOfIssueAccountStandardFieldsokBtn;
   				
   				@FindBy(xpath="//section[@id='page_Content']//input[4]")
   				public static WebElement  costOfIssueAccountStandardFieldscancelBtn;
   	
   	@FindBy(xpath="//div[@id='InventoryOpt_costOfIssueAcc_search_container']//input[2]")
   	public static WebElement  costOfIssueAccountDeleteColumnBtn;
   	
   	@FindBy(xpath="//section[@id='page_Content']//input[3]")
   	public static WebElement  costOfIssueAccountokBtn;
   	
   	@FindBy(xpath="//section[@id='page_Content']//input[4]")
   	public static WebElement  costOfIssueAccountcancelBtn;
   	
   	@FindBy(xpath="//input[@id='InventoryOpt_salesPurchaseACC']")
   	public static WebElement  salesPurchaseACTxt;
   	
   	@FindBy(xpath="//*[@id='InventoryOpt_salesPurchaseACC_input_image']/span")
   	public static WebElement  salesPurchaseACDropdown;

   	@FindBy(xpath="//*[@id='InventoryOpt_salesPurchaseACC_input_settings']/span")
   	public static WebElement  salesPurchaseACSettingBtn;
   	
   	@FindBy(xpath="//div[@id='InventoryOpt_salesPurchaseACC_customize_popup_container']")
   	public static WebElement  salesPurchaseACContainerTxt;
   	
   	@FindBy(xpath="//div[@id='InventoryOpt_salesPurchaseACC_customize_popup_container']")
   	public static WebElement  salesPurchaseACStandardfieldsBtn;
   	
   				@FindBy(xpath="//select[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_list']")
   				public static WebElement  salesPurchaseACFieldsDropdown;
   				
   				@FindBy(xpath="//input[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_header']")
   				public static WebElement  salesPurchaseACHeaderTxt;
   				
   				@FindBy(xpath="//select[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_alignment']")
   				public static WebElement  salesPurchaseACAllignmentDropdown;
   				
   				@FindBy(xpath="//input[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_width']")
   				public static WebElement  salesPurchaseACWidthTxt;
   				
   				@FindBy(xpath="//section[@id='page_Content']//input[3]")
   				public static WebElement  salesPurchaseACStandardFieldsokBtn;
   				
   				@FindBy(xpath="//section[@id='page_Content']//input[4]")
   				public static WebElement  salesPurchaseACStandardFieldscancelBtn;
   	
   	@FindBy(xpath="//div[@id='InventoryOpt_salesPurchaseACC_search_container']//input[2]")
   	public static WebElement  salesPurchaseACDeleteColumnBtn;
   	
   	@FindBy(xpath="//section[@id='page_Content']//input[3]")
   	public static WebElement  salesPurchaseACokBtn;
   	
   	@FindBy(xpath="//section[@id='page_Content']//input[4]")
   	public static WebElement  salesPurchaseACcancelBtn;
   	
   	@FindBy(xpath="//select[@id='inventoryOpt_ProductRate']")
   	public static WebElement itemRateDropdown;
   	
   	@FindBy(xpath="//select[@id='inventoryOpt_ReservationType']")
   	public static WebElement reservationTypeDropdown;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkApplyRateSchemes']")
   	public static WebElement applyrateSchemesChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkPickFreeSchemesQntyAfterLn']")
   	public static WebElement pickFreeSchemesQtyAfterEveryLineChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkDisplayUnitNameBforeQnty']")
   	public static WebElement displayUnitNamebeforeEveryQtyChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkDontInputProducts']")
   	public static WebElement dontInputItemsChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkDontInputQntyRate']")
   	public static WebElement dontInputQtyAndRateChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkDontPopupBinSelAfterQnty']")
   	public static WebElement dontPopupBinSelectionAfterQuantityChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkHideRateAndGross']")
   	public static WebElement hideRateAndGrossChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkHideRateAndGrossForNormalUsers']")
   	public static WebElement hideRateAndGrossfromNormalUsersChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkHirePurchaseBehavior']")
   	public static WebElement hirePurchaseBehaviourChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkInputCounterBill']")
   	public static WebElement inputAsCounterBillChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkInputBinLocation']")
   	public static WebElement inputBinLocationChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkInputQntyBreakup']")
   	public static WebElement inputItemByAttributeChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkQCRequiredForThisDoc']")
   	public static WebElement qcrequiredforThisDocChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkRecalculateRateInReceiptFromProd']")
   	public static WebElement recalculateTheRateInReceiptFromProductionOnSavingChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkRestrictItmFromRepeatedEntry']")
   	public static WebElement restricttheitemFromBeingRepeatedInEntryChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkShowvendorassignproducts']")
   	public static WebElement showVendorAssignedItemsChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkInputBarcode']")
   	public static WebElement inputBarcodeChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkShowHeldStock']")
   	public static WebElement showHeldStockChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkCrossDoc']")
   	public static WebElement crossDocChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkConsumeOrAllocateStock']")
   	public static WebElement allocateStockChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkEnableRFID']")
   	public static WebElement enableRFIDChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkEnableQC']")
   	public static WebElement enableQCChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkRateZero']")
   	public static WebElement dontmakeThertaeZeroWhenItemisChangedChkBox;
   	
   // Batch	
   	
   	@FindBy(xpath="//select[@id='inventoryOpt_BatchPick']")
   	public static WebElement batchPickDropdown;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkAllowExpiredBatchesToBeSelected']")
   	public static WebElement allowExpiredbatchesToBeSelectedChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkLoadBatchesBforeQnty']")
   	public static WebElement loadbatchesbeforeQuantityChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkSelectBatchesEvenIfStksNotUpdated']")
   	public static WebElement reserveStockByBatchesChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_chkInputBatchEvenIfStockIsNotUpdated']")
   	public static WebElement inputBatchEvenIfStockIsnotUpdatedChkBox;
   	
   // Barcode	
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_rdbNotApplicable']")
   	public static WebElement notApplicbleChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_rdbFromTemplate']")
   	public static WebElement fromTemplateChkBox;
   	
   	@FindBy(xpath="//input[@id='inventoryOpt_rdbFromField']")
   	public static WebElement fromFieldChkBox;
  
  
	
////////////////////////////	
  
   
   
   
				
	///////////////toggle
		
					
	    
	    //Document Customization for State and City
	    
	    	  @FindBy (xpath="//div[contains(text(),'Home')]")
	    	   public static WebElement homeMenu;
	    			
	    	   @FindBy (xpath="//a[@id='1000']//span[contains(text(),'Masters')]")
	    	   public static WebElement mastersMenu;  
	    		  
	    	   @FindBy (xpath="//*[@id='1108']/span")
	    	   public static WebElement costcenter;

	    	   @FindBy (xpath="//*[@id='1109']/span")
	    	   public static WebElement location;

	    	   @FindBy (xpath="//*[@id='1110']/span")
	    	   public static WebElement region;
	    	   
	    	   @FindBy (xpath="//*[@id='1111']/span")
	    	   public static WebElement country;

	    	   @FindBy (xpath="//*[@id='1112']/span")
	    	   public static WebElement state;

	    	   @FindBy (xpath="//*[@id='1113']/span")
	    	   public static WebElement city;
	    	   
	    	   @FindBy (xpath="//input[@id='iCountry']")
	    	   public static WebElement countryComboBox;
	    	   
	    	   @FindBy (xpath="//tbody[@id='iCountry_table_data_body']/tr/td")
	    	   public static List<WebElement> countryComboBoxList;
	    	   
	    	   @FindBy (xpath="//input[@id='iState']")
	    	   public static WebElement stateComboBox;
	    	   
	    	   @FindBy (xpath="//tbody[@id='iState_table_data_body']/tr/td")
	    	   public static List<WebElement> stateComboBoxList;
	    	   
	    	 
	    	   @FindBy(xpath="//i[@class='icon-font6 icon-new']")
	    	   public static WebElement masterNewBtn;
	    	   
	    	   @FindBy(xpath="//input[@id='sName']")
	    	   public static WebElement  nameTxt;
	    		
	    	   @FindBy(xpath="//input[@id='sCode']")
	    	   public static WebElement codeTxt ;
	    	   
	    	   @FindBy(xpath="//*[@id='btnMasterSaveClick']")
	    	   public static WebElement saveBtn;	

	    	   @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	    	   public static WebElement newCloseBtnINDC;
	    	   
	    	   @FindBy(xpath="//i[@class='icon-font6 icon-close']")
	    	   public static WebElement masterCloseBtnINDC; 
	    	   
	    	   
	  /*
   public static boolean checkOpenSaveAndCloseStateMasterAsTelangana() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
   {
	   excelReader=new ExcelReader(POJOUtility.getExcelPath());
	   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	   homeMenu.click();
			
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
	   mastersMenu.click();
		     
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(state));
	   state.click();
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
	   masterNewBtn.click();
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
	   nameTxt.click();
	   nameTxt.sendKeys("Telangana");
	   nameTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
	   codeTxt.click();
	   codeTxt.sendKeys("TS");
	   codeTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(countryComboBox));
	   countryComboBox.click();
	   countryComboBox.sendKeys("I");
	   
	   int count = countryComboBoxList.size();
	   
	   for(int i=0;i<count;i++)
	   {
		   String data = countryComboBoxList.get(i).getText();
		   
		   if(data.equalsIgnoreCase("INDIA"))
		   {
			   countryComboBoxList.get(i).click();
			   break;
		   }
	   }
	   
	   countryComboBox.sendKeys(Keys.TAB);
		  
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	   saveBtn.click();
		 
	   System.out.println("***********************checkOpenSaveAndCloseStateMasterAsTelangana*****************************");
		 
	   String expMessage	="Saved Successfully";
	   String actMessage	=checkValidationMessage(expMessage);
	   
	   if(actMessage.equalsIgnoreCase(expMessage))
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resPass);
		   return true;
	   }
	   else
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resFail);
		   return false;
	   }
    }
   
   public static boolean checkOpenSaveAndCloseStateMasterAsAndraPradesh() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
   {
	   excelReader=new ExcelReader(POJOUtility.getExcelPath());
	   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
	   nameTxt.click();
	   nameTxt.sendKeys("AndraPradesh");
	   nameTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
	   codeTxt.click();
	   codeTxt.sendKeys("AP");
	   codeTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(countryComboBox));
	   countryComboBox.click();
	   countryComboBox.sendKeys("I");
	   
	   int count = countryComboBoxList.size();
	   
	   for(int i=0;i<count;i++)
	   {
		   String data = countryComboBoxList.get(i).getText();
		   
		   if(data.equalsIgnoreCase("INDIA"))
		   {
			   countryComboBoxList.get(i).click();
			   break;
		   }
	   }
	   
	   countryComboBox.sendKeys(Keys.TAB);
		  
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	   saveBtn.click();
		 
	   System.out.println("***********************checkOpenSaveAndCloseStateMasterAsAndraPradesh*****************************");
		 
	   String expMessage	="Saved Successfully";
	   String actMessage	=checkValidationMessage(expMessage);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCloseBtnINDC));
	   newCloseBtnINDC.click();
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtnINDC));
	   masterCloseBtnINDC.click();
	   
	   if(actMessage.equalsIgnoreCase(expMessage))
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resPass);
		   return true;
	   }
	   else
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resFail);
		   return false;
	   }
    }
   
   
   
   public static boolean checkOpenSaveAndCloseCityMasterAsHyderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
   {
	   excelReader=new ExcelReader(POJOUtility.getExcelPath());
	   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	   homeMenu.click();
			
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
	   mastersMenu.click();
		     
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(city));
	   city.click();
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
	   masterNewBtn.click();
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
	   nameTxt.click();
	   nameTxt.sendKeys("Hyderabad");
	   nameTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
	   codeTxt.click();
	   codeTxt.sendKeys("HYD");
	   codeTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stateComboBox));
	   stateComboBox.click();
	   stateComboBox.sendKeys(Keys.SPACE);
	   
	   int count = stateComboBoxList.size();
	   
	   for(int i=0;i<count;i++)
	   {
		   String data = stateComboBoxList.get(i).getText();
		   
		   if(data.equalsIgnoreCase("TELANGANA"))
		   {
			   stateComboBoxList.get(i).click();
			   break;
		   }
	   }
	   
	   stateComboBox.sendKeys(Keys.TAB);
		  
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	   saveBtn.click();
		 
	   System.out.println("***********************checkOpenSaveAndCloseCityMasterAsHyderabad*****************************");
		 
	   String expMessage	="Saved Successfully";
	   String actMessage	=checkValidationMessage(expMessage);
	   
	   if(actMessage.equalsIgnoreCase(expMessage))
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resPass);
		   return true;
	   }
	   else
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resFail);
		   return false;
	   }
    }
   
   public static boolean checkOpenSaveAndCloseCityMasterAsSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
   {
	   excelReader=new ExcelReader(POJOUtility.getExcelPath());
	   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
	   nameTxt.click();
	   nameTxt.sendKeys("Secunderabad");
	   nameTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
	   codeTxt.click();
	   codeTxt.sendKeys("SEC");
	   codeTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stateComboBox));
	   stateComboBox.click();
	   stateComboBox.sendKeys(Keys.SPACE);
	   
	   int count = stateComboBoxList.size();
	   
	   for(int i=0;i<count;i++)
	   {
		   String data = stateComboBoxList.get(i).getText();
		   
		   if(data.equalsIgnoreCase("TELANGANA"))
		   {
			   stateComboBoxList.get(i).click();
			   break;
		   }
	   }
	   
	   stateComboBox.sendKeys(Keys.TAB);
		  
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	   saveBtn.click();
		 
	   System.out.println("***********************checkOpenSaveAndCloseCityMasterAsSecunderabad*****************************");
		 
	   String expMessage	="Saved Successfully";
	   String actMessage	=checkValidationMessage(expMessage);
	   
	   if(actMessage.equalsIgnoreCase(expMessage))
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resPass);
		   return true;
	   }
	   else
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resFail);
		   return false;
	   }
    }
   
 
   public static boolean checkOpenSaveAndCloseCityMasterAsVijayawada() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
   {
	   excelReader=new ExcelReader(POJOUtility.getExcelPath());
	   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
	   nameTxt.click();
	   nameTxt.sendKeys("Vijayawada");
	   nameTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
	   codeTxt.click();
	   codeTxt.sendKeys("VIJ");
	   codeTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stateComboBox));
	   stateComboBox.click();
	   stateComboBox.sendKeys(Keys.SPACE);
	   
	   int count = stateComboBoxList.size();
	   
	   for(int i=0;i<count;i++)
	   {
		   String data = stateComboBoxList.get(i).getText();
		   
		   if(data.equalsIgnoreCase("ANDRAPRADESH"))
		   {
			   stateComboBoxList.get(i).click();
			   break;
		   }
	   }
	   
	   stateComboBox.sendKeys(Keys.TAB);
	   
	   Thread.sleep(1000);
		  
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	   saveBtn.click();
		 
	   System.out.println("***********************checkOpenSaveAndCloseCityMasterAsVijayawada*****************************");
		 
	   String expMessage	="Saved Successfully";
	   String actMessage	=checkValidationMessage(expMessage);
	   
	   if(actMessage.equalsIgnoreCase(expMessage))
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resPass);
		   return true;
	   }
	   else
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resFail);
		   return false;
	   }
    }
   
   
   public static boolean checkOpenSaveAndCloseCityMasterAsVizag() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
   {
	   excelReader=new ExcelReader(POJOUtility.getExcelPath());
	   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
	   nameTxt.click();
	   nameTxt.sendKeys("Vizag");
	   nameTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
	   codeTxt.click();
	   codeTxt.sendKeys("VIZ");
	   codeTxt.sendKeys(Keys.TAB);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stateComboBox));
	   stateComboBox.click();
	   stateComboBox.sendKeys(Keys.SPACE);
	   
	   int count = stateComboBoxList.size();
	   
	   for(int i=0;i<count;i++)
	   {
		   String data = stateComboBoxList.get(i).getText();
		   
		   if(data.equalsIgnoreCase("ANDRAPRADESH"))
		   {
			   stateComboBoxList.get(i).click();
			   break;
		   }
	   }
	   
	   stateComboBox.sendKeys(Keys.TAB);
		  
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	   saveBtn.click();
		 
	   System.out.println("***********************checkOpenSaveAndCloseCityMasterAsVizag*****************************");
		 
	   String expMessage	="Saved Successfully";
	   String actMessage	=checkValidationMessage(expMessage);
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCloseBtnINDC));
	   newCloseBtnINDC.click();
	   
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtnINDC));
	   masterCloseBtnINDC.click();
	   
	   if(actMessage.equalsIgnoreCase(expMessage))
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resPass);
		   return true;
	   }
	   else
	   {
		   excelReader.setCellData(xlfile, "Sheet1", 545, 9, resFail);
		   return false;
	   }
    }
   
	  
	    
	    
public boolean checkDocumentsCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
	settingsmenuBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
	ConfigureTransactionBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
	
	boolean actdocumentCustomization45Btn	=documentCustomization45Btn.isDisplayed();
	
	boolean expdocumentCustomization45Btn	=true;
	
	System.out.println("********************************checkDocumentCustomization********************************");
	
	System.out.println("DocumentCustomization45Btn : "+actdocumentCustomization45Btn+"  value expected  "+expdocumentCustomization45Btn);
	
	if(actdocumentCustomization45Btn==expdocumentCustomization45Btn)
	{
		excelReader.setCellData(xlfile, "Sheet2", 145, 9, resPass);
		
		return true;

	}
	else
	{
		excelReader.setCellData(xlfile, "Sheet2", 145, 9, resPass);
		
		return false;
	}
}
		
		
	    
	    


public boolean checkDocumentCustomizationWithAllOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
	documentCustomization45Btn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchBox));
	
	boolean actsearchBox                             	=searchBox.isDisplayed();
	boolean actcreateVoucherBtn							=createVoucherBtn.isDisplayed();
	boolean actdeletevoucherBtn							=deletevoucherBtn.isDisplayed();
	boolean actreceiptsBtn								=receiptsBtn.isDisplayed();
	boolean actpaymentsBtn								=paymentsBtn.isDisplayed();
	boolean actpettyCashBtn								=pettyCashBtn.isDisplayed();
	boolean actpostDatedreceiptsBtn						=postDatedreceiptsBtn.isDisplayed();
	boolean actpostDatedpaymentsBtn						=postDatedpaymentsBtn.isDisplayed();
	boolean actpurchaseVouchersBtn						=purchaseVouchersBtn.isDisplayed();
	boolean actpurchaseReturnsBtn						=purchaseReturnsBtn.isDisplayed();
	boolean actpurcahseOrdersBtn						=purcahseOrdersBtn.isDisplayed();
	boolean actjobOrdersBtn								=jobOrdersBtn.isDisplayed();
	boolean actmaterialReceiptsNotesBtn					=materialReceiptsNotesBtn.isDisplayed();
	boolean actsalesInvoiceBtn							=salesInvoiceBtn.isDisplayed();
	boolean actcashSalesBtn       						=cashSalesBtn.isDisplayed();
	boolean acthirePurcahseSalesBtn						=hirePurcahseSalesBtn.isDisplayed();
	boolean actposSalesBtn								=posSalesBtn.isDisplayed();
	boolean actsalesReturnsBtn							=salesReturnsBtn.isDisplayed();
	boolean actsalesOrdersBtn							=salesOrdersBtn.isDisplayed();
	boolean actproductionOrderBtn						=productionOrderBtn.isDisplayed();
	boolean actdeliveryNotesBtn							=deliveryNotesBtn.isDisplayed();
	boolean actnonStandardjournalEntriesBtn				=nonStandardjournalEntriesBtn.isDisplayed();
	boolean actinterDepartmentalJVBtn					=interDepartmentalJVBtn.isDisplayed();
	boolean actdebitNotesLineWiseBtn					=debitNotesLineWiseBtn.isDisplayed();
	boolean actcreditNotesLineWiseBtn					=creditNotesLineWiseBtn.isDisplayed();
	boolean actfixedAssetDepreciationVoucherBtn			=fixedAssetDepreciationVoucherBtn.isDisplayed();
	boolean actjournalEntriesBtn						=journalEntriesBtn.isDisplayed();
	boolean actdebitNotesBtn							=debitNotesBtn.isDisplayed();
	boolean actcreditNotesBtn							=creditNotesBtn.isDisplayed();
	boolean actpayRollPostingsBtn						=payRollPostingsBtn.isDisplayed();
	boolean actopeningBalancesBtn						=openingBalancesBtn.isDisplayed();
	boolean actshortageInStocksBtn						=shortageInStocksBtn.isDisplayed();
	boolean actexcessInStocksBtn						=excessInStocksBtn.isDisplayed();
	boolean actstockTransfersBtn						=stockTransfersBtn.isDisplayed();
	boolean actopeningStocksBtn							=openingStocksBtn.isDisplayed();
	boolean actissuesToProductionBtn					=issuesToProductionBtn.isDisplayed();
	boolean actreceiptsFromProductionBtn				=receiptsFromProductionBtn.isDisplayed();
	boolean actreturnsFromShopfloorBtn					=returnsFromShopfloorBtn.isDisplayed();
	boolean actjobWorkIssuesBtn							=jobWorkIssuesBtn.isDisplayed();
	boolean actjobWorkReeceiptsBtn						=jobWorkReeceiptsBtn.isDisplayed();
	boolean actpurchaseQuotationsBtn					=purchaseQuotationsBtn.isDisplayed();
	boolean actsalesQuotationsBtn						=salesQuotationsBtn.isDisplayed();
	boolean actjobOrderBtn								=jobOrderBtn.isDisplayed();
	boolean actupdateBtn								=updateBtn.isDisplayed();
	boolean actCloseBtnINDC									=CloseBtnINDC.isDisplayed();
	
	
	boolean expsearchBox								=true;
	boolean expcreateVoucherBtn							=true;
	boolean expdeletevoucherBtn							=true;
	boolean expreceiptsBtn								=true;
	boolean exppaymentsBtn								=true;
	boolean exppettyCashBtn								=true;
	boolean exppostDatedreceiptsBtn						=true;
	boolean exppostDatedpaymentsBtn						=true;
	boolean exppurchaseVouchersBtn						=true;
	boolean exppurchaseReturnsBtn						=true;
	boolean exppurcahseOrdersBtn						=true;
	boolean expjobOrdersBtn								=true;
	boolean expmaterialReceiptsNotesBtn					=true;
	boolean expsalesInvoiceBtn							=true;
	boolean expcashSalesBtn								=true;
	boolean exphirePurcahseSalesBtn						=true;
	boolean expposSalesBtn								=true;
	boolean expsalesReturnsBtn							=true;
	boolean expsalesOrdersBtn							=true;
	boolean expproductionOrderBtn						=true;		
	boolean expdeliveryNotesBtn							=true;
	boolean expnonStandardjournalEntriesBtn				=true;
	boolean expinterDepartmentalJVBtn					=true;
	boolean expdebitNotesLineWiseBtn					=true;
	boolean expcreditNotesLineWiseBtn					=true;
	boolean expfixedAssetDepreciationVoucherBtn			=true;
	boolean expjournalEntriesBtn						=true;
	boolean expdebitNotesBtn							=true;
	boolean expcreditNotesBtn							=true;
	boolean exppayRollPostingsBtn						=true;
	boolean expopeningBalancesBtn						=true;
	boolean expshortageInStocksBtn						=true;
	boolean expexcessInStocksBtn						=true;
	boolean expstockTransfersBtn						=true;
	boolean expopeningStocksBtn							=true;
	boolean expissuesToProductionBtn					=true;
	boolean expreceiptsFromProductionBtn				=true;
	boolean expreturnsFromShopfloorBtn					=true;
	boolean expjobWorkIssuesBtn							=true;
	boolean expjobWorkReeceiptsBtn						=true;
	boolean exppurchaseQuotationsBtn					=true;
	boolean expsalesQuotationsBtn						=true;
	boolean expjobOrderBtn								=true;
	boolean expupdateBtn								=true;
	boolean expCloseBtnINDC									=true;
	
	
	System.out.println("***********************************************checkDocumentCustomizationOptions***************************************************");
	
	System.out.println("SearchBox                         : "+actsearchBox                         +"  value expected  "+expsearchBox);
	System.out.println("CreateVoucherBtn                  : "+actcreateVoucherBtn                  +"  value expected  "+expcreateVoucherBtn);
	System.out.println("DeletevoucherBtn                  : "+actdeletevoucherBtn                  +"  value expected  "+expdeletevoucherBtn);
	System.out.println("ReceiptsBtn                       : "+actreceiptsBtn                       +"  value expected  "+expreceiptsBtn);
	System.out.println("PaymentsBtn                       : "+actpaymentsBtn                       +"  value expected  "+exppaymentsBtn);
	System.out.println("PettyCashBtn                      : "+actpettyCashBtn                      +"  value expected  "+exppettyCashBtn);
	System.out.println("PostDatedreceiptsBtn              : "+actpostDatedreceiptsBtn              +"  value expected  "+exppostDatedreceiptsBtn);
	System.out.println("PostDatedpaymentsBtn              : "+actpostDatedpaymentsBtn              +"  value expected  "+exppostDatedpaymentsBtn);
	System.out.println("PurchaseVouchersBtn               : "+actpurchaseVouchersBtn               +"  value expected  "+exppurchaseVouchersBtn);
	System.out.println("PurchaseReturnsBtn                : "+actpurchaseReturnsBtn                +"  value expected  "+exppurchaseReturnsBtn);
	System.out.println("PurcahseOrdersBtn                 : "+actpurcahseOrdersBtn                 +"  value expected  "+exppurcahseOrdersBtn);
	System.out.println("JobOrdersBtn                      : "+actjobOrdersBtn                      +"  value expected  "+expjobOrdersBtn);
	System.out.println("MaterialReceiptsNotesBtn          : "+actmaterialReceiptsNotesBtn          +"  value expected  "+expmaterialReceiptsNotesBtn);
	System.out.println("SalesInvoiceBtn                   : "+actsalesInvoiceBtn                   +"  value expected  "+expsalesInvoiceBtn);
	System.out.println("CashSalesBtn                      : "+actcashSalesBtn                      +"  value expected  "+expcashSalesBtn);
	System.out.println("HirePurcahseSalesBtn              : "+acthirePurcahseSalesBtn              +"  value expected  "+exphirePurcahseSalesBtn);
	System.out.println("PosSalesBtn                       : "+actposSalesBtn                       +"  value expected  "+expposSalesBtn);
	System.out.println("SalesReturnsBtn                   : "+actsalesReturnsBtn                   +"  value expected  "+expsalesReturnsBtn);
	System.out.println("SalesOrdersBtn                    : "+actsalesOrdersBtn                    +"  value expected  "+expsalesOrdersBtn);
	System.out.println("ProductionOrderBtn                : "+actproductionOrderBtn                +"  value expected  "+expproductionOrderBtn);
	System.out.println("DeliveryNotesBtn                  : "+actdeliveryNotesBtn                  +"  value expected  "+expdeliveryNotesBtn);
	System.out.println("NonStandardjournalEntriesBtn      : "+actnonStandardjournalEntriesBtn      +"  value expected  "+expnonStandardjournalEntriesBtn);
	System.out.println("InterDepartmentalJVBtn            : "+actinterDepartmentalJVBtn            +"  value expected  "+expinterDepartmentalJVBtn);
	System.out.println("DebitNotesLineWiseBtn             : "+actdebitNotesLineWiseBtn             +"  value expected  "+expdebitNotesLineWiseBtn);
	System.out.println("CreditNotesLineWiseBtn            : "+actcreditNotesLineWiseBtn            +"  value expected  "+expcreditNotesLineWiseBtn);
	System.out.println("FixedAssetDepreciationVoucherBtn  : "+actfixedAssetDepreciationVoucherBtn  +"  value expected  "+expfixedAssetDepreciationVoucherBtn);
	System.out.println("JournalEntriesBtn                 : "+actjournalEntriesBtn                 +"  value expected  "+expjournalEntriesBtn);
	System.out.println("DebitNotesBtn                     : "+actdebitNotesBtn                     +"  value expected  "+expdebitNotesBtn);
	System.out.println("CreditNotesBtn                    : "+actcreditNotesBtn                    +"  value expected  "+expcreditNotesBtn);
	System.out.println("PayRollPostingsBtn                : "+actpayRollPostingsBtn                +"  value expected  "+exppayRollPostingsBtn);
	System.out.println("OpeningBalancesBtn                : "+actopeningBalancesBtn                +"  value expected  "+expopeningBalancesBtn);
	System.out.println("ShortageInStocksBtn               : "+actshortageInStocksBtn               +"  value expected  "+expshortageInStocksBtn);
	System.out.println("ExcessInStocksBtn                 : "+actexcessInStocksBtn                 +"  value expected  "+expexcessInStocksBtn);
	System.out.println("StockTransfersBtn                 : "+actstockTransfersBtn                 +"  value expected  "+expstockTransfersBtn);
	System.out.println("OpeningStocksBtn                  : "+actopeningStocksBtn                  +"  value expected  "+expopeningStocksBtn);
	System.out.println("IssuesToProductionBtn             : "+actissuesToProductionBtn             +"  value expected  "+expissuesToProductionBtn);
	System.out.println("ReceiptsFromProductionBtn         : "+actreceiptsFromProductionBtn         +"  value expected  "+expreceiptsFromProductionBtn);
	System.out.println("ReturnsFromShopfloorBtn           : "+actreturnsFromShopfloorBtn           +"  value expected  "+expreturnsFromShopfloorBtn);
	System.out.println("JobWorkIssuesBtn                  : "+actjobWorkIssuesBtn                  +"  value expected  "+expjobWorkIssuesBtn);
	System.out.println("JobWorkReeceiptsBtn               : "+actjobWorkReeceiptsBtn               +"  value expected  "+expjobWorkReeceiptsBtn);
	System.out.println("PurchaseQuotationsBtn             : "+actpurchaseQuotationsBtn             +"  value expected  "+exppurchaseQuotationsBtn);
	System.out.println("SalesQuotationsBtn                : "+actsalesQuotationsBtn                +"  value expected  "+expsalesQuotationsBtn);
	System.out.println("JobOrderBtn                       : "+actjobOrderBtn                       +"  value expected  "+expjobOrderBtn);
	System.out.println("UpdateBtn                         : "+actupdateBtn                         +"  value expected  "+expupdateBtn);
	System.out.println("CloseBtnINDC                          : "+actCloseBtnINDC                          +"  value expected  "+expCloseBtnINDC);
	
	if(actsearchBox==expsearchBox  && actcreateVoucherBtn==expcreateVoucherBtn  && actdeletevoucherBtn==expdeletevoucherBtn  && actreceiptsBtn==expreceiptsBtn  && 
		actpaymentsBtn==exppaymentsBtn  && actpettyCashBtn==exppettyCashBtn  && actpostDatedreceiptsBtn==exppostDatedreceiptsBtn  && 
		actpostDatedpaymentsBtn==exppostDatedpaymentsBtn  && actpurchaseVouchersBtn==exppurchaseVouchersBtn  && actpurchaseReturnsBtn==exppurchaseReturnsBtn  &&
		actpurcahseOrdersBtn==exppurcahseOrdersBtn  && actjobOrdersBtn==expjobOrdersBtn  && actmaterialReceiptsNotesBtn==expmaterialReceiptsNotesBtn  &&
		actsalesInvoiceBtn==expsalesInvoiceBtn  && actcashSalesBtn==expcashSalesBtn  && acthirePurcahseSalesBtn==exphirePurcahseSalesBtn  &&
		actposSalesBtn==expposSalesBtn  && actsalesReturnsBtn==expsalesReturnsBtn  && actsalesOrdersBtn==expsalesOrdersBtn  && actproductionOrderBtn==expproductionOrderBtn  &&
		actdeliveryNotesBtn==expdeliveryNotesBtn  && actnonStandardjournalEntriesBtn==expnonStandardjournalEntriesBtn  && actinterDepartmentalJVBtn==expinterDepartmentalJVBtn  &&
		actdebitNotesLineWiseBtn==expdebitNotesLineWiseBtn  && actcreditNotesLineWiseBtn==expcreditNotesLineWiseBtn  && actfixedAssetDepreciationVoucherBtn==expfixedAssetDepreciationVoucherBtn  &&
		actjournalEntriesBtn==expjournalEntriesBtn  && actdebitNotesBtn==expdebitNotesBtn  && actcreditNotesBtn==expcreditNotesBtn  && actpayRollPostingsBtn==exppayRollPostingsBtn  &&
		actopeningBalancesBtn==expopeningBalancesBtn  && actshortageInStocksBtn==expshortageInStocksBtn  && actexcessInStocksBtn==expexcessInStocksBtn  &&
		actstockTransfersBtn==expstockTransfersBtn  && actopeningStocksBtn==expopeningStocksBtn  && actissuesToProductionBtn==expissuesToProductionBtn  &&
		actreceiptsFromProductionBtn==expreceiptsFromProductionBtn  && actreturnsFromShopfloorBtn==expreturnsFromShopfloorBtn  && actjobWorkIssuesBtn==expjobWorkIssuesBtn  &&
		actjobWorkReeceiptsBtn==expjobWorkReeceiptsBtn  && actpurchaseQuotationsBtn==exppurchaseQuotationsBtn  && actsalesQuotationsBtn==expsalesQuotationsBtn  &&
		actjobOrderBtn==expjobOrderBtn  && actupdateBtn==expupdateBtn  && actCloseBtnINDC==expCloseBtnINDC)		
	{
		excelReader.setCellData(xlfile, "Sheet2", 145, 9, resPass);
		
		return true;
	}
	else
	{
		excelReader.setCellData(xlfile, "Sheet2", 145, 9, resPass);
		
		return false;
	}
}

	  
@FindBy(xpath="//*[@id='ul_doc_TagsDepedencyDropDown']/li/div/label//span")
public static List<WebElement> showDependencyList;



public boolean checkDocumentCustomizationCreatingPurchaseVouchersN() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersBtn));
	purchaseVouchersBtn.click();
	
	Thread.sleep(3000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loadMastersBtn));
	
	//actual
	boolean actloadMastersBtn				=loadMastersBtn.isDisplayed();
	boolean actdeleteTagBtn					=deleteTagBtn.isDisplayed();
	boolean actaddGroupBtn					=addGroupBtn.isDisplayed();
	boolean actdeletegroupBtn				=deletegroupBtn.isDisplayed();
	boolean acttitle						=titleTxt.isDisplayed();
	boolean actbaseDocument					=baseDocumentTxt.isDisplayed();
	boolean actaccountDependency			=accountDependencyTxt.isDisplayed();
	boolean actitemDependency				=itemDependencyTxt.isDisplayed();
	boolean actaccountfilterDropdown		=accountfilterDropdown.isDisplayed();
	boolean actitemfilterDropdown			=itemfilterDropdown.isDisplayed();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
	createVoucherBtn.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
	
	titleTxt.click();
	titleTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
	titleTxt.sendKeys("Purchase Vouchers N");
	
	Thread.sleep(3000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1)); 
	masters1.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
	masterDropDown.click();
	
	Select s1=new Select(masterDropDown);
	s1.selectByVisibleText("State");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
	position1.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
	positionDropdown.click();
	
	Select s2=new Select(positionDropdown);
	s2.selectByVisibleText("Header");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(showDependency1));
	showDependency1.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(showDependencyDropdown));
	showDependencyDropdown.sendKeys(Keys.SPACE);
	
	int count=showDependencyList.size();
	
	for (int i = 0; i < count; i++) 
	{
		String data=showDependencyList.get(i).getText();
		
		if (data.equalsIgnoreCase("iCountry")) 
		{
			showDependencyList.get(i).click();
			
			break;
			
		}
	}
	showDependencyDropdown.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filter1));
	filter1.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterDropdown));
	filterDropdown.click();
	
	Select s3=new Select(filterDropdown);
	s3.selectByVisibleText("iCountry");
	filterDropdown.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2)); 
	masters2.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
	masterDropDown.click();
	
	Select s4=new Select(masterDropDown);
	s4.selectByVisibleText("City");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
	position2.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
	positionDropdown.click();
	
	Select s5=new Select(positionDropdown);
	s5.selectByVisibleText("Header");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters3));
	masters3.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
	masterDropDown.click();
	
	Select s6=new Select(masterDropDown);
	s6.selectByVisibleText("Department");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position3));
	position3.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
	positionDropdown.click();
	
	Select s7=new Select(positionDropdown);
	s7.selectByVisibleText("Header");
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters4));
	masters4.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
	masterDropDown.click();
	
	Select s8=new Select(masterDropDown);
	s8.selectByVisibleText("Warehouse");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position4));
	position4.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
	positionDropdown.click();
	
	Select s9=new Select(positionDropdown);
	s9.selectByVisibleText("Header");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(showDependency4));
	showDependency4.click();
	
	//actual
	String acttitleTxt							=titleTxt.getAttribute("value");
	String actbaseDocumentTxt					=baseDocumentTxt.getAttribute("value");
	String actmasters1							=masters1.getText();
	String actposition1							=position1.getText();
	String actshowDependency1					=showDependency1.getText();
	String actfilter1							=filter1.getText();
	String actmasters2							=masters2.getText();
	String actposition2							=position2.getText();
	String actmasters3							=masters3.getText();
	String actposition3							=position3.getText();
	String actmasters4							=masters4.getText();
	String actposition4							=position4.getText();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
	editScreenTab.click();
	
	Thread.sleep(2000);
	
	boolean acteditScreenBodyTabRowsCount			=editScreenBodyTabTable.getText().isEmpty();
	boolean expeditScreenBodyTabRowsCount			=true;
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
	editScreenaddBtn.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
	editScreenCaptionTxt.click();
	editScreenCaptionTxt.sendKeys("Test");
	editScreenCaptionTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
	editScreenNoOfDecimalsTxt.click();
	editScreenNoOfDecimalsTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
	editScreenNoOfDecimalsTxt.sendKeys("3");
	editScreenNoOfDecimalsTxt.sendKeys(Keys.TAB);
	
	Select net=new Select(editScreenAddToNetDropdown);
	net.selectByVisibleText("Deduct");
	
	Select stock=new Select(EditScreenAddToStockDropDown);
	stock.selectByVisibleText("Deduct");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
	editScreenFieldOkBtn.click();
	
	String expBodyTabMessage							="Data saved successfully";
	String actBodyTabMessage							=checkValidationMessage(expBodyTabMessage);
	
	int acteditScreenBodyTabRowsCountAfterAdding		=editScreenBodyTabRowsCount.size();
	int expeditScreenBodyTabRowsCountAfterAdding		=1;
	
	String acteditScreenBody1stRowCaption				=editScreenBody1stRowCaption.getText();
	boolean acteditScreenBody1stRowFormula				=editScreenBody1stRowFormula.getText().isEmpty();
	
	String expeditScreenBody1stRowCaption				="Test";
	boolean expeditScreenBody1stRowFormula				=true;
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(	editScreenBody1stRowEditBtn));
	editScreenBody1stRowEditBtn.click();
	
	Thread.sleep(2000);
	
	String actEditScreenCaptionTxt				=editScreenCaptionTxt.getAttribute("value");
	String actEditScreenNoOfDecimalsTxt			=editScreenNoOfDecimalsTxt.getAttribute("value");
	String actAddtoNet							=net.getFirstSelectedOption().getText();
	String actAddtoStock						=stock.getFirstSelectedOption().getText();
	
	String expEditScreenCaptionTxt				="Test";
	String expEditScreenNoOfDecimalsTxt			="3";
	String expAddtoNet							="Deduct";
	String expAddtoStock						="Deduct";
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
	editScreenCaptionTxt.click();
	editScreenCaptionTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
	editScreenCaptionTxt.sendKeys("Demo");
	editScreenCaptionTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
	editScreenNoOfDecimalsTxt.click();
	Thread.sleep(2000);
	editScreenNoOfDecimalsTxt.sendKeys(Keys.END, Keys.BACK_SPACE);
	editScreenNoOfDecimalsTxt.sendKeys("2");
	editScreenNoOfDecimalsTxt.sendKeys(Keys.TAB);
	
	net.selectByVisibleText("Not Applicable");
	stock.selectByVisibleText("Not Applicable");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
	editScreenFieldOkBtn.click();
	
	String expBodyTabMessageAfterEdit			="Data saved successfully";
	String actBodyTabMessageAfterEdit			=checkValidationMessage(expBodyTabMessageAfterEdit);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(	editScreenBody1stRowEditBtn));
	editScreenBody1stRowEditBtn.click();
	
	Thread.sleep(2000);
	
	String actEditScreenCaptionTxtAfterEdit				=editScreenCaptionTxt.getAttribute("value");
	String actEditScreenNoOfDecimalsTxtAfterEdit		=editScreenNoOfDecimalsTxt.getAttribute("value");
	String actAddtoNetAfterEdit							=net.getFirstSelectedOption().getText();
	String actAddtoStockAfterEdit						=stock.getFirstSelectedOption().getText();
	
	String expEditScreenCaptionTxtAfterEdit				="Demo";
	String expEditScreenNoOfDecimalsTxtAfterEdit		="2";
	String expAddtoNetAfterEdit							="Not Applicable";
	String expAddtoStockAfterEdit						="Not Applicable";
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCloseBtnINDCInDc));
	editScreenCloseBtnINDCInDc.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
	editScreenFooterTab.click();
	
	Thread.sleep(2000);
	
	boolean acteditScreenFooterTabRowsCount				=editScreenFooterTabTable.getText().isEmpty();
	boolean expeditScreenFooterTabRowsCount				=true;
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
	editScreenaddBtn.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
	editScreenCaptionTxt.click();
	editScreenCaptionTxt.sendKeys("Test");
	editScreenCaptionTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
	editScreenNoOfDecimalsTxt.click();
	editScreenNoOfDecimalsTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
	editScreenNoOfDecimalsTxt.sendKeys("3");
	editScreenNoOfDecimalsTxt.sendKeys(Keys.TAB);
	
	Select net1=new Select(editScreenAddToNetDropdown);
	net1.selectByVisibleText("Deduct");
	
	Select stock1=new Select(EditScreenAddToStockDropDown);
	stock1.selectByVisibleText("Deduct");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
	editScreenFieldOkBtn.click();
	
	String expFooterTabMessage							="Data saved successfully";
	String actFooterTabMessage							=checkValidationMessage(expBodyTabMessage);
	
	int acteditScreenFooterTabRowsCountAfterAdding		=editScreenFooterTabRowsCount.size();
	int expeditScreenFooterTabRowsCountAfterAdding		=1;
	
	String acteditScreenFooter1stRowCaption				=editScreenFooter1stRowCaption.getText();
	boolean acteditScreenFooter1stRowFormula			=editScreenFooter1stRowFormula.getText().isEmpty();
	
	String expeditScreenFooter1stRowCaption				="Test";
	boolean expeditScreenFooter1stRowFormula			=true;
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowEditBtn));
	editScreenFooter1stRowEditBtn.click();
	
	Thread.sleep(2000);
	
	String actEditFooterScreenCaptionTxt				=editScreenCaptionTxt.getAttribute("value");
	String actEditFooterScreenNoOfDecimalsTxt			=editScreenNoOfDecimalsTxt.getAttribute("value");
	String actFooterAddtoNet							=net1.getFirstSelectedOption().getText();
	String actFooterAddtoStock							=stock1.getFirstSelectedOption().getText();
	
	String expEditFooterScreenCaptionTxt				="Test";
	String expEditFooterScreenNoOfDecimalsTxt			="3";
	String expFooterAddtoNet							="Deduct";
	String expFooterAddtoStock							="Deduct";
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
	editScreenCaptionTxt.click();
	editScreenCaptionTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
	editScreenCaptionTxt.sendKeys("Demo");
	editScreenCaptionTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
	editScreenNoOfDecimalsTxt.click();
	Thread.sleep(2000);
	editScreenNoOfDecimalsTxt.sendKeys(Keys.END, Keys.BACK_SPACE);
	editScreenNoOfDecimalsTxt.sendKeys("2");
	editScreenNoOfDecimalsTxt.sendKeys(Keys.TAB);
	
	net1.selectByVisibleText("Not Applicable");
	stock1.selectByVisibleText("Not Applicable");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFieldOkBtn));
	editScreenFieldOkBtn.click();
	
	String expFooterTabMessageAfterEdit			="Data saved successfully";
	String actFooterTabMessageAfterEdit			=checkValidationMessage(expBodyTabMessageAfterEdit);
	
	String acteditScreenFooter1stRowCaptionAfterEdit			=editScreenFooter1stRowCaption.getText();
	boolean acteditScreenFooter1stRowFormulaAfterEdit			=editScreenFooter1stRowFormula.getText().isEmpty();
	
	String expeditScreenFooter1stRowCaptionAfterEdit			="Demo";
	boolean expeditScreenFooter1stRowFormulaAfterEdit			=true;
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowEditBtn));
	editScreenFooter1stRowEditBtn.click();
	
	Thread.sleep(2000);
	
	String actEditFooterScreenCaptionTxtAfterEdit				=editScreenCaptionTxt.getAttribute("value");
	String actEditFooterScreenNoOfDecimalsTxtAfterEdit			=editScreenNoOfDecimalsTxt.getAttribute("value");
	String actFooterAddtoNetAfterEdit							=net1.getFirstSelectedOption().getText();
	String actFooterAddtoStockAfterEdit							=stock1.getFirstSelectedOption().getText();
	
	String expEditFooterScreenCaptionTxtAfterEdit				="Demo";
	String expEditFooterScreenNoOfDecimalsTxtAfterEdit			="2";
	String expFooterAddtoNetAfterEdit							="Not Applicable";
	String expFooterAddtoStockAfterEdit							="Not Applicable";
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCloseBtnINDCInDc));
	editScreenCloseBtnINDCInDc.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooter1stRowDeleteBtn));
	editScreenFooter1stRowDeleteBtn.click();
	
	getWaitForAlert();
	
	String actAlertTxt				=getAlert().getText();
	String expAlertTxt				="Are you sure that you want to delete?";
	
	getAlert().accept();
	
	String expDeleteMessage="Data deleted successfully";
	String actDeleteMessage=checkValidationMessage(expDeleteMessage);
	
	boolean acteditScreenFooterTabRowsCountAfterDelete		=editScreenFooterTabTable.getText().isEmpty();
	boolean expeditScreenFooterTabRowsCountAfterDelete		=true;

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
	updateBtn.click();
	
	String expMessage="Data saved successfully";
	
	String actMessage=checkValidationMessage(expMessage);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
	CloseBtnINDC.click();
	
	//expected
	boolean exploadMastersBtn						=true;
	boolean expdeleteTagBtn							=true;
	boolean expaddGroupBtn							=true;
	boolean expdeletegroupBtn						=true;
	boolean exptitle								=true;
	boolean expbaseDocument							=true;
	boolean expaccountDependencyTxt					=true;
	boolean expitemDependencyTxt					=true;
	boolean expaccountfilterDropdown				=true;
	boolean expitemfilterDropdown					=true;
	String exptitleTxt								="Purchase Vouchers N";
	String expbaseDocumentTxt						="Purchases Vouchers 301";
	String expmasters1								="State";
	String expposition1								="Header";
	String expshowDependency1						="iCountry";
	String expfilter1								="iCountry";
	String expmasters2								="City";
	String expposition2								="Header";
	String expmasters3								="Department";
	String expposition3								="Header";
	String expmasters4								="Warehouse";
	String expposition4								="Header";
	
	
	
	
	System.out.println("*****************************************checkDocumentCustomizationCreatingPurchaseVouchersN********************************************");
	
	System.out.println("LoadMastersBtn                           : "+actloadMastersBtn                            +"  value expected  "+exploadMastersBtn);
	System.out.println("DeleteTagBtn                             : "+actdeleteTagBtn                              +"  value expected  "+expdeleteTagBtn);
	System.out.println("AddGroupBtn                              : "+actaddGroupBtn                               +"  value expected  "+expaddGroupBtn);
	System.out.println("DeletegroupBtn                           : "+actdeletegroupBtn                            +"  value expected  "+expdeletegroupBtn);
	System.out.println("Title                                    : "+acttitle                                     +"  value expected  "+exptitle);
	System.out.println("BaseDocument                             : "+actbaseDocument                              +"  value expected  "+expbaseDocument);
	System.out.println("AccountDependencyTxt                     : "+actaccountDependency                         +"  value expected  "+expaccountDependencyTxt);
	System.out.println("ItemDependencyTxt                        : "+actitemDependency                            +"  value expected  "+expitemDependencyTxt);
	System.out.println("AccountfilterDropdown                    : "+actaccountfilterDropdown                     +"  value expected  "+expaccountfilterDropdown);
	System.out.println("ItemfilterDropdown                       : "+actitemfilterDropdown                        +"  value expected  "+expitemfilterDropdown);
	System.out.println("TitleTxt                                 : "+acttitleTxt                                  +"  value expected  "+exptitleTxt);
	System.out.println("BaseDocumentTxt                          : "+actbaseDocumentTxt                           +"  value expected  "+expbaseDocumentTxt);
	System.out.println("Masters1                                 : "+actmasters1                                  +"  value expected  "+expmasters1);
	System.out.println("Position1                                : "+actposition1                                 +"  value expected  "+expposition1);
	System.out.println("ShowDependency1                          : "+actshowDependency1                           +"  value expected  "+expshowDependency1);
	System.out.println("Filter1                                  : "+actfilter1                                   +"  value expected  "+expfilter1);
	System.out.println("Masters2                                 : "+actmasters2                                  +"  value expected  "+expmasters2);
	System.out.println("Position2                                : "+actposition2                                 +"  value expected  "+expposition2);
	System.out.println("Masters3                                 : "+actmasters3                                  +"  value expected  "+expmasters3);
	System.out.println("Position3                                : "+actposition3                                 +"  value expected  "+expposition3);
	System.out.println("Masters4                                 : "+actmasters4                                  +"  value expected  "+expmasters4);
	System.out.println("Position4                                : "+actposition4                                 +"  value expected  "+expposition4);
	System.out.println("EditScreenBodyTabRowsCount               : "+acteditScreenBodyTabRowsCount                +"  value expected  "+expeditScreenBodyTabRowsCount);
	System.out.println("BodyTabMessage                           : "+actBodyTabMessage                            +"  value expected  "+expBodyTabMessage);
	System.out.println("EditScreenBodyTabRowsCountAfterAdding    : "+acteditScreenBodyTabRowsCountAfterAdding     +"  value expected  "+expeditScreenBodyTabRowsCountAfterAdding);
	System.out.println("EditScreenBody1stRowCaption              : "+acteditScreenBody1stRowCaption               +"  value expected  "+expeditScreenBody1stRowCaption);
	System.out.println("EditScreenBody1stRowFormula              : "+acteditScreenBody1stRowFormula               +"  value expected  "+expeditScreenBody1stRowFormula);
	System.out.println("EditScreenCaptionTxt                     : "+actEditScreenCaptionTxt                      +"  value expected  "+expEditScreenCaptionTxt);
	System.out.println("EditScreenNoOfDecimalsTxt                : "+actEditScreenNoOfDecimalsTxt                 +"  value expected  "+expEditScreenNoOfDecimalsTxt);
	System.out.println("AddtoNet                                 : "+actAddtoNet                                  +"  value expected  "+expAddtoNet);
	System.out.println("AddtoStock                               : "+actAddtoStock                                +"  value expected  "+expAddtoStock);
	System.out.println("BodyTabMessageAfterEdit                  : "+actBodyTabMessageAfterEdit                   +"  value expected  "+expBodyTabMessageAfterEdit);
	System.out.println("EditScreenCaptionTxtAfterEdit            : "+actEditScreenCaptionTxtAfterEdit             +"  value expected  "+expEditScreenCaptionTxtAfterEdit);
	System.out.println("EditScreenNoOfDecimalsTxtAfterEdit       : "+actEditScreenNoOfDecimalsTxtAfterEdit        +"  value expected  "+expEditScreenNoOfDecimalsTxtAfterEdit);
	System.out.println("AddtoNetAfterEdit                        : "+actAddtoNetAfterEdit                         +"  value expected  "+expAddtoNetAfterEdit);
	System.out.println("AddtoStockAfterEdit                      : "+actAddtoStockAfterEdit                       +"  value expected  "+expAddtoStockAfterEdit);
	System.out.println("EditScreenFooterTabRowsCount             : "+acteditScreenFooterTabRowsCount              +"  value expected  "+expeditScreenFooterTabRowsCount);
	System.out.println("FooterTabMessage                         : "+actFooterTabMessage                          +"  value expected  "+expFooterTabMessage);
	System.out.println("EditScreenFooterTabRowsCountAfterAdding  : "+acteditScreenFooterTabRowsCountAfterAdding   +"  value expected  "+expeditScreenFooterTabRowsCountAfterAdding);
	System.out.println("EditScreenFooter1stRowCaption            : "+acteditScreenFooter1stRowCaption             +"  value expected  "+expeditScreenFooter1stRowCaption);
	System.out.println("EditScreenFooter1stRowFormula            : "+acteditScreenFooter1stRowFormula             +"  value expected  "+expeditScreenFooter1stRowFormula);
	System.out.println("EditFooterScreenCaptionTxt               : "+actEditFooterScreenCaptionTxt                +"  value expected  "+expEditFooterScreenCaptionTxt);
	System.out.println("EditFooterScreenNoOfDecimalsTxt          : "+actEditFooterScreenNoOfDecimalsTxt           +"  value expected  "+expEditFooterScreenNoOfDecimalsTxt);
	System.out.println("FooterAddtoNet                           : "+actFooterAddtoNet                            +"  value expected  "+expFooterAddtoNet);
	System.out.println("FooterAddtoStock                         : "+actFooterAddtoStock                          +"  value expected  "+expFooterAddtoStock);
	System.out.println("FooterTabMessageAfterEdit                : "+actFooterTabMessageAfterEdit                 +"  value expected  "+expFooterTabMessageAfterEdit);
	System.out.println("EditScreenFooter1stRowCaptionAfterEdit   : "+acteditScreenFooter1stRowCaptionAfterEdit    +"  value expected  "+expeditScreenFooter1stRowCaptionAfterEdit);
	System.out.println("EditScreenFooter1stRowFormulaAfterEdit   : "+acteditScreenFooter1stRowFormulaAfterEdit    +"  value expected  "+expeditScreenFooter1stRowFormulaAfterEdit);
	System.out.println("EditFooterScreenCaptionTxtAfterEdit      : "+actEditFooterScreenCaptionTxtAfterEdit       +"  value expected  "+expEditFooterScreenCaptionTxtAfterEdit);
	System.out.println("EditFooterScreenNoOfDecimalsTxtAfterEdit : "+actEditFooterScreenNoOfDecimalsTxtAfterEdit  +"  value expected  "+expEditFooterScreenNoOfDecimalsTxtAfterEdit);
	System.out.println("FooterAddtoNetAfterEdit                  : "+actFooterAddtoNetAfterEdit                   +"  value expected  "+expFooterAddtoNetAfterEdit);
	System.out.println("FooterAddtoStockAfterEdit                : "+actFooterAddtoStockAfterEdit                 +"  value expected  "+expFooterAddtoStockAfterEdit);
	System.out.println("AlertTxt                                 : "+actAlertTxt                                  +"  value expected  "+expAlertTxt);
	System.out.println("DeleteMessage                            : "+actDeleteMessage                             +"  value expected  "+expDeleteMessage);
	System.out.println("EditScreenFooterTabRowsCountAfterDelete  : "+acteditScreenFooterTabRowsCountAfterDelete   +"  value expected  "+expeditScreenFooterTabRowsCountAfterDelete);
	System.out.println("Error Message                            : "+actMessage                                   +"  value expected  "+expMessage);
	
	if(actloadMastersBtn==exploadMastersBtn && actdeleteTagBtn==expdeleteTagBtn && actaddGroupBtn==expaddGroupBtn && actdeletegroupBtn==expdeletegroupBtn &&
		acttitle==exptitle && actbaseDocument==expbaseDocument && actaccountDependency==expaccountDependencyTxt && actitemDependency==expitemDependencyTxt &&
		actaccountfilterDropdown==expaccountfilterDropdown && actitemfilterDropdown==expitemfilterDropdown && acttitleTxt.equalsIgnoreCase(exptitleTxt) &&
		actbaseDocumentTxt.equalsIgnoreCase(expbaseDocumentTxt) && actmasters1.equalsIgnoreCase(expmasters1) && actposition1.equalsIgnoreCase(expposition1) &&
		actshowDependency1.equalsIgnoreCase(expshowDependency1) && actfilter1.equalsIgnoreCase(expfilter1) && actmasters2.equalsIgnoreCase(expmasters2) && 
		actposition2.equalsIgnoreCase(expposition2) && actmasters3.equalsIgnoreCase(expmasters3) && actposition3.equalsIgnoreCase(expposition3) &&  
		actmasters4.equalsIgnoreCase(expmasters4) && actposition4.equalsIgnoreCase(expposition4) && acteditScreenBodyTabRowsCount==expeditScreenBodyTabRowsCount && 
		actBodyTabMessage.equalsIgnoreCase(expBodyTabMessage) && acteditScreenBodyTabRowsCountAfterAdding==expeditScreenBodyTabRowsCountAfterAdding && 
		acteditScreenBody1stRowCaption.equalsIgnoreCase(expeditScreenBody1stRowCaption) && acteditScreenBody1stRowFormula==expeditScreenBody1stRowFormula && 
		actEditScreenCaptionTxt.equalsIgnoreCase(expEditScreenCaptionTxt) && actEditScreenNoOfDecimalsTxt.equalsIgnoreCase(expEditScreenNoOfDecimalsTxt) && 
		actAddtoNet.equalsIgnoreCase(expAddtoNet) && actAddtoStock.equalsIgnoreCase(expAddtoStock) && actBodyTabMessageAfterEdit.equalsIgnoreCase(expBodyTabMessageAfterEdit) && 
		actEditScreenCaptionTxtAfterEdit.equalsIgnoreCase(expEditScreenCaptionTxtAfterEdit) && actEditScreenNoOfDecimalsTxtAfterEdit.equalsIgnoreCase(expEditScreenNoOfDecimalsTxtAfterEdit) && 
		actAddtoNetAfterEdit.equalsIgnoreCase(expAddtoNetAfterEdit) && actAddtoStockAfterEdit.equalsIgnoreCase(expAddtoStockAfterEdit) && 
		acteditScreenFooterTabRowsCount==expeditScreenFooterTabRowsCount && actFooterTabMessage.equalsIgnoreCase(expFooterTabMessage) && 
		acteditScreenFooterTabRowsCountAfterAdding==expeditScreenFooterTabRowsCountAfterAdding && acteditScreenFooter1stRowCaption.equalsIgnoreCase(expeditScreenFooter1stRowCaption) && 
		acteditScreenFooter1stRowFormula==expeditScreenFooter1stRowFormula && actEditFooterScreenCaptionTxt.equalsIgnoreCase(expEditFooterScreenCaptionTxt) && 
		actEditFooterScreenNoOfDecimalsTxt.equalsIgnoreCase(expEditFooterScreenNoOfDecimalsTxt) && actFooterAddtoNet.equalsIgnoreCase(expFooterAddtoNet) && 
		actFooterAddtoStock.equalsIgnoreCase(expFooterAddtoStock) && actFooterTabMessageAfterEdit.equalsIgnoreCase(expFooterTabMessageAfterEdit) &&
		acteditScreenFooter1stRowCaptionAfterEdit.equalsIgnoreCase(expeditScreenFooter1stRowCaptionAfterEdit) && acteditScreenFooter1stRowFormulaAfterEdit==expeditScreenFooter1stRowFormulaAfterEdit &&
		actEditFooterScreenCaptionTxtAfterEdit.equalsIgnoreCase(expEditFooterScreenCaptionTxtAfterEdit) && actEditFooterScreenNoOfDecimalsTxtAfterEdit.equalsIgnoreCase(expEditFooterScreenNoOfDecimalsTxtAfterEdit) &&
		actFooterAddtoNetAfterEdit.equalsIgnoreCase(expFooterAddtoNetAfterEdit) && actFooterAddtoStockAfterEdit.equalsIgnoreCase(expFooterAddtoStockAfterEdit) &&
		actAlertTxt.equalsIgnoreCase(expAlertTxt) && actDeleteMessage.equalsIgnoreCase(expDeleteMessage) && 
		acteditScreenFooterTabRowsCountAfterDelete==expeditScreenFooterTabRowsCountAfterDelete && actMessage.equalsIgnoreCase(expMessage))		
	{
		excelReader.setCellData(xlfile, "Sheet2", 145, 9, resPass);
		
		return true;
	}
	else
	{
		excelReader.setCellData(xlfile, "Sheet2", 145, 9, resPass);
		
		return false;
	}
}



//Edit Screen Options


public boolean 	checkEditScreenTabOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
	settingsmenuBtn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
	ConfigureTransactionBtn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
	documentCustomization45Btn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
	purchaseVoucherNew.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
	editScreenTab.click();
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
	
	boolean acteditScreenBodyTab				=editScreenBodyTab.isDisplayed();
	boolean acteditScreenFooterTab				=editScreenFooterTab.isDisplayed();
	boolean acteditScreenaddBtn				    =editScreenaddBtn.isDisplayed();
	boolean acteditScreenLoadFieldsBtn			=editScreenLoadFieldsBtn.isDisplayed();
	boolean acteditScreenCustomizeGridBtn 		=editScreenCustomizeGridBtn.isDisplayed();
	boolean acteditScreenPreviousBtn			=editScreenPreviousBtn.isDisplayed();
	boolean acteditScreenNextBtn				=editScreenNextBtn.isDisplayed();
	boolean acteditScreenSearchTxt				=editScreenSearchTxt.isDisplayed();
	boolean acteditScreenBehaviourDropdown		=editScreenBehaviourDropdown.isDisplayed();
	boolean acteditScreenQuantityPreloadedTxt	=editScreenQuantityPreloadedTxt.isDisplayed();
	
	
	boolean expeditScreenBodyTab				=true;
	boolean expeditScreenFooterTab				=true;
	boolean expeditScreenaddBtn				    =true;
	boolean expeditScreenLoadFieldsBtn			=true;
	boolean expeditScreenCustomizeGridBtn		=true;
	boolean expeditScreenPreviousBtn			=true;
	boolean expeditScreenNextBtn				=true;
	boolean expeditScreenSearchTxt				=true;
	boolean expeditScreenBehaviourDropdown		=true;
	boolean expeditScreenQuantityPreloadedTxt	=true;
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBehaviourDropdown));
	ArrayList<String> acteditScreenBehaviourDropdownList = new ArrayList<String>(); 
	
	Select behaviourSelect=new Select(editScreenBehaviourDropdown);
	
	int behaviourCount=behaviourSelect.getOptions().size();

	for(int i=1;i<behaviourCount;i++)
	{
		String options=behaviourSelect.getOptions().get(i).getText();
		System.err.println(options);
		acteditScreenBehaviourDropdownList.add(options);
	}
	
	ArrayList<String>  expeditScreenBehaviourDropdownList= new ArrayList<String>(); 
	expeditScreenBehaviourDropdownList.add("Stock Rate");
	expeditScreenBehaviourDropdownList.add("Rate");
	expeditScreenBehaviourDropdownList.add("Po");
	expeditScreenBehaviourDropdownList.add("Pt");
	expeditScreenBehaviourDropdownList.add("Purchase3");
	expeditScreenBehaviourDropdownList.add("Purchase4");
	expeditScreenBehaviourDropdownList.add("Purchase5");
	expeditScreenBehaviourDropdownList.add("Purchase6");
	expeditScreenBehaviourDropdownList.add("Purchase7");
	expeditScreenBehaviourDropdownList.add("Purchase8");
	expeditScreenBehaviourDropdownList.add("Purchase9");
	expeditScreenBehaviourDropdownList.add("Purchase10");
	expeditScreenBehaviourDropdownList.add("Purchase11");
	expeditScreenBehaviourDropdownList.add("Purchase12");
	expeditScreenBehaviourDropdownList.add("Purchase13");
	expeditScreenBehaviourDropdownList.add("Formula");
	expeditScreenBehaviourDropdownList.add("Order rate");
	
	boolean actEditScreenBehaviourListCompare 	=acteditScreenBehaviourDropdownList.equals(expeditScreenBehaviourDropdownList);
	boolean expEditScreenBehaviourListCompare 	=true;
	
	int acteditScreenBodyTabRowsCount			=editScreenBodyTabRowsCount.size();
	int expeditScreenBodyTabRowsCount			=2;
	
	String acteditScreenBody1stRowCaption		=editScreenBody1stRowCaption.getText();
	String acteditScreenBody1stRowFormula		=editScreenBody1stRowFormula.getText();
	String acteditScreenBody2ndRowCaption		=editScreenBody2ndRowCaption.getText();
	boolean acteditScreenBody2ndRowFormula		=editScreenBody2ndRowFormula.getText().isEmpty();
	
	String expeditScreenBody1stRowCaption		="RD";
	String expeditScreenBody1stRowFormula		="&(gr*sf1)/tgr";
	String expeditScreenBody2ndRowCaption		="Avg Rate(O)";
	boolean expeditScreenBody2ndRowFormula		=true;
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
	editScreenFooterTab.click();
	
	Thread.sleep(2000);
	
	int acteditScreenFooterTabRowsCount			=editScreenFooterTabRowsCount.size();
	int expeditScreenFooterTabRowsCount			=1;
	
	String acteditScreenFooter1stRowCaption		=editScreenFooter1stRowCaption.getText();
	boolean acteditScreenFooter1stRowFormula	=editScreenFooter1stRowFormula.getText().isEmpty();
	
	String expeditScreenFooter1stRowCaption		="FD%";
	boolean expeditScreenFooter1stRowFormula	=true;
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
	editScreenaddBtn.click();
	
	boolean acteditScreenFieldDetailsTab	    =editScreenFieldDetailsTab.isDisplayed();
	boolean acteditScreenPropertiesTab		    =editScreenPropertiesTab.isDisplayed();
	boolean acteditScreenformattingTab			=editScreenformattingTab.isDisplayed();
	boolean acteditScreenExternalModulesTab		=editScreenExternalModulesTab.isDisplayed();
	boolean acteditScreenFieldOkBtn               =editScreenFieldOkBtn.isDisplayed();
	boolean acteditScreenCloseBtnINDCInDc               =editScreenCloseBtnINDCInDc.isDisplayed();
	
	boolean expeditScreenFieldDetailsTab	    =true;
	boolean expeditScreenPropertiesTab		    =true;
	boolean expeditScreenformattingTab			=true;
	boolean expeditScreenExternalModulesTab		=true;
	boolean expeditScreenFieldOkBtn               =true;
	boolean expeditScreenCloseBtnINDCInDc               =true;
	
	
	boolean acteditScreenCaptionTxt							=editScreenCaptionTxt.isDisplayed();
	boolean acteditScreenCaptionDataTypeDropdown			=editScreenCaptionDataTypeDropdown.isDisplayed();
	boolean acteditScreenDefaultValueTxt					=editScreenDefaultValueTxt.isDisplayed();
	boolean acteditScreenNoOfDecimalsTxt					=editScreenNoOfDecimalsTxt.isDisplayed();
	boolean acteditScreenToolTipTxt							=editScreenToolTipTxt.isDisplayed();
	boolean acteditScreenBannerTextTxt						=editScreenBannerTextTxt.isDisplayed();
	boolean acteditScreenMinimunValueTxt					=editScreenMinimunValueTxt.isDisplayed();
	boolean acteditScreenMaximunValueTxt					=editScreenMaximunValueTxt.isDisplayed();
	boolean acteditScreenAddFieldsBehaviourDropdown			=editScreenAddFieldsBehaviourDropdown.isDisplayed();
	boolean acteditScreenPreloadTxt							=editScreenPreloadTxt.isDisplayed();
	boolean acteditScreenRestrictformulaTxt					=editScreenRestrictformulaTxt.isDisplayed();
	boolean acteditScreenRoundOffsDropdown					=editScreenRoundOffsDropdown.isDisplayed();
	boolean acteditScreenRoundOffToTxt						=editScreenRoundOffToTxt.isDisplayed();
	boolean acteditScreenRestrictMessageTxt					=editScreenRestrictMessageTxt.isDisplayed();
	boolean acteditScreenAddToNetDropdown					=editScreenAddToNetDropdown.isDisplayed();
	boolean actEditScreenAddToStockDropDown					=EditScreenAddToStockDropDown.isDisplayed();
	boolean acteditScreenpositionDropdown					=editScreenpositionDropdown.isDisplayed();
	boolean acteditScreenColumnWidthTxt						=editScreenColumnWidthTxt.isDisplayed();
	boolean acteditScreenValueInBaseCurrencyChkBox			=editScreenValueInBaseCurrencyChkBox.isDisplayed();
	boolean acteditScreenHideFromSummaryChkBox				=editScreenHideFromSummaryChkBox.isDisplayed();
	boolean acteditScreenPostToAccountChkBox				=editScreenPostToAccountChkBox.isDisplayed();
	boolean acteditScreenAccount1Radio						=editScreenAccount1Radio.isDisplayed();
	boolean acteditScreenAccount1Txt						=editScreenAccount1Txt.isDisplayed();
	boolean acteditScreenAccount1AllowEntryChkBox			=editScreenAccount1AllowEntryChkBox.isDisplayed();
	boolean acteditScreenAccount2Radio						=editScreenAccount2Radio.isDisplayed();
	boolean acteditScreenAccount2Txt						=editScreenAccount2Txt.isDisplayed();
	boolean acteditScreenAccount2AllowEntryChkBox			=editScreenAccount2AllowEntryChkBox.isDisplayed();
	boolean acteditScreenAccount1VariableTxt				=editScreenAccount1VariableTxt.isDisplayed();
	boolean acteditScreenAccount1VariableRadio				=editScreenAccount1VariableRadio.isDisplayed();
	boolean acteditScreenAccount2VariableTxt				=editScreenAccount2VariableTxt.isDisplayed();
	boolean acteditScreenAccount2VariableRadio				=editScreenAccount2VariableRadio.isDisplayed();
	boolean acteditScreenRegularExpTxt						=editScreenRegularExpTxt.isDisplayed();
	boolean acteditScreenerrorMessageTxt					=editScreenerrorMessageTxt.isDisplayed();
	
	
	boolean expeditScreenCaptionTxt							=true;
	boolean expeditScreenCaptionDataTypeDropdown			=true;
	boolean expeditScreenDefaultValueTxt					=true;
	boolean expeditScreenNoOfDecimalsTxt					=true;
	boolean expeditScreenToolTipTxt							=true;
	boolean expeditScreenBannerTextTxt						=true;
	boolean expeditScreenMinimunValueTxt					=true;
	boolean expeditScreenMaximunValueTxt					=true;
	boolean expeditScreenAddFieldsBehaviourDropdown			=true;
	boolean expeditScreenPreloadTxt							=true;
	boolean expeditScreenRestrictformulaTxt					=true;
	boolean expeditScreenRoundOffsDropdown					=true;
	boolean expeditScreenRoundOffToTxt						=true;
	boolean expeditScreenRestrictMessageTxt					=true;
	boolean expeditScreenAddToNetDropdown					=true;
	boolean expeditScreenAddToStockDropDown					=true;
	boolean expeditScreenpositionDropdown					=true;
	boolean expeditScreenColumnWidthTxt						=true;
	boolean expeditScreenValueInBaseCurrencyChkBox			=true;
	boolean expeditScreenHideFromSummaryChkBox				=true;
	boolean expeditScreenPostToAccountChkBox				=true;
	boolean expeditScreenAccount1Radio						=true;
	boolean expeditScreenAccount1Txt						=true;
	boolean expeditScreenAccount1AllowEntryChkBox			=true;
	boolean expeditScreenAccount2Radio						=true;
	boolean expeditScreenAccount2Txt						=true;
	boolean expeditScreenAccount2AllowEntryChkBox			=true;
	boolean expeditScreenAccount1VariableTxt				=true;
	boolean expeditScreenAccount1VariableRadio				=true;
	boolean expeditScreenAccount2VariableTxt				=true;
	boolean expeditScreenAccount2VariableRadio				=true;
	boolean expeditScreenRegularExpTxt						=true;
	boolean expeditScreenerrorMessageTxt					=true;
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesTab));
	editScreenPropertiesTab.click();
	
	Thread.sleep(2000);
	
	boolean acteditScreenauditTrailChkBox				=editScreenauditTrailChkBox.isDisplayed();
	boolean acteditScreencantExportChkBox				=editScreencantExportChkBox.isDisplayed();
	boolean acteditScreencantImportChkbox				=editScreencantImportChkbox.isDisplayed();
	boolean acteditScreenhiddenChkbox					=editScreenhiddenChkbox.isDisplayed();
	boolean acteditScreenmandatorychkBox				=editScreenmandatorychkBox.isDisplayed();
	boolean acteditScreennotAvailableForReportsChkBox	=editScreennotAvailableForReportsChkBox.isDisplayed();
	boolean acteditScreenreadOnlyChkBox					=editScreenreadOnlyChkBox.isDisplayed();
	
	boolean expeditScreenauditTrailChkBox				=true;
	boolean expeditScreencantExportChkBox				=true;
	boolean expeditScreencantImportChkbox				=true;
	boolean expeditScreenhiddenChkbox					=true;
	boolean expeditScreenmandatorychkBox				=true;
	boolean expeditScreennotAvailableForReportsChkBox	=true;
	boolean expeditScreenreadOnlyChkBox					=true;
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenformattingTab));
	editScreenformattingTab.click();
	
	Thread.sleep(2000);
	
	boolean acteditScreenenableFontChkbox				=editScreenenableFontChkbox.isDisplayed();
	
	boolean expeditScreenenableFontChkbox				=true;
	
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenExternalModulesTab));
	editScreenExternalModulesTab.click();
	
	Thread.sleep(2000);
	
	boolean acteditScreenOnEventDrpDwn					=editScreenOnEventDrpDwn.isDisplayed();
	boolean acteditScreenModuleTypeDrpDwn				=editScreenModuleTypeDrpDwn.isDisplayed();
	boolean acteditScreenModuleNameTxt					=editScreenModuleNameTxt.isDisplayed();
	boolean acteditScreenClassNameDrpDwn				=editScreenClassNameDrpDwn.isDisplayed();
	boolean acteditScreenFunctionNameDrpDwn				=editScreenFunctionNameDrpDwn.isDisplayed();
	boolean acteditScreenInsertBtn						=editScreenInsertBtn.isDisplayed();
	boolean acteditScreenRemoveBtn						=editScreenRemoveBtn.isDisplayed();
	
	boolean expeditScreenOnEventDrpDwn					=true;
	boolean expeditScreenModuleTypeDrpDwn				=true;
	boolean expeditScreenModuleNameTxt					=true;
	boolean expeditScreenClassNameDrpDwn				=true;
	boolean expeditScreenFunctionNameDrpDwn				=true;
	boolean expeditScreenInsertBtn						=true;
	boolean expeditScreenRemoveBtn						=true;
	
	
	System.out.println("EditScreenBodyTab                       : "+acteditScreenBodyTab                       +"  value expected  "+expeditScreenBodyTab);
	System.out.println("EditScreenFooterTab                     : "+acteditScreenFooterTab                     +"  value expected  "+expeditScreenFooterTab);
	System.out.println("EditScreenaddBtn                        : "+acteditScreenaddBtn                        +"  value expected  "+expeditScreenaddBtn);
	System.out.println("EditScreenLoadFieldsBtn                 : "+acteditScreenLoadFieldsBtn                 +"  value expected  "+expeditScreenLoadFieldsBtn);
	System.out.println("EditScreenCustomizeGridBtn              : "+acteditScreenCustomizeGridBtn              +"  value expected  "+expeditScreenCustomizeGridBtn);
	System.out.println("EditScreenPreviousBtn                   : "+acteditScreenPreviousBtn                   +"  value expected  "+expeditScreenPreviousBtn);
	System.out.println("EditScreenNextBtn                       : "+acteditScreenNextBtn                       +"  value expected  "+expeditScreenNextBtn);
	System.out.println("EditScreenSearchTxt                     : "+acteditScreenSearchTxt                     +"  value expected  "+expeditScreenSearchTxt);
	System.out.println("EditScreenBehaviourDropdown             : "+acteditScreenBehaviourDropdown             +"  value expected  "+expeditScreenBehaviourDropdown);
	System.out.println("EditScreenQuantityPreloadedTxt          : "+acteditScreenQuantityPreloadedTxt          +"  value expected  "+expeditScreenQuantityPreloadedTxt);
	System.out.println("EditScreenBehaviourListCompare          : "+actEditScreenBehaviourListCompare          +"  value expected  "+expEditScreenBehaviourListCompare);
	System.out.println("EditScreenBodyTabRowsCount              : "+acteditScreenBodyTabRowsCount              +"  value expected  "+expeditScreenBodyTabRowsCount);
	System.out.println("EditScreenBody1stRowCaption             : "+acteditScreenBody1stRowCaption             +"  value expected  "+expeditScreenBody1stRowCaption);
	System.out.println("EditScreenBody1stRowFormula             : "+acteditScreenBody1stRowFormula             +"  value expected  "+expeditScreenBody1stRowFormula);
	System.out.println("EditScreenBody2ndRowCaption             : "+acteditScreenBody2ndRowCaption             +"  value expected  "+expeditScreenBody2ndRowCaption);
	System.out.println("EditScreenBody2ndRowFormula             : "+acteditScreenBody2ndRowFormula             +"  value expected  "+expeditScreenBody2ndRowFormula);
	System.out.println("EditScreenFooterTabRowsCount            : "+acteditScreenFooterTabRowsCount            +"  value expected  "+expeditScreenFooterTabRowsCount);
	System.out.println("EditScreenFooter1stRowCaption           : "+acteditScreenFooter1stRowCaption           +"  value expected  "+expeditScreenFooter1stRowCaption);
	System.out.println("EditScreenFooter1stRowFormula           : "+acteditScreenFooter1stRowFormula           +"  value expected  "+expeditScreenFooter1stRowFormula);
	System.out.println("EditScreenFieldDetailsTab               : "+acteditScreenFieldDetailsTab               +"  value expected  "+expeditScreenFieldDetailsTab);
	System.out.println("EditScreenPropertiesTab                 : "+acteditScreenPropertiesTab                 +"  value expected  "+expeditScreenPropertiesTab);
	System.out.println("EditScreenformattingTab                 : "+acteditScreenformattingTab                 +"  value expected  "+expeditScreenformattingTab);
	System.out.println("EditScreenExternalModulesTab            : "+acteditScreenExternalModulesTab            +"  value expected  "+expeditScreenExternalModulesTab);
	System.out.println("editScreenFieldOkBtn                      : "+acteditScreenFieldOkBtn                      +"  value expected  "+expeditScreenFieldOkBtn);
	System.out.println("editScreenCloseBtnINDCInDc                      : "+acteditScreenCloseBtnINDCInDc                      +"  value expected  "+expeditScreenCloseBtnINDCInDc);
	System.out.println("EditScreenCaptionTxt                    : "+acteditScreenCaptionTxt                    +"  value expected  "+expeditScreenCaptionTxt);
	System.out.println("EditScreenCaptionDataTypeDropdown       : "+acteditScreenCaptionDataTypeDropdown       +"  value expected  "+expeditScreenCaptionDataTypeDropdown);
	System.out.println("EditScreenDefaultValueTxt               : "+acteditScreenDefaultValueTxt               +"  value expected  "+expeditScreenDefaultValueTxt);
	System.out.println("EditScreenNoOfDecimalsTxt               : "+acteditScreenNoOfDecimalsTxt               +"  value expected  "+expeditScreenNoOfDecimalsTxt);
	System.out.println("EditScreenToolTipTxt                    : "+acteditScreenToolTipTxt                    +"  value expected  "+expeditScreenToolTipTxt);
	System.out.println("EditScreenBannerTextTxt                 : "+acteditScreenBannerTextTxt                 +"  value expected  "+expeditScreenBannerTextTxt);
	System.out.println("EditScreenMinimunValueTxt               : "+acteditScreenMinimunValueTxt               +"  value expected  "+expeditScreenMinimunValueTxt);
	System.out.println("EditScreenMaximunValueTxt               : "+acteditScreenMaximunValueTxt               +"  value expected  "+expeditScreenMaximunValueTxt);
	System.out.println("EditScreenAddFieldsBehaviourDropdown    : "+acteditScreenAddFieldsBehaviourDropdown    +"  value expected  "+expeditScreenAddFieldsBehaviourDropdown);
	System.out.println("EditScreenPreloadTxt                    : "+acteditScreenPreloadTxt                    +"  value expected  "+expeditScreenPreloadTxt);
	System.out.println("EditScreenRestrictformulaTxt            : "+acteditScreenRestrictformulaTxt            +"  value expected  "+expeditScreenRestrictformulaTxt);
	System.out.println("EditScreenRoundOffsDropdown             : "+acteditScreenRoundOffsDropdown             +"  value expected  "+expeditScreenRoundOffsDropdown);
	System.out.println("EditScreenRoundOffToTxt                 : "+acteditScreenRoundOffToTxt                 +"  value expected  "+expeditScreenRoundOffToTxt);
	System.out.println("EditScreenRestrictMessageTxt            : "+acteditScreenRestrictMessageTxt            +"  value expected  "+expeditScreenRestrictMessageTxt);
	System.out.println("EditScreenAddToNetDropdown              : "+acteditScreenAddToNetDropdown              +"  value expected  "+expeditScreenAddToNetDropdown);
	System.out.println("EditScreenAddToStockDropDown            : "+actEditScreenAddToStockDropDown            +"  value expected  "+expeditScreenAddToStockDropDown);
	System.out.println("EditScreenpositionDropdown              : "+acteditScreenpositionDropdown              +"  value expected  "+expeditScreenpositionDropdown);
	System.out.println("EditScreenColumnWidthTxt                : "+acteditScreenColumnWidthTxt                +"  value expected  "+expeditScreenColumnWidthTxt);
	System.out.println("EditScreenValueInBaseCurrencyChkBox     : "+acteditScreenValueInBaseCurrencyChkBox     +"  value expected  "+expeditScreenValueInBaseCurrencyChkBox);
	System.out.println("EditScreenHideFromSummaryChkBox         : "+acteditScreenHideFromSummaryChkBox         +"  value expected  "+expeditScreenHideFromSummaryChkBox);
	System.out.println("EditScreenPostToAccountChkBox           : "+acteditScreenPostToAccountChkBox           +"  value expected  "+expeditScreenPostToAccountChkBox);
	System.out.println("EditScreenAccount1Radio                 : "+acteditScreenAccount1Radio                 +"  value expected  "+expeditScreenAccount1Radio);
	System.out.println("EditScreenAccount1Txt                   : "+acteditScreenAccount1Txt                   +"  value expected  "+expeditScreenAccount1Txt);
	System.out.println("EditScreenAccount1AllowEntryChkBox      : "+acteditScreenAccount1AllowEntryChkBox      +"  value expected  "+expeditScreenAccount1AllowEntryChkBox);
	System.out.println("EditScreenAccount2Radio                 : "+acteditScreenAccount2Radio                 +"  value expected  "+expeditScreenAccount2Radio);
	System.out.println("EditScreenAccount2Txt                   : "+acteditScreenAccount2Txt                   +"  value expected  "+expeditScreenAccount2Txt);
	System.out.println("EditScreenAccount2AllowEntryChkBox      : "+acteditScreenAccount2AllowEntryChkBox      +"  value expected  "+expeditScreenAccount2AllowEntryChkBox);
	System.out.println("EditScreenAccount1VariableTxt           : "+acteditScreenAccount1VariableTxt           +"  value expected  "+expeditScreenAccount1VariableTxt);
	System.out.println("EditScreenAccount1VariableRadio         : "+acteditScreenAccount1VariableRadio         +"  value expected  "+expeditScreenAccount1VariableRadio);
	System.out.println("EditScreenAccount2VariableTxt           : "+acteditScreenAccount2VariableTxt           +"  value expected  "+expeditScreenAccount2VariableTxt);
	System.out.println("EditScreenAccount2VariableRadio         : "+acteditScreenAccount2VariableRadio         +"  value expected  "+expeditScreenAccount2VariableRadio);
	System.out.println("EditScreenRegularExpTxt                 : "+acteditScreenRegularExpTxt                 +"  value expected  "+expeditScreenRegularExpTxt);
	System.out.println("EditScreenerrorMessageTxt               : "+acteditScreenerrorMessageTxt               +"  value expected  "+expeditScreenerrorMessageTxt);
	System.out.println("EditScreenauditTrailChkBox              : "+acteditScreenauditTrailChkBox              +"  value expected  "+expeditScreenauditTrailChkBox);
	System.out.println("EditScreencantExportChkBox              : "+acteditScreencantExportChkBox              +"  value expected  "+expeditScreencantExportChkBox);
	System.out.println("EditScreencantImportChkbox              : "+acteditScreencantImportChkbox              +"  value expected  "+expeditScreencantImportChkbox);
	System.out.println("EditScreenhiddenChkbox                  : "+acteditScreenhiddenChkbox                  +"  value expected  "+expeditScreenhiddenChkbox);
	System.out.println("EditScreenmandatorychkBox               : "+acteditScreenmandatorychkBox               +"  value expected  "+expeditScreenmandatorychkBox);
	System.out.println("EditScreennotAvailableForReportsChkBox  : "+acteditScreennotAvailableForReportsChkBox  +"  value expected  "+expeditScreennotAvailableForReportsChkBox);
	System.out.println("EditScreenreadOnlyChkBox                : "+acteditScreenreadOnlyChkBox                +"  value expected  "+expeditScreenreadOnlyChkBox);
	System.out.println("EditScreenenableFontChkbox              : "+acteditScreenenableFontChkbox              +"  value expected  "+expeditScreenenableFontChkbox);
	System.out.println("EditScreenOnEventDrpDwn                 : "+acteditScreenOnEventDrpDwn                 +"  value expected  "+expeditScreenOnEventDrpDwn);
	System.out.println("EditScreenModuleTypeDrpDwn              : "+acteditScreenModuleTypeDrpDwn              +"  value expected  "+expeditScreenModuleTypeDrpDwn);
	System.out.println("EditScreenModuleNameTxt                 : "+acteditScreenModuleNameTxt                 +"  value expected  "+expeditScreenModuleNameTxt);
	System.out.println("EditScreenClassNameDrpDwn               : "+acteditScreenClassNameDrpDwn               +"  value expected  "+expeditScreenClassNameDrpDwn);
	System.out.println("EditScreenFunctionNameDrpDwn            : "+acteditScreenFunctionNameDrpDwn            +"  value expected  "+expeditScreenFunctionNameDrpDwn);
	System.out.println("EditScreenInsertBtn                     : "+acteditScreenInsertBtn                     +"  value expected  "+expeditScreenInsertBtn);
	System.out.println("EditScreenRemoveBtn                     : "+acteditScreenRemoveBtn                     +"  value expected  "+expeditScreenRemoveBtn);
	
	if(acteditScreenBodyTab==expeditScreenBodyTab && acteditScreenFooterTab==expeditScreenFooterTab && acteditScreenaddBtn==expeditScreenaddBtn &&
		acteditScreenLoadFieldsBtn==expeditScreenLoadFieldsBtn && acteditScreenCustomizeGridBtn==expeditScreenCustomizeGridBtn && 
		acteditScreenPreviousBtn==expeditScreenPreviousBtn && acteditScreenNextBtn==expeditScreenNextBtn && acteditScreenSearchTxt==expeditScreenSearchTxt &&
		acteditScreenBehaviourDropdown==expeditScreenBehaviourDropdown && acteditScreenQuantityPreloadedTxt==expeditScreenQuantityPreloadedTxt &&
		actEditScreenBehaviourListCompare==expEditScreenBehaviourListCompare && acteditScreenBodyTabRowsCount==expeditScreenBodyTabRowsCount &&
		acteditScreenBody1stRowCaption.equalsIgnoreCase(expeditScreenBody1stRowCaption) && acteditScreenBody1stRowFormula.equalsIgnoreCase(expeditScreenBody1stRowFormula) &&
		acteditScreenBody2ndRowCaption.equalsIgnoreCase(expeditScreenBody2ndRowCaption) && acteditScreenBody2ndRowFormula==expeditScreenBody2ndRowFormula &&
		acteditScreenFooterTabRowsCount==expeditScreenFooterTabRowsCount && acteditScreenFooter1stRowCaption.equalsIgnoreCase(expeditScreenFooter1stRowCaption) &&
		acteditScreenFooter1stRowFormula==expeditScreenFooter1stRowFormula && acteditScreenFieldDetailsTab==expeditScreenFieldDetailsTab &&
		acteditScreenPropertiesTab==expeditScreenPropertiesTab && acteditScreenformattingTab==expeditScreenformattingTab &&
		acteditScreenExternalModulesTab==expeditScreenExternalModulesTab && acteditScreenFieldOkBtn==expeditScreenFieldOkBtn && acteditScreenCloseBtnINDCInDc==expeditScreenCloseBtnINDCInDc &&
		acteditScreenCaptionTxt==expeditScreenCaptionTxt && acteditScreenCaptionDataTypeDropdown==expeditScreenCaptionDataTypeDropdown &&
		acteditScreenDefaultValueTxt==expeditScreenDefaultValueTxt && acteditScreenNoOfDecimalsTxt==expeditScreenNoOfDecimalsTxt &&
		acteditScreenToolTipTxt==expeditScreenToolTipTxt && acteditScreenBannerTextTxt==expeditScreenBannerTextTxt && acteditScreenMinimunValueTxt==expeditScreenMinimunValueTxt &&
		acteditScreenMaximunValueTxt==expeditScreenMaximunValueTxt && acteditScreenAddFieldsBehaviourDropdown==expeditScreenAddFieldsBehaviourDropdown &&
		acteditScreenPreloadTxt==expeditScreenPreloadTxt && acteditScreenRestrictformulaTxt==expeditScreenRestrictformulaTxt &&
		acteditScreenRoundOffsDropdown==expeditScreenRoundOffsDropdown && acteditScreenRoundOffToTxt==expeditScreenRoundOffToTxt &&
		acteditScreenRestrictMessageTxt==expeditScreenRestrictMessageTxt && acteditScreenAddToNetDropdown==expeditScreenAddToNetDropdown &&
		actEditScreenAddToStockDropDown==expeditScreenAddToStockDropDown && acteditScreenpositionDropdown==expeditScreenpositionDropdown &&
		acteditScreenColumnWidthTxt==expeditScreenColumnWidthTxt && acteditScreenValueInBaseCurrencyChkBox==expeditScreenValueInBaseCurrencyChkBox &&
		acteditScreenHideFromSummaryChkBox==expeditScreenHideFromSummaryChkBox && acteditScreenPostToAccountChkBox==expeditScreenPostToAccountChkBox &&
		acteditScreenAccount1Radio==expeditScreenAccount1Radio && acteditScreenAccount1Txt==expeditScreenAccount1Txt &&
		acteditScreenAccount1AllowEntryChkBox==expeditScreenAccount1AllowEntryChkBox && acteditScreenAccount2Radio==expeditScreenAccount2Radio &&
		acteditScreenAccount2Txt==expeditScreenAccount2Txt && acteditScreenAccount2AllowEntryChkBox==expeditScreenAccount2AllowEntryChkBox &&
		acteditScreenAccount1VariableTxt==expeditScreenAccount1VariableTxt && acteditScreenAccount1VariableRadio==expeditScreenAccount1VariableRadio &&
		acteditScreenAccount2VariableTxt==expeditScreenAccount2VariableTxt && acteditScreenAccount2VariableRadio==expeditScreenAccount2VariableRadio &&
		acteditScreenRegularExpTxt==expeditScreenRegularExpTxt && acteditScreenerrorMessageTxt==expeditScreenerrorMessageTxt &&
		acteditScreenauditTrailChkBox==expeditScreenauditTrailChkBox && acteditScreencantExportChkBox==expeditScreencantExportChkBox &&
		acteditScreencantImportChkbox==expeditScreencantImportChkbox && acteditScreenhiddenChkbox==expeditScreenhiddenChkbox &&
		acteditScreenmandatorychkBox==expeditScreenmandatorychkBox && acteditScreennotAvailableForReportsChkBox==expeditScreennotAvailableForReportsChkBox &&
		acteditScreenreadOnlyChkBox==expeditScreenreadOnlyChkBox && acteditScreenenableFontChkbox==expeditScreenenableFontChkbox &&
		acteditScreenOnEventDrpDwn==expeditScreenOnEventDrpDwn && acteditScreenModuleTypeDrpDwn==expeditScreenModuleTypeDrpDwn &&
		acteditScreenModuleNameTxt==expeditScreenModuleNameTxt && acteditScreenClassNameDrpDwn==expeditScreenClassNameDrpDwn &&
		acteditScreenFunctionNameDrpDwn==expeditScreenFunctionNameDrpDwn && acteditScreenInsertBtn==expeditScreenInsertBtn && acteditScreenRemoveBtn==expeditScreenRemoveBtn)
	{
		excelReader.setCellData(xlfile, "Sheet2", 282, 9, resPass);
		System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
		return true;
	}
	else
	{
		excelReader.setCellData(xlfile, "Sheet2", 282, 9, resFail);
		System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
		return false;
		
	}
}





@FindBy(xpath="//ul[@id='preferenceUL']/li//a")
public static List<WebElement> preferencesList;

@FindBy(xpath="//input[@id='ocBranchSales0']")
public static WebElement VATBranchSalesTxt;

@FindBy(xpath="//input[@id='ocVATAdvancePurAC27']")
public static WebElement VATAdvancePurchaseACTxt;

@FindBy(xpath="//input[@id='ocCapitalPuchase1']")
public static WebElement VATCapitalPurchasesACTxt;

@FindBy(xpath="//input[@id='ocSatSales15']")
public static WebElement VATSatSalesTxt;

@FindBy(xpath="//input[@id='ocCashAc2']")
public static WebElement VATCashAccountTxt;

@FindBy(xpath="//input[@id='ocServicTaXAc16']")
public static WebElement VATServiceTaxACTxt;

@FindBy(xpath="//input[@id='ocConsignmentPur3']")
public static WebElement VATConsignmentPurchaseACTxt;

@FindBy(xpath="//input[@id='ocConsignSalesAC4']")
public static WebElement VATConsignmentSalesACTxt;

@FindBy(xpath="//input[@id='txtFormType']")
public static WebElement VATFormTypeTxt;

@FindBy(xpath="//input[@id='txtDocumentLocator']")
public static WebElement VATDocumentLocationTxt;

@FindBy(xpath="//input[@id='txtTaxFormFilingType']")
public static WebElement VATTaxFormFilingTypeTxt;

@FindBy(xpath="//input[@id='ocInterStateSales5']")
public static WebElement VATInterStateSalesACTxt;

@FindBy(xpath="//input[@id='ocSalestoDealer6']")
public static WebElement VATSalesToDealerTxt;

@FindBy(xpath="//input[@id='ocExportSales7']")
public static WebElement VATExportSalesACTxt;

@FindBy(xpath="//input[@id='txtTRN']")
public static WebElement VATTRNTxt;

@FindBy(xpath="//input[@id='txtTaxablePersonNameE']")
public static WebElement VATTaxablePersonNameEngTxt;

@FindBy(xpath="//input[@id='txtTaxablePersonNameA']")
public static WebElement VATTaxablePersonNameArbTxt;

@FindBy(xpath="//input[@id='txtTaxPersonAddress']")
public static WebElement VATTaxablePersonAddressTxt;

@FindBy(xpath="//input[@id='txtTaxAgencyName']")
public static WebElement VATTaxAgencyNameTxt;

@FindBy(xpath="//input[@id='txtTAN']")
public static WebElement VATTANTxt;

@FindBy(xpath="//input[@id='txtTaxAgentName']")
public static WebElement VATTaxAgentNameTxt;

@FindBy(xpath="//input[@id='txtTAAN']")
public static WebElement VATTAANameTxt;

@FindBy(xpath="//input[@id='ocFuel8']")
public static WebElement VATFuelACTxt;

@FindBy(xpath="//input[@id='ocSalestoEOU9']")
public static WebElement VATSalesToEOUTxt;

@FindBy(xpath="//input[@id='ocInterStatePUR10']")
public static WebElement VATInterStatePurchasesACTxt;

@FindBy(xpath="//input[@id='ocVatoutput11']")
public static WebElement VATOutputTxt;

@FindBy(xpath="//input[@id='ocVatAc12']")
public static WebElement VATInputTxt;

@FindBy(xpath="//input[@id='ocSatAC13']")
public static WebElement VATSATACTxt;

@FindBy(xpath="//input[@id='ocSatPur14']")
public static WebElement VATSatPurchasesTxt;

@FindBy(xpath="//input[@id='ocVATAdvanceAC26']")
public static WebElement VATAdvanceAccountTxt;

@FindBy(xpath="//input[@id='chkEnableMultiEntity']")
public static WebElement VATEnableMultiEntryChkBox;

@FindBy(xpath="//tbody[@id='gVATPercentage_body']")
public static WebElement VATPercentageTable;



public boolean 	checkPreferencesVATOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
	settingsmenuBtn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
	ConfigureTransactionBtn.click();

	Thread.sleep(2000);
	
	int count=preferencesList.size();
	
	for (int i = 0; i < count; i++) 
	{
		String data=preferencesList.get(i).getText();
		
		if (data.equalsIgnoreCase("VAT")) 
		{
			preferencesList.get(i).click();
			
			break;
		}
	}
	
	Thread.sleep(2000);
	
	boolean actVATBranchSalesTxt					=VATBranchSalesTxt.isDisplayed();
	boolean actVATAdvancePurchaseACTxt				=VATAdvancePurchaseACTxt.isDisplayed();
	boolean actVATCapitalPurchasesACTxt				=VATCapitalPurchasesACTxt.isDisplayed();
	boolean actVATSatSalesTxt						=VATSatSalesTxt.isDisplayed();
	boolean actVATCashAccountTxt					=VATCashAccountTxt.isDisplayed();
	boolean actVATServiceTaxACTxt					=VATServiceTaxACTxt.isDisplayed();
	boolean actVATConsignmentPurchaseACTxt			=VATConsignmentPurchaseACTxt.isDisplayed();
	boolean actVATConsignmentSalesACTxt				=VATConsignmentSalesACTxt.isDisplayed();
	boolean actVATFormTypeTxt						=VATFormTypeTxt.isDisplayed();
	boolean actVATDocumentLocationTxt				=VATDocumentLocationTxt.isDisplayed();
	boolean actVATTaxFormFilingTypeTxt				=VATTaxFormFilingTypeTxt.isDisplayed();
	boolean actVATInterStateSalesACTxt				=VATInterStateSalesACTxt.isDisplayed();
	boolean actVATSalesToDealerTxt					=VATSalesToDealerTxt.isDisplayed();
	boolean actVATExportSalesACTxt					=VATExportSalesACTxt.isDisplayed();
	boolean actVATTRNTxt							=VATTRNTxt.isDisplayed();
	boolean actVATTaxablePersonNameEngTxt			=VATTaxablePersonNameEngTxt.isDisplayed();
	boolean actVATTaxablePersonNameArbTxt			=VATTaxablePersonNameArbTxt.isDisplayed();
	boolean actVATTaxablePersonAddressTxt			=VATTaxablePersonAddressTxt.isDisplayed();
	boolean actVATTaxAgencyNameTxt					=VATTaxAgencyNameTxt.isDisplayed();
	boolean actVATTANTxt							=VATTANTxt.isDisplayed();
	boolean actVATTaxAgentNameTxt					=VATTaxAgentNameTxt.isDisplayed();
	boolean actVATTAANameTxt						=VATTAANameTxt.isDisplayed();
	boolean actVATFuelACTxt							=VATFuelACTxt.isDisplayed();
	boolean actVATSalesToEOUTxt						=VATSalesToEOUTxt.isDisplayed();
	boolean actVATInterStatePurchasesACTxt			=VATInterStatePurchasesACTxt.isDisplayed();
	boolean actVATOutputTxt							=VATOutputTxt.isDisplayed();
	boolean actVATInputTxt							=VATInputTxt.isDisplayed();
	boolean actVATSATACTxt							=VATSATACTxt.isDisplayed();
	boolean actVATSatPurchasesTxt					=VATSatPurchasesTxt.isDisplayed();
	boolean actVATAdvanceAccountTxt					=VATAdvanceAccountTxt.isDisplayed();
	boolean actVATEnableMultiEntryChkBox			=VATEnableMultiEntryChkBox.isDisplayed();
	boolean actVATPercentageTable					=VATPercentageTable.isDisplayed();
	
	
	boolean expVATBranchSalesTxt					=true;
	boolean expVATAdvancePurchaseACTxt				=true;
	boolean expVATCapitalPurchasesACTxt				=true;
	boolean expVATSatSalesTxt						=true;
	boolean expVATCashAccountTxt					=true;
	boolean expVATServiceTaxACTxt					=true;
	boolean expVATConsignmentPurchaseACTxt			=true;
	boolean expVATConsignmentSalesACTxt				=true;
	boolean expVATFormTypeTxt						=true;
	boolean expVATDocumentLocationTxt				=true;
	boolean expVATTaxFormFilingTypeTxt				=true;
	boolean expVATInterStateSalesACTxt				=true;
	boolean expVATSalesToDealerTxt					=true;
	boolean expVATExportSalesACTxt					=true;
	boolean expVATTRNTxt							=true;
	boolean expVATTaxablePersonNameEngTxt			=true;
	boolean expVATTaxablePersonNameArbTxt			=true;
	boolean expVATTaxablePersonAddressTxt			=true;
	boolean expVATTaxAgencyNameTxt					=true;
	boolean expVATTANTxt							=true;
	boolean expVATTaxAgentNameTxt					=true;
	boolean expVATTAANameTxt						=true;
	boolean expVATFuelACTxt							=true;
	boolean expVATSalesToEOUTxt						=true;
	boolean expVATInterStatePurchasesACTxt			=true;
	boolean expVATOutputTxt							=true;
	boolean expVATInputTxt							=true;
	boolean expVATSATACTxt							=true;
	boolean expVATSatPurchasesTxt					=true;
	boolean expVATAdvanceAccountTxt					=true;
	boolean expVATEnableMultiEntryChkBox			=true;
	boolean expVATPercentageTable					=true;
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtnINDC));
	CloseBtnINDC.click();
	
	System.out.println("*********************************************checkPreferencesVATOptions***********************************************");
	
	System.out.println("VATBranchSalesTxt             : "+actVATBranchSalesTxt             +"  value expected  "+expVATBranchSalesTxt);
	System.out.println("VATAdvancePurchaseACTxt       : "+actVATAdvancePurchaseACTxt       +"  value expected  "+expVATAdvancePurchaseACTxt);
	System.out.println("VATCapitalPurchasesACTxt      : "+actVATCapitalPurchasesACTxt      +"  value expected  "+expVATCapitalPurchasesACTxt);
	System.out.println("VATSatSalesTxt                : "+actVATSatSalesTxt                +"  value expected  "+expVATSatSalesTxt);
	System.out.println("VATCashAccountTxt             : "+actVATCashAccountTxt             +"  value expected  "+expVATCashAccountTxt);
	System.out.println("VATServiceTaxACTxt            : "+actVATServiceTaxACTxt            +"  value expected  "+expVATServiceTaxACTxt);
	System.out.println("VATConsignmentPurchaseACTxt   : "+actVATConsignmentPurchaseACTxt   +"  value expected  "+expVATConsignmentPurchaseACTxt);
	System.out.println("VATConsignmentSalesACTxt      : "+actVATConsignmentSalesACTxt      +"  value expected  "+expVATConsignmentSalesACTxt);
	System.out.println("VATFormTypeTxt                : "+actVATFormTypeTxt                +"  value expected  "+expVATFormTypeTxt);
	System.out.println("VATDocumentLocationTxt        : "+actVATDocumentLocationTxt        +"  value expected  "+expVATDocumentLocationTxt);
	System.out.println("VATTaxFormFilingTypeTxt       : "+actVATTaxFormFilingTypeTxt       +"  value expected  "+expVATTaxFormFilingTypeTxt);
	System.out.println("VATInterStateSalesACTxt       : "+actVATInterStateSalesACTxt       +"  value expected  "+expVATInterStateSalesACTxt);
	System.out.println("VATSalesToDealerTxt           : "+actVATSalesToDealerTxt           +"  value expected  "+expVATSalesToDealerTxt);
	System.out.println("VATExportSalesACTxt           : "+actVATExportSalesACTxt           +"  value expected  "+expVATExportSalesACTxt);
	System.out.println("VATTRNTxt                     : "+actVATTRNTxt                     +"  value expected  "+expVATTRNTxt);
	System.out.println("VATTaxablePersonNameEngTxt    : "+actVATTaxablePersonNameEngTxt    +"  value expected  "+expVATTaxablePersonNameEngTxt);
	System.out.println("VATTaxablePersonNameArbTxt    : "+actVATTaxablePersonNameArbTxt    +"  value expected  "+expVATTaxablePersonNameArbTxt);
	System.out.println("VATTaxablePersonAddressTxt    : "+actVATTaxablePersonAddressTxt    +"  value expected  "+expVATTaxablePersonAddressTxt);
	System.out.println("VATTaxAgencyNameTxt           : "+actVATTaxAgencyNameTxt           +"  value expected  "+expVATTaxAgencyNameTxt);
	System.out.println("VATTANTxt                     : "+actVATTANTxt                     +"  value expected  "+expVATTANTxt);
	System.out.println("VATTaxAgentNameTxt            : "+actVATTaxAgentNameTxt            +"  value expected  "+expVATTaxAgentNameTxt);
	System.out.println("VATTAANameTxt                 : "+actVATTAANameTxt                 +"  value expected  "+expVATTAANameTxt);
	System.out.println("VATFuelACTxt                  : "+actVATFuelACTxt                  +"  value expected  "+expVATFuelACTxt);
	System.out.println("VATSalesToEOUTxt              : "+actVATSalesToEOUTxt              +"  value expected  "+expVATSalesToEOUTxt);
	System.out.println("VATInterStatePurchasesACTxt   : "+actVATInterStatePurchasesACTxt   +"  value expected  "+expVATInterStatePurchasesACTxt);
	System.out.println("VATOutputTxt                  : "+actVATOutputTxt                  +"  value expected  "+expVATOutputTxt);
	System.out.println("VATInputTxt                   : "+actVATInputTxt                   +"  value expected  "+expVATInputTxt);
	System.out.println("VATSATACTxt                   : "+actVATSATACTxt                   +"  value expected  "+expVATSATACTxt);
	System.out.println("VATSatPurchasesTxt            : "+actVATSatPurchasesTxt            +"  value expected  "+expVATSatPurchasesTxt);
	System.out.println("VATAdvanceAccountTxt          : "+actVATAdvanceAccountTxt          +"  value expected  "+expVATAdvanceAccountTxt);
	System.out.println("VATEnableMultiEntryChkBox     : "+actVATEnableMultiEntryChkBox     +"  value expected  "+expVATEnableMultiEntryChkBox);
	System.out.println("VATPercentageTable            : "+actVATPercentageTable            +"  value expected  "+expVATPercentageTable);
	
	if (actVATBranchSalesTxt==expVATBranchSalesTxt && actVATAdvancePurchaseACTxt==expVATAdvancePurchaseACTxt && actVATCapitalPurchasesACTxt==expVATCapitalPurchasesACTxt &&
		 actVATSatSalesTxt==expVATSatSalesTxt && actVATCashAccountTxt==expVATCashAccountTxt && actVATServiceTaxACTxt==expVATServiceTaxACTxt &&
		 actVATConsignmentPurchaseACTxt==expVATConsignmentPurchaseACTxt && actVATConsignmentSalesACTxt==expVATConsignmentSalesACTxt && 
		 actVATFormTypeTxt==expVATFormTypeTxt && actVATDocumentLocationTxt==expVATDocumentLocationTxt && actVATTaxFormFilingTypeTxt==expVATTaxFormFilingTypeTxt &&
		 actVATInterStateSalesACTxt==expVATInterStateSalesACTxt && actVATSalesToDealerTxt==expVATSalesToDealerTxt && actVATExportSalesACTxt==expVATExportSalesACTxt &&
		 actVATTRNTxt==expVATTRNTxt && actVATTaxablePersonNameEngTxt==expVATTaxablePersonNameEngTxt && actVATTaxablePersonNameArbTxt==expVATTaxablePersonNameArbTxt &&
		 actVATTaxablePersonAddressTxt==expVATTaxablePersonAddressTxt && actVATTaxAgencyNameTxt==expVATTaxAgencyNameTxt && actVATTANTxt==expVATTANTxt &&
		 actVATTaxAgentNameTxt==expVATTaxAgentNameTxt && actVATTAANameTxt==expVATTAANameTxt && actVATFuelACTxt==expVATFuelACTxt && 
		 actVATSalesToEOUTxt==expVATSalesToEOUTxt && actVATInterStatePurchasesACTxt==expVATInterStatePurchasesACTxt && actVATOutputTxt==expVATOutputTxt &&
		 actVATInputTxt==expVATInputTxt && actVATSATACTxt==expVATSATACTxt && actVATSatPurchasesTxt==expVATSatPurchasesTxt && 
		 actVATAdvanceAccountTxt==expVATAdvanceAccountTxt && actVATEnableMultiEntryChkBox==expVATEnableMultiEntryChkBox && actVATPercentageTable==expVATPercentageTable) 
	{
		return true;
	} 
	else 
	{
		return false;
	}
}
	    
	  
	    
	  
	    
	  
	  */
	  
	    
	  
	    
	    

	 public SmokeDocCustViewPage(WebDriver driver)
	 {
	    	
	    	PageFactory.initElements(driver, this);
	    	
	 }
	
	
	
	
}
