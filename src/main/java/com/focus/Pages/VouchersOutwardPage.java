package com.focus.Pages;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.swing.Action;

import org.apache.commons.lang3.Validate;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.util.DocumentFormatException;
import org.apache.xerces.impl.validation.ValidationManager;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.yaml.snakeyaml.tokens.DocumentEndToken;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;
import com.google.errorprone.annotations.Var;
import com.mongodb.util.JSON;
import com.sun.codemodel.util.ClassNameComparator;
import com.sun.tools.rngom.parse.host.Base;
import com.sun.tools.xjc.api.ClassNameAllocator;
import com.sun.xml.bind.v2.runtime.output.FastInfosetStreamWriterOutput;

import bsh.ParseException;
public class VouchersOutwardPage extends BaseEngine {
	
	

	//Vouchers Home Page Ribbon Control
	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
	private static WebElement  newBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
	private static WebElement  editBtn;

	@FindBy(xpath="//span[@class='icon-print icon-font6']")
	private static WebElement  printBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
	private static WebElement  deleteBtn;
	
	@FindBy(xpath="//span[@class='icon-authorize icon-font6']")
	private static WebElement  authorizeBtn;
	
	@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
	private static WebElement  suspendBtn;
	
	@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
	private static WebElement  rejectBtn;
	
	@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
	private static WebElement  chequeReturnBtn;
	
	@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
	private static WebElement  printBarCodeBtn;
	
	@FindBy(xpath="//span[@class='icon-convert icon-font6']")
	private static WebElement  convertBtn;
	
	@FindBy(xpath="//span[@class='icon-export icon-font6']")
	private static WebElement  exportToXMLBtn;  
		
	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
	private static WebElement  settingsBtn;
	
	@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
	private static WebElement  homeCloseBtn;
			
	//Vouchers Home Page Options
	@FindBy(xpath="//a[@class='transaction_viewname_anchor theme_color-inverse font-5']")
	private static WebElement  allVouchersOption;
	
	@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
	private static WebElement  pendingBillsOption;
	
	@FindBy(xpath="//input[@id='SelectDefaultView']")
	private static WebElement  selectDefaultViewChkBox;
		
	@FindBy(xpath="//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
	private static WebElement  sortingBtn;
	
    @FindBy(xpath="//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
    private static WebElement  createViewBtn;

    @FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
    private static WebElement  customizeBtn;
   
    @FindBy(xpath="//span[@class='icon-filter icon-font6']")
    private static WebElement  filterBtn;
   
    @FindBy(xpath="//span[@id='reportRefresh']")
    private static WebElement  refreshBtn;
   
    @FindBy(xpath="//i[@class='icon-font6 icon-export']")
    private static WebElement  exportBtn;
   
 
	// Options Button  (Display Option)	
    @FindBy(xpath="//span[@id='transOptions']")
    private static WebElement  optionsBtn;
   
    @FindBy(xpath="//a[contains(text(),'Auto Adjust Width')]")
    private static WebElement  autoAdjustWidthBtn;
   
    @FindBy(xpath="//a[contains(text(),'Fit To Screen')]")
    private static WebElement  fitToScreenBtn;
   
    @FindBy(xpath="//a[contains(text(),'Normal')]")
    private static WebElement  normalBtn;
   
				
	//Voucher Home Page Grid Header Columns
	@FindBy(xpath="//input[@id='HeaderChkBox']")
	private static WebElement  grid_HeaderChkBox;	
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[3]")
	private static WebElement  grid_Header_Date;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[4]")
	private static WebElement  grid_Header_VoucherNumber;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[5]")
	private static WebElement  grid_Header_CreatedBy;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[6]")
	private static WebElement  grid_Header_ModifiedBy;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[7]")
	private static WebElement  grid_Header_CreatedDate;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[8]")
	private static WebElement  grid_Header_ModifiedDate;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[9]")
	private static WebElement  grid_Header_CreatedTime;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[10]")
	private static WebElement  grid_Header_ModifiedTime;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[11]")
	private static WebElement  grid_Header_Suspended;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[12]")
	private static WebElement  grid_Header_Cancelled;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[13]")
	private static WebElement  grid_Header_AuthorizationStatus;
	
	
	//Grid Voucher DetailsBtn
	@FindBy(xpath="//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
	private static WebElement  grid_VoucherDetailsBtn1;
	
	@FindBy(xpath="//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
	private static WebElement  grid_VoucherDetailsBtn2;
	
	
	//Grid CheckBox 1 And 2
	
	@FindBy(xpath="//tr[@id='trRender_1']//td//input")
	private static WebElement  grid_ChkBox1;
	
	@FindBy(xpath="//tr[@id='trRender_2']//td//input")
	private static WebElement  grid_ChkBox2;
	
	@FindBy(xpath="//tr[@id='trRender_3']//td//input")
	private static WebElement  grid_ChkBox3;
	
	@FindBy(xpath="//tr[@id='trRender_4']//td//input")
	private static WebElement  grid_ChkBox4;
	
	
	// Vouchers Home Page Footer
	@FindBy(xpath="//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
	private static WebElement  searchField;
							
	@FindBy(xpath="//button[@id='frstPage']")
	private static WebElement  firstPageBtn;

	@FindBy(xpath="//button[@id='id_previousPage']")
	private static WebElement  previousPageBtn;

	@FindBy(xpath="//button[@id='id_pagenumber']")
	private static WebElement  currentPageNo;

	@FindBy(xpath="//button[@id='id_nextPage']")
	private static WebElement  nextPageBtn;

	@FindBy(xpath="//button[@id='lstPage']")
	private static WebElement  lastPageBtn;
	
	
	
	//Vouchers Entry Page Ribbon Control Options
	@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
	private static WebElement  freeFlowBtn;
	
	@FindBy(xpath="//span[@class='icon-header icon-font6']")
	private static WebElement  jumpToHeaderSectionBtn;
	
	@FindBy(xpath="//span[@class='icon-panel icon-font6']")
	private static WebElement  jumpToBodySectionBtn;
	
	@FindBy(xpath="//span[@class='icon-footer icon-font6']")
	private static WebElement  jumpToFooterBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_new']")
	private static WebElement  new_newBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_save']")
	private static WebElement  saveBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_previous']")
	private static WebElement  previousBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_next']")
	private static WebElement  nextBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_print']")
	private static WebElement  new_PrintBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
	private static WebElement  new_SuspendBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_close']")
	private static WebElement  new_CloseBtn;
	
	@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
	private static WebElement  new_DeleteBtn;
	
	@FindBy(xpath="//span[@class='icon-menu icon-font4']")
	private static WebElement  toggleBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
	private static WebElement  copyDocumentOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_copytoclipboard']")
	private static WebElement  copyToClipBoardOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_pastefromclipboard']")
	private static WebElement  pasteFromClipBoardOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_raisechequereturn']")
	private static WebElement  raiseCheckReturnOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_addtostock']")
	private static WebElement  addToStockOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_markconvert']")
	private static WebElement  markConvertedOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_bominput']")
	private static WebElement  bOMinputOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_autoallocate']")
	private static WebElement  autoAllocateOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_reverseentry']")
	private static WebElement  reverseEntryOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_printbarcode']")
	private static WebElement  printBarCodeOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_postingdetails']")
	private static WebElement  postingDetailsOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_exporttoxml']")
	private static WebElement  exportToXMLOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_settings']")
	private static WebElement  settingsOption;
	
	
	
	//Voucher Entry Page Header Fields
	@FindBy(xpath="//input[@id='id_header_1']")
	private static WebElement  documentNumberTxt;
	
	@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
	private static WebElement  documentNumberdropdown_ExpansionBtn;
	
	@FindBy(xpath="//input[@id='id_header_2']")
	private static WebElement  dateTxt;
	
	@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement  dateTxt_CalenderBtn;
	
	@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
	private static WebElement  calender_TodayBtn;
	
	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  caskBankAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  caskBankAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  cashBankAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  cashBankAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  cashBankAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  cashBankAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  cashBankAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  cashBankAccount_Settings_CancelBtn;
			
	@FindBy(xpath="//input[@id='id_header_268435459']")
	private static WebElement  departmentTxt;
	
	@FindBy(xpath="//*[@id='id_header_268435459_input_image']/span")
	private static WebElement  department_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_268435459_input_settings']/span")
	private static WebElement  department_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_container']")
		private static WebElement  department_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
		private static WebElement  department_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_list']")
			private static WebElement  department_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_header']")
			private static WebElement  department_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
			private static WebElement  department_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_width']")
			private static WebElement  department_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  department_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  department_Settings_StandardFieldsBtn_CancelBtn;
						
								
		@FindBy(xpath="//div[@id='id_header_268435459_search_container']//input[2]")
		private static WebElement  department_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  department_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  department_Settings_CancelBtn;

	@FindBy(xpath="//*[@id='id_header_6']")
	private static WebElement  maturityDateTxt;
	
	@FindBy(xpath="//*[@id='id_header_6_input_image']/span']")
	private static WebElement  maturityDateTxt_CalenderBtn;
	
	@FindBy(xpath="//input[@id='id_header_3']")
	private static WebElement  purchaseAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
	private static WebElement  purchaseAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
	private static WebElement  purchaseAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
		private static WebElement  purchaseAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
		private static WebElement  purchaseAccount_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
		private static WebElement  purchaseAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  purchaseAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  purchaseAccount_Settings_CancelBtn;


@FindBy(xpath="//input[@id='id_header_4']")
private static WebElement  vendorAccountTxt;

@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
private static WebElement  vendorAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
private static WebElement  vendorAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  vendorAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  vendorAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  vendorAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  vendorAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  vendorAccount_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_header_3']")
private static WebElement  salesAccountTxt;

@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
private static WebElement  salesAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
private static WebElement  salesAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
		private static WebElement  salesAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
		private static WebElement  salesAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
		private static WebElement  salesAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  salesAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  salesAccount_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  customerAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  customerAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  customerAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  customerAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  customerAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  customerAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  customerAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  customerAccount_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_header_12']")
	private static WebElement  accountTxt;
	
	@FindBy(xpath="//*[@id='id_header_12_input_image']/span")
	private static WebElement  account_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  account_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  account_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  account_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
			private static WebElement  account_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
			private static WebElement  account_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
			private static WebElement  account_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
			private static WebElement  account_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  account_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  account_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  account_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  account_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  account_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_header_31']")
	private static WebElement  issuesReceiptsTxt;
	
	@FindBy(xpath="//input[@id='id_header_268435460']")
	private static WebElement  wareHouseTxt;
	
	@FindBy(xpath="//*[@id='id_header_268435460_input_image']/span")
	private static WebElement  wareHouse_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_268435460_input_settings']/span")
	private static WebElement  wareHouse_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_container']")
		private static WebElement  wareHouse_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
		private static WebElement  wareHouse_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_list']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_header']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_width']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_268435460_search_container']//input[2]")
		private static WebElement  wareHouse_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  wareHouse_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  wareHouse_Settings_CancelBtn;
	
	@FindBy(xpath="//span[contains(text(),'sName')]")
	private static WebElement  customize_sName;
	
	@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Code')]")
	private static WebElement  customize_sCode;
	
	@FindBy(xpath="//span[contains(text(),'Alias')]")
	private static WebElement  customize_Alias;
	
	@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Group')]")
	private static WebElement  customize_bGroup;
	
	@FindBy(xpath="//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
	private static WebElement  customize_Balance;
	
	@FindBy(xpath="//input[@id='id_header_67108920']")
	private static WebElement  appropriateBasedOndropdown;
	
	@FindBy(xpath="//input[@id='id_header_67108921']")
	private static WebElement  additionalValueTxt;
	
	@FindBy(xpath="//input[@id='id_header_21']")
	private static WebElement  raiseReceiptsChkBox;
	
	@FindBy(xpath="//input[@id='id_header_67108865']")
	private static WebElement  receipts_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108868']")
	private static WebElement  payments_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108871']")
	private static WebElement  pettyCash_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108874']")
	private static WebElement  postDatedReceipts_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108865']")
	private static WebElement  postDatedPayments_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108880']")
	private static WebElement  purchaseVouchers_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108881']")
	private static WebElement  purchaseReturns_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108884']")
	private static WebElement  salesInvoice_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108886']")
	private static WebElement  salesOrder_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108928']")
	private static WebElement  salesInvoiceNewNarrationTxt;
	
	
	@FindBy(xpath="//input[@id='id_header_67108885']")
	private static WebElement  salesReturns_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108913']")
	private static WebElement  cashSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108914']")
	private static WebElement  hirePurchaseSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108890']")
	private static WebElement  journalEntries_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108916']")
	private static WebElement  forexJV_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108910']")
	private static WebElement  interDepartmentalJV_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108888']")
	private static WebElement  nonStandardJournalEntries_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108892']")
	private static WebElement  debitNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108911']")
	private static WebElement  debitNotesLineWise_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108893']")
	private static WebElement  creditNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108912']")
	private static WebElement  creditNotesLineWisePayroll_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108894']")
	private static WebElement  openingBalance_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108891']")
	private static WebElement  fixedAssetDepreciationVoucher_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108909']")
	private static WebElement  requestForQuote_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108903']")
	private static WebElement  purchasesQuotations_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement  purchasesOrders_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement  materialReceiptsNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108904']")
	private static WebElement  salesQuotationss_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108887']")
	private static WebElement  deliveryNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108917']")
	private static WebElement  posSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108918']")
	private static WebElement  productionOrder_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108886']")
	private static WebElement  salesOrders_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108895']")
	private static WebElement  shortagesinStock_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108896']")
	private static WebElement  excessesinStocks_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108897']")
	private static WebElement  stockTransfers_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108898']")
	private static WebElement  openingStocks_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108927']")
	private static WebElement  openingStocksNEW_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108908']")
	private static WebElement  materialRequisition_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108866']")
	private static WebElement  receipts_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108869']")
	private static WebElement  payments_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108872']")
	private static WebElement  pettyCash_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108875']")
	private static WebElement  postDatedReceipts_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108878']")
	private static WebElement  postDatedPayments_ChequeNoTxt;



	//Voucher Entry Page Body Fields
	
	@FindBy(xpath="//input[@id='id_body_536870916']")
	private static WebElement  pvWareHouseTxt;
	
	@FindBy(xpath="//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
	private static WebElement  pvWareHouse_ExpansionBtn;
	
	@FindBy(xpath="//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement  pvWareHouse_SettingsBtn;

		@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_container']")
		private static WebElement  pvWareHouse_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
		private static WebElement  pvWareHouse_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_list']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_header']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_width']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_body_536870916_search_container']//input[2]")
		private static WebElement  pvWareHouse_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  pvWareHouse_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  pvWareHouse_Settings_CancelBtn;
	
	// Grid Elements
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_Account;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_Item;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_DebitAC;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_2']")
	private static WebElement  grid_Header_CreditAC;



	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
	private static WebElement  firstRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
	private static WebElement  secondRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
	private static WebElement  thirdRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[1]")
	private static WebElement  fourthRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[1]")
	private static WebElement  fifthRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[1]")
	private static WebElement  sixthRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[1]")
	private static WebElement  seventhRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[1]")
	private static WebElement  eigthRowIndex;
	
	@FindBy(xpath="//span[@class='icon-delete icon-font8']")
	private static WebElement  deleteRowBtn;
	
	@FindBy(xpath="//span[@class='icon-insertrow icon-font8']")
	private static WebElement  insertRowBtn;
	
	@FindBy(xpath="//span[@class='icon-selectall icon-font8']")
	private static WebElement  selectRowBtn;
	
	@FindBy(xpath="//span[@class='icon-unselectall1 icon-font8']")
	private static WebElement  unSelectRowBtn;
	
	@FindBy(xpath="//span[@class='icon-clone icon-font8']")
	private static WebElement  duplicateRowBtn;

	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
	private static WebElement  select1stRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
	private static WebElement  select1stRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
	private static WebElement  select1stRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
	private static WebElement  select1stRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
	private static WebElement  select1stRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
	private static WebElement  select1stRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
	private static WebElement  select1stRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
	private static WebElement  select1stRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
	private static WebElement  select1stRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
	private static WebElement  select1stRow_10thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
	private static WebElement  select1stRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
	private static WebElement  select1stRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
	private static WebElement  select1stRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
	private static WebElement  select1stRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
	private static WebElement  select1stRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
	private static WebElement  select1stRow_16thColumn;
	
	
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
	private static WebElement  select2ndRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
	private static WebElement  select2ndRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
	private static WebElement  select2ndRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
	private static WebElement  select2ndRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
	private static WebElement  select2ndRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
	private static WebElement  select2ndRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
	private static WebElement  select2ndRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
	private static WebElement  select2ndRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
	private static WebElement  select2ndRow_9thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
	private static WebElement  select2ndRow_11thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
	private static WebElement  select2ndRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
	private static WebElement  select2ndRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
	private static WebElement  select2ndRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
	private static WebElement  select2ndRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
	private static WebElement  select2ndRow_16thColumn;

	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
	private static WebElement  select3rdRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
	private static WebElement  select3rdRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
	private static WebElement  select3rdRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
	private static WebElement  select3rdRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
	private static WebElement  select3rdRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
	private static WebElement  select3rdRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
	private static WebElement  select3rdRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
	private static WebElement  select3rdRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
	private static WebElement  select3rdRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
	private static WebElement  select3rdRow_10thColumn;

    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
	private static WebElement  select3rdRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
	private static WebElement  select3rdRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
	private static WebElement  select3rdRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
	private static WebElement  select3rdRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
	private static WebElement  select3rdRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
	private static WebElement  select3rdRow_16thColumn;




	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
	private static WebElement  select4thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
	private static WebElement  select4thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
	private static WebElement  select4thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
	private static WebElement  select4thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
	private static WebElement  select4thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
	private static WebElement  select4thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
	private static WebElement  select4thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
	private static WebElement  select4thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
	private static WebElement  select4thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
	private static WebElement  select4thRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
	private static WebElement  select4thRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
	private static WebElement  select4thRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
	private static WebElement  select4thRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
	private static WebElement  select4thRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
	private static WebElement  select4thRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
	private static WebElement  select4thRow_16thColumn;



	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
	private static WebElement  select5thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
	private static WebElement  select5thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
	private static WebElement  select5thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
	private static WebElement  select5thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
	private static WebElement  select5thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
	private static WebElement  select5thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
	private static WebElement  select5thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
	private static WebElement  select5thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
	private static WebElement  select5thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[11]")
	private static WebElement  select5thRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[12]")
	private static WebElement  select5thRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[13]")
	private static WebElement  select5thRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[14]")
	private static WebElement  select5thRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[15]")
	private static WebElement  select5thRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[16]")
	private static WebElement  select5thRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[17]")
	private static WebElement  select5thRow_16thColumn;




	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
	private static WebElement  select6thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
	private static WebElement  select6thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
	private static WebElement  select6thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
	private static WebElement  select6thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
	private static WebElement  select6thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
	private static WebElement  select6thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
	private static WebElement  select6thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
	private static WebElement  select6thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
	private static WebElement  select6thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[11]")
	private static WebElement  select6thRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[12]")
	private static WebElement  select6thRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[13]")
	private static WebElement  select6thRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[14]")
	private static WebElement  select6thRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[15]")
	private static WebElement  select6thRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[16]")
	private static WebElement  select6thRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[17]")
	private static WebElement  select6thRow_16thColumn;


	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
	private static WebElement  select7thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
	private static WebElement  select7thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
	private static WebElement  select7thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
	private static WebElement  select7thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
	private static WebElement  select7thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
	private static WebElement  select7thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
	private static WebElement  select7thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
	private static WebElement  select7thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
	private static WebElement  select7thRow_9thColumn;



	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
	private static WebElement  select8thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
	private static WebElement  select8thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
	private static WebElement  select8thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
	private static WebElement  select8thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
	private static WebElement  select8thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
	private static WebElement  select8thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
	private static WebElement  select8thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
	private static WebElement  select8thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
	private static WebElement  select8thRow_9thColumn;


	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
	private static WebElement  select9thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
	private static WebElement  select9thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
	private static WebElement  select9thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
	private static WebElement  select9thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
	private static WebElement  select9thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
	private static WebElement  select9thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
	private static WebElement  select9thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
	private static WebElement  select9thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
	private static WebElement  select9thRow_9thColumn;



	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
	private static WebElement  select10thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
	private static WebElement  select10thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
	private static WebElement  select10thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
	private static WebElement  select10thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
	private static WebElement  select10thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
	private static WebElement  select10thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
	private static WebElement  select10thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
	private static WebElement  select10thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
	private static WebElement  select10thRow_9thColumn;


	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
	private static WebElement  select11thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
	private static WebElement  select11thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
	private static WebElement  select11thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
	private static WebElement  select11thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
	private static WebElement  select11thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
	private static WebElement  select11thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
	private static WebElement  select11thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
	private static WebElement  select11thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
	private static WebElement  select11thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
	private static WebElement  select12thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
	private static WebElement  select12thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
	private static WebElement  select12thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
	private static WebElement  select12thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
	private static WebElement  select12thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
	private static WebElement  select12thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
	private static WebElement  select12thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
	private static WebElement  select12thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
	private static WebElement  select12thRow_9thColumn;

	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_AccountTxt;
	
	@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
	private static WebElement  enter_Account_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
	private static WebElement  enter_Account_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
		private static WebElement  enter_Account_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
		private static WebElement  enter_Account_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
		private static WebElement  enter_Account_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_Account_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_Account_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_16']")
	private static WebElement  enter_Amount;
	
	@FindBy(xpath="//textarea[@id='id_body_16777219']")
	private static WebElement  enter_Receipts_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777222']")
	private static WebElement  enter_Payments_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777225']")
	private static WebElement  enter_PettyCash_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777228']")
	private static WebElement  enter_PostDatedReceipts_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777231']")
	private static WebElement  enter_PostDatedPaymentss_Remarks;
	
	@FindBy(xpath="//input[@id='id_body_23']")
	private static WebElement  enter_ItemTxt;
	
	@FindBy(xpath="//*[@id='id_body_23_input_image']/span")
	private static WebElement  item_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_23_input_settings']/span")
	private static WebElement  item_SettingsBtn;

		@FindBy(xpath="//div[@id='id_body_23_customize_popup_container']")
		private static WebElement  item_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_body_23_customize_popup_footer']//input[1]")
		private static WebElement  item_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_list']")
			private static WebElement  item_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_header']")
			private static WebElement  item_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_alignment']")
			private static WebElement  item_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_width']")
			private static WebElement  item_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  item_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  item_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_body_23_search_container']//input[2]")
		private static WebElement  item_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  item_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  item_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_24']")
	private static WebElement  enter_UnitTxt;
	
	@FindBy(xpath="//*[@id='id_body_24_input_image']/span")
	private static WebElement  unit_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_24_input_settings']/span")
	private static WebElement  unit_SettingsBtn;

		@FindBy(xpath="//div[@id='id_body_24_customize_popup_container']")
		private static WebElement  unit_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_body_24_customize_popup_footer']//input[1]")
		private static WebElement  unit_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_list']")
			private static WebElement  unit_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_header']")
			private static WebElement  unit_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_alignment']")
			private static WebElement  unit_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_width']")
			private static WebElement  unit_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  unit_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  unit_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_body_24_search_container']//input[2]")
		private static WebElement  unit_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  unit_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  unit_Settings_CancelBtn;

			
	@FindBy(xpath="//input[@id='id_body_26']")
	private static WebElement  enter_Quantity;
	
	@FindBy(xpath="//input[@id='id_body_27']")
	private static WebElement  enter_Rate;
	
	@FindBy(xpath="//input[@id='id_body_28']")
	private static WebElement  enter_Gross;
	
	@FindBy(xpath="//input[@id='id_body_13']")
	private static WebElement  enter_Batch;
	
	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_DebitACTxt;
	
	@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
	private static WebElement  enter_DebitAC_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
	private static WebElement  enter_DebitAC_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
		private static WebElement  enter_DebitAC_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
		private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
		private static WebElement  enter_DebitAC_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_DebitAC_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_DebitAC_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_39']")
	private static WebElement  enter_CreditACTxt;
	
	@FindBy(xpath="//*[@id='id_body_39_input_image']/span")
	private static WebElement  enter_CreditAC_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_39_input_settings']/span")
	private static WebElement  enter_CreditAC_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_39_customize_popup_container']")
		private static WebElement  enter_CreditAC_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_39_customize_popup_footer']//input[1]")
		private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_list']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_header']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_alignment']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_width']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_39_search_container']//input[2]")
		private static WebElement  enter_CreditAC_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_CreditAC_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_CreditAC_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_18']")
	private static WebElement  enter_DebitTxt;
	
	@FindBy(xpath="//input[@id='id_body_19']")
	private static WebElement  enter_CreditTxt;
	
	@FindBy(xpath="//textarea[@id='id_body_16777241']")
	private static WebElement  enter_NonStandardJournalEntries_RemarksTxt;
	
	@FindBy(xpath="//input[@id='id_body_87']")
	private static WebElement  enter_BodyWarehouse2Txt;
	
	@FindBy(xpath="//*[@id='id_body_87_input_image']/span")
	private static WebElement  enter_Warehouse2_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_87_input_settings']/span")
	private static WebElement  enter_Warehouse2_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_87_customize_popup_container']")
		private static WebElement  enter_WareHouse2_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_87_customize_popup_footer']//input[1]")
		private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_list']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_header']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_alignment']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_width']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_87_search_container']//input[2]")
		private static WebElement  enter_WareHouse2_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_WareHouse2_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_WareHouse2_Settings_CancelBtn;
		
	@FindBy(xpath="//input[@id='id_header_86']")
	private static WebElement  stockTransferheaderWarehouse1Txt;
	


	// Right Panel InfoSide Bar	
	@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
	private static WebElement  infoSideBarCustomizeBtn;

		@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
		private static WebElement  customizeCloseBtn;
		
		
		
		@FindBy(xpath="//*[@id='Trans_Dash_Save']")
		private static WebElement  customizeSaveBtn;
		
		@FindBy(xpath="//*[@id='Trans_Dash_Close']")
		private static WebElement  customizeCancelBtn;
		
		@FindBy(xpath="//input[@id='searchBoxTrans']")
		private static WebElement  customizeSearchTxt;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@class='icon-search searchicon']")
		private static WebElement  customizeSearchBtn;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='g']")
		private static WebElement  graphBtn;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='Newgraph']")
			private static WebElement  newGraphOption;
				
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='r']")
		private static WebElement  reportBtn;
			
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewReport']")
			private static WebElement  newReportOption;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='i']")
		private static WebElement  infoPanelBtn;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewInfopanel']")
			private static WebElement  newInfoPanelOption;
			
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='w']")
		private static WebElement  workFlowBtn;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewWorkflow']")
			private static WebElement  newWorkFlowOption;
					
		@FindBy(xpath="//a[@id='DocumentInfoOption']")
		private static WebElement  otherDashlets;
					
			@FindBy(xpath="//label[contains(text(),'Document Info')]")
			private static WebElement  documentInfo;

	@FindBy(xpath="//span[contains(@class,'icon-left-and-right-panel-icon icon-font6 no_padding_left_right')]")
	private static WebElement  infoSideBarMinimizeExpandBtn;		
			
	@FindBy(xpath="//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
	private static WebElement  infoSideBarExpandBtn;


	// Footer Section
	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
	private static WebElement  netLabel;
	
	@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
	private static WebElement  netAmount;


	
	//Navigation of Voucher Menus
	
	// Financial Menu and Sub Menus
	@FindBy(xpath="//span[@class='icon-financial icon-font1']")
	private static WebElement  finacinalsMenu;
	
		@FindBy(xpath="//a[@id='61']//span[contains(text(),'Transactions')]")
		private static WebElement  transactionsExpandBtn;
			
			@FindBy(xpath="//a[@id='2007']//span[contains(text(),'Purchases')]")
			private static WebElement  purchasesExpandBtn;
			
			@FindBy(xpath="//span[contains(text(),'Purchases Vouchers')]")
			private static WebElement  purchaseVouchersBtn;
			
    //Inventory Menu and Sub Menus		
	@FindBy(xpath="//div[contains(text(),'Inventory')]")
	private static WebElement  inventoryMenu; 
	
		@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
		private static WebElement  inventoryTransactionsMenu; 
			
			@FindBy(xpath="//*[@id='139']/span")
			private static WebElement  inventoryTransactionsPurchasesMenu; 
		
				@FindBy(xpath="//*[@id='2010']/span")
				private static WebElement  requestForQuoteVoucher;
				
				@FindBy(xpath="//*[@id='2011']/span")
				private static WebElement  purchasesQuotationsVoucher;
					
				@FindBy(xpath="//*[@id='2012']/span")
				private static WebElement  purchasesOrdersVoucher;
			
				@FindBy(xpath="//*[@id='2013']/span")
				private static WebElement  materialReceiptNotesVoucher;
					
			@FindBy(xpath="//*[@id='140']/span")
			private static WebElement  inventoryTransactionsSalesMenu; 
				
				@FindBy(xpath="//*[@id='2018']/span")
				private static WebElement  salesQuotationsVoucher;
				
				@FindBy(xpath="//*[@id='2019']/span")
				private static WebElement  deliveryNotesVoucher;
				
				@FindBy(xpath="//*[@id='2022']/span")
				private static WebElement  posSalesVoucher;
				
				@FindBy(xpath="//*[@id='2045']/span")
				private static WebElement  productionOrdersVoucher;
				
				@FindBy(xpath="//*[@id='2017']/span")
				private static WebElement  salesOrdersVoucher;
							
			@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
			private static WebElement  inventoryTransactionsStocksMenu; 
				
				@FindBy(xpath="//span[contains(text(),'Shortages in Stock')]")
				private static WebElement  shortagesInStockVoucher;
				
				@FindBy(xpath="//span[contains(text(),'Excesses in Stocks')]")
				private static WebElement  excessesInStocksVoucher;
					
				@FindBy(xpath="//span[contains(text(),'Stock Transfers')]")
				private static WebElement  stockTransfersVoucher;
				
				@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
				private static WebElement  openingStocksVoucher;
				
				@FindBy(xpath="//a[@id='2049']//span[contains(text(),'Opening Stocks New')]")
				private static WebElement  openingStocksNewVoucher;
				
				@FindBy(xpath="//*[@id='2038']/span")
				private static WebElement  materialRequisitionVoucher;
						
				@FindBy(xpath="//*[@id='2049']/span")
				private static WebElement  stockAdjustmentVoucher;
					
			@FindBy(xpath="//*[@id='164']/span")
			private static WebElement  holdAndUnholdStockVoucher;
			
			@FindBy(xpath="//*[@id='93']/span")
			private static WebElement  stockReconciliation;
			
			@FindBy(xpath="//*[@id='99']/span")
			private static WebElement  stockAllocation;
		
			
    //Validation and Confirmation messages
	@FindBy(xpath="//div[@class='theme_color font-6']")
	public static WebElement errorMessage;
					
	@FindBy(xpath="//span[@class='icon-reject2 theme_color']")
	public static WebElement errorMessageCloseBtn;
	
	//Dash board Page
	@FindBy(xpath="//*[@id='dashName']")
    private static WebElement labelDashboard ;
	
	@FindBy(xpath="//*[@id='Select_dash']")
	private static WebElement selectDashboard ;
		
	@FindBy(xpath="//*[@id='Dashboard_AddDash']")
    private static WebElement newAddDashBoard;
	 
    @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
    private static WebElement dashboardCustomizationSettings;
			
		   
		    
    //Vouchers Settings Options
	@FindBy(xpath="//span[@id='updateButton']")
	private static WebElement  updateBtn;
	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  settings_closeBtn;
					
		//Documents Tab
		@FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
		private static WebElement  documentsTab;
		
		@FindBy(xpath="//li[@id='navigationtab1']")
		private static WebElement  documentsTabForMaterialReceiptNotes;
		
		@FindBy(xpath="//span[@id='DocumentLoadMasterPopupBtn']")
		private static WebElement  loadMastersBtn;
			
			@FindBy(xpath="//select[@id='doc_voucherDropDown']")
			private static WebElement  loadmasterDropDown;
			
			@FindBy(xpath="//button[@id='btnSelectDependMaster']")
			private static WebElement  selectAllBtn;
			
			@FindBy(xpath="//button[contains(text(),'Reset')]")
			private static WebElement  resetBtn;
			
			@FindBy(xpath="//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
			private static WebElement  okBtn;
			
			@FindBy(xpath="//*[@id='editScreen_CustomizeButtons']/span[1]")
			private static WebElement  deleteTagBtn;
			
			@FindBy(xpath="//span[@id='DocumentAddGroupPopupBtn']")
			private static WebElement  addGroupBtn;
			
				@FindBy(xpath="//input[@id='doc_GroupName']")
				private static WebElement  groupNameTXt;
				
				@FindBy(xpath="//button[contains(text(),'Add')]")
				private static WebElement  addBtn;
				
				@FindBy(xpath="//div[@class='col-xs-12 form-group']//button[@id='btnCancel']")
				private static WebElement  cancelBtn;

			@FindBy(xpath="//div[@id='voucherTabContent']//span[2]")
			private static WebElement  deletegroupBtn;
			
			@FindBy(xpath="//input[@id='doc_title']")
			private static WebElement  titleTxt;
			
			@FindBy(xpath="//input[@id='doc_baseDocument']")
			private static WebElement  baseDocumentTxt;
			
			@FindBy(xpath="//input[@id='txtbox_doc_Accountdepandency']")
			private static WebElement  accountDependencyTxt;
			
				@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentGainAC')]")
				private static WebElement  iExchangeAdjustmentGainACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentLossAC')]")
				private static WebElement  iExchangeAdjustmentLossACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPrimaryAccount')]")
				private static WebElement  iPrimaryAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCity')]")
				private static WebElement  iCityChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDeliveryCity')]")
				private static WebElement  iDeliverycityChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iBankAc')]")
				private static WebElement  iBankACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPDCDiscountedAC')]")
				private static WebElement  iPDCDiscountedACChkBox;
						
			@FindBy(xpath="//input[@id='txtbox_doc_Productdepandency']")
			private static WebElement  itemDependencyTxt;
			
				@FindBy(xpath="//span[contains(text(),'Outlet__')]")
				private static WebElement  outletChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofShortageStockAC')]")
				private static WebElement  iCostofShortageStockACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofExcessStockAC')]")
				private static WebElement  iCostofExcessStockACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofSaleReturnAC')]")
				private static WebElement  iCostofSaleReturnACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPurchaseVarianceAC')]")
				private static WebElement  iPurchaseVarianceACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultBaseUnit')]")
				private static WebElement  iDefaultBaseUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultSalesUnit')]")
				private static WebElement  iDefaultSalesUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultPurchaseUnit')]")
				private static WebElement  iDefaultPurchaseUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostOfIssueAccount')]")
				private static WebElement  iCostOfIssueAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iStocksAccount')]")
				private static WebElement  iStocksAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iSalesAccount')]")
				private static WebElement  iSalesAccountChkBox;
				
				@FindBy(xpath="//li[12]//div[1]//label[1]//span[1]")
				private static WebElement  otherdetails1Box;
				
				@FindBy(xpath="//li[13]//div[1]//label[1]//span[1]")
				private static WebElement  replenishment1ChkBox;
				
				@FindBy(xpath="//span[contains(text(),'Reorder__')]")
				private static WebElement  reorderChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCategory')]")
				private static WebElement  iCategoryChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iWIPAccount')]")
				private static WebElement  iWIPAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'Classification__')]")
				private static WebElement  classificationChkBox;
				
				@FindBy(xpath="//li[18]//div[1]//label[1]//span[1]")
				private static WebElement  repelenishment2ChkBox;
				
				@FindBy(xpath="//li[19]//div[1]//label[1]//span[1]")
				private static WebElement  otherDetails2ChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iBin')]")
				private static WebElement  iBinChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iAlternateCategory')]")
				private static WebElement  iAlternateCategoryChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iTaxCode')]")
				private static WebElement  iTaxCodeChkBox;
			
			@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
			private static WebElement  accountfilterDropdown;
			
			@FindBy(xpath="//select[@id='doc_Itemdepandency_Filter']")
			private static WebElement  itemfilterDropdown;
			
			
			// Documents Tab Grid Elements
			
		    // first row 
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-0']")
			private static WebElement  firstrow;
			
			@FindBy(xpath="//div[contains(text(),'Delete Row')]")
			private static WebElement  doc_deleterowBtn;
			
			@FindBy(xpath="//div[contains(text(),'Insert Row')]")
			private static WebElement  doc_insertRowBtn;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
			private static WebElement  masters1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
			private static WebElement  position1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-3']")
			private static WebElement  showDependency1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-4']")
			private static WebElement  group1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-5']")
			private static WebElement  filter1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-6']")
			private static WebElement  mandatory1;
			
			
			// Second Row // Delete and Insert row are same
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-0']")
			private static WebElement  secondRow;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
			private static WebElement  masters2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
			private static WebElement  position2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-3']")
			private static WebElement  showDependency2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-4']")
			private static WebElement  group2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-5']")
			private static WebElement  filter2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-6']")
			private static WebElement  mandatory2;
			
			// After clicking // Properties Changes which are same for all rows
			
			@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
			private static WebElement  masterDropDown;
			
			@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
			private static WebElement  positionDropdown;
			
			@FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
			private static WebElement  showDependencyDropdown;
			
			@FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
			private static WebElement  groupTxt;
			
			@FindBy(xpath="//select[@id='docFilter']")
			private static WebElement  filterDropdown;
			
			@FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
			private static WebElement  mandatoryDropDown;
			
		    
			
			
			
			
			
			
			
			
			
			
	 //Views Tab
	@FindBy(xpath="//span[@class='icon-views'")
	private static WebElement  viewsTab;
		
	//Export Fields 
	@FindBy(xpath="//span[contains(text(),'Export Fields')]")
	private static WebElement exportFieldsTab;
		
	//Triggers
	@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
	private static WebElement  triggersTab;	
		
	//Document Numbering
	@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
	private static WebElement  documentNumberingTab;
		
	//Hire Purchase	
	@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
	private static WebElement hirePurchasetab;
		
	//Reports Tab	
	@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
	private static WebElement  reportsTab;	
	
	//Schemes
	@FindBy(xpath="//span[contains(text(),'Schemes')]")
	private static WebElement schemestab;	
	
	
	// Bin Inward Elements
	
		@FindBy (xpath="//input[@id='id_bins_totalquantity']")
		private static WebElement binTotalQty;
		
		@FindBy (xpath="//div[@class='modal-body']//div[4]")
		private static WebElement binBaseUOM;
		
		@FindBy (xpath="//input[@id='srch_bin']")
		private static WebElement binSearchTxt;
		
		@FindBy (xpath="//i[@class='icon-search']")
		private static WebElement binSearchBtn; 
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
		private static WebElement  binselect1stRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
		private static WebElement  binselect1stRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
		private static WebElement  binselect1stRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
		private static WebElement  binselect1stRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
		private static WebElement  binselect1stRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
		private static WebElement  binselect1stRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
		private static WebElement  binselect1stRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
		private static WebElement  binselect1stRow_8thColumn;
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
		private static WebElement  binselect2ndRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
		private static WebElement  binselect2ndRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
		private static WebElement  binselect2ndRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
		private static WebElement  binselect2ndRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
		private static WebElement  binselect2ndRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
		private static WebElement  binselect2ndRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
		private static WebElement  binselect2ndRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
		private static WebElement  binselect2ndRow_8thColumn;
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
		private static WebElement  binselect3rdRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
		private static WebElement  binselect3rdRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
		private static WebElement  binselect3rdRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
		private static WebElement  binselect3rdRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
		private static WebElement  binselect3rdRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
		private static WebElement  binselect3rdRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
		private static WebElement  binselect3rdRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
		private static WebElement  binselect3rdRow_8thColumn;
		
		
		@FindBy(xpath="//span[@class='icon-sum']")
		private static WebElement  binRowSum;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[2]")
		private static WebElement  binRowSum_2ndColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[4]")
		private static WebElement  binSelect4htRow_3rdColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[6]")
		private static WebElement  binRowSum_4thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[7]")
		private static WebElement  binRowSum_5thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[8]")
		private static WebElement  binRowSum_6thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[9]")
		private static WebElement  binRowSum_7thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[12]")
		private static WebElement  binRowSum_8thColumn;
		
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
		private static WebElement  binSumInward;
		
		
		
		@FindBy (xpath="//input[@id='id_bins_balance']")
		private static WebElement binBalanceTxt;
		
		@FindBy (xpath="//div[@id='id_btnalternatecategorycheck']//div[@class='toolbar_button_image']")
		private static WebElement binAlternateCategoryCheckBtn;
		
		@FindBy (xpath="//div[@id='id_btnautoallocate']//div[@class='toolbar_button_image']")
		private static WebElement binAutoAllocateBtn;
		
		@FindBy (xpath="//span[@class='icon-pick icon-font4']")
		private static WebElement binPickBtn; 
		
		@FindBy (xpath="//div[@id='id_btnautoallocategroup']//div[@class='toolbar_button_image']")
		private static WebElement binAutoAllocateWithinGroupBtn;
		
		@FindBy (xpath="//div[@id='id_bins_ok']//span[@class='icon-ok icon-font6']")
		private static WebElement binOkBtn;
		
		@FindBy (xpath="//div[@class='col-xs-9 pull-right']//span[@class='icon-close icon-font6']")
		private static WebElement binCancelBtn;

		
		// RMA POpup Window
		@FindBy (xpath="//div[@id='Modal_Header']/div[1]")
		private static WebElement rmaScreenTitle;
		
		@FindBy (xpath="//input[@id='txtSerialNo']")
		private static WebElement rmaSerialNumberTxtField;

		@FindBy (xpath="//input[@id='txtQuantity']")
		private static WebElement rmaQuantityTxtField;
		
		@FindBy (xpath="//div[@id='img_add']/span")
		private static WebElement rmaAddBtn;
			
		@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
		private static WebElement rmaNumberofItemsLabel;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
		private static WebElement rmaTableHeadingRMA;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
		private static WebElement rmaTableHeadingDocumentNo;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
		private static WebElement rmaTableHeadingDocumentDate;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
		private static WebElement rmaClearBtn;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
		private static WebElement rmaOkBtn;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
		private static WebElement rmaCancelBtn;
		
		@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
		private static WebElement rmaCloseBtn;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
		private static WebElement rmaTableRow1Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
		private static WebElement rmaTableRow2Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
		private static WebElement rmaTableRow3Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
		private static WebElement rmaTableRow4Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
		private static WebElement rmaTableRow5Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
		private static WebElement rmaTableRow6Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
		private static WebElement rmaTableRow7Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
		private static WebElement rmaTableRow8Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
		private static WebElement rmaTableRow9Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
		private static WebElement rmaTableRow10Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
		private static WebElement rmaTableRow11Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
		private static WebElement rmaTableRow12Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
		private static WebElement rmaTableRow13Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
		private static WebElement rmaTableRow14Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
		private static WebElement rmaTableRow15Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
		private static WebElement rmaTableRow16Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
		private static WebElement rmaTableRow17Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
		private static WebElement rmaTableRow18Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
		private static WebElement rmaTableRow19Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
		private static WebElement rmaTableRow20Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
		private static WebElement rmaTableRow1Column2;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
		private static WebElement rmaTableRow1Column3;
		
		@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
		private static WebElement rmaExpansionBtn;
		
		
		//----------------------------------------------------------------------------------------------------------    
	    // Edit Screen Tab     
				    
	    @FindBy(xpath="//span[contains(text(),'Edit Screen')]")
	   	private static WebElement  editScreenTab; 
		
		@FindBy(xpath="//i[@class='icon-add icon-font7']")
		private static WebElement editScreenaddBtn;

		@FindBy(xpath="//a[contains(text(),'Field Details')]")
		private static WebElement editScreenFieldDetailsTab;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Caption']")
		private static WebElement  editScreenCaptionTxt;

		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_DataType']")
		private static WebElement  editScreenCaptionDataTypeDropdown;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_DefaultValue']")
		private static WebElement editScreenDefaultValueTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_noofDecimals']")
		private static WebElement editScreenNoOfDecimalsDropdown;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_toolTip']")
		private static WebElement editScreenToolTipTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_bannerText']")
		private static WebElement editScreenBannerTextTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MinValue']")
		private static WebElement editScreenMinimunValueTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MaxValue']")
		private static WebElement editScreenMaximunValueTxt;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_behaviour']")
		private static WebElement editScreenAddFieldsBehaviourDropdown;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_textbox']")
		private static WebElement  editScreenAddBehaviourformulaTxt;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_Ok']")
		private static WebElement  editScreenAddBehaviourFormulaokBtn;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
		private static WebElement editScreenPreloadTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
		private static WebElement editScreenRestrictformulaTxt;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_RoundOff']")
		private static WebElement editScreenRoundOffsDropdown;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RoundOffTo']")
		private static WebElement editScreenRoundOffToTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RestrictMsg']")
		private static WebElement editScreenRestrictMessageTxt;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToNet']")
		private static WebElement editScreenAddToNetDropdown;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToStock']")
		private static WebElement editScreenAddToStockDropDown;

		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_Position']")
		private static WebElement editScreenpositionDropdown;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Columnwidth']")
		private static WebElement editScreenColumnWidthTxt;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
		private static WebElement editScreenValueInBaseCurrencyChkBox;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
		private static WebElement editScreenHideFromSummaryChkBox;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkPostToAcc']")
		private static WebElement editScreenPostToAccountChkBox;  
	 
		@FindBy(xpath="//input[@id='acc1-1']")
		private static WebElement editScreenAccount1Radio;  
				   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1']")
		private static WebElement editScreenAccount1Txt;  
	   
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_image']/span")
		private static WebElement editScreenAccount1ExpandBtn;  
	   
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_settings']/span")
		private static WebElement editScreenAccount1SettingsBtn;  
				   
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_container']")
			private static WebElement editScreenAccount1Container;  
		    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_footer']//input[1]")
			private static WebElement editScreenAccount1StandardFiledsBtn;  
							    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_list']")
				private static WebElement editScreenAccount1StandardFiledsDropdown;  
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_header']")
				private static WebElement editScreenAccount1StandardFiledsHeaderTxt;  
			    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_alignment']")
				private static WebElement editScreenAccount1StandardFiledsAllignmentDropdown; 
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_width']")
				private static WebElement editScreenAccount1StandardFiledsWidthTxt;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
				private static WebElement editScreenAccount1StandardFiledsokBtn;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[4]")
				private static WebElement editScreenAccount1StandardFiledscancelBtn;  
							    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_search_container']//input[2]")
			private static WebElement editScreenAccount1deleteColumnBtn;
		    
		    @FindBy(xpath="//section[@id='page_Content']//input[3]")
		   	private static WebElement editScreenAccount1okBtn;  
		       
		    @FindBy(xpath="//section[@id='page_Content']//input[4]")
		   	private static WebElement editScreenAccount1cancelBtn;
				
		@FindBy(xpath="//input[@id='acc2-2']")
		private static WebElement editScreenAccount2Radio;  
		    
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2']")
		private static WebElement editScreenAccount2Txt;  
		    
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_image']/span")
		private static WebElement editScreenAccount2ExpandBtn;
	  
	    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_settings']/span")
	  	private static WebElement editScreenAccount2SettingsBtn;  
				      
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_container']")
			private static WebElement editScreenAccount2Container;  
		    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_footer']//input[1]")
			private static WebElement editScreenAccount2StandardFiledsBtn;  
				  			    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_list']")
				private static WebElement editScreenAccount2StandardFiledsDropdown;  
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_header']")
				private static WebElement editScreenAccount2StandardFiledsHeaderTxt;  
			    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_alignment']")
				private static WebElement editScreenAccount2StandardFiledsAllignmentDropdown; 
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_width']")
				private static WebElement editScreenAccount2StandardFiledsWidthTxt;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
				private static WebElement editScreenAccount2StandardFiledsokBtn;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[4]")
				private static WebElement editScreenAccount2StandardFiledscancelBtn;  
				  			    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_search_container']//input[2]")
			private static WebElement editScreenAccount2deleteColumnBtn;
		    
		    @FindBy(xpath="//section[@id='page_Content']//input[3]")
		   	private static WebElement editScreenAccount2okBtn;  
		       
		       @FindBy(xpath="//section[@id='page_Content']//input[4]")
		   	private static WebElement editScreenAccount2cancelBtn;
	   
	   @FindBy(xpath="//input[@id='acc1-3']")
	   private static WebElement editScreenAccount1VariableRadio; 
	  
	   @FindBy(xpath="//input[@id='Account_1Var']")
	   private static WebElement editScreenAccount1VariableTxt;
	   
	   @FindBy(xpath="//input[@id='acc2-4']")
	   private static WebElement editScreenAccount2VariableRadio; 
	  
	   @FindBy(xpath="//input[@id='Account_2Var']")
	   private static WebElement editScreenAccount2VariableTxt;
	   
	   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RegularExpr']")
	   private static WebElement editScreenRegularExpTxt; 
	   
	   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_ErrorMsg']")
	   private static WebElement editScreenerrorMessageTxt; 

	 // properties  
	   
	  @FindBy(xpath="//a[contains(text(),'Properties')]")
	  private static WebElement editScreenPropertiesTab;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkAuditTrail']")
	  private static WebElement editScreenauditTrailChkBox;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantExprt']")
	  private static WebElement editScreencantExportChkBox;  
	  
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantImprt']")
	  private static WebElement editScreencantImportChkbox; 
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkHidden']")
	  private static WebElement editScreenhiddenChkbox;  
	  
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkMandatory']")
	  private static WebElement editScreenmandatorychkBox; 
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkNotAvailForReports']")
	  private static WebElement editScreennotAvailableForReportsChkBox;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkReadOnly']")
	  private static WebElement editScreenreadOnlyChkBox;  
	 
	     
	  @FindBy(xpath="//span[contains(text(),'Apply')]")
	  private static WebElement editScreenApplyBtn;  
	     
	  @FindBy(xpath="//span[@id='editScreen_FieldsCustomization_Close']")
	  private static WebElement editScreencloseBtn;  
	  

	 
	  @FindBy(xpath="//a[@href='#editScreen_FieldsCustomization_ExternalModules']")
	  private static WebElement editScreenExternalModulesTab; 
				
		// External Module Tab is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
	    // External Functions(External Fields) Changes From Screen to Screen
	
		// Formatting Tab
				  
	    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_tabs']/li[3]/a")
	    private static WebElement editScreenformattingTab;

		@FindBy(xpath="//*[@id='fontFamily_editScreen_FieldsCustomization_FontCtrl']")
	    private static WebElement editScreenFontFamilyDropdown;
		
	    @FindBy(xpath="//*[@id='fontStyle_editScreen_FieldsCustomization_FontCtrl']")
	    private static WebElement editScreenFontStyleDropdown;

	    @FindBy(xpath="//*[@id='fontWeight_editScreen_FieldsCustomization_FontCtrl']")
	    private static WebElement editScreenFontWeightDropdown;

		@FindBy(xpath="//*[@id='fontSizes_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenFontSizeDropdown;
		
		@FindBy(xpath="//*[@id='fontForeColor_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenForeColourDropdown;
		
		@FindBy(xpath="//*[@id='fontBackColor_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenBackColourDropdown;
		
		@FindBy(xpath="//*[@id='chkBaseline_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenBaseLineCheckbox;
		
		@FindBy(xpath="//*[@id='chkOverLine_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenOverLineCheckbox;
		
		@FindBy(xpath="//*[@id='chkStrikeThrough_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement EditScreenStrikeThroughCheckbox;
		
		@FindBy(xpath="//*[@id='chkUnderline_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenUnderlineCheckbox;
		
		@FindBy(xpath="//*[@id='previewfont_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenFontPreviewTxt;
		
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Formatting_chkenableFont']")
		private static WebElement editScreenenableFontChkbox;
				
		  @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
		  private static WebElement editScreenLoadFieldsBtn;  
		     
		  @FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
		  private static WebElement editScreenLoadFieldsDropdown;  
		     
		  @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[1]")
		  private static WebElement editScreenselectAllBtn;  
		  
		  @FindBy(xpath="//div[@id='editScreen_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
		  private static WebElement editScreenokBtn;  
		     
		  @FindBy(xpath="//input[@id='searchlayout2']")
		  private static WebElement editScreenSearchTxt;  
		     
		  @FindBy(xpath="//button[@id='btnEditScreenPrev']")
		  private static WebElement editScreenPreviousBtn;  
		     
		  @FindBy(xpath="//button[@id='btnEditScreenNext']")
		  private static WebElement editScreenNextBtn;  
		  
		  @FindBy(xpath="//*[@id='editScreen_tabContent']/label")
			private static WebElement editScreenRatePreloadLabel;
		  
		  @FindBy(xpath="//select[@id='cmbBehaviour']")
		  private static WebElement editScreenBehaviourDropdown;
		  
		  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
		  private static WebElement editScreenQuantityPreloadedTxt;
		  	  
		  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
		  private static WebElement  formulaTxt;
			
		  @FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_expandedFormula']")
		  private static WebElement  expandeFormula;
					
	     // Grid Elements 
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_1-2']//span[@class='icon-collepse icon-font8']")
		private static WebElement  editScreenTransactionExpandBtn;
				
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-2']")
			private static WebElement  editScreenQuantity;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-3']")
			private static WebElement  editScreenqty;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-2']")
			private static WebElement  editScreenRate;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-3']")
			private static WebElement  editScreenrt;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-2']")
			private static WebElement  editScreenAlternateQty;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-3']")
			private static WebElement  editScreenqtya;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-2']")
			private static WebElement  editScreengrossAmount;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-3']")
			private static WebElement  editScreengr;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-2']")
			private static WebElement  editScreenStockValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-3']")
			private static WebElement  editScreenstkv;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-2']")
			private static WebElement  editScreenAccount;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-3']")
			private static WebElement  EditScreenacc;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-2']")
			private static WebElement  editScreenAccount2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-3']")
			private static WebElement  editScreenacc2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-2']")
			private static WebElement  editScreenExchangeRate;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-3']")
			private static WebElement  editScreenexrt;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-2']")
			private static WebElement  editScreenqtyinBaseUnit;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-3']")
			private static WebElement  editScreenqtyb;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-2']")
			private static WebElement  editScreenCurrency;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-3']")
			private static WebElement  editScreencrn;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-2']")
			private static WebElement  editScreenValueOfThetagMasterIDofTheTag;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-3']")
			private static WebElement  editScreentgval;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-2']")
			private static WebElement  editScreenNetAmount;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-3']")
			private static WebElement  EditScreennet;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-2']")
			private static WebElement  editScreenNetAmountInOriginalCurrency;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-3']")
			private static WebElement  editScreenneto;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-2']")
			private static WebElement  editScreenTotalQuantity;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-3']")
			private static WebElement  editScreentqty;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-2']")
			private static WebElement  editScreenTotalGross;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-3']")
			private static WebElement  editScreentgr;
							
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_17-2']//span[@class='icon-expand icon-font8']")
		private static WebElement  screenFiledExpandBtn;
				
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-2']")
			private static WebElement  mrnQtyInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-3']")
			private static WebElement  sb1;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-2']")
			private static WebElement  mrnQtyCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-3']")
			private static WebElement  sbo1;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-2']")
			private static WebElement  qtyBalancedInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-3']")
			private static WebElement  sb2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-2']")
			private static WebElement  qtyCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-3']")
			private static WebElement  sbO2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-2']")
			private static WebElement  averagerateInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-3']")
			private static WebElement  sb3;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-2']")
			private static WebElement  avreageRateCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-3']")
			private static WebElement  sbO3;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-2']")
			private static WebElement  addValueInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-3']")
			private static WebElement  sb4;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-2']")
			private static WebElement  addValueInputCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-3']")
			private static WebElement  sbO4;
				
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_26-2']//span[@class='icon-collepse icon-font8']")
		private static WebElement  layoutFieldExpandBtn;
		
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-2']")
			private static WebElement  appropriateBasedOnInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-3']")
			private static WebElement  lh0;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-2']")
			private static WebElement  additionalValueInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-3']")
			private static WebElement  lh1;
							
	    //Grid Completed
		
		@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
		private static WebElement  editScreenqtyFormulaSearchTxt;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_PlusOpt']")
		private static WebElement  editScreenqtyPlusBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'-')]")
		private static WebElement  editScreenqtyMinusBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[3]")
		private static WebElement  editScreenqtyDivideBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'*')]")
		private static WebElement  editScreenqtyMultiplyBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[5]")
		private static WebElement  editScreenqtyBrackets1Btn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[6]")
		private static WebElement  editScreenqtyBrackets2Btn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'~')]")
		private static WebElement  editScreenqtyTildeBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'&')]")
		private static WebElement  editScreenqtyAndBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'%')]")
		private static WebElement  editScreenqtyPercentBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//div[@id='operationButtons']//button[@class='btn btn-link'][contains(text(),']')]")
		private static WebElement  editScreenqtySquarebracketBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'|')]")
		private static WebElement  editScreenqtyVerticalBarBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'\')]")
		private static WebElement  editScreenqtyBackSlashBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'<')]")
		private static WebElement  editScreenqtyLessThanbtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'>')]")
		private static WebElement  editScreenqtyGreaterThanBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
		private static WebElement  editScreenqtyExclamationBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
		private static WebElement  editScreenqtyEqualBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'?:')]")
		private static WebElement  editScreenqtyQuestionBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'^')]")
		private static WebElement  editScreenqtyCaretBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'DateDiff()')]")
		private static WebElement  editScreenqtyDateDiffBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Cond()')]")
		private static WebElement  editScreenqtyCondBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Min()')]")
		private static WebElement  editScreenqtyMinBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Max()')]")
		private static WebElement  editScreenqtyMaxBtn;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
		private static WebElement  editScreenqtyConditionokBtn;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
		private static WebElement  editScreenqtyConditioncancelBtn;
				
				
		@FindBy(xpath="//*[@id='editScreen_qtyFormula_textbox']")
		private static WebElement  editScreenformulaTxt;
		
		
		// CustomizeGrid
		
		@FindBy(xpath="//i[@class='icon-custamize icon-font7']")
		private static WebElement editScreencustomizeGridBtn;  
		  
		@FindBy(xpath="//span[contains(text(),'Apportion')")
		private static WebElement editScreenApportionBtn;
		     
		@FindBy(xpath="//span[contains(text(),'Audit Trial')]")
		private static WebElement editScreenAuditTrialBtn;  
		    
		@FindBy(xpath="//span[contains(text(),'Back color')]")
		private static WebElement editScreenbackColorBtn;  
		     
		@FindBy(xpath="//span[contains(text(),'Banner text')]")
		private static WebElement editScreenbannerTextBtn;  
		 
		  @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
		  private static WebElement editScreencannotBeExportedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
		  private static WebElement editScreencannotBeImportedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Column Span')]")
		  private static WebElement editScreencolumnSpanBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
		  private static WebElement editScreencopyFromParentBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'DataType')]")
		  private static WebElement editScreendataTypeBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Default Value')]")
		  private static WebElement editScreenDefaultValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Error message')]")
		  private static WebElement editScreenerrorMessageBtn;  
		 
		  @FindBy(xpath="//span[contains(text(),'External module attached')]")
		  private static WebElement editScreenExternalModuleAttachedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Field Order')]")
		  private static WebElement editScreenFilterOrderBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Font')]")
		  private static WebElement editScreenFontBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Group Name')]")
		  private static WebElement editScreengroupNameBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
		  private static WebElement editScreenHideLeftPanelBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Information Field')]")
		  private static WebElement editScreenInformationFieldBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Mandatory')]")
		  private static WebElement editScreenMandatoryBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Mass Update')]")
		  private static WebElement editScreenMassupdateBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
		  private static WebElement editScreenMaximumValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Merge Field')]")
		  private static WebElement editScreenMergerFieldBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
		  private static WebElement editScreenMinimumValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'No Of Decimals')]")
		  private static WebElement editScreenNoOfDecimalsBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
		  private static WebElement editScreenNotAvailableForReportsBtn; 
		     
		  @FindBy(xpath="//span[contains(text(),'Read Only')]")
		  private static WebElement editScreenReadOnlyBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Regular expression')]")
		  private static WebElement editScreenRegularExpressionBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Restrict formula')]")
		  private static WebElement editScreenRestrictFormulaBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Restrict Message')]")
		  private static WebElement editScreenRestrictMessageBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Round Offs')]")
		  private static WebElement editScreenRoundsOffsBtn;  
		
		  @FindBy(xpath="//span[contains(text(),'Row Span')]")
		  private static WebElement editScreenRowSpanBtn; 
		     
		  @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
		  private static WebElement editScreenRuleAttachedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Tooltip')]")
		  private static WebElement editScreenToolTipBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Variable name')]")
		  private static WebElement editScreenVariableNameBtn;  
		 
		  
		  
		  
		
		 // Body Tab 
		  
		  @FindBy(xpath="//a[contains(text(),'Body')]")
		  private static WebElement  editScreenBodyTab; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody1stRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody1stRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody2ndRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody2ndRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody3rdRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody3rdRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody4thRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody4thRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody5thRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody5thRowDeleteBtn;
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody6thRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody6thRowDeleteBtn;
		  
		  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-up-arrow Fbutton']")
		  private static WebElement  editScreenBodyUpArrowBtn; 
		
		  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-down-arrow Fbutton']")
		  private static WebElement  editScreenBodyDownArrowBtn;
						
		  // Footer Tab
		  
		  @FindBy(xpath="//a[contains(text(),'Footer')]")
		  private static WebElement  editScreenFooterTab;  
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenFooter1stRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenFooter1stRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenFooter2ndRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenFooter2ndRowDeleteBtn; 
		  
		  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-up-arrow Fbutton']")
		  private static WebElement  editScreenFooterUpArrowBtn; 
		
		  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-down-arrow Fbutton']")
		  private static WebElement  editScreenFooterDownArrowBtn; 
		  
		  	@FindBy(xpath="//label[contains(text(),'Quantity preloaded')]")
			private static WebElement qtyPreloadedLabel;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
			private static WebElement qtyPreloadedTxt;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
			private static WebElement qtyPreloadedformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
			private static WebElement qtyPreloadedFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
			private static WebElement qtyPreloadedFormulaokBtn;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
			private static WebElement qtyPreloadedFormulacancelBtn;


			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[1]/label/span")
			private static WebElement editScreenLoadFields1stChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[2]/label/span")
			private static WebElement editScreenLoadFields2ndChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[3]/label/span")
			private static WebElement editScreenLoadFields3rdChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[4]/label/span")
			private static WebElement editScreenLoadFields4thChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[5]/label/span")
			private static WebElement editScreenLoadFields5hChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[6]/label/span")
			private static WebElement editScreenLoadFields6thChkBox;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_formulaText']")
			private static WebElement  preloadformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_availableVariables']")
			private static WebElement  preloadFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
			private static WebElement  preloadFormulaokBtn;
				
			@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Cancel']")
			private static WebElement  preloadFormulacancelBtn;
			
			
			@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
			private static WebElement  editScreenFooter1stRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
			private static WebElement  editScreenFooter2ndRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _3']")
			private static WebElement  editScreenbody1stRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _3']")
			private static WebElement  editScreenbody2ndRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _3']")
			private static WebElement  editScreenbody3rdRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _3']")
			private static WebElement  editScreenbody4thRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _3']")
			private static WebElement  editScreenbody5thRowCaption;
			
			
			
			// Add To Stock Status
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _14']")
			private static WebElement  editScreenbody1stRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _14']")
			private static WebElement  editScreenbody2ndRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _14']")
			private static WebElement  editScreenbody3rdRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _14']")
			private static WebElement  editScreenbody4thRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _14']")
			private static WebElement  editScreenbody5thRowAddtoStock;			
			
		// Suspend Status Of Entry Page
		@FindBy(xpath="//tr[1]//td[11]")
		private static WebElement suspendStatusRow1;
	
	//User Name Display
	@FindBy(xpath="//span[@class='hidden-xs']")
	private static WebElement userNameDisplay;

    
   /* @FindBy(xpath="//*[@id='mainHeader_MainLayout']/nav/div/ul/li[7]/a/span")
	private static WebElement userNameDisplay;*/

	@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
	private static WebElement companyName;

	@FindBy(xpath="//*[@id='companyLogo']")
	private static WebElement companyLogo;

    @FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
	private static WebElement noIn;
    
    @FindBy(xpath="//input[@id='donotshow']")
	private static WebElement doNotShowCheckbox;
    
    @FindBy(xpath="//span[@class='pull-right']")
	private static WebElement closeBtnInDemoPopupScreen;
    
    
		
	//Bill Reference Screen 	
		
		
	@FindBy(xpath="//input[@id='txtNewReference']")
	private static WebElement  billRefNewReferenceTxt;
	
	@FindBy(xpath="//input[@id='txtOnAccount']")
	private static WebElement  billRefTxtOnAccount;		
		
	@FindBy(xpath="//input[@id='Searchtxt']")
	private static WebElement  billRefSearchTxt;		
	
	@FindBy(xpath="//select[@id='cbmShowBillForAdjustment']")
	private static WebElement  billRefNewReferenceDropdown;		
	
	@FindBy(xpath="//select[@id='cbmShowBills']")
	private static WebElement  billRefShowBillsDropdown;		
	
	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_11']//div[contains(text(),'Due Date')]")
	private static WebElement  billRefGridHeaderDueDate;		
	
	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_16']//div[contains(text(),'Currency')]")
	private static WebElement  billRefGridHeaderCurrency;		
	
	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_21']//div[contains(text(),'Original Amt')]")
	private static WebElement  billRefGridHeaderOrginalAmt;		
	
	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_23']//div[contains(text(),'Balance Amount')]")
	private static WebElement  billRefGridHeaderBalanceAmt;		
	
	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_33']//div[contains(text(),'Adjustment Amount')]")
	private static WebElement  billRefGridHeaderAdjustmentAmt;		
	
	@FindBy(xpath="//div[contains(text(),'Native Currency')]")
	private static WebElement  billRefGridHeaderNativeCurrency;		
	
	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_41']//div[contains(text(),'Narration')]")
	private static WebElement  billRefGridHeaderNarration;		
	
	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_50']//div[contains(text(),'Previous Adjustment Amount')]")
	private static WebElement  billRefGridHeaderPreviosAdjustmentAmt;		
	
	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-0']")
	private static WebElement  billRefGridFirstRow;	
	
	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-1']//input")
	private static WebElement  billRefGridFirstRowChkbox;		
	
	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-1']//input")
	private static WebElement  billRefGridSecondRowChkbox;		
	
	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-1']//input")
	private static WebElement  billRefGridThirdRowChkbox;		
	
	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-33']")
	private static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
	
	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-33']")
	private static WebElement  billRefGridSecondRowAdjustmentAmtTxt;		
	
	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
	private static WebElement  billRefGridThirdRowAdjustmentAmtTxt;		
	
	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-41']")
	private static WebElement  billRefGridFirstNarrationTxt;		
	
	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-41']")
	private static WebElement  billRefGridSecondNarrationTxt;		
	
	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-41']")
	private static WebElement  billRefGridThirdNarrationTxt;		
	
	@FindBy(xpath="//input[@id='id_Narration']")
	private static WebElement  narrationToWrite;		
	
	@FindBy(xpath="//input[@id='id_limit']")
	private static WebElement  adjustAmtToWrite;		
	
	@FindBy(xpath="//div[@class='col-xs-6 navbar-header']//div[@class='navText']")
	private static WebElement  billRefPaymentsBillReferenceLabel;		
	
	@FindBy(xpath="//div[@class='col-sm-12 col-md-3']//input[@class='Fbutton']")
	private static WebElement  billRefAdjustOnFIFOBtn;		
	
	@FindBy(xpath="//span[@id='btnPick']")
	private static WebElement  billRefPickIcon;		
	
	@FindBy(xpath="//span[@id='btnOk']")
	private static WebElement  billRefOkBtn;		
	
	@FindBy(xpath="//span[@id='btnCancel']")
	private static WebElement  billRefcancel;		
	
	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
	private static WebElement  billRefSummatyValueNet;		
	
	@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
	private static WebElement  billRefGridVendorRow1;	
	
	@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
	private static WebElement  billRefGridVendorAmtRow1;	
	
	@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
	private static WebElement  billRefGridVendorRow2;	
	
	@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
	private static WebElement  billRefGridVendorAmtRow2;	
	
	@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
	private static WebElement  billRefGridVendorRow3;
	
	@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
	private static WebElement  pendingBillsBtn;
	
	
	
	@FindBy(xpath="//tr[@id='trRender_1']//td//input")
	private static WebElement  pendingBillsGridRow1Chkbox;
	
	@FindBy(xpath="//tr[@id='trRender_2']//td//input")
	private static WebElement  pendingBillsGridRow2Chkbox;
	
	@FindBy(xpath="//tr[@id='trRender_3']//td//input")
	private static WebElement  pendingBillsGridRow3Chkbox;	
		
	@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
	private static WebElement transactionCurency;
	
	@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
	private static WebElement baseCurrency;
	
	@FindBy(xpath="//label[@id='tbAmountToAdjustInLocalCurrencyValue']")
	private static WebElement localCurrencyDhs;
	
	@FindBy(xpath="//label[@id='tbNewRefBalAmountValue']")
	private static WebElement balanceNewReferenceAmt;
	
	@FindBy(xpath="//li[@id='id_li_Adjustment_Tab_BreakUpByTag']//span[@class='font-5'][contains(text(),'Break Up by Tag')]")
	private static WebElement breakUpByTagTab;
	
	@FindBy(xpath="//span[@class='font-5'][contains(text(),'Adjustment')]")
	private static WebElement adjustmentTab;
	
	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-9']")
	private static WebElement breakUpByTagDueDate;
	
	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-10']")
	private static WebElement breakUpByTagDepartment;
	
	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-18']")
	private static WebElement breakUpByTagBaseCurrency;
	
	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-17']")
	private static WebElement breakUpByTagBillCurrency;
	
	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-20']")
	private static WebElement breakUpByTagBaseConversionRate;
		
	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-21']")
	private static WebElement breakUpByTagBaseLocalCurrency;
	
	@FindBy(xpath="//label[@id='tbNewRefAmountAdjValue']")
	private static WebElement amtAdjustedAgainstNewREfinOtherVouchers;
	
	@FindBy(xpath="//input[@id='id_body_85']")
	private static WebElement  enter_Bin;
	
	@FindBy(xpath="//input[@id='id_body_38']")
	private static WebElement  enter_RMA;
	
	@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
	private static WebElement  voucherhomeCloseBtn;
	
	@FindBy(xpath="//*[@id='userprofile']/li/span[2]")
	private static WebElement logoutOption;
	
	@FindBy(xpath="//*[@id='txtUsername']")
	private static WebElement username;

	@FindBy(id="txtPassword")
	private static WebElement password;
	
    @FindBy(id="ddlCompany")
    private static WebElement companyDropDownList;

	@FindBy(id="btnSignin")
	private static WebElement signIn;
	

	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[2]//div[2]")
	private static WebElement PVNFooterAvgRateO;
	

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[1]//div[2]")
	private static WebElement infoPanelStatus;
	
	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[2]//div[2]")
	private static WebElement infoPanelCreatedBY;
	
	/*@FindBy(xpath="//div[@id='DBdashlate1']//div[2]//div[2]")
	private static WebElement infoPanelCreatedBY;*/
	
	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[4]//div[2]")
	private static WebElement infoPanelEditedBy;
	
	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[6]//div[2]")
	private static WebElement infoPanelNextToAuth;

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[7]//div[2]")
	private static WebElement infoPanelBillStatus;
	
	

	//Consume the links through CTRL + L in linked voucher
	@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
	private static WebElement workFlowExpandBtn;

	@FindBy(xpath="//select[@id='id_transactionentry_workflow_dropdown']")
	private static WebElement  workFlowDropdown;

	@FindBy(xpath="//select[@id='id_transactionentry_workflow_searchon']")
	private static WebElement  searchOnDropdownCL;

	@FindBy(xpath="//select[@id='id_transactionentry_workflow_searchtype']")
	private static WebElement  containingDropdownCL;
			
	@FindBy(xpath="//input[@id='id_transactionentry_workflow_search_input']")
	private static WebElement  workFlowSearchTxtCL;

	@FindBy(xpath="//div[@id='id_transaction_entry_workflow_control_area2']//td[4]")
	private static WebElement  workFlowCustomizeBtnCL;

	@FindBy(xpath="//span[@class='icon-ok icon-font7']")
	private static WebElement  workFlowOkBtnCL;

	@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
	private static WebElement  workFlowMinimizeBtnCL;

	@FindBy(xpath="//input[@id='id_transaction_entry_detail_workflow_control_heading_ctrl_1']")
	private static WebElement  workFlowHeaderChkBoxCL;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_6']//div[contains(text(),'Voucher No')]")
	private static WebElement  workFlowHeaderVoucherNoCL;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_7']//div[contains(text(),'Date')]")
	private static WebElement  workFlowHeaderDateCL;

	@FindBy(xpath="//div[contains(text(),'Name')]")
	private static WebElement  workFlowHeaderNameCL;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_9']//div[contains(text(),'Quantity')]")
	private static WebElement  workFlowHeaderQtyCL;

	@FindBy(xpath="//div[contains(text(),'Suspended')]")
	private static WebElement  workFlowHeaderSuspendCL;

	//1 Row CRTL + L

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-1']//input")
	private static WebElement workFlowRow1ChkBoxCL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-6']")
	private static WebElement  workFlowRow1Column1CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-7']")
	private static WebElement  workFlowRow1Column2CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-8']")
	private static WebElement  workFlowRow1Column3CL;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-9']")
	private static WebElement  workFlowRow1Column4CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-10']")
	private static WebElement  workFlowRow1Column5CL;


	//2 Row CRTL + L

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-1']//input")
	private static WebElement workFlowRow2ChkBoxCL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-6']")
	private static WebElement  workFlowRow2Column1CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-7']")
	private static WebElement  workFlowRow2Column2CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-8']")
	private static WebElement  workFlowRow2Column3CL;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-9']")
	private static WebElement  workFlowRow2Column4CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-10']")
	private static WebElement  workFlowRow2Column5CL;


	//3 Row CRTL + L

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-1']//input")
	private static WebElement workFlowRow3ChkBoxCL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-6']")
	private static WebElement  workFlowRow3Column1CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-7']")
	private static WebElement  workFlowRow3Column2CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-8']")
	private static WebElement  workFlowRow3Column3CL;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-9']")
	private static WebElement  workFlowRow3Column4CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-10']")
	private static WebElement  workFlowRow3Column5CL;


	//4 Row CRTL + L

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-1']//input")
	private static WebElement workFlowRow4ChkBoxCL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-6']")
	private static WebElement  workFlowRow4Column1CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-7']")
	private static WebElement  workFlowRow4Column2CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-8']")
	private static WebElement  workFlowRow4Column3CL;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-9']")
	private static WebElement  workFlowRow4Column4CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-10']")
	private static WebElement  workFlowRow4Column5CL;

	@FindBy(xpath="//div[@id='id_transactionentry_header']//span[@class='col-xs-6 icon-collepse icon-font6 no_padding_left_right theme_color-inverse']")
	private static WebElement  new_HeaderMinimizeBtn;

	@FindBy(xpath="//div[@class='col-xs-12']//span[@class='col-xs-6 icon-font6 no_padding_left_right theme_color-inverse icon-expand']")
	private static WebElement  new_HeaderExpandBtn;

	@FindBy(xpath="//div[@id='id_transaction_entry_container']//span[contains(text(),'Purchase Vouchers N')]")
	private static WebElement  purchaseVoucherNLink;


	// 5 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-1']//input")
	private static WebElement workFlowRow5ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-6']")
	private static WebElement  workFlowRow5Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-7']")
	private static WebElement  workFlowRow5Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-8']")
	private static WebElement  workFlowRow5Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-9']")
	private static WebElement  workFlowRow5Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-10']")
	private static WebElement  workFlowRow5Column5CL;	
		

	//6 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-1']//input")
	private static WebElement workFlowRow6ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-6']")
	private static WebElement  workFlowRow6Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-7']")
	private static WebElement  workFlowRow6Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-8']")
	private static WebElement  workFlowRow6Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-9']")
	private static WebElement  workFlowRow6Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-10']")
	private static WebElement  workFlowRow6Column5CL;	



	//7 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-1']//input")
	private static WebElement workFlowRow7ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-6']")
	private static WebElement  workFlowRow7Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-7']")
	private static WebElement  workFlowRow7Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-8']")
	private static WebElement  workFlowRow7Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-9']")
	private static WebElement  workFlowRow7Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-10']")
	private static WebElement  workFlowRow7Column5CL;	


	//8 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-1']//input")
	private static WebElement workFlowRow8ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-6']")
	private static WebElement  workFlowRow8Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-7']")
	private static WebElement  workFlowRow8Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-8']")
	private static WebElement  workFlowRow8Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-9']")
	private static WebElement  workFlowRow8Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-10']")
	private static WebElement  workFlowRow8Column5CL;	


	//9 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-1']//input")
	private static WebElement workFlowRow9ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-6']")
	private static WebElement  workFlowRow9Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-7']")
	private static WebElement  workFlowRow9Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-8']")
	private static WebElement  workFlowRow9Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-9']")
	private static WebElement  workFlowRow9Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-10']")
	private static WebElement  workFlowRow9Column5CL;	


	//10 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-1']//input")
	private static WebElement workFlowRow10ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-6']")
	private static WebElement  workFlowRow10Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-7']")
	private static WebElement  workFlowRow10Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-8']")
	private static WebElement  workFlowRow10Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-9']")
	private static WebElement  workFlowRow10Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-10']")
	private static WebElement  workFlowRow10Column5CL;	




	//11 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-1']//input")
	private static WebElement workFlowRow11ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-6']")
	private static WebElement  workFlowRow11Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-7']")
	private static WebElement  workFlowRow11Column2CL;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-8']")
	private static WebElement  workFlowRow11Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-9']")
	private static WebElement  workFlowRow11Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-10']")
	private static WebElement  workFlowRow11Column5CL;	



	//12 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-1']//input")
	private static WebElement workFlowRow12ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-6']")
	private static WebElement  workFlowRow12Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-7']")
	private static WebElement  workFlowRow12Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-8']")
	private static WebElement  workFlowRow12Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-9']")
	private static WebElement  workFlowRow12Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-10']")
	private static WebElement  workFlowRow12Column5CL;	



	//13 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-1']//input")
	private static WebElement workFlowRow13ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-6']")
	private static WebElement  workFlowRow13Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-7']")
	private static WebElement  workFlowRow13Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-8']")
	private static WebElement  workFlowRow13Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-9']")
	private static WebElement  workFlowRow13Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-10']")
	private static WebElement  workFlowRow13Column5CL;	



	//14 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-1']//input")
	private static WebElement workFlowRow14ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-6']")
	private static WebElement  workFlowRow14Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-7']")
	private static WebElement  workFlowRow14Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-8']")
	private static WebElement  workFlowRow14Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-9']")
	private static WebElement  workFlowRow14Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-10']")
	private static WebElement  workFlowRow14Column5CL;


	//15 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-1']//input")
	private static WebElement workFlowRow15ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-6']")
	private static WebElement  workFlowRow15Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-7']")
	private static WebElement  workFlowRow15Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-8']")
	private static WebElement  workFlowRow15Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-9']")
	private static WebElement  workFlowRow15Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-10']")
	private static WebElement  workFlowRow15Column5CL;	



	//16 Row CRTL + L
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-1']//input")
	private static WebElement workFlowRow16ChkBoxCL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-6']")
	private static WebElement  workFlowRow16Column1CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-7']")
	private static WebElement  workFlowRow16Column2CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-8']")
	private static WebElement  workFlowRow16Column3CL;
				
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-9']")
	private static WebElement  workFlowRow16Column4CL;
		
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-10']")
	private static WebElement  workFlowRow16Column5CL;	
	
	
	 //WorkFlow Elements

	
	@FindBy(xpath="//select[@id='id_transactionentry_workflow_popup_searchon']")
	private static WebElement  searchOnDropdown;
	
	@FindBy(xpath="//select[@id='id_transactionentry_workflow_popup_searchtype']")
	private static WebElement  containingDropdown;
		
	@FindBy(xpath="//input[@id='id_transactionentry_workflow_popup_search']")
	private static WebElement  workFlowSearchTxt;
	
	@FindBy(xpath="//i[@id='id_transactionentry_workflow_popup_close']")
	private static WebElement  workFlowCloseBtn;
	
	@FindBy(xpath="//ul[@class='nav navbar-nav navbar-right']//div[@class='toolbar_button_text font-7'][contains(text(),'Customize')]")
	private static WebElement  workFlowCustomizeBtn;
	
	@FindBy(xpath="//ul[@class='nav navbar-nav navbar-right']//div[@class='toolbar_button_text font-7'][contains(text(),'Ok')]")
	private static WebElement  workFlowOkBtn;
	
	@FindBy(xpath="//div[@class='toolbar_button_text font-7'][contains(text(),'Ok')]")
	private static WebElement  workFlowOkBtnInSalesVoucher;
	
	
	@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
	private static WebElement  workFlowMinimizeBtn;
	
	
	
	//WorkFlow Screen with Line wise
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-1']//input")
	private static WebElement  workFlowHeaderChkBox;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_6']//div[contains(text(),'Voucher No')]")
	private static WebElement  workFlowHeaderVoucherNo;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_7']//div[contains(text(),'Date')]")
	private static WebElement  workFlowHeaderDate;
	
	@FindBy(xpath="//div[contains(text(),'Name')]")
	private static WebElement  workFlowHeaderName;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_9']//div[contains(text(),'Quantity')]")
	private static WebElement  workFlowHeaderQty;
	
	@FindBy(xpath="//div[contains(text(),'Suspended')]")
	private static WebElement  workFlowHeaderSuspend;
	
	
	//WorkFlow with Line wise
	// 1 Row
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-1']//input")
	private static WebElement workFlowRadioBtnRowOne;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-6']")
	private static WebElement  workFlowRow1Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-7']")
	private static WebElement  workFlowRow1Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-8']")
	private static WebElement  workFlowRow1Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-9']")
	private static WebElement  workFlowRow1Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-10']")
	private static WebElement  workFlowRow1Column5;
	
	// 2 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-1']//input")
	private static WebElement workFlowRadioBtnRowTwo;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-6']")
	private static WebElement  workFlowRow2Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-7']")
	private static WebElement  workFlowRow2Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-8']")
	private static WebElement  workFlowRow2Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-9']")
	private static WebElement  workFlowRow2Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-10']")
	private static WebElement  workFlowRow2Column5;
	
	
	
	
	// 3 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-1']//input")
	private static WebElement workFlowRadioBtnRowThree;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-6']")
	private static WebElement  workFlowRow3Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-7']")
	private static WebElement  workFlowRow3Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-8']")
	private static WebElement  workFlowRow3Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-9']")
	private static WebElement  workFlowRow3Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-10']")
	private static WebElement  workFlowRow3Column5;
	
	
	// 4 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-1']//input")
	private static WebElement workFlowRadioBtnRowFour;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-6']")
	private static WebElement  workFlowRow4Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-7']")
	private static WebElement  workFlowRow4Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-8']")
	private static WebElement  workFlowRow4Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-9']")
	private static WebElement  workFlowRow4Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-10']")
	private static WebElement  workFlowRow4Column5;	
	
	
	
     // 5 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-1']//input")
	private static WebElement workFlowRadioBtnRowFive;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-6']")
	private static WebElement  workFlowRow5Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-7']")
	private static WebElement  workFlowRow5Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-8']")
	private static WebElement  workFlowRow5Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-9']")
	private static WebElement  workFlowRow5Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-10']")
	private static WebElement  workFlowRow5Column5;	
	
	
	
    // 6 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-1']//input")
	private static WebElement workFlowRadioBtnRowSix;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-6']")
	private static WebElement  workFlowRow6Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-7']")
	private static WebElement  workFlowRow6Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-8']")
	private static WebElement  workFlowRow6Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-9']")
	private static WebElement  workFlowRow6Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-10']")
	private static WebElement  workFlowRow6Column5;	
	

    // 7 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-1']//input")
	private static WebElement workFlowRadioBtnRowSeven;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-6']")
	private static WebElement  workFlowRow7Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-7']")
	private static WebElement  workFlowRow7Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-8']")
	private static WebElement  workFlowRow7Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-9']")
	private static WebElement  workFlowRow7Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-10']")
	private static WebElement  workFlowRow7Column5;	
	
	

    // 8 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-1']//input")
	private static WebElement workFlowRadioBtnRowEight;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-6']")
	private static WebElement  workFlowRow8Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-7']")
	private static WebElement  workFlowRow8Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-8']")
	private static WebElement  workFlowRow8Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-9']")
	private static WebElement  workFlowRow8Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-10']")
	private static WebElement  workFlowRow8Column5;	
	
	

    // 9 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-1']//input")
	private static WebElement workFlowRadioBtnRowNine;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-6']")
	private static WebElement  workFlowRow9Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-7']")
	private static WebElement  workFlowRow9Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-8']")
	private static WebElement  workFlowRow9Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-9']")
	private static WebElement  workFlowRow9Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-10']")
	private static WebElement  workFlowRow9Column5;	
	
	

    // 10 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-1']//input")
	private static WebElement workFlowRadioBtnRowTen;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-6']")
	private static WebElement  workFlowRow10Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-7']")
	private static WebElement  workFlowRow10Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-8']")
	private static WebElement  workFlowRow10Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-9']")
	private static WebElement  workFlowRow10Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-10']")
	private static WebElement  workFlowRow10Column5;	
	
	

    // 11 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-1']//input")
	private static WebElement workFlowRadioBtnRowElevan;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-6']")
	private static WebElement  workFlowRow11Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-7']")
	private static WebElement  workFlowRow11Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-8']")
	private static WebElement  workFlowRow11Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-9']")
	private static WebElement  workFlowRow11Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-10']")
	private static WebElement  workFlowRow11Column5;	
	
	

    // 12 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-1']//input")
	private static WebElement workFlowRadioBtnRowTwevle;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-6']")
	private static WebElement  workFlowRow12Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-7']")
	private static WebElement  workFlowRow12Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-8']")
	private static WebElement  workFlowRow12Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-9']")
	private static WebElement  workFlowRow12Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-10']")
	private static WebElement  workFlowRow12Column5;	
	

    // 13 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-1']//input")
	private static WebElement workFlowRadioBtnRowThirteen;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-6']")
	private static WebElement  workFlowRow13Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-7']")
	private static WebElement  workFlowRow13Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-8']")
	private static WebElement  workFlowRow13Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-9']")
	private static WebElement  workFlowRow13Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-10']")
	private static WebElement  workFlowRow13Column5;	
	
	

    // 14 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-1']//input")
	private static WebElement workFlowRadioBtnRowFourteen;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-6']")
	private static WebElement  workFlowRow14Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-7']")
	private static WebElement  workFlowRow14Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-8']")
	private static WebElement  workFlowRow14Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-9']")
	private static WebElement  workFlowRow14Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-10']")
	private static WebElement  workFlowRow14Column5;	
	
	

    // 15 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-1']//input")
	private static WebElement workFlowRadioBtnRowFifteen;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-6']")
	private static WebElement  workFlowRow15Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-7']")
	private static WebElement  workFlowRow15Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-8']")
	private static WebElement  workFlowRow15Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-9']")
	private static WebElement  workFlowRow15Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-10']")
	private static WebElement  workFlowRow15Column5;	
	
	

	

    // 16 Row
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-1']//input")
	private static WebElement workFlowRadioBtnRowSixteen;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-6']")
	private static WebElement  workFlowRow16Column1;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-7']")
	private static WebElement  workFlowRow16Column2;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-8']")
	private static WebElement  workFlowRow16Column3;
			
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-9']")
	private static WebElement  workFlowRow16Column4;
	
	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-10']")
	private static WebElement  workFlowRow16Column5;	


	
	

	//Sales Orders and Sales Invoices Voucher
		
	//Sales Invoice New 

	@FindBy(xpath="//a[@id='2014']//span[contains(text(),'Sales')]")
	private static WebElement  financialTransactionSalesMenu;
		
	@FindBy(xpath="//span[contains(text(),'Sales Invoices')]")
	private static WebElement  salesInvoicesVoucher;

	@FindBy(xpath="//span[contains(text(),'Sales Invoice N')]")
	private static WebElement  salesVoucherNew;
	
	@FindBy(xpath="//section[@id='page_Content']//a[@class='transaction_viewname_anchor font-5'][contains(text(),'Pending Sales Orders')]")
	private static WebElement  homepagePendingSalesOrders;
	
	
	

	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_26']")
	private static WebElement  QtyAmount;
		
	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_28']")
	private static WebElement  GrossAmount;
	
	@FindBy(xpath="//span[@class='col-xs-6 icon-expand icon-font6 no_padding_left_right theme_color-inverse']")
	private static WebElement  new_footerExpandBtn;
	

	//WEB ELEMENTS
	@FindBy(xpath="//a[@id='61']//span[contains(text(),'Transactions')]")
	private static WebElement  financialsTransactionMenu;

        @FindBy(xpath="//*[@id='2007']/span")
		private static WebElement  financialsTransactionsPurchaseMenu; 
		
			@FindBy(xpath="//*[@id='2008']/span")
			private static WebElement  purchaseVoucher;
			
			@FindBy(xpath="//a[@id='2050']//span[contains(text(),'Purchase Vouchers N')]")
			private static WebElement  purchaseVoucherNew;
			
			@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
			private static WebElement  homePageAllVouchersView;
			
			@FindBy(xpath="//*[@id='2009']/span")
			private static WebElement  purchaseReturnsVoucher;
			
			@FindBy(xpath="//a[contains(text(),'*Pending Authorization Purchase')]")
			private static WebElement  homePagePendingAuthorizationView;
			
			@FindBy(xpath="//a[contains(text(),'Pending Purchases Orders')]")
			private static WebElement  homePagePendingOrdersLinks;
			
	
	@FindBy(xpath="//input[@id='id_header_20']")
	private static WebElement  voucherUpdateStocksCheckBox;
	
	@FindBy(xpath="//input[@id='id_header_21']")
	private static WebElement  voucherRaiseReceiptCheckBox;
	
	@FindBy(xpath="//input[@id='id_header_6']")
	private static WebElement  voucherHeaderDueDate;
	
	@FindBy(xpath="//input[@id='id_header_10']")
	private static WebElement  voucherHeaderCurrency;
	
	@FindBy(xpath="//input[@id='id_header_11']")
	private static WebElement  voucherHeaderExchangeRate;
	
	@FindBy(xpath="//input[@id='id_header_145']")
	private static WebElement  voucherHeaderLocalExchangeRate;
	
	@FindBy(xpath="//input[@id='id_header_67108928']")
	private static WebElement  purchaseVoucherNewNarration;
	
	@FindBy(xpath="//input[@id='id_header_67108935']")
	private static WebElement  purchaseVoucherNewTest;
	
	@FindBy(xpath="//ul[@id='searchedLiTrans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
	private static WebElement  searchDocumentInfo;
	
	@FindBy(xpath="//div[@id='dashlate0']")
	private static WebElement  addCreateDashlet;
	
	@FindBy(xpath="//div[@id='DBdashlate0']")
	private static WebElement  dashletI;
	
	@FindBy(xpath="//input[@id='id_footer_134217745']")
	private static WebElement  footerRDField;
	
	@FindBy(xpath="//span[@id='btnOk']")
	private static WebElement Bill_OkBtn;
	
	@FindBy(xpath="//label[@id='txtblkAmountadjusted']")
	private static WebElement  billRefAdjustAmountInTransCurency;
	
	
	@FindBy(xpath="//label[@id='txtblkAmounttobeadjust']")
	private static WebElement  billRefBalanceAmountAdjustInTrnasCurrency;
	
	@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
	private static WebElement  billRefInfoBarLocalCurrencyRate;
	
	

	// Copy document Screen Elements
	
	@FindBy(xpath="//input[@id='optCopyDocType']")
	private static WebElement cd_vouchertypeTxt;
	
	@FindBy(xpath="//select[@id='id_searchoncolumns']")
	private static WebElement cd_searchOnDropdown1;
	
	@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//div[5]//select[1]")
	private static WebElement cd_searchOnDropdown2;
	
	@FindBy(xpath="//input[@id='srch_doc']")
	private static WebElement cd_searchTxt;
	
	@FindBy(xpath="//input[@id='id_transaction_entry_copydocument_refresh']")
	private static WebElement cd_refreshBtn;
	
	@FindBy(xpath="//input[@id='id_transaction_entry_copydocument_filter_togglebutton']")
	private static WebElement cd_filterBtn;
	
	@FindBy(xpath="//input[@id='copydoc_HeaderChkBox']")
	private static WebElement cd_HeaderChkBox;
	
	@FindBy(xpath="//tr[@id='tr_copydoc_voucher_1']//td//input")
	private static WebElement cd_FirstChkBox;
	
	@FindBy(xpath="//input[@id='id_chkclubsimilartxn']")
	private static WebElement cd_clubsimilarTransChkBox;
	
	@FindBy(xpath="//div[@class='col-xs-2 no_padding_left_right']//input[@class='Fbutton']")
	private static WebElement cd_SelectallBtn;
	
	@FindBy(xpath="//button[@id='btn_firstPage']")
	private static WebElement cd_firstBtn;
	
	@FindBy(xpath="//button[@id='btn_previousPage']")
	private static WebElement cd_PreviousBtn;
	
	@FindBy(xpath="//button[@id='input_pagenumber']")
	private static WebElement cd_PageNo;
	
	@FindBy(xpath="//button[@id='btn_nextPage']")
	private static WebElement cd_nextBtn; 
	
	@FindBy(xpath="//button[@id='btn_lastPage']")
	private static WebElement cd_LastBtn;
	
	@FindBy(xpath="//input[@id='id_transaction_copydoc_ok']")
	private static WebElement cd_OkBtn;
	
	@FindBy(xpath="//input[@id='id_transaction_copydoc_cancel']")
	private static WebElement cd_CancelBtn;
	
	
	// Gird 
	// row 1
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[1]")
	private static WebElement cd_IndexRow1;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[2]")
	private static WebElement cd_R1C2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[3]")
	private static WebElement cd_R1C3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[4]")
	private static WebElement cd_R1C4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[5]")
	private static WebElement cd_R1C5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[6]")
	private static WebElement cd_R1C6;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[7]")
	private static WebElement cd_R1C7;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[8]")
	private static WebElement cd_R1C8;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[9]")
	private static WebElement cd_R1C9;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[10]")
	private static WebElement cd_R1C10;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[11]")
	private static WebElement cd_R1C11;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[12]")
	private static WebElement cd_R1C12;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[13]")
	private static WebElement cd_R1C13;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[14]")
	private static WebElement cd_R1C14;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[15]")
	private static WebElement cd_R1C15;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[16]")
	private static WebElement cd_R1C16;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[17]")
	private static WebElement cd_R1C17;
	
	
	// row 2
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[1]")
	private static WebElement cd_IndexRow2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[2]")
	private static WebElement cd_R2C2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[3]")
	private static WebElement cd_R2C3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[4]")
	private static WebElement cd_R2C4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[5]")
	private static WebElement cd_R2C5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[6]")
	private static WebElement cd_R2C6;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[7]")
	private static WebElement cd_R2C7;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[8]")
	private static WebElement cd_R2C8;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[9]")
	private static WebElement cd_R2C9;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[10]")
	private static WebElement cd_R2C10;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[11]")
	private static WebElement cd_R2C11;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[12]")
	private static WebElement cd_R2C12;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[13]")
	private static WebElement cd_R2C13;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[14]")
	private static WebElement cd_R2C14;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[15]")
	private static WebElement cd_R2C15;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[16]")
	private static WebElement cd_R2C16;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[17]")
	private static WebElement cd_R2C17;

	// row 3
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[1]")
	private static WebElement cd_IndexRow3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[2]")
	private static WebElement cd_R3C2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[3]")
	private static WebElement cd_R3C3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[4]")
	private static WebElement cd_R3C4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[5]")
	private static WebElement cd_R3C5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[6]")
	private static WebElement cd_R3C6;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[7]")
	private static WebElement cd_R3C7;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[8]")
	private static WebElement cd_R3C8;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[9]")
	private static WebElement cd_R3C9;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[10]")
	private static WebElement cd_R3C10;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[11]")
	private static WebElement cd_R3C11;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[12]")
	private static WebElement cd_R3C12;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[13]")
	private static WebElement cd_R3C13;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[14]")
	private static WebElement cd_R3C14;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[15]")
	private static WebElement cd_R3C15;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[16]")
	private static WebElement cd_R3C16;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[17]")
	private static WebElement cd_R3C17;
	
	
	// row 4
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[1]")
	private static WebElement cd_IndexRow4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[2]")
	private static WebElement cd_R4C2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[3]")
	private static WebElement cd_R4C3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[4]")
	private static WebElement cd_R4C4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[5]")
	private static WebElement cd_R4C5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[6]")
	private static WebElement cd_R4C6;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[7]")
	private static WebElement cd_R4C7;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[8]")
	private static WebElement cd_R4C8;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[9]")
	private static WebElement cd_R4C9;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[10]")
	private static WebElement cd_R4C10;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[11]")
	private static WebElement cd_R4C11;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[12]")
	private static WebElement cd_R4C12;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[13]")
	private static WebElement cd_R4C13;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[14]")
	private static WebElement cd_R4C14;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[15]")
	private static WebElement cd_R4C15;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[16]")
	private static WebElement cd_R4C16;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[17]")
	private static WebElement cd_R4C17;
	
	
	// row 5
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[1]")
	private static WebElement cd_IndexRow5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[2]")
	private static WebElement cd_R5C2;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[3]")
	private static WebElement cd_R5C3;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[4]")
	private static WebElement cd_R5C4;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[5]")
	private static WebElement cd_R5C5;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[6]")
	private static WebElement cd_R5C6;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[7]")
	private static WebElement cd_R5C7;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[8]")
	private static WebElement cd_R5C8;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[9]")
	private static WebElement cd_R5C9;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[10]")
	private static WebElement cd_R5C10;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[11]")
	private static WebElement cd_R5C11;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[12]")
	private static WebElement cd_R5C12;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[13]")
	private static WebElement cd_R5C13;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[14]")
	private static WebElement cd_R5C14;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[15]")
	private static WebElement cd_R5C15;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[16]")
	private static WebElement cd_R5C16;
	
	@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[17]")
	private static WebElement cd_R5C17;
	
	
	@FindBy(xpath="//div[contains(text(),'AQ')]")
	private static WebElement voucherBodyAQName;
	
	@FindBy(xpath="//div[contains(text(),'FQ')]")
	private static WebElement voucherBodyFQName;
	
	@FindBy(xpath="//div[contains(text(),'Avg Rate(O)')]")
	private static WebElement voucherBodyAvgRate_o_Name;
	
	@FindBy(xpath="//div[contains(text(),'L-Sales Orders')]")
	private static WebElement voucherBodyLinkSalesOrder;
	
	@FindBy(xpath="//div[contains(text(),'Quantity to release')]")
	private static WebElement voucherBodyQtyToReleaseName;
	
	@FindBy(xpath="//div[contains(text(),'Remarks')]")
	private static WebElement voucherBodyRemarksName;
	

	@FindBy(xpath="//div[contains(text(),'Warehouse')]")
	private static WebElement voucherBodyWareHouseName;
	
	@FindBy(xpath="//div[contains(text(),'Item')]")
	private static WebElement voucherBodyItemName;
	
	@FindBy(xpath="//div[contains(text(),'Units')]")
	private static WebElement voucherBodyUnitsName;
	
	@FindBy(xpath="//div[contains(text(),'RD')]")
	private static WebElement  voucherBodyRDName;
	
	@FindBy(xpath="//div[contains(text(),'Avg Rate(O)')]")
	private static WebElement  voucherBodyAvgRateName;
	

	               
	@FindBy(xpath="//div[contains(text(),'Quantity')]")
	private static WebElement  voucherBodyQtyName;

	@FindBy(xpath="//div[contains(text(),'L-Purchases Orders')]")
	private static WebElement  voucherBodyLPOName;
	
	@FindBy(xpath="//div[contains(text(),'Rate')]")
	private static WebElement  povoucherBodyRateName;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_7']/div[1]")
	private static WebElement  voucherBodyRateName;
	
	@FindBy(xpath="//div[contains(text(),'Gross')]")
	private static WebElement voucherBodyGrossName;
	
	@FindBy(xpath="//div[contains(text(),'Batch')]")
	private static WebElement voucherBodyBatchName;
	
	@FindBy(xpath="//div[contains(text(),'Bins')]")
	private static WebElement voucherBodyBinsName;
	
	@FindBy(xpath="//div[contains(text(),'Expiry Date')]")
	private static WebElement voucherBodyExpirytDateName;
	
	@FindBy(xpath="//div[contains(text(),'RMA')]")
	private static WebElement voucherBodyRMAName;
	
	@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_table_body']")
	private static WebElement voucherBody;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_head']")
	private static WebElement bodyTable;
	

	@FindBy(xpath="//*[@id='id_transaction_entry_heading2']")
	private static WebElement  purchaseVoucherWorlFlowText;


	 @FindBy(xpath="//input[@id='id_body_536870916']")
     private static WebElement enter_WareHouseTxt;
	
	 @FindBy(xpath="//input[@id='id_body_33554445']")
     private static WebElement enter_AQTxt;
	 
	 @FindBy(xpath="//input[@id='id_body_33554446']")
     private static WebElement enter_FQTxt;
	 
	 @FindBy(xpath="//input[@id='id_body_33554444']")
     private static WebElement enter_RDTxt;
	
	 @FindBy(xpath="//input[@id='id_body_33554471']")
     private static WebElement enter_AvgRate;
	 
	 @FindBy(xpath="//input[@id='id_body_33554472']")
     private static WebElement enter_AvgRateo;
	 
	/* @FindBy(xpath="//input[@id='id_body_33554466']")
     private static WebElement enter_AvgRate;
	 
	 @FindBy(xpath="//input[@id='id_body_33554467']")
     private static WebElement enter_AvgRateo;*/
	 
	 @FindBy(xpath="//input[@id='id_body_89']")
     private static WebElement enter_QuantityToRelease;
	 
	 @FindBy(xpath="//input[@id='id_body_35_8']")
     private static WebElement lSalesOrderValue;

	 @FindBy(xpath="//i[contains(@class,'icon-cancel icon-font7')]")
     private static WebElement batchCancelIcon;
	 
	 @FindBy(xpath="//span[contains(@class,'icon-save icon-font6')]")
     private static WebElement salesVoucherCloseBtn;
	
		

	@FindBy(xpath="//label[@id='lblitem']")
	private static WebElement batchItemName;
	
	@FindBy(xpath="//label[@id='lblTotalQty']")
	private static WebElement batchTotalQty;
	
	@FindBy(xpath="//label[@id='lblAdjustQty']")
	private static WebElement batchAdjustQty;
	
	@FindBy(xpath="//label[@id='lblBalnceQty']")
	private static WebElement batchBalance;
	
	@FindBy(xpath="//div[contains(@class,'col-xs-12 col-sm-12 col-md-12 col-lg-12 P_ingBottom')]//div[2]//input[1]")
	private static WebElement batchExipiringInRadioBtn;
	             
	@FindBy(xpath="//section[@id='page_Content']//div[@class='row']//div//div[3]//input[1]")
	private static WebElement batchExipiringAfetrRadioBtn;
	
	@FindBy(xpath="//input[@id='txtWithin']")
	private static WebElement batchWithInTxt;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-1']")
	private static WebElement batch_BatchNoRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-2']")
	private static WebElement batch_BaseQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-5']")
	private static WebElement batch_ExpiryInDateRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-6']")
	private static WebElement batch_RateRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-7']")
	private static WebElement batch_QtyAdjustedRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-13']")
	private static WebElement batch_PurchaseDateRow1;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-1']")
	private static WebElement batch_BatchNoRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-2']")
	private static WebElement batch_BaseQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-5']")
	private static WebElement batch_ExpiryInDateRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-6']")
	private static WebElement batch_RateRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-7']")
	private static WebElement batch_QtyAdjustedRow2;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-13']")
	private static WebElement batch_PurchaseDateRow2;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-1']")
	private static WebElement batch_BatchNoRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-2']")
	private static WebElement batch_BaseQtyRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-5']")
	private static WebElement batch_ExpiryInDateRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-6']")
	private static WebElement batch_RateRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-7']")
	private static WebElement batch_QtyAdjustedRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-13']")
	private static WebElement batch_PurchaseDateRow3;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-1']")
	private static WebElement batch_BatchNoRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-2']")
	private static WebElement batch_BaseQtyRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-5']")
	private static WebElement batch_ExpiryInDateRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-6']")
	private static WebElement batch_RateRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-7']")
	private static WebElement batch_QtyAdjustedRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-13']")
	private static WebElement batch_PurchaseDateRow4;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-1']")
	private static WebElement batch_BatchNoRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-2']")
	private static WebElement batch_BaseQtyRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-5']")
	private static WebElement batch_ExpiryInDateRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-6']")
	private static WebElement batch_RateRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-7']")
	private static WebElement batch_QtyAdjustedRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_5-13']")
	private static WebElement batch_PurchaseDateRow5;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-1']")
	private static WebElement batch_BatchNoRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-2']")
	private static WebElement batch_BaseQtyRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-5']")
	private static WebElement batch_ExpiryInDateRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-6']")
	private static WebElement batch_RateRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-7']")
	private static WebElement batch_QtyAdjustedRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_6-13']")
	private static WebElement batch_PurchaseDateRow6;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-1']")
	private static WebElement batch_BatchNoRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-2']")
	private static WebElement batch_BaseQtyRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-5']")
	private static WebElement batch_ExpiryInDateRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-6']")
	private static WebElement batch_RateRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-7']")
	private static WebElement batch_QtyAdjustedRow7;
	
	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_7-13']")
	private static WebElement batch_PurchaseDateRow7;
	
	@FindBy(xpath="//i[@class='icon-refresh icon-font7']")
	private static WebElement batchRefreshBtn;
	
	@FindBy(xpath="//input[@id='Batch_Search']")
	private static WebElement batchSearchTxt;
	
	@FindBy(xpath="//input[@class='Fcheckbox']")
	private static WebElement batchShowAllAvalibleBatches;
	
	@FindBy(xpath="//label[contains(text(),'Customization')]")
	private static WebElement batchCustomizationIcon;
	
	@FindBy(xpath="//label[contains(text(),'Pick On FIFO')]")
	private static WebElement batchPickOnFIFOIcon;
	
	@FindBy(xpath="//label[@id='div_Ok']")
	private static WebElement batchOkIcon;

	@FindBy(xpath="//div[@class='col-xs-12 col-sm-12 col-md-12 col-lg-12']//div[6]//label[1]")
	private static WebElement batchTotalAdjustedQtyFooter;
	
	@FindBy(xpath="//div[@class='col-xs-6 col-sm-6 col-md-1 col-lg-1 text-right']")
	private static WebElement batchTotalQtyFooter;
	
/*	@FindBy(xpath="//label[@id='lblSum']")
	private static WebElement batchTotalAdjustedQtyFooter;
	
	@FindBy(xpath="//div[@class='col-xs-12 col-sm-12 col-md-12 col-lg-12']//div[6]")
	private static WebElement batchTotalQtyFooter;*/
	
	@FindBy(xpath="//input[@id='MRPBatch_AdjBatchQty']")
	private static WebElement batch_EnterQtyAdjsuted;


			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[14]")
			private static WebElement  select2ndRow_13thColumn;	
		 

		 @FindBy(xpath="//*[@id='Id_MRPBatch_Grid']")
		 private static WebElement  batchPopUPEmptyRows;
		 
 // Bin OutWard Elements
	 	

	@FindBy(xpath="//th[@id='id_transaction_bins_grid_control_heading_1']//div[contains(text(),'Bin')]")
	private static WebElement  binHeader_Bin;
	
	@FindBy(xpath="//th[@id='id_transaction_bins_grid_control_heading_3']//div[contains(text(),'Stock')]")
	private static WebElement  binHeader_Stock;
	
	@FindBy(xpath="//div[contains(text(),'Stock(Pcs)')]")
	private static WebElement  binHeader_StockPcs;
	
	@FindBy(xpath="//div[contains(text(),'Capacity')]")
	private static WebElement  binHeader_Capacity;
	
	@FindBy(xpath="//div[contains(text(),'Load')]")
	private static WebElement  binHeader_Load;
	
	@FindBy(xpath="//div[contains(text(),'Free space')]")
	private static WebElement  binHeader_FreeSpace;
	
	@FindBy(xpath="//div[contains(text(),'Free Quantity')]")
	private static WebElement  binHeader_FreeQty;
	
	@FindBy(xpath="//div[contains(text(),'To be Picked')]")
	private static WebElement  binHeader_ToBePicked;
				
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
	private static WebElement  binoutwardRow1Index;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
	private static WebElement  binoutwardRow1Bin;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
	private static WebElement  binoutwardRow1Stock;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-4']")
	private static WebElement  binoutwardRow1StockPcs;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
	private static WebElement  binoutwardRow1Capacity;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
	private static WebElement  binoutwardRow1Load;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
	private static WebElement  binoutwardRow1FreeSpace;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
	private static WebElement  binoutwardRow1FreeQty;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
	private static WebElement  binoutwardRow1ToBePicked;
	
	@FindBy(xpath="//input[@id='id_transaction_bins_grid_control_heading_ctrl_12']")
	private static WebElement  binoutwardToInputInToBePicked;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
	private static WebElement  binoutwardRow2Index;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
	private static WebElement  binoutwardRow2Bin;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
	private static WebElement  binoutwardRow2Stock;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-4']")
	private static WebElement  binoutwardRow2StockPcs;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
	private static WebElement  binoutwardRow2Capacity;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
	private static WebElement  binoutwardRow2Load;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
	private static WebElement  binoutwardRow2FreeSpace;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
	private static WebElement  binoutwardRow2FreeQty;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
	private static WebElement  binoutwardRow2ToBePicked;
	
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
	private static WebElement  binoutwardRow3Index;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
	private static WebElement  binoutwardRow3Bin;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
	private static WebElement  binoutwardRow3Stock;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-4']")
	private static WebElement  binoutwardRow3StockPcs;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
	private static WebElement  binoutwardRow3Capacity;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
	private static WebElement  binoutwardRow3Load;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
	private static WebElement  binoutwardRow3FreeSpace;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
	private static WebElement  binoutwardRow3FreeQty;
	
	@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
	private static WebElement  binoutwardRow3ToBePicked;
	
	
	
	@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
	private static WebElement  binoutwardRowTotalToBePicked;


	@FindBy(xpath="//*[@id='id_bins_ok']")
	private static WebElement  binOkButtonStatus;

	
		
	// RMA Outward POpup Window
		
		
	@FindBy (xpath="//input[@id='txtSerialNo']")
	private static WebElement rmaoutwardSerialNumberTxtField;

	@FindBy (xpath="//input[@id='txtQuantity']")
	private static WebElement rmaoutwardQuantityTxtField;
	
	@FindBy (xpath="//i[@class='icon icon-add icon-font6']")
	private static WebElement rmaoutwardAddBtn;
		
	@FindBy (xpath="//div[contains(@class,'col-xs-12 col-sm-5 padding-left-Right')]")
	private static WebElement rmaoutwardNumberofItemsLabel;
	
	@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']")
	private static WebElement rmaoutwardTableHeadingRMA;
	
	@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']")
	private static WebElement rmaoutwardTableHeadingDocumentNo;
	
	@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']")
	private static WebElement rmaoutwardTableHeadingDocumentDate;
	
	@FindBy (xpath="//label[contains(text(),'Ok')]")
	private static WebElement rmaoutwardOkBtn;
	
	@FindBy (xpath="//label[contains(text(),'Cancel')]")
	private static WebElement rmaoutwardCancelBtn;
	
	@FindBy (xpath="//i[@id='btnSearch']")
	private static WebElement rmaoutwardExpandBtn;
	
	// Search Rma popUp
			
	@FindBy (xpath="//input[@id='Search_txtSearchBox']")
	private static WebElement searchRMASearchTxtField;
	
	@FindBy (xpath="//i[@id='btn_RMASsearch_Search']")
	private static WebElement searchRMASearchBtn;
	
	@FindBy (xpath="//input[@id='Search_txtQuantity']")
	private static WebElement searchRMAQuantityTxtField;
	
	@FindBy (xpath="//label[@id='Search_lblItems']")
	private static WebElement searchRMANoOfItemsTxt;
	
	// Header Of Grid
	
	@FindBy (xpath="//input[@id='chkSelectALL']")
	private static WebElement searchRMAHeaderChkBox;
	
	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[2]")
	private static WebElement searchRMATableHeadingSerialNo;
	
	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[3]")
	private static WebElement searchRMATableHeadingDocNo;
	
	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[4]")
	private static WebElement searchRMATableHeadingDate;
	
	
	// Grid Body
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[1]/td[1]/input")
	private static WebElement searchRMA1ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[2]/td[1]/input")
	private static WebElement searchRMA2ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[3]/td[1]/input")
	private static WebElement searchRMA3ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[4]/td[1]/input")
	private static WebElement searchRMA4ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[5]/td[1]/input")
	private static WebElement searchRMA5ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[6]/td[1]/input")
	private static WebElement searchRMA6ChkBox;
	
	@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[1]//td[2]")
	private static WebElement searchRMARow1SerialNo;
	
	@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[2]//td[2]")
	private static WebElement searchRMARow2SerialNo;
	
	@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[3]//td[2]")
	private static WebElement searchRMARow3SerialNo;
	
	@FindBy (xpath="//div[@id='id_transaction_entry_container_others']//tbody//tr[14]//td[2]")
	private static WebElement searchRMARow4SerialNo;
	
	@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[1]/label")
	private static WebElement searchRMAOkBtn;
	
	@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[2]/label")
	private static WebElement searchRMACancelBtn;
	
	@FindBy (xpath="//*[@id='SearchModal_Content']/div[1]/div[2]/span/i")
	private static WebElement searchRMACloseBtn;
	
	
	@FindBy(xpath="//*[@id='RMASearchTable']/tbody/tr[1]")
	private static WebElement rmaSearchTableBodyIfBlankRows;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
	private static WebElement salesInvoicesuspendStatusRow1;

	
	//Sales Order Voucher Starts
	//Reservations
	
	@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
	private static WebElement  homepagePendingSalesQuotations;
	
	@FindBy(xpath="//div[contains(text(),'Reserve')]")
	private static WebElement voucherBodyReserveColumnName;
	
	@FindBy(xpath="//div[contains(text(),'L-Sales Quotations')]")
	private static WebElement voucherBodyLinkSalesQuotationsColumnName;
	
	@FindBy(xpath="//div[contains(text(),'Warehouse')]")
	private static WebElement  salesOrderWarehouseLabel;
	
	@FindBy(xpath="//div[contains(text(),'Quantity')]")
	private static WebElement  salesOrderQtyLabel;
	
	@FindBy(xpath="//label[contains(text(),'Quantity')]")
	private static WebElement  voucherFooterQtyLabel;
	
	@FindBy(xpath="//label[contains(text(),'RD :')]")
	private static WebElement  voucherFooterRDLabel;
	
	@FindBy(xpath="//label[contains(text(),'AQ :')]")
	private static WebElement  voucherFooterAQLabel;
	
	@FindBy(xpath="//label[contains(text(),'FQ :')]")
	private static WebElement  voucherFooterFQLabel;
	
	@FindBy(xpath="//label[contains(text(),'Gross :')]")
	private static WebElement  voucherFooterGrossLabel;
	
	@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net_group']/label[1]")
	private static WebElement  voucherFooterNetLabel;
	
	@FindBy(xpath="//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
	private static WebElement  voucherMinimizeInfoSideBar;
	

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_row_heading']/th[1]")
	private static WebElement voucherBodyHeaderIndex;

	
	@FindBy(xpath="//input[@id='id_body_33554442']")
	private static WebElement so_enter_AQTxt;
	
	@FindBy(xpath="//input[@id='id_body_33554443']")
	private static WebElement so_enter_FQTxt;


   //Stock Reservation Pop Up Window Elements

	@FindBy(xpath="//label[@class='modal-title theme_background-color theme_color font-4']")
	private static WebElement stockReservationLabel;
	
	@FindBy(xpath="//button[@class='close icon-close icon-font6 theme_icon-color']")
	private static WebElement stockReservationHeaderCloseBtn; 
	
	// Left Panel Header
	
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_1']")
	private static WebElement res_LeftPanelWareHouse; 
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_2']")
	private static WebElement res_LeftPanelItemCode; 
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_3']")
	private static WebElement res_LeftPanelItemName; 
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_4']")
	private static WebElement res_LeftPanelItemQty; 
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_5']")
	private static WebElement res_LeftPanelDueDate; 
	
	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_6']")
	private static WebElement res_LeftPanelBaseUnit; 
	
	// Left Panel Grid
	
	//Row1
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-1']")
	private static WebElement res_LeftPanelWareHouseRow1; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-2']")
	private static WebElement res_LeftPanelItemCodeRow1; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-3']")
	private static WebElement res_LeftPanelItemNameRow1; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-4']")
	private static WebElement res_LeftPanelItemQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-5']")
	private static WebElement res_LeftPanelDueDateRow1; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-6']")
	private static WebElement res_LeftPanelBaseUnitRow1; 
	
	//Row2
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-1']")
	private static WebElement res_LeftPanelWareHouseRow2; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-2']")
	private static WebElement res_LeftPanelItemCodeRow2; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-3']")
	private static WebElement res_LeftPanelItemNameRow2; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-4']")
	private static WebElement res_LeftPanelItemQtyRow2; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-5']")
	private static WebElement res_LeftPanelDueDateRow2; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_2-6']")
	private static WebElement res_LeftPanelBaseUnitRow2; 
	
	//Row2
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-1']")
	private static WebElement res_LeftPanelWareHouseRow3; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-2']")
	private static WebElement res_LeftPanelItemCodeRow3; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-3']")
	private static WebElement res_LeftPanelItemNameRow3; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-4']")
	private static WebElement res_LeftPanelItemQtyRow3; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-5']")
	private static WebElement res_LeftPanelDueDateRow3; 
	
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_3-6']")
	private static WebElement res_LeftPanelBaseUnitRow3; 
		
		
	// Body Header for Bin Reservation Screen for Zero Qty
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
	private static WebElement binResNull_BodyWareHouse; 
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_3']//div[contains(text(),'Voucher No')]")
	private static WebElement binResNull_BodyVoucherNo; 
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_4']//div[contains(text(),'Qty to Reserve')]")
	private static WebElement binResNull_BodyQtyToReserve;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_5']//div[contains(text(),'Available Qty')]")
	private static WebElement binResNull_BodyAvailableQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_6']//div[contains(text(),'Cur Ord Res Qty')]")
	private static WebElement binResNull_BodyCurOrderResQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_7']//div[contains(text(),'Quantity')]")
	private static WebElement binResNull_BodyQty;
	
	@FindBy(xpath="//div[contains(text(),'Pending Order Qty')]")
	private static WebElement binResNull_BodyPendingOrderQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_9']//div[contains(text(),'Released Qty')]")
	private static WebElement binResNull_BodyReleasedQty;
	
	// Body Grid
	// Row1 for Bin Reservation
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-2']")
	private static WebElement binResNull_WarehouseRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-3']")
	private static WebElement binResNull_VoucherNoRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-4']")
	private static WebElement binResNull_QtyToReserveRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-5']")
	private static WebElement binResNull_AvailableQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-6']")
	private static WebElement binResNull_CurOrdResQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-7']")
	private static WebElement binResNull_QtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-8']")
	private static WebElement binResNull_PendingOrderQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-9']")
	private static WebElement binResNull_ReleasedQtyRow1; 
	
	
	
	
	// Footer
	
	@FindBy(xpath="//li[@id='btnPickQuantity']")
	private static WebElement res_PickBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//li[2]")
	private static WebElement res_DiscardBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//li[3]")
	private static WebElement res_OkBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//li[4]")
	private static WebElement res_CloseBtn;
	
	
	
	
	
	

	// Body Header for Bin Reservation Screen

	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
	private static WebElement binRes_BodyWareHouse; 
	
	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_3']//div[contains(text(),'Qty to Reserve')]")
	private static WebElement binRes_BodyQtyToReserve;

	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_4']//div[contains(text(),'Bin')]")
	private static WebElement binRes_BodyBin; 
	
	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_5']//div[contains(text(),'Available Qty')]")
	private static WebElement binRes_BodyAvailableQty;
	
	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_6']//div[contains(text(),'Released Qty')]")
	private static WebElement binRes_BodyReleasedQty;
	
	@FindBy(xpath="//div[contains(text(),'Total Reserved Qty')]")
	private static WebElement binRes_BodyTotalReservedQty;
	
	@FindBy(xpath="//div[contains(text(),'Bin Qty')]")
	private static WebElement binRes_BodyBinQty;
	
	@FindBy(xpath="//th[@id='Id_BinReservation_FGrid_control_heading_9']//div[contains(text(),'Skid Id')]")
	private static WebElement binRes_BodySkidId;
	
	@FindBy(xpath="//div[contains(text(),'Alloc Status')]")
	private static WebElement binRes_BodyAllocStatus;
	
	@FindBy(xpath="//div[contains(text(),'Inv Status')]")
	private static WebElement binRes_BodyInvStatus;
	
	@FindBy(xpath="//div[contains(text(),'LotNo')]")
	private static WebElement binRes_BodyLotNo;
	
	// Body Grid
	// Row1 for Bin Reservation
	
	@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_col_1-2']")
	private static WebElement binRes_WarehouseRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-3']")
	private static WebElement binRes_QtyToReserveRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-4']")
	private static WebElement binRes_BinNoRow1;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-5']")
	private static WebElement binRes_AvailableQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-6']")
	private static WebElement binRes_ReleaseQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-7']")
	private static WebElement binRes_TotalreservedQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-8']")
	private static WebElement binRes_BinQtyRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-9']")
	private static WebElement binRes_SkidIdRow1;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-10']")
	private static WebElement binRes_AllocStatusRow1; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-11']")
	private static WebElement binRes_InvStatusRow1;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_1-12']")
	private static WebElement binRes_LotNoRow1;
	
	// Row 2
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-2']")
	private static WebElement binRes_WarehouseRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-3']")
	private static WebElement binRes_QtyToReserveRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-4']")
	private static WebElement binRes_BinNoRow2;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-5']")
	private static WebElement binRes_AvailableQtyRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-6']")
	private static WebElement binRes_ReleaseQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-7']")
	private static WebElement binRes_TotalreservedQtyRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-8']")
	private static WebElement binRes_BinQtyRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-9']")
	private static WebElement binRes_SkidIdRow2;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-10']")
	private static WebElement binRes_AllocStatusRow2; 
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-11']")
	private static WebElement binRes_InvStatusRow2;
	
	@FindBy(xpath="//td[@id='Id_BinReservation_FGrid_col_2-12']")
	private static WebElement binRes_LotNoRow2;
	
	
	
	// Batch Reservation Body Header
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_2']")
	private static WebElement batchRes_BodyQtyToReserve; 
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_3']")
	private static WebElement batchRes_BodyBatchNo;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_4']")
	private static WebElement batchRes_BodyWareHouse; 
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_5']")
	private static WebElement batchRes_BodyAvailableQty;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_6']")
	private static WebElement batchRes_BodyRelesaseQty;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_7']")
	private static WebElement batchRes_BodyCurOrdResQty;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_8']")
	private static WebElement batchRes_BodyMfgDate;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_9']")
	private static WebElement batchRes_BodyExpDate;
	
	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_10']")
	private static WebElement batchRes_BodyBatchQty;
		
	// Body Grid
	// Row1
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-1']")
	private static WebElement batchRes_Row1Index; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-2']")
	private static WebElement batchRes_QtyToReserveRow1; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-3']")
	private static WebElement batchRes_BatchNoRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-4']")
	private static WebElement batchRes_WareHouseRow1; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-5']")
	private static WebElement batchRes_AvailableQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-6']")
	private static WebElement batchRes_RelesaseQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-7']")
	private static WebElement batchRes_CurOrdResQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-8']")
	private static WebElement batchRes_MfgDateRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-9']")
	private static WebElement batchRes_ExpDateRow1;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-10']")
	private static WebElement batchRes_BatchQtyRow1;
	
	// Row 2
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-1']")
	private static WebElement batchRes_Row2Index; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-2']")
	private static WebElement batchRes_QtyToReserveRow2; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-3']")
	private static WebElement batchRes_BatchNoRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-4']")
	private static WebElement batchRes_WareHouseRow2; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-5']")
	private static WebElement batchRes_AvailableQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-6']")
	private static WebElement batchRes_RelesaseQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-7']")
	private static WebElement batchRes_CurOrdResQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-8']")
	private static WebElement batchRes_MfgDateRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-9']")
	private static WebElement batchRes_ExpDateRow2;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_2-10']")
	private static WebElement batchRes_BatchQtyRow2;
	
	// Row 3
	
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-1']")
	private static WebElement batchRes_Row3Index; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-2']")
	private static WebElement batchRes_QtyToReserveRow3; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-3']")
	private static WebElement batchRes_BatchNoRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-4']")
	private static WebElement batchRes_WareHouseRow3; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-5']")
	private static WebElement batchRes_AvailableQtyRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-6']")
	private static WebElement batchRes_RelesaseQtyRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-7']")
	private static WebElement batchRes_CurOrdResQtyRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-8']")
	private static WebElement batchRes_MfgDateRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-9']")
	private static WebElement batchRes_ExpDateRow3;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_3-10']")
	private static WebElement batchRes_BatchQtyRow3;

	
	// Row 4
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-1']")
	private static WebElement batchRes_Row4Index; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-2']")
	private static WebElement batchRes_QtyToReserveRow4; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-3']")
	private static WebElement batchRes_BatchNoRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-4']")
	private static WebElement batchRes_WareHouseRow4; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-5']")
	private static WebElement batchRes_AvailableQtyRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-6']")
	private static WebElement batchRes_RelesaseQtyRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-7']")
	private static WebElement batchRes_CurOrdResQtyRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-8']")
	private static WebElement batchRes_MfgDateRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-9']")
	private static WebElement batchRes_ExpDateRow4;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_4-10']")
	private static WebElement batchRes_BatchQtyRow4;
	
	// Row 5
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-1']")
	private static WebElement batchRes_Row5Index; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-2']")
	private static WebElement batchRes_QtyToReserveRow5; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-3']")
	private static WebElement batchRes_BatchNoRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-4']")
	private static WebElement batchRes_WareHouseRow5; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-5']")
	private static WebElement batchRes_AvailableQtyRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-6']")
	private static WebElement batchRes_RelesaseQtyRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-7']")
	private static WebElement batchRes_CurOrdResQtyRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-8']")
	private static WebElement batchRes_MfgDateRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-9']")
	private static WebElement batchRes_ExpDateRow5;
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_5-10']")
	private static WebElement batchRes_BatchQtyRow5;
	
	// RMA Reservation Body Header
	
	@FindBy(xpath="//th[@id='Id_RMAReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
	private static WebElement rmaRes_BodyWarehouse; 
	
	@FindBy(xpath="//div[contains(text(),'RMA no')]")
	private static WebElement rmaRes_BodyRMANo;
	
	@FindBy(xpath="//div[contains(text(),'Selected')]")
	private static WebElement rmaRes_BodySelected; 

	// RMA Body Grid Row1
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-1']")
	private static WebElement rmaRes_Row1Index; 
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-2']")
	private static WebElement rmaRes_WarehouseRow1; 
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-3']")
	private static WebElement rmaRes_RmaNoRow1;
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-4']//input")
	private static WebElement rmaRes_SelectedRow1; 
	
	// Row 2
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-1']")
	private static WebElement rmaRes_Row2Index; 
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-2']")
	private static WebElement rmaRes_WarehouseRow2; 
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-3']")
	private static WebElement rmaRes_RmaNoRow2;
	
	@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-4']//input")
	private static WebElement rmaRes_SelectedRow2; 
	
	
	// RMA Body Grid Row3
	
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-1']")
		private static WebElement rmaRes_Row3Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-2']")
		private static WebElement rmaRes_WarehouseRow3; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-3']")
		private static WebElement rmaRes_RmaNoRow3;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_3-4']//input")
		private static WebElement rmaRes_SelectedRow3; 
		
		// Row 4
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-1']")
		private static WebElement rmaRes_Row4Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-2']")
		private static WebElement rmaRes_WarehouseRow4; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-3']")
		private static WebElement rmaRes_RmaNoRow4;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_4-4']//input")
		private static WebElement rmaRes_SelectedRow4; 
		
		
		// RMA Body Grid Row5
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-1']")
		private static WebElement rmaRes_Row5Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-2']")
		private static WebElement rmaRes_WarehouseRow5; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-3']")
		private static WebElement rmaRes_RmaNoRow5;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_5-4']//input")
		private static WebElement rmaRes_SelectedRow5; 
		
		// Row 6
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-1']")
		private static WebElement rmaRes_Row6Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-2']")
		private static WebElement rmaRes_WarehouseRow6; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-3']")
		private static WebElement rmaRes_RmaNoRow6;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_6-4']//input")
		private static WebElement rmaRes_SelectedRow6; 
		
		// Row 7
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-1']")
		private static WebElement rmaRes_Row7Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-2']")
		private static WebElement rmaRes_WarehouseRow7; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-3']")
		private static WebElement rmaRes_RmaNoRow7;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_7-4']//input")
		private static WebElement rmaRes_SelectedRow7; 
		
		// Row 8
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-1']")
		private static WebElement rmaRes_Row8Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-2']")
		private static WebElement rmaRes_WarehouseRow8; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-3']")
		private static WebElement rmaRes_RmaNoRow8;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_8-4']//input")
		private static WebElement rmaRes_SelectedRow8; 

		// Row 9
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-1']")
		private static WebElement rmaRes_Row9Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-2']")
		private static WebElement rmaRes_WarehouseRow9; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-3']")
		private static WebElement rmaRes_RmaNoRow9;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_9-4']//input")
		private static WebElement rmaRes_SelectedRow9; 
		
		// Row 10
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-1']")
		private static WebElement rmaRes_Row10Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-2']")
		private static WebElement rmaRes_WarehouseRow10; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-3']")
		private static WebElement rmaRes_RmaNoRow10;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_10-4']//input")
		private static WebElement rmaRes_SelectedRow10; 
	
	// Stock item Reservation Body Header
	

	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
	private static WebElement stockRes_BodyWareHouse; 
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_3']//div[contains(text(),'Voucher No')]")
	private static WebElement stockRes_BodyVoucherNo;

	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_4']//div[contains(text(),'Qty to Reserve')]")
	private static WebElement stockRes_BodyQtyToReserve; 
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_5']//div[contains(text(),'Available Qty')]")
	private static WebElement stockRes_BodyAvailableQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_6']//div[contains(text(),'Cur Ord Res Qty')]")
	private static WebElement stockRes_BodyCurOrdResQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_7']//div[contains(text(),'Quantity')]")
	private static WebElement stockRes_BodyQty;
	
	@FindBy(xpath="//div[contains(text(),'Pending Order Qty')]")
	private static WebElement stockRes_BodyPendingOrderQty;
	
	@FindBy(xpath="//th[@id='Id_StockReservation_FGrid_control_heading_9']//div[contains(text(),'Released Qty')]")
	private static WebElement stockRes_BodyReleasedQty;
	
	// Stock Item Reservation Body  Grid
	// Row1
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-1']")
	private static WebElement stockRes_Row1Index; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-2']")
	private static WebElement stockRes_WareHouseRow1; 

	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-3']")
	private static WebElement stockRes_VoucherNoRow1;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-4']")
	private static WebElement stockRes_QtyToReserveRow1; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-5']")
	private static WebElement stockRes_AvailableQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-6']")
	private static WebElement stockRes_CurOrdResQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-7']")
	private static WebElement stockRes_QtyRow1;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-8']")
	private static WebElement stockRes_PendingOrderQtyRow1;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-9']")
	private static WebElement stockRes_ReleasedQtyRow1;
	
	// Row 2
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-1']")
	private static WebElement stockRes_Row2Index; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-2']")
	private static WebElement stockRes_WareHouseRow2; 

	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-3']")
	private static WebElement stockRes_VoucherNoRow2;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-4']")
	private static WebElement stockRes_QtyToReserveRow2; 
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-5']")
	private static WebElement stockRes_AvailableQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-6']")
	private static WebElement stockRes_CurOrdResQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-7']")
	private static WebElement stockRes_QtyRow2;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-8']")
	private static WebElement stockRes_PendingOrderQtyRow2;
	
	@FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_2-9']")
	private static WebElement stockRes_ReleasedQtyRow2;
	
	@FindBy(xpath="//input[@id='txtQtyToReserve']")
	private static WebElement enter_QtyToReserve;

@FindBy(xpath="//input[@id='id_body_22']")
	private static WebElement enter_Reserve;

	@FindBy(xpath="//div[@id='id_transactionentry_summary_static']//div[1]//div[2]")
	private static WebElement  so_footerQty;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[2]//div[2]")
	private static WebElement  so_footerRDField;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[3]//div[2]")
	private static WebElement  so_footerAQ;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[4]//div[2]")
	private static WebElement  so_footerFQ;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[5]//div[2]")
	private static WebElement  so_footerGross;
	
	@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
	private static WebElement  so_footerNet;
	
	@FindBy(xpath="//span[@class='col-xs-6 icon-font6 no_padding_left_right theme_color-inverse icon-collepse']")
	private static WebElement  new_footerMinimizeBtn;

//Checking Purchase Order Voucher to use the Option Convert Link, First Use First Row as Close Link
	
	@FindBy(xpath="//select[@id='id_list_popup_list']")
	private static WebElement  convertPopupList;
	
	@FindBy(xpath="//option[contains(text(),'Purchases Vouchers')]")
	private static WebElement  convertPopupListPurchaseVoucher;
	
	@FindBy(xpath="//option[contains(text(),'Purchase Vouchers N')]")
	private static WebElement  convertPopupListPurchaseVoucherN;
	
	@FindBy(xpath="//div[@class='col-xs-4']//input[1]")
	private static WebElement  convertPopupListOkButton;
	
	@FindBy(xpath="//div[@id='id_transactionentry_container_body_others']//input[2]")
	private static WebElement  convertPopupListCancelButton;
	
	@FindBy(xpath="//span[@class='icon-transaction-close-link icon-font7']")
	private static WebElement  closeLinksOption;
	
	@FindBy(xpath="//label[contains(text(),'Open Link')]")
	private static WebElement  openLinksOption;
	
	@FindBy(xpath="//label[contains(text(),'Partial')]")
	private static WebElement  partialLinksOption;
	
	
	@FindBy(xpath="//label[contains(text(),'Convert')]")
	private static WebElement convertLinkOption;
	
	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement n;
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_body']/tr")
	private static List<WebElement>  LinkRowCountCL;	



    @FindBy(xpath="//span[@id='btnClear']//i[@class='icon-save icon-font6']")
	private static WebElement saveInDesignWorkFlow; 

    @FindBy(xpath="//div[@class='col-lg-12']//button[@class='Fbutton'][contains(text(),'Ok')]")
	private static WebElement OkBtn; 

    @FindBy(xpath="//div[@id='LeftSideChkbox']//ul[2]//li[1]//input[1]")
	private static WebElement customerAccountChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[4]//li[1]//input[1]")
	private static WebElement salesOrderandInvoicewareHouseChkbox; 
	
	@FindBy(xpath="//*[@id='line5']")
	private static WebElement link5TO6; 

	@FindBy(xpath="//input[@id='optWorkflow']")
	private static WebElement workflowNameTxt; 

    @FindBy(xpath="//span[contains(@class,'icon-settings icon-font1')]")
	private static WebElement settingsMenu; 
	
	@FindBy(xpath="//a[@id='74']//span[contains(text(),'Design Workflow')]")
	private static WebElement designWorkflowbtn; 

	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement closeBtn;
	

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr")
	private static List<WebElement>  LinkRowCount;

@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[7]//div[2]")
	private static WebElement  si_footerGross;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[5]//div[2]")
	private static WebElement  si_AvgRate;
	
	@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[6]//div[2]")
	private static WebElement  si_AvgRateO;

	@FindBy(xpath="//input[@id='id_body_35_8']")
	private static WebElement  enter_LSalesOrders;
	
	
	
	
	
	
	
	private static String xlfile;
	private static String resPass="Pass";
	private static String resFail="Fail";
	private static ExcelReader excelReader;

	private String expOsVoucherGrossR4;
	

	public boolean checkLoadingMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			String actVoucherLoadingMessage=errorMessage.getText();
			String expVoucherLoadingMessage="Voucher loaded successfully";
			
			System.out.println("VoucherLoadingMessage  : "+actVoucherLoadingMessage +" Value Expected : "+expVoucherLoadingMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();

			if(actVoucherLoadingMessage.startsWith(expVoucherLoadingMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		catch(Exception e)
		{
			System.err.println("UNABLE TO COMPARE");
			return false;
		}
	}
	
	
	
	
	public boolean checkVoucherSavingMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage=errorMessage.getText();
			String expErrorMessage="Voucher saved successfully";
			String expErrorMessage1=": "+docno;
			
			System.out.println("SavingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage+" "+expErrorMessage1);
			
			if(actErrorMessage.startsWith(expErrorMessage) && actErrorMessage.endsWith(expErrorMessage1))
			{
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();
					
					return  true;
				}
				catch(Exception ee)
				{
					return true;
				}
				
			}
			else
			{
				return false;
			}
			
		}
		catch(Exception e)
		{
			System.err.println("UNABLE TO COMPARE");
			return false;
		}
	}
	
	/*
	public boolean checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage=errorMessage.getText();
			String expErrorMessage=ExpMessage;
			
			System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
			
			
			if(actErrorMessage.equalsIgnoreCase(expErrorMessage))
			{
				
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();
					
					return  true;
				}
				catch(Exception ee)
				{
					return true;
				}
				
			}
			else
			{
				System.err.println("Error Message is NOT as Expected");
				return false;
			}
		}
		catch(Exception e)
		{
			System.err.println("Error Message NOT Found or NOT Clickable");
			System.err.println(e.getMessage());
			return false;
		}
	}
*/
	
	

	
	public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	        try
	        {
	                getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
	                String actErrorMessage=errorMessage.getText();
	                String expErrorMessage=ExpMessage;
	                
	                try
	                {
	                
		                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		                errorMessageCloseBtn.click();
		                
		                System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
		                
		                return actErrorMessage;
	                }
	                catch(Exception ee)
	                {
	                	
	                	System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
	                	
	                	return actErrorMessage;
	                }
	               
	                
	               
	        }
	        catch(Exception e)
	        {
	                System.err.println("Error Message NOT Found or NOT Clickable");
	                System.err.println(e.getMessage());
	                
	                String Exception=e.getMessage();
	            
	                return Exception;
	                
	        }
	}
	
	
	
	public boolean checkEntryPageDeleteMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		String expErrorMessage="Voucher deleted Successfully";
		
		System.out.println("DeletingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
		
		if(actErrorMessage.equalsIgnoreCase(expErrorMessage))
		{
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				
				return  true;
			}
			catch(Exception ee)
			{
				return true;
			}
			
			
		}
		else
		{
			return false;
		}
	}

	
	
	
		 
	public static void checkPopUpWindow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 Thread.sleep(5000);
	      
	      try 
	      {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
				doNotShowCheckbox.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDemoPopupScreen));
				closeBtnInDemoPopupScreen.click(); 
				
				System.err.println("POP UP DISPLAYED AND CLOSED SUCCESSFULLY");
				
			} 
	      catch (Exception e)
	      {
	      	System.err.println("NO POP UP DISPLAYED");
			}
	
	  	
	  	Thread.sleep(4000);
	}
			 

	@FindBy(xpath="//button[contains(text(),'Ok')]")
	private static WebElement loginRefreshOkBtn;
	

	public static void checkRefreshPopOnlogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		try 
		{


			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginRefreshOkBtn));
			loginRefreshOkBtn.click();
		
		
		} 
		catch (Exception e)
		{
 			 
			System.err.println("Exception : "+e.getMessage());
 			 
			
			
  			System.err.println("NO ALERT POP UP DISPLAYED");
		}
		Thread.sleep(4000);
	}

	

	public static void checkUserFriendlyMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	        try
	        {
	                getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
	                String actErrorMessage=errorMessage.getText();
	                
	                try
	                {
	                
		                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		                errorMessageCloseBtn.click();
		                
		                System.out.println("ValidationMessage  :  "+actErrorMessage);
		                
	                }
	                catch(Exception ee)
	                {
	                	
	                	System.out.println("ValidationMessage  :  "+actErrorMessage);
	                	
	                }
	               
	                
	               
	        }
	        catch(Exception e)
	        {
	                System.err.println("Error Message NOT Found or NOT Clickable");
	                System.err.println(e.getMessage());
	                
	                String Exception=e.getMessage();
	            
	        }
	}
	

	//// Home Menu
	@FindBy(xpath = "//*[@id='1']/div/span")
	public static WebElement homeMenu;

	//Financial Menu
	@FindBy (xpath="//span[@class='icon-financial icon-font1']")
    private static WebElement financialMenu;
	
/*	
	//Inventory Menu
	@FindBy (xpath="//span[@class='icon-inventory icon-font1']")
    private static WebElement inventoryMenu;
*/	
	
	//Fixed Assets Menu
	@FindBy (xpath="//span[@class='icon-assets icon-font1']")
    private static WebElement fixedAssetsMenu;
	
	//Production Menu
	@FindBy (xpath="//span[@class='icon-production icon-font1']")
    private static WebElement productionMenu;
	
	//Point Of Sale Menu
	@FindBy (xpath="//div[contains(text(),'Point of Sale')]")
    private static WebElement pointOfSaleMenu;
	
	//Quality Of Control Menu
	@FindBy (xpath="//span[@class='icon-quotationanalysis icon-font1']")
    private static WebElement qualityControlMenu;
	
	//Settings Menu
	@FindBy (xpath="//span[@class='icon-settings icon-font1']")
	private static WebElement SettingsMenu;


	 public boolean checkSignInToLoginFocusToDisplayMenusAndHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
	 {
	     excelReader = new ExcelReader(POJOUtility.getExcelPath());
	     xlfile = "E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	   
	     System.out.println("***************** checkSignInDemoPopupPageOnClickDoNotShowAndCloseToDisplayMenusAndHomePage Method Executes.............  *********************");
	     
	     try
	     {  
	      
	       getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
	    	 
	       LoginPage lp = new LoginPage(getDriver());
	      
	  	   LoginPage.enterUserName("su");
	  	   LoginPage.enterPassword("su");
	  	   

	  	   LoginPage.clickOnSignInBtn();
	  	   //Thread.sleep(4000);
	         
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		    
			boolean actHomeMenuIsDisplay           = homeMenu.isDisplayed();
			boolean actFinancialMenuIsDisplay      = financialMenu.isDisplayed();
			boolean actInventoryMenuIsDisplay      = inventoryMenu.isDisplayed();
			boolean actFixedAssetsMenuIsDisplay    = fixedAssetsMenu.isDisplayed();
			boolean actProductionMenuIsDisplay     = productionMenu.isDisplayed();
			boolean actPointOfSaleMenuIsDisplay    = pointOfSaleMenu.isDisplayed();
			boolean actQualityControlMenuIsDisplay = qualityControlMenu.isDisplayed();
			boolean actSettingsMenuIsDisplay       = SettingsMenu.isDisplayed();
				
			boolean expHomeMenuIsDisplay           = true;
			boolean expFinancialMenuIsDisplay      = true;
			boolean expInventoryMenuIsDisplay      = true;
			boolean expFixedAssetsMenuIsDisplay    = true;
			boolean expProductionMenuIsDisplay     = true;
			boolean expPointOfSaleMenuIsDisplay    = true;
			boolean expQualityControlMenuIsDisplay = true;
			boolean expSettingsMenuIsDisplay       = true;
			
			System.out.println("Home Menu Display Value Actual            : " + actHomeMenuIsDisplay +           " Value Expected : " + expHomeMenuIsDisplay);
			System.out.println("Financial Menu Display Value Actual       : " + actFinancialMenuIsDisplay +      " Value Expected : " + expFinancialMenuIsDisplay);
			System.out.println("Inventory Menu Display Value Actual       : " + actInventoryMenuIsDisplay +      " Value Expected : " + expInventoryMenuIsDisplay);
			System.out.println("Fixed Assets Menu Display Value Actual    : " + actFixedAssetsMenuIsDisplay +    " Value Expected : " + expFixedAssetsMenuIsDisplay);
			System.out.println("Production Menu Display Value Actual      : " + actProductionMenuIsDisplay +     " Value Expected : " + expProductionMenuIsDisplay);
			System.out.println("Point Of Sale Menu Display Value Actual   : " + actPointOfSaleMenuIsDisplay +    " Value Expected : " + expPointOfSaleMenuIsDisplay);
			System.out.println("Quality Control Menu Display Value Actual : " + actQualityControlMenuIsDisplay + " Value Expected : " + expQualityControlMenuIsDisplay);
			System.out.println("Settings Menu Display Value Actual        : " + actSettingsMenuIsDisplay +       " Value Expected : " + expSettingsMenuIsDisplay);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			String actUserInfo = userNameDisplay.getText();
			String expUserInfo = "SU";
			
			System.out.println("User Name Display Value Actual                   : " + actUserInfo +             " Value Expected : " + expUserInfo);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
			companyLogo.click();
			
	        //Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyName));
			String actGetLoginCompanyNameInformation = companyName.getText();
			String actGetLoginCompanyName            = actGetLoginCompanyNameInformation.substring(0, 19);
			String expGetLoginCompanyName            = "Automation Company ";
			companyLogo.click();
			
			System.out.println("Company Name Display Value Actual                : " + actGetLoginCompanyName +  " Value Expected : " + expGetLoginCompanyName);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			String actDashboardLabel                = labelDashboard.getText();
			String expDashboardLabel                = "Graph with Active and setAsDefault";

			System.out.println("Dashboard Label Value Actual                     : " + actDashboardLabel +      " Value Expected : " + expDashboardLabel);
			
			if (actUserInfo.equalsIgnoreCase(expUserInfo) && actGetLoginCompanyName.equalsIgnoreCase(expGetLoginCompanyName)
					
					&& actDashboardLabel.equalsIgnoreCase(expDashboardLabel)
					
					&& actHomeMenuIsDisplay==actHomeMenuIsDisplay && actFinancialMenuIsDisplay==actFinancialMenuIsDisplay
					&& actInventoryMenuIsDisplay==actInventoryMenuIsDisplay && actFixedAssetsMenuIsDisplay==actFixedAssetsMenuIsDisplay
					&& actProductionMenuIsDisplay==actProductionMenuIsDisplay && actPointOfSaleMenuIsDisplay==actPointOfSaleMenuIsDisplay
					&& actQualityControlMenuIsDisplay==actQualityControlMenuIsDisplay && actSettingsMenuIsDisplay==actSettingsMenuIsDisplay) 
			{
				excelReader.setCellData(xlfile, "Sheet6", 7, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, "Sheet6", 7, 9, resFail);
				return false;
			}
	     }
	     catch (NoSuchElementException nse)
		 {
				System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY : "+ nse.getMessage());
				return false;
				
		 }
		 catch(TimeoutException te)
		 {
				System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :  "+ te.getMessage());
				return false;
		 }
	    
	   }
	   

	
	 
		@FindBy(xpath="//*[@id='2016']/span")
		private static WebElement  salesReturnsVoucher;
		
		@FindBy(xpath="//*[@id='2052']/span")
		private static WebElement autoSalesInvoice;
		
		@FindBy(xpath="//*[@id='2053']/span")
		private static WebElement salesInvoiceN;
				
		@FindBy(xpath="//*[@id='2059']/span")
		private static WebElement  salesInvoiceVAT;
		
		@FindBy(xpath="//*[@id='2060']/span")
		private static WebElement  salesReturnsVAT;
		
		@FindBy(xpath="//*[@id='2020']/span")
		private static WebElement  cashSales;
				
		@FindBy(xpath="//*[@id='2021']/span")
		private static WebElement  hirePurchaseSales;



	
	 public static boolean checkFinancialsSalesMenu() throws EncryptedDocumentException, InvalidFormatException, IOException
	 {
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
				
		boolean actFinancialSalesInvoiceIsDisplay          = salesInvoicesVoucher.isDisplayed();
    	boolean actFinancialSalesReturnsIsDisplay          = salesReturnsVoucher.isDisplayed(); 	
    	boolean actFinancialAutoSalesInvoice               = autoSalesInvoice.isDisplayed();
    	boolean actFinancialSalesInvoiceNIsDisplay         = salesInvoiceN.isDisplayed();
    	
    	boolean actFinancialSalesInvoiceVATVatIsDisplay    = salesInvoiceVAT.isDisplayed();
    	boolean actFinancialSalesReturnsVATIsDisplay       = salesReturnsVAT.isDisplayed();
    	boolean actFinancialCashSalesIsDisplay             = cashSales.isDisplayed();
    	boolean actFinancialHirePurchaseSalesIsDisplay     = hirePurchaseSales.isDisplayed();
    	
    	boolean expFinancialSalesInvoiceIsDisplay          = true;
    	boolean expFinancialSalesReturnsIsDisplay          = true; 	
    	boolean expFinancialSalesInvoiceNIsDisplay         = true;
    	boolean expFinancialSalesInvoiceVATVatIsDisplay    = true;
    	boolean expFinancialSalesReturnsVATIsDisplay       = true;
    	boolean expFinancialCashSalesIsDisplay             = true;
    	boolean expFinancialHirePurchaseSalesIsDisplay     = true;
    
    	System.out.println("FinancialPurchaseIsDisplay              : " + actFinancialSalesInvoiceIsDisplay  +           "  Value Expected  " + expFinancialSalesInvoiceIsDisplay);	
    	System.out.println("FinancialPurchaseReturnsIsDisplay       : " + actFinancialSalesReturnsIsDisplay  +           "  Value Expected  " + expFinancialSalesReturnsIsDisplay); 	
    	System.out.println("FinancialPurchaseVoucherNewIsDisplay    : " + actFinancialSalesInvoiceNIsDisplay   +         "  Value Expected  " + expFinancialSalesInvoiceNIsDisplay);	   
     	System.out.println("FinancialPurchaseVouchersVatIsDisplay   : " + actFinancialSalesInvoiceVATVatIsDisplay  +     "  Value Expected  " + expFinancialSalesInvoiceVATVatIsDisplay); 	
    	System.out.println("FinancialPurchaseReturnsVatIsDisplay    : " + actFinancialSalesReturnsVATIsDisplay +         "  Value Expected  " + expFinancialSalesReturnsVATIsDisplay);
    	System.out.println("FinancialPurchaseReturnsVatIsDisplay    : " + actFinancialCashSalesIsDisplay +               "  Value Expected  " + expFinancialCashSalesIsDisplay);
    	System.out.println("FinancialPurchaseReturnsVatIsDisplay    : " + actFinancialHirePurchaseSalesIsDisplay +       "  Value Expected  " + expFinancialHirePurchaseSalesIsDisplay); 
		 
		 if(actFinancialSalesInvoiceIsDisplay==expFinancialSalesInvoiceIsDisplay && actFinancialSalesReturnsIsDisplay==expFinancialSalesReturnsIsDisplay 
				 && actFinancialSalesInvoiceNIsDisplay==expFinancialSalesInvoiceNIsDisplay && actFinancialSalesInvoiceVATVatIsDisplay==expFinancialSalesInvoiceVATVatIsDisplay
				 && actFinancialSalesReturnsVATIsDisplay==expFinancialSalesReturnsVATIsDisplay && actFinancialCashSalesIsDisplay==expFinancialCashSalesIsDisplay
				 && actFinancialHirePurchaseSalesIsDisplay==expFinancialHirePurchaseSalesIsDisplay)
		 {
			excelReader.setCellData(xlfile, "Sheet1", 99, 9, resPass);
			return true;
	 	 }
		 else
		 {
			excelReader.setCellData(xlfile, "Sheet1", 99, 9, resFail);
			return false;
		 }
	}
	
	 
	 
	public boolean checkSalesVoucherNewHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		
		boolean actHomePageNewBtn         =newBtn.isDisplayed();
		boolean actHomePageEditBtn        =editBtn.isDisplayed();
		boolean actHomePagePrintBtn       =printBtn.isDisplayed();
		boolean actHomePageDeleteBtn      =deleteBtn.isDisplayed();
		//boolean actHomePageAuthorizeBtn   =authorizeBtn.isDisplayed();
		boolean actHomePageSuspendBtn     =suspendBtn.isDisplayed();
		//boolean actHomePageRejectBtn      =rejectBtn.isDisplayed();
		boolean actHomePagePrintBarcodeBtn=printBarCodeBtn.isDisplayed();
		boolean actHomePageExportXMLBtn   =exportToXMLBtn.isDisplayed();
		boolean actHomePageSettingsBtn    =settingsBtn.isDisplayed();
		boolean actHomePageCloseBtn       =homeCloseBtn.isDisplayed();
		boolean actHomePageGridCheckBox   =grid_HeaderChkBox.isDisplayed();
		boolean actHomePageSortingBtn     =sortingBtn.isDisplayed();
		boolean actHomePageCreateViewBn   =createViewBtn.isDisplayed();
		boolean actHomePageCustomizeBtn   =customizeBtn.isDisplayed();
		boolean actHomePageFilterBtn      =filterBtn.isDisplayed();
		boolean actHomePageRefreshBtn     =refreshBtn.isDisplayed();
		boolean actHomePageOptionsBtn     =optionsBtn.isDisplayed();
		boolean actHomePageExportBtn      =exportBtn.isDisplayed();
		boolean actHomePageAllView        =homePageAllVouchersView.isDisplayed();
		boolean actHomePagePendingSOView  =homepagePendingSalesOrders.isDisplayed();
		
		
		boolean expHomePageNewBtn         =true;
		boolean expHomePageEditBtn        =true;
		boolean expHomePagePrintBtn       =true;
		boolean expHomePageDeleteBtn      =true;
		//boolean expHomePageAuthorizeBtn   =true;
		boolean expHomePageSuspendBtn     =true;
		//boolean expHomePageRejectBtn      =true;
		boolean expHomePagePrintBarcodeBtn=true;
		boolean expHomePageExportXMLBtn   =true;
		boolean expHomePageSettingsBtn    =true;
		boolean expHomePageCloseBtn       =true;
		boolean expHomePageGridCheckBox   =true;
		boolean expHomePageSortingBtn     =true;
		boolean expHomePageCreateViewBn   =true;
		boolean expHomePageCustomizeBtn   =true;
		boolean expHomePageFilterBtn      =true;
		boolean expHomePageRefreshBtn     =true;
		boolean expHomePageOptionsBtn     =true;
		boolean expHomePageExportBtn      =true;
		boolean expHomePageAllView        =true;
		boolean expHomePagePendingSOView  =true;
		
		System.out.println("****************************** checkSalesInvoiceHomeScreenOptions  ********************************************");
		System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn+         "     Value Expected : "+expHomePageNewBtn);
		System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn+        "     Value Expected : "+expHomePageEditBtn);
		System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn+       "	 Value Expected : "+expHomePagePrintBtn);
		System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn+      "	 Value Expected : "+expHomePageDeleteBtn);
		//System.out.println("Home Page Authorize Btn Value Actual     :"+actHomePageAuthorizeBtn+   "	 Value Expected : "+expHomePageAuthorizeBtn);
		System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn+     "	 Value Expected : "+expHomePageSuspendBtn);
		//System.out.println("Home Page Reject Btn Value Actual        :"+actHomePageRejectBtn+      "	 Value Expected : "+expHomePageRejectBtn);
		System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn+"	 Value Expected : "+expHomePagePrintBarcodeBtn);
		System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn+   "	 Value Expected : "+expHomePageExportXMLBtn);
		System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn+    "	 Value Expected : "+expHomePageSettingsBtn);
		System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn+       "	 Value Expected : "+expHomePageCloseBtn);
		System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox+   "	 Value Expected : "+expHomePageGridCheckBox);
		System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn+     "	 Value Expected : "+expHomePageSortingBtn);
		System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn+   "	 Value Expected : "+expHomePageCreateViewBn);
		System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn+   "	 Value Expected : "+expHomePageCustomizeBtn);
		System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn+      "	 Value Expected : "+expHomePageFilterBtn);
		System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn+     "	 Value Expected : "+expHomePageRefreshBtn);
		System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn+     "	 Value Expected : "+expHomePageOptionsBtn);
		System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn+      "	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page All View Value Actual          :"+actHomePageExportBtn+      "	 Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page Pending SO View Value Actual   :"+actHomePageExportBtn+      "	 Value Expected : "+expHomePageExportBtn);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		
		if(actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
				&& actHomePageDeleteBtn==expHomePageDeleteBtn/* && actHomePageAuthorizeBtn==expHomePageAuthorizeBtn*/ && actHomePageSuspendBtn==expHomePageSuspendBtn 
				/*&& actHomePageRejectBtn==expHomePageRejectBtn*/ && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
				&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
				&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
				&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
				&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllView==expHomePageAllView && actHomePagePendingSOView==expHomePagePendingSOView)
		{	
			System.out.println("Test Pass : HomeScreen Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 270, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 270, 9, resFail);
			return false;
		}
	}
	

			
	public boolean checkSalesVoucherNewEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
		
		boolean actEntryPageJumpToHeaderSectionBtn=jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn  =jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn       =jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                =new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn               =saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn           =previousBtn.isDisplayed();
		boolean actEntryPageNextBtn               =nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn              =new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn            =new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn              =new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn             =toggleBtn.isDisplayed();

		
		boolean expEntryPageJumpToHeaderSectionBtn=true;
		boolean expEntryPageJumpToBodySectionBtn  =true;
		boolean expEntryPageJumpToFooterBtn       =true;
		boolean expEntryPageNewBtn	              =true;
		boolean expEntryPageSaveBtn               =true;
		boolean expEntryPagePreviousBtn           =true;
		boolean expEntryPageNextBtn               =true;
		boolean expEntryPagePrintBtn              =true;
		boolean expEntryPageSuspendBtn            =true;
		boolean expEntryPageCloseBtn              =true;
		boolean expEntryPageToggleBtn             =true;

		
		
		System.out.println("************************************* Sales Invoice Entry Page Ribbon Control Options  ********************************************");
		System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn+"  Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn+"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
		System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn+"         Value Expected : "+expEntryPageJumpToFooterBtn);
		System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn+"                  Value Expected : "+expEntryPageNewBtn);
		System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn+"                 Value Expected : "+expEntryPageSaveBtn);
		System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn+"             Value Expected : "+expEntryPagePreviousBtn);
		System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn+"                 Value Expected : "+expEntryPageNextBtn);
		System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn+"                Value Expected : "+expEntryPagePrintBtn);
		System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn+"              Value Expected : "+expEntryPageSuspendBtn);
		System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn+"                Value Expected : "+expEntryPageCloseBtn);
		System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn+"               Value Expected : "+expEntryPageToggleBtn);
		
		
		if(actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn )
		{
			System.out.println("Test Pass : Entry Page Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			return false;
		}
	}

	
	// Header 
	
	@FindBy(xpath="//input[@id='id_header_268435470']")
	private static WebElement  placeofSupplyTxt;
	
	@FindBy(xpath="//tbody[@id='id_header_268435470_table_data_body']/tr/td")
	private static List<WebElement>  placeofSupplyList;
	
	@FindBy(xpath="//input[@id='id_header_268435471']")
	private static WebElement  jurisdictionTxt;
	
	@FindBy(xpath="//tbody[@id='id_header_268435471_table_data_body']/tr/td")
	private static List<WebElement>  jurisdictionList;
	
	@FindBy(xpath="//input[@id='id_header_67108982']")
	private static WebElement  permintNoTxt;

	
	public boolean checkSalesVoucherNewEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
	/*	// Actual
		boolean actDocumentNumberTxt         =documentNumberTxt.isDisplayed();
		boolean actDateTxt                   =dateTxt.isDisplayed();
		boolean actSalesAccount              =salesAccountTxt.isDisplayed();
		boolean actCustomerAccount           =customerAccountTxt.isDisplayed();
		boolean actRaiseReceipt              =voucherRaiseReceiptCheckBox.isDisplayed();
		boolean actWarehouse                 =wareHouseTxt.isDisplayed();
		boolean actDepartment                =departmentTxt.isDisplayed();
		boolean actVoucherDueDate            =voucherHeaderDueDate.isDisplayed();
		boolean actVoucherCurrency           =voucherHeaderCurrency.isDisplayed();
		boolean actVoucherExchangeRate       =voucherHeaderExchangeRate.isDisplayed();
		boolean actVoucherLocalExchangeRate  =voucherHeaderLocalExchangeRate.isDisplayed();
		boolean actSalesInvoice_NarrationTxt =salesInvoice_NarrationTxt.isDisplayed();
		
		// Expected
		boolean expDocumentNumberTxt         =true;
		boolean expDateTxt                   =true;
		boolean expSalesAccount              =true;
		boolean expCustomerAccount           =true;
		boolean expRaiseReceipt              =true;
		boolean expWarehouse                 =true;
		boolean expDepartment                =true;
		boolean expVoucherDueDate            =true;
		boolean expVoucherCurrency           =true;
		boolean expVoucherExchangeRate       =true;
		boolean expVoucherLocalExchangeRate  =true;
		boolean expSalesInvoice_NarrationTxt =true;
	*/	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
		boolean actEntryPageHeaderFieldsDocNumber     =documentNumberTxt.isDisplayed();
		boolean actEntryPageHeaderFieldsDate          =dateTxt.isDisplayed();
		//boolean actEntryPageHeaderFieldsPurchaseAc    =purchaseAccountTxt.isDisplayed();
		boolean actEntryPageHeaderFieldsVendorAc      =customerAccountTxt.isDisplayed();
		boolean actEntryPageHeaderFieldRaiseReceipt   =voucherRaiseReceiptCheckBox.isDisplayed();
		boolean actEntryPageHeaderFieldsDepartment    =departmentTxt.isDisplayed();
		boolean actEntryPageHeaderFieldsDueDate       =voucherHeaderDueDate.isDisplayed();                                         
		boolean actEntryPageHeaderFieldsLocalExchRate =voucherHeaderLocalExchangeRate.isDisplayed();
		boolean actEntryPageHeaderFieldsCurrency      =voucherHeaderCurrency.isDisplayed();
		boolean actEntryPageHeaderFieldsExchRate      =voucherHeaderExchangeRate.isDisplayed();
		boolean actEntryPageHeaderFieldsPlaceSupply   =placeofSupplyTxt.isDisplayed();
		boolean actEntryPageHeaderFieldsJurisdiction  =jurisdictionTxt.isDisplayed();	
		
		boolean expEntryPageHeaderFieldsDocNumber     =true;
		boolean expEntryPageHeaderFieldsDate          =true;
		boolean expEntryPageHeaderFieldsPurchaseAc    =true;
		boolean expEntryPageHeaderFieldsVendorAc      =true;
		boolean expEntryPageHeaderFieldRaiseReceipt   =true;
		boolean expEntryPageHeaderFieldsDepartment    =true;
		boolean expEntryPageHeaderFieldsDueDate       =true;                                         
		boolean expEntryPageHeaderFieldsLocalExchRate =true;
		boolean expEntryPageHeaderFieldsCurrency      =true;
		boolean expEntryPageHeaderFieldsExchRate      =true;
		boolean expEntryPageHeaderFieldsPlaceSupply   =true;
		boolean expEntryPageHeaderFieldsJurisdiction  =true;	


		
	    System.out.println("************************************* Sales Invoice Entry Page Ribbon Control Options  ********************************************");
		
		System.out.println("Entry Page Header Doc No Value Actual         :"+actEntryPageHeaderFieldsDocNumber    +"  Value Expected : "+expEntryPageHeaderFieldsDocNumber);
		System.out.println("Entry Page Header Date  Value Actual          :"+actEntryPageHeaderFieldsDate         +"  Value Expected : "+expEntryPageHeaderFieldsDate);
			
		System.out.println("Entry Page Header Vendor Value Actual         :"+actEntryPageHeaderFieldsVendorAc     +"  Value Expected : "+expEntryPageHeaderFieldsVendorAc);
		System.out.println("Entry Page Header Raise Receipt Value Actual  :"+actEntryPageHeaderFieldRaiseReceipt  +"  Value Expected : "+expEntryPageHeaderFieldRaiseReceipt);
		System.out.println("Entry Page Header Department Value Actual     :"+actEntryPageHeaderFieldsDepartment   +"  Value Expected : "+expEntryPageHeaderFieldsDepartment);
		System.out.println("Entry Page Header Due Date Value Actual       :"+actEntryPageHeaderFieldsDueDate      +"  Value Expected : "+expEntryPageHeaderFieldsDueDate);	
		System.out.println("Entry Page Header Local Exch Rate Value Actual:"+actEntryPageHeaderFieldsLocalExchRate+"  Value Expected : "+expEntryPageHeaderFieldsLocalExchRate);
		System.out.println("Entry Page Header Currency Value Actual       :"+actEntryPageHeaderFieldsCurrency     +"  Value Expected : "+expEntryPageHeaderFieldsCurrency);
		System.out.println("Entry Page Header Exch Rate Value Actual      :"+actEntryPageHeaderFieldsExchRate     +"  Value Expected : "+expEntryPageHeaderFieldsExchRate);
		System.out.println("Entry Page Header Warehouse Value Actual      :"+actEntryPageHeaderFieldsPlaceSupply  +"  Value Expected : "+expEntryPageHeaderFieldsPlaceSupply);	
		System.out.println("Entry Page Header Test Value Actual           :"+actEntryPageHeaderFieldsJurisdiction +"  Value Expected : "+expEntryPageHeaderFieldsJurisdiction);
		
		
		if(actEntryPageHeaderFieldsDocNumber==expEntryPageHeaderFieldsDocNumber && actEntryPageHeaderFieldsDate==expEntryPageHeaderFieldsDate 
				
				&& actEntryPageHeaderFieldsVendorAc==expEntryPageHeaderFieldsVendorAc && actEntryPageHeaderFieldRaiseReceipt==expEntryPageHeaderFieldRaiseReceipt
				&& actEntryPageHeaderFieldsDepartment==expEntryPageHeaderFieldsDepartment && actEntryPageHeaderFieldsDueDate==expEntryPageHeaderFieldsDueDate
				&& actEntryPageHeaderFieldsLocalExchRate==expEntryPageHeaderFieldsLocalExchRate && actEntryPageHeaderFieldsCurrency==expEntryPageHeaderFieldsCurrency
				&& actEntryPageHeaderFieldsPlaceSupply==expEntryPageHeaderFieldsPlaceSupply
				&& actEntryPageHeaderFieldsJurisdiction==expEntryPageHeaderFieldsJurisdiction)
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 89, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 89, 9, resFail);
			return false;
		}

	}
	
		
	public boolean checkSalesVoucherNewEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherBodyItemName));
		
        // Actual
		boolean actBodyItemName         =voucherBodyItemName.isDisplayed();
		boolean actBodyUnitName         =voucherBodyUnitsName.isDisplayed();
		boolean actBodyAQName           =voucherBodyAQName.isDisplayed();
		boolean actBodyFQName           =voucherBodyFQName.isDisplayed();
		boolean actBodyRDName           =voucherBodyRDName.isDisplayed();
		boolean actBodyAVGRate          =voucherBodyAvgRateName.isDisplayed();
					
					
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", voucherBodyBatchName);
		
		boolean actBodyAVGRateO         =voucherBodyAvgRate_o_Name.isDisplayed();
		boolean actBodyQtyName          =voucherBodyQtyName.isDisplayed();
		boolean actBodyLinkSalesOrder   =voucherBodyLinkSalesOrder.isDisplayed();
		boolean actBodyQtyToRelease     =voucherBodyQtyToReleaseName.isDisplayed();
		boolean actBodyRate             =voucherBodyRateName.isDisplayed();
		boolean actBodyGross            =voucherBodyGrossName.isDisplayed();
		boolean actBodyBatch            =voucherBodyBatchName.isDisplayed();
		
		
		 JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		 js.executeScript("arguments[0].scrollIntoView();", voucherBodyRemarksName);
		
		
		boolean actBodyBins             =voucherBodyBinsName.isDisplayed();
		boolean actBodyRMA              =voucherBodyRMAName.isDisplayed();
		boolean actBodyRemarks          =voucherBodyRemarksName.isDisplayed();

		
		// Expected
		boolean expBodyItemName=true; 
		boolean expBodyUnitName=true;
		boolean expBodyQAName=true;
		boolean expBodyFQName=true;
		boolean expBodyRDName=true;
		boolean expBodyAVGRateName=true;
		boolean expBodyAvgRateOName=true;
		boolean expBodyQtyName=true;
		boolean expBodyLinkSOName=true;
		boolean expBodyQtyToReleaseName=true;
		boolean expBodyRateName=true;
		boolean expBodyGrossName=true;
		boolean expBodyBatchName=true;
		boolean expBodyBinsName=true;
		boolean expBodyRMA=true;
		boolean expBodyRemarks=true;
		
		
		System.out.println("************************************* Sales Invoice Entry Page Ribbon Control Options  ********************************************");
		System.out.println("Entry Page Body Value Actual    :"+actBodyItemName+ " Value Expected : "+expBodyItemName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyUnitName+ " Value Expected : "+expBodyUnitName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyAQName+   " Value Expected : "+expBodyQAName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyFQName+   " Value Expected : "+expBodyFQName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRDName+   " Value Expected : "+expBodyRDName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyAVGRate+  " Value Expected : "+expBodyAVGRateName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyAVGRateO+ " Value Expected : "+expBodyAvgRateOName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyQtyName+  " Value Expected : "+expBodyQtyName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRate+     " Value Expected : "+expBodyRateName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyGross+    " Value Expected : "+expBodyGrossName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBatch+    " Value Expected : "+expBodyBatchName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyBins+     " Value Expected : "+expBodyBinsName);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRMA+      " Value Expected : "+expBodyRMA);
		System.out.println("Entry Page Body Value Actual    :"+actBodyRemarks+  " Value Expected : "+expBodyRemarks);
		
		if(actBodyItemName==expBodyItemName && actBodyUnitName==expBodyUnitName && actBodyAQName==expBodyQAName && actBodyFQName==expBodyFQName
				&& actBodyRDName==expBodyRDName && actBodyAVGRate==expBodyAVGRateName && actBodyAVGRateO==expBodyAvgRateOName 
				&& actBodyQtyName==expBodyQtyName && actBodyRate==expBodyQtyName && actBodyGross==expBodyGrossName
				&& actBodyBatch==expBodyBatchName && actBodyBins==expBodyBinsName && actBodyRMA==expBodyRMA && actBodyRemarks==expBodyRemarks)
		{
			
			System.out.println(" Test Pass: Displayed Entry page Body Fileds ");
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			excelReader.setCellData(xlfile, "Sheet6", 273, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail:  Not Displayed Entry page Body Fileds ");
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			excelReader.setCellData(xlfile, "Sheet6", 273, 9, resFail);
			return false;
		}
			
	}

		
		


	public boolean checkSalesVoucherNewEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
		jumpToFooterBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("****************************&&7************* checkOpeningStocksNewEntryPageFooterFields  ***************************************************");
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+"   Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+"  Value Expected : "+expEntryPageFooterFieldsNetAmount);

		if(actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 14, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 14, 9, resFail);
			return false;
		}
	}



	public boolean checkSalesVoucherNewEntryPageDocumentNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
		jumpToHeaderSectionBtn.click();
		

        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		String actEntryPageGetDocumentNumberValue  =documentNumberTxt.getAttribute("value");

		String expEntryPageGetDocumentNumberValue  ="1";

		System.out.println("*************************************** checkOpeningStocksNewEntryPageDocumentNumber ****************************************************");
		System.out.println("Entry Page Document Number Value Actual  : "+actEntryPageGetDocumentNumberValue+"   Value Expected : "+expEntryPageGetDocumentNumberValue);

		
		if(actEntryPageGetDocumentNumberValue.equalsIgnoreCase(expEntryPageGetDocumentNumberValue))
		{
			System.out.println("Test Pass : Document No is 1");
			excelReader.setCellData(xlfile, "Sheet6", 15, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 15, 9, resFail);
			return false;
		}
	}


	
	

	public boolean checkSalesVoucherNewEntryPageInfoSideBar() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		boolean actInforSideBarCustomization            =infoSideBarCustomizeBtn.isDisplayed();
		boolean actInforSideBarCustomizationExpandButton=infoSideBarMinimizeExpandBtn.isDisplayed();
		boolean expInforSideBarCustomization            =true;
		boolean expInforSideBarCustomizationExpandButton=true;
		
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageDocumentNumber  ***************************************************");
		System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomization               +" Value Expected : "+expInforSideBarCustomization);
		System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomizationExpandButton   +" Value Expected : "+expInforSideBarCustomizationExpandButton);
		
		if(actInforSideBarCustomization==expInforSideBarCustomization && actInforSideBarCustomizationExpandButton==expInforSideBarCustomizationExpandButton)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 93, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 93, 9, resFail);
			return false;
		}
	}



	public boolean checksalesVoucherNewEntryPageInfoSideBarCustomizeBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
		infoSideBarCustomizeBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));

		boolean actInfoCustomizationSearchTxt        =customizeSearchTxt.isDisplayed();
		boolean actInfoCustomizationSearchBtn        =customizeSearchBtn.isDisplayed();
		boolean actInfoCustomizationCloseBtn         =customizeCloseBtn.isDisplayed();
		boolean actInfoCustomizationSaveBtn          =customizeSaveBtn.isDisplayed();
		boolean actInfoCustomizationCancelBtn        =customizeCancelBtn.isDisplayed();
		boolean actInfoCustomizationGraphBtn         =graphBtn.isDisplayed();
		boolean actInfoCustomizationReportBtn        =reportBtn.isDisplayed();
		boolean actInfoCustomizationInfopanelBtn     =infoPanelBtn.isDisplayed();
		boolean actInfoCustomizationWorkFlowBtn      =workFlowBtn.isDisplayed();
		boolean actInfoCustomizationOtherDashletsBtn =otherDashlets.isDisplayed();

		boolean expInfoCustomizationSearchTxt        =true;
		boolean expInfoCustomizationSearchBtn        =true;
		boolean expInfoCustomizationCloseBtn         =true;
		boolean expInfoCustomizationSaveBtn          =true;
		boolean expInfoCustomizationCancelBtn        =true;
		boolean expInfoCustomizationGraphBtn         =true;
		boolean expInfoCustomizationReportBtn        =true;
		boolean expInfoCustomizationInfopanelBtn     =true;
		boolean expInfoCustomizationWorkFlowBtn      =true;
		boolean expInfoCustomizationOtherDashletsBtn =true;

		
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarCustomizeBtn  ***************************************************");
		System.out.println("Entry Page Info Panel Search Txt Value Actual : "+actInfoCustomizationSearchTxt        +" Value Expected : "+expInfoCustomizationSearchTxt);
		System.out.println("Entry Page Info Panel Search Btn Value Actual : "+actInfoCustomizationSearchBtn        +" Value Expected : "+expInfoCustomizationSearchBtn);
		System.out.println("Entry Page Info Panel Close Btn Value Actual  : "+actInfoCustomizationCloseBtn         +" Value Expected : "+expInfoCustomizationCloseBtn);
		System.out.println("Entry Page Info Panel Save Btn Value Actual   : "+actInfoCustomizationSaveBtn          +" Value Expected : "+expInfoCustomizationSaveBtn);
		System.out.println("Entry Page Info Panel Cancel Value Actual     : "+actInfoCustomizationCancelBtn        +" Value Expected : "+expInfoCustomizationCancelBtn);
		System.out.println("Entry Page Info Panel Graph Value Actual      : "+actInfoCustomizationGraphBtn         +" Value Expected : "+expInfoCustomizationGraphBtn);
		System.out.println("Entry Page Info Panel Report Value Actual     : "+actInfoCustomizationReportBtn        +" Value Expected : "+expInfoCustomizationReportBtn);
		System.out.println("Entry Page Info Panel Value Actual            : "+actInfoCustomizationInfopanelBtn     +" Value Expected : "+expInfoCustomizationInfopanelBtn);
		System.out.println("Entry Page Info Panel WorkFlow Btn Actual     : "+actInfoCustomizationWorkFlowBtn      +" Value Expected : "+expInfoCustomizationWorkFlowBtn);
		System.out.println("Entry Page Info Panel Dashlet Btn Actual      : "+actInfoCustomizationOtherDashletsBtn +" Value Expected : "+expInfoCustomizationOtherDashletsBtn);
		
		
		if(actInfoCustomizationSearchTxt==expInfoCustomizationSearchTxt && actInfoCustomizationSearchBtn==expInfoCustomizationSearchBtn && actInfoCustomizationCloseBtn==expInfoCustomizationCloseBtn 
				&& actInfoCustomizationSaveBtn==expInfoCustomizationSaveBtn && actInfoCustomizationGraphBtn==expInfoCustomizationGraphBtn
				&& actInfoCustomizationReportBtn==expInfoCustomizationReportBtn && actInfoCustomizationInfopanelBtn==expInfoCustomizationInfopanelBtn  
				&& actInfoCustomizationWorkFlowBtn==expInfoCustomizationWorkFlowBtn && actInfoCustomizationOtherDashletsBtn==expInfoCustomizationOtherDashletsBtn)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 94, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 94, 9, resFail);
			return false;
		}
	}
		


	public boolean checkSalesVoucherNewEntryPageInfoSideBarGraphOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(graphBtn));
		graphBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGraphOption));
	
		boolean actNewGraphOption       =newGraphOption.isDisplayed();
		boolean expNewGraphOption       =true;
		
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarGraphOption  *****************************************");
		System.out.println("Entry Page Open Info Side Graph Value Actual  : "+actNewGraphOption               +" Value Expected : "+expNewGraphOption);
		
		if(actNewGraphOption==expNewGraphOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 95, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 95, 9, resFail);
			return false;
		}
	}

	
	public boolean checkSalesVoucherNewEntryPageInfoSideBarReportOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportBtn));
		
		reportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReportOption));
		
		boolean actNewReportOption       =newReportOption.isDisplayed();
		boolean expNewReportOption       =true;
		
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarReportOption  *****************************************");
		System.out.println("Entry Page Open Info Side Report Value Actual  : "+actNewReportOption               +" Value Expected : "+expNewReportOption);
		
		
		if(actNewReportOption==expNewReportOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 96, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 96, 9, resFail);
			return false;
		}
	}
		
	
	
	public boolean checkSalesVoucherNewEntryPageInfoSideBarInfoPanelOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelBtn));
		
		infoPanelBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newInfoPanelOption));
		
		boolean actNewInfoPanelOption       =newInfoPanelOption.isDisplayed();
		boolean expNewInfoPanelOption       =true;
		
	
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarInfoPanelOption  *****************************************");
		System.out.println("Entry Page Open Info Side Info Panel Value Actual  : "+actNewInfoPanelOption               +" Value Expected : "+expNewInfoPanelOption);
		
		
		
		if(actNewInfoPanelOption==expNewInfoPanelOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 97, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 97, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkSalesVoucherNewEntryPageInfoSideBarWorkFlowOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowBtn));
		
		workFlowBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newWorkFlowOption));
		
		boolean actNewWorkFlowOption       =newWorkFlowOption.isDisplayed();
		boolean expNewWorkFlowOption       =true;
		
	
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarWorkFlowOption  *****************************************");
		System.out.println("Entry Page Open Info Side Workflow Value Actual  : "+actNewWorkFlowOption               +" Value Expected : "+expNewWorkFlowOption);
		
		
		if(actNewWorkFlowOption==expNewWorkFlowOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 98, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 98, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkSalesVoucherNewEntryPageInfoSideBarOtherDashletsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(otherDashlets));
		
		otherDashlets.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentInfo));
		
		boolean actDocumentInfoInOtherDashletsOption       =documentInfo.isDisplayed();
		boolean expDocumentInfoInOtherDashletsOption       =true;
		
	
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarOtherDashletsOption  *****************************************");
		System.out.println("Entry Page Open Info Side Other Dashlets Value Actual  : "+actDocumentInfoInOtherDashletsOption               +" Value Expected : "+expDocumentInfoInOtherDashletsOption);

		
		if(actDocumentInfoInOtherDashletsOption==expDocumentInfoInOtherDashletsOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 99, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 99, 9, resFail);
			return false;
		}
	}
		

	public boolean checkSalesVoucherNewEntryPageInfoSideBarSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));
		customizeSearchTxt.click();
	    customizeSearchTxt.sendKeys("Document Info");
	   
	    Thread.sleep(2000);
	  
	    customizeSearchTxt.sendKeys(Keys.TAB);
	   
	     
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchDocumentInfo));
		
		boolean actSearchDocumentInfo       =searchDocumentInfo.isDisplayed();
		boolean expSearchDocumentInfo       =true;
		
	
		System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarSearch  *****************************************");
		System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

		
		if(actSearchDocumentInfo==expSearchDocumentInfo)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 100, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 283, 9, resFail);
			return false;
		}
	}
	
	
	
		
	
	
	
	public boolean checkSalesVoucherNewInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\salesVoucherInfoPanel.exe");
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCreateDashlet));
		
		boolean actAddCreateDashlet       =addCreateDashlet.isDisplayed();
		boolean expAddCreateDashlet       =true;
		
	
		System.out.println("***************************************** checkPurchaseVoucherNewInfoPanelDashlet  *****************************************");
		System.out.println("Entry Page Open Info Side Add Create Dashlet Value Actual  : "+actAddCreateDashlet               +" Value Expected : "+expAddCreateDashlet);

		
		
		if(actAddCreateDashlet==expAddCreateDashlet)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 101, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 101, 9, resFail);
			return false;
		}
	}
	
	
		
	
	
	public boolean checkSalesVoucherNewSaveInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSaveBtn));
		
		customizeSaveBtn.click();
			
		String expSaveInfoPanelMessage       ="Dashboard Layout Saved Successfully.";
		
		String validationMessage=checkValidationMessage(expSaveInfoPanelMessage);
		
		System.out.println("***************************************** checkPurchaseVoucherNewSaveInfoPanelDashlet  *****************************************");
		System.out.println("Entry Page Open Info Side New Save Value Actual  : "+validationMessage+" Value Expected : "+expSaveInfoPanelMessage);	
		
		if(validationMessage.equalsIgnoreCase(expSaveInfoPanelMessage) && dashletI.isDisplayed())
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			
			excelReader.setCellData(xlfile, "Sheet6", 102, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			
			excelReader.setCellData(xlfile, "Sheet6", 102, 9, resFail);
			return false;
		}	
	}
	



	
	public boolean checkSalesVoucherNewDateFieldLessThanCompanyAccountingDate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();
		
		dateTxt.sendKeys(Keys.END);
		
		dateTxt.sendKeys(Keys.BACK_SPACE);
		Thread.sleep(2000);
		dateTxt.sendKeys(Keys.BACK_SPACE);
		
		String expSaveDateValidationMessage       ="Voucher date cannot be less than Accounting date";
					
		String validationMessage=checkValidationMessage(expSaveDateValidationMessage);
		
		System.out.println("*********************************************** checkPurchaseVoucherNewDateFieldLessThanCompanyAccountingDate  ********************************************");
		System.out.println("Entry Page Change to Voucher Date To Less Than Accounting Date Value Actual  : "+validationMessage+" Value Expected : "+expSaveDateValidationMessage);	
				
		if(validationMessage.equalsIgnoreCase(expSaveDateValidationMessage) && dashletI.isDisplayed())
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			excelReader.setCellData(xlfile, "Sheet6", 103, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			excelReader.setCellData(xlfile, "Sheet6", 103, 9, resFail);
			return false;
		}	
	}
	
		
	//Mandartory Checking
		

	public boolean checkSalesVoucherNewSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		
		String actSaveMandatoryWithNoInputValidationMessage       =errorMessage.getText();
		String expSaveMandatoryWithNoInputValidationMessageOne    ="Controls marked with arrow mark, require Values";
		String expSaveMandatoryWithNoInputValidationMessageTwo    ="Main -> SalesAC";
		String expSaveMandatoryWithNoInputValidationMessageThree  ="Main -> CustomerAC";
	/*	String expSaveMandatoryWithNoInputValidationMessageFour   ="Main -> Currency";*/
		String expSaveMandatoryWithNoInputValidationMessageFive   ="Main -> Department";
		String expSaveMandatoryWithNoInputValidationMessageSix    ="Main -> Warehouse";
		


		
		System.out.println("*********************************************** checkSalesVoucherNewSaveWithoutMandatoryFields  ********************************************");
		System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessageOne+expSaveMandatoryWithNoInputValidationMessageTwo+expSaveMandatoryWithNoInputValidationMessageThree/*+expSaveMandatoryWithNoInputValidationMessageFour*/+expSaveMandatoryWithNoInputValidationMessageFive+expSaveMandatoryWithNoInputValidationMessageSix);	
		
		if(actSaveMandatoryWithNoInputValidationMessage.startsWith(expSaveMandatoryWithNoInputValidationMessageOne) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageTwo) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageThree) 
				/*&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageFour)*/
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageFive)
				&& actSaveMandatoryWithNoInputValidationMessage.endsWith(expSaveMandatoryWithNoInputValidationMessageSix))
		{
		
			System.out.println("Test Pass : Error Message Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resFail);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			return false;
		}
	}

	@FindBy(xpath="//tbody[@id='id_header_3_table_data_body']/tr")
	private static List<WebElement> salesAccountListCount; 

	
	public boolean checkSalesVoucherNewSalesOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		salesAccountTxt.sendKeys(Keys.TAB);
	    
		salesAccountTxt.sendKeys(Keys.SHIFT,Keys.TAB);
		
		WebElement options=salesAccountTxt;
		
		ArrayList<String>  actSalesAccount = new ArrayList<String>(); 
		
		actSalesAccount.add("Legal Fee");
		    
		actSalesAccount.add("Sales - Computers");
		    
		actSalesAccount.add("Sales - Electronics");
		    
		actSalesAccount.add("Sales - Home Appliances");
		   
		actSalesAccount.add("Uninvoiced DO");
		    
		actSalesAccount.add("Utility charges");
		    
		ArrayList<String> 
		
		expSalesAccount = new ArrayList<String>(); 
		
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expSalesAccount.add(data);
			
		}
		
		System.err.println(expSalesAccount);
		
		boolean actSalesAccountValue=actSalesAccount.equals(expSalesAccount);
	    boolean expSalesAccountValue=true;
		
	    System.out.println("********************************************* checkSalesVoucherSalesOptions  ********************************************************");
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actSalesAccount       +"  Value Expected : "+expSalesAccount);
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+ actSalesAccountValue +"  Value Expected : "+expSalesAccountValue);
	    
	    	
	   if(actSalesAccountValue==expSalesAccountValue)
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}
		
	}
		


   public boolean checkSalesVoucherNewSaveWithSalesInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
   {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		String actSaveMandatoryWithNoInputValidationMessage       =errorMessage.getText();
		String expSaveMandatoryWithNoInputValidationMessageOne    ="Controls marked with arrow mark, require Values";
		String expSaveMandatoryWithNoInputValidationMessageTwo    ="Main -> CustomerAC";
		/*String expSaveMandatoryWithNoInputValidationMessageThree  ="Main -> Currency";*/
		String expSaveMandatoryWithNoInputValidationMessageFour   ="Main -> Department";
		String expSaveMandatoryWithNoInputValidationMessageFive   ="Main -> Warehouse";
	
		
		System.out.println("*********************************************** checkSalesVoucherNewSaveWithoutMandatoryFields  ********************************************");
		System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessageOne+expSaveMandatoryWithNoInputValidationMessageTwo/*+expSaveMandatoryWithNoInputValidationMessageThree*/+expSaveMandatoryWithNoInputValidationMessageFour+expSaveMandatoryWithNoInputValidationMessageFive);	
		
		if(actSaveMandatoryWithNoInputValidationMessage.startsWith(expSaveMandatoryWithNoInputValidationMessageOne) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageTwo) 
				/*&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageThree) */
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageFour)
				&& actSaveMandatoryWithNoInputValidationMessage.endsWith(expSaveMandatoryWithNoInputValidationMessageFive))
		{
			System.out.println("Test Pass : Error Message Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resFail);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			return false;
		}
	}
	
   @FindBy(xpath="//tbody[@id='id_header_4_table_data_body']/tr")
	private static List<WebElement> customerAccountListCount; 
	

   public boolean checkSalesVoucherNewCustomerOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
   {
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		customerAccountTxt.sendKeys(Keys.SPACE);
		
		WebElement options=customerAccountTxt;
		
		ArrayList<String>  actCustomerAccount= new ArrayList<String>(); 
	
		actCustomerAccount.add("Bank");
	    
		actCustomerAccount.add("Cash");
	    
		actCustomerAccount.add("Customer A");
	    
		actCustomerAccount.add("Customer B");
		   		   
		actCustomerAccount.add("Customer C");
	    
		actCustomerAccount.add("Customer Display CD For Each Account One");
	    
		actCustomerAccount.add("Customer Display CD For Each Account Three");
	    
		actCustomerAccount.add("Customer Display CD For Each Account Two");
	    
		actCustomerAccount.add("Customer Update");
	    
		ArrayList<String> 
		
		expCustomerAccount = new ArrayList<String>(); 
		
		int count=customerAccountListCount.size();

		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=customerAccountListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expCustomerAccount.add(data);
			
		}
		
		
		System.out.println("actCustomerAccount"+actCustomerAccount);
		
		System.out.println("expCustomerAccount"+expCustomerAccount);
		
		boolean actCustomerAccountValue=actCustomerAccount.equals(expCustomerAccount);
		boolean expCustomerAcountValue=true;
	   
		System.out.println("********************************************* checkSalesVoucherCustomerOptions  ********************************************************");
	    System.out.println("Entry Page Warehouse Masters Value Actual  : "+actCustomerAccount       +"  Value Expected : "+expCustomerAccount);
	    System.out.println("Entry Page Warehouse Masters Value Actual  : "+ actCustomerAccountValue +"  Value Expected : "+expCustomerAcountValue);
		    
		
		
	   if(actCustomerAccountValue==expCustomerAcountValue)
		{
			System.out.println("Test Pass : All Customer Account Fileds are Displayed  ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : All Customer Account Fileds are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}
		
	}



   public boolean checkSalesVoucherNewSaveWithCustomerInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
   {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		String actSaveMandatoryWithNoInputValidationMessage        =errorMessage.getText();
		String expSaveMandatoryWithNoInputValidationMessageOne     ="Controls marked with arrow mark, require Values";
		/*String expSaveMandatoryWithNoInputValidationMessageTwo     ="Main -> Currency";*/
		String expSaveMandatoryWithNoInputValidationMessageThree   ="Main -> Department";
		String expSaveMandatoryWithNoInputValidationMessageFour    ="Main -> Warehouse";
	
		
		System.out.println("*********************************************** checkSalesVoucherNewSaveWithoutMandatoryFields  ********************************************");
		System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessageOne/*+expSaveMandatoryWithNoInputValidationMessageTwo*/+expSaveMandatoryWithNoInputValidationMessageThree+expSaveMandatoryWithNoInputValidationMessageFour);	
		
		if(actSaveMandatoryWithNoInputValidationMessage.startsWith(expSaveMandatoryWithNoInputValidationMessageOne) 
				/*&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageTwo) */
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageThree) 
				&& actSaveMandatoryWithNoInputValidationMessage.endsWith(expSaveMandatoryWithNoInputValidationMessageFour))
		{
		
		
			System.out.println("Test Pass : Error Message Displayed");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resPass);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();
			
			getWaitForAlert();
			
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resFail);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();
			
			getWaitForAlert();
			
			getAlert().accept();
			
			return false;
		}
	}
	


      //Credit Days of Customer to Test Due Date (Customer with 0 Credit Days)
	   
	 public boolean checkDueDateOptionForCustomerAccountCreditDaysAs0() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
	    excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		
		int customercount=customerAccountListCount.size();
		
		System.err.println(customercount);
		
		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("CUSTOMER C"))
			{
				customerAccountListCount.get(i).click();
				
				break;
			}
		}
		
		customerAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
		voucherHeaderDueDate.click();

        String actdata=dateTxt.getAttribute("value");
		 
        String expdata=voucherHeaderDueDate.getAttribute("value");
        
    	System.out.println("*********************************************** checkSalesVoucherNewCustomer with 0 Credit Days  ********************************************");
		System.out.println("Entry Page Input Customer with 0 credit Days  : "+actdata  +" Value Expected : "+expdata);	
	

		if(actdata.equalsIgnoreCase(expdata))
		{
			System.out.println("Test Pass : Date Displayed as Current Date ");
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Date Displayed as Current Date");
			
			return false;
		}
		   
	}



	// Credit Days checking with selecting credit days as 4
	 public boolean checkDueDateOptionForCustomerAccountAsCustomerDisplayCDForEachAccountThreeCreditDays4() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
	    excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys(Keys.SPACE);
		
		int customercount=customerAccountListCount.size();
		
		System.err.println(customercount);
		
		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Customer Display CD For Each Account Three"))
			{
				customerAccountListCount.get(i).click();
				
				break;
			}
		}
		
		customerAccountTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
		voucherHeaderDueDate.click();
	
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
	    System.out.println(df.format(date));
	   
	    String docdate = df.format(date);  
	    
		Calendar c = Calendar.getInstance();
	
		c.add(Calendar.DAY_OF_MONTH, 4);  
	
		String actCustomerDueDate = df.format(c.getTime());  
	
		String expCustomerDueDate=voucherHeaderDueDate.getAttribute("value");
		
	 	System.out.println("*********************************************** checkSalesVoucherNewCustomer with 4 Credit Days  ********************************************");
		System.out.println("Entry Page Input Customer with 4 credit Days  : "+actCustomerDueDate  +" Value Expected : "+expCustomerDueDate);	

	
		if (actCustomerDueDate.equalsIgnoreCase(expCustomerDueDate)) 
		{
			System.out.println("Test Pass: Due Date is As Expected " );
			return  true;
		}
		else
		{
			System.out.println("Test Fail: Due Date is As Expected " );
			return  false;
		}	
	}
 

			

	
	// Credit Days for the Customer equal to 3
	public boolean checkDueDateOptionForCustomerAccountAsCustomerUpdateCreditDays3() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	    excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys(Keys.SPACE);
		
		int customercount=customerAccountListCount.size();
		
		System.err.println(customercount);
		
		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Customer Update"))
			{
				customerAccountListCount.get(i).click();
				
				break;
			}
		}
		
		customerAccountTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
		voucherHeaderDueDate.click();

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
	    System.out.println(df.format(date));
	   
	    String docdate = df.format(date);  
	    
		Calendar c = Calendar.getInstance();

		c.add(Calendar.DAY_OF_MONTH, 3);  
	
		String actCustomerDueDate = df.format(c.getTime());  
		String expCustomerDueDate=voucherHeaderDueDate.getAttribute("value");
	
		
		System.out.println("*********************************************** checkSalesVoucherNewCustomer with 3 Credit Days  ********************************************");
		System.out.println("Entry Page Input Customer with 4 credit Days  : "+actCustomerDueDate  +" Value Expected : "+expCustomerDueDate);	
	
	
		
		
		if (actCustomerDueDate.equalsIgnoreCase(expCustomerDueDate)) 
		{
			System.out.println("Test Pass: Due Date is As Expected " );
			return  true;
		}
		else
		{
			System.out.println("Test Fail: Due Date is As Expected " );
			return  false;
		}
	}



     //Currency and Warehouse and Department
	
	
	@FindBy(xpath="//tbody[@id='id_header_10_table_data_body']/tr")
	private static List<WebElement> currencyListCount; 
	 
	public boolean checkSalesVoucherNewCurrencyHasNotDefinedOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		voucherHeaderDueDate.click();
		voucherHeaderDueDate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
		
		WebElement options=voucherHeaderCurrency;
		
		ArrayList<String>  actVoucherHeaderCurrency= new ArrayList<String>(); 
	
		actVoucherHeaderCurrency.add("INR");
	    
		actVoucherHeaderCurrency.add("USD");
	    
		actVoucherHeaderCurrency.add("AED");
	      		    
		ArrayList<String> 
		
        expVoucherHeaderCurrency = new ArrayList<String>(); 
		
		
		int count=currencyListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
			System.err.println("IN FOR LOOP : "+data);
			expVoucherHeaderCurrency.add(data);
			
		}
		
		System.err.println(expVoucherHeaderCurrency);
		
		voucherHeaderCurrency.sendKeys(Keys.TAB);

		
		System.out.println("actVoucherHeaderCurrency"+actVoucherHeaderCurrency);
		
		System.out.println("expVoucherHeaderCurrency"+expVoucherHeaderCurrency);
		
		boolean actVoucherHeaderCurrencyValue=actVoucherHeaderCurrency.equals(expVoucherHeaderCurrency);
		
		boolean expVoucherHeaderCurrencyValue=false;
		
		
		

		System.out.println("********************************************* checkSalesVoucherNewCurrencyHasNotDefinedOptions  ********************************************************");
		System.out.println("Entry Page Currency Has Not Define Value Actual  : "+actVoucherHeaderCurrency+       " Value Expected : "+expVoucherHeaderCurrency);
		System.out.println("Entry Page Currency Has Not Define Value Actual  : "+actVoucherHeaderCurrencyValue+  " Value Expected : "+expVoucherHeaderCurrencyValue);
		
	   
	   if(actVoucherHeaderCurrencyValue==expVoucherHeaderCurrencyValue)
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}	
	}
		
	@FindBy(xpath="//tbody[@id='id_header_268435460_table_data_body']/tr")
    private static List<WebElement> wareHouseListCount;
	 
	public boolean checkSalesVoucherNewWarehouse() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		
		wareHouseTxt.sendKeys(Keys.SPACE);
		
		WebElement options=wareHouseTxt;
		
		ArrayList<String>  actWarehouseList= new ArrayList<String>(); 
	
		actWarehouseList.add("HYDERABAD");
	    
		actWarehouseList.add("MUMBAI");
	    
		actWarehouseList.add("SECUNDERABAD");
	   
		actWarehouseList.add("WH1");   		    
	    
	    
		ArrayList<String> 
		
		expWarehouseList = new ArrayList<String>(); 
		
		int count=wareHouseListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expWarehouseList.add(data);
			
		}
		
		System.err.println(expWarehouseList);
		
		
		System.out.println("actWarehouseList"+actWarehouseList);
		
		System.out.println("expWarehouseList"+expWarehouseList);
		
		boolean actWarhouseValue=actWarehouseList.equals(expWarehouseList);
		boolean expWarehouseValue=true;
	
		System.out.println("*********************************************** checkSalesVoucherNewWarehouse  ********************************************");
		System.out.println("Entry Page Warehouse Value Actual  : "+actWarehouseList  +" Value Expected : "+expWarehouseList);	
		System.out.println("Entry Page Warehouse Value Actual  : "+actWarhouseValue  +" Value Expected : "+expWarehouseValue);
	   
	   if(actWarhouseValue==expWarehouseValue)
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}
	}
 

	public boolean checkSalesVoucherNewSaveWithWarehouseInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		String actSaveMandatoryWithNoInputValidationMessage       =errorMessage.getText();
		String expSaveMandatoryWithNoInputValidationMessageOne    ="Controls marked with arrow mark, require Values";
		String expSaveMandatoryWithNoInputValidationMessageTwo    ="Main -> SalesAC";
		String expSaveMandatoryWithNoInputValidationMessageThree  ="Main -> Department";
		
		System.out.println("*********************************************** checkSalesVoucherNewSaveWithWarehouseInput  ********************************************");
		System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessageOne+expSaveMandatoryWithNoInputValidationMessageTwo+expSaveMandatoryWithNoInputValidationMessageThree);	
		
		if(actSaveMandatoryWithNoInputValidationMessage.startsWith(expSaveMandatoryWithNoInputValidationMessageOne) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageTwo) 
				&& actSaveMandatoryWithNoInputValidationMessage.endsWith(expSaveMandatoryWithNoInputValidationMessageThree))
		{
			System.out.println("Test Pass : Error Message Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test FAil :Error Message  Not Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resFail);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			return false;
		}
	} 
	 
	 

	public boolean checkSalesVoucherNewVouchersEntryPageNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		documentNumberTxt.clear();
		documentNumberTxt.sendKeys("2");
		documentNumberTxt.sendKeys(Keys.TAB);
		
		String actdata=documentNumberTxt.getAttribute("value");
		String expdata="2";
		
		System.out.println("Test Pass : Entered 2 in DOC NO");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
		
		String actdata1=getDriver().switchTo().alert().getText();
		String expdata0="The contents of the voucher are changed.";
		String expdata1="Are you sure that you want to ignore the changes?";
		
		System.out.println(actdata1);
		
		getDriver().switchTo().alert().accept();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actdata2=documentNumberTxt.getAttribute("value");
		String expdata2="1";
		
		if(actdata.equalsIgnoreCase(expdata) && actdata1.startsWith(expdata0) && actdata1.endsWith(expdata1) && actdata2.equalsIgnoreCase(expdata2))
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, "Sheet6", 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 30, 9, resFail);
			return false;
		}
		
	}
	
		
		
	 
	public boolean checkSalesVoucherNewSaveWithCurrencyInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
		voucherHeaderDueDate.click();
		voucherHeaderDueDate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
		
		
		int currencycount=currencyListCount.size();
		
		System.err.println(currencycount);
			
		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
			
			if(data.equalsIgnoreCase("INR"))
			{
				currencyListCount.get(i).click();
				
				break;
			}
		}
			
		voucherHeaderCurrency.sendKeys(Keys.TAB);
		
		String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		String expExchangeRate="1.0000000000";

		System.out.println("*********************************************** checkPurchaseVoucherNewWithCurrencyInputAndExcgRate  ********************************************");
		System.out.println("Entry Page Exchange Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
		
		
		
		if (actExchangeRate.equalsIgnoreCase(expExchangeRate))
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 116, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}	
 
	}
		
		
		

	public boolean checkExchangeRateWithCurrencyWithAED() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		voucherHeaderDueDate.click();
		voucherHeaderDueDate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
		int currencycount=currencyListCount.size();
		
		System.err.println(currencycount);
			
		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
			
			if(data.equalsIgnoreCase("AED"))
			{
				currencyListCount.get(i).click();
				
				break;
			}
		}
			
		voucherHeaderCurrency.sendKeys(Keys.TAB);
		
		
		voucherHeaderExchangeRate.click();
			
		String actSelectionAEDExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		String expSelectionAEDExchangeRate="14.0000000000";
		
		
		System.out.println("*********************************************** checkExchangeRateWithCurrencyWithAED  ********************************************");
		System.out.println("Entry Page AED Selection Exchange Rate Value Actual  : "+actSelectionAEDExchangeRate  +" Value Expected : "+expSelectionAEDExchangeRate);	
		
	
				
		if (actSelectionAEDExchangeRate.equalsIgnoreCase(expSelectionAEDExchangeRate) )
	   {
			System.out.println("Test Pass : Exchange Rate Is Updated ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}	
	}
	
		
		

	public boolean checkExchangeRateWithCurrencyWithUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		voucherHeaderDueDate.click();
		voucherHeaderDueDate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
		int currencycount=currencyListCount.size();
		
		System.err.println(currencycount);
			
		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
			
			if(data.equalsIgnoreCase("USD"))
			{
				currencyListCount.get(i).click();
				
				break;
			}
		}
			
		voucherHeaderCurrency.sendKeys(Keys.TAB);
		
		
		voucherHeaderExchangeRate.click();
		
		String actSelectionUSDExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		String expSelectionUSDExchangeRate="70.0000000000";
		
		
		System.out.println("*********************************************** checkExchangeRateWithCurrencyWithUSD  ********************************************");
		System.out.println("Entry Page USD Selection Exchange Rate Value Actual  : "+actSelectionUSDExchangeRate  +" Value Expected : "+expSelectionUSDExchangeRate);	
		
	
				
		if (actSelectionUSDExchangeRate.equalsIgnoreCase(expSelectionUSDExchangeRate) )		
		{
			System.out.println("Test Pass : Exchange Rate Is Updated ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}	
	}
	
 
	@FindBy(xpath="//tbody[@id='id_header_268435459_table_data_body']/tr")
    private static List<WebElement> departmentListCount;
	 
	 
	public boolean checkSalesVoucherNewDepartment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		
		departmentTxt.sendKeys(Keys.SPACE);
		
		
		WebElement options=departmentTxt;
		
		ArrayList<String> actDepartmentList= new ArrayList<String>(); 
	
		actDepartmentList.add("AMERICA");
	    
		actDepartmentList.add("DUBAI");
	    
		actDepartmentList.add("INDIA");
	   
		actDepartmentList.add("WALES");   		    
	    
		ArrayList<String> 
		
		expDepartmentList = new ArrayList<String>(); 

		int count=departmentListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expDepartmentList.add(data);
			
		}
		
		System.err.println(expDepartmentList);
		
		
		System.out.println("actDepartmentList"+actDepartmentList);
		
		System.out.println("expDepartmentList"+expDepartmentList);
		
		boolean actDepartmentValue=actDepartmentList.equals(expDepartmentList);
		boolean expDepartmentValue=true;
        

		System.out.println("*********************************************** checkSalesVoucherNewDepartment  ********************************************");
		System.out.println("Entry Page Department Value Actual  : "+actDepartmentValue  +" Value Expected : "+expDepartmentValue);	
		
		
	   if(actDepartmentValue==expDepartmentValue)
	   {
		   System.out.println("Test Pass : Error Message Displayed");
		   excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
		   return true;
	   }
	   else
	   {
		   System.out.println("Test Pass : Date is 08/26/2019");
		   excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
		   return false;
	   }
	}
	 
 
	public boolean checkSalesExchangeRateAndLocalExchangeRatewithCurrencyAED() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		voucherHeaderDueDate.click();
		voucherHeaderDueDate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
		int currencycount=currencyListCount.size();
		
		System.err.println(currencycount);
			
		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
			
			if(data.equalsIgnoreCase("AED"))
			{
				currencyListCount.get(i).click();
				
				break;
			}
		}
			
		voucherHeaderCurrency.sendKeys(Keys.TAB);
		
		
		voucherHeaderExchangeRate.click();
		
		String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		String expExchangeRate="14.0000000000";
		
		String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
		String expLocExchangeRate="1.0000000000";
		
		

		System.out.println("*********************************************** checkSalesExchangeRateAndLocalExchangeRatewithCurrencyAED  ********************************************");
		System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
		System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actLocExchangeRate  +" Value Expected : "+expLocExchangeRate);
		
		if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
		{
			System.out.println("Test Pass : Exchange Rate Is Updated ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}	
	}
 
 
	public boolean checkSalesExchangeRateAndLocalExchangeReatewithCurrencyUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		voucherHeaderDueDate.click();
		voucherHeaderDueDate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
		int currencycount=currencyListCount.size();
		
		System.err.println(currencycount);
			
		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
			
			if(data.equalsIgnoreCase("USD"))
			{
				currencyListCount.get(i).click();
				
				break;
			}
		}
			
		voucherHeaderCurrency.sendKeys(Keys.TAB);
		
		
		voucherHeaderExchangeRate.click();
		
		String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		String expExchangeRate="70.0000000000";
		
		String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
		String expLocExchangeRate="5.0000000000";
		

		

		System.out.println("*********************************************** checkSalesExchangeRateAndLocalExchangeRatewithCurrencyUSD  ********************************************");
		System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
		System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actLocExchangeRate  +" Value Expected : "+expLocExchangeRate);
		
		if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
		{
		
			System.out.println("Test Pass : Exchange Rate Is Updated ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}	
	}
		

	public boolean checkSalesExchangeRateAndLocalExchangeReatewithCurrencyINR() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	  
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		voucherHeaderDueDate.click();
		voucherHeaderDueDate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
		int currencycount=currencyListCount.size();
		
		System.err.println(currencycount);
			
		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
			
			if(data.equalsIgnoreCase("INR"))
			{
				currencyListCount.get(i).click();
				
				break;
			}
		}
			
		voucherHeaderCurrency.sendKeys(Keys.TAB);
		
		
		voucherHeaderExchangeRate.click();
			
		String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
		String expExchangeRate="1.0000000000";
		
		String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
		String expLocExchangeRate="0.0700000000";
		
		System.out.println("*********************************************** checkSalesExchangeRateAndLocalExchangeRatewithCurrencyINR  ********************************************");
		System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
		System.out.println("Entry Page Exchange and Local Exchnage Rate Value Actual  : "+actLocExchangeRate  +" Value Expected : "+expLocExchangeRate);
		
		if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
		{
			System.out.println("Test Pass : Exchange Rate Is Updated ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}	
	}
 
	 




	public boolean checkSalesInvoiceNewCloseOptionInEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		getWaitForAlert();
		
		String actdata=getAlert().getText();
		String expdata0="The contents of the voucher are changed.";
		String expdata1="Are you sure that you want to ignore the changes?";
		
		System.out.println("*********************************************** checkSalesInvoiceNewCloseOptionInEntryPage  ********************************************");
		System.out.println("Entry Page Close Option Alert Message Value Actual  : "+actdata  +" Value Expected : "+expdata0+expdata1);	
		
	


		if(actdata.startsWith(expdata0) && actdata.endsWith(expdata1))
		{
			getAlert().accept();
			
			System.out.println("Test Pass : Alert Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 80, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 80, 9, resFail);
			return false;
		}
	}







	
	public boolean checkSavingSalesVoucherNewWithEmptyRows() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expValidationMessage="There should be atleast one row entered.";
		
		String emptyRowsMessage=checkValidationMessage(expValidationMessage);


		System.out.println("*********************************************** checkSavingSalesVoucherNewWithEmptyRows  ********************************************");
		System.out.println("Entry Page Save Without Body Rows Message Value Actual  : "+emptyRowsMessage+" Value Expected : "+expValidationMessage);	
		
		
		if (emptyRowsMessage.equalsIgnoreCase(expValidationMessage))
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
 
	
	@FindBy(xpath="//tbody[@id='id_body_23_table_data_body']/tr")
    private static List<WebElement> itemListCount;

	 
	public boolean checkQtyPreLoadByInputAQFQInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.clear();
		enter_AQTxt.sendKeys("32");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys("39");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyPreload=enter_Quantity.getAttribute("value");
		String expQtyPreload="71.00";
		
		
		System.out.println("*********************************************** checkQtyPreLoadByInputAQFQInFirstRow  ********************************************");
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+actQtyPreload  +" Value Expected : "+expQtyPreload);	

	
		if( actQtyPreload.equalsIgnoreCase(expQtyPreload) )
		{
			System.out.println("Test Pass : Qty Preload Value is displaying Correct");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}
		

	
	
	public boolean checkAvgRateAndAvgRateO() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		String actAvgRate=enter_AvgRate.getAttribute("value");
		String expAvgRate="1.11";  //1
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		String actAvgRateO=enter_AvgRateo.getAttribute("value");
		String expAvgRateO="1.11";  //27
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);

		System.out.println("*********************************************** checkAvgRateAndAvgRateO  ********************************************");
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+actAvgRate  +" Value Expected : "+expAvgRate);	
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+actAvgRateO  +" Value Expected : "+expAvgRateO);
	
	
		if(actAvgRate.equalsIgnoreCase(expAvgRate) && actAvgRateO.equalsIgnoreCase(expAvgRateO) )
		{
			System.out.println("Test Pass : Avg Rate Value is displaying Correct");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Avg Rate Value is displaying Wrong");
			return false;
		}
	}

	
public boolean checkVoucherFirstRowInputValues() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
		Thread.sleep(3000);
			
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.clear();
		enter_AQTxt.sendKeys("5");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys("5");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String ActData=enter_Quantity.getAttribute("value");
		String Expdata="10";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		enter_QuantityToRelease.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("20");
		enter_Rate.sendKeys(Keys.TAB);
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(5000);
		
		String actItemR1C1=select1stRow_1stColumn.getText();
		String actUnitsR1C2Units=select1stRow_2ndColumn.getText();
		String actAQR1C4=select1stRow_4thColumn.getText();
		String actFQR1C5=select1stRow_5thColumn.getText();
		String actQtyeR1C8=select1stRow_8thColumn.getText();
		String actRateR1C11=select1stRow_11thColumn.getText();
			
	
		String expItemR1C1="Batch wa item";
		String expUnitsR1C2Units="Pcs";
		String expAQR1C4="5.00";
		String expFQR1C5="5.00";
		String expQtyR1C8="10.00";
		String expRateR1C11="20.00";
	
		System.out.println("*********************************************** checkVoucherFirstRowInputValues  ********************************************");
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+actItemR1C1  		+" Value Expected : "+expItemR1C1);	
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+actUnitsR1C2Units    +" Value Expected : "+expUnitsR1C2Units);
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+actAQR1C4 			+" Value Expected : "+expAQR1C4);
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+actFQR1C5  			+" Value Expected : "+expFQR1C5);
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+actQtyeR1C8  		+" Value Expected : "+expQtyR1C8);
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+actRateR1C11  		+" Value Expected : "+expRateR1C11);
		
		if(actItemR1C1.equalsIgnoreCase(expItemR1C1) && actUnitsR1C2Units.equalsIgnoreCase(expUnitsR1C2Units) && actAQR1C4.equalsIgnoreCase(expAQR1C4) 
			&& actFQR1C5.equalsIgnoreCase(expFQR1C5) && actQtyeR1C8.equalsIgnoreCase(expQtyR1C8) && actRateR1C11.equalsIgnoreCase(expRateR1C11) )
		{
			System.out.println("Test Pass : Data Entered in first Row");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Data NOT Entered in first Row");
			return false;
		}
	}
	
	
	
		
	

	public boolean checkSaveButtonWithoutInputBatchInSalesVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesVoucherCloseBtn));
		salesVoucherCloseBtn.click();
		
		String expValidationMessageOnBatchColumnBlank="Provide data for mandatory fields Batch";
		
		String validationMessage=checkValidationMessage(expValidationMessageOnBatchColumnBlank);
		
		System.out.println("*********************************************** checkSaveButtonWithoutInputBatchInSalesVoucher  ********************************************");
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+validationMessage+" Value Expected : "+expValidationMessageOnBatchColumnBlank);	
		
		
		if(validationMessage.equalsIgnoreCase(expValidationMessageOnBatchColumnBlank))
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			return false;
		}
	}
		
		

		
	
	public boolean checkBatchPopupScreenInSalesInvoiceNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		select1stRow_13thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		boolean actBatchName					=batchItemName.isDisplayed();
		boolean actBatchTotalQty				=batchTotalQty.isDisplayed();
		boolean actBatchAdjQty					=batchAdjustQty.isDisplayed();
		boolean actBatchBalance					=batchBalance.isDisplayed();
		boolean actBatchExpiryRadioBtn			=batchExipiringInRadioBtn.isDisplayed();
		boolean actBatchExpiryAfterRadioBtn		=batchExipiringAfetrRadioBtn.isDisplayed();
		boolean actBatchWithIn					=batchWithInTxt.isDisplayed();
		boolean actBatchNoR1					=batch_BatchNoRow1.isDisplayed();
		boolean actBatchBaseQtyR1				=batch_BaseQtyRow1.isDisplayed();
		boolean actBatchExpDateR1				=batch_ExpiryInDateRow1.isDisplayed();
		boolean actBatchRateR1					=batch_RateRow1.isDisplayed();
		boolean actBatchAdjQtyR1				=batch_QtyAdjustedRow1.isDisplayed();
		boolean actBatchRefreshBtn				=batchRefreshBtn.isDisplayed();
		boolean actBatchSearchTxt				=batchSearchTxt.isDisplayed();
		boolean actBatchShowAllAvailableBatches	=batchShowAllAvalibleBatches.isDisplayed();
		boolean actBatchCustomization			=batchCustomizationIcon.isDisplayed();
		boolean actBatchFIFO					=batchPickOnFIFOIcon.isDisplayed();
		boolean actBatchOK						=batchOkIcon.isDisplayed();
		boolean actBatchCancel					=batchCancelIcon.isDisplayed();
		boolean actBatchTotalAdjQtyFooter		=batchTotalAdjustedQtyFooter.isDisplayed();

		boolean expBatchName					=true;
		boolean expBatchTotalQty				=true;
		boolean expBatchAdjQty					=true;
		boolean expBatchBalance					=true;
		boolean expBatchExpiryRadioBtn			=true;
		boolean expBatchExpiryAfterRadioBtn		=true;
		boolean expBatchWithIn					=true;
		boolean expBatchNoR1					=true;
		boolean expBatchBaseQtyR1				=true;
		boolean expBatchExpDateR1				=true;
		boolean expBatchRateR1					=true;
		boolean expBatchAdjQtyR1				=true;
		boolean expBatchRefreshBtn				=true;
		boolean expBatchSearchTxt				=true;
		boolean expBatchShowAllAvailableBatches	=true;
		boolean expBatchCustomization			=true;
		boolean expBatchFIFO					=true;
		boolean expBatchOK						=true;
		boolean expBatchCancel					=true;
		boolean expBatchTotalAdjQtyFooter		=true;

	
		System.out.println("*********************************************** checkBatchPopupScreenInSalesInvoiceNew  ********************************************");
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchName                    +" Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchTotalQty                +" Value Expected : "+expBatchTotalQty);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchAdjQty                  +" Value Expected : "+expBatchAdjQty);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchBalance                 +" Value Expected : "+expBatchBalance);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchExpiryRadioBtn          +" Value Expected : "+expBatchExpiryRadioBtn);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchWithIn                  +" Value Expected : "+expBatchWithIn);
		
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchNoR1                    +" Value Expected : "+expBatchNoR1);	
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchBaseQtyR1               +" Value Expected : "+actBatchBaseQtyR1);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchExpDateR1               +" Value Expected : "+expBatchExpDateR1);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchRateR1                  +" Value Expected : "+expBatchRateR1);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchAdjQtyR1                +" Value Expected : "+expBatchAdjQtyR1);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchRefreshBtn              +" Value Expected : "+expBatchRefreshBtn);
		
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchSearchTxt               +" Value Expected : "+expBatchSearchTxt);	
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchShowAllAvailableBatches +" Value Expected : "+expBatchShowAllAvailableBatches);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchCustomization           +" Value Expected : "+expBatchCustomization);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchFIFO                    +" Value Expected : "+expBatchFIFO);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchOK                      +" Value Expected : "+expBatchOK);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchCancel                  +" Value Expected : "+expBatchCancel);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchTotalAdjQtyFooter       +" Value Expected : "+expBatchTotalAdjQtyFooter);
		
		if (actBatchName==expBatchName && actBatchTotalQty==expBatchTotalQty && actBatchAdjQty==expBatchAdjQty && actBatchBalance==expBatchBalance && 
				actBatchExpiryRadioBtn==expBatchExpiryRadioBtn && actBatchWithIn==expBatchWithIn && actBatchNoR1==expBatchNoR1 &&
				actBatchBaseQtyR1==expBatchBaseQtyR1 && actBatchRefreshBtn==expBatchRefreshBtn && actBatchSearchTxt==expBatchSearchTxt && 
				actBatchAdjQtyR1==expBatchAdjQtyR1 && actBatchShowAllAvailableBatches==expBatchShowAllAvailableBatches && actBatchCustomization==expBatchCustomization && 
				actBatchFIFO==expBatchFIFO && actBatchOK==expBatchOK && actBatchCancel==expBatchCancel && actBatchTotalAdjQtyFooter==expBatchTotalAdjQtyFooter) 
		{
			System.out.println(" Test Pass: Batch Window is Dispalyed ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Batch Window is NOt  Dispalyed ");
			return false;
		}
		
	}
	


	public boolean checkBatchScreenPopupBatchValueBeforePickOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
        Thread.sleep(3000);
        
        System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();


		expBatchName="BATCH WA ITEM";
		expTotalQty="10.00";
		expAdjustedQty="0.00";
		expBalance="10.00";
		
		
		expTotalQtyFooter="180.00";
		expTotalAdjustedQtyFooter="0.00";
		
		
		expRow1BatchNo="OSHWA1";
		expRow1BaseQty="120.00";
		expRow1Rate="10.00";
		expRow1AdjustedQty="0";
		
	
		expRow2BatchNo="PVHWA";
		expRow2BaseQty="60.00";	
		expRow2Rate="20.00";
		expRow2AdjustedQty="0";
		
	
		
		System.out.println(actBatchName);
		System.out.println(actTotalQty);
		System.out.println(actAdjustedQty);
		System.out.println(actBalance);
			
		//First Row
		
		System.out.println(actRow1BatchNo);
		System.out.println(actRow1BaseQty);
		System.out.println(actRow1Rate);
		System.out.println(actRow1AdjustedQty);

		
		//Second Row
		
		System.out.println(actRow2BatchNo);
		System.out.println(actRow2BaseQty);
		System.out.println(actRow2Rate);
		System.out.println(actRow2AdjustedQty);

		System.out.println("*********************************************** checkBatchScreenPopupBatchValueBeforePickOption  ********************************************");
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchName                    +" Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQty                     +" Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actAdjustedQty                  +" Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBalance                      +" Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalAdjustedQtyFooter       +" Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQtyFooter               +" Value Expected : "+expTotalQtyFooter);
		
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BatchNo                  +" Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BaseQty                  +" Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1Rate                     +" Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1AdjustedQty              +" Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2BatchNo                  +" Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2BaseQty                  +" Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Value Actual  : "+expRow2Rate                     +" Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2AdjustedQty              +" Value Expected : "+expRow2AdjustedQty);

		if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
			
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Batch fields are As Not  expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			return false;
		}
		
		
	}



	public boolean checkClickOnOkButtonInBatchPupupScreenWithoutInputOfQtyAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
	
		
		getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
		
		String actdata=getDriver().switchTo().alert().getText();
		String expdata="Adjusted Quantity is less then Total Quantity, Do you want to continue with Adjusted Quantity";
	
		System.out.println("*********************************************** checkClickOnOkButtonInBatchPupupScreenWithoutInputOfQtyAdjustment  ********************************************");
		System.out.println("Entry Page Click On Ok in Batch Popup Value Actual  : "+actdata                    +" Value Expected : "+expdata);	
	
					
		if(actdata.equalsIgnoreCase(expdata))
		{
			System.out.println("Test Pass : Alert  Message Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
			getAlert().dismiss();
			return true;
		}
		else
		{
			System.out.println("Test fail : Alert Message NOT Displayed");
			return false;
		}
	}


		
	//Giving the Batch Qty as more than available qty (new changes are modified)
	public boolean checkyInputMoreQtyInAdjustedQtyThanVoucherQtyInBatchPopUp() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow1));
        batch_QtyAdjustedRow1.click();
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
        batch_EnterQtyAdjsuted.click();
        
        batch_EnterQtyAdjsuted.sendKeys("130");
        
        batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
        
		String expdata="Quantity entered is greater than available quantity";
		
		String validationMessage=checkValidationMessage(expdata);
		
		System.out.println("*********************************************** checkyInputMoreQtyInAdjustedQtyThanVoucherQtyInBatchPopUp  ********************************************");
		System.out.println("Entry Page Click On Ok in Batch Popup Value Actual  : "+validationMessage+" Value Expected : "+expdata);	
	
		
		if(validationMessage.equalsIgnoreCase(expdata))
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			return false;
		}
		
		
	}
		
		
	//Here in above giving input as 1300 then in adjusted qty is displaying as 120, should not accept as because in voucher qty is less than adjusted qty
	public boolean checkClickOnOkButtonInBatchPopUpByInputMoreQtyInAdjustedQtyThanVoucherQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
        
		
		/*String expdata="Quantity entered is greater than Batch quantity.";*/
		String expdata="Quantity entered is greater than available quantity.";
		
		String validationMessage=checkValidationMessage(expdata);
		
		System.out.println("***************************** checkClickOnOkButtonInBatchPopUpByInputMoreQtyInAdjustedQtyThanVoucherQty  *********************************");
		System.out.println("Entry Page Click On Ok in Batch Popup Value Actual  : "+validationMessage+" Value Expected : "+expdata);	
	
		
		if(validationMessage.equalsIgnoreCase(expdata))
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			return false;
		}
		
		
	}
	
	
	
	public boolean checkClickOnRefreshOptionInSalesBatchPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
         
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRefreshBtn));
        batchRefreshBtn.click();
        
		System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));

		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();


		expBatchName="BATCH WA ITEM";
		expTotalQty="10";
		expAdjustedQty="0.00";
		expBalance="10.00";
		
		
		expTotalQtyFooter="180.00";
		expTotalAdjustedQtyFooter="0.00";
		
		
		expRow1BatchNo="OSHWA1";
		expRow1BaseQty="120.00";
		expRow1Rate="10.00";
		expRow1AdjustedQty="0";
		
	
		expRow2BatchNo="PVHWA";
		expRow2BaseQty="60.00";	
		expRow2Rate="20.00";
		//expRow2AdjustedQty="0";
		
	
		
		System.out.println(actBatchName);
		System.out.println(actTotalQty);
		System.out.println(actAdjustedQty);
		System.out.println(actBalance);
			
		System.out.println(actTotalQtyFooter);
		System.out.println(actTotalAdjustedQtyFooter);
	
		//First Row
		
		System.out.println(actRow1BatchNo);
		System.out.println(actRow1BaseQty);
		System.out.println(actRow1Rate);
		System.out.println(actRow1AdjustedQty);


		//Second Row
		
		System.out.println(actRow2BatchNo);
		System.out.println(actRow2BaseQty);
		System.out.println(actRow2Rate);
		System.out.println(actRow2AdjustedQty);
		
		
	

		System.out.println("*********************************************** checkClickOnRefreshOptionInSalesBatchPopupScreen  ********************************************");
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBatchName                    +" Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQty                     +" Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actAdjustedQty                  +" Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actBalance                      +" Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalAdjustedQtyFooter       +" Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actTotalQtyFooter               +" Value Expected : "+expTotalQtyFooter);
		
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BatchNo                  +" Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1BaseQty                  +" Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1Rate                     +" Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow1AdjustedQty              +" Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2BatchNo                  +" Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2BaseQty                  +" Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Value Actual  : "+expRow2Rate                     +" Value Expected : "+actRow2Rate);
		//System.out.println("Entry Page Batch Popup Value Actual  : "+actRow2AdjustedQty              +" Value Expected : "+expRow2AdjustedQty);
		
		
         if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				/*&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)*/)


		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Batch fields are As Not  expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			return false;
		}
		
		
	}
	
	// Alert Not Displaying someTimes Error Message Displaying Should Check it 
	public boolean checkClickOnOkButtonInBatchPupupScreenWithoutInputOfQtyAdjustmentAfterRefresh() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
	
		
		if(getIsAlertPresent()==true)
		{
			String actdata=getAlert().getText();
			String expdata="Adjusted Quantity is less then Total Quantity, Do you want to continue with Adjusted Quantity";
			
			System.out.println("*********************************************** checkClickOnOkButtonInBatchPupupScreenWithoutInputOfQtyAdjustmentAfterRefresh  ********************************************");
			System.out.println("Entry Page Click On Ok after Refresh in Batch Popup Value Actual  : "+actdata                    +" Value Expected : "+expdata);	
		
						
			if(actdata.equalsIgnoreCase(expdata))
			{
				System.out.println("Test Pass : Alert  Message Displayed");
				getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
				getAlert().dismiss();
				return true;
			}
			else
			{
				System.out.println("Test fail : Alert Message NOT Displayed");
				return false;
			}
		}
		else
		{
			System.out.println("Test fail : Alert Message NOT Displayed");
			return false;
		}
		
	} 


		
	
	public boolean checkClickOnCancelButtonInBatchWisePopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 
			
		boolean actdata=select1stRow_11thColumn.isDisplayed();
		boolean expdata=true;
		
		System.out.println("*********************************************** checkClickOnCancelButtonInBatchWisePopupScreen  ********************************************");
		System.out.println("Entry Page Click On Cancel in Batch Popup Value Actual  : "+actdata                    +" Value Expected : "+expdata);	
		
		Thread.sleep(2000);	
			
		if (actdata==expdata) 
		{	 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			 select1stRow_11thColumn.click();
			
			System.out.println(" Test Pass: Batch Screen is Closed and Voucher Dispalyed ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Batch Screen is not Closed and Voucher is not  Dispalyed ");
			return false;
		}
		
	}
	
	
	//Here as of now Total adjusted qty is displaying as 0 instead after pick right value
	 public boolean checkBatchWiseScreenPopupWithPickOnFIFO() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		 
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
		 
		Thread.sleep(2000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		 enter_Rate.clear();
		 enter_Rate.sendKeys(Keys.TAB);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		 enter_Gross.sendKeys(Keys.TAB);
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		 batchPickOnFIFOIcon.click();
		 
	     Thread.sleep(3000);
	     
	     System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
	     
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();

		expBatchName="BATCH WA ITEM";
		expTotalQty="10.00";
		expAdjustedQty="10.00";
		expBalance="0.00";
		
		
		expTotalQtyFooter="180.00";
		expTotalAdjustedQtyFooter="10.00";
		
		
		expRow1BatchNo="OSHWA1";
		expRow1BaseQty="120.00";
		expRow1Rate="10.00";
		expRow1AdjustedQty="10.00";
		
	
		expRow2BatchNo="PVHWA";
		expRow2BaseQty="60.00";	
		expRow2Rate="20.00";
		expRow2AdjustedQty="0.00";
		
	
		
		System.out.println(actBatchName);
		System.out.println(actTotalQty);
		System.out.println(actAdjustedQty);
		System.out.println(actBalance);
		
		
		System.out.println(actTotalAdjustedQtyFooter);
		System.out.println(actTotalQtyFooter);
			
		//First Row
		
		System.out.println(actRow1BatchNo);
		System.out.println(actRow1BaseQty);
		System.out.println(actRow1Rate);
		System.out.println(actRow1AdjustedQty);

		
		//Second Row
		
		System.out.println(actRow2BatchNo);
		System.out.println(actRow2BaseQty);
		System.out.println(actRow2Rate);
		System.out.println(actRow2AdjustedQty);
	
		System.out.println("*********************************************** checkBatchWiseScreenPopupWithPickOnFIFO  ********************************************");
		System.out.println("Entry Page Batch Popup Batch Name Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
		
		System.out.println("Entry Page Batch Popup Row1 Batch No Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row2 Batch No Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);


       if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
			&& actBalance.equalsIgnoreCase(expBalance) 
			
			&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
			
			&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
			&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
			
			&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
			&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Batch fields are As Not  expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			return false;
		}

   }
		 
		 
		 
	 public boolean checkFirstRowByClickOnOkButtonInBatchWisePopupScreenPickingBatch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
		 
		 Thread.sleep(2000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
    	 batchOkIcon.click();
    	 
    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
    	 
    	 String actItemR1C1=select1stRow_1stColumn.getText();
		 String actUnitsR1C2=select1stRow_2ndColumn.getText();
		 String actRDR1C3=select1stRow_3rdColumn.getText();
		 String actAQR1C4=select1stRow_4thColumn.getText(); 
		 String actFQR1C5=select1stRow_5thColumn.getText();
		 String actAvgRateR1C6=select1stRow_6thColumn.getText();
		 String actAvgRateOR1C7=select1stRow_7thColumn.getText();
		 String actQtyR1C8=select1stRow_8thColumn.getText();
		 boolean actLSOR1C9=select1stRow_9thColumn.getText().isEmpty();
		 String actQtyToReleaseR1C10=select1stRow_10thColumn.getText();
		 boolean actRateR1C11=select1stRow_11thColumn.getText().isEmpty();
		 String actGrossR1C12=select1stRow_12thColumn.getText();
		 String actBatchR1C13=select1stRow_13thColumn.getText();
		 
		 
		 String expItemR1C1="Batch wa item";
		 String expUnitsR1C2="Pcs";
		 String expRDR1C3="0.00";
		 String expAQR1C4="5.00";
		 String expFQR1C5="5.00";
		 String expAvgRateR1C6="1.11";
		 String expAvgRateoR1C7="1.11";
		 String expQtyR1C8="10.00";
		 boolean expLSOR1C9=true;
		 String expQtyToReleaseR1C10="0.00";
		 boolean expRateR1C11=true;
		 String expGrossR1C12="0.00"; 
		 String expBatchR1C13="OSHWA1";
		
		
		 
		 
		 System.out.println("*********************************** checkFirstRowByClickOnOkButtonInBatchWisePopupScreenPickingBatch  *******************************");
		 System.out.println("Entry Page R1 Item Value Actual           : "+actItemR1C1                    +" Value Expected : "+expItemR1C1);	
		 System.out.println("Entry Page R1 Units Value Actual          : "+actUnitsR1C2                   +" Value Expected : "+expUnitsR1C2);
		 System.out.println("Entry Page RD R1 Value Actual             : "+actRDR1C3                      +" Value Expected : "+expRDR1C3);
		 System.out.println("Entry Page AQ R1 Value Actual             : "+actAQR1C4                      +" Value Expected : "+expAQR1C4);
		 System.out.println("Entry Page FQ R1 Value Actual             : "+actFQR1C5                      +" Value Expected : "+expFQR1C5);
		 System.out.println("Entry Page AVG Rate R1 Value Actual       : "+actAvgRateR1C6                 +" Value Expected : "+expAvgRateR1C6);
			
		 System.out.println("Entry Page AVG RateO R1 Value Actual      : "+actAvgRateOR1C7                +" Value Expected : "+expAvgRateoR1C7);	
		 System.out.println("Entry Page Qty R1 Value Actual            : "+actQtyR1C8                     +" Value Expected : "+expQtyR1C8);
		 System.out.println("Entry Page LSO R1 Value Actual            : "+actLSOR1C9                     +" Value Expected : "+expLSOR1C9);
		 System.out.println("Entry Page Qty To Release Value Actual    : "+actQtyToReleaseR1C10           +" Value Expected : "+expQtyToReleaseR1C10);
			
		 System.out.println("Entry Page Rate R1 Value Actual           : "+actRateR1C11                   +" Value Expected : "+expRateR1C11);	
		 System.out.println("Entry Page Gross R1 Value Actual          : "+actGrossR1C12                  +" Value Expected : "+expGrossR1C12);
		 System.out.println("Entry Page Batch R1 Value Actual          : "+actBatchR1C13                  +" Value Expected : "+expBatchR1C13);
			
		 
		 if(actItemR1C1.equalsIgnoreCase(expItemR1C1) && actUnitsR1C2.equalsIgnoreCase(expUnitsR1C2)
				 && actRDR1C3.equalsIgnoreCase(expRDR1C3) && actAQR1C4.equalsIgnoreCase(expAQR1C4)
				 && actFQR1C5.equalsIgnoreCase(expFQR1C5) && actAvgRateR1C6.equalsIgnoreCase(expAvgRateR1C6)
				 && actAvgRateOR1C7.equalsIgnoreCase(expAvgRateoR1C7) && actQtyR1C8.equalsIgnoreCase(expQtyR1C8)
				 && actLSOR1C9==expLSOR1C9 && actQtyToReleaseR1C10.equalsIgnoreCase(expQtyToReleaseR1C10)
				 && actRateR1C11==expRateR1C11 && actGrossR1C12.equalsIgnoreCase(expGrossR1C12)
				 && actBatchR1C13.equalsIgnoreCase(expBatchR1C13))
		 {
			 System.out.println("Test Pass : Data Is As Expected");
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Fail : Data Is NOT As Expected");
			 return false;
		 }
		 
	 }
	 
		 
		 
	 //Here changing the code by adding to check second row batch before save
	 public boolean checkBatchColumnByChangingTheAQAsMinimumToCurrentAQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
	 
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
 
 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 select1stRow_4thColumn.click();
	
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		 enter_AQTxt.click();
		 enter_AQTxt.clear();
		 enter_AQTxt.sendKeys("4");
		 enter_AQTxt.sendKeys(Keys.TAB);
		 
		
		 JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		 js1.executeScript("arguments[0].scrollIntoView();", voucherBodyRemarksName);
		   
	 
		 boolean actBatchColByChangingQty=select1stRow_13thColumn.getText().isEmpty();
		 boolean expBatchColByChangingQty=true;
		
		 System.out.println("*********************************** checkBatchColumnByChangingTheAQAsMinimumToCurrentAQ  ************************************");
		 System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actBatchColByChangingQty  +" Value Expected : "+expBatchColByChangingQty);	
		
		 if(actBatchColByChangingQty==expBatchColByChangingQty)
		 {
			 System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
			 js1.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
			 js1.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			 return false;
		 }
				    
	 }
	 
		 
	 
	 public boolean checkBatchWisePopAfterChangingTheAQAsMinimumToInputQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		 select1stRow_13thColumn.click();
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		 batchPickOnFIFOIcon.click();
		 
	     Thread.sleep(3000);
			
	     System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
	     
	     String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		 String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
		 String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		 String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		 actBatchName=batchItemName.getText();
		 actTotalQty=batchTotalQty.getText();
		 actAdjustedQty=batchAdjustQty.getText();
		 actBalance=batchBalance.getText();
		 actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		 actTotalQtyFooter=batchTotalQtyFooter.getText();
						
		 actRow1BatchNo=batch_BatchNoRow1.getText();
		 actRow1BaseQty=batch_BaseQtyRow1.getText();
		 //act7=batch_ExpiryInDateRow1.getText();
		 actRow1Rate=batch_RateRow1.getText();
		 actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		 //act10=batch_PurchaseDateRow1.getText();

		
		 actRow2BatchNo=batch_BatchNoRow2.getText();
		 actRow2BaseQty=batch_BaseQtyRow2.getText();
		 //act14=batch_ExpiryInDateRow2.getText();
		 actRow2Rate=batch_RateRow2.getText();
		 actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		 //act17=batch_PurchaseDateRow2.getText();

		 expBatchName="BATCH WA ITEM";
		 expTotalQty="9.00";
		 expAdjustedQty="9.00";
		 expBalance="0.00";
					
		 expTotalQtyFooter="180.00";
		 expTotalAdjustedQtyFooter="9.00";
					
		 expRow1BatchNo="OSHWA1";
		 expRow1BaseQty="120.00";
		 expRow1Rate="10.00";
		 expRow1AdjustedQty="9.00";
			
		 expRow2BatchNo="PVHWA";
		 expRow2BaseQty="60.00";	
		 expRow2Rate="20.00";
		 expRow2AdjustedQty="0.00";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		 batchOkIcon.click();
    	 
		 System.out.println("*************************************** checkBatchWisePopAfterChangingTheAQAsMinimumToInputQty  *************************************");
		 System.out.println("Entry Page Batch Popup Batch Name AQ Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		 System.out.println("Entry Page Batch Popup Total Qty AQ Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		 System.out.println("Entry Page Batch Popup Adjusted AQ Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		 System.out.println("Entry Page Batch Popup Balance AQ Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		 System.out.println("Entry Page Batch Popup Adjusted AQ Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		 System.out.println("Entry Page Batch Popup Total Qty Footer AQ Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
		
		 System.out.println("Entry Page Batch Popup Row1 Batch No AQ Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		 System.out.println("Entry Page Batch Popup Row1 Base Qty AQ Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		 System.out.println("Entry Page Batch Popup Row1 Rate AQ Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		 System.out.println("Entry Page Batch Popup Row1 Adjusted Qty AQ Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		 System.out.println("Entry Page Batch Popup Row2 Batch No AQ Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		 System.out.println("Entry Page Batch Popup Row2 Base Qty AQ Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		 System.out.println("Entry Page Batch Popup Row2 Rate AQ Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		 System.out.println("Entry Page Batch Popup Row2 Adjusted Qty AQ Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
	
		 if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
	
		 {
			 System.out.println("Test Pass : Batch fields are As expected ");
			 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Fail : Batch fields are As Not  expected ");
			 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			 return false;
		 }
		 
	 }
	 
		 
		 
	
		 
	 public boolean checkBatchColumnByChangingTheAQAsMaxmimumToCurrentAQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 { 
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
	 
	     
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 select1stRow_4thColumn.click();
		
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		 enter_AQTxt.click();
		 enter_AQTxt.clear();
		 enter_AQTxt.sendKeys("9");
		 enter_AQTxt.sendKeys(Keys.TAB);
		 
			
		 JavascriptExecutor js1 = (JavascriptExecutor) getDriver();
		 js1.executeScript("arguments[0].scrollIntoView();", voucherBodyRemarksName);
		 
		 Thread.sleep(3000);
		 
		 boolean actBatchColByChangingQty=select1stRow_13thColumn.getText().isEmpty();
		 boolean expBatchColByChangingQty=true;
		 
		 System.out.println("*********************************** checkBatchColumnByChangingTheAQAsMaxmimumToCurrentAQ  ************************************");
		 System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actBatchColByChangingQty  +" Value Expected : "+expBatchColByChangingQty);	
	
		 if(actBatchColByChangingQty==expBatchColByChangingQty)	
		 {
			 System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
			 return false;
		 }
			
	 }
		 
		 
		 
		 public boolean checkBatchWiseScreenPopupByChangingTheQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
			    
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
			 select1stRow_13thColumn.click();
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			 batchPickOnFIFOIcon.click();
			
		     Thread.sleep(3000);
				     
		     System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
		     
		     String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			 String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
				
				String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
				String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
				
				actBatchName=batchItemName.getText();
				actTotalQty=batchTotalQty.getText();
				actAdjustedQty=batchAdjustQty.getText();
				actBalance=batchBalance.getText();
				actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
				actTotalQtyFooter=batchTotalQtyFooter.getText();
				
				actRow1BatchNo=batch_BatchNoRow1.getText();
				actRow1BaseQty=batch_BaseQtyRow1.getText();
				//act7=batch_ExpiryInDateRow1.getText();
				actRow1Rate=batch_RateRow1.getText();
				actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
				//act10=batch_PurchaseDateRow1.getText();

				
				actRow2BatchNo=batch_BatchNoRow2.getText();
				actRow2BaseQty=batch_BaseQtyRow2.getText();
				//act14=batch_ExpiryInDateRow2.getText();
				actRow2Rate=batch_RateRow2.getText();
				actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
				//act17=batch_PurchaseDateRow2.getText();
		

				expBatchName="BATCH WA ITEM";
				expTotalQty="14.00";
				expAdjustedQty="14.00";
				expBalance="0.00";
				
				
				expTotalQtyFooter="180.00";
				//expTotalAdjustedQtyFooter="0";
				
				
				expRow1BatchNo="OSHWA1";
				expRow1BaseQty="120.00";
				expRow1Rate="10.00";
				expRow1AdjustedQty="14.00";
				
			
				expRow2BatchNo="PVHWA";
				expRow2BaseQty="60.00";	
				expRow2Rate="20.00";
				expRow2AdjustedQty="0.00";
				
			
				
				System.out.println(actBatchName);
				System.out.println(actTotalQty);
				System.out.println(actAdjustedQty);
				System.out.println(actBalance);
					
				//First Row
				
				System.out.println(actRow1BatchNo);
				System.out.println(actRow1BaseQty);
				System.out.println(actRow1Rate);
				System.out.println(actRow1AdjustedQty);

				
				//Second Row
				
				System.out.println(actRow2BatchNo);
				System.out.println(actRow2BaseQty);
				System.out.println(actRow2Rate);
				System.out.println(actRow2AdjustedQty);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		    	batchOkIcon.click();
		    	 
		    	 
		    	System.out.println("*************************************** checkBatchWiseScreenPopupByChangingTheQty  *************************************");
				System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
				System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
				System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
				System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
				//System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
				System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
				System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
				System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
				System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
				System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
				
				System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
				System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
				System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
				System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
			
		    	 
			

				     if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
						&& actBalance.equalsIgnoreCase(expBalance) 
						
						&&  actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
						
						&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
						&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
						
						&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
						&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
					{
						System.out.println("Test Pass : Batch fields are As expected ");
						excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Batch fields are As Not  expected ");
						excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						return false;
					} 
			}
		
		 
		 
		 public boolean checkSecondRowQtyOnInputOfAQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
             
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
				select2ndRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getAttribute("data-sname");
					
					if(data.equalsIgnoreCase("BATCH WA ITEM"))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
				select2ndRow_4thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.click();
				enter_AQTxt.clear();
				enter_AQTxt.sendKeys("3");
				enter_AQTxt.sendKeys(Keys.TAB);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.click();
				enter_FQTxt.clear();
				enter_FQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
				enter_AvgRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
				enter_AvgRateo.sendKeys(Keys.TAB);
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				String actQtyInput=enter_Quantity.getAttribute("value");
				String expQtyInput="3.00";
	

				 System.out.println("*********************************** checkSecondRowQtyOnInputOfAQ  ************************************");
				 System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actQtyInput  +" Value Expected : "+expQtyInput);	
		
					if(actQtyInput.equalsIgnoreCase(expQtyInput))	
					{
						System.out.println("Test Pass : Batch Column is displaying Blank on Updating the Qty");
						 return true;
					}
					else
					{
						System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
						 return false;
					}
				
			
			}
		 
		 
		 
		 public boolean checkVoucherSecondRowInputValuesInputOnlyAQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			  
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			             
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
				enter_QuantityToRelease.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();

				enter_Rate.sendKeys(Keys.TAB);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
				
				String actItemR2C1 =select2ndRow_1stColumn.getText();
				String actUnitsR2C2=select2ndRow_2ndColumn.getText();
				String actAQR2C4   =select2ndRow_4thColumn.getText();
				String actFQR2C5   =select2ndRow_5thColumn.getText();
				String actQtyR2C8  =select2ndRow_8thColumn.getText();
			
				String expItemR2C1  ="Batch wa item";
				String expUnitsR2C2 ="Pcs";
				String expAQR2C4    ="3.00";
				String expFQR2C5    ="0.00";
				String expQtyR2C8   ="3.00";
			
				System.out.println("*********************************** checkVoucherSecondRowInputValuesInputOnlyAQ  ************************************");
				System.out.println("Entry Page R2 Item Value Actual     : "+actItemR2C1     +"    Value Expected :  "+expItemR2C1);	
				System.out.println("Entry Page R2 Units Value Actual    : "+actUnitsR2C2    +"    Value Expected :  "+expUnitsR2C2);
				System.out.println("Entry Page R2 AQ Value Actual       : "+actAQR2C4       +"    Value Expected :  "+expAQR2C4);
				System.out.println("Entry Page R2 FQ Value Actual       : "+actFQR2C5       +"    Value Expected :  "+expFQR2C5);
				System.out.println("Entry Page Qty Value Actual         : "+actQtyR2C8      +"    Value Expected :  "+expQtyR2C8);
				
				if(actItemR2C1.equalsIgnoreCase(expItemR2C1) && actUnitsR2C2.equalsIgnoreCase(expUnitsR2C2) && actAQR2C4.equalsIgnoreCase(expAQR2C4) 
					&& actFQR2C5.equalsIgnoreCase(expFQR2C5) && actQtyR2C8.equalsIgnoreCase(expQtyR2C8))
				{
					System.out.println("Test Pass : Data Entered in first Row");
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in first Row");
					return false;
				}
			
			}
		 
		 
		 
		 public boolean checkBatchWisePopupBeforePickFIFOInSecondRowOfBatchColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			             
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			 enter_Gross.click();
			 enter_Gross.sendKeys(Keys.TAB);
				
				Thread.sleep(3000);
				
				System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
				
				String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
				String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
				
				String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
				String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
				
				actBatchName=batchItemName.getText();
				actTotalQty=batchTotalQty.getText();
				actAdjustedQty=batchAdjustQty.getText();
				actBalance=batchBalance.getText();
				actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
				actTotalQtyFooter=batchTotalQtyFooter.getText();
				
				
				actRow1BatchNo=batch_BatchNoRow1.getText();
				actRow1BaseQty=batch_BaseQtyRow1.getText();
				//act7=batch_ExpiryInDateRow1.getText();
				actRow1Rate=batch_RateRow1.getText();
				actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
				//act10=batch_PurchaseDateRow1.getText();

				
				actRow2BatchNo=batch_BatchNoRow2.getText();
				actRow2BaseQty=batch_BaseQtyRow2.getText();
				//act14=batch_ExpiryInDateRow2.getText();
				actRow2Rate=batch_RateRow2.getText();
				actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
				//act17=batch_PurchaseDateRow2.getText();
	
				expBatchName="BATCH WA ITEM";
				expTotalQty="3.00";
				expAdjustedQty="0.00";
				expBalance="3.00";				
				
				expTotalQtyFooter="166.00";
				expTotalAdjustedQtyFooter="0.00";
							
				expRow1BatchNo="OSHWA1";
				expRow1BaseQty="106.00";
				expRow1Rate="10.00";
				expRow1AdjustedQty="0";			
			
				expRow2BatchNo="PVHWA";
				expRow2BaseQty="60.00";	
				expRow2Rate="20.00";
				expRow2AdjustedQty="0";
					
				System.out.println(actBatchName);
				System.out.println(actTotalQty);
				System.out.println(actAdjustedQty);
				System.out.println(actBalance);
					
				//First Row
				System.out.println(actRow1BatchNo);
				System.out.println(actRow1BaseQty);
				System.out.println(actRow1Rate);
				System.out.println(actRow1AdjustedQty);

				
				//Second Row
				System.out.println(actRow2BatchNo);
				System.out.println(actRow2BaseQty);
				System.out.println(actRow2Rate);
				System.out.println(actRow2AdjustedQty);
			
				System.out.println("********************************** checkBatchWisePopupBeforePickFIFOInSecondRowOfBatchColumn  *************************************");
				System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
				System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
				System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
				System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
				System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
				System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
				System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
				System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
				System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
				System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
				
				System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
				System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
				System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
				System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
			
		   
				

		         if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
					
					&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
					&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
				{
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					return false;
				}
			 
		 }
		 
		 
		 
		 
		 
		 public boolean checkBatchWisePopupAfterPickFIFOInSecondRowOfBatchColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {

			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
			 
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			 
		    Thread.sleep(2000);
				
		    System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
		    
		 	String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
				
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			//act7=batch_ExpiryInDateRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			//act10=batch_PurchaseDateRow1.getText();
		
			actRow2BatchNo=batch_BatchNoRow2.getText();
			actRow2BaseQty=batch_BaseQtyRow2.getText();
			//act14=batch_ExpiryInDateRow2.getText();
			actRow2Rate=batch_RateRow2.getText();
			actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
			//act17=batch_PurchaseDateRow2.getText();

			expBatchName="BATCH WA ITEM";
			expTotalQty="3.00";
			expAdjustedQty="3.00";
			expBalance="0.00";
			
			expTotalQtyFooter="166.00";
			//expTotalAdjustedQtyFooter="0";
						
			expRow1BatchNo="OSHWA1";
			expRow1BaseQty="106.00";
			expRow1Rate="10.00";
			expRow1AdjustedQty="3.00";
					
			expRow2BatchNo="PVHWA";
			expRow2BaseQty="60.00";	
			expRow2Rate="20.00";
			expRow2AdjustedQty="0.00";
					
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
				
			//First Row			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			
			//Second Row			
			System.out.println(actRow2BatchNo);
			System.out.println(actRow2BaseQty);
			System.out.println(actRow2Rate);
			System.out.println(actRow2AdjustedQty);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
    	    batchOkIcon.click();
    	    
    	    System.out.println("********************************** checkBatchWisePopupAfterPickFIFOInSecondRowOfBatchColumn  *************************************");
			System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
			//System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
			System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
			System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
			System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
			System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
			System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
	  
		    	 
            if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
					
					&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
					&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
				{
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					return false;
				}
			 
		 }
		 
		 
		 
		 
		 public boolean checkThirdRowQtyOnInputOfFQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 
			    excelReader=new ExcelReader(POJOUtility.getExcelPath());
		        xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
				 
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
				select3rdRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getAttribute("data-sname");
					
					if(data.equalsIgnoreCase("BATCH WA ITEM"))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
				select3rdRow_4thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.click();
				enter_AQTxt.clear();
				enter_AQTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.click();
				enter_FQTxt.clear();
				enter_FQTxt.sendKeys("104");
				enter_FQTxt.sendKeys(Keys.TAB);
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
				enter_AvgRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
				enter_AvgRateo.sendKeys(Keys.TAB);
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				String actDataQtyR3=enter_Quantity.getAttribute("value");
				String expDataQtyR3="104.00";
				

				System.out.println("*********************************** checkThirdRowQtyOnInputOfFQ  ************************************");
				System.out.println("Entry Page Qty Change Batch Column Value Actual   : "+actDataQtyR3  +" Value Expected : "+expDataQtyR3);	
		
			
				if( actDataQtyR3.equalsIgnoreCase(expDataQtyR3) )
				{
					System.out.println("Test Pass : Qty Preload Value is displaying Correct");
					return true;
				}
				else
				{
					System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
					return false;
				}
			
			}
		 
		 
		 
		 public boolean checkVoucherThirdRowInputValuesInputOnlyFQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			  
			    excelReader=new ExcelReader(POJOUtility.getExcelPath());
		        xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";		
				 
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
				enter_QuantityToRelease.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();

				enter_Rate.sendKeys(Keys.TAB);				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
				
				String actItemR3C1=select3rdRow_1stColumn.getText();
				String actUnitsR3C2=select3rdRow_2ndColumn.getText();
				String actAQR3C4=select3rdRow_4thColumn.getText();
				String actFQR3C5=select3rdRow_5thColumn.getText();
				String actQtyR3C8=select3rdRow_8thColumn.getText();
			
				
				String expItemR3C1="Batch wa item";
				String expUnitsR3C2="Pcs";
				String expAQR3C4="0.00";
				String expFQR3C5="104.00";
				String expQtyR3C8="104.00";
				

				System.out.println("*********************************** checkVoucherThirdRowInputValuesInputOnlyFQ  ************************************");
				System.out.println("Entry Page R3 Item Value Actual     : "+actItemR3C1     +"    Value Expected :  "+expItemR3C1);	
				System.out.println("Entry Page R3 Units Value Actual    : "+actUnitsR3C2    +"    Value Expected :  "+expUnitsR3C2);
				System.out.println("Entry Page R3 AQ Value Actual       : "+actAQR3C4       +"    Value Expected :  "+expAQR3C4);
				System.out.println("Entry Page R3 FQ Value Actual       : "+actFQR3C5       +"    Value Expected :  "+expFQR3C5);
				System.out.println("Entry Page R3 Qty Value Actual      : "+actQtyR3C8      +"    Value Expected :  "+expQtyR3C8);
				
				if(actItemR3C1.equalsIgnoreCase(expItemR3C1) && actUnitsR3C2.equalsIgnoreCase(expUnitsR3C2) && actAQR3C4.equalsIgnoreCase(expAQR3C4) 
					&& actFQR3C5.equalsIgnoreCase(expFQR3C5) && actQtyR3C8.equalsIgnoreCase(expQtyR3C8))
				{
					System.out.println("Test Pass : Data Entered in first Row");
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in first Row");
					return false;
				}
			
			}
		 
		 


		 
		 
		 public boolean checkBatchWisePopupBeforePickFIFOInThirdRowOfBatchColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 
			    excelReader=new ExcelReader(POJOUtility.getExcelPath());
		        xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		        
			 
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);
				
				Thread.sleep(3000);
				
				System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
				
				String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
				String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
				
				String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
				String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
				
				actBatchName=batchItemName.getText();
				actTotalQty=batchTotalQty.getText();
				actAdjustedQty=batchAdjustQty.getText();
				actBalance=batchBalance.getText();
				actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
				actTotalQtyFooter=batchTotalQtyFooter.getText();
						
				actRow1BatchNo=batch_BatchNoRow1.getText();
				actRow1BaseQty=batch_BaseQtyRow1.getText();
				//act7=batch_ExpiryInDateRow1.getText();
				actRow1Rate=batch_RateRow1.getText();
				actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
				//act10=batch_PurchaseDateRow1.getText();
				
				actRow2BatchNo=batch_BatchNoRow2.getText();
				actRow2BaseQty=batch_BaseQtyRow2.getText();
				//act14=batch_ExpiryInDateRow2.getText();
				actRow2Rate=batch_RateRow2.getText();
				actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
				//act17=batch_PurchaseDateRow2.getText();
		
				expBatchName="BATCH WA ITEM";
				expTotalQty="104.00";
				expAdjustedQty="0.00";
				expBalance="104.00";
					
				expTotalQtyFooter="163.00";
				expTotalAdjustedQtyFooter="0.00";
							
				expRow1BatchNo="OSHWA1";
				expRow1BaseQty="103.00";
				expRow1Rate="10.00";
				expRow1AdjustedQty="0";
					
				expRow2BatchNo="PVHWA";
				expRow2BaseQty="60.00";	
				expRow2Rate="20.00";
				expRow2AdjustedQty="0";
						
				System.out.println(actBatchName);
				System.out.println(actTotalQty);
				System.out.println(actAdjustedQty);
				System.out.println(actBalance);
					
				//First Row
				System.out.println(actRow1BatchNo);
				System.out.println(actRow1BaseQty);
				System.out.println(actRow1Rate);
				System.out.println(actRow1AdjustedQty);
		
				//Second Row
				System.out.println(actRow2BatchNo);
				System.out.println(actRow2BaseQty);
				System.out.println(actRow2Rate);
				System.out.println(actRow2AdjustedQty);
			
				
				System.out.println("********************************** checkBatchWisePopupBeforePickFIFOInThirdRowOfBatchColumn  *************************************");
				System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
				System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
				System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
				System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
				System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
				System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
					
				System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
				System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
				System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
				System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
					
				System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
				System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
				System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
				System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
				
			  

                if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
					
					&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
					&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
				{
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					return false;
				}
			 
		 }
		 
		 
		 
		 
		 
		 public boolean checkBatchWisePopupAfterPickFIFOInThirdRowOfBatchColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	

			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			 batchPickOnFIFOIcon.click();

		     Thread.sleep(2000);
				
		     System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
		    
		 	 String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			 String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
			 String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			 String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			 actBatchName=batchItemName.getText();
			 actTotalQty=batchTotalQty.getText();
			 actAdjustedQty=batchAdjustQty.getText();
			 actBalance=batchBalance.getText();
			 actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			 actTotalQtyFooter=batchTotalQtyFooter.getText();
		
			 actRow1BatchNo=batch_BatchNoRow1.getText();
			 actRow1BaseQty=batch_BaseQtyRow1.getText();
			 //act7=batch_ExpiryInDateRow1.getText();
			 actRow1Rate=batch_RateRow1.getText();
			 actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			 //act10=batch_PurchaseDateRow1.getText();
	
 			 actRow2BatchNo=batch_BatchNoRow2.getText();
			 actRow2BaseQty=batch_BaseQtyRow2.getText();
			 //act14=batch_ExpiryInDateRow2.getText();
			 actRow2Rate=batch_RateRow2.getText();
			 actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
			 //act17=batch_PurchaseDateRow2.getText();
	
			 expBatchName="BATCH WA ITEM";
			 expTotalQty="104.00";
			 expAdjustedQty="104.00";
			 expBalance="0.00";
			
			 expTotalQtyFooter="163.00";
			 //expTotalAdjustedQtyFooter="0";
			
			 expRow1BatchNo="OSHWA1";
			 expRow1BaseQty="103.00";
			 expRow1Rate="10.00";
			 expRow1AdjustedQty="103.00";
			
			 expRow2BatchNo="PVHWA";
			 expRow2BaseQty="60.00";	
			 expRow2Rate="20.00";
			 expRow2AdjustedQty="1.00";
				
			 System.out.println(actBatchName);
			 System.out.println(actTotalQty);
			 System.out.println(actAdjustedQty);
			 System.out.println(actBalance);
				
			 //First Row
			 System.out.println(actRow1BatchNo);
			 System.out.println(actRow1BaseQty);
			 System.out.println(actRow1Rate);
			 System.out.println(actRow1AdjustedQty);

			
			 //Second Row
			 System.out.println(actRow2BatchNo);
			 System.out.println(actRow2BaseQty);
			 System.out.println(actRow2Rate);
			 System.out.println(actRow2AdjustedQty);
			 
		 
			System.out.println("********************************** checkBatchWisePopupAfterPickFIFOInThirdRowOfBatchColumn  *************************************");
			System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
			//System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
			System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
				
			System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
			System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
			System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
			System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
			
	
			
            if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& /*actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && */actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
					
					&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
					&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty))
				{
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					return false;
				}
			 
		 }
		 
		 
		 
		 public boolean checkBatchColumUserSelectingTwoRowsInBatchScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			     
				    
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		    	 batchOkIcon.click();
		    	 
				 Thread.sleep(3000);
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_13thColumn));
			 
				 String actBatchColByChangingQty=select3rdRow_13thColumn.getText();
					
				 String actBatchColByChangingQtyB=select4thRow_13thColumn.getText();
				 
				 String expBatchColByChangingQty="OSHWA1";
					
				 String expBatchColByChangingQtyB="PVHWA";


				System.out.println("*********************************** checkBatchColumUserSelectingTwoRowsInBatchScreen  ************************************");
				System.out.println("Entry Page Batch column in R3 Value Actual     : "+actBatchColByChangingQty     +"    Value Expected :  "+expBatchColByChangingQty);	
				System.out.println("Entry Page Batch column in R4 Value Actual     : "+actBatchColByChangingQtyB    +"    Value Expected :  "+expBatchColByChangingQtyB);
				
				
					if(actBatchColByChangingQty.equalsIgnoreCase(expBatchColByChangingQty) && actBatchColByChangingQtyB.equalsIgnoreCase(expBatchColByChangingQtyB))
					{
						System.out.println("Test Fail : Batch Column is displaying Blank on Updating the Qty");
						return true;
					}
					else
					{
						System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty ");
						return false;
					}
					    
			}
		 
		 
		 
		 
		 public boolean checkInputFQInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		     
		     
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
				select3rdRow_5thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.click();
				enter_FQTxt.clear();
				enter_FQTxt.sendKeys("103");
				enter_FQTxt.sendKeys(Keys.TAB);
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
				enter_AvgRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
				enter_AvgRateo.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
				enter_QuantityToRelease.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();

				enter_Rate.sendKeys(Keys.TAB);

                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_13thColumn));
				select3rdRow_13thColumn.click();
				
				Thread.sleep(3000);
				
				try
				{
					
		            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
					batchPickOnFIFOIcon.click();
					 
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			    	batchOkIcon.click();
						
			    	Thread.sleep(3000);
			    	
			    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_13thColumn));
						
			    	 String actBatchColByChangingQty=select3rdRow_13thColumn.getText();
						
					 String actBatchColByChangingQtyB=select4thRow_13thColumn.getText();
					 
					 String expBatchColByChangingQty="OSHWA1";
						
					 String expBatchColByChangingQtyB="PVHWA";
	
	
					System.out.println("*********************************** checkBatchColumUserSelectingTwoRowsInBatchScreen  ************************************");
					System.out.println("Entry Page Batch column in R3 Value Actual     : "+actBatchColByChangingQty     +"    Value Expected :  "+expBatchColByChangingQty);	
					System.out.println("Entry Page Batch column in R4 Value Actual     : "+actBatchColByChangingQtyB    +"    Value Expected :  "+expBatchColByChangingQtyB);
					
					
				    if(actBatchColByChangingQty.equalsIgnoreCase(expBatchColByChangingQty) && actBatchColByChangingQtyB.equalsIgnoreCase(expBatchColByChangingQtyB))
					{
						System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty");
						return true;
					}
					else
					{
						System.out.println("Test Fail : Batch Column is displaying Blank on Updating the Qty");
						return false;
					}
				}
				catch(Exception e)
				{
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
					 enter_Batch.click();
					
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
					 batchPickOnFIFOIcon.click();
						 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
					 batchOkIcon.click();
					 
					 Thread.sleep(3000);
					 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_13thColumn));
					 
					 String actBatchColByChangingQty=select3rdRow_13thColumn.getText();
					 
					 String actBatchColByChangingQtyB=select4thRow_13thColumn.getText();
					 
					 String expBatchColByChangingQty="OSHWA1";
					 
					 String expBatchColByChangingQtyB="PVHWA";
					 
					 
					 System.out.println("*********************************** checkBatchColumUserSelectingTwoRowsInBatchScreen  ************************************");
					 System.out.println("Entry Page Batch column in R3 Value Actual     : "+actBatchColByChangingQty     +"    Value Expected :  "+expBatchColByChangingQty);	
					 System.out.println("Entry Page Batch column in R4 Value Actual     : "+actBatchColByChangingQtyB    +"    Value Expected :  "+expBatchColByChangingQtyB);
					 
					 
					 if(actBatchColByChangingQty.equalsIgnoreCase(expBatchColByChangingQty) && actBatchColByChangingQtyB.equalsIgnoreCase(expBatchColByChangingQtyB))
					 {
						 System.out.println("Test Pass : Batch Column is not displaying Blank on Updating Qty");
						 return true;
					 }	
					 else
					 {
						 System.out.println("Test Fail : Batch Column is displaying Blank on Updating the Qty");
						 return false;
					 }
				}
			
			}
		 
		 
		 
		 
		 
		 
		 public boolean checkBatchWisePopupBeforePickFIFOInFourthRowOfBatchColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		     
			 
			   //update the Qty in 4th row due to wrong input
		    	
		    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
				select4thRow_5thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.click();
				enter_FQTxt.clear();
				enter_FQTxt.sendKeys("1");
				enter_FQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
				enter_AvgRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
				enter_AvgRateo.sendKeys(Keys.TAB);
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
				enter_QuantityToRelease.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();

				enter_Rate.sendKeys(Keys.TAB);

                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				

                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_13thColumn));
                select4thRow_13thColumn.click();
                
                Thread.sleep(3000);
				
				try
				{
				
				
					System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
					
					String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
					String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
					
					String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
					String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
					actBatchName=batchItemName.getText();
					actTotalQty=batchTotalQty.getText();
					actAdjustedQty=batchAdjustQty.getText();
					actBalance=batchBalance.getText();
					actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
					actTotalQtyFooter=batchTotalQtyFooter.getText();
					
				
					actRow1BatchNo=batch_BatchNoRow1.getText();
					actRow1BaseQty=batch_BaseQtyRow1.getText();
					//act7=batch_ExpiryInDateRow1.getText();
					actRow1Rate=batch_RateRow1.getText();
					actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
									
					expBatchName="BATCH WA ITEM";
					expTotalQty="1.00";
					expAdjustedQty="1.00";
					expBalance="0.00";				
					
					expTotalQtyFooter="60.00";
					expTotalAdjustedQtyFooter="1.00";
					
					expRow1BatchNo="PVHWA";
					expRow1BaseQty="60.00";	
					expRow1Rate="20.00";
					expRow1AdjustedQty="1";
							
					System.out.println(actBatchName);
					System.out.println(actTotalQty);
					System.out.println(actAdjustedQty);
					System.out.println(actBalance);
						
					//First Row
					System.out.println(actRow1BatchNo);
					System.out.println(actRow1BaseQty);
					System.out.println(actRow1Rate);
					System.out.println(actRow1AdjustedQty);
	
					System.out.println("********************************** checkBatchWisePopupBeforePickFIFOInFourthRowOfBatchColumn  *************************************");
					System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
					System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
					System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
					System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
					System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
					System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
						
					System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
					System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
					System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
					System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
						
					/*System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
					System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
					System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
					System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
					*/
			
					
	
	               if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
						&& actBalance.equalsIgnoreCase(expBalance) 
						
						&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
						
						&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
						&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) )
					{
						System.out.println("Test Pass : Batch fields are As expected ");
						excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Batch fields are As Not  expected ");
						excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						return false;
					}
				}
				catch(Exception e)
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
					enter_Batch.sendKeys(Keys.SPACE);
					
					System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
					
					String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
					String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
					
					String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
					String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
					actBatchName=batchItemName.getText();
					actTotalQty=batchTotalQty.getText();
					actAdjustedQty=batchAdjustQty.getText();
					actBalance=batchBalance.getText();
					actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
					actTotalQtyFooter=batchTotalQtyFooter.getText();
					
				
					actRow1BatchNo=batch_BatchNoRow1.getText();
					actRow1BaseQty=batch_BaseQtyRow1.getText();
					//act7=batch_ExpiryInDateRow1.getText();
					actRow1Rate=batch_RateRow1.getText();
					actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
									
					expBatchName="BATCH WA ITEM";
					expTotalQty="1.00";
					expAdjustedQty="0.00";
					expBalance="1.00";				
					
					expTotalQtyFooter="60.00";
					expTotalAdjustedQtyFooter="0";
					
					expRow1BatchNo="PVHWA";
					expRow1BaseQty="60.00";	
					expRow1Rate="20.00";
					expRow1AdjustedQty="1";
							
					System.out.println(actBatchName);
					System.out.println(actTotalQty);
					System.out.println(actAdjustedQty);
					System.out.println(actBalance);
						
					//First Row
					System.out.println(actRow1BatchNo);
					System.out.println(actRow1BaseQty);
					System.out.println(actRow1Rate);
					System.out.println(actRow1AdjustedQty);

					System.out.println("********************************** checkBatchWisePopupBeforePickFIFOInFourthRowOfBatchColumn  *************************************");
					System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
					System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
					System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
					System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
					//System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
					System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
						
					System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
					System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
					System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
					System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
						
					/*System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
					System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
					System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
					System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
					*/
			
					

	               if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
						&& actBalance.equalsIgnoreCase(expBalance) 
						
						&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
						
						&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
						&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) )
					{
						System.out.println("Test Pass : Batch fields are As expected ");
						excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Batch fields are As Not  expected ");
						excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						return false;
					}
					
				}
			 
		 }
		 
		 
		 
		 public boolean checkBatchWisePopupAfterPickFIFOInFourthRowOfBatchColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
		    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		     
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
		    Thread.sleep(3000);
				
		 	String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
					
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			//act7=batch_ExpiryInDateRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
	
			expBatchName="BATCH WA ITEM";
			expTotalQty="1.00";
			expAdjustedQty="1.00";
			expBalance="0.00";
					
			expTotalQtyFooter="60.00";
			
			expRow1BatchNo="PVHWA";
			expRow1BaseQty="60.00";	
			expRow1Rate="20.00";
			expRow1AdjustedQty="1.00";
					
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
				
			//First Row
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);
			
		
			
			System.out.println("********************************** checkBatchWisePopupAfterPickFIFOInFourthRowOfBatchColumn  *************************************");
			System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
			//System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
			System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
				
			/*System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
			System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
			System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
			System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
			*/
	
            if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& /*actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && */actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) )
				{
					System.out.println("Test Pass : Batch fields are As expected ");
					
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
				     batchOkIcon.click();
				     
				     
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
				     batchOkIcon.click();
				     
				     
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					return false;
				}
			 
		 }
		 
		 
		 
		 
		 
		 
		 // Fifth Row
		 public boolean checkFifthRowQtyOnInputOfFQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
				
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		     
		     Thread.sleep(5000); 
		    	 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
			 select5thRow_1stColumn.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getAttribute("data-sname");
					
					if(data.equalsIgnoreCase("BATCH WA ITEM"))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_4thColumn));
				select5thRow_4thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.click();
				enter_AQTxt.clear();
				enter_AQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.click();
				enter_FQTxt.clear();
				enter_FQTxt.sendKeys("60");
				enter_FQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
				enter_AvgRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
				enter_AvgRateo.sendKeys(Keys.TAB);
			
				
				String actdata=errorMessage.getText();
		 		String expdata="This transaction will make stock negative.";
		 	
		 		System.out.println(actdata);
		 		
	 
		 		 if(actdata.equalsIgnoreCase(expdata))
		 		 {
		 			System.out.println("Test Pass : Voucher Saved Successfully");
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		 			errorMessageCloseBtn.click();
		 		    return true;
		 		 }
		 		 else
		 		 {
		 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
		 			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		 			errorMessageCloseBtn.click();
		 		    return false;
		 		  }
				

			}
		 
		 
		 
		 public boolean checkVoucherFifthRowInputValuesInputOnlyFQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		     
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
				enter_QuantityToRelease.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();

				enter_Rate.sendKeys(Keys.TAB);
						
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);
				
                Thread.sleep(3000);
				
                System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
                
				String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
				String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
				
				String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
				String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
				
				actBatchName=batchItemName.getText();
				actTotalQty=batchTotalQty.getText();
				actAdjustedQty=batchAdjustQty.getText();
				actBalance=batchBalance.getText();
				actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
				actTotalQtyFooter=batchTotalQtyFooter.getText();
				
				
				actRow1BatchNo=batch_BatchNoRow1.getText();
				actRow1BaseQty=batch_BaseQtyRow1.getText();
				actRow1Rate=batch_RateRow1.getText();
				
				actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			

				expBatchName="BATCH WA ITEM";
				expTotalQty="60.00";
				expAdjustedQty="0.00";
				expBalance="60.00";
				
				
				expTotalQtyFooter="59.00";
				expTotalAdjustedQtyFooter="0.00";
				
				
				expRow1BatchNo="PVHWA";
				expRow1BaseQty="59.00";	
				expRow1Rate="20.00";
				expRow1AdjustedQty="0";

			
				
				System.out.println(actBatchName);
				System.out.println(actTotalQty);
				System.out.println(actAdjustedQty);
				System.out.println(actBalance);
					
				//First Row
				
				System.out.println(actRow1BatchNo);
				System.out.println(actRow1BaseQty);
				System.out.println(actRow1Rate);
				System.out.println(actRow1AdjustedQty);

			
				

				System.out.println("********************************** checkVoucherFifthRowInputValuesInputOnlyFQ  *************************************");
				System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
				System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
				System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
				System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
				//System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
				System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
					
				System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
				System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
				System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
				System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
					
				/*System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
				System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
				System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
				System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
				*/

				
         if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) )
				{
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					return false;
				}
			 
		 }
		 
		 
		 
		 
		 
		 public boolean checkBatchWisePopupAfterPickFIFOInFifthRowOfBatchColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {

			excelReader=new ExcelReader(POJOUtility.getExcelPath());
		    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		     
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			 

		    Thread.sleep(3000);
				
		    System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
		    
		 	String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
			
			
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();


			expBatchName="BATCH WA ITEM";
			expTotalQty="60.00";
			expAdjustedQty="59.00";
			expBalance="1.00";
			
			
			expTotalQtyFooter="59.00";
	
			
			expRow1BatchNo="PVHWA";
			expRow1BaseQty="59.00";	
			expRow1Rate="20.00";
			expRow1AdjustedQty="59.00";
			
		
			
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
				
			//First Row
			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			System.out.println("********************************** checkBatchWisePopupAfterPickFIFOInFifthRowOfBatchColumn  *************************************");
			System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
			System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
			System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
			System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
			//System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
			System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
			System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
			System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
			System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
			System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
				
			/*System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
			System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
			System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
			System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
			*/

			

          if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& /*actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && */actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) )
				{
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					return false;
				}
			 
		 }
		 
		 
		 
		 
		 public boolean checkClickOnOkButtonInBatchPupupScreenInputMoreThanAvilableQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
				
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		     
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
				batchOkIcon.click();
			
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
				
				String actdata=getDriver().switchTo().alert().getText();
				String expdata="Adjusted Quantity is less then Total Quantity, Do you want to continue with Adjusted Quantity";
			
				getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
				getAlert().accept();
				
				/*String actdataq=errorMessage.getText();
		 		String expdataq="This transaction will make stock negative.";*/
							
		 		System.out.println("*********************************** checkClickOnOkButtonInBatchPupupScreenInputMoreThanAvilableQty  ************************************");
				System.out.println("Entry Page Batch Popup Screen Message Value Actual     : "+actdata     +"    Value Expected :     "+ expdata);	
				//System.out.println("Entry Page Validation Message Value Actual             : "+actdataq    +"    Value Expected :     "+ expdataq);	
				
				
				
				if(actdata.equalsIgnoreCase(expdata)/* && actdataq.equalsIgnoreCase(expdataq)*/)
				{
					
			 			System.out.println("Test Pass : Voucher Saved Successfully");
			 			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			 			errorMessageCloseBtn.click();*/
			 		    return true;
			 		 }
			 		 else
			 		 {
			 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
			 			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			 			errorMessageCloseBtn.click();*/
			 		    return false;
			 		  }
					
			
			}


		 
		 
		 
		 
		 
		 
		 public boolean checkVoucherFifthRowInputValuesByUpdatingOnlyFQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		   
		     Thread.sleep(2000);
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_4thColumn));
				select5thRow_4thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.click();
				enter_AQTxt.clear();
				enter_AQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.click();
				enter_FQTxt.clear();
				enter_FQTxt.sendKeys("59");
				enter_FQTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
				enter_AvgRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
				enter_AvgRateo.sendKeys(Keys.TAB);
			
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
				enter_QuantityToRelease.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();

				enter_Rate.sendKeys(Keys.TAB);
						
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_13thColumn));
				select5thRow_13thColumn.click();
				
				try
				{
					
					
					Thread.sleep(2000);
					
					System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
					
					String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
					String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
					
					String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
					String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
					actBatchName=batchItemName.getText();
					actTotalQty=batchTotalQty.getText();
					actAdjustedQty=batchAdjustQty.getText();
					actBalance=batchBalance.getText();
					actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
					actTotalQtyFooter=batchTotalQtyFooter.getText();
					
					
					actRow1BatchNo=batch_BatchNoRow1.getText();
					actRow1BaseQty=batch_BaseQtyRow1.getText();
					actRow1Rate=batch_RateRow1.getText();
					actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();

					expBatchName="BATCH WA ITEM";
					expTotalQty="59.00";
					expAdjustedQty="59.00";
					expBalance="0.00";
					
					
					expTotalQtyFooter="59.00";
					expTotalAdjustedQtyFooter="59.00";
					
					
					expRow1BatchNo="PVHWA";
					expRow1BaseQty="59.00";	
					expRow1Rate="20.00";
					expRow1AdjustedQty="59.00";
					
				

					System.out.println("********************************** checkVoucherFifthRowInputValuesByUpdatingOnlyFQ  *************************************");
					System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
					System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
					System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
					System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
					//System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
					System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
						
					System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
					System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
					System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
					System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
						
					/*System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
					System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
					System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
					System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
					*/

					
					
					
	         if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
						&& actBalance.equalsIgnoreCase(expBalance) 
						
						&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
						
						&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
						&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) )
					{
						System.out.println("Test Pass : Batch fields are As expected ");
						excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Batch fields are As Not  expected ");
						excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						return false;
					}
				}
                catch(Exception e)
				{
                
                	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
					enter_Batch.sendKeys(Keys.SPACE);
					
                	Thread.sleep(2000);
	                System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
					
					String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
					String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
					
					String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
					String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
					actBatchName=batchItemName.getText();
					actTotalQty=batchTotalQty.getText();
					actAdjustedQty=batchAdjustQty.getText();
					actBalance=batchBalance.getText();
					actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
					actTotalQtyFooter=batchTotalQtyFooter.getText();
					
					
					actRow1BatchNo=batch_BatchNoRow1.getText();
					actRow1BaseQty=batch_BaseQtyRow1.getText();
					actRow1Rate=batch_RateRow1.getText();
					actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
	
					expBatchName="BATCH WA ITEM";
					expTotalQty="59";
					expAdjustedQty="0";
					expBalance="59";
					
					
					expTotalQtyFooter="59.00";
					expTotalAdjustedQtyFooter="0";
					
					
					expRow1BatchNo="PVHWA";
					expRow1BaseQty="59.00";	
					expRow1Rate="20.00";
					expRow1AdjustedQty="0";
					
				
	
					System.out.println("********************************** checkVoucherFifthRowInputValuesByUpdatingOnlyFQ  *************************************");
					System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
					System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
					System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
					System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
					//System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
					System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
						
					System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
					System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
					System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
					System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
						
					/*System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
					System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
					System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
					System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
					*/
	
					
					
					
	         if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
						&& actBalance.equalsIgnoreCase(expBalance) 
						
						&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
						
						&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
						&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) )
					{
						System.out.println("Test Pass : Batch fields are As expected ");
						excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Batch fields are As Not  expected ");
						excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						return false;
					}
				}
			 
		 }
		 
		 
		 
		 
		 public boolean checkBatchWisePopupAfterPickFIFOInFifthRowUpdate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
		    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		   
		     Thread.sleep(2000);
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			 

		    Thread.sleep(3000);
		    
		    System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
				
		 	String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			actBatchName=batchItemName.getText();
			actTotalQty=batchTotalQty.getText();
			actAdjustedQty=batchAdjustQty.getText();
			actBalance=batchBalance.getText();
			actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			actTotalQtyFooter=batchTotalQtyFooter.getText();
			
			
			actRow1BatchNo=batch_BatchNoRow1.getText();
			actRow1BaseQty=batch_BaseQtyRow1.getText();
			actRow1Rate=batch_RateRow1.getText();
			actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();


			expBatchName="BATCH WA ITEM";
			expTotalQty="59.00";
			expAdjustedQty="59.00";
			expBalance="0.00";
			
			
			expTotalQtyFooter="59.00";

			expRow1BatchNo="PVHWA";
			expRow1BaseQty="59.00";	
			expRow1Rate="20.00";
			expRow1AdjustedQty="59.00";
			
		
			
			System.out.println(actBatchName);
			System.out.println(actTotalQty);
			System.out.println(actAdjustedQty);
			System.out.println(actBalance);
				
			//First Row
			
			System.out.println(actRow1BatchNo);
			System.out.println(actRow1BaseQty);
			System.out.println(actRow1Rate);
			System.out.println(actRow1AdjustedQty);

			

				
				
			Thread.sleep(5000);
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
	    	 batchOkIcon.click();

				System.out.println("********************************** checkBatchWisePopupAfterPickFIFOInFifthRowUpdate  *************************************");
				System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
				System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
				System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
				System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
				//System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
				System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
					
				System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
				System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
				System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
				System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
					
				/*System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
				System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
				System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
				System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
				*/

				

           if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
					&& actBalance.equalsIgnoreCase(expBalance) 
					
					&& actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
					&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
					&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) )
				{
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					return false;
				}
			 
		 }
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 //Sixth Row
		 public boolean checkSixthRowQtyOnInputOfFQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			 
			 
			    excelReader=new ExcelReader(POJOUtility.getExcelPath());
			    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			   
			     
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_1stColumn));
				select6thRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getAttribute("data-sname");
					
					if(data.equalsIgnoreCase("BATCH WA ITEM"))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_4thColumn));
				select6thRow_4thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.click();
				enter_AQTxt.clear();
				enter_AQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.click();
				enter_FQTxt.clear();
				enter_FQTxt.sendKeys("1");
				enter_FQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
				enter_AvgRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
				enter_AvgRateo.sendKeys(Keys.TAB);
			
				
		 		 String expdata="This transaction will make stock negative.";
		 		 
		 		String validationMessage=checkValidationMessage(expdata);
		 	
		 		
		 		 System.out.println("*********************************** checkSixthRowQtyOnInputOfFQ  ************************************");
		 		 System.out.println("Entry Page Batch Popup Screen Message Value Actual     : "+validationMessage+"  Value Expected : "+expdata);	
						
				
		 		
		 		 if(validationMessage.equalsIgnoreCase(expdata))
		 		 {
		 			System.out.println("Test Pass : Voucher Saved Successfully");
		 		    return true;
		 		 }
		 		 else
		 		 {
		 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
		 		    return false;
		 		  }

			}
		 

		 
		 public boolean checkVoucherSixthRowInputValuesInputOnlyFQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			   excelReader=new ExcelReader(POJOUtility.getExcelPath());
			    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			   
			  
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
				enter_QuantityToRelease.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();

				enter_Rate.sendKeys(Keys.TAB);
						
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);
				
                Thread.sleep(3000);
				
                System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
                
                
				String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
				String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
				
				String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
				String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
				
				actBatchName=batchItemName.getText();
				actTotalQty=batchTotalQty.getText();
				actAdjustedQty=batchAdjustQty.getText();
				actBalance=batchBalance.getText();
				actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
				actTotalQtyFooter=batchTotalQtyFooter.getText();
				
			

				expBatchName="BATCH WA ITEM";
				expTotalQty="1";
				expAdjustedQty="0";
				expBalance="1";
				
				
				expTotalQtyFooter="0";
				expTotalAdjustedQtyFooter="0.00";

				String actBatchRowsCount=batchPopUPEmptyRows.getAttribute("data-totalrows");
				String expBatchRowsCount="0";
				
			
				
				System.out.println("********************************** checkVoucherSixthRowInputValuesInputOnlyFQ  *************************************");	
				System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actBatchRowsCount         + " Value Expected : "+expBatchRowsCount);
				System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
				System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
			
	
			  if(actBatchRowsCount.equalsIgnoreCase(expBatchRowsCount) &&
					 actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter))
				 {
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					return true;
				 }
				 else
				 {
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					return false;
				 }
			 
		 }
		 
		 
		 
		 public boolean checkCancelButtonInTheSixRowBatchPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
	    	
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			   
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		     batchCancelIcon.click();
		     
	    	 Thread.sleep(2000);
	    	 
	    	 boolean actVoucherBodyRemarks=voucherBodyRemarksName.isDisplayed();
	    	 boolean expVoucherBodyRemarks=true;
	    	 
	    		
			 System.out.println("********************************** checkCancelButtonInTheSixRowBatchPopupScreen  *************************************");	
			 System.out.println("Entry Page Cancel in Batch Value Actual           : "+actVoucherBodyRemarks         + " Value Expected : "+expVoucherBodyRemarks);
				
    
	 		 if(actVoucherBodyRemarks==expVoucherBodyRemarks)
	 		 {
	 			System.out.println("Test Pass : Voucher Saved Successfully");
	 		    return true;
	 		 }
	 		 else
	 		 {
	 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
	 		    return false;
	 		  }
	     }
		 
		 
		 
	     public boolean checkSavingVoucherInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
	    	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			   
	    	 
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sixthRowIndex));
	    	 sixthRowIndex.click();
	    	  
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
	    	 deleteRowBtn.click();
	    	 
	    	 Thread.sleep(2000);
	    	 
	         getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	 	     String docno=documentNumberTxt.getAttribute("value");
	 	    
	 	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	         saveBtn.click();
	 	  
	    	 boolean savingMessage=checkVoucherSavingMessage(docno);
	 		  
	 		System.out.println("************************************* checkSavingVoucherInSalesInvoice  *********************************");
	 		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");	
	 		
	 		if (savingMessage==true)
	 		 {
	 			System.out.println("Test Pass : Voucher Saved Successfully");
	 		    return true;
	 		 }
	 		 else
	 		 {
	 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
	 		    return false;
	 		  }
	     }
		 

	     public boolean checkNewVoucherBatchScreenToDisplayBlankAfterConsumeQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {	
	    	 
	    	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			   
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
				new_newBtn.click();
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
				salesAccountTxt.click();
				salesAccountTxt.sendKeys(Keys.SPACE);
				
				int count=salesAccountListCount.size();
				
				System.err.println(count);
				
				for(int i=0 ; i < count ;i++)
				{
					String data=salesAccountListCount.get(i).getAttribute("data-name");
					
					if(data.equalsIgnoreCase("Sales - Computers"))
					{
						salesAccountListCount.get(i).click();
						
						break;
					}
				}
				
				salesAccountTxt.sendKeys(Keys.TAB);
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
				 customerAccountTxt.click();
				 customerAccountTxt.sendKeys(Keys.SPACE);
				 
				 int customercount=customerAccountListCount.size();
				 
				 System.err.println(customercount);
				 
				 for(int i=0 ; i < customercount ;i++)
				 {
					 String data=customerAccountListCount.get(i).getAttribute("data-name");
					 
					 if(data.equalsIgnoreCase("Customer A"))
					 {
						 customerAccountListCount.get(i).click();
						 
						 break;
					 }
				 }
					
				 customerAccountTxt.sendKeys(Keys.TAB);
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				departmentTxt.click();
				departmentTxt.sendKeys(Keys.SPACE);
					
				int departmentcount=departmentListCount.size();
				
				System.err.println(departmentcount);
					
				for(int i=0 ; i < departmentcount ;i++)
				{
					String data=departmentListCount.get(i).getAttribute("data-name");
					
					if(data.equalsIgnoreCase("INDIA"))
					{
						departmentListCount.get(i).click();
						
						break;
					}
				}
					
				departmentTxt.sendKeys(Keys.TAB);	
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
				wareHouseTxt.click();
				wareHouseTxt.sendKeys(Keys.SPACE);
					
				int warehousecount=wareHouseListCount.size();
				
				System.err.println(warehousecount);
					
				for(int i=0 ; i < warehousecount ;i++)
				{
					String data=wareHouseListCount.get(i).getAttribute("data-name");
					
					if(data.equalsIgnoreCase("HYDERABAD"))
					{
						wareHouseListCount.get(i).click();
						
						break;
					}
				}
					
				wareHouseTxt.sendKeys(Keys.TAB);
				

			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				select1stRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getAttribute("data-sname");
					
					if(data.equalsIgnoreCase("BATCH WA ITEM"))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
				select1stRow_4thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.click();
				enter_AQTxt.clear();
				enter_AQTxt.sendKeys("1");
				enter_AQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.click();
				enter_FQTxt.clear();
				enter_FQTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
				enter_AvgRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
				enter_AvgRateo.sendKeys(Keys.TAB);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
				enter_QuantityToRelease.sendKeys(Keys.TAB);
				
		 		 String expVoucherMessage="This transaction will make stock negative.";
		 		 
		 		String validationMessage=checkValidationMessage(expVoucherMessage);
 
				Thread.sleep(5000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys("20");
				enter_Rate.sendKeys(Keys.TAB);
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);
				
				
	
				String actBatchScreenRowCnt=batchPopUPEmptyRows.getAttribute("data-totalrows");
				String expBatchScreenRowCnt="0";
				

				System.out.println("********************************** checkNewVoucherBatchScreenToDisplayBlankAfterConsumeQty  *************************************");	
				System.out.println("Entry Page Save Negative Message Value Actual           : "+validationMessage		  + " Value Expected : "+expVoucherMessage);
				System.out.println("Entry Page Batch Row Count Value Actual                 : "+actBatchScreenRowCnt      + " Value Expected : "+expBatchScreenRowCnt);
		 	

				
		         if(validationMessage.equalsIgnoreCase(expVoucherMessage) && actBatchScreenRowCnt.equalsIgnoreCase(expBatchScreenRowCnt))
				 {
							System.out.println("Test Pass : Batch fields are As expected ");
							excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
							return true;
				  }
				  else
				  {
							System.out.println("Test Fail : Batch fields are As Not  expected ");
							excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
							return false;
				  }
				
				
				
				
			}
		 
	     
	
	     
	     public boolean checkCancelButtonInTheNewVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
	    	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			   	 
	    	 Thread.sleep(2000);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		     batchCancelIcon.click();
		     
	    	 Thread.sleep(2000);
	    	 
	    	 boolean actVoucherBodyRemarks=voucherBodyRemarksName.isDisplayed();
	    	 boolean expVoucherBodyRemarks=true;
    
	    	 System.out.println("********************************** checkCancelButtonInTheNewVoucher  *************************************");	
		     System.out.println("Entry Page Cancel in Empty Batch Rows Value Actual           : "+actVoucherBodyRemarks         + " Value Expected : "+expVoucherBodyRemarks);
	    	 
	 		 if(actVoucherBodyRemarks==expVoucherBodyRemarks)
	 		 {
	 			System.out.println("Test Pass : Voucher Saved Successfully");
	 		    return true;
	 		 }
	 		 else
	 		 {
	 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
	 		    return false;
	 		  }
	     }
		 
	     
	     
	     //Checking the Previous Button in Sales Invoice Voucher
	     public boolean checkPreviousOptionInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
	    	 
	    	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			 
	    	 
	    	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
	    	    previousBtn.click();
	    	    
	    	    getWaitForAlert();
				
				String actdata1=getDriver().switchTo().alert().getText();
				String expdata0="The contents of the voucher are changed.";
				String expdata1="Are you sure that you want to ignore the changes?";
				
				System.out.println(actdata1);
				
				getAlert().accept();
	    	    
				boolean loading=checkLoadingMessage();
				
				System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
	    	  
	    	    Thread.sleep(4000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				String actdata2=documentNumberTxt.getAttribute("value");
				String expdata2="1";
				
			    System.out.println("********************************** checkPreviousOptionInSalesInvoice  *************************************");	
		        System.out.println("Entry Page Previous Option Value Actual           : "+actdata1         + " Value Expected : "+expdata0+expdata1);
		        System.out.println("Entry Page Document Number Value Actual           : "+actdata2         + " Value Expected : "+expdata2);
				
				if(actdata1.startsWith(expdata0) && actdata1.endsWith(expdata1) && actdata2.equalsIgnoreCase(expdata2))
				{
					System.out.println("Test Pass : DOC NO is 1");
					excelReader.setCellData(xlfile, "Sheet6", 30, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Customize Pop Up NOT Displayed");
					excelReader.setCellData(xlfile, "Sheet6", 30, 9, resFail);
					return false;
				}
	         }
	     
	   
	     
	     
	     public boolean checkSavedVoucherSalesInvoiceOnClickOnPreviousBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
	    		
	    	    excelReader=new ExcelReader(POJOUtility.getExcelPath());
			    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			 
	    	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    		documentNumberTxt.click();
	    		
	    		
	    		String actDocumentNumberOnClickOnPrviousBtn=documentNumberTxt.getAttribute("value");
	    		String expDocumentNumberOnClickOnPreviousBtn="1";
	    		
	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
	    		dateTxt.click();
	    	
	    		DateFormat df=new SimpleDateFormat("dd/MM/yyyy");
	    		Date date=new Date();
	    		
	            System.out.println(df.format(date));
	    	    
	    		String actdata2,expdata2;
	    		
	    		String actVoucherDateOnClickOnPreviousBtn=dateTxt.getAttribute("value");
	    		String expVoucherDateOnClickOnPreviousBtn=df.format(date);

	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
	    		wareHouseTxt.click();

	    		String actWarehouseOnClickOnPreviousBtn=wareHouseTxt.getAttribute("value");
	    		String expWarehouseOnClickOnPreviousBtn="Hyderabad";
	    			    		
	    			
	    			 String actItemR1C1=select1stRow_1stColumn.getText();
	    			 String actUnitsR1C2=select1stRow_2ndColumn.getText();
	    			 String actRDR1C3=select1stRow_3rdColumn.getText();
	    			 String actAQR1C4=select1stRow_4thColumn.getText(); 
	    			 String actFQR1C5=select1stRow_5thColumn.getText();
	    			 String actAvgRateR1C6=select1stRow_6thColumn.getText();
	    			 String actAvgRateOR1C7=select1stRow_7thColumn.getText();
	    			 String actQtyR1C8=select1stRow_8thColumn.getText();
	    			 boolean actLSOR1C9=select1stRow_9thColumn.getText().isEmpty();
	    			 boolean actQtyToReleaseR1C10=select1stRow_10thColumn.getText().isEmpty();
	    			 String actRateR1C11=select1stRow_11thColumn.getText();
	    			 String actGrossR1C12=select1stRow_12thColumn.getText();
	    			 String actBatchR1C13=select1stRow_13thColumn.getText();
	    			 
	    			 
	    			 String expItemR1C1="BATCH WA ITEM";
	    			 String expUnitsR1C2="Pcs";
	    			 String expRDR1C3="0.00";
	    			 String expAQR1C4="9.00";
	    			 String expFQR1C5="5.00";
	    			 String expAvgRateR1C6="1.11";
	    			 String expAvgRateoR1C7="1.11";
	    			 String expQtyR1C8="14.00";
	    			 boolean expLSOR1C9=true;
	    			 boolean expQtyToReleaseR1C10=true;
	    			 String expRateR1C11="0.00";
	    			 String expGrossR1C12="0.00"; 
	    			 String expBatchR1C13="OSHWA1";
	    		
	    		
	    			 System.out.println("*********************************** checkSavedVoucherSalesInvoiceOnClickOnPreviousBtn  *******************************");
	    			 
	    			 System.out.println("Entry Page Document Number Value Actual: "+actDocumentNumberOnClickOnPrviousBtn+" Value Expected : "+expDocumentNumberOnClickOnPreviousBtn);
	    			 System.out.println("Entry Page Voucher Date Value Actual   : "+actVoucherDateOnClickOnPreviousBtn  +" Value Expected : "+expVoucherDateOnClickOnPreviousBtn);
	    			 System.out.println("Entry Page Warehouse Value Actual      : "+actWarehouseOnClickOnPreviousBtn    +" Value Expected : "+expWarehouseOnClickOnPreviousBtn);
	    			 	 
	    			 System.out.println("Entry Page R1 Item Value Actual        : "+actItemR1C1                         +" Value Expected : "+expItemR1C1);	
	    			 System.out.println("Entry Page R1 Units Value Actual       : "+actUnitsR1C2                        +" Value Expected : "+expUnitsR1C2);
	    			 System.out.println("Entry Page RD R1 Value Actual          : "+actRDR1C3                           +" Value Expected : "+expRDR1C3);
	    			 System.out.println("Entry Page AQ R1 Value Actual          : "+actAQR1C4                           +" Value Expected : "+expAQR1C4);
	    			 System.out.println("Entry Page FQ R1 Value Actual          : "+actFQR1C5                           +" Value Expected : "+expFQR1C5);
	    			 System.out.println("Entry Page AVG Rate R1 Value Actual    : "+actAvgRateR1C6                      +" Value Expected : "+expAvgRateR1C6);
	    				
	    			 System.out.println("Entry Page AVG RateO R1 Value Actual   : "+actAvgRateOR1C7                     +" Value Expected : "+expAvgRateoR1C7);	
	    			 System.out.println("Entry Page Qty R1 Value Actual         : "+actQtyR1C8                          +" Value Expected : "+expQtyR1C8);
	    			 System.out.println("Entry Page LSO R1 Value Actual         : "+actLSOR1C9                          +" Value Expected : "+expLSOR1C9);
	    			 System.out.println("Entry Page Qty To Release Value Actual : "+actQtyToReleaseR1C10                +" Value Expected : "+expQtyToReleaseR1C10);
	    				
	    			 System.out.println("Entry Page Rate R1 Value Actual        : "+actRateR1C11                        +" Value Expected : "+expRateR1C11);	
	    			 System.out.println("Entry Page Gross R1 Value Actual       : "+actGrossR1C12                       +" Value Expected : "+expGrossR1C12);
	    			 System.out.println("Entry Page Batch R1 Value Actual       : "+actBatchR1C13                       +" Value Expected : "+expBatchR1C13);
	    				
	    			 
	    			 if(actDocumentNumberOnClickOnPrviousBtn.equalsIgnoreCase(expDocumentNumberOnClickOnPreviousBtn)
	    					 && actVoucherDateOnClickOnPreviousBtn.equalsIgnoreCase(expVoucherDateOnClickOnPreviousBtn)
	    					 && actWarehouseOnClickOnPreviousBtn.equalsIgnoreCase(expWarehouseOnClickOnPreviousBtn)
	    					 && actItemR1C1.equalsIgnoreCase(expItemR1C1) && actUnitsR1C2.equalsIgnoreCase(expUnitsR1C2)
	    					 && actRDR1C3.equalsIgnoreCase(expRDR1C3) && actAQR1C4.equalsIgnoreCase(expAQR1C4)
	    					 && actFQR1C5.equalsIgnoreCase(expFQR1C5) && actAvgRateR1C6.equalsIgnoreCase(expAvgRateR1C6)
	    					 && actAvgRateOR1C7.equalsIgnoreCase(expAvgRateoR1C7) && actQtyR1C8.equalsIgnoreCase(expQtyR1C8)
	    					 && actLSOR1C9==expLSOR1C9 && actQtyToReleaseR1C10==expQtyToReleaseR1C10
	    					 && actRateR1C11.equalsIgnoreCase(expRateR1C11) && actGrossR1C12.equalsIgnoreCase(expGrossR1C12)
	    					 && actBatchR1C13.equalsIgnoreCase(expBatchR1C13))
	    			{
	    				System.out.println("Test Pass : Saved  fields are As expected ");
	    				excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	    				return true;
	    			}
	    			else
	    			{
	    				System.out.println("Test Fail : Saved  fields are As Not  expected ");
	    				excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
	    				return false;
	    			}
	            }
	     
	     
	     
	     public boolean checkEditPreviousSavedVoucherInputSixthRowQtyOnInputOfFQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
	    	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
	    	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_1stColumn));
				select6thRow_1stColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.END);
				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount1=itemListCount.size();
				
				System.err.println(itemcount1);
					
				for(int i=0 ; i < itemcount1 ;i++)
				{
					String data=itemListCount.get(i).getAttribute("data-sname");
					
					if(data.equalsIgnoreCase("BATCH WA ITEM"))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_4thColumn));
				select6thRow_4thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
				enter_AQTxt.click();
				enter_AQTxt.clear();
				enter_AQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
				enter_FQTxt.click();
				enter_FQTxt.clear();
				enter_FQTxt.sendKeys("1");
				enter_FQTxt.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
				enter_AvgRate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
				enter_AvgRateo.sendKeys(Keys.TAB);
			
				
		 		String expdata="This transaction will make stock negative.";
		 		
		 		String validationMessage=checkValidationMessage(expdata);
		 	

		 		System.out.println("*********************************** checkEditPrviousSavedVoucherInputSixthRowQtyOnInputOfFQ  ************************************");
				System.out.println("Entry Page Voucher Input in Sixth Row Message Value Actual     : "+validationMessage+" Value Expected : "+ expdata);	
					
				
		 		 if(validationMessage.equalsIgnoreCase(expdata))
		 		 {
		 			System.out.println("Test Pass : Voucher Saved Successfully");
		 		    return true;
		 		 }
		 		 else
		 		 {
		 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
		 		    return false;
		 		  }
				
				
			}
		 

	
		
		 
		 public boolean checkEditPreviousSavedVoucherSixthRowInputValuesInputOnlyFQ() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
			  
			    excelReader=new ExcelReader(POJOUtility.getExcelPath());
			    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
				enter_QuantityToRelease.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();

				enter_Rate.sendKeys(Keys.TAB);
						
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);
				
                Thread.sleep(3000);
				
                System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
                
                
				String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
				String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
				
				String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
				String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
				
				actBatchName=batchItemName.getText();
				actTotalQty=batchTotalQty.getText();
				actAdjustedQty=batchAdjustQty.getText();
				actBalance=batchBalance.getText();
				actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
				actTotalQtyFooter=batchTotalQtyFooter.getText();
							

				expBatchName="BATCH WA ITEM";
				expTotalQty="1";
				expAdjustedQty="0";
				expBalance="1";
				
				
				expTotalQtyFooter="0";
				expTotalAdjustedQtyFooter="0.00";
				

	

				String actBatchRowsCount=batchPopUPEmptyRows.getAttribute("data-totalrows");
				String expBatchRowsCount="0";
				
			
				
				System.out.println("********************************** checkVoucherSixthRowInputValuesInputOnlyFQ  *************************************");	
				System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actBatchRowsCount         + " Value Expected : "+expBatchRowsCount);
				System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
				System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
			
	
			  if(actBatchRowsCount.equalsIgnoreCase(expBatchRowsCount) &&
					  actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) )
			  {
        	 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
				     batchCancelIcon.click();
				     
					System.out.println("Test Pass : Batch fields are As expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					return true;
				}
				else
				{
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
				     batchCancelIcon.click();
					
					System.out.println("Test Fail : Batch fields are As Not  expected ");
					excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					return false;
				}
			 
		 }
	     
	     
	     
	     
	     
	     
	     
		 
		 
		 
		 
		 


	 public boolean checkBatchColumnsOfSavedVoucherInEditPrevious() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		 
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		 Thread.sleep(3000);
		 
		   
		 String actBatchName1,actTotalQty1,actAdjustedQty1,actBalance1,actRow1BatchNo1,actRow1BaseQty1,actRow1Rate1,actRow1AdjustedQty1,actTotalAdjustedQtyFooter1,actTotalQtyFooter1;
		 String expBatchName1,expTotalQty1,expAdjustedQty1,expBalance1,expRow1BatchNo1,expRow1BaseQty1,expRow1Rate1,expRow1AdjustedQty1,expTotalAdjustedQtyFooter1,expTotalQtyFooter1;
		 
		 String actBatchRowOne=select1stRow_13thColumn.getText();
		 String actBatchRowTwo=select2ndRow_13thColumn.getText();
		 String actBatchRowThree=select3rdRow_13thColumn.getText();
		 String actBatchRowFour=select4thRow_13thColumn.getText();
		 String actBatchRowFive=select5thRow_13thColumn.getText();
		 
		 
		 if(actBatchRowOne.equalsIgnoreCase("OSHWA1") && actBatchRowTwo.equalsIgnoreCase("OSHWA1") && actBatchRowThree.equalsIgnoreCase("OSHWA1") &&
				 actBatchRowFour.equalsIgnoreCase("PVHWA") && actBatchRowFive.equalsIgnoreCase("PVHWA"))					
		 {	
			
			 
			 //Checking First Row
			 
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
			 select1stRow_13thColumn.click();
				
			 Thread.sleep(2000);
			 
			 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
			
			 // Actual
			 actBatchName1=batchItemName.getText();
			 actTotalQty1=batchTotalQty.getText();
			 actAdjustedQty1=batchAdjustQty.getText();
			 actBalance1=batchBalance.getText();
			 actTotalAdjustedQtyFooter1=batchTotalAdjustedQtyFooter.getText();
			 actTotalQtyFooter1=batchTotalQtyFooter.getText();
			
			 actRow1BatchNo1=batch_BatchNoRow1.getText();
			 actRow1BaseQty1=batch_BaseQtyRow1.getText();
			 actRow1Rate1=batch_RateRow1.getText();
			 actRow1AdjustedQty1=batch_QtyAdjustedRow1.getText();
			
			 Thread.sleep(2000);
			
			 // Expected
			 expBatchName1="BATCH WA ITEM";
			 expTotalQty1="14.00";
			 expAdjustedQty1="14.00";
			 expBalance1="0.00";
			 expTotalAdjustedQtyFooter1="14.00";
			 expTotalQtyFooter1="14.00";
			
			 expRow1BatchNo1="OSHWA1";
			 expRow1BaseQty1="14.00";
			 expRow1Rate1="10.00";
			 expRow1AdjustedQty1="14.00";
			 
			 
			System.out.println("********************************** checkBatchColumnsOfSavedVoucherInEditPrevious  *************************************");
				
			System.out.println("********************************** First Row  *************************************");
				
			 System.out.println("BatchName1               : "+actBatchName1				+" Value Expected : "+expBatchName1);
			 
			 System.out.println("TotalQty1                : "+actTotalQty1				+" Value Expected : "+expTotalQty1);
			 System.out.println("AdjustedQty1             : "+actAdjustedQty1			+" Value Expected : "+expAdjustedQty1);
			 System.out.println("Balance1                 : "+actBalance1				+" Value Expected : "+expBalance1);
			 System.out.println("TotalAdjustedQtyFooter1  : "+actTotalAdjustedQtyFooter1 +" Value Expected : "+expTotalAdjustedQtyFooter1);
			 System.out.println("TotalQtyFooter1          : "+actTotalQtyFooter1			+" Value Expected : "+expTotalQtyFooter1);
			 
			 //First Row
			 
			 System.out.println("Row1BatchNo1             : "+actRow1BatchNo1			+" Value Expected : "+expRow1BatchNo1);
			 System.out.println("Row1BaseQty1             : "+actRow1BaseQty1			+" Value Expected : "+expRow1BaseQty1);
			 System.out.println("Row1Rate1                : "+actRow1Rate1				+" Value Expected : "+expRow1Rate1);
			 System.out.println("Row1AdjustedQty1         : "+actRow1AdjustedQty1		+" Value Expected : "+expRow1AdjustedQty1);
			 
			
			if(batchPopUPEmptyRows.getAttribute("data-totalrows").equalsIgnoreCase("1") && 
					actBatchName1.equalsIgnoreCase(expBatchName1) && actTotalQty1.equalsIgnoreCase(expTotalQty1) && actAdjustedQty1.equalsIgnoreCase(expAdjustedQty1) &&
					actBalance1.equalsIgnoreCase(expBalance1) &&
					
					actTotalAdjustedQtyFooter1.equalsIgnoreCase(expTotalAdjustedQtyFooter1) && actTotalQtyFooter1.equalsIgnoreCase(expTotalQtyFooter1) 
					
					&& actRow1BatchNo1.equalsIgnoreCase(expRow1BatchNo1) && actRow1BaseQty1.equalsIgnoreCase(expRow1BaseQty1) && actRow1Rate1.equalsIgnoreCase(expRow1Rate1) 
					&& actRow1AdjustedQty1.equalsIgnoreCase(expRow1AdjustedQty1))
				
			{	
				
				
				
				
	 			System.out.println("Test Pass : Voucher Saved Successfully");
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			     batchCancelIcon.click();

			     Thread.sleep(5000);
			     
			     //Checking Second Row
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_13thColumn));
				 select2ndRow_13thColumn.click();
					
				 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
					
				 Thread.sleep(2000);
					
				 // Actual
				 actBatchName1=batchItemName.getText();
				 actTotalQty1=batchTotalQty.getText();
				 actAdjustedQty1=batchAdjustQty.getText();
				 actBalance1=batchBalance.getText();
				 actTotalAdjustedQtyFooter1=batchTotalAdjustedQtyFooter.getText();
				 actTotalQtyFooter1=batchTotalQtyFooter.getText();
				 
				 actRow1BatchNo1=batch_BatchNoRow1.getText();
				 actRow1BaseQty1=batch_BaseQtyRow1.getText();
				 actRow1Rate1=batch_RateRow1.getText();
				 actRow1AdjustedQty1=batch_QtyAdjustedRow1.getText();
				 
				 Thread.sleep(2000);
				 
				 // Expected
				 expBatchName1="BATCH WA ITEM";
				 expTotalQty1="3.00";
				 expAdjustedQty1="3.00";
				 expBalance1="0.00";
				 expTotalAdjustedQtyFooter1="3.00";
				 expTotalQtyFooter1="3.00";
				 
				 expRow1BatchNo1="OSHWA1";
				 expRow1BaseQty1="3.00";
				 expRow1Rate1="10.00";
				 expRow1AdjustedQty1="3.00";
				 
				 System.out.println("********************************** Second Row  *************************************");
				 
				 System.out.println("BatchName1               : "+actBatchName1				+" Value Expected : "+expBatchName1);
				 
				 System.out.println("TotalQty1                : "+actTotalQty1				+" Value Expected : "+expTotalQty1);
				 System.out.println("AdjustedQty1             : "+actAdjustedQty1			+" Value Expected : "+expAdjustedQty1);
				 System.out.println("Balance1                 : "+actBalance1				+" Value Expected : "+expBalance1);
				 System.out.println("TotalAdjustedQtyFooter1  : "+actTotalAdjustedQtyFooter1 +" Value Expected : "+expTotalAdjustedQtyFooter1);
				 System.out.println("TotalQtyFooter1          : "+actTotalQtyFooter1			+" Value Expected : "+expTotalQtyFooter1);
				 
				 //First Row
				 
				 System.out.println("Row1BatchNo1             : "+actRow1BatchNo1			+" Value Expected : "+expRow1BatchNo1);
				 System.out.println("Row1BaseQty1             : "+actRow1BaseQty1			+" Value Expected : "+expRow1BaseQty1);
				 System.out.println("Row1Rate1                : "+actRow1Rate1				+" Value Expected : "+expRow1Rate1);
				 System.out.println("Row1AdjustedQty1         : "+actRow1AdjustedQty1		+" Value Expected : "+expRow1AdjustedQty1);
				 
				 
				 if(batchPopUPEmptyRows.getAttribute("data-totalrows").equalsIgnoreCase("1") && 
						 actBatchName1.equalsIgnoreCase(expBatchName1) && actTotalQty1.equalsIgnoreCase(expTotalQty1) && actAdjustedQty1.equalsIgnoreCase(expAdjustedQty1) &&
						 actBalance1.equalsIgnoreCase(expBalance1) &&
						 
						 actTotalAdjustedQtyFooter1.equalsIgnoreCase(expTotalAdjustedQtyFooter1) && actTotalQtyFooter1.equalsIgnoreCase(expTotalQtyFooter1) 
						 
						 && actRow1BatchNo1.equalsIgnoreCase(expRow1BatchNo1) && actRow1BaseQty1.equalsIgnoreCase(expRow1BaseQty1) && actRow1Rate1.equalsIgnoreCase(expRow1Rate1) 
						 && actRow1AdjustedQty1.equalsIgnoreCase(expRow1AdjustedQty1))
					{	
			 			System.out.println("Test Pass : Voucher Saved Successfully");
						 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
					     batchCancelIcon.click();
			 		     
					     Thread.sleep(5000);
					     
					     //Checking Third Row
						 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_13thColumn));
						 select3rdRow_13thColumn.click();
							
						 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
							
						 Thread.sleep(2000);
							
							
						// Actual
						 actBatchName1=batchItemName.getText();
						 actTotalQty1=batchTotalQty.getText();
						 actAdjustedQty1=batchAdjustQty.getText();
						 actBalance1=batchBalance.getText();
						 actTotalAdjustedQtyFooter1=batchTotalAdjustedQtyFooter.getText();
						 actTotalQtyFooter1=batchTotalQtyFooter.getText();
						
						 actRow1BatchNo1=batch_BatchNoRow1.getText();
						 actRow1BaseQty1=batch_BaseQtyRow1.getText();
						 actRow1Rate1=batch_RateRow1.getText();
						 actRow1AdjustedQty1=batch_QtyAdjustedRow1.getText();
						
						 Thread.sleep(2000);
						
						 // Expected
						 expBatchName1="BATCH WA ITEM";
						 expTotalQty1="103.00";
						 expAdjustedQty1="103.00";
						 expBalance1="0.00";
						 expTotalAdjustedQtyFooter1="103.00";
						 expTotalQtyFooter1="103.00";
						
						 expRow1BatchNo1="OSHWA1";
						 expRow1BaseQty1="103.00";
						 expRow1Rate1="10.00";
						 expRow1AdjustedQty1="103.00";
						 
						 System.out.println("********************************** Third Row  *************************************");
						 
						 System.out.println("BatchName1               : "+actBatchName1				+" Value Expected : "+expBatchName1);
						 
						 System.out.println("TotalQty1                : "+actTotalQty1				+" Value Expected : "+expTotalQty1);
						 System.out.println("AdjustedQty1             : "+actAdjustedQty1			+" Value Expected : "+expAdjustedQty1);
						 System.out.println("Balance1                 : "+actBalance1				+" Value Expected : "+expBalance1);
						 System.out.println("TotalAdjustedQtyFooter1  : "+actTotalAdjustedQtyFooter1 +" Value Expected : "+expTotalAdjustedQtyFooter1);
						 System.out.println("TotalQtyFooter1          : "+actTotalQtyFooter1			+" Value Expected : "+expTotalQtyFooter1);
						 
						 //First Row
						 
						 System.out.println("Row1BatchNo1             : "+actRow1BatchNo1			+" Value Expected : "+expRow1BatchNo1);
						 System.out.println("Row1BaseQty1             : "+actRow1BaseQty1			+" Value Expected : "+expRow1BaseQty1);
						 System.out.println("Row1Rate1                : "+actRow1Rate1				+" Value Expected : "+expRow1Rate1);
						 System.out.println("Row1AdjustedQty1         : "+actRow1AdjustedQty1		+" Value Expected : "+expRow1AdjustedQty1);
						 
						
						if(batchPopUPEmptyRows.getAttribute("data-totalrows").equalsIgnoreCase("1") && 
								actBatchName1.equalsIgnoreCase(expBatchName1) && actTotalQty1.equalsIgnoreCase(expTotalQty1) && actAdjustedQty1.equalsIgnoreCase(expAdjustedQty1) &&
								actBalance1.equalsIgnoreCase(expBalance1) &&
								
								actTotalAdjustedQtyFooter1.equalsIgnoreCase(expTotalAdjustedQtyFooter1) && actTotalQtyFooter1.equalsIgnoreCase(expTotalQtyFooter1) 
								
								&& actRow1BatchNo1.equalsIgnoreCase(expRow1BatchNo1) && actRow1BaseQty1.equalsIgnoreCase(expRow1BaseQty1) && actRow1Rate1.equalsIgnoreCase(expRow1Rate1) 
								&& actRow1AdjustedQty1.equalsIgnoreCase(expRow1AdjustedQty1))
							{	
					 			System.out.println("Test Pass : Voucher Saved Successfully");
								 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
							     batchCancelIcon.click();
					 		     
							     Thread.sleep(5000);
							     
							     //Checking Fourth Row
								 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_13thColumn));
								 select4thRow_13thColumn.click();
		
								 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
								
									
								 Thread.sleep(3000);
								 
								// Actual
								 actBatchName1=batchItemName.getText();
								 actTotalQty1=batchTotalQty.getText();
								 actAdjustedQty1=batchAdjustQty.getText();
								 actBalance1=batchBalance.getText();
								 actTotalAdjustedQtyFooter1=batchTotalAdjustedQtyFooter.getText();
								 actTotalQtyFooter1=batchTotalQtyFooter.getText();
								
								 actRow1BatchNo1=batch_BatchNoRow1.getText();
								 actRow1BaseQty1=batch_BaseQtyRow1.getText();
								 actRow1Rate1=batch_RateRow1.getText();
								 actRow1AdjustedQty1=batch_QtyAdjustedRow1.getText();
								
								 Thread.sleep(2000);
								
								 // Expected
								 expBatchName1="BATCH WA ITEM";
								 expTotalQty1="1.00";
								 expAdjustedQty1="1.00";
								 expBalance1="0.00";
								 expTotalAdjustedQtyFooter1="1.00";
								 expTotalQtyFooter1="1.00";
								
								 expRow1BatchNo1="PVHWA";
								 expRow1BaseQty1="1.00";
								 expRow1Rate1="20.00";
								 expRow1AdjustedQty1="1.00";
								 
								 System.out.println("********************************** Fourth Row  *************************************");
								 
								 System.out.println("BatchName1               : "+actBatchName1				+" Value Expected : "+expBatchName1);
								 
								 System.out.println("TotalQty1                : "+actTotalQty1				+" Value Expected : "+expTotalQty1);
								 System.out.println("AdjustedQty1             : "+actAdjustedQty1			+" Value Expected : "+expAdjustedQty1);
								 System.out.println("Balance1                 : "+actBalance1				+" Value Expected : "+expBalance1);
								 System.out.println("TotalAdjustedQtyFooter1  : "+actTotalAdjustedQtyFooter1 +" Value Expected : "+expTotalAdjustedQtyFooter1);
								 System.out.println("TotalQtyFooter1          : "+actTotalQtyFooter1			+" Value Expected : "+expTotalQtyFooter1);
								 
								 //First Row
								 
								 System.out.println("Row1BatchNo1             : "+actRow1BatchNo1			+" Value Expected : "+expRow1BatchNo1);
								 System.out.println("Row1BaseQty1             : "+actRow1BaseQty1			+" Value Expected : "+expRow1BaseQty1);
								 System.out.println("Row1Rate1                : "+actRow1Rate1				+" Value Expected : "+expRow1Rate1);
								 System.out.println("Row1AdjustedQty1         : "+actRow1AdjustedQty1		+" Value Expected : "+expRow1AdjustedQty1);
								 
								
								if(batchPopUPEmptyRows.getAttribute("data-totalrows").equalsIgnoreCase("1") && 
										actBatchName1.equalsIgnoreCase(expBatchName1) && actTotalQty1.equalsIgnoreCase(expTotalQty1) && actAdjustedQty1.equalsIgnoreCase(expAdjustedQty1) &&
										actBalance1.equalsIgnoreCase(expBalance1) &&
										
										actTotalAdjustedQtyFooter1.equalsIgnoreCase(expTotalAdjustedQtyFooter1) && actTotalQtyFooter1.equalsIgnoreCase(expTotalQtyFooter1) 
										
										&& actRow1BatchNo1.equalsIgnoreCase(expRow1BatchNo1) && actRow1BaseQty1.equalsIgnoreCase(expRow1BaseQty1) && actRow1Rate1.equalsIgnoreCase(expRow1Rate1) 
										&& actRow1AdjustedQty1.equalsIgnoreCase(expRow1AdjustedQty1))
											
								 {		
									 System.out.println("Test Pass : Voucher Saved Successfully");
									 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
									 batchCancelIcon.click();
									 
									 Thread.sleep(5000);
									 
									 //Checking Fifth Row
									 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_13thColumn));
									 select5thRow_13thColumn.click();
									 
									 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
									 
									 Thread.sleep(2000);
									 	
									// Actual
									 actBatchName1=batchItemName.getText();
									 actTotalQty1=batchTotalQty.getText();
									 actAdjustedQty1=batchAdjustQty.getText();
									 actBalance1=batchBalance.getText();
									 actTotalAdjustedQtyFooter1=batchTotalAdjustedQtyFooter.getText();
									 actTotalQtyFooter1=batchTotalQtyFooter.getText();
									
									 actRow1BatchNo1=batch_BatchNoRow1.getText();
									 actRow1BaseQty1=batch_BaseQtyRow1.getText();
									 actRow1Rate1=batch_RateRow1.getText();
									 actRow1AdjustedQty1=batch_QtyAdjustedRow1.getText();
									
									 Thread.sleep(2000);
									
									 // Expected
									 expBatchName1="BATCH WA ITEM";
									 expTotalQty1="59.00";
									 expAdjustedQty1="59.00";
									 expBalance1="0.00";
									 expTotalAdjustedQtyFooter1="59.00";
									 expTotalQtyFooter1="59.00";
									
									 expRow1BatchNo1="PVHWA";
									 expRow1BaseQty1="59.00";
									 expRow1Rate1="20.00";
									 expRow1AdjustedQty1="59.00";
									 
									 System.out.println("********************************** Fifth Row  *************************************");
									 
									 System.out.println("BatchName1               : "+actBatchName1				+" Value Expected : "+expBatchName1);
									 
									 System.out.println("TotalQty1                : "+actTotalQty1				+" Value Expected : "+expTotalQty1);
									 System.out.println("AdjustedQty1             : "+actAdjustedQty1			+" Value Expected : "+expAdjustedQty1);
									 System.out.println("Balance1                 : "+actBalance1				+" Value Expected : "+expBalance1);
									 System.out.println("TotalAdjustedQtyFooter1  : "+actTotalAdjustedQtyFooter1 +" Value Expected : "+expTotalAdjustedQtyFooter1);
									 System.out.println("TotalQtyFooter1          : "+actTotalQtyFooter1			+" Value Expected : "+expTotalQtyFooter1);
									 
									 //First Row
									 
									 System.out.println("Row1BatchNo1             : "+actRow1BatchNo1			+" Value Expected : "+expRow1BatchNo1);
									 System.out.println("Row1BaseQty1             : "+actRow1BaseQty1			+" Value Expected : "+expRow1BaseQty1);
									 System.out.println("Row1Rate1                : "+actRow1Rate1				+" Value Expected : "+expRow1Rate1);
									 System.out.println("Row1AdjustedQty1         : "+actRow1AdjustedQty1		+" Value Expected : "+expRow1AdjustedQty1);
									 
									
									if(batchPopUPEmptyRows.getAttribute("data-totalrows").equalsIgnoreCase("1") && 
											actBatchName1.equalsIgnoreCase(expBatchName1) && actTotalQty1.equalsIgnoreCase(expTotalQty1) && actAdjustedQty1.equalsIgnoreCase(expAdjustedQty1) &&
											actBalance1.equalsIgnoreCase(expBalance1) &&
											
											actTotalAdjustedQtyFooter1.equalsIgnoreCase(expTotalAdjustedQtyFooter1) && actTotalQtyFooter1.equalsIgnoreCase(expTotalQtyFooter1) 
											
											&& actRow1BatchNo1.equalsIgnoreCase(expRow1BatchNo1) && actRow1BaseQty1.equalsIgnoreCase(expRow1BaseQty1) && actRow1Rate1.equalsIgnoreCase(expRow1Rate1) 
											&& actRow1AdjustedQty1.equalsIgnoreCase(expRow1AdjustedQty1))
											
										{	
								 			System.out.println("Test Pass : Voucher Saved Successfully");
											 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
										     batchCancelIcon.click();
										     return true;
										     
										     
										}
										else
										{
											System.out.println("Test fail :  Voucher   Not Saved Successfully");
											getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
											batchCancelIcon.click();
											return false;
										} 
							 		 }
							 		 else
							 		 {
							 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
										 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
									     batchCancelIcon.click();
							 		     return false;
							 		  } 
							      
					 		 }
					 		 else
					 		 {
					 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
								 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
							     batchCancelIcon.click();
					 		     return false;
					 		  }   
					     
			 		 }
			 		 else
			 		 {
			 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
						 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
					     batchCancelIcon.click();
			 		     return false;
			 		  }     
			     
	 		 }
	 		 else
	 		 {
	 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			     batchCancelIcon.click();
	 		     return false;
	 		  }
			
 		 }
 		 else
 		 {
 			System.out.println("Test fail :  Voucher   Not Saved Successfully");
 		    return false;
 		  }
	 
	
	}
	 
	 
	 public boolean CheckChangeInventoryTagInVoucherAndClickOnSave() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
			
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		 Thread.sleep(2000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		 wareHouseTxt.click();
		 wareHouseTxt.sendKeys(Keys.END);
		 wareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		 Thread.sleep(2000);
		 wareHouseTxt.sendKeys(Keys.SPACE);
				
		 int warehousecount=wareHouseListCount.size();
		 
		 System.err.println(warehousecount);
		 
		 for(int i=0 ; i < warehousecount ;i++)
		 {
			 String data=wareHouseListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("SECUNDERABAD"))
			 {
				 wareHouseListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		 wareHouseTxt.sendKeys(Keys.TAB);
			
		 Thread.sleep(2000);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		 saveBtn.click();
		 
		 String expErrorMessage="Provide data for mandatory fields Batch";
		 
		 String validationMessage=checkValidationMessage(expErrorMessage);
		  	
		 System.out.println("************************************* CheckChangeInventoryTagInVoucherAndClickOnSave  *********************************");
		 System.out.println("error Message  :  "+validationMessage+" Value Expected : "+expErrorMessage);
		 
		 if (validationMessage.equalsIgnoreCase(expErrorMessage))
		 {
			 return true;
		 } 
		 else 
		 {
			 return false;
		 }	
	 }
		 
		 
	 public boolean checkVoucherAVGAVGOAndFirstRowInputValuesByChangingInventory() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
				
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
		 Thread.sleep(5000);
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 select1stRow_1stColumn.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		 enter_ItemTxt.click();
		 
		 enter_ItemTxt.sendKeys(Keys.TAB);
		 
		 Thread.sleep(2000);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 select1stRow_4thColumn.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		 enter_AQTxt.click();
		 enter_AQTxt.sendKeys(Keys.TAB);
		
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		 enter_FQTxt.click();
		
		 enter_FQTxt.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		 enter_AvgRate.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		 enter_AvgRateo.sendKeys(Keys.TAB);
		
			Thread.sleep(3000);
		
			
			String actItemR1C1=select1stRow_1stColumn.getText();
			String actUnitsR1C2=select1stRow_2ndColumn.getText();
			String actRDR1C3=select1stRow_3rdColumn.getText();
			String actAQR1C4=select1stRow_4thColumn.getText(); 
			String actFQR1C5=select1stRow_5thColumn.getText();
			String actAvgRateR1C6=select1stRow_6thColumn.getText();
			String actAvgRateOR1C7=select1stRow_7thColumn.getText();
			//String actQtyR1C8=select1stRow_8thColumn.getText();
			boolean actLSOR1C9=select1stRow_9thColumn.getText().isEmpty();
			boolean actQtyToReleaseR1C10=select1stRow_10thColumn.getText().isEmpty();
			String actRateR1C11=select1stRow_11thColumn.getText();
			String actGrossR1C12=select1stRow_12thColumn.getText();
			boolean actBatchR1C13=select1stRow_13thColumn.getText().isEmpty();
			
			
			String expItemR1C1="BATCH WA ITEM";
			String expUnitsR1C2="Pcs";
			String expRDR1C3="0.00";
			String expAQR1C4="9.00";
			String expFQR1C5="5.00";
			String expAvgRateR1C6="56.25";
			String expAvgRateoR1C7="56.25";
			String expQtyR1C8="14.00";
			boolean expLSOR1C9=true;
			boolean expQtyToReleaseR1C10=true;
			String expRateR1C11="0.00";
			String expGrossR1C12="0.00"; 
			boolean expBatchR1C13=true;
			
			
			System.out.println("*********************************** checkVoucherAVGAVGOAndFirstRowInputValuesByChangingInventory  *******************************");
			
			System.out.println("Entry Page R1 Item Value Actual        : "+actItemR1C1                         +" Value Expected : "+expItemR1C1);	
			System.out.println("Entry Page R1 Units Value Actual       : "+actUnitsR1C2                        +" Value Expected : "+expUnitsR1C2);
			System.out.println("Entry Page RD R1 Value Actual          : "+actRDR1C3                           +" Value Expected : "+expRDR1C3);
			System.out.println("Entry Page AQ R1 Value Actual          : "+actAQR1C4                           +" Value Expected : "+expAQR1C4);
			System.out.println("Entry Page FQ R1 Value Actual          : "+actFQR1C5                           +" Value Expected : "+expFQR1C5);
			System.out.println("Entry Page AVG Rate R1 Value Actual    : "+actAvgRateR1C6                      +" Value Expected : "+expAvgRateR1C6);
			
			System.out.println("Entry Page AVG RateO R1 Value Actual   : "+actAvgRateOR1C7                     +" Value Expected : "+expAvgRateoR1C7);	
			//System.out.println("Entry Page Qty R1 Value Actual         : "+actQtyR1C8                          +" Value Expected : "+expQtyR1C8);
			System.out.println("Entry Page LSO R1 Value Actual         : "+actLSOR1C9                          +" Value Expected : "+expLSOR1C9);
			System.out.println("Entry Page Qty To Release Value Actual : "+actQtyToReleaseR1C10                +" Value Expected : "+expQtyToReleaseR1C10);
			
			System.out.println("Entry Page Rate R1 Value Actual        : "+actRateR1C11                        +" Value Expected : "+expRateR1C11);	
			System.out.println("Entry Page Gross R1 Value Actual       : "+actGrossR1C12                       +" Value Expected : "+expGrossR1C12);
			System.out.println("Entry Page Batch R1 Value Actual       : "+actBatchR1C13                       +" Value Expected : "+expBatchR1C13);
			
			
			if(actItemR1C1.equalsIgnoreCase(expItemR1C1) && actUnitsR1C2.equalsIgnoreCase(expUnitsR1C2)
					&& actRDR1C3.equalsIgnoreCase(expRDR1C3) && actAQR1C4.equalsIgnoreCase(expAQR1C4)
					&& actFQR1C5.equalsIgnoreCase(expFQR1C5) && actAvgRateR1C6.equalsIgnoreCase(expAvgRateR1C6)
					&& actAvgRateOR1C7.equalsIgnoreCase(expAvgRateoR1C7) /*&& actQtyR1C8.equalsIgnoreCase(expQtyR1C8)*/
					&& actLSOR1C9==expLSOR1C9 && actQtyToReleaseR1C10==expQtyToReleaseR1C10
					&& actRateR1C11.equalsIgnoreCase(expRateR1C11) && actGrossR1C12.equalsIgnoreCase(expGrossR1C12)
					&& actBatchR1C13==expBatchR1C13)
			{	
				System.out.println("Test Pass : Data Entered in first Row");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				return false;
			}
	 } 
		 
		 
		 
		 
	
		 
		 
		 
	 public boolean checkBatchPopupScreenWisePopupBeforePickChangeInventoryTag() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
			
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 select1stRow_12thColumn.click();	
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		 enter_Gross.click();
		 enter_Gross.sendKeys(Keys.TAB);
		 
		 Thread.sleep(3000);
		 
		 System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
		 
		 String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		 String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		 
		 String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		 String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		 
		 // Actual
		 actBatchName=batchItemName.getText();
		 actTotalQty=batchTotalQty.getText();
		 actAdjustedQty=batchAdjustQty.getText();
		 actBalance=batchBalance.getText();
		 actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		 actTotalQtyFooter=batchTotalQtyFooter.getText();
		 
		 actRow1BatchNo=batch_BatchNoRow1.getText();
		 actRow1BaseQty=batch_BaseQtyRow1.getText();
		 actRow1Rate=batch_RateRow1.getText();
		 actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		 
		 actRow2BatchNo=batch_BatchNoRow2.getText();
		 actRow2BaseQty=batch_BaseQtyRow2.getText();
		 actRow2Rate=batch_RateRow2.getText();
		 actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		 
		 String actRow3BatchNo=batch_BatchNoRow3.getText();
		 String actRow3BaseQty=batch_BaseQtyRow3.getText();
		 String actRow3Rate=batch_RateRow3.getText();
		 String actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		 
		 
		 String actRow4BatchNo=batch_BatchNoRow4.getText();
		 String actRow4BaseQty=batch_BaseQtyRow4.getText();
		 String actRow4Rate=batch_RateRow4.getText();
		 String actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		 
		 
		 // Expected
		 expBatchName="BATCH WA ITEM";
		 expTotalQty="14.00";
		 expAdjustedQty="0.00";
		 expBalance="14.00";
		 
		 expTotalQtyFooter="120.00";
		 expTotalAdjustedQtyFooter="0.00";
		 
		 expRow1BatchNo="PVSWA";
		 expRow1BaseQty="12.00";
		 expRow1Rate="3.00";
		 expRow1AdjustedQty="0";
		 
		 expRow2BatchNo="PVSWA";
		 expRow2BaseQty="48.00";
		 expRow2Rate="12.00";
		 expRow2AdjustedQty="0";
		 
		 String expRow3BatchNo="PVSWA";
		 String expRow3BaseQty="36.00";
		 String expRow3Rate="15.00";
		 String expRow3AdjustedQty="0";
		 
		 String expRow4BatchNo="PVSWA";
		 String expRow4BaseQty="24.00";
		 String expRow4Rate="15.00";
		 String expRow4AdjustedQty="0";
			
		 System.out.println("********************************** checkBatchPopupScreenWisePopupBeforePickChangeInventoryTag  *************************************");
		 
		 System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		 System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		 System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		 System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		 System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		 System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
				
		 System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		 System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		 System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		 System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
		 
		 System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		 System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		 System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		 System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		 
		 System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		 System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+expRow3BaseQty);
		 System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+actRow3Rate               + " Value Expected : "+expRow3Rate);
		 System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		 
		 System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		 System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		 System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		 System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		 
		 if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
        		 && actBalance.equalsIgnoreCase(expBalance) && batchPopUPEmptyRows.getAttribute("data-totalrows").equalsIgnoreCase("4") 
					
        		 && actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
					
        		 && actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
        		 && actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
        		 
        		 && actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
        		 && actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
        		 
        		 && actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
        		 && actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
        		 
        		 && actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
        		 && actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{	
        	 System.out.println("Test Pass : Batch fields are As expected ");
        	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
        	 return true;
		}
        else
        {
        	 System.out.println("Test Fail : Batch fields are As Not  expected ");
        	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
        	 return false;
        }
			 
	 }
		 
		 
		 
		 
	 public boolean checkBatchPopupScreenWisePopupClickOnManualInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		 
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow2));
		 batch_QtyAdjustedRow2.click();	
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
		 batch_EnterQtyAdjsuted.sendKeys("14");	
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		 batchOkIcon.click();
		 
		 Thread.sleep(3000);
		 
		 String actGetBatchColumn=select1stRow_13thColumn.getText();
		 
		 String expBatchColumn="PVSWA";
		 
		 System.out.println("********************************** checkBatchPopupScreenWisePopupClickOnManualInput  *************************************");
		 
		 System.out.println("BatchColumn  : "+ actGetBatchColumn+" Value Expected : "+expBatchColumn);
		 
		 if(actGetBatchColumn.equalsIgnoreCase(expBatchColumn))
		 {
			 System.out.println("Test Pass : Batch fields are As expected ");
			 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Fail : Batch fields are As Not  expected ");
			 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			 return false;
		 }
		 
	 }
		 
	     
		 

	 public boolean checkBatchPopupScreenAfterManualBatchConsume() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		    select1stRow_13thColumn.click();
				
			Thread.sleep(3000);
			
			System.out.println("Batch Rows"+batchPopUPEmptyRows.getAttribute("data-totalrows"));
			
			String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
			String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
			
			String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
			String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
			
			 // Actual
			 actBatchName=batchItemName.getText();
			 actTotalQty=batchTotalQty.getText();
			 actAdjustedQty=batchAdjustQty.getText();
			 actBalance=batchBalance.getText();
			 actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
			 actTotalQtyFooter=batchTotalQtyFooter.getText();
			 
			 actRow1BatchNo=batch_BatchNoRow1.getText();
			 actRow1BaseQty=batch_BaseQtyRow1.getText();
			 actRow1Rate=batch_RateRow1.getText();
			 actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
			 
			 actRow2BatchNo=batch_BatchNoRow2.getText();
			 actRow2BaseQty=batch_BaseQtyRow2.getText();
			 actRow2Rate=batch_RateRow2.getText();
			 actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
			 
			 String actRow3BatchNo=batch_BatchNoRow3.getText();
			 String actRow3BaseQty=batch_BaseQtyRow3.getText();
			 String actRow3Rate=batch_RateRow3.getText();
			 String actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
			 
			 
			 String actRow4BatchNo=batch_BatchNoRow4.getText();
			 String actRow4BaseQty=batch_BaseQtyRow4.getText();
			 String actRow4Rate=batch_RateRow4.getText();
			 String actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
			 
			 
			 // Expected
			 expBatchName="BATCH WA ITEM";
			 expTotalQty="14.00";
			 expAdjustedQty="14.00";
			 expBalance="0.00";
			 
			 expTotalQtyFooter="120.00";
			 expTotalAdjustedQtyFooter="14.00";
			 
			 expRow1BatchNo="PVSWA";
			 expRow1BaseQty="12.00";
			 expRow1Rate="3.00";
			 expRow1AdjustedQty="0";
			 
			 expRow2BatchNo="PVSWA";
			 expRow2BaseQty="48.00";
			 expRow2Rate="12.00";
			 expRow2AdjustedQty="14";
			 
			 String expRow3BatchNo="PVSWA";
			 String expRow3BaseQty="36.00";
			 String expRow3Rate="15.00";
			 String expRow3AdjustedQty="0";
			 
			 String expRow4BatchNo="PVSWA";
			 String expRow4BaseQty="24.00";
			 String expRow4Rate="15.00";
			 String expRow4AdjustedQty="0";
				
			 System.out.println("********************************** checkBatchPopupScreenAfterManualBatchConsume  *************************************");
			 
			 System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
			 System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
			 System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
			 System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
			 System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
			 System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
					
			 System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
			 System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
			 System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
			 System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			 
			 System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
			 System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
			 System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
			 System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
			 
			 System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
			 System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+expRow3BaseQty);
			 System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+actRow3Rate               + " Value Expected : "+expRow3Rate);
			 System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
			 
			 System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
			 System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
			 System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
			 System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
			 
			 if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
	        		 && actBalance.equalsIgnoreCase(expBalance) && batchPopUPEmptyRows.getAttribute("data-totalrows").equalsIgnoreCase("4") 
						
	        		 && actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
						
	        		 && actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
	        		 && actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty) 
	        		 
	        		 && actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
	        		 && actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
	        		 
	        		 && actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
	        		 && actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
	        		 
	        		 && actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
	        		 && actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
			{
				System.out.println("Test Pass : Batch fields are As expected ");
				excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			     batchCancelIcon.click();
			
				return true;
			}
			else
			{
				System.out.println("Test Fail : Batch fields are As Not  expected ");
				excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			     batchCancelIcon.click();
				
				return false;
			}
	 }

 
    public boolean checkSalesVoucherWithRateOption()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		Thread.sleep(2000);
    	for(int i=0;i<=4;i++)
    	{
    		Thread.sleep(2000);
    		secondRowIndex.click();
    		Thread.sleep(1000);
    		deleteRowBtn.click();
    		
    	}
    	
    	Thread.sleep(2000);
    	
   	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
   	    select1stRow_11thColumn.click();
    	
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	   	 enter_Rate.sendKeys("20");
	   	 enter_Rate.sendKeys(Keys.TAB);
	   	 
	   	 Thread.sleep(4000);
	   	 
	   	 enter_Gross.sendKeys(Keys.TAB);
	
	  	
		String actGrossValue=select1stRow_12thColumn.getText();
		String expGrossValue="280.00";
		
		
		System.out.println("********************************** checkSalesVoucherWithRateOption  *************************************");
		
		System.out.println("GrossValue  : "+actGrossValue+" Value Expected : "+expGrossValue);
		
		if (actGrossValue.equalsIgnoreCase(expGrossValue)) 
		{
			System.out.println(" Test Pass: Gross Value Is Updated with Rate Option"); 		
			return true;
		} 
		else 
		{
			System.out.println(" Test Pass: Gross Value Is Updated with Rate Option");
			return false;
		}
    }

     
     public boolean checkSaveButtontoDisplayBillRefereneceScreenPopupInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
     {

	    excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		
		// Actual
		boolean actbillRefPaymentsBillReferenceLabel=billRefPaymentsBillReferenceLabel.isDisplayed();
		boolean actbillRefNewReferenceTxt=billRefNewReferenceTxt.isDisplayed();
		boolean actbillRefTxtOnAccount=billRefTxtOnAccount.isDisplayed();
		boolean actbillRefSearchTxt=billRefSearchTxt.isDisplayed();
		boolean actbillRefNewReferenceDropdown=billRefNewReferenceDropdown.isDisplayed();
		boolean actbillRefShowBillsDropdown=billRefShowBillsDropdown.isDisplayed();
		boolean actbillRefAdjustOnFIFOBtn=billRefAdjustOnFIFOBtn.isDisplayed();
		boolean actbillRefPickIcon=billRefPickIcon.isDisplayed();
		boolean actbillRefOkBtn=billRefOkBtn.isDisplayed();
		boolean actbillRefcancel=billRefcancel.isDisplayed();
		
		// Expected
		boolean expbillRefPaymentsBillReferenceLabel=true;
		boolean expbillRefNewReferenceTxt=true;
		boolean expbillRefTxtOnAccount=true;
		boolean expbillRefSearchTxt=true;
		boolean expbillRefNewReferenceDropdown=true;
		boolean expbillRefShowBillsDropdown=true;
		boolean expbillRefAdjustOnFIFOBtn=true;
		boolean expbillRefPickIcon=true;
		boolean expbillRefOkBtn=true;
		boolean expbillRefcancel=true;
		
		System.out.println("************************************* checkSaveButtontoDisplayBillRefereneceScreenPopupInSalesInvoice  *********************************");
		
		System.out.println("Bill Reference Screen Lable : "+actbillRefPaymentsBillReferenceLabel +"  Value Expected : "+expbillRefPaymentsBillReferenceLabel);
		System.out.println("New refernce Text Filed 	: "+actbillRefNewReferenceTxt			 +"  Value Expected : "+expbillRefNewReferenceTxt);
		System.out.println("On Account Text Filed 		: "+actbillRefTxtOnAccount				 +"  Value Expected : "+expbillRefTxtOnAccount);
		System.out.println("Search Text Filed 			: "+actbillRefSearchTxt					 +"  Value Expected : "+expbillRefSearchTxt);
		System.out.println("Adjust Bills Drop Down		: "+actbillRefNewReferenceDropdown		 +"  Value Expected : "+expbillRefNewReferenceDropdown);
		System.out.println("Show Bills Drop Down 		: "+actbillRefShowBillsDropdown			 +"  Value Expected : "+expbillRefShowBillsDropdown);
		System.out.println("Adjsut On FIFO 				: "+actbillRefAdjustOnFIFOBtn			 +"  Value Expected : "+expbillRefAdjustOnFIFOBtn);
		System.out.println("Pick Option 				: "+actbillRefPickIcon					 +"  Value Expected : "+expbillRefPickIcon);
		System.out.println("Ok Button 					: "+actbillRefOkBtn						 +"  Value Expected : "+expbillRefOkBtn);
		System.out.println("Cancel Button 				: "+actbillRefcancel					 +"  Value Expected : "+expbillRefcancel);
		
		if (actbillRefPaymentsBillReferenceLabel==expbillRefPaymentsBillReferenceLabel && actbillRefNewReferenceTxt==expbillRefNewReferenceTxt
				&& actbillRefTxtOnAccount==expbillRefTxtOnAccount && actbillRefSearchTxt==expbillRefSearchTxt
				&& actbillRefNewReferenceDropdown==expbillRefNewReferenceDropdown && actbillRefShowBillsDropdown==expbillRefShowBillsDropdown
				&& actbillRefAdjustOnFIFOBtn==expbillRefAdjustOnFIFOBtn && actbillRefPickIcon==expbillRefPickIcon
				&& actbillRefOkBtn==expbillRefOkBtn && actbillRefcancel==expbillRefcancel)  
		{
			System.out.println(" Pass: Diplayed  Bill Reference Screen  in Sales Invoice ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			return true;
		}
		else
		{
			System.out.println(" Fail: Not  Diplayed  Bill Reference Screen in Sales Invoice");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
	        return false;
		}

     }
     


	     
     public boolean checkClickOnOkButtonWithoutPickButtonInSalesInvoiceBillwiseScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
     {
    	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
    	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 		
    	 Thread.sleep(2000);
    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
    	 Bill_OkBtn.click();
    	 
    	 
		 String expErrorMessage="Adjusted amount is not equal to total amount";
		 
		 String validationMessage=checkValidationMessage(expErrorMessage);
		  	
		 System.out.println("************************************* checkClickOnOkButtonWithoutPickButtonInSalesInvoiceBillwiseScreen  *********************************");
		 System.out.println("error Message  :  "+validationMessage+" Value Expected : "+expErrorMessage);
		 
		 if (validationMessage.equalsIgnoreCase(expErrorMessage))
    	 {
    		 System.out.println("Test Pass : Error Message is Displayed ");
    		 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
    		 return true;
    	 }
    	 else
    	 {
    		 System.out.println("Test Fail :  Error Message is  not Displayed ");
    		 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
    		 return false;
    	 }
     }
	  
	  
	 	
 	public boolean checkClickOnCancelButtonInBillwiseScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 	{
 		excelReader=new ExcelReader(POJOUtility.getExcelPath());
 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefcancel));	
 	
 		billRefcancel.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("***************************************** checkClickOnCancelButtonInBillwiseScreen  ***************************************************");
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+   " Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+  " Value Expected : "+expEntryPageFooterFieldsNetAmount);

				
		if(actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount)
 		{
 			System.out.println(" Test Pass: Cancel option in Bill Referenece ");
 			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
 			return true;
 		}
 		else
 		{
 			System.out.println(" Test Fail: Cancel option in Bill Referenece ");
 			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
 			return false;
 		}
 	}
	 	
 	
 	
	 	
  
 	public boolean checkBillwiseScreenClickOnSaveButtonAfterCancelTheBillwiseScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 	{
 		excelReader=new ExcelReader(POJOUtility.getExcelPath());
 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 	
 	    Thread.sleep(2000);
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

 		Thread.sleep(2000);
		
		
		String actbillRefNewReferenceTxt=billRefNewReferenceTxt.getAttribute("value");
		String actamtAdjustedAgainstNewREfinOtherVouchers=amtAdjustedAgainstNewREfinOtherVouchers.getText();
		String acttransactionCurency=transactionCurency.getText();
		String actbaseCurrency=baseCurrency.getText();
		String actlocalCurrencyDhs=localCurrencyDhs.getText();
		
		String actbalanceNewReferenceAmt=balanceNewReferenceAmt.getText();
		//String actbreakUpByTagDueDate=breakUpByTagDueDate.getText();
		String actbreakUpByTagDepartment=breakUpByTagDepartment.getText();
		String actbreakUpByTagBaseCurrency=breakUpByTagBaseCurrency.getText();
		//String actbillRefInfoBarLocalCurrencyRate=billRefInfoBarLocalCurrencyRate.getText();
		
		String actbreakUpByTagBaseLocalCurrency=breakUpByTagBaseLocalCurrency.getText();
		String actbillRefAdjustAmountInTransCurency=billRefAdjustAmountInTransCurency.getText();
		String actbillRefBalanceAmountAdjustInTrnasCurrency=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		String expbillRefNewReferenceTxt="0.00";
		String expamtAdjustedAgainstNewREfinOtherVouchers="0.00";
		String exptransactionCurency="280.00";
		String expbaseCurrency="280.00";
		String explocalCurrencyDhs="19.60";
		String expbalanceNewReferenceAmt="0.00";
		//String expbreakUpByTagDueDate="17-10-2019";
		String expbreakUpByTagDepartment="INDIA";
		String expbreakUpByTagBaseCurrency="280.00";
		//String expbillRefInfoBarLocalCurrencyRate="0.07";
		String expbreakUpByTagBaseLocalCurrency="19.60";
		String expbillRefAdjustAmountInTransCurency="0";
		String expbillRefBalanceAmountAdjustInTrnasCurrency="280.00";
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    java.util.Date date=new java.util.Date();
		//String expbreakUpByTagDueDate=df.format(date);
	    
	    System.out.println("************************************* checkBillwiseScreenClickOnSaveButtonAfterCancelTheBillwiseScreen  *********************************");
		
		System.out.println("billRefNewReferenceTxt                   :"+actbillRefNewReferenceTxt					 +" value Expected : "+expbillRefNewReferenceTxt);
		System.out.println("amtAdjustedAgainstNewREfinOtherVouchers  : "+actamtAdjustedAgainstNewREfinOtherVouchers	 +" Value Expected : "+expamtAdjustedAgainstNewREfinOtherVouchers);
		System.out.println("transactionCurency                	     :"+acttransactionCurency						 +" value Expected : "+exptransactionCurency);
		System.out.println("baseCurrency                  			 :"+actbaseCurrency								 +" value Expected : "+expbaseCurrency);
		System.out.println("localCurrencyDhs                   		 :"+actlocalCurrencyDhs							 +" value Expected : "+explocalCurrencyDhs);
		System.out.println("balanceNewReferenceAmt                   :"+actbalanceNewReferenceAmt					 +" value Expected : "+expbalanceNewReferenceAmt);
		System.out.println("breakUpByTagDepartment                   :"+actbreakUpByTagDepartment					 +" value Expected : "+expbreakUpByTagDepartment);
		System.out.println("breakUpByTagBaseCurrency                 :"+actbreakUpByTagBaseCurrency					 +" value Expected : "+expbreakUpByTagBaseCurrency);
		//System.out.println("billRefInfoBarLocalCurrencyRate          :"+actbillRefInfoBarLocalCurrencyRate			 +" value Expected : "+expbillRefInfoBarLocalCurrencyRate);
		System.out.println("breakUpByTagBaseLocalCurrency            :"+actbreakUpByTagBaseLocalCurrency			 +" value Expected : "+expbreakUpByTagBaseLocalCurrency);
		System.out.println("billRefAdjustAmountInTransCurency        :"+actbillRefAdjustAmountInTransCurency		 +" value Expected : "+expbillRefAdjustAmountInTransCurency);
		System.out.println("billRefBalanceAmountAdjustInTrnasCurrency:"+actbillRefBalanceAmountAdjustInTrnasCurrency +" value Expected : "+expbillRefBalanceAmountAdjustInTrnasCurrency);
		
	
		if(actbillRefNewReferenceTxt.equalsIgnoreCase(expbillRefNewReferenceTxt) && actamtAdjustedAgainstNewREfinOtherVouchers.equalsIgnoreCase(expamtAdjustedAgainstNewREfinOtherVouchers)
				&& acttransactionCurency.equalsIgnoreCase(exptransactionCurency) && actbaseCurrency.equalsIgnoreCase(expbaseCurrency)
				&& actlocalCurrencyDhs.equalsIgnoreCase(explocalCurrencyDhs) && actbalanceNewReferenceAmt.equalsIgnoreCase(expbalanceNewReferenceAmt)
				&& actbreakUpByTagDepartment.equalsIgnoreCase(expbreakUpByTagDepartment) && actbreakUpByTagBaseCurrency.equalsIgnoreCase(expbreakUpByTagBaseCurrency)
				/*&& actbillRefInfoBarLocalCurrencyRate.equalsIgnoreCase(expbillRefInfoBarLocalCurrencyRate) */&& actbreakUpByTagBaseLocalCurrency.equalsIgnoreCase(expbreakUpByTagBaseLocalCurrency)
				&& actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency))
 		{
 			System.out.println("Test Pass : Currency fields are As expected ");
 			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
 			return true;
 		}
 		else
 		{
 			System.out.println("Test Fail : Currency fields are As Not  expected ");
 			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
 			return false;
 		}
 	}
 	 
  
  

 	public boolean checkBillwiseInformationValuesAfterClickOnPickButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 	{
 		excelReader=new ExcelReader(POJOUtility.getExcelPath());
 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		
 		Thread.sleep(2000);
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
 		billRefPickIcon.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		
		
		String actbillRefNewReferenceTxt=billRefNewReferenceTxt.getAttribute("value");
		String actamtAdjustedAgainstNewREfinOtherVouchers=amtAdjustedAgainstNewREfinOtherVouchers.getText();
		String acttransactionCurency=transactionCurency.getText();
		String actbaseCurrency=baseCurrency.getText();
		String actlocalCurrencyDhs=localCurrencyDhs.getText();
		
		String actbalanceNewReferenceAmt=balanceNewReferenceAmt.getText();
		//String actbreakUpByTagDueDate=breakUpByTagDueDate.getText();
		String actbreakUpByTagDepartment=breakUpByTagDepartment.getText();
		String actbreakUpByTagBaseCurrency=breakUpByTagBaseCurrency.getText();
		//String actbillRefInfoBarLocalCurrencyRate=billRefInfoBarLocalCurrencyRate.getText();
		
		String actbreakUpByTagBaseLocalCurrency=breakUpByTagBaseLocalCurrency.getText();
		String actbillRefAdjustAmountInTransCurency=billRefAdjustAmountInTransCurency.getText();
		String actbillRefBalanceAmountAdjustInTrnasCurrency=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		String expbillRefNewReferenceTxt="280.00";
		String expamtAdjustedAgainstNewREfinOtherVouchers="0.00";
		String exptransactionCurency="280.00";
		String expbaseCurrency="280.00";
		String explocalCurrencyDhs="19.60";
		String expbalanceNewReferenceAmt="280.00";
		//String expbreakUpByTagDueDate="17-10-2019";
		String expbreakUpByTagDepartment="INDIA";
		String expbreakUpByTagBaseCurrency="280.00";
		//String expbillRefInfoBarLocalCurrencyRate="0.07";
		String expbreakUpByTagBaseLocalCurrency="19.60";
		String expbillRefAdjustAmountInTransCurency="280";
		String expbillRefBalanceAmountAdjustInTrnasCurrency="0.00";
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    java.util.Date date=new java.util.Date();
		//String expbreakUpByTagDueDate=df.format(date);
	    
	    System.out.println("************************************* checkBillwiseInformationValuesAfterClickOnPickButton  *********************************");
		
		System.out.println("billRefNewReferenceTxt                   :"+actbillRefNewReferenceTxt					 +" value Expected : "+expbillRefNewReferenceTxt);
		System.out.println("amtAdjustedAgainstNewREfinOtherVouchers  : "+actamtAdjustedAgainstNewREfinOtherVouchers	 +" Value Expected : "+expamtAdjustedAgainstNewREfinOtherVouchers);
		System.out.println("transactionCurency                	     :"+acttransactionCurency						 +" value Expected : "+exptransactionCurency);
		System.out.println("baseCurrency                  			 :"+actbaseCurrency								 +" value Expected : "+expbaseCurrency);
		System.out.println("localCurrencyDhs                   		 :"+actlocalCurrencyDhs							 +" value Expected : "+explocalCurrencyDhs);
		System.out.println("balanceNewReferenceAmt                   :"+actbalanceNewReferenceAmt					 +" value Expected : "+expbalanceNewReferenceAmt);
		System.out.println("breakUpByTagDepartment                   :"+actbreakUpByTagDepartment					 +" value Expected : "+expbreakUpByTagDepartment);
		System.out.println("breakUpByTagBaseCurrency                 :"+actbreakUpByTagBaseCurrency					 +" value Expected : "+expbreakUpByTagBaseCurrency);
		//System.out.println("billRefInfoBarLocalCurrencyRate          :"+actbillRefInfoBarLocalCurrencyRate			 +" value Expected : "+expbillRefInfoBarLocalCurrencyRate);
		System.out.println("breakUpByTagBaseLocalCurrency            :"+actbreakUpByTagBaseLocalCurrency			 +" value Expected : "+expbreakUpByTagBaseLocalCurrency);
		System.out.println("billRefAdjustAmountInTransCurency        :"+actbillRefAdjustAmountInTransCurency		 +" value Expected : "+expbillRefAdjustAmountInTransCurency);
		System.out.println("billRefBalanceAmountAdjustInTrnasCurrency:"+actbillRefBalanceAmountAdjustInTrnasCurrency +" value Expected : "+expbillRefBalanceAmountAdjustInTrnasCurrency);
		
	
		if(actbillRefNewReferenceTxt.equalsIgnoreCase(expbillRefNewReferenceTxt) && actamtAdjustedAgainstNewREfinOtherVouchers.equalsIgnoreCase(expamtAdjustedAgainstNewREfinOtherVouchers)
				&& acttransactionCurency.equalsIgnoreCase(exptransactionCurency) && actbaseCurrency.equalsIgnoreCase(expbaseCurrency)
				&& actlocalCurrencyDhs.equalsIgnoreCase(explocalCurrencyDhs) && actbalanceNewReferenceAmt.equalsIgnoreCase(expbalanceNewReferenceAmt)
				&& actbreakUpByTagDepartment.equalsIgnoreCase(expbreakUpByTagDepartment) && actbreakUpByTagBaseCurrency.equalsIgnoreCase(expbreakUpByTagBaseCurrency)
				/*&& actbillRefInfoBarLocalCurrencyRate.equalsIgnoreCase(expbillRefInfoBarLocalCurrencyRate) */&& actbreakUpByTagBaseLocalCurrency.equalsIgnoreCase(expbreakUpByTagBaseLocalCurrency)
				&& actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency))
 		{
 			System.out.println("Test Pass : Currency fields are As expected  After Pick Option ");
 			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
 			return true;
 		}
 		else
 		{
 			System.out.println("Test Fail :  Currency fields are As  Not expected  After Pick Option");
 			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
 			return false;
 		}
 	}
 	 
    
 	public boolean checkClickOnSaveButtonWithBillWisePickButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 	{
 		
 		excelReader=new ExcelReader(POJOUtility.getExcelPath());
 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		
 		
 		   
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 		Bill_OkBtn.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
 		String docno=documentNumberTxt.getAttribute("value");
 		
 		boolean savingMessage=checkVoucherSavingMessage(docno);
		
 		System.out.println("************************************* checkClickOnSaveButtonWithBillWisePickButton  *********************************");
		
 		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
		new_CloseBtn.click();
		
		if(savingMessage==true)
 		{	
 			System.out.println("Test Pass : Error Message is Displayed ");
 			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
 			return true;
 		}
 		else
 		{
 			System.out.println("Test Fail :  Error Message is  not Displayed ");
 			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);

 			return false;
 		}
 	}	

	     
	 	
  // Use this method
	 	
 	public boolean checkSecondRowBinInputAndBinPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
    	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
	
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
		select2ndRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.clear();
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys("4");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String ActData=enter_Quantity.getAttribute("value");
		String Expdata="4";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		enter_QuantityToRelease.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		
		String actItemR2C1	 =select2ndRow_1stColumn.getText();
		String actUnitsR2C2	 =select2ndRow_2ndColumn.getText();
		String actAQR2C4  	 =select2ndRow_4thColumn.getText();
		String actFQR2C5  	 =select2ndRow_5thColumn.getText();
		String actQtyR2C8 	 =select2ndRow_8thColumn.getText();
		String actRateR2C11  =select2ndRow_11thColumn.getText();
	
		String expItemR2C1 	 ="BIN FINISHED GOODS ITEM";
		String expUnitsR2C2	 ="Pcs";
		String expAQR2C4   	 ="0.00";
		String expFQR2C5   	 ="4.00";
		String expQtyR2C8  	 ="4.00";
		String expRateR2C11  ="10.00";
	
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
		
		// Actual
		boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
		boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
		boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
		boolean actbinPickBtn						=binPickBtn.isDisplayed();
		boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
		boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
		
		// Expected			
		boolean expbinSearchTxt						=true;
		boolean expbinSearchBtn						=true;
		boolean expbinAutoAllocateBtn				=true;
		boolean expbinPickBtn						=true;
		boolean expbinCancelBtn						=true;
		boolean expbinAutoAllocateWithinGroupBtn	=true;
		
		System.out.println("*********************************** checkVoucherSecondRowInputValuesInputOnlyAQ  ************************************");
		System.out.println("Entry Page R2 Item Value Actual     : "+actItemR2C1    					 +"   Value Expected :  "+expItemR2C1);	
		System.out.println("Entry Page R2 Units Value Actual    : "+actUnitsR2C2   					 +"   Value Expected :  "+expUnitsR2C2);
		System.out.println("Entry Page R2 AQ Value Actual       : "+actAQR2C4      					 +"   Value Expected :  "+expAQR2C4);
		System.out.println("Entry Page R2 FQ Value Actual       : "+actFQR2C5      					 +"   Value Expected :  "+expFQR2C5);
		System.out.println("Entry Page Qty Value Actual         : "+actQtyR2C8     					 +"   Value Expected :  "+expQtyR2C8);
		System.out.println("Entry Page Rate Value Actual        : "+actRateR2C11   					 +"   Value Expected :  "+expRateR2C11);
		
		System.out.println("************* Bin Out Ward Pop Up Screen************");
		
		System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"   Value Expected :  "+expbinSearchTxt);
		System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"   Value Expected :  "+expbinSearchBtn);
		System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"   Value Expected :  "+expbinAutoAllocateBtn);
		System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"   Value Expected :  "+expbinPickBtn);
		System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"   Value Expected :  "+expbinCancelBtn);
		System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"   Value Expected :  "+expbinAutoAllocateWithinGroupBtn);
		
		
		if(actItemR2C1.equalsIgnoreCase(expItemR2C1) && actUnitsR2C2.equalsIgnoreCase(expUnitsR2C2) && actAQR2C4.equalsIgnoreCase(expAQR2C4) 
				&& actFQR2C5.equalsIgnoreCase(expFQR2C5) && actQtyR2C8.equalsIgnoreCase(expQtyR2C8) && actRateR2C11.equalsIgnoreCase(expRateR2C11)
			
				&& actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
				&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn)
		{
			System.out.println("Test Pass : Bin Pop Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			return true;
			
		}
		else
		{
			System.out.println("Test Fail : Data NOT Entered in Second Row");
			return false;
		}
	}
     
	 	
	

	public boolean checkBinValuesInSalesInvoiceBinPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
						
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
	
		// Actual
		String actbinTotalQty					=binTotalQty.getAttribute("value");
		String actbinBaseUOM					=binBaseUOM.getText();
		String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
		
		String actbinoutwardRow1Bin				=binoutwardRow1Bin.getText();
		String actbinoutwardRow1Stock			=binoutwardRow1Stock.getText();
		String actbinoutwardRow1StockPcs		=binoutwardRow1StockPcs.getText();
		String actbinoutwardRow1Capacity		=binoutwardRow1Capacity.getText();
		String actbinoutwardRow1Load			=binoutwardRow1Load.getText();
		String actbinoutwardRow1FreeSpace		=binoutwardRow1FreeSpace.getText();
		String actbinoutwardRow1FreeQty			=binoutwardRow1FreeQty.getText();
		String actbinoutwardRow1ToBePicked		=binoutwardRow1ToBePicked.getText();
		
		
		String actbinoutwardRow2Bin				=binoutwardRow2Bin.getText();
		String actbinoutwardRow2Stock			=binoutwardRow2Stock.getText();
		String actbinoutwardRow2StockPcs		=binoutwardRow2StockPcs.getText();
		String actbinoutwardRow2Capacity		=binoutwardRow2Capacity.getText();
		String actbinoutwardRow2Load			=binoutwardRow2Load.getText();
		String actbinoutwardRow2FreeSpace		=binoutwardRow2FreeSpace.getText();
		String actbinoutwardRow2FreeQty			=binoutwardRow2FreeQty.getText();
		String actbinoutwardRow2ToBePicked		=binoutwardRow2ToBePicked.getText();
		
		String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
		
		// Expected
		String expbinTotalQty					="4.00";
		String expbinBaseUOM					="Pcs";
		String expbinBalanceTxt					="4.00";
		
		String expbinoutwardRow1Bin				="Bin Update";
		String expbinoutwardRow1Stock			="9.00";
		String expbinoutwardRow1StockPcs		="9.00";
		String expbinoutwardRow1Capacity		="9.00";
		String expbinoutwardRow1Load			="9.00";
		String expbinoutwardRow1FreeSpace		="0.00";
		String expbinoutwardRow1FreeQty			="0.00";
		String expbinoutwardRow1ToBePicked		="0.00";
		
		
		String expbinoutwardRow2Bin				="Bin1";
		String expbinoutwardRow2Stock			="3.00";
		String expbinoutwardRow2StockPcs		="3.00";
		String expbinoutwardRow2Capacity		="9.00";
		String expbinoutwardRow2Load			="3.00";
		String expbinoutwardRow2FreeSpace		="6.00";
		String expbinoutwardRow2FreeQty			="6.00";
		String expbinoutwardRow2ToBePicked		="0.00";
		
		String expbinoutwardRowTotalToBePicked	="0.00";
		
		
		System.out.println("*********************************** checkBinValuesInSalesInvoiceBinPopupScreen  ************************************");
		
		System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected :  "+expbinTotalQty);	
		System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected :  "+expbinBaseUOM);	
		System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected :  "+expbinBalanceTxt);	
		
		System.out.println("binoutwardRow1Bin        	 : "+actbinoutwardRow1Bin			+"  Value Expected :  "+expbinoutwardRow1Bin);
		System.out.println("binoutwardRow1Stock      	 : "+actbinoutwardRow1Stock			+"  Value Expected :  "+expbinoutwardRow1Stock);
		System.out.println("binoutwardRow1StockPcs   	 : "+actbinoutwardRow1StockPcs		+"  Value Expected :  "+expbinoutwardRow1StockPcs);
		System.out.println("binoutwardRow1Capacity   	 : "+actbinoutwardRow1Capacity		+"  Value Expected :  "+expbinoutwardRow1Capacity);
		System.out.println("binoutwardRow1Load     	 	 : "+actbinoutwardRow1Load			+"  Value Expected :  "+expbinoutwardRow1Load);
		System.out.println("binoutwardRow1FreeSpace  	 : "+actbinoutwardRow1FreeSpace		+"  Value Expected :  "+expbinoutwardRow1FreeSpace);
		System.out.println("binoutwardRow1FreeQty    	 : "+actbinoutwardRow1FreeQty		+"  Value Expected :  "+expbinoutwardRow1FreeQty);
		System.out.println("binoutwardRow1ToBePicked 	 : "+actbinoutwardRow1ToBePicked   	+"  Value Expected :  "+expbinoutwardRow1ToBePicked);
		
		
		System.out.println("binoutwardRow2Bin        	 : "+actbinoutwardRow2Bin			+"  Value Expected :  "+expbinoutwardRow2Bin);
		System.out.println("binoutwardRow2Stock      	 : "+actbinoutwardRow2Stock			+"  Value Expected :  "+expbinoutwardRow2Stock);
		System.out.println("binoutwardRow2StockPcs   	 : "+actbinoutwardRow2StockPcs		+"  Value Expected :  "+expbinoutwardRow2StockPcs);
		System.out.println("binoutwardRow2Capacity   	 : "+actbinoutwardRow2Capacity		+"  Value Expected :  "+expbinoutwardRow2Capacity);
		System.out.println("binoutwardRow2Load     	 	 : "+actbinoutwardRow2Load			+"  Value Expected :  "+expbinoutwardRow2Load);
		System.out.println("binoutwardRow2FreeSpace  	 : "+actbinoutwardRow2FreeSpace		+"  Value Expected :  "+expbinoutwardRow2FreeSpace);
		System.out.println("binoutwardRow2FreeQty    	 : "+actbinoutwardRow2FreeQty		+"  Value Expected :  "+expbinoutwardRow2FreeQty);
		System.out.println("binoutwardRow2ToBePicked 	 : "+actbinoutwardRow2ToBePicked   	+"  Value Expected :  "+expbinoutwardRow2ToBePicked);
		
		System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected :  "+expbinoutwardRowTotalToBePicked);
		
		
		if(actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
				&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)
				
				&& actbinoutwardRow1Bin.equalsIgnoreCase(expbinoutwardRow1Bin) && actbinoutwardRow1Stock.equalsIgnoreCase(expbinoutwardRow1Stock)
				&& actbinoutwardRow1StockPcs.equalsIgnoreCase(expbinoutwardRow1StockPcs) && actbinoutwardRow1Capacity.equalsIgnoreCase(expbinoutwardRow1Capacity)
				&& actbinoutwardRow1Load.equalsIgnoreCase(expbinoutwardRow1Load) && actbinoutwardRow1FreeSpace.equalsIgnoreCase(expbinoutwardRow1FreeSpace)
				&& actbinoutwardRow1FreeQty.equalsIgnoreCase(expbinoutwardRow1FreeQty) && actbinoutwardRow1ToBePicked.equalsIgnoreCase(expbinoutwardRow1ToBePicked)
				
				&& actbinoutwardRow2Bin.equalsIgnoreCase(expbinoutwardRow2Bin) && actbinoutwardRow2Stock.equalsIgnoreCase(expbinoutwardRow2Stock)
				&& actbinoutwardRow2StockPcs.equalsIgnoreCase(expbinoutwardRow2StockPcs) && actbinoutwardRow2Capacity.equalsIgnoreCase(expbinoutwardRow2Capacity)
				&& actbinoutwardRow2Load.equalsIgnoreCase(expbinoutwardRow2Load) && actbinoutwardRow2FreeSpace.equalsIgnoreCase(expbinoutwardRow2FreeSpace)
				&& actbinoutwardRow2FreeQty.equalsIgnoreCase(expbinoutwardRow2FreeQty) && actbinoutwardRow2ToBePicked.equalsIgnoreCase(expbinoutwardRow2ToBePicked)
				
				&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
		{
			System.out.println("Values Are As Expected");;
			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Values Are Not As Expected");
			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
			return false;
		}
	}
	

	public boolean checkOkWithoutSelectingAnyBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		String actbinOkButtonStatus		=binOkButtonStatus.getAttribute("disabled");
		
		String expbinOkButtonStatus		="true";
		
		System.out.println("*********************************** checkOkWithoutSelectingAnyBin  ************************************");
		
		System.out.println("binOkButtonStatus  : "+actbinOkButtonStatus+" Values Expected : "+expbinOkButtonStatus);

		
		if(actbinOkButtonStatus.equalsIgnoreCase(expbinOkButtonStatus))
		{
			System.out.println("Values Are As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Values Are Not As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
			return false;
		}
		
	}
     
	
			
	
	public boolean checkOkAfterAutoAllocatingBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		// Actual
		boolean actbinOkBtn						=binOkBtn.isDisplayed();
		String actbinoutwardRow1ToBePicked		=binoutwardRow1ToBePicked.getText();
		String actbinoutwardRow2ToBePicked		=binoutwardRow2ToBePicked.getText();
		String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
		
		// Expected
		boolean expbinOkBtn						=true;
		String expbinoutwardRow1ToBePicked		="4.00";
		String expbinoutwardRow2ToBePicked		="0.00";
		String expbinoutwardRowTotalToBePicked	="4.00";
		
		System.out.println("*********************************** checkOkAfterAutoAllocatingBin  ************************************");
		
		System.out.println("binOkBtn       				  : "+actbinOkBtn						+" Value Expected : "+expbinOkBtn);
		System.out.println("binoutwardRow1ToBePicked      : "+actbinoutwardRow1ToBePicked		+" Value Expected : "+expbinoutwardRow1ToBePicked);
		System.out.println("binoutwardRow2ToBePicked      : "+actbinoutwardRow2ToBePicked		+" Value Expected : "+expbinoutwardRow2ToBePicked);
		System.out.println("binoutwardRowTotalToBePicked  : "+actbinoutwardRowTotalToBePicked   +" Value Expected : "+expbinoutwardRowTotalToBePicked);
		
		
		
		if(actbinOkBtn==expbinOkBtn && actbinoutwardRow1ToBePicked.equalsIgnoreCase(expbinoutwardRow1ToBePicked)
				&& actbinoutwardRow2ToBePicked.equalsIgnoreCase(expbinoutwardRow2ToBePicked) 
				&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
		{
			System.out.println("Values Are As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Values Are Not As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
			return false;
		}
	}
		
		
	public boolean checkBinColumnInVoucherAfterClickingOkInBinPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
		
		String actBinColumn	=select2ndRow_14thColumn.getText();
		
		String expBinColumn	="Bin Update";
		
		System.out.println("*********************************** checkBinColumnInVoucherAfterClickingOkInBinPopUpScreen  ************************************");
		
		System.out.println("BinColumn     : "+actBinColumn+" Value Expected : "+expBinColumn);
		
		if(actBinColumn.equalsIgnoreCase(expBinColumn))
		{
			System.out.println("Values Are As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Values Are Not As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
			return false;
		}
	}
		
	
	public boolean checkBinCapcityInNextRowAfterAllocatingBin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.clear();
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys("1");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String ActData=enter_Quantity.getAttribute("value");
		String Expdata="1";
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		enter_QuantityToRelease.sendKeys(Keys.TAB);
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
					
		
		String actItemR3C1 		=select3rdRow_1stColumn.getText();
		String actUnitsR3C2		=select3rdRow_2ndColumn.getText();
		String actAQR3C4   		=select3rdRow_4thColumn.getText();
		String actFQR3C5   		=select3rdRow_5thColumn.getText();
		String actQtyR3C8  		=select3rdRow_8thColumn.getText();
		String actRateR3C11  	=select3rdRow_11thColumn.getText();
	
		String expItemR3C1  	="BIN FINISHED GOODS ITEM";
		String expUnitsR3C2 	="Pcs";
		String expAQR3C4    	="0.00";
		String expFQR3C5    	="1.00";
		String expQtyR3C8   	="1.00";
		String expRateR3C11   	="10.00";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
		
		// Actual
		boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
		boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
		boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
		boolean actbinPickBtn						=binPickBtn.isDisplayed();
		boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
		boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
		
		// Expected			
		boolean expbinSearchTxt						=true;
		boolean expbinSearchBtn						=true;
		boolean expbinAutoAllocateBtn				=true;
		boolean expbinPickBtn						=true;
		boolean expbinCancelBtn						=true;
		boolean expbinAutoAllocateWithinGroupBtn	=true;
		
		
		
		// Actual
		String actbinTotalQty						=binTotalQty.getAttribute("value");
		String actbinBaseUOM						=binBaseUOM.getText();
		String actbinBalanceTxt						=binBalanceTxt.getAttribute("value");
		
		String actbinoutwardRow1Bin					=binoutwardRow1Bin.getText();
		String actbinoutwardRow1Stock				=binoutwardRow1Stock.getText();
		String actbinoutwardRow1StockPcs			=binoutwardRow1StockPcs.getText();
		String actbinoutwardRow1Capacity			=binoutwardRow1Capacity.getText();
		String actbinoutwardRow1Load				=binoutwardRow1Load.getText();
		String actbinoutwardRow1FreeSpace			=binoutwardRow1FreeSpace.getText();
		String actbinoutwardRow1FreeQty				=binoutwardRow1FreeQty.getText();
		String actbinoutwardRow1ToBePicked			=binoutwardRow1ToBePicked.getText();
		
		
		String actbinoutwardRow2Bin					=binoutwardRow2Bin.getText();
		String actbinoutwardRow2Stock				=binoutwardRow2Stock.getText();
		String actbinoutwardRow2StockPcs			=binoutwardRow2StockPcs.getText();
		String actbinoutwardRow2Capacity			=binoutwardRow2Capacity.getText();
		String actbinoutwardRow2Load				=binoutwardRow2Load.getText();
		String actbinoutwardRow2FreeSpace			=binoutwardRow2FreeSpace.getText();
		String actbinoutwardRow2FreeQty				=binoutwardRow2FreeQty.getText();
		String actbinoutwardRow2ToBePicked			=binoutwardRow2ToBePicked.getText();
		
		String actbinoutwardRowTotalToBePicked		=binoutwardRowTotalToBePicked.getText();
		
		// Expected
		String expbinTotalQty					="1.00";
		String expbinBaseUOM					="Pcs";
		String expbinBalanceTxt					="1.00";
		
		String expbinoutwardRow1Bin				="Bin Update";
		String expbinoutwardRow1Stock			="5.00";
		String expbinoutwardRow1StockPcs		="5.00";
		String expbinoutwardRow1Capacity		="9.00";
		String expbinoutwardRow1Load			="9.00";
		String expbinoutwardRow1FreeSpace		="0.00";
		String expbinoutwardRow1FreeQty			="0.00";
		String expbinoutwardRow1ToBePicked		="0.00";
		
		
		String expbinoutwardRow2Bin				="Bin1";
		String expbinoutwardRow2Stock			="3.00";
		String expbinoutwardRow2StockPcs		="3.00";
		String expbinoutwardRow2Capacity		="9.00";
		String expbinoutwardRow2Load			="3.00";
		String expbinoutwardRow2FreeSpace		="6.00";
		String expbinoutwardRow2FreeQty			="6.00";
		String expbinoutwardRow2ToBePicked		="0.00";
		
		String expbinoutwardRowTotalToBePicked	="0.00";
		
		
		System.out.println("*********************************** checkBinCapcityInNextRowAfterAllocatingBin  ************************************");
		
		System.out.println("Entry Page R3 Item Value Actual     : "+actItemR3C1     +"  Value Expected : "+expItemR3C1);	
		System.out.println("Entry Page R3 Units Value Actual    : "+actUnitsR3C2    +"  Value Expected : "+expUnitsR3C2);
		System.out.println("Entry Page R3 AQ Value Actual       : "+actAQR3C4       +"  Value Expected : "+expAQR3C4);
		System.out.println("Entry Page R3 FQ Value Actual       : "+actFQR3C5       +"  Value Expected : "+expFQR3C5);
		System.out.println("Entry Page Qty Value Actual         : "+actQtyR3C8      +"  Value Expected : "+expQtyR3C8);
		System.out.println("Entry Page Rate Value Actual        : "+actRateR3C11    +"  Value Expected : "+expRateR3C11);
		
		System.out.println("************* Bin Out Ward Pop Up Screen************");
		
		System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"  Value Expected : "+expbinSearchTxt);
		System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"  Value Expected : "+expbinSearchBtn);
		System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"  Value Expected : "+expbinAutoAllocateBtn);
		System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"  Value Expected : "+expbinPickBtn);
		System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"  Value Expected : "+expbinCancelBtn);
		System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"  Value Expected : "+expbinAutoAllocateWithinGroupBtn);
		
		
		System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected : "+expbinTotalQty);	
		System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected : "+expbinBaseUOM);	
		System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected : "+expbinBalanceTxt);	
		
		System.out.println("binoutwardRow1Bin        	 : "+actbinoutwardRow1Bin			+"  Value Expected : "+expbinoutwardRow1Bin);
		System.out.println("binoutwardRow1Stock      	 : "+actbinoutwardRow1Stock			+"  Value Expected : "+expbinoutwardRow1Stock);
		System.out.println("binoutwardRow1StockPcs   	 : "+actbinoutwardRow1StockPcs		+"  Value Expected : "+expbinoutwardRow1StockPcs);
		System.out.println("binoutwardRow1Capacity   	 : "+actbinoutwardRow1Capacity		+"  Value Expected : "+expbinoutwardRow1Capacity);
		System.out.println("binoutwardRow1Load     	 	 : "+actbinoutwardRow1Load			+"  Value Expected : "+expbinoutwardRow1Load);
		System.out.println("binoutwardRow1FreeSpace  	 : "+actbinoutwardRow1FreeSpace		+"  Value Expected : "+expbinoutwardRow1FreeSpace);
		System.out.println("binoutwardRow1FreeQty    	 : "+actbinoutwardRow1FreeQty		+"  Value Expected : "+expbinoutwardRow1FreeQty);
		System.out.println("binoutwardRow1ToBePicked 	 : "+actbinoutwardRow1ToBePicked    +"  Value Expected : "+expbinoutwardRow1ToBePicked);
		
		
		System.out.println("binoutwardRow2Bin        	 : "+actbinoutwardRow2Bin			+"  Value Expected : "+expbinoutwardRow2Bin);
		System.out.println("binoutwardRow2Stock      	 : "+actbinoutwardRow2Stock			+"  Value Expected : "+expbinoutwardRow2Stock);
		System.out.println("binoutwardRow2StockPcs   	 : "+actbinoutwardRow2StockPcs		+"  Value Expected : "+expbinoutwardRow2StockPcs);
		System.out.println("binoutwardRow2Capacity   	 : "+actbinoutwardRow2Capacity		+"  Value Expected : "+expbinoutwardRow2Capacity);
		System.out.println("binoutwardRow2Load     	 	 : "+actbinoutwardRow2Load			+"  Value Expected : "+expbinoutwardRow2Load);
		System.out.println("binoutwardRow2FreeSpace  	 : "+actbinoutwardRow2FreeSpace		+"  Value Expected : "+expbinoutwardRow2FreeSpace);
		System.out.println("binoutwardRow2FreeQty    	 : "+actbinoutwardRow2FreeQty		+"  Value Expected : "+expbinoutwardRow2FreeQty);
		System.out.println("binoutwardRow2ToBePicked 	 : "+actbinoutwardRow2ToBePicked    +"  Value Expected : "+expbinoutwardRow2ToBePicked);
		
		System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
		
		
		if(actItemR3C1.equalsIgnoreCase(expItemR3C1) && actUnitsR3C2.equalsIgnoreCase(expUnitsR3C2) && actAQR3C4.equalsIgnoreCase(expAQR3C4) 
				&& actFQR3C5.equalsIgnoreCase(expFQR3C5) && actQtyR3C8.equalsIgnoreCase(expQtyR3C8) && actRateR3C11.equalsIgnoreCase(expRateR3C11)
			
				&& actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
				&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn
				
				&& actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
				&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)
				
				&& actbinoutwardRow1Bin.equalsIgnoreCase(expbinoutwardRow1Bin) && actbinoutwardRow1Stock.equalsIgnoreCase(expbinoutwardRow1Stock)
				&& actbinoutwardRow1StockPcs.equalsIgnoreCase(expbinoutwardRow1StockPcs) && actbinoutwardRow1Capacity.equalsIgnoreCase(expbinoutwardRow1Capacity)
				&& actbinoutwardRow1Load.equalsIgnoreCase(expbinoutwardRow1Load) && actbinoutwardRow1FreeSpace.equalsIgnoreCase(expbinoutwardRow1FreeSpace)
				&& actbinoutwardRow1FreeQty.equalsIgnoreCase(expbinoutwardRow1FreeQty) && actbinoutwardRow1ToBePicked.equalsIgnoreCase(expbinoutwardRow1ToBePicked)
				
				&& actbinoutwardRow2Bin.equalsIgnoreCase(expbinoutwardRow2Bin) && actbinoutwardRow2Stock.equalsIgnoreCase(expbinoutwardRow2Stock)
				&& actbinoutwardRow2StockPcs.equalsIgnoreCase(expbinoutwardRow2StockPcs) && actbinoutwardRow2Capacity.equalsIgnoreCase(expbinoutwardRow2Capacity)
				&& actbinoutwardRow2Load.equalsIgnoreCase(expbinoutwardRow2Load) && actbinoutwardRow2FreeSpace.equalsIgnoreCase(expbinoutwardRow2FreeSpace)
				&& actbinoutwardRow2FreeQty.equalsIgnoreCase(expbinoutwardRow2FreeQty) && actbinoutwardRow2ToBePicked.equalsIgnoreCase(expbinoutwardRow2ToBePicked)
				
				&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
		{
							
			System.out.println("Test Pass : Bin Pop Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Data NOT Entered in Second Row");
			return false;
		}
	}
     
	
	public boolean checkCancelBinPopupScreenDeleteRowAndSaveVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
		binCancelBtn.click();
		
		Thread.sleep(2000);
		
		thirdRowIndex.click();
		
		Thread.sleep(2000);
		
		deleteRowBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		Thread.sleep(2000);
 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="280.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="320.00";
 		expBillBaseCurrency									="320.00";
 		expBillLocalCurrency								="22.40";
 		
 		expBillBalanceNewRefAmount							="280.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="320";
 		expBillBreakUpByTagBaseCurrency						="320.00";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="22.40";
 		expBillAmtAdjustedInTransactionCurrency				="280.00";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="40.00";
 	
 		System.out.println("*********************************** checkCancelBinPopupScreenDeleteRowAndSaveVoucher  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 	    Thread.sleep(2000);
	   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="320.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="320.00";
 		expBillBaseCurrencyPick									="320.00";
 		expBillLocalCurrencyPick								="22.40";
 		
 		expBillBalanceNewRefAmountPick							="320.00";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="320";
 		expBillBreakUpByTagBaseCurrencyPick						="320.00";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="22.40";
 		expBillAmtAdjustedInTransactionCurrencyPick				="320.00";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
 			    
 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
	    Bill_OkBtn.click();
	   
	    boolean savingMessage=checkVoucherSavingMessage(docno);
		
	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true && 
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			return true;
			
		}
		else
		{
			
			return false;
		}
		
	}
			
	
	
	public boolean checkSaveOnBlankQtyForBinItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
    	Thread.sleep(3000);
			
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expErrorMessage	="No BINS found for row no 1";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		System.out.println("*********************************** checkSaveOnBlankQtyForBinItem  ************************************");
		
		System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
		
		if(validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			excelReader.setCellData(xlfile, "Sheet6", 57, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			excelReader.setCellData(xlfile, "Sheet6", 57, 9, resFail);
			return false;
		}
	}
	
	
			
			
	// Reported Issue 
	public boolean checkBinScreenWithoutInputOfTheQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.clear();
		enter_AQTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lSalesOrderValue));
		lSalesOrderValue.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		enter_QuantityToRelease.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("21");
		enter_Rate.sendKeys(Keys.TAB);
		

		String actItemR1C1 		=select1stRow_1stColumn.getText();
		String actUnitsR1C2		=select1stRow_2ndColumn.getText();
		String actAQR1C4   		=select1stRow_4thColumn.getText();
		String actFQR1C5   		=select1stRow_5thColumn.getText();
		String actQtyR1C8  		=select1stRow_8thColumn.getText();
		String actRateR1C11  	=select1stRow_11thColumn.getText();
	
		String expItemR1C1  	="BIN FINISHED GOODS ITEM";
		String expUnitsR1C2 	="Pcs";
		String expAQR1C4    	="0.00";
		String expFQR1C5    	="0.00";
		String expQtyR1C8   	="0.00";
		String expRateR1C11   	="21.00";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
		
		// Actual
		boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
		boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
		boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
		boolean actbinPickBtn						=binPickBtn.isDisplayed();
		boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
		boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
		
		// Expected			
		boolean expbinSearchTxt						=true;
		boolean expbinSearchBtn						=true;
		boolean expbinAutoAllocateBtn				=true;
		boolean expbinPickBtn						=true;
		boolean expbinCancelBtn						=true;
		boolean expbinAutoAllocateWithinGroupBtn	=true;
		
		
		
		// Actual
		String actbinTotalQty					=binTotalQty.getAttribute("value");
		String actbinBaseUOM					=binBaseUOM.getText();
		String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
		
		String actbinoutwardRow1Bin				=binoutwardRow1Bin.getText();
		String actbinoutwardRow1Stock			=binoutwardRow1Stock.getText();
		String actbinoutwardRow1StockPcs		=binoutwardRow1StockPcs.getText();
		String actbinoutwardRow1Capacity		=binoutwardRow1Capacity.getText();
		String actbinoutwardRow1Load			=binoutwardRow1Load.getText();
		String actbinoutwardRow1FreeSpace		=binoutwardRow1FreeSpace.getText();
		String actbinoutwardRow1FreeQty			=binoutwardRow1FreeQty.getText();
		String actbinoutwardRow1ToBePicked		=binoutwardRow1ToBePicked.getText();
		
		
		String actbinoutwardRow2Bin				=binoutwardRow2Bin.getText();
		String actbinoutwardRow2Stock			=binoutwardRow2Stock.getText();
		String actbinoutwardRow2StockPcs		=binoutwardRow2StockPcs.getText();
		String actbinoutwardRow2Capacity		=binoutwardRow2Capacity.getText();
		String actbinoutwardRow2Load			=binoutwardRow2Load.getText();
		String actbinoutwardRow2FreeSpace		=binoutwardRow2FreeSpace.getText();
		String actbinoutwardRow2FreeQty			=binoutwardRow2FreeQty.getText();
		String actbinoutwardRow2ToBePicked		=binoutwardRow2ToBePicked.getText();
		
		String actbinoutwardRowTotalToBePicked=binoutwardRowTotalToBePicked.getText();
		
		// Expected
		String expbinTotalQty					="0.00";
		String expbinBaseUOM					="Pcs";
		String expbinBalanceTxt					="0.00";
		
		String expbinoutwardRow1Bin				="Bin Update";
		String expbinoutwardRow1Stock			="5.00";
		String expbinoutwardRow1StockPcs		="5.00";
		String expbinoutwardRow1Capacity		="9.00";
		String expbinoutwardRow1Load			="5.00";
		String expbinoutwardRow1FreeSpace		="4.00";
		String expbinoutwardRow1FreeQty			="4.00";
		String expbinoutwardRow1ToBePicked		="0.00";
		
		
		String expbinoutwardRow2Bin				="Bin1";
		String expbinoutwardRow2Stock			="3.00";
		String expbinoutwardRow2StockPcs		="3.00";
		String expbinoutwardRow2Capacity		="9.00";
		String expbinoutwardRow2Load			="3.00";
		String expbinoutwardRow2FreeSpace		="6.00";
		String expbinoutwardRow2FreeQty			="6.00";
		String expbinoutwardRow2ToBePicked		="0.00";
		
		String expbinoutwardRowTotalToBePicked	="0.00";
		
		
		System.out.println("*********************************** checkBinScreenWithoutInputOfTheQty  ************************************");
		
		System.out.println("Entry Page R1 Item Value Actual     : "+actItemR1C1     +"  Value Expected : "+expItemR1C1);	
		System.out.println("Entry Page R1 Units Value Actual    : "+actUnitsR1C2    +"  Value Expected : "+expUnitsR1C2);
		System.out.println("Entry Page R1 AQ Value Actual       : "+actAQR1C4       +"  Value Expected : "+expAQR1C4);
		System.out.println("Entry Page R1 FQ Value Actual       : "+actFQR1C5       +"  Value Expected : "+expFQR1C5);
		System.out.println("Entry Page Qty Value Actual         : "+actQtyR1C8      +"  Value Expected : "+expQtyR1C8);
		System.out.println("Entry Page Rate Value Actual        : "+actRateR1C11    +"  Value Expected : "+expRateR1C11);
		
		System.out.println("************* Bin Out Ward Pop Up Screen************");
		System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"  Value Expected : "+expbinSearchTxt);
		System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"  Value Expected : "+expbinSearchBtn);
		System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"  Value Expected : "+expbinAutoAllocateBtn);
		System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"  Value Expected : "+expbinPickBtn);
		System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"  Value Expected : "+expbinCancelBtn);
		System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"  Value Expected : "+expbinAutoAllocateWithinGroupBtn);
		
		
		System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected : "+expbinTotalQty);	
		System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected : "+expbinBaseUOM);	
		System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected : "+expbinBalanceTxt);	
		
		System.out.println("binoutwardRow1Bin        	 : "+actbinoutwardRow1Bin			+"  Value Expected : "+expbinoutwardRow1Bin);
		System.out.println("binoutwardRow1Stock      	 : "+actbinoutwardRow1Stock			+"  Value Expected : "+expbinoutwardRow1Stock);
		System.out.println("binoutwardRow1StockPcs   	 : "+actbinoutwardRow1StockPcs		+"  Value Expected : "+expbinoutwardRow1StockPcs);
		System.out.println("binoutwardRow1Capacity   	 : "+actbinoutwardRow1Capacity		+"  Value Expected : "+expbinoutwardRow1Capacity);
		System.out.println("binoutwardRow1Load     	 	 : "+actbinoutwardRow1Load			+"  Value Expected : "+expbinoutwardRow1Load);
		System.out.println("binoutwardRow1FreeSpace  	 : "+actbinoutwardRow1FreeSpace		+"  Value Expected : "+expbinoutwardRow1FreeSpace);
		System.out.println("binoutwardRow1FreeQty    	 : "+actbinoutwardRow1FreeQty		+"  Value Expected : "+expbinoutwardRow1FreeQty);
		System.out.println("binoutwardRow1ToBePicked 	 : "+actbinoutwardRow1ToBePicked    +"  Value Expected : "+expbinoutwardRow1ToBePicked);
		
		
		System.out.println("binoutwardRow2Bin        	 : "+actbinoutwardRow2Bin			+"  Value Expected : "+expbinoutwardRow2Bin);
		System.out.println("binoutwardRow2Stock      	 : "+actbinoutwardRow2Stock			+"  Value Expected : "+expbinoutwardRow2Stock);
		System.out.println("binoutwardRow2StockPcs   	 : "+actbinoutwardRow2StockPcs		+"  Value Expected : "+expbinoutwardRow2StockPcs);
		System.out.println("binoutwardRow2Capacity   	 : "+actbinoutwardRow2Capacity		+"  Value Expected : "+expbinoutwardRow2Capacity);
		System.out.println("binoutwardRow2Load     	 	 : "+actbinoutwardRow2Load			+"  Value Expected : "+expbinoutwardRow2Load);
		System.out.println("binoutwardRow2FreeSpace  	 : "+actbinoutwardRow2FreeSpace		+"  Value Expected : "+expbinoutwardRow2FreeSpace);
		System.out.println("binoutwardRow2FreeQty    	 : "+actbinoutwardRow2FreeQty		+"  Value Expected : "+expbinoutwardRow2FreeQty);
		System.out.println("binoutwardRow2ToBePicked 	 : "+actbinoutwardRow2ToBePicked    +"  Value Expected : "+expbinoutwardRow2ToBePicked);
		
		System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
		
		
		if(actItemR1C1.equalsIgnoreCase(expItemR1C1) && actUnitsR1C2.equalsIgnoreCase(expUnitsR1C2) && actAQR1C4.equalsIgnoreCase(expAQR1C4) 
				&& actFQR1C5.equalsIgnoreCase(expFQR1C5) && actQtyR1C8.equalsIgnoreCase(expQtyR1C8) && actRateR1C11.equalsIgnoreCase(expRateR1C11)
			
				&& actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
				&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn
				
				&& actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
				&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)
				
				&& actbinoutwardRow1Bin.equalsIgnoreCase(expbinoutwardRow1Bin) && actbinoutwardRow1Stock.equalsIgnoreCase(expbinoutwardRow1Stock)
				&& actbinoutwardRow1StockPcs.equalsIgnoreCase(expbinoutwardRow1StockPcs) && actbinoutwardRow1Capacity.equalsIgnoreCase(expbinoutwardRow1Capacity)
				&& actbinoutwardRow1Load.equalsIgnoreCase(expbinoutwardRow1Load) && actbinoutwardRow1FreeSpace.equalsIgnoreCase(expbinoutwardRow1FreeSpace)
				&& actbinoutwardRow1FreeQty.equalsIgnoreCase(expbinoutwardRow1FreeQty) && actbinoutwardRow1ToBePicked.equalsIgnoreCase(expbinoutwardRow1ToBePicked)
				
				&& actbinoutwardRow2Bin.equalsIgnoreCase(expbinoutwardRow2Bin) && actbinoutwardRow2Stock.equalsIgnoreCase(expbinoutwardRow2Stock)
				&& actbinoutwardRow2StockPcs.equalsIgnoreCase(expbinoutwardRow2StockPcs) && actbinoutwardRow2Capacity.equalsIgnoreCase(expbinoutwardRow2Capacity)
				&& actbinoutwardRow2Load.equalsIgnoreCase(expbinoutwardRow2Load) && actbinoutwardRow2FreeSpace.equalsIgnoreCase(expbinoutwardRow2FreeSpace)
				&& actbinoutwardRow2FreeQty.equalsIgnoreCase(expbinoutwardRow2FreeQty) && actbinoutwardRow2ToBePicked.equalsIgnoreCase(expbinoutwardRow2ToBePicked)
				
				&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
			
		{
		
			System.out.println("qqqqqqqqqq");	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
            		
			try 
			{
				
				System.out.println("Entered In TRY Block");
				
				if(select1stRow_14thColumn.getText().isEmpty() && errorMessage.isDisplayed()==false )
				{
					System.out.println("Values Are As Expected");					
					excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
					return true;
				}
				else
				{
					System.out.println(errorMessage.getText());						
					System.out.println("Values Are Not As Expected");
					
					excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
					return false;
				}

				
			} 
			catch (Exception e)
			{
				System.out.println("Entered In Catch Block");
								
				if(select1stRow_14thColumn.getText().isEmpty())
				{
					System.out.println("Entered In Catch Block");
					System.out.println("Values Are As Expected");						
					excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
					return true;
				}
				else
				{
												
					System.out.println("Values Are Not As Expected");
					excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
					return false;
				}
			}
			
		}
		else
		{	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			Thread.sleep(2000);
			
			if(select1stRow_14thColumn.getText().isEmpty())
			{
				System.out.println("Entered In Catch Block");
				System.out.println("Values Are As Expected");						
				excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
				return true;
			}
			else
			{
											
				System.out.println("Values Are Not As Expected");
				excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
				return false;
			}
		
	   }
		
		
	}
	
	
	
			
			
	// Fails Due To above Issue But Flow Contines in Else Part
	public boolean checkOkButtonInBinScreenWithAllocationOfBlankQtyAndSaveVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expErrorMessage	="No BINS found for row no 1";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		System.out.println("*********************************** checkOkButtonInBinScreenWithAllocationOfBlankQtyAndSaveVoucher  ************************************");
		
		System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
		
		if(validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			
			excelReader.setCellData(xlfile, "Sheet6", 57, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			
			Thread.sleep(6000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(9000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
			salesAccountTxt.click();
			salesAccountTxt.sendKeys(Keys.SPACE);
			
			int count=salesAccountListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=salesAccountListCount.get(i).getAttribute("data-name");
				
				if(data.equalsIgnoreCase("Sales - Computers"))
				{
					salesAccountListCount.get(i).click();
					
					break;
				}
			}
			
			salesAccountTxt.sendKeys(Keys.TAB);
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			 customerAccountTxt.click();
			 customerAccountTxt.sendKeys(Keys.SPACE);
			 
			 int customercount=customerAccountListCount.size();
			 
			 System.err.println(customercount);
			 
			 for(int i=0 ; i < customercount ;i++)
			 {
				 String data=customerAccountListCount.get(i).getAttribute("data-name");
				 
				 if(data.equalsIgnoreCase("Customer A"))
				 {
					 customerAccountListCount.get(i).click();
					 
					 break;
				 }
			 }
				
			 customerAccountTxt.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getAttribute("data-name");
				
				if(data.equalsIgnoreCase("INDIA"))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys(Keys.SPACE);
				
			int warehousecount=wareHouseListCount.size();
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=wareHouseListCount.get(i).getAttribute("data-name");
				
				if(data.equalsIgnoreCase("SECUNDERABAD"))
				{
					wareHouseListCount.get(i).click();
					
					break;
				}
			}
				
			wareHouseTxt.sendKeys(Keys.TAB);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount1=itemListCount.size();
			
			System.err.println(itemcount1);
				
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getAttribute("data-sname");
				
				if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
	
			excelReader.setCellData(xlfile, "Sheet6", 57, 9, resFail);
			
			return false;
		}
	}
	
			

	public boolean chekInputBinProductInNewVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("3");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);			
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		enter_QuantityToRelease.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("21");
		enter_Rate.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	
		String actItemR1C1 		=select1stRow_1stColumn.getText();
		String actUnitsR1C2		=select1stRow_2ndColumn.getText();
		String actAQR1C4  	 	=select1stRow_4thColumn.getText();
		String actFQR1C5  	 	=select1stRow_5thColumn.getText();
		String actQtyR1C8 		=select1stRow_8thColumn.getText();
		String actRateR1C11  	=select1stRow_11thColumn.getText();
		String actGrossR1C12  	=select1stRow_12thColumn.getText();
	
		String expItemR1C1  	="BIN FINISHED GOODS ITEM";
		String expUnitsR1C2 	="Pcs";
		String expAQR1C4    	="3.00";
		String expFQR1C5    	="0.00";
		String expQtyR1C8   	="3.00";
		String expRateR1C11   	="21.00";
		String expGrossR1C12   	="63.00";
	
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
		
		// Actual
		boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
		boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
		boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
		boolean actbinPickBtn						=binPickBtn.isDisplayed();
		boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
		boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
		
		// Expected			
		boolean expbinSearchTxt						=true;
		boolean expbinSearchBtn						=true;
		boolean expbinAutoAllocateBtn				=true;
		boolean expbinPickBtn						=true;
		boolean expbinCancelBtn						=true;
		boolean expbinAutoAllocateWithinGroupBtn	=true;
		
		System.out.println("*********************************** chekInputBinProductInNewVoucher  ************************************");
		System.out.println("Entry Page R1 Item Value Actual     : "+actItemR1C1    					 +"   Value Expected :  "+expItemR1C1);	
		System.out.println("Entry Page R1 Units Value Actual    : "+actUnitsR1C2   					 +"   Value Expected :  "+expUnitsR1C2);
		System.out.println("Entry Page R1 AQ Value Actual       : "+actAQR1C4      					 +"   Value Expected :  "+expAQR1C4);
		System.out.println("Entry Page R1 FQ Value Actual       : "+actFQR1C5      					 +"   Value Expected :  "+expFQR1C5);
		System.out.println("Entry Page Qty Value Actual         : "+actQtyR1C8     					 +"   Value Expected :  "+expQtyR1C8);
		System.out.println("Entry Page Rate Value Actual        : "+actRateR1C11   					 +"   Value Expected :  "+expRateR1C11);
		System.out.println("Entry Page Gross Value Actual       : "+actGrossR1C12   				 +"   Value Expected :  "+expGrossR1C12);
		System.out.println("************* Bin Out Ward Pop Up Screen************");
		System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"   Value Expected :  "+expbinSearchTxt);
		System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"   Value Expected :  "+expbinSearchBtn);
		System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"   Value Expected :  "+expbinAutoAllocateBtn);
		System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"   Value Expected :  "+expbinPickBtn);
		System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"   Value Expected :  "+expbinCancelBtn);
		System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"   Value Expected :  "+expbinAutoAllocateWithinGroupBtn);
		
		
		if(actItemR1C1.equalsIgnoreCase(expItemR1C1) && actUnitsR1C2.equalsIgnoreCase(expUnitsR1C2) && actAQR1C4.equalsIgnoreCase(expAQR1C4) 
				&& actFQR1C5.equalsIgnoreCase(expFQR1C5) && actQtyR1C8.equalsIgnoreCase(expQtyR1C8) && actRateR1C11.equalsIgnoreCase(expRateR1C11)
				&& actGrossR1C12.equalsIgnoreCase(expGrossR1C12)
			
				&& actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
				&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn)
		{
			System.out.println("Test Pass : Bin Pop Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Data NOT Entered in Second Row");
			return false;
		}

	}
				
		
	public boolean chekBinValuesInNewVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binTotalQty));
			
		// Actual
		String actbinTotalQty					=binTotalQty.getAttribute("value");
		String actbinBaseUOM					=binBaseUOM.getText();
		String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
		
		String actbinoutwardRow1Bin				=binoutwardRow1Bin.getText();
		String actbinoutwardRow1Stock			=binoutwardRow1Stock.getText();
		String actbinoutwardRow1StockPcs		=binoutwardRow1StockPcs.getText();
		String actbinoutwardRow1Capacity		=binoutwardRow1Capacity.getText();
		String actbinoutwardRow1Load			=binoutwardRow1Load.getText();
		String actbinoutwardRow1FreeSpace		=binoutwardRow1FreeSpace.getText();
		String actbinoutwardRow1FreeQty			=binoutwardRow1FreeQty.getText();
		String actbinoutwardRow1ToBePicked		=binoutwardRow1ToBePicked.getText();
		
		
		String actbinoutwardRow2Bin				=binoutwardRow2Bin.getText();
		String actbinoutwardRow2Stock			=binoutwardRow2Stock.getText();
		String actbinoutwardRow2StockPcs		=binoutwardRow2StockPcs.getText();
		String actbinoutwardRow2Capacity		=binoutwardRow2Capacity.getText();
		String actbinoutwardRow2Load			=binoutwardRow2Load.getText();
		String actbinoutwardRow2FreeSpace		=binoutwardRow2FreeSpace.getText();
		String actbinoutwardRow2FreeQty			=binoutwardRow2FreeQty.getText();
		String actbinoutwardRow2ToBePicked		=binoutwardRow2ToBePicked.getText();
		
		String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
		
		// Expected
		String expbinTotalQty					="3.00";
		String expbinBaseUOM					="Pcs";
		String expbinBalanceTxt					="3.00";
		
		String expbinoutwardRow1Bin				="Bin Update";
		String expbinoutwardRow1Stock			="5.00";
		String expbinoutwardRow1StockPcs		="5.00";
		String expbinoutwardRow1Capacity		="9.00";
		String expbinoutwardRow1Load			="5.00";
		String expbinoutwardRow1FreeSpace		="4.00";
		String expbinoutwardRow1FreeQty			="4.00";
		String expbinoutwardRow1ToBePicked		="0.00";
		
		
		String expbinoutwardRow2Bin				="Bin1";
		String expbinoutwardRow2Stock			="3.00";
		String expbinoutwardRow2StockPcs		="3.00";
		String expbinoutwardRow2Capacity		="9.00";
		String expbinoutwardRow2Load			="3.00";
		String expbinoutwardRow2FreeSpace		="6.00";
		String expbinoutwardRow2FreeQty			="6.00";
		String expbinoutwardRow2ToBePicked		="0.00";
		
		String expbinoutwardRowTotalToBePicked	="0.00";
		
		
		System.out.println("*********************************** chekBinValuesInNewVoucher  ************************************");
		
		System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected :  "+expbinTotalQty);	
		System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected :  "+expbinBaseUOM);	
		System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected :  "+expbinBalanceTxt);	
		
		System.out.println("binoutwardRow1Bin        	 : "+actbinoutwardRow1Bin			+"  Value Expected :  "+expbinoutwardRow1Bin);
		System.out.println("binoutwardRow1Stock      	 : "+actbinoutwardRow1Stock			+"  Value Expected :  "+expbinoutwardRow1Stock);
		System.out.println("binoutwardRow1StockPcs   	 : "+actbinoutwardRow1StockPcs		+"  Value Expected :  "+expbinoutwardRow1StockPcs);
		System.out.println("binoutwardRow1Capacity   	 : "+actbinoutwardRow1Capacity		+"  Value Expected :  "+expbinoutwardRow1Capacity);
		System.out.println("binoutwardRow1Load     	 	 : "+actbinoutwardRow1Load			+"  Value Expected :  "+expbinoutwardRow1Load);
		System.out.println("binoutwardRow1FreeSpace  	 : "+actbinoutwardRow1FreeSpace		+"  Value Expected :  "+expbinoutwardRow1FreeSpace);
		System.out.println("binoutwardRow1FreeQty    	 : "+actbinoutwardRow1FreeQty		+"  Value Expected :  "+expbinoutwardRow1FreeQty);
		System.out.println("binoutwardRow1ToBePicked 	 : "+actbinoutwardRow1ToBePicked  	+"  Value Expected :  "+expbinoutwardRow1ToBePicked);
		
		
		System.out.println("binoutwardRow2Bin        	 : "+actbinoutwardRow2Bin			+"  Value Expected :  "+expbinoutwardRow2Bin);
		System.out.println("binoutwardRow2Stock      	 : "+actbinoutwardRow2Stock			+"  Value Expected :  "+expbinoutwardRow2Stock);
		System.out.println("binoutwardRow2StockPcs   	 : "+actbinoutwardRow2StockPcs		+"  Value Expected :  "+expbinoutwardRow2StockPcs);
		System.out.println("binoutwardRow2Capacity   	 : "+actbinoutwardRow2Capacity		+"  Value Expected :  "+expbinoutwardRow2Capacity);
		System.out.println("binoutwardRow2Load     	 	 : "+actbinoutwardRow2Load			+"  Value Expected :  "+expbinoutwardRow2Load);
		System.out.println("binoutwardRow2FreeSpace  	 : "+actbinoutwardRow2FreeSpace		+"  Value Expected :  "+expbinoutwardRow2FreeSpace);
		System.out.println("binoutwardRow2FreeQty    	 : "+actbinoutwardRow2FreeQty		+"  Value Expected :  "+expbinoutwardRow2FreeQty);
		System.out.println("binoutwardRow2ToBePicked 	 : "+actbinoutwardRow2ToBePicked    +"  Value Expected :  "+expbinoutwardRow2ToBePicked);
		
		System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected :  "+expbinoutwardRowTotalToBePicked);
		
		
		if(actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
				&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)
				
				&& actbinoutwardRow1Bin.equalsIgnoreCase(expbinoutwardRow1Bin) && actbinoutwardRow1Stock.equalsIgnoreCase(expbinoutwardRow1Stock)
				&& actbinoutwardRow1StockPcs.equalsIgnoreCase(expbinoutwardRow1StockPcs) && actbinoutwardRow1Capacity.equalsIgnoreCase(expbinoutwardRow1Capacity)
				&& actbinoutwardRow1Load.equalsIgnoreCase(expbinoutwardRow1Load) && actbinoutwardRow1FreeSpace.equalsIgnoreCase(expbinoutwardRow1FreeSpace)
				&& actbinoutwardRow1FreeQty.equalsIgnoreCase(expbinoutwardRow1FreeQty) && actbinoutwardRow1ToBePicked.equalsIgnoreCase(expbinoutwardRow1ToBePicked)
				
				&& actbinoutwardRow2Bin.equalsIgnoreCase(expbinoutwardRow2Bin) && actbinoutwardRow2Stock.equalsIgnoreCase(expbinoutwardRow2Stock)
				&& actbinoutwardRow2StockPcs.equalsIgnoreCase(expbinoutwardRow2StockPcs) && actbinoutwardRow2Capacity.equalsIgnoreCase(expbinoutwardRow2Capacity)
				&& actbinoutwardRow2Load.equalsIgnoreCase(expbinoutwardRow2Load) && actbinoutwardRow2FreeSpace.equalsIgnoreCase(expbinoutwardRow2FreeSpace)
				&& actbinoutwardRow2FreeQty.equalsIgnoreCase(expbinoutwardRow2FreeQty) && actbinoutwardRow2ToBePicked.equalsIgnoreCase(expbinoutwardRow2ToBePicked)
				
				&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
		{
			System.out.println("Values Are As Expected");;
			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Values Are Not As Expected");
			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
			return false;
		}
			
	}

	public boolean checkPickOptionInBinScreenWithoutSelection()  throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 	{
 		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
 		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binPickBtn));
 		binPickBtn.click();
 		
		String expErrorMessage	="Please select a row";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		System.out.println("*********************************** checkPickOptionInBinScreenWithoutSelection  ************************************");
		
		System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
		
		if(validationMessage.equalsIgnoreCase(expErrorMessage))
 		{
 			return true;
 		}
 		else
 		{
 			return false;
 		}
 	}


		
		
	

	// Will Fail Reported issue Total Sum Not Changing On Pick option
	public boolean chekBinValuesClickOnPickWithSelectingInNewVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binoutwardRow1Index));
		binoutwardRow1Index.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binPickBtn));
 		binPickBtn.click();
 		
 		Thread.sleep(2000);
 		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binTotalQty));
 		
 		// Actual
		String actbinTotalQty					=binTotalQty.getAttribute("value");
		String actbinBaseUOM					=binBaseUOM.getText();
		String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
		
		String actbinoutwardRow1Bin				=binoutwardRow1Bin.getText();
		String actbinoutwardRow1Stock			=binoutwardRow1Stock.getText();
		String actbinoutwardRow1StockPcs		=binoutwardRow1StockPcs.getText();
		String actbinoutwardRow1Capacity		=binoutwardRow1Capacity.getText();
		String actbinoutwardRow1Load			=binoutwardRow1Load.getText();
		String actbinoutwardRow1FreeSpace		=binoutwardRow1FreeSpace.getText();
		String actbinoutwardRow1FreeQty			=binoutwardRow1FreeQty.getText();
		String actbinoutwardRow1ToBePicked		=binoutwardRow1ToBePicked.getText();
		
		
		String actbinoutwardRow2Bin				=binoutwardRow2Bin.getText();
		String actbinoutwardRow2Stock			=binoutwardRow2Stock.getText();
		String actbinoutwardRow2StockPcs		=binoutwardRow2StockPcs.getText();
		String actbinoutwardRow2Capacity		=binoutwardRow2Capacity.getText();
		String actbinoutwardRow2Load			=binoutwardRow2Load.getText();
		String actbinoutwardRow2FreeSpace		=binoutwardRow2FreeSpace.getText();
		String actbinoutwardRow2FreeQty			=binoutwardRow2FreeQty.getText();
		String actbinoutwardRow2ToBePicked		=binoutwardRow2ToBePicked.getText();
		
		String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
		
		// Expected
		String expbinTotalQty					="3.00";
		String expbinBaseUOM					="Pcs";
		String expbinBalanceTxt					="3.00";
		
		String expbinoutwardRow1Bin				="Bin Update";
		String expbinoutwardRow1Stock			="5.00";
		String expbinoutwardRow1StockPcs		="5.00";
		String expbinoutwardRow1Capacity		="9.00";
		String expbinoutwardRow1Load			="5.00";
		String expbinoutwardRow1FreeSpace		="4.00";
		String expbinoutwardRow1FreeQty			="4.00";
		String expbinoutwardRow1ToBePicked		="3.00";
		
		
		String expbinoutwardRow2Bin				="Bin1";
		String expbinoutwardRow2Stock			="3.00";
		String expbinoutwardRow2StockPcs		="3.00";
		String expbinoutwardRow2Capacity		="9.00";
		String expbinoutwardRow2Load			="3.00";
		String expbinoutwardRow2FreeSpace		="6.00";
		String expbinoutwardRow2FreeQty			="6.00";
		String expbinoutwardRow2ToBePicked		="0.00";
		
		String expbinoutwardRowTotalToBePicked	="3.00";
		
		
		System.out.println("*********************************** chekBinValuesClickOnPickWithSelectingInNewVoucher  ************************************");
		
		System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected :  "+expbinTotalQty);	
		System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected :  "+expbinBaseUOM);	
		System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected :  "+expbinBalanceTxt);	
		
		System.out.println("binoutwardRow1Bin        	 : "+actbinoutwardRow1Bin			+"  Value Expected :  "+expbinoutwardRow1Bin);
		System.out.println("binoutwardRow1Stock      	 : "+actbinoutwardRow1Stock			+"  Value Expected :  "+expbinoutwardRow1Stock);
		System.out.println("binoutwardRow1StockPcs   	 : "+actbinoutwardRow1StockPcs		+"  Value Expected :  "+expbinoutwardRow1StockPcs);
		System.out.println("binoutwardRow1Capacity   	 : "+actbinoutwardRow1Capacity		+"  Value Expected :  "+expbinoutwardRow1Capacity);
		System.out.println("binoutwardRow1Load     	 	 : "+actbinoutwardRow1Load			+"  Value Expected :  "+expbinoutwardRow1Load);
		System.out.println("binoutwardRow1FreeSpace  	 : "+actbinoutwardRow1FreeSpace		+"  Value Expected :  "+expbinoutwardRow1FreeSpace);
		System.out.println("binoutwardRow1FreeQty    	 : "+actbinoutwardRow1FreeQty		+"  Value Expected :  "+expbinoutwardRow1FreeQty);
		System.out.println("binoutwardRow1ToBePicked 	 : "+actbinoutwardRow1ToBePicked    +"  Value Expected :  "+expbinoutwardRow1ToBePicked);
		
		
		System.out.println("binoutwardRow2Bin        	 : "+actbinoutwardRow2Bin			+"  Value Expected :  "+expbinoutwardRow2Bin);
		System.out.println("binoutwardRow2Stock      	 : "+actbinoutwardRow2Stock			+"  Value Expected :  "+expbinoutwardRow2Stock);
		System.out.println("binoutwardRow2StockPcs   	 : "+actbinoutwardRow2StockPcs		+"  Value Expected :  "+expbinoutwardRow2StockPcs);
		System.out.println("binoutwardRow2Capacity   	 : "+actbinoutwardRow2Capacity		+"  Value Expected :  "+expbinoutwardRow2Capacity);
		System.out.println("binoutwardRow2Load     	 	 : "+actbinoutwardRow2Load			+"  Value Expected :  "+expbinoutwardRow2Load);
		System.out.println("binoutwardRow2FreeSpace  	 : "+actbinoutwardRow2FreeSpace		+"  Value Expected :  "+expbinoutwardRow2FreeSpace);
		System.out.println("binoutwardRow2FreeQty    	 : "+actbinoutwardRow2FreeQty		+"  Value Expected :  "+expbinoutwardRow2FreeQty);
		System.out.println("binoutwardRow2ToBePicked 	 : "+actbinoutwardRow2ToBePicked  	+"  Value Expected :  "+expbinoutwardRow2ToBePicked);
		
		System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected :  "+expbinoutwardRowTotalToBePicked);
		
		
		if(actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
				&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)
				
				&& actbinoutwardRow1Bin.equalsIgnoreCase(expbinoutwardRow1Bin) && actbinoutwardRow1Stock.equalsIgnoreCase(expbinoutwardRow1Stock)
				&& actbinoutwardRow1StockPcs.equalsIgnoreCase(expbinoutwardRow1StockPcs) && actbinoutwardRow1Capacity.equalsIgnoreCase(expbinoutwardRow1Capacity)
				&& actbinoutwardRow1Load.equalsIgnoreCase(expbinoutwardRow1Load) && actbinoutwardRow1FreeSpace.equalsIgnoreCase(expbinoutwardRow1FreeSpace)
				&& actbinoutwardRow1FreeQty.equalsIgnoreCase(expbinoutwardRow1FreeQty) && actbinoutwardRow1ToBePicked.equalsIgnoreCase(expbinoutwardRow1ToBePicked)
				
				&& actbinoutwardRow2Bin.equalsIgnoreCase(expbinoutwardRow2Bin) && actbinoutwardRow2Stock.equalsIgnoreCase(expbinoutwardRow2Stock)
				&& actbinoutwardRow2StockPcs.equalsIgnoreCase(expbinoutwardRow2StockPcs) && actbinoutwardRow2Capacity.equalsIgnoreCase(expbinoutwardRow2Capacity)
				&& actbinoutwardRow2Load.equalsIgnoreCase(expbinoutwardRow2Load) && actbinoutwardRow2FreeSpace.equalsIgnoreCase(expbinoutwardRow2FreeSpace)
				&& actbinoutwardRow2FreeQty.equalsIgnoreCase(expbinoutwardRow2FreeQty) && actbinoutwardRow2ToBePicked.equalsIgnoreCase(expbinoutwardRow2ToBePicked)
				
				&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
		{
			System.out.println("Values Are As Expected");;
			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Values Are Not As Expected");
			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
			return false;
		}
			
	}
	

	public boolean checkOkButtonUsingPickOptionInBinScreenToDisplayBinInVoucherBinColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		
		String actBinColumn		=select1stRow_14thColumn.getText();
		
		String expBinColumn		="Bin Update";
		
		
		System.out.println("*********************************** checkOkButtonUsingPickOptionInBinScreenToDisplayBinInVoucherBinColumn  ************************************");
		
		System.out.println("BinColumn 	 : "+actBinColumn+"  Value Expected :  "+expBinColumn);
		
		if(actBinColumn.equalsIgnoreCase(expBinColumn))
		{
			System.out.println("Values Are As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Values Are Not As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
			return false;
		}
	}
	
		
		
	
	public boolean checkSaveNewVoucherWithPickOptionInBins() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();

        Thread.sleep(2000);
 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="0.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="63.00";
 		expBillBaseCurrency									="63.00";
 		expBillLocalCurrency								="4.41";
 		
 		expBillBalanceNewRefAmount							="0.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="63";
 		expBillBreakUpByTagBaseCurrency						="63.00";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="4.41";
 		expBillAmtAdjustedInTransactionCurrency				="0";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="63.00";
 	

 		System.out.println("*********************************** checkSaveNewVoucherWithPickOptionInBins  ************************************");


 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 	    Thread.sleep(2000);
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="63.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="63.00";
 		expBillBaseCurrencyPick									="63.00";
 		expBillLocalCurrencyPick								="4.41";
 		
 		expBillBalanceNewRefAmountPick							="63.00";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="63";
 		expBillBreakUpByTagBaseCurrencyPick						="63.00";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="22.40";
 		expBillAmtAdjustedInTransactionCurrencyPick				="320.00";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

 		
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
 	    Bill_OkBtn.click();
	   
 	    boolean savingMessage=checkVoucherSavingMessage(docno);
		
 	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true  &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			
			return true;
			
		}
		else
		{
			
			return false;
		}
	}		
	
	
	
	public boolean checkSaveNewVoucherWithManualOptionInBins() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
 		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys("2");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		enter_QuantityToRelease.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		String actItemR1C1 		=select1stRow_1stColumn.getText();
		String actUnitsR1C2		=select1stRow_2ndColumn.getText();
		String actAQR1C4   		=select1stRow_4thColumn.getText();
		String actFQR1C5   		=select1stRow_5thColumn.getText();
		String actQtyR1C8  		=select1stRow_8thColumn.getText();
		String actRateR1C11  	=select1stRow_11thColumn.getText();
	
		String expItemR1C1  	="BIN FINISHED GOODS ITEM";
		String expUnitsR1C2 	="Pcs";
		String expAQR1C4    	="3.00";
		String expFQR1C5    	="2.00";
		String expQtyR1C8   	="5.00";
		String expRateR1C11   	="21.00";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
			enter_Bin.sendKeys(Keys.SPACE);
		}
		catch(Exception e)
		{
			System.out.println("Bin Pop Up Displayed");
		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));
		
		// Actual
		boolean actbinSearchTxt						=binSearchTxt.isDisplayed();
		boolean actbinSearchBtn						=binSearchBtn.isDisplayed();
		boolean actbinAutoAllocateBtn				=binAutoAllocateBtn.isDisplayed();
		boolean actbinPickBtn						=binPickBtn.isDisplayed();
		boolean actbinCancelBtn						=binCancelBtn.isDisplayed();
		boolean actbinAutoAllocateWithinGroupBtn	=binAutoAllocateWithinGroupBtn.isDisplayed();
		
		// Expected			
		boolean expbinSearchTxt						=true;
		boolean expbinSearchBtn						=true;
		boolean expbinAutoAllocateBtn				=true;
		boolean expbinPickBtn						=true;
		boolean expbinCancelBtn						=true;
		boolean expbinAutoAllocateWithinGroupBtn	=true;
		
		
		
		// Actual
		String actbinTotalQty					=binTotalQty.getAttribute("value");
		String actbinBaseUOM					=binBaseUOM.getText();
		String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
		
		String actbinoutwardRow1Bin				=binoutwardRow1Bin.getText();
		String actbinoutwardRow1Stock			=binoutwardRow1Stock.getText();
		String actbinoutwardRow1StockPcs		=binoutwardRow1StockPcs.getText();
		String actbinoutwardRow1Capacity		=binoutwardRow1Capacity.getText();
		String actbinoutwardRow1Load			=binoutwardRow1Load.getText();
		String actbinoutwardRow1FreeSpace		=binoutwardRow1FreeSpace.getText();
		String actbinoutwardRow1FreeQty			=binoutwardRow1FreeQty.getText();
		String actbinoutwardRow1ToBePicked		=binoutwardRow1ToBePicked.getText();
		
		
		String actbinoutwardRow2Bin				=binoutwardRow2Bin.getText();
		String actbinoutwardRow2Stock			=binoutwardRow2Stock.getText();
		String actbinoutwardRow2StockPcs		=binoutwardRow2StockPcs.getText();
		String actbinoutwardRow2Capacity		=binoutwardRow2Capacity.getText();
		String actbinoutwardRow2Load			=binoutwardRow2Load.getText();
		String actbinoutwardRow2FreeSpace		=binoutwardRow2FreeSpace.getText();
		String actbinoutwardRow2FreeQty			=binoutwardRow2FreeQty.getText();
		String actbinoutwardRow2ToBePicked		=binoutwardRow2ToBePicked.getText();
		
		String actbinoutwardRowTotalToBePicked=binoutwardRowTotalToBePicked.getText();
		
		// Expected
		String expbinTotalQty					="5.00";
		String expbinBaseUOM					="Pcs";
		String expbinBalanceTxt					="5.00";
		
		String expbinoutwardRow1Bin				="Bin Update";
		String expbinoutwardRow1Stock			="5.00";
		String expbinoutwardRow1StockPcs		="5.00";
		String expbinoutwardRow1Capacity		="9.00";
		String expbinoutwardRow1Load			="5.00";
		String expbinoutwardRow1FreeSpace		="4.00";
		String expbinoutwardRow1FreeQty			="4.00";
		String expbinoutwardRow1ToBePicked		="0.00";
		
		
		String expbinoutwardRow2Bin				="Bin1";
		String expbinoutwardRow2Stock			="3.00";
		String expbinoutwardRow2StockPcs		="3.00";
		String expbinoutwardRow2Capacity		="9.00";
		String expbinoutwardRow2Load			="3.00";
		String expbinoutwardRow2FreeSpace		="6.00";
		String expbinoutwardRow2FreeQty			="6.00";
		String expbinoutwardRow2ToBePicked		="0.00";
		
		String expbinoutwardRowTotalToBePicked	="0.00";
		
		
		System.out.println("*********************************** checkSaveNewVoucherWithManualOptionInBins  ************************************");
		
		System.out.println("Entry Page R1 Item Value Actual     : "+actItemR1C1     +"  Value Expected : "+expItemR1C1);	
		System.out.println("Entry Page R1 Units Value Actual    : "+actUnitsR1C2    +"  Value Expected : "+expUnitsR1C2);
		System.out.println("Entry Page R1 AQ Value Actual       : "+actAQR1C4       +"  Value Expected : "+expAQR1C4);
		System.out.println("Entry Page R1 FQ Value Actual       : "+actFQR1C5       +"  Value Expected : "+expFQR1C5);
		System.out.println("Entry Page Qty Value Actual         : "+actQtyR1C8      +"  Value Expected : "+expQtyR1C8);
		System.out.println("Entry Page Rate Value Actual        : "+actRateR1C11    +"  Value Expected : "+expRateR1C11);
		
		System.out.println("************* Bin Out Ward Pop Up Screen************");
		System.out.println("binSearchTxt       					: "+actbinSearchTxt   				 +"  Value Expected : "+expbinSearchTxt);
		System.out.println("binSearchBtn        				: "+actbinSearchBtn   				 +"  Value Expected : "+expbinSearchBtn);
		System.out.println("binAutoAllocateBtn        			: "+actbinAutoAllocateBtn   		 +"  Value Expected : "+expbinAutoAllocateBtn);
		System.out.println("binPickBtn        					: "+actbinPickBtn   				 +"  Value Expected : "+expbinPickBtn);
		System.out.println("binCancelBtn        				: "+actbinCancelBtn   				 +"  Value Expected : "+expbinCancelBtn);
		System.out.println("binAutoAllocateWithinGroupBtn       : "+actbinAutoAllocateWithinGroupBtn +"  Value Expected : "+expbinAutoAllocateWithinGroupBtn);
		
		
		System.out.println("binTotalQty              	 : "+actbinTotalQty					+"  Value Expected : "+expbinTotalQty);	
		System.out.println("binBaseUOM                	 : "+actbinBaseUOM					+"  Value Expected : "+expbinBaseUOM);	
		System.out.println("binBalanceTxt            	 : "+actbinBalanceTxt				+"  Value Expected : "+expbinBalanceTxt);	
		
		System.out.println("binoutwardRow1Bin        	 : "+actbinoutwardRow1Bin			+"  Value Expected : "+expbinoutwardRow1Bin);
		System.out.println("binoutwardRow1Stock      	 : "+actbinoutwardRow1Stock			+"  Value Expected : "+expbinoutwardRow1Stock);
		System.out.println("binoutwardRow1StockPcs   	 : "+actbinoutwardRow1StockPcs		+"  Value Expected : "+expbinoutwardRow1StockPcs);
		System.out.println("binoutwardRow1Capacity   	 : "+actbinoutwardRow1Capacity		+"  Value Expected : "+expbinoutwardRow1Capacity);
		System.out.println("binoutwardRow1Load     	 	 : "+actbinoutwardRow1Load			+"  Value Expected : "+expbinoutwardRow1Load);
		System.out.println("binoutwardRow1FreeSpace  	 : "+actbinoutwardRow1FreeSpace		+"  Value Expected : "+expbinoutwardRow1FreeSpace);
		System.out.println("binoutwardRow1FreeQty    	 : "+actbinoutwardRow1FreeQty		+"  Value Expected : "+expbinoutwardRow1FreeQty);
		System.out.println("binoutwardRow1ToBePicked 	 : "+actbinoutwardRow1ToBePicked    +"  Value Expected : "+expbinoutwardRow1ToBePicked);
		
		
		System.out.println("binoutwardRow2Bin        	 : "+actbinoutwardRow2Bin			+"  Value Expected : "+expbinoutwardRow2Bin);
		System.out.println("binoutwardRow2Stock      	 : "+actbinoutwardRow2Stock			+"  Value Expected : "+expbinoutwardRow2Stock);
		System.out.println("binoutwardRow2StockPcs   	 : "+actbinoutwardRow2StockPcs		+"  Value Expected : "+expbinoutwardRow2StockPcs);
		System.out.println("binoutwardRow2Capacity   	 : "+actbinoutwardRow2Capacity		+"  Value Expected : "+expbinoutwardRow2Capacity);
		System.out.println("binoutwardRow2Load     	 	 : "+actbinoutwardRow2Load			+"  Value Expected : "+expbinoutwardRow2Load);
		System.out.println("binoutwardRow2FreeSpace  	 : "+actbinoutwardRow2FreeSpace		+"  Value Expected : "+expbinoutwardRow2FreeSpace);
		System.out.println("binoutwardRow2FreeQty    	 : "+actbinoutwardRow2FreeQty		+"  Value Expected : "+expbinoutwardRow2FreeQty);
		System.out.println("binoutwardRow2ToBePicked 	 : "+actbinoutwardRow2ToBePicked    +"  Value Expected : "+expbinoutwardRow2ToBePicked);
		
		System.out.println("binoutwardRowTotalToBePicked :"+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
		
		
		if(actItemR1C1.equalsIgnoreCase(expItemR1C1) && actUnitsR1C2.equalsIgnoreCase(expUnitsR1C2) && actAQR1C4.equalsIgnoreCase(expAQR1C4) 
				&& actFQR1C5.equalsIgnoreCase(expFQR1C5) && actQtyR1C8.equalsIgnoreCase(expQtyR1C8) && actRateR1C11.equalsIgnoreCase(expRateR1C11)
			
				&& actbinSearchTxt==expbinSearchTxt && actbinSearchBtn==expbinSearchBtn && actbinAutoAllocateBtn==expbinAutoAllocateBtn
				&& actbinPickBtn==expbinPickBtn && actbinCancelBtn==expbinCancelBtn && actbinAutoAllocateWithinGroupBtn==expbinAutoAllocateWithinGroupBtn
				
				&& actbinTotalQty.equalsIgnoreCase(expbinTotalQty) && actbinBaseUOM.equalsIgnoreCase(expbinBaseUOM)
				&& actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)
				
				&& actbinoutwardRow1Bin.equalsIgnoreCase(expbinoutwardRow1Bin) && actbinoutwardRow1Stock.equalsIgnoreCase(expbinoutwardRow1Stock)
				&& actbinoutwardRow1StockPcs.equalsIgnoreCase(expbinoutwardRow1StockPcs) && actbinoutwardRow1Capacity.equalsIgnoreCase(expbinoutwardRow1Capacity)
				&& actbinoutwardRow1Load.equalsIgnoreCase(expbinoutwardRow1Load) && actbinoutwardRow1FreeSpace.equalsIgnoreCase(expbinoutwardRow1FreeSpace)
				&& actbinoutwardRow1FreeQty.equalsIgnoreCase(expbinoutwardRow1FreeQty) && actbinoutwardRow1ToBePicked.equalsIgnoreCase(expbinoutwardRow1ToBePicked)
				
				&& actbinoutwardRow2Bin.equalsIgnoreCase(expbinoutwardRow2Bin) && actbinoutwardRow2Stock.equalsIgnoreCase(expbinoutwardRow2Stock)
				&& actbinoutwardRow2StockPcs.equalsIgnoreCase(expbinoutwardRow2StockPcs) && actbinoutwardRow2Capacity.equalsIgnoreCase(expbinoutwardRow2Capacity)
				&& actbinoutwardRow2Load.equalsIgnoreCase(expbinoutwardRow2Load) && actbinoutwardRow2FreeSpace.equalsIgnoreCase(expbinoutwardRow2FreeSpace)
				&& actbinoutwardRow2FreeQty.equalsIgnoreCase(expbinoutwardRow2FreeQty) && actbinoutwardRow2ToBePicked.equalsIgnoreCase(expbinoutwardRow2ToBePicked)
				
				&& actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked))
		{
			System.out.println("Values Are As Expected");;
			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
			return true;
				
			
		}
		else
		{
			System.out.println("Test Fail : Data NOT Entered in Second Row");
			return false;
		}
	}	
		
		
	// Not Updating Manully
	public boolean checkBinOutwardToBePickedInputManualWithLessThanQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binoutwardRow1ToBePicked));
		binoutwardRow1ToBePicked.click();
		
		binoutwardToInputInToBePicked.sendKeys("2");			
		binoutwardToInputInToBePicked.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		
		// Actual 
		String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
		String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
		String actbinOkButtonStatus				=binOkButtonStatus.getAttribute("disabled");
		
		// Expected
		String expbinoutwardRowTotalToBePicked	="2.00";
		String expbinBalanceTxt					="3.00";
		String expbinOkButtonStatus				="true";
		
		System.out.println("*********************************** checkBinOutwardToBePickedInputManualWithLessThanQty  ************************************");
		
		System.out.println("binoutwardRowTotalToBePicked : "+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
		System.out.println("binBalanceTxt    			 : "+actbinBalanceTxt				 +"  Value Expected : "+expbinBalanceTxt);
		System.out.println("binOkButtonStatus   		 : "+actbinOkButtonStatus			 +"  Value Expected : "+expbinOkButtonStatus);
		
		if(actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked) && actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)
				&& actbinOkButtonStatus.equalsIgnoreCase(expbinOkButtonStatus))
		   
		{
			System.out.println("Values Are As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Values Are Not As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
			return false;
		}
	}
	

	
	public boolean checkBinOutwardToBePickedInputManualWithGreaterThanQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binoutwardRow1ToBePicked));
		binoutwardRow1ToBePicked.click();
		
		binoutwardToInputInToBePicked.sendKeys("6");			
		binoutwardToInputInToBePicked.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		// Actual 
		String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
		String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
		String actbinOkButtonStatus				=binOkButtonStatus.getAttribute("disabled");
		
		// Expected
		String expbinoutwardRowTotalToBePicked	="0.00";
		String expbinBalanceTxt					="5.00";
		String expbinOkButtonStatus				="true";
		
		System.out.println("*********************************** checkBinOutwardToBePickedInputManualWithGreaterThanQty  ************************************");
		
		System.out.println("binoutwardRowTotalToBePicked : "+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
		System.out.println("binBalanceTxt    			 : "+actbinBalanceTxt				 +"  Value Expected : "+expbinBalanceTxt);
		System.out.println("binOkButtonStatus   		 : "+actbinOkButtonStatus			 +"  Value Expected : "+expbinOkButtonStatus);
		
		if(actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked) && actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt)
				&& actbinOkButtonStatus.equalsIgnoreCase(expbinOkButtonStatus))
		   
		{
			System.out.println("Values Are As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Values Are Not As Expected");

			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
			return false;
		}
	}
		
		
	// Not Updating Manully But Used Alternative in Else
	public boolean checkBinOutwardToBePickedInputManualWithEqualQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binoutwardRow1ToBePicked));
		binoutwardRow1ToBePicked.click();
		
		binoutwardToInputInToBePicked.sendKeys("5");			
		binoutwardToInputInToBePicked.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		// Actual 
		String actbinoutwardRowTotalToBePicked	=binoutwardRowTotalToBePicked.getText();
		String actbinBalanceTxt					=binBalanceTxt.getAttribute("value");
		
		// Expected
		String expbinoutwardRowTotalToBePicked	="5.00";
		String expbinBalanceTxt					="0.00";
		
		System.out.println("*********************************** checkBinOutwardToBePickedInputManualWithEqualQty  ************************************");
		
		System.out.println("binoutwardRowTotalToBePicked : "+actbinoutwardRowTotalToBePicked +"  Value Expected : "+expbinoutwardRowTotalToBePicked);
		System.out.println("binBalanceTxt    			 : "+actbinBalanceTxt				 +"  Value Expected : "+expbinBalanceTxt);
		
		if(actbinoutwardRowTotalToBePicked.equalsIgnoreCase(expbinoutwardRowTotalToBePicked) && actbinBalanceTxt.equalsIgnoreCase(expbinBalanceTxt))
		   
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			String actBinColumnValue=select1stRow_14thColumn.getText();
			
			String expBinColumnValue="Bin Update";
			
			System.out.println("BinColumnValue  : "+actBinColumnValue+"  Value Expected : "+expBinColumnValue);
			
			if(actBinColumnValue.equalsIgnoreCase(expBinColumnValue))
			{
				System.out.println("test pass : Bin 5 Displayed in Voucher");
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
				secondRowIndex.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				deleteRowBtn.click();
				
				excelReader.setCellData(xlfile, "Sheet6", 38, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("test fail : Bin 5 NOT Displayed in Voucher");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
				secondRowIndex.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				deleteRowBtn.click();
				
				excelReader.setCellData(xlfile, "Sheet6", 38, 9, resFail);
				return false;
			}
		}
		else
		{
			System.out.println("Values Are Not As Expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
			binAutoAllocateBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
			binOkBtn.click();
			
			excelReader.setCellData(xlfile, "Sheet6", 43, 9, resFail);
			return false;
		}
	}
		
		
		
	
	
	
	public boolean checkRMAIsMandatoryWithoutInputTheQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*//Comment this code 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));	
		saveBtn.click();
		
		String expErrorMessage	="Provide data for mandatory fieldsRMA";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		System.out.println("*********************************** checkRMAIsMandatoryWithoutInputTheQty  ************************************");
		
		System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
		
		if(validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			System.out.println("Test Pass : data is As Expected");
			return true;
		}
		else
		{
			System.out.println("Test Fail : data is NOT As Expected");
			return false;
		}
	}
	
		
	
	
	public boolean checkRMAPopUpScreenWithoutInputTheQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	   
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
		select2ndRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.clear();
		//enter_AQTxt.sendKeys("3");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(lSalesOrderValue));
		lSalesOrderValue.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		enter_QuantityToRelease.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("21");
		enter_Rate.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		
		
		String actErrorMessage=errorMessage.getText();
		
		String expErrorMessage="Quantity Should be Greater than zero.";
		
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();
		
		
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField		=true;
		String exprmaoutwardQuantityTxtField			="0";
		String exprmaoutwardNumberofItemsLabel			="0";
		boolean exprmaoutwardTableHeadingRMA			=true;
		boolean exprmaoutwardTableHeadingDocumentNo		=true;
		boolean exprmaoutwardTableHeadingDocumentDate	=true;
		boolean exprmaoutwardOkBtn						=true;
		boolean exprmaoutwardCancelBtn					=true;
		boolean exprmaoutwardExpandBtn					=true;
		
		
		System.out.println("*********************************** checkRMAPopUpScreenWithoutInputTheQty  ************************************");
		
		System.out.println("error Message                      :  "+actErrorMessage 					  +" value Expected : "+expErrorMessage);
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		
		
		if(actErrorMessage.equalsIgnoreCase(expErrorMessage)
				
				&& actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
		{
			System.out.println("Test Pass : data is As Expected");
			return true;
		}
		else
		{
			System.out.println("Test Fail : data is NOT As Expected");
			return false;
		}
	}
	
	
	public boolean checkAddButtonInRMAwithNoQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
		rmaoutwardAddBtn.click();
		
				
		getWaitForAlert();
		
		String actAlert	=getAlert().getText();
		
		String expAlert	="Cannot Enter more than Quantity. if want to change Select from Search Option.";
		
		System.out.println("************************************* checkAddButtonInRMAwithNoQty  *********************************");
		
		System.out.println("Alert : "+actAlert+"  Value Expected : "+expAlert);
		
		if(actAlert.equalsIgnoreCase(expAlert))
		{
			System.out.println("Test Pass : Alert Displayed");
			
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Displayed");
			return false;
		}
	}
	
		
		
	
	public boolean checkOkButtonInRMAwithNoQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		getWaitForAlert();
					
		String actAlert	=getAlert().getText();
		
		String expAlert	="RMA Number Cannot be Left Blank";
		
		System.out.println("************************************* checkOkButtonInRMAwithNoQty  *********************************");
		
		System.out.println("Alert : "+actAlert+"  Value Expected : "+expAlert);
		
		if(actAlert.equalsIgnoreCase(expAlert))
		{
			System.out.println("Test Pass : Alert Displayed");
			
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Displayed");
			return false;
		}
	}
	
	
	public boolean checkRmaSearchPopupOnRmaExpansion() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		
		// Actual 
		boolean actsearchRMASearchTxtField			=searchRMASearchTxtField.isDisplayed();
		boolean actsearchRMASearchBtn				=searchRMASearchBtn.isDisplayed();
		String actsearchRMAQuantityTxtField			=searchRMAQuantityTxtField.getAttribute("value");
		String actsearchRMANoOfItemsTxt				=searchRMANoOfItemsTxt.getText();
		
		boolean actsearchRMAHeaderChkBox			=searchRMAHeaderChkBox.isDisplayed();
		boolean actsearchRMATableHeadingSerialNo	=searchRMATableHeadingSerialNo.isDisplayed();
		boolean actsearchRMATableHeadingDocNo		=searchRMATableHeadingDocNo.isDisplayed();
		boolean actsearchRMATableHeadingDate		=searchRMATableHeadingDate.isDisplayed();
		boolean actsearchRMAOkBtn					=searchRMAOkBtn.isDisplayed();
		boolean actsearchRMACancelBtn				=searchRMACancelBtn.isDisplayed();
		
		// Expected
		boolean expsearchRMASearchTxtField			=true;
		boolean expsearchRMASearchBtn				=true;
		String expsearchRMAQuantityTxtField			="0";
		String expsearchRMANoOfItemsTxt				="0";
		
		boolean expsearchRMAHeaderChkBox			=true;
		boolean expsearchRMATableHeadingSerialNo	=true;
		boolean expsearchRMATableHeadingDocNo		=true;
		boolean expsearchRMATableHeadingDate		=true;
		boolean expsearchRMAOkBtn					=true;
		boolean expsearchRMACancelBtn				=true;
		
		System.out.println("************************************* checkRmaSearchPopupOnRmaExpansion  *********************************");
		
		System.out.println("searchRMASearchTxtField       : "+actsearchRMASearchTxtField		+"  Value Expected : "+expsearchRMASearchTxtField);
		System.out.println("searchRMASearchBtn            : "+actsearchRMASearchBtn				+"  Value Expected : "+expsearchRMASearchBtn);
		System.out.println("searchRMAQuantityTxtField     : "+actsearchRMAQuantityTxtField		+"  Value Expected : "+expsearchRMAQuantityTxtField);
		System.out.println("searchRMANoOfItemsTxt         : "+actsearchRMANoOfItemsTxt			+"  Value Expected : "+expsearchRMANoOfItemsTxt);
		System.out.println("searchRMAHeaderChkBox         : "+actsearchRMAHeaderChkBox			+"  Value Expected : "+expsearchRMAHeaderChkBox);
		System.out.println("searchRMATableHeadingSerialNo : "+actsearchRMATableHeadingSerialNo  +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
		System.out.println("searchRMATableHeadingDocNo    : "+actsearchRMATableHeadingDocNo		+"  Value Expected : "+expsearchRMATableHeadingDocNo);
		System.out.println("searchRMATableHeadingDate  	  : "+actsearchRMATableHeadingDate		+"  Value Expected : "+expsearchRMATableHeadingDate);
		System.out.println("searchRMAOkBtn   			  : "+actsearchRMAOkBtn					+"  Value Expected : "+expsearchRMAOkBtn);
		System.out.println("searchRMACancelBtn   		  : "+actsearchRMACancelBtn				+"  Value Expected : "+expsearchRMACancelBtn);
		
		
		if(actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
				&& actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
				&& actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
				&& actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
				&& actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
		{
			System.out.println("Test Pass : Search Rma Pop Up Displayed");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Search Rma Pop Up NOT Displayed");
			return false;
		}
	}

	
	public boolean checkOkButtonInSearchRMAwithNoQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		getWaitForAlert();
		
		String actAlert	=getAlert().getText();
		
		String expAlert	="Select Atleast One Record.";
		
		System.out.println("************************************* checkOkButtonInSearchRMAwithNoQty  *********************************");
		
		System.out.println("Alert : "+actAlert+"  Value Expected : "+expAlert);
		
		if(actAlert.equalsIgnoreCase(expAlert))
		{
			System.out.println("Test Pass : Alert Displayed");
			
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Displayed");
			return false;
		}
	}

	
	public boolean checkFirstSerialNumberWithNoQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMA1ChkBox));
		searchRMA1ChkBox.click();
		
		
		getWaitForAlert();
		
		String actAlert	=getAlert().getText();
		
		String expAlert	="Cannot Select more than Quantity";
		
		System.out.println("************************************* checkFirstSerialNumberWithNoQty  *********************************");
		
		System.out.println("Alert : "+actAlert+"  Value Expected : "+expAlert);
					
		if(actAlert.equalsIgnoreCase(expAlert))
		{
			System.out.println("Test Pass : Qty And no Of items Are As Expected");
			
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
			return false;
		}
	}
	
		
	
	public boolean checkQtyAndNumnerOfItemOnSelectingHeaderCheckBox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		Thread.sleep(2000);
		
		String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
		String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
		
		String expsearchRMAQuantityTxtField		="10";
		String expsearchRMANoOfItemsTxt			="10";
		
		System.out.println("************************************* checkQtyAndNumnerOfItemOnSelectingHeaderCheckBox  *********************************");
		
		System.out.println("searchRMAQuantityTxtField : "+actsearchRMAQuantityTxtField  +"  Value Expected : "+expsearchRMAQuantityTxtField);
		System.out.println("searchRMANoOfItemsTxt     : "+actsearchRMANoOfItemsTxt		+"  Value Expected : "+expsearchRMANoOfItemsTxt);
					
		if(actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt))
		{
			System.out.println("Test Pass : Qty And no Of items Are As Expected");
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
			return false;
		}
	}
	
		
	// Reported Issue
	public boolean checkQtyAndNumnerOfItemOnUncheckingHeaderCheckBox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		Thread.sleep(2000);
		
		String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
		String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
		
		String expsearchRMAQuantityTxtField		="0";
		String expsearchRMANoOfItemsTxt			="0";
		
		System.out.println("************************************* checkQtyAndNumnerOfItemOnUncheckingHeaderCheckBox  *********************************");
		
		System.out.println("searchRMAQuantityTxtField : "+actsearchRMAQuantityTxtField  +"  Value Expected : "+expsearchRMAQuantityTxtField);
		System.out.println("searchRMANoOfItemsTxt     : "+actsearchRMANoOfItemsTxt		+"  Value Expected : "+expsearchRMANoOfItemsTxt);
					
		if(actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt))
		{
			System.out.println("Test Pass : Qty And no Of items Are As Expected");
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
			return false;
		}
	}
	


	public boolean checkFirstSerialNumberWithNoQtyAfterCheckingAndUncheckingAllSerialNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMA1ChkBox));
		searchRMA1ChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMARow1SerialNo));
		
		String actSerialno		=searchRMARow1SerialNo.getText();
		
		String expSerialno		="Sec#Pv1";
		
		System.out.println(actSerialno);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		Thread.sleep(4000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.TAB);
		
		String actRma		=select2ndRow_15thColumn.getText();
		
		String expRma		="Sec#Pv1";
		
		System.out.println("************************************* checkFirstSerialNumberWithNoQtyAfterCheckingAndUncheckingAllSerialNumber  *********************************");
		
		System.out.println("Serialno : "+actSerialno  +"  Value Expected : "+expSerialno);
		System.out.println("Rma      : "+actRma		  +"  Value Expected : "+expRma);
		
					
		if(actSerialno.equalsIgnoreCase(expSerialno) && actRma.equalsIgnoreCase(expRma))
		{
			System.out.println("Test Pass : Qty And no Of items Are As Expected");
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
			return false;
		}
	}
		
	
	
	public boolean checkSavingWithRmaQtyAndNumbersNotEqual() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expErrorMessage	="RMA numbers and quantity do not match";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		System.out.println("*********************************** checkSavingWithRmaQtyAndNumbersNotEqual  ************************************");
		
		System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
		
		if(validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			System.out.println("***Test Pass: Error Message RMA numbers and quantity do not match is Displaying***");
			excelReader.setCellData(xlfile, "Sheet6", 154, 9, resPass);
			
			
			return true;
		}
		else
		{
			System.out.println("***Test Fail: Error Message RMA numbers and quantity do not match is NOT Displaying***");
			excelReader.setCellData(xlfile, "Sheet6", 154, 9, resFail);
			
		
			return false;
		}
	}
	
	
	
	public boolean checkRMAAsMandatoryByInputQtyWithOutRMAAndClickOnSaveButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		
		secondRowIndex.click();
		
		deleteRowBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
		select2ndRow_4thColumn.click();

		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys("4");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		enter_QuantityToRelease.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expErrorMessage	="Provide data for mandatory fieldsRMA";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		System.out.println("*********************************** checkRMAAsMandatoryByInputQtyWithOutRMAAndClickOnSaveButton  ************************************");
		
		System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
		
		if(validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			System.out.println("***Test Pass: Error Message RMA numbers and quantity do not match is Displaying***");
			excelReader.setCellData(xlfile, "Sheet6", 154, 9, resPass);
			
			
			return true;
		}
		else
		{
			System.out.println("***Test Fail: Error Message RMA numbers and quantity do not match is NOT Displaying***");
			excelReader.setCellData(xlfile, "Sheet6", 154, 9, resFail);
			
		
			return false;
		}
	}
	
	
	
	
	public boolean checkRMAPopUpScreenByInputQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("21");
		Thread.sleep(2000);
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField		=true;
		String exprmaoutwardQuantityTxtField			="4";
		String exprmaoutwardNumberofItemsLabel			="0";
		boolean exprmaoutwardTableHeadingRMA			=true;
		boolean exprmaoutwardTableHeadingDocumentNo		=true;
		boolean exprmaoutwardTableHeadingDocumentDate	=true;
		boolean exprmaoutwardOkBtn						=true;
		boolean exprmaoutwardCancelBtn					=true;
		boolean exprmaoutwardExpandBtn					=true;
		
		
		System.out.println("*********************************** checkRMAPopUpScreenByInputQty  ************************************");
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		
		
		if(actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
		{
			System.out.println("Test Pass : data is As Expected");
			return true;
		}
		else
		{
		
		
			return false;
		}
	}
	
	
	
	
	public boolean checkOkButtonInRMAPopUpScreenWithoutSelectingRMA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		getWaitForAlert();
		
		String actAlert		=getAlert().getText();
		
		String expAlert		="RMA Number Cannot be Left Blank, Do you want to continue with the selected quantity ?";
	
        System.out.println("Test Pass : alert Dipalyed");
        
        getAlert().accept();
		
        getWaitForAlert();
			
		String actAlert1	=getAlert().getText();
		
		String expAlert1	="RMA Number Cannot be Left Blank";	
		
		System.out.println("************************************* checkOkButtonInRMAPopUpScreenWithoutSelectingRMA  *********************************");
		
		System.out.println("Alert On Clicking Ok With Empty Inputs   : "+actAlert  +"  Value Expected : "+expAlert);
		
		System.out.println("Alert On Clicking Ok With Empty Inputs   : "+actAlert1 +"  Value Expected : "+expAlert1);
		

		if(actAlert.equalsIgnoreCase(expAlert) && actAlert1.equalsIgnoreCase(expAlert1))
		{
			System.out.println("Alert Displayed");
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert Not Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 144, 9, resFail);
			return false;
		}
	}
	

	
	public boolean checkAddButtonInRMAWithQtyInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
		rmaoutwardAddBtn.click();
		
		getWaitForAlert();
		
		String actAlert		=getAlert().getText();
		
		String expAlert		="Enter the Starting Serial No.";	
		
		System.out.println("************************************* checkAddButtonInRMAWithQtyInVoucher  *********************************");
		
		System.out.println("Alert   : "+actAlert+"  Value Expected : "+expAlert);
		
		if(actAlert.equalsIgnoreCase(expAlert))
		{
			System.out.println("Test Pass : Alert Displayed");
			
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Displayed");
			return false;
		}
	}
		
		
		
	
	public boolean checkRMASearchPopupOnRMAExpansionWithQtyInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField		=true;
		String exprmaoutwardQuantityTxtField			="4";
		String exprmaoutwardNumberofItemsLabel			="0";
		boolean exprmaoutwardTableHeadingRMA			=true;
		boolean exprmaoutwardTableHeadingDocumentNo		=true;
		boolean exprmaoutwardTableHeadingDocumentDate	=true;
		boolean exprmaoutwardOkBtn						=true;
		boolean exprmaoutwardCancelBtn					=true;
		boolean exprmaoutwardExpandBtn					=true;
		
		
		
		ArrayList<String>  expRMAListValues= new ArrayList<String>(); 
		
		
		expRMAListValues.add("Sec#Pv1");
		
		expRMAListValues.add("Sec#Pv2");
		expRMAListValues.add("Sec#Pv3");
		expRMAListValues.add("Sec#Pv4");
		expRMAListValues.add("Sec#Pv5");
		expRMAListValues.add("Sec#Pv6");
		expRMAListValues.add("Sec#Pv7");
		expRMAListValues.add("Sec#Pv8");
		expRMAListValues.add("Sec#Pv9");
		expRMAListValues.add("Sec#Pv10");
		
		ArrayList<String> actRMAListValues= new ArrayList<String>();
		
        for (int i = 1; i < 11; i++)
        {
        	WebElement options=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
        	actRMAListValues.add(options.getText());
        	
        }
        
        System.out.println("actRMA  : "+actRMAListValues);
        System.out.println("expRMA  : "+expRMAListValues);
        
        boolean rma=actRMAListValues.equals(expRMAListValues);
		
        System.out.println("************************************* checkRMASearchPopupOnRMAExpansionWithQtyInVoucher  *********************************");
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		System.out.println("Rma In Search Rma Table            : "+rma                                    +"  Value Expected : "+"True");
	    
        if(rma==true && actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
        {
        	return true;
        }
        else
        {
        	return false;
        }
	        
		
		
	}
	
	
	public boolean checkOkButtonInSearchRMAWithQtyInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		getWaitForAlert();
		
		String actAlert		=getAlert().getText();
		
		String expAlert		="Select Atleast One Record.";
		
		System.out.println("************************************* checkOkButtonInSearchRMAWithQtyInVoucher  *********************************");
		
		System.out.println("Alert   : "+actAlert+"  Value Expected : "+expAlert);
		
		if(actAlert.equalsIgnoreCase(expAlert))
		{
			System.out.println("Test Pass : Alert Displayed");
			
			getAlert().accept();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Displayed");
			return false;
		}
	}
	
	
	public boolean checkSearchBoxByInputRMANumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		searchRMASearchTxtField.click();
		searchRMASearchTxtField.sendKeys("Sec#Pv1");
		Thread.sleep(2000);
		searchRMASearchTxtField.sendKeys(Keys.TAB);
		
		String expSearchRMAFirstRow		="Sec#Pv1";
		String expSearchRMASecondRow	="Sec#Pv10";
	
        String searchRMAFirstRow=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr[1]/td[2]")).getText();
        String searchRMASecondRow=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr[10]/td[2]")).getText();
        	
        System.out.println("************************************* checkSearchBoxByInputRMANumber  *********************************");
        System.out.println("expSearchRMAFirstRow  : "+ expSearchRMAFirstRow  +"  Value Expected : "+ searchRMAFirstRow);
        System.out.println("expSearchRMASecondRow : "+ expSearchRMASecondRow +"  Value Expected : "+ searchRMASecondRow);
        
        if(expSearchRMAFirstRow.equalsIgnoreCase(searchRMAFirstRow) && expSearchRMASecondRow.equalsIgnoreCase(searchRMASecondRow))
        {
        	return true;
        }
        else
        {
        	return false;
        }
        
	}
		
	
	
	public boolean checkQtyAndNumberOfItemsByInputSearchRMAInSearchPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		Thread.sleep(2000);
		
		String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
		String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
		
		String expsearchRMAQuantityTxtField		="4";
		String expsearchRMANoOfItemsTxt			="2";
		
		System.out.println("************************************* checkQtyAndNumberOfItemsByInputSearchRMAInSearchPopupScreen  *********************************");
		
		System.out.println("searchRMAQuantityTxtField : "+actsearchRMAQuantityTxtField  +"  Value Expected : "+expsearchRMAQuantityTxtField);
		System.out.println("searchRMANoOfItemsTxt     : "+actsearchRMANoOfItemsTxt		+"  Value Expected : "+expsearchRMANoOfItemsTxt);
					
		if(actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt))
		{
			System.out.println("Test Pass : Qty And no Of items Are As Expected");
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
			return false;
		}
	}
	
	
	
	public boolean checkQtyAndNumberOfItemsInRMAPopupScreenBySelectingSearchRMA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(2000);
		
		String actsearchRMAQuantityTxtField=searchRMAQuantityTxtField.getAttribute("value");
		String actsearchRMANoOfItemsTxt=searchRMANoOfItemsTxt.getText();
		
		ArrayList<String>  expRMA= new ArrayList<String>(); 
         
		expRMA.add("Sec#Pv1");
		expRMA.add("Sec#Pv10");
		
		
		ArrayList<String> actRMA= new ArrayList<>();
		
        for (int i = 1; i < 3; i++)
        {
        	WebElement a=getDriver().findElement(By.xpath("//*[@id='RMA_Table']/tbody/tr["+i+"]/td[2]"));
        	Thread.sleep(2000);
        	actRMA.add(a.getText());
        	Thread.sleep(2000);
        	System.out.println(a.getText());
        }
        
        System.out.println("************************************* checkQtyAndNumberOfItemsInRMAPopupScreenBySelectingSearchRMA  *********************************");
		
        System.out.println("searchRMAQuantityTxtField : "+actsearchRMAQuantityTxtField);
		System.out.println("searchRMANoOfItemsTxt     : "+actsearchRMANoOfItemsTxt);
        
        System.out.println("actualrmaequals  : "+actRMA.equals(expRMA));
        
        System.out.println("actualcontains   : "+actRMA.contains(expRMA));
     
        if(actRMA.equals(expRMA))
        {
        	 return true;
        }
        else
        {
        	return false;
        }
	}
	
	


	public boolean checkOKButtonInRmaPopUpScreenBySelectingLessSerialNumbersToVoucherQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		getWaitForAlert();
				
		String actAlert		=getAlert().getText();
		
		String expAlert		="RMA Number Cannot be Left Blank, Do you want to continue with the selected quantity ?";
		
		System.out.println("************************************* checkOKButtonInRmaPopUpScreenBySelectingLessSerialNumbersToVoucherQty  *********************************");
		
		System.out.println("Alert   : "+actAlert+"  Value Expected : "+expAlert);
		
		if(actAlert.equalsIgnoreCase(expAlert))
		{
		
		System.out.println("Test Pass : checkOKButtonInRmaPopUpScreenBySelectingLessSerialNumbersToVoucherQty");
		
		getAlert().dismiss();
			
		excelReader.setCellData(xlfile, "Sheet6", 144, 9, resPass);
		return true;
		
		
		}
		else
		{
			System.out.println("Test Fail : checkOKButtonInRmaPopUpScreenBySelectingLessSerialNumbersToVoucherQty");
			excelReader.setCellData(xlfile, "Sheet6", 144, 9, resFail);
			return false;
		}
	}

	
	public boolean checkRMAPopUpScreenOnClickCancelButtonInTheAlert() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));

		// Actual 
		boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField		=true;
		String exprmaoutwardQuantityTxtField			="4";
		String exprmaoutwardNumberofItemsLabel			="2";
		boolean exprmaoutwardTableHeadingRMA			=true;
		boolean exprmaoutwardTableHeadingDocumentNo		=true;
		boolean exprmaoutwardTableHeadingDocumentDate	=true;
		boolean exprmaoutwardOkBtn						=true;
		boolean exprmaoutwardCancelBtn					=true;
		boolean exprmaoutwardExpandBtn					=true;
		
		ArrayList<String>  expRMA= new ArrayList<String>(); 
         		
		expRMA.add("Sec#Pv1");
		expRMA.add("Sec#Pv10");
		
		ArrayList<String> actRMA= new ArrayList<>();
		
        for (int i = 1; i < 3; i++)
        {
        	WebElement a=getDriver().findElement(By.xpath("//*[@id='RMA_Table']/tbody/tr["+i+"]/td[2]"));
        	actRMA.add(a.getText());
        }
        
        System.out.println("************************************* checkRMAPopUpScreenOnClickCancelButtonInTheAlert  *********************************");
        
        System.out.println("actRMA  : "+actRMA);
        System.out.println("expRMA  : "+expRMA);
        
        boolean rma=actRMA.equals(expRMA);
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		System.out.println("Rma In Search Rma Table            : "+rma                                    +" Value Expected :"+"True");
	    
		System.out.println(actRMA.equals(expRMA));
	       
       if(rma==true && actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
        {
        	return true;
        }
        else
        {
        	return false;
        }
	}
	
	
	
	public boolean checkAddButtonByInputOfInvalidRMANumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		rmaoutwardSerialNumberTxtField.click();
		rmaoutwardSerialNumberTxtField.sendKeys("TrialSerailNumber");
		
		Thread.sleep(2000);
		
		rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
		rmaoutwardAddBtn.click();
	
		if(getIsAlertPresent()==true)
		{
			getWaitForAlert();
		
			String actAlert		=getAlert().getText();
			
			String expAlert		="RMA number series does not exist";
			
		
			getAlert().accept();
			
			Thread.sleep(2000);
		
			//checking this for click on Ok button in the alert should display rma pop up screen
			
			String actrmaoutwardQuantityTxtField	=rmaoutwardQuantityTxtField.getAttribute("value");
			String actrmaoutwardNumberofItemsLabel	=rmaoutwardNumberofItemsLabel.getText();
			
			String exprmaoutwardQuantityTxtField	="4";
			String exprmaoutwardNumberofItemsLabel	="2";
			
			ArrayList<String>  expRMA= new ArrayList<String>(); 
		     
			
			expRMA.add("Sec#Pv1");
			expRMA.add("Sec#Pv10");
			
			ArrayList<String> actRMA= new ArrayList<>();
			
		    for (int i = 1; i < 3; i++) 
		    {
		    	WebElement a=getDriver().findElement(By.xpath("//*[@id='RMA_Table']/tbody/tr["+i+"]/td[2]"));
		    	actRMA.add(a.getText());
		    }
		    
		    System.out.println("************************************* checkAddButtonByInputOfInvalidRMANumber  *********************************");
		    
		    System.out.println("Alert  : "+actAlert +"  Value Expected : "+expAlert);
		    
		    System.out.println("actRMA  : "+actRMA);
		    System.out.println("expRMA  : "+expRMA);
		    
		    boolean rma=actRMA.equals(expRMA);
		
		    System.out.println("rmaoutwardQuantityTxtField       : "+actrmaoutwardQuantityTxtField          +"  Value Expected : "+exprmaoutwardQuantityTxtField);
			System.out.println("rmaoutwardNumberofItemsLabel     : "+actrmaoutwardNumberofItemsLabel		+"  Value Expected : "+exprmaoutwardNumberofItemsLabel);
			
			System.out.println("Rma In Search Rma Table : "+rma);
        
	        if(actAlert.equalsIgnoreCase(expAlert) && actRMA.equals(expRMA) && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField) 
	        		&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel))
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Displayed");
			return false;
		}
	
	}
	
		
	
	//Current Functionality is searching the Serial Number through Search by Partial selecting two rows in the Grid search and inputing the serail number from serach test box 
	
	public boolean checkAddButtonByInputOfValidRMANumberWhichIsAlreadySelectedThroughSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		rmaoutwardSerialNumberTxtField.click();
		rmaoutwardSerialNumberTxtField.sendKeys("Sec#Pv3");
		
		Thread.sleep(2000);
		
		rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
		rmaoutwardAddBtn.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		rmaoutwardSerialNumberTxtField.click();
		rmaoutwardSerialNumberTxtField.sendKeys("Sec#Pv10");
		
		Thread.sleep(2000);
		
		rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
		rmaoutwardAddBtn.click();
		
		if(getIsAlertPresent()==true)
		{
			
			getWaitForAlert();
			
			String actAlert		=getAlert().getText();
			
			String expAlert		="RMA number series exist in Grid";
			
			System.out.println(actAlert);
			
			System.out.println("************************************* checkAddButtonByInputOfValidRMANumberWhichIsAlreadySelectedThroughSearch  *********************************");
	        
	        System.out.println("Alert  : "+actAlert +"  Value Expected : "+expAlert);
			
			if(actAlert.equalsIgnoreCase(expAlert))
			{
			   System.out.println("Test Pass : Alert Displayed");
				
				getAlert().accept();
				
				return true;

			}
			else
			{
				System.out.println("Test Fail : Alert NOT Displayed");
				return false;
			}
		}
		else
		{
			
			System.out.println("Alert Is not Present  : checkAddButtonByInputOfValidRMANumberWhichIsAlreadySelectedThroughSearch");
			return false;
		}
	}
	
	
		
	//we are getting this issue so we have developed two cases to run the current scenario
		
	public boolean checkInputRMANumberForValidationOfRMAWhichIsAlreadySelect() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		//checking this for click on Ok button in the alert should display rma pop up screen
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField			=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField				=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel				=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA				=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo			=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate		=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn							=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn						=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn             			=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField           =true;
		String exprmaoutwardQuantityTxtField                ="4";
		String exprmaoutwardNumberofItemsLabel              ="3";
		boolean exprmaoutwardTableHeadingRMA                =true;
		boolean exprmaoutwardTableHeadingDocumentNo         =true;
		boolean exprmaoutwardTableHeadingDocumentDate       =true;
		boolean exprmaoutwardOkBtn                          =true;
		boolean exprmaoutwardCancelBtn                      =true;
		boolean exprmaoutwardExpandBtn                      =true;
		
		ArrayList<String>  expRMA= new ArrayList<String>(); 
         
		expRMA.add("Sec#Pv1");
		expRMA.add("Sec#Pv10");
		expRMA.add("Sec#Pv3");

		ArrayList<String> actRMA= new ArrayList<>();
		
        for (int i = 1; i < 4; i++) {
        	WebElement a=getDriver().findElement(By.xpath("//*[@id='RMA_Table']/tbody/tr["+i+"]/td[2]"));
        	actRMA.add(a.getText());
        }
        
        System.out.println("************************************* checkInputRMANumberForValidationOfRMAWhichIsAlreadySelect  *********************************");
        
        System.out.println("actRMA  : "+actRMA);
        System.out.println("expRMA  : "+expRMA);
        
        boolean rma=actRMA.equals(expRMA);

   		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
   		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
   		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
   		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
   		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
   		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
   		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
   		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
   		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
   		System.out.println("Rma In Search Rma Table            : "+rma                                    +" Value Expected :"+"True");
        
        if(rma==true && actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
        {
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
			rmaoutwardSerialNumberTxtField.click();
			rmaoutwardSerialNumberTxtField.sendKeys("Sec#Pv2");
			
			Thread.sleep(2000);
			
			rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
			rmaoutwardAddBtn.click();
			
			return true;
        }
        else
        {
        	return false;
        }
	}
	
		// Fails On above TC fails but In Else Flow Continues
	public boolean checkOkButtonByUsingSelectionOfRMAThroughSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		//checking this for click on Ok button in the alert should display rma pop up screen
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField		=true;
		String exprmaoutwardQuantityTxtField			="4";
		String exprmaoutwardNumberofItemsLabel			="4";
		boolean exprmaoutwardTableHeadingRMA			=true;
		boolean exprmaoutwardTableHeadingDocumentNo		=true;
		boolean exprmaoutwardTableHeadingDocumentDate	=true;
		boolean exprmaoutwardOkBtn						=true;
		boolean exprmaoutwardCancelBtn					=true;
		boolean exprmaoutwardExpandBtn					=true;
		
		ArrayList<String>  expRMA= new ArrayList<String>(); 
         
		expRMA.add("Sec#Pv1"); 
		expRMA.add("Sec#Pv10");
		expRMA.add("Sec#Pv3");
		expRMA.add("Sec#Pv2");
		
		ArrayList<String> actRMA= new ArrayList<>();
		
        for (int i = 1; i < 5; i++) 
        {
        	WebElement a=getDriver().findElement(By.xpath("//*[@id='RMA_Table']/tbody/tr["+i+"]/td[2]"));
        	actRMA.add(a.getText());
        }
        
        System.out.println("************************************* checkOkButtonByUsingSelectionOfRMAThroughSearch  *********************************");
        
        System.out.println("actRMA  : "+actRMA);
        System.out.println("expRMA  : "+expRMA);
        
        boolean rma=actRMA.equals(expRMA);
       		
   		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
   		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
   		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
   		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
   		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
   		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
   		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
   		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
   		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
   		System.out.println("Rma In Search Rma Table            : "+rma                                    +" Value Expected :"+"True");
        
        if(rma==true && actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
        {
        	
        	Thread.sleep(2000);
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
        	rmaoutwardOkBtn.click();
			
			
			return true;
        }
        else
        {
        	
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardCancelBtn));
        	rmaoutwardCancelBtn.click();
        	
        	Thread.sleep(2000);
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_15thColumn));
        	select2ndRow_15thColumn.click();
        	
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
        	rmaoutwardExpandBtn.click();
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
        	searchRMASearchTxtField.click();
        	searchRMASearchTxtField.sendKeys("Sec#Pv1");
        	Thread.sleep(2000);
        	searchRMASearchTxtField.sendKeys(Keys.TAB);
        	
        	Thread.sleep(2000);
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
        	searchRMAHeaderChkBox.click();
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
        	searchRMAOkBtn.click();
        	
        	Thread.sleep(2000);
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
        	rmaoutwardSerialNumberTxtField.click();
        	rmaoutwardSerialNumberTxtField.sendKeys("Sec#Pv3");
        	Thread.sleep(2000);
        	rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
        	rmaoutwardAddBtn.click();
        	
        	Thread.sleep(2000);
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
        	rmaoutwardSerialNumberTxtField.click();
        	rmaoutwardSerialNumberTxtField.sendKeys("Sec#Pv2");
        	Thread.sleep(2000);
        	rmaoutwardSerialNumberTxtField.sendKeys(Keys.TAB);
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardAddBtn));
        	rmaoutwardAddBtn.click();
        	
        	Thread.sleep(2000);
        	
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
        	rmaoutwardOkBtn.click();
        	
        	return false;
        }
	}
		
	
	public boolean checkRMAColumnInTheVoucherBodyonClickOnOkButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.TAB);
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_15thColumn));
		String actRmaColumn		=select2ndRow_15thColumn.getText();
		
		String expRmaColumn		="Sec#Pv1,Sec#Pv10,Sec#Pv3,Sec#Pv2";
		
		System.out.println("************************************* checkRMAColumnInTheVoucherBodyonClickOnOkButton  *********************************");
		
		System.out.println("Rma Column in Voucher      : "+actRmaColumn+"  Value Expected : "+expRmaColumn);
		
		if(actRmaColumn.equalsIgnoreCase(expRmaColumn))
		{
			System.out.println("Test Pass: Serial no Series Displaying in RMA Column");
			excelReader.setCellData(xlfile, "Sheet6", 48, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail: Serial no Series NOT Displaying in RMA Column");
			excelReader.setCellData(xlfile, "Sheet6", 48, 9, resFail);
			return false;
		}
	}
	
		
	
	public boolean checkSaveSalesInvoiceWithEditingRMAInVoucherTwoSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();
 		
 		Thread.sleep(2000);
	
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
 		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
 		
 		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReference									="63.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchers			="0.00";
 		expBillTransactionCurrency							="189.00";
 		expBillBaseCurrency									="189.00";
 		expBillLocalCurrency								="13.23";
 		
 		expBillBalanceNewRefAmount							="63.00";
 		
 		expBillBreakUpByTagDepartment						="INDIA";
 		expBillBreakUpByTagBillCurrency						="189";
 		expBillBreakUpByTagBaseCurrency						="189.00";
 		
 		
 		expBillBreakUpByTagLocalCurrency					="13.23";
 		expBillAmtAdjustedInTransactionCurrency				="63";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrency	="126.00";
 	

 		System.out.println("*********************************** checkSaveSalesInvoiceWithEditingRMAInVoucherTwoSecondRow  ************************************");

 		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
 		
 		   
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
 		breakUpByTagTab.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
 		billRefNewReferenceTxt.click();
 		
 		
 		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
 		
 		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
 		
 		
 		expBillNewReferencePick									="189.00";
 		expBillAmtAdjAgainstNewRefInOtherVouchersPick			="0.00";
 		expBillTransactionCurrencyPick							="189.00";
 		expBillBaseCurrencyPick									="189.00";
 		expBillLocalCurrencyPick								="13.23";
 		
 		expBillBalanceNewRefAmountPick							="189.00";
 		
 		expBillBreakUpByTagDepartmentPick						="INDIA";
 		expBillBreakUpByTagBillCurrencyPick						="189";
 		expBillBreakUpByTagBaseCurrencyPick						="189.00";
 		
 		
 		expBillBreakUpByTagLocalCurrencyPick					="13.23";
 		expBillAmtAdjustedInTransactionCurrencyPick				="189";
 		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	="0.00";

 		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
 			    
 			    
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
	    Bill_OkBtn.click();
	   
	    boolean savingMessage=checkVoucherSavingMessage(docno);
		
	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
 				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
 				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
 				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
 				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
 				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
 				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
 				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
 				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
 				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
 				
 				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
 				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
 				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
 				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
 				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
 				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
 				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
 				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
 				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
 				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
 				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
 				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			
			return true;
			
		}
		else
		{
			
			return false;
		}
	}
		
		
		 
	@FindBy(xpath="//tbody[@id='id_header_1_table_data_body']/tr")
	private static List<WebElement> docnoListCount; 
	 
	 public boolean checkDisplayRMASerialNumbersRemainingInVoucherOneThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
		 Thread.sleep(2000);
		    
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		 documentNumberTxt.click();
		 documentNumberTxt.sendKeys(Keys.BACK_SPACE);
			
			
		 int docnocount=docnoListCount.size();
		 
		 System.err.println(docnocount);
		 
		 for(int i=0 ; i < docnocount ;i++)
		 {
			 String data=docnoListCount.get(i).getAttribute("data-svoucherno");
			 
			 if(data.equalsIgnoreCase("1"))
			 {
				 docnoListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		 documentNumberTxt.sendKeys(Keys.TAB);	
		 
		 boolean loading=checkLoadingMessage();
			
		 System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		 
		 Thread.sleep(5000);
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		 select3rdRow_1stColumn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		 enter_ItemTxt.sendKeys(Keys.END);
		 enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		 enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		 enter_ItemTxt.sendKeys(Keys.SPACE);
		 
		 int itemcount1=itemListCount.size();
		 
		 System.err.println(itemcount1);
		 
		 for(int i=0 ; i < itemcount1 ;i++)
		 {
			 String data=itemListCount.get(i).getAttribute("data-sname");
			 
			 if(data.equalsIgnoreCase("RMA RITEM"))
			 {
				 itemListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		 enter_ItemTxt.sendKeys(Keys.TAB);	
		 
		 Thread.sleep(2000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		 select3rdRow_4thColumn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		 enter_AQTxt.click();
		 enter_AQTxt.clear();
		 enter_AQTxt.sendKeys("4");
		 enter_AQTxt.sendKeys(Keys.TAB);
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		 enter_FQTxt.click();
		 enter_FQTxt.clear();
		 enter_FQTxt.sendKeys(Keys.TAB);
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		 enter_AvgRate.sendKeys(Keys.TAB);
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		 enter_AvgRateo.sendKeys(Keys.TAB);
		 
		 Thread.sleep(3000);
		 
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		 enter_Quantity.sendKeys(Keys.TAB);
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		 enter_QuantityToRelease.sendKeys(Keys.TAB);
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		 enter_Rate.click();
		 enter_Rate.clear();
		 enter_Rate.sendKeys("19");
		 
		 enter_Rate.sendKeys(Keys.TAB);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		 enter_Gross.sendKeys(Keys.TAB);
		 
		 Thread.sleep(3000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		 
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField		=true;
		String exprmaoutwardQuantityTxtField			="4";
		String exprmaoutwardNumberofItemsLabel			="0";
		boolean exprmaoutwardTableHeadingRMA			=true;
		boolean exprmaoutwardTableHeadingDocumentNo		=true;
		boolean exprmaoutwardTableHeadingDocumentDate	=true;
		boolean exprmaoutwardOkBtn						=true;
		boolean exprmaoutwardCancelBtn					=true;
		boolean exprmaoutwardExpandBtn					=true;
		
		
		System.out.println("*********************************** checkDisplayRMASerialNumbersRemainingInVoucherOneThirdRow  ************************************");
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		
		
		if(actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
		 {
			 System.out.println("Test Pass : data is As Expected");
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Fail : data is NOT As Expected");
			 return false;
		 }				
	 }
	 
		 


		

	 public boolean checkRmaSearchPopupOnRMAExpansionInVoucherOneThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		 rmaoutwardExpandBtn.click();
		 
		 Thread.sleep(3000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		 
		 // Actual 
		 boolean actsearchRMASearchTxtField			=searchRMASearchTxtField.isDisplayed();
		 boolean actsearchRMASearchBtn				=searchRMASearchBtn.isDisplayed();
		 String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
		 String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
		 
		 boolean actsearchRMAHeaderChkBox			=searchRMAHeaderChkBox.isDisplayed();
		 boolean actsearchRMATableHeadingSerialNo	=searchRMATableHeadingSerialNo.isDisplayed();
		 boolean actsearchRMATableHeadingDocNo		=searchRMATableHeadingDocNo.isDisplayed();
		 boolean actsearchRMATableHeadingDate		=searchRMATableHeadingDate.isDisplayed();
		 boolean actsearchRMAOkBtn					=searchRMAOkBtn.isDisplayed();
		 boolean actsearchRMACancelBtn				=searchRMACancelBtn.isDisplayed();
		 
		 // Expected
		 boolean expsearchRMASearchTxtField			=true;
		 boolean expsearchRMASearchBtn				=true;
		 String expsearchRMAQuantityTxtField		="4";
		 String expsearchRMANoOfItemsTxt			="0";
		 
		 boolean expsearchRMAHeaderChkBox			=true;
		 boolean expsearchRMATableHeadingSerialNo	=true;
		 boolean expsearchRMATableHeadingDocNo		=true;
		 boolean expsearchRMATableHeadingDate		=true;
		 boolean expsearchRMAOkBtn					=true;
		 boolean expsearchRMACancelBtn				=true;
		 
		
		 ArrayList<String>  expRMA= new ArrayList<String>(); 
		 
		 expRMA.add("Sec#Pv4");
		 expRMA.add("Sec#Pv5");
		 expRMA.add("Sec#Pv6");
		 expRMA.add("Sec#Pv7");
		 expRMA.add("Sec#Pv8");
		 expRMA.add("Sec#Pv9");
		 
		 ArrayList<String> actRMA= new ArrayList<>();
		 
		 for (int i = 1; i < 7; i++)
		 {
			 WebElement a=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
			 Thread.sleep(2000);
			 actRMA.add(a.getText());
		 }	
	        
		 System.out.println("actRMA  : "+actRMA);
         System.out.println("expRMA  : "+expRMA);
        
         boolean rma=actRMA.equals(expRMA);
		
         System.out.println("************************************* checkRMASearchPopupOnRMAExpansionWithQtyInVoucher  *********************************");
	 	
         System.out.println("searchRMASearchTxtField       : "+actsearchRMASearchTxtField		+"  Value Expected : "+expsearchRMASearchTxtField);
         System.out.println("searchRMASearchBtn            : "+actsearchRMASearchBtn			+"  Value Expected : "+expsearchRMASearchBtn);
	 	 System.out.println("searchRMAQuantityTxtField     : "+actsearchRMAQuantityTxtField		+"  Value Expected : "+expsearchRMAQuantityTxtField);
	 	 System.out.println("searchRMANoOfItemsTxt         : "+actsearchRMANoOfItemsTxt			+"  Value Expected : "+expsearchRMANoOfItemsTxt);
	 	 System.out.println("searchRMAHeaderChkBox         : "+actsearchRMAHeaderChkBox			+"  Value Expected : "+expsearchRMAHeaderChkBox);
	 	 System.out.println("searchRMATableHeadingSerialNo : "+actsearchRMATableHeadingSerialNo +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
	 	 System.out.println("searchRMATableHeadingDocNo    : "+actsearchRMATableHeadingDocNo	+"  Value Expected : "+expsearchRMATableHeadingDocNo);
	 	 System.out.println("searchRMATableHeadingDate     : "+actsearchRMATableHeadingDate		+"  Value Expected : "+expsearchRMATableHeadingDate);
	 	 System.out.println("searchRMAOkBtn   			   : "+actsearchRMAOkBtn				+"  Value Expected : "+expsearchRMAOkBtn);
	 	 System.out.println("searchRMACancelBtn   		   : "+actsearchRMACancelBtn			+"  Value Expected : "+expsearchRMACancelBtn);
	 	 System.out.println("Rma In Search Rma Table       : "+rma                              +"  Value Expected : "+"True");
			 
		 if(rma==true && actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
				 && actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
				 && actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
				 && actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
				 && actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
		 {
			 return true;
		 }	
		 else	
		 {
			 return false;
		 }
	
		
	 }
		
	
	public boolean checkSelectTheRMANumbersThroughCheckBoxInVoucherOneThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		 Thread.sleep(3000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		 
		 // Actual 
		 boolean actsearchRMASearchTxtField			=searchRMASearchTxtField.isDisplayed();
		 boolean actsearchRMASearchBtn				=searchRMASearchBtn.isDisplayed();
		 String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
		 String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
		 
		 boolean actsearchRMAHeaderChkBox			=searchRMAHeaderChkBox.isDisplayed();
		 boolean actsearchRMATableHeadingSerialNo	=searchRMATableHeadingSerialNo.isDisplayed();
		 boolean actsearchRMATableHeadingDocNo		=searchRMATableHeadingDocNo.isDisplayed();
		 boolean actsearchRMATableHeadingDate		=searchRMATableHeadingDate.isDisplayed();
		 boolean actsearchRMAOkBtn					=searchRMAOkBtn.isDisplayed();
		 boolean actsearchRMACancelBtn				=searchRMACancelBtn.isDisplayed();
		 
		 // Expected
		 boolean expsearchRMASearchTxtField			=true;
		 boolean expsearchRMASearchBtn				=true;
		 String expsearchRMAQuantityTxtField		="4";
		 String expsearchRMANoOfItemsTxt			="4";
		 
		 boolean expsearchRMAHeaderChkBox			=true;
		 boolean expsearchRMATableHeadingSerialNo	=true;
		 boolean expsearchRMATableHeadingDocNo		=true;
		 boolean expsearchRMATableHeadingDate		=true;
		 boolean expsearchRMAOkBtn					=true;
		 boolean expsearchRMACancelBtn				=true;
		 
		 System.out.println("************************************* checkSelectTheRMANumbersThroughCheckBoxInVoucherOneThirdRow  *********************************");
		 
		 System.out.println("searchRMASearchTxtField       : "+actsearchRMASearchTxtField		+"  Value Expected : "+expsearchRMASearchTxtField);
		 System.out.println("searchRMASearchBtn            : "+actsearchRMASearchBtn			+"  Value Expected : "+expsearchRMASearchBtn);
		 System.out.println("searchRMAQuantityTxtField     : "+actsearchRMAQuantityTxtField		+"  Value Expected : "+expsearchRMAQuantityTxtField);
		 System.out.println("searchRMANoOfItemsTxt         : "+actsearchRMANoOfItemsTxt			+"  Value Expected : "+expsearchRMANoOfItemsTxt);
		 System.out.println("searchRMAHeaderChkBox         : "+actsearchRMAHeaderChkBox			+"  Value Expected : "+expsearchRMAHeaderChkBox);
		 System.out.println("searchRMATableHeadingSerialNo : "+actsearchRMATableHeadingSerialNo +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
		 System.out.println("searchRMATableHeadingDocNo    : "+actsearchRMATableHeadingDocNo	+"  Value Expected : "+expsearchRMATableHeadingDocNo);
		 System.out.println("searchRMATableHeadingDate     : "+actsearchRMATableHeadingDate		+"  Value Expected : "+expsearchRMATableHeadingDate);
		 System.out.println("searchRMAOkBtn   			   : "+actsearchRMAOkBtn				+"  Value Expected : "+expsearchRMAOkBtn);
		 System.out.println("searchRMACancelBtn   		   : "+actsearchRMACancelBtn			+"  Value Expected : "+expsearchRMACancelBtn);
		 
		 
		 if(actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
				 && actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
				 && actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
				 && actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
				 && actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
		{
			System.out.println("Test Pass : Qty And no Of items Are As Expected");
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
			return false;
		}
	}
	
	public boolean checkOkButtonInRMAPopupScreenInVoucherOneThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField		=true;
		String exprmaoutwardQuantityTxtField			="4";
		String exprmaoutwardNumberofItemsLabel			="4";
		boolean exprmaoutwardTableHeadingRMA			=true;
		boolean exprmaoutwardTableHeadingDocumentNo		=true;
		boolean exprmaoutwardTableHeadingDocumentDate	=true;
		boolean exprmaoutwardOkBtn						=true;
		boolean exprmaoutwardCancelBtn					=true;
		boolean exprmaoutwardExpandBtn					=true;
		
		
		System.out.println("*********************************** checkOkButtonInRMAPopupScreenInVoucherOneThirdRow  ************************************");
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		
		
		if(actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
		{
			System.out.println("Test Pass : Qty And no Of items Are As Expected");
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
			return false;
		}
	}
	
	public boolean checkRMAColumnRMANumbersInVoucherOneThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		 rmaoutwardOkBtn.click();
		 
		 Thread.sleep(3000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		 enter_RMA.sendKeys(Keys.TAB);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_15thColumn));
		 String actRmaColumn	=select3rdRow_15thColumn.getText();
		 
		 String expRmaColumn	="Sec#Pv4,Sec#Pv5,Sec#Pv6,Sec#Pv7";
		 
		 System.out.println("*********************************** checkRMAColumnRMANumbersInVoucherOneThirdRow  ************************************");
			
		 System.out.println("RmaColumn 	   :  "+actRmaColumn+" value Expected : "+expRmaColumn);
		 
		 if(actRmaColumn.equalsIgnoreCase(expRmaColumn))
		 {
			 System.out.println("Test Pass: Serial no Series Displaying in RMA Column");
			 excelReader.setCellData(xlfile, "Sheet6", 48, 9, resPass);
			 return true;
		 }
		 else
		 {
			 System.out.println("Test Fail: Serial no Series NOT Displaying in RMA Column");
			 excelReader.setCellData(xlfile, "Sheet6", 48, 9, resFail);
			 return false;
		 }
	}

		
			
	
	public boolean checkDisplayRMASerialNumbersRemainingInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
		    
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
		select4thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.clear();
		enter_AQTxt.sendKeys("2");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		enter_QuantityToRelease.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("9");
		
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField		=true;
		String exprmaoutwardQuantityTxtField			="2";
		String exprmaoutwardNumberofItemsLabel			="0";
		boolean exprmaoutwardTableHeadingRMA			=true;
		boolean exprmaoutwardTableHeadingDocumentNo		=true;
		boolean exprmaoutwardTableHeadingDocumentDate	=true;
		boolean exprmaoutwardOkBtn						=true;
		boolean exprmaoutwardCancelBtn					=true;
		boolean exprmaoutwardExpandBtn					=true;
		
		
		System.out.println("*********************************** checkDisplayRMASerialNumbersRemainingInVoucherOneFourthRow  ************************************");
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		
		if(actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
		{	
			System.out.println("Test Pass : data is As Expected");
			return true;
		}
		else
		{
			System.out.println("Test Fail : data is NOT As Expected");
			return false;
		}			
			
	 }
	





	
	public boolean checkRMASearchPopupOnRMAExpansionInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		
		 // Actual 
		 boolean actsearchRMASearchTxtField			=searchRMASearchTxtField.isDisplayed();
		 boolean actsearchRMASearchBtn				=searchRMASearchBtn.isDisplayed();
		 String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
		 String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
		 
		 boolean actsearchRMAHeaderChkBox			=searchRMAHeaderChkBox.isDisplayed();
		 boolean actsearchRMATableHeadingSerialNo	=searchRMATableHeadingSerialNo.isDisplayed();
		 boolean actsearchRMATableHeadingDocNo		=searchRMATableHeadingDocNo.isDisplayed();
		 boolean actsearchRMATableHeadingDate		=searchRMATableHeadingDate.isDisplayed();
		 boolean actsearchRMAOkBtn					=searchRMAOkBtn.isDisplayed();
		 boolean actsearchRMACancelBtn				=searchRMACancelBtn.isDisplayed();
		 
		 // Expected
		 boolean expsearchRMASearchTxtField			=true;
		 boolean expsearchRMASearchBtn				=true;
		 String expsearchRMAQuantityTxtField		="2";
		 String expsearchRMANoOfItemsTxt			="0";
		 
		 boolean expsearchRMAHeaderChkBox			=true;
		 boolean expsearchRMATableHeadingSerialNo	=true;
		 boolean expsearchRMATableHeadingDocNo		=true;
		 boolean expsearchRMATableHeadingDate		=true;
		 boolean expsearchRMAOkBtn					=true;
		 boolean expsearchRMACancelBtn				=true;
		 
		ArrayList<String>  expRMA= new ArrayList<String>(); 
		
		expRMA.add("Sec#Pv8");
		expRMA.add("Sec#Pv9");
			
		ArrayList<String> actRMA= new ArrayList<>();
				
		for (int i = 5; i < 7; i++)
		{
			WebElement a=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
			Thread.sleep(2000);
			actRMA.add(a.getText());
		}
	        
		System.out.println("actRMA  : "+actRMA);
		System.out.println("expRMA  : "+expRMA);
		
		boolean rma=actRMA.equals(expRMA);
		
		 System.out.println("************************************* checkRMASearchPopupOnRMAExpansionInVoucherOneFourthRow  *********************************");
		 
		 System.out.println("searchRMASearchTxtField       : "+actsearchRMASearchTxtField		+"  Value Expected : "+expsearchRMASearchTxtField);
		 System.out.println("searchRMASearchBtn            : "+actsearchRMASearchBtn			+"  Value Expected : "+expsearchRMASearchBtn);
		 System.out.println("searchRMAQuantityTxtField     : "+actsearchRMAQuantityTxtField		+"  Value Expected : "+expsearchRMAQuantityTxtField);
		 System.out.println("searchRMANoOfItemsTxt         : "+actsearchRMANoOfItemsTxt			+"  Value Expected : "+expsearchRMANoOfItemsTxt);
		 System.out.println("searchRMAHeaderChkBox         : "+actsearchRMAHeaderChkBox			+"  Value Expected : "+expsearchRMAHeaderChkBox);
		 System.out.println("searchRMATableHeadingSerialNo : "+actsearchRMATableHeadingSerialNo +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
		 System.out.println("searchRMATableHeadingDocNo    : "+actsearchRMATableHeadingDocNo	+"  Value Expected : "+expsearchRMATableHeadingDocNo);
		 System.out.println("searchRMATableHeadingDate     : "+actsearchRMATableHeadingDate		+"  Value Expected : "+expsearchRMATableHeadingDate);
		 System.out.println("searchRMAOkBtn   			   : "+actsearchRMAOkBtn				+"  Value Expected : "+expsearchRMAOkBtn);
		 System.out.println("searchRMACancelBtn   		   : "+actsearchRMACancelBtn			+"  Value Expected : "+expsearchRMACancelBtn);
		 System.out.println("rma                           : "+rma                              +"  Value Expected : "+"True");
		
		if(rma==true && actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
				 && actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
				 && actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
				 && actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
				 && actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
		{
			return true;
		}
		else
		{
			return false;
		}
	        
	}
		
	
		




	
	
	public boolean checkSelectTheRMANumbersThroughCheckBoxInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		
		 // Actual 
		 boolean actsearchRMASearchTxtField			=searchRMASearchTxtField.isDisplayed();
		 boolean actsearchRMASearchBtn				=searchRMASearchBtn.isDisplayed();
		 String actsearchRMAQuantityTxtField		=searchRMAQuantityTxtField.getAttribute("value");
		 String actsearchRMANoOfItemsTxt			=searchRMANoOfItemsTxt.getText();
		 
		 boolean actsearchRMAHeaderChkBox			=searchRMAHeaderChkBox.isDisplayed();
		 boolean actsearchRMATableHeadingSerialNo	=searchRMATableHeadingSerialNo.isDisplayed();
		 boolean actsearchRMATableHeadingDocNo		=searchRMATableHeadingDocNo.isDisplayed();
		 boolean actsearchRMATableHeadingDate		=searchRMATableHeadingDate.isDisplayed();
		 boolean actsearchRMAOkBtn					=searchRMAOkBtn.isDisplayed();
		 boolean actsearchRMACancelBtn				=searchRMACancelBtn.isDisplayed();
		 
		 // Expected
		 boolean expsearchRMASearchTxtField			=true;
		 boolean expsearchRMASearchBtn				=true;
		 String expsearchRMAQuantityTxtField		="2";
		 String expsearchRMANoOfItemsTxt			="2";
		 
		 boolean expsearchRMAHeaderChkBox			=true;
		 boolean expsearchRMATableHeadingSerialNo	=true;
		 boolean expsearchRMATableHeadingDocNo		=true;
		 boolean expsearchRMATableHeadingDate		=true;
		 boolean expsearchRMAOkBtn					=true;
		 boolean expsearchRMACancelBtn				=true;
		 
		 System.out.println("************************************* checkSelectTheRMANumbersThroughCheckBoxInVoucherOneFourthRow  *********************************");
		 
		 System.out.println("searchRMASearchTxtField       : "+actsearchRMASearchTxtField		+"  Value Expected : "+expsearchRMASearchTxtField);
		 System.out.println("searchRMASearchBtn            : "+actsearchRMASearchBtn			+"  Value Expected : "+expsearchRMASearchBtn);
		 System.out.println("searchRMAQuantityTxtField     : "+actsearchRMAQuantityTxtField		+"  Value Expected : "+expsearchRMAQuantityTxtField);
		 System.out.println("searchRMANoOfItemsTxt         : "+actsearchRMANoOfItemsTxt			+"  Value Expected : "+expsearchRMANoOfItemsTxt);
		 System.out.println("searchRMAHeaderChkBox         : "+actsearchRMAHeaderChkBox			+"  Value Expected : "+expsearchRMAHeaderChkBox);
		 System.out.println("searchRMATableHeadingSerialNo : "+actsearchRMATableHeadingSerialNo +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
		 System.out.println("searchRMATableHeadingDocNo    : "+actsearchRMATableHeadingDocNo	+"  Value Expected : "+expsearchRMATableHeadingDocNo);
		 System.out.println("searchRMATableHeadingDate     : "+actsearchRMATableHeadingDate		+"  Value Expected : "+expsearchRMATableHeadingDate);
		 System.out.println("searchRMAOkBtn   			   : "+actsearchRMAOkBtn				+"  Value Expected : "+expsearchRMAOkBtn);
		 System.out.println("searchRMACancelBtn   		   : "+actsearchRMACancelBtn			+"  Value Expected : "+expsearchRMACancelBtn);
		 
		 
		 if(actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
				 && actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
				 && actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
				 && actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
				 && actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
		{
			System.out.println("Test Pass : Qty And no Of items Are As Expected");
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
			return false;
		}
	}
	
	
	
	public boolean checkOkButtonInRMAPopupScreenInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField		=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField			=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel			=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA			=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo		=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate	=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn						=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn					=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn					=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField		=true;
		String exprmaoutwardQuantityTxtField			="2";
		String exprmaoutwardNumberofItemsLabel			="2";
		boolean exprmaoutwardTableHeadingRMA			=true;
		boolean exprmaoutwardTableHeadingDocumentNo		=true;
		boolean exprmaoutwardTableHeadingDocumentDate	=true;
		boolean exprmaoutwardOkBtn						=true;
		boolean exprmaoutwardCancelBtn					=true;
		boolean exprmaoutwardExpandBtn					=true;
		
		
		System.out.println("*********************************** checkOkButtonInRMAPopupScreenInVoucherOneFourthRow  ************************************");
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		
		if(actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
		{
			System.out.println("Test Pass : Qty And no Of items Are As Expected");
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
			return false;
		}
	}

	
	
		
	public boolean checkRMAColumnRMANumbersInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
				
		Thread.sleep(3000);
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.TAB);
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_15thColumn));
		String actRmaColumn=select4thRow_15thColumn.getText();
				
		String expRmaColumn="Sec#Pv8,Sec#Pv9";
		
		System.out.println("*********************************** checkRMAColumnRMANumbersInVoucherOneFourthRow  ************************************");
		
		System.out.println("RmaColumn 	   :  "+actRmaColumn+" value Expected : "+expRmaColumn);
		
		if(actRmaColumn.equalsIgnoreCase(expRmaColumn))
		{
			System.out.println("Test Pass: Serial no Series Displaying in RMA Column");
			excelReader.setCellData(xlfile, "Sheet6", 48, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail: Serial no Series NOT Displaying in RMA Column");
			excelReader.setCellData(xlfile, "Sheet6", 48, 9, resFail);
			return false;
		}
	}
	

	

      
	
	
	
	public boolean checkDisplayRMASerialNumbersRemainingInVoucherOneFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
		   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
		select5thRow_1stColumn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_4thColumn));
		select5thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.clear();
		enter_AQTxt.sendKeys("2");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
			
		String actErrorMessage=errorMessage.getText();
		String expErrorMessage="This transaction will make stock negative.";
		
		Thread.sleep(9000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_11thColumn));
		select5thRow_11thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("9");
		
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField=true;
		String exprmaoutwardQuantityTxtField="2";
		String exprmaoutwardNumberofItemsLabel="0";
		boolean exprmaoutwardTableHeadingRMA=true;
		boolean exprmaoutwardTableHeadingDocumentNo=true;
		boolean exprmaoutwardTableHeadingDocumentDate=true;
		boolean exprmaoutwardOkBtn=true;
		boolean exprmaoutwardCancelBtn=true;
		boolean exprmaoutwardExpandBtn=true;
		
		
		System.out.println("*********************************** checkDisplayRMASerialNumbersRemainingInVoucherOneFifthRow  ************************************");
		
		System.out.println("Error Message                      : "+actErrorMessage                        +" Value Expected : "+ expErrorMessage);
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		
		if(actErrorMessage.equalsIgnoreCase(expErrorMessage) && actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn)
		{	
			System.out.println("Test Pass : data is As Expected");
			return true;
		}
		else
		{
			System.out.println("Test Fail : data is NOT As Expected");
			return false;
		}			
	}


      

	
	      
	
	public boolean checkRMASearchInAnEmptyRowsExitsVoucherOneFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		 rmaoutwardExpandBtn.click();
		
		 Thread.sleep(3000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		
		 // Actual 
		 boolean actsearchRMASearchTxtField=searchRMASearchTxtField.isDisplayed();
		 boolean actsearchRMASearchBtn=searchRMASearchBtn.isDisplayed();
		 String actsearchRMAQuantityTxtField=searchRMAQuantityTxtField.getAttribute("value");
		 String actsearchRMANoOfItemsTxt=searchRMANoOfItemsTxt.getText();
		 boolean actsearchRMAHeaderChkBox=searchRMAHeaderChkBox.isDisplayed();
		 boolean actsearchRMATableHeadingSerialNo=searchRMATableHeadingSerialNo.isDisplayed();
		 boolean actsearchRMATableHeadingDocNo=searchRMATableHeadingDocNo.isDisplayed();
		 boolean actsearchRMATableHeadingDate=searchRMATableHeadingDate.isDisplayed();
		 boolean actsearchRMAOkBtn=searchRMAOkBtn.isDisplayed();
		 boolean actsearchRMACancelBtn=searchRMACancelBtn.isDisplayed();
		 
		 // Expected
		 boolean expsearchRMASearchTxtField=true;
		 boolean expsearchRMASearchBtn=true;
		 String expsearchRMAQuantityTxtField="2";
		 String expsearchRMANoOfItemsTxt="0";
		 boolean expsearchRMAHeaderChkBox=true;
		 boolean expsearchRMATableHeadingSerialNo=true;
		 boolean expsearchRMATableHeadingDocNo=true;
		 boolean expsearchRMATableHeadingDate=true;
		 boolean expsearchRMAOkBtn=true;
		 boolean expsearchRMACancelBtn=true;
		 
		 
		 String actrmaSearchTableBodyIfBlankRows=rmaSearchTableBodyIfBlankRows.getAttribute("data-prevrma");
		 
		 String exprmaSearchTableBodyIfBlankRows="True";
		
		 
		 System.out.println("************************************* checkRMASearchInAnEmptyRowsExitsVoucherOneFifthRow  *********************************");
		 
		 System.out.println("searchRMASearchTxtField       : "+actsearchRMASearchTxtField		+"  Value Expected : "+expsearchRMASearchTxtField);
		 System.out.println("searchRMASearchBtn            : "+actsearchRMASearchBtn			+"  Value Expected : "+expsearchRMASearchBtn);
		 System.out.println("searchRMAQuantityTxtField     : "+actsearchRMAQuantityTxtField		+"  Value Expected : "+expsearchRMAQuantityTxtField);
		 System.out.println("searchRMANoOfItemsTxt         : "+actsearchRMANoOfItemsTxt			+"  Value Expected : "+expsearchRMANoOfItemsTxt);
		 System.out.println("searchRMAHeaderChkBox         : "+actsearchRMAHeaderChkBox			+"  Value Expected : "+expsearchRMAHeaderChkBox);
		 System.out.println("searchRMATableHeadingSerialNo : "+actsearchRMATableHeadingSerialNo +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
		 System.out.println("searchRMATableHeadingDocNo    : "+actsearchRMATableHeadingDocNo	+"  Value Expected : "+expsearchRMATableHeadingDocNo);
		 System.out.println("searchRMATableHeadingDate     : "+actsearchRMATableHeadingDate		+"  Value Expected : "+expsearchRMATableHeadingDate);
		 System.out.println("searchRMAOkBtn   			   : "+actsearchRMAOkBtn				+"  Value Expected : "+expsearchRMAOkBtn);
		 System.out.println("searchRMACancelBtn   		   : "+actsearchRMACancelBtn			+"  Value Expected : "+expsearchRMACancelBtn);
		 System.out.println("rmaSearchTableBodyIfBlankRows : "+actrmaSearchTableBodyIfBlankRows	+"  Value Expected : "+exprmaSearchTableBodyIfBlankRows);
		 
		 
		 if(actrmaSearchTableBodyIfBlankRows.equalsIgnoreCase(exprmaSearchTableBodyIfBlankRows) 
				 
				 && actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
				 && actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
				 && actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
				 && actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
				 && actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
		{
			
			System.out.println("Test Fail : Search Rma Pop Up NOT Displayed");
			return true;
	       
	        
		}
		else
		{
			System.out.println("Test Fail : Search Rma Pop Up NOT Displayed");
			return false;
		}
			
	}
	

	
	
	public boolean checkRMASearchByEditingToLessQtyInVoucherOneFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMACancelBtn));
		searchRMACancelBtn.click();
		 
		Thread.sleep(3000);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardCancelBtn));
		rmaoutwardCancelBtn.click();
	
		Thread.sleep(2000);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fifthRowIndex));
		fifthRowIndex.click();
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
		select4thRow_4thColumn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
	
		Thread.sleep(2000);
		enter_FQTxt.sendKeys(Keys.TAB);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_15thColumn));
		select4thRow_15thColumn.click();
		 
		Thread.sleep(2000);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.SPACE);
		 
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField=true;
		String exprmaoutwardQuantityTxtField="1";
		String exprmaoutwardNumberofItemsLabel="2";
		boolean exprmaoutwardTableHeadingRMA=true;
		boolean exprmaoutwardTableHeadingDocumentNo=true;
		boolean exprmaoutwardTableHeadingDocumentDate=true;
		boolean exprmaoutwardOkBtn=true;
		boolean exprmaoutwardCancelBtn=true;
		boolean exprmaoutwardExpandBtn=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		
		// Actual 
		boolean actsearchRMASearchTxtField=searchRMASearchTxtField.isDisplayed();
		boolean actsearchRMASearchBtn=searchRMASearchBtn.isDisplayed();
		String actsearchRMAQuantityTxtField=searchRMAQuantityTxtField.getAttribute("value");
		String actsearchRMANoOfItemsTxt=searchRMANoOfItemsTxt.getText();
		boolean actsearchRMAHeaderChkBox=searchRMAHeaderChkBox.isDisplayed();
		boolean actsearchRMATableHeadingSerialNo=searchRMATableHeadingSerialNo.isDisplayed();
		boolean actsearchRMATableHeadingDocNo=searchRMATableHeadingDocNo.isDisplayed();
		boolean actsearchRMATableHeadingDate=searchRMATableHeadingDate.isDisplayed();
		boolean actsearchRMAOkBtn=searchRMAOkBtn.isDisplayed();
		boolean actsearchRMACancelBtn=searchRMACancelBtn.isDisplayed();
		
		// Expected
		boolean expsearchRMASearchTxtField=true;
		boolean expsearchRMASearchBtn=true;
		String expsearchRMAQuantityTxtField="1";
		String expsearchRMANoOfItemsTxt="1";
		boolean expsearchRMAHeaderChkBox=true;
		boolean expsearchRMATableHeadingSerialNo=true;
		boolean expsearchRMATableHeadingDocNo=true;
		boolean expsearchRMATableHeadingDate=true;
		boolean expsearchRMAOkBtn=true;
		boolean expsearchRMACancelBtn=true;
		
		ArrayList<String>  expRMA= new ArrayList<String>(); 
			         
		expRMA.add("Sec#Pv8");
		expRMA.add("Sec#Pv9");
		
		ArrayList<String> actRMA= new ArrayList<>();
		
		for (int i = 5; i < 7; i++)
		{
			WebElement a=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
			Thread.sleep(2000);
			actRMA.add(a.getText());
		}
			        
		System.out.println("actRMA"+actRMA);
		System.out.println("expRMA"+expRMA);
		
		boolean rma=actRMA.equals(expRMA);
		
		
		System.out.println("*********************************** checkRMASearchByEditingToLessQtyInVoucherOneFourthRow  ************************************");
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		System.out.println("searchRMASearchTxtField           : "+actsearchRMASearchTxtField			  +"  Value Expected : "+expsearchRMASearchTxtField);
		System.out.println("searchRMASearchBtn          	  : "+actsearchRMASearchBtn					  +"  Value Expected : "+expsearchRMASearchBtn);
		System.out.println("searchRMAQuantityTxtField    	  : "+actsearchRMAQuantityTxtField			  +"  Value Expected : "+expsearchRMAQuantityTxtField);
		System.out.println("searchRMANoOfItemsTxt        	  : "+actsearchRMANoOfItemsTxt			      +"  Value Expected : "+expsearchRMANoOfItemsTxt);
		System.out.println("searchRMAHeaderChkBox         	  : "+actsearchRMAHeaderChkBox		      	  +"  Value Expected : "+expsearchRMAHeaderChkBox);
		System.out.println("searchRMATableHeadingSerialNo 	  : "+actsearchRMATableHeadingSerialNo        +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
		System.out.println("searchRMATableHeadingDocNo        : "+actsearchRMATableHeadingDocNo	          +"  Value Expected : "+expsearchRMATableHeadingDocNo);
		System.out.println("searchRMATableHeadingDate         : "+actsearchRMATableHeadingDate	  	      +"  Value Expected : "+expsearchRMATableHeadingDate);
		System.out.println("searchRMAOkBtn   			      : "+actsearchRMAOkBtn				          +"  Value Expected : "+expsearchRMAOkBtn);
		System.out.println("searchRMACancelBtn   		      : "+actsearchRMACancelBtn			          +"  Value Expected : "+expsearchRMACancelBtn);
		
		System.out.println("rma                               : "+rma                                     +"  Value Expected : "+"True");
					
		if(rma==true
				
				&& actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn
				
				&& actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
				&& actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
				&& actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
				&& actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
				&& actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			return false;
		}
	}
				
		 
	
	
	
	
		
		
		
	
	public boolean checkSavingSalesInvoiceVoucherWithRMA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		 Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
			
			
		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
		
		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		expBillNewReference="320.00";
		expBillAmtAdjAgainstNewRefInOtherVouchers="0.00";
		expBillTransactionCurrency="405.00";
		expBillBaseCurrency="405.00";
		expBillLocalCurrency="28.35";
		
		expBillBalanceNewRefAmount="320.00";
		
		expBillBreakUpByTagDepartment="INDIA";
		expBillBreakUpByTagBillCurrency="405";
		expBillBreakUpByTagBaseCurrency="405.00";
		
		
		expBillBreakUpByTagLocalCurrency="28.35";
		expBillAmtAdjustedInTransactionCurrency="320";
		expBillBalanceAmtToBeAdjustedInTransactionCurrency="85.00";
			
		
		System.out.println("*********************************** checkSavingSalesInvoiceVoucherWithRMA  ************************************");
		
		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		//pick button is click
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		
		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
		
		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		expBillNewReferencePick="405.00";
		expBillAmtAdjAgainstNewRefInOtherVouchersPick="0.00";
		expBillTransactionCurrencyPick="405.00";
		expBillBaseCurrencyPick="405.00";
		expBillLocalCurrencyPick="28.35";
		
		expBillBalanceNewRefAmountPick="405.00";
		
		expBillBreakUpByTagDepartmentPick="INDIA";
		expBillBreakUpByTagBillCurrencyPick="405";
		expBillBreakUpByTagBaseCurrencyPick="405.00";
		
		
		expBillBreakUpByTagLocalCurrencyPick="28.35";
		expBillAmtAdjustedInTransactionCurrencyPick="405";
		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick="0.00";
		
		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true &&
				
				actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
				
				
				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{	
			
			Thread.sleep(3000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
				
			return true;
				
		}
		else
		{
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			return false;	
		}
	}


	
	public boolean checkUpdateRMANumbersByDecreaseQtyInVoucherOne() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		documentNumberTxt.sendKeys(Keys.BACK_SPACE);
		
		
		int docnocount=docnoListCount.size();
		
		System.err.println(docnocount);
			
		for(int i=0 ; i < docnocount ;i++)
		{
			String data=docnoListCount.get(i).getAttribute("data-svoucherno");
			
			if(data.equalsIgnoreCase("1"))
			{
				docnoListCount.get(i).click();
				
				break;
			}
		}
			
		documentNumberTxt.sendKeys(Keys.TAB);	
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("3");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_15thColumn));
		select3rdRow_15thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.SPACE);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField=true;
		String exprmaoutwardQuantityTxtField="3";
		String exprmaoutwardNumberofItemsLabel="5";
		boolean exprmaoutwardTableHeadingRMA=true;
		boolean exprmaoutwardTableHeadingDocumentNo=true;
		boolean exprmaoutwardTableHeadingDocumentDate=true;
		boolean exprmaoutwardOkBtn=true;
		boolean exprmaoutwardCancelBtn=true;
		boolean exprmaoutwardExpandBtn=true;
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		// Actual 
		boolean actsearchRMASearchTxtField=searchRMASearchTxtField.isDisplayed();
		boolean actsearchRMASearchBtn=searchRMASearchBtn.isDisplayed();
		String actsearchRMAQuantityTxtField=searchRMAQuantityTxtField.getAttribute("value");
		String actsearchRMANoOfItemsTxt=searchRMANoOfItemsTxt.getText();
		boolean actsearchRMAHeaderChkBox=searchRMAHeaderChkBox.isDisplayed();
		boolean actsearchRMATableHeadingSerialNo=searchRMATableHeadingSerialNo.isDisplayed();
		boolean actsearchRMATableHeadingDocNo=searchRMATableHeadingDocNo.isDisplayed();
		boolean actsearchRMATableHeadingDate=searchRMATableHeadingDate.isDisplayed();
		boolean actsearchRMAOkBtn=searchRMAOkBtn.isDisplayed();
		boolean actsearchRMACancelBtn=searchRMACancelBtn.isDisplayed();
		
		// Expected
		boolean expsearchRMASearchTxtField=true;
		boolean expsearchRMASearchBtn=true;
		String expsearchRMAQuantityTxtField="3";
		String expsearchRMANoOfItemsTxt="3";
		boolean expsearchRMAHeaderChkBox=true;
		boolean expsearchRMATableHeadingSerialNo=true;
		boolean expsearchRMATableHeadingDocNo=true;
		boolean expsearchRMATableHeadingDate=true;
		boolean expsearchRMAOkBtn=true;
		boolean expsearchRMACancelBtn=true;
		
		ArrayList<String>  expRMA= new ArrayList<String>(); 
		
		expRMA.add("Sec#Pv4");
		expRMA.add("Sec#Pv5");
		expRMA.add("Sec#Pv6");
		expRMA.add("Sec#Pv7");
		
		ArrayList<String> actRMA= new ArrayList<>();
		
		for (int i = 1; i < 5; i++)
		{
			WebElement a=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
			Thread.sleep(2000);
			actRMA.add(a.getText());
		}
				        
		WebElement actrma9=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr[6]/td[2]"));
		
		String actRMA9=actrma9.getText();
		String expRMA9="Sec#Pv9";
		
		System.out.println("actRMA  : "+actRMA);
		System.out.println("expRMA  : "+expRMA);
		
		// Actual
		boolean rma=actRMA.equals(expRMA);
		boolean actsearchRMA1ChkBox=searchRMA1ChkBox.isSelected();
		boolean actsearchRMA2ChkBox=searchRMA2ChkBox.isSelected();
		boolean actsearchRMA3ChkBox=searchRMA3ChkBox.isSelected();
		boolean actsearchRMA4ChkBox=searchRMA4ChkBox.isSelected();
		boolean actsearchRMA6ChkBox=searchRMA6ChkBox.isSelected();
		
		// Expected
		boolean expsearchRMA1ChkBox=true;
		boolean expsearchRMA2ChkBox=true;
		boolean expsearchRMA3ChkBox=true;
		boolean expsearchRMA4ChkBox=false;
		boolean expsearchRMA6ChkBox=false;
		
		
		
		System.out.println("*********************************** checkUpdateRMANumbersByDecreaseQtyInVoucherOne  ************************************");
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		System.out.println("searchRMASearchTxtField           : "+actsearchRMASearchTxtField			  +"  Value Expected : "+expsearchRMASearchTxtField);
		System.out.println("searchRMASearchBtn          	  : "+actsearchRMASearchBtn					  +"  Value Expected : "+expsearchRMASearchBtn);
		System.out.println("searchRMAQuantityTxtField    	  : "+actsearchRMAQuantityTxtField			  +"  Value Expected : "+expsearchRMAQuantityTxtField);
		System.out.println("searchRMANoOfItemsTxt        	  : "+actsearchRMANoOfItemsTxt			      +"  Value Expected : "+expsearchRMANoOfItemsTxt);
		System.out.println("searchRMAHeaderChkBox         	  : "+actsearchRMAHeaderChkBox		      	  +"  Value Expected : "+expsearchRMAHeaderChkBox);
		System.out.println("searchRMATableHeadingSerialNo 	  : "+actsearchRMATableHeadingSerialNo        +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
		System.out.println("searchRMATableHeadingDocNo        : "+actsearchRMATableHeadingDocNo	          +"  Value Expected : "+expsearchRMATableHeadingDocNo);
		System.out.println("searchRMATableHeadingDate         : "+actsearchRMATableHeadingDate	  	      +"  Value Expected : "+expsearchRMATableHeadingDate);
		System.out.println("searchRMAOkBtn   			      : "+actsearchRMAOkBtn				          +"  Value Expected : "+expsearchRMAOkBtn);
		System.out.println("searchRMACancelBtn   		      : "+actsearchRMACancelBtn			          +"  Value Expected : "+expsearchRMACancelBtn);
		
		System.out.println("rma                               : "+rma                                     +"  Value Expected : "+"True");
		System.out.println("RMA9                              : "+actRMA9                                 +"  Value Expected : "+expRMA9);
		
		System.out.println("searchRMA1ChkBox                  : "+actsearchRMA1ChkBox                     +"  Value Expected : "+expsearchRMA1ChkBox);
		System.out.println("searchRMA2ChkBox                  : "+actsearchRMA2ChkBox                     +"  Value Expected : "+expsearchRMA2ChkBox);
		System.out.println("searchRMA3ChkBox                  : "+actsearchRMA3ChkBox                     +"  Value Expected : "+expsearchRMA3ChkBox);
		System.out.println("searchRMA4ChkBox                  : "+actsearchRMA4ChkBox                     +"  Value Expected : "+expsearchRMA4ChkBox);
		System.out.println("searchRMA6ChkBox                  : "+actsearchRMA6ChkBox                     +"  Value Expected : "+expsearchRMA6ChkBox);
		
		
		
		
		if(rma==true && actRMA9.equalsIgnoreCase(expRMA9) && actsearchRMA1ChkBox==expsearchRMA1ChkBox  && actsearchRMA2ChkBox==expsearchRMA2ChkBox 
				&& actsearchRMA3ChkBox==expsearchRMA3ChkBox && actsearchRMA4ChkBox==expsearchRMA4ChkBox && actsearchRMA6ChkBox==expsearchRMA6ChkBox
				
				&& actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn
				
				&& actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
				&& actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
				&& actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
				&& actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
				&& actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			return false;
		}
	}
	
	

	
	
	public boolean checkUpdateRMANumbersByIncreasingQtyInVoucherOne() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		    
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
		select4thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("2");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);
			 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_15thColumn));
		select4thRow_15thColumn.click();
			 
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField=true;
		String exprmaoutwardQuantityTxtField="2";
		String exprmaoutwardNumberofItemsLabel="2";
		boolean exprmaoutwardTableHeadingRMA=true;
		boolean exprmaoutwardTableHeadingDocumentNo=true;
		boolean exprmaoutwardTableHeadingDocumentDate=true;
		boolean exprmaoutwardOkBtn=true;
		boolean exprmaoutwardCancelBtn=true;
		boolean exprmaoutwardExpandBtn=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		// Actual 
		boolean actsearchRMASearchTxtField=searchRMASearchTxtField.isDisplayed();
		boolean actsearchRMASearchBtn=searchRMASearchBtn.isDisplayed();
		String actsearchRMAQuantityTxtField=searchRMAQuantityTxtField.getAttribute("value");
		String actsearchRMANoOfItemsTxt=searchRMANoOfItemsTxt.getText();
		boolean actsearchRMAHeaderChkBox=searchRMAHeaderChkBox.isDisplayed();
		boolean actsearchRMATableHeadingSerialNo=searchRMATableHeadingSerialNo.isDisplayed();
		boolean actsearchRMATableHeadingDocNo=searchRMATableHeadingDocNo.isDisplayed();
		boolean actsearchRMATableHeadingDate=searchRMATableHeadingDate.isDisplayed();
		boolean actsearchRMAOkBtn=searchRMAOkBtn.isDisplayed();
		boolean actsearchRMACancelBtn=searchRMACancelBtn.isDisplayed();
		
		// Expected
		boolean expsearchRMASearchTxtField=true;
		boolean expsearchRMASearchBtn=true;
		String expsearchRMAQuantityTxtField="2";
		String expsearchRMANoOfItemsTxt="2";
		boolean expsearchRMAHeaderChkBox=true;
		boolean expsearchRMATableHeadingSerialNo=true;
		boolean expsearchRMATableHeadingDocNo=true;
		boolean expsearchRMATableHeadingDate=true;
		boolean expsearchRMAOkBtn=true;
		boolean expsearchRMACancelBtn=true;
		
		ArrayList<String>  expRMA= new ArrayList<String>(); 
		
		expRMA.add("Sec#Pv8");
		expRMA.add("Sec#Pv9");
		
		
		ArrayList<String> actRMA= new ArrayList<>();
		
		for (int i = 5; i < 7; i++)
		{
			WebElement a=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
			Thread.sleep(2000);
			actRMA.add(a.getText());
		}
		
		WebElement actrma7=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr[4]/td[2]"));
		
		System.out.println("actrma7 : " + actrma7.getText());
		
		String actRMA7=actrma7.getText();
		String expRMA7="Sec#Pv7";
		
		System.out.println("actRMA  : "+actRMA);
		System.out.println("expRMA  : "+expRMA);
		
		// Actual
		boolean rma=actRMA.equals(expRMA);
		boolean actsearchRMA4ChkBox=searchRMA4ChkBox.isSelected();
		boolean actsearchRMA5ChkBox=searchRMA5ChkBox.isSelected();
		boolean actsearchRMA6ChkBox=searchRMA6ChkBox.isSelected();
		
		// Expected
		boolean expsearchRMA4ChkBox=false;
		boolean expsearchRMA5ChkBox=true;
		boolean expsearchRMA6ChkBox=true;
		
		
		System.out.println("*********************************** checkUpdateRMANumbersByIncreasingQtyInVoucherOne  ************************************");
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		System.out.println("searchRMASearchTxtField           : "+actsearchRMASearchTxtField			  +"  Value Expected : "+expsearchRMASearchTxtField);
		System.out.println("searchRMASearchBtn          	  : "+actsearchRMASearchBtn					  +"  Value Expected : "+expsearchRMASearchBtn);
		System.out.println("searchRMAQuantityTxtField    	  : "+actsearchRMAQuantityTxtField			  +"  Value Expected : "+expsearchRMAQuantityTxtField);
		System.out.println("searchRMANoOfItemsTxt        	  : "+actsearchRMANoOfItemsTxt			      +"  Value Expected : "+expsearchRMANoOfItemsTxt);
		System.out.println("searchRMAHeaderChkBox         	  : "+actsearchRMAHeaderChkBox		      	  +"  Value Expected : "+expsearchRMAHeaderChkBox);
		System.out.println("searchRMATableHeadingSerialNo 	  : "+actsearchRMATableHeadingSerialNo        +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
		System.out.println("searchRMATableHeadingDocNo        : "+actsearchRMATableHeadingDocNo	          +"  Value Expected : "+expsearchRMATableHeadingDocNo);
		System.out.println("searchRMATableHeadingDate         : "+actsearchRMATableHeadingDate	  	      +"  Value Expected : "+expsearchRMATableHeadingDate);
		System.out.println("searchRMAOkBtn   			      : "+actsearchRMAOkBtn				          +"  Value Expected : "+expsearchRMAOkBtn);
		System.out.println("searchRMACancelBtn   		      : "+actsearchRMACancelBtn			          +"  Value Expected : "+expsearchRMACancelBtn);
		
		System.out.println("rma                               : "+rma                                     +"  Value Expected : "+"True");
		System.out.println("RMA7                              : "+actRMA7                                 +"  Value Expected : "+expRMA7);
		
		System.out.println("searchRMA4ChkBox                  : "+actsearchRMA4ChkBox                     +"  Value Expected : "+expsearchRMA4ChkBox);
		System.out.println("searchRMA5ChkBox                  : "+actsearchRMA5ChkBox                     +"  Value Expected : "+expsearchRMA5ChkBox);
		System.out.println("searchRMA6ChkBox                  : "+actsearchRMA6ChkBox                     +"  Value Expected : "+expsearchRMA6ChkBox);
		
		if(rma==true && actRMA7.equalsIgnoreCase(expRMA7) && actsearchRMA4ChkBox==expsearchRMA4ChkBox && actsearchRMA5ChkBox==expsearchRMA5ChkBox
				&& actsearchRMA6ChkBox==expsearchRMA6ChkBox
				
				&& actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn
				
				&& actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
				&& actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
				&& actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
				&& actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
				&& actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			return false;
		}
	}	
	
	
	
	public boolean checkSavingSalesInvoiceVoucherWithUpadtedRMA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		
		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
		
		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		expBillNewReference="395.00";
		expBillAmtAdjAgainstNewRefInOtherVouchers="0.00";
		expBillTransactionCurrency="395.00";
		expBillBaseCurrency="395.00";
		expBillLocalCurrency="27.65";
		
		expBillBalanceNewRefAmount="395.00";
		
		expBillBreakUpByTagDepartment="INDIA";
		expBillBreakUpByTagBillCurrency="395";
		expBillBreakUpByTagBaseCurrency="395.00";
		
		
		expBillBreakUpByTagLocalCurrency="27.65";
		expBillAmtAdjustedInTransactionCurrency="395";
		expBillBalanceAmtToBeAdjustedInTransactionCurrency="0.00";
		
			
		System.out.println("*********************************** checkSavingSalesInvoiceVoucherWithUpadtedRMA  ************************************");
				
		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		//pick button is click
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		
		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
		
		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		expBillNewReferencePick="395.00";
		expBillAmtAdjAgainstNewRefInOtherVouchersPick="0.00";
		expBillTransactionCurrencyPick="395.00";
		expBillBaseCurrencyPick="395.00";
		expBillLocalCurrencyPick="27.65";
		
		expBillBalanceNewRefAmountPick="395.00";
		
		expBillBreakUpByTagDepartmentPick="INDIA";
		expBillBreakUpByTagBillCurrencyPick="395";
		expBillBreakUpByTagBaseCurrencyPick="395.00";
		
		
		expBillBreakUpByTagLocalCurrencyPick="27.65";
		expBillAmtAdjustedInTransactionCurrencyPick="395";
		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick="0.00";
			
		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true &&
				
				actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
				
				
				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			new_CloseBtn.click();
			
			return true;
				
		}
		else
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			new_CloseBtn.click();
				
			return false;	
		}
	}


	
		
		
	public boolean checkBatchAndBinColumnSalesInvoiceVoucherByChangingWareHouse() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.END);
		wareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		boolean actRmaVoucherColumnRow1=select1stRow_14thColumn.getText().isEmpty();
		boolean actRmaVoucherColumnRow2=select2ndRow_14thColumn.getText().isEmpty();
		
		boolean expRmaVoucherColumnRow1=true;
		boolean expRmaVoucherColumnRow2=true;
		
		System.out.println("*********************************** checkBatchAndBinColumnSalesInvoiceVoucherByChangingWareHouse  ************************************");
		
		System.out.println("RmaVoucherColumnRow1 	   :  "+actRmaVoucherColumnRow1     +" value Expected : "+expRmaVoucherColumnRow1);
		System.out.println("RmaVoucherColumnRow2       :  "+actRmaVoucherColumnRow2	    +" value Expected : "+expRmaVoucherColumnRow2);
					
		if(actRmaVoucherColumnRow1==expRmaVoucherColumnRow1 && actRmaVoucherColumnRow2==expRmaVoucherColumnRow2)
		{
			System.out.println("Test Pass : Qty And no Of items Are As Expected");
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty And no Of items Are NOT As Expected");
			return false;
		}
	}
	


	
	public boolean checkSavingSalesInvoiceVoucherTwoByInputingBatchItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();  
			
		getWaitForAlert();
		   
		Thread.sleep(2000);
		
		getAlert().accept();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		documentNumberTxt.sendKeys(Keys.BACK_SPACE);
		
		int docnocount=docnoListCount.size();
		
		System.err.println(docnocount);
			
		for(int i=0 ; i < docnocount ;i++)
		{
			String data=docnoListCount.get(i).getAttribute("data-svoucherno");
			
			if(data.equalsIgnoreCase("2"))
			{
				docnoListCount.get(i).click();
				
				break;
			}
		}
			
		documentNumberTxt.sendKeys(Keys.TAB);	
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.clear();
		enter_AQTxt.sendKeys("2");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QuantityToRelease));
		enter_QuantityToRelease.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("9");
		
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("*********************************** checkSavingSalesInvoiceVoucherTwoByInputingBatchItem  ************************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Voucher Saved Successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			excelReader.setCellData(xlfile, "Sheet6", 50, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher NOT Saved Successfully");
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			excelReader.setCellData(xlfile, "Sheet6", 50, 9, resFail);
			return false;
		}
	}



	
	public boolean checkCopyAndPasteFromClipboardOptionsAndSaveVouceThreeInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		  
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		    

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
			 
			 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyToClipBoardOption));
		copyToClipBoardOption.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteFromClipBoardOption));
		pasteFromClipBoardOption.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("1");
		enter_FQTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_15thColumn));
		select2ndRow_15thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
		searchRMAOkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
		rmaoutwardOkBtn.click();
		
		Thread.sleep(2000);
			 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_13thColumn));
		select3rdRow_13thColumn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("*********************************** checkCopyAndPasteFromClipboardOptionsAndSaveVouceThreeInSalesInvoice  ************************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Voucher Saved Successfully");
			
			excelReader.setCellData(xlfile, "Sheet6", 50, 9, resPass);
			return true;
		}
		else	
		{
			System.out.println("Test Fail : Voucher NOT Saved Successfully");
			
			excelReader.setCellData(xlfile, "Sheet6", 50, 9, resFail);
			return false;
		}
	}


	
	public boolean checkEntryPageDeleteOptionOnPreviousButtonInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
		
		try
		{
		
			getWaitForAlert();
			
			String actAlert=getAlert().getText();
			
			String expAlert="Are you sure that you want to delete the Selected Voucher?";
			
			getAlert().accept();
			
			boolean deleteMessage=checkEntryPageDeleteMessage();
			
			System.out.println("************************************* checkEntryPageDeleteOptionOnPreviousButtonInSalesInvoice  *********************************");
	        
	        System.out.println("Alert          : "+actAlert         +"  Value Expected : "+expAlert);
			
			System.out.println("error Message  :  "+deleteMessage +" value Expected : "+"TRUE");
			
			if(actAlert.equalsIgnoreCase(expAlert) && deleteMessage==true)
			{
				
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Deleted");
				
				return false;
			}
		}
		catch(Exception e)
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplay.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			  
			Thread.sleep(5000);
		
			LoginPage lp=new LoginPage(getDriver()); 
				
			String unamelt="su";
						      
			String pawslt="su";
			
			lp.enterUserName(unamelt);
			
			lp.enterPassword(pawslt);
			
			lp.clickOnSignInBtn();
			
			checkRefreshPopOnlogin();
			//checkPopUpWindow();

			Thread.sleep(5000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
			finacinalsMenu.click();
		 		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
		 		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
			financialTransactionSalesMenu.click();
		 		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
			salesInvoicesVoucher.click();
		 		
			Thread.sleep(4000);
		 		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			checkUserFriendlyMessage();
		 		
			Thread.sleep(5000);
		         
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			
			String actAlert=getAlert().getText();
			
			String expAlert="Are you sure that you want to delete the Selected Voucher?";
			
			getAlert().accept();
			
			boolean deleteMessage=checkEntryPageDeleteMessage();
			
			System.out.println("************************************* checkEntryPageDeleteOptionOnPreviousButtonInSalesInvoice  *********************************");
	        
	        System.out.println("Alert          : "+actAlert         +"  Value Expected : "+expAlert);
			
			System.out.println("error Message  :  "+deleteMessage +" value Expected : "+"TRUE");
			
			if(actAlert.equalsIgnoreCase(expAlert) && deleteMessage==true)
			{
				
				return false;
			}
			else
			{
				System.out.println("Test Fail : Not Deleted");
				
				return false;
			}
		}
		
	}

	
	
		

	
	public boolean checkEntryPageSuspendOptionOnPreviousButtonInSalesInvoice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesuspendStatusRow1));
		
		String actSuspendedStatus=salesInvoicesuspendStatusRow1.getText();
		
		String expSuspendedStatus="true";
		
		System.out.println("*********************************** checkEntryPageSuspendOptionOnPreviousButtonInSalesInvoice  ************************************");
		
		
		System.out.println("SavingMessage  	  :  "+savingMessage 		   +" Value Expected : "+"TRUE");
		
		System.out.println("SuspendedStatus   : "+actSuspendedStatus       +" value Expected : "+expSuspendedStatus);
		
		if(savingMessage==true && actSuspendedStatus.equalsIgnoreCase(expSuspendedStatus))
		{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
				
			return true;
			
		}
		else
		{
			System.out.println("Test Fail : Voucher NOT Suspended Successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			
			excelReader.setCellData(xlfile, "Sheet6", 50, 9, resFail);
			return false;
		}
	}


	
	public boolean checkSalesOrderVoucherNewHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
    	// Actual
		boolean actHomePageNewBtn                  =newBtn.isDisplayed();
		boolean actHomePageEditBtn       		   =editBtn.isDisplayed();
		boolean actHomePagePrintBtn       		   =printBtn.isDisplayed();
		boolean actHomePageDeleteBtn     		   =deleteBtn.isDisplayed();
		//boolean actHomePageAuthorizeBtn            =authorizeBtn.isDisplayed();
		boolean actHomePageSuspendBtn   		   =suspendBtn.isDisplayed();
		//boolean actHomePageRejectBtn     		   =rejectBtn.isDisplayed();
		boolean actHomePagePrintBarcodeBtn		   =printBarCodeBtn.isDisplayed();
		boolean actHomePageExportXMLBtn 	 	   =exportToXMLBtn.isDisplayed();
		boolean actHomePageSettingsBtn  		   =settingsBtn.isDisplayed();
		boolean actHomePageCloseBtn     		   =homeCloseBtn.isDisplayed();
		boolean actHomePageGridCheckBox   		   =grid_HeaderChkBox.isDisplayed();
		boolean actHomePageSortingBtn    		   =sortingBtn.isDisplayed();
		boolean actHomePageCreateViewBn   		   =createViewBtn.isDisplayed();
		boolean actHomePageCustomizeBtn   		   =customizeBtn.isDisplayed();
		boolean actHomePageFilterBtn  		       =filterBtn.isDisplayed();
		boolean actHomePageRefreshBtn    		   =refreshBtn.isDisplayed();
		boolean actHomePageOptionsBtn     		   =optionsBtn.isDisplayed();
		boolean actHomePageExportBtn     		   =exportBtn.isDisplayed();
		boolean acthomePageAllVouchersView         =homePageAllVouchersView.isDisplayed();
		boolean acthomepagePendingSalesQuotations  =homepagePendingSalesQuotations.isDisplayed();
		
		// Expected
		boolean expHomePageNewBtn        			 =true;
		boolean expHomePageEditBtn       			 =true;
		boolean expHomePagePrintBtn      			 =true;
		boolean expHomePageDeleteBtn     			 =true;
		//boolean expHomePageAuthorizeBtn  			 =true;
		boolean expHomePageSuspendBtn    			 =true;
		//boolean expHomePageRejectBtn     			 =true;
		boolean expHomePagePrintBarcodeBtn			 =true;
		boolean expHomePageExportXMLBtn  			 =true;
		boolean expHomePageSettingsBtn   			 =true;
		boolean expHomePageCloseBtn      			 =true;
		boolean expHomePageGridCheckBox  			 =true;
		boolean expHomePageSortingBtn    			 =true;
		boolean expHomePageCreateViewBn  			 =true;
		boolean expHomePageCustomizeBtn   	 		 =true;
		boolean expHomePageFilterBtn      		     =true;
		boolean expHomePageRefreshBtn    			 =true;
		boolean expHomePageOptionsBtn   			 =true;
		boolean expHomePageExportBtn     			 =true;
		boolean exphomePageAllVouchersView        	 =true;
		boolean exphomepagePendingSalesQuotations 	 =true;
		
		System.out.println("****************************** checkSalesOrderVoucherNewHomePage  ********************************************");
		System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn      				+"  Value Expected : "+expHomePageNewBtn);
		System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn					+"  Value Expected : "+expHomePageEditBtn);
		System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn					+"  Value Expected : "+expHomePagePrintBtn);
		System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn				+"  Value Expected : "+expHomePageDeleteBtn);
		//System.out.println("Home Page Authorize Btn Value Actual     :"+actHomePageAuthorizeBtn				+"  Value Expected : "+expHomePageAuthorizeBtn);
		System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn				+"  Value Expected : "+expHomePageSuspendBtn);
		//System.out.println("Home Page Reject Btn Value Actual        :"+actHomePageRejectBtn				+"  Value Expected : "+expHomePageRejectBtn);
		System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn			+"  Value Expected : "+expHomePagePrintBarcodeBtn);
		System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn				+"  Value Expected : "+expHomePageExportXMLBtn);
		System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn				+"  Value Expected : "+expHomePageSettingsBtn);
		System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn					+"  Value Expected : "+expHomePageCloseBtn);
		System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox				+"  Value Expected : "+expHomePageGridCheckBox);
		System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn				+"  Value Expected : "+expHomePageSortingBtn);
		System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn				+"  Value Expected : "+expHomePageCreateViewBn);
		System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn				+"  Value Expected : "+expHomePageCustomizeBtn);
		System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn				+"  Value Expected : "+expHomePageFilterBtn);
		System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn				+"  Value Expected : "+expHomePageRefreshBtn);
		System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn				+"  Value Expected : "+expHomePageOptionsBtn);
		System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn				+"  Value Expected : "+expHomePageExportBtn);
		System.out.println("Home Page All View Value Actual          :"+acthomePageAllVouchersView			+"  Value Expected : "+exphomePageAllVouchersView);
		System.out.println("Home Page Pending SO View Value Actual   :"+acthomepagePendingSalesQuotations 	+"  Value Expected : "+exphomepagePendingSalesQuotations);
		
    	if(actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
				&& actHomePageDeleteBtn==expHomePageDeleteBtn /*&& actHomePageAuthorizeBtn==expHomePageAuthorizeBtn*/ && actHomePageSuspendBtn==expHomePageSuspendBtn 
				/*&& actHomePageRejectBtn==expHomePageRejectBtn*/ && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
				&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
				&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
				&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
				&& actHomePageExportBtn==expHomePageExportBtn && acthomePageAllVouchersView==exphomePageAllVouchersView
				&& acthomepagePendingSalesQuotations==exphomepagePendingSalesQuotations)
		{
				System.out.println("Test Pass : HomeScreen Options Are Displayed");
				excelReader.setCellData(xlfile, "Sheet6", 270, 9, resPass);
				return true;
		}
			else
		{
				System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
				excelReader.setCellData(xlfile, "Sheet6", 270, 9, resFail);
				return false;
		}
	 }
	

	
	public boolean checkSalesOrderVoucherNewEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
		
		// Actual
		boolean actfreeFlowBtn    				  =freeFlowBtn.isDisplayed();
		boolean actEntryPageJumpToHeaderSectionBtn=jumpToHeaderSectionBtn.isDisplayed();
		boolean actEntryPageJumpToBodySectionBtn  =jumpToBodySectionBtn.isDisplayed();
		boolean actEntryPageJumpToFooterBtn       =jumpToFooterBtn.isDisplayed();
		boolean actEntryPageNewBtn                =new_newBtn.isDisplayed();
		boolean actEntryPageSaveBtn               =saveBtn.isDisplayed();
		boolean actEntryPagePreviousBtn           =previousBtn.isDisplayed();
		boolean actEntryPageNextBtn               =nextBtn.isDisplayed();
		boolean actEntryPagePrintBtn              =new_PrintBtn.isDisplayed();
		boolean actEntryPageSuspendBtn            =new_SuspendBtn.isDisplayed();
		boolean actEntryPageCloseBtn              =new_CloseBtn.isDisplayed();
		boolean actEntryPageToggleBtn             =toggleBtn.isDisplayed();

		// Expected
		boolean expfreeFlowBtn   				  =true;
		boolean expEntryPageJumpToHeaderSectionBtn=true;
		boolean expEntryPageJumpToBodySectionBtn  =true;
		boolean expEntryPageJumpToFooterBtn       =true;
		boolean expEntryPageNewBtn	              =true;
		boolean expEntryPageSaveBtn               =true;
		boolean expEntryPagePreviousBtn           =true;
		boolean expEntryPageNextBtn               =true;
		boolean expEntryPagePrintBtn              =true;
		boolean expEntryPageSuspendBtn            =true;
		boolean expEntryPageCloseBtn              =true;
		boolean expEntryPageToggleBtn             =true;

		
		
		System.out.println("************************************* checkSalesOrderVoucherNewEntryPage ********************************************");
		
		System.out.println("Entry Page RC Free Flow Value Actual     :"+actfreeFlowBtn                      +"  Value Expected : "+expfreeFlowBtn);
		System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn  +"  Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
		System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn	+"  Value Expected : "+expEntryPageJumpToBodySectionBtn);
		System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn			+"  Value Expected : "+expEntryPageJumpToFooterBtn);
		System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn					+"  Value Expected : "+expEntryPageNewBtn);
		System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn					+"  Value Expected : "+expEntryPageSaveBtn);
		System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn				+"  Value Expected : "+expEntryPagePreviousBtn);
		System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn					+"  Value Expected : "+expEntryPageNextBtn);
		System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn				+"  Value Expected : "+expEntryPagePrintBtn);
		System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn				+"  Value Expected : "+expEntryPageSuspendBtn);
		System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn				+"  Value Expected : "+expEntryPageCloseBtn);
		System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn				+"  Value Expected : "+expEntryPageToggleBtn);
		
		
		if(actfreeFlowBtn==expfreeFlowBtn && actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
				&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
				&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
				&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
				&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn )
		{
			System.out.println("Test Pass : entry Page Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 271, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 271, 9, resFail);
			return false;
		}
	}

	
	public boolean checkSalesOrderVoucherNewEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
		// Actual
		boolean actDocumentNumberTxt         =documentNumberTxt.isDisplayed();
		boolean actDateTxt                   =dateTxt.isDisplayed();
		boolean actCustomerAccount           =customerAccountTxt.isDisplayed();
		boolean actsalesOrder_NarrationTxt   =salesOrder_NarrationTxt.isDisplayed();
		
		// Expected
		boolean expDocumentNumberTxt         =true;
		boolean expDateTxt                   =true;
		boolean expCustomerAccount           =true;
		boolean expsalesOrder_NarrationTxt   =true;
		
		
		System.out.println("************************************* checkSalesOrderVoucherNewEntryPageHeaderFields  ********************************************");
		System.out.println("DocumentNumberTxt   	 :"+actDocumentNumberTxt		+" Value Expected : "+expDocumentNumberTxt);
		System.out.println("DateTxt   				 :"+actDateTxt					+" Value Expected : "+expDateTxt);
		System.out.println("CustomerAccount  		 :"+actCustomerAccount			+" Value Expected : "+expCustomerAccount);
		System.out.println("salesOrder_NarrationTxt  :"+actsalesOrder_NarrationTxt	+" Value Expected : "+expsalesOrder_NarrationTxt);
		
		
		if(actDocumentNumberTxt==expDocumentNumberTxt && actDateTxt==expDateTxt 
				 && actCustomerAccount==expCustomerAccount && actsalesOrder_NarrationTxt==expsalesOrder_NarrationTxt)     
		{
			System.out.println("Test Pass : entry Page Header Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 272, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 272, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkSalesOrderVoucherNewEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherBodyItemName));
		
		// Actual
		boolean actsalesOrderWarehouseLabel       =salesOrderWarehouseLabel.isDisplayed();
		boolean actvoucherBodyItemName            =voucherBodyItemName.isDisplayed();
		boolean actvoucherBodyUnitsName           =voucherBodyUnitsName.isDisplayed();
		boolean actvoucherBodyAQName   			  =voucherBodyAQName.isDisplayed();
		boolean actvoucherBodyFQName        	  =voucherBodyFQName.isDisplayed();
		boolean actvoucherBodyRDName              =voucherBodyRDName.isDisplayed();
		
		
				
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", voucherBodyGrossName);

		
		// Actual
		boolean actsalesOrderQtyLabel       			    =salesOrderQtyLabel.isDisplayed();
		boolean actvoucherBodyReserveColumnName             =voucherBodyReserveColumnName.isDisplayed();
		boolean actvoucherBodyLinkSalesQuotationsColumnName =voucherBodyLinkSalesQuotationsColumnName.isDisplayed();
		boolean actvoucherBodyRateName   					=voucherBodyRateName.isDisplayed();
		boolean actvoucherBodyGrossName         			=voucherBodyGrossName.isDisplayed();
		
		
		// Expected
		boolean expsalesOrderWarehouseLabel       			=true;
		boolean expvoucherBodyItemName            			=true;
		boolean expvoucherBodyUnitsName           			=true;
		boolean expvoucherBodyAQName   			  			=true;
		boolean expvoucherBodyFQName        	  			=true;
		boolean expvoucherBodyRDName              			=true;
		boolean expsalesOrderQtyLabel       			    =true;
		boolean expvoucherBodyReserveColumnName             =true;
		boolean expvoucherBodyLinkSalesQuotationsColumnName =true;
		boolean expvoucherBodyRateName   					=true;
		boolean expvoucherBodyGrossName         			=true;
		
		System.out.println("************************************* checkSalesOrderVoucherNewEntryPageBodyFields  ********************************************");
		
		System.out.println("salesOrderWarehouseLabel     	           	:"+actsalesOrderWarehouseLabel					+"  Value Expected : "+expsalesOrderWarehouseLabel  );
		System.out.println("voucherBodyItemName     	           		:"+actvoucherBodyItemName						+"  Value Expected : "+expvoucherBodyItemName  );
		System.out.println("voucherBodyUnitsName      	           		:"+actvoucherBodyUnitsName						+"  Value Expected : "+expvoucherBodyUnitsName  );
		System.out.println("voucherBodyAQName     	           			:"+actvoucherBodyAQName							+"  Value Expected : "+expvoucherBodyAQName  );
		System.out.println("voucherBodyFQName     	        		    :"+actvoucherBodyFQName							+"  Value Expected : "+expvoucherBodyFQName  );
		System.out.println("voucherBodyRDName     	           			:"+actvoucherBodyRDName							+"  Value Expected : "+expvoucherBodyRDName  );
		System.out.println("salesOrderQtyLabel     	           			:"+actsalesOrderQtyLabel						+"  Value Expected : "+expsalesOrderQtyLabel  );
		System.out.println("voucherBodyReserveColumnName     	        :"+actvoucherBodyReserveColumnName				+"  Value Expected : "+expvoucherBodyReserveColumnName  );
		System.out.println("voucherBodyLinkSalesQuotationsColumnName  	:"+actvoucherBodyLinkSalesQuotationsColumnName	+"  Value Expected : "+expvoucherBodyLinkSalesQuotationsColumnName  );
		System.out.println("voucherBodyRateName     	       		  	:"+actvoucherBodyRateName						+"  Value Expected : "+expvoucherBodyRateName  );
		System.out.println("voucherBodyGrossName     	           		:"+actvoucherBodyGrossName						+"  Value Expected : "+expvoucherBodyGrossName  );
		System.out.println("salesOrderWarehouseLabel     	           	:"+actsalesOrderWarehouseLabel					+"  Value Expected : "+expsalesOrderWarehouseLabel  );
	
		
		 if (actsalesOrderWarehouseLabel ==expsalesOrderWarehouseLabel  && actvoucherBodyItemName==expvoucherBodyItemName && actvoucherBodyUnitsName==expvoucherBodyUnitsName 
				 && actvoucherBodyAQName==expvoucherBodyAQName && actvoucherBodyFQName==expvoucherBodyFQName && actvoucherBodyRDName==expvoucherBodyRDName
				 && actsalesOrderQtyLabel==expsalesOrderQtyLabel && actvoucherBodyReserveColumnName==expvoucherBodyReserveColumnName 
				 && actvoucherBodyLinkSalesQuotationsColumnName==expvoucherBodyLinkSalesQuotationsColumnName
				 && actvoucherBodyRateName==expvoucherBodyRateName && actvoucherBodyGrossName==expvoucherBodyGrossName)
		 {		
				System.out.println(" Test Pass: Displayed Entry page Body Fileds ");
				
				js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
				
				excelReader.setCellData(xlfile, "Sheet6", 273, 9, resFail);
				return true;
		 }
	     else
		 {
			System.out.println(" Test Fail:  Not Displayed Entry page Body Fileds ");
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
			
			excelReader.setCellData(xlfile, "Sheet6", 273, 9, resFail);
            return false;
		 }
	 }
		

	
	public boolean checkSalesOrderVoucherNewEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
		jumpToFooterBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
		
		boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
		boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

		boolean expEntryPageFooterFieldsNetLabel  =true;
		boolean expEntryPageFooterFieldsNetAmount =true;

		System.out.println("***************************************** checkSalesOrderVoucherNewEntryPageFooterFields  ***************************************************");
		System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+"   Value Expected : "+expEntryPageFooterFieldsNetLabel);
		System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+"  Value Expected : "+expEntryPageFooterFieldsNetAmount);

				
		if(actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 14, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 14, 9, resFail);
			return false;
		}
	}

	

	public boolean checkSalesOrderVoucherNewEntryPageDocumentNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
		jumpToHeaderSectionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		String actEntryPageGetDocumentNumberValue  =documentNumberTxt.getAttribute("value");

		String expEntryPageGetDocumentNumberValue  ="1";

		System.out.println("*************************************** checkSalesOrderVoucherNewEntryPageDocumentNumber ****************************************************");
		System.out.println("Entry Page Document Number Value Actual  : "+actEntryPageGetDocumentNumberValue+"   Value Expected : "+expEntryPageGetDocumentNumberValue);

		
		if(actEntryPageGetDocumentNumberValue.equalsIgnoreCase(expEntryPageGetDocumentNumberValue))
		{
			System.out.println("Test Pass : Document No is 1");
			excelReader.setCellData(xlfile, "Sheet6", 275, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 275, 9, resFail);
			return false;
		}
	}


	
	public boolean checkSalesOrderVoucherNewEntryPageInfoSideBar() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
		
		// Actual
		boolean actInforSideBarCustomization            =infoSideBarCustomizeBtn.isDisplayed();
		boolean actInforSideBarCustomizationExpandButton=infoSideBarMinimizeExpandBtn.isDisplayed();
		
		
		// Expected
		boolean expInforSideBarCustomization            =true;
		boolean expInforSideBarCustomizationExpandButton=true;
		
		System.out.println("***************************************** checkSalesOrderVoucherNewEntryPageInfoSideBar  ***************************************************");
		System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomization               +" Value Expected : "+expInforSideBarCustomization);
		System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomizationExpandButton   +" Value Expected : "+expInforSideBarCustomizationExpandButton);
		
		if(actInforSideBarCustomization==expInforSideBarCustomization && actInforSideBarCustomizationExpandButton==expInforSideBarCustomizationExpandButton)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 276, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 276, 9, resFail);
			return false;
		}
	}


	
	public boolean checkSalesOrderVoucherNewEntryPageInfoSideBarCustomizeBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));
		
		infoSideBarCustomizeBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));

		boolean actInfoCustomizationSearchTxt        =customizeSearchTxt.isDisplayed();
		boolean actInfoCustomizationSearchBtn        =customizeSearchBtn.isDisplayed();
		boolean actInfoCustomizationCloseBtn         =customizeCloseBtn.isDisplayed();
		boolean actInfoCustomizationSaveBtn          =customizeSaveBtn.isDisplayed();
		boolean actInfoCustomizationCancelBtn        =customizeCancelBtn.isDisplayed();
		boolean actInfoCustomizationGraphBtn         =graphBtn.isDisplayed();
		boolean actInfoCustomizationReportBtn        =reportBtn.isDisplayed();
		boolean actInfoCustomizationInfopanelBtn     =infoPanelBtn.isDisplayed();
		boolean actInfoCustomizationWorkFlowBtn      =workFlowBtn.isDisplayed();
		boolean actInfoCustomizationOtherDashletsBtn =otherDashlets.isDisplayed();

		boolean expInfoCustomizationSearchTxt        =true;
		boolean expInfoCustomizationSearchBtn        =true;
		boolean expInfoCustomizationCloseBtn         =true;
		boolean expInfoCustomizationSaveBtn          =true;
		boolean expInfoCustomizationCancelBtn        =true;
		boolean expInfoCustomizationGraphBtn         =true;
		boolean expInfoCustomizationReportBtn        =true;
		boolean expInfoCustomizationInfopanelBtn     =true;
		boolean expInfoCustomizationWorkFlowBtn      =true;
		boolean expInfoCustomizationOtherDashletsBtn =true;

		
		System.out.println("***************************************** checkSalesOrderVoucherNewEntryPageInfoSideBarCustomizeBtn  ***************************************************");
		
		System.out.println("Entry Page Info Panel Search Txt Value Actual : "+actInfoCustomizationSearchTxt        +" Value Expected : "+expInfoCustomizationSearchTxt);
		System.out.println("Entry Page Info Panel Search Btn Value Actual : "+actInfoCustomizationSearchBtn        +" Value Expected : "+expInfoCustomizationSearchBtn);
		System.out.println("Entry Page Info Panel Close Btn Value Actual  : "+actInfoCustomizationCloseBtn         +" Value Expected : "+expInfoCustomizationCloseBtn);
		System.out.println("Entry Page Info Panel Save Btn Value Actual   : "+actInfoCustomizationSaveBtn          +" Value Expected : "+expInfoCustomizationSaveBtn);
		System.out.println("Entry Page Info Panel Cancel Value Actual     : "+actInfoCustomizationCancelBtn        +" Value Expected : "+expInfoCustomizationCancelBtn);
		System.out.println("Entry Page Info Panel Graph Value Actual      : "+actInfoCustomizationGraphBtn         +" Value Expected : "+expInfoCustomizationGraphBtn);
		System.out.println("Entry Page Info Panel Report Value Actual     : "+actInfoCustomizationReportBtn        +" Value Expected : "+expInfoCustomizationReportBtn);
		System.out.println("Entry Page Info Panel Value Actual            : "+actInfoCustomizationInfopanelBtn     +" Value Expected : "+expInfoCustomizationInfopanelBtn);
		System.out.println("Entry Page Info Panel WorkFlow Btn Actual     : "+actInfoCustomizationWorkFlowBtn      +" Value Expected : "+expInfoCustomizationWorkFlowBtn);
		System.out.println("Entry Page Info Panel Dashlet Btn Actual      : "+actInfoCustomizationOtherDashletsBtn +" Value Expected : "+expInfoCustomizationOtherDashletsBtn);
		
		
		if(actInfoCustomizationSearchTxt==expInfoCustomizationSearchTxt && actInfoCustomizationSearchBtn==expInfoCustomizationSearchBtn && actInfoCustomizationCloseBtn==expInfoCustomizationCloseBtn 
				&& actInfoCustomizationSaveBtn==expInfoCustomizationSaveBtn && actInfoCustomizationGraphBtn==expInfoCustomizationGraphBtn
				&& actInfoCustomizationReportBtn==expInfoCustomizationReportBtn && actInfoCustomizationInfopanelBtn==expInfoCustomizationInfopanelBtn  
				&& actInfoCustomizationWorkFlowBtn==expInfoCustomizationWorkFlowBtn && actInfoCustomizationOtherDashletsBtn==expInfoCustomizationOtherDashletsBtn)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 277, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 277, 9, resFail);
			return false;
		}
	}

	
	
	public boolean checkSalesOrderVoucherNewEntryPageInfoSideBarGraphOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(graphBtn));
		
		graphBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGraphOption));
		
		boolean actNewGraphOption       =newGraphOption.isDisplayed();
		boolean expNewGraphOption       =true;
		
		System.out.println("***************************************** checkSalesOrderVoucherNewEntryPageInfoSideBarGraphOption  *****************************************");
		System.out.println("Entry Page Open Info Side Graph Value Actual  : "+actNewGraphOption               +" Value Expected : "+expNewGraphOption);
		
		if(actNewGraphOption==expNewGraphOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 278, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 278, 9, resFail);
			return false;
		}
	}
	
	
	public boolean checkSalesOrderVoucherNewEntryPageInfoSideBarReportOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportBtn));
		
		reportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReportOption));
		
		boolean actNewReportOption       =newReportOption.isDisplayed();
		boolean expNewReportOption       =true;
		
		System.out.println("***************************************** checkSalesOrderVoucherNewEntryPageInfoSideBarReportOption  *****************************************");
		System.out.println("Entry Page Open Info Side Report Value Actual  : "+actNewReportOption               +" Value Expected : "+expNewReportOption);
		
		
		if(actNewReportOption==expNewReportOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 279, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 279, 9, resFail);
			return false;
		}
	}


	
	public boolean checkSalesOrderVoucherNewEntryPageInfoSideBarInfoPanelOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelBtn));
		
		infoPanelBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newInfoPanelOption));
		
		boolean actNewInfoPanelOption       =newInfoPanelOption.isDisplayed();
		boolean expNewInfoPanelOption       =true;
		
	
		System.out.println("***************************************** checkSalesOrderVoucherNewEntryPageInfoSideBarInfoPanelOption  *****************************************");
		System.out.println("Entry Page Open Info Side Info Panel Value Actual  : "+actNewInfoPanelOption               +" Value Expected : "+expNewInfoPanelOption);
		
		
		
		if(actNewInfoPanelOption==expNewInfoPanelOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 280, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 280, 9, resFail);
			return false;
		}
	}

	
	
	public boolean checkSalesOrderVoucherNewEntryPageInfoSideBarWorkFlowOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowBtn));
		
		workFlowBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newWorkFlowOption));
		
		boolean actNewWorkFlowOption       =newWorkFlowOption.isDisplayed();
		boolean expNewWorkFlowOption       =true;
		
	
		System.out.println("***************************************** checkSalesOrderVoucherNewEntryPageInfoSideBarWorkFlowOption  *****************************************");
		System.out.println("Entry Page Open Info Side Workflow Value Actual  : "+actNewWorkFlowOption               +" Value Expected : "+expNewWorkFlowOption);
		
		
		if(actNewWorkFlowOption==expNewWorkFlowOption)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 281, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 281, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkSalesOrderVoucherNewEntryPageInfoSideBarOtherDashletsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(otherDashlets));
		
		otherDashlets.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentInfo));
		
		boolean actDocumentInfo       =documentInfo.isDisplayed();
		boolean expDocumentInfo       =true;
		
	
		System.out.println("***************************************** checkSalesOrderVoucherNewEntryPageInfoSideBarOtherDashletsOption  *****************************************");
		System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actDocumentInfo               +" Value Expected : "+expDocumentInfo);

		
		if(actDocumentInfo==expDocumentInfo)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 282, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 282, 9, resFail);
			return false;
		}
	}

		
		
	public boolean checkSalesOrderVoucherNewEntryPageInfoSideBarSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));
		
		customizeSearchTxt.click();
		
		
	    customizeSearchTxt.sendKeys("Document Info");
	 
	    Thread.sleep(2000);
	
	    customizeSearchTxt.sendKeys(Keys.TAB);
	 
	   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchDocumentInfo));
		
		boolean actSearchDocumentInfo       =searchDocumentInfo.isDisplayed();
		boolean expSearchDocumentInfo       =true;
		
	
		System.out.println("***************************************** checkSalesOrderVoucherNewEntryPageInfoSideBarSearch  *****************************************");
		System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

		
		if(actSearchDocumentInfo==expSearchDocumentInfo)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 283, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 283, 9, resFail);
			return false;
		}
	}
	





	
	public boolean checkSalesOrderVoucherNewInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\infoPanels.exe");
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCreateDashlet));
		
		boolean actAddCreateDashlet       =addCreateDashlet.isDisplayed();
		boolean expAddCreateDashlet       =true;
		
	
		System.out.println("***************************************** checkSalesOrderVoucherNewInfoPanelDashlet  *****************************************");
		System.out.println("Entry Page Open Info Side Add Create Dashlet Value Actual  : "+actAddCreateDashlet               +" Value Expected : "+expAddCreateDashlet);

		
		
		if(actAddCreateDashlet==expAddCreateDashlet)
		{
			System.out.println("Test Pass : entry Page Footer Options Are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 284, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : entry Page NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 284, 9, resFail);
			return false;
		}
	}




	
	public boolean checkSalesOrderVoucherNewSaveInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSaveBtn));
		
		customizeSaveBtn.click();
			
		String expSaveInfoPanelMessage       ="Dashboard Layout Saved Successfully.";
		
		String dashBoardSavingMessage=checkValidationMessage(expSaveInfoPanelMessage);
		
		System.out.println("***************************************** checkSalesOrderVoucherNewSaveInfoPanelDashlet  *****************************************");
		
		System.out.println("Entry Page Open Info Side New Save Value Actual  : "+dashBoardSavingMessage+" Value Expected : "+expSaveInfoPanelMessage);	
		
		if(dashBoardSavingMessage.equalsIgnoreCase(expSaveInfoPanelMessage) && dashletI.isDisplayed())
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			
			excelReader.setCellData(xlfile, "Sheet6", 285, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			
			excelReader.setCellData(xlfile, "Sheet6", 285, 9, resFail);
			return false;
		}	
	}


	
	
	public boolean checkSalesOrderVoucherNewDateFieldLessThanCompanyAccountingDate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
	
		documentNumberTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();
		
		dateTxt.sendKeys(Keys.END);
		
		dateTxt.sendKeys(Keys.BACK_SPACE);
		Thread.sleep(2000);
		dateTxt.sendKeys(Keys.BACK_SPACE);
		
		
		String expSaveDateValidationMessage       ="Voucher date cannot be less than Accounting date";
		
		String validationMessage=checkValidationMessage(expSaveDateValidationMessage);
		
		System.out.println("*********************************************** checkSalesOrderVoucherNewDateFieldLessThanCompanyAccountingDate  ********************************************");
		System.out.println("Entry Page Change to Voucher Date To Less Than Accounting Date Value Actual  : "+validationMessage+" Value Expected : "+expSaveDateValidationMessage);	
		
		if(validationMessage.equalsIgnoreCase(expSaveDateValidationMessage))
		{
			System.out.println("Test Pass : Error Message Is As Expected");
			excelReader.setCellData(xlfile, "Sheet6", 59, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message Is NOT As Expected");
			return false;
		}	
	}
	

	//Mandartory Checking

	
	public boolean checkSalesOrderVoucherNewSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		
		String actErrorMessage	=errorMessage.getText();
		String expErrorMessage1	="Controls marked with arrow mark, require Values";
		String expErrorMessage2	="Main -> CustomerAC";
		
		System.out.println("************************************************ checkSalesOrderVoucherNewSaveWithoutMandatoryFields  *******************************************************");
		System.out.println("ErrorMessage  : "+actErrorMessage+"  Value Expected : "+expErrorMessage1+" "+expErrorMessage2);
	
		
		if(actErrorMessage.startsWith(expErrorMessage1) && actErrorMessage.endsWith(expErrorMessage2))
		{
			System.out.println("Test Pass : Error Message Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resFail);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			return false;
		}
	}

	
	
	
	
	public boolean checkSalesOrderVoucherNewCustomerOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		
		customerAccountTxt.sendKeys(Keys.SPACE);
		
		WebElement options=customerAccountTxt;
		
		ArrayList<String>  actCustomerAccount= new ArrayList<String>(); 
	
		actCustomerAccount.add("Bank");
	    
		actCustomerAccount.add("Cash");
	    
		actCustomerAccount.add("Customer A");
	    
		actCustomerAccount.add("Customer B");
		   		   
		actCustomerAccount.add("Customer C");
	    
		actCustomerAccount.add("Customer Display CD For Each Account One");
	    
		actCustomerAccount.add("Customer Display CD For Each Account Three");
	    
		actCustomerAccount.add("Customer Display CD For Each Account Two");
	    
		actCustomerAccount.add("Customer Update");
	    
		ArrayList<String> 
		
		expCustomerAccount = new ArrayList<String>(); 
		
		int count=customerAccountListCount.size();

		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=customerAccountListCount.get(i).getAttribute("data-name");
			System.err.println("IN FOR LOOP : "+data);
			expCustomerAccount.add(data);
			
		}
		
		
		System.out.println("actCustomerAccount"+actCustomerAccount);
		
		System.out.println("expCustomerAccount"+expCustomerAccount);
		
		boolean actCustomerAccountValue=actCustomerAccount.equals(expCustomerAccount);
		boolean expCustomerAcountValue=true;
		
		System.out.println("****************************** checkSalesOrderVoucherNewCustomerOptions  ******************************************");
		
		System.out.println("Customer Account Combo Box  : "+actCustomerAccountValue+"  Value Expected : "+expCustomerAcountValue);
		
		if(actCustomerAccountValue==expCustomerAcountValue)
		{
			System.out.println("Test Pass : All Customer Account Fileds are Displayed  ");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : All Customer Account Fileds are Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 20, 9, resFail);
			return false;
		}
		
	}

	
	
	public boolean checkSavingSalesOrderVoucherNewWithEmptyRows() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expValidationMessage	="There should be atleast one row entered.";
		
		String emptyRowsMessage=checkValidationMessage(expValidationMessage);


		System.out.println("**************************************** checkSavingSalesOrderVoucherNewWithEmptyRows  ***************************************");
		
		System.out.println("Entry Page Save Without Body Rows Message Value Actual  : "+emptyRowsMessage+" Value Expected : "+expValidationMessage);	
		
		if (emptyRowsMessage.equalsIgnoreCase(expValidationMessage))
		{
			return true;
		} 
		else	 
		{	
			return false;
		}
	}
		
	
	public boolean checkSalesOrderVoucherNewVouchersEntryPageNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		getWaitForAlert();
		
		String actdata1	=getDriver().switchTo().alert().getText();
		String expdata0	="The contents of the voucher are changed.";
		String expdata1	="Are you sure that you want to ignore the changes?";
		
		System.out.println(actdata1);
		
		getAlert().accept();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actdata2	=documentNumberTxt.getAttribute("value");
		String expdata2	="1";
		
	    System.out.println("********************************** checkSalesOrderVoucherNewVouchersEntryPageNew  *************************************");	
	    
        System.out.println("Entry Page Previous Option Value Actual           : "+actdata1         + " Value Expected : "+expdata0+expdata1);
        System.out.println("Entry Page Document Number Value Actual           : "+actdata2         + " Value Expected : "+expdata2);
		
		if(actdata1.startsWith(expdata0) && actdata1.endsWith(expdata1) && actdata2.equalsIgnoreCase(expdata2))
		{
			System.out.println("Test Pass : DOC NO is 1");
			excelReader.setCellData(xlfile, "Sheet6", 30, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Customize Pop Up NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 30, 9, resFail);
			return false;
		}
	}

	@FindBy(xpath="//tbody[@id='id_body_536870916_table_data_body']/tr")
    private static List<WebElement> pvwareHouseListCount;
	
	public boolean checkSavingSalesOrderVoucherWithWarehouse() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expValidationMessage	="There should be atleast one row entered.";
		
		String emptyRowsMessage=checkValidationMessage(expValidationMessage);
		
		
		System.out.println("**************************************** checkSavingSalesOrderVoucherWithWarehouse  ***************************************");
		
		System.out.println("Entry Page Save Without Body Rows Message Value Actual  : "+emptyRowsMessage+" Value Expected : "+expValidationMessage);	
		
		if(emptyRowsMessage.equalsIgnoreCase(expValidationMessage))
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}

	
	


	
	public boolean checkSaveSalesOrderVoucherToCheckQtyPreload() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BIN RAW MATERIAL ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("0");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher	="0.00";
			
		System.out.println("**************************************** checkSaveSalesOrderVoucherToCheckQtyPreload  ***************************************");
			
		System.out.println("Qty Preload is displaying as Value In Sales Order Vouche  : "+actQtyInVoucher  +" Value Expected : "+expQtyInVoucher);	
		
		if( actQtyInVoucher.equalsIgnoreCase(expQtyInVoucher))
		{
			System.out.println("Test Pass : Qty Preload Value is displaying Correct");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}


	

	

	
	
		
	
	public boolean checkSavingSalesOrderVoucherAndCheckReservationScreenWithItemNoStocks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(3000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
			
		Thread.sleep(3000);
			
		// Actual
		
		boolean actstockReservationLabel		=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse		=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode		=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName		=res_LeftPanelItemName.isDisplayed();
		
				
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		Thread.sleep(5000);
		 
		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();
		
		boolean actbinResNull_BodyWareHouse			=binResNull_BodyWareHouse.isDisplayed();
		boolean actbinResNull_BodyVoucherNo			=binResNull_BodyVoucherNo.isDisplayed();
		boolean actbinResNull_BodyQtyToReserve		=binResNull_BodyQtyToReserve.isDisplayed();
		boolean actbinResNull_BodyAvailableQty		=binResNull_BodyAvailableQty.isDisplayed();
		boolean actbinResNull_BodyCurOrderResQty	=binResNull_BodyCurOrderResQty.isDisplayed();
		
		
				
		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", binResNull_BodyReleasedQty);
		 
		
		boolean actbinResNull_BodyQty				=binResNull_BodyQty.isDisplayed();
		boolean actbinResNull_BodyReleasedQty		=binResNull_BodyReleasedQty.isDisplayed();
			
		boolean actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText().isEmpty();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextbinResNull_WarehouseRow1		=binResNull_WarehouseRow1.getText();
		String actTextbinResNull_VoucherNoRow1		=binResNull_VoucherNoRow1.getText();
		String actTextbinResNull_QtyToReserveRow1	=binResNull_QtyToReserveRow1.getText();
		String actTextbinResNull_AvailableQtyRow1	=binResNull_AvailableQtyRow1.getText();
		String actTextbinResNull_CurOrdResQtyRow1	=binResNull_CurOrdResQtyRow1.getText();
		String actTextbinResNull_QtyRow1			=binResNull_QtyRow1.getText();
		String actTextbinResNull_PendingOrderQtyRow1=binResNull_PendingOrderQtyRow1.getText();
		String actTextbinResNull_ReleasedQtyRow1	=binResNull_ReleasedQtyRow1.getText();
		
		
		// Expected
		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;
		
		boolean expbinResNull_BodyWareHouse			=true;
		boolean expbinResNull_BodyVoucherNo			=true;
		boolean expbinResNull_BodyQtyToReserve		=true;
		boolean expbinResNull_BodyAvailableQty		=true;
		boolean expbinResNull_BodyCurOrderResQty	=true;
		
		boolean expbinResNull_BodyQty				=true;
		boolean expbinResNull_BodyReleasedQty		=true;
		
		boolean expTextres_LeftPanelWareHouseRow1	=true;
		String expTextres_LeftPanelItemCodeRow1		="NULL";
		String expTextres_LeftPanelItemNameRow1		="NULL";
		String expTextres_LeftPanelItemQtyRow1		="0";
		String expTextres_LeftPanelBaseUnitRow1		="NULL";
		
		String expTextbinResNull_WarehouseRow1		=" ";
		String expTextbinResNull_VoucherNoRow1		=" ";
		String expTextbinResNull_QtyToReserveRow1	=" ";
		String expTextbinResNull_AvailableQtyRow1	=" ";
		String expTextbinResNull_CurOrdResQtyRow1	=" ";
		String expTextbinResNull_QtyRow1			=" ";
		String expTextbinResNull_PendingOrderQtyRow1=" ";
		String expTextbinResNull_ReleasedQtyRow1	=" ";
							
						
		System.out.println("**************************************** checkSavingSalesOrderVoucherAndCheckReservationScreenWithItemNoStocks  ***************************************");
		
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel+" 						Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse+" 					Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode+" 						Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName+" 						Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty+" 						Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate+" 						Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit+" 						Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn+" 								Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn+" 							Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn+" 									Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn+" 								Value Expected : "+expres_CloseBtn);
		
		System.out.println("binResNull_BodyWareHouse  			: "+actbinResNull_BodyWareHouse+" 					Value Expected : "+expbinResNull_BodyWareHouse);
		System.out.println("binResNull_BodyVoucherNo  			: "+actbinResNull_BodyVoucherNo+" 					Value Expected : "+expbinResNull_BodyVoucherNo);
		System.out.println("binResNull_BodyQtyToReserve  		: "+actbinResNull_BodyQtyToReserve+" 				Value Expected : "+expbinResNull_BodyQtyToReserve);
		System.out.println("binResNull_BodyAvailableQty  		: "+actbinResNull_BodyAvailableQty+" 				Value Expected : "+expbinResNull_BodyAvailableQty);
		System.out.println("binResNull_BodyCurOrderResQty  		: "+actbinResNull_BodyCurOrderResQty+" 				Value Expected : "+expbinResNull_BodyCurOrderResQty);
		System.out.println("binResNull_BodyQty  				: "+actbinResNull_BodyQty+" 						Value Expected : "+expbinResNull_BodyQty);
		System.out.println("binResNull_BodyReleasedQty  		: "+actbinResNull_BodyReleasedQty+" 				Value Expected : "+expbinResNull_BodyReleasedQty);
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1+" 			Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1+" 				Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1+" 				Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1+" 				Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1+" 				Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("TextbinResNull_WarehouseRow1  		: "+actTextbinResNull_WarehouseRow1+" 				Value Expected : "+expTextbinResNull_WarehouseRow1);
		System.out.println("TextbinResNull_VoucherNoRow1  		: "+actTextbinResNull_VoucherNoRow1+"				Value Expected : "+expTextbinResNull_VoucherNoRow1);
		System.out.println("TextbinResNull_QtyToReserveRow1  	: "+actTextbinResNull_QtyToReserveRow1+" 			Value Expected : "+expTextbinResNull_QtyToReserveRow1);
		System.out.println("TextbinResNull_AvailableQtyRow1  	: "+actTextbinResNull_AvailableQtyRow1+" 			Value Expected : "+expTextbinResNull_AvailableQtyRow1);
		System.out.println("TextbinResNull_CurOrdResQtyRow1  	: "+actTextbinResNull_CurOrdResQtyRow1+" 			Value Expected : "+expTextbinResNull_CurOrdResQtyRow1);
		System.out.println("TextbinResNull_QtyRow1  			: "+actTextbinResNull_QtyRow1+" 					Value Expected : "+expTextbinResNull_QtyRow1);
		System.out.println("TextbinResNull_PendingOrderQtyRow1  : "+actTextbinResNull_PendingOrderQtyRow1+"       	Value Expected : "+expTextbinResNull_PendingOrderQtyRow1);
		System.out.println("TextbinResNull_ReleasedQtyRow1 		: "+actTextbinResNull_ReleasedQtyRow1+"           	Value Expected : "+expTextbinResNull_ReleasedQtyRow1);
						 
							
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				&& actbinResNull_BodyWareHouse==expbinResNull_BodyWareHouse && actbinResNull_BodyVoucherNo==expbinResNull_BodyVoucherNo 
				&& actbinResNull_BodyQtyToReserve==expbinResNull_BodyQtyToReserve && actbinResNull_BodyAvailableQty==expbinResNull_BodyAvailableQty
				&& actbinResNull_BodyCurOrderResQty==expbinResNull_BodyCurOrderResQty && actbinResNull_BodyQty==expbinResNull_BodyQty
				&& actbinResNull_BodyReleasedQty==expbinResNull_BodyReleasedQty 
				
				&& actTextres_LeftPanelWareHouseRow1==expTextres_LeftPanelWareHouseRow1
				
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextbinResNull_WarehouseRow1.equalsIgnoreCase(expTextbinResNull_WarehouseRow1) && actTextbinResNull_VoucherNoRow1.equalsIgnoreCase(expTextbinResNull_VoucherNoRow1)
				&& actTextbinResNull_QtyToReserveRow1.equalsIgnoreCase(expTextbinResNull_QtyToReserveRow1) && actTextbinResNull_AvailableQtyRow1.equalsIgnoreCase(expTextbinResNull_AvailableQtyRow1)
				&& actTextbinResNull_CurOrdResQtyRow1.equalsIgnoreCase(expTextbinResNull_CurOrdResQtyRow1) && actTextbinResNull_QtyRow1.equalsIgnoreCase(expTextbinResNull_QtyRow1)
				&& actTextbinResNull_PendingOrderQtyRow1.equalsIgnoreCase(expTextbinResNull_PendingOrderQtyRow1) && actTextbinResNull_ReleasedQtyRow1.equalsIgnoreCase(expTextbinResNull_ReleasedQtyRow1))
		{
		   	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			 res_CloseBtn.click();
			 
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			 res_CloseBtn.click();
			 
			return false;
		}
	}
						

	
	
	public boolean checkReservationForBinRawMaterialWithQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
		
		// Actual
		
		boolean actstockReservationLabel		=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse		=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode		=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName		=res_LeftPanelItemName.isDisplayed();
		
				
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty			=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate			=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit		=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn					=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn				=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn					=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn					=res_CloseBtn.isDisplayed();
		
		boolean actbinRes_BodyWareHouse			=binRes_BodyWareHouse.isDisplayed();
		boolean actbinRes_BodyQtyToReserve		=binRes_BodyQtyToReserve.isDisplayed();
		boolean actbinRes_BodyBin				=binRes_BodyBin.isDisplayed();
		boolean actbinRes_BodyAvailableQty		=binRes_BodyAvailableQty.isDisplayed();
		boolean actbinRes_BodyReleasedQty		=binRes_BodyReleasedQty.isDisplayed();
		
		
				
		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", binRes_BodyLotNo);
		 
		
		boolean actbinRes_BodyTotalReservedQty		=binRes_BodyTotalReservedQty.isDisplayed();
		boolean actbinRes_BodyBinQty				=binRes_BodyBinQty.isDisplayed();
		boolean actbinRes_BodySkidId				=binRes_BodySkidId.isDisplayed();
		boolean actbinRes_BodyAllocStatus			=binRes_BodyAllocStatus.isDisplayed();
		boolean actbinRes_BodyInvStatus				=binRes_BodyInvStatus.isDisplayed();
		boolean actbinRes_BodyLotNo					=binRes_BodyLotNo.isDisplayed();
		
		boolean actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText().isEmpty();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		boolean actbinRes_WarehouseRow1				=binRes_WarehouseRow1.getText().isEmpty();
		boolean actbinRes_QtyToReserveRow1			=binRes_QtyToReserveRow1.getText().isEmpty();
		boolean actbinRes_BinNoRow1					=binRes_BinNoRow1.getText().isEmpty();
		boolean actbinRes_AvailableQtyRow1			=binRes_AvailableQtyRow1.getText().isEmpty();
		boolean actbinRes_ReleaseQtyRow1			=binRes_ReleaseQtyRow1.getText().isEmpty();
		
		boolean actbinRes_TotalreservedQtyRow1		=binRes_TotalreservedQtyRow1.getText().isEmpty();
		boolean actbinRes_BinQtyRow1				=binRes_BinQtyRow1.getText().isEmpty();
		boolean actbinRes_SkidIdRow1				=binRes_SkidIdRow1.getText().isEmpty();
		boolean actbinRes_AllocStatusRow1			=binRes_AllocStatusRow1.getText().isEmpty();
		boolean actbinRes_InvStatusRow1				=binRes_InvStatusRow1.getText().isEmpty();
		boolean actbinRes_LotNoRow1					=binRes_LotNoRow1.getText().isEmpty();
		
		
		// Expected
		
		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;
		
		boolean expbinRes_BodyWareHouse				=true;
		boolean expbinRes_BodyQtyToReserve			=true;
		boolean expbinRes_BodyBin					=true;
		boolean expbinRes_BodyAvailableQty			=true;
		boolean expbinRes_BodyReleasedQty			=true;
		boolean expbinRes_BodyTotalReservedQty		=true;
		boolean expbinRes_BodyBinQty				=true;
		boolean expbinRes_BodySkidId				=true;
		boolean expbinRes_BodyAllocStatus			=true;
		boolean expbinRes_BodyInvStatus				=true;
		boolean expbinRes_BodyLotNo					=true;
		
		
		boolean expTextres_LeftPanelWareHouseRow1	=true;
		String expTextres_LeftPanelItemCodeRow1		="BRMI";
		String expTextres_LeftPanelItemNameRow1		="BIN RAW MATERIAL ITEM";
		String expTextres_LeftPanelItemQtyRow1		="2";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		boolean expbinRes_WarehouseRow1				=true;
		boolean expbinRes_QtyToReserveRow1			=true;
		boolean expbinRes_BinNoRow1					=true;
		boolean expbinRes_AvailableQtyRow1			=true;
		boolean expbinRes_ReleaseQtyRow1			=true;
		
		boolean expbinRes_TotalreservedQtyRow1		=true;
		boolean expbinRes_BinQtyRow1				=true;
		boolean expbinRes_SkidIdRow1				=true;
		boolean expbinRes_AllocStatusRow1			=true;
		boolean expbinRes_InvStatusRow1				=true;
		boolean expbinRes_LotNoRow1					=true;
		
		
		System.out.println("**************************************** checkReservationForBinRawMaterialWithQty  ***************************************");
		
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
		
		System.out.println("binRes_BodyWareHouse  				: "+actbinRes_BodyWareHouse					+"  Value Expected : "+expbinRes_BodyWareHouse);
		System.out.println("binRes_BodyQtyToReserve  			: "+actbinRes_BodyQtyToReserve				+" 	Value Expected : "+expbinRes_BodyQtyToReserve);
		System.out.println("binRes_BodyBin  					: "+actbinRes_BodyBin						+" 	Value Expected : "+expbinRes_BodyBin);
		System.out.println("binRes_BodyAvailableQty  			: "+actbinRes_BodyAvailableQty				+" 	Value Expected : "+expbinRes_BodyAvailableQty);
		System.out.println("binRes_BodyReleasedQty  			: "+actbinRes_BodyReleasedQty				+" 	Value Expected : "+expbinRes_BodyReleasedQty);
		System.out.println("binRes_BodyTotalReservedQty  		: "+actbinRes_BodyTotalReservedQty			+"  Value Expected : "+expbinRes_BodyTotalReservedQty);
		System.out.println("binRes_BodyBinQty  					: "+actbinRes_BodyBinQty					+" 	Value Expected : "+expbinRes_BodyBinQty);
		System.out.println("binRes_BodySkidId  					: "+actbinRes_BodySkidId					+" 	Value Expected : "+expbinRes_BodySkidId);
		System.out.println("binRes_BodyAllocStatus  			: "+actbinRes_BodyAllocStatus				+" 	Value Expected : "+expbinRes_BodyAllocStatus);
		System.out.println("binRes_BodyInvStatus  				: "+actbinRes_BodyInvStatus					+" 	Value Expected : "+expbinRes_BodyInvStatus);
		System.out.println("binRes_BodyLotNo  					: "+actbinRes_BodyLotNo						+" 	Value Expected : "+expbinRes_BodyLotNo);
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("binRes_WarehouseRow1  			    : "+actbinRes_WarehouseRow1					+" 	Value Expected : "+expbinRes_WarehouseRow1);
		System.out.println("binRes_QtyToReserveRow1  			: "+actbinRes_QtyToReserveRow1				+" 	Value Expected : "+expbinRes_QtyToReserveRow1);
		System.out.println("binRes_BinNoRow1  					: "+actbinRes_BinNoRow1						+" 	Value Expected : "+expbinRes_BinNoRow1);
		System.out.println("binRes_AvailableQtyRow1  			: "+actbinRes_AvailableQtyRow1				+" 	Value Expected : "+expbinRes_AvailableQtyRow1);
		System.out.println("binRes_ReleaseQtyRow1  				: "+actbinRes_ReleaseQtyRow1				+" 	Value Expected : "+expbinRes_ReleaseQtyRow1);
		System.out.println("binRes_TotalreservedQtyRow1 		: "+actbinRes_TotalreservedQtyRow1   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow1);
		System.out.println("binRes_BinQtyRow1  					: "+actbinRes_BinQtyRow1					+" 	Value Expected : "+expbinRes_BinQtyRow1);
		System.out.println("binRes_SkidIdRow1  					: "+actbinRes_SkidIdRow1					+" 	Value Expected : "+expbinRes_SkidIdRow1);
		System.out.println("binRes_AllocStatusRow1  			: "+actbinRes_AllocStatusRow1				+" 	Value Expected : "+expbinRes_AllocStatusRow1);
		System.out.println("binRes_InvStatusRow1  				: "+actbinRes_InvStatusRow1					+"  Value Expected : "+expbinRes_InvStatusRow1);
		System.out.println("binRes_LotNoRow1  					: "+actbinRes_LotNoRow1						+"  Value Expected : "+expbinRes_LotNoRow1);
		
		
		System.out.println(binRes_BodyTotalReservedQty.getText());
		System.out.println(binRes_BodyBinQty.getText());
		System.out.println(binRes_BodySkidId.getText());
		System.out.println(binRes_BodyAllocStatus.getText());
		System.out.println(binRes_BodyInvStatus.getText());
		System.out.println(binRes_BodyLotNo.getText());
		
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				&& actbinRes_BodyWareHouse==expbinRes_BodyWareHouse && actbinRes_BodyQtyToReserve==expbinRes_BodyQtyToReserve
				&& actbinRes_BodyBin==expbinRes_BodyBin && actbinRes_BodyAvailableQty==expbinRes_BodyAvailableQty
				&& actbinRes_BodyReleasedQty==expbinRes_BodyReleasedQty && actbinRes_BodyTotalReservedQty==expbinRes_BodyTotalReservedQty
				&& actbinRes_BodyBinQty==expbinRes_BodyBinQty && actbinRes_BodySkidId==expbinRes_BodySkidId
				&& actbinRes_BodyAllocStatus==expbinRes_BodyAllocStatus && actbinRes_BodyInvStatus==expbinRes_BodyInvStatus
				&& actbinRes_BodyLotNo==expbinRes_BodyLotNo
				
				&& actTextres_LeftPanelWareHouseRow1==expTextres_LeftPanelWareHouseRow1
				
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actbinRes_WarehouseRow1==expbinRes_WarehouseRow1 && actbinRes_QtyToReserveRow1==expbinRes_QtyToReserveRow1
				&& actbinRes_BinNoRow1==expbinRes_BinNoRow1 && actbinRes_AvailableQtyRow1==expbinRes_AvailableQtyRow1
				&& actbinRes_ReleaseQtyRow1==expbinRes_ReleaseQtyRow1
				
				&& actbinRes_TotalreservedQtyRow1==expbinRes_TotalreservedQtyRow1
				&& actbinRes_BinQtyRow1==expbinRes_BinQtyRow1 && actbinRes_SkidIdRow1==expbinRes_SkidIdRow1
				&& actbinRes_AllocStatusRow1==expbinRes_AllocStatusRow1 && actbinRes_InvStatusRow1==expbinRes_InvStatusRow1
				&& actbinRes_LotNoRow1==expbinRes_LotNoRow1)
		{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			res_CloseBtn.click();
				 
			return true;
		}
		else
		{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			res_CloseBtn.click();
				 
			return false;
		}
	}
						
	
	public boolean checkReservationForBinFinishedGoodsWithQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
		
		// Actual
		
		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();
		
				
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();
		
		boolean actbinRes_BodyWareHouse				=binRes_BodyWareHouse.isDisplayed();
		boolean actbinRes_BodyQtyToReserve			=binRes_BodyQtyToReserve.isDisplayed();
		boolean actbinRes_BodyBin					=binRes_BodyBin.isDisplayed();
		boolean actbinRes_BodyAvailableQty			=binRes_BodyAvailableQty.isDisplayed();
		boolean actbinRes_BodyReleasedQty			=binRes_BodyReleasedQty.isDisplayed();
		
		
				
		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", binRes_BodyLotNo);
		 
		
		boolean actbinRes_BodyTotalReservedQty		=binRes_BodyTotalReservedQty.isDisplayed();
		boolean actbinRes_BodyBinQty				=binRes_BodyBinQty.isDisplayed();
		boolean actbinRes_BodySkidId				=binRes_BodySkidId.isDisplayed();
		boolean actbinRes_BodyAllocStatus			=binRes_BodyAllocStatus.isDisplayed();
		boolean actbinRes_BodyInvStatus				=binRes_BodyInvStatus.isDisplayed();
		boolean actbinRes_BodyLotNo					=binRes_BodyLotNo.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actbinRes_WarehouseRow1				=binRes_WarehouseRow1.getText();
		String actbinRes_QtyToReserveRow1			=binRes_QtyToReserveRow1.getText();
		String actbinRes_BinNoRow1					=binRes_BinNoRow1.getText();
		String actbinRes_AvailableQtyRow1			=binRes_AvailableQtyRow1.getText();
		String actbinRes_ReleaseQtyRow1				=binRes_ReleaseQtyRow1.getText();
		String actbinRes_TotalreservedQtyRow1		=binRes_TotalreservedQtyRow1.getText();
		String actbinRes_BinQtyRow1					=binRes_BinQtyRow1.getText();
		boolean actbinRes_SkidIdRow1				=binRes_SkidIdRow1.getText().isEmpty();
		boolean actbinRes_AllocStatusRow1			=binRes_AllocStatusRow1.getText().isEmpty();
		String actbinRes_InvStatusRow1				=binRes_InvStatusRow1.getText();
		String actbinRes_LotNoRow1					=binRes_LotNoRow1.getText();
		
		String actbinRes_WarehouseRow2				=binRes_WarehouseRow2.getText();
		String actbinRes_QtyToReserveRow2			=binRes_QtyToReserveRow2.getText();
		String actbinRes_BinNoRow2					=binRes_BinNoRow2.getText();
		String actbinRes_AvailableQtyRow2			=binRes_AvailableQtyRow2.getText();
		String actbinRes_ReleaseQtyRow2				=binRes_ReleaseQtyRow2.getText();
		String actbinRes_TotalreservedQtyRow2		=binRes_TotalreservedQtyRow2.getText();
		String actbinRes_BinQtyRow2					=binRes_BinQtyRow2.getText();
		boolean actbinRes_SkidIdRow2				=binRes_SkidIdRow2.getText().isEmpty();
		boolean actbinRes_AllocStatusRow2			=binRes_AllocStatusRow2.getText().isEmpty();
		String actbinRes_InvStatusRow2				=binRes_InvStatusRow2.getText();
		String actbinRes_LotNoRow2					=binRes_LotNoRow2.getText();
	
	
		// Expected
	
		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse=			true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;
		
		boolean expbinRes_BodyWareHouse				=true;
		boolean expbinRes_BodyQtyToReserve			=true;
		boolean expbinRes_BodyBin					=true;
		boolean expbinRes_BodyAvailableQty			=true;
		boolean expbinRes_BodyReleasedQty			=true;
		boolean expbinRes_BodyTotalReservedQty		=true;
		boolean expbinRes_BodyBinQty				=true;
		boolean expbinRes_BodySkidId				=true;
		boolean expbinRes_BodyAllocStatus			=true;
		boolean expbinRes_BodyInvStatus				=true;
		boolean expbinRes_BodyLotNo					=true;
		
		
		String expTextres_LeftPanelWareHouseRow1	="Secunderabad";
		String expTextres_LeftPanelItemCodeRow1		="BFGI";
		String expTextres_LeftPanelItemNameRow1		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="2";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expbinRes_WarehouseRow1				="SECUNDERABAD";
		String expbinRes_QtyToReserveRow1			="0";
		String expbinRes_BinNoRow1					="Bin Update";
		String expbinRes_AvailableQtyRow1			="5";
		String expbinRes_ReleaseQtyRow1				="0";
		String expbinRes_TotalreservedQtyRow1		="0";
		String expbinRes_BinQtyRow1					="5";
		boolean expbinRes_SkidIdRow1				=true;
		boolean expbinRes_AllocStatusRow1			=true;
		String expbinRes_InvStatusRow1				="AVAILABLE";
		String expbinRes_LotNoRow1					="0";
		
		String expbinRes_WarehouseRow2				="SECUNDERABAD";
		String expbinRes_QtyToReserveRow2			="0";
		String expbinRes_BinNoRow2					="Bin1";
		String expbinRes_AvailableQtyRow2			="3";
		String expbinRes_ReleaseQtyRow2				="0";
		String expbinRes_TotalreservedQtyRow2		="0";
		String expbinRes_BinQtyRow2					="3";
		boolean expbinRes_SkidIdRow2				=true;
		boolean expbinRes_AllocStatusRow2			=true;
		String expbinRes_InvStatusRow2				="AVAILABLE";
		String expbinRes_LotNoRow2					="0";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
		res_CloseBtn.click();
	
	
		System.out.println("**************************************** checkReservationForBinFinishedGoodsWithQty  ***************************************");
		
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
		
		System.out.println("binRes_BodyWareHouse  				: "+actbinRes_BodyWareHouse					+"  Value Expected : "+expbinRes_BodyWareHouse);
		System.out.println("binRes_BodyQtyToReserve  			: "+actbinRes_BodyQtyToReserve				+" 	Value Expected : "+expbinRes_BodyQtyToReserve);
		System.out.println("binRes_BodyBin  					: "+actbinRes_BodyBin						+" 	Value Expected : "+expbinRes_BodyBin);
		System.out.println("binRes_BodyAvailableQty  			: "+actbinRes_BodyAvailableQty				+" 	Value Expected : "+expbinRes_BodyAvailableQty);
		System.out.println("binRes_BodyReleasedQty  			: "+actbinRes_BodyReleasedQty				+" 	Value Expected : "+expbinRes_BodyReleasedQty);
		System.out.println("binRes_BodyTotalReservedQty  		: "+actbinRes_BodyTotalReservedQty			+"  Value Expected : "+expbinRes_BodyTotalReservedQty);
		System.out.println("binRes_BodyBinQty  					: "+actbinRes_BodyBinQty					+" 	Value Expected : "+expbinRes_BodyBinQty);
		System.out.println("binRes_BodySkidId  					: "+actbinRes_BodySkidId					+" 	Value Expected : "+expbinRes_BodySkidId);
		System.out.println("binRes_BodyAllocStatus  			: "+actbinRes_BodyAllocStatus				+" 	Value Expected : "+expbinRes_BodyAllocStatus);
		System.out.println("binRes_BodyInvStatus  				: "+actbinRes_BodyInvStatus					+" 	Value Expected : "+expbinRes_BodyInvStatus);
		System.out.println("binRes_BodyLotNo  					: "+actbinRes_BodyLotNo						+" 	Value Expected : "+expbinRes_BodyLotNo);
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("binRes_WarehouseRow1  			    : "+actbinRes_WarehouseRow1					+" 	Value Expected : "+expbinRes_WarehouseRow1);
		System.out.println("binRes_QtyToReserveRow1  			: "+actbinRes_QtyToReserveRow1				+" 	Value Expected : "+expbinRes_QtyToReserveRow1);
		System.out.println("binRes_BinNoRow1  					: "+actbinRes_BinNoRow1						+" 	Value Expected : "+expbinRes_BinNoRow1);
		System.out.println("binRes_AvailableQtyRow1  			: "+actbinRes_AvailableQtyRow1				+" 	Value Expected : "+expbinRes_AvailableQtyRow1);
		System.out.println("binRes_ReleaseQtyRow1  				: "+actbinRes_ReleaseQtyRow1				+" 	Value Expected : "+expbinRes_ReleaseQtyRow1);
		System.out.println("binRes_TotalreservedQtyRow1 		: "+actbinRes_TotalreservedQtyRow1   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow1);
		System.out.println("binRes_BinQtyRow1  					: "+actbinRes_BinQtyRow1					+" 	Value Expected : "+expbinRes_BinQtyRow1);
		System.out.println("binRes_SkidIdRow1  					: "+actbinRes_SkidIdRow1					+" 	Value Expected : "+expbinRes_SkidIdRow1);
		System.out.println("binRes_AllocStatusRow1  			: "+actbinRes_AllocStatusRow1				+" 	Value Expected : "+expbinRes_AllocStatusRow1);
		System.out.println("binRes_InvStatusRow1  				: "+actbinRes_InvStatusRow1					+"  Value Expected : "+expbinRes_InvStatusRow1);
		System.out.println("binRes_LotNoRow1  					: "+actbinRes_LotNoRow1						+"  Value Expected : "+expbinRes_LotNoRow1);
		
		System.out.println("binRes_WarehouseRow2  			    : "+actbinRes_WarehouseRow2					+" 	Value Expected : "+expbinRes_WarehouseRow2);
		System.out.println("binRes_QtyToReserveRow2  			: "+actbinRes_QtyToReserveRow2				+" 	Value Expected : "+expbinRes_QtyToReserveRow2);
		System.out.println("binRes_BinNoRow2  					: "+actbinRes_BinNoRow2						+" 	Value Expected : "+expbinRes_BinNoRow2);
		System.out.println("binRes_AvailableQtyRow2  			: "+actbinRes_AvailableQtyRow2				+" 	Value Expected : "+expbinRes_AvailableQtyRow2);
		System.out.println("binRes_ReleaseQtyRow2  				: "+actbinRes_ReleaseQtyRow2				+" 	Value Expected : "+expbinRes_ReleaseQtyRow2);
		System.out.println("binRes_TotalreservedQtyRow2 		: "+actbinRes_TotalreservedQtyRow2   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow2);
		System.out.println("binRes_BinQtyRow2  					: "+actbinRes_BinQtyRow2					+" 	Value Expected : "+expbinRes_BinQtyRow2);
		System.out.println("binRes_SkidIdRow2  					: "+actbinRes_SkidIdRow2					+" 	Value Expected : "+expbinRes_SkidIdRow2);
		System.out.println("binRes_AllocStatusRow2  			: "+actbinRes_AllocStatusRow2				+" 	Value Expected : "+expbinRes_AllocStatusRow2);
		System.out.println("binRes_InvStatusRow2  				: "+actbinRes_InvStatusRow2					+"  Value Expected : "+expbinRes_InvStatusRow2);
		System.out.println("binRes_LotNoRow2  					: "+actbinRes_LotNoRow2						+"  Value Expected : "+expbinRes_LotNoRow2);
		
		
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				&& actbinRes_BodyWareHouse==expbinRes_BodyWareHouse && actbinRes_BodyQtyToReserve==expbinRes_BodyQtyToReserve
				&& actbinRes_BodyBin==expbinRes_BodyBin && actbinRes_BodyAvailableQty==expbinRes_BodyAvailableQty
				&& actbinRes_BodyReleasedQty==expbinRes_BodyReleasedQty && actbinRes_BodyTotalReservedQty==expbinRes_BodyTotalReservedQty
				&& actbinRes_BodyBinQty==expbinRes_BodyBinQty && actbinRes_BodySkidId==expbinRes_BodySkidId
				&& actbinRes_BodyAllocStatus==expbinRes_BodyAllocStatus && actbinRes_BodyInvStatus==expbinRes_BodyInvStatus
				&& actbinRes_BodyLotNo==expbinRes_BodyLotNo
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actbinRes_WarehouseRow1.equalsIgnoreCase(expbinRes_WarehouseRow1) && actbinRes_QtyToReserveRow1.equalsIgnoreCase(expbinRes_QtyToReserveRow1)
				&& actbinRes_BinNoRow1.equalsIgnoreCase(expbinRes_BinNoRow1) && actbinRes_AvailableQtyRow1.equalsIgnoreCase(expbinRes_AvailableQtyRow1)
				&& actbinRes_ReleaseQtyRow1.equalsIgnoreCase(expbinRes_ReleaseQtyRow1)
				&& actbinRes_TotalreservedQtyRow1.equalsIgnoreCase(expbinRes_TotalreservedQtyRow1)
				&& actbinRes_BinQtyRow1.equalsIgnoreCase(expbinRes_BinQtyRow1) && actbinRes_SkidIdRow1==expbinRes_SkidIdRow1
				&& actbinRes_AllocStatusRow1==expbinRes_AllocStatusRow1 && actbinRes_InvStatusRow1.equalsIgnoreCase(expbinRes_InvStatusRow1)
				&& actbinRes_LotNoRow1.equalsIgnoreCase(expbinRes_LotNoRow1)
				
				&& actbinRes_WarehouseRow2.equalsIgnoreCase(expbinRes_WarehouseRow2) && actbinRes_QtyToReserveRow2.equalsIgnoreCase(expbinRes_QtyToReserveRow2)
				&& actbinRes_BinNoRow2.equalsIgnoreCase(expbinRes_BinNoRow2) && actbinRes_AvailableQtyRow2.equalsIgnoreCase(expbinRes_AvailableQtyRow2)
				&& actbinRes_ReleaseQtyRow2.equalsIgnoreCase(expbinRes_ReleaseQtyRow2)
				&& actbinRes_TotalreservedQtyRow2.equalsIgnoreCase(expbinRes_TotalreservedQtyRow2)
				&& actbinRes_BinQtyRow2.equalsIgnoreCase(expbinRes_BinQtyRow2) && actbinRes_SkidIdRow2==expbinRes_SkidIdRow2
				&& actbinRes_AllocStatusRow2==expbinRes_AllocStatusRow2 && actbinRes_InvStatusRow2.equalsIgnoreCase(expbinRes_InvStatusRow2)
				&& actbinRes_LotNoRow2.equalsIgnoreCase(expbinRes_LotNoRow2))
		{
			System.out.println("Fourth if");
			return true;
		}
		else
		{
			return false;
		}
	}
					



	
	
	
	public boolean checkSalesOrderVoucherWithNoReservation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
		select1stRow_10thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSalesOrderVoucherWithNoReservation  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}
	

	
	public boolean checkSalesOrderVoucherAfterSavingOnPreviousOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
		System.out.println("netAmount ; "+netAmount.getText());
		
		// Actual
		String actdocumentNumberTxt 	=documentNumberTxt.getAttribute("value");
		String actcustomerAccountTxt	=customerAccountTxt.getAttribute("value");
		
		String actWareHouseR1C1     	=select1stRow_1stColumn.getText();
		String actItemR1C2          	=select1stRow_2ndColumn.getText();
		String actUnitsR1C3         	=select1stRow_3rdColumn.getText();
		String actRDR1C4            	=select1stRow_4thColumn.getText();
		String actAqR1C5            	=select1stRow_5thColumn.getText();
		String actFqR1C6            	=select1stRow_6thColumn.getText();
		String actQtyR1C7           	=select1stRow_7thColumn.getText();
		boolean actReserveR1C8       	=select1stRow_8thColumn.getText().isEmpty();
		boolean actLsalesOrdersR1C9  	=select1stRow_9thColumn.getText().isEmpty();
		String actRateR1C10         	=select1stRow_10thColumn.getText();
		String actGrossR1C11        	=select1stRow_11thColumn.getText();
		
		String actnetAmount         	=netAmount.getText();
	
		// Expected
		String expdocumentNumberTxt 	="1";
		String expcustomerAccountTxt	="Customer A";
		
		String expWareHouseR1C1     	="SECUNDERABAD";
		String expItemR1C2          	="BIN FINISHED GOODS ITEM";
		String expUnitsR1C3         	="Pcs";
		String expRDR1C4            	="0.00";
		String expAqR1C5            	="2.00";
		String expFqR1C6            	="0.00";
		String expQtyR1C7           	="2.00";
		boolean expReserveR1C8       	=true;
		boolean expLsalesOrdersR1C9  	=true;
		String expRateR1C10         	="10.00";
		String expGrossR1C11        	="20.00";
		
		String expnetAmount         	="20.00";
		
		
		System.out.println("************************************* checkSalesOrderVoucherAfterSavingOnPreviousOption  *********************************");
		
		System.out.println("documentNumberTxt  	:  "+actdocumentNumberTxt 	+" value Expected : "+expdocumentNumberTxt);
		System.out.println("customerAccountTxt 	:  "+actcustomerAccountTxt 	+" value Expected : "+expcustomerAccountTxt);
		
		System.out.println("WareHouseR1C1  		:  "+actWareHouseR1C1 		+" value Expected : "+expWareHouseR1C1);
		System.out.println("ItemR1C2  			:  "+actItemR1C2 			+" value Expected : "+expItemR1C2);
		System.out.println("UnitsR1C3 			:  "+actUnitsR1C3 			+" value Expected : "+expUnitsR1C3);
		System.out.println("RDR1C4  			:  "+actRDR1C4 				+" value Expected : "+expRDR1C4);
		System.out.println("AqR1C5  			:  "+actAqR1C5 				+" value Expected : "+expAqR1C5);
		System.out.println("FqR1C6  			:  "+actFqR1C6 				+" value Expected : "+expFqR1C6);
		System.out.println("QtyR1C7  			:  "+actQtyR1C7 			+" value Expected : "+expQtyR1C7);
		System.out.println("ReserveR1C8  		:  "+actReserveR1C8 		+" value Expected : "+expReserveR1C8);
		System.out.println("LsalesOrdersR1C9  	:  "+actLsalesOrdersR1C9 	+" value Expected : "+expLsalesOrdersR1C9);
		System.out.println("RateR1C10  			:  "+actRateR1C10 			+" value Expected : "+expRateR1C10);
		System.out.println("GrossR1C11  		:  "+actGrossR1C11 			+" value Expected : "+expGrossR1C11);
		
		System.out.println("netAmount  			:  "+actnetAmount 			+" value Expected : "+expnetAmount);
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actWareHouseR1C1.equalsIgnoreCase(expWareHouseR1C1) && actItemR1C2.equalsIgnoreCase(expItemR1C2)
				&& actUnitsR1C3.equalsIgnoreCase(expUnitsR1C3) && actRDR1C4.equalsIgnoreCase(expRDR1C4) && actAqR1C5.equalsIgnoreCase(expAqR1C5)
				&& actFqR1C6.equalsIgnoreCase(expFqR1C6) && actQtyR1C7.equalsIgnoreCase(expQtyR1C7) && actReserveR1C8==expReserveR1C8
				&& actLsalesOrdersR1C9==expLsalesOrdersR1C9 && actRateR1C10.equalsIgnoreCase(expRateR1C10) && actGrossR1C11.equalsIgnoreCase(expGrossR1C11)
				
				&& actnetAmount.equalsIgnoreCase(expnetAmount))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			return false;
		}
	}
	



	public boolean checkStockReservationForBinFoodGoodsWithQtySecondRowForConsuming() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
		
		
		// Actual
		
		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();
		
				
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();
		
		boolean actbinRes_BodyWareHouse				=binRes_BodyWareHouse.isDisplayed();
		boolean actbinRes_BodyQtyToReserve			=binRes_BodyQtyToReserve.isDisplayed();
		boolean actbinRes_BodyBin					=binRes_BodyBin.isDisplayed();
		boolean actbinRes_BodyAvailableQty			=binRes_BodyAvailableQty.isDisplayed();
		boolean actbinRes_BodyReleasedQty			=binRes_BodyReleasedQty.isDisplayed();
		
		
				
		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", binRes_BodyLotNo);
		 
		
		boolean actbinRes_BodyTotalReservedQty		=binRes_BodyTotalReservedQty.isDisplayed();
		boolean actbinRes_BodyBinQty				=binRes_BodyBinQty.isDisplayed();
		boolean actbinRes_BodySkidId				=binRes_BodySkidId.isDisplayed();
		boolean actbinRes_BodyAllocStatus			=binRes_BodyAllocStatus.isDisplayed();
		boolean actbinRes_BodyInvStatus				=binRes_BodyInvStatus.isDisplayed();
		boolean actbinRes_BodyLotNo					=binRes_BodyLotNo.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actbinRes_WarehouseRow1				=binRes_WarehouseRow1.getText();
		String actbinRes_QtyToReserveRow1			=binRes_QtyToReserveRow1.getText();
		String actbinRes_BinNoRow1					=binRes_BinNoRow1.getText();
		String actbinRes_AvailableQtyRow1			=binRes_AvailableQtyRow1.getText();
		String actbinRes_ReleaseQtyRow1				=binRes_ReleaseQtyRow1.getText();
		String actbinRes_TotalreservedQtyRow1		=binRes_TotalreservedQtyRow1.getText();
		String actbinRes_BinQtyRow1					=binRes_BinQtyRow1.getText();
		boolean actbinRes_SkidIdRow1				=binRes_SkidIdRow1.getText().isEmpty();
		boolean actbinRes_AllocStatusRow1			=binRes_AllocStatusRow1.getText().isEmpty();
		String actbinRes_InvStatusRow1				=binRes_InvStatusRow1.getText();
		String actbinRes_LotNoRow1					=binRes_LotNoRow1.getText();
		
		String actbinRes_WarehouseRow2				=binRes_WarehouseRow2.getText();
		String actbinRes_QtyToReserveRow2			=binRes_QtyToReserveRow2.getText();
		String actbinRes_BinNoRow2					=binRes_BinNoRow2.getText();
		String actbinRes_AvailableQtyRow2			=binRes_AvailableQtyRow2.getText();
		String actbinRes_ReleaseQtyRow2				=binRes_ReleaseQtyRow2.getText();
		String actbinRes_TotalreservedQtyRow2		=binRes_TotalreservedQtyRow2.getText();
		String actbinRes_BinQtyRow2					=binRes_BinQtyRow2.getText();
		boolean actbinRes_SkidIdRow2				=binRes_SkidIdRow2.getText().isEmpty();
		boolean actbinRes_AllocStatusRow2			=binRes_AllocStatusRow2.getText().isEmpty();
		String actbinRes_InvStatusRow2				=binRes_InvStatusRow2.getText();
		String actbinRes_LotNoRow2					=binRes_LotNoRow2.getText();
	
		// Expected
	
		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;
		
		boolean expbinRes_BodyWareHouse				=true;
		boolean expbinRes_BodyQtyToReserve			=true;
		boolean expbinRes_BodyBin					=true;
		boolean expbinRes_BodyAvailableQty			=true;
		boolean expbinRes_BodyReleasedQty			=true;
		boolean expbinRes_BodyTotalReservedQty		=true;
		boolean expbinRes_BodyBinQty				=true;
		boolean expbinRes_BodySkidId				=true;
		boolean expbinRes_BodyAllocStatus			=true;
		boolean expbinRes_BodyInvStatus				=true;
		boolean expbinRes_BodyLotNo					=true;
		
		
		String expTextres_LeftPanelWareHouseRow1	="Secunderabad";
		String expTextres_LeftPanelItemCodeRow1		="BFGI";
		String expTextres_LeftPanelItemNameRow1		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="2";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expbinRes_WarehouseRow1				="SECUNDERABAD";
		String expbinRes_QtyToReserveRow1			="0";
		String expbinRes_BinNoRow1					="Bin Update";
		String expbinRes_AvailableQtyRow1			="5";
		String expbinRes_ReleaseQtyRow1				="0";
		String expbinRes_TotalreservedQtyRow1		="0";
		String expbinRes_BinQtyRow1					="5";
		boolean expbinRes_SkidIdRow1				=true;
		boolean expbinRes_AllocStatusRow1			=true;
		String expbinRes_InvStatusRow1				="AVAILABLE";
		String expbinRes_LotNoRow1					="0";
		
		String expbinRes_WarehouseRow2				="SECUNDERABAD";
		String expbinRes_QtyToReserveRow2			="0";
		String expbinRes_BinNoRow2					="Bin1";
		String expbinRes_AvailableQtyRow2			="3";
		String expbinRes_ReleaseQtyRow2				="0";
		String expbinRes_TotalreservedQtyRow2		="0";
		String expbinRes_BinQtyRow2					="3";
		boolean expbinRes_SkidIdRow2				=true;
		boolean expbinRes_AllocStatusRow2			=true;
		String expbinRes_InvStatusRow2				="AVAILABLE";
		String expbinRes_LotNoRow2					="0";
	
	
		System.out.println("**************************************** checkStockReservationForBinFoodGoodsWithQtySecondRowForConsuming  ***************************************");
		
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
		
		System.out.println("binRes_BodyWareHouse  				: "+actbinRes_BodyWareHouse					+"  Value Expected : "+expbinRes_BodyWareHouse);
		System.out.println("binRes_BodyQtyToReserve  			: "+actbinRes_BodyQtyToReserve				+" 	Value Expected : "+expbinRes_BodyQtyToReserve);
		System.out.println("binRes_BodyBin  					: "+actbinRes_BodyBin						+" 	Value Expected : "+expbinRes_BodyBin);
		System.out.println("binRes_BodyAvailableQty  			: "+actbinRes_BodyAvailableQty				+" 	Value Expected : "+expbinRes_BodyAvailableQty);
		System.out.println("binRes_BodyReleasedQty  			: "+actbinRes_BodyReleasedQty				+" 	Value Expected : "+expbinRes_BodyReleasedQty);
		System.out.println("binRes_BodyTotalReservedQty  		: "+actbinRes_BodyTotalReservedQty			+"  Value Expected : "+expbinRes_BodyTotalReservedQty);
		System.out.println("binRes_BodyBinQty  					: "+actbinRes_BodyBinQty					+" 	Value Expected : "+expbinRes_BodyBinQty);
		System.out.println("binRes_BodySkidId  					: "+actbinRes_BodySkidId					+" 	Value Expected : "+expbinRes_BodySkidId);
		System.out.println("binRes_BodyAllocStatus  			: "+actbinRes_BodyAllocStatus				+" 	Value Expected : "+expbinRes_BodyAllocStatus);
		System.out.println("binRes_BodyInvStatus  				: "+actbinRes_BodyInvStatus					+" 	Value Expected : "+expbinRes_BodyInvStatus);
		System.out.println("binRes_BodyLotNo  					: "+actbinRes_BodyLotNo						+" 	Value Expected : "+expbinRes_BodyLotNo);
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("binRes_WarehouseRow1  			    : "+actbinRes_WarehouseRow1					+" 	Value Expected : "+expbinRes_WarehouseRow1);
		System.out.println("binRes_QtyToReserveRow1  			: "+actbinRes_QtyToReserveRow1				+" 	Value Expected : "+expbinRes_QtyToReserveRow1);
		System.out.println("binRes_BinNoRow1  					: "+actbinRes_BinNoRow1						+" 	Value Expected : "+expbinRes_BinNoRow1);
		System.out.println("binRes_AvailableQtyRow1  			: "+actbinRes_AvailableQtyRow1				+" 	Value Expected : "+expbinRes_AvailableQtyRow1);
		System.out.println("binRes_ReleaseQtyRow1  				: "+actbinRes_ReleaseQtyRow1				+" 	Value Expected : "+expbinRes_ReleaseQtyRow1);
		System.out.println("binRes_TotalreservedQtyRow1 		: "+actbinRes_TotalreservedQtyRow1   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow1);
		System.out.println("binRes_BinQtyRow1  					: "+actbinRes_BinQtyRow1					+" 	Value Expected : "+expbinRes_BinQtyRow1);
		System.out.println("binRes_SkidIdRow1  					: "+actbinRes_SkidIdRow1					+" 	Value Expected : "+expbinRes_SkidIdRow1);
		System.out.println("binRes_AllocStatusRow1  			: "+actbinRes_AllocStatusRow1				+" 	Value Expected : "+expbinRes_AllocStatusRow1);
		System.out.println("binRes_InvStatusRow1  				: "+actbinRes_InvStatusRow1					+"  Value Expected : "+expbinRes_InvStatusRow1);
		System.out.println("binRes_LotNoRow1  					: "+actbinRes_LotNoRow1						+"  Value Expected : "+expbinRes_LotNoRow1);
		
		System.out.println("binRes_WarehouseRow2  			    : "+actbinRes_WarehouseRow2					+" 	Value Expected : "+expbinRes_WarehouseRow2);
		System.out.println("binRes_QtyToReserveRow2  			: "+actbinRes_QtyToReserveRow2				+" 	Value Expected : "+expbinRes_QtyToReserveRow2);
		System.out.println("binRes_BinNoRow2  					: "+actbinRes_BinNoRow2						+" 	Value Expected : "+expbinRes_BinNoRow2);
		System.out.println("binRes_AvailableQtyRow2  			: "+actbinRes_AvailableQtyRow2				+" 	Value Expected : "+expbinRes_AvailableQtyRow2);
		System.out.println("binRes_ReleaseQtyRow2  				: "+actbinRes_ReleaseQtyRow2				+" 	Value Expected : "+expbinRes_ReleaseQtyRow2);
		System.out.println("binRes_TotalreservedQtyRow2 		: "+actbinRes_TotalreservedQtyRow2   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow2);
		System.out.println("binRes_BinQtyRow2  					: "+actbinRes_BinQtyRow2					+" 	Value Expected : "+expbinRes_BinQtyRow2);
		System.out.println("binRes_SkidIdRow2  					: "+actbinRes_SkidIdRow2					+" 	Value Expected : "+expbinRes_SkidIdRow2);
		System.out.println("binRes_AllocStatusRow2  			: "+actbinRes_AllocStatusRow2				+" 	Value Expected : "+expbinRes_AllocStatusRow2);
		System.out.println("binRes_InvStatusRow2  				: "+actbinRes_InvStatusRow2					+"  Value Expected : "+expbinRes_InvStatusRow2);
		System.out.println("binRes_LotNoRow2  					: "+actbinRes_LotNoRow2						+"  Value Expected : "+expbinRes_LotNoRow2);
		
		
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				&& actbinRes_BodyWareHouse==expbinRes_BodyWareHouse && actbinRes_BodyQtyToReserve==expbinRes_BodyQtyToReserve
				&& actbinRes_BodyBin==expbinRes_BodyBin && actbinRes_BodyAvailableQty==expbinRes_BodyAvailableQty
				&& actbinRes_BodyReleasedQty==expbinRes_BodyReleasedQty && actbinRes_BodyTotalReservedQty==expbinRes_BodyTotalReservedQty
				&& actbinRes_BodyBinQty==expbinRes_BodyBinQty && actbinRes_BodySkidId==expbinRes_BodySkidId
				&& actbinRes_BodyAllocStatus==expbinRes_BodyAllocStatus && actbinRes_BodyInvStatus==expbinRes_BodyInvStatus
				&& actbinRes_BodyLotNo==expbinRes_BodyLotNo
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actbinRes_WarehouseRow1.equalsIgnoreCase(expbinRes_WarehouseRow1) && actbinRes_QtyToReserveRow1.equalsIgnoreCase(expbinRes_QtyToReserveRow1)
				&& actbinRes_BinNoRow1.equalsIgnoreCase(expbinRes_BinNoRow1) && actbinRes_AvailableQtyRow1.equalsIgnoreCase(expbinRes_AvailableQtyRow1)
				&& actbinRes_ReleaseQtyRow1.equalsIgnoreCase(expbinRes_ReleaseQtyRow1)
				&& actbinRes_TotalreservedQtyRow1.equalsIgnoreCase(expbinRes_TotalreservedQtyRow1)
				&& actbinRes_BinQtyRow1.equalsIgnoreCase(expbinRes_BinQtyRow1) && actbinRes_SkidIdRow1==expbinRes_SkidIdRow1
				&& actbinRes_AllocStatusRow1==expbinRes_AllocStatusRow1 && actbinRes_InvStatusRow1.equalsIgnoreCase(expbinRes_InvStatusRow1)
				&& actbinRes_LotNoRow1.equalsIgnoreCase(expbinRes_LotNoRow1)
				
				&& actbinRes_WarehouseRow2.equalsIgnoreCase(expbinRes_WarehouseRow2) && actbinRes_QtyToReserveRow2.equalsIgnoreCase(expbinRes_QtyToReserveRow2)
				&& actbinRes_BinNoRow2.equalsIgnoreCase(expbinRes_BinNoRow2) && actbinRes_AvailableQtyRow2.equalsIgnoreCase(expbinRes_AvailableQtyRow2)
				&& actbinRes_ReleaseQtyRow2.equalsIgnoreCase(expbinRes_ReleaseQtyRow2)
				&& actbinRes_TotalreservedQtyRow2.equalsIgnoreCase(expbinRes_TotalreservedQtyRow2)
				&& actbinRes_BinQtyRow2.equalsIgnoreCase(expbinRes_BinQtyRow2) && actbinRes_SkidIdRow2==expbinRes_SkidIdRow2
				&& actbinRes_AllocStatusRow2==expbinRes_AllocStatusRow2 && actbinRes_InvStatusRow2.equalsIgnoreCase(expbinRes_InvStatusRow2)
				&& actbinRes_LotNoRow2.equalsIgnoreCase(expbinRes_LotNoRow2))
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			return true;
		}
		else
		{
			
			 
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}



	public boolean checkAllocatingStockOnBinFinishedGoodsItemThroughPickOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binRes_QtyToReserveRow1));
		binRes_QtyToReserveRow1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		// Actual
		
		String actWareHouseR2C1      =select2ndRow_1stColumn.getText();
		String actItemR2C2           =select2ndRow_2ndColumn.getText();
		String actUnitsR2C3          =select2ndRow_3rdColumn.getText();
		String actRDR2C4             =select2ndRow_4thColumn.getText();
		String actAqR2C5             =select2ndRow_5thColumn.getText();
		String actFqR2C6             =select2ndRow_6thColumn.getText();
		String actQtyR2C7            =select2ndRow_7thColumn.getText();
		String actReserveR2C8        =select2ndRow_8thColumn.getText();
		boolean actLsalesOrdersR2C9  =select2ndRow_9thColumn.getText().isEmpty();
		String actRateR2C10          =select2ndRow_10thColumn.getText();
		String actGrossR2C11         =select2ndRow_11thColumn.getText();
		
	
		// Expected
	
		String expWareHouseR2C1      ="SECUNDERABAD";
		String expItemR2C2           ="BIN FINISHED GOODS ITEM";
		String expUnitsR2C3          ="Pcs";
		String expRDR2C4             ="0.00";
		String expAqR2C5             ="2.00";
		String expFqR2C6             ="0.00";
		String expQtyR2C7            ="2.00";
		String expReserveR2C8        ="Reserved";
		boolean expLsalesOrdersR2C9  =true;
		String expRateR2C10          ="10.00";
		String expGrossR2C11         ="20.00";
		
		
		System.out.println("************************************* checkAllocatingStockOnBinFinishedGoodsItemThroughPickOption  *********************************");
		
		System.out.println("WareHouseR2C1  		:  "+actWareHouseR2C1 		+" value Expected : "+expWareHouseR2C1);
		System.out.println("ItemR2C2  			:  "+actItemR2C2 			+" value Expected : "+expItemR2C2);
		System.out.println("UnitsR2C3 			:  "+actUnitsR2C3 			+" value Expected : "+expUnitsR2C3);
		System.out.println("RDR2C4  			:  "+actRDR2C4 				+" value Expected : "+expRDR2C4);
		System.out.println("AqR2C5  			:  "+actAqR2C5 				+" value Expected : "+expAqR2C5);
		System.out.println("FqR2C6  			:  "+actFqR2C6 				+" value Expected : "+expFqR2C6);
		System.out.println("QtyR2C7  			:  "+actQtyR2C7 			+" value Expected : "+expQtyR2C7);
		System.out.println("ReserveR2C8  		:  "+actReserveR2C8 		+" value Expected : "+expReserveR2C8);
		System.out.println("LsalesOrdersR2C9  	:  "+actLsalesOrdersR2C9 	+" value Expected : "+expLsalesOrdersR2C9);
		System.out.println("RateR2C10  			:  "+actRateR2C10 			+" value Expected : "+expRateR2C10);
		System.out.println("GrossR2C11  		:  "+actGrossR2C11 			+" value Expected : "+expGrossR2C11);
		
		
		if(actWareHouseR2C1.equalsIgnoreCase(expWareHouseR2C1) && actItemR2C2.equalsIgnoreCase(expItemR2C2)
				&& actUnitsR2C3.equalsIgnoreCase(expUnitsR2C3) && actRDR2C4.equalsIgnoreCase(expRDR2C4) && actAqR2C5.equalsIgnoreCase(expAqR2C5)
				&& actFqR2C6.equalsIgnoreCase(expFqR2C6) && actQtyR2C7.equalsIgnoreCase(expQtyR2C7) && actReserveR2C8.equalsIgnoreCase(expReserveR2C8)
				&& actLsalesOrdersR2C9==expLsalesOrdersR2C9 && actRateR2C10.equalsIgnoreCase(expRateR2C10) && actGrossR2C11.equalsIgnoreCase(expGrossR2C11))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	

	public boolean checkStockReservationForBinFinishedGoodsWithQtyThirdRowForConsuming() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
    	so_enter_FQTxt.sendKeys("1");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		String actTextres_LeftPanelWareHouseRow1=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1	=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1	=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1	=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1	=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2	=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2	=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2	=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2	=res_LeftPanelBaseUnitRow2.getText();
		
		String actTextres_LeftPanelWareHouseRow3=res_LeftPanelWareHouseRow3.getText();
		String actTextres_LeftPanelItemCodeRow3	=res_LeftPanelItemCodeRow3.getText();
		String actTextres_LeftPanelItemNameRow3	=res_LeftPanelItemNameRow3.getText();
		String actTextres_LeftPanelItemQtyRow3	=res_LeftPanelItemQtyRow3.getText();
		String actTextres_LeftPanelBaseUnitRow3	=res_LeftPanelBaseUnitRow3.getText();
		
		String actbinRes_WarehouseRow1			=binRes_WarehouseRow1.getText();
		String actbinRes_QtyToReserveRow1		=binRes_QtyToReserveRow1.getText();
		String actbinRes_BinNoRow1				=binRes_BinNoRow1.getText();
		String actbinRes_AvailableQtyRow1		=binRes_AvailableQtyRow1.getText();
		String actbinRes_ReleaseQtyRow1			=binRes_ReleaseQtyRow1.getText();
		String actbinRes_TotalreservedQtyRow1	=binRes_TotalreservedQtyRow1.getText();
		String actbinRes_BinQtyRow1				=binRes_BinQtyRow1.getText();
		boolean actbinRes_SkidIdRow1			=binRes_SkidIdRow1.getText().isEmpty();
		boolean actbinRes_AllocStatusRow1		=binRes_AllocStatusRow1.getText().isEmpty();
		String actbinRes_InvStatusRow1			=binRes_InvStatusRow1.getText();
		String actbinRes_LotNoRow1				=binRes_LotNoRow1.getText();
		
		String actbinRes_WarehouseRow2			=binRes_WarehouseRow2.getText();
		String actbinRes_QtyToReserveRow2		=binRes_QtyToReserveRow2.getText();
		String actbinRes_BinNoRow2				=binRes_BinNoRow2.getText();
		String actbinRes_AvailableQtyRow2		=binRes_AvailableQtyRow2.getText();
		String actbinRes_ReleaseQtyRow2			=binRes_ReleaseQtyRow2.getText();
		String actbinRes_TotalreservedQtyRow2	=binRes_TotalreservedQtyRow2.getText();
		String actbinRes_BinQtyRow2				=binRes_BinQtyRow2.getText();
		boolean actbinRes_SkidIdRow2			=binRes_SkidIdRow2.getText().isEmpty();
		boolean actbinRes_AllocStatusRow2		=binRes_AllocStatusRow2.getText().isEmpty();
		String actbinRes_InvStatusRow2			=binRes_InvStatusRow2.getText();
		String actbinRes_LotNoRow2				=binRes_LotNoRow2.getText();
	
		// Expected
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BFGI";
		String expTextres_LeftPanelItemNameRow1		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="2";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="BFGI";
		String expTextres_LeftPanelItemNameRow2		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow2		="2";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow3	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow3		="BFGI";
		String expTextres_LeftPanelItemNameRow3		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow3		="1";
		String expTextres_LeftPanelBaseUnitRow3		="Pcs";
		
		String expbinRes_WarehouseRow1				="SECUNDERABAD";
		String expbinRes_QtyToReserveRow1			="0";
		String expbinRes_BinNoRow1					="Bin Update";
		String expbinRes_AvailableQtyRow1			="3";
		String expbinRes_ReleaseQtyRow1				="0";
		String expbinRes_TotalreservedQtyRow1		="2";
		String expbinRes_BinQtyRow1					="5";
		boolean expbinRes_SkidIdRow1				=true;
		boolean expbinRes_AllocStatusRow1			=true;
		String expbinRes_InvStatusRow1				="AVAILABLE";
		String expbinRes_LotNoRow1					="0";
		
		String expbinRes_WarehouseRow2				="SECUNDERABAD";
		String expbinRes_QtyToReserveRow2			="0";
		String expbinRes_BinNoRow2					="Bin1";
		String expbinRes_AvailableQtyRow2			="3";
		String expbinRes_ReleaseQtyRow2				="0";
		String expbinRes_TotalreservedQtyRow2		="0";
		String expbinRes_BinQtyRow2					="3";
		boolean expbinRes_SkidIdRow2				=true;
		boolean expbinRes_AllocStatusRow2			=true;
		String expbinRes_InvStatusRow2				="AVAILABLE";
		String expbinRes_LotNoRow2					="0";
	
	
		System.out.println("**************************************** checkReservationForBinFinishedGoodsWithQtyThirdRowForConsuming  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("Textres_LeftPanelWareHouseRow3  	: "+actTextres_LeftPanelWareHouseRow3		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow3);
		
		System.out.println("Textres_LeftPanelItemCodeRow3  		: "+actTextres_LeftPanelItemCodeRow3		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow3);
		System.out.println("Textres_LeftPanelItemNameRow3  		: "+actTextres_LeftPanelItemNameRow3		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow3);
		System.out.println("Textres_LeftPanelItemQtyRow3  		: "+actTextres_LeftPanelItemQtyRow3			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow3);
		System.out.println("Textres_LeftPanelBaseUnitRow3  		: "+actTextres_LeftPanelBaseUnitRow3		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow3);
		
		System.out.println("binRes_WarehouseRow1  			    : "+actbinRes_WarehouseRow1					+" 	Value Expected : "+expbinRes_WarehouseRow1);
		System.out.println("binRes_QtyToReserveRow1  			: "+actbinRes_QtyToReserveRow1				+" 	Value Expected : "+expbinRes_QtyToReserveRow1);
		System.out.println("binRes_BinNoRow1  					: "+actbinRes_BinNoRow1						+" 	Value Expected : "+expbinRes_BinNoRow1);
		System.out.println("binRes_AvailableQtyRow1  			: "+actbinRes_AvailableQtyRow1				+" 	Value Expected : "+expbinRes_AvailableQtyRow1);
		System.out.println("binRes_ReleaseQtyRow1  				: "+actbinRes_ReleaseQtyRow1				+" 	Value Expected : "+expbinRes_ReleaseQtyRow1);
		System.out.println("binRes_TotalreservedQtyRow1 		: "+actbinRes_TotalreservedQtyRow1   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow1);
		System.out.println("binRes_BinQtyRow1  					: "+actbinRes_BinQtyRow1					+" 	Value Expected : "+expbinRes_BinQtyRow1);
		System.out.println("binRes_SkidIdRow1  					: "+actbinRes_SkidIdRow1					+" 	Value Expected : "+expbinRes_SkidIdRow1);
		System.out.println("binRes_AllocStatusRow1  			: "+actbinRes_AllocStatusRow1				+" 	Value Expected : "+expbinRes_AllocStatusRow1);
		System.out.println("binRes_InvStatusRow1  				: "+actbinRes_InvStatusRow1					+"  Value Expected : "+expbinRes_InvStatusRow1);
		System.out.println("binRes_LotNoRow1  					: "+actbinRes_LotNoRow1						+"  Value Expected : "+expbinRes_LotNoRow1);
		
		System.out.println("binRes_WarehouseRow2  			    : "+actbinRes_WarehouseRow2					+" 	Value Expected : "+expbinRes_WarehouseRow2);
		System.out.println("binRes_QtyToReserveRow2  			: "+actbinRes_QtyToReserveRow2				+" 	Value Expected : "+expbinRes_QtyToReserveRow2);
		System.out.println("binRes_BinNoRow2  					: "+actbinRes_BinNoRow2						+" 	Value Expected : "+expbinRes_BinNoRow2);
		System.out.println("binRes_AvailableQtyRow2  			: "+actbinRes_AvailableQtyRow2				+" 	Value Expected : "+expbinRes_AvailableQtyRow2);
		System.out.println("binRes_ReleaseQtyRow2  				: "+actbinRes_ReleaseQtyRow2				+" 	Value Expected : "+expbinRes_ReleaseQtyRow2);
		System.out.println("binRes_TotalreservedQtyRow2 		: "+actbinRes_TotalreservedQtyRow2   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow2);
		System.out.println("binRes_BinQtyRow2  					: "+actbinRes_BinQtyRow2					+" 	Value Expected : "+expbinRes_BinQtyRow2);
		System.out.println("binRes_SkidIdRow2  					: "+actbinRes_SkidIdRow2					+" 	Value Expected : "+expbinRes_SkidIdRow2);
		System.out.println("binRes_AllocStatusRow2  			: "+actbinRes_AllocStatusRow2				+" 	Value Expected : "+expbinRes_AllocStatusRow2);
		System.out.println("binRes_InvStatusRow2  				: "+actbinRes_InvStatusRow2					+"  Value Expected : "+expbinRes_InvStatusRow2);
		System.out.println("binRes_LotNoRow2  					: "+actbinRes_LotNoRow2						+"  Value Expected : "+expbinRes_LotNoRow2);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)

				&& actTextres_LeftPanelWareHouseRow3.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow3)
				
				&& actTextres_LeftPanelItemCodeRow3.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow3) && actTextres_LeftPanelItemNameRow3.equalsIgnoreCase(expTextres_LeftPanelItemNameRow3)
				&& actTextres_LeftPanelItemQtyRow3.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow3) && actTextres_LeftPanelBaseUnitRow3.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow3)

				&& actbinRes_WarehouseRow1.equalsIgnoreCase(expbinRes_WarehouseRow1) && actbinRes_QtyToReserveRow1.equalsIgnoreCase(expbinRes_QtyToReserveRow1)
				&& actbinRes_BinNoRow1.equalsIgnoreCase(expbinRes_BinNoRow1) && actbinRes_AvailableQtyRow1.equalsIgnoreCase(expbinRes_AvailableQtyRow1)
				&& actbinRes_ReleaseQtyRow1.equalsIgnoreCase(expbinRes_ReleaseQtyRow1)
				&& actbinRes_TotalreservedQtyRow1.equalsIgnoreCase(expbinRes_TotalreservedQtyRow1)
				&& actbinRes_BinQtyRow1.equalsIgnoreCase(expbinRes_BinQtyRow1) && actbinRes_SkidIdRow1==expbinRes_SkidIdRow1
				&& actbinRes_AllocStatusRow1==expbinRes_AllocStatusRow1 && actbinRes_InvStatusRow1.equalsIgnoreCase(expbinRes_InvStatusRow1)
				&& actbinRes_LotNoRow1.equalsIgnoreCase(expbinRes_LotNoRow1)
				
				&& actbinRes_WarehouseRow2.equalsIgnoreCase(expbinRes_WarehouseRow2) && actbinRes_QtyToReserveRow2.equalsIgnoreCase(expbinRes_QtyToReserveRow2)
				&& actbinRes_BinNoRow2.equalsIgnoreCase(expbinRes_BinNoRow2) && actbinRes_AvailableQtyRow2.equalsIgnoreCase(expbinRes_AvailableQtyRow2)
				&& actbinRes_ReleaseQtyRow2.equalsIgnoreCase(expbinRes_ReleaseQtyRow2)
				&& actbinRes_TotalreservedQtyRow2.equalsIgnoreCase(expbinRes_TotalreservedQtyRow2)
				&& actbinRes_BinQtyRow2.equalsIgnoreCase(expbinRes_BinQtyRow2) && actbinRes_SkidIdRow2==expbinRes_SkidIdRow2
				&& actbinRes_AllocStatusRow2==expbinRes_AllocStatusRow2 && actbinRes_InvStatusRow2.equalsIgnoreCase(expbinRes_InvStatusRow2)
				&& actbinRes_LotNoRow2.equalsIgnoreCase(expbinRes_LotNoRow2))
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			return true;
		}
		else
		{
			
			 
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}



	
	public boolean checkAllocatingStockOnBinFinishedGoodsItemThroughManualInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binRes_QtyToReserveRow1));
		binRes_QtyToReserveRow1.click();
		
		enter_QtyToReserve.sendKeys("1");
		enter_QtyToReserve.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		
		// Actual
		
		String actWareHouseR3C1      =select3rdRow_1stColumn.getText();
		String actItemR3C2           =select3rdRow_2ndColumn.getText();
		String actUnitsR3C3          =select3rdRow_3rdColumn.getText();
		String actRDR3C4             =select3rdRow_4thColumn.getText();
		String actAqR3C5             =select3rdRow_5thColumn.getText();
		String actFqR3C6             =select3rdRow_6thColumn.getText();
		String actQtyR3C7            =select3rdRow_7thColumn.getText();
		String actReserveR3C8        =select3rdRow_8thColumn.getText();
		boolean actLsalesOrdersR3C9  =select3rdRow_9thColumn.getText().isEmpty();
		String actRateR3C10          =select3rdRow_10thColumn.getText();
		String actGrossR3C11         =select3rdRow_11thColumn.getText();
		
	
		// Expected
	
		String expWareHouseR3C1      ="SECUNDERABAD";
		String expItemR3C2           ="BIN FINISHED GOODS ITEM";
		String expUnitsR3C3          ="Pcs";
		String expRDR3C4             ="0.00";
		String expAqR3C5             ="0.00";
		String expFqR3C6             ="1.00";
		String expQtyR3C7            ="1.00";
		String expReserveR3C8        ="Reserved";
		boolean expLsalesOrdersR3C9  =true;
		String expRateR3C10          ="10.00";
		String expGrossR3C11         ="10.00";
		
		
		System.out.println("************************************* checkAllocatingStockOnBinFinishedGoodsItemThroughPickOption  *********************************");
		
		System.out.println("WareHouseR3C1  		:  "+actWareHouseR3C1 		+" value Expected : "+expWareHouseR3C1);
		System.out.println("ItemR3C2  			:  "+actItemR3C2 			+" value Expected : "+expItemR3C2);
		System.out.println("UnitsR3C3 			:  "+actUnitsR3C3 			+" value Expected : "+expUnitsR3C3);
		System.out.println("RDR3C4  			:  "+actRDR3C4 				+" value Expected : "+expRDR3C4);
		System.out.println("AqR3C5  			:  "+actAqR3C5 				+" value Expected : "+expAqR3C5);
		System.out.println("FqR3C6  			:  "+actFqR3C6 				+" value Expected : "+expFqR3C6);
		System.out.println("QtyR3C7  			:  "+actQtyR3C7 			+" value Expected : "+expQtyR3C7);
		System.out.println("ReserveR3C8  		:  "+actReserveR3C8 		+" value Expected : "+expReserveR3C8);
		System.out.println("LsalesOrdersR3C9  	:  "+actLsalesOrdersR3C9 	+" value Expected : "+expLsalesOrdersR3C9);
		System.out.println("RateR3C10  			:  "+actRateR3C10 			+" value Expected : "+expRateR3C10);
		System.out.println("GrossR3C11  		:  "+actGrossR3C11 			+" value Expected : "+expGrossR3C11);
		
		
		if(actWareHouseR3C1.equalsIgnoreCase(expWareHouseR3C1) && actItemR3C2.equalsIgnoreCase(expItemR3C2)
				&& actUnitsR3C3.equalsIgnoreCase(expUnitsR3C3) && actRDR3C4.equalsIgnoreCase(expRDR3C4) && actAqR3C5.equalsIgnoreCase(expAqR3C5)
				&& actFqR3C6.equalsIgnoreCase(expFqR3C6) && actQtyR3C7.equalsIgnoreCase(expQtyR3C7) && actReserveR3C8.equalsIgnoreCase(expReserveR3C8)
				&& actLsalesOrdersR3C9==expLsalesOrdersR3C9 && actRateR3C10.equalsIgnoreCase(expRateR3C10) && actGrossR3C11.equalsIgnoreCase(expGrossR3C11))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	
	
	
	
	public boolean checkStockReservationForBinFinishedGoodsAfterConsumingInNextRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(200);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		select2ndRow_8thColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Reserve));
		enter_Reserve.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		
		// Actual
		String actTextres_LeftPanelWareHouseRow1=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1	=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1	=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1	=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1	=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2	=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2	=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2	=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2	=res_LeftPanelBaseUnitRow2.getText();
		
		String actTextres_LeftPanelWareHouseRow3=res_LeftPanelWareHouseRow3.getText();
		String actTextres_LeftPanelItemCodeRow3	=res_LeftPanelItemCodeRow3.getText();
		String actTextres_LeftPanelItemNameRow3	=res_LeftPanelItemNameRow3.getText();
		String actTextres_LeftPanelItemQtyRow3	=res_LeftPanelItemQtyRow3.getText();
		String actTextres_LeftPanelBaseUnitRow3	=res_LeftPanelBaseUnitRow3.getText();
		
		String actbinRes_WarehouseRow1			=binRes_WarehouseRow1.getText();
		String actbinRes_QtyToReserveRow1		=binRes_QtyToReserveRow1.getText();
		String actbinRes_BinNoRow1				=binRes_BinNoRow1.getText();
		String actbinRes_AvailableQtyRow1		=binRes_AvailableQtyRow1.getText();
		String actbinRes_ReleaseQtyRow1			=binRes_ReleaseQtyRow1.getText();
		String actbinRes_TotalreservedQtyRow1	=binRes_TotalreservedQtyRow1.getText();
		String actbinRes_BinQtyRow1				=binRes_BinQtyRow1.getText();
		boolean actbinRes_SkidIdRow1			=binRes_SkidIdRow1.getText().isEmpty();
		boolean actbinRes_AllocStatusRow1		=binRes_AllocStatusRow1.getText().isEmpty();
		String actbinRes_InvStatusRow1			=binRes_InvStatusRow1.getText();
		String actbinRes_LotNoRow1				=binRes_LotNoRow1.getText();
		
		String actbinRes_WarehouseRow2			=binRes_WarehouseRow2.getText();
		String actbinRes_QtyToReserveRow2		=binRes_QtyToReserveRow2.getText();
		String actbinRes_BinNoRow2				=binRes_BinNoRow2.getText();
		String actbinRes_AvailableQtyRow2		=binRes_AvailableQtyRow2.getText();
		String actbinRes_ReleaseQtyRow2			=binRes_ReleaseQtyRow2.getText();
		String actbinRes_TotalreservedQtyRow2	=binRes_TotalreservedQtyRow2.getText();
		String actbinRes_BinQtyRow2				=binRes_BinQtyRow2.getText();
		boolean actbinRes_SkidIdRow2			=binRes_SkidIdRow2.getText().isEmpty();
		boolean actbinRes_AllocStatusRow2		=binRes_AllocStatusRow2.getText().isEmpty();
		String actbinRes_InvStatusRow2			=binRes_InvStatusRow2.getText();
		String actbinRes_LotNoRow2				=binRes_LotNoRow2.getText();
	
		// Expected
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BFGI";
		String expTextres_LeftPanelItemNameRow1		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="2";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="BFGI";
		String expTextres_LeftPanelItemNameRow2		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow2		="2";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow3	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow3		="BFGI";
		String expTextres_LeftPanelItemNameRow3		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow3		="1";
		String expTextres_LeftPanelBaseUnitRow3		="Pcs";
		
		String expbinRes_WarehouseRow1				="SECUNDERABAD";
		String expbinRes_QtyToReserveRow1			="2";
		String expbinRes_BinNoRow1					="Bin Update";
		String expbinRes_AvailableQtyRow1			="4";
		String expbinRes_ReleaseQtyRow1				="0";
		String expbinRes_TotalreservedQtyRow1		="1";
		String expbinRes_BinQtyRow1					="5";	
		boolean expbinRes_SkidIdRow1				=true;
		boolean expbinRes_AllocStatusRow1			=true;
		String expbinRes_InvStatusRow1				="AVAILABLE";
		String expbinRes_LotNoRow1					="0";
		
		String expbinRes_WarehouseRow2				="SECUNDERABAD";
		String expbinRes_QtyToReserveRow2			="0";
		String expbinRes_BinNoRow2					="Bin1";
		String expbinRes_AvailableQtyRow2			="3";
		String expbinRes_ReleaseQtyRow2				="0";
		String expbinRes_TotalreservedQtyRow2		="0";
		String expbinRes_BinQtyRow2					="3";
		boolean expbinRes_SkidIdRow2				=true;
		boolean expbinRes_AllocStatusRow2			=true;
		String expbinRes_InvStatusRow2				="AVAILABLE";
		String expbinRes_LotNoRow2					="0";
	
	
		System.out.println("**************************************** checReservationForBinFinishedGoodsAfterConsumingInNextRow  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("Textres_LeftPanelWareHouseRow3  	: "+actTextres_LeftPanelWareHouseRow3		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow3);
		System.out.println("Textres_LeftPanelItemCodeRow3  		: "+actTextres_LeftPanelItemCodeRow3		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow3);
		System.out.println("Textres_LeftPanelItemNameRow3  		: "+actTextres_LeftPanelItemNameRow3		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow3);
		System.out.println("Textres_LeftPanelItemQtyRow3  		: "+actTextres_LeftPanelItemQtyRow3			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow3);
		System.out.println("Textres_LeftPanelBaseUnitRow3  		: "+actTextres_LeftPanelBaseUnitRow3		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow3);
		
		System.out.println("binRes_WarehouseRow1  			    : "+actbinRes_WarehouseRow1					+" 	Value Expected : "+expbinRes_WarehouseRow1);
		System.out.println("binRes_QtyToReserveRow1  			: "+actbinRes_QtyToReserveRow1				+" 	Value Expected : "+expbinRes_QtyToReserveRow1);
		System.out.println("binRes_BinNoRow1  					: "+actbinRes_BinNoRow1						+" 	Value Expected : "+expbinRes_BinNoRow1);
		System.out.println("binRes_AvailableQtyRow1  			: "+actbinRes_AvailableQtyRow1				+" 	Value Expected : "+expbinRes_AvailableQtyRow1);
		System.out.println("binRes_ReleaseQtyRow1  				: "+actbinRes_ReleaseQtyRow1				+" 	Value Expected : "+expbinRes_ReleaseQtyRow1);
		System.out.println("binRes_TotalreservedQtyRow1 		: "+actbinRes_TotalreservedQtyRow1   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow1);
		System.out.println("binRes_BinQtyRow1  					: "+actbinRes_BinQtyRow1					+" 	Value Expected : "+expbinRes_BinQtyRow1);
		System.out.println("binRes_SkidIdRow1  					: "+actbinRes_SkidIdRow1					+" 	Value Expected : "+expbinRes_SkidIdRow1);
		System.out.println("binRes_AllocStatusRow1  			: "+actbinRes_AllocStatusRow1				+" 	Value Expected : "+expbinRes_AllocStatusRow1);
		System.out.println("binRes_InvStatusRow1  				: "+actbinRes_InvStatusRow1					+"  Value Expected : "+expbinRes_InvStatusRow1);
		System.out.println("binRes_LotNoRow1  					: "+actbinRes_LotNoRow1						+"  Value Expected : "+expbinRes_LotNoRow1);
		
		System.out.println("binRes_WarehouseRow2  			    : "+actbinRes_WarehouseRow2					+" 	Value Expected : "+expbinRes_WarehouseRow2);
		System.out.println("binRes_QtyToReserveRow2  			: "+actbinRes_QtyToReserveRow2				+" 	Value Expected : "+expbinRes_QtyToReserveRow2);
		System.out.println("binRes_BinNoRow2  					: "+actbinRes_BinNoRow2						+" 	Value Expected : "+expbinRes_BinNoRow2);
		System.out.println("binRes_AvailableQtyRow2  			: "+actbinRes_AvailableQtyRow2				+" 	Value Expected : "+expbinRes_AvailableQtyRow2);
		System.out.println("binRes_ReleaseQtyRow2  				: "+actbinRes_ReleaseQtyRow2				+" 	Value Expected : "+expbinRes_ReleaseQtyRow2);
		System.out.println("binRes_TotalreservedQtyRow2 		: "+actbinRes_TotalreservedQtyRow2   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow2);
		System.out.println("binRes_BinQtyRow2  					: "+actbinRes_BinQtyRow2					+" 	Value Expected : "+expbinRes_BinQtyRow2);
		System.out.println("binRes_SkidIdRow2  					: "+actbinRes_SkidIdRow2					+" 	Value Expected : "+expbinRes_SkidIdRow2);
		System.out.println("binRes_AllocStatusRow2  			: "+actbinRes_AllocStatusRow2				+" 	Value Expected : "+expbinRes_AllocStatusRow2);
		System.out.println("binRes_InvStatusRow2  				: "+actbinRes_InvStatusRow2					+"  Value Expected : "+expbinRes_InvStatusRow2);
		System.out.println("binRes_LotNoRow2  					: "+actbinRes_LotNoRow2						+"  Value Expected : "+expbinRes_LotNoRow2);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)

				&& actTextres_LeftPanelWareHouseRow3.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow3)
				
				&& actTextres_LeftPanelItemCodeRow3.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow3) && actTextres_LeftPanelItemNameRow3.equalsIgnoreCase(expTextres_LeftPanelItemNameRow3)
				&& actTextres_LeftPanelItemQtyRow3.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow3) && actTextres_LeftPanelBaseUnitRow3.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow3)

				&& actbinRes_WarehouseRow1.equalsIgnoreCase(expbinRes_WarehouseRow1) && actbinRes_QtyToReserveRow1.equalsIgnoreCase(expbinRes_QtyToReserveRow1)
				&& actbinRes_BinNoRow1.equalsIgnoreCase(expbinRes_BinNoRow1) && actbinRes_AvailableQtyRow1.equalsIgnoreCase(expbinRes_AvailableQtyRow1)
				&& actbinRes_ReleaseQtyRow1.equalsIgnoreCase(expbinRes_ReleaseQtyRow1)
				&& actbinRes_TotalreservedQtyRow1.equalsIgnoreCase(expbinRes_TotalreservedQtyRow1)
				&& actbinRes_BinQtyRow1.equalsIgnoreCase(expbinRes_BinQtyRow1) && actbinRes_SkidIdRow1==expbinRes_SkidIdRow1
				&& actbinRes_AllocStatusRow1==expbinRes_AllocStatusRow1 && actbinRes_InvStatusRow1.equalsIgnoreCase(expbinRes_InvStatusRow1)
				&& actbinRes_LotNoRow1.equalsIgnoreCase(expbinRes_LotNoRow1)
				
				&& actbinRes_WarehouseRow2.equalsIgnoreCase(expbinRes_WarehouseRow2) && actbinRes_QtyToReserveRow2.equalsIgnoreCase(expbinRes_QtyToReserveRow2)
				&& actbinRes_BinNoRow2.equalsIgnoreCase(expbinRes_BinNoRow2) && actbinRes_AvailableQtyRow2.equalsIgnoreCase(expbinRes_AvailableQtyRow2)
				&& actbinRes_ReleaseQtyRow2.equalsIgnoreCase(expbinRes_ReleaseQtyRow2)
				&& actbinRes_TotalreservedQtyRow2.equalsIgnoreCase(expbinRes_TotalreservedQtyRow2)
				&& actbinRes_BinQtyRow2.equalsIgnoreCase(expbinRes_BinQtyRow2) && actbinRes_SkidIdRow2==expbinRes_SkidIdRow2
				&& actbinRes_AllocStatusRow2==expbinRes_AllocStatusRow2 && actbinRes_InvStatusRow2.equalsIgnoreCase(expbinRes_InvStatusRow2)
				&& actbinRes_LotNoRow2.equalsIgnoreCase(expbinRes_LotNoRow2))
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			return true;
		}
		else
		{
			
			 
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}
	
	
	
	public boolean checkSavingSalesOrderVoucherWithReservationBinItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrderVoucherWithReservationBinItem  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}


	

	public boolean checkSalesOrderVoucherAfterSavingWithReservationOnPreviousOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		// Actual
		String actdocumentNumberTxt  =documentNumberTxt.getAttribute("value");
		String actcustomerAccountTxt =customerAccountTxt.getAttribute("value");
		
		String actWareHouseR1C1      =select1stRow_1stColumn.getText();
		String actItemR1C2           =select1stRow_2ndColumn.getText();
		String actUnitsR1C3          =select1stRow_3rdColumn.getText();
		String actRDR1C4             =select1stRow_4thColumn.getText();
		String actAqR1C5             =select1stRow_5thColumn.getText();
		String actFqR1C6             =select1stRow_6thColumn.getText();
		String actQtyR1C7            =select1stRow_7thColumn.getText();
		boolean actReserveR1C8       =select1stRow_8thColumn.getText().isEmpty();
		boolean actLsalesOrdersR1C9  =select1stRow_9thColumn.getText().isEmpty();
		String actRateR1C10          =select1stRow_10thColumn.getText();
		String actGrossR1C11         =select1stRow_11thColumn.getText();
		
		String actWareHouseR2C1      =select2ndRow_1stColumn.getText();
		String actItemR2C2           =select2ndRow_2ndColumn.getText();
		String actUnitsR2C3          =select2ndRow_3rdColumn.getText();
		String actRDR2C4             =select2ndRow_4thColumn.getText();
		String actAqR2C5             =select2ndRow_5thColumn.getText();
		String actFqR2C6             =select2ndRow_6thColumn.getText();
		String actQtyR2C7            =select2ndRow_7thColumn.getText();
		String actReserveR2C8        =select2ndRow_8thColumn.getText();
		boolean actLsalesOrdersR2C9  =select2ndRow_9thColumn.getText().isEmpty();
		String actRateR2C10          =select2ndRow_10thColumn.getText();
		String actGrossR2C11         =select2ndRow_11thColumn.getText();
		
		String actWareHouseR3C1      =select3rdRow_1stColumn.getText();
		String actItemR3C2           =select3rdRow_2ndColumn.getText();
		String actUnitsR3C3          =select3rdRow_3rdColumn.getText();
		String actRDR3C4             =select3rdRow_4thColumn.getText();
		String actAqR3C5             =select3rdRow_5thColumn.getText();
		String actFqR3C6             =select3rdRow_6thColumn.getText();
		String actQtyR3C7            =select3rdRow_7thColumn.getText();
		String actReserveR3C8        =select3rdRow_8thColumn.getText();
		boolean actLsalesOrdersR3C9  =select3rdRow_9thColumn.getText().isEmpty();
		String actRateR3C10          =select3rdRow_10thColumn.getText();
		String actGrossR3C11         =select3rdRow_11thColumn.getText();
		
		String actso_footerQty       =so_footerQty.getText();
		String actso_footerRDField   =so_footerRDField.getText();
		String actso_footerAQ        =so_footerAQ.getText();
		String actso_footerFQ        =so_footerFQ.getText();
		String actso_footerGross     =so_footerGross.getText();
		String actso_footerNet       =so_footerNet.getText();
	
		// Expected
		String expdocumentNumberTxt  ="1";
		String expcustomerAccountTxt ="Customer A";
		
		String expWareHouseR1C1      ="SECUNDERABAD";
		String expItemR1C2           ="BIN FINISHED GOODS ITEM";
		String expUnitsR1C3          ="Pcs";
		String expRDR1C4             ="0.00";
		String expAqR1C5             ="2.00";
		String expFqR1C6             ="0.00";
		String expQtyR1C7            ="2.00";
		boolean expReserveR1C8       =true;
		boolean expLsalesOrdersR1C9  =true;
		String expRateR1C10          ="10.00";
		String expGrossR1C11         ="20.00";
		
		String expWareHouseR2C1      ="SECUNDERABAD";
		String expItemR2C2           ="BIN FINISHED GOODS ITEM";
		String expUnitsR2C3          ="Pcs";
		String expRDR2C4             ="0.00";
		String expAqR2C5             ="2.00";
		String expFqR2C6             ="0.00";
		String expQtyR2C7            ="2.00";
		String expReserveR2C8        ="Reserved";
		boolean expLsalesOrdersR2C9  =true;
		String expRateR2C10          ="10.00";
		String expGrossR2C11         ="20.00";
		
		String expWareHouseR3C1      ="SECUNDERABAD";
		String expItemR3C2           ="BIN FINISHED GOODS ITEM";
		String expUnitsR3C3          ="Pcs";
		String expRDR3C4             ="0.00";
		String expAqR3C5             ="0.00";
		String expFqR3C6             ="1.00";
		String expQtyR3C7            ="1.00";
		String expReserveR3C8        ="Reserved";
		boolean expLsalesOrdersR3C9  =true;
		String expRateR3C10          ="10.00";
		String expGrossR3C11         ="10.00";
		
		String expso_footerQty       ="5.00";
		String expso_footerRDField   ="0.00";
		String expso_footerAQ        ="4.00";
		String expso_footerFQ        ="1.00";
		String expso_footerGross     ="50.00";
		String expso_footerNet       ="50.00";
	 	
		
		
		System.out.println("************************************* checkSalesOrderVoucherAfterSavingWithReservationOnPreviousOption  *********************************");
		
		System.out.println("documentNumberTxt  	:  "+actdocumentNumberTxt 	+" value Expected : "+expdocumentNumberTxt);
		System.out.println("customerAccountTxt 	:  "+actcustomerAccountTxt 	+" value Expected : "+expcustomerAccountTxt);
		
		System.out.println("WareHouseR1C1  		:  "+actWareHouseR1C1 		+" value Expected : "+expWareHouseR1C1);
		System.out.println("ItemR1C2  			:  "+actItemR1C2 			+" value Expected : "+expItemR1C2);
		System.out.println("UnitsR1C3 			:  "+actUnitsR1C3 			+" value Expected : "+expUnitsR1C3);
		System.out.println("RDR1C4  			:  "+actRDR1C4 				+" value Expected : "+expRDR1C4);
		System.out.println("AqR1C5  			:  "+actAqR1C5 				+" value Expected : "+expAqR1C5);
		System.out.println("FqR1C6  			:  "+actFqR1C6 				+" value Expected : "+expFqR1C6);
		System.out.println("QtyR1C7  			:  "+actQtyR1C7 			+" value Expected : "+expQtyR1C7);
		System.out.println("ReserveR1C8  		:  "+actReserveR1C8 		+" value Expected : "+expReserveR1C8);
		System.out.println("LsalesOrdersR1C9  	:  "+actLsalesOrdersR1C9 	+" value Expected : "+expLsalesOrdersR1C9);
		System.out.println("RateR1C10  			:  "+actRateR1C10 			+" value Expected : "+expRateR1C10);
		System.out.println("GrossR1C11  		:  "+actGrossR1C11 			+" value Expected : "+expGrossR1C11);
		
		System.out.println("WareHouseR2C1  		:  "+actWareHouseR2C1 		+" value Expected : "+expWareHouseR2C1);
		System.out.println("ItemR2C2  			:  "+actItemR2C2 			+" value Expected : "+expItemR2C2);
		System.out.println("UnitsR2C3 			:  "+actUnitsR2C3 			+" value Expected : "+expUnitsR2C3);
		System.out.println("RDR2C4  			:  "+actRDR2C4 				+" value Expected : "+expRDR2C4);
		System.out.println("AqR2C5  			:  "+actAqR2C5 				+" value Expected : "+expAqR2C5);
		System.out.println("FqR2C6  			:  "+actFqR2C6 				+" value Expected : "+expFqR2C6);
		System.out.println("QtyR2C7  			:  "+actQtyR2C7 			+" value Expected : "+expQtyR2C7);
		System.out.println("ReserveR2C8  		:  "+actReserveR2C8 		+" value Expected : "+expReserveR2C8);
		System.out.println("LsalesOrdersR2C9  	:  "+actLsalesOrdersR2C9 	+" value Expected : "+expLsalesOrdersR2C9);
		System.out.println("RateR2C10  			:  "+actRateR2C10 			+" value Expected : "+expRateR2C10);
		System.out.println("GrossR2C11  		:  "+actGrossR2C11 			+" value Expected : "+expGrossR2C11);
		
		System.out.println("WareHouseR3C1  		:  "+actWareHouseR3C1 		+" value Expected : "+expWareHouseR3C1);
		System.out.println("ItemR3C2  			:  "+actItemR3C2 			+" value Expected : "+expItemR3C2);
		System.out.println("UnitsR3C3 			:  "+actUnitsR3C3 			+" value Expected : "+expUnitsR3C3);
		System.out.println("RDR3C4  			:  "+actRDR3C4 				+" value Expected : "+expRDR3C4);
		System.out.println("AqR3C5  			:  "+actAqR3C5 				+" value Expected : "+expAqR3C5);
		System.out.println("FqR3C6  			:  "+actFqR3C6 				+" value Expected : "+expFqR3C6);
		System.out.println("QtyR3C7  			:  "+actQtyR3C7 			+" value Expected : "+expQtyR3C7);
		System.out.println("ReserveR3C8  		:  "+actReserveR3C8 		+" value Expected : "+expReserveR3C8);
		System.out.println("LsalesOrdersR3C9  	:  "+actLsalesOrdersR3C9 	+" value Expected : "+expLsalesOrdersR3C9);
		System.out.println("RateR3C10  			:  "+actRateR3C10 			+" value Expected : "+expRateR3C10);
		System.out.println("GrossR3C11  		:  "+actGrossR3C11 			+" value Expected : "+expGrossR3C11);
		
		System.out.println("so_footerQty  		:  "+actso_footerQty 		+" value Expected : "+expso_footerQty);
		System.out.println("so_footerRDField 	:  "+actso_footerRDField	+" value Expected : "+expso_footerRDField);
		System.out.println("so_footerAQ  		:  "+actso_footerAQ 		+" value Expected : "+expso_footerAQ);
		System.out.println("so_footerFQ  		:  "+actso_footerFQ 		+" value Expected : "+expso_footerFQ);
		System.out.println("so_footerGross  	:  "+actso_footerGross 		+" value Expected : "+expso_footerGross);
		System.out.println("so_footerNet  		:  "+actso_footerNet 		+" value Expected : "+expso_footerNet);
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actWareHouseR1C1.equalsIgnoreCase(expWareHouseR1C1) && actItemR1C2.equalsIgnoreCase(expItemR1C2)
				&& actUnitsR1C3.equalsIgnoreCase(expUnitsR1C3) && actRDR1C4.equalsIgnoreCase(expRDR1C4) && actAqR1C5.equalsIgnoreCase(expAqR1C5)
				&& actFqR1C6.equalsIgnoreCase(expFqR1C6) && actQtyR1C7.equalsIgnoreCase(expQtyR1C7) && actReserveR1C8==expReserveR1C8
				&& actLsalesOrdersR1C9==expLsalesOrdersR1C9 && actRateR1C10.equalsIgnoreCase(expRateR1C10) && actGrossR1C11.equalsIgnoreCase(expGrossR1C11)
				
				&& actWareHouseR2C1.equalsIgnoreCase(expWareHouseR2C1) && actItemR2C2.equalsIgnoreCase(expItemR2C2)
				&& actUnitsR2C3.equalsIgnoreCase(expUnitsR2C3) && actRDR2C4.equalsIgnoreCase(expRDR2C4) && actAqR2C5.equalsIgnoreCase(expAqR2C5)
				&& actFqR2C6.equalsIgnoreCase(expFqR2C6) && actQtyR2C7.equalsIgnoreCase(expQtyR2C7) && actReserveR2C8.equalsIgnoreCase(expReserveR2C8)
				&& actLsalesOrdersR2C9==expLsalesOrdersR2C9 && actRateR2C10.equalsIgnoreCase(expRateR2C10) && actGrossR2C11.equalsIgnoreCase(expGrossR2C11)
				
				&& actWareHouseR3C1.equalsIgnoreCase(expWareHouseR3C1) && actItemR3C2.equalsIgnoreCase(expItemR3C2)
				&& actUnitsR3C3.equalsIgnoreCase(expUnitsR3C3) && actRDR3C4.equalsIgnoreCase(expRDR3C4) && actAqR3C5.equalsIgnoreCase(expAqR3C5)
				&& actFqR3C6.equalsIgnoreCase(expFqR3C6) && actQtyR3C7.equalsIgnoreCase(expQtyR3C7) && actReserveR3C8.equalsIgnoreCase(expReserveR3C8)
				&& actLsalesOrdersR3C9==expLsalesOrdersR3C9 && actRateR3C10.equalsIgnoreCase(expRateR3C10) && actGrossR3C11.equalsIgnoreCase(expGrossR3C11)
				
				&& actso_footerQty.equalsIgnoreCase(expso_footerQty) && actso_footerRDField.equalsIgnoreCase(expso_footerRDField)
				&& actso_footerAQ.equalsIgnoreCase(expso_footerAQ) && actso_footerFQ.equalsIgnoreCase(expso_footerFQ)
				&& actso_footerGross.equalsIgnoreCase(expso_footerGross) && actso_footerNet.equalsIgnoreCase(expso_footerNet))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			new_footerMinimizeBtn.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			new_footerMinimizeBtn.click();
			
			return false;
		}
	}

	
	
	
	public boolean checkSalesOrderBinItemWithGreaterQtyValidationInVoucherTwo() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("5");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		String actTextres_LeftPanelWareHouseRow1=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1	=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1	=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1	=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1	=res_LeftPanelBaseUnitRow1.getText();
		
		String actbinRes_WarehouseRow1			=binRes_WarehouseRow1.getText();
		String actbinRes_QtyToReserveRow1		=binRes_QtyToReserveRow1.getText();
		String actbinRes_BinNoRow1				=binRes_BinNoRow1.getText();
		String actbinRes_AvailableQtyRow1		=binRes_AvailableQtyRow1.getText();
		String actbinRes_ReleaseQtyRow1			=binRes_ReleaseQtyRow1.getText();
		String actbinRes_TotalreservedQtyRow1	=binRes_TotalreservedQtyRow1.getText();
		String actbinRes_BinQtyRow1				=binRes_BinQtyRow1.getText();
		boolean actbinRes_SkidIdRow1			=binRes_SkidIdRow1.getText().isEmpty();
		boolean actbinRes_AllocStatusRow1		=binRes_AllocStatusRow1.getText().isEmpty();
		String actbinRes_InvStatusRow1			=binRes_InvStatusRow1.getText();
		String actbinRes_LotNoRow1				=binRes_LotNoRow1.getText();
		
		String actbinRes_WarehouseRow2			=binRes_WarehouseRow2.getText();
		String actbinRes_QtyToReserveRow2		=binRes_QtyToReserveRow2.getText();
		String actbinRes_BinNoRow2				=binRes_BinNoRow2.getText();
		String actbinRes_AvailableQtyRow2		=binRes_AvailableQtyRow2.getText();
		String actbinRes_ReleaseQtyRow2			=binRes_ReleaseQtyRow2.getText();
		String actbinRes_TotalreservedQtyRow2	=binRes_TotalreservedQtyRow2.getText();
		String actbinRes_BinQtyRow2				=binRes_BinQtyRow2.getText();
		boolean actbinRes_SkidIdRow2			=binRes_SkidIdRow2.getText().isEmpty();
		boolean actbinRes_AllocStatusRow2		=binRes_AllocStatusRow2.getText().isEmpty();
		String actbinRes_InvStatusRow2			=binRes_InvStatusRow2.getText();
		String actbinRes_LotNoRow2				=binRes_LotNoRow2.getText();
		
		// Expected
		String expTextres_LeftPanelWareHouseRow1="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1 ="BFGI";
		String expTextres_LeftPanelItemNameRow1 ="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow1  ="5";
		String expTextres_LeftPanelBaseUnitRow1 ="Pcs";
		
		String expbinRes_WarehouseRow1			="SECUNDERABAD";
		String expbinRes_QtyToReserveRow1		="0";
		String expbinRes_BinNoRow1				="Bin Update";
		String expbinRes_AvailableQtyRow1		="2";
		String expbinRes_ReleaseQtyRow1			="0";
		String expbinRes_TotalreservedQtyRow1	="0";
		String expbinRes_BinQtyRow1				="5";
		boolean expbinRes_SkidIdRow1			=true;
		boolean expbinRes_AllocStatusRow1		=true;
		String expbinRes_InvStatusRow1			="AVAILABLE";
		String expbinRes_LotNoRow1				="0";
		
		String expbinRes_WarehouseRow2			="SECUNDERABAD";
		String expbinRes_QtyToReserveRow2		="0";
		String expbinRes_BinNoRow2				="Bin1";
		String expbinRes_AvailableQtyRow2		="3";
		String expbinRes_ReleaseQtyRow2			="0";
		String expbinRes_TotalreservedQtyRow2	="0";
		String expbinRes_BinQtyRow2				="3";
		boolean expbinRes_SkidIdRow2			=true;
		boolean expbinRes_AllocStatusRow2		=true;
		String expbinRes_InvStatusRow2			="AVAILABLE";
		String expbinRes_LotNoRow2				="0";
	
	
		System.out.println("**************************************** checkSalesOrderBinItemWithGreaterQtyValidationInVoucherTwo  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("binRes_WarehouseRow1  			    : "+actbinRes_WarehouseRow1					+" 	Value Expected : "+expbinRes_WarehouseRow1);
		System.out.println("binRes_QtyToReserveRow1  			: "+actbinRes_QtyToReserveRow1				+" 	Value Expected : "+expbinRes_QtyToReserveRow1);
		System.out.println("binRes_BinNoRow1  					: "+actbinRes_BinNoRow1						+" 	Value Expected : "+expbinRes_BinNoRow1);
		System.out.println("binRes_AvailableQtyRow1  			: "+actbinRes_AvailableQtyRow1				+" 	Value Expected : "+expbinRes_AvailableQtyRow1);
		System.out.println("binRes_ReleaseQtyRow1  				: "+actbinRes_ReleaseQtyRow1				+" 	Value Expected : "+expbinRes_ReleaseQtyRow1);
		System.out.println("binRes_TotalreservedQtyRow1 		: "+actbinRes_TotalreservedQtyRow1   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow1);
		System.out.println("binRes_BinQtyRow1  					: "+actbinRes_BinQtyRow1					+" 	Value Expected : "+expbinRes_BinQtyRow1);
		System.out.println("binRes_SkidIdRow1  					: "+actbinRes_SkidIdRow1					+" 	Value Expected : "+expbinRes_SkidIdRow1);
		System.out.println("binRes_AllocStatusRow1  			: "+actbinRes_AllocStatusRow1				+" 	Value Expected : "+expbinRes_AllocStatusRow1);
		System.out.println("binRes_InvStatusRow1  				: "+actbinRes_InvStatusRow1					+"  Value Expected : "+expbinRes_InvStatusRow1);
		System.out.println("binRes_LotNoRow1  					: "+actbinRes_LotNoRow1						+"  Value Expected : "+expbinRes_LotNoRow1);
		
		System.out.println("binRes_WarehouseRow2  			    : "+actbinRes_WarehouseRow2					+" 	Value Expected : "+expbinRes_WarehouseRow2);
		System.out.println("binRes_QtyToReserveRow2  			: "+actbinRes_QtyToReserveRow2				+" 	Value Expected : "+expbinRes_QtyToReserveRow2);
		System.out.println("binRes_BinNoRow2  					: "+actbinRes_BinNoRow2						+" 	Value Expected : "+expbinRes_BinNoRow2);
		System.out.println("binRes_AvailableQtyRow2  			: "+actbinRes_AvailableQtyRow2				+" 	Value Expected : "+expbinRes_AvailableQtyRow2);
		System.out.println("binRes_ReleaseQtyRow2  				: "+actbinRes_ReleaseQtyRow2				+" 	Value Expected : "+expbinRes_ReleaseQtyRow2);
		System.out.println("binRes_TotalreservedQtyRow2 		: "+actbinRes_TotalreservedQtyRow2   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow2);
		System.out.println("binRes_BinQtyRow2  					: "+actbinRes_BinQtyRow2					+" 	Value Expected : "+expbinRes_BinQtyRow2);
		System.out.println("binRes_SkidIdRow2  					: "+actbinRes_SkidIdRow2					+" 	Value Expected : "+expbinRes_SkidIdRow2);
		System.out.println("binRes_AllocStatusRow2  			: "+actbinRes_AllocStatusRow2				+" 	Value Expected : "+expbinRes_AllocStatusRow2);
		System.out.println("binRes_InvStatusRow2  				: "+actbinRes_InvStatusRow2					+"  Value Expected : "+expbinRes_InvStatusRow2);
		System.out.println("binRes_LotNoRow2  					: "+actbinRes_LotNoRow2						+"  Value Expected : "+expbinRes_LotNoRow2);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actbinRes_WarehouseRow1.equalsIgnoreCase(expbinRes_WarehouseRow1) && actbinRes_QtyToReserveRow1.equalsIgnoreCase(expbinRes_QtyToReserveRow1)
				&& actbinRes_BinNoRow1.equalsIgnoreCase(expbinRes_BinNoRow1) && actbinRes_AvailableQtyRow1.equalsIgnoreCase(expbinRes_AvailableQtyRow1)
				&& actbinRes_ReleaseQtyRow1.equalsIgnoreCase(expbinRes_ReleaseQtyRow1)
				&& actbinRes_TotalreservedQtyRow1.equalsIgnoreCase(expbinRes_TotalreservedQtyRow1)
				&& actbinRes_BinQtyRow1.equalsIgnoreCase(expbinRes_BinQtyRow1) && actbinRes_SkidIdRow1==expbinRes_SkidIdRow1
				&& actbinRes_AllocStatusRow1==expbinRes_AllocStatusRow1 && actbinRes_InvStatusRow1.equalsIgnoreCase(expbinRes_InvStatusRow1)
				&& actbinRes_LotNoRow1.equalsIgnoreCase(expbinRes_LotNoRow1)
				
				&& actbinRes_WarehouseRow2.equalsIgnoreCase(expbinRes_WarehouseRow2) && actbinRes_QtyToReserveRow2.equalsIgnoreCase(expbinRes_QtyToReserveRow2)
				&& actbinRes_BinNoRow2.equalsIgnoreCase(expbinRes_BinNoRow2) && actbinRes_AvailableQtyRow2.equalsIgnoreCase(expbinRes_AvailableQtyRow2)
				&& actbinRes_ReleaseQtyRow2.equalsIgnoreCase(expbinRes_ReleaseQtyRow2)
				&& actbinRes_TotalreservedQtyRow2.equalsIgnoreCase(expbinRes_TotalreservedQtyRow2)
				&& actbinRes_BinQtyRow2.equalsIgnoreCase(expbinRes_BinQtyRow2) && actbinRes_SkidIdRow2==expbinRes_SkidIdRow2
				&& actbinRes_AllocStatusRow2==expbinRes_AllocStatusRow2 && actbinRes_InvStatusRow2.equalsIgnoreCase(expbinRes_InvStatusRow2)
				&& actbinRes_LotNoRow2.equalsIgnoreCase(expbinRes_LotNoRow2))
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			return true;
		}
		else
		{
			
			 
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}
	
	
	
	public boolean checkBinItemPickingAndChangingToGreaterQtyAndAllocatingStockInVoucherTwo() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binRes_QtyToReserveRow1));
		binRes_QtyToReserveRow1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		
		String actQtyToReleaseOnPick1	=enter_QtyToReserve.getAttribute("value");
		String expQtyToReleaseOnPick1	="2";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QtyToReserve));
		enter_QtyToReserve.click();
		enter_QtyToReserve.clear();
		Thread.sleep(2000);
		enter_QtyToReserve.sendKeys("8");
		
		
		String expErrorMessage		="Reserve Quantity can not be greater than selected product quantity";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binRes_QtyToReserveRow1));
		binRes_QtyToReserveRow2.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);
		
		String actQtyToReleaseOnPick2	=enter_QtyToReserve.getAttribute("value");
		String expQtyToReleaseOnPick2	="3";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn	=select1stRow_8thColumn.getText();
		String expReserveColumn	="Reserved";
		
		System.out.println("**************************************** checkBinItemPickingAndChangingToGreaterQtyAndAllocatingStockInVoucherTwo  ***************************************");
		
		System.out.println("QtyToReleaseOnPick1  : "+actQtyToReleaseOnPick1    +" Value Expected : "+expQtyToReleaseOnPick1);
		System.out.println("QtyToReleaseOnPick2  : "+actQtyToReleaseOnPick2    +" Value Expected : "+expQtyToReleaseOnPick2);
		System.out.println("ErrorMessage  		 : "+validationMessage 	       +" Value Expected : "+expErrorMessage);
		System.out.println("ReserveColumn  		 : "+actReserveColumn   	   +" Value Expected : "+expReserveColumn);
		
		
		if(actQtyToReleaseOnPick1.equalsIgnoreCase(expQtyToReleaseOnPick1) && validationMessage.equalsIgnoreCase(expErrorMessage)
				&& actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}

	
	
	
	
	public boolean checkBinItemQtyForStockReservationInSalesOrderVoucherTwo() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		boolean actbinRes_WarehouseRow1				=binRes_WarehouseRow1.getText().isEmpty();
		boolean actbinRes_QtyToReserveRow1			=binRes_QtyToReserveRow1.getText().isEmpty();
		boolean actbinRes_BinNoRow1					=binRes_BinNoRow1.getText().isEmpty();
		boolean actbinRes_AvailableQtyRow1			=binRes_AvailableQtyRow1.getText().isEmpty();
		boolean actbinRes_ReleaseQtyRow1			=binRes_ReleaseQtyRow1.getText().isEmpty();
		boolean actbinRes_TotalreservedQtyRow1		=binRes_TotalreservedQtyRow1.getText().isEmpty();
		boolean actbinRes_BinQtyRow1				=binRes_BinQtyRow1.getText().isEmpty();
		boolean actbinRes_SkidIdRow1				=binRes_SkidIdRow1.getText().isEmpty();
		boolean actbinRes_AllocStatusRow1			=binRes_AllocStatusRow1.getText().isEmpty();
		boolean actbinRes_InvStatusRow1				=binRes_InvStatusRow1.getText().isEmpty();
		boolean actbinRes_LotNoRow1					=binRes_LotNoRow1.getText().isEmpty();
		
		boolean actbinRes_WarehouseRow2				=binRes_WarehouseRow2.getText().isEmpty();
		boolean actbinRes_QtyToReserveRow2			=binRes_QtyToReserveRow2.getText().isEmpty();
		boolean actbinRes_BinNoRow2					=binRes_BinNoRow2.getText().isEmpty();
		boolean actbinRes_AvailableQtyRow2			=binRes_AvailableQtyRow2.getText().isEmpty();
		boolean actbinRes_ReleaseQtyRow2			=binRes_ReleaseQtyRow2.getText().isEmpty();
		boolean actbinRes_TotalreservedQtyRow2		=binRes_TotalreservedQtyRow2.getText().isEmpty();
		boolean actbinRes_BinQtyRow2				=binRes_BinQtyRow2.getText().isEmpty();
		boolean actbinRes_SkidIdRow2				=binRes_SkidIdRow2.getText().isEmpty();
		boolean actbinRes_AllocStatusRow2			=binRes_AllocStatusRow2.getText().isEmpty();
		boolean actbinRes_InvStatusRow2				=binRes_InvStatusRow2.getText().isEmpty();
		boolean actbinRes_LotNoRow2					=binRes_LotNoRow2.getText().isEmpty();
	
	
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BFGI";
		String expTextres_LeftPanelItemNameRow1		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="5";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="BFGI";
		String expTextres_LeftPanelItemNameRow2		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow2		="1";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		boolean expbinRes_WarehouseRow1				=true;
		boolean expbinRes_QtyToReserveRow1			=true;
		boolean expbinRes_BinNoRow1					=true;
		boolean expbinRes_AvailableQtyRow1			=true;
		boolean expbinRes_ReleaseQtyRow1			=true;
		boolean expbinRes_TotalreservedQtyRow1		=true;
		boolean expbinRes_BinQtyRow1				=true;
		boolean expbinRes_SkidIdRow1				=true;
		boolean expbinRes_AllocStatusRow1			=true;
		boolean expbinRes_InvStatusRow1				=true;
		boolean expbinRes_LotNoRow1					=true;
		
		boolean expbinRes_WarehouseRow2				=true;
		boolean expbinRes_QtyToReserveRow2			=true;
		boolean expbinRes_BinNoRow2					=true;
		boolean expbinRes_AvailableQtyRow2			=true;
		boolean expbinRes_ReleaseQtyRow2			=true;
		boolean expbinRes_TotalreservedQtyRow2		=true;
		boolean expbinRes_BinQtyRow2				=true;
		boolean expbinRes_SkidIdRow2				=true;
		boolean expbinRes_AllocStatusRow2			=true;
		boolean expbinRes_InvStatusRow2				=true;
		boolean expbinRes_LotNoRow2					=true;
	
	
		System.out.println("**************************************** checkBinItemQtyForStockReservationInSalesOrderVoucherTwo  ***************************************");

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("binRes_WarehouseRow1  			    : "+actbinRes_WarehouseRow1					+" 	Value Expected : "+expbinRes_WarehouseRow1);
		System.out.println("binRes_QtyToReserveRow1  			: "+actbinRes_QtyToReserveRow1				+" 	Value Expected : "+expbinRes_QtyToReserveRow1);
		System.out.println("binRes_BinNoRow1  					: "+actbinRes_BinNoRow1						+" 	Value Expected : "+expbinRes_BinNoRow1);
		System.out.println("binRes_AvailableQtyRow1  			: "+actbinRes_AvailableQtyRow1				+" 	Value Expected : "+expbinRes_AvailableQtyRow1);
		System.out.println("binRes_ReleaseQtyRow1  				: "+actbinRes_ReleaseQtyRow1				+" 	Value Expected : "+expbinRes_ReleaseQtyRow1);
		System.out.println("binRes_TotalreservedQtyRow1 		: "+actbinRes_TotalreservedQtyRow1   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow1);
		System.out.println("binRes_BinQtyRow1  					: "+actbinRes_BinQtyRow1					+" 	Value Expected : "+expbinRes_BinQtyRow1);
		System.out.println("binRes_SkidIdRow1  					: "+actbinRes_SkidIdRow1					+" 	Value Expected : "+expbinRes_SkidIdRow1);
		System.out.println("binRes_AllocStatusRow1  			: "+actbinRes_AllocStatusRow1				+" 	Value Expected : "+expbinRes_AllocStatusRow1);
		System.out.println("binRes_InvStatusRow1  				: "+actbinRes_InvStatusRow1					+"  Value Expected : "+expbinRes_InvStatusRow1);
		System.out.println("binRes_LotNoRow1  					: "+actbinRes_LotNoRow1						+"  Value Expected : "+expbinRes_LotNoRow1);
		
		System.out.println("binRes_WarehouseRow2  			    : "+actbinRes_WarehouseRow2					+" 	Value Expected : "+expbinRes_WarehouseRow2);
		System.out.println("binRes_QtyToReserveRow2  			: "+actbinRes_QtyToReserveRow2				+" 	Value Expected : "+expbinRes_QtyToReserveRow2);
		System.out.println("binRes_BinNoRow2  					: "+actbinRes_BinNoRow2						+" 	Value Expected : "+expbinRes_BinNoRow2);
		System.out.println("binRes_AvailableQtyRow2  			: "+actbinRes_AvailableQtyRow2				+" 	Value Expected : "+expbinRes_AvailableQtyRow2);
		System.out.println("binRes_ReleaseQtyRow2  				: "+actbinRes_ReleaseQtyRow2				+" 	Value Expected : "+expbinRes_ReleaseQtyRow2);
		System.out.println("binRes_TotalreservedQtyRow2 		: "+actbinRes_TotalreservedQtyRow2   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow2);
		System.out.println("binRes_BinQtyRow2  					: "+actbinRes_BinQtyRow2					+" 	Value Expected : "+expbinRes_BinQtyRow2);
		System.out.println("binRes_SkidIdRow2  					: "+actbinRes_SkidIdRow2					+" 	Value Expected : "+expbinRes_SkidIdRow2);
		System.out.println("binRes_AllocStatusRow2  			: "+actbinRes_AllocStatusRow2				+" 	Value Expected : "+expbinRes_AllocStatusRow2);
		System.out.println("binRes_InvStatusRow2  				: "+actbinRes_InvStatusRow2					+"  Value Expected : "+expbinRes_InvStatusRow2);
		System.out.println("binRes_LotNoRow2  					: "+actbinRes_LotNoRow2						+"  Value Expected : "+expbinRes_LotNoRow2);
	
	
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actbinRes_WarehouseRow1==expbinRes_WarehouseRow1 && actbinRes_QtyToReserveRow1==expbinRes_QtyToReserveRow1
				&& actbinRes_BinNoRow1==expbinRes_BinNoRow1 && actbinRes_AvailableQtyRow1==expbinRes_AvailableQtyRow1
				&& actbinRes_ReleaseQtyRow1==expbinRes_ReleaseQtyRow1
				&& actbinRes_TotalreservedQtyRow1==expbinRes_TotalreservedQtyRow1
				&& actbinRes_BinQtyRow1==expbinRes_BinQtyRow1 && actbinRes_SkidIdRow1==expbinRes_SkidIdRow1
				&& actbinRes_AllocStatusRow1==expbinRes_AllocStatusRow1 && actbinRes_InvStatusRow1==expbinRes_InvStatusRow1
				&& actbinRes_LotNoRow1==expbinRes_LotNoRow1
				
				&& actbinRes_WarehouseRow2==expbinRes_WarehouseRow2 && actbinRes_QtyToReserveRow2==expbinRes_QtyToReserveRow2
				&& actbinRes_BinNoRow2==expbinRes_BinNoRow2 && actbinRes_AvailableQtyRow2==expbinRes_AvailableQtyRow2
				&& actbinRes_ReleaseQtyRow2==expbinRes_ReleaseQtyRow2
				&& actbinRes_TotalreservedQtyRow2==expbinRes_TotalreservedQtyRow2
				&& actbinRes_BinQtyRow2==expbinRes_BinQtyRow2 && actbinRes_SkidIdRow2==expbinRes_SkidIdRow2
				&& actbinRes_AllocStatusRow2==expbinRes_AllocStatusRow2 && actbinRes_InvStatusRow2==expbinRes_InvStatusRow2
				&& actbinRes_LotNoRow2==expbinRes_LotNoRow2)
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			res_CloseBtn.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			res_CloseBtn.click();
			
			return false;
		}
	}
	
	
	public boolean checkSavingSalesOrderVoucherTwoWithReservationBinItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		secondRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrderVoucherTwoWithReservationBinItem  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
					
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}
	

	public boolean checkBinItemQtySalesOrdersInVoucherThree() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		Thread.sleep(3000);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		boolean actbinRes_WarehouseRow1				=binRes_WarehouseRow1.getText().isEmpty();
		boolean actbinRes_QtyToReserveRow1			=binRes_QtyToReserveRow1.getText().isEmpty();
		boolean actbinRes_BinNoRow1					=binRes_BinNoRow1.getText().isEmpty();
		boolean actbinRes_AvailableQtyRow1			=binRes_AvailableQtyRow1.getText().isEmpty();
		boolean actbinRes_ReleaseQtyRow1			=binRes_ReleaseQtyRow1.getText().isEmpty();
		boolean actbinRes_TotalreservedQtyRow1		=binRes_TotalreservedQtyRow1.getText().isEmpty();
		boolean actbinRes_BinQtyRow1				=binRes_BinQtyRow1.getText().isEmpty();
		boolean actbinRes_SkidIdRow1				=binRes_SkidIdRow1.getText().isEmpty();
		boolean actbinRes_AllocStatusRow1			=binRes_AllocStatusRow1.getText().isEmpty();
		boolean actbinRes_InvStatusRow1				=binRes_InvStatusRow1.getText().isEmpty();
		boolean actbinRes_LotNoRow1					=binRes_LotNoRow1.getText().isEmpty();
		
		boolean actbinRes_WarehouseRow2				=binRes_WarehouseRow2.getText().isEmpty();
		boolean actbinRes_QtyToReserveRow2			=binRes_QtyToReserveRow2.getText().isEmpty();
		boolean actbinRes_BinNoRow2					=binRes_BinNoRow2.getText().isEmpty();
		boolean actbinRes_AvailableQtyRow2			=binRes_AvailableQtyRow2.getText().isEmpty();
		boolean actbinRes_ReleaseQtyRow2			=binRes_ReleaseQtyRow2.getText().isEmpty();
		boolean actbinRes_TotalreservedQtyRow2		=binRes_TotalreservedQtyRow2.getText().isEmpty();
		boolean actbinRes_BinQtyRow2				=binRes_BinQtyRow2.getText().isEmpty();
		boolean actbinRes_SkidIdRow2				=binRes_SkidIdRow2.getText().isEmpty();
		boolean actbinRes_AllocStatusRow2			=binRes_AllocStatusRow2.getText().isEmpty();
		boolean actbinRes_InvStatusRow2				=binRes_InvStatusRow2.getText().isEmpty();
		boolean actbinRes_LotNoRow2					=binRes_LotNoRow2.getText().isEmpty();
	
	
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BFGI";
		String expTextres_LeftPanelItemNameRow1		="BIN FINISHED GOODS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="1";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		boolean expbinRes_WarehouseRow1				=true;
		boolean expbinRes_QtyToReserveRow1			=true;
		boolean expbinRes_BinNoRow1					=true;
		boolean expbinRes_AvailableQtyRow1			=true;
		boolean expbinRes_ReleaseQtyRow1			=true;
		boolean expbinRes_TotalreservedQtyRow1		=true;
		boolean expbinRes_BinQtyRow1				=true;
		boolean expbinRes_SkidIdRow1				=true;
		boolean expbinRes_AllocStatusRow1			=true;
		boolean expbinRes_InvStatusRow1				=true;
		boolean expbinRes_LotNoRow1					=true;
		
		boolean expbinRes_WarehouseRow2				=true;
		boolean expbinRes_QtyToReserveRow2			=true;
		boolean expbinRes_BinNoRow2					=true;
		boolean expbinRes_AvailableQtyRow2			=true;
		boolean expbinRes_ReleaseQtyRow2			=true;
		boolean expbinRes_TotalreservedQtyRow2		=true;
		boolean expbinRes_BinQtyRow2				=true;
		boolean expbinRes_SkidIdRow2				=true;
		boolean expbinRes_AllocStatusRow2			=true;
		boolean expbinRes_InvStatusRow2				=true;
		boolean expbinRes_LotNoRow2					=true;
	
	
		System.out.println("**************************************** checkBinItemQtyForStockReservationInSalesOrderVoucherTwo  ***************************************");

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("binRes_WarehouseRow1  			    : "+actbinRes_WarehouseRow1					+" 	Value Expected : "+expbinRes_WarehouseRow1);
		System.out.println("binRes_QtyToReserveRow1  			: "+actbinRes_QtyToReserveRow1				+" 	Value Expected : "+expbinRes_QtyToReserveRow1);
		System.out.println("binRes_BinNoRow1  					: "+actbinRes_BinNoRow1						+" 	Value Expected : "+expbinRes_BinNoRow1);
		System.out.println("binRes_AvailableQtyRow1  			: "+actbinRes_AvailableQtyRow1				+" 	Value Expected : "+expbinRes_AvailableQtyRow1);
		System.out.println("binRes_ReleaseQtyRow1  				: "+actbinRes_ReleaseQtyRow1				+" 	Value Expected : "+expbinRes_ReleaseQtyRow1);
		System.out.println("binRes_TotalreservedQtyRow1 		: "+actbinRes_TotalreservedQtyRow1   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow1);
		System.out.println("binRes_BinQtyRow1  					: "+actbinRes_BinQtyRow1					+" 	Value Expected : "+expbinRes_BinQtyRow1);
		System.out.println("binRes_SkidIdRow1  					: "+actbinRes_SkidIdRow1					+" 	Value Expected : "+expbinRes_SkidIdRow1);
		System.out.println("binRes_AllocStatusRow1  			: "+actbinRes_AllocStatusRow1				+" 	Value Expected : "+expbinRes_AllocStatusRow1);
		System.out.println("binRes_InvStatusRow1  				: "+actbinRes_InvStatusRow1					+"  Value Expected : "+expbinRes_InvStatusRow1);
		System.out.println("binRes_LotNoRow1  					: "+actbinRes_LotNoRow1						+"  Value Expected : "+expbinRes_LotNoRow1);
		
		System.out.println("binRes_WarehouseRow2  			    : "+actbinRes_WarehouseRow2					+" 	Value Expected : "+expbinRes_WarehouseRow2);
		System.out.println("binRes_QtyToReserveRow2  			: "+actbinRes_QtyToReserveRow2				+" 	Value Expected : "+expbinRes_QtyToReserveRow2);
		System.out.println("binRes_BinNoRow2  					: "+actbinRes_BinNoRow2						+" 	Value Expected : "+expbinRes_BinNoRow2);
		System.out.println("binRes_AvailableQtyRow2  			: "+actbinRes_AvailableQtyRow2				+" 	Value Expected : "+expbinRes_AvailableQtyRow2);
		System.out.println("binRes_ReleaseQtyRow2  				: "+actbinRes_ReleaseQtyRow2				+" 	Value Expected : "+expbinRes_ReleaseQtyRow2);
		System.out.println("binRes_TotalreservedQtyRow2 		: "+actbinRes_TotalreservedQtyRow2   		+"  Value Expected : "+expbinRes_TotalreservedQtyRow2);
		System.out.println("binRes_BinQtyRow2  					: "+actbinRes_BinQtyRow2					+" 	Value Expected : "+expbinRes_BinQtyRow2);
		System.out.println("binRes_SkidIdRow2  					: "+actbinRes_SkidIdRow2					+" 	Value Expected : "+expbinRes_SkidIdRow2);
		System.out.println("binRes_AllocStatusRow2  			: "+actbinRes_AllocStatusRow2				+" 	Value Expected : "+expbinRes_AllocStatusRow2);
		System.out.println("binRes_InvStatusRow2  				: "+actbinRes_InvStatusRow2					+"  Value Expected : "+expbinRes_InvStatusRow2);
		System.out.println("binRes_LotNoRow2  					: "+actbinRes_LotNoRow2						+"  Value Expected : "+expbinRes_LotNoRow2);
	
	
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actbinRes_WarehouseRow1==expbinRes_WarehouseRow1 && actbinRes_QtyToReserveRow1==expbinRes_QtyToReserveRow1
				&& actbinRes_BinNoRow1==expbinRes_BinNoRow1 && actbinRes_AvailableQtyRow1==expbinRes_AvailableQtyRow1
				&& actbinRes_ReleaseQtyRow1==expbinRes_ReleaseQtyRow1
				&& actbinRes_TotalreservedQtyRow1==expbinRes_TotalreservedQtyRow1
				&& actbinRes_BinQtyRow1==expbinRes_BinQtyRow1 && actbinRes_SkidIdRow1==expbinRes_SkidIdRow1
				&& actbinRes_AllocStatusRow1==expbinRes_AllocStatusRow1 && actbinRes_InvStatusRow1==expbinRes_InvStatusRow1
				&& actbinRes_LotNoRow1==expbinRes_LotNoRow1
				
				&& actbinRes_WarehouseRow2==expbinRes_WarehouseRow2 && actbinRes_QtyToReserveRow2==expbinRes_QtyToReserveRow2
				&& actbinRes_BinNoRow2==expbinRes_BinNoRow2 && actbinRes_AvailableQtyRow2==expbinRes_AvailableQtyRow2
				&& actbinRes_ReleaseQtyRow2==expbinRes_ReleaseQtyRow2
				&& actbinRes_TotalreservedQtyRow2==expbinRes_TotalreservedQtyRow2
				&& actbinRes_BinQtyRow2==expbinRes_BinQtyRow2 && actbinRes_SkidIdRow2==expbinRes_SkidIdRow2
				&& actbinRes_AllocStatusRow2==expbinRes_AllocStatusRow2 && actbinRes_InvStatusRow2==expbinRes_InvStatusRow2
				&& actbinRes_LotNoRow2==expbinRes_LotNoRow2)
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));	
			res_CloseBtn.click();
			
			return true;
		}
		else
		{
			
			 
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));	
			res_CloseBtn.click();
			
			return false;
		}
	}
	
	
	
	public boolean checkSalesOrdersCloseOptionInEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		getWaitForAlert();
		
		String actAlert		=getAlert().getText();
		String expAlert0	="The contents of the voucher are changed.";
		String expAlert1	="Are you sure that you want to ignore the changes?";
		
		System.out.println("*********************************************** checkSalesOrdersCloseOptionInEntryPage  ********************************************");
		
		System.out.println("Entry Page Close Option Alert Message Value Actual  : "+actAlert  +" Value Expected : "+expAlert0+expAlert1);	

		if(actAlert.startsWith(expAlert0) && actAlert.endsWith(expAlert1))
		{
			System.out.println("Test Pass : Alert Displayed");
			
			getAlert().accept();
			
			excelReader.setCellData(xlfile, "Sheet6", 80, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Alert NOT Displayed");
			excelReader.setCellData(xlfile, "Sheet6", 80, 9, resFail);
			return false;
		}
	}
	
	
	
	//Batch Reservation
		
	public boolean checkSavingSalesOrderVoucherAndCheckReservationScreenWithBatchItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
			
		 customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("19");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
			
		// Actual
		
		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();
		
				
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();
		
		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();
		
		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);
		
		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();
	
	
		// Expected
	
		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;
		
		boolean expbatchRes_BodyQtyToReserve		=true;
		boolean expbatchRes_BodyBatchNo				=true;
		boolean expbatchRes_BodyWareHouse			=true;
		boolean	expbatchRes_BodyAvailableQty		=true;
		boolean expbatchRes_BodyRelesaseQty			=true;
		boolean expbatchRes_BodyCurOrdResQty		=true;
		boolean expbatchRes_BodyMfgDate				=true;
		boolean expbatchRes_BodyExpDate				=true;
		boolean expbatchRes_BodyBatchQty			=true;
		
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow1		="19";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expbatchRes_QtyToReserveRow1			="0";
		String expbatchRes_BatchNoRow1				="PVSBR";
		String expbatchRes_WareHouseRow1			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow1			="120";
		String expbatchRes_RelesaseQtyRow1			="0";
		String expbatchRes_CurOrdResQtyRow1			="0";
		String expbatchRes_BatchQtyRow1				="120";
	
	
		System.out.println("**************************************** checkSavingSalesOrderVoucherAndCheckReservationScreenWithBatchItem  ***************************************");
		
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
		
		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1))
		{
			
			return true;
		}		
		else
		{
			return false;
		}	
	}
	

	
	
	public boolean checkAllocatingStockOnBatchItemThroughPickOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn	=select1stRow_8thColumn.getText();
		String expReserveColumn	="Reserved";
		
		System.out.println("**************************************** checkAllocatingStockOnBatchItemThroughPickOption  ***************************************");
		
		System.out.println("ReserveColumn  				: "+actReserveColumn	+" 	Value Expected : "+expReserveColumn);
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	
		


	
	public boolean checkStockReservationForBatchItemWithQtySecondRowForConsuming() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("20");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();
	
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow1		="19";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow2		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow2		="20";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expbatchRes_QtyToReserveRow1			="0";
		String expbatchRes_BatchNoRow1				="PVSBR";
		String expbatchRes_WareHouseRow1			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow1			="101";
		String expbatchRes_RelesaseQtyRow1			="0";
		String expbatchRes_CurOrdResQtyRow1			="19";
		String expbatchRes_BatchQtyRow1				="120";
	
	
		System.out.println("**************************************** checkStockReservationForBatchItemWithQtySecondRowForConsuming  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1))
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			return true;
		}
		else
		{
			
			 
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}

	
	
	public boolean checkAllocatingStockOnBatchBrItemThroughManualInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();
		
		enter_QtyToReserve.sendKeys("20");
		enter_QtyToReserve.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		
		String actReserveColumn	=select2ndRow_8thColumn.getText();
		String expReserveColumn	="Reserved";
		
		System.out.println("**************************************** checkAllocatingStockOnBatchBrItemThroughManualInput  ***************************************");
		
		System.out.println("ReserveColumn  				: "+actReserveColumn	+" 	Value Expected : "+expReserveColumn);
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	
	
	public boolean checkStockReservationForBatchBrItemAfterConsumingInNextRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Reserve));
		enter_Reserve.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();
	
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow1		="19";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow2		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow2		="20";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expbatchRes_QtyToReserveRow1			="19";
		String expbatchRes_BatchNoRow1				="PVSBR";
		String expbatchRes_WareHouseRow1			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow1			="100";
		String expbatchRes_RelesaseQtyRow1			="0";
		String expbatchRes_CurOrdResQtyRow1			="20";
		String expbatchRes_BatchQtyRow1				="120";
	
	
		System.out.println("**************************************** checkStockReservationForBatchBrItemAfterConsumingInNextRow  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1))
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			return true;
		}
		else
		{
			
			 
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}

	
	
	
	public boolean checkSavingSalesOrderVoucherWithReservationBatchItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrderVoucherWithReservationBatchItem  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}


	
	
	public boolean checkSalesOrderPreviousOptionBySavingVoucherWithBatchReservationAndClickOnPrevious() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		
		// Actual
		String actdocumentNumberTxt  =documentNumberTxt.getAttribute("value");
		String actcustomerAccountTxt =customerAccountTxt.getAttribute("value");
		
		String actWareHouseR1C1      =select1stRow_1stColumn.getText();
		String actItemR1C2           =select1stRow_2ndColumn.getText();
		String actUnitsR1C3          =select1stRow_3rdColumn.getText();
		String actRDR1C4             =select1stRow_4thColumn.getText();
		String actAqR1C5             =select1stRow_5thColumn.getText();
		String actFqR1C6             =select1stRow_6thColumn.getText();
		String actQtyR1C7            =select1stRow_7thColumn.getText();
		String actReserveR1C8        =select1stRow_8thColumn.getText();
		boolean actLsalesOrdersR1C9  =select1stRow_9thColumn.getText().isEmpty();
		String actRateR1C10          =select1stRow_10thColumn.getText();
		String actGrossR1C11         =select1stRow_11thColumn.getText();
		
		String actWareHouseR2C1      =select2ndRow_1stColumn.getText();
		String actItemR2C2           =select2ndRow_2ndColumn.getText();
		String actUnitsR2C3          =select2ndRow_3rdColumn.getText();
		String actRDR2C4             =select2ndRow_4thColumn.getText();
		String actAqR2C5             =select2ndRow_5thColumn.getText();
		String actFqR2C6             =select2ndRow_6thColumn.getText();
		String actQtyR2C7            =select2ndRow_7thColumn.getText();
		String actReserveR2C8        =select2ndRow_8thColumn.getText();
		boolean actLsalesOrdersR2C9  =select2ndRow_9thColumn.getText().isEmpty();
		String actRateR2C10          =select2ndRow_10thColumn.getText();
		String actGrossR2C11         =select2ndRow_11thColumn.getText();
		
		String actso_footerQty       =so_footerQty.getText();
		String actso_footerRDField   =so_footerRDField.getText();
		String actso_footerAQ        =so_footerAQ.getText();
		String actso_footerFQ        =so_footerFQ.getText();
		String actso_footerGross     =so_footerGross.getText();
		String actso_footerNet       =so_footerNet.getText();
	
		// Expected
		String expdocumentNumberTxt  ="3";
		String expcustomerAccountTxt ="Customer A";
		
		String expWareHouseR1C1      ="SECUNDERABAD";
		String expItemR1C2           ="BATCH BR ITEM";
		String expUnitsR1C3          ="Pcs";
		String expRDR1C4             ="0.00";
		String expAqR1C5             ="19.00";
		String expFqR1C6             ="0.00";
		String expQtyR1C7            ="19.00";
		String expReserveR1C8        ="Reserved";
		boolean expLsalesOrdersR1C9  =true;
		String expRateR1C10          ="10.00";
		String expGrossR1C11         ="190.00";
		
		String expWareHouseR2C1      ="SECUNDERABAD";
		String expItemR2C2           ="BATCH BR ITEM";
		String expUnitsR2C3          ="Pcs";
		String expRDR2C4             ="0.00";
		String expAqR2C5             ="0.00";
		String expFqR2C6             ="20.00";
		String expQtyR2C7            ="20.00";
		String expReserveR2C8        ="Reserved";
		boolean expLsalesOrdersR2C9  =true;
		String expRateR2C10          ="10.00";
		String expGrossR2C11         ="200.00";
		
		String expso_footerQty       ="39.00";
		String expso_footerRDField   ="0.00";
		String expso_footerAQ        ="19.00";
		String expso_footerFQ        ="20.00";
		String expso_footerGross     ="390.00";
		String expso_footerNet       ="390.00";
		
		
		
		System.out.println("************************************* checkSalesOrderVoucherAfterSavingWithReservationOnPreviousOption  *********************************");
		
		System.out.println("documentNumberTxt  	:  "+actdocumentNumberTxt 	+" value Expected : "+expdocumentNumberTxt);
		System.out.println("customerAccountTxt 	:  "+actcustomerAccountTxt 	+" value Expected : "+expcustomerAccountTxt);
		
		System.out.println("WareHouseR1C1  		:  "+actWareHouseR1C1 		+" value Expected : "+expWareHouseR1C1);
		System.out.println("ItemR1C2  			:  "+actItemR1C2 			+" value Expected : "+expItemR1C2);
		System.out.println("UnitsR1C3 			:  "+actUnitsR1C3 			+" value Expected : "+expUnitsR1C3);
		System.out.println("RDR1C4  			:  "+actRDR1C4 				+" value Expected : "+expRDR1C4);
		System.out.println("AqR1C5  			:  "+actAqR1C5 				+" value Expected : "+expAqR1C5);
		System.out.println("FqR1C6  			:  "+actFqR1C6 				+" value Expected : "+expFqR1C6);
		System.out.println("QtyR1C7  			:  "+actQtyR1C7 			+" value Expected : "+expQtyR1C7);
		System.out.println("ReserveR1C8  		:  "+actReserveR1C8 		+" value Expected : "+expReserveR1C8);
		System.out.println("LsalesOrdersR1C9  	:  "+actLsalesOrdersR1C9 	+" value Expected : "+expLsalesOrdersR1C9);
		System.out.println("RateR1C10  			:  "+actRateR1C10 			+" value Expected : "+expRateR1C10);
		System.out.println("GrossR1C11  		:  "+actGrossR1C11 			+" value Expected : "+expGrossR1C11);
		
		System.out.println("WareHouseR2C1  		:  "+actWareHouseR2C1 		+" value Expected : "+expWareHouseR2C1);
		System.out.println("ItemR2C2  			:  "+actItemR2C2 			+" value Expected : "+expItemR2C2);
		System.out.println("UnitsR2C3 			:  "+actUnitsR2C3 			+" value Expected : "+expUnitsR2C3);
		System.out.println("RDR2C4  			:  "+actRDR2C4 				+" value Expected : "+expRDR2C4);
		System.out.println("AqR2C5  			:  "+actAqR2C5 				+" value Expected : "+expAqR2C5);
		System.out.println("FqR2C6  			:  "+actFqR2C6 				+" value Expected : "+expFqR2C6);
		System.out.println("QtyR2C7  			:  "+actQtyR2C7 			+" value Expected : "+expQtyR2C7);
		System.out.println("ReserveR2C8  		:  "+actReserveR2C8 		+" value Expected : "+expReserveR2C8);
		System.out.println("LsalesOrdersR2C9  	:  "+actLsalesOrdersR2C9 	+" value Expected : "+expLsalesOrdersR2C9);
		System.out.println("RateR2C10  			:  "+actRateR2C10 			+" value Expected : "+expRateR2C10);
		System.out.println("GrossR2C11  		:  "+actGrossR2C11 			+" value Expected : "+expGrossR2C11);
		
		System.out.println("so_footerQty  		:  "+actso_footerQty 		+" value Expected : "+expso_footerQty);
		System.out.println("so_footerRDField 	:  "+actso_footerRDField	+" value Expected : "+expso_footerRDField);
		System.out.println("so_footerAQ  		:  "+actso_footerAQ 		+" value Expected : "+expso_footerAQ);
		System.out.println("so_footerFQ  		:  "+actso_footerFQ 		+" value Expected : "+expso_footerFQ);
		System.out.println("so_footerGross  	:  "+actso_footerGross 		+" value Expected : "+expso_footerGross);
		System.out.println("so_footerNet  		:  "+actso_footerNet 		+" value Expected : "+expso_footerNet);
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actWareHouseR1C1.equalsIgnoreCase(expWareHouseR1C1) && actItemR1C2.equalsIgnoreCase(expItemR1C2)
				&& actUnitsR1C3.equalsIgnoreCase(expUnitsR1C3) && actRDR1C4.equalsIgnoreCase(expRDR1C4) && actAqR1C5.equalsIgnoreCase(expAqR1C5)
				&& actFqR1C6.equalsIgnoreCase(expFqR1C6) && actQtyR1C7.equalsIgnoreCase(expQtyR1C7) && actReserveR1C8.equalsIgnoreCase(expReserveR1C8)
				&& actLsalesOrdersR1C9==expLsalesOrdersR1C9 && actRateR1C10.equalsIgnoreCase(expRateR1C10) && actGrossR1C11.equalsIgnoreCase(expGrossR1C11)
				
				&& actWareHouseR2C1.equalsIgnoreCase(expWareHouseR2C1) && actItemR2C2.equalsIgnoreCase(expItemR2C2)
				&& actUnitsR2C3.equalsIgnoreCase(expUnitsR2C3) && actRDR2C4.equalsIgnoreCase(expRDR2C4) && actAqR2C5.equalsIgnoreCase(expAqR2C5)
				&& actFqR2C6.equalsIgnoreCase(expFqR2C6) && actQtyR2C7.equalsIgnoreCase(expQtyR2C7) && actReserveR2C8.equalsIgnoreCase(expReserveR2C8)
				&& actLsalesOrdersR2C9==expLsalesOrdersR2C9 && actRateR2C10.equalsIgnoreCase(expRateR2C10) && actGrossR2C11.equalsIgnoreCase(expGrossR2C11)
				
				&& actso_footerQty.equalsIgnoreCase(expso_footerQty) && actso_footerRDField.equalsIgnoreCase(expso_footerRDField)
				&& actso_footerAQ.equalsIgnoreCase(expso_footerAQ) && actso_footerFQ.equalsIgnoreCase(expso_footerFQ)
				&& actso_footerGross.equalsIgnoreCase(expso_footerGross) && actso_footerNet.equalsIgnoreCase(expso_footerNet))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			new_footerMinimizeBtn.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			new_footerMinimizeBtn.click();
			
			return false;
		}
	}
	
		
	
	
	public boolean checkSalesOrderVoucherBatchReservationByEditingVoucherToVerifyToDisplayBalanceQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("5");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		String actTextres_LeftPanelWareHouseRow3	=res_LeftPanelWareHouseRow3.getText();
		String actTextres_LeftPanelItemCodeRow3		=res_LeftPanelItemCodeRow3.getText();
		String actTextres_LeftPanelItemNameRow3		=res_LeftPanelItemNameRow3.getText();
		String actTextres_LeftPanelItemQtyRow3		=res_LeftPanelItemQtyRow3.getText();
		String actTextres_LeftPanelBaseUnitRow3		=res_LeftPanelBaseUnitRow3.getText();
		
		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();
	
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow1		="19";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow2		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow2		="20";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow3	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow3		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow3		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow3		="5";
		String expTextres_LeftPanelBaseUnitRow3		="Pcs";
		
		String expbatchRes_QtyToReserveRow1			="0";
		String expbatchRes_BatchNoRow1				="PVSBR";
		String expbatchRes_WareHouseRow1			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow1			="81";
		String expbatchRes_RelesaseQtyRow1			="0";
		String expbatchRes_CurOrdResQtyRow1			="39";
		String expbatchRes_BatchQtyRow1				="120";
	
	
		System.out.println("**************************************** checkSalesOrderVoucherBatchReservationByEditingVoucherToVerifyToDisplayBalanceQty  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("Textres_LeftPanelWareHouseRow3  	: "+actTextres_LeftPanelWareHouseRow3		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow3);
		System.out.println("Textres_LeftPanelItemCodeRow3  		: "+actTextres_LeftPanelItemCodeRow3		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow3);
		System.out.println("Textres_LeftPanelItemNameRow3  		: "+actTextres_LeftPanelItemNameRow3		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow3);
		System.out.println("Textres_LeftPanelItemQtyRow3  		: "+actTextres_LeftPanelItemQtyRow3			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow3);
		System.out.println("Textres_LeftPanelBaseUnitRow3  		: "+actTextres_LeftPanelBaseUnitRow3		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow3);
		
		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actTextres_LeftPanelWareHouseRow3.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow3)
				&& actTextres_LeftPanelItemCodeRow3.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow3) && actTextres_LeftPanelItemNameRow3.equalsIgnoreCase(expTextres_LeftPanelItemNameRow3)
				&& actTextres_LeftPanelItemQtyRow3.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow3) && actTextres_LeftPanelBaseUnitRow3.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow3)
				
				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1))
			{
				System.out.println("Test Pass : Stock Reservation values are as expected");
				return true;
			}
			else
			{
				
				 
				System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
				return false;
			}
		}


	
	
	
	public boolean checkBatchReservationToVerifyPickAndChangeTheQtyToReserveColumnManualyByInputGreaterThanPick() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		String actQtyToReleaseOnPick=enter_QtyToReserve.getAttribute("value");
		
		String expQtyToReleaseOnPick="5";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QtyToReserve));
		enter_QtyToReserve.click();
		enter_QtyToReserve.clear();
		
		Thread.sleep(2000);
		
		enter_QtyToReserve.sendKeys("8");
		
		
		String expErrorMessage="Reserve Quantity can not be greater than selected product quantity";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		String actReserveColumn	=select3rdRow_8thColumn.getText();
		String expReserveColumn	="Reserved";
		
		System.out.println("**************************************** checkBatchReservationToVerifyPickAndChangeTheQtyToReserveColumnManualyByInputGreaterThanPick  ***************************************");
		
		System.out.println("QtyToReleaseOnPick  		: "+actQtyToReleaseOnPick	+" 	Value Expected : "+expQtyToReleaseOnPick);
		System.out.println("ErrorMessage  				: "+validationMessage		+" 	Value Expected : "+expErrorMessage);
		System.out.println("ReserveColumn  				: "+actReserveColumn		+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn) && actQtyToReleaseOnPick.equalsIgnoreCase(expQtyToReleaseOnPick)
				&& validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	

	
	public boolean checkBatchReservationByEditingSameRowByUpdatingQtyToReserveToLessThanDisplayQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
		select3rdRow_8thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Reserve));
		enter_Reserve.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();
		
		String actQtyToReserveOnPick	=enter_QtyToReserve.getAttribute("value");
		String expQtyToReserveOnPick	="5";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QtyToReserve));
		enter_QtyToReserve.click();
		enter_QtyToReserve.clear();
		Thread.sleep(2000);
		enter_QtyToReserve.sendKeys("2");
		Thread.sleep(2000);
		enter_QtyToReserve.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		String actQtyToReserveAfterChange	=batchRes_QtyToReserveRow1.getText();
		String expQtyToReserveAfterChange	="2";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
		
		String actReserveColumn		=select3rdRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkBatchReservationByEditingSameRowByUpdatingQtyToReserveToLessThanDisplayQty  ***************************************");
		
		System.out.println("QtyToReserveOnPick  		: "+actQtyToReserveOnPick		+" 	Value Expected : "+expQtyToReserveOnPick);
		System.out.println("QtyToReserveAfterChange  	: "+actQtyToReserveAfterChange	+" 	Value Expected : "+expQtyToReserveAfterChange);
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn) && actQtyToReserveOnPick.equalsIgnoreCase(expQtyToReserveOnPick)
				&& actQtyToReserveAfterChange.equalsIgnoreCase(expQtyToReserveAfterChange))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}

	
	public boolean checkUpdatingSalesOrderVoucherByDeleteRowWithBatchReservation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkUpdatingSalesOrderVoucherByDeleteRowWithBatchReservation  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}






	
	
	
	
	
	public boolean checkPreviousVoucherDeleteRowQtyInNewVoucherBatchReservationAndSaveVoucherWithFullReserveQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		
		int customercount=customerAccountListCount.size();
		
		System.err.println(customercount);
		
		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Customer B"))
			{
				customerAccountListCount.get(i).click();
				
				break;
			}
		}
				
		customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
		
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
		
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
				
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
			
		int itemcount1=itemListCount.size();
				
		System.err.println(itemcount1);
		
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
				
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("41");
		so_enter_AQTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("40");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();
	
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow1		="81";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expbatchRes_QtyToReserveRow1			="0";
		String expbatchRes_BatchNoRow1				="PVSBR";
		String expbatchRes_WareHouseRow1			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow1			="81";
		String expbatchRes_RelesaseQtyRow1			="0";
		String expbatchRes_CurOrdResQtyRow1			="0";
		String expbatchRes_BatchQtyRow1				="120";
	
	
		System.out.println("**************************************** checkSalesOrderVoucherBatchReservationByEditingVoucherToVerifyToDisplayBalanceQty  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1))
		{
			 
			return true;
		}
		else
		{
			return false;
		}
	}
	

	
	
	public boolean checkVoucherDataInBodyAfterFullReserveAndCheckSecondRowBatchReservationColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		String actQtyToReserveOnPick	=enter_QtyToReserve.getAttribute("value");
		String expQtyToReserveOnPick	="81";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn		=select1stRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkVoucherDataInBodyAfterFullReserveAndCheckSecondRowBatchReservationColumn  ***************************************");
		
		System.out.println("QtyToReserveOnPick  		: "+actQtyToReserveOnPick		+" 	Value Expected : "+expQtyToReserveOnPick);
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn) && actQtyToReserveOnPick.equalsIgnoreCase(expQtyToReserveOnPick))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	
		
	
	public boolean checkBatchReservationForBatchItemWithQtySecondRowAfterFullConsuming() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("1");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		boolean actbatchRes_QtyToReserveRow1		=batchRes_QtyToReserveRow1.getText().isEmpty();
		boolean actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText().isEmpty();
		boolean actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText().isEmpty();
		boolean actbatchRes_AvailableQtyRow1		=batchRes_AvailableQtyRow1.getText().isEmpty();
		boolean actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText().isEmpty();
		boolean actbatchRes_CurOrdResQtyRow1		=batchRes_CurOrdResQtyRow1.getText().isEmpty();
		boolean actbatchRes_BatchQtyRow1			=batchRes_BatchQtyRow1.getText().isEmpty();
	
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow1		="81";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow2		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow2		="1";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		boolean expbatchRes_QtyToReserveRow1		=true;
		boolean expbatchRes_BatchNoRow1				=true;
		boolean expbatchRes_WareHouseRow1			=true;
		boolean expbatchRes_AvailableQtyRow1		=true;
		boolean expbatchRes_RelesaseQtyRow1			=true;
		boolean expbatchRes_CurOrdResQtyRow1		=true;
		boolean expbatchRes_BatchQtyRow1			=true;
	
	
		System.out.println("**************************************** checkBatchReservationForBatchItemWithQtySecondRowAfterFullConsuming  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)

				&& actbatchRes_QtyToReserveRow1==expbatchRes_QtyToReserveRow1 && actbatchRes_BatchNoRow1==expbatchRes_BatchNoRow1
				&& actbatchRes_WareHouseRow1==expbatchRes_WareHouseRow1 && actbatchRes_AvailableQtyRow1==expbatchRes_AvailableQtyRow1
				&& actbatchRes_RelesaseQtyRow1==expbatchRes_RelesaseQtyRow1 && actbatchRes_CurOrdResQtyRow1==expbatchRes_CurOrdResQtyRow1
				&& actbatchRes_BatchQtyRow1==expbatchRes_BatchQtyRow1)
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			return true;
		}
		else
		{
			
			 
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			return false;
		}
	}





	
	public boolean checkSalesOrderVoucherByDeleteRowWithBatchReservation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		
		boolean actReserveColumn=select2ndRow_8thColumn.getText().isEmpty();
		boolean expReserveColumn=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		secondRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrderVoucherWithReservationBatchItem  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		System.out.println("ReserveColumn  : "+actReserveColumn	+" 	Value Expected : "+expReserveColumn);
		
		if(savingMessage==true && actReserveColumn==expReserveColumn)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}
	
	

	
	
	public boolean checkBatchResrvationAvailableQtyAfterFullConsumingInNewVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		
		int customercount=customerAccountListCount.size();
		
		System.err.println(customercount);
		
		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Customer B"))
			{
				customerAccountListCount.get(i).click();
				
				break;
			}
		}
				
		customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
		
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
		
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
				
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
			
		int itemcount1=itemListCount.size();
				
		System.err.println(itemcount1);
		
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH BR ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
				
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		boolean actbatchRes_QtyToReserveRow1		=batchRes_QtyToReserveRow1.getText().isEmpty();
		boolean actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText().isEmpty();
		boolean actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText().isEmpty();
		boolean actbatchRes_AvailableQtyRow1		=batchRes_AvailableQtyRow1.getText().isEmpty();
		boolean actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText().isEmpty();
		boolean actbatchRes_CurOrdResQtyRow1		=batchRes_CurOrdResQtyRow1.getText().isEmpty();
		boolean actbatchRes_BatchQtyRow1			=batchRes_BatchQtyRow1.getText().isEmpty();
	
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemNameRow1		="BATCH BR ITEM";
		String expTextres_LeftPanelItemQtyRow1		="1";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		boolean expbatchRes_QtyToReserveRow1		=true;
		boolean expbatchRes_BatchNoRow1				=true;
		boolean expbatchRes_WareHouseRow1			=true;
		boolean expbatchRes_AvailableQtyRow1		=true;
		boolean expbatchRes_RelesaseQtyRow1			=true;
		boolean expbatchRes_CurOrdResQtyRow1		=true;
		boolean expbatchRes_BatchQtyRow1			=true;
	
	
		System.out.println("**************************************** checkBatchReservationForBatchItemWithQtySecondRowAfterFullConsuming  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actbatchRes_QtyToReserveRow1==expbatchRes_QtyToReserveRow1 && actbatchRes_BatchNoRow1==expbatchRes_BatchNoRow1
				&& actbatchRes_WareHouseRow1==expbatchRes_WareHouseRow1 && actbatchRes_AvailableQtyRow1==expbatchRes_AvailableQtyRow1
				&& actbatchRes_RelesaseQtyRow1==expbatchRes_RelesaseQtyRow1 && actbatchRes_CurOrdResQtyRow1==expbatchRes_CurOrdResQtyRow1
				&& actbatchRes_BatchQtyRow1==expbatchRes_BatchQtyRow1)
		{
			 
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			 res_OkBtn.click();
			
			 return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			 res_OkBtn.click();
			 
			return false;
		}
	}
	
	
	
	
	public boolean checkBatchReservationAvailableQtyAfterFullConsumingInNewVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("23");
		so_enter_AQTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("23");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
			
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();
		
		String actbatchRes_QtyToReserveRow2			=batchRes_QtyToReserveRow2.getText();
		String actbatchRes_BatchNoRow2				=batchRes_BatchNoRow2.getText();
		String actbatchRes_WareHouseRow2			=batchRes_WareHouseRow2.getText();
		String actbatchRes_AvailableQtyRow2			=batchRes_AvailableQtyRow2.getText();
		String actbatchRes_RelesaseQtyRow2			=batchRes_RelesaseQtyRow2.getText();
		String actbatchRes_CurOrdResQtyRow2			=batchRes_CurOrdResQtyRow2.getText();
		String actbatchRes_BatchQtyRow2				=batchRes_BatchQtyRow2.getText();
		
		String actbatchRes_QtyToReserveRow3			=batchRes_QtyToReserveRow3.getText();
		String actbatchRes_BatchNoRow3				=batchRes_BatchNoRow3.getText();
		String actbatchRes_WareHouseRow3			=batchRes_WareHouseRow3.getText();
		String actbatchRes_AvailableQtyRow3			=batchRes_AvailableQtyRow3.getText();
		String actbatchRes_RelesaseQtyRow3			=batchRes_RelesaseQtyRow3.getText();
		String actbatchRes_CurOrdResQtyRow3			=batchRes_CurOrdResQtyRow3.getText();
		String actbatchRes_BatchQtyRow3				=batchRes_BatchQtyRow3.getText();
		
		String actbatchRes_QtyToReserveRow4			=batchRes_QtyToReserveRow4.getText();
		String actbatchRes_BatchNoRow4				=batchRes_BatchNoRow4.getText();
		String actbatchRes_WareHouseRow4			=batchRes_WareHouseRow4.getText();
		String actbatchRes_AvailableQtyRow4			=batchRes_AvailableQtyRow4.getText();
		String actbatchRes_RelesaseQtyRow4			=batchRes_RelesaseQtyRow4.getText();
		String actbatchRes_CurOrdResQtyRow4			=batchRes_CurOrdResQtyRow4.getText();
		String actbatchRes_BatchQtyRow4				=batchRes_BatchQtyRow4.getText();
	
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BWI";
		String expTextres_LeftPanelItemNameRow1		="BATCH WA ITEM";
		String expTextres_LeftPanelItemQtyRow1		="46";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expbatchRes_QtyToReserveRow1			="0";
		String expbatchRes_BatchNoRow1				="PVSWA";
		String expbatchRes_WareHouseRow1			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow1			="24";
		String expbatchRes_RelesaseQtyRow1			="0";
		String expbatchRes_CurOrdResQtyRow1			="0";
		String expbatchRes_BatchQtyRow1				="24";
		
		String expbatchRes_QtyToReserveRow2			="0";
		String expbatchRes_BatchNoRow2				="PVSWA";
		String expbatchRes_WareHouseRow2			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow2			="36";
		String expbatchRes_RelesaseQtyRow2			="0";
		String expbatchRes_CurOrdResQtyRow2			="0";
		String expbatchRes_BatchQtyRow2				="36";
		
		String expbatchRes_QtyToReserveRow3			="0";
		String expbatchRes_BatchNoRow3				="PVSWA";
		String expbatchRes_WareHouseRow3			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow3			="34";
		String expbatchRes_RelesaseQtyRow3			="0";
		String expbatchRes_CurOrdResQtyRow3			="0";
		String expbatchRes_BatchQtyRow3				="34";
		
		String expbatchRes_QtyToReserveRow4			="0";
		String expbatchRes_BatchNoRow4				="PVSWA";
		String expbatchRes_WareHouseRow4			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow4			="12";
		String expbatchRes_RelesaseQtyRow4			="0";
		String expbatchRes_CurOrdResQtyRow4			="0";
		String expbatchRes_BatchQtyRow4				="12";
	
	
		System.out.println("**************************************** checkBatchReservationAvailableQtyAfterFullConsumingInNewVoucher  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		System.out.println("batchRes_QtyToReserveRow2  		    : "+actbatchRes_QtyToReserveRow2			+" 	Value Expected : "+expbatchRes_QtyToReserveRow2);
		System.out.println("batchRes_BatchNoRow2  				: "+actbatchRes_BatchNoRow2					+" 	Value Expected : "+expbatchRes_BatchNoRow2);
		System.out.println("batchRes_WareHouseRow2  			: "+actbatchRes_WareHouseRow2				+" 	Value Expected : "+expbatchRes_WareHouseRow2);
		System.out.println("batchRes_AvailableQtyRow2  			: "+actbatchRes_AvailableQtyRow2			+" 	Value Expected : "+expbatchRes_AvailableQtyRow2);
		System.out.println("batchRes_RelesaseQtyRow2  			: "+actbatchRes_RelesaseQtyRow2				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow2);
		System.out.println("batchRes_CurOrdResQtyRow2 			: "+actbatchRes_CurOrdResQtyRow2   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow2);
		System.out.println("batchRes_BatchQtyRow2  				: "+actbatchRes_BatchQtyRow2				+" 	Value Expected : "+expbatchRes_BatchQtyRow2);
		
		System.out.println("batchRes_QtyToReserveRow3  		    : "+actbatchRes_QtyToReserveRow3			+" 	Value Expected : "+expbatchRes_QtyToReserveRow3);
		System.out.println("batchRes_BatchNoRow3  				: "+actbatchRes_BatchNoRow3					+" 	Value Expected : "+expbatchRes_BatchNoRow3);
		System.out.println("batchRes_WareHouseRow3  			: "+actbatchRes_WareHouseRow3				+" 	Value Expected : "+expbatchRes_WareHouseRow3);
		System.out.println("batchRes_AvailableQtyRow3  			: "+actbatchRes_AvailableQtyRow3			+" 	Value Expected : "+expbatchRes_AvailableQtyRow3);
		System.out.println("batchRes_RelesaseQtyRow3  			: "+actbatchRes_RelesaseQtyRow3				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow3);
		System.out.println("batchRes_CurOrdResQtyRow3 			: "+actbatchRes_CurOrdResQtyRow3   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow3);
		System.out.println("batchRes_BatchQtyRow3  				: "+actbatchRes_BatchQtyRow3				+" 	Value Expected : "+expbatchRes_BatchQtyRow3);
		
		System.out.println("batchRes_QtyToReserveRow4  		    : "+actbatchRes_QtyToReserveRow4			+" 	Value Expected : "+expbatchRes_QtyToReserveRow4);
		System.out.println("batchRes_BatchNoRow4  				: "+actbatchRes_BatchNoRow4					+" 	Value Expected : "+expbatchRes_BatchNoRow4);
		System.out.println("batchRes_WareHouseRow4  			: "+actbatchRes_WareHouseRow4				+" 	Value Expected : "+expbatchRes_WareHouseRow4);
		System.out.println("batchRes_AvailableQtyRow4  			: "+actbatchRes_AvailableQtyRow4			+" 	Value Expected : "+expbatchRes_AvailableQtyRow4);
		System.out.println("batchRes_RelesaseQtyRow4  			: "+actbatchRes_RelesaseQtyRow4				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow4);
		System.out.println("batchRes_CurOrdResQtyRow4 			: "+actbatchRes_CurOrdResQtyRow4   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow4);
		System.out.println("batchRes_BatchQtyRow4  				: "+actbatchRes_BatchQtyRow4				+" 	Value Expected : "+expbatchRes_BatchQtyRow4);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)
				
				&& actbatchRes_QtyToReserveRow2.equalsIgnoreCase(expbatchRes_QtyToReserveRow2)&& actbatchRes_BatchNoRow2.equalsIgnoreCase(expbatchRes_BatchNoRow2)
				&& actbatchRes_WareHouseRow2.equalsIgnoreCase(expbatchRes_WareHouseRow2) && actbatchRes_AvailableQtyRow2.equalsIgnoreCase(expbatchRes_AvailableQtyRow2)
				&& actbatchRes_RelesaseQtyRow2.equalsIgnoreCase(expbatchRes_RelesaseQtyRow2) && actbatchRes_CurOrdResQtyRow2.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow2)
				&& actbatchRes_BatchQtyRow2.equalsIgnoreCase(expbatchRes_BatchQtyRow2)
				
				&& actbatchRes_QtyToReserveRow3.equalsIgnoreCase(expbatchRes_QtyToReserveRow3)&& actbatchRes_BatchNoRow3.equalsIgnoreCase(expbatchRes_BatchNoRow3)
				&& actbatchRes_WareHouseRow3.equalsIgnoreCase(expbatchRes_WareHouseRow3) && actbatchRes_AvailableQtyRow3.equalsIgnoreCase(expbatchRes_AvailableQtyRow3)
				&& actbatchRes_RelesaseQtyRow3.equalsIgnoreCase(expbatchRes_RelesaseQtyRow3) && actbatchRes_CurOrdResQtyRow3.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow3)
				&& actbatchRes_BatchQtyRow3.equalsIgnoreCase(expbatchRes_BatchQtyRow3)
				
				&& actbatchRes_QtyToReserveRow4.equalsIgnoreCase(expbatchRes_QtyToReserveRow4)&& actbatchRes_BatchNoRow4.equalsIgnoreCase(expbatchRes_BatchNoRow4)
				&& actbatchRes_WareHouseRow4.equalsIgnoreCase(expbatchRes_WareHouseRow4) && actbatchRes_AvailableQtyRow4.equalsIgnoreCase(expbatchRes_AvailableQtyRow4)
				&& actbatchRes_RelesaseQtyRow4.equalsIgnoreCase(expbatchRes_RelesaseQtyRow4) && actbatchRes_CurOrdResQtyRow4.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow4)
				&& actbatchRes_BatchQtyRow4.equalsIgnoreCase(expbatchRes_BatchQtyRow4))
		{
			 
			return true;
		}
		else
		{
			return false;
		}
	}



	
	
	
	public boolean checkPickQtyFromTwoRowsOfQtyToReserveColumnInBatchReservation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow3));
		batchRes_QtyToReserveRow3.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow4));
		batchRes_QtyToReserveRow4.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn		=select1stRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkPickQtyFromTwoRowsOfQtyToReserveColumnInBatchReservation  ***************************************");
		
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	
	

	
	public boolean checkReserveQtyInSecondRowWithBatchItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("BATCH WA ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("15");
		so_enter_AQTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
			
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();
		
		String actbatchRes_QtyToReserveRow2			=batchRes_QtyToReserveRow2.getText();
		String actbatchRes_BatchNoRow2				=batchRes_BatchNoRow2.getText();
		String actbatchRes_WareHouseRow2			=batchRes_WareHouseRow2.getText();
		String actbatchRes_AvailableQtyRow2			=batchRes_AvailableQtyRow2.getText();
		String actbatchRes_RelesaseQtyRow2			=batchRes_RelesaseQtyRow2.getText();
		String actbatchRes_CurOrdResQtyRow2			=batchRes_CurOrdResQtyRow2.getText();
		String actbatchRes_BatchQtyRow2				=batchRes_BatchQtyRow2.getText();
	
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BWI";
		String expTextres_LeftPanelItemNameRow1		="BATCH WA ITEM";
		String expTextres_LeftPanelItemQtyRow1		="46";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="BWI";
		String expTextres_LeftPanelItemNameRow2		="BATCH WA ITEM";
		String expTextres_LeftPanelItemQtyRow2		="15";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expbatchRes_QtyToReserveRow1			="0";
		String expbatchRes_BatchNoRow1				="PVSWA";
		String expbatchRes_WareHouseRow1			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow1			="24";
		String expbatchRes_RelesaseQtyRow1			="0";
		String expbatchRes_CurOrdResQtyRow1			="0";
		String expbatchRes_BatchQtyRow1				="24";
		
		String expbatchRes_QtyToReserveRow2			="0";
		String expbatchRes_BatchNoRow2				="PVSWA";
		String expbatchRes_WareHouseRow2			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow2			="36";
		String expbatchRes_RelesaseQtyRow2			="0";
		String expbatchRes_CurOrdResQtyRow2			="0";
		String expbatchRes_BatchQtyRow2				="36";
		
	
	
		System.out.println("**************************************** checkReserveQtyInSecondRowWithBatchItem  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		System.out.println("batchRes_QtyToReserveRow2  		    : "+actbatchRes_QtyToReserveRow2			+" 	Value Expected : "+expbatchRes_QtyToReserveRow2);
		System.out.println("batchRes_BatchNoRow2  				: "+actbatchRes_BatchNoRow2					+" 	Value Expected : "+expbatchRes_BatchNoRow2);
		System.out.println("batchRes_WareHouseRow2  			: "+actbatchRes_WareHouseRow2				+" 	Value Expected : "+expbatchRes_WareHouseRow2);
		System.out.println("batchRes_AvailableQtyRow2  			: "+actbatchRes_AvailableQtyRow2			+" 	Value Expected : "+expbatchRes_AvailableQtyRow2);
		System.out.println("batchRes_RelesaseQtyRow2  			: "+actbatchRes_RelesaseQtyRow2				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow2);
		System.out.println("batchRes_CurOrdResQtyRow2 			: "+actbatchRes_CurOrdResQtyRow2   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow2);
		System.out.println("batchRes_BatchQtyRow2  				: "+actbatchRes_BatchQtyRow2				+" 	Value Expected : "+expbatchRes_BatchQtyRow2);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)
				
				&& actbatchRes_QtyToReserveRow2.equalsIgnoreCase(expbatchRes_QtyToReserveRow2)&& actbatchRes_BatchNoRow2.equalsIgnoreCase(expbatchRes_BatchNoRow2)
				&& actbatchRes_WareHouseRow2.equalsIgnoreCase(expbatchRes_WareHouseRow2) && actbatchRes_AvailableQtyRow2.equalsIgnoreCase(expbatchRes_AvailableQtyRow2)
				&& actbatchRes_RelesaseQtyRow2.equalsIgnoreCase(expbatchRes_RelesaseQtyRow2) && actbatchRes_CurOrdResQtyRow2.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow2)
				&& actbatchRes_BatchQtyRow2.equalsIgnoreCase(expbatchRes_BatchQtyRow2))
		{
			 
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	public boolean checkPickAndOkOptionAndCheckReserveColumnInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		
		String actReserveColumn		=select2ndRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkPickAndOkOptionAndCheckReserveColumnInSecondRow  ***************************************");
		
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	
	
	
	
		
	
	
	public boolean checkSavingSalesOrderVoucherToReserveDifferentBatchItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
					
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrderVoucherToReserveDifferentBatchItem  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}
	

	
	
	public boolean checkBatchReservationPopupScreenByIncreaseByEditingTheVoucherAndUpdateTheQtyInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("24");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Reserve));
		enter_Reserve.sendKeys(Keys.SPACE);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
	
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();
		
		String actbatchRes_QtyToReserveRow2			=batchRes_QtyToReserveRow2.getText();
		String actbatchRes_BatchNoRow2				=batchRes_BatchNoRow2.getText();
		String actbatchRes_WareHouseRow2			=batchRes_WareHouseRow2.getText();
		String actbatchRes_AvailableQtyRow2			=batchRes_AvailableQtyRow2.getText();
		String actbatchRes_RelesaseQtyRow2			=batchRes_RelesaseQtyRow2.getText();
		String actbatchRes_CurOrdResQtyRow2			=batchRes_CurOrdResQtyRow2.getText();
		String actbatchRes_BatchQtyRow2				=batchRes_BatchQtyRow2.getText();
		
		String actbatchRes_QtyToReserveRow3			=batchRes_QtyToReserveRow3.getText();
		String actbatchRes_BatchNoRow3				=batchRes_BatchNoRow3.getText();
		String actbatchRes_WareHouseRow3			=batchRes_WareHouseRow3.getText();
		String actbatchRes_AvailableQtyRow3			=batchRes_AvailableQtyRow3.getText();
		String actbatchRes_RelesaseQtyRow3			=batchRes_RelesaseQtyRow3.getText();
		String actbatchRes_CurOrdResQtyRow3			=batchRes_CurOrdResQtyRow3.getText();
		String actbatchRes_BatchQtyRow3				=batchRes_BatchQtyRow3.getText();
		
		String actbatchRes_QtyToReserveRow4			=batchRes_QtyToReserveRow4.getText();
		String actbatchRes_BatchNoRow4				=batchRes_BatchNoRow4.getText();
		String actbatchRes_WareHouseRow4			=batchRes_WareHouseRow4.getText();
		String actbatchRes_AvailableQtyRow4			=batchRes_AvailableQtyRow4.getText();
		String actbatchRes_RelesaseQtyRow4			=batchRes_RelesaseQtyRow4.getText();
		String actbatchRes_CurOrdResQtyRow4			=batchRes_CurOrdResQtyRow4.getText();
		String actbatchRes_BatchQtyRow4				=batchRes_BatchQtyRow4.getText();
	
	 
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BWI";
		String expTextres_LeftPanelItemNameRow1		="BATCH WA ITEM";
		String expTextres_LeftPanelItemQtyRow1		="47";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="BWI";
		String expTextres_LeftPanelItemNameRow2		="BATCH WA ITEM";
		String expTextres_LeftPanelItemQtyRow2		="15";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expbatchRes_QtyToReserveRow1			="0";
		String expbatchRes_BatchNoRow1				="PVSWA";
		String expbatchRes_WareHouseRow1			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow1			="9";
		String expbatchRes_RelesaseQtyRow1			="0";
		String expbatchRes_CurOrdResQtyRow1			="15";
		String expbatchRes_BatchQtyRow1				="24";
		
		String expbatchRes_QtyToReserveRow2			="0";
		String expbatchRes_BatchNoRow2				="PVSWA";
		String expbatchRes_WareHouseRow2			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow2			="36";
		String expbatchRes_RelesaseQtyRow2			="0";
		String expbatchRes_CurOrdResQtyRow2			="0";
		String expbatchRes_BatchQtyRow2				="36";
		
		String expbatchRes_QtyToReserveRow3			="34";
		String expbatchRes_BatchNoRow3				="PVSWA";
		String expbatchRes_WareHouseRow3			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow3			="34";
		String expbatchRes_RelesaseQtyRow3			="0";
		String expbatchRes_CurOrdResQtyRow3			="0";
		String expbatchRes_BatchQtyRow3				="34";
		
		String expbatchRes_QtyToReserveRow4			="12";
		String expbatchRes_BatchNoRow4				="PVSWA";
		String expbatchRes_WareHouseRow4			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow4			="12";
		String expbatchRes_RelesaseQtyRow4			="0";
		String expbatchRes_CurOrdResQtyRow4			="0";
		String expbatchRes_BatchQtyRow4				="12";
		
	
	
		System.out.println("**************************************** checkBatchReservationPopupScreenByIncreaseByEditingTheVoucherAndUpdateTheQtyInFirstRow  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		System.out.println("batchRes_QtyToReserveRow2  		    : "+actbatchRes_QtyToReserveRow2			+" 	Value Expected : "+expbatchRes_QtyToReserveRow2);
		System.out.println("batchRes_BatchNoRow2  				: "+actbatchRes_BatchNoRow2					+" 	Value Expected : "+expbatchRes_BatchNoRow2);
		System.out.println("batchRes_WareHouseRow2  			: "+actbatchRes_WareHouseRow2				+" 	Value Expected : "+expbatchRes_WareHouseRow2);
		System.out.println("batchRes_AvailableQtyRow2  			: "+actbatchRes_AvailableQtyRow2			+" 	Value Expected : "+expbatchRes_AvailableQtyRow2);
		System.out.println("batchRes_RelesaseQtyRow2  			: "+actbatchRes_RelesaseQtyRow2				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow2);
		System.out.println("batchRes_CurOrdResQtyRow2 			: "+actbatchRes_CurOrdResQtyRow2   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow2);
		System.out.println("batchRes_BatchQtyRow2  				: "+actbatchRes_BatchQtyRow2				+" 	Value Expected : "+expbatchRes_BatchQtyRow2);
		
		System.out.println("batchRes_QtyToReserveRow3  		    : "+actbatchRes_QtyToReserveRow3			+" 	Value Expected : "+expbatchRes_QtyToReserveRow3);
		System.out.println("batchRes_BatchNoRow3  				: "+actbatchRes_BatchNoRow3					+" 	Value Expected : "+expbatchRes_BatchNoRow3);
		System.out.println("batchRes_WareHouseRow3  			: "+actbatchRes_WareHouseRow3				+" 	Value Expected : "+expbatchRes_WareHouseRow3);
		System.out.println("batchRes_AvailableQtyRow3  			: "+actbatchRes_AvailableQtyRow3			+" 	Value Expected : "+expbatchRes_AvailableQtyRow3);
		System.out.println("batchRes_RelesaseQtyRow3  			: "+actbatchRes_RelesaseQtyRow3				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow3);
		System.out.println("batchRes_CurOrdResQtyRow3 			: "+actbatchRes_CurOrdResQtyRow3   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow3);
		System.out.println("batchRes_BatchQtyRow3  				: "+actbatchRes_BatchQtyRow3				+" 	Value Expected : "+expbatchRes_BatchQtyRow3);
		
		System.out.println("batchRes_QtyToReserveRow4  		    : "+actbatchRes_QtyToReserveRow4			+" 	Value Expected : "+expbatchRes_QtyToReserveRow4);
		System.out.println("batchRes_BatchNoRow4  				: "+actbatchRes_BatchNoRow4					+" 	Value Expected : "+expbatchRes_BatchNoRow4);
		System.out.println("batchRes_WareHouseRow4  			: "+actbatchRes_WareHouseRow4				+" 	Value Expected : "+expbatchRes_WareHouseRow4);
		System.out.println("batchRes_AvailableQtyRow4  			: "+actbatchRes_AvailableQtyRow4			+" 	Value Expected : "+expbatchRes_AvailableQtyRow4);
		System.out.println("batchRes_RelesaseQtyRow4  			: "+actbatchRes_RelesaseQtyRow4				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow4);
		System.out.println("batchRes_CurOrdResQtyRow4 			: "+actbatchRes_CurOrdResQtyRow4   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow4);
		System.out.println("batchRes_BatchQtyRow4  				: "+actbatchRes_BatchQtyRow4				+" 	Value Expected : "+expbatchRes_BatchQtyRow4);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)
				
				&& actbatchRes_QtyToReserveRow2.equalsIgnoreCase(expbatchRes_QtyToReserveRow2)&& actbatchRes_BatchNoRow2.equalsIgnoreCase(expbatchRes_BatchNoRow2)
				&& actbatchRes_WareHouseRow2.equalsIgnoreCase(expbatchRes_WareHouseRow2) && actbatchRes_AvailableQtyRow2.equalsIgnoreCase(expbatchRes_AvailableQtyRow2)
				&& actbatchRes_RelesaseQtyRow2.equalsIgnoreCase(expbatchRes_RelesaseQtyRow2) && actbatchRes_CurOrdResQtyRow2.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow2)
				&& actbatchRes_BatchQtyRow2.equalsIgnoreCase(expbatchRes_BatchQtyRow2)
				
				&& actbatchRes_QtyToReserveRow3.equalsIgnoreCase(expbatchRes_QtyToReserveRow3)&& actbatchRes_BatchNoRow3.equalsIgnoreCase(expbatchRes_BatchNoRow3)
				&& actbatchRes_WareHouseRow3.equalsIgnoreCase(expbatchRes_WareHouseRow3) && actbatchRes_AvailableQtyRow3.equalsIgnoreCase(expbatchRes_AvailableQtyRow3)
				&& actbatchRes_RelesaseQtyRow3.equalsIgnoreCase(expbatchRes_RelesaseQtyRow3) && actbatchRes_CurOrdResQtyRow3.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow3)
				&& actbatchRes_BatchQtyRow3.equalsIgnoreCase(expbatchRes_BatchQtyRow3)
				
				&& actbatchRes_QtyToReserveRow4.equalsIgnoreCase(expbatchRes_QtyToReserveRow4)&& actbatchRes_BatchNoRow4.equalsIgnoreCase(expbatchRes_BatchNoRow4)
				&& actbatchRes_WareHouseRow4.equalsIgnoreCase(expbatchRes_WareHouseRow4) && actbatchRes_AvailableQtyRow4.equalsIgnoreCase(expbatchRes_AvailableQtyRow4)
				&& actbatchRes_RelesaseQtyRow4.equalsIgnoreCase(expbatchRes_RelesaseQtyRow4) && actbatchRes_CurOrdResQtyRow4.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow4)
				&& actbatchRes_BatchQtyRow4.equalsIgnoreCase(expbatchRes_BatchQtyRow4))
		{
			 return true;
		}
		else
		{
			return false;
		}
	}
		
	
	
	public boolean checkFourthRowAsBlankAndPickQtyFromSecondRowInReserveBatchPopupScreenInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow4));
		batchRes_QtyToReserveRow4.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QtyToReserve));
		enter_QtyToReserve.sendKeys("0");
		enter_QtyToReserve.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow2));
		batchRes_QtyToReserveRow2.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn		=select1stRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkFourthRowAsBlankAndPickQtyFromSecondRowInReserveBatchPopupScreenInFirstRow  ***************************************");
		
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	

	
	public boolean checkBatchReservationPopupScreenByDecreaseQtyByEditingTheVoucherAndUpdateTheQtyInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("14");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();
		
		String actbatchRes_QtyToReserveRow2			=batchRes_QtyToReserveRow2.getText();
		String actbatchRes_BatchNoRow2				=batchRes_BatchNoRow2.getText();
		String actbatchRes_WareHouseRow2			=batchRes_WareHouseRow2.getText();
		String actbatchRes_AvailableQtyRow2			=batchRes_AvailableQtyRow2.getText();
		String actbatchRes_RelesaseQtyRow2			=batchRes_RelesaseQtyRow2.getText();
		String actbatchRes_CurOrdResQtyRow2			=batchRes_CurOrdResQtyRow2.getText();
		String actbatchRes_BatchQtyRow2				=batchRes_BatchQtyRow2.getText();
		
		String actbatchRes_QtyToReserveRow3			=batchRes_QtyToReserveRow3.getText();
		String actbatchRes_BatchNoRow3				=batchRes_BatchNoRow3.getText();
		String actbatchRes_WareHouseRow3			=batchRes_WareHouseRow3.getText();
		String actbatchRes_AvailableQtyRow3			=batchRes_AvailableQtyRow3.getText();
		String actbatchRes_RelesaseQtyRow3			=batchRes_RelesaseQtyRow3.getText();
		String actbatchRes_CurOrdResQtyRow3			=batchRes_CurOrdResQtyRow3.getText();
		String actbatchRes_BatchQtyRow3				=batchRes_BatchQtyRow3.getText();
		
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BWI";
		String expTextres_LeftPanelItemNameRow1		="BATCH WA ITEM";
		String expTextres_LeftPanelItemQtyRow1		="47";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="BWI";
		String expTextres_LeftPanelItemNameRow2		="BATCH WA ITEM";
		String expTextres_LeftPanelItemQtyRow2		="14";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expbatchRes_QtyToReserveRow1			="0";
		String expbatchRes_BatchNoRow1				="PVSWA";
		String expbatchRes_WareHouseRow1			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow1			="24";
		String expbatchRes_RelesaseQtyRow1			="0";
		String expbatchRes_CurOrdResQtyRow1			="0";
		String expbatchRes_BatchQtyRow1				="24";
		
		String expbatchRes_QtyToReserveRow2			="0";
		String expbatchRes_BatchNoRow2				="PVSWA";
		String expbatchRes_WareHouseRow2			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow2			="23";
		String expbatchRes_RelesaseQtyRow2			="0";
		String expbatchRes_CurOrdResQtyRow2			="13";
		String expbatchRes_BatchQtyRow2				="36";
		
		String expbatchRes_QtyToReserveRow3			="0";
		String expbatchRes_BatchNoRow3				="PVSWA";
		String expbatchRes_WareHouseRow3			="SECUNDERABAD";
		String expbatchRes_AvailableQtyRow3			="12";
		String expbatchRes_RelesaseQtyRow3			="0";
		String expbatchRes_CurOrdResQtyRow3			="0";
		String expbatchRes_BatchQtyRow3				="12";
		
	
		System.out.println("**************************************** checkBatchReservationPopupScreenByDecreaseQtyByEditingTheVoucherAndUpdateTheQtyInSecondRow  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		System.out.println("batchRes_QtyToReserveRow2  		    : "+actbatchRes_QtyToReserveRow2			+" 	Value Expected : "+expbatchRes_QtyToReserveRow2);
		System.out.println("batchRes_BatchNoRow2  				: "+actbatchRes_BatchNoRow2					+" 	Value Expected : "+expbatchRes_BatchNoRow2);
		System.out.println("batchRes_WareHouseRow2  			: "+actbatchRes_WareHouseRow2				+" 	Value Expected : "+expbatchRes_WareHouseRow2);
		System.out.println("batchRes_AvailableQtyRow2  			: "+actbatchRes_AvailableQtyRow2			+" 	Value Expected : "+expbatchRes_AvailableQtyRow2);
		System.out.println("batchRes_RelesaseQtyRow2  			: "+actbatchRes_RelesaseQtyRow2				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow2);
		System.out.println("batchRes_CurOrdResQtyRow2 			: "+actbatchRes_CurOrdResQtyRow2   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow2);
		System.out.println("batchRes_BatchQtyRow2  				: "+actbatchRes_BatchQtyRow2				+" 	Value Expected : "+expbatchRes_BatchQtyRow2);
		
		System.out.println("batchRes_QtyToReserveRow3  		    : "+actbatchRes_QtyToReserveRow3			+" 	Value Expected : "+expbatchRes_QtyToReserveRow3);
		System.out.println("batchRes_BatchNoRow3  				: "+actbatchRes_BatchNoRow3					+" 	Value Expected : "+expbatchRes_BatchNoRow3);
		System.out.println("batchRes_WareHouseRow3  			: "+actbatchRes_WareHouseRow3				+" 	Value Expected : "+expbatchRes_WareHouseRow3);
		System.out.println("batchRes_AvailableQtyRow3  			: "+actbatchRes_AvailableQtyRow3			+" 	Value Expected : "+expbatchRes_AvailableQtyRow3);
		System.out.println("batchRes_RelesaseQtyRow3  			: "+actbatchRes_RelesaseQtyRow3				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow3);
		System.out.println("batchRes_CurOrdResQtyRow3 			: "+actbatchRes_CurOrdResQtyRow3   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow3);
		System.out.println("batchRes_BatchQtyRow3  				: "+actbatchRes_BatchQtyRow3				+" 	Value Expected : "+expbatchRes_BatchQtyRow3);
		
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)
				
				&& actbatchRes_QtyToReserveRow2.equalsIgnoreCase(expbatchRes_QtyToReserveRow2)&& actbatchRes_BatchNoRow2.equalsIgnoreCase(expbatchRes_BatchNoRow2)
				&& actbatchRes_WareHouseRow2.equalsIgnoreCase(expbatchRes_WareHouseRow2) && actbatchRes_AvailableQtyRow2.equalsIgnoreCase(expbatchRes_AvailableQtyRow2)
				&& actbatchRes_RelesaseQtyRow2.equalsIgnoreCase(expbatchRes_RelesaseQtyRow2) && actbatchRes_CurOrdResQtyRow2.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow2)
				&& actbatchRes_BatchQtyRow2.equalsIgnoreCase(expbatchRes_BatchQtyRow2)
				
				&& actbatchRes_QtyToReserveRow3.equalsIgnoreCase(expbatchRes_QtyToReserveRow3)&& actbatchRes_BatchNoRow3.equalsIgnoreCase(expbatchRes_BatchNoRow3)
				&& actbatchRes_WareHouseRow3.equalsIgnoreCase(expbatchRes_WareHouseRow3) && actbatchRes_AvailableQtyRow3.equalsIgnoreCase(expbatchRes_AvailableQtyRow3)
				&& actbatchRes_RelesaseQtyRow3.equalsIgnoreCase(expbatchRes_RelesaseQtyRow3) && actbatchRes_CurOrdResQtyRow3.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow3)
				&& actbatchRes_BatchQtyRow3.equalsIgnoreCase(expbatchRes_BatchQtyRow3))
		{
			 return true;
		}
		else
		{
		
			return false;
		}
	}
	


	
	public boolean checkReserveColumnInVoucherByDecreaseTheQtyManualyInBatchReservationPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QtyToReserve));
		enter_QtyToReserve.sendKeys("14");
		enter_QtyToReserve.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		
		String actReserveColumn		=select2ndRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkReserveColumnInVoucherByDecreaseTheQtyManualyInBatchReservationPopupScreen  ***************************************");
		
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	
	
	


	
	
	public boolean checkSaveSalesOrderVoucherByIncreaseQtyDecreaseQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
					
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSaveSalesOrderVoucherByIncreaseQtyDecreaseQty  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
			firstRowIndex.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			deleteRowBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
			firstRowIndex.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			deleteRowBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.click();
			pvWareHouseTxt.sendKeys(Keys.SPACE);
			
			int warehousecount=pvwareHouseListCount.size();
			
			System.err.println(warehousecount);
			
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=pvwareHouseListCount.get(i).getAttribute("data-name");
				
				if(data.equalsIgnoreCase("SECUNDERABAD"))
				{
					pvwareHouseListCount.get(i).click();
					
					break;
				}
			}
					
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
				
			int itemcount1=itemListCount.size();
					
			System.err.println(itemcount1);
			
			for(int i=0 ; i < itemcount1 ;i++)
			{
				String data=itemListCount.get(i).getAttribute("data-sname");
				
				if(data.equalsIgnoreCase("BATCH WA ITEM"))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
					
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
			so_enter_AQTxt.sendKeys("24");
			Thread.sleep(2000);
			so_enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
			so_enter_AQTxt.sendKeys("23");
			Thread.sleep(2000);
			so_enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow3));
			batchRes_QtyToReserveRow3.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
			res_PickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow2));
			batchRes_QtyToReserveRow2.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
			res_PickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
			pvWareHouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemcount=itemListCount.size();
			
			System.err.println(itemcount);
				
			for(int i=0 ; i < itemcount ;i++)
			{
				String data=itemListCount.get(i).getAttribute("data-sname");
				
				if(data.equalsIgnoreCase("BATCH WA ITEM"))
				{
					itemListCount.get(i).click();
					
					break;
				}
			}
				
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
			so_enter_AQTxt.sendKeys("14");
			Thread.sleep(2000);
			so_enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
			so_enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
			batchRes_QtyToReserveRow1.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QtyToReserve));
			enter_QtyToReserve.sendKeys("14");
			enter_QtyToReserve.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
			errorMessageCloseBtn.click();
			
			return false;
		}
	}
	


	
	public boolean checkIncreaseQtyAndSaveWihNormalWithoutReservation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("25");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		
		Thread.sleep(2000);
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkIncreaseQtyAndSaveWihNormalWithoutReservation  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
		new_CloseBtn.click();
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			 System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
		     return false;
		}
		
	}
	

	//RMA Reservation
		
	public boolean checkSalesOrderVoucherFirstRowToCheckRMAReservationPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	    customerAccountTxt.click();
	    customerAccountTxt.sendKeys(Keys.SPACE);
		 
	    int customercount=customerAccountListCount.size();
	    
	    System.err.println(customercount);
	    
	    for(int i=0 ; i < customercount ;i++)
	    {
	    	String data=customerAccountListCount.get(i).getAttribute("data-name");
	    	
	    	if(data.equalsIgnoreCase("Customer A"))
	    	{
	    		customerAccountListCount.get(i).click();
				 
	    		break;
	    	}
	    }
			
	    customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=pvwareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(20000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
		// Actual
		
		boolean actstockReservationLabel		=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse		=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode		=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName		=res_LeftPanelItemName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty			=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate			=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit		=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn					=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn				=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn					=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn					=res_CloseBtn.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1 =res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1 =res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1  =res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1 =res_LeftPanelBaseUnitRow1.getText();
		
		
			
		boolean actrmaRes_BodyWarehouse			=rmaRes_BodyWarehouse.isDisplayed();
		boolean actrmaRes_BodyRMANo				=rmaRes_BodyRMANo.isDisplayed();
		boolean actrmaRes_BodySelected			=rmaRes_BodySelected.isDisplayed();
		
		String actrmaRes_WarehouseRow1			=rmaRes_WarehouseRow1.getText();
		String actrmaRes_WarehouseRow2			=rmaRes_WarehouseRow2.getText();
		String actrmaRes_WarehouseRow3			=rmaRes_WarehouseRow3.getText();
		String actrmaRes_WarehouseRow4			=rmaRes_WarehouseRow4.getText();
		String actrmaRes_WarehouseRow5			=rmaRes_WarehouseRow5.getText();
	   
		String actrmaRes_RmaNoRow1				=rmaRes_RmaNoRow1.getText();
		String actrmaRes_RmaNoRow2				=rmaRes_RmaNoRow2.getText();
		String actrmaRes_RmaNoRow3				=rmaRes_RmaNoRow3.getText();
		String actrmaRes_RmaNoRow4				=rmaRes_RmaNoRow4.getText();
		String actrmaRes_RmaNoRow5				=rmaRes_RmaNoRow5.getText();
	
		boolean actrmaRes_SelectedRow1			=rmaRes_SelectedRow1.isSelected();
		boolean actrmaRes_SelectedRow2			=rmaRes_SelectedRow2.isSelected();
		boolean actrmaRes_SelectedRow3			=rmaRes_SelectedRow3.isSelected();
		boolean actrmaRes_SelectedRow4			=rmaRes_SelectedRow4.isSelected();
		boolean actrmaRes_SelectedRow5			=rmaRes_SelectedRow5.isSelected();


	  
		// Expected
	  
		boolean expstockReservationLabel		=true;
		boolean expres_LeftPanelWareHouse		=true;
		boolean expres_LeftPanelItemCode		=true;
		boolean expres_LeftPanelItemName		=true;
		boolean expres_LeftPanelItemQty			=true;
		boolean expres_LeftPanelDueDate			=true;
		boolean expres_LeftPanelBaseUnit		=true;
		boolean expres_PickBtn					=true;
		boolean expres_DiscardBtn				=true;
		boolean expres_OkBtn					=true;
		boolean expres_CloseBtn					=true;
		
		
		String expTextres_LeftPanelWareHouseRow1="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1	="RMA RITEM";
		String expTextres_LeftPanelItemNameRow1	="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow1	="2";
		String expTextres_LeftPanelBaseUnitRow1	="Pcs";
		
		boolean exprmaRes_BodyWarehouse			=true;
		boolean exprmaRes_BodyRMANo				=true;
		boolean exprmaRes_BodySelected			=true;
		
		String exprmaRes_WarehouseRow1			="SECUNDERABAD";
		String exprmaRes_WarehouseRow2			="SECUNDERABAD";
		String exprmaRes_WarehouseRow3			="SECUNDERABAD";
		String exprmaRes_WarehouseRow4			="SECUNDERABAD";
		String exprmaRes_WarehouseRow5			="SECUNDERABAD";
		
		String exprmaRes_RmaNoRow1				="Sec#Pv1";
		String exprmaRes_RmaNoRow2				="Sec#Pv2";
		String exprmaRes_RmaNoRow3				="Sec#Pv3";
		String exprmaRes_RmaNoRow4				="Sec#Pv7";
		String exprmaRes_RmaNoRow5				="Sec#Pv10";
			
		boolean exprmaRes_SelectedRow1			=false;
		boolean exprmaRes_SelectedRow2			=false;
		boolean exprmaRes_SelectedRow3			=false;
		boolean exprmaRes_SelectedRow4			=false;
		boolean exprmaRes_SelectedRow5			=false;
				
		System.out.println("**************************************** checkSalesOrderVoucherFirstRowToCheckRMAReservationPopUpScreen  ***************************************");
	   
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  		: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
				
		System.out.println("rmaRes_BodyWarehouse 		 		: "+actrmaRes_BodyWarehouse					+" 	Value Expected : "+exprmaRes_BodyWarehouse);
		System.out.println("rmaRes_BodyRMANo  					: "+actrmaRes_BodyRMANo						+" 	Value Expected : "+exprmaRes_BodyRMANo);
		System.out.println("rmaRes_BodySelected  				: "+actrmaRes_BodySelected					+" 	Value Expected : "+exprmaRes_BodySelected);
	   
		System.out.println("rmaRes_WarehouseRow1  				: "+actrmaRes_WarehouseRow1					+" 	Value Expected : "+exprmaRes_WarehouseRow1);
		System.out.println("rmaRes_WarehouseRow2  				: "+actrmaRes_WarehouseRow2					+" 	Value Expected : "+exprmaRes_WarehouseRow2);
		System.out.println("rmaRes_WarehouseRow3  				: "+actrmaRes_WarehouseRow3					+" 	Value Expected : "+exprmaRes_WarehouseRow3);
		System.out.println("rmaRes_WarehouseRow4  				: "+actrmaRes_WarehouseRow4					+" 	Value Expected : "+exprmaRes_WarehouseRow4);
		System.out.println("rmaRes_WarehouseRow5  				: "+actrmaRes_WarehouseRow5					+" 	Value Expected : "+exprmaRes_WarehouseRow5);
	   
		System.out.println("rmaRes_RmaNoRow1  					: "+actrmaRes_RmaNoRow1						+" 	Value Expected : "+exprmaRes_RmaNoRow1);
		System.out.println("rmaRes_RmaNoRow2  					: "+actrmaRes_RmaNoRow2						+" 	Value Expected : "+exprmaRes_RmaNoRow2);
		System.out.println("rmaRes_RmaNoRow3  					: "+actrmaRes_RmaNoRow3						+" 	Value Expected : "+exprmaRes_RmaNoRow3);
		System.out.println("rmaRes_RmaNoRow4  					: "+actrmaRes_RmaNoRow4						+" 	Value Expected : "+exprmaRes_RmaNoRow4);
		System.out.println("rmaRes_RmaNoRow5  					: "+actrmaRes_RmaNoRow5						+" 	Value Expected : "+exprmaRes_RmaNoRow5);
	   
		System.out.println("rmaRes_SelectedRow1  				: "+actrmaRes_SelectedRow1					+" 	Value Expected : "+exprmaRes_SelectedRow1);
		System.out.println("rmaRes_SelectedRow2  				: "+actrmaRes_SelectedRow2					+" 	Value Expected : "+exprmaRes_SelectedRow2);
		System.out.println("rmaRes_SelectedRow3  				: "+actrmaRes_SelectedRow3					+" 	Value Expected : "+exprmaRes_SelectedRow3);
		System.out.println("rmaRes_SelectedRow4  				: "+actrmaRes_SelectedRow4					+" 	Value Expected : "+exprmaRes_SelectedRow4);
		System.out.println("rmaRes_SelectedRow5  				: "+actrmaRes_SelectedRow5					+" 	Value Expected : "+exprmaRes_SelectedRow5);
	   
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actrmaRes_BodyWarehouse==exprmaRes_BodyWarehouse && actrmaRes_BodyRMANo==exprmaRes_BodyRMANo && actrmaRes_BodySelected==exprmaRes_BodySelected
				
				&& actrmaRes_WarehouseRow1.equalsIgnoreCase(exprmaRes_WarehouseRow1) && actrmaRes_WarehouseRow2.equalsIgnoreCase(exprmaRes_WarehouseRow2)
				&& actrmaRes_WarehouseRow3.equalsIgnoreCase(exprmaRes_WarehouseRow3) && actrmaRes_WarehouseRow4.equalsIgnoreCase(exprmaRes_WarehouseRow4)
				&& actrmaRes_WarehouseRow5.equalsIgnoreCase(exprmaRes_WarehouseRow5)
				
				&& actrmaRes_RmaNoRow1.equalsIgnoreCase(exprmaRes_RmaNoRow1) && actrmaRes_RmaNoRow2.equalsIgnoreCase(exprmaRes_RmaNoRow2)
				&& actrmaRes_RmaNoRow3.equalsIgnoreCase(exprmaRes_RmaNoRow3) && actrmaRes_RmaNoRow4.equalsIgnoreCase(exprmaRes_RmaNoRow4)
				&& actrmaRes_RmaNoRow5.equalsIgnoreCase(exprmaRes_RmaNoRow5)
				
				&& actrmaRes_SelectedRow1==exprmaRes_SelectedRow1 && actrmaRes_SelectedRow2==exprmaRes_SelectedRow2
				&& actrmaRes_SelectedRow3==exprmaRes_SelectedRow3 && actrmaRes_SelectedRow4==exprmaRes_SelectedRow4
				&& actrmaRes_SelectedRow5==exprmaRes_SelectedRow5)
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	
	
	
	
	
	public boolean checkOkButtonInRMAReservationPopupScreenByInput2QtyInVoucherAndSelectOnly1SerialNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow2));
		rmaRes_SelectedRow2.click();
		
		
		Thread.sleep(2000);
		
		boolean actRmaRes_selectedRow2=rmaRes_SelectedRow2.isSelected();
		
		boolean expRmaRes_selectedRow2=true;
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("19");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn		=select1stRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkOkButtonInRMAReservationPopupScreenByInput2QtyInVoucherAndSelectOnly1SerialNumber  ***************************************");
		
		System.out.println("RmaRes_selectedRow2  		: "+actRmaRes_selectedRow2		+" 	Value Expected : "+expRmaRes_selectedRow2);
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actRmaRes_selectedRow2==expRmaRes_selectedRow2 && actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}





	
	
	public boolean checkSalesOrderVoucherSecondRowToCheckRMAReservationPopUpScreenAndBalanceRMANumbers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));	
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("2");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
		// Actual
		
		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
				
		
			
		boolean actrmaRes_BodyWarehouse				=rmaRes_BodyWarehouse.isDisplayed();
		boolean actrmaRes_BodyRMANo					=rmaRes_BodyRMANo.isDisplayed();
		boolean actrmaRes_BodySelected				=rmaRes_BodySelected.isDisplayed();
		
		String actrmaRes_WarehouseRow1				=rmaRes_WarehouseRow1.getText();
		String actrmaRes_WarehouseRow2				=rmaRes_WarehouseRow2.getText();
		String actrmaRes_WarehouseRow3				=rmaRes_WarehouseRow3.getText();
		String actrmaRes_WarehouseRow4				=rmaRes_WarehouseRow4.getText();
	   
		String actrmaRes_RmaNoRow1					=rmaRes_RmaNoRow1.getText();
		String actrmaRes_RmaNoRow2					=rmaRes_RmaNoRow2.getText();
		String actrmaRes_RmaNoRow3					=rmaRes_RmaNoRow3.getText();
		String actrmaRes_RmaNoRow4					=rmaRes_RmaNoRow4.getText();
	
		boolean actrmaRes_SelectedRow1				=rmaRes_SelectedRow1.isSelected();
		boolean actrmaRes_SelectedRow2				=rmaRes_SelectedRow2.isSelected();
		boolean actrmaRes_SelectedRow3				=rmaRes_SelectedRow3.isSelected();
		boolean actrmaRes_SelectedRow4				=rmaRes_SelectedRow4.isSelected();

	  
		// Expected
	  
		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;
		
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="RMA RITEM";
		String expTextres_LeftPanelItemNameRow1		="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow1		="2";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2		="RMA RITEM";
		String expTextres_LeftPanelItemNameRow2		="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow2		="4";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		boolean exprmaRes_BodyWarehouse				=true;
		boolean exprmaRes_BodyRMANo					=true;
		boolean exprmaRes_BodySelected				=true;
		
		String exprmaRes_WarehouseRow1				="SECUNDERABAD";
		String exprmaRes_WarehouseRow2				="SECUNDERABAD";
		String exprmaRes_WarehouseRow3				="SECUNDERABAD";
		String exprmaRes_WarehouseRow4				="SECUNDERABAD";
		
		String exprmaRes_RmaNoRow1					="Sec#Pv1";
		String exprmaRes_RmaNoRow2					="Sec#Pv3";	
		String exprmaRes_RmaNoRow3					="Sec#Pv7";
		String exprmaRes_RmaNoRow4					="Sec#Pv10";
			
		boolean exprmaRes_SelectedRow1				=false;
		boolean exprmaRes_SelectedRow2				=false;
		boolean exprmaRes_SelectedRow3				=false;
		boolean exprmaRes_SelectedRow4				=false;
				
		System.out.println("**************************************** checkSalesOrderVoucherSecondRowToCheckRMAReservationPopUpScreenAndBalanceRMANumbers  ***************************************");
	   
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
				
		System.out.println("rmaRes_BodyWarehouse 		 		: "+actrmaRes_BodyWarehouse					+" 	Value Expected : "+exprmaRes_BodyWarehouse);
		System.out.println("rmaRes_BodyRMANo  					: "+actrmaRes_BodyRMANo						+" 	Value Expected : "+exprmaRes_BodyRMANo);
		System.out.println("rmaRes_BodySelected  				: "+actrmaRes_BodySelected					+" 	Value Expected : "+exprmaRes_BodySelected);
	   
		System.out.println("rmaRes_WarehouseRow1  				: "+actrmaRes_WarehouseRow1					+" 	Value Expected : "+exprmaRes_WarehouseRow1);
		System.out.println("rmaRes_WarehouseRow2  				: "+actrmaRes_WarehouseRow2					+" 	Value Expected : "+exprmaRes_WarehouseRow2);
		System.out.println("rmaRes_WarehouseRow3  				: "+actrmaRes_WarehouseRow3					+" 	Value Expected : "+exprmaRes_WarehouseRow3);
		System.out.println("rmaRes_WarehouseRow4  				: "+actrmaRes_WarehouseRow4					+" 	Value Expected : "+exprmaRes_WarehouseRow4);
	   
		System.out.println("rmaRes_RmaNoRow1  					: "+actrmaRes_RmaNoRow1						+" 	Value Expected : "+exprmaRes_RmaNoRow1);
		System.out.println("rmaRes_RmaNoRow2  					: "+actrmaRes_RmaNoRow2						+" 	Value Expected : "+exprmaRes_RmaNoRow2);
		System.out.println("rmaRes_RmaNoRow3  					: "+actrmaRes_RmaNoRow3						+" 	Value Expected : "+exprmaRes_RmaNoRow3);
		System.out.println("rmaRes_RmaNoRow4  					: "+actrmaRes_RmaNoRow4						+" 	Value Expected : "+exprmaRes_RmaNoRow4);
	   
		System.out.println("rmaRes_SelectedRow1  				: "+actrmaRes_SelectedRow1					+" 	Value Expected : "+exprmaRes_SelectedRow1);
		System.out.println("rmaRes_SelectedRow2  				: "+actrmaRes_SelectedRow2					+" 	Value Expected : "+exprmaRes_SelectedRow2);
		System.out.println("rmaRes_SelectedRow3  				: "+actrmaRes_SelectedRow3					+" 	Value Expected : "+exprmaRes_SelectedRow3);
		System.out.println("rmaRes_SelectedRow4  				: "+actrmaRes_SelectedRow4					+" 	Value Expected : "+exprmaRes_SelectedRow4);
	   
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actrmaRes_BodyWarehouse==exprmaRes_BodyWarehouse && actrmaRes_BodyRMANo==exprmaRes_BodyRMANo && actrmaRes_BodySelected==exprmaRes_BodySelected
				
				&& actrmaRes_WarehouseRow1.equalsIgnoreCase(exprmaRes_WarehouseRow1) && actrmaRes_WarehouseRow2.equalsIgnoreCase(exprmaRes_WarehouseRow2)
				&& actrmaRes_WarehouseRow3.equalsIgnoreCase(exprmaRes_WarehouseRow3) && actrmaRes_WarehouseRow4.equalsIgnoreCase(exprmaRes_WarehouseRow4)
				
				&& actrmaRes_RmaNoRow1.equalsIgnoreCase(exprmaRes_RmaNoRow1) && actrmaRes_RmaNoRow2.equalsIgnoreCase(exprmaRes_RmaNoRow2)
				&& actrmaRes_RmaNoRow3.equalsIgnoreCase(exprmaRes_RmaNoRow3) && actrmaRes_RmaNoRow4.equalsIgnoreCase(exprmaRes_RmaNoRow4)
				
				&& actrmaRes_SelectedRow1==exprmaRes_SelectedRow1 && actrmaRes_SelectedRow2==exprmaRes_SelectedRow2
				&& actrmaRes_SelectedRow3==exprmaRes_SelectedRow3 && actrmaRes_SelectedRow4==exprmaRes_SelectedRow4)
		{
				 
			return true;
		}
		else
		{
			return false;
		}
	}





	
	public boolean checkOkButtonInRMAReservationPopupScreenByInput4QtyInVoucherAndSelectAllSerialNumbers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow1));
		rmaRes_SelectedRow1.click();
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow2));
		rmaRes_SelectedRow2.click();
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow3));
		rmaRes_SelectedRow3.click();
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow4));
		rmaRes_SelectedRow4.click();
		
		
		Thread.sleep(2000);
		
		boolean actRmaRes_selectedRow1		=rmaRes_SelectedRow1.isSelected();
		boolean actRmaRes_selectedRow2		=rmaRes_SelectedRow2.isSelected();
		boolean actRmaRes_selectedRow3		=rmaRes_SelectedRow3.isSelected();
		boolean actRmaRes_selectedRow4		=rmaRes_SelectedRow4.isSelected();
		
		boolean expRmaRes_selectedRow1		=true;
		boolean expRmaRes_selectedRow2		=true;
		boolean expRmaRes_selectedRow3		=true;
		boolean expRmaRes_selectedRow4		=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("19");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		
		String actReserveColumn		=select2ndRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkOkButtonInRMAReservationPopupScreenByInput4QtyInVoucherAndSelectAllSerialNumbers  ***************************************");
		
		System.out.println("RmaRes_selectedRow1  		: "+actRmaRes_selectedRow1		+" 	Value Expected : "+expRmaRes_selectedRow1);
		System.out.println("RmaRes_selectedRow2  		: "+actRmaRes_selectedRow2		+" 	Value Expected : "+expRmaRes_selectedRow2);
		System.out.println("RmaRes_selectedRow3  		: "+actRmaRes_selectedRow3		+" 	Value Expected : "+expRmaRes_selectedRow3);
		System.out.println("RmaRes_selectedRow4  		: "+actRmaRes_selectedRow4		+" 	Value Expected : "+expRmaRes_selectedRow4);
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actRmaRes_selectedRow1==expRmaRes_selectedRow1 && actRmaRes_selectedRow2==expRmaRes_selectedRow2 && actRmaRes_selectedRow3==expRmaRes_selectedRow3
				&& actRmaRes_selectedRow4==expRmaRes_selectedRow4
				
				&& actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}




	
	public boolean checkSalesOrderVoucherThirdRowToCheckRMAReservationPopUpScreenAndBalanceRMANumbersAfterFullSelectionInPreviousRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));	
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
				
		// Actual
		
		boolean actstockReservationLabel				=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse				=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode				=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName				=res_LeftPanelItemName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty					=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate					=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit				=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn							=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn						=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn							=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn							=res_CloseBtn.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1		=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1			=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1			=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1			=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1			=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2		=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2			=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2			=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2			=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2			=res_LeftPanelBaseUnitRow2.getText();
		
		String actTextres_LeftPanelWareHouseRow3		=res_LeftPanelWareHouseRow3.getText();
		String actTextres_LeftPanelItemCodeRow3			=res_LeftPanelItemCodeRow3.getText();
		String actTextres_LeftPanelItemNameRow3			=res_LeftPanelItemNameRow3.getText();
		String actTextres_LeftPanelItemQtyRow3			=res_LeftPanelItemQtyRow3.getText();
		String actTextres_LeftPanelBaseUnitRow3			=res_LeftPanelBaseUnitRow3.getText();
				
		
			
		boolean actrmaRes_BodyWarehouse					=rmaRes_BodyWarehouse.isDisplayed();
		boolean actrmaRes_BodyRMANo						=rmaRes_BodyRMANo.isDisplayed();
		boolean actrmaRes_BodySelected					=rmaRes_BodySelected.isDisplayed();
		
		boolean actrmaRes_WarehouseRow1					=rmaRes_WarehouseRow1.getText().isEmpty();
	   
		boolean actrmaRes_RmaNoRow1						=rmaRes_RmaNoRow1.getText().isEmpty();
	

	  
		// Expected
	  
		boolean expstockReservationLabel				=true;
		boolean expres_LeftPanelWareHouse				=true;
		boolean expres_LeftPanelItemCode				=true;
		boolean expres_LeftPanelItemName				=true;
		boolean expres_LeftPanelItemQty					=true;
		boolean expres_LeftPanelDueDate					=true;
		boolean expres_LeftPanelBaseUnit				=true;
		boolean expres_PickBtn							=true;
		boolean expres_DiscardBtn						=true;
		boolean expres_OkBtn							=true;
		boolean expres_CloseBtn							=true;
		
		
		String expTextres_LeftPanelWareHouseRow1		="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1			="RMA RITEM";
		String expTextres_LeftPanelItemNameRow1			="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow1			="2";
		String expTextres_LeftPanelBaseUnitRow1			="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2		="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2			="RMA RITEM";
		String expTextres_LeftPanelItemNameRow2			="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow2			="4";
		String expTextres_LeftPanelBaseUnitRow2			="Pcs";
		
		String expTextres_LeftPanelWareHouseRow3		="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow3			="RMA RITEM";
		String expTextres_LeftPanelItemNameRow3			="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow3			="2";
		String expTextres_LeftPanelBaseUnitRow3			="Pcs";
		
		boolean exprmaRes_BodyWarehouse					=true;
		boolean exprmaRes_BodyRMANo						=true;
		boolean exprmaRes_BodySelected					=true;
		
		boolean exprmaRes_WarehouseRow1					=true;;
		
		boolean exprmaRes_RmaNoRow1						=true;
				
		System.out.println("**************************************** checkSalesOrderVoucherThirdRowToCheckRMAReservationPopUpScreenAndBalanceRMANumbersAfterFullSelectionInPreviousRow  ***************************************");
	   
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("Textres_LeftPanelWareHouseRow3  	: "+actTextres_LeftPanelWareHouseRow3		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow3);
		System.out.println("Textres_LeftPanelItemCodeRow3  		: "+actTextres_LeftPanelItemCodeRow3		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow3);
		System.out.println("Textres_LeftPanelItemNameRow3  		: "+actTextres_LeftPanelItemNameRow3		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow3);
		System.out.println("Textres_LeftPanelItemQtyRow3  		: "+actTextres_LeftPanelItemQtyRow3			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow3);
		System.out.println("Textres_LeftPanelBaseUnitRow3  		: "+actTextres_LeftPanelBaseUnitRow3		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow3);
				
		System.out.println("rmaRes_BodyWarehouse 		 		: "+actrmaRes_BodyWarehouse					+" 	Value Expected : "+exprmaRes_BodyWarehouse);
		System.out.println("rmaRes_BodyRMANo  					: "+actrmaRes_BodyRMANo						+" 	Value Expected : "+exprmaRes_BodyRMANo);
		System.out.println("rmaRes_BodySelected  				: "+actrmaRes_BodySelected					+" 	Value Expected : "+exprmaRes_BodySelected);
	   
		System.out.println("rmaRes_WarehouseRow1  				: "+actrmaRes_WarehouseRow1					+" 	Value Expected : "+exprmaRes_WarehouseRow1);
	   
		System.out.println("rmaRes_RmaNoRow1  					: "+actrmaRes_RmaNoRow1						+" 	Value Expected : "+exprmaRes_RmaNoRow1);
	   
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actTextres_LeftPanelWareHouseRow3.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow3)
				&& actTextres_LeftPanelItemCodeRow3.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow3) && actTextres_LeftPanelItemNameRow3.equalsIgnoreCase(expTextres_LeftPanelItemNameRow3)
				&& actTextres_LeftPanelItemQtyRow3.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow3) && actTextres_LeftPanelBaseUnitRow3.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow3)
				
				&& actrmaRes_BodyWarehouse==exprmaRes_BodyWarehouse && actrmaRes_BodyRMANo==exprmaRes_BodyRMANo && actrmaRes_BodySelected==exprmaRes_BodySelected
				
				&& actrmaRes_WarehouseRow1==exprmaRes_WarehouseRow1	&& actrmaRes_RmaNoRow1==exprmaRes_RmaNoRow1)
		{
							 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
								 
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			return false;
		}
	}
	
	
	
	public boolean checkSaveSalesOrderVoucherWithRMAReservation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
					
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSaveSalesOrderVoucherWithRMAReservation  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			
			return false;
		}
	}
	
	
	
	
	public boolean checkRmaReservationSerialNumbersInNewVoucherAfterFullConsuming() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		 /*Thread.sleep(3000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		 newBtn.click();
		 
		 checkUserFriendlyMessage();*/
		 
		 Thread.sleep(3000);
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		 customerAccountTxt.sendKeys(Keys.TAB);
			
		 Thread.sleep(2000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 select1stRow_1stColumn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		 pvWareHouseTxt.click();
		 pvWareHouseTxt.sendKeys(Keys.SPACE);
		 
		 int warehousecount=pvwareHouseListCount.size();
		 
		 System.err.println(warehousecount);
		 
		 for(int i=0 ; i < warehousecount ;i++)
		 {
			 String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("SECUNDERABAD"))
			 {
				 pvwareHouseListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		 pvWareHouseTxt.sendKeys(Keys.TAB);
			
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		 enter_ItemTxt.sendKeys(Keys.END);
		 enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		 enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		 enter_ItemTxt.sendKeys(Keys.SPACE);
		 
		 int itemcount1=itemListCount.size();
		 
		 System.err.println(itemcount1);
		 
		 for(int i=0 ; i < itemcount1 ;i++)
		 {
			 String data=itemListCount.get(i).getAttribute("data-sname");
			 
			 if(data.equalsIgnoreCase("RMA RITEM"))
			 {
				 itemListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		 enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
		
		// Actual
		
		boolean actstockReservationLabel				=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse				=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode				=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName				=res_LeftPanelItemName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty					=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate					=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit				=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn							=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn						=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn							=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn							=res_CloseBtn.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1		=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1			=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1			=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1			=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1			=res_LeftPanelBaseUnitRow1.getText();
		
		
			
		boolean actrmaRes_BodyWarehouse					=rmaRes_BodyWarehouse.isDisplayed();
		boolean actrmaRes_BodyRMANo						=rmaRes_BodyRMANo.isDisplayed();
		boolean actrmaRes_BodySelected					=rmaRes_BodySelected.isDisplayed();
		
		boolean actrmaRes_WarehouseRow1					=rmaRes_WarehouseRow1.getText().isEmpty();
	   
		boolean actrmaRes_RmaNoRow1						=rmaRes_RmaNoRow1.getText().isEmpty();
	

	  
		// Expected
	  
		boolean expstockReservationLabel				=true;
		boolean expres_LeftPanelWareHouse				=true;
		boolean expres_LeftPanelItemCode				=true;
		boolean expres_LeftPanelItemName				=true;
		boolean expres_LeftPanelItemQty					=true;
		boolean expres_LeftPanelDueDate					=true;
		boolean expres_LeftPanelBaseUnit				=true;
		boolean expres_PickBtn							=true;
		boolean expres_DiscardBtn						=true;
		boolean expres_OkBtn							=true;
		boolean expres_CloseBtn							=true;
		
		
		String expTextres_LeftPanelWareHouseRow1		="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1			="RMA RITEM";
		String expTextres_LeftPanelItemNameRow1			="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow1			="2";
		String expTextres_LeftPanelBaseUnitRow1			="Pcs";
		
		boolean exprmaRes_BodyWarehouse					=true;
		boolean exprmaRes_BodyRMANo						=true;
		boolean exprmaRes_BodySelected					=true;
		
		boolean exprmaRes_WarehouseRow1					=true;
		
		boolean exprmaRes_RmaNoRow1						=true;
				
		System.out.println("**************************************** checkRmaReservationSerialNumbersInNewVoucherAfterFullConsuming  ***************************************");
	   
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("rmaRes_BodyWarehouse 		 		: "+actrmaRes_BodyWarehouse					+" 	Value Expected : "+exprmaRes_BodyWarehouse);
		System.out.println("rmaRes_BodyRMANo  					: "+actrmaRes_BodyRMANo						+" 	Value Expected : "+exprmaRes_BodyRMANo);
		System.out.println("rmaRes_BodySelected  				: "+actrmaRes_BodySelected					+" 	Value Expected : "+exprmaRes_BodySelected);
	   
		System.out.println("rmaRes_WarehouseRow1  				: "+actrmaRes_WarehouseRow1					+" 	Value Expected : "+exprmaRes_WarehouseRow1);
	   
		System.out.println("rmaRes_RmaNoRow1  					: "+actrmaRes_RmaNoRow1						+" 	Value Expected : "+exprmaRes_RmaNoRow1);
	   
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actrmaRes_BodyWarehouse==exprmaRes_BodyWarehouse && actrmaRes_BodyRMANo==exprmaRes_BodyRMANo && actrmaRes_BodySelected==exprmaRes_BodySelected
				
				&& actrmaRes_WarehouseRow1==exprmaRes_WarehouseRow1	&& actrmaRes_RmaNoRow1==exprmaRes_RmaNoRow1)
		{
							 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
								 
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			return false;
		}
	}
	
	
	
	
	
	
	
	
	
	public boolean checkRmaReservationOnEditVoucherByDecreasingQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		getWaitForAlert();
		
		getAlert().accept();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("1");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
		// Actual
		
		boolean actstockReservationLabel				=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse				=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode				=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName				=res_LeftPanelItemName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty					=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate					=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit				=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn							=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn						=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn							=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn							=res_CloseBtn.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1		=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1			=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1			=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1			=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1			=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2		=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2			=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2			=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2			=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2			=res_LeftPanelBaseUnitRow2.getText();
				
			
		boolean actrmaRes_BodyWarehouse					=rmaRes_BodyWarehouse.isDisplayed();
		boolean actrmaRes_BodyRMANo						=rmaRes_BodyRMANo.isDisplayed();
		boolean actrmaRes_BodySelected					=rmaRes_BodySelected.isDisplayed();
		
		String actrmaRes_WarehouseRow1					=rmaRes_WarehouseRow1.getText();
		String actrmaRes_WarehouseRow2					=rmaRes_WarehouseRow2.getText();
		String actrmaRes_WarehouseRow3					=rmaRes_WarehouseRow3.getText();
		String actrmaRes_WarehouseRow4					=rmaRes_WarehouseRow4.getText();
		String actrmaRes_WarehouseRow5					=rmaRes_WarehouseRow5.getText();
	   
		String actrmaRes_RmaNoRow1						=rmaRes_RmaNoRow1.getText();
		String actrmaRes_RmaNoRow2						=rmaRes_RmaNoRow2.getText();
		String actrmaRes_RmaNoRow3						=rmaRes_RmaNoRow3.getText();
		String actrmaRes_RmaNoRow4						=rmaRes_RmaNoRow4.getText();
		String actrmaRes_RmaNoRow5						=rmaRes_RmaNoRow5.getText();
	
		boolean actrmaRes_SelectedRow1					=rmaRes_SelectedRow1.isSelected();
		boolean actrmaRes_SelectedRow2					=rmaRes_SelectedRow2.isSelected();
		boolean actrmaRes_SelectedRow3					=rmaRes_SelectedRow3.isSelected();
		boolean actrmaRes_SelectedRow4					=rmaRes_SelectedRow4.isSelected();


	  
		// Expected
	  
		boolean expstockReservationLabel				=true;
		boolean expres_LeftPanelWareHouse				=true;
		boolean expres_LeftPanelItemCode				=true;
		boolean expres_LeftPanelItemName				=true;
		boolean expres_LeftPanelItemQty					=true;
		boolean expres_LeftPanelDueDate					=true;
		boolean expres_LeftPanelBaseUnit				=true;
		boolean expres_PickBtn							=true;
		boolean expres_DiscardBtn						=true;
		boolean expres_OkBtn							=true;
		boolean expres_CloseBtn							=true;
		
		
		String expTextres_LeftPanelWareHouseRow1		="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1			="RMA RITEM";
		String expTextres_LeftPanelItemNameRow1			="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow1			="2";
		String expTextres_LeftPanelBaseUnitRow1			="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2		="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2			="RMA RITEM";
		String expTextres_LeftPanelItemNameRow2			="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow2			="2";
		String expTextres_LeftPanelBaseUnitRow2			="Pcs";
		
		boolean exprmaRes_BodyWarehouse					=true;
		boolean exprmaRes_BodyRMANo						=true;
		boolean exprmaRes_BodySelected					=true;
		
		String exprmaRes_WarehouseRow1					="SECUNDERABAD";
		String exprmaRes_WarehouseRow2					="SECUNDERABAD";
		String exprmaRes_WarehouseRow3					="SECUNDERABAD";
		String exprmaRes_WarehouseRow4					="SECUNDERABAD";
		
		String exprmaRes_RmaNoRow1						="Sec#Pv1";
		String exprmaRes_RmaNoRow2						="Sec#Pv3";
		String exprmaRes_RmaNoRow3						="Sec#Pv7";
		String exprmaRes_RmaNoRow4						="Sec#Pv10";
			
		boolean exprmaRes_SelectedRow1					=false;
		boolean exprmaRes_SelectedRow2					=false;
		boolean exprmaRes_SelectedRow3					=false;
		boolean exprmaRes_SelectedRow4					=false;
				
		System.out.println("**************************************** checkRmaReservationOnEditVoucherByDecreasingQty  ***************************************");
	   
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
				
		System.out.println("rmaRes_BodyWarehouse 		 		: "+actrmaRes_BodyWarehouse					+" 	Value Expected : "+exprmaRes_BodyWarehouse);
		System.out.println("rmaRes_BodyRMANo  					: "+actrmaRes_BodyRMANo						+" 	Value Expected : "+exprmaRes_BodyRMANo);
		System.out.println("rmaRes_BodySelected  				: "+actrmaRes_BodySelected					+" 	Value Expected : "+exprmaRes_BodySelected);
	   
		System.out.println("rmaRes_WarehouseRow1  				: "+actrmaRes_WarehouseRow1					+" 	Value Expected : "+exprmaRes_WarehouseRow1);
		System.out.println("rmaRes_WarehouseRow2  				: "+actrmaRes_WarehouseRow2					+" 	Value Expected : "+exprmaRes_WarehouseRow2);
		System.out.println("rmaRes_WarehouseRow3  				: "+actrmaRes_WarehouseRow3					+" 	Value Expected : "+exprmaRes_WarehouseRow3);
		System.out.println("rmaRes_WarehouseRow4  				: "+actrmaRes_WarehouseRow4					+" 	Value Expected : "+exprmaRes_WarehouseRow4);
	   
		System.out.println("rmaRes_RmaNoRow1  					: "+actrmaRes_RmaNoRow1						+" 	Value Expected : "+exprmaRes_RmaNoRow1);
		System.out.println("rmaRes_RmaNoRow2  					: "+actrmaRes_RmaNoRow2						+" 	Value Expected : "+exprmaRes_RmaNoRow2);
		System.out.println("rmaRes_RmaNoRow3  					: "+actrmaRes_RmaNoRow3						+" 	Value Expected : "+exprmaRes_RmaNoRow3);
		System.out.println("rmaRes_RmaNoRow4  					: "+actrmaRes_RmaNoRow4						+" 	Value Expected : "+exprmaRes_RmaNoRow4);
	   
		System.out.println("rmaRes_SelectedRow1  				: "+actrmaRes_SelectedRow1					+" 	Value Expected : "+exprmaRes_SelectedRow1);
		System.out.println("rmaRes_SelectedRow2  				: "+actrmaRes_SelectedRow2					+" 	Value Expected : "+exprmaRes_SelectedRow2);
		System.out.println("rmaRes_SelectedRow3  				: "+actrmaRes_SelectedRow3					+" 	Value Expected : "+exprmaRes_SelectedRow3);
		System.out.println("rmaRes_SelectedRow4  				: "+actrmaRes_SelectedRow4					+" 	Value Expected : "+exprmaRes_SelectedRow4);
	   
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actrmaRes_BodyWarehouse==exprmaRes_BodyWarehouse && actrmaRes_BodyRMANo==exprmaRes_BodyRMANo && actrmaRes_BodySelected==exprmaRes_BodySelected
				
				&& actrmaRes_WarehouseRow1.equalsIgnoreCase(exprmaRes_WarehouseRow1) && actrmaRes_WarehouseRow2.equalsIgnoreCase(exprmaRes_WarehouseRow2)
				&& actrmaRes_WarehouseRow3.equalsIgnoreCase(exprmaRes_WarehouseRow3) && actrmaRes_WarehouseRow4.equalsIgnoreCase(exprmaRes_WarehouseRow4)
				
				&& actrmaRes_RmaNoRow1.equalsIgnoreCase(exprmaRes_RmaNoRow1) && actrmaRes_RmaNoRow2.equalsIgnoreCase(exprmaRes_RmaNoRow2)
				&& actrmaRes_RmaNoRow3.equalsIgnoreCase(exprmaRes_RmaNoRow3) && actrmaRes_RmaNoRow4.equalsIgnoreCase(exprmaRes_RmaNoRow4)
				
				&& actrmaRes_SelectedRow1==exprmaRes_SelectedRow1 && actrmaRes_SelectedRow2==exprmaRes_SelectedRow2
				&& actrmaRes_SelectedRow3==exprmaRes_SelectedRow3 && actrmaRes_SelectedRow4==exprmaRes_SelectedRow4)
		{
				 
			return true;
		}
		else
		{
			return false;
		}
	}
	

	
	
	public boolean checkOkButtonInRMAReservationPopupScreenBySelecting2SerialNumbers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow1));
		rmaRes_SelectedRow1.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow2));
		rmaRes_SelectedRow2.click();
		
		Thread.sleep(2000);
		
		boolean actRmaRes_selectedRow1		=rmaRes_SelectedRow1.isSelected();
		boolean actRmaRes_selectedRow2		=rmaRes_SelectedRow2.isSelected();
		boolean actRmaRes_selectedRow3		=rmaRes_SelectedRow3.isSelected();
		boolean actRmaRes_selectedRow4		=rmaRes_SelectedRow4.isSelected();
		
		boolean expRmaRes_selectedRow1		=true;
		boolean expRmaRes_selectedRow2		=true;
		boolean expRmaRes_selectedRow3		=false;
		boolean expRmaRes_selectedRow4		=false;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("19");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		
		String actReserveColumn		=select2ndRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkOkButtonInRMAReservationPopupScreenBySelecting2SerialNumbers  ***************************************");
		
		System.out.println("RmaRes_selectedRow1  		: "+actRmaRes_selectedRow1		+" 	Value Expected : "+expRmaRes_selectedRow1);
		System.out.println("RmaRes_selectedRow2  		: "+actRmaRes_selectedRow2		+" 	Value Expected : "+expRmaRes_selectedRow2);
		System.out.println("RmaRes_selectedRow3  		: "+actRmaRes_selectedRow3		+" 	Value Expected : "+expRmaRes_selectedRow3);
		System.out.println("RmaRes_selectedRow4  		: "+actRmaRes_selectedRow4		+" 	Value Expected : "+expRmaRes_selectedRow4);
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actRmaRes_selectedRow1==expRmaRes_selectedRow1 && actRmaRes_selectedRow2==expRmaRes_selectedRow2 && actRmaRes_selectedRow3==expRmaRes_selectedRow3
				&& actRmaRes_selectedRow4==expRmaRes_selectedRow4
				
				&& actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	
	

	
	public boolean checkSalesOrderVoucherThirdRowAfterEditingQtyToLessInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));	
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("RMA RITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
				
		// Actual
		
		boolean actstockReservationLabel=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName=res_LeftPanelItemName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty					=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate					=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit				=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn							=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn						=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn							=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn							=res_CloseBtn.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1		=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1			=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1			=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1			=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1			=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2		=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2			=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2			=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2			=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2			=res_LeftPanelBaseUnitRow2.getText();
		
		String actTextres_LeftPanelWareHouseRow3		=res_LeftPanelWareHouseRow3.getText();
		String actTextres_LeftPanelItemCodeRow3			=res_LeftPanelItemCodeRow3.getText();
		String actTextres_LeftPanelItemNameRow3			=res_LeftPanelItemNameRow3.getText();
		String actTextres_LeftPanelItemQtyRow3			=res_LeftPanelItemQtyRow3.getText();
		String actTextres_LeftPanelBaseUnitRow3			=res_LeftPanelBaseUnitRow3.getText();
				
		
			
		boolean actrmaRes_BodyWarehouse					=rmaRes_BodyWarehouse.isDisplayed();
		boolean actrmaRes_BodyRMANo						=rmaRes_BodyRMANo.isDisplayed();
		boolean actrmaRes_BodySelected					=rmaRes_BodySelected.isDisplayed();
		
		String actrmaRes_WarehouseRow1					=rmaRes_WarehouseRow1.getText();
		String actrmaRes_WarehouseRow2					=rmaRes_WarehouseRow2.getText();
		String actrmaRes_WarehouseRow3					=rmaRes_WarehouseRow3.getText();
		String actrmaRes_WarehouseRow4					=rmaRes_WarehouseRow4.getText();
		String actrmaRes_WarehouseRow5					=rmaRes_WarehouseRow5.getText();
	   
		String actrmaRes_RmaNoRow1						=rmaRes_RmaNoRow1.getText();
		String actrmaRes_RmaNoRow2						=rmaRes_RmaNoRow2.getText();
		String actrmaRes_RmaNoRow3						=rmaRes_RmaNoRow3.getText();
		String actrmaRes_RmaNoRow4						=rmaRes_RmaNoRow4.getText();
		String actrmaRes_RmaNoRow5						=rmaRes_RmaNoRow5.getText();
	
		boolean actrmaRes_SelectedRow1					=rmaRes_SelectedRow1.isSelected();
		boolean actrmaRes_SelectedRow2					=rmaRes_SelectedRow2.isSelected();


	  
		// Expected
	  
		boolean expstockReservationLabel				=true;
		boolean expres_LeftPanelWareHouse				=true;
		boolean expres_LeftPanelItemCode				=true;
		boolean expres_LeftPanelItemName				=true;
		boolean expres_LeftPanelItemQty					=true;
		boolean expres_LeftPanelDueDate					=true;
		boolean expres_LeftPanelBaseUnit				=true;
		boolean expres_PickBtn							=true;
		boolean expres_DiscardBtn						=true;
		boolean expres_OkBtn							=true;
		boolean expres_CloseBtn							=true;
		
		
		String expTextres_LeftPanelWareHouseRow1		="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1			="RMA RITEM";
		String expTextres_LeftPanelItemNameRow1			="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow1			="2";
		String expTextres_LeftPanelBaseUnitRow1			="Pcs";
		
		String expTextres_LeftPanelWareHouseRow2		="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow2			="RMA RITEM";
		String expTextres_LeftPanelItemNameRow2			="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow2			="2";
		String expTextres_LeftPanelBaseUnitRow2			="Pcs";
		
		String expTextres_LeftPanelWareHouseRow3		="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow3			="RMA RITEM";
		String expTextres_LeftPanelItemNameRow3			="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow3			="2";
		String expTextres_LeftPanelBaseUnitRow3			="Pcs";
		
		boolean exprmaRes_BodyWarehouse					=true;
		boolean exprmaRes_BodyRMANo						=true;
		boolean exprmaRes_BodySelected					=true;
		
		String exprmaRes_WarehouseRow1					="SECUNDERABAD";
		String exprmaRes_WarehouseRow2					="SECUNDERABAD";
		
		String exprmaRes_RmaNoRow1						="Sec#Pv7";
		String exprmaRes_RmaNoRow2						="Sec#Pv10";
			
		boolean exprmaRes_SelectedRow1					=false;
		boolean exprmaRes_SelectedRow2					=false;
				
		System.out.println("**************************************** checkSalesOrderVoucherThirdRowAfterEditingQtyToLessInSecondRow  ***************************************");
	   
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("Textres_LeftPanelWareHouseRow3  	: "+actTextres_LeftPanelWareHouseRow3		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow3);
		System.out.println("Textres_LeftPanelItemCodeRow3  		: "+actTextres_LeftPanelItemCodeRow3		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow3);
		System.out.println("Textres_LeftPanelItemNameRow3  		: "+actTextres_LeftPanelItemNameRow3		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow3);
		System.out.println("Textres_LeftPanelItemQtyRow3  		: "+actTextres_LeftPanelItemQtyRow3			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow3);
		System.out.println("Textres_LeftPanelBaseUnitRow3  		: "+actTextres_LeftPanelBaseUnitRow3		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow3);
				
		System.out.println("rmaRes_BodyWarehouse 		 		: "+actrmaRes_BodyWarehouse					+" 	Value Expected : "+exprmaRes_BodyWarehouse);
		System.out.println("rmaRes_BodyRMANo  					: "+actrmaRes_BodyRMANo						+" 	Value Expected : "+exprmaRes_BodyRMANo);
		System.out.println("rmaRes_BodySelected  				: "+actrmaRes_BodySelected					+" 	Value Expected : "+exprmaRes_BodySelected);
	   
		System.out.println("rmaRes_WarehouseRow1  				: "+actrmaRes_WarehouseRow1					+" 	Value Expected : "+exprmaRes_WarehouseRow1);
		System.out.println("rmaRes_WarehouseRow2  				: "+actrmaRes_WarehouseRow2					+" 	Value Expected : "+exprmaRes_WarehouseRow2);
	   
		System.out.println("rmaRes_RmaNoRow1  					: "+actrmaRes_RmaNoRow1						+" 	Value Expected : "+exprmaRes_RmaNoRow1);
		System.out.println("rmaRes_RmaNoRow2  					: "+actrmaRes_RmaNoRow2						+" 	Value Expected : "+exprmaRes_RmaNoRow2);
	   
		System.out.println("rmaRes_SelectedRow1  				: "+actrmaRes_SelectedRow1					+" 	Value Expected : "+exprmaRes_SelectedRow1);
		System.out.println("rmaRes_SelectedRow2  				: "+actrmaRes_SelectedRow2					+" 	Value Expected : "+exprmaRes_SelectedRow2);
	   
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actTextres_LeftPanelWareHouseRow3.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow3)
				&& actTextres_LeftPanelItemCodeRow3.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow3) && actTextres_LeftPanelItemNameRow3.equalsIgnoreCase(expTextres_LeftPanelItemNameRow3)
				&& actTextres_LeftPanelItemQtyRow3.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow3) && actTextres_LeftPanelBaseUnitRow3.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow3)
				
				&& actrmaRes_BodyWarehouse==exprmaRes_BodyWarehouse && actrmaRes_BodyRMANo==exprmaRes_BodyRMANo && actrmaRes_BodySelected==exprmaRes_BodySelected
				
				&& actrmaRes_WarehouseRow1.equalsIgnoreCase(exprmaRes_WarehouseRow1) && actrmaRes_WarehouseRow2.equalsIgnoreCase(exprmaRes_WarehouseRow2)
				
				&& actrmaRes_RmaNoRow1.equalsIgnoreCase(exprmaRes_RmaNoRow1) && actrmaRes_RmaNoRow2.equalsIgnoreCase(exprmaRes_RmaNoRow2)
				
				&& actrmaRes_SelectedRow1==exprmaRes_SelectedRow1 && actrmaRes_SelectedRow2==exprmaRes_SelectedRow2)
		{
				 
			return true;
		}
		else
		{
			return false;
		}
	}
	

	
	public boolean checkSelectSerialNumberAndClickOnOkButtonEditingSalesOrderVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow2));
		rmaRes_SelectedRow2.click();
		
		Thread.sleep(2000);
		
		boolean actRmaRes_selectedRow2=rmaRes_SelectedRow2.isSelected();
		
		boolean expRmaRes_selectedRow2=true;
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("19");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
		
		String actReserveColumn		=select3rdRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkSelectSerialNumberAndClickOnOkButtonEditingSalesOrderVoucher  ***************************************");
		
		System.out.println("RmaRes_selectedRow2  		: "+actRmaRes_selectedRow2		+" 	Value Expected : "+expRmaRes_selectedRow2);
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actRmaRes_selectedRow2==expRmaRes_selectedRow2 && actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}


	
	public boolean checkSaveSalesOrderVoucherByEditingInNewRowAndUpdate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSaveSalesOrderVoucherByEditingInNewRowAndUpdate  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			
			return false;
		}
	}





	
	public boolean checkRmaSerialNumbersInNewSalesOrderVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		 customerAccountTxt.click();
		 customerAccountTxt.sendKeys(Keys.SPACE);
		 
		 int customercount=customerAccountListCount.size();
		 
		 System.err.println(customercount);
		 
		 for(int i=0 ; i < customercount ;i++)
		 {
			 String data=customerAccountListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("Customer A"))
			 {
				 customerAccountListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		 customerAccountTxt.sendKeys(Keys.TAB);
			
		 Thread.sleep(2000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 select1stRow_1stColumn.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		 pvWareHouseTxt.click();
		 pvWareHouseTxt.sendKeys(Keys.SPACE);
		 
		 int warehousecount=pvwareHouseListCount.size();
		 
		 System.err.println(warehousecount);
		 
		 for(int i=0 ; i < warehousecount ;i++)
		 {
			 String data=pvwareHouseListCount.get(i).getAttribute("data-name");
			 
			 if(data.equalsIgnoreCase("SECUNDERABAD"))
			 {
				 pvwareHouseListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		 pvWareHouseTxt.sendKeys(Keys.TAB);
			
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		 enter_ItemTxt.sendKeys(Keys.END);
		 enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		 enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		 enter_ItemTxt.sendKeys(Keys.SPACE);
		 
		 int itemcount1=itemListCount.size();
		 
		 System.err.println(itemcount1);
		 
		 for(int i=0 ; i < itemcount1 ;i++)
		 {
			 String data=itemListCount.get(i).getAttribute("data-sname");
			 
			 if(data.equalsIgnoreCase("RMA RITEM"))
			 {
				 itemListCount.get(i).click();
				 
				 break;
			 }
		 }
				
		 enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
			
		// Actual
		
		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
				
			
		boolean actrmaRes_BodyWarehouse				=rmaRes_BodyWarehouse.isDisplayed();
		boolean actrmaRes_BodyRMANo					=rmaRes_BodyRMANo.isDisplayed();
		boolean actrmaRes_BodySelected				=rmaRes_BodySelected.isDisplayed();
		
		String actrmaRes_WarehouseRow1				=rmaRes_WarehouseRow1.getText();
	   
		String actrmaRes_RmaNoRow1					=rmaRes_RmaNoRow1.getText();
	
		boolean actrmaRes_SelectedRow1				=rmaRes_SelectedRow1.isSelected();


	  
		// Expected
	  
		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;
		
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="RMA RITEM";
		String expTextres_LeftPanelItemNameRow1		="RMA RITEM";
		String expTextres_LeftPanelItemQtyRow1		="1";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		boolean exprmaRes_BodyWarehouse				=true;
		boolean exprmaRes_BodyRMANo					=true;
		boolean exprmaRes_BodySelected				=true;
		
		String exprmaRes_WarehouseRow1				="SECUNDERABAD";
		
		String exprmaRes_RmaNoRow1					="Sec#Pv7";
			
		boolean exprmaRes_SelectedRow1				=false;
				
		System.out.println("**************************************** checkRmaSerialNumbersInNewSalesOrderVoucher  ***************************************");
	   
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
				
		System.out.println("rmaRes_BodyWarehouse 		 		: "+actrmaRes_BodyWarehouse					+" 	Value Expected : "+exprmaRes_BodyWarehouse);
		System.out.println("rmaRes_BodyRMANo  					: "+actrmaRes_BodyRMANo						+" 	Value Expected : "+exprmaRes_BodyRMANo);
		System.out.println("rmaRes_BodySelected  				: "+actrmaRes_BodySelected					+" 	Value Expected : "+exprmaRes_BodySelected);
	   
		System.out.println("rmaRes_WarehouseRow1  				: "+actrmaRes_WarehouseRow1					+" 	Value Expected : "+exprmaRes_WarehouseRow1);
	   
		System.out.println("rmaRes_RmaNoRow1  					: "+actrmaRes_RmaNoRow1						+" 	Value Expected : "+exprmaRes_RmaNoRow1);
	   
		System.out.println("rmaRes_SelectedRow1  				: "+actrmaRes_SelectedRow1					+" 	Value Expected : "+exprmaRes_SelectedRow1);
	   
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actrmaRes_BodyWarehouse==exprmaRes_BodyWarehouse && actrmaRes_BodyRMANo==exprmaRes_BodyRMANo && actrmaRes_BodySelected==exprmaRes_BodySelected
				
				&& actrmaRes_WarehouseRow1.equalsIgnoreCase(exprmaRes_WarehouseRow1) && actrmaRes_RmaNoRow1.equalsIgnoreCase(exprmaRes_RmaNoRow1) 
				&& actrmaRes_SelectedRow1==exprmaRes_SelectedRow1)
		{
						 
		
							 
			return true;
		}
		else
		{
			
			return false;
		}
	}



	
	
	public boolean checkSelectSerialNumberAndClickOnOkButtonNewSalesOrderVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow1));
		rmaRes_SelectedRow1.click();
		
		Thread.sleep(2000);
		
		boolean actRmaRes_selectedRow1	=rmaRes_SelectedRow1.isSelected();
		
		boolean expRmaRes_selectedRow1	=true;
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("29");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn		=select1stRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkSelectSerialNumberAndClickOnOkButtonNewSalesOrderVoucher  ***************************************");
		
		System.out.println("RmaRes_selectedRow1  		: "+actRmaRes_selectedRow1		+" 	Value Expected : "+expRmaRes_selectedRow1);
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actRmaRes_selectedRow1==expRmaRes_selectedRow1 && actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}

	
	
	public boolean checkSaveSalesOrderVoucherBySelectingBalanceSerialNumberInNewVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSaveSalesOrderVoucherBySelectingBalanceSerialNumberInNewVoucher  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
		new_CloseBtn.click();
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}
	

	
	
	public boolean checkReservationForStockItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		  
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
			
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("STOCK ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
			
		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
		
		// Actual
		
		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
				
			
		boolean actstockRes_BodyWareHouse			=stockRes_BodyWareHouse.isDisplayed();
		boolean actstockRes_BodyVoucherNo			=stockRes_BodyVoucherNo.isDisplayed();
		boolean actstockRes_BodyQtyToReserve		=stockRes_BodyQtyToReserve.isDisplayed();
		boolean actstockRes_BodyAvailableQty		=stockRes_BodyAvailableQty.isDisplayed();
		boolean actstockRes_BodyCurOrdResQty		=stockRes_BodyCurOrdResQty.isDisplayed();
		
		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", stockRes_BodyReleasedQty);


	   
		boolean actstockRes_BodyQty					=stockRes_BodyQty.isDisplayed();
		boolean actstockRes_BodyPendingOrderQty		=stockRes_BodyPendingOrderQty.isDisplayed();
		boolean actstockRes_BodyReleasedQty			=stockRes_BodyReleasedQty.isDisplayed();
		
		boolean actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText().isEmpty();
		boolean actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText().isEmpty();
		boolean actstockRes_QtyToReserveRow1		=stockRes_QtyToReserveRow1.getText().isEmpty();
		boolean actstockRes_AvailableQtyRow1		=stockRes_AvailableQtyRow1.getText().isEmpty();
		boolean actstockRes_CurOrdResQtyRow1		=stockRes_CurOrdResQtyRow1.getText().isEmpty();
		boolean actstockRes_QtyRow1					=stockRes_QtyRow1.getText().isEmpty();
		boolean actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText().isEmpty();
		boolean actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText().isEmpty();


	  
		// Expected
	  
		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;
		
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="SI";
		String expTextres_LeftPanelItemNameRow1		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow1		="1";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		boolean expstockRes_BodyWareHouse			=true;
		boolean expstockRes_BodyVoucherNo			=true;
		boolean expstockRes_BodyQtyToReserve		=true;
		boolean expstockRes_BodyAvailableQty		=true;
		boolean expstockRes_BodyCurOrdResQty		=true;
		boolean expstockRes_BodyQty					=true;
		boolean expstockRes_BodyPendingOrderQty		=true;
		boolean expstockRes_BodyReleasedQty			=true;
		
		boolean expstockRes_WareHouseRow1			=true;
		boolean expstockRes_VoucherNoRow1			=true;
		boolean expstockRes_QtyToReserveRow1		=true;
		boolean expstockRes_AvailableQtyRow1		=true;
		boolean expstockRes_CurOrdResQtyRow1		=true;
		boolean expstockRes_QtyRow1					=true;
		boolean expstockRes_PendingOrderQtyRow1		=true;
		boolean expstockRes_ReleasedQtyRow1			=true;
				
		System.out.println("**************************************** checkReservationForStockItem  ***************************************");
	   
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("stockRes_BodyWareHouse  			: "+actstockRes_BodyWareHouse				+" 	Value Expected : "+expstockRes_BodyWareHouse);
		System.out.println("stockRes_BodyVoucherNo  			: "+actstockRes_BodyVoucherNo				+" 	Value Expected : "+expstockRes_BodyVoucherNo);
		System.out.println("stockRes_BodyQtyToReserve  			: "+actstockRes_BodyQtyToReserve			+" 	Value Expected : "+expstockRes_BodyQtyToReserve);
		System.out.println("stockRes_BodyAvailableQty  			: "+actstockRes_BodyAvailableQty			+" 	Value Expected : "+expstockRes_BodyAvailableQty);
		System.out.println("stockRes_BodyCurOrdResQty  			: "+actstockRes_BodyCurOrdResQty			+" 	Value Expected : "+expstockRes_BodyCurOrdResQty);
		System.out.println("stockRes_BodyQty  					: "+actstockRes_BodyQty						+" 	Value Expected : "+expstockRes_BodyQty);
		System.out.println("stockRes_BodyPendingOrderQty  		: "+actstockRes_BodyPendingOrderQty			+" 	Value Expected : "+expstockRes_BodyPendingOrderQty);
		System.out.println("stockRes_BodyReleasedQty  			: "+actstockRes_BodyReleasedQty				+" 	Value Expected : "+expstockRes_BodyReleasedQty);
					       
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
		
				
	   
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actstockRes_BodyWareHouse==expstockRes_BodyWareHouse && actstockRes_BodyVoucherNo==expstockRes_BodyVoucherNo 
				&& actstockRes_BodyQtyToReserve==expstockRes_BodyQtyToReserve && actstockRes_BodyAvailableQty==expstockRes_BodyAvailableQty
				&& actstockRes_BodyCurOrdResQty==expstockRes_BodyCurOrdResQty && actstockRes_BodyQty==expstockRes_BodyQty
				&& actstockRes_BodyPendingOrderQty==expstockRes_BodyPendingOrderQty && actstockRes_BodyReleasedQty==expstockRes_BodyReleasedQty
				
				&& actstockRes_WareHouseRow1==expstockRes_WareHouseRow1 && actstockRes_VoucherNoRow1==expstockRes_VoucherNoRow1 
				&& actstockRes_QtyToReserveRow1==expstockRes_QtyToReserveRow1 && actstockRes_AvailableQtyRow1==expstockRes_AvailableQtyRow1
				&& actstockRes_CurOrdResQtyRow1==expstockRes_CurOrdResQtyRow1 && actstockRes_QtyRow1==expstockRes_QtyRow1
				&& actstockRes_PendingOrderQtyRow1==expstockRes_PendingOrderQtyRow1 && actstockRes_ReleasedQtyRow1==expstockRes_ReleasedQtyRow1)
		{
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			
			getAlert().accept();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
				 
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			
			getAlert().accept();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			
			return false;
		}
	}
			
			
	
	
	
	//Close Links Option
	
	public boolean checkOpenPurchaseOrderVoucherToCheckCloseLinkOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		Thread.sleep(2000);
	
		boolean actcloseLinksOption	=closeLinksOption.isDisplayed();
		
		boolean expcloseLinksOption	=true;
		
		System.out.println("**************************************** checkOpenPurchaseOrderVoucherToCheckCloseLinkOption  ***************************************");
		   
		System.out.println("closeLinksOption 				: "+actcloseLinksOption	+" 	Value Expected : "+expcloseLinksOption);
		
		if(actcloseLinksOption==expcloseLinksOption)
	  
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	
	
	public boolean checkOpenPurchaseOrderVoucherToCheckCloseLinkOptionWithoutSelectingRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinksOption));
		closeLinksOption.click();
		
	
		getWaitForAlert();
			
		String actAlert		=getAlert().getText();
		String expAlert		="No rows have been selected. Do you want to close link for all the rows?";
		
		System.out.println("***************************************** checkOpenPurchaseOrderVoucherToCheckCloseLinkOptionWithoutSelectingRow **************************************");
		
		System.out.println("Entry Page Close Option Alert Message Value Actual  : "+actAlert  +" Value Expected : "+expAlert);	
		
		 getAlert().dismiss();

		if(actAlert.startsWith(expAlert))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	
	public boolean checkOpenPurchaseOrderVoucherToCheckCloseLinkOptionWithSelectingRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		firstRowIndex.click();
		
		selectRowBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeLinksOption));
		closeLinksOption.click();
			
		
		String expErrorMessage	="Link satus has been updated.";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		System.out.println("************************************* checkOpenPurchaseOrderVoucherToCheckCloseLinkOptionWithSelectingRow  *********************************");
		
		System.out.println("error Message  :  "+validationMessage+" value Expected : "+expErrorMessage);
		
		if(validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	 
	public boolean checkOpenPurchaseOrderVoucherToCheckOpenLinkDisplay() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		Thread.sleep(2000);
		
		boolean actpartialLinksOption	=partialLinksOption.isDisplayed();
		
		boolean exppartialLinksOption	=true;
		
		System.out.println("**************************************** checkOpenPurchaseOrderVoucherToCheckCloseLinkOption  ***************************************");
		   
		System.out.println("partialLinksOption 				: "+actpartialLinksOption	+" 	Value Expected : "+exppartialLinksOption);
		
		if(actpartialLinksOption==exppartialLinksOption)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			return false;
		}
	}
 
 
 
 
	//Convert Option
		 
	public boolean checkOpenPurchaseOrderVoucherToCheckDisplayConvertLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 	
	 	//need to remove the code from menu to click on New button
	 	
	 	/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsPurchasesMenu));
		inventoryTransactionsPurchasesMenu.click();
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesOrdersVoucher));
		purchasesOrdersVoucher.click();
		
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");*/
			
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
	 	toggleBtn.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	boolean actconvertLinkOption	=convertLinkOption.isDisplayed();
		
	 	boolean expconvertLinkOption	=true;
		 
	 	System.out.println("**************************************** checkOpenPurchaseOrderVoucherToCheckDisplayConvertLinksOption  ***************************************");
		   
	 	System.out.println("convertLinkOption 				: "+actconvertLinkOption	+" 	Value Expected : "+expconvertLinkOption);
		
	 	if(actconvertLinkOption==expconvertLinkOption)
	 	{
	 		return true;
	 	}
	 	else
	 	{
	 		return false;
	 	}
	}

	 
	
	public boolean checkOpenPurchaseOrderVoucherToCheckConvertLinksOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 		
	 	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertLinkOption));
		convertLinkOption.click();
	 	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertPopupList)); 
		
		boolean actconvertPopupList						=convertPopupList.isDisplayed();
		boolean actconvertPopupListPurchaseVoucher		=convertPopupListPurchaseVoucher.isDisplayed();
		boolean actconvertPopupListPurchaseVoucherN		=convertPopupListPurchaseVoucherN.isDisplayed();
		boolean actconvertPopupListOkButton				=convertPopupListOkButton.isDisplayed();
		boolean actconvertPopupListCancelButton			=convertPopupListCancelButton.isDisplayed();
		
		boolean expconvertPopupList						=true;
		boolean expconvertPopupListPurchaseVoucher		=true;
		boolean expconvertPopupListPurchaseVoucherN		=true;
		boolean expconvertPopupListOkButton				=true;
		boolean expconvertPopupListCancelButton			=true;
	 	 
	 	System.out.println("**************************************** checkOpenPurchaseOrderVoucherToCheckConvertLinksOption  ***************************************");
		   
	 	System.out.println("convertPopupList 					: "+actconvertPopupList					+" 	Value Expected : "+expconvertPopupList);
	 	System.out.println("convertPopupListPurchaseVoucher 	: "+actconvertPopupListPurchaseVoucher	+" 	Value Expected : "+expconvertPopupListPurchaseVoucher);
	 	System.out.println("convertPopupListPurchaseVoucherN 	: "+actconvertPopupListPurchaseVoucherN	+" 	Value Expected : "+expconvertPopupListPurchaseVoucherN);
	 	System.out.println("convertPopupListOkButton 			: "+actconvertPopupListOkButton			+" 	Value Expected : "+expconvertPopupListOkButton);
	 	System.out.println("convertPopupListCancelButton 		: "+actconvertPopupListCancelButton		+" 	Value Expected : "+expconvertPopupListCancelButton);
	 	
	
	 	if(actconvertPopupList==expconvertPopupList && actconvertPopupListPurchaseVoucher==expconvertPopupListPurchaseVoucher
	 			&& actconvertPopupListPurchaseVoucherN==expconvertPopupListPurchaseVoucherN && actconvertPopupListOkButton==expconvertPopupListOkButton
	 			&& actconvertPopupListCancelButton==expconvertPopupListCancelButton)
	 		
	 	{
	 		return true;
	 	}
	 	else
	 	{
	 		return false;
	 	}
	}
	
	

	  
	public boolean checkSelectingPurchaseVoucherNOptionAndClickOnOkButtonInConvertLinksScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 		
	 	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertPopupListPurchaseVoucherN));
		convertPopupListPurchaseVoucherN.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertPopupListOkButton));
		convertPopupListOkButton.click();
		
		Thread.sleep(3000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		System.out.println("openTabs  : "+openTabs);
	
		getDriver().switchTo().window(openTabs.get(1));
		
		//Click on Save button
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
	  		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		
		String actSaveMandatoryWithNoInputValidationMessage       =errorMessage.getText();
		String expSaveMandatoryWithNoInputValidationMessageOne    ="Controls marked with arrow mark, require Values";
		String expSaveMandatoryWithNoInputValidationMessageTwo    ="Main -> PurchaseAC";
		String expSaveMandatoryWithNoInputValidationMessageThree  ="Main -> Department";
		
		System.out.println("*********************************************** checkSelectingPurchaseVoucherNOptionAndClickOnOkButtonInConvertLinksScreen  ********************************************");
		System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actSaveMandatoryWithNoInputValidationMessage  +" Value Expected : "+expSaveMandatoryWithNoInputValidationMessageOne+expSaveMandatoryWithNoInputValidationMessageTwo+expSaveMandatoryWithNoInputValidationMessageThree);	
		
		if(actSaveMandatoryWithNoInputValidationMessage.startsWith(expSaveMandatoryWithNoInputValidationMessageOne) 
				&& actSaveMandatoryWithNoInputValidationMessage.contains(expSaveMandatoryWithNoInputValidationMessageTwo) 
				&& actSaveMandatoryWithNoInputValidationMessage.endsWith(expSaveMandatoryWithNoInputValidationMessageThree))
		{
			System.out.println("Test Pass : Error Message Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Pass : Date is 08/26/2019");
			excelReader.setCellData(xlfile, "Sheet6", 19, 9, resFail);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			return false;
		}
	}
	  
  
	@FindBy(xpath="//tbody[@id='id_header_3_table_data_body']/tr")
	private static List<WebElement> purchaseAccountListCount;   
	 
	
	public boolean checkPurchaseVoucherNUsingConvertLinksFromPurchaseOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
	  		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=purchaseAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Purchase"))
			{
				purchaseAccountListCount.get(i).click();
				
				break;
			}
		}
		
		purchaseAccountTxt.sendKeys(Keys.TAB);
	  		
		Thread.sleep(3000);
	  		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkPurchaseVoucherNUsingConvertLinksFromPurchaseOrder  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		/*
		
		String expMessage="Provide data for mandatory fields Batch";
		
		String actMessage=checkValidationMessage(expMessage);
		
		System.out.println("*********************************************** checkSaveButtonWithoutInputBatchInSalesVoucher  ********************************************");
		System.out.println("Entry Page Check Qty Preload Value Actual  : "+actMessage+" Value Expected : "+expMessage);	
		
		
		if(actMessage.equalsIgnoreCase(expMessage))*/
		{
			System.out.println("Voucher Saved");
			excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
	  			
			return true;
		}
		else
		{
			System.out.println("Voucher Not Saved");
	  			
			excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
			
			return false;
		}
	}
  
  
	public boolean checkPreviouslySavedVoucherThroughConvertLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		  
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 		
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
		
		String actdocNumber,expdocNumber;
		
		actdocNumber=documentNumberTxt.getAttribute("value");
		expdocNumber="7";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
	    System.out.println(df.format(date));
	   
		String actVoucherDate,expVoucherDate;
		
		actVoucherDate=dateTxt.getAttribute("value");
		expVoucherDate=df.format(date);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
	
		String actpurchaseAccountTxt=purchaseAccountTxt.getAttribute("value");
		String exppurchaseAccountTxt="Purchase";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
	
		String actvendorAccountTxt=vendorAccountTxt.getAttribute("value");
		String expvendorAccountTxt="vendor A";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		voucherHeaderCurrency.click();
	
		String actvoucherHeaderCurrency=voucherHeaderCurrency.getAttribute("value");
		String expvoucherHeaderCurrency="INR";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
	
		String actdepartmentTxt=departmentTxt.getAttribute("value");
		String expdepartmentTxt="India";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
	
		String actwareHouseTxt=wareHouseTxt.getAttribute("value");
		String expwareHouseTxt="MUMBAI";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		
		String actPvVoucherItemR1,actPvVoucherUnitsR1,actPvVoucherQtyR1,actPvVoucherRateR1,actPvVoucherGrossR1,actPvVoucherLPurchaseOrdersR1;
		
		String actPvVoucherFooterQty,actPvVoucherFooterGross,actPvVoucherFooterNet,actPvVoucherFooterAvgRateO;
		

		String expPvVoucherItemR1,expPvVoucherUnitsR1,expPvVoucherQtyR1,expPvVoucherRateR1,expPvVoucherGrossR1,expPvVoucherLPurchaseOrdersR1;
		
		String expPvVoucherFooterQty,expPvVoucherFooterGross,expPvVoucherFooterNet,expPvVoucherFooterAvgRateO;
		
		
		expPvVoucherItemR1				="STOCK ITEM";
		expPvVoucherUnitsR1				="Dozs";
		expPvVoucherQtyR1				="3.00";
		expPvVoucherLPurchaseOrdersR1	="PurOrd:3";
		expPvVoucherRateR1				="49.00";
		expPvVoucherGrossR1				="147.00";
		
		 
		
		expPvVoucherFooterNet			="147.00";
		expPvVoucherFooterQty			="3.00";
		expPvVoucherFooterGross			="147.00";
		expPvVoucherFooterAvgRateO		="0.00";
		
		
		System.out.println(netAmount.getText());
		System.out.println(QtyAmount.getText());
		System.out.println(GrossAmount.getText());
		System.out.println(PVNFooterAvgRateO.getText());
		
		
		 
		 
		actPvVoucherItemR1				=select1stRow_1stColumn.getText();
		actPvVoucherUnitsR1				=select1stRow_2ndColumn.getText();
		actPvVoucherQtyR1				=select1stRow_5thColumn.getText();
		actPvVoucherLPurchaseOrdersR1	=select1stRow_6thColumn.getText();
		actPvVoucherRateR1				=select1stRow_7thColumn.getText();
		actPvVoucherGrossR1				=select1stRow_8thColumn.getText();
		
		 
		actPvVoucherFooterNet			=netAmount.getText();
		actPvVoucherFooterQty			=QtyAmount.getText();
		actPvVoucherFooterGross			=GrossAmount.getText();
		actPvVoucherFooterAvgRateO		=PVNFooterAvgRateO.getText();
		
	
		System.out.println("************************************* checkPreviouslySavedVoucherThroughConvertLinks  *********************************");

		System.out.println("PvdocNumber                 :  " + actdocNumber 			 		+" Value Expected : " + expdocNumber);
        System.out.println("PvVoucherDate               :  " + actVoucherDate 			 		+" Value Expected : " + expVoucherDate);
        
        System.out.println("PvVoucherpurchaseAccountTxt :  " + actpurchaseAccountTxt 	 		+" Value Expected : " + exppurchaseAccountTxt);
        System.out.println("PvVouchervendorAccountTxt   :  " + actvendorAccountTxt 		 		+" Value Expected : " + expvendorAccountTxt);
        System.out.println("PvVoucherHeaderCurrency     :  " + actvoucherHeaderCurrency  		+" Value Expected : " + expvoucherHeaderCurrency);
        System.out.println("PvVoucherdepartmentTxt      :  " + actdepartmentTxt 		 		+" Value Expected : " + expdepartmentTxt);
        System.out.println("PvVoucherWarehouse          :  " + actwareHouseTxt 			 		+" Value Expected : " + expwareHouseTxt);
        
        System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet 	 		+" Value Expected : " + expPvVoucherFooterNet);
        System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty  	 		+" Value Expected : " + expPvVoucherFooterQty);
        System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross	 		+" Value Expected : " + expPvVoucherFooterGross);
        System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO		+" Value Expected : " + expPvVoucherFooterAvgRateO);
        
        System.out.println("First Row Item Name         :  " + actPvVoucherItemR1  		 		+" Value Expected : " + expPvVoucherItemR1);
		System.out.println("First Row Units Name        :  " + actPvVoucherUnitsR1 		 		+" Value Expected : " + expPvVoucherUnitsR1);
		System.out.println("First Row Qty Name          :  " + actPvVoucherQtyR1		 		+" Value Expected : " + expPvVoucherQtyR1);
		System.out.println("First Row LPurchaseOrders   :  " + actPvVoucherLPurchaseOrdersR1 	+" Value Expected : " + expPvVoucherLPurchaseOrdersR1);
		System.out.println("First Row Rate Name         :  " + actPvVoucherRateR1 		 		+" Value Expected : " + expPvVoucherRateR1);
		System.out.println("First Row Gross Name        :  " + actPvVoucherGrossR1 		 		+" Value Expected : " + expPvVoucherGrossR1);
       
		
		if(actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty) && actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross) 
				&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet) && actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)
				
				&& actdocNumber.equalsIgnoreCase(expdocNumber) && actVoucherDate.equalsIgnoreCase(expVoucherDate) 
				&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt) && actpurchaseAccountTxt.equalsIgnoreCase(exppurchaseAccountTxt)
				&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt) && actvoucherHeaderCurrency.equalsIgnoreCase(expvoucherHeaderCurrency)
				
				&& actPvVoucherItemR1.equalsIgnoreCase(expPvVoucherItemR1) && actPvVoucherUnitsR1.equalsIgnoreCase(expPvVoucherUnitsR1)
				&& actPvVoucherQtyR1.equalsIgnoreCase(expPvVoucherQtyR1) && actPvVoucherRateR1.equalsIgnoreCase(expPvVoucherRateR1)
				&& actPvVoucherGrossR1.equalsIgnoreCase(expPvVoucherGrossR1)  && actPvVoucherLPurchaseOrdersR1.equalsIgnoreCase(expPvVoucherLPurchaseOrdersR1))
		{
			System.out.println("Test Pass : previous Working");
			excelReader.setCellData(xlfile, "Sheet6", 195, 9, resPass);
			
	
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Previous Not Working");
			excelReader.setCellData(xlfile, "Sheet6", 195, 9, resFail);
			
	
			
			return false;
		}
	}
	

  
	  
	public boolean checkSelectAgainPurchaseVoucherNOptionFullConsumeIsDoneAndClickOnOkButtonInConvertLinksScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 		
	 	
	 	ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
	
	 	System.out.println("openTabs"+openTabs);
		
	 	//Current Tab
	 	getDriver().switchTo().window(openTabs.get(1));
		 
	 	getDriver().close();
		 
	 	//Old Tab
	 	getDriver().switchTo().window(openTabs.get(0));
		
	 	Thread.sleep(3000);
	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
	 	toggleBtn.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertLinkOption));
	 	convertLinkOption.click();
	 	
	 	String actdata;
	 	String expdata1;
	 	String expdata2;
	 	String expdata3;
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertPopupListPurchaseVoucherN));
	 	convertPopupListPurchaseVoucherN.click();
	 	 	
	 	Thread.sleep(2000);
	 	 
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertPopupListOkButton));
	 	convertPopupListOkButton.click();
	 	 
	 	Thread.sleep(3000);
	 	 
	 	/*String currentWindowHandles = getDriver().getWindowHandle();
	 	
	 	 ArrayList<String> windowHandless = new ArrayList<String>(getDriver().getWindowHandles());
	
	 	 System.out.println("currentWindowHandles"+currentWindowHandles);
	
	 	 for (String window:windowHandless)
	 	 {
	
	         //if it contains the current window we want to eliminate that from switchTo();
	         if (window != currentWindowHandles)
	         {
	            //Now switchTo new Tab.
	            getDriver().switchTo().window(window);
	            //Do whatever you want to do her
	         }
	     }*/
	 	 
	 	ArrayList<String> openTabs2 = new ArrayList<String>(getDriver().getWindowHandles());
	
	 	System.out.println("openTabs2"+openTabs2);
	
	 	getDriver().switchTo().window(openTabs2.get(1));
	 	
		String expErrorMessage	="Voucher is already consumed.";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		Thread.sleep(2000);
		
	 	getDriver().close();
	
	 	Thread.sleep(2000);
	
	 	getDriver().switchTo().window(openTabs2.get(0));
	 	 
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
	 	new_CloseBtn.click();
		
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
	 	homeCloseBtn.click();
	 	
	 	System.out.println("************************************* checkSelectAgainPurchaseVoucherNOptionFullConsumeIsDoneAndClickOnOkButtonInConvertLinksScreen  *********************************");
		
		System.out.println("error Message  :  "+validationMessage +" value Expected : "+expErrorMessage);
	 	 
		if(validationMessage.equalsIgnoreCase(expErrorMessage))
	 	{
	 		System.out.println("Test Pass : Error Message Displayed");
	 		
	 		excelReader.setCellData(xlfile, "Sheet6", 19, 9, resPass);
	 		return true;
	 	}
	 	else
	 	{
	 		System.out.println("Test Pass : Date is 08/26/2019");
	 		excelReader.setCellData(xlfile, "Sheet6", 19, 9, resFail);
	 		return false;
	 	}
	}
	  
  
	//Sales Order to Save the Stock Item
	public boolean checkSalesOrderVoucherNewToSaveStockReservation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
  	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
  				
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
	  	inventoryMenu.click();
	  		
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
	  	inventoryTransactionsMenu.click();
	  		
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
	  	inventoryTransactionsSalesMenu.click();
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
	  	salesOrdersVoucher.click();
  		
	  	Thread.sleep(5000);								
	  		
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	  	newBtn.click();
	  	
	  	checkUserFriendlyMessage();
	  		
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	  	customerAccountTxt.click();
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer A"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
			
	  	Thread.sleep(2000);
		 
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	  	select1stRow_1stColumn.click();
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
	  	pvWareHouseTxt.click();
	  	pvWareHouseTxt.sendKeys(Keys.SPACE);
	  	
	  	int warehousecount=pvwareHouseListCount.size();
	  	
	  	System.err.println(warehousecount);
	  	
	  	for(int i=0 ; i < warehousecount ;i++)
	  	{
	  		String data=pvwareHouseListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("MUMBAI"))
	  		{
	  			pvwareHouseListCount.get(i).click();
	  			
	  			break;
	  		}	
	  	}
				
	  	pvWareHouseTxt.sendKeys(Keys.TAB);
	  	
	  	
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("STOCK ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("10");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("12");
		so_enter_FQTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
		// Actual
		
		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
				
			
		boolean actstockRes_BodyWareHouse			=stockRes_BodyWareHouse.isDisplayed();
		boolean actstockRes_BodyVoucherNo			=stockRes_BodyVoucherNo.isDisplayed();
		boolean actstockRes_BodyQtyToReserve		=stockRes_BodyQtyToReserve.isDisplayed();
		boolean actstockRes_BodyAvailableQty		=stockRes_BodyAvailableQty.isDisplayed();
		boolean actstockRes_BodyCurOrdResQty		=stockRes_BodyCurOrdResQty.isDisplayed();
		
		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", stockRes_BodyReleasedQty);


	   
		boolean actstockRes_BodyQty					=stockRes_BodyQty.isDisplayed();
		boolean actstockRes_BodyPendingOrderQty		=stockRes_BodyPendingOrderQty.isDisplayed();
		boolean actstockRes_BodyReleasedQty			=stockRes_BodyReleasedQty.isDisplayed();
		
		String actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText();
		String actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText();
		String actstockRes_QtyToReserveRow1			=stockRes_QtyToReserveRow1.getText();
		String actstockRes_AvailableQtyRow1			=stockRes_AvailableQtyRow1.getText();
		String actstockRes_CurOrdResQtyRow1			=stockRes_CurOrdResQtyRow1.getText();
		String actstockRes_QtyRow1					=stockRes_QtyRow1.getText();
		String actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText();
		String actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText();


	  
		// Expected
	  
		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;
		
		
		String expTextres_LeftPanelWareHouseRow1	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow1		="SI";
		String expTextres_LeftPanelItemNameRow1		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow1		="22";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		boolean expstockRes_BodyWareHouse			=true;
		boolean expstockRes_BodyVoucherNo			=true;
		boolean expstockRes_BodyQtyToReserve		=true;
		boolean expstockRes_BodyAvailableQty		=true;
		boolean expstockRes_BodyCurOrdResQty		=true;
		boolean expstockRes_BodyQty					=true;
		boolean expstockRes_BodyPendingOrderQty		=true;
		boolean expstockRes_BodyReleasedQty			=true;
		
		String expstockRes_WareHouseRow1			="MUMBAI";
		String expstockRes_VoucherNoRow1			="STOCK";
		String expstockRes_QtyToReserveRow1			="0";
		String expstockRes_AvailableQtyRow1			="36";
		String expstockRes_CurOrdResQtyRow1			="0";
		String expstockRes_QtyRow1					="36";
		String expstockRes_PendingOrderQtyRow1		="0";
		String expstockRes_ReleasedQtyRow1			="0";
				
		System.out.println("**************************************** checkSalesOrderVoucherNewToSaveStockReservation  ***************************************");
	   
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("stockRes_BodyWareHouse  			: "+actstockRes_BodyWareHouse				+" 	Value Expected : "+expstockRes_BodyWareHouse);
		System.out.println("stockRes_BodyVoucherNo  			: "+actstockRes_BodyVoucherNo				+" 	Value Expected : "+expstockRes_BodyVoucherNo);
		System.out.println("stockRes_BodyQtyToReserve  			: "+actstockRes_BodyQtyToReserve			+" 	Value Expected : "+expstockRes_BodyQtyToReserve);
		System.out.println("stockRes_BodyAvailableQty  			: "+actstockRes_BodyAvailableQty			+" 	Value Expected : "+expstockRes_BodyAvailableQty);
		System.out.println("stockRes_BodyCurOrdResQty  			: "+actstockRes_BodyCurOrdResQty			+" 	Value Expected : "+expstockRes_BodyCurOrdResQty);
		System.out.println("stockRes_BodyQty  					: "+actstockRes_BodyQty						+" 	Value Expected : "+expstockRes_BodyQty);
		System.out.println("stockRes_BodyPendingOrderQty  		: "+actstockRes_BodyPendingOrderQty			+" 	Value Expected : "+expstockRes_BodyPendingOrderQty);
		System.out.println("stockRes_BodyReleasedQty  			: "+actstockRes_BodyReleasedQty				+" 	Value Expected : "+expstockRes_BodyReleasedQty);
					       
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
		
				
	   
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actstockRes_BodyWareHouse==expstockRes_BodyWareHouse && actstockRes_BodyVoucherNo==expstockRes_BodyVoucherNo 
				&& actstockRes_BodyQtyToReserve==expstockRes_BodyQtyToReserve && actstockRes_BodyAvailableQty==expstockRes_BodyAvailableQty
				&& actstockRes_BodyCurOrdResQty==expstockRes_BodyCurOrdResQty && actstockRes_BodyQty==expstockRes_BodyQty
				&& actstockRes_BodyPendingOrderQty==expstockRes_BodyPendingOrderQty && actstockRes_BodyReleasedQty==expstockRes_BodyReleasedQty
				
				&& actstockRes_WareHouseRow1.equalsIgnoreCase(expstockRes_WareHouseRow1) && actstockRes_VoucherNoRow1.equalsIgnoreCase(expstockRes_VoucherNoRow1) 
				&& actstockRes_QtyToReserveRow1.equalsIgnoreCase(expstockRes_QtyToReserveRow1) && actstockRes_AvailableQtyRow1.equalsIgnoreCase(expstockRes_AvailableQtyRow1)
				&& actstockRes_CurOrdResQtyRow1.equalsIgnoreCase(expstockRes_CurOrdResQtyRow1) && actstockRes_QtyRow1.equalsIgnoreCase(expstockRes_QtyRow1)
				&& actstockRes_PendingOrderQtyRow1.equalsIgnoreCase(expstockRes_PendingOrderQtyRow1) 
				&& actstockRes_ReleasedQtyRow1.equalsIgnoreCase(expstockRes_ReleasedQtyRow1))
		{
		 
			return true;
		}
		else
		{
			return false;
		}

   }
  
  
	
	public boolean checkAllocatingStockOnStockItemThroughPickOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn		=select1stRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkAllocatingStockOnStockItemThroughPickOption  ***************************************");
		
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}

	

	
	public boolean checkStockReservationForStockItemWithQtySecondRowForConsuming() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
		
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("STOCK ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
				
		enter_ItemTxt.sendKeys(Keys.TAB);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("14");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));
		
		// Actual
		
		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);
		
		 
		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
				
			
		boolean actstockRes_BodyWareHouse			=stockRes_BodyWareHouse.isDisplayed();
		boolean actstockRes_BodyVoucherNo			=stockRes_BodyVoucherNo.isDisplayed();
		boolean actstockRes_BodyQtyToReserve		=stockRes_BodyQtyToReserve.isDisplayed();
		boolean actstockRes_BodyAvailableQty		=stockRes_BodyAvailableQty.isDisplayed();
		boolean actstockRes_BodyCurOrdResQty		=stockRes_BodyCurOrdResQty.isDisplayed();
		
		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", stockRes_BodyReleasedQty);


	   
		boolean actstockRes_BodyQty					=stockRes_BodyQty.isDisplayed();
		boolean actstockRes_BodyPendingOrderQty		=stockRes_BodyPendingOrderQty.isDisplayed();
		boolean actstockRes_BodyReleasedQty			=stockRes_BodyReleasedQty.isDisplayed();
		
		String actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText();
		String actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText();
		String actstockRes_QtyToReserveRow1			=stockRes_QtyToReserveRow1.getText();
		String actstockRes_AvailableQtyRow1			=stockRes_AvailableQtyRow1.getText();
		String actstockRes_CurOrdResQtyRow1			=stockRes_CurOrdResQtyRow1.getText();
		String actstockRes_QtyRow1					=stockRes_QtyRow1.getText();
		String actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText();
		String actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText();


	  
		// Expected
	  
		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;
		
		
		String expTextres_LeftPanelWareHouseRow1	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow1		="SI";
		String expTextres_LeftPanelItemNameRow1		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow1		="22";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		

		String expTextres_LeftPanelWareHouseRow2	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow2		="SI";
		String expTextres_LeftPanelItemNameRow2		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow2		="14";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		boolean expstockRes_BodyWareHouse			=true;
		boolean expstockRes_BodyVoucherNo			=true;
		boolean expstockRes_BodyQtyToReserve		=true;
		boolean expstockRes_BodyAvailableQty		=true;
		boolean expstockRes_BodyCurOrdResQty		=true;
		boolean expstockRes_BodyQty					=true;
		boolean expstockRes_BodyPendingOrderQty		=true;
		boolean expstockRes_BodyReleasedQty			=true;
		
		String expstockRes_WareHouseRow1			="MUMBAI";
		String expstockRes_VoucherNoRow1			="STOCK";
		String expstockRes_QtyToReserveRow1			="0";
		String expstockRes_AvailableQtyRow1			="14";
		String expstockRes_CurOrdResQtyRow1			="22";
		String expstockRes_QtyRow1					="36";
		String expstockRes_PendingOrderQtyRow1		="0";
		String expstockRes_ReleasedQtyRow1			="0";
				
		System.out.println("**************************************** checkStockReservationForStockItemWithQtySecondRowForConsuming  ***************************************");
	   
		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("stockRes_BodyWareHouse  			: "+actstockRes_BodyWareHouse				+" 	Value Expected : "+expstockRes_BodyWareHouse);
		System.out.println("stockRes_BodyVoucherNo  			: "+actstockRes_BodyVoucherNo				+" 	Value Expected : "+expstockRes_BodyVoucherNo);
		System.out.println("stockRes_BodyQtyToReserve  			: "+actstockRes_BodyQtyToReserve			+" 	Value Expected : "+expstockRes_BodyQtyToReserve);
		System.out.println("stockRes_BodyAvailableQty  			: "+actstockRes_BodyAvailableQty			+" 	Value Expected : "+expstockRes_BodyAvailableQty);
		System.out.println("stockRes_BodyCurOrdResQty  			: "+actstockRes_BodyCurOrdResQty			+" 	Value Expected : "+expstockRes_BodyCurOrdResQty);
		System.out.println("stockRes_BodyQty  					: "+actstockRes_BodyQty						+" 	Value Expected : "+expstockRes_BodyQty);
		System.out.println("stockRes_BodyPendingOrderQty  		: "+actstockRes_BodyPendingOrderQty			+" 	Value Expected : "+expstockRes_BodyPendingOrderQty);
		System.out.println("stockRes_BodyReleasedQty  			: "+actstockRes_BodyReleasedQty				+" 	Value Expected : "+expstockRes_BodyReleasedQty);
					       
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
		
				
	   
		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actstockRes_BodyWareHouse==expstockRes_BodyWareHouse && actstockRes_BodyVoucherNo==expstockRes_BodyVoucherNo 
				&& actstockRes_BodyQtyToReserve==expstockRes_BodyQtyToReserve && actstockRes_BodyAvailableQty==expstockRes_BodyAvailableQty
				&& actstockRes_BodyCurOrdResQty==expstockRes_BodyCurOrdResQty && actstockRes_BodyQty==expstockRes_BodyQty
				&& actstockRes_BodyPendingOrderQty==expstockRes_BodyPendingOrderQty && actstockRes_BodyReleasedQty==expstockRes_BodyReleasedQty
				
				&& actstockRes_WareHouseRow1.equalsIgnoreCase(expstockRes_WareHouseRow1) && actstockRes_VoucherNoRow1.equalsIgnoreCase(expstockRes_VoucherNoRow1) 
				&& actstockRes_QtyToReserveRow1.equalsIgnoreCase(expstockRes_QtyToReserveRow1) && actstockRes_AvailableQtyRow1.equalsIgnoreCase(expstockRes_AvailableQtyRow1)
				&& actstockRes_CurOrdResQtyRow1.equalsIgnoreCase(expstockRes_CurOrdResQtyRow1) && actstockRes_QtyRow1.equalsIgnoreCase(expstockRes_QtyRow1)
				&& actstockRes_PendingOrderQtyRow1.equalsIgnoreCase(expstockRes_PendingOrderQtyRow1) 
				&& actstockRes_ReleasedQtyRow1.equalsIgnoreCase(expstockRes_ReleasedQtyRow1))
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			return true;
		}
		else
		{
			
			 
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}

	
	
	public boolean checkAllocatingStockOnStockItemThroughManualInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		enter_QtyToReserve.sendKeys("14");
		enter_QtyToReserve.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		
		String actReserveColumn		=select2ndRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkAllocatingStockOnStockItemThroughManualInput  ***************************************");
		
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	
	
	public boolean checkStockReservationForStockItemAfterConsumingInNextRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Reserve));
		enter_Reserve.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
				
		
		String actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText();
		String actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText();
		String actstockRes_QtyToReserveRow1			=stockRes_QtyToReserveRow1.getText();
		String actstockRes_AvailableQtyRow1			=stockRes_AvailableQtyRow1.getText();
		String actstockRes_CurOrdResQtyRow1			=stockRes_CurOrdResQtyRow1.getText();
		String actstockRes_QtyRow1					=stockRes_QtyRow1.getText();
		String actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText();
		String actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText();


	  
		// Expected
		
		
		String expTextres_LeftPanelWareHouseRow1	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow1		="SI";
		String expTextres_LeftPanelItemNameRow1		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow1		="22";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		

		String expTextres_LeftPanelWareHouseRow2	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow2		="SI";
		String expTextres_LeftPanelItemNameRow2		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow2		="14";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		
		String expstockRes_WareHouseRow1			="MUMBAI";
		String expstockRes_VoucherNoRow1			="STOCK";
		String expstockRes_QtyToReserveRow1			="22";
		String expstockRes_AvailableQtyRow1			="22";
		String expstockRes_CurOrdResQtyRow1			="14";
		String expstockRes_QtyRow1					="36";
		String expstockRes_PendingOrderQtyRow1		="0";
		String expstockRes_ReleasedQtyRow1			="0";
				
		System.out.println("**************************************** checkStockReservationForStockItemWithQtySecondRowForConsuming  ***************************************");
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
	   
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actstockRes_WareHouseRow1.equalsIgnoreCase(expstockRes_WareHouseRow1) && actstockRes_VoucherNoRow1.equalsIgnoreCase(expstockRes_VoucherNoRow1) 
				&& actstockRes_QtyToReserveRow1.equalsIgnoreCase(expstockRes_QtyToReserveRow1) && actstockRes_AvailableQtyRow1.equalsIgnoreCase(expstockRes_AvailableQtyRow1)
				&& actstockRes_CurOrdResQtyRow1.equalsIgnoreCase(expstockRes_CurOrdResQtyRow1) && actstockRes_QtyRow1.equalsIgnoreCase(expstockRes_QtyRow1)
				&& actstockRes_PendingOrderQtyRow1.equalsIgnoreCase(expstockRes_PendingOrderQtyRow1) 
				&& actstockRes_ReleasedQtyRow1.equalsIgnoreCase(expstockRes_ReleasedQtyRow1))
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			return true;
			
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			return false;
		}
	}
	
	
	
	
	public boolean checkStockReservationForStockItemInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);
		
		int itemcount1=itemListCount.size();
		
		System.err.println(itemcount1);
		
		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getAttribute("data-sname");
			
			if(data.equalsIgnoreCase("STOCK ITEM"))
			{
				itemListCount.get(i).click();
				
				break;
			}
		}
				
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		String actTextres_LeftPanelWareHouseRow3	=res_LeftPanelWareHouseRow3.getText();
		String actTextres_LeftPanelItemCodeRow3		=res_LeftPanelItemCodeRow3.getText();
		String actTextres_LeftPanelItemNameRow3		=res_LeftPanelItemNameRow3.getText();
		String actTextres_LeftPanelItemQtyRow3		=res_LeftPanelItemQtyRow3.getText();
		String actTextres_LeftPanelBaseUnitRow3		=res_LeftPanelBaseUnitRow3.getText();
				
		
		boolean actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText().isEmpty();
		boolean actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText().isEmpty();
		boolean actstockRes_QtyToReserveRow1		=stockRes_QtyToReserveRow1.getText().isEmpty();
		boolean actstockRes_AvailableQtyRow1		=stockRes_AvailableQtyRow1.getText().isEmpty();
		boolean actstockRes_CurOrdResQtyRow1		=stockRes_CurOrdResQtyRow1.getText().isEmpty();
		boolean actstockRes_QtyRow1					=stockRes_QtyRow1.getText().isEmpty();
		boolean actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText().isEmpty();
		boolean actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText().isEmpty();


		// Expected
		
		
		String expTextres_LeftPanelWareHouseRow1	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow1		="SI";
		String expTextres_LeftPanelItemNameRow1		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow1		="22";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		

		String expTextres_LeftPanelWareHouseRow2	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow2		="SI";
		String expTextres_LeftPanelItemNameRow2		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow2		="14";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow3	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow3		="SI";
		String expTextres_LeftPanelItemNameRow3		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow3		="1";
		String expTextres_LeftPanelBaseUnitRow3		="Pcs";
		
		
		boolean expstockRes_WareHouseRow1			=true;
		boolean expstockRes_VoucherNoRow1			=true;
		boolean expstockRes_QtyToReserveRow1		=true;
		boolean expstockRes_AvailableQtyRow1		=true;
		boolean expstockRes_CurOrdResQtyRow1		=true;
		boolean expstockRes_QtyRow1					=true;
		boolean expstockRes_PendingOrderQtyRow1		=true;
		boolean expstockRes_ReleasedQtyRow1			=true;
				
		System.out.println("**************************************** checkStockReservationForStockItemWithQtySecondRowForConsuming  ***************************************");
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("Textres_LeftPanelWareHouseRow3  	: "+actTextres_LeftPanelWareHouseRow3		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow3);
		System.out.println("Textres_LeftPanelItemCodeRow3  		: "+actTextres_LeftPanelItemCodeRow3		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow3);
		System.out.println("Textres_LeftPanelItemNameRow3  		: "+actTextres_LeftPanelItemNameRow3		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow3);
		System.out.println("Textres_LeftPanelItemQtyRow3  		: "+actTextres_LeftPanelItemQtyRow3			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow3);
		System.out.println("Textres_LeftPanelBaseUnitRow3  		: "+actTextres_LeftPanelBaseUnitRow3		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow3);
		
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
	   
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actTextres_LeftPanelWareHouseRow3.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow3)
				&& actTextres_LeftPanelItemCodeRow3.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow3) && actTextres_LeftPanelItemNameRow3.equalsIgnoreCase(expTextres_LeftPanelItemNameRow3)
				&& actTextres_LeftPanelItemQtyRow3.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow3) && actTextres_LeftPanelBaseUnitRow3.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow3)
				
				&& actstockRes_WareHouseRow1==expstockRes_WareHouseRow1 && actstockRes_VoucherNoRow1==expstockRes_VoucherNoRow1 
				&& actstockRes_QtyToReserveRow1==expstockRes_QtyToReserveRow1 && actstockRes_AvailableQtyRow1==expstockRes_AvailableQtyRow1
				&& actstockRes_CurOrdResQtyRow1==expstockRes_CurOrdResQtyRow1 && actstockRes_QtyRow1==expstockRes_QtyRow1
				&& actstockRes_PendingOrderQtyRow1==expstockRes_PendingOrderQtyRow1 && actstockRes_ReleasedQtyRow1==expstockRes_ReleasedQtyRow1)
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			return false;
		}
	}
	
	
	
	public boolean checkSavingSalesOrderVoucherWithReservationStockItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
				
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrderVoucherWithReservationStockItem  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}

	
	  
	public boolean checkStockItemReservationInNewVoucherAfterConsuming() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	  	customerAccountTxt.click();
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer A"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
			
	  	Thread.sleep(2000);
		 
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	  	select1stRow_1stColumn.click();
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
	  	pvWareHouseTxt.click();
	  	pvWareHouseTxt.sendKeys(Keys.SPACE);
	  	
	  	int warehousecount=pvwareHouseListCount.size();
	  	
	  	System.err.println(warehousecount);
	  	
	  	for(int i=0 ; i < warehousecount ;i++)
	  	{
	  		String data=pvwareHouseListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("MUMBAI"))
	  		{
	  			pvwareHouseListCount.get(i).click();
	  			
	  			break;
	  		}	
	  	}
				
	  	pvWareHouseTxt.sendKeys(Keys.TAB);
	  	
	  	
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("STOCK ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		boolean actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText().isEmpty();
		boolean actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText().isEmpty();
		boolean actstockRes_QtyToReserveRow1		=stockRes_QtyToReserveRow1.getText().isEmpty();
		boolean actstockRes_AvailableQtyRow1		=stockRes_AvailableQtyRow1.getText().isEmpty();
		boolean actstockRes_CurOrdResQtyRow1		=stockRes_CurOrdResQtyRow1.getText().isEmpty();
		boolean actstockRes_QtyRow1					=stockRes_QtyRow1.getText().isEmpty();
		boolean actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText().isEmpty();
		boolean actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText().isEmpty();


	  
		// Expected
		
		
		String expTextres_LeftPanelWareHouseRow1	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow1		="SI";
		String expTextres_LeftPanelItemNameRow1		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow1		="1";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		boolean expstockRes_WareHouseRow1			=true;
		boolean expstockRes_VoucherNoRow1			=true;
		boolean expstockRes_QtyToReserveRow1		=true;
		boolean expstockRes_AvailableQtyRow1		=true;
		boolean expstockRes_CurOrdResQtyRow1		=true;
		boolean expstockRes_QtyRow1					=true;
		boolean expstockRes_PendingOrderQtyRow1		=true;
		boolean expstockRes_ReleasedQtyRow1			=true;
				
		System.out.println("**************************************** checkStockReservationForStockItemWithQtySecondRowForConsuming  ***************************************");
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
	   
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actstockRes_WareHouseRow1==expstockRes_WareHouseRow1 && actstockRes_VoucherNoRow1==expstockRes_VoucherNoRow1 
				&& actstockRes_QtyToReserveRow1==expstockRes_QtyToReserveRow1 && actstockRes_AvailableQtyRow1==expstockRes_AvailableQtyRow1
				&& actstockRes_CurOrdResQtyRow1==expstockRes_CurOrdResQtyRow1 && actstockRes_QtyRow1==expstockRes_QtyRow1
				&& actstockRes_PendingOrderQtyRow1==expstockRes_PendingOrderQtyRow1 && actstockRes_ReleasedQtyRow1==expstockRes_ReleasedQtyRow1)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			  
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
				
			return false;
		}
	}

	
	public boolean checkSalesOrderPreviousOptionBySavingVoucherWithStockReservationAndClickOnPrevious() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		getWaitForAlert();
		
		
		getAlert().accept();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		
		// Actual
		String actdocumentNumberTxt	 	=documentNumberTxt.getAttribute("value");
		String actcustomerAccountTxt	=customerAccountTxt.getAttribute("value");
		
		String actWareHouseR1C1     	=select1stRow_1stColumn.getText();
		String actItemR1C2          	=select1stRow_2ndColumn.getText();
		String actUnitsR1C3         	=select1stRow_3rdColumn.getText();
		String actRDR1C4            	=select1stRow_4thColumn.getText();
		String actAqR1C5            	=select1stRow_5thColumn.getText();
		String actFqR1C6            	=select1stRow_6thColumn.getText();
		String actQtyR1C7           	=select1stRow_7thColumn.getText();
		String actReserveR1C8       	=select1stRow_8thColumn.getText();
		boolean actLsalesOrdersR1C9  	=select1stRow_9thColumn.getText().isEmpty();
		String actRateR1C10         	=select1stRow_10thColumn.getText();
		String actGrossR1C11        	=select1stRow_11thColumn.getText();
		
		String actWareHouseR2C1     	=select2ndRow_1stColumn.getText();
		String actItemR2C2         	 	=select2ndRow_2ndColumn.getText();
		String actUnitsR2C3         	=select2ndRow_3rdColumn.getText();
		String actRDR2C4            	=select2ndRow_4thColumn.getText();
		String actAqR2C5            	=select2ndRow_5thColumn.getText();
		String actFqR2C6            	=select2ndRow_6thColumn.getText();
		String actQtyR2C7           	=select2ndRow_7thColumn.getText();
		String actReserveR2C8       	=select2ndRow_8thColumn.getText();
		boolean actLsalesOrdersR2C9  	=select2ndRow_9thColumn.getText().isEmpty();
		String actRateR2C10         	=select2ndRow_10thColumn.getText();
		String actGrossR2C11        	=select2ndRow_11thColumn.getText();
		
		String actso_footerQty      	=so_footerQty.getText();
		String actso_footerRDField  	=so_footerRDField.getText();
		String actso_footerAQ       	=so_footerAQ.getText();
		String actso_footerFQ       	=so_footerFQ.getText();
		String actso_footerGross    	=so_footerGross.getText();
		String actso_footerNet      	=so_footerNet.getText();
	
		// Expected
		String expdocumentNumberTxt 	="8";
		String expcustomerAccountTxt	="Customer A";
		
		String expWareHouseR1C1     	="MUMBAI";
		String expItemR1C2          	="STOCK ITEM";
		String expUnitsR1C3         	="Pcs";
		String expRDR1C4            	="0.00";
		String expAqR1C5            	="10.00";
		String expFqR1C6            	="12.00";
		String expQtyR1C7           	="22.00";
		String expReserveR1C8       	="Reserved";
		boolean expLsalesOrdersR1C9  	=true;
		String expRateR1C10         	="10.00";
		String expGrossR1C11        	="220.00";
		
		String expWareHouseR2C1     	="MUMBAI";
		String expItemR2C2          	="STOCK ITEM";
		String expUnitsR2C3         	="Pcs";
		String expRDR2C4            	="0.00";
		String expAqR2C5            	="14.00";
		String expFqR2C6            	="0.00";
		String expQtyR2C7           	="14.00";
		String expReserveR2C8       	="Reserved";
		boolean expLsalesOrdersR2C9  	=true;
		String expRateR2C10         	="10.00";
		String expGrossR2C11        	="140.00";
		
		String expso_footerQty      	="36.00";
		String expso_footerRDField  	="0.00";
		String expso_footerAQ       	="24.00";
		String expso_footerFQ       	="12.00";
		String expso_footerGross    	="360.00";
		String expso_footerNet      	="360.00";
		
		System.out.println("************************************* checkSalesOrderPreviousOptionBySavingVoucherWithStockReservationAndClickOnPrevious  *********************************");
		
		System.out.println("documentNumberTxt  	:  "+actdocumentNumberTxt 	+" value Expected : "+expdocumentNumberTxt);
		System.out.println("customerAccountTxt 	:  "+actcustomerAccountTxt 	+" value Expected : "+expcustomerAccountTxt);
		
		System.out.println("WareHouseR1C1  		:  "+actWareHouseR1C1 		+" value Expected : "+expWareHouseR1C1);
		System.out.println("ItemR1C2  			:  "+actItemR1C2 			+" value Expected : "+expItemR1C2);
		System.out.println("UnitsR1C3 			:  "+actUnitsR1C3 			+" value Expected : "+expUnitsR1C3);
		System.out.println("RDR1C4  			:  "+actRDR1C4 				+" value Expected : "+expRDR1C4);
		System.out.println("AqR1C5  			:  "+actAqR1C5 				+" value Expected : "+expAqR1C5);
		System.out.println("FqR1C6  			:  "+actFqR1C6 				+" value Expected : "+expFqR1C6);
		System.out.println("QtyR1C7  			:  "+actQtyR1C7 			+" value Expected : "+expQtyR1C7);
		System.out.println("ReserveR1C8  		:  "+actReserveR1C8 		+" value Expected : "+expReserveR1C8);
		System.out.println("LsalesOrdersR1C9  	:  "+actLsalesOrdersR1C9 	+" value Expected : "+expLsalesOrdersR1C9);
		System.out.println("RateR1C10  			:  "+actRateR1C10 			+" value Expected : "+expRateR1C10);
		System.out.println("GrossR1C11  		:  "+actGrossR1C11 			+" value Expected : "+expGrossR1C11);
		
		System.out.println("WareHouseR2C1  		:  "+actWareHouseR2C1 		+" value Expected : "+expWareHouseR2C1);
		System.out.println("ItemR2C2  			:  "+actItemR2C2 			+" value Expected : "+expItemR2C2);
		System.out.println("UnitsR2C3 			:  "+actUnitsR2C3 			+" value Expected : "+expUnitsR2C3);
		System.out.println("RDR2C4  			:  "+actRDR2C4 				+" value Expected : "+expRDR2C4);
		System.out.println("AqR2C5  			:  "+actAqR2C5 				+" value Expected : "+expAqR2C5);
		System.out.println("FqR2C6  			:  "+actFqR2C6 				+" value Expected : "+expFqR2C6);
		System.out.println("QtyR2C7  			:  "+actQtyR2C7 			+" value Expected : "+expQtyR2C7);
		System.out.println("ReserveR2C8  		:  "+actReserveR2C8 		+" value Expected : "+expReserveR2C8);
		System.out.println("LsalesOrdersR2C9  	:  "+actLsalesOrdersR2C9 	+" value Expected : "+expLsalesOrdersR2C9);
		System.out.println("RateR2C10  			:  "+actRateR2C10 			+" value Expected : "+expRateR2C10);
		System.out.println("GrossR2C11  		:  "+actGrossR2C11 			+" value Expected : "+expGrossR2C11);
		
		System.out.println("so_footerQty  		:  "+actso_footerQty 		+" value Expected : "+expso_footerQty);
		System.out.println("so_footerRDField 	:  "+actso_footerRDField	+" value Expected : "+expso_footerRDField);
		System.out.println("so_footerAQ  		:  "+actso_footerAQ 		+" value Expected : "+expso_footerAQ);
		System.out.println("so_footerFQ  		:  "+actso_footerFQ 		+" value Expected : "+expso_footerFQ);
		System.out.println("so_footerGross  	:  "+actso_footerGross 		+" value Expected : "+expso_footerGross);
		System.out.println("so_footerNet  		:  "+actso_footerNet 		+" value Expected : "+expso_footerNet);
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actWareHouseR1C1.equalsIgnoreCase(expWareHouseR1C1) && actItemR1C2.equalsIgnoreCase(expItemR1C2)
				&& actUnitsR1C3.equalsIgnoreCase(expUnitsR1C3) && actRDR1C4.equalsIgnoreCase(expRDR1C4) && actAqR1C5.equalsIgnoreCase(expAqR1C5)
				&& actFqR1C6.equalsIgnoreCase(expFqR1C6) && actQtyR1C7.equalsIgnoreCase(expQtyR1C7) && actReserveR1C8.equalsIgnoreCase(expReserveR1C8)
				&& actLsalesOrdersR1C9==expLsalesOrdersR1C9 && actRateR1C10.equalsIgnoreCase(expRateR1C10) && actGrossR1C11.equalsIgnoreCase(expGrossR1C11)
				
				&& actWareHouseR2C1.equalsIgnoreCase(expWareHouseR2C1) && actItemR2C2.equalsIgnoreCase(expItemR2C2)
				&& actUnitsR2C3.equalsIgnoreCase(expUnitsR2C3) && actRDR2C4.equalsIgnoreCase(expRDR2C4) && actAqR2C5.equalsIgnoreCase(expAqR2C5)
				&& actFqR2C6.equalsIgnoreCase(expFqR2C6) && actQtyR2C7.equalsIgnoreCase(expQtyR2C7) && actReserveR2C8.equalsIgnoreCase(expReserveR2C8)
				&& actLsalesOrdersR2C9==expLsalesOrdersR2C9 && actRateR2C10.equalsIgnoreCase(expRateR2C10) && actGrossR2C11.equalsIgnoreCase(expGrossR2C11)
				
				&& actso_footerQty.equalsIgnoreCase(expso_footerQty) && actso_footerRDField.equalsIgnoreCase(expso_footerRDField)
				&& actso_footerAQ.equalsIgnoreCase(expso_footerAQ) && actso_footerFQ.equalsIgnoreCase(expso_footerFQ)
				&& actso_footerGross.equalsIgnoreCase(expso_footerGross) && actso_footerNet.equalsIgnoreCase(expso_footerNet))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			new_footerMinimizeBtn.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			new_footerMinimizeBtn.click();
			
			return false;
		}
	}


	
	
	public boolean checkSalesOrderVoucherStockReservationByEditingVoucherToVerifyToDisplayBalanceQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("STOCK ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("1");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
		
		String actTextres_LeftPanelWareHouseRow3	=res_LeftPanelWareHouseRow3.getText();
		String actTextres_LeftPanelItemCodeRow3		=res_LeftPanelItemCodeRow3.getText();
		String actTextres_LeftPanelItemNameRow3		=res_LeftPanelItemNameRow3.getText();
		String actTextres_LeftPanelItemQtyRow3		=res_LeftPanelItemQtyRow3.getText();
		String actTextres_LeftPanelBaseUnitRow3		=res_LeftPanelBaseUnitRow3.getText();
				
		
		boolean actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText().isEmpty();
		boolean actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText().isEmpty();
		boolean actstockRes_QtyToReserveRow1		=stockRes_QtyToReserveRow1.getText().isEmpty();
		boolean actstockRes_AvailableQtyRow1		=stockRes_AvailableQtyRow1.getText().isEmpty();
		boolean actstockRes_CurOrdResQtyRow1		=stockRes_CurOrdResQtyRow1.getText().isEmpty();
		boolean actstockRes_QtyRow1					=stockRes_QtyRow1.getText().isEmpty();
		boolean actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText().isEmpty();
		boolean actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText().isEmpty();


		// Expected
		
		
		String expTextres_LeftPanelWareHouseRow1	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow1		="SI";
		String expTextres_LeftPanelItemNameRow1		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow1		="22";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		

		String expTextres_LeftPanelWareHouseRow2	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow2		="SI";
		String expTextres_LeftPanelItemNameRow2		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow2		="14";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expTextres_LeftPanelWareHouseRow3	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow3		="SI";
		String expTextres_LeftPanelItemNameRow3		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow3		="1";
		String expTextres_LeftPanelBaseUnitRow3		="Pcs";
		
		
		boolean expstockRes_WareHouseRow1			=true;
		boolean expstockRes_VoucherNoRow1			=true;
		boolean expstockRes_QtyToReserveRow1		=true;
		boolean expstockRes_AvailableQtyRow1		=true;
		boolean expstockRes_CurOrdResQtyRow1		=true;
		boolean expstockRes_QtyRow1					=true;
		boolean expstockRes_PendingOrderQtyRow1		=true;
		boolean expstockRes_ReleasedQtyRow1			=true;
				
		System.out.println("**************************************** checkStockReservationForStockItemWithQtySecondRowForConsuming  ***************************************");
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
		
		System.out.println("Textres_LeftPanelWareHouseRow3  	: "+actTextres_LeftPanelWareHouseRow3		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow3);
		System.out.println("Textres_LeftPanelItemCodeRow3  		: "+actTextres_LeftPanelItemCodeRow3		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow3);
		System.out.println("Textres_LeftPanelItemNameRow3  		: "+actTextres_LeftPanelItemNameRow3		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow3);
		System.out.println("Textres_LeftPanelItemQtyRow3  		: "+actTextres_LeftPanelItemQtyRow3			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow3);
		System.out.println("Textres_LeftPanelBaseUnitRow3  		: "+actTextres_LeftPanelBaseUnitRow3		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow3);
		
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
	   
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actTextres_LeftPanelWareHouseRow3.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow3)
				&& actTextres_LeftPanelItemCodeRow3.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow3) && actTextres_LeftPanelItemNameRow3.equalsIgnoreCase(expTextres_LeftPanelItemNameRow3)
				&& actTextres_LeftPanelItemQtyRow3.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow3) && actTextres_LeftPanelBaseUnitRow3.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow3)
				
				&& actstockRes_WareHouseRow1==expstockRes_WareHouseRow1 && actstockRes_VoucherNoRow1==expstockRes_VoucherNoRow1 
				&& actstockRes_QtyToReserveRow1==expstockRes_QtyToReserveRow1 && actstockRes_AvailableQtyRow1==expstockRes_AvailableQtyRow1
				&& actstockRes_CurOrdResQtyRow1==expstockRes_CurOrdResQtyRow1 && actstockRes_QtyRow1==expstockRes_QtyRow1
				&& actstockRes_PendingOrderQtyRow1==expstockRes_PendingOrderQtyRow1 && actstockRes_ReleasedQtyRow1==expstockRes_ReleasedQtyRow1)
		{
			System.out.println("Test Pass : Stock Reservation values are as expected");
				
			return true;
		}
		else
		{
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			
			return false;
		}
	}



	
	
	public boolean checkReserveStausInVoucherOnClickingOkWithoutAnyQtySelectedInReservationScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
		
		boolean actReserveColumn	=select3rdRow_8thColumn.getText().isEmpty();
		boolean expReserveColumn	=true;
		
		System.out.println("**************************************** checkReserveStausInVoucherOnClickingOkWithoutAnyQtySelectedInReservationScreen  ***************************************");
		
		System.out.println("ReserveColumn 		: "+actReserveColumn	+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn==expReserveColumn)
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	

	
	
	
	public boolean checkEditingSalesOrderVoucherByDeleteRowWithStockReservationDecreasingQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("5");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Reserve));
		enter_Reserve.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
				
		
		String actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText();
		String actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText();
		String actstockRes_QtyToReserveRow1			=stockRes_QtyToReserveRow1.getText();
		String actstockRes_AvailableQtyRow1			=stockRes_AvailableQtyRow1.getText();
		String actstockRes_CurOrdResQtyRow1			=stockRes_CurOrdResQtyRow1.getText();
		String actstockRes_QtyRow1					=stockRes_QtyRow1.getText();
		String actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText();
		String actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText();

	  
		// Expected
	  
		
		String expTextres_LeftPanelWareHouseRow1	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow1		="SI";
		String expTextres_LeftPanelItemNameRow1		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow1		="22";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		

		String expTextres_LeftPanelWareHouseRow2	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow2		="SI";
		String expTextres_LeftPanelItemNameRow2		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow2		="7";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expstockRes_WareHouseRow1			="MUMBAI";
		String expstockRes_VoucherNoRow1			="STOCK";
		String expstockRes_QtyToReserveRow1			="0";
		String expstockRes_AvailableQtyRow1			="14";
		String expstockRes_CurOrdResQtyRow1			="22";
		String expstockRes_QtyRow1					="36";
		String expstockRes_PendingOrderQtyRow1		="0";
		String expstockRes_ReleasedQtyRow1			="0";
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		
		String actReserveColumn		=select2ndRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
				
		System.out.println("**************************************** checkEditingSalesOrderVoucherByDeleteRowWithStockReservationDecreasingQty  ***************************************");
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
					       
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
		
		
		System.out.println("ReserveColumn  						: "+actReserveColumn						+" 	Value Expected : "+expReserveColumn);
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn)
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actstockRes_WareHouseRow1.equalsIgnoreCase(expstockRes_WareHouseRow1) && actstockRes_VoucherNoRow1.equalsIgnoreCase(expstockRes_VoucherNoRow1) 
				&& actstockRes_QtyToReserveRow1.equalsIgnoreCase(expstockRes_QtyToReserveRow1) && actstockRes_AvailableQtyRow1.equalsIgnoreCase(expstockRes_AvailableQtyRow1)
				&& actstockRes_CurOrdResQtyRow1.equalsIgnoreCase(expstockRes_CurOrdResQtyRow1) && actstockRes_QtyRow1.equalsIgnoreCase(expstockRes_QtyRow1)
				&& actstockRes_PendingOrderQtyRow1.equalsIgnoreCase(expstockRes_PendingOrderQtyRow1) 
				&& actstockRes_ReleasedQtyRow1.equalsIgnoreCase(expstockRes_ReleasedQtyRow1))
		{
			
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}

	
	public boolean checkEditingSalesOrderVoucherWithStockReservationIncreasingQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("11");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Reserve));
		enter_Reserve.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		String actTextres_LeftPanelWareHouseRow2	=res_LeftPanelWareHouseRow2.getText();
		String actTextres_LeftPanelItemCodeRow2		=res_LeftPanelItemCodeRow2.getText();
		String actTextres_LeftPanelItemNameRow2		=res_LeftPanelItemNameRow2.getText();
		String actTextres_LeftPanelItemQtyRow2		=res_LeftPanelItemQtyRow2.getText();
		String actTextres_LeftPanelBaseUnitRow2		=res_LeftPanelBaseUnitRow2.getText();
				
		
		String actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText();
		String actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText();
		String actstockRes_QtyToReserveRow1			=stockRes_QtyToReserveRow1.getText();
		String actstockRes_AvailableQtyRow1			=stockRes_AvailableQtyRow1.getText();
		String actstockRes_CurOrdResQtyRow1			=stockRes_CurOrdResQtyRow1.getText();
		String actstockRes_QtyRow1					=stockRes_QtyRow1.getText();
		String actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText();
		String actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText();


		// Expected
	  
		
		String expTextres_LeftPanelWareHouseRow1	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow1		="SI";
		String expTextres_LeftPanelItemNameRow1		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow1		="23";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		

		String expTextres_LeftPanelWareHouseRow2	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow2		="SI";
		String expTextres_LeftPanelItemNameRow2		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow2		="7";
		String expTextres_LeftPanelBaseUnitRow2		="Pcs";
		
		String expstockRes_WareHouseRow1			="MUMBAI";
		String expstockRes_VoucherNoRow1			="STOCK";
		String expstockRes_QtyToReserveRow1			="22";
		String expstockRes_AvailableQtyRow1			="29";
		String expstockRes_CurOrdResQtyRow1			="7";
		String expstockRes_QtyRow1					="36";
		String expstockRes_PendingOrderQtyRow1		="0";
		String expstockRes_ReleasedQtyRow1			="0";
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn		=select1stRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
				
		System.out.println("**************************************** checkEditingSalesOrderVoucherWithStockReservationIncreasingQty  ***************************************");
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("Textres_LeftPanelWareHouseRow2  	: "+actTextres_LeftPanelWareHouseRow2		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow2);
		System.out.println("Textres_LeftPanelItemCodeRow2  		: "+actTextres_LeftPanelItemCodeRow2		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow2);
		System.out.println("Textres_LeftPanelItemNameRow2  		: "+actTextres_LeftPanelItemNameRow2		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow2);
		System.out.println("Textres_LeftPanelItemQtyRow2  		: "+actTextres_LeftPanelItemQtyRow2			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow2);
		System.out.println("Textres_LeftPanelBaseUnitRow2  		: "+actTextres_LeftPanelBaseUnitRow2		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow2);
					       
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
		
		
		System.out.println("ReserveColumn  						: "+actReserveColumn						+" 	Value Expected : "+expReserveColumn);
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn)
				
				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actTextres_LeftPanelWareHouseRow2.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow2)
				&& actTextres_LeftPanelItemCodeRow2.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow2) && actTextres_LeftPanelItemNameRow2.equalsIgnoreCase(expTextres_LeftPanelItemNameRow2)
				&& actTextres_LeftPanelItemQtyRow2.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow2) && actTextres_LeftPanelBaseUnitRow2.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow2)
				
				&& actstockRes_WareHouseRow1.equalsIgnoreCase(expstockRes_WareHouseRow1) && actstockRes_VoucherNoRow1.equalsIgnoreCase(expstockRes_VoucherNoRow1) 
				&& actstockRes_QtyToReserveRow1.equalsIgnoreCase(expstockRes_QtyToReserveRow1) && actstockRes_AvailableQtyRow1.equalsIgnoreCase(expstockRes_AvailableQtyRow1)
				&& actstockRes_CurOrdResQtyRow1.equalsIgnoreCase(expstockRes_CurOrdResQtyRow1) && actstockRes_QtyRow1.equalsIgnoreCase(expstockRes_QtyRow1)
				&& actstockRes_PendingOrderQtyRow1.equalsIgnoreCase(expstockRes_PendingOrderQtyRow1) 
				&& actstockRes_ReleasedQtyRow1.equalsIgnoreCase(expstockRes_ReleasedQtyRow1))
		{
				System.out.println("Test Pass : Reserved Bin Finished goods item");
				return true;
		}
		else
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
			res_OkBtn.click();
			
			System.out.println("Test Fail : Qty Preload Value is displaying Wrong");
			return false;
		}
	}


	
	
	public boolean checkSavingSalesOrderVoucherWithReservationStockItemAfterEditing() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrderVoucherWithReservationStockItemAfterEditing  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}

	
	public boolean checkStockItemReservationInNewVoucherAfterUpdatingInPreviousVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	  	customerAccountTxt.click();
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer A"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
			
	  	Thread.sleep(2000);
		 
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	  	select1stRow_1stColumn.click();
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
	  	pvWareHouseTxt.click();
	  	pvWareHouseTxt.sendKeys(Keys.SPACE);
	  	
	  	int warehousecount=pvwareHouseListCount.size();
	  	
	  	System.err.println(warehousecount);
	  	
	  	for(int i=0 ; i < warehousecount ;i++)
	  	{
	  		String data=pvwareHouseListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("MUMBAI"))
	  		{
	  			pvwareHouseListCount.get(i).click();
	  			
	  			break;
	  		}	
	  	}
				
	  	pvWareHouseTxt.sendKeys(Keys.TAB);
	  	
	  	
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("STOCK ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
				
		
		String actstockRes_WareHouseRow1			=stockRes_WareHouseRow1.getText();
		String actstockRes_VoucherNoRow1			=stockRes_VoucherNoRow1.getText();
		String actstockRes_QtyToReserveRow1			=stockRes_QtyToReserveRow1.getText();
		String actstockRes_AvailableQtyRow1			=stockRes_AvailableQtyRow1.getText();
		String actstockRes_CurOrdResQtyRow1			=stockRes_CurOrdResQtyRow1.getText();
		String actstockRes_QtyRow1					=stockRes_QtyRow1.getText();
		String actstockRes_PendingOrderQtyRow1		=stockRes_PendingOrderQtyRow1.getText();
		String actstockRes_ReleasedQtyRow1			=stockRes_ReleasedQtyRow1.getText();


		// Expected
	  
		
		String expTextres_LeftPanelWareHouseRow1	="MUMBAI";
		String expTextres_LeftPanelItemCodeRow1		="SI";
		String expTextres_LeftPanelItemNameRow1		="STOCK ITEM";
		String expTextres_LeftPanelItemQtyRow1		="2";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		String expstockRes_WareHouseRow1			="MUMBAI";
		String expstockRes_VoucherNoRow1			="STOCK";
		String expstockRes_QtyToReserveRow1			="0";
		String expstockRes_AvailableQtyRow1			="6";
		String expstockRes_CurOrdResQtyRow1			="0";
		String expstockRes_QtyRow1					="36";
		String expstockRes_PendingOrderQtyRow1		="0";
		String expstockRes_ReleasedQtyRow1			="0";
		
		
				
		System.out.println("**************************************** checkStockItemReservationInNewVoucherAfterUpdatingInPreviousVoucher  ***************************************");
	   
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);
		
		System.out.println("stockRes_WareHouseRow1  			: "+actstockRes_WareHouseRow1				+" 	Value Expected : "+expstockRes_WareHouseRow1);
		System.out.println("stockRes_VoucherNoRow1  			: "+actstockRes_VoucherNoRow1				+" 	Value Expected : "+expstockRes_VoucherNoRow1);
		System.out.println("stockRes_QtyToReserveRow1  			: "+actstockRes_QtyToReserveRow1			+" 	Value Expected : "+expstockRes_QtyToReserveRow1);
		System.out.println("stockRes_AvailableQtyRow1  			: "+actstockRes_AvailableQtyRow1			+" 	Value Expected : "+expstockRes_AvailableQtyRow1);
		System.out.println("stockRes_CurOrdResQtyRow1  			: "+actstockRes_CurOrdResQtyRow1			+" 	Value Expected : "+expstockRes_CurOrdResQtyRow1);
		System.out.println("stockRes_QtyRow1  					: "+actstockRes_QtyRow1						+" 	Value Expected : "+expstockRes_QtyRow1);
		System.out.println("stockRes_PendingOrderQtyRow1  		: "+actstockRes_PendingOrderQtyRow1			+" 	Value Expected : "+expstockRes_PendingOrderQtyRow1);
		System.out.println("stockRes_ReleasedQtyRow1  			: "+actstockRes_ReleasedQtyRow1				+" 	Value Expected : "+expstockRes_ReleasedQtyRow1);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actstockRes_WareHouseRow1.equalsIgnoreCase(expstockRes_WareHouseRow1) && actstockRes_VoucherNoRow1.equalsIgnoreCase(expstockRes_VoucherNoRow1) 
				&& actstockRes_QtyToReserveRow1.equalsIgnoreCase(expstockRes_QtyToReserveRow1) && actstockRes_AvailableQtyRow1.equalsIgnoreCase(expstockRes_AvailableQtyRow1)
				&& actstockRes_CurOrdResQtyRow1.equalsIgnoreCase(expstockRes_CurOrdResQtyRow1) && actstockRes_QtyRow1.equalsIgnoreCase(expstockRes_QtyRow1)
				&& actstockRes_PendingOrderQtyRow1.equalsIgnoreCase(expstockRes_PendingOrderQtyRow1) 
				&& actstockRes_ReleasedQtyRow1.equalsIgnoreCase(expstockRes_ReleasedQtyRow1))
		{
			 
			return true;
		}
		else
		{
			return false;
		}
	}
		
	


	
	public boolean checkStockReservationToVerifyPickAndChangeTheQtyToReserveColumnManualyByInputGreaterThanPick() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		String actQtyToReserveOnPick=enter_QtyToReserve.getAttribute("value");
		
		String expQtyToReserveOnPick="2";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QtyToReserve));
		enter_QtyToReserve.click();
		enter_QtyToReserve.clear();
		
		Thread.sleep(2000);
		
		enter_QtyToReserve.sendKeys("5");
		
		
		String expErrorMessage	="Reserve Quantity can not be greater than selected product quantity";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn		=select1stRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkStockReservationToVerifyPickAndChangeTheQtyToReserveColumnManualyByInputGreaterThanPick  ***************************************");
		
		System.out.println("QtyToReserveOnPick  		: "+actQtyToReserveOnPick		+" 	Value Expected : "+expQtyToReserveOnPick);
		System.out.println("ErrorMessage  				: "+validationMessage			+" 	Value Expected : "+expErrorMessage);
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn) && actQtyToReserveOnPick.equalsIgnoreCase(expQtyToReserveOnPick)
				&& validationMessage.equalsIgnoreCase(expErrorMessage))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	
	
	
	public boolean checkStockReservationByEditingSameRowByUpdatingQtyToReserveToLessThanDisplayQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Reserve));
		enter_Reserve.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QtyToReserve));
		
		String actQtyToReserveOnPick	=enter_QtyToReserve.getAttribute("value");
		String expQtyToReserveOnPick	="2";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_QtyToReserve));
		enter_QtyToReserve.click();
		enter_QtyToReserve.clear();
		Thread.sleep(2000);
		enter_QtyToReserve.sendKeys("1");
		Thread.sleep(2000);
		enter_QtyToReserve.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		String actQtyToReserveAfterChange	=stockRes_QtyToReserveRow1.getText();
		String expQtyToReserveAfterChange	="1";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumn		=select1stRow_8thColumn.getText();
		String expReserveColumn		="Reserved";
		
		System.out.println("**************************************** checkStockReservationByEditingSameRowByUpdatingQtyToReserveToLessThanDisplayQty  ***************************************");
		
		System.out.println("QtyToReserveOnPick  		: "+actQtyToReserveOnPick		+" 	Value Expected : "+expQtyToReserveOnPick);
		System.out.println("QtyToReserveAfterChange  	: "+actQtyToReserveAfterChange	+" 	Value Expected : "+expQtyToReserveAfterChange);
		System.out.println("ReserveColumn  				: "+actReserveColumn			+" 	Value Expected : "+expReserveColumn);
		
		
		if(actReserveColumn.equalsIgnoreCase(expReserveColumn) && actQtyToReserveOnPick.equalsIgnoreCase(expQtyToReserveOnPick)
				&& actQtyToReserveAfterChange.equalsIgnoreCase(expQtyToReserveAfterChange))
		{
			System.out.println("Test Pass : Reserved Bin Finished goods item");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Reserved Bin Finished goods item");
			return false;
		}
	}
	

	
	
	public boolean checkSavingSalesOrderVoucherWithReservationStockItemWithQtyChangeCheck() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrderVoucherWithReservationStockItemWithQtyChangeCheck  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}
	


	
	
	public boolean checkReservationWithAllItemInSingleVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
	  	inventoryMenu.click();
	  		
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
	  	inventoryTransactionsMenu.click();
	  		
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
	  	inventoryTransactionsSalesMenu.click();
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
	  	salesOrdersVoucher.click();
	  		
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	  	newBtn.click();
		
		checkUserFriendlyMessage();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	  	customerAccountTxt.click();
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer C"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
			
	  	Thread.sleep(2000);
		 
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	  	select1stRow_1stColumn.click();
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
	  	pvWareHouseTxt.click();
	  	pvWareHouseTxt.sendKeys(Keys.SPACE);
	  	
	  	int warehousecount=pvwareHouseListCount.size();
	  	
	  	System.err.println(warehousecount);
	  	
	  	for(int i=0 ; i < warehousecount ;i++)
	  	{
	  		String data=pvwareHouseListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("SECUNDERABAD"))
	  		{
	  			pvwareHouseListCount.get(i).click();
	  			
	  			break;
	  		}	
	  	}
				
	  	pvWareHouseTxt.sendKeys(Keys.TAB);
	  	
	  	
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH WA ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.END);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
	  	
	  	int warehousecount1=pvwareHouseListCount.size();
	  	
	  	System.err.println(warehousecount1);
	  	
	  	for(int i=0 ; i < warehousecount1 ;i++)
	  	{
	  		String data=pvwareHouseListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("HYDERABAD"))
	  		{
	  			pvwareHouseListCount.get(i).click();
	  			
	  			break;
	  		}	
	  	}
				
	  	pvWareHouseTxt.sendKeys(Keys.TAB);
	  	
	  	
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount=itemListCount.size();
	  	
	  	System.err.println(itemcount);
	  	
	  	for(int i=0 ; i < itemcount ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binRes_QtyToReserveRow1));
		binRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount2=itemListCount.size();
	  	
	  	System.err.println(itemcount2);
	  	
	  	for(int i=0 ; i < itemcount2 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("RMA RITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow1));
		rmaRes_SelectedRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow2));
		rmaRes_SelectedRow2.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys(Keys.ARROW_RIGHT,Keys.ARROW_RIGHT,Keys.ARROW_RIGHT,Keys.ARROW_RIGHT,Keys.ARROW_RIGHT);
		pvWareHouseTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.SPACE);
	  	
	  	int warehousecount4=pvwareHouseListCount.size();
	  	
	  	System.err.println(warehousecount4);
	  	
	  	for(int i=0 ; i < warehousecount4 ;i++)
	  	{
	  		String data=pvwareHouseListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("MUMBAI"))
	  		{
	  			pvwareHouseListCount.get(i).click();
	  			
	  			break;
	  		}	
	  	}
				
	  	pvWareHouseTxt.sendKeys(Keys.TAB);
	  	
	  	
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount4=itemListCount.size();
	  	
	  	System.err.println(itemcount4);
	  	
	  	for(int i=0 ; i < itemcount4 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("STOCK ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
		select4thRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("2");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumnRow1		=select1stRow_8thColumn.getText();
	    String actReserveColumnRow2		=select2ndRow_8thColumn.getText();
	    String actReserveColumnRow3		=select3rdRow_8thColumn.getText();
	    String actReserveColumnRow4		=select4thRow_8thColumn.getText();
	    
	    String expReserveColumnRow1		="RESERVED";
	    String expReserveColumnRow2		="RESERVED";
	    String expReserveColumnRow3		="RESERVED";
	    String expReserveColumnRow4		="RESERVED";
		
				
	    Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkReservationWithAllItemInSingleVoucher  *********************************");
		
		System.out.println("SavingMessage  		:  "+savingMessage 			+" Value Expected : "+"TRUE");
		System.out.println("ReserveColumnRow1  	:  "+actReserveColumnRow1 	+" value Expected : "+expReserveColumnRow1);
		System.out.println("ReserveColumnRow2  	:  "+actReserveColumnRow2 	+" value Expected : "+expReserveColumnRow2);
		System.out.println("ReserveColumnRow3  	:  "+actReserveColumnRow3 	+" value Expected : "+expReserveColumnRow3);
		System.out.println("ReserveColumnRow4  	:  "+actReserveColumnRow4 	+" value Expected : "+expReserveColumnRow4);
		
		if(savingMessage==true && actReserveColumnRow1.equalsIgnoreCase(expReserveColumnRow1) && actReserveColumnRow2.equalsIgnoreCase(expReserveColumnRow2)
				&& actReserveColumnRow3.equalsIgnoreCase(expReserveColumnRow3) && actReserveColumnRow4.equalsIgnoreCase(expReserveColumnRow4))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
					
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			
			return false;
		}
	}
		
	
	public boolean checkEntryPageSuspendOptionInSalesOrdersVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkEntryPageSuspendOptionInSalesOrdersVoucher  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}
	


	
	public boolean checkSuspendStatusInEntryPageAndHomePageOnPreviousOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelStatus));
		
		String actinfoPanelStatusEntryPage	=infoPanelStatus.getText();
		String expinfoPanelStatusEntryPage	="Suspended";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
		
		String actsuspendStatusRow1HomePage	=suspendStatusRow1.getText();
		String expsuspendStatusRow1HomePage	="TRUE";
		
		System.out.println("************************************* checkSuspendStatusInEntryPageAndHomePageOnPreviousOption  *********************************");
		
		System.out.println("infoPanelStatusEntryPage  	:  "+actinfoPanelStatusEntryPage 	+" value Expected : "+expinfoPanelStatusEntryPage);
		System.out.println("suspendStatusRow1HomePage  	:  "+actsuspendStatusRow1HomePage 	+" value Expected : "+expsuspendStatusRow1HomePage);
		
		if(actinfoPanelStatusEntryPage.equalsIgnoreCase(expinfoPanelStatusEntryPage) 
				&& actsuspendStatusRow1HomePage.equalsIgnoreCase(expsuspendStatusRow1HomePage))
		{
			System.out.println("Test Pass : Suspended Succesfully");
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Suspended Succesfully");
			return false;
		}
		
	}
	
	
	public boolean checkCopyDocumentInSalesOrdersVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
		toggleBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
		copyDocumentOption.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
		cd_FirstChkBox.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
		cd_OkBtn.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		select2ndRow_8thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binRes_QtyToReserveRow1));
		binRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
		select3rdRow_8thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow1));
		rmaRes_SelectedRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaRes_SelectedRow2));
		rmaRes_SelectedRow2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_8thColumn));
		select4thRow_8thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockRes_QtyToReserveRow1));
		stockRes_QtyToReserveRow1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		
		String actReserveColumnRow1		=select1stRow_8thColumn.getText();
	    String actReserveColumnRow2		=select2ndRow_8thColumn.getText();
	    String actReserveColumnRow3		=select3rdRow_8thColumn.getText();
	    String actReserveColumnRow4		=select4thRow_8thColumn.getText();
	    
	    String expReserveColumnRow1		="RESERVED";
	    String expReserveColumnRow2		="RESERVED";
	    String expReserveColumnRow3		="RESERVED";
	    String expReserveColumnRow4		="RESERVED";
		
		System.out.println("************************************* checkCopyDocumentInSalesOrdersVoucher  *********************************");
		
		System.out.println("ReserveColumnRow1  	:  "+actReserveColumnRow1 	+" value Expected : "+expReserveColumnRow1);
		System.out.println("ReserveColumnRow2  	:  "+actReserveColumnRow2 	+" value Expected : "+expReserveColumnRow2);
		System.out.println("ReserveColumnRow3  	:  "+actReserveColumnRow3 	+" value Expected : "+expReserveColumnRow3);
		System.out.println("ReserveColumnRow4  	:  "+actReserveColumnRow4 	+" value Expected : "+expReserveColumnRow4);
		
		if(actReserveColumnRow1.equalsIgnoreCase(expReserveColumnRow1) && actReserveColumnRow2.equalsIgnoreCase(expReserveColumnRow2)
				&& actReserveColumnRow3.equalsIgnoreCase(expReserveColumnRow3) && actReserveColumnRow4.equalsIgnoreCase(expReserveColumnRow4))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}
	


	
	
	public boolean checkSavingSalesOrdersVoucherWithAllItemsReservation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("************************************* checkSavingSalesOrdersVoucherWithAllItemsReservation  *********************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}
	
	
	public boolean checkSalesOrderEntryPageDeleteOptionOnPreviousButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));	
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));	
		new_DeleteBtn.click();
		
		getWaitForAlert();
		
		String actAlert	=getAlert().getText();
		
		String expAlert	="Are you sure that you want to delete the Selected Voucher?";
		
		getAlert().accept();
		
		
		boolean deleteMessage=checkEntryPageDeleteMessage();
		
		System.out.println("************************************* checkSalesOrderEntryPageDeleteOptionOnPreviousButton  *********************************");
        
        System.out.println("Alert          : "+actAlert         +"  Value Expected : "+expAlert);
		
		System.out.println("error Message  :  "+deleteMessage +" value Expected : "+"TRUE");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
		new_CloseBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
		voucherhomeCloseBtn.click();
		
		if(actAlert.equalsIgnoreCase(expAlert) && deleteMessage==true)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		
		else
		{
			System.out.println("Test Fail :  Error Message is  not Displayed ");
		     excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			errorMessageCloseBtn.click();
			
			return false;
		}
	}
	
	
	
	
	public boolean checkSalesOrderVoucherToCheckBatchExpiryDateValidation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();
			
		Thread.sleep(5000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();
	 
	    System.out.println();
	    
	    
	    // Create a calendar object with today date. Calendar is in java.util pakage.
	    Calendar calendar = Calendar.getInstance();
	
	    // Move calendar to yesterday
	    calendar.add(Calendar.DATE, 15);
	
	    // Get current date of calendar which point to the yesterday now
	    Date yesterday = calendar.getTime();
	
	    DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
	    
	    System.out.println(dfr.format(yesterday).toString());
	    
	    
	    dateTxt.sendKeys(Keys.LEFT);
	    Thread.sleep(2000);
	    dateTxt.sendKeys(Keys.HOME);
	    Thread.sleep(2000);
	    dateTxt.sendKeys(dfr.format(yesterday).toString());
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	  	customerAccountTxt.click();
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer C"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
			
	  	Thread.sleep(2000);
		 
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	  	select1stRow_1stColumn.click();
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
	  	pvWareHouseTxt.click();
	  	pvWareHouseTxt.sendKeys(Keys.SPACE);
	  	
	  	int warehousecount=pvwareHouseListCount.size();
	  	
	  	System.err.println(warehousecount);
	  	
	  	for(int i=0 ; i < warehousecount ;i++)
	  	{
	  		String data=pvwareHouseListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("SECUNDERABAD"))
	  		{
	  			pvwareHouseListCount.get(i).click();
	  			
	  			break;
	  		}	
	  	}
				
	  	pvWareHouseTxt.sendKeys(Keys.TAB);
	  	
	  	
	  	
	  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH WA ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("3");
		so_enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_LeftPanelWareHouseRow1));
		
		// Actual
		
		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();
		
		boolean actbatchRes_QtyToReserveRow1		=batchRes_QtyToReserveRow1.getText().isEmpty();
		boolean actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText().isEmpty();
		boolean actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText().isEmpty();
		boolean actbatchRes_AvailableQtyRow1		=batchRes_AvailableQtyRow1.getText().isEmpty();
		boolean actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText().isEmpty();
		boolean actbatchRes_CurOrdResQtyRow1		=batchRes_CurOrdResQtyRow1.getText().isEmpty();
		boolean actbatchRes_BatchQtyRow1			=batchRes_BatchQtyRow1.getText().isEmpty();
	
		
		// Expected
		
		String expTextres_LeftPanelWareHouseRow1	="SECUNDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BWI";
		String expTextres_LeftPanelItemNameRow1		="BATCH WA ITEM";
		String expTextres_LeftPanelItemQtyRow1		="3";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";
		
		boolean expbatchRes_QtyToReserveRow1		=true;
		boolean expbatchRes_BatchNoRow1				=true;
		boolean expbatchRes_WareHouseRow1			=true;
		boolean expbatchRes_AvailableQtyRow1		=true;
		boolean expbatchRes_RelesaseQtyRow1			=true;
		boolean expbatchRes_CurOrdResQtyRow1		=true;
		boolean expbatchRes_BatchQtyRow1			=true;
	
	
		System.out.println("**************************************** checkSalesOrderVoucherToCheckBatchExpiryDateValidation  ***************************************");
		
		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);
		
		
		if(actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)
				
				&& actbatchRes_QtyToReserveRow1==expbatchRes_QtyToReserveRow1 && actbatchRes_BatchNoRow1==expbatchRes_BatchNoRow1
				&& actbatchRes_WareHouseRow1==expbatchRes_WareHouseRow1 && actbatchRes_AvailableQtyRow1==expbatchRes_AvailableQtyRow1
				&& actbatchRes_RelesaseQtyRow1==expbatchRes_RelesaseQtyRow1 && actbatchRes_CurOrdResQtyRow1==expbatchRes_CurOrdResQtyRow1
				&& actbatchRes_BatchQtyRow1==expbatchRes_BatchQtyRow1)
		{
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			 res_CloseBtn.click();
			
			 Thread.sleep(2000);
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			 new_CloseBtn.click();
			  
			 getWaitForAlert();
			 	 
			 getAlert().accept();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
			 voucherhomeCloseBtn.click();
			 
			 return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			res_CloseBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			new_CloseBtn.click();		 
			 
			getWaitForAlert();
			 	 
			getAlert().accept();
			 
			Thread.sleep(2000);
			 		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
			voucherhomeCloseBtn.click();
				
			return false;
		    
		  }
	}


	
	public boolean checkSalesInvoiceVoucherToCheckLinkPopUpScreenWithCRTlPlusLForBatchExpired() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		    	
		checkUserFriendlyMessage();
		    	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();
	            
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();
	            
		// Create a calendar object with today date. Calendar is in java.util pakage.
		Calendar calendar = Calendar.getInstance();
	
		// Move calendar to yesterday
		calendar.add(Calendar.DATE, 14);
	
		// Get current date of calendar which point to the yesterday now
		Date yesterday = calendar.getTime();
	
		DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
		
		System.out.println(dfr.format(yesterday).toString());
	            
		dateTxt.sendKeys(Keys.LEFT);
		Thread.sleep(2000);
		dateTxt.sendKeys(Keys.HOME);
		Thread.sleep(2000);
		dateTxt.sendKeys(dfr.format(yesterday).toString());
	
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_HeaderMinimizeBtn));	
		new_HeaderMinimizeBtn.click();
	     		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
		workFlowExpandBtn.click();
	            
		Thread.sleep(4000);
		
		// Actual
	           	
		List<WebElement> rowCountInLinkScreen=LinkRowCountCL;
	    		
		int actLinkRowCountCLValue=rowCountInLinkScreen.size();
	            
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow6ChkBoxCL));	
		workFlowRow6ChkBoxCL.click();
		
		boolean actsearchOnDropdownCL		=searchOnDropdownCL.isDisplayed();
		boolean actcontainingDropdownCL		=containingDropdownCL.isDisplayed();
		boolean actworkFlowSearchTxtCL		=workFlowSearchTxtCL.isDisplayed();
		boolean actworkFlowCustomizeBtnCL	=workFlowCustomizeBtnCL.isDisplayed();
		boolean actworkFlowOkBtnCL			=workFlowOkBtnCL.isDisplayed();
		
		
		String actworkFlowRow1Column1CL		=workFlowRow1Column1CL.getText();
		String actworkFlowRow1Column2CL		=workFlowRow1Column2CL.getText();
		String actworkFlowRow1Column3CL		=workFlowRow1Column3CL.getText();
		String actworkFlowRow1Column4CL		=workFlowRow1Column4CL.getText();
		String actworkFlowRow1Column5CL		=workFlowRow1Column5CL.getText();
		
		String actworkFlowRow2Column1CL		=workFlowRow2Column1CL.getText();
		String actworkFlowRow2Column2CL		=workFlowRow2Column2CL.getText();
		String actworkFlowRow2Column3CL		=workFlowRow2Column3CL.getText();
		String actworkFlowRow2Column4CL		=workFlowRow2Column4CL.getText();
		String actworkFlowRow2Column5CL		=workFlowRow2Column5CL.getText();
		
		String actworkFlowRow3Column1CL		=workFlowRow3Column1CL.getText();
		String actworkFlowRow3Column2CL		=workFlowRow3Column2CL.getText();
		String actworkFlowRow3Column3CL		=workFlowRow3Column3CL.getText();
		String actworkFlowRow3Column4CL		=workFlowRow3Column4CL.getText();
		String actworkFlowRow3Column5CL		=workFlowRow3Column5CL.getText();
		
		String actworkFlowRow4Column1CL		=workFlowRow4Column1CL.getText();
		String actworkFlowRow4Column2CL		=workFlowRow4Column2CL.getText();
		String actworkFlowRow4Column3CL		=workFlowRow4Column3CL.getText();
		String actworkFlowRow4Column4CL		=workFlowRow4Column4CL.getText();
		String actworkFlowRow4Column5CL		=workFlowRow4Column5CL.getText();

		String actworkFlowRow5Column1CL		=workFlowRow5Column1CL.getText();
		String actworkFlowRow5Column2CL		=workFlowRow5Column2CL.getText();
		String actworkFlowRow5Column3CL		=workFlowRow5Column3CL.getText();
		String actworkFlowRow5Column4CL		=workFlowRow5Column4CL.getText();
		String actworkFlowRow5Column5CL		=workFlowRow5Column5CL.getText();
		
		String actworkFlowRow6Column1CL		=workFlowRow6Column1CL.getText();
		String actworkFlowRow6Column2CL		=workFlowRow6Column2CL.getText();
		String actworkFlowRow6Column3CL		=workFlowRow6Column3CL.getText();
		String actworkFlowRow6Column4CL		=workFlowRow6Column4CL.getText();
		String actworkFlowRow6Column5CL		=workFlowRow6Column5CL.getText();
		
		String actworkFlowRow7Column1CL		=workFlowRow7Column1CL.getText();
		String actworkFlowRow7Column2CL		=workFlowRow7Column2CL.getText();
		String actworkFlowRow7Column3CL		=workFlowRow7Column3CL.getText();
		String actworkFlowRow7Column4CL		=workFlowRow7Column4CL.getText();
		String actworkFlowRow7Column5CL		=workFlowRow7Column5CL.getText();
	    			
		
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow13ChkBoxCL));	
		workFlowRow13ChkBoxCL.click();
				
				
		String actworkFlowRow8Column1CL		=workFlowRow8Column1CL.getText();
		String actworkFlowRow8Column2CL		=workFlowRow8Column2CL.getText();
		String actworkFlowRow8Column3CL		=workFlowRow8Column3CL.getText();
		String actworkFlowRow8Column4CL		=workFlowRow8Column4CL.getText();
		String actworkFlowRow8Column5CL		=workFlowRow8Column5CL.getText();
		
		String actworkFlowRow9Column1CL		=workFlowRow9Column1CL.getText();
		String actworkFlowRow9Column2CL		=workFlowRow9Column2CL.getText();
		String actworkFlowRow9Column3CL		=workFlowRow9Column3CL.getText();
		String actworkFlowRow9Column4CL		=workFlowRow9Column4CL.getText();
		String actworkFlowRow9Column5CL		=workFlowRow9Column5CL.getText();
		
		String actworkFlowRow10Column1CL	=workFlowRow10Column1CL.getText();
		String actworkFlowRow10Column2CL	=workFlowRow10Column2CL.getText();
		String actworkFlowRow10Column3CL	=workFlowRow10Column3CL.getText();
		String actworkFlowRow10Column4CL	=workFlowRow10Column4CL.getText();
		String actworkFlowRow10Column5CL	=workFlowRow10Column5CL.getText();
				
				
		String actworkFlowRow11Column1CL	=workFlowRow11Column1CL.getText();
		String actworkFlowRow11Column2CL	=workFlowRow11Column2CL.getText();
		String actworkFlowRow11Column3CL	=workFlowRow11Column3CL.getText();
		String actworkFlowRow11Column4CL	=workFlowRow11Column4CL.getText();
		String actworkFlowRow11Column5CL	=workFlowRow11Column5CL.getText();
		
		String actworkFlowRow12Column1CL	=workFlowRow12Column1CL.getText();
		String actworkFlowRow12Column2CL	=workFlowRow12Column2CL.getText();
		String actworkFlowRow12Column3CL	=workFlowRow12Column3CL.getText();
		String actworkFlowRow12Column4CL	=workFlowRow12Column4CL.getText();
		String actworkFlowRow12Column5CL	=workFlowRow12Column5CL.getText();
		
		String actworkFlowRow13Column1CL	=workFlowRow13Column1CL.getText();
		String actworkFlowRow13Column2CL	=workFlowRow13Column2CL.getText();
		String actworkFlowRow13Column3CL	=workFlowRow13Column3CL.getText();
		String actworkFlowRow13Column4CL	=workFlowRow13Column4CL.getText();
		String actworkFlowRow13Column5CL	=workFlowRow13Column5CL.getText();
				
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow16ChkBoxCL));	
		workFlowRow16ChkBoxCL.click();
				
		String actworkFlowRow14Column1CL	=workFlowRow14Column1CL.getText();
		String actworkFlowRow14Column2CL	=workFlowRow14Column2CL.getText();
		String actworkFlowRow14Column3CL	=workFlowRow14Column3CL.getText();
		String actworkFlowRow14Column4CL	=workFlowRow14Column4CL.getText();
		String actworkFlowRow14Column5CL	=workFlowRow14Column5CL.getText();
		
		String actworkFlowRow15Column1CL	=workFlowRow15Column1CL.getText();
		String actworkFlowRow15Column2CL	=workFlowRow15Column2CL.getText();
		String actworkFlowRow15Column3CL	=workFlowRow15Column3CL.getText();
		String actworkFlowRow15Column4CL	=workFlowRow15Column4CL.getText();
		String actworkFlowRow15Column5CL	=workFlowRow15Column5CL.getText();
		
		String actworkFlowRow16Column1CL	=workFlowRow16Column1CL.getText();
		String actworkFlowRow16Column2CL	=workFlowRow16Column2CL.getText();
		String actworkFlowRow16Column3CL	=workFlowRow16Column3CL.getText();
		String actworkFlowRow16Column4CL	=workFlowRow16Column4CL.getText();
		String actworkFlowRow16Column5CL	=workFlowRow16Column5CL.getText();
		
		// Expected
		
		int expLinkRowCountCLValue=16;
		
		boolean expsearchOnDropdownCL		=true;
		boolean expcontainingDropdownCL		=true;
		boolean expworkFlowSearchTxtCL		=true;
		boolean expworkFlowCustomizeBtnCL	=true;
		boolean expworkFlowOkBtnCL			=true;
		
		String expworkFlowRow1Column1CL		="SalOrd:1";
		String expworkFlowRow1Column3CL		="BIN FINISHED GOODS ITEM";
		String expworkFlowRow1Column4CL		="2.00";
		String expworkFlowRow1Column5CL		="0.00";
		
		String expworkFlowRow2Column1CL		="SalOrd:1";
		String expworkFlowRow2Column3CL		="BIN FINISHED GOODS ITEM";
		String expworkFlowRow2Column4CL		="2.00";
		String expworkFlowRow2Column5CL		="0.00";

		String expworkFlowRow3Column1CL		="SalOrd:1";
		String expworkFlowRow3Column3CL		="BIN FINISHED GOODS ITEM";
		String expworkFlowRow3Column4CL		="1.00";
		String expworkFlowRow3Column5CL		="0.00";
		
		String expworkFlowRow4Column1CL		="SalOrd:2";
		String expworkFlowRow4Column3CL		="BIN FINISHED GOODS ITEM";
		String expworkFlowRow4Column4CL		="5.00";
		String expworkFlowRow4Column5CL		="0.00";
		
		String expworkFlowRow5Column1CL		="SalOrd:3";
		String expworkFlowRow5Column3CL		="BATCH BR ITEM";
		String expworkFlowRow5Column4CL		="19.00";
		String expworkFlowRow5Column5CL		="0.00";
		
		String expworkFlowRow6Column1CL		="SalOrd:3";
		String expworkFlowRow6Column3CL		="BATCH BR ITEM";
		String expworkFlowRow6Column4CL		="20.00";
		String expworkFlowRow6Column5CL		="0.00";
		
		String expworkFlowRow7Column1CL		="SalOrd:4";
		String expworkFlowRow7Column3CL		="BATCH BR ITEM";
		String expworkFlowRow7Column4CL		="81.00";
		String expworkFlowRow7Column5CL		="0.00";
		
		String expworkFlowRow8Column1CL		="SalOrd:5";
		String expworkFlowRow8Column3CL		="BATCH WA ITEM";
		String expworkFlowRow8Column4CL		="49.00";
		String expworkFlowRow8Column5CL		="0.00";
		
		String expworkFlowRow9Column1CL		="SalOrd:5";
		String expworkFlowRow9Column3CL		="BATCH WA ITEM";
		String expworkFlowRow9Column4CL		="14.00";
		String expworkFlowRow9Column5CL		="0.00";
		
		String expworkFlowRow10Column1CL	="SalOrd:6";
		String expworkFlowRow10Column3CL	="RMA RITEM";
		String expworkFlowRow10Column4CL	="2.00";
		String expworkFlowRow10Column5CL	="0.00";
		
		String expworkFlowRow11Column1CL	="SalOrd:6";
		String expworkFlowRow11Column3CL	="RMA RITEM";
		String expworkFlowRow11Column4CL	="2.00";
		String expworkFlowRow11Column5CL	="0.00";
		
		String expworkFlowRow12Column1CL	="SalOrd:6";
		String expworkFlowRow12Column3CL	="RMA RITEM";
		String expworkFlowRow12Column4CL	="2.00";
		String expworkFlowRow12Column5CL	="0.00";
		
		String expworkFlowRow13Column1CL	="SalOrd:7";
		String expworkFlowRow13Column3CL	="RMA RITEM";
		String expworkFlowRow13Column4CL	="1.00";
		String expworkFlowRow13Column5CL	="0.00";
		
		String expworkFlowRow14Column1CL	="SalOrd:8";
		String expworkFlowRow14Column3CL	="STOCK ITEM";
		String expworkFlowRow14Column4CL	="23.00";
		String expworkFlowRow14Column5CL	="0.00";

		String expworkFlowRow15Column1CL	="SalOrd:8";
		String expworkFlowRow15Column3CL	="STOCK ITEM";
		String expworkFlowRow15Column4CL	="7.00";
		String expworkFlowRow15Column5CL	="0.00";
		
		String expworkFlowRow16Column1CL	="SalOrd:9";
		String expworkFlowRow16Column3CL	="STOCK ITEM";
		String expworkFlowRow16Column4CL	="2.00";
		String expworkFlowRow16Column5CL	="0.00";
		
		System.out.println("**************************************** checkSalesInvoiceVoucherToCheckLinkPopUpScreenWithCRTlPlusLForBatchExpired  ***************************************");
		
		System.out.println("LinkRowCountCLValue  		: "+actLinkRowCountCLValue		+" 	Value Expected : "+expLinkRowCountCLValue);
		
		System.out.println("searchOnDropdownCL  		: "+actsearchOnDropdownCL		+" 	Value Expected : "+expsearchOnDropdownCL);
		System.out.println("containingDropdownCL  		: "+actcontainingDropdownCL		+" 	Value Expected : "+expcontainingDropdownCL);
		System.out.println("workFlowSearchTxtCL  		: "+actworkFlowSearchTxtCL		+" 	Value Expected : "+expworkFlowSearchTxtCL);
		System.out.println("workFlowCustomizeBtnCL  	: "+actworkFlowCustomizeBtnCL	+" 	Value Expected : "+expworkFlowCustomizeBtnCL);
		System.out.println("workFlowOkBtnCL  			: "+actworkFlowOkBtnCL			+" 	Value Expected : "+expworkFlowOkBtnCL);
		
		System.out.println("workFlowRow1Column1CL  		: "+actworkFlowRow1Column1CL	+" 	Value Expected : "+expworkFlowRow1Column1CL);
		System.out.println("workFlowRow1Column3CL  		: "+actworkFlowRow1Column3CL	+" 	Value Expected : "+expworkFlowRow1Column3CL);
		System.out.println("workFlowRow1Column4CL  		: "+actworkFlowRow1Column4CL	+" 	Value Expected : "+expworkFlowRow1Column4CL);
		System.out.println("workFlowRow1Column5CL  		: "+actworkFlowRow1Column5CL	+" 	Value Expected : "+expworkFlowRow1Column5CL);
		
		System.out.println("workFlowRow2Column1CL  		: "+actworkFlowRow2Column1CL	+" 	Value Expected : "+expworkFlowRow2Column1CL);
		System.out.println("workFlowRow2Column3CL  		: "+actworkFlowRow2Column3CL	+" 	Value Expected : "+expworkFlowRow2Column3CL);
		System.out.println("workFlowRow2Column4CL  		: "+actworkFlowRow2Column4CL	+" 	Value Expected : "+expworkFlowRow2Column4CL);
		System.out.println("workFlowRow2Column5CL  		: "+actworkFlowRow2Column5CL	+" 	Value Expected : "+expworkFlowRow2Column5CL);
		
		System.out.println("workFlowRow3Column1CL  		: "+actworkFlowRow3Column1CL	+" 	Value Expected : "+expworkFlowRow3Column1CL);
		System.out.println("workFlowRow3Column3CL  		: "+actworkFlowRow3Column3CL	+" 	Value Expected : "+expworkFlowRow3Column3CL);
		System.out.println("workFlowRow3Column4CL  		: "+actworkFlowRow3Column4CL	+" 	Value Expected : "+expworkFlowRow3Column4CL);
		System.out.println("workFlowRow3Column5CL  		: "+actworkFlowRow3Column5CL	+" 	Value Expected : "+expworkFlowRow3Column5CL);
		
		System.out.println("workFlowRow4Column1CL  		: "+actworkFlowRow4Column1CL	+" 	Value Expected : "+expworkFlowRow4Column1CL);
		System.out.println("workFlowRow4Column3CL  		: "+actworkFlowRow4Column3CL	+" 	Value Expected : "+expworkFlowRow4Column3CL);
		System.out.println("workFlowRow4Column4CL  		: "+actworkFlowRow4Column4CL	+" 	Value Expected : "+expworkFlowRow4Column4CL);
		System.out.println("workFlowRow4Column5CL  		: "+actworkFlowRow4Column5CL	+" 	Value Expected : "+expworkFlowRow4Column5CL);
		
		System.out.println("workFlowRow5Column1CL  		: "+actworkFlowRow5Column1CL	+" 	Value Expected : "+expworkFlowRow5Column1CL);
		System.out.println("workFlowRow5Column3CL  		: "+actworkFlowRow5Column3CL	+" 	Value Expected : "+expworkFlowRow5Column3CL);
		System.out.println("workFlowRow5Column4CL  		: "+actworkFlowRow5Column4CL	+" 	Value Expected : "+expworkFlowRow5Column4CL);
		System.out.println("workFlowRow5Column5CL  		: "+actworkFlowRow5Column5CL	+" 	Value Expected : "+expworkFlowRow5Column5CL);
		
		System.out.println("workFlowRow6Column1CL  		: "+actworkFlowRow6Column1CL	+" 	Value Expected : "+expworkFlowRow6Column1CL);
		System.out.println("workFlowRow6Column3CL  		: "+actworkFlowRow6Column3CL	+" 	Value Expected : "+expworkFlowRow6Column3CL);
		System.out.println("workFlowRow6Column4CL  		: "+actworkFlowRow6Column4CL	+" 	Value Expected : "+expworkFlowRow6Column4CL);
		System.out.println("workFlowRow6Column5CL  		: "+actworkFlowRow6Column5CL	+" 	Value Expected : "+expworkFlowRow6Column5CL);

		System.out.println("workFlowRow7Column1CL  		: "+actworkFlowRow7Column1CL	+" 	Value Expected : "+expworkFlowRow7Column1CL);
		System.out.println("workFlowRow7Column3CL  		: "+actworkFlowRow7Column3CL	+" 	Value Expected : "+expworkFlowRow7Column3CL);
		System.out.println("workFlowRow7Column4CL  		: "+actworkFlowRow7Column4CL	+" 	Value Expected : "+expworkFlowRow7Column4CL);
		System.out.println("workFlowRow7Column5CL  		: "+actworkFlowRow7Column5CL	+" 	Value Expected : "+expworkFlowRow7Column5CL);
		
		System.out.println("workFlowRow8Column1CL  		: "+actworkFlowRow8Column1CL	+" 	Value Expected : "+expworkFlowRow8Column1CL);
		System.out.println("workFlowRow8Column3CL  		: "+actworkFlowRow8Column3CL	+" 	Value Expected : "+expworkFlowRow8Column3CL);
		System.out.println("workFlowRow8Column4CL  		: "+actworkFlowRow8Column4CL	+" 	Value Expected : "+expworkFlowRow8Column4CL);
		System.out.println("workFlowRow8Column5CL  		: "+actworkFlowRow8Column5CL	+" 	Value Expected : "+expworkFlowRow8Column5CL);
		
		System.out.println("workFlowRow9Column1CL  		: "+actworkFlowRow9Column1CL	+" 	Value Expected : "+expworkFlowRow9Column1CL);
		System.out.println("workFlowRow9Column3CL  		: "+actworkFlowRow9Column3CL	+" 	Value Expected : "+expworkFlowRow9Column3CL);
		System.out.println("workFlowRow9Column4CL  		: "+actworkFlowRow9Column4CL	+" 	Value Expected : "+expworkFlowRow9Column4CL);
		System.out.println("workFlowRow9Column5CL  		: "+actworkFlowRow9Column5CL	+" 	Value Expected : "+expworkFlowRow9Column5CL);
		
		System.out.println("workFlowRow10Column1CL  	: "+actworkFlowRow10Column1CL	+" 	Value Expected : "+expworkFlowRow10Column1CL);
		System.out.println("workFlowRow10Column3CL  	: "+actworkFlowRow10Column3CL	+" 	Value Expected : "+expworkFlowRow10Column3CL);
		System.out.println("workFlowRow10Column4CL  	: "+actworkFlowRow10Column4CL	+" 	Value Expected : "+expworkFlowRow10Column4CL);
		System.out.println("workFlowRow10Column5CL  	: "+actworkFlowRow10Column5CL	+" 	Value Expected : "+expworkFlowRow10Column5CL);
		
		System.out.println("workFlowRow11Column1CL  	: "+actworkFlowRow11Column1CL	+" 	Value Expected : "+expworkFlowRow11Column1CL);
		System.out.println("workFlowRow11Column3CL  	: "+actworkFlowRow11Column3CL	+" 	Value Expected : "+expworkFlowRow11Column3CL);
		System.out.println("workFlowRow11Column4CL  	: "+actworkFlowRow11Column4CL	+" 	Value Expected : "+expworkFlowRow11Column4CL);
		System.out.println("workFlowRow11Column5CL  	: "+actworkFlowRow11Column5CL	+" 	Value Expected : "+expworkFlowRow11Column5CL);
		
		System.out.println("workFlowRow12Column1CL  	: "+actworkFlowRow12Column1CL	+" 	Value Expected : "+expworkFlowRow12Column1CL);
		System.out.println("workFlowRow12Column3CL  	: "+actworkFlowRow12Column3CL	+" 	Value Expected : "+expworkFlowRow12Column3CL);
		System.out.println("workFlowRow12Column4CL  	: "+actworkFlowRow12Column4CL	+" 	Value Expected : "+expworkFlowRow12Column4CL);
		System.out.println("workFlowRow12Column5CL  	: "+actworkFlowRow12Column5CL	+" 	Value Expected : "+expworkFlowRow12Column5CL);
		
		System.out.println("workFlowRow13Column1CL  	: "+actworkFlowRow13Column1CL	+" 	Value Expected : "+expworkFlowRow13Column1CL);
		System.out.println("workFlowRow13Column3CL  	: "+actworkFlowRow13Column3CL	+" 	Value Expected : "+expworkFlowRow13Column3CL);
		System.out.println("workFlowRow13Column4CL  	: "+actworkFlowRow13Column4CL	+" 	Value Expected : "+expworkFlowRow13Column4CL);
		System.out.println("workFlowRow13Column5CL  	: "+actworkFlowRow13Column5CL	+" 	Value Expected : "+expworkFlowRow13Column5CL);
		
		System.out.println("workFlowRow14Column1CL  	: "+actworkFlowRow14Column1CL	+" 	Value Expected : "+expworkFlowRow14Column1CL);
		System.out.println("workFlowRow14Column3CL  	: "+actworkFlowRow14Column3CL	+" 	Value Expected : "+expworkFlowRow14Column3CL);
		System.out.println("workFlowRow14Column4CL  	: "+actworkFlowRow14Column4CL	+" 	Value Expected : "+expworkFlowRow14Column4CL);
		System.out.println("workFlowRow14Column5CL  	: "+actworkFlowRow14Column5CL	+" 	Value Expected : "+expworkFlowRow14Column5CL);
		
		System.out.println("workFlowRow15Column1CL  	: "+actworkFlowRow15Column1CL	+" 	Value Expected : "+expworkFlowRow15Column1CL);
		System.out.println("workFlowRow15Column3CL  	: "+actworkFlowRow15Column3CL	+" 	Value Expected : "+expworkFlowRow15Column3CL);
		System.out.println("workFlowRow15Column4CL  	: "+actworkFlowRow15Column4CL	+" 	Value Expected : "+expworkFlowRow15Column4CL);
		System.out.println("workFlowRow15Column5CL  	: "+actworkFlowRow15Column5CL	+" 	Value Expected : "+expworkFlowRow15Column5CL);
		
		System.out.println("workFlowRow16Column1CL  	: "+actworkFlowRow16Column1CL	+" 	Value Expected : "+expworkFlowRow16Column1CL);
		System.out.println("workFlowRow16Column3CL  	: "+actworkFlowRow16Column3CL	+" 	Value Expected : "+expworkFlowRow16Column3CL);
		System.out.println("workFlowRow16Column4CL  	: "+actworkFlowRow16Column4CL	+" 	Value Expected : "+expworkFlowRow16Column4CL);
		System.out.println("workFlowRow16Column5CL  	: "+actworkFlowRow16Column5CL	+" 	Value Expected : "+expworkFlowRow16Column5CL);
				
				
		if(actLinkRowCountCLValue==expLinkRowCountCLValue
				
				&& actsearchOnDropdownCL==expsearchOnDropdownCL && actcontainingDropdownCL==expcontainingDropdownCL && actworkFlowSearchTxtCL==expworkFlowSearchTxtCL
				&& actworkFlowCustomizeBtnCL==expworkFlowCustomizeBtnCL && actworkFlowOkBtnCL==expworkFlowOkBtnCL
				
				&& actworkFlowRow1Column1CL.equalsIgnoreCase(expworkFlowRow1Column1CL)
				&& actworkFlowRow1Column3CL.equalsIgnoreCase(expworkFlowRow1Column3CL)
				&& actworkFlowRow1Column4CL.equalsIgnoreCase(expworkFlowRow1Column4CL)
				&& actworkFlowRow1Column5CL.equalsIgnoreCase(expworkFlowRow1Column5CL)
				
				&& actworkFlowRow2Column1CL.equalsIgnoreCase(expworkFlowRow2Column1CL)
				&& actworkFlowRow2Column3CL.equalsIgnoreCase(expworkFlowRow2Column3CL)
				&& actworkFlowRow2Column4CL.equalsIgnoreCase(expworkFlowRow2Column4CL)
				&& actworkFlowRow2Column5CL.equalsIgnoreCase(expworkFlowRow2Column5CL)
				
				&& actworkFlowRow3Column1CL.equalsIgnoreCase(expworkFlowRow3Column1CL)
				&& actworkFlowRow3Column3CL.equalsIgnoreCase(expworkFlowRow3Column3CL)
				&& actworkFlowRow3Column4CL.equalsIgnoreCase(expworkFlowRow3Column4CL)
				&& actworkFlowRow3Column5CL.equalsIgnoreCase(expworkFlowRow3Column5CL)
				
				&& actworkFlowRow4Column1CL.equalsIgnoreCase(expworkFlowRow4Column1CL)
				&& actworkFlowRow4Column3CL.equalsIgnoreCase(expworkFlowRow4Column3CL)
				&& actworkFlowRow4Column4CL.equalsIgnoreCase(expworkFlowRow4Column4CL)
				&& actworkFlowRow4Column5CL.equalsIgnoreCase(expworkFlowRow4Column5CL)
				
				&& actworkFlowRow5Column1CL.equalsIgnoreCase(expworkFlowRow5Column1CL)
				&& actworkFlowRow5Column3CL.equalsIgnoreCase(expworkFlowRow5Column3CL)
				&& actworkFlowRow5Column4CL.equalsIgnoreCase(expworkFlowRow5Column4CL)
				&& actworkFlowRow5Column5CL.equalsIgnoreCase(expworkFlowRow5Column5CL)
				
				&& actworkFlowRow6Column1CL.equalsIgnoreCase(expworkFlowRow6Column1CL)
				&& actworkFlowRow6Column3CL.equalsIgnoreCase(expworkFlowRow6Column3CL)
				&& actworkFlowRow6Column4CL.equalsIgnoreCase(expworkFlowRow6Column4CL)
				&& actworkFlowRow6Column5CL.equalsIgnoreCase(expworkFlowRow6Column5CL)
				
				&& actworkFlowRow7Column1CL.equalsIgnoreCase(expworkFlowRow7Column1CL)
				&& actworkFlowRow7Column3CL.equalsIgnoreCase(expworkFlowRow7Column3CL)
				&& actworkFlowRow7Column4CL.equalsIgnoreCase(expworkFlowRow7Column4CL)
				&& actworkFlowRow7Column5CL.equalsIgnoreCase(expworkFlowRow7Column5CL)
				
				&& actworkFlowRow8Column1CL.equalsIgnoreCase(expworkFlowRow8Column1CL)
				&& actworkFlowRow8Column3CL.equalsIgnoreCase(expworkFlowRow8Column3CL)
				&& actworkFlowRow8Column4CL.equalsIgnoreCase(expworkFlowRow8Column4CL)
				&& actworkFlowRow8Column5CL.equalsIgnoreCase(expworkFlowRow8Column5CL)
				
				&& actworkFlowRow9Column1CL.equalsIgnoreCase(expworkFlowRow9Column1CL)
				&& actworkFlowRow9Column3CL.equalsIgnoreCase(expworkFlowRow9Column3CL)
				&& actworkFlowRow9Column4CL.equalsIgnoreCase(expworkFlowRow9Column4CL)
				&& actworkFlowRow9Column5CL.equalsIgnoreCase(expworkFlowRow9Column5CL)
				
				&& actworkFlowRow10Column1CL.equalsIgnoreCase(expworkFlowRow10Column1CL)
				&& actworkFlowRow10Column3CL.equalsIgnoreCase(expworkFlowRow10Column3CL)
				&& actworkFlowRow10Column4CL.equalsIgnoreCase(expworkFlowRow10Column4CL)
				&& actworkFlowRow10Column5CL.equalsIgnoreCase(expworkFlowRow10Column5CL)
				
				&& actworkFlowRow11Column1CL.equalsIgnoreCase(expworkFlowRow11Column1CL)
				&& actworkFlowRow11Column3CL.equalsIgnoreCase(expworkFlowRow11Column3CL)
				&& actworkFlowRow11Column4CL.equalsIgnoreCase(expworkFlowRow11Column4CL)
				&& actworkFlowRow11Column5CL.equalsIgnoreCase(expworkFlowRow11Column5CL)
				
				&& actworkFlowRow12Column1CL.equalsIgnoreCase(expworkFlowRow12Column1CL)
				&& actworkFlowRow12Column3CL.equalsIgnoreCase(expworkFlowRow12Column3CL)
				&& actworkFlowRow12Column4CL.equalsIgnoreCase(expworkFlowRow12Column4CL)
				&& actworkFlowRow12Column5CL.equalsIgnoreCase(expworkFlowRow12Column5CL)
				
				&& actworkFlowRow13Column1CL.equalsIgnoreCase(expworkFlowRow13Column1CL)
				&& actworkFlowRow13Column3CL.equalsIgnoreCase(expworkFlowRow13Column3CL)
				&& actworkFlowRow13Column4CL.equalsIgnoreCase(expworkFlowRow13Column4CL)
				&& actworkFlowRow13Column5CL.equalsIgnoreCase(expworkFlowRow13Column5CL)
				
				&& actworkFlowRow14Column1CL.equalsIgnoreCase(expworkFlowRow14Column1CL)
				&& actworkFlowRow14Column3CL.equalsIgnoreCase(expworkFlowRow14Column3CL)
				&& actworkFlowRow14Column4CL.equalsIgnoreCase(expworkFlowRow14Column4CL)
				&& actworkFlowRow14Column5CL.equalsIgnoreCase(expworkFlowRow14Column5CL)
				
				&& actworkFlowRow15Column1CL.equalsIgnoreCase(expworkFlowRow15Column1CL)
				&& actworkFlowRow15Column3CL.equalsIgnoreCase(expworkFlowRow15Column3CL)
				&& actworkFlowRow15Column4CL.equalsIgnoreCase(expworkFlowRow15Column4CL)
				&& actworkFlowRow15Column5CL.equalsIgnoreCase(expworkFlowRow15Column5CL)
				
				&& actworkFlowRow16Column1CL.equalsIgnoreCase(expworkFlowRow16Column1CL)
				&& actworkFlowRow16Column3CL.equalsIgnoreCase(expworkFlowRow16Column3CL)
				&& actworkFlowRow16Column4CL.equalsIgnoreCase(expworkFlowRow16Column4CL)
				&& actworkFlowRow16Column5CL.equalsIgnoreCase(expworkFlowRow16Column5CL))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resPass);
					
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
					
			return false;
		}
	}
				

	
	
	public boolean checkSalesInvoiceVoucherSearchInLinkPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowSearchTxtCL));
		workFlowSearchTxtCL.click();
		workFlowSearchTxtCL.sendKeys("BATCH WA ITEM");
			
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdownCL));
			
		// Actual
				
		boolean actsearchOnDropdownCL		=searchOnDropdownCL.isDisplayed();
		boolean actcontainingDropdownCL		=containingDropdownCL.isDisplayed();
		boolean actworkFlowSearchTxtCL		=workFlowSearchTxtCL.isDisplayed();
		boolean actworkFlowCustomizeBtnCL	=workFlowCustomizeBtnCL.isDisplayed();
		boolean actworkFlowOkBtnCL			=workFlowOkBtnCL.isDisplayed();
			
			
		String actworkFlowRow8Column1CL		=workFlowRow8Column1CL.getText();
		String actworkFlowRow8Column2CL		=workFlowRow8Column2CL.getText();
		String actworkFlowRow8Column3CL		=workFlowRow8Column3CL.getText();
		String actworkFlowRow8Column4CL		=workFlowRow8Column4CL.getText();
		String actworkFlowRow8Column5CL		=workFlowRow8Column5CL.getText();
		
		String actworkFlowRow9Column1CL		=workFlowRow9Column1CL.getText();
		String actworkFlowRow9Column2CL		=workFlowRow9Column2CL.getText();
		String actworkFlowRow9Column3CL		=workFlowRow9Column3CL.getText();
		String actworkFlowRow9Column4CL		=workFlowRow9Column4CL.getText();
		String actworkFlowRow9Column5CL		=workFlowRow9Column5CL.getText();
		
		
		// Expected
		
		boolean expsearchOnDropdownCL		=true;
		boolean expcontainingDropdownCL		=true;
		boolean expworkFlowSearchTxtCL		=true;
		boolean expworkFlowCustomizeBtnCL	=true;
		boolean expworkFlowOkBtnCL			=true;
		
		String expworkFlowRow8Column1CL		="SalOrd:5";
		String expworkFlowRow8Column3CL		="BATCH WA ITEM";
		String expworkFlowRow8Column4CL		="49.00";
		String expworkFlowRow8Column5CL		="0.00";
		
		String expworkFlowRow9Column1CL		="SalOrd:5";
		String expworkFlowRow9Column3CL		="BATCH WA ITEM";
		String expworkFlowRow9Column4CL		="14.00";
		String expworkFlowRow9Column5CL		="0.00";
			
		System.out.println("**************************************** checkSalesInvoiceVoucherToCheckLinkPopUpScreenWithCRTlPlusLForBatchExpired  ***************************************");
		
		System.out.println("searchOnDropdownCL  		: "+actsearchOnDropdownCL		+" 	Value Expected : "+expsearchOnDropdownCL);
		System.out.println("containingDropdownCL  		: "+actcontainingDropdownCL		+" 	Value Expected : "+expcontainingDropdownCL);
		System.out.println("workFlowSearchTxtCL  		: "+actworkFlowSearchTxtCL		+" 	Value Expected : "+expworkFlowSearchTxtCL);
		System.out.println("workFlowCustomizeBtnCL  	: "+actworkFlowCustomizeBtnCL	+" 	Value Expected : "+expworkFlowCustomizeBtnCL);
		System.out.println("workFlowOkBtnCL  			: "+actworkFlowOkBtnCL			+" 	Value Expected : "+expworkFlowOkBtnCL);
		
		System.out.println("workFlowRow8Column1CL  		: "+actworkFlowRow8Column1CL	+" 	Value Expected : "+expworkFlowRow8Column1CL);
		System.out.println("workFlowRow8Column3CL  		: "+actworkFlowRow8Column3CL	+" 	Value Expected : "+expworkFlowRow8Column3CL);
		System.out.println("workFlowRow8Column4CL  		: "+actworkFlowRow8Column4CL	+" 	Value Expected : "+expworkFlowRow8Column4CL);
		System.out.println("workFlowRow8Column5CL  		: "+actworkFlowRow8Column5CL	+" 	Value Expected : "+expworkFlowRow8Column5CL);
		
		System.out.println("workFlowRow9Column1CL  		: "+actworkFlowRow9Column1CL	+" 	Value Expected : "+expworkFlowRow9Column1CL);
		System.out.println("workFlowRow9Column3CL  		: "+actworkFlowRow9Column3CL	+" 	Value Expected : "+expworkFlowRow9Column3CL);
		System.out.println("workFlowRow9Column4CL  		: "+actworkFlowRow9Column4CL	+" 	Value Expected : "+expworkFlowRow9Column4CL);
		System.out.println("workFlowRow9Column5CL  		: "+actworkFlowRow9Column5CL	+" 	Value Expected : "+expworkFlowRow9Column5CL);
		
		if(actsearchOnDropdownCL==expsearchOnDropdownCL && actcontainingDropdownCL==expcontainingDropdownCL && actworkFlowSearchTxtCL==expworkFlowSearchTxtCL
				&& actworkFlowCustomizeBtnCL==expworkFlowCustomizeBtnCL && actworkFlowOkBtnCL==expworkFlowOkBtnCL
				
				&& actworkFlowRow8Column1CL.equalsIgnoreCase(expworkFlowRow8Column1CL)
				&& actworkFlowRow8Column3CL.equalsIgnoreCase(expworkFlowRow8Column3CL)
				&& actworkFlowRow8Column4CL.equalsIgnoreCase(expworkFlowRow8Column4CL)
				&& actworkFlowRow8Column5CL.equalsIgnoreCase(expworkFlowRow8Column5CL)
				
				&& actworkFlowRow9Column1CL.equalsIgnoreCase(expworkFlowRow9Column1CL)
				&& actworkFlowRow9Column3CL.equalsIgnoreCase(expworkFlowRow9Column3CL)
				&& actworkFlowRow9Column4CL.equalsIgnoreCase(expworkFlowRow9Column4CL)
				&& actworkFlowRow9Column5CL.equalsIgnoreCase(expworkFlowRow9Column5CL))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}


		
	public boolean checkSalesInvoiceVoucherInformationDisplayAfterSelectLinksThroughSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
		Thread.sleep(200);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();
			
		Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnInSalesVoucher));
		workFlowOkBtnInSalesVoucher.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_HeaderExpandBtn));	
		new_HeaderExpandBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		
		// Actual
		
		String actcustomerAccountTxt	=customerAccountTxt.getAttribute("value");
		
		String actItemR1C1				=select1stRow_1stColumn.getText();
		String actUnitsR1C2				=select1stRow_2ndColumn.getText();
		String actRDR1C3				=select1stRow_3rdColumn.getText();
		String actAQR1C4				=select1stRow_4thColumn.getText(); 
		String actFQR1C5				=select1stRow_5thColumn.getText();
		//String actAvgRateR1C6				=select1stRow_6thColumn.getText();
		//String actAvgRateOR1C7			=select1stRow_7thColumn.getText();
		String actQtyR1C8				=select1stRow_8thColumn.getText();
		String actLSOR1C9				=select1stRow_9thColumn.getText();
		String actQtyToReleaseR1C10		=select1stRow_10thColumn.getText();
		String actRateR1C11				=select1stRow_11thColumn.getText();
		String actGrossR1C12			=select1stRow_12thColumn.getText();
		
		String actItemR2C1				=select2ndRow_1stColumn.getText();
		String actUnitsR2C2				=select2ndRow_2ndColumn.getText();
		String actRDR2C3				=select2ndRow_3rdColumn.getText();
		String actAQR2C4				=select2ndRow_4thColumn.getText(); 
		String actFQR2C5				=select2ndRow_5thColumn.getText();
		//String actAvgRateR2C6				=select2ndRow_6thColumn.getText();
		//String actAvgRateOR2C7			=select2ndRow_7thColumn.getText();
		String actQtyR2C8				=select2ndRow_8thColumn.getText();
		String actLSOR2C9				=select2ndRow_9thColumn.getText();
		String actQtyToReleaseR2C10		=select2ndRow_10thColumn.getText();
		String actRateR2C11				=select2ndRow_11thColumn.getText();
		String actGrossR2C12			=select2ndRow_12thColumn.getText();
		
		
		// Expected
		
		String expcustomerAccountTxt	="Customer B";
		
		String expItemR1C1				="BATCH WA ITEM";
		String expUnitsR1C2				="Pcs";
		String expRDR1C3				="0.00";
		String expAQR1C4				="25.00";
		String expFQR1C5				="24.00";
		//String expAvgRateR1C6				="0.00";
		//String expAvgRateoR1C7			="19.00";
		String expQtyR1C8				="49.00";
		String expLSOR1C9				="SalOrd:5";
		String expQtyToReleaseR1C10		="47.00";
		String expRateR1C11				="10.00";
		String expGrossR1C12			="490.00"; 
		
		String expItemR2C1				="BATCH WA ITEM";
		String expUnitsR2C2				="Pcs";
		String expRDR2C3				="0.00";
		String expAQR2C4				="14.00";
		String expFQR2C5				="0.00";
		//String expAvgRateR2C6				="20.00";
		//String expAvgRateoR2C7			="20.00";
		String expQtyR2C8				="14.00";
		String expLSOR2C9				="SalOrd:5";
		String expQtyToReleaseR2C10		="14.00";
		String expRateR2C11				="10.00";
		String expGrossR2C12			="140.00"; 
		
		
		System.out.println("*********************************** checkSalesInvoiceVoucherInformationDisplayAfterSelectLinksThroughSearch  *******************************");
		
		System.out.println("customerAccountTxt        		       : "+actcustomerAccountTxt               +" Value Expected : "+expcustomerAccountTxt);	
		
		System.out.println("Entry Page R1 Item Value Actual        : "+actItemR1C1                         +" Value Expected : "+expItemR1C1);	
		System.out.println("Entry Page R1 Units Value Actual       : "+actUnitsR1C2                        +" Value Expected : "+expUnitsR1C2);
		System.out.println("Entry Page RD R1 Value Actual          : "+actRDR1C3                           +" Value Expected : "+expRDR1C3);
		System.out.println("Entry Page AQ R1 Value Actual          : "+actAQR1C4                           +" Value Expected : "+expAQR1C4);
		System.out.println("Entry Page FQ R1 Value Actual          : "+actFQR1C5                           +" Value Expected : "+expFQR1C5);
		//System.out.println("Entry Page AVG Rate R1 Value Actual    : "+actAvgRateR1C6                      +" Value Expected : "+expAvgRateR1C6);
		//System.out.println("Entry Page AVG RateO R1 Value Actual   : "+actAvgRateOR1C7                     +" Value Expected : "+expAvgRateoR1C7);	
		System.out.println("Entry Page Qty R1 Value Actual         : "+actQtyR1C8                          +" Value Expected : "+expQtyR1C8);
		System.out.println("Entry Page LSO R1 Value Actual         : "+actLSOR1C9                          +" Value Expected : "+expLSOR1C9);
		System.out.println("Entry Page Qty To Release Value Actual : "+actQtyToReleaseR1C10                +" Value Expected : "+expQtyToReleaseR1C10);
		System.out.println("Entry Page Rate R1 Value Actual        : "+actRateR1C11                        +" Value Expected : "+expRateR1C11);	
		System.out.println("Entry Page Gross R1 Value Actual       : "+actGrossR1C12                       +" Value Expected : "+expGrossR1C12);
		
		System.out.println("Entry Page R2 Item Value Actual        : "+actItemR2C1                         +" Value Expected : "+expItemR2C1);	
		System.out.println("Entry Page R2 Units Value Actual       : "+actUnitsR2C2                        +" Value Expected : "+expUnitsR2C2);
		System.out.println("Entry Page RD R2 Value Actual          : "+actRDR2C3                           +" Value Expected : "+expRDR2C3);
		System.out.println("Entry Page AQ R2 Value Actual          : "+actAQR2C4                           +" Value Expected : "+expAQR2C4);
		System.out.println("Entry Page FQ R2 Value Actual          : "+actFQR2C5                           +" Value Expected : "+expFQR2C5);
		//System.out.println("Entry Page AVG Rate R2 Value Actual    : "+actAvgRateR2C6                      +" Value Expected : "+expAvgRateR2C6);
		//System.out.println("Entry Page AVG RateO R2 Value Actual   : "+actAvgRateOR2C7                     +" Value Expected : "+expAvgRateoR2C7);	
		System.out.println("Entry Page Qty R2 Value Actual         : "+actQtyR2C8                          +" Value Expected : "+expQtyR2C8);
		System.out.println("Entry Page LSO R2 Value Actual         : "+actLSOR2C9                          +" Value Expected : "+expLSOR2C9);
		System.out.println("Entry Page Qty To Release Value Actual : "+actQtyToReleaseR2C10                +" Value Expected : "+expQtyToReleaseR2C10);
		System.out.println("Entry Page Rate R2 Value Actual        : "+actRateR2C11                        +" Value Expected : "+expRateR2C11);	
		System.out.println("Entry Page Gross R2 Value Actual       : "+actGrossR2C12                       +" Value Expected : "+expGrossR2C12);
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actItemR1C1.equalsIgnoreCase(expItemR1C1) && actUnitsR1C2.equalsIgnoreCase(expUnitsR1C2) && actRDR1C3.equalsIgnoreCase(expRDR1C3)
				&& actAQR1C4.equalsIgnoreCase(expAQR1C4) && actFQR1C5.equalsIgnoreCase(expFQR1C5) /*&& actAvgRateR1C6.equalsIgnoreCase(expAvgRateR1C6)
				&& actAvgRateOR1C7.equalsIgnoreCase(expAvgRateOR1C7)*/ && actQtyR1C8.equalsIgnoreCase(expQtyR1C8) && actLSOR1C9.equalsIgnoreCase(expLSOR1C9)
				&& actQtyToReleaseR1C10.equalsIgnoreCase(expQtyToReleaseR1C10) && actRateR1C11.equalsIgnoreCase(expRateR1C11)
				&& actGrossR1C12.equalsIgnoreCase(expGrossR1C12)
				
				
				&& actItemR2C1.equalsIgnoreCase(expItemR2C1) && actUnitsR2C2.equalsIgnoreCase(expUnitsR2C2) && actRDR2C3.equalsIgnoreCase(expRDR2C3)
				&& actAQR2C4.equalsIgnoreCase(expAQR2C4) && actFQR2C5.equalsIgnoreCase(expFQR2C5) /*&& actAvgRateR2C6.equalsIgnoreCase(expAvgRateR2C6)
				&& actAvgRateOR2C7.equalsIgnoreCase(expAvgRateOR2C7)*/ && actQtyR2C8.equalsIgnoreCase(expQtyR2C8) && actLSOR2C9.equalsIgnoreCase(expLSOR2C9)
				&& actQtyToReleaseR2C10.equalsIgnoreCase(expQtyToReleaseR2C10) && actRateR2C11.equalsIgnoreCase(expRateR2C11)
				&& actGrossR2C12.equalsIgnoreCase(expGrossR2C12))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					
			return true;
		}
		else
		{
			System.out.println("Test Fail : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
			return false;
		}
	}

			

	
	public boolean checkSalesInvoiceVoucherBatchPopUpScreenForBatchExpired() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		
		enter_Rate.clear();
		
		enter_Rate.sendKeys("21");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
        
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		// Actual
		actBatchName				=batchItemName.getText();
		actTotalQty					=batchTotalQty.getText();
		actAdjustedQty				=batchAdjustQty.getText();
		actBalance					=batchBalance.getText();
		
		actTotalAdjustedQtyFooter	=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter			=batchTotalQtyFooter.getText();
		
		// Expected
		expBatchName				="BATCH WA ITEM";
		expTotalQty					="49.00";
		expAdjustedQty				="0.00";
		expBalance					="49.00";
		
		expTotalQtyFooter			="0";
		expTotalAdjustedQtyFooter	="0.00";
		
		System.out.println("********************************** checkSalesInvoiceVoucherBatchPopUpScreenForBatchExpired  *************************************");
		
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
		
		
		if(actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
       		 	&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
       
			batchCancelIcon.click();
			
			return true;
		}
		else
		{
			
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			batchCancelIcon.click();
			
			return false;
		}
	}
	
	


	
	public boolean checkSalesInvoiceVoucherBatchPopUpScreenByChangeTheVoucherDateForExpiredBatch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
				
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_HeaderExpandBtn));
		new_HeaderExpandBtn.click();*/
   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
    	dateTxt.click();
    
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt_CalenderBtn));
    	dateTxt_CalenderBtn.click();

    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(calender_TodayBtn));
    	calender_TodayBtn.click();
        
        dateTxt.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		
		enter_Rate.clear();
		
		enter_Rate.sendKeys("21");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
		
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actRow5BatchNo,actRow5BaseQty,actRow5Rate,actRow5AdjustedQty,actRow5TotalAdjustedQty;
		String expRow5BatchNo,expRow5BaseQty,expRow5Rate,expRow5AdjustedQty,expRow5TotalAdjustedQty;
		
		String actRow6BatchNo,actRow6BaseQty,actRow6Rate,actRow6AdjustedQty,actRow6TotalAdjustedQty;
		String expRow6BatchNo,expRow6BaseQty,expRow6Rate,expRow6AdjustedQty,expRow6TotalAdjustedQty;
		
		String actRow7BatchNo,actRow7BaseQty,actRow7Rate,actRow7AdjustedQty,actRow7TotalAdjustedQty;
		String expRow7BatchNo,expRow7BaseQty,expRow7Rate,expRow7AdjustedQty,expRow7TotalAdjustedQty;
		
		
		actBatchName				=batchItemName.getText();
		actTotalQty					=batchTotalQty.getText();
		actAdjustedQty				=batchAdjustQty.getText();
		actBalance					=batchBalance.getText();
		actTotalAdjustedQtyFooter	=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter			=batchTotalQtyFooter.getText();

		actRow1BatchNo				=batch_BatchNoRow1.getText();
		actRow1BaseQty				=batch_BaseQtyRow1.getText();
		actRow1Rate					=batch_RateRow1.getText();
		actRow1AdjustedQty			=batch_QtyAdjustedRow1.getText();

		
		actRow2BatchNo				=batch_BatchNoRow2.getText();
		actRow2BaseQty				=batch_BaseQtyRow2.getText();
		actRow2Rate					=batch_RateRow2.getText();
		actRow2AdjustedQty			=batch_QtyAdjustedRow2.getText();
		
		actRow3BatchNo				=batch_BatchNoRow3.getText();
		actRow3BaseQty				=batch_BaseQtyRow3.getText();
		actRow3Rate					=batch_RateRow3.getText();
		actRow3AdjustedQty			=batch_QtyAdjustedRow3.getText();
		
		
		actRow4BatchNo				=batch_BatchNoRow4.getText();
		actRow4BaseQty				=batch_BaseQtyRow4.getText();
		actRow4Rate					=batch_RateRow4.getText();
		actRow4AdjustedQty			=batch_QtyAdjustedRow4.getText();
		
	/*	
		actRow5BatchNo				=batch_BatchNoRow5.getText();
		actRow5BaseQty				=batch_BaseQtyRow5.getText();
		actRow5Rate					=batch_RateRow5.getText();
		actRow5AdjustedQty			=batch_QtyAdjustedRow5.getText();
		
		actRow6BatchNo				=batch_BatchNoRow6.getText();
		actRow6BaseQty				=batch_BaseQtyRow6.getText();
		actRow6Rate					=batch_RateRow6.getText();
		actRow6AdjustedQty			=batch_QtyAdjustedRow6.getText();
		
		actRow7BatchNo				=batch_BatchNoRow7.getText();
		actRow7BaseQty				=batch_BaseQtyRow7.getText();
		actRow7Rate					=batch_RateRow7.getText();
		actRow7AdjustedQty			=batch_QtyAdjustedRow7.getText();*/
		
		
		// Expected
		
		expBatchName				="BATCH WA ITEM";
		expTotalQty					="49.00";
		expAdjustedQty				="0.00";
		expBalance					="49.00";
					
		expTotalQtyFooter			="106.00";
		expTotalAdjustedQtyFooter	="0.00";
		

		expRow1BatchNo				="PVSWA";
		expRow1BaseQty				="34.00";
		expRow1Rate					="12.00";
		expRow1AdjustedQty			="0";
		
		expRow2BatchNo				="PVSWA";
		expRow2BaseQty				="36.00";
		expRow2Rate					="15.00";
		expRow2AdjustedQty			="0";
		
		expRow3BatchNo				="PVSWA";
		expRow3BaseQty				="12.00";
		expRow3Rate					="3.00";
		expRow3AdjustedQty			="0";
		
		expRow4BatchNo				="PVSWA";
		expRow4BaseQty				="24.00";
		expRow4Rate					="15.00";
		expRow4AdjustedQty			="0";
		
	
		/*
		
		expRow3BatchNo				="OSHWA1";
		expRow3BaseQty				="120.00";
		expRow3Rate					="10.00";
		expRow3AdjustedQty			="0";
		
		
		
		expRow4BatchNo				="PVHWA";
		expRow4BaseQty				="60.00";
		expRow4Rate					="20.00";
		expRow4AdjustedQty			="0";
		
		expRow5BatchNo				="PVSWA";
		expRow5BaseQty				="12.00";
		expRow5Rate					="3.00";
		expRow5AdjustedQty			="0";
		
		expRow6BatchNo				="PVSWA";
		expRow6BaseQty				="24.00";
		expRow6Rate					="15.00";
		expRow6AdjustedQty			="0";
		
		expRow7BatchNo				="PVTWA";
		expRow7BaseQty				="60.00";
		expRow7Rate					="40.00";
		expRow7AdjustedQty			="0";*/
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
	    
	    System.out.println("********************************** checkSalesInvoiceVoucherBatchPopUpScreenByChangeTheVoucherDateForExpiredBatch  *************************************");
	    
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+actRow3BaseQty);
		System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+expRow3Rate               + " Value Expected : "+actRow3Rate);
		System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		
	/*	System.out.println("Entry Page Batch Popup Row5 Batch No Qty Update Value Actual       : "+actRow5BatchNo            + " Value Expected : "+expRow5BatchNo);	
		System.out.println("Entry Page Batch Popup Row5 Base Qty Qty Update Value Actual       : "+actRow5BaseQty            + " Value Expected : "+actRow5BaseQty);
		System.out.println("Entry Page Batch Popup Row5 Rate Qty Update Value Actual           : "+expRow5Rate               + " Value Expected : "+actRow5Rate);
		System.out.println("Entry Page Batch Popup Row5 Adjusted Qty Qty Update Value Actual   : "+actRow5AdjustedQty        + " Value Expected : "+expRow5AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row5 Batch No Qty Update Value Actual       : "+actRow6BatchNo            + " Value Expected : "+expRow6BatchNo);	
		System.out.println("Entry Page Batch Popup Row5 Base Qty Qty Update Value Actual       : "+actRow6BaseQty            + " Value Expected : "+actRow6BaseQty);
		System.out.println("Entry Page Batch Popup Row5 Rate Qty Update Value Actual           : "+expRow6Rate               + " Value Expected : "+actRow6Rate);
		System.out.println("Entry Page Batch Popup Row5 Adjusted Qty Qty Update Value Actual   : "+actRow6AdjustedQty        + " Value Expected : "+expRow6AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row5 Batch No Qty Update Value Actual       : "+actRow7BatchNo            + " Value Expected : "+expRow7BatchNo);	
		System.out.println("Entry Page Batch Popup Row5 Base Qty Qty Update Value Actual       : "+actRow7BaseQty            + " Value Expected : "+actRow7BaseQty);
		System.out.println("Entry Page Batch Popup Row5 Rate Qty Update Value Actual           : "+expRow7Rate               + " Value Expected : "+actRow7Rate);
		System.out.println("Entry Page Batch Popup Row5 Adjusted Qty Qty Update Value Actual   : "+actRow7AdjustedQty        + " Value Expected : "+expRow7AdjustedQty);*/
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				/*&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty)
				
				&& actRow5BatchNo.equalsIgnoreCase(expRow5BatchNo) && actRow5BaseQty.equalsIgnoreCase(expRow5BaseQty) && actRow5Rate.equalsIgnoreCase(expRow5Rate) 
				&& actRow5AdjustedQty.equalsIgnoreCase(expRow5AdjustedQty)
				
				&& actRow6BatchNo.equalsIgnoreCase(expRow6BatchNo) && actRow6BaseQty.equalsIgnoreCase(expRow6BaseQty) && actRow6Rate.equalsIgnoreCase(expRow6Rate) 
				&& actRow6AdjustedQty.equalsIgnoreCase(expRow6AdjustedQty)
				
				&& actRow7BatchNo.equalsIgnoreCase(expRow7BatchNo) && actRow7BaseQty.equalsIgnoreCase(expRow7BaseQty) && actRow7Rate.equalsIgnoreCase(expRow7Rate) 
				&& actRow7AdjustedQty.equalsIgnoreCase(expRow7AdjustedQty)*/)
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
       
			batchCancelIcon.click();
			
			return true;
		}
		else
		{
			
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			batchCancelIcon.click();
					
			return false;
			
		}
	}
	



	
	public boolean checkSalesInvoiceVoucherByInputingCustomerALinkCRTLPlusPendingLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		    	
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer A"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
		workFlowExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow6ChkBoxCL));	
		workFlowRow6ChkBoxCL.click();
			
		boolean actsearchOnDropdownCL=searchOnDropdownCL.isDisplayed();
		boolean actcontainingDropdownCL=containingDropdownCL.isDisplayed();
		boolean actworkFlowSearchTxtCL=workFlowSearchTxtCL.isDisplayed();
		boolean actworkFlowCustomizeBtnCL=workFlowCustomizeBtnCL.isDisplayed();
		boolean actworkFlowOkBtnCL=workFlowOkBtnCL.isDisplayed();
		
		
		String actworkFlowRow1Column1CL=workFlowRow1Column1CL.getText();
		String actworkFlowRow1Column2CL=workFlowRow1Column2CL.getText();
		String actworkFlowRow1Column3CL=workFlowRow1Column3CL.getText();
		String actworkFlowRow1Column4CL=workFlowRow1Column4CL.getText();
		String actworkFlowRow1Column5CL=workFlowRow1Column5CL.getText();
		
		String actworkFlowRow2Column1CL=workFlowRow2Column1CL.getText();
		String actworkFlowRow2Column2CL=workFlowRow2Column2CL.getText();
		String actworkFlowRow2Column3CL=workFlowRow2Column3CL.getText();
		String actworkFlowRow2Column4CL=workFlowRow2Column4CL.getText();
		String actworkFlowRow2Column5CL=workFlowRow2Column5CL.getText();
		
		String actworkFlowRow3Column1CL=workFlowRow3Column1CL.getText();
		String actworkFlowRow3Column2CL=workFlowRow3Column2CL.getText();
		String actworkFlowRow3Column3CL=workFlowRow3Column3CL.getText();
		String actworkFlowRow3Column4CL=workFlowRow3Column4CL.getText();
		String actworkFlowRow3Column5CL=workFlowRow3Column5CL.getText();
		
		String actworkFlowRow4Column1CL=workFlowRow4Column1CL.getText();
		String actworkFlowRow4Column2CL=workFlowRow4Column2CL.getText();
		String actworkFlowRow4Column3CL=workFlowRow4Column3CL.getText();
		String actworkFlowRow4Column4CL=workFlowRow4Column4CL.getText();
		String actworkFlowRow4Column5CL=workFlowRow4Column5CL.getText();

		String actworkFlowRow5Column1CL=workFlowRow5Column1CL.getText();
		String actworkFlowRow5Column2CL=workFlowRow5Column2CL.getText();
		String actworkFlowRow5Column3CL=workFlowRow5Column3CL.getText();
		String actworkFlowRow5Column4CL=workFlowRow5Column4CL.getText();
		String actworkFlowRow5Column5CL=workFlowRow5Column5CL.getText();
		
		String actworkFlowRow6Column1CL=workFlowRow6Column1CL.getText();
		String actworkFlowRow6Column2CL=workFlowRow6Column2CL.getText();
		String actworkFlowRow6Column3CL=workFlowRow6Column3CL.getText();
		String actworkFlowRow6Column4CL=workFlowRow6Column4CL.getText();
		String actworkFlowRow6Column5CL=workFlowRow6Column5CL.getText();
		
		String actworkFlowRow7Column1CL=workFlowRow7Column1CL.getText();
		String actworkFlowRow7Column2CL=workFlowRow7Column2CL.getText();
		String actworkFlowRow7Column3CL=workFlowRow7Column3CL.getText();
		String actworkFlowRow7Column4CL=workFlowRow7Column4CL.getText();
		String actworkFlowRow7Column5CL=workFlowRow7Column5CL.getText();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow10Column1CL));	
		workFlowRow10Column1CL.click();
	    			
		
		String actworkFlowRow8Column1CL=workFlowRow8Column1CL.getText();
		String actworkFlowRow8Column2CL=workFlowRow8Column2CL.getText();
		String actworkFlowRow8Column3CL=workFlowRow8Column3CL.getText();
		String actworkFlowRow8Column4CL=workFlowRow8Column4CL.getText();
		String actworkFlowRow8Column5CL=workFlowRow8Column5CL.getText();
		
		String actworkFlowRow9Column1CL=workFlowRow9Column1CL.getText();
		String actworkFlowRow9Column2CL=workFlowRow9Column2CL.getText();
		String actworkFlowRow9Column3CL=workFlowRow9Column3CL.getText();
		String actworkFlowRow9Column4CL=workFlowRow9Column4CL.getText();
		String actworkFlowRow9Column5CL=workFlowRow9Column5CL.getText();
		
		String actworkFlowRow10Column1CL=workFlowRow10Column1CL.getText();
		String actworkFlowRow10Column2CL=workFlowRow10Column2CL.getText();
		String actworkFlowRow10Column3CL=workFlowRow10Column3CL.getText();
		String actworkFlowRow10Column4CL=workFlowRow10Column4CL.getText();
		String actworkFlowRow10Column5CL=workFlowRow10Column5CL.getText();
				
				
		String actworkFlowRow11Column1CL=workFlowRow11Column1CL.getText();
		String actworkFlowRow11Column2CL=workFlowRow11Column2CL.getText();
		String actworkFlowRow11Column3CL=workFlowRow11Column3CL.getText();
		String actworkFlowRow11Column4CL=workFlowRow11Column4CL.getText();
		String actworkFlowRow11Column5CL=workFlowRow11Column5CL.getText();
		
		String actworkFlowRow12Column1CL=workFlowRow12Column1CL.getText();
		String actworkFlowRow12Column2CL=workFlowRow12Column2CL.getText();
		String actworkFlowRow12Column3CL=workFlowRow12Column3CL.getText();
		String actworkFlowRow12Column4CL=workFlowRow12Column4CL.getText();
		String actworkFlowRow12Column5CL=workFlowRow12Column5CL.getText();
		
		String actworkFlowRow13Column1CL=workFlowRow13Column1CL.getText();
		String actworkFlowRow13Column2CL=workFlowRow13Column2CL.getText();
		String actworkFlowRow13Column3CL=workFlowRow13Column3CL.getText();
		String actworkFlowRow13Column4CL=workFlowRow13Column4CL.getText();
		String actworkFlowRow13Column5CL=workFlowRow13Column5CL.getText();
		
		
		// Expected
		
		int expLinkRowCountCLValue=16;
		
		boolean expsearchOnDropdownCL=true;
		boolean expcontainingDropdownCL=true;
		boolean expworkFlowSearchTxtCL=true;
		boolean expworkFlowCustomizeBtnCL=true;
		boolean expworkFlowOkBtnCL=true;
		
		String expworkFlowRow1Column1CL="SalOrd:1";
		String expworkFlowRow1Column3CL="BIN FINISHED GOODS ITEM";
		String expworkFlowRow1Column4CL="2.00";
		String expworkFlowRow1Column5CL="0.00";
		
		String expworkFlowRow2Column1CL="SalOrd:1";
		String expworkFlowRow2Column3CL="BIN FINISHED GOODS ITEM";
		String expworkFlowRow2Column4CL="2.00";
		String expworkFlowRow2Column5CL="0.00";

		String expworkFlowRow3Column1CL="SalOrd:1";
		String expworkFlowRow3Column3CL="BIN FINISHED GOODS ITEM";
		String expworkFlowRow3Column4CL="1.00";
		String expworkFlowRow3Column5CL="0.00";
		
		String expworkFlowRow4Column1CL="SalOrd:2";
		String expworkFlowRow4Column3CL="BIN FINISHED GOODS ITEM";
		String expworkFlowRow4Column4CL="5.00";
		String expworkFlowRow4Column5CL="0.00";
		
		String expworkFlowRow5Column1CL="SalOrd:3";
		String expworkFlowRow5Column3CL="BATCH BR ITEM";
		String expworkFlowRow5Column4CL="19.00";
		String expworkFlowRow5Column5CL="0.00";
		
		String expworkFlowRow6Column1CL="SalOrd:3";
		String expworkFlowRow6Column3CL="BATCH BR ITEM";
		String expworkFlowRow6Column4CL="20.00";
		String expworkFlowRow6Column5CL="0.00";
		
		String expworkFlowRow7Column1CL="SalOrd:6";
		String expworkFlowRow7Column3CL="RMA RITEM";
		String expworkFlowRow7Column4CL="2.00";
		String expworkFlowRow7Column5CL="0.00";
		
		String expworkFlowRow8Column1CL="SalOrd:6";
		String expworkFlowRow8Column3CL="RMA RITEM";
		String expworkFlowRow8Column4CL="2.00";
		String expworkFlowRow8Column5CL="0.00";
		
		String expworkFlowRow9Column1CL="SalOrd:6";
		String expworkFlowRow9Column3CL="RMA RITEM";
		String expworkFlowRow9Column4CL="2.00";
		String expworkFlowRow9Column5CL="0.00";
	
		String expworkFlowRow10Column1CL="SalOrd:7";
		String expworkFlowRow10Column3CL="RMA RITEM";
		String expworkFlowRow10Column4CL="1.00";
		String expworkFlowRow10Column5CL="0.00";
		
		String expworkFlowRow11Column1CL="SalOrd:8";
		String expworkFlowRow11Column3CL="STOCK ITEM";
		String expworkFlowRow11Column4CL="23.00";
		String expworkFlowRow11Column5CL="0.00";
		
		String expworkFlowRow12Column1CL="SalOrd:8";
		String expworkFlowRow12Column3CL="STOCK ITEM";
		String expworkFlowRow12Column4CL="7.00";
		String expworkFlowRow12Column5CL="0.00";
		
		String expworkFlowRow13Column1CL="SalOrd:9";
		String expworkFlowRow13Column3CL="STOCK ITEM";
		String expworkFlowRow13Column4CL="2.00";
		String expworkFlowRow13Column5CL="0.00";
		
		System.out.println("**************************************** checkSalesInvoiceVoucherByInputingCustomerALinkCRTLPlusPendingLinks  ***************************************");
		
		System.out.println("searchOnDropdownCL  		: "+actsearchOnDropdownCL		+" 	Value Expected : "+expsearchOnDropdownCL);
		System.out.println("containingDropdownCL  		: "+actcontainingDropdownCL		+" 	Value Expected : "+expcontainingDropdownCL);
		System.out.println("workFlowSearchTxtCL  		: "+actworkFlowSearchTxtCL		+" 	Value Expected : "+expworkFlowSearchTxtCL);
		System.out.println("workFlowCustomizeBtnCL  	: "+actworkFlowCustomizeBtnCL	+" 	Value Expected : "+expworkFlowCustomizeBtnCL);
		System.out.println("workFlowOkBtnCL  			: "+actworkFlowOkBtnCL			+" 	Value Expected : "+expworkFlowOkBtnCL);
		
		System.out.println("workFlowRow1Column1CL  		: "+actworkFlowRow1Column1CL	+" 	Value Expected : "+expworkFlowRow1Column1CL);
		System.out.println("workFlowRow1Column3CL  		: "+actworkFlowRow1Column3CL	+" 	Value Expected : "+expworkFlowRow1Column3CL);
		System.out.println("workFlowRow1Column4CL  		: "+actworkFlowRow1Column4CL	+" 	Value Expected : "+expworkFlowRow1Column4CL);
		System.out.println("workFlowRow1Column5CL  		: "+actworkFlowRow1Column5CL	+" 	Value Expected : "+expworkFlowRow1Column5CL);
		
		System.out.println("workFlowRow2Column1CL  		: "+actworkFlowRow2Column1CL	+" 	Value Expected : "+expworkFlowRow2Column1CL);
		System.out.println("workFlowRow2Column3CL  		: "+actworkFlowRow2Column3CL	+" 	Value Expected : "+expworkFlowRow2Column3CL);
		System.out.println("workFlowRow2Column4CL  		: "+actworkFlowRow2Column4CL	+" 	Value Expected : "+expworkFlowRow2Column4CL);
		System.out.println("workFlowRow2Column5CL  		: "+actworkFlowRow2Column5CL	+" 	Value Expected : "+expworkFlowRow2Column5CL);
		
		System.out.println("workFlowRow3Column1CL  		: "+actworkFlowRow3Column1CL	+" 	Value Expected : "+expworkFlowRow3Column1CL);
		System.out.println("workFlowRow3Column3CL  		: "+actworkFlowRow3Column3CL	+" 	Value Expected : "+expworkFlowRow3Column3CL);
		System.out.println("workFlowRow3Column4CL  		: "+actworkFlowRow3Column4CL	+" 	Value Expected : "+expworkFlowRow3Column4CL);
		System.out.println("workFlowRow3Column5CL  		: "+actworkFlowRow3Column5CL	+" 	Value Expected : "+expworkFlowRow3Column5CL);
		
		System.out.println("workFlowRow4Column1CL  		: "+actworkFlowRow4Column1CL	+" 	Value Expected : "+expworkFlowRow4Column1CL);
		System.out.println("workFlowRow4Column3CL  		: "+actworkFlowRow4Column3CL	+" 	Value Expected : "+expworkFlowRow4Column3CL);
		System.out.println("workFlowRow4Column4CL  		: "+actworkFlowRow4Column4CL	+" 	Value Expected : "+expworkFlowRow4Column4CL);
		System.out.println("workFlowRow4Column5CL  		: "+actworkFlowRow4Column5CL	+" 	Value Expected : "+expworkFlowRow4Column5CL);
		
		System.out.println("workFlowRow5Column1CL  		: "+actworkFlowRow5Column1CL	+" 	Value Expected : "+expworkFlowRow5Column1CL);
		System.out.println("workFlowRow5Column3CL  		: "+actworkFlowRow5Column3CL	+" 	Value Expected : "+expworkFlowRow5Column3CL);
		System.out.println("workFlowRow5Column4CL  		: "+actworkFlowRow5Column4CL	+" 	Value Expected : "+expworkFlowRow5Column4CL);
		System.out.println("workFlowRow5Column5CL  		: "+actworkFlowRow5Column5CL	+" 	Value Expected : "+expworkFlowRow5Column5CL);
		
		System.out.println("workFlowRow6Column1CL  		: "+actworkFlowRow6Column1CL	+" 	Value Expected : "+expworkFlowRow6Column1CL);
		System.out.println("workFlowRow6Column3CL  		: "+actworkFlowRow6Column3CL	+" 	Value Expected : "+expworkFlowRow6Column3CL);
		System.out.println("workFlowRow6Column4CL  		: "+actworkFlowRow6Column4CL	+" 	Value Expected : "+expworkFlowRow6Column4CL);
		System.out.println("workFlowRow6Column5CL  		: "+actworkFlowRow6Column5CL	+" 	Value Expected : "+expworkFlowRow6Column5CL);

		System.out.println("workFlowRow7Column1CL  		: "+actworkFlowRow7Column1CL	+" 	Value Expected : "+expworkFlowRow7Column1CL);
		System.out.println("workFlowRow7Column3CL  		: "+actworkFlowRow7Column3CL	+" 	Value Expected : "+expworkFlowRow7Column3CL);
		System.out.println("workFlowRow7Column4CL  		: "+actworkFlowRow7Column4CL	+" 	Value Expected : "+expworkFlowRow7Column4CL);
		System.out.println("workFlowRow7Column5CL  		: "+actworkFlowRow7Column5CL	+" 	Value Expected : "+expworkFlowRow7Column5CL);
		
		System.out.println("workFlowRow8Column1CL  		: "+actworkFlowRow8Column1CL	+" 	Value Expected : "+expworkFlowRow8Column1CL);
		System.out.println("workFlowRow8Column3CL  		: "+actworkFlowRow8Column3CL	+" 	Value Expected : "+expworkFlowRow8Column3CL);
		System.out.println("workFlowRow8Column4CL  		: "+actworkFlowRow8Column4CL	+" 	Value Expected : "+expworkFlowRow8Column4CL);
		System.out.println("workFlowRow8Column5CL  		: "+actworkFlowRow8Column5CL	+" 	Value Expected : "+expworkFlowRow8Column5CL);
		
		System.out.println("workFlowRow9Column1CL  		: "+actworkFlowRow9Column1CL	+" 	Value Expected : "+expworkFlowRow9Column1CL);
		System.out.println("workFlowRow9Column3CL  		: "+actworkFlowRow9Column3CL	+" 	Value Expected : "+expworkFlowRow9Column3CL);
		System.out.println("workFlowRow9Column4CL  		: "+actworkFlowRow9Column4CL	+" 	Value Expected : "+expworkFlowRow9Column4CL);
		System.out.println("workFlowRow9Column5CL  		: "+actworkFlowRow9Column5CL	+" 	Value Expected : "+expworkFlowRow9Column5CL);
		
		System.out.println("workFlowRow10Column1CL  	: "+actworkFlowRow10Column1CL	+" 	Value Expected : "+expworkFlowRow10Column1CL);
		System.out.println("workFlowRow10Column3CL  	: "+actworkFlowRow10Column3CL	+" 	Value Expected : "+expworkFlowRow10Column3CL);
		System.out.println("workFlowRow10Column4CL  	: "+actworkFlowRow10Column4CL	+" 	Value Expected : "+expworkFlowRow10Column4CL);
		System.out.println("workFlowRow10Column5CL  	: "+actworkFlowRow10Column5CL	+" 	Value Expected : "+expworkFlowRow10Column5CL);
		
		System.out.println("workFlowRow11Column1CL  	: "+actworkFlowRow11Column1CL	+" 	Value Expected : "+expworkFlowRow11Column1CL);
		System.out.println("workFlowRow11Column3CL  	: "+actworkFlowRow11Column3CL	+" 	Value Expected : "+expworkFlowRow11Column3CL);
		System.out.println("workFlowRow11Column4CL  	: "+actworkFlowRow11Column4CL	+" 	Value Expected : "+expworkFlowRow11Column4CL);
		System.out.println("workFlowRow11Column5CL  	: "+actworkFlowRow11Column5CL	+" 	Value Expected : "+expworkFlowRow11Column5CL);
		
		System.out.println("workFlowRow12Column1CL  	: "+actworkFlowRow12Column1CL	+" 	Value Expected : "+expworkFlowRow12Column1CL);
		System.out.println("workFlowRow12Column3CL  	: "+actworkFlowRow12Column3CL	+" 	Value Expected : "+expworkFlowRow12Column3CL);
		System.out.println("workFlowRow12Column4CL  	: "+actworkFlowRow12Column4CL	+" 	Value Expected : "+expworkFlowRow12Column4CL);
		System.out.println("workFlowRow12Column5CL  	: "+actworkFlowRow12Column5CL	+" 	Value Expected : "+expworkFlowRow12Column5CL);
		
		System.out.println("workFlowRow13Column1CL  	: "+actworkFlowRow13Column1CL	+" 	Value Expected : "+expworkFlowRow13Column1CL);
		System.out.println("workFlowRow13Column3CL  	: "+actworkFlowRow13Column3CL	+" 	Value Expected : "+expworkFlowRow13Column3CL);
		System.out.println("workFlowRow13Column4CL  	: "+actworkFlowRow13Column4CL	+" 	Value Expected : "+expworkFlowRow13Column4CL);
		System.out.println("workFlowRow13Column5CL  	: "+actworkFlowRow13Column5CL	+" 	Value Expected : "+expworkFlowRow13Column5CL);
		
				
		if(actsearchOnDropdownCL==expsearchOnDropdownCL && actcontainingDropdownCL==expcontainingDropdownCL && actworkFlowSearchTxtCL==expworkFlowSearchTxtCL
				&& actworkFlowCustomizeBtnCL==expworkFlowCustomizeBtnCL && actworkFlowOkBtnCL==expworkFlowOkBtnCL
				
				&& actworkFlowRow1Column1CL.equalsIgnoreCase(expworkFlowRow1Column1CL)
				&& actworkFlowRow1Column3CL.equalsIgnoreCase(expworkFlowRow1Column3CL)
				&& actworkFlowRow1Column4CL.equalsIgnoreCase(expworkFlowRow1Column4CL)
				&& actworkFlowRow1Column5CL.equalsIgnoreCase(expworkFlowRow1Column5CL)
				
				&& actworkFlowRow2Column1CL.equalsIgnoreCase(expworkFlowRow2Column1CL)
				&& actworkFlowRow2Column3CL.equalsIgnoreCase(expworkFlowRow2Column3CL)
				&& actworkFlowRow2Column4CL.equalsIgnoreCase(expworkFlowRow2Column4CL)
				&& actworkFlowRow2Column5CL.equalsIgnoreCase(expworkFlowRow2Column5CL)
				
				&& actworkFlowRow3Column1CL.equalsIgnoreCase(expworkFlowRow3Column1CL)
				&& actworkFlowRow3Column3CL.equalsIgnoreCase(expworkFlowRow3Column3CL)
				&& actworkFlowRow3Column4CL.equalsIgnoreCase(expworkFlowRow3Column4CL)
				&& actworkFlowRow3Column5CL.equalsIgnoreCase(expworkFlowRow3Column5CL)
				
				&& actworkFlowRow4Column1CL.equalsIgnoreCase(expworkFlowRow4Column1CL)
				&& actworkFlowRow4Column3CL.equalsIgnoreCase(expworkFlowRow4Column3CL)
				&& actworkFlowRow4Column4CL.equalsIgnoreCase(expworkFlowRow4Column4CL)
				&& actworkFlowRow4Column5CL.equalsIgnoreCase(expworkFlowRow4Column5CL)
				
				&& actworkFlowRow5Column1CL.equalsIgnoreCase(expworkFlowRow5Column1CL)
				&& actworkFlowRow5Column3CL.equalsIgnoreCase(expworkFlowRow5Column3CL)
				&& actworkFlowRow5Column4CL.equalsIgnoreCase(expworkFlowRow5Column4CL)
				&& actworkFlowRow5Column5CL.equalsIgnoreCase(expworkFlowRow5Column5CL)
				
				&& actworkFlowRow6Column1CL.equalsIgnoreCase(expworkFlowRow6Column1CL)
				&& actworkFlowRow6Column3CL.equalsIgnoreCase(expworkFlowRow6Column3CL)
				&& actworkFlowRow6Column4CL.equalsIgnoreCase(expworkFlowRow6Column4CL)
				&& actworkFlowRow6Column5CL.equalsIgnoreCase(expworkFlowRow6Column5CL)
				
				&& actworkFlowRow7Column1CL.equalsIgnoreCase(expworkFlowRow7Column1CL)
				&& actworkFlowRow7Column3CL.equalsIgnoreCase(expworkFlowRow7Column3CL)
				&& actworkFlowRow7Column4CL.equalsIgnoreCase(expworkFlowRow7Column4CL)
				&& actworkFlowRow7Column5CL.equalsIgnoreCase(expworkFlowRow7Column5CL)
				
				&& actworkFlowRow8Column1CL.equalsIgnoreCase(expworkFlowRow8Column1CL)
				&& actworkFlowRow8Column3CL.equalsIgnoreCase(expworkFlowRow8Column3CL)
				&& actworkFlowRow8Column4CL.equalsIgnoreCase(expworkFlowRow8Column4CL)
				&& actworkFlowRow8Column5CL.equalsIgnoreCase(expworkFlowRow8Column5CL)
				
				&& actworkFlowRow9Column1CL.equalsIgnoreCase(expworkFlowRow9Column1CL)
				&& actworkFlowRow9Column3CL.equalsIgnoreCase(expworkFlowRow9Column3CL)
				&& actworkFlowRow9Column4CL.equalsIgnoreCase(expworkFlowRow9Column4CL)
				&& actworkFlowRow9Column5CL.equalsIgnoreCase(expworkFlowRow9Column5CL)
				
				&& actworkFlowRow10Column1CL.equalsIgnoreCase(expworkFlowRow10Column1CL)
				&& actworkFlowRow10Column3CL.equalsIgnoreCase(expworkFlowRow10Column3CL)
				&& actworkFlowRow10Column4CL.equalsIgnoreCase(expworkFlowRow10Column4CL)
				&& actworkFlowRow10Column5CL.equalsIgnoreCase(expworkFlowRow10Column5CL)
				
				&& actworkFlowRow11Column1CL.equalsIgnoreCase(expworkFlowRow11Column1CL)
				&& actworkFlowRow11Column3CL.equalsIgnoreCase(expworkFlowRow11Column3CL)
				&& actworkFlowRow11Column4CL.equalsIgnoreCase(expworkFlowRow11Column4CL)
				&& actworkFlowRow11Column5CL.equalsIgnoreCase(expworkFlowRow11Column5CL)
				
				&& actworkFlowRow12Column1CL.equalsIgnoreCase(expworkFlowRow12Column1CL)
				&& actworkFlowRow12Column3CL.equalsIgnoreCase(expworkFlowRow12Column3CL)
				&& actworkFlowRow12Column4CL.equalsIgnoreCase(expworkFlowRow12Column4CL)
				&& actworkFlowRow12Column5CL.equalsIgnoreCase(expworkFlowRow12Column5CL)
				
				&& actworkFlowRow13Column1CL.equalsIgnoreCase(expworkFlowRow13Column1CL)
				&& actworkFlowRow13Column3CL.equalsIgnoreCase(expworkFlowRow13Column3CL)
				&& actworkFlowRow13Column4CL.equalsIgnoreCase(expworkFlowRow13Column4CL)
				&& actworkFlowRow13Column5CL.equalsIgnoreCase(expworkFlowRow13Column5CL))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
				
			return false;
		}
	}
	

	
	
	public boolean checkSalesInvoiceVoucherByInputingCustomerBLinkCRTLPlusPendingLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
				
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer B"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
		workFlowExpandBtn.click();
		
		
		boolean actsearchOnDropdownCL=searchOnDropdownCL.isDisplayed();
		boolean actcontainingDropdownCL=containingDropdownCL.isDisplayed();
		boolean actworkFlowSearchTxtCL=workFlowSearchTxtCL.isDisplayed();
		boolean actworkFlowCustomizeBtnCL=workFlowCustomizeBtnCL.isDisplayed();
		boolean actworkFlowOkBtnCL=workFlowOkBtnCL.isDisplayed();
		
		
		String actworkFlowRow1Column1CL=workFlowRow1Column1CL.getText();
		String actworkFlowRow1Column2CL=workFlowRow1Column2CL.getText();
		String actworkFlowRow1Column3CL=workFlowRow1Column3CL.getText();
		String actworkFlowRow1Column4CL=workFlowRow1Column4CL.getText();
		String actworkFlowRow1Column5CL=workFlowRow1Column5CL.getText();
		
		String actworkFlowRow2Column1CL=workFlowRow2Column1CL.getText();
		String actworkFlowRow2Column2CL=workFlowRow2Column2CL.getText();
		String actworkFlowRow2Column3CL=workFlowRow2Column3CL.getText();
		String actworkFlowRow2Column4CL=workFlowRow2Column4CL.getText();
		String actworkFlowRow2Column5CL=workFlowRow2Column5CL.getText();
		
		String actworkFlowRow3Column1CL=workFlowRow3Column1CL.getText();
		String actworkFlowRow3Column2CL=workFlowRow3Column2CL.getText();
		String actworkFlowRow3Column3CL=workFlowRow3Column3CL.getText();
		String actworkFlowRow3Column4CL=workFlowRow3Column4CL.getText();
		String actworkFlowRow3Column5CL=workFlowRow3Column5CL.getText();
		
		
		// Expected
		
		int expLinkRowCountCLValue=16;
		
		boolean expsearchOnDropdownCL=true;
		boolean expcontainingDropdownCL=true;
		boolean expworkFlowSearchTxtCL=true;
		boolean expworkFlowCustomizeBtnCL=true;
		boolean expworkFlowOkBtnCL=true;
		
		String expworkFlowRow1Column1CL="SalOrd:4";
		String expworkFlowRow1Column3CL="BATCH BR ITEM";
		String expworkFlowRow1Column4CL="81.00";
		String expworkFlowRow1Column5CL="0.00";
		
		String expworkFlowRow2Column1CL="SalOrd:5";
		String expworkFlowRow2Column3CL="BATCH WA ITEM";
		String expworkFlowRow2Column4CL="49.00";
		String expworkFlowRow2Column5CL="0.00";

		String expworkFlowRow3Column1CL="SalOrd:5";
		String expworkFlowRow3Column3CL="BATCH WA ITEM";
		String expworkFlowRow3Column4CL="14.00";
		String expworkFlowRow3Column5CL="0.00";
		
		
		System.out.println("**************************************** checkSalesInvoiceVoucherByInputingCustomerBLinkCRTLPlusPendingLinks  ***************************************");
		
		System.out.println("searchOnDropdownCL  		: "+actsearchOnDropdownCL		+" 	Value Expected : "+expsearchOnDropdownCL);
		System.out.println("containingDropdownCL  		: "+actcontainingDropdownCL		+" 	Value Expected : "+expcontainingDropdownCL);
		System.out.println("workFlowSearchTxtCL  		: "+actworkFlowSearchTxtCL		+" 	Value Expected : "+expworkFlowSearchTxtCL);
		System.out.println("workFlowCustomizeBtnCL  	: "+actworkFlowCustomizeBtnCL	+" 	Value Expected : "+expworkFlowCustomizeBtnCL);
		System.out.println("workFlowOkBtnCL  			: "+actworkFlowOkBtnCL			+" 	Value Expected : "+expworkFlowOkBtnCL);
		
		System.out.println("workFlowRow1Column1CL  		: "+actworkFlowRow1Column1CL	+" 	Value Expected : "+expworkFlowRow1Column1CL);
		System.out.println("workFlowRow1Column3CL  		: "+actworkFlowRow1Column3CL	+" 	Value Expected : "+expworkFlowRow1Column3CL);
		System.out.println("workFlowRow1Column4CL  		: "+actworkFlowRow1Column4CL	+" 	Value Expected : "+expworkFlowRow1Column4CL);
		System.out.println("workFlowRow1Column5CL  		: "+actworkFlowRow1Column5CL	+" 	Value Expected : "+expworkFlowRow1Column5CL);
		
		System.out.println("workFlowRow2Column1CL  		: "+actworkFlowRow2Column1CL	+" 	Value Expected : "+expworkFlowRow2Column1CL);
		System.out.println("workFlowRow2Column3CL  		: "+actworkFlowRow2Column3CL	+" 	Value Expected : "+expworkFlowRow2Column3CL);
		System.out.println("workFlowRow2Column4CL  		: "+actworkFlowRow2Column4CL	+" 	Value Expected : "+expworkFlowRow2Column4CL);
		System.out.println("workFlowRow2Column5CL  		: "+actworkFlowRow2Column5CL	+" 	Value Expected : "+expworkFlowRow2Column5CL);
		
		System.out.println("workFlowRow3Column1CL  		: "+actworkFlowRow3Column1CL	+" 	Value Expected : "+expworkFlowRow3Column1CL);
		System.out.println("workFlowRow3Column3CL  		: "+actworkFlowRow3Column3CL	+" 	Value Expected : "+expworkFlowRow3Column3CL);
		System.out.println("workFlowRow3Column4CL  		: "+actworkFlowRow3Column4CL	+" 	Value Expected : "+expworkFlowRow3Column4CL);
		System.out.println("workFlowRow3Column5CL  		: "+actworkFlowRow3Column5CL	+" 	Value Expected : "+expworkFlowRow3Column5CL);
		
				
				
		if(actsearchOnDropdownCL==expsearchOnDropdownCL && actcontainingDropdownCL==expcontainingDropdownCL && actworkFlowSearchTxtCL==expworkFlowSearchTxtCL
				&& actworkFlowCustomizeBtnCL==expworkFlowCustomizeBtnCL && actworkFlowOkBtnCL==expworkFlowOkBtnCL
				
				&& actworkFlowRow1Column1CL.equalsIgnoreCase(expworkFlowRow1Column1CL)
				&& actworkFlowRow1Column3CL.equalsIgnoreCase(expworkFlowRow1Column3CL)
				&& actworkFlowRow1Column4CL.equalsIgnoreCase(expworkFlowRow1Column4CL)
				&& actworkFlowRow1Column5CL.equalsIgnoreCase(expworkFlowRow1Column5CL)
				
				&& actworkFlowRow2Column1CL.equalsIgnoreCase(expworkFlowRow2Column1CL)
				&& actworkFlowRow2Column3CL.equalsIgnoreCase(expworkFlowRow2Column3CL)
				&& actworkFlowRow2Column4CL.equalsIgnoreCase(expworkFlowRow2Column4CL)
				&& actworkFlowRow2Column5CL.equalsIgnoreCase(expworkFlowRow2Column5CL)
				
				&& actworkFlowRow3Column1CL.equalsIgnoreCase(expworkFlowRow3Column1CL)
				&& actworkFlowRow3Column3CL.equalsIgnoreCase(expworkFlowRow3Column3CL)
				&& actworkFlowRow3Column4CL.equalsIgnoreCase(expworkFlowRow3Column4CL)
				&& actworkFlowRow3Column5CL.equalsIgnoreCase(expworkFlowRow3Column5CL))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
				
			return false;
		}
	}


	
	
	
	public boolean checkSalesInvoiceVoucherByInputingCustomerCLinkCRTLPlusPendingLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
				
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer C"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
		workFlowExpandBtn.click();
	
	  
		Thread.sleep(2000);
		
		boolean actpurchaseVoucherWorlFlowText=purchaseVoucherWorlFlowText.isDisplayed();
		
		boolean exppurchaseVoucherWorlFlowText=true;
		
		System.out.println("**************************************** checkSalesInvoiceVoucherByInputingCustomerCLinkCRTLPlusPendingLinks  ***************************************");
		
		System.out.println("purchaseVoucherWorlFlowText  		: "+actpurchaseVoucherWorlFlowText		+" 	Value Expected : "+exppurchaseVoucherWorlFlowText);
		
		if(actpurchaseVoucherWorlFlowText==exppurchaseVoucherWorlFlowText)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 257, 9, resPass);
					
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 257, 9, resFail);
			
			return false;
		}
	}



	
	
	
	public boolean checkSalesInvoiceVoucherByInputingCustomerCAndWarhouseSecunderabadLinkCRTLPlusPendingLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
				
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		wareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);

	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
		workFlowExpandBtn.click();
	
		Thread.sleep(2000);
		
		boolean actpurchaseVoucherWorlFlowText=purchaseVoucherWorlFlowText.isDisplayed();
		
		boolean exppurchaseVoucherWorlFlowText=true;
		
		System.out.println("**************************************** checkSalesInvoiceVoucherByInputingCustomerCLinkCRTLPlusPendingLinks  ***************************************");
		
		System.out.println("purchaseVoucherWorlFlowText  		: "+actpurchaseVoucherWorlFlowText		+" 	Value Expected : "+exppurchaseVoucherWorlFlowText);
		
		if(actpurchaseVoucherWorlFlowText==exppurchaseVoucherWorlFlowText)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 257, 9, resPass);
					
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 257, 9, resFail);
			
			return false;
		}
	}
	


	
	public boolean checkSalesInvoiceVoucherByInputingCustomerAAndWarhouseSecunderabadLinkCRTLPlusPendingLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
				
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer A"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
		workFlowExpandBtn.click();
	
		Thread.sleep(2000);
		
		// Actual
       	
		List<WebElement> rowCountInLinkScreen=LinkRowCountCL;
	    		
		int actLinkRowCountCLValue=rowCountInLinkScreen.size();
	            
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRow6ChkBoxCL));	
		workFlowRow6ChkBoxCL.click();
		
		boolean actsearchOnDropdownCL=searchOnDropdownCL.isDisplayed();
		boolean actcontainingDropdownCL=containingDropdownCL.isDisplayed();
		boolean actworkFlowSearchTxtCL=workFlowSearchTxtCL.isDisplayed();
		boolean actworkFlowCustomizeBtnCL=workFlowCustomizeBtnCL.isDisplayed();
		boolean actworkFlowOkBtnCL=workFlowOkBtnCL.isDisplayed();
		
		
		String actworkFlowRow1Column1CL=workFlowRow1Column1CL.getText();
		String actworkFlowRow1Column2CL=workFlowRow1Column2CL.getText();
		String actworkFlowRow1Column3CL=workFlowRow1Column3CL.getText();
		String actworkFlowRow1Column4CL=workFlowRow1Column4CL.getText();
		String actworkFlowRow1Column5CL=workFlowRow1Column5CL.getText();
		
		String actworkFlowRow2Column1CL=workFlowRow2Column1CL.getText();
		String actworkFlowRow2Column2CL=workFlowRow2Column2CL.getText();
		String actworkFlowRow2Column3CL=workFlowRow2Column3CL.getText();
		String actworkFlowRow2Column4CL=workFlowRow2Column4CL.getText();
		String actworkFlowRow2Column5CL=workFlowRow2Column5CL.getText();
		
		String actworkFlowRow3Column1CL=workFlowRow3Column1CL.getText();
		String actworkFlowRow3Column2CL=workFlowRow3Column2CL.getText();
		String actworkFlowRow3Column3CL=workFlowRow3Column3CL.getText();
		String actworkFlowRow3Column4CL=workFlowRow3Column4CL.getText();
		String actworkFlowRow3Column5CL=workFlowRow3Column5CL.getText();
		
		String actworkFlowRow4Column1CL=workFlowRow4Column1CL.getText();
		String actworkFlowRow4Column2CL=workFlowRow4Column2CL.getText();
		String actworkFlowRow4Column3CL=workFlowRow4Column3CL.getText();
		String actworkFlowRow4Column4CL=workFlowRow4Column4CL.getText();
		String actworkFlowRow4Column5CL=workFlowRow4Column5CL.getText();

		String actworkFlowRow5Column1CL=workFlowRow5Column1CL.getText();
		String actworkFlowRow5Column2CL=workFlowRow5Column2CL.getText();
		String actworkFlowRow5Column3CL=workFlowRow5Column3CL.getText();
		String actworkFlowRow5Column4CL=workFlowRow5Column4CL.getText();
		String actworkFlowRow5Column5CL=workFlowRow5Column5CL.getText();
		
		String actworkFlowRow6Column1CL=workFlowRow6Column1CL.getText();
		String actworkFlowRow6Column2CL=workFlowRow6Column2CL.getText();
		String actworkFlowRow6Column3CL=workFlowRow6Column3CL.getText();
		String actworkFlowRow6Column4CL=workFlowRow6Column4CL.getText();
		String actworkFlowRow6Column5CL=workFlowRow6Column5CL.getText();
		
		String actworkFlowRow7Column1CL=workFlowRow7Column1CL.getText();
		String actworkFlowRow7Column2CL=workFlowRow7Column2CL.getText();
		String actworkFlowRow7Column3CL=workFlowRow7Column3CL.getText();
		String actworkFlowRow7Column4CL=workFlowRow7Column4CL.getText();
		String actworkFlowRow7Column5CL=workFlowRow7Column5CL.getText();
	    	
		String actworkFlowRow8Column1CL=workFlowRow8Column1CL.getText();
		String actworkFlowRow8Column2CL=workFlowRow8Column2CL.getText();
		String actworkFlowRow8Column3CL=workFlowRow8Column3CL.getText();
		String actworkFlowRow8Column4CL=workFlowRow8Column4CL.getText();
		String actworkFlowRow8Column5CL=workFlowRow8Column5CL.getText();
		
		String actworkFlowRow9Column1CL=workFlowRow9Column1CL.getText();
		String actworkFlowRow9Column2CL=workFlowRow9Column2CL.getText();
		String actworkFlowRow9Column3CL=workFlowRow9Column3CL.getText();
		String actworkFlowRow9Column4CL=workFlowRow9Column4CL.getText();
		String actworkFlowRow9Column5CL=workFlowRow9Column5CL.getText();
		
		String actworkFlowRow10Column1CL=workFlowRow10Column1CL.getText();
		String actworkFlowRow10Column2CL=workFlowRow10Column2CL.getText();
		String actworkFlowRow10Column3CL=workFlowRow10Column3CL.getText();
		String actworkFlowRow10Column4CL=workFlowRow10Column4CL.getText();
		String actworkFlowRow10Column5CL=workFlowRow10Column5CL.getText();
		
		// Expected
		
		int expLinkRowCountCLValue=10;
		
		boolean expsearchOnDropdownCL=true;
		boolean expcontainingDropdownCL=true;
		boolean expworkFlowSearchTxtCL=true;
		boolean expworkFlowCustomizeBtnCL=true;
		boolean expworkFlowOkBtnCL=true;
		
		String expworkFlowRow1Column1CL="SalOrd:1";
		String expworkFlowRow1Column3CL="BIN FINISHED GOODS ITEM";
		String expworkFlowRow1Column4CL="2.00";
		String expworkFlowRow1Column5CL="0.00";
		
		String expworkFlowRow2Column1CL="SalOrd:1";
		String expworkFlowRow2Column3CL="BIN FINISHED GOODS ITEM";
		String expworkFlowRow2Column4CL="2.00";
		String expworkFlowRow2Column5CL="0.00";

		String expworkFlowRow3Column1CL="SalOrd:1";
		String expworkFlowRow3Column3CL="BIN FINISHED GOODS ITEM";
		String expworkFlowRow3Column4CL="1.00";
		String expworkFlowRow3Column5CL="0.00";
		
		String expworkFlowRow4Column1CL="SalOrd:2";
		String expworkFlowRow4Column3CL="BIN FINISHED GOODS ITEM";
		String expworkFlowRow4Column4CL="5.00";
		String expworkFlowRow4Column5CL="0.00";
		
		String expworkFlowRow5Column1CL="SalOrd:3";
		String expworkFlowRow5Column3CL="BATCH BR ITEM";
		String expworkFlowRow5Column4CL="19.00";
		String expworkFlowRow5Column5CL="0.00";
		
		String expworkFlowRow6Column1CL="SalOrd:3";
		String expworkFlowRow6Column3CL="BATCH BR ITEM";
		String expworkFlowRow6Column4CL="20.00";
		String expworkFlowRow6Column5CL="0.00";
		
		String expworkFlowRow7Column1CL="SalOrd:6";
		String expworkFlowRow7Column3CL="RMA RITEM";
		String expworkFlowRow7Column4CL="2.00";
		String expworkFlowRow7Column5CL="0.00";
	
		String expworkFlowRow8Column1CL="SalOrd:6";
		String expworkFlowRow8Column3CL="RMA RITEM";
		String expworkFlowRow8Column4CL="2.00";
		String expworkFlowRow8Column5CL="0.00";
		
		String expworkFlowRow9Column1CL="SalOrd:6";
		String expworkFlowRow9Column3CL="RMA RITEM";
		String expworkFlowRow9Column4CL="2.00";
		String expworkFlowRow9Column5CL="0.00";
	
		String expworkFlowRow10Column1CL="SalOrd:7";
		String expworkFlowRow10Column3CL="RMA RITEM";
		String expworkFlowRow10Column4CL="1.00";
		String expworkFlowRow10Column5CL="0.00";
		
		System.out.println("**************************************** checkSalesInvoiceVoucherByInputingCustomerAAndWarhouseSecunderabadLinkCRTLPlusPendingLinks  ***************************************");
		
		System.out.println("LinkRowCountCLValue  		: "+actLinkRowCountCLValue		+" 	Value Expected : "+expLinkRowCountCLValue);
		
		System.out.println("searchOnDropdownCL  		: "+actsearchOnDropdownCL		+" 	Value Expected : "+expsearchOnDropdownCL);
		System.out.println("containingDropdownCL  		: "+actcontainingDropdownCL		+" 	Value Expected : "+expcontainingDropdownCL);
		System.out.println("workFlowSearchTxtCL  		: "+actworkFlowSearchTxtCL		+" 	Value Expected : "+expworkFlowSearchTxtCL);
		System.out.println("workFlowCustomizeBtnCL  	: "+actworkFlowCustomizeBtnCL	+" 	Value Expected : "+expworkFlowCustomizeBtnCL);
		System.out.println("workFlowOkBtnCL  			: "+actworkFlowOkBtnCL			+" 	Value Expected : "+expworkFlowOkBtnCL);
		
		System.out.println("workFlowRow1Column1CL  		: "+actworkFlowRow1Column1CL	+" 	Value Expected : "+expworkFlowRow1Column1CL);
		System.out.println("workFlowRow1Column3CL  		: "+actworkFlowRow1Column3CL	+" 	Value Expected : "+expworkFlowRow1Column3CL);
		System.out.println("workFlowRow1Column4CL  		: "+actworkFlowRow1Column4CL	+" 	Value Expected : "+expworkFlowRow1Column4CL);
		System.out.println("workFlowRow1Column5CL  		: "+actworkFlowRow1Column5CL	+" 	Value Expected : "+expworkFlowRow1Column5CL);
		
		System.out.println("workFlowRow2Column1CL  		: "+actworkFlowRow2Column1CL	+" 	Value Expected : "+expworkFlowRow2Column1CL);
		System.out.println("workFlowRow2Column3CL  		: "+actworkFlowRow2Column3CL	+" 	Value Expected : "+expworkFlowRow2Column3CL);
		System.out.println("workFlowRow2Column4CL  		: "+actworkFlowRow2Column4CL	+" 	Value Expected : "+expworkFlowRow2Column4CL);
		System.out.println("workFlowRow2Column5CL  		: "+actworkFlowRow2Column5CL	+" 	Value Expected : "+expworkFlowRow2Column5CL);
		
		System.out.println("workFlowRow3Column1CL  		: "+actworkFlowRow3Column1CL	+" 	Value Expected : "+expworkFlowRow3Column1CL);
		System.out.println("workFlowRow3Column3CL  		: "+actworkFlowRow3Column3CL	+" 	Value Expected : "+expworkFlowRow3Column3CL);
		System.out.println("workFlowRow3Column4CL  		: "+actworkFlowRow3Column4CL	+" 	Value Expected : "+expworkFlowRow3Column4CL);
		System.out.println("workFlowRow3Column5CL  		: "+actworkFlowRow3Column5CL	+" 	Value Expected : "+expworkFlowRow3Column5CL);
		
		System.out.println("workFlowRow4Column1CL  		: "+actworkFlowRow4Column1CL	+" 	Value Expected : "+expworkFlowRow4Column1CL);
		System.out.println("workFlowRow4Column3CL  		: "+actworkFlowRow4Column3CL	+" 	Value Expected : "+expworkFlowRow4Column3CL);
		System.out.println("workFlowRow4Column4CL  		: "+actworkFlowRow4Column4CL	+" 	Value Expected : "+expworkFlowRow4Column4CL);
		System.out.println("workFlowRow4Column5CL  		: "+actworkFlowRow4Column5CL	+" 	Value Expected : "+expworkFlowRow4Column5CL);
		
		System.out.println("workFlowRow5Column1CL  		: "+actworkFlowRow5Column1CL	+" 	Value Expected : "+expworkFlowRow5Column1CL);
		System.out.println("workFlowRow5Column3CL  		: "+actworkFlowRow5Column3CL	+" 	Value Expected : "+expworkFlowRow5Column3CL);
		System.out.println("workFlowRow5Column4CL  		: "+actworkFlowRow5Column4CL	+" 	Value Expected : "+expworkFlowRow5Column4CL);
		System.out.println("workFlowRow5Column5CL  		: "+actworkFlowRow5Column5CL	+" 	Value Expected : "+expworkFlowRow5Column5CL);
		
		System.out.println("workFlowRow6Column1CL  		: "+actworkFlowRow6Column1CL	+" 	Value Expected : "+expworkFlowRow6Column1CL);
		System.out.println("workFlowRow6Column3CL  		: "+actworkFlowRow6Column3CL	+" 	Value Expected : "+expworkFlowRow6Column3CL);
		System.out.println("workFlowRow6Column4CL  		: "+actworkFlowRow6Column4CL	+" 	Value Expected : "+expworkFlowRow6Column4CL);
		System.out.println("workFlowRow6Column5CL  		: "+actworkFlowRow6Column5CL	+" 	Value Expected : "+expworkFlowRow6Column5CL);

		System.out.println("workFlowRow7Column1CL  		: "+actworkFlowRow7Column1CL	+" 	Value Expected : "+expworkFlowRow7Column1CL);
		System.out.println("workFlowRow7Column3CL  		: "+actworkFlowRow7Column3CL	+" 	Value Expected : "+expworkFlowRow7Column3CL);
		System.out.println("workFlowRow7Column4CL  		: "+actworkFlowRow7Column4CL	+" 	Value Expected : "+expworkFlowRow7Column4CL);
		System.out.println("workFlowRow7Column5CL  		: "+actworkFlowRow7Column5CL	+" 	Value Expected : "+expworkFlowRow7Column5CL);

		System.out.println("workFlowRow8Column1CL  		: "+actworkFlowRow8Column1CL	+" 	Value Expected : "+expworkFlowRow8Column1CL);
		System.out.println("workFlowRow8Column3CL  		: "+actworkFlowRow8Column3CL	+" 	Value Expected : "+expworkFlowRow8Column3CL);
		System.out.println("workFlowRow8Column4CL  		: "+actworkFlowRow8Column4CL	+" 	Value Expected : "+expworkFlowRow8Column4CL);
		System.out.println("workFlowRow8Column5CL  		: "+actworkFlowRow8Column5CL	+" 	Value Expected : "+expworkFlowRow8Column5CL);

		System.out.println("workFlowRow9Column1CL  		: "+actworkFlowRow9Column1CL	+" 	Value Expected : "+expworkFlowRow9Column1CL);
		System.out.println("workFlowRow9Column3CL  		: "+actworkFlowRow9Column3CL	+" 	Value Expected : "+expworkFlowRow9Column3CL);
		System.out.println("workFlowRow9Column4CL  		: "+actworkFlowRow9Column4CL	+" 	Value Expected : "+expworkFlowRow9Column4CL);
		System.out.println("workFlowRow9Column5CL  		: "+actworkFlowRow9Column5CL	+" 	Value Expected : "+expworkFlowRow9Column5CL);

		System.out.println("workFlowRow10Column1CL  	: "+actworkFlowRow10Column1CL	+" 	Value Expected : "+expworkFlowRow10Column1CL);
		System.out.println("workFlowRow10Column3CL  	: "+actworkFlowRow10Column3CL	+" 	Value Expected : "+expworkFlowRow10Column3CL);
		System.out.println("workFlowRow10Column4CL  	: "+actworkFlowRow10Column4CL	+" 	Value Expected : "+expworkFlowRow10Column4CL);
		System.out.println("workFlowRow10Column5CL  	: "+actworkFlowRow10Column5CL	+" 	Value Expected : "+expworkFlowRow10Column5CL);
				
				
		if(actLinkRowCountCLValue==expLinkRowCountCLValue
				
				&& actsearchOnDropdownCL==expsearchOnDropdownCL && actcontainingDropdownCL==expcontainingDropdownCL && actworkFlowSearchTxtCL==expworkFlowSearchTxtCL
				&& actworkFlowCustomizeBtnCL==expworkFlowCustomizeBtnCL && actworkFlowOkBtnCL==expworkFlowOkBtnCL
				
				&& actworkFlowRow1Column1CL.equalsIgnoreCase(expworkFlowRow1Column1CL)
				&& actworkFlowRow1Column3CL.equalsIgnoreCase(expworkFlowRow1Column3CL)
				&& actworkFlowRow1Column4CL.equalsIgnoreCase(expworkFlowRow1Column4CL)
				&& actworkFlowRow1Column5CL.equalsIgnoreCase(expworkFlowRow1Column5CL)
				
				&& actworkFlowRow2Column1CL.equalsIgnoreCase(expworkFlowRow2Column1CL)
				&& actworkFlowRow2Column3CL.equalsIgnoreCase(expworkFlowRow2Column3CL)
				&& actworkFlowRow2Column4CL.equalsIgnoreCase(expworkFlowRow2Column4CL)
				&& actworkFlowRow2Column5CL.equalsIgnoreCase(expworkFlowRow2Column5CL)
				
				&& actworkFlowRow3Column1CL.equalsIgnoreCase(expworkFlowRow3Column1CL)
				&& actworkFlowRow3Column3CL.equalsIgnoreCase(expworkFlowRow3Column3CL)
				&& actworkFlowRow3Column4CL.equalsIgnoreCase(expworkFlowRow3Column4CL)
				&& actworkFlowRow3Column5CL.equalsIgnoreCase(expworkFlowRow3Column5CL)
				
				&& actworkFlowRow4Column1CL.equalsIgnoreCase(expworkFlowRow4Column1CL)
				&& actworkFlowRow4Column3CL.equalsIgnoreCase(expworkFlowRow4Column3CL)
				&& actworkFlowRow4Column4CL.equalsIgnoreCase(expworkFlowRow4Column4CL)
				&& actworkFlowRow4Column5CL.equalsIgnoreCase(expworkFlowRow4Column5CL)
				
				&& actworkFlowRow5Column1CL.equalsIgnoreCase(expworkFlowRow5Column1CL)
				&& actworkFlowRow5Column3CL.equalsIgnoreCase(expworkFlowRow5Column3CL)
				&& actworkFlowRow5Column4CL.equalsIgnoreCase(expworkFlowRow5Column4CL)
				&& actworkFlowRow5Column5CL.equalsIgnoreCase(expworkFlowRow5Column5CL)
				
				&& actworkFlowRow6Column1CL.equalsIgnoreCase(expworkFlowRow6Column1CL)
				&& actworkFlowRow6Column3CL.equalsIgnoreCase(expworkFlowRow6Column3CL)
				&& actworkFlowRow6Column4CL.equalsIgnoreCase(expworkFlowRow6Column4CL)
				&& actworkFlowRow6Column5CL.equalsIgnoreCase(expworkFlowRow6Column5CL)
				
				&& actworkFlowRow7Column1CL.equalsIgnoreCase(expworkFlowRow7Column1CL)
				&& actworkFlowRow7Column3CL.equalsIgnoreCase(expworkFlowRow7Column3CL)
				&& actworkFlowRow7Column4CL.equalsIgnoreCase(expworkFlowRow7Column4CL)
				&& actworkFlowRow7Column5CL.equalsIgnoreCase(expworkFlowRow7Column5CL)
				
				&& actworkFlowRow8Column1CL.equalsIgnoreCase(expworkFlowRow8Column1CL)
				&& actworkFlowRow8Column3CL.equalsIgnoreCase(expworkFlowRow8Column3CL)
				&& actworkFlowRow8Column4CL.equalsIgnoreCase(expworkFlowRow8Column4CL)
				&& actworkFlowRow8Column5CL.equalsIgnoreCase(expworkFlowRow8Column5CL)
				
				&& actworkFlowRow9Column1CL.equalsIgnoreCase(expworkFlowRow9Column1CL)
				&& actworkFlowRow9Column3CL.equalsIgnoreCase(expworkFlowRow9Column3CL)
				&& actworkFlowRow9Column4CL.equalsIgnoreCase(expworkFlowRow9Column4CL)
				&& actworkFlowRow9Column5CL.equalsIgnoreCase(expworkFlowRow9Column5CL)
				
				&& actworkFlowRow10Column1CL.equalsIgnoreCase(expworkFlowRow10Column1CL)
				&& actworkFlowRow10Column3CL.equalsIgnoreCase(expworkFlowRow10Column3CL)
				&& actworkFlowRow10Column4CL.equalsIgnoreCase(expworkFlowRow10Column4CL)
				&& actworkFlowRow10Column5CL.equalsIgnoreCase(expworkFlowRow10Column5CL))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
				
			return false;
		}
	}
			
	
	





	
	
	
	public boolean checkSalesInvoiceVoucherByInputingCustomerAAndWarhouseMumbaiLinkCRTLPlusPendingLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
				
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		wareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("MUMBAI"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
		workFlowExpandBtn.click();
	
		Thread.sleep(2000);
		
		List<WebElement> rowCountInLinkScreen=LinkRowCountCL;
		
		int actLinkRowCountCLValue=rowCountInLinkScreen.size();
	            
		boolean actsearchOnDropdownCL=searchOnDropdownCL.isDisplayed();
		boolean actcontainingDropdownCL=containingDropdownCL.isDisplayed();
		boolean actworkFlowSearchTxtCL=workFlowSearchTxtCL.isDisplayed();
		boolean actworkFlowCustomizeBtnCL=workFlowCustomizeBtnCL.isDisplayed();
		boolean actworkFlowOkBtnCL=workFlowOkBtnCL.isDisplayed();
				
		String actworkFlowRow11Column1CL=workFlowRow1Column1CL.getText();
		String actworkFlowRow11Column2CL=workFlowRow1Column2CL.getText();
		String actworkFlowRow11Column3CL=workFlowRow1Column3CL.getText();
		String actworkFlowRow11Column4CL=workFlowRow1Column4CL.getText();
		String actworkFlowRow11Column5CL=workFlowRow1Column5CL.getText();
		
		String actworkFlowRow12Column1CL=workFlowRow2Column1CL.getText();
		String actworkFlowRow12Column2CL=workFlowRow2Column2CL.getText();
		String actworkFlowRow12Column3CL=workFlowRow2Column3CL.getText();
		String actworkFlowRow12Column4CL=workFlowRow2Column4CL.getText();
		String actworkFlowRow12Column5CL=workFlowRow2Column5CL.getText();
		
		String actworkFlowRow13Column1CL=workFlowRow3Column1CL.getText();
		String actworkFlowRow13Column2CL=workFlowRow3Column2CL.getText();
		String actworkFlowRow13Column3CL=workFlowRow3Column3CL.getText();
		String actworkFlowRow13Column4CL=workFlowRow3Column4CL.getText();
		String actworkFlowRow13Column5CL=workFlowRow3Column5CL.getText();
				
		
		// Expected
		
		int expLinkRowCountCLValue=3;
		
		boolean expsearchOnDropdownCL=true;
		boolean expcontainingDropdownCL=true;
		boolean expworkFlowSearchTxtCL=true;
		boolean expworkFlowCustomizeBtnCL=true;
		boolean expworkFlowOkBtnCL=true;
		
		String expworkFlowRow11Column1CL="SalOrd:8";
		String expworkFlowRow11Column3CL="STOCK ITEM";
		String expworkFlowRow11Column4CL="23.00";
		String expworkFlowRow11Column5CL="0.00";
		
		String expworkFlowRow12Column1CL="SalOrd:8";
		String expworkFlowRow12Column3CL="STOCK ITEM";
		String expworkFlowRow12Column4CL="7.00";
		String expworkFlowRow12Column5CL="0.00";
		
		String expworkFlowRow13Column1CL="SalOrd:9";
		String expworkFlowRow13Column3CL="STOCK ITEM";
		String expworkFlowRow13Column4CL="2.00";
		String expworkFlowRow13Column5CL="0.00";
		
		System.out.println("**************************************** checkSalesInvoiceVoucherByInputingCustomerAAndWarhouseMumbaiLinkCRTLPlusPendingLinks  ***************************************");
		
		System.out.println("LinkRowCountCLValue  		: "+actLinkRowCountCLValue		+" 	Value Expected : "+expLinkRowCountCLValue);
		
		System.out.println("searchOnDropdownCL  		: "+actsearchOnDropdownCL		+" 	Value Expected : "+expsearchOnDropdownCL);
		System.out.println("containingDropdownCL  		: "+actcontainingDropdownCL		+" 	Value Expected : "+expcontainingDropdownCL);
		System.out.println("workFlowSearchTxtCL  		: "+actworkFlowSearchTxtCL		+" 	Value Expected : "+expworkFlowSearchTxtCL);
		System.out.println("workFlowCustomizeBtnCL  	: "+actworkFlowCustomizeBtnCL	+" 	Value Expected : "+expworkFlowCustomizeBtnCL);
		System.out.println("workFlowOkBtnCL  			: "+actworkFlowOkBtnCL			+" 	Value Expected : "+expworkFlowOkBtnCL);
		
		System.out.println("workFlowRow11Column1CL  	: "+actworkFlowRow11Column1CL	+" 	Value Expected : "+expworkFlowRow11Column1CL);
		System.out.println("workFlowRow11Column3CL  	: "+actworkFlowRow11Column3CL	+" 	Value Expected : "+expworkFlowRow11Column3CL);
		System.out.println("workFlowRow11Column4CL  	: "+actworkFlowRow11Column4CL	+" 	Value Expected : "+expworkFlowRow11Column4CL);
		System.out.println("workFlowRow11Column5CL  	: "+actworkFlowRow11Column5CL	+" 	Value Expected : "+expworkFlowRow11Column5CL);
		
		System.out.println("workFlowRow12Column1CL  	: "+actworkFlowRow12Column1CL	+" 	Value Expected : "+expworkFlowRow12Column1CL);
		System.out.println("workFlowRow12Column3CL  	: "+actworkFlowRow12Column3CL	+" 	Value Expected : "+expworkFlowRow12Column3CL);
		System.out.println("workFlowRow12Column4CL  	: "+actworkFlowRow12Column4CL	+" 	Value Expected : "+expworkFlowRow12Column4CL);
		System.out.println("workFlowRow12Column5CL  	: "+actworkFlowRow12Column5CL	+" 	Value Expected : "+expworkFlowRow12Column5CL);
		
		System.out.println("workFlowRow13Column1CL  	: "+actworkFlowRow13Column1CL	+" 	Value Expected : "+expworkFlowRow13Column1CL);
		System.out.println("workFlowRow13Column3CL  	: "+actworkFlowRow13Column3CL	+" 	Value Expected : "+expworkFlowRow13Column3CL);
		System.out.println("workFlowRow13Column4CL  	: "+actworkFlowRow13Column4CL	+" 	Value Expected : "+expworkFlowRow13Column4CL);
		System.out.println("workFlowRow13Column5CL  	: "+actworkFlowRow13Column5CL	+" 	Value Expected : "+expworkFlowRow13Column5CL);
				
				
		if(actLinkRowCountCLValue==expLinkRowCountCLValue
				
				&& actsearchOnDropdownCL==expsearchOnDropdownCL && actcontainingDropdownCL==expcontainingDropdownCL && actworkFlowSearchTxtCL==expworkFlowSearchTxtCL
				&& actworkFlowCustomizeBtnCL==expworkFlowCustomizeBtnCL && actworkFlowOkBtnCL==expworkFlowOkBtnCL
				
				&& actworkFlowRow11Column1CL.equalsIgnoreCase(expworkFlowRow11Column1CL)
				&& actworkFlowRow11Column3CL.equalsIgnoreCase(expworkFlowRow11Column3CL)
				&& actworkFlowRow11Column4CL.equalsIgnoreCase(expworkFlowRow11Column4CL)
				&& actworkFlowRow11Column5CL.equalsIgnoreCase(expworkFlowRow11Column5CL)
				
				&& actworkFlowRow12Column1CL.equalsIgnoreCase(expworkFlowRow12Column1CL)
				&& actworkFlowRow12Column3CL.equalsIgnoreCase(expworkFlowRow12Column3CL)
				&& actworkFlowRow12Column4CL.equalsIgnoreCase(expworkFlowRow12Column4CL)
				&& actworkFlowRow12Column5CL.equalsIgnoreCase(expworkFlowRow12Column5CL)
				
				&& actworkFlowRow13Column1CL.equalsIgnoreCase(expworkFlowRow13Column1CL)
				&& actworkFlowRow13Column3CL.equalsIgnoreCase(expworkFlowRow13Column3CL)
				&& actworkFlowRow13Column4CL.equalsIgnoreCase(expworkFlowRow13Column4CL)
				&& actworkFlowRow13Column5CL.equalsIgnoreCase(expworkFlowRow13Column5CL))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
				
			return false;
		}
	}
			
	
	
	public boolean checkSalesInvoiceVoucherByInputingCustomerAAndWarhouseWH1LinkCRTLPlusPendingLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
				
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		wareHouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("WH1"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));	
		workFlowExpandBtn.click();
	
		Thread.sleep(3000);
		
		boolean actpurchaseVoucherWorlFlowText=purchaseVoucherWorlFlowText.isDisplayed();
		
		boolean exppurchaseVoucherWorlFlowText=true;
		
		System.out.println("**************************************** checkSalesInvoiceVoucherByInputingCustomerAAndWarhouseWH1LinkCRTLPlusPendingLinks  ***************************************");
		
		System.out.println("purchaseVoucherWorlFlowText  		: "+actpurchaseVoucherWorlFlowText		+" 	Value Expected : "+exppurchaseVoucherWorlFlowText);
		
		if(actpurchaseVoucherWorlFlowText==exppurchaseVoucherWorlFlowText)
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 257, 9, resPass);
				
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
				
			getWaitForAlert();
				
			getAlert().accept();
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
				
			return true;
		}
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 257, 9, resFail);
				
			Thread.sleep(3000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
				
			getWaitForAlert();
			
			getAlert().accept();
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
				
			return false;
		}
	}
	



	// Not Working So Changes made For Links (Sales Flow) in Else Part
	public boolean checkSalesInvoiceVoucherByInputingCustomerBWarhouseSecunderabadLinewisePendingLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
				
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
    	finacinalsMenu.click();
			
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
    	financialsTransactionMenu.click();
			
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
    	financialTransactionSalesMenu.click();
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
    	salesInvoicesVoucher.click();
			
    	Thread.sleep(2000);
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
    	newBtn.click();
				    	
    	checkUserFriendlyMessage();
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer B"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH BR ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.click();
		enter_AQTxt.clear();
		enter_AQTxt.sendKeys("3");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.click();
		enter_FQTxt.clear();
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
	
		int actLinkRowCountValue=rowCountInLinkScreen.size();
        
		boolean actpurchaseVoucherWorlFlowText=purchaseVoucherWorlFlowText.isDisplayed();
		
		boolean exppurchaseVoucherWorlFlowText=true;
		
		System.out.println("**************************************** checkSalesInvoiceVoucherByInputingCustomerBWarhouseSecunderabadLinewisePendingLinks  ***************************************");
		
		System.out.println("purchaseVoucherWorlFlowText  		: "+actpurchaseVoucherWorlFlowText		+" 	Value Expected : "+exppurchaseVoucherWorlFlowText);
		
		if(actpurchaseVoucherWorlFlowText==exppurchaseVoucherWorlFlowText)
		{
				
			boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
			boolean actcontainingDropdown=containingDropdown.isDisplayed();
			boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
			boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
			boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
					
			String actworkFlowRow11Column1=workFlowRow1Column1.getText();
			String actworkFlowRow11Column2=workFlowRow1Column2.getText();
			String actworkFlowRow11Column3=workFlowRow1Column3.getText();
			String actworkFlowRow11Column4=workFlowRow1Column4.getText();
			String actworkFlowRow11Column5=workFlowRow1Column5.getText();
			
					
			
			// Expected
			
			int expLinkRowCountValue=1;
			
			boolean expsearchOnDropdown=true;
			boolean expcontainingDropdown=true;
			boolean expworkFlowSearchTxt=true;
			boolean expworkFlowCustomizeBtn=true;
			boolean expworkFlowOkBtn=true;
			
			String expworkFlowRow11Column1="SalOrd:4";
			String expworkFlowRow11Column3="BATCH BR ITEM";
			String expworkFlowRow11Column4="81.00";
			String expworkFlowRow11Column5="0.00";
			
			
			System.out.println("**************************************** checkSalesInvoiceVoucherByInputingCustomerAAndWarhouseWH1LinkCRTLPlusPendingLinks  ***************************************");
			
			System.out.println("LinkRowCountValue  		: "+actLinkRowCountValue		+" 	Value Expected : "+expLinkRowCountValue);
			
			System.out.println("searchOnDropdown  		: "+actsearchOnDropdown		    +" 	Value Expected : "+expsearchOnDropdown);
			System.out.println("containingDropdown  	: "+actcontainingDropdown		+" 	Value Expected : "+expcontainingDropdown);
			System.out.println("workFlowSearchTxt  		: "+actworkFlowSearchTxt		+" 	Value Expected : "+expworkFlowSearchTxt);
			System.out.println("workFlowCustomizeBtn  	: "+actworkFlowCustomizeBtn	    +" 	Value Expected : "+expworkFlowCustomizeBtn);
			System.out.println("workFlowOkBtn  			: "+actworkFlowOkBtn			+" 	Value Expected : "+expworkFlowOkBtn);
			
			System.out.println("workFlowRow11Column1  	: "+actworkFlowRow11Column1	+" 	Value Expected : "+expworkFlowRow11Column1);
			System.out.println("workFlowRow11Column3  	: "+actworkFlowRow11Column3	+" 	Value Expected : "+expworkFlowRow11Column3);
			System.out.println("workFlowRow11Column4  	: "+actworkFlowRow11Column4	+" 	Value Expected : "+expworkFlowRow11Column4);
			System.out.println("workFlowRow11Column5  	: "+actworkFlowRow11Column5	+" 	Value Expected : "+expworkFlowRow11Column5);
					
					
			if(actLinkRowCountValue==expLinkRowCountValue
					
					&& actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
					&& actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
					
					&& actworkFlowRow11Column1.equalsIgnoreCase(expworkFlowRow11Column1)
					&& actworkFlowRow11Column3.equalsIgnoreCase(expworkFlowRow11Column3)
					&& actworkFlowRow11Column4.equalsIgnoreCase(expworkFlowRow11Column4)
					&& actworkFlowRow11Column5.equalsIgnoreCase(expworkFlowRow11Column5))
			{
				System.out.println("Test Pass : Error Message is Displayed ");
				excelReader.setCellData(xlfile, "Sheet6", 235, 9, resPass);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
				workFlowCloseBtn.click();
				
				return true;
			}	
			else
			{
				System.out.println("Test Fail : Error Message is Displayed ");
				excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
				workFlowCloseBtn.click();
				
				return false;
			}
		}
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
		
			//Here Changing the Link Definition To solve it we are using aleternative
		
			Thread.sleep(3000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
				
			getWaitForAlert();
				
			getAlert().accept();
				
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
				
			Thread.sleep(3000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
			settingsMenu.click();
				
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
			designWorkflowbtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
			workflowNameTxt.click();
			workflowNameTxt.sendKeys("Sales Flow");
			Thread.sleep(4000);
			workflowNameTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link5TO6));
			link5TO6.click();
				
			Thread.sleep(2000);
			
			/*getWaitForAlert();
				
			Thread.sleep(2000);
					
			getAlert().accept();*/
			
			if(customerAccountChkbox.isSelected()==true && salesOrderandInvoicewareHouseChkbox.isSelected()==true)
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountChkbox));
			customerAccountChkbox.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrderandInvoicewareHouseChkbox));
			salesOrderandInvoicewareHouseChkbox.click();
			}
			
			Thread.sleep(2000);
			
			boolean CustomerAc=customerAccountChkbox.isSelected();
			
			boolean warehouse=salesOrderandInvoicewareHouseChkbox.isSelected();		
			
			System.out.println("CustomerAc  :  "+CustomerAc);
			System.out.println("warehouse   :  "+warehouse);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
			OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveInDesignWorkFlow));
			saveInDesignWorkFlow.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			
			String Actmessage=errorMessage.getText();
			
			System.out.println(Actmessage);
			
			System.out.println("Test Pass : Error Message is as Expected");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplay.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			username.click();
			
			username.sendKeys("su");
			Thread.sleep(5000);
			
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(password));
			Thread.sleep(5000);
			password.sendKeys("su");
			
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
			signIn.click();
			
			checkRefreshPopOnlogin();
			
			//checkPopUpWindow();

			Thread.sleep(5000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
			finacinalsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
			financialTransactionSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
			salesInvoicesVoucher.click();
			
			Thread.sleep(5000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkUserFriendlyMessage();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
			salesAccountTxt.click();
			salesAccountTxt.sendKeys(Keys.SPACE);
			
			int count1=salesAccountListCount.size();
			
			System.err.println(count1);
			
			for(int i=0 ; i < count1 ;i++)
			{
				String data=salesAccountListCount.get(i).getAttribute("data-name");
				
				if(data.equalsIgnoreCase("Sales - Computers"))
				{
					salesAccountListCount.get(i).click();
					
					break;
				}
			}
			
			salesAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.END);
			Thread.sleep(2000);
			customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		  	customerAccountTxt.click();
		  	customerAccountTxt.sendKeys(Keys.SPACE);
			 
		  	int customercount1=customerAccountListCount.size();
		  	
		  	System.err.println(customercount1);
		  	
		  	for(int i=0 ; i < customercount1 ;i++)
		  	{
		  		String data=customerAccountListCount.get(i).getAttribute("data-name");
		  		
		  		if(data.equalsIgnoreCase("Customer B"))
		  		{
		  			customerAccountListCount.get(i).click();
		  			
		  			break;
		  		}
		  	}
					
		  	customerAccountTxt.sendKeys(Keys.TAB);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount1=departmentListCount.size();
			
			System.err.println(departmentcount1);
				
			for(int i=0 ; i < departmentcount1 ;i++)
			{
				String data=departmentListCount.get(i).getAttribute("data-name");
				
				if(data.equalsIgnoreCase("INDIA"))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			wareHouseTxt.sendKeys(Keys.SPACE);
				
			int warehousecount1=wareHouseListCount.size();
			
			System.err.println(warehousecount1);
				
			for(int i=0 ; i < warehousecount1 ;i++)
			{
				String data=wareHouseListCount.get(i).getAttribute("data-name");
				
				if(data.equalsIgnoreCase("SECUNDERABAD"))
				{
					wareHouseListCount.get(i).click();
					
					break;
				}
			}
				
			wareHouseTxt.sendKeys(Keys.TAB);
			
			
			return false;
			
		}
	}	


	

	
	public boolean checkSalesInvoiceVoucherByInputingCustomerBWarhouseSecunderabadBatchWAItemLinewisePendingLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	  	customerAccountTxt.click();
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer B"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH WA ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("3");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
	            
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
				
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
		
				
		
		// Expected
		
		int expLinkRowCountValue=2;
		
		boolean expsearchOnDropdown=true;
		boolean expcontainingDropdown=true;
		boolean expworkFlowSearchTxt=true;
		boolean expworkFlowCustomizeBtn=true;
		boolean expworkFlowOkBtn=true;
		
		String expworkFlowRow1Column1="SalOrd:5";
		String expworkFlowRow1Column3="BATCH WA ITEM";
		String expworkFlowRow1Column4="49.00";
		String expworkFlowRow1Column5="0.00";
		
		String expworkFlowRow2Column1="SalOrd:5";
		String expworkFlowRow2Column3="BATCH WA ITEM";
		String expworkFlowRow2Column4="14.00";
		String expworkFlowRow2Column5="0.00";
		
		
		System.out.println("**************************************** checkSalesInvoiceVoucherByInputingCustomerBWarhouseSecunderabadBatchWAItemLinewisePendingLinks  ***************************************");
		
		System.out.println("LinkRowCountValue  			: "+actLinkRowCountValue		+" 	Value Expected : "+expLinkRowCountValue);
		
		System.out.println("searchOnDropdown  			: "+actsearchOnDropdown			+" 	Value Expected : "+expsearchOnDropdown);
		System.out.println("containingDropdown  		: "+actcontainingDropdown		+" 	Value Expected : "+expcontainingDropdown);
		System.out.println("workFlowSearchTxt  			: "+actworkFlowSearchTxt		+" 	Value Expected : "+expworkFlowSearchTxt);
		System.out.println("workFlowCustomizeBtn  		: "+actworkFlowCustomizeBtn		+" 	Value Expected : "+expworkFlowCustomizeBtn);
		System.out.println("workFlowOkBtn  				: "+actworkFlowOkBtn			+" 	Value Expected : "+expworkFlowOkBtn);
		
		System.out.println("workFlowRow1Column1 	 	: "+actworkFlowRow1Column1		+" 	Value Expected : "+expworkFlowRow1Column1);
		System.out.println("workFlowRow1Column3  		: "+actworkFlowRow1Column3		+" 	Value Expected : "+expworkFlowRow1Column3);
		System.out.println("workFlowRow1Column4  		: "+actworkFlowRow1Column4		+" 	Value Expected : "+expworkFlowRow1Column4);
		System.out.println("workFlowRow1Column5  		: "+actworkFlowRow1Column5		+" 	Value Expected : "+expworkFlowRow1Column5);
		
		System.out.println("workFlowRow2Column1  		: "+actworkFlowRow2Column1		+" 	Value Expected : "+expworkFlowRow2Column1);
		System.out.println("workFlowRow2Column3  		: "+actworkFlowRow2Column3		+" 	Value Expected : "+expworkFlowRow2Column3);
		System.out.println("workFlowRow2Column4  		: "+actworkFlowRow2Column4		+" 	Value Expected : "+expworkFlowRow2Column4);
		System.out.println("workFlowRow2Column5  		: "+actworkFlowRow2Column5		+" 	Value Expected : "+expworkFlowRow2Column5);
		
				
		if(actLinkRowCountValue==expLinkRowCountValue
				
				&& actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
				&& actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
				
				&& actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
				&& actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
				&& actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
				&& actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
				
				&& actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
				&& actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
				&& actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
				&& actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resPass);
					
			return true;
		}	
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
			
			return false;
		}
	}
	   
	
	public boolean checkOkOnSlectingSecondRowInPendingLinksPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRadioBtnRowTwo));
		workFlowRadioBtnRowTwo.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		
		// Actual
		String actLSalesOrderAfterLinkSecltionLinewsie=select1stRow_9thColumn.getText();
	    String actQtyAfterLinkSecltionLinewsie=select1stRow_8thColumn.getText();
		String actReleaseQtyAfterLinkSecltionLinewsie=select1stRow_10thColumn.getText();
		
		// Expected
		String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:5";
		String expQtyAfterLinkSecltionLinewsie="3.00";
		String expReleaseQtyAfterLinkSecltionLinewsie="3.00";
		
		
		System.out.println("**************************************** checkOkOnSlectingSecondRowInPendingLinksPopupScreen  ***************************************");

		System.out.println("LSalesOrderAfterLinkSecltionLinewsie  : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
		System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
		System.out.println("ReleaseQtyAfterLinkSecltionLinewsie   : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
		
		if(actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
				&& actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
				&& actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
		{
			System.out.println("Test pass : Pending Link Displayed in voucher ");
			return true;
		}
		else
		{
			System.out.println("Test fail : Pending Link NOT Displayed in voucher ");
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_4thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys("3");
			enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys("0");
			enter_FQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
			enter_AvgRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
			enter_AvgRateo.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
	
			
			return false;
		}
	}
	


	
	
	public boolean checkBatchScreenPopupUsingReservationLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		
		enter_Rate.clear();
		
		enter_Rate.sendKeys("41");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
	
		// Actual
		
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="3.00";
		expAdjustedQty="0.00";
		expBalance="3.00";
					
		expTotalQtyFooter="106.00";
		expTotalAdjustedQtyFooter="0.00";
		

		expRow1BatchNo="PVSWA";
		expRow1BaseQty="24.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="15.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();

		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="3.00";
		expRow2AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="34.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="12.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="36.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
	    
	    System.out.println("********************************** checkBatchScreenPopupUsingReservationLinks  *************************************");
	    
	    System.out.println("BatchRows                                                          : "+actBatchRows              + " Value Expected : "+expBatchRows);
	     
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+actRow3BaseQty);
		System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+expRow3Rate               + " Value Expected : "+actRow3Rate);
		System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
			return false;
		}
	}




	
	
	
	public boolean checkBatchPickAndOkButtonInBatchPopupUsingResevrationLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="3.00";
		expAdjustedQty="3.00";
		expBalance="0.00";
					
		expTotalQtyFooter="106.00";
		expTotalAdjustedQtyFooter="3.00";
		

		expRow1BatchNo="PVSWA";
		expRow1BaseQty="24.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="15.00";
		expRow1AdjustedQty="3.00";
		//exp10=batch_PurchaseDateRow1.getText();

		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="3.00";
		expRow2AdjustedQty="0.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="34.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="12.00";
		expRow3AdjustedQty="0.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="36.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
	    
	    System.out.println("********************************** checkBatchScreenPopupUsingReservationLinks  *************************************");
	   
	    System.out.println("BatchRows                                                          : "+actBatchRows              + " Value Expected : "+expBatchRows);
	    
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+actRow3BaseQty);
		System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+expRow3Rate               + " Value Expected : "+actRow3Rate);
		System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
				
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						
			return false;
		}
	}
	
	


	
	
	public boolean checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
			
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		
		// Actual
		String actBatchColumnValue=select1stRow_13thColumn.getText();
		String actReleaseQtyAfterLinkSecltionLinewsie=select1stRow_10thColumn.getText();
		
		// Expected
		String expBatchColumnValue="PVSWA";
		String expReleaseQtyAfterLinkSecltionLinewsie="3.00";
		
		System.out.println("********************************** checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinks  *************************************");
		    
		System.out.println("BatchColumnValue             		 : "+actBatchColumnValue     					+ " Value Expected : "+expBatchColumnValue);
		System.out.println("ReleaseQtyAfterLinkSecltionLinewsie  : "+actReleaseQtyAfterLinkSecltionLinewsie     + " Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
		
		if(actBatchColumnValue.equalsIgnoreCase(expBatchColumnValue) 
				&& actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						
			return false;
		}
	}
	

	
	
	public boolean checkBatchPopUpScreenAfterConsumingOnClickOkInBatchPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		select1stRow_13thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="3.00";
		expAdjustedQty="3.00";
		expBalance="0.00";
					
		expTotalQtyFooter="106.00";
		expTotalAdjustedQtyFooter="3.00";
		

		expRow1BatchNo="PVSWA";
		expRow1BaseQty="24.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="15.00";
		expRow1AdjustedQty="3";
		//exp10=batch_PurchaseDateRow1.getText();

		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="3.00";
		expRow2AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="34.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="12.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="36.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
	    
	    System.out.println("********************************** checkBatchPopUpScreenAfterConsumingOnClickOkInBatchPopUpScreen  *************************************");
	    
	    System.out.println("BatchRows                                                          : "+actBatchRows              + " Value Expected : "+expBatchRows);
	    
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+actRow3BaseQty);
		System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+expRow3Rate               + " Value Expected : "+actRow3Rate);
		System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
						
			return false;
		}
	}
	


	
	
	public boolean checkBalanceQtyInPendingLinksPopupScreenInSecondRowAfterConsumeInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH WA ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
		select2ndRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("11");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
	            
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
				
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
		
		// Expected
		
		int expLinkRowCountValue=2;
		
		boolean expsearchOnDropdown=true;
		boolean expcontainingDropdown=true;
		boolean expworkFlowSearchTxt=true;
		boolean expworkFlowCustomizeBtn=true;
		boolean expworkFlowOkBtn=true;
		
		String expworkFlowRow1Column1="SalOrd:5";
		String expworkFlowRow1Column3="BATCH WA ITEM";
		String expworkFlowRow1Column4="49.00";
		String expworkFlowRow1Column5="0.00";
		
		String expworkFlowRow2Column1="SalOrd:5";
		String expworkFlowRow2Column3="BATCH WA ITEM";
		String expworkFlowRow2Column4="11.00";
		String expworkFlowRow2Column5="0.00";
		
		
		System.out.println("**************************************** checkBalanceQtyInPendingLinksPopupScreenInSecondRowAfterConsumeInFirstRow  ***************************************");
		
		System.out.println("LinkRowCountValue  			: "+actLinkRowCountValue		+" 	Value Expected : "+expLinkRowCountValue);
		
		System.out.println("searchOnDropdown  			: "+actsearchOnDropdown			+" 	Value Expected : "+expsearchOnDropdown);
		System.out.println("containingDropdown  		: "+actcontainingDropdown		+" 	Value Expected : "+expcontainingDropdown);
		System.out.println("workFlowSearchTxt  			: "+actworkFlowSearchTxt		+" 	Value Expected : "+expworkFlowSearchTxt);
		System.out.println("workFlowCustomizeBtn  		: "+actworkFlowCustomizeBtn		+" 	Value Expected : "+expworkFlowCustomizeBtn);
		System.out.println("workFlowOkBtn  				: "+actworkFlowOkBtn			+" 	Value Expected : "+expworkFlowOkBtn);
		
		System.out.println("workFlowRow1Column1 	 	: "+actworkFlowRow1Column1		+" 	Value Expected : "+expworkFlowRow1Column1);
		System.out.println("workFlowRow1Column3  		: "+actworkFlowRow1Column3		+" 	Value Expected : "+expworkFlowRow1Column3);
		System.out.println("workFlowRow1Column4  		: "+actworkFlowRow1Column4		+" 	Value Expected : "+expworkFlowRow1Column4);
		System.out.println("workFlowRow1Column5  		: "+actworkFlowRow1Column5		+" 	Value Expected : "+expworkFlowRow1Column5);
		
		System.out.println("workFlowRow2Column1  		: "+actworkFlowRow2Column1		+" 	Value Expected : "+expworkFlowRow2Column1);
		System.out.println("workFlowRow2Column3  		: "+actworkFlowRow2Column3		+" 	Value Expected : "+expworkFlowRow2Column3);
		System.out.println("workFlowRow2Column4  		: "+actworkFlowRow2Column4		+" 	Value Expected : "+expworkFlowRow2Column4);
		System.out.println("workFlowRow2Column5  		: "+actworkFlowRow2Column5		+" 	Value Expected : "+expworkFlowRow2Column5);
		
				
		if(actLinkRowCountValue==expLinkRowCountValue
				
				&& actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
				&& actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
				
				&& actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
				&& actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
				&& actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
				&& actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
				
				&& actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
				&& actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
				&& actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
				&& actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resPass);
					
			return true;
		}	
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
				
			return false;
		}
	}
	
	

	
	public boolean checkOkToConsumeFullQtyInSecondRowOfPendingLinksPopupScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRadioBtnRowTwo));
		workFlowRadioBtnRowTwo.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		
		// Actual
		String actLSalesOrderAfterLinkSecltionLinewsie=select2ndRow_9thColumn.getText();
	    String actQtyAfterLinkSecltionLinewsie=select2ndRow_8thColumn.getText();
		String actReleaseQtyAfterLinkSecltionLinewsie=select2ndRow_10thColumn.getText();
		
		// Expected
		String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:5";
		String expQtyAfterLinkSecltionLinewsie="11.00";
		String expReleaseQtyAfterLinkSecltionLinewsie="11.00";
		
		
		System.out.println("**************************************** checkOkToConsumeFullQtyInSecondRowOfPendingLinksPopupScreen  ***************************************");

		System.out.println("LSalesOrderAfterLinkSecltionLinewsie  : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
		System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
		System.out.println("ReleaseQtyAfterLinkSecltionLinewsie   : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
		
		if(actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
				&& actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
				&& actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
		{
			System.out.println("Test pass : Pending Link Displayed in voucher ");
			return true;
		}
		else
		{
			System.out.println("Test fail : Pending Link NOT Displayed in voucher ");
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
			select2ndRow_4thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys("11");
			enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys("0");
			enter_FQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
			enter_AvgRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
			enter_AvgRateo.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
	
			
			return false;
		}
		
	}





	
	
	public boolean checkBatchScreenPopupUsingReservationLinksInSecondRowVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		
		enter_Rate.clear();
		
		enter_Rate.sendKeys("91");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="11.00";
		expAdjustedQty="0.00";
		expBalance="11.00";
					
		expTotalQtyFooter="103.00";
		expTotalAdjustedQtyFooter="0.00";
		

		expRow1BatchNo="PVSWA";
		expRow1BaseQty="21.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="15.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();

		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="3.00";
		expRow2AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="34.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="12.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="36.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
	    
	    System.out.println("********************************** checkBatchScreenPopupUsingReservationLinksInSecondRowVoucher  *************************************");
	    
	    System.out.println("BatchRows                                                          : "+actBatchRows              + " Value Expected : "+expBatchRows);
	    
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+actRow3BaseQty);
		System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+expRow3Rate               + " Value Expected : "+actRow3Rate);
		System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
			return false;
		}
	}





	
	
	
	public boolean checkBatchPickAndOkButtonInBatchPopupUsingResevrationLinksInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(2000);
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
	
		// Actual
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="11.00";
		expAdjustedQty="11.00";
		expBalance="0.00";
					
		expTotalQtyFooter="103.00";
		expTotalAdjustedQtyFooter="11.00";
		

		expRow1BatchNo="PVSWA";
		expRow1BaseQty="21.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="15.00";
		expRow1AdjustedQty="11.00";
		//exp10=batch_PurchaseDateRow1.getText();

		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="3.00";
		expRow2AdjustedQty="0.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="34.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="12.00";
		expRow3AdjustedQty="0.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="36.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
	    
	    System.out.println("********************************** checkBatchPickAndOkButtonInBatchPopupUsingResevrationLinksInSecondRow  *************************************");
	    
	    System.out.println("BatchRows                                                          : "+actBatchRows              + " Value Expected : "+expBatchRows);
	    
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+actRow3BaseQty);
		System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+expRow3Rate               + " Value Expected : "+actRow3Rate);
		System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
			return false;
		}
	}
	



	
	
	public boolean checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
			
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_13thColumn));
		
		String actBatchColumnValue=select2ndRow_13thColumn.getText();
		
		String expBatchColumnValue="PVSWA";
		
		System.out.println("********************************** checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksInSecondRow  *************************************");
	    
	    System.out.println("BatchColumnValue          : "+actBatchColumnValue     + " Value Expected : "+expBatchColumnValue);
		
	    if(actBatchColumnValue.equalsIgnoreCase(expBatchColumnValue))
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
	    	return true;
	    }
	    else
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
	    	return false;
	    }
	}
	


	//Checking in the Third Row


	public boolean checkBalanceQtyInPendingLinksPopupScreenInSecondRowAfterConsumeInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH WA ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("31");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
	            
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
				
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		// Expected
		
		int expLinkRowCountValue=2;
		
		boolean expsearchOnDropdown=true;
		boolean expcontainingDropdown=true;
		boolean expworkFlowSearchTxt=true;
		boolean expworkFlowCustomizeBtn=true;
		boolean expworkFlowOkBtn=true;
		
		String expworkFlowRow1Column1="SalOrd:5";
		String expworkFlowRow1Column3="BATCH WA ITEM";
		String expworkFlowRow1Column4="49.00";
		String expworkFlowRow1Column5="0.00";
		
		
		System.out.println("**************************************** checkBalanceQtyInPendingLinksPopupScreenInSecondRowAfterConsumeInThirdRow  ***************************************");
		
		System.out.println("LinkRowCountValue  			: "+actLinkRowCountValue		+" 	Value Expected : "+expLinkRowCountValue);
		
		System.out.println("searchOnDropdown  			: "+actsearchOnDropdown			+" 	Value Expected : "+expsearchOnDropdown);
		System.out.println("containingDropdown  		: "+actcontainingDropdown		+" 	Value Expected : "+expcontainingDropdown);
		System.out.println("workFlowSearchTxt  			: "+actworkFlowSearchTxt		+" 	Value Expected : "+expworkFlowSearchTxt);
		System.out.println("workFlowCustomizeBtn  		: "+actworkFlowCustomizeBtn		+" 	Value Expected : "+expworkFlowCustomizeBtn);
		System.out.println("workFlowOkBtn  				: "+actworkFlowOkBtn			+" 	Value Expected : "+expworkFlowOkBtn);
		
		System.out.println("workFlowRow1Column1 	 	: "+actworkFlowRow1Column1		+" 	Value Expected : "+expworkFlowRow1Column1);
		System.out.println("workFlowRow1Column3  		: "+actworkFlowRow1Column3		+" 	Value Expected : "+expworkFlowRow1Column3);
		System.out.println("workFlowRow1Column4  		: "+actworkFlowRow1Column4		+" 	Value Expected : "+expworkFlowRow1Column4);
		System.out.println("workFlowRow1Column5  		: "+actworkFlowRow1Column5		+" 	Value Expected : "+expworkFlowRow1Column5);
		
		if(actLinkRowCountValue==expLinkRowCountValue
				
				&& actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
				&& actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
				
				&& actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
				&& actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
				&& actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
				&& actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resPass);
			
			return true;
		}	
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
				
			return false;
		}
	}
	   
	
	
	
	public boolean checkOkToConsumeFullQtyInSecondRowOfPendingLinksPopupScreenWhileInputingInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRadioBtnRowOne));
		workFlowRadioBtnRowOne.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
		
		// Actual
		String actLSalesOrderAfterLinkSecltionLinewsie=select3rdRow_9thColumn.getText();
	    String actQtyAfterLinkSecltionLinewsie=select3rdRow_8thColumn.getText();
		String actReleaseQtyAfterLinkSecltionLinewsie=select3rdRow_10thColumn.getText();
		
		// Expected
		String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:5";
		String expQtyAfterLinkSecltionLinewsie="31.00";
		String expReleaseQtyAfterLinkSecltionLinewsie="31.00";
		
		
		System.out.println("**************************************** checkOkToConsumeFullQtyInSecondRowOfPendingLinksPopupScreenWhileInputingInThirdRow  ***************************************");

		System.out.println("LSalesOrderAfterLinkSecltionLinewsie  : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
		System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
		System.out.println("ReleaseQtyAfterLinkSecltionLinewsie   : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
		
		if(actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
				&& actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
				&& actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
		{
			System.out.println("Test pass : Pending Link Displayed in voucher ");
			return true;
		}
		else
		{
			System.out.println("Test fail : Pending Link NOT Displayed in voucher ");
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
			select3rdRow_4thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys("31");
			enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys("0");
			enter_FQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
			enter_AvgRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
			enter_AvgRateo.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
	
			
			return false;
		}
		
	}
	
	
	
	
	public boolean checkBatchScreenPopupUsingReservationLinksInThirdRowVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(2000);
		
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
		select3rdRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		
		enter_Rate.clear();
		
		enter_Rate.sendKeys("59");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="31.00";
		expAdjustedQty="0.00";
		expBalance="31.00";
					
		expTotalQtyFooter="92.00";
		expTotalAdjustedQtyFooter="0.00";
		

		expRow1BatchNo="PVSWA";
		expRow1BaseQty="34.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="12.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();

		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="36.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="15.00";
		expRow2AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="3.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="10.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
	    
	    System.out.println("********************************** checkBatchScreenPopupUsingReservationLinksInThirdRowVoucher  *************************************");
	    
	    System.out.println("BatchRows                                                          : "+actBatchRows              + " Value Expected : "+expBatchRows);
	    
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+actRow3BaseQty);
		System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+expRow3Rate               + " Value Expected : "+actRow3Rate);
		System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
			return false;	
		}
	}






	
	
	public boolean checkBatchPickAndOkButtonInBatchPopupUsingResevrationLinksInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		// Actual
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="31.00";
		expAdjustedQty="31.00";
		expBalance="0.00";
					
		expTotalQtyFooter="92.00";
		expTotalAdjustedQtyFooter="31.00";
		

		expRow1BatchNo="PVSWA";
		expRow1BaseQty="34.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="12.00";
		expRow1AdjustedQty="31.00";
		//exp10=batch_PurchaseDateRow1.getText();

		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="36.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="15.00";
		expRow2AdjustedQty="0.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="3.00";
		expRow3AdjustedQty="0.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="10.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
	    
	    System.out.println("********************************** checkBatchPickAndOkButtonInBatchPopupUsingResevrationLinksInThirdRow  *************************************");
	    
	    System.out.println("BatchRows                                                          : "+actBatchRows              + " Value Expected : "+expBatchRows);
	    
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+actRow3BaseQty);
		System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+expRow3Rate               + " Value Expected : "+actRow3Rate);
		System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))	
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						
			return false;
		}
	}
	


	
	
	
	public boolean checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_13thColumn));
			
		String actBatchColumnValue=select3rdRow_13thColumn.getText();
		
		String expBatchColumnValue="PVSWA";
		
		System.out.println("********************************** checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksInThirdRow  *************************************");
	    
	    System.out.println("BatchColumnValue          : "+actBatchColumnValue     + " Value Expected : "+expBatchColumnValue);
		
	    if(actBatchColumnValue.equalsIgnoreCase(expBatchColumnValue))
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
	    	return true;
	    }
	    else
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
	    	return false;
	    }
	}





	// Fourth Row


	
	
	public boolean checkBalanceQtyInPendingLinksPopupScreenInSecondRowAfterConsumeInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH WA ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
		select4thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("0");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("18");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
	            
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
				
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		// Expected
		
		int expLinkRowCountValue=1;
		
		boolean expsearchOnDropdown=true;
		boolean expcontainingDropdown=true;
		boolean expworkFlowSearchTxt=true;
		boolean expworkFlowCustomizeBtn=true;
		boolean expworkFlowOkBtn=true;
		
		String expworkFlowRow1Column1="SalOrd:5";
		String expworkFlowRow1Column3="BATCH WA ITEM";
		String expworkFlowRow1Column4="18.00";
		String expworkFlowRow1Column5="0.00";
		
		
		System.out.println("**************************************** checkBalanceQtyInPendingLinksPopupScreenInSecondRowAfterConsumeInFourthRow  ***************************************");
		
		System.out.println("LinkRowCountValue  			: "+actLinkRowCountValue		+" 	Value Expected : "+expLinkRowCountValue);
		
		System.out.println("searchOnDropdown  			: "+actsearchOnDropdown			+" 	Value Expected : "+expsearchOnDropdown);
		System.out.println("containingDropdown  		: "+actcontainingDropdown		+" 	Value Expected : "+expcontainingDropdown);
		System.out.println("workFlowSearchTxt  			: "+actworkFlowSearchTxt		+" 	Value Expected : "+expworkFlowSearchTxt);
		System.out.println("workFlowCustomizeBtn  		: "+actworkFlowCustomizeBtn		+" 	Value Expected : "+expworkFlowCustomizeBtn);
		System.out.println("workFlowOkBtn  				: "+actworkFlowOkBtn			+" 	Value Expected : "+expworkFlowOkBtn);
		
		System.out.println("workFlowRow1Column1 	 	: "+actworkFlowRow1Column1		+" 	Value Expected : "+expworkFlowRow1Column1);
		System.out.println("workFlowRow1Column3  		: "+actworkFlowRow1Column3		+" 	Value Expected : "+expworkFlowRow1Column3);
		System.out.println("workFlowRow1Column4  		: "+actworkFlowRow1Column4		+" 	Value Expected : "+expworkFlowRow1Column4);
		System.out.println("workFlowRow1Column5  		: "+actworkFlowRow1Column5		+" 	Value Expected : "+expworkFlowRow1Column5);
		
		if(actLinkRowCountValue==expLinkRowCountValue
				
				&& actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
				&& actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
				
				&& actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
				&& actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
				&& actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
				&& actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5))
		{
			System.out.println("Test Pass : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resPass);
					
			return true;
		}	
		else
		{
			System.out.println("Test Fail : Error Message is Displayed ");
			excelReader.setCellData(xlfile, "Sheet6", 235, 9, resFail);
				
			return false;
		}
	}
	   


	
	
	public boolean checkOkToConsumeFullQtyInSecondRowOfPendingLinksPopupScreenWhileInputingInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRadioBtnRowOne));
		workFlowRadioBtnRowOne.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
		
		// Actual
		String actLSalesOrderAfterLinkSecltionLinewsie=select4thRow_9thColumn.getText();
	    String actQtyAfterLinkSecltionLinewsie=select4thRow_8thColumn.getText();
		String actReleaseQtyAfterLinkSecltionLinewsie=select4thRow_10thColumn.getText();
		
		// Expected
		String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:5";
		String expQtyAfterLinkSecltionLinewsie="18.00";
		String expReleaseQtyAfterLinkSecltionLinewsie="18.00";
		
		
		System.out.println("**************************************** checkOkToConsumeFullQtyInSecondRowOfPendingLinksPopupScreenWhileInputingInFourthRow  ***************************************");

		System.out.println("LSalesOrderAfterLinkSecltionLinewsie  : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
		System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
		System.out.println("ReleaseQtyAfterLinkSecltionLinewsie   : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
		
		if(actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
				&& actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
				&& actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
		{
			System.out.println("Test pass : Pending Link Displayed in voucher ");
			return true;
		}
		else
		{
			System.out.println("Test fail : Pending Link NOT Displayed in voucher ");
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
			select4thRow_4thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys("0");
			enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys("18");
			enter_FQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
			enter_AvgRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
			enter_AvgRateo.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
	
			
			return false;
		}
	}
	




	
	
	public boolean checkBatchScreenPopupUsingReservationLinksInFourthRowVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
		select4thRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		
		enter_Rate.clear();
		
		enter_Rate.sendKeys("49");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
	
		// Actual
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="18.00";
		expAdjustedQty="0.00";
		expBalance="18.00";
					
		expTotalQtyFooter="61.00";
		expTotalAdjustedQtyFooter="0.00";
		

		expRow1BatchNo="PVSWA";
		expRow1BaseQty="3.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="12.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();

		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="36.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="15.00";
		expRow2AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="3.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="10.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
	    
	    System.out.println("********************************** checkBatchScreenPopupUsingReservationLinksInFourthRowVoucher  *************************************");
	    
	    System.out.println("BatchRows                                                          : "+actBatchRows              + " Value Expected : "+expBatchRows);
	    
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+actRow3BaseQty);
		System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+expRow3Rate               + " Value Expected : "+actRow3Rate);
		System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);

			return false;
		}
	}
	





	
	
	public boolean checkBatchManualInputQtyAndOkButtonInBatchPopupUsingResevrationLinksInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow2));
		batch_QtyAdjustedRow2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
		batch_EnterQtyAdjsuted.sendKeys("18");
		batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
	
		// Actual
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		//actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="18.00";
		expAdjustedQty="18.00";
		expBalance="0.00";
					
		expTotalQtyFooter="61.00";
		expTotalAdjustedQtyFooter="18.00";
		

		expRow1BatchNo="PVSWA";
		expRow1BaseQty="3.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="12.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();

		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="36.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="15.00";
		expRow2AdjustedQty="18.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="3.00";
		//expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="10.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
	    
	    System.out.println("********************************** checkBatchManualInputQtyAndOkButtonInBatchPopupUsingResevrationLinksInFourthRow  *************************************");
	    
	    System.out.println("BatchRows                                                          : "+actBatchRows              + " Value Expected : "+expBatchRows);
	    
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		System.out.println("Entry Page Batch Popup Row2 Batch No Qty Update Value Actual       : "+actRow2BatchNo            + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Entry Page Batch Popup Row2 Base Qty Qty Update Value Actual       : "+actRow2BaseQty            + " Value Expected : "+actRow2BaseQty);
		System.out.println("Entry Page Batch Popup Row2 Rate Qty Update Value Actual           : "+expRow2Rate               + " Value Expected : "+actRow2Rate);
		System.out.println("Entry Page Batch Popup Row2 Adjusted Qty Qty Update Value Actual   : "+actRow2AdjustedQty        + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row3 Batch No Qty Update Value Actual       : "+actRow3BatchNo            + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Entry Page Batch Popup Row3 Base Qty Qty Update Value Actual       : "+actRow3BaseQty            + " Value Expected : "+actRow3BaseQty);
		System.out.println("Entry Page Batch Popup Row3 Rate Qty Update Value Actual           : "+expRow3Rate               + " Value Expected : "+actRow3Rate);
		//System.out.println("Entry Page Batch Popup Row3 Adjusted Qty Qty Update Value Actual   : "+actRow3AdjustedQty        + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Entry Page Batch Popup Row4 Batch No Qty Update Value Actual       : "+actRow4BatchNo            + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Entry Page Batch Popup Row4 Base Qty Qty Update Value Actual       : "+actRow4BaseQty            + " Value Expected : "+actRow4BaseQty);
		System.out.println("Entry Page Batch Popup Row4 Rate Qty Update Value Actual           : "+expRow4Rate               + " Value Expected : "+actRow4Rate);
		System.out.println("Entry Page Batch Popup Row4 Adjusted Qty Qty Update Value Actual   : "+actRow4AdjustedQty        + " Value Expected : "+expRow4AdjustedQty);
		
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				//&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						
			return false;
		}
	}
	


	
	
	
	public boolean checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_13thColumn));
		
		String actBatchColumnValue=select4thRow_13thColumn.getText();
		
		String expBatchColumnValue="PVSWA";
		
		System.out.println("********************************** checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksInFourthRow  *************************************");
	    
	    System.out.println("BatchColumnValue          : "+actBatchColumnValue     + " Value Expected : "+expBatchColumnValue);
		
	    if(actBatchColumnValue.equalsIgnoreCase(expBatchColumnValue))
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
	    	return true;
	    }
	    else
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
	    	return false;	
	    }
	}



	// Fifth Row



	
	public boolean checkBalanceQtyInPendingLinksPopupScreenInSecondRowAfterConsumeInFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
		select5thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH WA ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_4thColumn));
		select5thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("2");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
			workFlowCloseBtn.click();
		}
		catch(Exception e)
		{
			System.err.println("RESERVED POP UP NOT DISPLAYED");
		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
		
		boolean actLSalesOrdersfifthrow=select5thRow_9thColumn.getText().isEmpty();
		
		boolean expLSalesOrdersfifthrow=true;	
		
		System.out.println("********************************** checkBalanceQtyInPendingLinksPopupScreenInSecondRowAfterConsumeInFifthRow  *************************************");
	    
	    System.out.println("LSalesOrdersfifthrow          : "+actLSalesOrdersfifthrow     + " Value Expected : "+expLSalesOrdersfifthrow);
		
		if(actLSalesOrdersfifthrow==expLSalesOrdersfifthrow)
		{
			System.out.println("Test Pass : Empty Column");
			return true;
		}
		else
		{
			return false;
		}
	}

	
	
	public boolean checkSavingVoucherWithBatchRelease() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
		fourthRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
		fourthRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		// Save Button
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		
		// Bill Wise reference Screen
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		
		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
		
		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		expBillNewReference="0.00";
		expBillAmtAdjAgainstNewRefInOtherVouchers="0.00";
		expBillTransactionCurrency="2953.00";
		expBillBaseCurrency="2953.00";
		expBillLocalCurrency="206.71";
		
		expBillBalanceNewRefAmount="0.00";
		
		expBillBreakUpByTagDepartment="INDIA";
		expBillBreakUpByTagBillCurrency="2953";
		expBillBreakUpByTagBaseCurrency="2953.00";
		
		
		expBillBreakUpByTagLocalCurrency="206.71";
		expBillAmtAdjustedInTransactionCurrency="0";
		expBillBalanceAmtToBeAdjustedInTransactionCurrency="2953.00";
	
		System.out.println("********************************** checkSavingVoucherWithBatchRelease  *************************************");
		
		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
 		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
 		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
 		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
 		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
        System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
 		System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
 		System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
 		System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
 		System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
		
		  
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		
		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
		
		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		expBillNewReferencePick="2953.00";
		expBillAmtAdjAgainstNewRefInOtherVouchersPick="0.00";
		expBillTransactionCurrencyPick="2953.00";
		expBillBaseCurrencyPick="2953.00";
		expBillLocalCurrencyPick="206.71";
		
		expBillBalanceNewRefAmountPick="2953.00";
		
		expBillBreakUpByTagDepartmentPick="INDIA";
		expBillBreakUpByTagBillCurrencyPick="2953";
		expBillBreakUpByTagBaseCurrencyPick="2953.00";
		
		expBillBreakUpByTagLocalCurrencyPick="206.71";
		expBillAmtAdjustedInTransactionCurrencyPick="2953";
		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick="0.00";
	
		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
 		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
 		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
 		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
 		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
 		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
        System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
 		System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
 		System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
 		System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
 		System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
 		System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
			    
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
	    Bill_OkBtn.click();
	   
	    boolean savingMessage=checkVoucherSavingMessage(docno);
		
	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
	
		if (savingMessage==true &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
				
				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			return true;
			
		}
		else
		{
			return false;	
		}
	}
	
	
	
	

	
	
	public boolean checkSalesInvoiceSavedVoucherOnPreviousOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();*/
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
				
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		// Actual
		
		String actdocumentNumberTxt=documentNumberTxt.getAttribute("value");
		
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		
		String actItemR1=select1stRow_1stColumn.getText();
		String actUnitsR1=select1stRow_2ndColumn.getText();
		String actRDR1=select1stRow_3rdColumn.getText();
		String actAqR1=select1stRow_4thColumn.getText();
		String actFqR1=select1stRow_5thColumn.getText();
		String actAvgRateR1=select1stRow_6thColumn.getText();
		String actAvgRateOR1=select1stRow_7thColumn.getText();
		String actQtyR1=select1stRow_8thColumn.getText();
		String actLSOR1=select1stRow_9thColumn.getText();
		String actQtyToReleaseR1=select1stRow_10thColumn.getText();
		String actRateR1=select1stRow_11thColumn.getText();
		String actGrossR1=select1stRow_12thColumn.getText();
		String actBatchR1=select1stRow_13thColumn.getText();
		
		String actItemR2=select2ndRow_1stColumn.getText();
		String actUnitsR2=select2ndRow_2ndColumn.getText();
		String actRDR2=select2ndRow_3rdColumn.getText();
		String actAqR2=select2ndRow_4thColumn.getText();
		String actFqR2=select2ndRow_5thColumn.getText();
		String actAvgRateR2=select2ndRow_6thColumn.getText();
		String actAvgRateOR2=select2ndRow_7thColumn.getText();
		String actQtyR2=select2ndRow_8thColumn.getText();
		String actLSOR2=select2ndRow_9thColumn.getText();
		String actQtyToReleaseR2=select2ndRow_10thColumn.getText();
		String actRateR2=select2ndRow_11thColumn.getText();
		String actGrossR2=select2ndRow_12thColumn.getText();
		String actBatchR2=select2ndRow_13thColumn.getText();
		
		String actItemR3=select3rdRow_1stColumn.getText();
		String actUnitsR3=select3rdRow_2ndColumn.getText();
		String actRDR3=select3rdRow_3rdColumn.getText();
		String actAqR3=select3rdRow_4thColumn.getText();
		String actFqR3=select3rdRow_5thColumn.getText();
		String actAvgRateR3=select3rdRow_6thColumn.getText();
		String actAvgRateOR3=select3rdRow_7thColumn.getText();
		String actQtyR3=select3rdRow_8thColumn.getText();
		String actLSOR3=select3rdRow_9thColumn.getText();
		String actQtyToReleaseR3=select3rdRow_10thColumn.getText();
		String actRateR3=select3rdRow_11thColumn.getText();
		String actGrossR3=select3rdRow_12thColumn.getText();
		String actBatchR3=select3rdRow_13thColumn.getText();
		
		String actso_footerQty=so_footerQty.getText();
		String actso_footerRDField=so_footerRDField.getText();
		String actso_footerAQ=so_footerAQ.getText();
		String actso_footerFQ=so_footerFQ.getText();
		String actsi_footerGross=si_footerGross.getText();
		String actso_footerNet=so_footerNet.getText();
		String actsi_AvgRate=si_AvgRate.getText();
		String actsi_AvgRateO=si_AvgRateO.getText();
		
		
		// Expected
		
		String expdocumentNumberTxt="3";
		
		String expcustomerAccountTxt="customer B";
		
		String expItemR1="BATCH WA ITEM";
		String expUnitsR1="Pcs";
		String expRDR1="0.00";
		String expAqR1="3.00";
		String expFqR1="0.00";
		String expAvgRateR1="56.25";
		String expAvgRateOR1="56.25";
		String expQtyR1="3.00";
		String expLSOR1="SalOrd:5";
		String expQtyToReleaseR1="3.00";
		String expRateR1="41.00";
		String expGrossR1="123.00";
		String expBatchR1="PVSWA";
		
		String expItemR2="BATCH WA ITEM";
		String expUnitsR2="Pcs";
		String expRDR2="0.00";
		String expAqR2="11.00";
		String expFqR2="0.00";
		String expAvgRateR2="56.25";
		String expAvgRateOR2="56.25";
		String expQtyR2="11.00";
		String expLSOR2="SalOrd:5";
		String expQtyToReleaseR2="11.00";
		String expRateR2="91.00";
		String expGrossR2="1,001.00";
		String expBatchR2="PVSWA";
		
		String expItemR3="BATCH WA ITEM";
		String expUnitsR3="Pcs";
		String expRDR3="0.00";
		String expAqR3="31.00";
		String expFqR3="0.00";
		String expAvgRateR3="56.25";
		String expAvgRateOR3="56.25";
		String expQtyR3="31.00";
		String expLSOR3="SalOrd:5";
		String expQtyToReleaseR3="31.00";
		String expRateR3="59.00";
		String expGrossR3="1,829.00";
		String expBatchR3="PVSWA";
		
		String expso_footerQty="45.00";
		String expso_footerRDField="0.00";
		String expso_footerAQ="45.00";
		String expso_footerFQ="0.00";
		String expsi_footerGross="2,953.00";
		String expso_footerNet="2,953.00";
		String expsi_AvgRate="168.75";
		String expsi_AvgRateO="168.75";
		
		System.out.println("********************************** checkSalesInvoiceSavedVoucherOnPreviousOption  *************************************");
		
		System.out.println("documentNumberTxt 		: "+actdocumentNumberTxt	+ " Value Expected : "+expdocumentNumberTxt);
 		System.out.println("customerAccountTxt		: " + actcustomerAccountTxt	+ "	Value Expected : "+expcustomerAccountTxt);
 			
 		System.out.println("ItemR1					: " + actItemR1				+ "	Value Expected : "+expItemR1);
 		System.out.println("UnitsR1					: " + actUnitsR1			+ "	Value Expected : "+expUnitsR1);
 		System.out.println("RDR1					: " + actRDR1				+ "	Value Expected : "+expRDR1);
 		System.out.println("AqR1					: " + actAqR1				+ "	Value Expected : "+expAqR1);
 		System.out.println("FqR1					: " + actFqR1				+ "	Value Expected : "+expFqR1);
 		System.out.println("AvgRateR1				: " + actAvgRateR1			+ "	Value Expected : "+expAvgRateR1);
 		System.out.println("AvgRateOR1				: " + actAvgRateOR1			+ "	Value Expected : "+expAvgRateOR1);
 		System.out.println("QtyR1					: " + actQtyR1				+ "	Value Expected : "+expQtyR1);
 		System.out.println("LSOR1					: " + actLSOR1				+ "	Value Expected : "+expLSOR1);
 		System.out.println("QtyToReleaseR1			: " + actQtyToReleaseR1		+ "	Value Expected : "+expQtyToReleaseR1);
 		System.out.println("RateR1					: " + actRateR1				+ "	Value Expected : "+expRateR1);
 		System.out.println("GrossR1					: " + actGrossR1			+ "	Value Expected : "+expGrossR1);
 		System.out.println("BatchR1					: " + actBatchR1			+ "	Value Expected : "+expBatchR1);
 		
 		System.out.println("ItemR2					: " + actItemR2				+ "	Value Expected : "+expItemR2);
 		System.out.println("UnitsR2					: " + actUnitsR2			+ "	Value Expected : "+expUnitsR2);
 		System.out.println("RDR2					: " + actRDR2				+ "	Value Expected : "+expRDR2);
 		System.out.println("AqR2					: " + actAqR2				+ "	Value Expected : "+expAqR2);
 		System.out.println("FqR2					: " + actFqR2				+ "	Value Expected : "+expFqR2);
 		System.out.println("AvgRateR2				: " + actAvgRateR2			+ "	Value Expected : "+expAvgRateR2);
 		System.out.println("AvgRateOR2				: " + actAvgRateOR2			+ "	Value Expected : "+expAvgRateOR2);
 		System.out.println("QtyR2					: " + actQtyR2				+ "	Value Expected : "+expQtyR2);
 		System.out.println("LSOR2					: " + actLSOR2				+ "	Value Expected : "+expLSOR2);
 		System.out.println("QtyToReleaseR2			: " + actQtyToReleaseR2		+ "	Value Expected : "+expQtyToReleaseR2);
 		System.out.println("RateR2					: " + actRateR2				+ "	Value Expected : "+expRateR2);
 		System.out.println("GrossR2					: " + actGrossR2			+ "	Value Expected : "+expGrossR2);
 		System.out.println("BatchR2					: " + actBatchR2			+ "	Value Expected : "+expBatchR2);
 		
 		System.out.println("ItemR3					: " + actItemR3				+ "	Value Expected : "+expItemR3);
 		System.out.println("UnitsR3					: " + actUnitsR3			+ "	Value Expected : "+expUnitsR3);
 		System.out.println("RDR3					: " + actRDR3				+ "	Value Expected : "+expRDR3);
 		System.out.println("AqR3					: " + actAqR3				+ "	Value Expected : "+expAqR3);
 		System.out.println("FqR3					: " + actFqR3				+ "	Value Expected : "+expFqR3);
 		System.out.println("AvgRateR3				: " + actAvgRateR3			+ "	Value Expected : "+expAvgRateR3);
 		System.out.println("AvgRateOR3				: " + actAvgRateOR3			+ "	Value Expected : "+expAvgRateOR3);
 		System.out.println("QtyR3					: " + actQtyR3				+ "	Value Expected : "+expQtyR3);
 		System.out.println("LSOR3					: " + actLSOR3				+ "	Value Expected : "+expLSOR3);
 		System.out.println("QtyToReleaseR3			: " + actQtyToReleaseR3		+ "	Value Expected : "+expQtyToReleaseR3);
 		System.out.println("RateR3					: " + actRateR3				+ "	Value Expected : "+expRateR3);
 		System.out.println("GrossR3					: " + actGrossR3			+ "	Value Expected : "+expGrossR3);
 		System.out.println("BatchR3					: " + actBatchR3			+ "	Value Expected : "+expBatchR3);
 		
 		System.out.println("so_footerQty			: " + actso_footerQty		+ "	Value Expected : "+expso_footerQty);
 		System.out.println("so_footerRDField		: " + actso_footerRDField	+ "	Value Expected : "+expso_footerRDField);
 		System.out.println("so_footerAQ				: " + actso_footerAQ		+ "	Value Expected : "+expso_footerAQ);
 		System.out.println("so_footerFQ				: " + actso_footerFQ		+ "	Value Expected : "+expso_footerFQ);
 		System.out.println("si_footerGross			: " + actsi_footerGross		+ "	Value Expected : "+expsi_footerGross);
 		System.out.println("so_footerNet			: " + actso_footerNet		+ "	Value Expected : "+expso_footerNet);
 		System.out.println("si_AvgRate				: " + actsi_AvgRate			+ "	Value Expected : "+expsi_AvgRate);
 		System.out.println("si_AvgRateO				: " + actsi_AvgRateO		+ "	Value Expected : "+expsi_AvgRateO);
 		
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1) && actRDR1.equalsIgnoreCase(expRDR1)
				&& actAqR1.equalsIgnoreCase(expAqR1) && actFqR1.equalsIgnoreCase(expFqR1) && actAvgRateR1.equalsIgnoreCase(expAvgRateR1)
				&& actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLSOR1.equalsIgnoreCase(expLSOR1)
				&& actQtyToReleaseR1.equalsIgnoreCase(expQtyToReleaseR1) && actRateR1.equalsIgnoreCase(expRateR1) 
				&& actGrossR1.equalsIgnoreCase(expGrossR1) && actBatchR1.equalsIgnoreCase(expBatchR1)
				
				&& actItemR2.equalsIgnoreCase(expItemR2) && actUnitsR2.equalsIgnoreCase(expUnitsR2) && actRDR2.equalsIgnoreCase(expRDR2)
				&& actAqR2.equalsIgnoreCase(expAqR2) && actFqR2.equalsIgnoreCase(expFqR2) && actAvgRateR2.equalsIgnoreCase(expAvgRateR2)
				&& actAvgRateOR2.equalsIgnoreCase(expAvgRateOR2) && actQtyR2.equalsIgnoreCase(expQtyR2) && actLSOR2.equalsIgnoreCase(expLSOR2)
				&& actQtyToReleaseR2.equalsIgnoreCase(expQtyToReleaseR2) && actRateR2.equalsIgnoreCase(expRateR2) 
				&& actGrossR2.equalsIgnoreCase(expGrossR2) && actBatchR2.equalsIgnoreCase(expBatchR2)
				
				&& actItemR3.equalsIgnoreCase(expItemR3) && actUnitsR3.equalsIgnoreCase(expUnitsR3) && actRDR3.equalsIgnoreCase(expRDR3)
				&& actAqR3.equalsIgnoreCase(expAqR3) && actFqR3.equalsIgnoreCase(expFqR3) && actAvgRateR3.equalsIgnoreCase(expAvgRateR3)
				&& actAvgRateOR3.equalsIgnoreCase(expAvgRateOR3) && actQtyR3.equalsIgnoreCase(expQtyR3) && actLSOR3.equalsIgnoreCase(expLSOR3)
				&& actQtyToReleaseR3.equalsIgnoreCase(expQtyToReleaseR3) && actRateR3.equalsIgnoreCase(expRateR3) 
				&& actGrossR3.equalsIgnoreCase(expGrossR3) && actBatchR3.equalsIgnoreCase(expBatchR3)
				
				&& actso_footerQty.equalsIgnoreCase(expso_footerQty) && actso_footerRDField.equalsIgnoreCase(expso_footerRDField)
				&& actso_footerAQ.equalsIgnoreCase(expso_footerAQ) && actso_footerFQ.equalsIgnoreCase(expso_footerFQ)
				&& actsi_footerGross.equalsIgnoreCase(expsi_footerGross) && actso_footerNet.equalsIgnoreCase(expso_footerNet)
				&& actsi_AvgRate.equalsIgnoreCase(expsi_AvgRate) && actsi_AvgRateO.equalsIgnoreCase(expsi_AvgRateO))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			Thread.sleep(2000);
			new_footerMinimizeBtn.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			Thread.sleep(2000);
			new_footerMinimizeBtn.click();
			
			return false;
		}
	}



	
	
	public boolean checkUpdatingVoucherByInputdataInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		select4thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH WA ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
		select4thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("0");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("18");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRadioBtnRowOne));
		workFlowRadioBtnRowOne.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
	/*
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
		select4thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("0");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("18");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		*/
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
		select4thRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		
		enter_Rate.clear();
		
		enter_Rate.sendKeys("49");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow2));
		batch_QtyAdjustedRow2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
		batch_EnterQtyAdjsuted.sendKeys("18");
		batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(2000);
		// Actual
		String actBatchColumnValue=select4thRow_13thColumn.getText();
		String actLSalesOrderAfterLinkSecltionLinewsie=select4thRow_9thColumn.getText();
	    String actQtyAfterLinkSecltionLinewsie=select4thRow_8thColumn.getText();
		String actReleaseQtyAfterLinkSecltionLinewsie=select4thRow_10thColumn.getText();
		
		// Expected
		String expBatchColumnValue="PVSWA";
		String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:5";
		String expQtyAfterLinkSecltionLinewsie="18.00";
		String expReleaseQtyAfterLinkSecltionLinewsie="16.00";
		
		
		System.out.println("********************************** checkUpdatingVoucherByInputdataInFourthRow  *************************************");
	    
	    System.out.println("BatchColumnValue          			  : "+actBatchColumnValue    					+ " Value Expected : "+expBatchColumnValue);
	    System.out.println("LSalesOrderAfterLinkSecltionLinewsie  : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
		System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
		System.out.println("ReleaseQtyAfterLinkSecltionLinewsie   : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
		
	    if(actBatchColumnValue.equalsIgnoreCase(expBatchColumnValue) 
	    		
	    		&& actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
				&& actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
				&& actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
				
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
	    	return true;
	    }
	    else
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
	    	return false;
	    }
	}
		
	
	
	
	public boolean checkUpdatingVoucherToCheckBalanceInFifthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
		select5thRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.LEFT_SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys("BATCH WA ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_4thColumn));
		select5thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("2");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
			workFlowCloseBtn.click();
		}
		catch(Exception e)
		{
			System.err.println("RESERVED POP UP NOT DISPLAYED");
		}
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
		
		boolean actLSalesOrdersfifthrow=select5thRow_9thColumn.getText().isEmpty();
		
		boolean expLSalesOrdersfifthrow=true;	
		
		System.out.println("********************************** checkUpdatingVoucherToCheckBalanceInFifthRow  *************************************");
	    
	    System.out.println("LSalesOrdersfifthrow          : "+actLSalesOrdersfifthrow     + " Value Expected : "+expLSalesOrdersfifthrow);
		
		if(actLSalesOrdersfifthrow==expLSalesOrdersfifthrow)
		{
			System.out.println("Test Pass : Empty Column");
			return true;
		}
		else
		{
			return false;
		}
	}
	

	
	public boolean checkUpdatingVoucherByDecreasingqtyinFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fifthRowIndex));
		fifthRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
		select4thRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("0");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("5");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
		select4thRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		
		enter_Rate.clear();
		
		enter_Rate.sendKeys("49");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_13thColumn));
		select4thRow_13thColumn.click(); 
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow2));
		batch_QtyAdjustedRow2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
		batch_EnterQtyAdjsuted.sendKeys("5");
		batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		*/
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_13thColumn));
			
		// Actual
		String actBatchColumnValue=select4thRow_13thColumn.getText();
		String actLSalesOrderAfterLinkSecltionLinewsie=select4thRow_9thColumn.getText();
	    String actQtyAfterLinkSecltionLinewsie=select4thRow_8thColumn.getText();
		String actReleaseQtyAfterLinkSecltionLinewsie=select4thRow_10thColumn.getText();
		
		// Expected
		String expBatchColumnValue="PVSWA";
		String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:5";
		String expQtyAfterLinkSecltionLinewsie="5.00";
		String expReleaseQtyAfterLinkSecltionLinewsie="5.00";
		
		
		System.out.println("********************************** checkUpdatingVoucherByDecreasingqtyinFourthRow  *************************************");
	    
	    System.out.println("BatchColumnValue          			  : "+actBatchColumnValue    					+ " Value Expected : "+expBatchColumnValue);
	    System.out.println("LSalesOrderAfterLinkSecltionLinewsie  : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
		System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
		System.out.println("ReleaseQtyAfterLinkSecltionLinewsie   : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
		
	    if(actBatchColumnValue.equalsIgnoreCase(expBatchColumnValue) 
	    		
	    		&& actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
				&& actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
				&& actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
				
			{
				System.out.println("Test Pass : Batch fields are As expected ");
				excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
				return true;
			}
			else
			{
				
				System.out.println("Test Pass : Batch fields are As expected ");
				excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
				return false;
				
			}
	}


	
	public boolean checkUpdatingVoucherByIncreasingqtyinThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("32");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
		enter_LSalesOrders.sendKeys(Keys.SPACE);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("32");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
		select3rdRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		
		enter_Rate.clear();
		
		enter_Rate.sendKeys("59");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
			
		// Actual
		String actBatchColumnValue=select3rdRow_13thColumn.getText();
		String actLSalesOrderAfterLinkSecltionLinewsie=select3rdRow_9thColumn.getText();
	    String actQtyAfterLinkSecltionLinewsie=select3rdRow_8thColumn.getText();
		String actReleaseQtyAfterLinkSecltionLinewsie=select3rdRow_10thColumn.getText();
		
		// Expected
		String expBatchColumnValue="PVSWA";
		String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:5";
		String expQtyAfterLinkSecltionLinewsie="32.00";
		String expReleaseQtyAfterLinkSecltionLinewsie="32.00";
		
		
		System.out.println("********************************** checkUpdatingVoucherByIncreasingqtyinThirdRow  *************************************");
	    
	    System.out.println("BatchColumnValue          			  : "+actBatchColumnValue    					+ " Value Expected : "+expBatchColumnValue);
	    System.out.println("LSalesOrderAfterLinkSecltionLinewsie  : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
		System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
		System.out.println("ReleaseQtyAfterLinkSecltionLinewsie   : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
		
	    if(actBatchColumnValue.equalsIgnoreCase(expBatchColumnValue) 
	    		
	    		&& actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
				&& actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
				&& actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
				
			{
				System.out.println("Test Pass : Batch fields are As expected ");
				excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
				return true;
			}
			else
			{
				
				System.out.println("Test Pass : Batch fields are As expected ");
				excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
				return false;
				
			}
	}
	


	
	
	public boolean checkSavingVoucherWithBatchReleaseAfterUpdating() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		
		// Save Button
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		
		// Bill Wise reference Screen
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		Thread.sleep(2000);
		
		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
		
		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		expBillNewReference="2953.00";
		expBillAmtAdjAgainstNewRefInOtherVouchers="0.00";
		expBillTransactionCurrency="3257.00";
		expBillBaseCurrency="3257.00";
		expBillLocalCurrency="227.99";
		
		expBillBalanceNewRefAmount="2953.00";
		
		expBillBreakUpByTagDepartment="INDIA";
		expBillBreakUpByTagBillCurrency="3257";
		expBillBreakUpByTagBaseCurrency="3257.00";
		
		
		expBillBreakUpByTagLocalCurrency="227.99";
		expBillAmtAdjustedInTransactionCurrency="2953";
		expBillBalanceAmtToBeAdjustedInTransactionCurrency="304.00";
	
	
		System.out.println("********************************** checkSavingVoucherWithBatchReleaseAfterUpdating  *************************************");
		
		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
	    System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
	    System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
	    System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
	    System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
	    System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
	    System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
		
	    Thread.sleep(2000);
		   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		Thread.sleep(2000);
		
		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
		
		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		expBillNewReferencePick="3257.00";
		expBillAmtAdjAgainstNewRefInOtherVouchersPick="0.00";
		expBillTransactionCurrencyPick="3257.00";
		expBillBaseCurrencyPick="3257.00";
		expBillLocalCurrencyPick="227.99";
		
		expBillBalanceNewRefAmountPick="3257.00";
		
		expBillBreakUpByTagDepartmentPick="INDIA";
		expBillBreakUpByTagBillCurrencyPick="3257";
		expBillBreakUpByTagBaseCurrencyPick="3257.00";
		
		
		expBillBreakUpByTagLocalCurrencyPick="227.99";
		expBillAmtAdjustedInTransactionCurrencyPick="3257";
		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick="0.00";
	
		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
	    System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
	    System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
	    System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
	    System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
	    System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
	    System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
			    
		Thread.sleep(2000);
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
	    Bill_OkBtn.click();
	   
	   
	    boolean savingMessage=checkVoucherSavingMessage(docno);
		
	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
	
		if (savingMessage==true &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
				
				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
			
			return true;
			
		}
		else
		{
			return false;	
		}
	}




	
	public boolean checkSalesInvoiceSavedVoucherAfterUpdatingOnPreviousOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
				
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
		new_footerExpandBtn.click();
		
		// Actual
		
		String actdocumentNumberTxt=documentNumberTxt.getAttribute("value");
		
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		
		String actItemR1=select1stRow_1stColumn.getText();
		String actUnitsR1=select1stRow_2ndColumn.getText();
		String actRDR1=select1stRow_3rdColumn.getText();
		String actAqR1=select1stRow_4thColumn.getText();
		String actFqR1=select1stRow_5thColumn.getText();
		String actAvgRateR1=select1stRow_6thColumn.getText();
		String actAvgRateOR1=select1stRow_7thColumn.getText();
		String actQtyR1=select1stRow_8thColumn.getText();
		String actLSOR1=select1stRow_9thColumn.getText();
		String actQtyToReleaseR1=select1stRow_10thColumn.getText();
		String actRateR1=select1stRow_11thColumn.getText();
		String actGrossR1=select1stRow_12thColumn.getText();
		String actBatchR1=select1stRow_13thColumn.getText();
		
		String actItemR2=select2ndRow_1stColumn.getText();
		String actUnitsR2=select2ndRow_2ndColumn.getText();
		String actRDR2=select2ndRow_3rdColumn.getText();
		String actAqR2=select2ndRow_4thColumn.getText();
		String actFqR2=select2ndRow_5thColumn.getText();
		String actAvgRateR2=select2ndRow_6thColumn.getText();
		String actAvgRateOR2=select2ndRow_7thColumn.getText();
		String actQtyR2=select2ndRow_8thColumn.getText();
		String actLSOR2=select2ndRow_9thColumn.getText();
		String actQtyToReleaseR2=select2ndRow_10thColumn.getText();
		String actRateR2=select2ndRow_11thColumn.getText();
		String actGrossR2=select2ndRow_12thColumn.getText();
		String actBatchR2=select2ndRow_13thColumn.getText();
		
		String actItemR3=select3rdRow_1stColumn.getText();
		String actUnitsR3=select3rdRow_2ndColumn.getText();
		String actRDR3=select3rdRow_3rdColumn.getText();
		String actAqR3=select3rdRow_4thColumn.getText();
		String actFqR3=select3rdRow_5thColumn.getText();
		String actAvgRateR3=select3rdRow_6thColumn.getText();
		String actAvgRateOR3=select3rdRow_7thColumn.getText();
		String actQtyR3=select3rdRow_8thColumn.getText();
		String actLSOR3=select3rdRow_9thColumn.getText();
		String actQtyToReleaseR3=select3rdRow_10thColumn.getText();
		String actRateR3=select3rdRow_11thColumn.getText();
		String actGrossR3=select3rdRow_12thColumn.getText();
		String actBatchR3=select3rdRow_13thColumn.getText();
		
		String actItemR4=select4thRow_1stColumn.getText();
		String actUnitsR4=select4thRow_2ndColumn.getText();
		String actRDR4=select4thRow_3rdColumn.getText();
		String actAqR4=select4thRow_4thColumn.getText();
		String actFqR4=select4thRow_5thColumn.getText();
		String actAvgRateR4=select4thRow_6thColumn.getText();
		String actAvgRateOR4=select4thRow_7thColumn.getText();
		String actQtyR4=select4thRow_8thColumn.getText();
		String actLSOR4=select4thRow_9thColumn.getText();
		String actQtyToReleaseR4=select4thRow_10thColumn.getText();
		String actRateR4=select4thRow_11thColumn.getText();
		String actGrossR4=select4thRow_12thColumn.getText();
		String actBatchR4=select1stRow_13thColumn.getText();
		
		
		String actso_footerQty=so_footerQty.getText();
		String actso_footerRDField=so_footerRDField.getText();
		String actso_footerAQ=so_footerAQ.getText();
		String actso_footerFQ=so_footerFQ.getText();
		String actsi_footerGross=si_footerGross.getText();
		String actso_footerNet=so_footerNet.getText();
		String actsi_AvgRate=si_AvgRate.getText();
		String actsi_AvgRateO=si_AvgRateO.getText();
		
		
		// Expected
		
		String expdocumentNumberTxt="3";
		
		String expcustomerAccountTxt="customer B";
		
		String expItemR1="BATCH WA ITEM";
		String expUnitsR1="Pcs";
		String expRDR1="0.00";
		String expAqR1="3.00";
		String expFqR1="0.00";
		String expAvgRateR1="56.25";
		String expAvgRateOR1="56.25";
		String expQtyR1="3.00";
		String expLSOR1="SalOrd:5";
		String expQtyToReleaseR1="3.00";
		String expRateR1="41.00";
		String expGrossR1="123.00";
		String expBatchR1="PVSWA";
		
		String expItemR2="BATCH WA ITEM";
		String expUnitsR2="Pcs";
		String expRDR2="0.00";
		String expAqR2="11.00";
		String expFqR2="0.00";
		String expAvgRateR2="56.25";
		String expAvgRateOR2="56.25";
		String expQtyR2="11.00";
		String expLSOR2="SalOrd:5";
		String expQtyToReleaseR2="11.00";
		String expRateR2="91.00";
		String expGrossR2="1,001.00";
		String expBatchR2="PVSWA";
		
		String expItemR3="BATCH WA ITEM";
		String expUnitsR3="Pcs";
		String expRDR3="0.00";
		String expAqR3="32.00";
		String expFqR3="0.00";
		String expAvgRateR3="56.25";
		String expAvgRateOR3="56.25";
		String expQtyR3="32.00";
		String expLSOR3="SalOrd:5";
		String expQtyToReleaseR3="32.00";
		String expRateR3="59.00";
		String expGrossR3="1,888.00";
		String expBatchR3="PVSWA";
		
		String expItemR4="BATCH WA ITEM";
		String expUnitsR4="Pcs";
		String expRDR4="0.00";
		String expAqR4="0.00";
		String expFqR4="5.00";
		String expAvgRateR4="56.25";
		String expAvgRateOR4="56.25";
		String expQtyR4="5.00";
		String expLSOR4="SalOrd:5";
		String expQtyToReleaseR4="5.00";
		String expRateR4="49.00";
		String expGrossR4="245.00";
		String expBatchR4="PVSWA";
		
		
		String expso_footerQty="51.00";
		String expso_footerRDField="0.00";
		String expso_footerAQ="46.00";
		String expso_footerFQ="5.00";
		String expsi_footerGross="3,257.00";
		String expso_footerNet="3,257.00";
		String expsi_AvgRate="225.00";
		String expsi_AvgRateO="225.00";
		
		System.out.println("********************************** checkSalesInvoiceSavedVoucherAfterUpdatingOnPreviousOption  *************************************");
		
		System.out.println("documentNumberTxt 		: "+actdocumentNumberTxt	+ " Value Expected : "+expdocumentNumberTxt);
 		System.out.println("customerAccountTxt		: " + actcustomerAccountTxt	+ "	Value Expected : "+expcustomerAccountTxt);
 			
 		System.out.println("ItemR1					: " + actItemR1				+ "	Value Expected : "+expItemR1);
 		System.out.println("UnitsR1					: " + actUnitsR1			+ "	Value Expected : "+expUnitsR1);
 		System.out.println("RDR1					: " + actRDR1				+ "	Value Expected : "+expRDR1);
 		System.out.println("AqR1					: " + actAqR1				+ "	Value Expected : "+expAqR1);
 		System.out.println("FqR1					: " + actFqR1				+ "	Value Expected : "+expFqR1);
 		System.out.println("AvgRateR1				: " + actAvgRateR1			+ "	Value Expected : "+expAvgRateR1);
 		System.out.println("AvgRateOR1				: " + actAvgRateOR1			+ "	Value Expected : "+expAvgRateOR1);
 		System.out.println("QtyR1					: " + actQtyR1				+ "	Value Expected : "+expQtyR1);
 		System.out.println("LSOR1					: " + actLSOR1				+ "	Value Expected : "+expLSOR1);
 		System.out.println("QtyToReleaseR1			: " + actQtyToReleaseR1		+ "	Value Expected : "+expQtyToReleaseR1);
 		System.out.println("RateR1					: " + actRateR1				+ "	Value Expected : "+expRateR1);
 		System.out.println("GrossR1					: " + actGrossR1			+ "	Value Expected : "+expGrossR1);
 		System.out.println("BatchR1					: " + actBatchR1			+ "	Value Expected : "+expBatchR1);
 		
 		System.out.println("ItemR2					: " + actItemR2				+ "	Value Expected : "+expItemR2);
 		System.out.println("UnitsR2					: " + actUnitsR2			+ "	Value Expected : "+expUnitsR2);
 		System.out.println("RDR2					: " + actRDR2				+ "	Value Expected : "+expRDR2);
 		System.out.println("AqR2					: " + actAqR2				+ "	Value Expected : "+expAqR2);
 		System.out.println("FqR2					: " + actFqR2				+ "	Value Expected : "+expFqR2);
 		System.out.println("AvgRateR2				: " + actAvgRateR2			+ "	Value Expected : "+expAvgRateR2);
 		System.out.println("AvgRateOR2				: " + actAvgRateOR2			+ "	Value Expected : "+expAvgRateOR2);
 		System.out.println("QtyR2					: " + actQtyR2				+ "	Value Expected : "+expQtyR2);
 		System.out.println("LSOR2					: " + actLSOR2				+ "	Value Expected : "+expLSOR2);
 		System.out.println("QtyToReleaseR2			: " + actQtyToReleaseR2		+ "	Value Expected : "+expQtyToReleaseR2);
 		System.out.println("RateR2					: " + actRateR2				+ "	Value Expected : "+expRateR2);
 		System.out.println("GrossR2					: " + actGrossR2			+ "	Value Expected : "+expGrossR2);
 		System.out.println("BatchR2					: " + actBatchR2			+ "	Value Expected : "+expBatchR2);
 		
 		System.out.println("ItemR3					: " + actItemR3				+ "	Value Expected : "+expItemR3);
 		System.out.println("UnitsR3					: " + actUnitsR3			+ "	Value Expected : "+expUnitsR3);
 		System.out.println("RDR3					: " + actRDR3				+ "	Value Expected : "+expRDR3);
 		System.out.println("AqR3					: " + actAqR3				+ "	Value Expected : "+expAqR3);
 		System.out.println("FqR3					: " + actFqR3				+ "	Value Expected : "+expFqR3);
 		System.out.println("AvgRateR3				: " + actAvgRateR3			+ "	Value Expected : "+expAvgRateR3);
 		System.out.println("AvgRateOR3				: " + actAvgRateOR3			+ "	Value Expected : "+expAvgRateOR3);
 		System.out.println("QtyR3					: " + actQtyR3				+ "	Value Expected : "+expQtyR3);
 		System.out.println("LSOR3					: " + actLSOR3				+ "	Value Expected : "+expLSOR3);
 		System.out.println("QtyToReleaseR3			: " + actQtyToReleaseR3		+ "	Value Expected : "+expQtyToReleaseR3);
 		System.out.println("RateR3					: " + actRateR3				+ "	Value Expected : "+expRateR3);
 		System.out.println("GrossR3					: " + actGrossR3			+ "	Value Expected : "+expGrossR3);
 		System.out.println("BatchR3					: " + actBatchR3			+ "	Value Expected : "+expBatchR3);
 		
 		System.out.println("ItemR4					: " + actItemR4				+ "	Value Expected : "+expItemR4);
 		System.out.println("UnitsR4					: " + actUnitsR4			+ "	Value Expected : "+expUnitsR4);
 		System.out.println("RDR4					: " + actRDR4				+ "	Value Expected : "+expRDR4);
 		System.out.println("AqR4					: " + actAqR4				+ "	Value Expected : "+expAqR4);
 		System.out.println("FqR4					: " + actFqR4				+ "	Value Expected : "+expFqR4);
 		System.out.println("AvgRateR4				: " + actAvgRateR4			+ "	Value Expected : "+expAvgRateR4);
 		System.out.println("AvgRateOR4				: " + actAvgRateOR4			+ "	Value Expected : "+expAvgRateOR4);
 		System.out.println("QtyR4					: " + actQtyR4				+ "	Value Expected : "+expQtyR4);
 		System.out.println("LSOR4					: " + actLSOR4				+ "	Value Expected : "+expLSOR4);
 		System.out.println("QtyToReleaseR4			: " + actQtyToReleaseR4		+ "	Value Expected : "+expQtyToReleaseR4);
 		System.out.println("RateR4					: " + actRateR4				+ "	Value Expected : "+expRateR4);
 		System.out.println("GrossR4					: " + actGrossR4			+ "	Value Expected : "+expGrossR4);
 		System.out.println("BatchR4					: " + actBatchR4			+ "	Value Expected : "+expBatchR4);
 		
 		System.out.println("so_footerQty			: " + actso_footerQty		+ "	Value Expected : "+expso_footerQty);
 		System.out.println("so_footerRDField		: " + actso_footerRDField	+ "	Value Expected : "+expso_footerRDField);
 		System.out.println("so_footerAQ				: " + actso_footerAQ		+ "	Value Expected : "+expso_footerAQ);
 		System.out.println("so_footerFQ				: " + actso_footerFQ		+ "	Value Expected : "+expso_footerFQ);
 		System.out.println("si_footerGross			: " + actsi_footerGross		+ "	Value Expected : "+expsi_footerGross);
 		System.out.println("so_footerNet			: " + actso_footerNet		+ "	Value Expected : "+expso_footerNet);
 		System.out.println("si_AvgRate				: " + actsi_AvgRate			+ "	Value Expected : "+expsi_AvgRate);
 		System.out.println("si_AvgRateO				: " + actsi_AvgRateO		+ "	Value Expected : "+expsi_AvgRateO);
 		
		
		if(actdocumentNumberTxt.equalsIgnoreCase(expdocumentNumberTxt) && actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt)
				
				&& actItemR1.equalsIgnoreCase(expItemR1) && actUnitsR1.equalsIgnoreCase(expUnitsR1) && actRDR1.equalsIgnoreCase(expRDR1)
				&& actAqR1.equalsIgnoreCase(expAqR1) && actFqR1.equalsIgnoreCase(expFqR1) && actAvgRateR1.equalsIgnoreCase(expAvgRateR1)
				&& actAvgRateOR1.equalsIgnoreCase(expAvgRateOR1) && actQtyR1.equalsIgnoreCase(expQtyR1) && actLSOR1.equalsIgnoreCase(expLSOR1)
				&& actQtyToReleaseR1.equalsIgnoreCase(expQtyToReleaseR1) && actRateR1.equalsIgnoreCase(expRateR1) 
				&& actGrossR1.equalsIgnoreCase(expGrossR1) && actBatchR1.equalsIgnoreCase(expBatchR1)
				
				&& actItemR2.equalsIgnoreCase(expItemR2) && actUnitsR2.equalsIgnoreCase(expUnitsR2) && actRDR2.equalsIgnoreCase(expRDR2)
				&& actAqR2.equalsIgnoreCase(expAqR2) && actFqR2.equalsIgnoreCase(expFqR2) && actAvgRateR2.equalsIgnoreCase(expAvgRateR2)
				&& actAvgRateOR2.equalsIgnoreCase(expAvgRateOR2) && actQtyR2.equalsIgnoreCase(expQtyR2) && actLSOR2.equalsIgnoreCase(expLSOR2)
				&& actQtyToReleaseR2.equalsIgnoreCase(expQtyToReleaseR2) && actRateR2.equalsIgnoreCase(expRateR2) 
				&& actGrossR2.equalsIgnoreCase(expGrossR2) && actBatchR2.equalsIgnoreCase(expBatchR2)
				
				&& actItemR3.equalsIgnoreCase(expItemR3) && actUnitsR3.equalsIgnoreCase(expUnitsR3) && actRDR3.equalsIgnoreCase(expRDR3)
				&& actAqR3.equalsIgnoreCase(expAqR3) && actFqR3.equalsIgnoreCase(expFqR3) && actAvgRateR3.equalsIgnoreCase(expAvgRateR3)
				&& actAvgRateOR3.equalsIgnoreCase(expAvgRateOR3) && actQtyR3.equalsIgnoreCase(expQtyR3) && actLSOR3.equalsIgnoreCase(expLSOR3)
				&& actQtyToReleaseR3.equalsIgnoreCase(expQtyToReleaseR3) && actRateR3.equalsIgnoreCase(expRateR3) 
				&& actGrossR3.equalsIgnoreCase(expGrossR3) && actBatchR3.equalsIgnoreCase(expBatchR3)
				
				&& actItemR4.equalsIgnoreCase(expItemR4) && actUnitsR4.equalsIgnoreCase(expUnitsR4) && actRDR4.equalsIgnoreCase(expRDR4)
				&& actAqR4.equalsIgnoreCase(expAqR4) && actFqR4.equalsIgnoreCase(expFqR4) && actAvgRateR4.equalsIgnoreCase(expAvgRateR4)
				&& actAvgRateOR4.equalsIgnoreCase(expAvgRateOR4) && actQtyR4.equalsIgnoreCase(expQtyR4) && actLSOR4.equalsIgnoreCase(expLSOR4)
				&& actQtyToReleaseR4.equalsIgnoreCase(expQtyToReleaseR4) && actRateR4.equalsIgnoreCase(expRateR4) 
				&& actGrossR4.equalsIgnoreCase(expGrossR4) && actBatchR4.equalsIgnoreCase(expBatchR4)
				
				&& actso_footerQty.equalsIgnoreCase(expso_footerQty) && actso_footerRDField.equalsIgnoreCase(expso_footerRDField)
				&& actso_footerAQ.equalsIgnoreCase(expso_footerAQ) && actso_footerFQ.equalsIgnoreCase(expso_footerFQ)
				&& actsi_footerGross.equalsIgnoreCase(expsi_footerGross) && actso_footerNet.equalsIgnoreCase(expso_footerNet)
				&& actsi_AvgRate.equalsIgnoreCase(expsi_AvgRate) && actsi_AvgRateO.equalsIgnoreCase(expsi_AvgRateO))
		{
			System.out.println("Test Pass : Voucher Data is Correct");
			
			new_footerMinimizeBtn.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Data is NOT Correct");
			
			new_footerMinimizeBtn.click();
			
			return false;
		}
	}
	




	
	public boolean checkBalanceQtyInPendingLinksPopUpAndBatchQtyInBatchPopupInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
		enter_LSalesOrders.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
	            
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
				
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
		
		// Expected
		
		int expLinkRowCountValue=2;
		
		boolean expsearchOnDropdown=true;
		boolean expcontainingDropdown=true;
		boolean expworkFlowSearchTxt=true;
		boolean expworkFlowCustomizeBtn=true;
		boolean expworkFlowOkBtn=true;
		
		String expworkFlowRow1Column1="SalOrd:5";
		String expworkFlowRow1Column3="BATCH WA ITEM";
		String expworkFlowRow1Column4="12.00";
		String expworkFlowRow1Column5="0.00";
		
		String expworkFlowRow2Column1="SalOrd:5";
		String expworkFlowRow2Column3="BATCH WA ITEM";
		String expworkFlowRow2Column4="3.00";
		String expworkFlowRow2Column5="0.00";
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
		workFlowCloseBtn.click();
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		select1stRow_13thColumn.click();
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();

		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="3";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="3.00";
		expAdjustedQty="3.00";
		expBalance="0.00";
					
		expTotalQtyFooter="48.00";
		expTotalAdjustedQtyFooter="3.00";
		

		expRow1BatchNo="PVSWA";
		expRow1BaseQty="13.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="15.00";
		expRow1AdjustedQty="3";
		//exp10=batch_PurchaseDateRow1.getText();

		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="3.00";
		expRow2AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="23.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="15.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer B";
	    
		System.out.println("**************************************** checkBalanceQtyInPendingLinksPopUpAndBatchQtyInBatchPopupInFirstRow  ***************************************");
		
		System.out.println("LinkRowCountValue  			: "+actLinkRowCountValue		+" 	Value Expected : "+expLinkRowCountValue);
		
		System.out.println("searchOnDropdown  			: "+actsearchOnDropdown			+" 	Value Expected : "+expsearchOnDropdown);
		System.out.println("containingDropdown  		: "+actcontainingDropdown		+" 	Value Expected : "+expcontainingDropdown);
		System.out.println("workFlowSearchTxt  			: "+actworkFlowSearchTxt		+" 	Value Expected : "+expworkFlowSearchTxt);
		System.out.println("workFlowCustomizeBtn  		: "+actworkFlowCustomizeBtn		+" 	Value Expected : "+expworkFlowCustomizeBtn);
		System.out.println("workFlowOkBtn  				: "+actworkFlowOkBtn			+" 	Value Expected : "+expworkFlowOkBtn);
		
		System.out.println("workFlowRow1Column1 	 	: "+actworkFlowRow1Column1		+" 	Value Expected : "+expworkFlowRow1Column1);
		System.out.println("workFlowRow1Column3  		: "+actworkFlowRow1Column3		+" 	Value Expected : "+expworkFlowRow1Column3);
		System.out.println("workFlowRow1Column4  		: "+actworkFlowRow1Column4		+" 	Value Expected : "+expworkFlowRow1Column4);
		System.out.println("workFlowRow1Column5  		: "+actworkFlowRow1Column5		+" 	Value Expected : "+expworkFlowRow1Column5);
		
		System.out.println("workFlowRow2Column1  		: "+actworkFlowRow2Column1		+" 	Value Expected : "+expworkFlowRow2Column1);
		System.out.println("workFlowRow2Column3  		: "+actworkFlowRow2Column3		+" 	Value Expected : "+expworkFlowRow2Column3);
		System.out.println("workFlowRow2Column4  		: "+actworkFlowRow2Column4		+" 	Value Expected : "+expworkFlowRow2Column4);
		System.out.println("workFlowRow2Column5  		: "+actworkFlowRow2Column5		+" 	Value Expected : "+expworkFlowRow2Column5);
		
		System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	+ " Value Expected : "+expcustomerAccountTxt);	
		  
		System.out.println("BatchRows                   : "+actBatchRows                + " Value Expected : "+expBatchRows);
		
		System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	+ " Value Expected : "+expBatchName);	
		System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
		System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
		System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
		System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
		
		System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
		System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
		System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Batch Popup Row2 Batch No   : "+actRow2BatchNo              + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Batch Popup Row2 Base Qty   : "+actRow2BaseQty              + " Value Expected : "+actRow2BaseQty);
		System.out.println("Batch Popup Row2 Rate       : "+expRow2Rate                 + " Value Expected : "+actRow2Rate);
		System.out.println("Batch Popup Row2 AdjustedQty: "+actRow2AdjustedQty          + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Batch Popup Row3 Batch No   : "+actRow3BatchNo              + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Batch Popup Row3 Base Qty   : "+actRow3BaseQty              + " Value Expected : "+actRow3BaseQty);
		System.out.println("Batch Popup Row3 Rate       : "+expRow3Rate                 + " Value Expected : "+actRow3Rate);
		System.out.println("Batch Popup Row3 AdjustedQty: "+actRow3AdjustedQty          + " Value Expected : "+expRow3AdjustedQty);
		
		
				
		if(actLinkRowCountValue==expLinkRowCountValue
				
				&& actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
				&& actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
				
				&& actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
				&& actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
				&& actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
				&& actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
				
				&& actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
				&& actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
				&& actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
				&& actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)
				
				&& actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
				
			return false;
		}
	}
	


	
	
	public boolean checkBalanceQtyInPendingLinksPopUpAndBatchQtyInBatchPopupInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
		enter_LSalesOrders.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
	            
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
				
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
		
		// Expected
		
		int expLinkRowCountValue=2;
		
		boolean expsearchOnDropdown=true;
		boolean expcontainingDropdown=true;
		boolean expworkFlowSearchTxt=true;
		boolean expworkFlowCustomizeBtn=true;
		boolean expworkFlowOkBtn=true;
		
		String expworkFlowRow1Column1="SalOrd:5";
		String expworkFlowRow1Column3="BATCH WA ITEM";
		String expworkFlowRow1Column4="12.00";
		String expworkFlowRow1Column5="0.00";
		
		String expworkFlowRow2Column1="SalOrd:5";
		String expworkFlowRow2Column3="BATCH WA ITEM";
		String expworkFlowRow2Column4="11.00";
		String expworkFlowRow2Column5="0.00";
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
		workFlowCloseBtn.click();
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_13thColumn));
		select2ndRow_13thColumn.click();
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
		// Actual
		System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();
		
		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		String expBatchRows="3";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="11.00";
		expAdjustedQty="11.00";
		expBalance="0.00";
		
		expTotalQtyFooter="56.00";
		expTotalAdjustedQtyFooter="11.00";
		
		
		expRow1BatchNo="PVSWA";
		expRow1BaseQty="21.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="15.00";
		expRow1AdjustedQty="11";
		//exp10=batch_PurchaseDateRow1.getText();
		
		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="3.00";
		expRow2AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="23.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="15.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		String expcustomerAccountTxt="Customer B";
		
		
		System.out.println("**************************************** checkBalanceQtyInPendingLinksPopUpAndBatchQtyInBatchPopupInSecondRow  ***************************************");
		
		System.out.println("LinkRowCountValue  			: "+actLinkRowCountValue		+" 	Value Expected : "+expLinkRowCountValue);
		
		System.out.println("searchOnDropdown  			: "+actsearchOnDropdown			+" 	Value Expected : "+expsearchOnDropdown);
		System.out.println("containingDropdown  		: "+actcontainingDropdown		+" 	Value Expected : "+expcontainingDropdown);
		System.out.println("workFlowSearchTxt  			: "+actworkFlowSearchTxt		+" 	Value Expected : "+expworkFlowSearchTxt);
		System.out.println("workFlowCustomizeBtn  		: "+actworkFlowCustomizeBtn		+" 	Value Expected : "+expworkFlowCustomizeBtn);
		System.out.println("workFlowOkBtn  				: "+actworkFlowOkBtn			+" 	Value Expected : "+expworkFlowOkBtn);
		
		System.out.println("workFlowRow1Column1 	 	: "+actworkFlowRow1Column1		+" 	Value Expected : "+expworkFlowRow1Column1);
		System.out.println("workFlowRow1Column3  		: "+actworkFlowRow1Column3		+" 	Value Expected : "+expworkFlowRow1Column3);
		System.out.println("workFlowRow1Column4  		: "+actworkFlowRow1Column4		+" 	Value Expected : "+expworkFlowRow1Column4);
		System.out.println("workFlowRow1Column5  		: "+actworkFlowRow1Column5		+" 	Value Expected : "+expworkFlowRow1Column5);
		
		System.out.println("workFlowRow2Column1  		: "+actworkFlowRow2Column1		+" 	Value Expected : "+expworkFlowRow2Column1);
		System.out.println("workFlowRow2Column3  		: "+actworkFlowRow2Column3		+" 	Value Expected : "+expworkFlowRow2Column3);
		System.out.println("workFlowRow2Column4  		: "+actworkFlowRow2Column4		+" 	Value Expected : "+expworkFlowRow2Column4);
		System.out.println("workFlowRow2Column5  		: "+actworkFlowRow2Column5		+" 	Value Expected : "+expworkFlowRow2Column5);
		
		System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	+ " Value Expected : "+expcustomerAccountTxt);	
		
		System.out.println("BatchRows                   : "+actBatchRows             	+ " Value Expected : "+expBatchRows);
		
		System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	+ " Value Expected : "+expBatchName);	
		System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
		System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
		System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
		System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
		System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
		System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Batch Popup Row2 Batch No   : "+actRow2BatchNo              + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Batch Popup Row2 Base Qty   : "+actRow2BaseQty              + " Value Expected : "+actRow2BaseQty);
		System.out.println("Batch Popup Row2 Rate       : "+expRow2Rate                 + " Value Expected : "+actRow2Rate);
		System.out.println("Batch Popup Row2 AdjustedQty: "+actRow2AdjustedQty          + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Batch Popup Row3 Batch No   : "+actRow3BatchNo              + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Batch Popup Row3 Base Qty   : "+actRow3BaseQty              + " Value Expected : "+actRow3BaseQty);
		System.out.println("Batch Popup Row3 Rate       : "+expRow3Rate                 + " Value Expected : "+actRow3Rate);
		System.out.println("Batch Popup Row3 AdjustedQty: "+actRow3AdjustedQty          + " Value Expected : "+expRow3AdjustedQty);
		
		if(actLinkRowCountValue==expLinkRowCountValue
				
				&& actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
				&& actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
					
				&& actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
				&& actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
				&& actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
				&& actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
					
				&& actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
				&& actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
				&& actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
				&& actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)
				
				&& actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty))
		{	
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
					
			return false;
		}
	}

	



	

	public boolean checkBalanceQtyInPendingLinksPopUpAndBatchQtyInBatchPopupInThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
		select3rdRow_9thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
		enter_LSalesOrders.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
	            
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
				
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		// Expected
		
		int expLinkRowCountValue=1;
		
		boolean expsearchOnDropdown=true;
		boolean expcontainingDropdown=true;
		boolean expworkFlowSearchTxt=true;
		boolean expworkFlowCustomizeBtn=true;
		boolean expworkFlowOkBtn=true;
		
		String expworkFlowRow1Column1="SalOrd:5";
		String expworkFlowRow1Column3="BATCH WA ITEM";
		String expworkFlowRow1Column4="44.00";
		String expworkFlowRow1Column5="0.00";
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
		workFlowCloseBtn.click();
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_13thColumn));
		select3rdRow_13thColumn.click();
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
		System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
			
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();
		
		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="32.00";
		expAdjustedQty="32.00";
		expBalance="0.00";
					
		expTotalQtyFooter="87.00";
		expTotalAdjustedQtyFooter="32.00";
		
		
		expRow1BatchNo="PVSWA";
		expRow1BaseQty="34.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="12.00";
		expRow1AdjustedQty="32";
		//exp10=batch_PurchaseDateRow1.getText();
		
		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="31.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="15.00";
		expRow2AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="3.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="10.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		String expcustomerAccountTxt="Customer B";
		
		
		System.out.println("**************************************** checkBalanceQtyInPendingLinksPopUpAndBatchQtyInBatchPopupInThirdRow  ***************************************");
		
		System.out.println("LinkRowCountValue  			: "+actLinkRowCountValue		+" 	Value Expected : "+expLinkRowCountValue);
		
		System.out.println("searchOnDropdown  			: "+actsearchOnDropdown			+" 	Value Expected : "+expsearchOnDropdown);
		System.out.println("containingDropdown  		: "+actcontainingDropdown		+" 	Value Expected : "+expcontainingDropdown);
		System.out.println("workFlowSearchTxt  			: "+actworkFlowSearchTxt		+" 	Value Expected : "+expworkFlowSearchTxt);
		System.out.println("workFlowCustomizeBtn  		: "+actworkFlowCustomizeBtn		+" 	Value Expected : "+expworkFlowCustomizeBtn);
		System.out.println("workFlowOkBtn  				: "+actworkFlowOkBtn			+" 	Value Expected : "+expworkFlowOkBtn);
		
		System.out.println("workFlowRow1Column1 	 	: "+actworkFlowRow1Column1		+" 	Value Expected : "+expworkFlowRow1Column1);
		System.out.println("workFlowRow1Column3  		: "+actworkFlowRow1Column3		+" 	Value Expected : "+expworkFlowRow1Column3);
		System.out.println("workFlowRow1Column4  		: "+actworkFlowRow1Column4		+" 	Value Expected : "+expworkFlowRow1Column4);
		System.out.println("workFlowRow1Column5  		: "+actworkFlowRow1Column5		+" 	Value Expected : "+expworkFlowRow1Column5);
		
		System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	+ " Value Expected : "+expcustomerAccountTxt);	
		
		System.out.println("BatchRows                   : "+actBatchRows              	+ " Value Expected : "+expBatchRows);
		
		System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	+ " Value Expected : "+expBatchName);	
		System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
		System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
		System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
		System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
		System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
		System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Batch Popup Row2 Batch No   : "+actRow2BatchNo              + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Batch Popup Row2 Base Qty   : "+actRow2BaseQty              + " Value Expected : "+actRow2BaseQty);
		System.out.println("Batch Popup Row2 Rate       : "+expRow2Rate                 + " Value Expected : "+actRow2Rate);
		System.out.println("Batch Popup Row2 AdjustedQty: "+actRow2AdjustedQty          + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Batch Popup Row3 Batch No   : "+actRow3BatchNo              + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Batch Popup Row3 Base Qty   : "+actRow3BaseQty              + " Value Expected : "+actRow3BaseQty);
		System.out.println("Batch Popup Row3 Rate       : "+expRow3Rate                 + " Value Expected : "+actRow3Rate);
		System.out.println("Batch Popup Row3 AdjustedQty: "+actRow3AdjustedQty          + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Batch Popup Row4 Batch No   : "+actRow4BatchNo              + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Batch Popup Row4 Base Qty   : "+actRow4BaseQty              + " Value Expected : "+actRow4BaseQty);
		System.out.println("Batch Popup Row4 Rate       : "+expRow4Rate                 + " Value Expected : "+actRow4Rate);
		System.out.println("Batch Popup Row4 AdjustedQty: "+actRow4AdjustedQty          + " Value Expected : "+expRow4AdjustedQty);
		    
			
		if(actLinkRowCountValue==expLinkRowCountValue
				
				&& actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
				&& actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
					
				&& actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
				&& actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
				&& actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
				&& actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
				
				&& actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))	
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
				
			return false;
		}
	}
	



	
	
	
	public boolean checkBalanceQtyInPendingLinksPopUpAndBatchQtyInBatchPopupInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
		select4thRow_9thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
		enter_LSalesOrders.sendKeys(Keys.SPACE);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
	            
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
				
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		// Expected
		
		int expLinkRowCountValue=1;
		
		boolean expsearchOnDropdown=true;
		boolean expcontainingDropdown=true;
		boolean expworkFlowSearchTxt=true;
		boolean expworkFlowCustomizeBtn=true;
		boolean expworkFlowOkBtn=true;
		
		String expworkFlowRow1Column1="SalOrd:5";
		String expworkFlowRow1Column3="BATCH WA ITEM";
		String expworkFlowRow1Column4="17.00";
		String expworkFlowRow1Column5="0.00";
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
		workFlowCloseBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_13thColumn));
		select4thRow_13thColumn.click();
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
		System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();
		
		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="5.00";
		expAdjustedQty="5.00";
		expBalance="0.00";
					
		expTotalQtyFooter="60.00";
		expTotalAdjustedQtyFooter="5.00";
		
		
		expRow1BatchNo="PVSWA";
		expRow1BaseQty="2.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="12.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();
		
		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="36.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="15.00";
		expRow2AdjustedQty="5";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="3.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="10.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		String expcustomerAccountTxt="Customer B";
		
		
		System.out.println("**************************************** checkBalanceQtyInPendingLinksPopUpAndBatchQtyInBatchPopupInFourthRow  ***************************************");
		
		System.out.println("LinkRowCountValue  			: "+actLinkRowCountValue		+" 	Value Expected : "+expLinkRowCountValue);
		
		System.out.println("searchOnDropdown  			: "+actsearchOnDropdown			+" 	Value Expected : "+expsearchOnDropdown);
		System.out.println("containingDropdown  		: "+actcontainingDropdown		+" 	Value Expected : "+expcontainingDropdown);
		System.out.println("workFlowSearchTxt  			: "+actworkFlowSearchTxt		+" 	Value Expected : "+expworkFlowSearchTxt);
		System.out.println("workFlowCustomizeBtn  		: "+actworkFlowCustomizeBtn		+" 	Value Expected : "+expworkFlowCustomizeBtn);
		System.out.println("workFlowOkBtn  				: "+actworkFlowOkBtn			+" 	Value Expected : "+expworkFlowOkBtn);
		
		System.out.println("workFlowRow1Column1 	 	: "+actworkFlowRow1Column1		+" 	Value Expected : "+expworkFlowRow1Column1);
		System.out.println("workFlowRow1Column3  		: "+actworkFlowRow1Column3		+" 	Value Expected : "+expworkFlowRow1Column3);
		System.out.println("workFlowRow1Column4  		: "+actworkFlowRow1Column4		+" 	Value Expected : "+expworkFlowRow1Column4);
		System.out.println("workFlowRow1Column5  		: "+actworkFlowRow1Column5		+" 	Value Expected : "+expworkFlowRow1Column5);
		
		System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	+ " Value Expected : "+expcustomerAccountTxt);	
		
		System.out.println("BatchRows                   : "+actBatchRows              	+ " Value Expected : "+expBatchRows);
		
		System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	+ " Value Expected : "+expBatchName);	
		System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
		System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
		System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
		System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
		System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
		System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Batch Popup Row2 Batch No   : "+actRow2BatchNo              + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Batch Popup Row2 Base Qty   : "+actRow2BaseQty              + " Value Expected : "+actRow2BaseQty);
		System.out.println("Batch Popup Row2 Rate       : "+expRow2Rate                 + " Value Expected : "+actRow2Rate);
		System.out.println("Batch Popup Row2 AdjustedQty: "+actRow2AdjustedQty          + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Batch Popup Row3 Batch No   : "+actRow3BatchNo              + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Batch Popup Row3 Base Qty   : "+actRow3BaseQty              + " Value Expected : "+actRow3BaseQty);
		System.out.println("Batch Popup Row3 Rate       : "+expRow3Rate                 + " Value Expected : "+actRow3Rate);
		System.out.println("Batch Popup Row3 AdjustedQty: "+actRow3AdjustedQty          + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Batch Popup Row4 Batch No   : "+actRow4BatchNo              + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Batch Popup Row4 Base Qty   : "+actRow4BaseQty              + " Value Expected : "+actRow4BaseQty);
		System.out.println("Batch Popup Row4 Rate       : "+expRow4Rate                 + " Value Expected : "+actRow4Rate);
		System.out.println("Batch Popup Row4 AdjustedQty: "+actRow4AdjustedQty          + " Value Expected : "+expRow4AdjustedQty);
			
		if(actLinkRowCountValue==expLinkRowCountValue
				
				&& actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
				&& actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
					
				&& actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
				&& actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
				&& actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
				&& actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
				
				&& actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))	
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
				
			return false;
		}
	}


	
	
	public boolean checkSalesInvoiceVoucherInputByCheckingBalancePendingReserveQtyInLinksPopUpScreenOfBatchItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
	
		/*Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		Thread.sleep(3000);
		
		
		getWaitForAlert();
		
		
		getAlert().accept();
		
		Thread.sleep(3000);*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	  	customerAccountTxt.click();
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer B"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH WA ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
	  	
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("2");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
	     Thread.sleep(3000);
		
	     List<WebElement> rowCountInLinkScreen=LinkRowCount;
			
	     int actLinkRowCountValue=rowCountInLinkScreen.size();
		            
	     boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
	     boolean actcontainingDropdown=containingDropdown.isDisplayed();
	     boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
	     boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
	     boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
	     
	     String actworkFlowRow1Column1=workFlowRow1Column1.getText();
	     String actworkFlowRow1Column2=workFlowRow1Column2.getText();
	     String actworkFlowRow1Column3=workFlowRow1Column3.getText();
	     String actworkFlowRow1Column4=workFlowRow1Column4.getText();
	     String actworkFlowRow1Column5=workFlowRow1Column5.getText();
	     
	     // Expected
	     
	     int expLinkRowCountValue=1;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:5";
	     String expworkFlowRow1Column3="BATCH WA ITEM";
	     String expworkFlowRow1Column4="12.00";
	     String expworkFlowRow1Column5="0.00";
	     
	     
	     Thread.sleep(2000);
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRadioBtnRowOne));
	     workFlowRadioBtnRowOne.click();
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
	     workFlowOkBtn.click();
	     
	     Thread.sleep(2000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
	     
	     
	     // Actual
	     String actLSalesOrderAfterLinkSecltionLinewsie=select1stRow_9thColumn.getText();
	     String actQtyAfterLinkSecltionLinewsie=select1stRow_8thColumn.getText();
	     String actReleaseQtyAfterLinkSecltionLinewsie=select1stRow_10thColumn.getText();
	     
	     // Expected
	     String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:5";
	     String expQtyAfterLinkSecltionLinewsie="2.00";
	     String expReleaseQtyAfterLinkSecltionLinewsie="2.00";
	     
	     
	     System.out.println("**************************************** checkSalesInvoiceVoucherInputByCheckingBalancePendingReserveQtyInLinksPopUpScreenOfBatchItem  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     System.out.println("LSalesOrderAfterLinkSecltionLinewsie : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
	     System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
	     System.out.println("ReleaseQtyAfterLinkSecltionLinewsie  : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
	     
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
	    		 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 && actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
	    		 && actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
	    		 && actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
	     {	
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
	    	 Thread.sleep(2000);
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
	    	 select1stRow_4thColumn.click();
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
	    	 enter_AQTxt.sendKeys("2");
	    	 enter_AQTxt.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
	    	 enter_FQTxt.sendKeys("0");
	    	 enter_FQTxt.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
	    	 enter_AvgRate.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
	    	 enter_AvgRateo.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
	    	 enter_Quantity.sendKeys(Keys.TAB);
	    	 
	    	 return false;
	     }
	}
	 	
	
	
		
	
	public boolean checkBatchScreenPopupUsingReservationLinksInFirstRowVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("33");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
		System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();
		
		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="2.00";
		expAdjustedQty="0.00";
		expBalance="2.00";
					
		expTotalQtyFooter="55.00";
		expTotalAdjustedQtyFooter="0.00";
		
		
		expRow1BatchNo="PVSWA";
		expRow1BaseQty="2.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="12.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();
		
		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="31.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="15.00";
		expRow2AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="3.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="10.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		String expcustomerAccountTxt="Customer B";
		
		
		System.out.println("**************************************** checkBatchScreenPopupUsingReservationLinksInFirstRowVoucher  ***************************************");
		
		System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	+ " Value Expected : "+expcustomerAccountTxt);	
		
		System.out.println("BatchRows                   : "+actBatchRows              	+ " Value Expected : "+expBatchRows);
		
		System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	+ " Value Expected : "+expBatchName);	
		System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
		System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
		System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
		System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
		System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
		System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Batch Popup Row2 Batch No   : "+actRow2BatchNo              + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Batch Popup Row2 Base Qty   : "+actRow2BaseQty              + " Value Expected : "+actRow2BaseQty);
		System.out.println("Batch Popup Row2 Rate       : "+expRow2Rate                 + " Value Expected : "+actRow2Rate);
		System.out.println("Batch Popup Row2 AdjustedQty: "+actRow2AdjustedQty          + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Batch Popup Row3 Batch No   : "+actRow3BatchNo              + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Batch Popup Row3 Base Qty   : "+actRow3BaseQty              + " Value Expected : "+actRow3BaseQty);
		System.out.println("Batch Popup Row3 Rate       : "+expRow3Rate                 + " Value Expected : "+actRow3Rate);
		System.out.println("Batch Popup Row3 AdjustedQty: "+actRow3AdjustedQty          + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Batch Popup Row4 Batch No   : "+actRow4BatchNo              + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Batch Popup Row4 Base Qty   : "+actRow4BaseQty              + " Value Expected : "+actRow4BaseQty);
		System.out.println("Batch Popup Row4 Rate       : "+expRow4Rate                 + " Value Expected : "+actRow4Rate);
		System.out.println("Batch Popup Row4 AdjustedQty: "+actRow4AdjustedQty          + " Value Expected : "+expRow4AdjustedQty);
			
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
			return false;
		}
	}






	
	
	public boolean checkBatchManualInputQtyAndOkButtonInBatchPopupUsingResevrationLinksInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow2));
		batch_QtyAdjustedRow2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
		batch_EnterQtyAdjsuted.sendKeys("2");
		batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
	
		// Actual
		System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();
		
		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		//actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="2.00";
		expAdjustedQty="2.00";
		expBalance="0.00";
					
		expTotalQtyFooter="55.00";
		expTotalAdjustedQtyFooter="2.00";
		
		
		expRow1BatchNo="PVSWA";
		expRow1BaseQty="2.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="12.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();
		
		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="31.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="15.00";
		expRow2AdjustedQty="2.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="3.00";
		//expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="10.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		String expcustomerAccountTxt="Customer B";
		
		
		System.out.println("**************************************** checkBatchScreenPopupUsingReservationLinksInFirstRowVoucher  ***************************************");
		
		System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	+ " Value Expected : "+expcustomerAccountTxt);	
		
		System.out.println("BatchRows           		: "+actBatchRows              	+ " Value Expected : "+expBatchRows);
		
		System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	+ " Value Expected : "+expBatchName);	
		System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
		System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
		System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
		System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
		System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
		System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Batch Popup Row2 Batch No   : "+actRow2BatchNo              + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Batch Popup Row2 Base Qty   : "+actRow2BaseQty              + " Value Expected : "+actRow2BaseQty);
		System.out.println("Batch Popup Row2 Rate       : "+expRow2Rate                 + " Value Expected : "+actRow2Rate);
		System.out.println("Batch Popup Row2 AdjustedQty: "+actRow2AdjustedQty          + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Batch Popup Row3 Batch No   : "+actRow3BatchNo              + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Batch Popup Row3 Base Qty   : "+actRow3BaseQty              + " Value Expected : "+actRow3BaseQty);
		System.out.println("Batch Popup Row3 Rate       : "+expRow3Rate                 + " Value Expected : "+actRow3Rate);
		//System.out.println("Batch Popup Row3 AdjustedQty: "+actRow3AdjustedQty          + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Batch Popup Row4 Batch No   : "+actRow4BatchNo              + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Batch Popup Row4 Base Qty   : "+actRow4BaseQty              + " Value Expected : "+actRow4BaseQty);
		System.out.println("Batch Popup Row4 Rate       : "+expRow4Rate                 + " Value Expected : "+actRow4Rate);
		System.out.println("Batch Popup Row4 AdjustedQty: "+actRow4AdjustedQty          + " Value Expected : "+expRow4AdjustedQty);
			
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				//&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						
			return false;
		}
	}
	



	
	
	public boolean checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksInFirstRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
			
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		
		// Actual
		String actBatchColumnValue=select1stRow_13thColumn.getText();
		
		// Expected
		String expBatchColumnValue="PVSWA";
		
		System.out.println("********************************** checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksInFirstRow  *************************************");
		    
		System.out.println("BatchColumnValue   		 : "+actBatchColumnValue   + " Value Expected : "+expBatchColumnValue);
		
		if(actBatchColumnValue.equalsIgnoreCase(expBatchColumnValue))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			
			return false;
		}
	}
	
	
	
	public boolean checkPickOnFifoAfterPikcingAdjsutedQtyManuallyInBatchPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		select1stRow_13thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
			
		// Actual	
		String actbatch_QtyAdjustedRow1=batch_QtyAdjustedRow1.getText();
		String actbatch_QtyAdjustedRow2=batch_QtyAdjustedRow2.getText();
		
		// Expected
		String expbatch_QtyAdjustedRow1="2.00";
		String expbatch_QtyAdjustedRow2="0.00";
		
		System.out.println("********************************** checkPickOnFifoAfterPikcingAdjsutedQtyManuallyInBatchPopUpScreen  *************************************");
	    
		System.out.println("batch_QtyAdjustedRow1   		 : "+actbatch_QtyAdjustedRow1   + " Value Expected : "+expbatch_QtyAdjustedRow1);
		System.out.println("batch_QtyAdjustedRow2   		 : "+actbatch_QtyAdjustedRow2   + " Value Expected : "+expbatch_QtyAdjustedRow2);
		
		if(actbatch_QtyAdjustedRow1.equalsIgnoreCase(expbatch_QtyAdjustedRow1)
				&& actbatch_QtyAdjustedRow2.equalsIgnoreCase(expbatch_QtyAdjustedRow2))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			return false;
		}
	}
	
	
	
	
	public boolean checkPickingQtyFromReservedBatchInBatchPopUpScreen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		select1stRow_13thColumn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow2));
		batch_QtyAdjustedRow2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
		batch_EnterQtyAdjsuted.sendKeys("0");
		batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow4));
		batch_QtyAdjustedRow4.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
		batch_EnterQtyAdjsuted.sendKeys("2");
		batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
			
			
		if(getIsAlertPresent())
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			getAlert().dismiss();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			return true;
		}
		else
		{
			
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
			return false;
			
		}
		
	}
	
	
	
	public boolean checkPendingLinksFullQtyUseInFirstRowOfTheSecondVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("12");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
	    Thread.sleep(3000);
		
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_LSalesOrders));
	    enter_LSalesOrders.sendKeys(Keys.SPACE);
	    
	    Thread.sleep(2000);
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
	    
	    List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
	     int actLinkRowCountValue=rowCountInLinkScreen.size();
		            
	     boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
	     boolean actcontainingDropdown=containingDropdown.isDisplayed();
	     boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
	     boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
	     boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
	     
	     String actworkFlowRow1Column1=workFlowRow1Column1.getText();
	     String actworkFlowRow1Column2=workFlowRow1Column2.getText();
	     String actworkFlowRow1Column3=workFlowRow1Column3.getText();
	     String actworkFlowRow1Column4=workFlowRow1Column4.getText();
	     String actworkFlowRow1Column5=workFlowRow1Column5.getText();
	     
	     // Expected
	     
	     int expLinkRowCountValue=1;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:5";
	     String expworkFlowRow1Column3="BATCH WA ITEM";
	     String expworkFlowRow1Column4="12.00";
	     String expworkFlowRow1Column5="0.00";
	     
	     
	     Thread.sleep(2000);
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRadioBtnRowOne));
	     workFlowRadioBtnRowOne.click();
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
	     workFlowOkBtn.click();
	     
	     Thread.sleep(2000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
	     
	     // Actual
	     String actLSalesOrderAfterLinkSecltionLinewsie=select1stRow_9thColumn.getText();
	     String actQtyAfterLinkSecltionLinewsie=select1stRow_8thColumn.getText();
	     String actReleaseQtyAfterLinkSecltionLinewsie=select1stRow_10thColumn.getText();
	     
	     // Expected
	     String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:5";
	     String expQtyAfterLinkSecltionLinewsie="12.00";
	     String expReleaseQtyAfterLinkSecltionLinewsie="10.00";
	     
	     
	     System.out.println("**************************************** checkPendingLinksFullQtyUseInFirstRowOfTheSecondVoucher  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     System.out.println("LSalesOrderAfterLinkSecltionLinewsie : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
	     System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
	     System.out.println("ReleaseQtyAfterLinkSecltionLinewsie  : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
	     
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
	    		 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 && actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
	    		 && actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
	    		 && actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
	    	 Thread.sleep(2000);
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
	    	 select1stRow_4thColumn.click();
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
	    	 enter_AQTxt.sendKeys("12");
	    	 enter_AQTxt.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
	    	 enter_FQTxt.sendKeys("0");
	    	 enter_FQTxt.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
	    	 enter_AvgRate.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
	    	 enter_AvgRateo.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
	    	 enter_Quantity.sendKeys(Keys.TAB);
	    	 
	    	 return false;
	     }
	}

	
	
		
		
	public boolean checkBatchScreenPopupUsingReservationLinksInFirstRowSecondVoucherForFullQtySave() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("33");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
		System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();
		
		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="12.00";
		expAdjustedQty="0.00";
		expBalance="12.00";
					
		expTotalQtyFooter="55.00";
		expTotalAdjustedQtyFooter="0.00";
		
		
		expRow1BatchNo="PVSWA";
		expRow1BaseQty="2.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="12.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();
		
		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="31.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="15.00";
		expRow2AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="3.00";
		expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="10.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		String expcustomerAccountTxt="Customer B";
		
		
		System.out.println("**************************************** checkBatchScreenPopupUsingReservationLinksInFirstRowSecondVoucherForFullQtySave  ***************************************");
		
		System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	+ " Value Expected : "+expcustomerAccountTxt);	
		
		System.out.println("BatchRows      				: "+actBatchRows              	+ " Value Expected : "+expBatchRows);
		
		System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	+ " Value Expected : "+expBatchName);	
		System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
		System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
		System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
		System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
		System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
		System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Batch Popup Row2 Batch No   : "+actRow2BatchNo              + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Batch Popup Row2 Base Qty   : "+actRow2BaseQty              + " Value Expected : "+actRow2BaseQty);
		System.out.println("Batch Popup Row2 Rate       : "+expRow2Rate                 + " Value Expected : "+actRow2Rate);
		System.out.println("Batch Popup Row2 AdjustedQty: "+actRow2AdjustedQty          + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Batch Popup Row3 Batch No   : "+actRow3BatchNo              + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Batch Popup Row3 Base Qty   : "+actRow3BaseQty              + " Value Expected : "+actRow3BaseQty);
		System.out.println("Batch Popup Row3 Rate       : "+expRow3Rate                 + " Value Expected : "+actRow3Rate);
		System.out.println("Batch Popup Row3 AdjustedQty: "+actRow3AdjustedQty          + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Batch Popup Row4 Batch No   : "+actRow4BatchNo              + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Batch Popup Row4 Base Qty   : "+actRow4BaseQty              + " Value Expected : "+actRow4BaseQty);
		System.out.println("Batch Popup Row4 Rate       : "+expRow4Rate                 + " Value Expected : "+actRow4Rate);
		System.out.println("Batch Popup Row4 AdjustedQty: "+actRow4AdjustedQty          + " Value Expected : "+expRow4AdjustedQty);
			
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);

			return false;
		}
	}
	


	
	
	public boolean checkBatchManualInputQtyAndOkButtonInBatchPopupUsingResevrationLinksInFirstRowSecondVoucherToSaveFullQty() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_QtyAdjustedRow2));
		batch_QtyAdjustedRow2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batch_EnterQtyAdjsuted));
		batch_EnterQtyAdjsuted.sendKeys("12");
		batch_EnterQtyAdjsuted.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
		System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();
		
		
		actRow2BatchNo=batch_BatchNoRow2.getText();
		actRow2BaseQty=batch_BaseQtyRow2.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow2Rate=batch_RateRow2.getText();
		actRow2AdjustedQty=batch_QtyAdjustedRow2.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow3BatchNo=batch_BatchNoRow3.getText();
		actRow3BaseQty=batch_BaseQtyRow3.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow3Rate=batch_RateRow3.getText();
		//actRow3AdjustedQty=batch_QtyAdjustedRow3.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		actRow4BatchNo=batch_BatchNoRow4.getText();
		actRow4BaseQty=batch_BaseQtyRow4.getText();
		//act14=batch_ExpiryInDateRow2.getText();
		actRow4Rate=batch_RateRow4.getText();
		actRow4AdjustedQty=batch_QtyAdjustedRow4.getText();
		//act17=batch_PurchaseDateRow2.getText();
		
		
		// Expected
		
		String expBatchRows="4";
		
		expBatchName="BATCH WA ITEM";
		expTotalQty="12.00";
		expAdjustedQty="12.00";
		expBalance="0.00";
					
		expTotalQtyFooter="55.00";
		expTotalAdjustedQtyFooter="12.00";
		
		
		expRow1BatchNo="PVSWA";
		expRow1BaseQty="2.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="12.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();
		
		
		expRow2BatchNo="PVSWA";
		expRow2BaseQty="31.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow2Rate="15.00";
		expRow2AdjustedQty="12.00";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow3BatchNo="PVSWA";
		expRow3BaseQty="12.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow3Rate="3.00";
		//expRow3AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		expRow4BatchNo="PVSWA";
		expRow4BaseQty="10.00";
		//exp14=batch_ExpiryInDateRow2.getText();
		expRow4Rate="15.00";
		expRow4AdjustedQty="0";
		//exp17=batch_PurchaseDateRow2.getText();
		
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		String expcustomerAccountTxt="Customer B";
		
		
		System.out.println("**************************************** checkBatchManualInputQtyAndOkButtonInBatchPopupUsingResevrationLinksInFirstRowSecondVoucherToSaveFullQty  ***************************************");
		
		System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	+ " Value Expected : "+expcustomerAccountTxt);	
		
		System.out.println("BatchRows                   : "+actBatchRows              	+ " Value Expected : "+expBatchRows);
		
		System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	+ " Value Expected : "+expBatchName);	
		System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
		System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
		System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
		System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
		System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
		System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
		
		System.out.println("Batch Popup Row2 Batch No   : "+actRow2BatchNo              + " Value Expected : "+expRow2BatchNo);	
		System.out.println("Batch Popup Row2 Base Qty   : "+actRow2BaseQty              + " Value Expected : "+actRow2BaseQty);
		System.out.println("Batch Popup Row2 Rate       : "+expRow2Rate                 + " Value Expected : "+actRow2Rate);
		System.out.println("Batch Popup Row2 AdjustedQty: "+actRow2AdjustedQty          + " Value Expected : "+expRow2AdjustedQty);
		
		System.out.println("Batch Popup Row3 Batch No   : "+actRow3BatchNo              + " Value Expected : "+expRow3BatchNo);	
		System.out.println("Batch Popup Row3 Base Qty   : "+actRow3BaseQty              + " Value Expected : "+actRow3BaseQty);
		System.out.println("Batch Popup Row3 Rate       : "+expRow3Rate                 + " Value Expected : "+actRow3Rate);
		//System.out.println("Batch Popup Row3 AdjustedQty: "+actRow3AdjustedQty          + " Value Expected : "+expRow3AdjustedQty);
		
		System.out.println("Batch Popup Row4 Batch No   : "+actRow4BatchNo              + " Value Expected : "+expRow4BatchNo);	
		System.out.println("Batch Popup Row4 Base Qty   : "+actRow4BaseQty              + " Value Expected : "+actRow4BaseQty);
		System.out.println("Batch Popup Row4 Rate       : "+expRow4Rate                 + " Value Expected : "+actRow4Rate);
		System.out.println("Batch Popup Row4 AdjustedQty: "+actRow4AdjustedQty          + " Value Expected : "+expRow4AdjustedQty);
			
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty)
				
				&& actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow2BaseQty.equalsIgnoreCase(expRow2BaseQty) && actRow2Rate.equalsIgnoreCase(expRow2Rate) 
				&& actRow2AdjustedQty.equalsIgnoreCase(expRow2AdjustedQty)
				
				&& actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actRow3BaseQty.equalsIgnoreCase(expRow3BaseQty) && actRow3Rate.equalsIgnoreCase(expRow3Rate) 
				//&& actRow3AdjustedQty.equalsIgnoreCase(expRow3AdjustedQty)
				
				&& actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actRow4BaseQty.equalsIgnoreCase(expRow4BaseQty) && actRow4Rate.equalsIgnoreCase(expRow4Rate) 
				&& actRow4AdjustedQty.equalsIgnoreCase(expRow4AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						
			return false;
		}
	}
	
	
	
	
	
	
	public boolean checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksInFirstRowInSecondVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		
		// Actual
		String actLSalesOrderAfterLinkSecltionLinewsie=select1stRow_9thColumn.getText();
		String actQtyAfterLinkSecltionLinewsie=select1stRow_8thColumn.getText();
		String actReleaseQtyAfterLinkSecltionLinewsie=select1stRow_10thColumn.getText();
		String actBatchColumnValue=select1stRow_13thColumn.getText();
		
		// Expected
		String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:5";
		String expQtyAfterLinkSecltionLinewsie="12.00";
		String expReleaseQtyAfterLinkSecltionLinewsie="10.00";
		String expBatchColumnValue="PVSWA";
		
		
		System.out.println("**************************************** checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksInFirstRowInSecondVoucher  ***************************************");
		
		System.out.println("LSalesOrderAfterLinkSecltionLinewsie : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
		System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
		System.out.println("ReleaseQtyAfterLinkSecltionLinewsie  : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
		System.out.println("BatchColumnValue   				  : "+actBatchColumnValue						+" 	Value Expected : "+expBatchColumnValue);
		
		if(actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
				&& actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
				&& actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie)
				&& actBatchColumnValue.equalsIgnoreCase(expBatchColumnValue))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
			
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
			    
			return false;
		}
	}


	

	public boolean checkSalesInvoiceVoucherInputByBatchBrItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
	
		/*Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
		new_newBtn.click();
		
		Thread.sleep(3000);
		
		
		getWaitForAlert();
		
		
		getAlert().accept();
		
		Thread.sleep(3000);*/
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	  	customerAccountTxt.click();
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer A"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH BR ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("19");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
	     
		
		/*String actworkFlowRow3Column1=workFlowRow3Column1.getText();
		String actworkFlowRow3Column2=workFlowRow3Column2.getText();
		String actworkFlowRow3Column3=workFlowRow3Column3.getText();
		String actworkFlowRow3Column4=workFlowRow3Column4.getText();
		String actworkFlowRow3Column5=workFlowRow3Column5.getText();*/
	    
		// Expected
		
	     
	     int expLinkRowCountValue=2;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:3";
	     String expworkFlowRow1Column3="BATCH BR ITEM";
	     String expworkFlowRow1Column4="19.00";
	     String expworkFlowRow1Column5="0.00";
	     
	     String expworkFlowRow2Column1="SalOrd:3";
	     String expworkFlowRow2Column3="BATCH BR ITEM";
	     String expworkFlowRow2Column4="20.00";
	     String expworkFlowRow2Column5="0.00";
	     
	   /*  String expworkFlowRow3Column1="SalOrd:4";
	     String expworkFlowRow3Column3="BATCH BR ITEM";
	     String expworkFlowRow3Column4="81.00";
	     String expworkFlowRow3Column5="0.00";*/
	     
	     
	     Thread.sleep(2000);
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRadioBtnRowOne));
	     workFlowRadioBtnRowOne.click();
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
	     workFlowOkBtn.click();
	     
	     Thread.sleep(2000);
	     
	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
	     
	     
	     // Actual
	     String actLSalesOrderAfterLinkSecltionLinewsie=select1stRow_9thColumn.getText();
	     String actQtyAfterLinkSecltionLinewsie=select1stRow_8thColumn.getText();
	     String actReleaseQtyAfterLinkSecltionLinewsie=select1stRow_10thColumn.getText();
	     
	     // Expected
	     String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:3";
	     String expQtyAfterLinkSecltionLinewsie="19.00";
	     String expReleaseQtyAfterLinkSecltionLinewsie="19.00";
	     
	     
	     System.out.println("**************************************** checkSalesInvoiceVoucherInputByBatchBrItem  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  					  : "+actworkFlowSearchTxt					+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  						  : "+actworkFlowOkBtn						+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     System.out.println("workFlowRow2Column1 	 			  : "+actworkFlowRow2Column1					+" 	Value Expected : "+expworkFlowRow2Column1);
	     System.out.println("workFlowRow2Column3  				  : "+actworkFlowRow2Column3					+" 	Value Expected : "+expworkFlowRow2Column3);
	     System.out.println("workFlowRow2Column4  				  : "+actworkFlowRow2Column4					+" 	Value Expected : "+expworkFlowRow2Column4);
	     System.out.println("workFlowRow2Column5  			   	  : "+actworkFlowRow2Column5					+" 	Value Expected : "+expworkFlowRow2Column5);
	     
	    /* System.out.println("workFlowRow3Column1 	 			  : "+actworkFlowRow3Column1					+" 	Value Expected : "+expworkFlowRow3Column1);
	     System.out.println("workFlowRow3Column3  				  : "+actworkFlowRow3Column3					+" 	Value Expected : "+expworkFlowRow3Column3);
	     System.out.println("workFlowRow3Column4  				  : "+actworkFlowRow3Column4					+" 	Value Expected : "+expworkFlowRow3Column4);
	     System.out.println("workFlowRow3Column5  			   	  : "+actworkFlowRow3Column5					+" 	Value Expected : "+expworkFlowRow3Column5);*/
	     
	     System.out.println("LSalesOrderAfterLinkSecltionLinewsie : "+actLSalesOrderAfterLinkSecltionLinewsie	+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
	     System.out.println("QtyAfterLinkSecltionLinewsie  		  : "+actQtyAfterLinkSecltionLinewsie			+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
	     System.out.println("ReleaseQtyAfterLinkSecltionLinewsie  : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
	     
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
	    		 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 && actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
	    		 && actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
	    		 && actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
	    		 && actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)
	    		 
	    		/* && actworkFlowRow3Column1.equalsIgnoreCase(expworkFlowRow3Column1)
	    		 && actworkFlowRow3Column3.equalsIgnoreCase(expworkFlowRow3Column3)
	    		 && actworkFlowRow3Column4.equalsIgnoreCase(expworkFlowRow3Column4)
	    		 && actworkFlowRow3Column5.equalsIgnoreCase(expworkFlowRow3Column5)*/
	    		 
	    		 && actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
	    		 && actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
	    		 && actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
	     {	
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
	    	 Thread.sleep(2000);
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
	    	 select1stRow_4thColumn.click();
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
	    	 enter_AQTxt.sendKeys("19");
	    	 enter_AQTxt.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
	    	 enter_FQTxt.sendKeys("0");
	    	 enter_FQTxt.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
	    	 enter_AvgRate.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
	    	 enter_AvgRateo.sendKeys(Keys.TAB);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
	    	 enter_Quantity.sendKeys(Keys.TAB);
	    	 
	    	 return false;
	     }
	}
	 	
	
	

	public boolean checkBatchScreenPopupUsingReservationLinksInFirstRowVoucherForBrItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("29");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(200);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
		System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
		
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();
		
		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();
		
		
		// Expected
		
		String expBatchRows="1";
		
		expBatchName="BATCH BR ITEM";
		expTotalQty="19.00";
		expAdjustedQty="0.00";
		expBalance="19.00";
					
		expTotalQtyFooter="39.00";
		expTotalAdjustedQtyFooter="0.00";
		
		
		expRow1BatchNo="PVSBR";
		expRow1BaseQty="39.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="30.00";
		expRow1AdjustedQty="0";
		//exp10=batch_PurchaseDateRow1.getText();
		
		String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
		String expcustomerAccountTxt="Customer A";
		
		
		System.out.println("**************************************** checkBatchScreenPopupUsingReservationLinksInFirstRowVoucherForBrItem  ***************************************");
		
		System.out.println("customerAccountTxt          : "+actcustomerAccountTxt    	+ " Value Expected : "+expcustomerAccountTxt);	
		
		System.out.println("BatchRows                   : "+actBatchRows              	+ " Value Expected : "+expBatchRows);
		
		System.out.println("Batch Popup Batch Name Qty  : "+actBatchName             	+ " Value Expected : "+expBatchName);	
		System.out.println("Batch Popup Total Qty       : "+actTotalQty                 + " Value Expected : "+expTotalQty);
		System.out.println("Batch Popup Adjusted Qty    : "+actAdjustedQty              + " Value Expected : "+expAdjustedQty);
		System.out.println("Batch Popup Balance         : "+actBalance                  + " Value Expected : "+expBalance);
		System.out.println("Batch Popup Adjusted Qty    : "+actTotalAdjustedQtyFooter   + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Batch Popup Total Qty Footer: "+actTotalQtyFooter           + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Batch Popup Row1 Batch No   : "+actRow1BatchNo              + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Batch Popup Row1 Base Qty   : "+actRow1BaseQty              + " Value Expected : "+expRow1BaseQty);
		System.out.println("Batch Popup Row1 Rate       : "+actRow1Rate                 + " Value Expected : "+expRow1Rate);
		System.out.println("Batch Popup Row1 AdjustedQty: "+actRow1AdjustedQty          + " Value Expected : "+expRow1AdjustedQty);
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty))
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
			return false;
		}
	}




	public boolean checkBatchPickAndOkButtonInBatchPopupUsingResevrationLinksForBatchBrItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		
		// Actual
	    System.out.println("Batch Rows"+ batchPopUPEmptyRows.getAttribute("data-totalrows"));
		
		String actBatchName,actTotalQty,actAdjustedQty,actBalance,actRow1BatchNo,actRow1BaseQty,actRow1Rate,actRow1AdjustedQty,actRow1TotalAdjustedQty,actTotalAdjustedQtyFooter,actTotalQtyFooter;
		String expBatchName,expTotalQty,expAdjustedQty,expBalance,expRow1BatchNo,expRow1BaseQty,expRow1Rate,expRow1AdjustedQty,expTotalQtyFooter,expTotalAdjustedQtyFooter,exp11;
		
		String actRow2BatchNo,actRow2BaseQty,actRow2Rate,actRow2AdjustedQty,act16,actRow2TotalAdjustedQty;
		String expRow2BatchNo,expRow2BaseQty,expRow2Rate,expRow2AdjustedQty,exp16,expRow2TotalAdjustedQty;
					
		String actRow3BatchNo,actRow3BaseQty,actRow3Rate,actRow3AdjustedQty,actRow3TotalAdjustedQty;
		String expRow3BatchNo,expRow3BaseQty,expRow3Rate,expRow3AdjustedQty,expRow3TotalAdjustedQty;
		
		String actRow4BatchNo,actRow4BaseQty,actRow4Rate,actRow4AdjustedQty,actRow4TotalAdjustedQty;
		String expRow4BatchNo,expRow4BaseQty,expRow4Rate,expRow4AdjustedQty,expRow4TotalAdjustedQty;
		
		String actBatchRows=batchPopUPEmptyRows.getAttribute("data-totalrows");
		
		actBatchName=batchItemName.getText();
		actTotalQty=batchTotalQty.getText();
		actAdjustedQty=batchAdjustQty.getText();
		actBalance=batchBalance.getText();
		actTotalAdjustedQtyFooter=batchTotalAdjustedQtyFooter.getText();
		actTotalQtyFooter=batchTotalQtyFooter.getText();

		actRow1BatchNo=batch_BatchNoRow1.getText();
		actRow1BaseQty=batch_BaseQtyRow1.getText();
		//act7=batch_ExpiryInDateRow1.getText();
		actRow1Rate=batch_RateRow1.getText();
		actRow1AdjustedQty=batch_QtyAdjustedRow1.getText();
		//act10=batch_PurchaseDateRow1.getText();
		
		
		// Expected
		
		String expBatchRows="1";
		
		expBatchName="BATCH BR ITEM";
		expTotalQty="19.00";
		expAdjustedQty="19.00";
		expBalance="0.00";
					
		expTotalQtyFooter="39.00";
		expTotalAdjustedQtyFooter="19.00";
		

		expRow1BatchNo="PVSBR";
		expRow1BaseQty="39.00";
		//exp7=batch_ExpiryInDateRow1.getText();
		expRow1Rate="30.00";
		expRow1AdjustedQty="19.00";
		//exp10=batch_PurchaseDateRow1.getText();

	    String actcustomerAccountTxt=customerAccountTxt.getAttribute("value");
	    String expcustomerAccountTxt="Customer A";
	    
	    
	    System.out.println("********************************** checkBatchPickAndOkButtonInBatchPopupUsingResevrationLinksForBatchBrItem  *************************************");
	    
	    System.out.println("BatchRows                                                          : "+actBatchRows              + " Value Expected : "+expBatchRows);
	    
	    System.out.println("customerAccountTxt                                                 : "+actcustomerAccountTxt     + " Value Expected : "+expcustomerAccountTxt);	
	    
		System.out.println("Entry Page Batch Popup Batch Name Qty Update Value Actual          : "+actBatchName              + " Value Expected : "+expBatchName);	
		System.out.println("Entry Page Batch Popup Total Qty Qty Update Value Actual           : "+actTotalQty               + " Value Expected : "+expTotalQty);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Value Actual        : "+actAdjustedQty            + " Value Expected : "+expAdjustedQty);
		System.out.println("Entry Page Batch Popup Balance Qty Update Value Actual             : "+actBalance                + " Value Expected : "+expBalance);
		System.out.println("Entry Page Batch Popup Adjusted Qty Update Qty Footer Value Actual : "+actTotalAdjustedQtyFooter + " Value Expected : "+expTotalAdjustedQtyFooter);
		System.out.println("Entry Page Batch Popup Total Qty Footer Qty Update Value Actual    : "+actTotalQtyFooter         + " Value Expected : "+expTotalQtyFooter);
			
		System.out.println("Entry Page Batch Popup Row1 Batch No Qty Update Value Actual       : "+actRow1BatchNo            + " Value Expected : "+expRow1BatchNo);	
		System.out.println("Entry Page Batch Popup Row1 Base Qty Qty Update Value Actual       : "+actRow1BaseQty            + " Value Expected : "+expRow1BaseQty);
		System.out.println("Entry Page Batch Popup Row1 Rate Qty Update Value Actual           : "+actRow1Rate               + " Value Expected : "+expRow1Rate);
		System.out.println("Entry Page Batch Popup Row1 Adjusted Qty Qty Update Value Actual   : "+actRow1AdjustedQty        + " Value Expected : "+expRow1AdjustedQty);
			
		
		if(actcustomerAccountTxt.equalsIgnoreCase(expcustomerAccountTxt) 
				
				&& actBatchRows.equalsIgnoreCase(expBatchRows)
				&& actBatchName.equalsIgnoreCase(expBatchName) && actTotalQty.equalsIgnoreCase(expTotalQty) && actAdjustedQty.equalsIgnoreCase(expAdjustedQty) 
				&& actBalance.equalsIgnoreCase(expBalance) 
				
				&& actTotalAdjustedQtyFooter.equalsIgnoreCase(expTotalAdjustedQtyFooter) && actTotalQtyFooter.equalsIgnoreCase(expTotalQtyFooter) 
				
				&& actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow1BaseQty.equalsIgnoreCase(expRow1BaseQty) && actRow1Rate.equalsIgnoreCase(expRow1Rate) 
				&& actRow1AdjustedQty.equalsIgnoreCase(expRow1AdjustedQty))	
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
						
			return false;
		}
	}
	
	
	

	public boolean checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksBatchBrItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();
			
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
			
		String actBatchColumnValue=select1stRow_13thColumn.getText();
		
		String expBatchColumnValue="PVSBR";
		
		System.out.println("********************************** checkBatchColoumInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksBatchBrItem  *************************************");
	    
	    System.out.println("BatchColumnValue          : "+actBatchColumnValue     + " Value Expected : "+expBatchColumnValue);
		
	    if(actBatchColumnValue.equalsIgnoreCase(expBatchColumnValue))
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
	    	return true;
	    }
	    else
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
	    	return false;
	    }
	}




	public boolean checkSalesInvoiceVoucherInputByRMARItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount2=itemListCount.size();
	  	
	  	System.err.println(itemcount2);
	  	
	  	for(int i=0 ; i < itemcount2 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("RMA RITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
		select2ndRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("2");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
	     
		
		String actworkFlowRow3Column1=workFlowRow3Column1.getText();
		String actworkFlowRow3Column2=workFlowRow3Column2.getText();
		String actworkFlowRow3Column3=workFlowRow3Column3.getText();
		String actworkFlowRow3Column4=workFlowRow3Column4.getText();
		String actworkFlowRow3Column5=workFlowRow3Column5.getText();
		
		String actworkFlowRow4Column1=workFlowRow4Column1.getText();
		String actworkFlowRow4Column2=workFlowRow4Column2.getText();
		String actworkFlowRow4Column3=workFlowRow4Column3.getText();
		String actworkFlowRow4Column4=workFlowRow4Column4.getText();
		String actworkFlowRow4Column5=workFlowRow4Column5.getText();
	    
		// Expected
		
	     
		int expLinkRowCountValue=4;
	     
		boolean expsearchOnDropdown=true;
		boolean expcontainingDropdown=true;
		boolean expworkFlowSearchTxt=true;
		boolean expworkFlowCustomizeBtn=true;
		boolean expworkFlowOkBtn=true;
		
		String expworkFlowRow1Column1="SalOrd:6";
		String expworkFlowRow1Column3="RMA RITEM";
		String expworkFlowRow1Column4="2.00";
		String expworkFlowRow1Column5="0.00";
		
		String expworkFlowRow2Column1="SalOrd:6";
		String expworkFlowRow2Column3="RMA RITEM";
		String expworkFlowRow2Column4="2.00";
		String expworkFlowRow2Column5="0.00";
		
		String expworkFlowRow3Column1="SalOrd:6";
		String expworkFlowRow3Column3="RMA RITEM";
		String expworkFlowRow3Column4="2.00";
		String expworkFlowRow3Column5="0.00";
		
		String expworkFlowRow4Column1="SalOrd:7";
		String expworkFlowRow4Column3="RMA RITEM";
		String expworkFlowRow4Column4="1.00";
		String expworkFlowRow4Column5="0.00";
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowRadioBtnRowTwo));
		workFlowRadioBtnRowTwo.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		
		
		// Actual
		String actLSalesOrderAfterLinkSecltionLinewsie=select2ndRow_9thColumn.getText();
		String actQtyAfterLinkSecltionLinewsie=select2ndRow_8thColumn.getText();
		String actReleaseQtyAfterLinkSecltionLinewsie=select2ndRow_10thColumn.getText();
		
		// Expected
		String expLSalesOrderAfterLinkSecltionLinewsie="SalOrd:6";
		String expQtyAfterLinkSecltionLinewsie="2.00";
		String expReleaseQtyAfterLinkSecltionLinewsie="2.00";
		
		
		System.out.println("**************************************** checkSalesInvoiceVoucherInputByRMARItem  ***************************************");
		
		System.out.println("LinkRowCountValue  				  	 : "+actLinkRowCountValue				   	+" 	Value Expected : "+expLinkRowCountValue);
		
		System.out.println("searchOnDropdown  					 : "+actsearchOnDropdown					+" 	Value Expected : "+expsearchOnDropdown);
		System.out.println("containingDropdown  				 : "+actcontainingDropdown					+" 	Value Expected : "+expcontainingDropdown);
		System.out.println("workFlowSearchTxt  				  	 : "+actworkFlowSearchTxt					+" 	Value Expected : "+expworkFlowSearchTxt);
		System.out.println("workFlowCustomizeBtn  				 : "+actworkFlowCustomizeBtn				+" 	Value Expected : "+expworkFlowCustomizeBtn);
		System.out.println("workFlowOkBtn  					     : "+actworkFlowOkBtn						+" 	Value Expected : "+expworkFlowOkBtn);
		
		System.out.println("workFlowRow1Column1 	 			 : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
		System.out.println("workFlowRow1Column3  				 : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
		System.out.println("workFlowRow1Column4  				 : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
		System.out.println("workFlowRow1Column5  			   	 : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
		
		System.out.println("workFlowRow2Column1 	 			 : "+actworkFlowRow2Column1					+" 	Value Expected : "+expworkFlowRow2Column1);
		System.out.println("workFlowRow2Column3  				 : "+actworkFlowRow2Column3					+" 	Value Expected : "+expworkFlowRow2Column3);
		System.out.println("workFlowRow2Column4  				 : "+actworkFlowRow2Column4					+" 	Value Expected : "+expworkFlowRow2Column4);
		System.out.println("workFlowRow2Column5  			   	 : "+actworkFlowRow2Column5					+" 	Value Expected : "+expworkFlowRow2Column5);
		
		System.out.println("workFlowRow3Column1 	 			 : "+actworkFlowRow3Column1					+" 	Value Expected : "+expworkFlowRow3Column1);
		System.out.println("workFlowRow3Column3  				 : "+actworkFlowRow3Column3					+" 	Value Expected : "+expworkFlowRow3Column3);
		System.out.println("workFlowRow3Column4  				 : "+actworkFlowRow3Column4					+" 	Value Expected : "+expworkFlowRow3Column4);
		System.out.println("workFlowRow3Column5  			   	 : "+actworkFlowRow3Column5					+" 	Value Expected : "+expworkFlowRow3Column5);
		
		System.out.println("workFlowRow4Column1 	 			 : "+actworkFlowRow4Column1					+" 	Value Expected : "+expworkFlowRow4Column1);
		System.out.println("workFlowRow4Column3  				 : "+actworkFlowRow4Column3					+" 	Value Expected : "+expworkFlowRow4Column3);
		System.out.println("workFlowRow4Column4  				 : "+actworkFlowRow4Column4					+" 	Value Expected : "+expworkFlowRow4Column4);
		System.out.println("workFlowRow4Column5  			   	 : "+actworkFlowRow4Column5					+" 	Value Expected : "+expworkFlowRow4Column5);
		
		System.out.println("LSalesOrderAfterLinkSecltionLinewsie : "+actLSalesOrderAfterLinkSecltionLinewsie+" 	Value Expected : "+expLSalesOrderAfterLinkSecltionLinewsie);
		System.out.println("QtyAfterLinkSecltionLinewsie  		 : "+actQtyAfterLinkSecltionLinewsie		+" 	Value Expected : "+expQtyAfterLinkSecltionLinewsie);
		System.out.println("ReleaseQtyAfterLinkSecltionLinewsie  : "+actReleaseQtyAfterLinkSecltionLinewsie	+" 	Value Expected : "+expReleaseQtyAfterLinkSecltionLinewsie);
		
		if(actLinkRowCountValue==expLinkRowCountValue
				
				&& actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
				&& actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
				&& actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
				&& actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
				&& actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
				&& actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
				
				&& actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
				&& actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
				&& actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
				&& actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)
				
				&& actworkFlowRow3Column1.equalsIgnoreCase(expworkFlowRow3Column1)
				&& actworkFlowRow3Column3.equalsIgnoreCase(expworkFlowRow3Column3)
				&& actworkFlowRow3Column4.equalsIgnoreCase(expworkFlowRow3Column4)
				&& actworkFlowRow3Column5.equalsIgnoreCase(expworkFlowRow3Column5)
	    		 
				&& actworkFlowRow4Column1.equalsIgnoreCase(expworkFlowRow4Column1)
				&& actworkFlowRow4Column3.equalsIgnoreCase(expworkFlowRow4Column3)
				&& actworkFlowRow4Column4.equalsIgnoreCase(expworkFlowRow4Column4)
				&& actworkFlowRow4Column5.equalsIgnoreCase(expworkFlowRow4Column5)
				
				&& actLSalesOrderAfterLinkSecltionLinewsie.equalsIgnoreCase(expLSalesOrderAfterLinkSecltionLinewsie) 
				&& actQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expQtyAfterLinkSecltionLinewsie)
				&& actReleaseQtyAfterLinkSecltionLinewsie.equalsIgnoreCase(expReleaseQtyAfterLinkSecltionLinewsie))
		{	
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
					
			return true;
		}
		else
		{
			System.out.println("Test Pass : Batch fields are As expected ");
			excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select2ndRow_4thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
			enter_AQTxt.sendKeys("2");
			enter_AQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
			enter_FQTxt.sendKeys("0");
			enter_FQTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
			enter_AvgRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
			enter_AvgRateo.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys(Keys.TAB);
			
			return false;
		}
	}
	 	
	
	

	
	public boolean checkReleasingRmaItemInSecondRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		    
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("29");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardSerialNumberTxtField));
		// Actual 
		boolean actrmaoutwardSerialNumberTxtField=rmaoutwardSerialNumberTxtField.isDisplayed();
		String actrmaoutwardQuantityTxtField=rmaoutwardQuantityTxtField.getAttribute("value");
		String actrmaoutwardNumberofItemsLabel=rmaoutwardNumberofItemsLabel.getText();
		boolean actrmaoutwardTableHeadingRMA=rmaoutwardTableHeadingRMA.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentNo=rmaoutwardTableHeadingDocumentNo.isDisplayed();
		boolean actrmaoutwardTableHeadingDocumentDate=rmaoutwardTableHeadingDocumentDate.isDisplayed();
		boolean actrmaoutwardOkBtn=rmaoutwardOkBtn.isDisplayed();
		boolean actrmaoutwardCancelBtn=rmaoutwardCancelBtn.isDisplayed();
		boolean actrmaoutwardExpandBtn=rmaoutwardExpandBtn.isDisplayed();
		
		// Expected
		boolean exprmaoutwardSerialNumberTxtField=true;
		String exprmaoutwardQuantityTxtField="2";
		String exprmaoutwardNumberofItemsLabel="0";
		boolean exprmaoutwardTableHeadingRMA=true;
		boolean exprmaoutwardTableHeadingDocumentNo=true;
		boolean exprmaoutwardTableHeadingDocumentDate=true;
		boolean exprmaoutwardOkBtn=true;
		boolean exprmaoutwardCancelBtn=true;
		boolean exprmaoutwardExpandBtn=true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardExpandBtn));
		rmaoutwardExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMASearchTxtField));
		// Actual 
		boolean actsearchRMASearchTxtField=searchRMASearchTxtField.isDisplayed();
		boolean actsearchRMASearchBtn=searchRMASearchBtn.isDisplayed();
		String actsearchRMAQuantityTxtField=searchRMAQuantityTxtField.getAttribute("value");
		String actsearchRMANoOfItemsTxt=searchRMANoOfItemsTxt.getText();
		boolean actsearchRMAHeaderChkBox=searchRMAHeaderChkBox.isDisplayed();
		boolean actsearchRMATableHeadingSerialNo=searchRMATableHeadingSerialNo.isDisplayed();
		boolean actsearchRMATableHeadingDocNo=searchRMATableHeadingDocNo.isDisplayed();
		boolean actsearchRMATableHeadingDate=searchRMATableHeadingDate.isDisplayed();
		boolean actsearchRMAOkBtn=searchRMAOkBtn.isDisplayed();
		boolean actsearchRMACancelBtn=searchRMACancelBtn.isDisplayed();
		
		// Expected
		boolean expsearchRMASearchTxtField=true;
		boolean expsearchRMASearchBtn=true;
		String expsearchRMAQuantityTxtField="2";
		String expsearchRMANoOfItemsTxt="0";
		boolean expsearchRMAHeaderChkBox=true;
		boolean expsearchRMATableHeadingSerialNo=true;
		boolean expsearchRMATableHeadingDocNo=true;
		boolean expsearchRMATableHeadingDate=true;
		boolean expsearchRMAOkBtn=true;
		boolean expsearchRMACancelBtn=true;
		
		ArrayList<String>  expRMA= new ArrayList<String>(); 
		
		expRMA.add("Sec#Pv1");
		expRMA.add("Sec#Pv3");
		
		
		ArrayList<String> actRMA= new ArrayList<>();
		
		for (int i = 1; i < 3; i++)
		{
			WebElement a=getDriver().findElement(By.xpath("//*[@id='RMASearchTable']/tbody/tr["+i+"]/td[2]"));
			Thread.sleep(2000);
			actRMA.add(a.getText());
		}
		
	
		
		System.out.println("actRMA  : "+actRMA);
		System.out.println("expRMA  : "+expRMA);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAHeaderChkBox));
		searchRMAHeaderChkBox.click();
		
		
		// Actual
		boolean rma=actRMA.equals(expRMA);
		boolean actsearchRMA1ChkBox=searchRMA1ChkBox.isSelected();
		boolean actsearchRMA2ChkBox=searchRMA2ChkBox.isSelected();
		
		// Expected
		boolean expsearchRMA1ChkBox=true;
		boolean expsearchRMA2ChkBox=true;
		
		
		System.out.println("*********************************** checkReleasingRmaItemInSecondRow  ************************************");
		
		System.out.println("rmaoutwardSerialNumberTxtField 	   :  "+actrmaoutwardSerialNumberTxtField     +" value Expected : "+exprmaoutwardSerialNumberTxtField);
		System.out.println("rmaoutwardQuantityTxtField    	   :  "+actrmaoutwardQuantityTxtField		  +" value Expected : "+exprmaoutwardQuantityTxtField);
		System.out.println("rmaoutwardNumberofItemsLabel 	   :  "+actrmaoutwardNumberofItemsLabel 	  +" value Expected : "+exprmaoutwardNumberofItemsLabel);
		System.out.println("rmaoutwardTableHeadingRMA          :  "+actrmaoutwardTableHeadingRMA		  +" value Expected : "+exprmaoutwardTableHeadingRMA);
		System.out.println("rmaoutwardTableHeadingDocumentNo   :  "+actrmaoutwardTableHeadingDocumentNo   +" value Expected : "+exprmaoutwardTableHeadingDocumentNo);
		System.out.println("rmaoutwardTableHeadingDocumentDate :  "+actrmaoutwardTableHeadingDocumentDate +" value Expected : "+exprmaoutwardTableHeadingDocumentDate);
		System.out.println("rmaoutwardOkBtn 				   :  "+actrmaoutwardOkBtn					  +" value Expected : "+exprmaoutwardOkBtn);
		System.out.println("rmaoutwardCancelBtn  			   :  "+actrmaoutwardCancelBtn				  +" value Expected : "+exprmaoutwardCancelBtn);
		System.out.println("rmaoutwardExpandBtn 			   :  "+actrmaoutwardExpandBtn				  +" value Expected : "+exprmaoutwardExpandBtn);
		
		System.out.println("searchRMASearchTxtField           : "+actsearchRMASearchTxtField			  +"  Value Expected : "+expsearchRMASearchTxtField);
		System.out.println("searchRMASearchBtn          	  : "+actsearchRMASearchBtn					  +"  Value Expected : "+expsearchRMASearchBtn);
		System.out.println("searchRMAQuantityTxtField    	  : "+actsearchRMAQuantityTxtField			  +"  Value Expected : "+expsearchRMAQuantityTxtField);
		System.out.println("searchRMANoOfItemsTxt        	  : "+actsearchRMANoOfItemsTxt			      +"  Value Expected : "+expsearchRMANoOfItemsTxt);
		System.out.println("searchRMAHeaderChkBox         	  : "+actsearchRMAHeaderChkBox		      	  +"  Value Expected : "+expsearchRMAHeaderChkBox);
		System.out.println("searchRMATableHeadingSerialNo 	  : "+actsearchRMATableHeadingSerialNo        +"  Value Expected : "+expsearchRMATableHeadingSerialNo);
		System.out.println("searchRMATableHeadingDocNo        : "+actsearchRMATableHeadingDocNo	          +"  Value Expected : "+expsearchRMATableHeadingDocNo);
		System.out.println("searchRMATableHeadingDate         : "+actsearchRMATableHeadingDate	  	      +"  Value Expected : "+expsearchRMATableHeadingDate);
		System.out.println("searchRMAOkBtn   			      : "+actsearchRMAOkBtn				          +"  Value Expected : "+expsearchRMAOkBtn);
		System.out.println("searchRMACancelBtn   		      : "+actsearchRMACancelBtn			          +"  Value Expected : "+expsearchRMACancelBtn);
		
		System.out.println("rma                               : "+rma                                     +"  Value Expected : "+"True");
		
		System.out.println("searchRMA1ChkBox                  : "+actsearchRMA1ChkBox                     +"  Value Expected : "+expsearchRMA1ChkBox);
		System.out.println("searchRMA2ChkBox                  : "+actsearchRMA2ChkBox                     +"  Value Expected : "+expsearchRMA2ChkBox);
		
		if(rma==true && actsearchRMA1ChkBox==expsearchRMA1ChkBox && actsearchRMA2ChkBox==expsearchRMA2ChkBox
				
				&& actrmaoutwardSerialNumberTxtField==exprmaoutwardSerialNumberTxtField && actrmaoutwardQuantityTxtField.equalsIgnoreCase(exprmaoutwardQuantityTxtField)
				&& actrmaoutwardNumberofItemsLabel.equalsIgnoreCase(exprmaoutwardNumberofItemsLabel) && actrmaoutwardTableHeadingRMA==exprmaoutwardTableHeadingRMA
				&& actrmaoutwardTableHeadingDocumentNo==exprmaoutwardTableHeadingDocumentNo && actrmaoutwardTableHeadingDocumentDate==exprmaoutwardTableHeadingDocumentDate
				&& actrmaoutwardOkBtn==exprmaoutwardOkBtn && actrmaoutwardCancelBtn==exprmaoutwardCancelBtn && actrmaoutwardExpandBtn==exprmaoutwardExpandBtn
				
				&& actsearchRMASearchTxtField==expsearchRMASearchTxtField && actsearchRMASearchBtn==expsearchRMASearchBtn 
				&& actsearchRMAQuantityTxtField.equalsIgnoreCase(expsearchRMAQuantityTxtField) && actsearchRMANoOfItemsTxt.equalsIgnoreCase(expsearchRMANoOfItemsTxt)
				&& actsearchRMAHeaderChkBox==expsearchRMAHeaderChkBox && actsearchRMATableHeadingSerialNo==expsearchRMATableHeadingSerialNo
				&& actsearchRMATableHeadingDocNo==expsearchRMATableHeadingDocNo && actsearchRMATableHeadingDate==expsearchRMATableHeadingDate 
				&& actsearchRMAOkBtn==expsearchRMAOkBtn && actsearchRMACancelBtn==expsearchRMACancelBtn)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchRMAOkBtn));
			searchRMAOkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaoutwardOkBtn));
			rmaoutwardOkBtn.click();
			
			return false;
		}
	}	
	
	
	

	public boolean checkRMAColumnValueInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksRMARITEM() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
		enter_RMA.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_15thColumn));
		
		String actRMAColumnValue=select2ndRow_15thColumn.getText();
		
		String expRMAColumnValue="Sec#Pv1,Sec#Pv3";
		
		System.out.println("********************************** checkRMAColumnValueInVoucherAfterClickOnOkButtonInBatchPopUpQtyConsumeUsingReservationLinksRMARITEM  *************************************");
	    
	    System.out.println("RMAColumnValue          : "+actRMAColumnValue     + " Value Expected : "+expRMAColumnValue);
		
	    if(actRMAColumnValue.equalsIgnoreCase(expRMAColumnValue))
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
				
	    	return true;
	    }
	    else
	    {
	    	System.out.println("Test Pass : Batch fields are As expected ");
	    	excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
				
	    	return false;
	    }
	}

	
	
	// Issue
	public boolean checkSalesInvoiceVoucherInputByStockItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount2=itemListCount.size();
	  	
	  	System.err.println(itemcount2);
	  	
	  	for(int i=0 ; i < itemcount2 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("STOCK ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("2");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		
		String expErrorMessage="This transaction will make stock negative.";
		
		String validationMessage=checkValidationMessage(expErrorMessage);
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("2");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(3000);
		
		System.out.println("********************************** checkSalesInvoiceVoucherInputByStockItem  *************************************");
		
		System.out.println("ErrorMessage          : "+validationMessage+ " Value Expected : "+expErrorMessage);
		
		try
		{
			if(workFlowCloseBtn.isDisplayed() && validationMessage.equalsIgnoreCase(expErrorMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
				workFlowCloseBtn.click();
				
				return false;
			}
			else
			{
				return true;
			}
		}
		catch(Exception e)
		{
			
			System.out.println("LSO Column          : "+select3rdRow_9thColumn.getText().isEmpty()     + " Value Expected : "+"true");
			
			if(select3rdRow_9thColumn.getText().isEmpty() && validationMessage.equalsIgnoreCase(expErrorMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	     
	}
	 	
	
	


	public boolean checkSalesInvoiceVoucherInputByBatchBrItemRemainingQtyinThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
			
		Thread.sleep(3000);	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount2=itemListCount.size();
	  	
	  	System.err.println(itemcount2);
	  	
	  	for(int i=0 ; i < itemcount2 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH BR ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
		
		/*String actworkFlowRow3Column1=workFlowRow3Column1.getText();
		String actworkFlowRow3Column2=workFlowRow3Column2.getText();
		String actworkFlowRow3Column3=workFlowRow3Column3.getText();
		String actworkFlowRow3Column4=workFlowRow3Column4.getText();
		String actworkFlowRow3Column5=workFlowRow3Column5.getText();*/
	     
		
		// Expected
		
	     
	     int expLinkRowCountValue=2;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow2Column1="SalOrd:3";
	     String expworkFlowRow2Column3="BATCH BR ITEM";
	     String expworkFlowRow2Column4="20.00";
	     String expworkFlowRow2Column5="0.00";
	     
	  /*   String expworkFlowRow3Column1="SalOrd:4";
	     String expworkFlowRow3Column3="BATCH BR ITEM";
	     String expworkFlowRow3Column4="81.00";
	     String expworkFlowRow3Column5="0.00";*/
	     
	     
	     System.out.println("**************************************** checkSalesInvoiceVoucherInputByBatchBrItemRemainingQtyinThirdRow  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  					  : "+actworkFlowSearchTxt					+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  						  : "+actworkFlowOkBtn						+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow2Column1 	 			  : "+actworkFlowRow2Column1					+" 	Value Expected : "+expworkFlowRow2Column1);
	     System.out.println("workFlowRow2Column3  				  : "+actworkFlowRow2Column3					+" 	Value Expected : "+expworkFlowRow2Column3);
	     System.out.println("workFlowRow2Column4  				  : "+actworkFlowRow2Column4					+" 	Value Expected : "+expworkFlowRow2Column4);
	     System.out.println("workFlowRow2Column5  			   	  : "+actworkFlowRow2Column5					+" 	Value Expected : "+expworkFlowRow2Column5);
	     
	   /*  System.out.println("workFlowRow3Column1 	 			  : "+actworkFlowRow3Column1					+" 	Value Expected : "+expworkFlowRow3Column1);
	     System.out.println("workFlowRow3Column3  				  : "+actworkFlowRow3Column3					+" 	Value Expected : "+expworkFlowRow3Column3);
	     System.out.println("workFlowRow3Column4  				  : "+actworkFlowRow3Column4					+" 	Value Expected : "+expworkFlowRow3Column4);
	     System.out.println("workFlowRow3Column5  			   	  : "+actworkFlowRow3Column5					+" 	Value Expected : "+expworkFlowRow3Column5);*/
	     
	     
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
	    		 && actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
	    		 && actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
	    		 && actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
	    		 && actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)
	    		 
	    		/* && actworkFlowRow3Column1.equalsIgnoreCase(expworkFlowRow3Column1)
	    		 && actworkFlowRow3Column3.equalsIgnoreCase(expworkFlowRow3Column3)
	    		 && actworkFlowRow3Column4.equalsIgnoreCase(expworkFlowRow3Column4)
	    		 && actworkFlowRow3Column5.equalsIgnoreCase(expworkFlowRow3Column5)*/)
	     {	
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
	    	
	    	 return false;
	     }
	}
	 	
	
	

	public boolean checkSalesInvoiceVoucherInputByRMARItemRemainingQtyinThirdRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount2=itemListCount.size();
	  	
	  	System.err.println(itemcount2);
	  	
	  	for(int i=0 ; i < itemcount2 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("RMA RITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow3Column1=workFlowRow3Column1.getText();
		String actworkFlowRow3Column2=workFlowRow3Column2.getText();
		String actworkFlowRow3Column3=workFlowRow3Column3.getText();
		String actworkFlowRow3Column4=workFlowRow3Column4.getText();
		String actworkFlowRow3Column5=workFlowRow3Column5.getText();
		
		String actworkFlowRow4Column1=workFlowRow4Column1.getText();
		String actworkFlowRow4Column2=workFlowRow4Column2.getText();
		String actworkFlowRow4Column3=workFlowRow4Column3.getText();
		String actworkFlowRow4Column4=workFlowRow4Column4.getText();
		String actworkFlowRow4Column5=workFlowRow4Column5.getText();
	     
		
		// Expected
		
	     
	     int expLinkRowCountValue=4;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:6";
	     String expworkFlowRow1Column3="RMA RITEM";
	     String expworkFlowRow1Column4="2.00";
	     String expworkFlowRow1Column5="0.00";
	     
	     String expworkFlowRow3Column1="SalOrd:6";
	     String expworkFlowRow3Column3="RMA RITEM";
	     String expworkFlowRow3Column4="2.00";
	     String expworkFlowRow3Column5="0.00";
	     
	     String expworkFlowRow4Column1="SalOrd:7";
	     String expworkFlowRow4Column3="RMA RITEM";
	     String expworkFlowRow4Column4="1.00";
	     String expworkFlowRow4Column5="0.00";
	     
	     
	     System.out.println("**************************************** checkSalesInvoiceVoucherInputByRMARItemRemainingQtyinThirdRow  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     System.out.println("workFlowRow3Column1 	 			  : "+actworkFlowRow3Column1					+" 	Value Expected : "+expworkFlowRow3Column1);
	     System.out.println("workFlowRow3Column3  				  : "+actworkFlowRow3Column3					+" 	Value Expected : "+expworkFlowRow3Column3);
	     System.out.println("workFlowRow3Column4  				  : "+actworkFlowRow3Column4					+" 	Value Expected : "+expworkFlowRow3Column4);
	     System.out.println("workFlowRow3Column5  			   	  : "+actworkFlowRow3Column5					+" 	Value Expected : "+expworkFlowRow3Column5);
	     
	     System.out.println("workFlowRow4Column1 	 			  : "+actworkFlowRow4Column1					+" 	Value Expected : "+expworkFlowRow4Column1);
	     System.out.println("workFlowRow4Column3  				  : "+actworkFlowRow4Column3					+" 	Value Expected : "+expworkFlowRow4Column3);
	     System.out.println("workFlowRow4Column4  				  : "+actworkFlowRow4Column4					+" 	Value Expected : "+expworkFlowRow4Column4);
	     System.out.println("workFlowRow4Column5  			   	  : "+actworkFlowRow4Column5					+" 	Value Expected : "+expworkFlowRow4Column5);
	     
	     
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
	    		 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 && actworkFlowRow3Column1.equalsIgnoreCase(expworkFlowRow3Column1)
	    		 && actworkFlowRow3Column3.equalsIgnoreCase(expworkFlowRow3Column3)
	    		 && actworkFlowRow3Column4.equalsIgnoreCase(expworkFlowRow3Column4)
	    		 && actworkFlowRow3Column5.equalsIgnoreCase(expworkFlowRow3Column5)
	    		 
	    		 && actworkFlowRow4Column1.equalsIgnoreCase(expworkFlowRow4Column1)
	    		 && actworkFlowRow4Column3.equalsIgnoreCase(expworkFlowRow4Column3)
	    		 && actworkFlowRow4Column4.equalsIgnoreCase(expworkFlowRow4Column4)
	    		 && actworkFlowRow4Column5.equalsIgnoreCase(expworkFlowRow4Column5))
	     {	
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
	    	
	    	 return false;
	     }
	}
	 	


	public boolean checkSavingVoucherWithBatchBrItemAndRMARItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
			
		Thread.sleep(2000);

	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
		// Save Button
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		
		// Bill Wise reference Screen
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		Thread.sleep(2000);
		
		String actBillNewReference,actBillAmtAdjAgainstNewRefInOtherVouchers,actBillTransactionCurrency,actBillBaseCurrency,actBillLocalCurrency,actBillBalanceNewRefAmount,actBillBreakUpByTagDepartment,actBillBreakUpByTagBaseCurrency,actBillBreakUpByTagBillCurrency,actBillBreakUpByTagLocalCurrency,actBillAmtAdjustedInTransactionCurrency,actBillBalanceAmtToBeAdjustedInTransactionCurrency,act13;
		String expBillNewReference,expBillAmtAdjAgainstNewRefInOtherVouchers,expBillTransactionCurrency,expBillBaseCurrency,expBillLocalCurrency,expBillBalanceNewRefAmount,expBillBreakUpByTagDepartment,expBillBreakUpByTagBaseCurrency,expBillBreakUpByTagBillCurrency,expBillBreakUpByTagLocalCurrency,expBillAmtAdjustedInTransactionCurrency,expBillBalanceAmtToBeAdjustedInTransactionCurrency;
		
		actBillNewReference									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchers			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrency							=transactionCurency.getText();
 		actBillBaseCurrency									=baseCurrency.getText();
 		actBillLocalCurrency								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmount							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartment						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrency						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrency						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrency					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrency				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrency	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		expBillNewReference="0.00";
		expBillAmtAdjAgainstNewRefInOtherVouchers="0.00";
		expBillTransactionCurrency="609.00";
		expBillBaseCurrency="609.00";
		expBillLocalCurrency="42.63";
		
		expBillBalanceNewRefAmount="0.00";
		
		expBillBreakUpByTagDepartment="INDIA";
		expBillBreakUpByTagBillCurrency="609";
		expBillBreakUpByTagBaseCurrency="609.00";
		
		
		expBillBreakUpByTagLocalCurrency="42.63";
		expBillAmtAdjustedInTransactionCurrency="0";
		expBillBalanceAmtToBeAdjustedInTransactionCurrency="609.00";
	
	
		System.out.println("********************************** checkSavingVoucherWithBatchBrItemAndRMARItem  *************************************");
		
		System.out.println("actBillNewReference								   : "+ actBillNewReference									+" Value Expected : "+expBillNewReference);
		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchers		   : "+actBillAmtAdjAgainstNewRefInOtherVouchers			+" Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchers);
		System.out.println("actBillTransactionCurrency						   : "+actBillTransactionCurrency							+" Value Expected : "+expBillTransactionCurrency);
		System.out.println("actBillBaseCurrency								   : "+actBillBaseCurrency									+" Value Expected : "+ expBillBaseCurrency);
		System.out.println("actBillLocalCurrency							   : "+actBillLocalCurrency									+" Value Expected : "+expBillLocalCurrency);
		System.out.println("actBillBalanceNewRefAmount						   : "+ actBillBalanceNewRefAmount							+" Value Expected : "+expBillBalanceNewRefAmount);
	    System.out.println("actBillBreakUpByTagDepartment					   : "+actBillBreakUpByTagDepartment						+" Value Expected : "+expBillBreakUpByTagDepartment);
	    System.out.println("actBillBreakUpByTagBaseCurrency				       : "+actBillBreakUpByTagBaseCurrency						+" Value Expected : "+expBillBreakUpByTagBaseCurrency);
	    System.out.println("actBillBreakUpByTagBillCurrency 				   : "+actBillBreakUpByTagBillCurrency						+" Value Expected : "+expBillBreakUpByTagBillCurrency);
	    System.out.println("actBillBreakUpByTagLocalCurrency				   : "+actBillBreakUpByTagLocalCurrency						+" Value Expected : "+expBillBreakUpByTagLocalCurrency);
	    System.out.println("actBillAmtAdjustedInTransactionCurrency			   : "+actBillAmtAdjustedInTransactionCurrency				+" Value Expected : "+expBillAmtAdjustedInTransactionCurrency);
	    System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrency : "+actBillBalanceAmtToBeAdjustedInTransactionCurrency	+" Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrency);
		
	    Thread.sleep(2000);
		   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	    billRefPickIcon.click();
	   
	    //pick button is click
	   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(breakUpByTagTab));
		breakUpByTagTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
		
		Thread.sleep(2000);
		
		String actBillNewReferencePick,actBillAmtAdjAgainstNewRefInOtherVouchersPick,actBillTransactionCurrencyPick,actBillBaseCurrencyPick,actBillLocalCurrencyPick,actBillBalanceNewRefAmountPick,actBillBreakUpByTagDepartmentPick,actBillBreakUpByTagBaseCurrencyPick,actBillBreakUpByTagBillCurrencyPick,actBillBreakUpByTagLocalCurrencyPick,actBillAmtAdjustedInTransactionCurrencyPick,actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
		String expBillNewReferencePick,expBillAmtAdjAgainstNewRefInOtherVouchersPick,expBillTransactionCurrencyPick,expBillBaseCurrencyPick,expBillLocalCurrencyPick,expBillBalanceNewRefAmountPick,expBillBreakUpByTagDepartmentPick,expBillBreakUpByTagBaseCurrencyPick,expBillBreakUpByTagBillCurrencyPick,expBillBreakUpByTagLocalCurrencyPick,expBillAmtAdjustedInTransactionCurrencyPick,expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick;
		
		actBillNewReferencePick									=billRefNewReferenceTxt.getAttribute("value");
 		actBillAmtAdjAgainstNewRefInOtherVouchersPick			=amtAdjustedAgainstNewREfinOtherVouchers.getText();
 		actBillTransactionCurrencyPick							=transactionCurency.getText();
 		actBillBaseCurrencyPick									=baseCurrency.getText();
 		actBillLocalCurrencyPick								=localCurrencyDhs.getText();
 		
 		actBillBalanceNewRefAmountPick							=balanceNewReferenceAmt.getText();
 		
 		actBillBreakUpByTagDepartmentPick						=breakUpByTagDepartment.getText();
 		actBillBreakUpByTagBaseCurrencyPick						=breakUpByTagBaseCurrency.getText();
 		actBillBreakUpByTagBillCurrencyPick						=breakUpByTagBillCurrency.getText();
 		
 		actBillBreakUpByTagLocalCurrencyPick					=breakUpByTagBaseLocalCurrency.getText();
 		actBillAmtAdjustedInTransactionCurrencyPick				=billRefAdjustAmountInTransCurency.getText();
 		actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	=billRefBalanceAmountAdjustInTrnasCurrency.getText();
		
		
		expBillNewReferencePick="609.00";
		expBillAmtAdjAgainstNewRefInOtherVouchersPick="0.00";
		expBillTransactionCurrencyPick="609.00";
		expBillBaseCurrencyPick="609.00";
		expBillLocalCurrencyPick="42.63";
		
		expBillBalanceNewRefAmountPick="609.00";
		
		expBillBreakUpByTagDepartmentPick="INDIA";
		expBillBreakUpByTagBillCurrencyPick="609";
		expBillBreakUpByTagBaseCurrencyPick="609.00";
		
		
		expBillBreakUpByTagLocalCurrencyPick="42.63";
		expBillAmtAdjustedInTransactionCurrencyPick="609";
		expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick="0.00";
	
		System.out.println("actBillNewReferencePick 								: "+actBillNewReferencePick									+ " Value Expected : "+expBillNewReferencePick);
		System.out.println("actBillAmtAdjAgainstNewRefInOtherVouchersPick			: " + actBillAmtAdjAgainstNewRefInOtherVouchersPick			+ "	Value Expected : "+expBillAmtAdjAgainstNewRefInOtherVouchersPick);
		System.out.println("actBillTransactionCurrencyPick							: "+ actBillTransactionCurrencyPick							+ " Value Expected : "+expBillTransactionCurrencyPick);
		System.out.println("actBillBaseCurrencyPick									: "+ actBillBaseCurrencyPick								+ " Value Expected : "+expBillBaseCurrencyPick);
		System.out.println("actBillLocalCurrencyPick								: "+ actBillLocalCurrencyPick								+ " Value Expected : "+expBillLocalCurrencyPick);
		System.out.println("actBillBalanceNewRefAmountPick							: "+ actBillBalanceNewRefAmountPick							+ " Value Expected : "+expBillBalanceNewRefAmountPick);
	    System.out.println("actBillBreakUpByTagDepartmentPick						: "+ actBillBreakUpByTagDepartmentPick						+ " Value Expected : "+expBillBreakUpByTagDepartmentPick);
	    System.out.println("actBillBreakUpByTagBaseCurrencyPick						: "+ actBillBreakUpByTagBaseCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBaseCurrencyPick);
	    System.out.println("actBillBreakUpByTagBillCurrencyPick						: "+ actBillBreakUpByTagBillCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagBillCurrencyPick);
	    System.out.println("actBillBreakUpByTagLocalCurrencyPick					: "+ actBillBreakUpByTagLocalCurrencyPick					+ " Value Expected : "+expBillBreakUpByTagLocalCurrencyPick);
	    System.out.println("actBillAmtAdjustedInTransactionCurrencyPick				: "+ actBillAmtAdjustedInTransactionCurrencyPick			+ " Value Expected : "+expBillAmtAdjustedInTransactionCurrencyPick);
	    System.out.println("actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick  : "+ actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick	+ " Value Expected : "+expBillBalanceAmtToBeAdjustedInTransactionCurrencyPick);
			    
		Thread.sleep(2000);
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
	    Bill_OkBtn.click();
	   
	   
	    boolean savingMessage=checkVoucherSavingMessage(docno);
		
	    System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
	
		if (savingMessage==true &&
				
		        actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
				actBillAmtAdjAgainstNewRefInOtherVouchers.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchers) &&
				actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 				
				actBillBaseCurrency.equalsIgnoreCase(actBillBaseCurrency) &&
				actBillLocalCurrency.equalsIgnoreCase(actBillLocalCurrency) &&
				actBillBalanceNewRefAmount.equalsIgnoreCase(actBillBalanceNewRefAmount) &&
				actBillBreakUpByTagDepartment.equalsIgnoreCase(actBillBreakUpByTagDepartment) &&
				actBillBreakUpByTagBaseCurrency.equalsIgnoreCase(actBillBreakUpByTagBaseCurrency) &&
				actBillBreakUpByTagBillCurrency.equalsIgnoreCase(actBillBreakUpByTagBillCurrency) &&
				actBillBreakUpByTagLocalCurrency.equalsIgnoreCase(actBillBreakUpByTagLocalCurrency) &&
				actBillAmtAdjustedInTransactionCurrency.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrency) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrency.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrency) &&
		
				
				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) &&
				actBillAmtAdjAgainstNewRefInOtherVouchersPick.equalsIgnoreCase(expBillAmtAdjAgainstNewRefInOtherVouchersPick) &&
				actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) &&
				actBillBaseCurrencyPick.equalsIgnoreCase(actBillBaseCurrencyPick) &&
				actBillLocalCurrencyPick.equalsIgnoreCase(actBillLocalCurrencyPick) &&
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(actBillBalanceNewRefAmountPick) &&
				actBillBreakUpByTagDepartmentPick.equalsIgnoreCase(actBillBreakUpByTagDepartmentPick) &&
				actBillBreakUpByTagBaseCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBaseCurrencyPick) &&
				actBillBreakUpByTagBillCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagBillCurrencyPick) &&
				actBillBreakUpByTagLocalCurrencyPick.equalsIgnoreCase(actBillBreakUpByTagLocalCurrencyPick) &&
				actBillAmtAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillAmtAdjustedInTransactionCurrencyPick) &&
				actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick.equalsIgnoreCase(actBillBalanceAmtToBeAdjustedInTransactionCurrencyPick))
		{
		
			
			return true;
			
		}
		else
		{
			
			return false;	
		}
	}


	
	

	public boolean checkSalesInvoiceVoucherQtyOfBatchBrItemAfterConsumingInPreviousVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
			
		Thread.sleep(5000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkUserFriendlyMessage();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.click();
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		int count=salesAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("Sales - Computers"))
			{
				salesAccountListCount.get(i).click();
				
				break;
			}
		}
		
		salesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	  	customerAccountTxt.click();
	  	customerAccountTxt.sendKeys(Keys.SPACE);
		 
	  	int customercount=customerAccountListCount.size();
	  	
	  	System.err.println(customercount);
	  	
	  	for(int i=0 ; i < customercount ;i++)
	  	{
	  		String data=customerAccountListCount.get(i).getAttribute("data-name");
	  		
	  		if(data.equalsIgnoreCase("Customer A"))
	  		{
	  			customerAccountListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	customerAccountTxt.sendKeys(Keys.TAB);

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				
				break;
			}
		}
			
		departmentTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
		wareHouseTxt.click();
		wareHouseTxt.sendKeys(Keys.SPACE);
			
		int warehousecount=wareHouseListCount.size();
		
		System.err.println(warehousecount);
			
		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=wareHouseListCount.get(i).getAttribute("data-name");
			
			if(data.equalsIgnoreCase("SECUNDERABAD"))
			{
				wareHouseListCount.get(i).click();
				
				break;
			}
		}
			
		wareHouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH BR ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		/*String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();*/
		
	     
		
		// Expected
		
	     
	     int expLinkRowCountValue=1;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:3";
	     String expworkFlowRow1Column3="BATCH BR ITEM";
	     String expworkFlowRow1Column4="20.00";
	     String expworkFlowRow1Column5="0.00";
	     
	   /*  String expworkFlowRow2Column1="SalOrd:4";
	     String expworkFlowRow2Column3="BATCH BR ITEM";
	     String expworkFlowRow2Column4="81.00";
	     String expworkFlowRow2Column5="0.00";*/
	     
	     
	     System.out.println("**************************************** checkSalesInvoiceVoucherQtyOfBatchBrItemAfterConsumingInPreviousVoucher  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	   /*  System.out.println("workFlowRow2Column1 	 			  : "+actworkFlowRow2Column1					+" 	Value Expected : "+expworkFlowRow2Column1);
	     System.out.println("workFlowRow2Column3  				  : "+actworkFlowRow2Column3					+" 	Value Expected : "+expworkFlowRow2Column3);
	     System.out.println("workFlowRow2Column4  				  : "+actworkFlowRow2Column4					+" 	Value Expected : "+expworkFlowRow2Column4);
	     System.out.println("workFlowRow2Column5  			   	  : "+actworkFlowRow2Column5					+" 	Value Expected : "+expworkFlowRow2Column5);*/
	     
	     
	     
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
				 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		/* && actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
	    		 && actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
	    		 && actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
	    		 && actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)*/)
	     {	
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
	    	
	    	 return false;
	     }
	}
	 	
	
	
	public boolean checkSalesInvoiceVoucherQtyOfRMARItemAfterConsumingInPreviousVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("RMA RITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
		
		String actworkFlowRow3Column1=workFlowRow3Column1.getText();
		String actworkFlowRow3Column2=workFlowRow3Column2.getText();
		String actworkFlowRow3Column3=workFlowRow3Column3.getText();
		String actworkFlowRow3Column4=workFlowRow3Column4.getText();
		String actworkFlowRow3Column5=workFlowRow3Column5.getText();
	     
		
		// Expected
		
	     
	     int expLinkRowCountValue=3;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:6";
	     String expworkFlowRow1Column3="RMA RITEM";
	     String expworkFlowRow1Column4="2.00";
	     String expworkFlowRow1Column5="0.00";
	     
	     String expworkFlowRow2Column1="SalOrd:6";
	     String expworkFlowRow2Column3="RMA RITEM";
	     String expworkFlowRow2Column4="2.00";
	     String expworkFlowRow2Column5="0.00";
	     
	     String expworkFlowRow3Column1="SalOrd:7";
	     String expworkFlowRow3Column3="RMA RITEM";
	     String expworkFlowRow3Column4="1.00";
	     String expworkFlowRow3Column5="0.00";
	     
	     
	     System.out.println("**************************************** checkSalesInvoiceVoucherQtyOfBatchBrItemAfterConsumingInPreviousVoucher  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     System.out.println("workFlowRow2Column1 	 			  : "+actworkFlowRow2Column1					+" 	Value Expected : "+expworkFlowRow2Column1);
	     System.out.println("workFlowRow2Column3  				  : "+actworkFlowRow2Column3					+" 	Value Expected : "+expworkFlowRow2Column3);
	     System.out.println("workFlowRow2Column4  				  : "+actworkFlowRow2Column4					+" 	Value Expected : "+expworkFlowRow2Column4);
	     System.out.println("workFlowRow2Column5  			   	  : "+actworkFlowRow2Column5					+" 	Value Expected : "+expworkFlowRow2Column5);
	     
	     System.out.println("workFlowRow3Column1 	 			  : "+actworkFlowRow3Column1					+" 	Value Expected : "+expworkFlowRow3Column1);
	     System.out.println("workFlowRow3Column3  				  : "+actworkFlowRow3Column3					+" 	Value Expected : "+expworkFlowRow3Column3);
	     System.out.println("workFlowRow3Column4  				  : "+actworkFlowRow3Column4					+" 	Value Expected : "+expworkFlowRow3Column4);
	     System.out.println("workFlowRow3Column5  			   	  : "+actworkFlowRow3Column5					+" 	Value Expected : "+expworkFlowRow3Column5);
	     
	     
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
	    		 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 && actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
	    		 && actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
	    		 && actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
	    		 && actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)
	    		 
	    		 && actworkFlowRow3Column1.equalsIgnoreCase(expworkFlowRow3Column1)
	    		 && actworkFlowRow3Column3.equalsIgnoreCase(expworkFlowRow3Column3)
	    		 && actworkFlowRow3Column4.equalsIgnoreCase(expworkFlowRow3Column4)
	    		 && actworkFlowRow3Column5.equalsIgnoreCase(expworkFlowRow3Column5))
	     {	
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
	    	
	    	 return false;
	     }
	}
	
	
	

	public boolean checkSalesInvoiceVoucherQtyOfBatchBrItemInThirdRowAfterConsumingThroughPrevious() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();
		
		getWaitForAlert();
		
		getAlert().accept();
		
		boolean loading=checkLoadingMessage();
		
		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BATCH BR ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		/*String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();*/
		
	     
		
		// Expected
		
	     
	     int expLinkRowCountValue=1;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:3";
	     String expworkFlowRow1Column3="BATCH BR ITEM";
	     String expworkFlowRow1Column4="20.00";
	     String expworkFlowRow1Column5="0.00";
	     
	    /* String expworkFlowRow2Column1="SalOrd:4";
	     String expworkFlowRow2Column3="BATCH BR ITEM";
	     String expworkFlowRow2Column4="81.00";
	     String expworkFlowRow2Column5="0.00";*/
	     
	     
	     System.out.println("**************************************** checkSalesInvoiceVoucherQtyOfBatchBrItemInThirdRowAfterConsumingThroughPrevious  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     /*System.out.println("workFlowRow2Column1 	 			  : "+actworkFlowRow2Column1					+" 	Value Expected : "+expworkFlowRow2Column1);
	     System.out.println("workFlowRow2Column3  				  : "+actworkFlowRow2Column3					+" 	Value Expected : "+expworkFlowRow2Column3);
	     System.out.println("workFlowRow2Column4  				  : "+actworkFlowRow2Column4					+" 	Value Expected : "+expworkFlowRow2Column4);
	     System.out.println("workFlowRow2Column5  			   	  : "+actworkFlowRow2Column5					+" 	Value Expected : "+expworkFlowRow2Column5);*/
	     
	     
	     
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
				 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    	/*	 && actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
	    		 && actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
	    		 && actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
	    		 && actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)*/)
	     {	
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
	    	
	    	 return false;
	     }
	}
	 	
	
	
	public boolean checkSalesInvoiceVoucherQtyOfRMARItemInThirdRowAfterConsumingThroughPrevious() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("RMA RITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		select3rdRow_4thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("0");
		enter_FQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRate));
		enter_AvgRate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AvgRateo));
		enter_AvgRateo.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchOnDropdown));
		
		List<WebElement> rowCountInLinkScreen=LinkRowCount;
		
		int actLinkRowCountValue=rowCountInLinkScreen.size();
		
		boolean actsearchOnDropdown=searchOnDropdown.isDisplayed();
		boolean actcontainingDropdown=containingDropdown.isDisplayed();
		boolean actworkFlowSearchTxt=workFlowSearchTxt.isDisplayed();
		boolean actworkFlowCustomizeBtn=workFlowCustomizeBtn.isDisplayed();
		boolean actworkFlowOkBtn=workFlowOkBtn.isDisplayed();
		
		String actworkFlowRow1Column1=workFlowRow1Column1.getText();
		String actworkFlowRow1Column2=workFlowRow1Column2.getText();
		String actworkFlowRow1Column3=workFlowRow1Column3.getText();
		String actworkFlowRow1Column4=workFlowRow1Column4.getText();
		String actworkFlowRow1Column5=workFlowRow1Column5.getText();
		
		String actworkFlowRow2Column1=workFlowRow2Column1.getText();
		String actworkFlowRow2Column2=workFlowRow2Column2.getText();
		String actworkFlowRow2Column3=workFlowRow2Column3.getText();
		String actworkFlowRow2Column4=workFlowRow2Column4.getText();
		String actworkFlowRow2Column5=workFlowRow2Column5.getText();
		
		String actworkFlowRow3Column1=workFlowRow3Column1.getText();
		String actworkFlowRow3Column2=workFlowRow3Column2.getText();
		String actworkFlowRow3Column3=workFlowRow3Column3.getText();
		String actworkFlowRow3Column4=workFlowRow3Column4.getText();
		String actworkFlowRow3Column5=workFlowRow3Column5.getText();
	     
		
		// Expected
		
	     
	     int expLinkRowCountValue=3;
	     
	     boolean expsearchOnDropdown=true;
	     boolean expcontainingDropdown=true;
	     boolean expworkFlowSearchTxt=true;
	     boolean expworkFlowCustomizeBtn=true;
	     boolean expworkFlowOkBtn=true;
	     
	     String expworkFlowRow1Column1="SalOrd:6";
	     String expworkFlowRow1Column3="RMA RITEM";
	     String expworkFlowRow1Column4="2.00";
	     String expworkFlowRow1Column5="0.00";
	     
	     String expworkFlowRow2Column1="SalOrd:6";
	     String expworkFlowRow2Column3="RMA RITEM";
	     String expworkFlowRow2Column4="2.00";
	     String expworkFlowRow2Column5="0.00";
	     
	     String expworkFlowRow3Column1="SalOrd:7";
	     String expworkFlowRow3Column3="RMA RITEM";
	     String expworkFlowRow3Column4="1.00";
	     String expworkFlowRow3Column5="0.00";
	     
	     
	     System.out.println("**************************************** checkSalesInvoiceVoucherQtyOfRMARItemInThirdRowAfterConsumingThroughPrevious  ***************************************");
	     
	     System.out.println("LinkRowCountValue  				  : "+actLinkRowCountValue						+" 	Value Expected : "+expLinkRowCountValue);
	     
	     System.out.println("searchOnDropdown  					  : "+actsearchOnDropdown						+" 	Value Expected : "+expsearchOnDropdown);
	     System.out.println("containingDropdown  				  : "+actcontainingDropdown						+" 	Value Expected : "+expcontainingDropdown);
	     System.out.println("workFlowSearchTxt  				  : "+actworkFlowSearchTxt						+" 	Value Expected : "+expworkFlowSearchTxt);
	     System.out.println("workFlowCustomizeBtn  				  : "+actworkFlowCustomizeBtn					+" 	Value Expected : "+expworkFlowCustomizeBtn);
	     System.out.println("workFlowOkBtn  					  : "+actworkFlowOkBtn							+" 	Value Expected : "+expworkFlowOkBtn);
	     
	     System.out.println("workFlowRow1Column1 	 			  : "+actworkFlowRow1Column1					+" 	Value Expected : "+expworkFlowRow1Column1);
	     System.out.println("workFlowRow1Column3  				  : "+actworkFlowRow1Column3					+" 	Value Expected : "+expworkFlowRow1Column3);
	     System.out.println("workFlowRow1Column4  				  : "+actworkFlowRow1Column4					+" 	Value Expected : "+expworkFlowRow1Column4);
	     System.out.println("workFlowRow1Column5  			   	  : "+actworkFlowRow1Column5					+" 	Value Expected : "+expworkFlowRow1Column5);
	     
	     System.out.println("workFlowRow2Column1 	 			  : "+actworkFlowRow2Column1					+" 	Value Expected : "+expworkFlowRow2Column1);
	     System.out.println("workFlowRow2Column3  				  : "+actworkFlowRow2Column3					+" 	Value Expected : "+expworkFlowRow2Column3);
	     System.out.println("workFlowRow2Column4  				  : "+actworkFlowRow2Column4					+" 	Value Expected : "+expworkFlowRow2Column4);
	     System.out.println("workFlowRow2Column5  			   	  : "+actworkFlowRow2Column5					+" 	Value Expected : "+expworkFlowRow2Column5);
	     
	     System.out.println("workFlowRow3Column1 	 			  : "+actworkFlowRow3Column1					+" 	Value Expected : "+expworkFlowRow3Column1);
	     System.out.println("workFlowRow3Column3  				  : "+actworkFlowRow3Column3					+" 	Value Expected : "+expworkFlowRow3Column3);
	     System.out.println("workFlowRow3Column4  				  : "+actworkFlowRow3Column4					+" 	Value Expected : "+expworkFlowRow3Column4);
	     System.out.println("workFlowRow3Column5  			   	  : "+actworkFlowRow3Column5					+" 	Value Expected : "+expworkFlowRow3Column5);
	     
	     
	     if(actLinkRowCountValue==expLinkRowCountValue
	    		 
	    		 && actsearchOnDropdown==expsearchOnDropdown && actcontainingDropdown==expcontainingDropdown && actworkFlowSearchTxt==expworkFlowSearchTxt
	    		 && actworkFlowCustomizeBtn==expworkFlowCustomizeBtn && actworkFlowOkBtn==expworkFlowOkBtn
	    		 
	    		 && actworkFlowRow1Column1.equalsIgnoreCase(expworkFlowRow1Column1)
	    		 && actworkFlowRow1Column3.equalsIgnoreCase(expworkFlowRow1Column3)
	    		 && actworkFlowRow1Column4.equalsIgnoreCase(expworkFlowRow1Column4)
	    		 && actworkFlowRow1Column5.equalsIgnoreCase(expworkFlowRow1Column5)
	    		 
	    		 && actworkFlowRow2Column1.equalsIgnoreCase(expworkFlowRow2Column1)
	    		 && actworkFlowRow2Column3.equalsIgnoreCase(expworkFlowRow2Column3)
	    		 && actworkFlowRow2Column4.equalsIgnoreCase(expworkFlowRow2Column4)
	    		 && actworkFlowRow2Column5.equalsIgnoreCase(expworkFlowRow2Column5)
	    		 
	    		 && actworkFlowRow3Column1.equalsIgnoreCase(expworkFlowRow3Column1)
	    		 && actworkFlowRow3Column3.equalsIgnoreCase(expworkFlowRow3Column3)
	    		 && actworkFlowRow3Column4.equalsIgnoreCase(expworkFlowRow3Column4)
	    		 && actworkFlowRow3Column5.equalsIgnoreCase(expworkFlowRow3Column5))
	     {	
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resPass);
	    	 
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
					
	    	 return true;
	     }
	     else
	     {
	    	 System.out.println("Test Pass : Batch fields are As expected ");
	    	 excelReader.setCellData(xlfile, "Sheet6", 11, 9, resFail);
					
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
	    	 workFlowCloseBtn.click();
	    	
	    	 return false;
	     }
	}
	
	
	
	public boolean checkReleaseBinItemThroughLineWiseSecunderabad() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		/*Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesVoucher));
		salesInvoicesVoucher.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		getAction().doubleClick(grid_ChkBox1).build().perform();*/
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
		thirdRowIndex.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		deleteRowBtn.click();
		
		Thread.sleep(2000); 
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	  	enter_ItemTxt.sendKeys(Keys.END);
	  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	  	enter_ItemTxt.sendKeys(Keys.SPACE);
	  	
	  	int itemcount1=itemListCount.size();
	  	
	  	System.err.println(itemcount1);
	  	
	  	for(int i=0 ; i < itemcount1 ;i++)
	  	{
	  		String data=itemListCount.get(i).getAttribute("data-sname");
	  		
	  		if(data.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
	  		{
	  			itemListCount.get(i).click();
	  			
	  			break;
	  		}
	  	}
				
	  	enter_ItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
		select3rdRow_4thColumn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("5");
		enter_AQTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
		select3rdRow_9thColumn.click();
		
		 List<WebElement> rowCountInLinkScreen1=LinkRowCount;
			
	     int rowCount1=rowCountInLinkScreen1.size();
		
	     System.out.println(rowCount1);
	     
	     for (int i = 1; i <= rowCount1; i++) 
	     {
	    	 WebElement voucherno=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[7]"));
	    	 
	    	 WebElement itemName=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[9]"));
	    	 
	    	 String actvoucheno=voucherno.getText();
	    	 
	    	 String actitemName=itemName.getText();
	    	 
	    	 System.out.println(actvoucheno);
	    	 
	    	 System.out.println(actitemName);
	    	 
	    	 if(actvoucheno.equalsIgnoreCase("SalOrd:2") && actitemName.equalsIgnoreCase("BIN FINISHED GOODS ITEM"))
	    	 {
	    		 Thread.sleep(2000);
	    		 WebElement radioBtn=getDriver().findElement(By.xpath("//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr["+i+"]/td[2]/input"));
	    		 radioBtn.click();
	    		 
	    		 break;
	    	 }

	     }
	     
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtn));
		workFlowOkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
		select3rdRow_11thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("29");
		enter_Rate.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
		binAutoAllocateBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
		binOkBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		boolean savingMessage=checkVoucherSavingMessage(docno);
		
		System.out.println("*********************************** checkReleaseBinItemThroughLineWiseSecunderabad  ************************************");
		
		System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
		
		if(savingMessage==true)
		{
			System.out.println("Test Pass : Voucher Saved Successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			excelReader.setCellData(xlfile, "Sheet6", 50, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher NOT Saved Successfully");
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			excelReader.setCellData(xlfile, "Sheet6", 50, 9, resFail);
			return false;
		}
	}
		
		
			
	
	public VouchersOutwardPage(WebDriver driver)
	{
		
		PageFactory.initElements(driver, this);
		
	}
	

}
