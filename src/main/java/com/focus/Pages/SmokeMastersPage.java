package com.focus.Pages;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;

import com.focus.base.BaseEngine;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.plaf.synth.SynthSeparatorUI;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.Point;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.ElementClickInterceptedException;
import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.server.handler.interactions.MouseMoveToLocation;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;
import com.sun.xml.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;

public class SmokeMastersPage extends BaseEngine
{

	// Home Menu
	@FindBy(xpath = "//*[@id='1']/div/span")
	public static WebElement homeMenu;

	//Financial Menu
	@FindBy (xpath="//span[@class='icon-financial icon-font1']")
    private static WebElement financialMenu;
	
	//Inventory Menu
	@FindBy (xpath="//span[@class='icon-inventory icon-font1']")
    private static WebElement inventoryMenu;
	
	//Fixed Assets Menu
	@FindBy (xpath="//span[@class='icon-assets icon-font1']")
    private static WebElement fixedAssetsMenu;
	
	//Production Menu
	@FindBy (xpath="//span[@class='icon-production icon-font1']")
    private static WebElement productionMenu;
	
	//Point Of Sale Menu
	@FindBy (xpath="//div[contains(text(),'Point of Sale')]")
    private static WebElement pointOfSaleMenu;
	
	//Quality Of Control Menu
	@FindBy (xpath="//span[@class='icon-quotationanalysis icon-font1']")
    private static WebElement qualityControlMenu;
	
	//Settings Menu
	@FindBy (xpath="//span[@class='icon-settings icon-font1']")
	private static WebElement SettingsMenu;
	
	
        //Company Menu
		@FindBy (xpath="//*[@id='2']/span")
	    private static WebElement companyMenu;

	    //Security Menu	
		@FindBy (xpath="//*[@id='6']/span")
	    private static WebElement securityMenu;

        //Masters Menu	
		@FindBy (xpath="//*[@id='1000']/span")
	    private static WebElement mastersMenu;

        //DataManagement menu
		@FindBy (xpath="//*[@id='25']/span")
	    private static WebElement dataMangementMenu;

        //Utilities Menu		
		@FindBy (xpath="//*[@id='20']/span")
	    private static WebElement utilities;
	
	
		//In Masters Menu
		
		// Accounts
		@FindBy(xpath = "//a[@id='1104']//span[contains(text(),'Account')]")
		public static WebElement accounts;

        @FindBy (xpath="//*[@id='220']/span")
		private static WebElement currency;

        @FindBy (xpath="//*[@id='221']/span")
		private static WebElement products;

        @FindBy (xpath="//*[@id='224']/span")
		private static WebElement mrp;

        @FindBy (xpath="//a[@id='225']//span[contains(text(),'QC')]")
		private static WebElement qc;

        @FindBy (xpath="//*[@id='251']/span")
		private static WebElement maintainance;

        @FindBy (xpath="//*[@id='8001']/span")
		private static WebElement pointOfSale;

        @FindBy (xpath="//*[@id='1106']/span")
		private static WebElement departments;

		@FindBy (xpath="//*[@id='1107']/span")
		private static WebElement warehouse;

		@FindBy (xpath="//*[@id='1108']/span")
		private static WebElement costcenter;

		@FindBy (xpath="//*[@id='1109']/span")
		private static WebElement location;

		@FindBy (xpath="//*[@id='1110']/span")
		private static WebElement region;

		@FindBy (xpath="//*[@id='1111']/span")
		private static WebElement country;

		@FindBy (xpath="//*[@id='1112']/span")
		private static WebElement state;

		@FindBy (xpath="//*[@id='1113']/span")
		private static WebElement city;

		@FindBy (xpath="//*[@id='1115']/span")
		private static WebElement bins;

		@FindBy (xpath="//*[@id='1126']/span")
		private static WebElement insurance;

		@FindBy (xpath="//*[@id='1127']/span")
		private static WebElement fixedassets;
		
		@FindBy (xpath="//*[@id='1161']/span")
		private static WebElement taxCode;
		
        @FindBy (xpath="//*[@id='1103']/span")
		private static WebElement payroll;
	
        @FindBy (xpath="//*[@id='8002']/span")
  		private static WebElement schemes;
		
		


	// Currency Menu
	@FindBy(xpath = "//a[@id='220']//span[contains(text(),'Currency')]")
	private static WebElement currencyMenu;

	@FindBy(xpath = "//span[contains(text(),'Currency Master')]")
	private static WebElement currencyMasterMenu;

	@FindBy(xpath = "//a[@id='71']//span[contains(text(),'Exchange Rate')]")
	private static WebElement exchangeRateMenu;

	@FindBy(xpath = "//span[contains(text(),'Exchange Rate History')]")
	private static WebElement exchangeRateHistoryMenu;

	// Items Menu
	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/aside[1]/section[1]/ul[1]/li[1]/ul[1]/li[3]/ul[1]/li[3]/a[1]/span[1]")
	public static WebElement itemsMenu;

	// Item
	@FindBy(xpath = "//*[@id='1105']/span")
	private static WebElement homeMasterItemMainMenuItem;

	@FindBy(xpath = "//span[contains(text(),'Seller Price Book')]")
	private static WebElement sellerPriceBookMenu;

	@FindBy(xpath = "//*[@id='80']/span")
	private static WebElement buyerPriceBookMenu;

	// Units
	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/aside[1]/section[1]/ul[1]/li[1]/ul[1]/li[3]/ul[1]/li[3]/ul[1]/li[2]/a[1]/span[1]")
	public static WebElement unitsMenu;

	// Units Conversion
	@FindBy(xpath = "//a[@id='72']//span[contains(text(),'Unit Conversion')]")
	private static WebElement unitsConversionMenu;

	// Units Conversion Title
	@FindBy(xpath = "//div[@class='navText']//span[contains(text(),'Unit Conversion')]")
	public static WebElement unitsConversionTitle;

	// Department Menu
	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/aside[1]/section[1]/ul[1]/li[1]/ul[1]/li[3]/ul[1]/li[10]/a[1]/span[1]")
	public static WebElement departmentMenu;

	// Bins Menu
	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/aside[1]/section[1]/ul[1]/li[1]/ul[1]/li[3]/ul[1]/li[18]/a[1]/span[1]")
	public static WebElement binsMenu;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/aside[1]/section[1]/ul[1]/li[1]/ul[1]/li[3]/ul[1]/li[11]/a[1]/span[1]")
	public static WebElement warehouseMenu;

	// Accounts Title
	@FindBy(xpath = "//span[@id='spnHeaderText']")
	public static WebElement accountsTitle;

	// Master Main Header Fields
	@FindBy(xpath = "//i[@class='icon-font6 icon-new']")
	public static WebElement masterNewBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-add-group']")
	public static WebElement masterAddGroupBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-edit']")
	public static WebElement masterEditBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-clone']")
	public static WebElement masterCloneBtn;

	@FindBy(xpath = "//i[@class='icon-properties icon-font6']")
	public static WebElement masterPropertiesBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-delete']")
	public static WebElement masterDeleteBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-close']")
	public static WebElement masterCloseBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-group']")
	public static WebElement masterGroupBtn;

	@FindBy(xpath = "//*[@id='toggle_ribbon']")
	public static WebElement masterRibbonToExpandOptions;

	@FindBy(xpath = "//i[@class='icon-font6 icon-delete-all']")
	public static WebElement masterDeleteAllBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-closed-account']")
	public static WebElement masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity;

	@FindBy(xpath = "//i[@class='icon-font6 icon-open-close-account']")
	public static WebElement masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState;

	@FindBy(xpath = "//i[@class='icon-font6 icon-import']")
	public static WebElement masterAdvanceMasterImportORExportBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-info']")
	public static WebElement masterAuthorInfoBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-up-arrow']")
	public static WebElement masterMoveUpBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-down-arrow']")
	public static WebElement masterMoveDownBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-sort']")
	public static WebElement masterSortBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-mass-update']")
	public static WebElement masterMassUpdateBtn;

	@FindBy(xpath = "//a[@class='lSNext']")
	public static WebElement masterRibbonControlNextBtn;

	@FindBy(xpath = "//*[@id='btnXMLImport']")
	public static WebElement masterImportFromXmlBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-xmlexport']")
	public static WebElement masterExportFormatToXmlBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-custamize']")
	public static WebElement masterCustamizeMasterBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-options']")
	public static WebElement masterCustamizeViewBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-tree']")
	public static WebElement mastercustamizeTreeBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-stock-ledger']")
	public static WebElement masterLedgerBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-financial-1']")
	public static WebElement masterManageCreditBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-department-appropriation']")
	public static WebElement masterDepartmentAppropriationBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-budget']")
	public static WebElement masterBudgetBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-backtrack']")
	public static WebElement masterBackTrackBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-transfer']")
	public static WebElement masterTranferBtn;

	@FindBy(xpath = "//*[@id='btnNewSets']")
	public static WebElement masterNewSetBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-modifier']")
	public static WebElement masterModifierBtn;

	@FindBy(xpath = "//*[@id='btnSetType']")
	public static WebElement masterSetTypeBtn;

	@FindBy(xpath = "//i[@class='icon-convert icon-font6']")
	public static WebElement masterUnitConversionBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-alternate-product-1']")
	public static WebElement masterAlternateItemBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-related-product']")
	public static WebElement masterRelatedItemBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-stock-ledger']")
	public static WebElement masterStockLedgerBtn;

	// Master Left panel TreeID Elements
	@FindBy(xpath = "//*[@id='iTreeId']")
	public static WebElement masterTreeIdDropdown;

	@FindBy(xpath = "//*[@id='spnhiererchy']/div/div[1]/div/div/button/span")
	public static WebElement masterTreeIDToggleBtn;

	@FindBy(xpath = "//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[1]/a")
	public static WebElement masterTreeIDToggle_CreateTreeBtn;

	@FindBy(xpath = "//h4[contains(text(),'Create Tree')]")
	public static WebElement treeID_CreateTreeLabel;

	@FindBy(xpath = "//*[@id='btnCancel']")
	public static WebElement treeID_CloseBtn;

	@FindBy(xpath = "//input[@id='txtTreeName']")
	public static WebElement treeID_TreeTxt;

	@FindBy(xpath = "//input[@id='rbtManual']")
	public static WebElement treeID_ManualRadioBtn;

	@FindBy(xpath = "//input[@id='rbtAuto']")
	public static WebElement treeID_AutoRadioBtn;

	@FindBy(xpath = "//select[@id='cmbTreeList']")
	public static WebElement treeID_SelectTreeDropdown;

	@FindBy(xpath = "//input[@id='chkIncludeGroup']")
	public static WebElement treeID_IncludeGroupsCheckBox;

	@FindBy(xpath = "//input[@id='chkAddLeaveAtZeroLevel']")
	public static WebElement treeID_AddLeafAlwaysAtTheZerolevelOnCreationCheckbox;

	@FindBy(xpath = "//*[@id='MasterTreeTable_SelectFields']")
	public static WebElement treeID_GridFirstSelectFields;

	@FindBy(xpath = "//*[@id='MasterTreeTable_col_2-1']")
	public static WebElement treeID_GridSecondSelectFields;

	@FindBy(xpath = "//input[@id='chkAutoGroup']")
	public static WebElement treeID_AlwaysAutoGroupOnCreationCheckbox;

	@FindBy(xpath = "//input[@id='chkAlwaysSorted']")
	public static WebElement treeID_AlwaysSortedCheckbox;

	@FindBy(xpath = "//*[@id='btnOk']")
	public static WebElement treeID_PopOkBtn;

	@FindBy(xpath = "//*[@id='btnCancel']")
	public static WebElement treeID_PopCancelBtn;

	@FindBy(xpath = "//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[2]")
	public static WebElement masterTreeIDToggle_EditBtn;

	@FindBy(xpath = "//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[3]")
	public static WebElement masterTreeIDToggle_DeleteBtn;

	@FindBy(xpath = "//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[4]")
	public static WebElement masterTreeIDToggle_setDefaultBtn;

	// TreeViewID Elements
	@FindBy(xpath = "//select[@id='iTreeViewId']")
	public static WebElement masterTreeViewIDDropdown;

	@FindBy(xpath = "//*[@id='spnhiererchy']/div/div[2]/div/div/button/span")
	public static WebElement masterTreeViewIDToggleBtn;

	@FindBy(xpath = "//*[@id='spnhiererchy']/div/div[2]/div/div/ul/li[1]")
	public static WebElement masterTreeViewIdCreateViewBtn;

	@FindBy(xpath = "//*[@id='createViewDiv']/div/div[1]/div[1]/h4")
	public static WebElement CreateView_Label;

	@FindBy(xpath = "//*[@id='btnCancel']/i")
	public static WebElement CreateView_CloseBtn;

	@FindBy(xpath = "//*[@id='ctrlCreateMasterViewH']")
	public static WebElement CreateView_CreateViewTxt;

	@FindBy(xpath = "//*[@id='ctrlCreateMasterViewH_input_image']/span")
	public static WebElement CreateView_ExpansionBtn;

	@FindBy(xpath = "//*[@id='ctrlCreateMasterViewH_input_settings']/span")
	public static WebElement CreateView_SettingBtn;

	@FindBy(xpath = "//input[@id='chkAvailbleonMobileApp']")
	public static WebElement CreateView_AvailbleonMobileAppCheckbox;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
	public static WebElement CreateView_Conjuction1Dropdown;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[2]/select")
	public static WebElement CreateView_AccountType1Dropdown;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[3]/select")
	public static WebElement CreateView_EqaulTo1Dropdown;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[4]/select")
	public static WebElement CreateView_Value1Dropdown;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[5]/input")
	public static WebElement CreateView_Customer1Dropdown;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[6]/span")
	public static WebElement CreateView_CloseFirstrow;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[7]/span")
	public static WebElement CreateView_AddRowBtn;

	// Creation For Second Row
	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
	public static WebElement CreateView_Conjuction2Dropdown;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[2]/select")
	public static WebElement CreateView_AccountType2Dropdown;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[3]/select")
	public static WebElement CreateView_EqaulTo2Dropdown;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[4]/select")
	public static WebElement CreateView_Value2Dropdown;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[5]/input")
	public static WebElement CreateView_Customer2Dropdown;

	@FindBy(xpath = "//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[6]/span")
	public static WebElement CreateView_CloseSecondrow;

	@FindBy(xpath = "//button[@id='btnMasterViewDelete']")
	public static WebElement CreateView_DeleteBtn;

	@FindBy(xpath = "//button[@id='btnSave']")
	public static WebElement CreateView_SaveBtn;

	@FindBy(xpath = "//*[@id='btnCancel']")
	public static WebElement CreateView_CancelBtn;

	@FindBy(xpath = "//*[@id='spnhiererchy']/div/div[2]/div/div/ul/li[2]/a")
	public static WebElement masterTreeeViewIdEditBtn;

	@FindBy(xpath = "//*[@id='spnhiererchy']/div/div[2]/div/div/ul/li[3]/a")
	public static WebElement masterTreeViewIdDeleteBtn;

	@FindBy(xpath = "//div[@id='divTreeMenu']")
	public static WebElement masterTreeDisplayMenuAccountGroups;

	@FindBy(xpath = "//*[@id='oncheckaccorderan']")
	public static WebElement masterOptionToHideAccountsGroupTree; 

	@FindBy(xpath = "//*[@id='0']/a")
	private static WebElement accountRootAccount;
	
	@FindBy(xpath = "//*[@id='12']/a[2]")
	private static WebElement itemUnderRootAccount;

	@FindBy(xpath = "//*[@id='18']/a[2]")
	private static WebElement accountAssestsGroup;

	@FindBy(xpath = "//*[@id='17']/a[2]")
	private static WebElement accountFixedAssestsGroup;

	@FindBy(xpath = "//*[@id='23']/a[2]")
	private static WebElement accountCurrentAssetsGroup;

	@FindBy(xpath = "//*[@id='8']/a[2]")
	private static WebElement accountCAshAndBankGroup;

	@FindBy(xpath = "//*[@id='13']/a[2]")
	private static WebElement accountInventoriesGroup;

	@FindBy(xpath = "//*[@id='22']/a[2]")
	private static WebElement accountAccountsReceivableGroup;

	@FindBy(xpath = "//*[@id='72']/a[2]")
	private static WebElement accountInvestmentsGroup;

	@FindBy(xpath = "//*[@id='25']/a[2]")
	private static WebElement accountExpensesGroup;

	@FindBy(xpath = "//*[@id='24']/a[2]")
	private static WebElement accountDirectExpensesGroup;

	@FindBy(xpath = "//*[@id='73']/a[2]")
	private static WebElement accountIndirectExpensesGroup;

	@FindBy(xpath = "//*[@id='54']/a[2]")
	private static WebElement accountAdministrativeExpensesGroup;

	@FindBy(xpath = "//*[@id='60']/a[2]")
	private static WebElement accountEmployeeBenefitsGroup;

	@FindBy(xpath = "//*[@id='64']/a[2]")
	private static WebElement accountFinancialChargesGroup;

	@FindBy(xpath = "//*[@id='69']/a[2]")
	private static WebElement accountGainAndLossGroup;

	@FindBy(xpath = "//*[@id='26']/a[2]")
	private static WebElement accountControlAccountsGroup;

	@FindBy(xpath = "//*[@id='29']/a[2]")
	private static WebElement accountRevenueGroup;

	@FindBy(xpath = "//*[@id='28']/a[2]")
	private static WebElement accountSalesGroup;

	@FindBy(xpath = "//*[@id='33']/a[2]")
	private static WebElement accountEqitiesGroup;

	@FindBy(xpath = "//*[@id='32']/a[2]")
	private static WebElement accountCapitalGroup;

	@FindBy(xpath = "//*[@id='39']/a[2]")
	private static WebElement accountLiabilitiesGroup;

	@FindBy(xpath = "//*[@id='38']/a[2]")
	private static WebElement accountLoanAndBorrowingGroup;

	@FindBy(xpath = "//*[@id='37']/a[2]")
	private static WebElement accountLoansGroup;

	@FindBy(xpath = "//*[@id='42']/a[2]")
	private static WebElement accountAccruedLiabilitiesGroup;

	@FindBy(xpath = "//*[@id='45']/a[2]")
	private static WebElement accountTradePayableGroup;

	@FindBy(xpath = "//*[@id='48']/a[2]")
	private static WebElement accountProvisionsGroup;

	// Header Elements of Master MainLanding
	@FindBy(xpath = "//*[@id='txtsrch-term']")
	public static WebElement masterSearchTxt;

	@FindBy(xpath = "//*[@id='btnSearchAcc1']/i")
	public static WebElement masterSearchBtn;

	@FindBy(xpath = "//a[contains(text(),'Search on')]")
	public static WebElement masterSearchTxtBtn_SearchOnBtn;

	@FindBy(xpath = "//label[@class='form-group']")
	public static WebElement searchOn_SelectFilterLabel;

	@FindBy(xpath = "//select[@id='ddlSelectFilter']")
	public static WebElement searchOn_SelectFilterDropdown;

	@FindBy(xpath = "//input[@id='chkSearchSelectAll']")
	public static WebElement searchOn_SelectAllCheckBox;

	@FindBy(xpath = "//*[@id='0']")
	public static WebElement searchOn_NameCheckbox;

	@FindBy(xpath = "//input[@id='1']")
	public static WebElement searchOn_AliasCheckbox;

	@FindBy(xpath = "//input[@id='2']")
	public static WebElement searchOn_COdeCheckbox;

	@FindBy(xpath = "//input[@id='3']")
	public static WebElement searchOn_AccountTypeCheckbox;

	@FindBy(xpath = "//input[@id='4']")
	public static WebElement searchOn_CreditLimitCheckbox;

	@FindBy(xpath = "//input[@id='5']")
	public static WebElement searchOn_CreditDaysCheckbox;

	@FindBy(xpath = "//input[@id='6']")
	public static WebElement searchOn_CreatedByCheckbox;

	@FindBy(xpath = "//input[@id='7']")
	public static WebElement searchOn_ModifiedByCheckbox;

	@FindBy(xpath = "//input[@id='8']")
	public static WebElement searchOn_CreatedDateCheckbox;

	@FindBy(xpath = "//input[@id='9']")
	public static WebElement searchOn_ModifiedDate;

	@FindBy(xpath = "//input[@id='10']")
	public static WebElement searchOn_AllowOtherCompaniesToViewTheRecordCheckbox;

	@FindBy(xpath = "//input[@id='11']")
	public static WebElement searchOn_SyscReceiverDateCheckbox;

	@FindBy(xpath = "//input[@id='12']")
	public static WebElement searchOn_EditingLocationCheckbox;

	@FindBy(xpath = "//input[@id='13']")
	public static WebElement searchOn_ChequeDiscountLimitCheckbox;

	@FindBy(xpath = "//input[@id='14']")
	public static WebElement searchOn_RateOfInterestCheckbox;

	@FindBy(xpath = "//input[@id='15']")
	public static WebElement searchOn_BankACCheckbox;

	@FindBy(xpath = "//input[@id='16']")
	public static WebElement searchOn_PDCDIscountedAC;

	@FindBy(xpath = "//input[@id='17']")
	public static WebElement searchOn_DebitCreditProposalCheckbox;

	@FindBy(xpath = "//input[@id='18']")
	public static WebElement searchOn_DebitCreditRequiredCheckbox;

	@FindBy(xpath = "//input[@id='19']")
	public static WebElement searchOn_ExchangeAdjustmentGainACCheckbox;

	@FindBy(xpath = "//input[@id='20']")
	public static WebElement searchOn_ExchangeAdjustmentLossACCheckbox;

	@FindBy(xpath = "//input[@id='21']")
	public static WebElement searchOn_PrimaryAccountCheckbox;

	@FindBy(xpath = "//input[@id='22']")
	public static WebElement searchOn_DefaultCurrencyCheckbox;

	@FindBy(xpath = "//input[@id='23']")
	public static WebElement searchOn_ConsolidationMethodCheckbox;

	@FindBy(xpath = "//input[@id='24']")
	public static WebElement searchOn_PaymentTermsCheckbox;

	@FindBy(xpath = "//input[@id='25']")
	public static WebElement searchOn_RemainderTermsCheckbox;

	@FindBy(xpath = "//input[@id='26']")
	public static WebElement searchOn_FinanceChargeTermsCheckbox;

	@FindBy(xpath = "//input[@id='27']")
	public static WebElement searchOn_AddressCheckbox;

	@FindBy(xpath = "//input[@id='28']")
	public static WebElement searchOn_City1Checkbox;

	@FindBy(xpath = "//input[@id='29']")
	public static WebElement searchOn_Pin1Checkbox;

	@FindBy(xpath = "//input[@id='30']")
	public static WebElement searchOn_DeliveryAddreddCheckbox;

	@FindBy(xpath = "//input[@id='31']")
	public static WebElement searchOn_City2Checkbox;

	@FindBy(xpath = "//input[@id='32']")
	public static WebElement searchOn_Pin2Checkbox;

	@FindBy(xpath = "//input[@id='33']")
	public static WebElement searchOn_SendEmailToCustomerCheckbox;

	@FindBy(xpath = "//input[@id='34']")
	public static WebElement searchOn_AllowCustomerPortalCheckbox;

	@FindBy(xpath = "//input[@id='35']")
	public static WebElement searchOn_EmailCheckbox;

	@FindBy(xpath = "//input[@id='36']")
	public static WebElement searchOn_PasswordCheckbox;

	@FindBy(xpath = "//input[@id='37']")
	public static WebElement searchOn_TelNOCheckbox;

	@FindBy(xpath = "//input[@id='38']")
	public static WebElement searchOn_FaxNoCheckbox;

	@FindBy(xpath = "//input[@id='39']")
	public static WebElement searchOn_BankAccountNameCheckbox;

	@FindBy(xpath = "//input[@id='40']")
	public static WebElement searchOn_BankAccountNumberCheckbox;

	@FindBy(xpath = "//input[@id='41']")
	public static WebElement searchOn_IFSCCodeCheckbox;

	@FindBy(xpath = "//input[@id='42']")
	public static WebElement searchOn_PaymentTypeCheckbox;

	@FindBy(xpath = "//input[@id='43']")
	public static WebElement searchOn_FinanceEmailCheckbox;

	@FindBy(xpath = "//input[@id='44']")
	public static WebElement searchOn_PortalEmailCheckbox;

	@FindBy(xpath = "//input[@id='45']")
	public static WebElement searchOn_NetbalanceCheckbox;

	@FindBy(xpath = "//input[@id='46']")
	public static WebElement searchOn_DRBalanceCheckbox;

	@FindBy(xpath = "//input[@id='47']")
	public static WebElement searchOn_CRbalanceCheckbox;

	@FindBy(xpath = "//*[@id='divSearchMenu']/div[4]/button")
	public static WebElement searchOn_OkBtn;

	@FindBy(xpath = "//a[contains(text(),'Advance Search')]")
	public static WebElement masterSearchTxtBtn_AdvanceSearchBtn;

	// First Row Fields
	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[1]/select")
	public static WebElement advanceSearch_Conjuction1Dropdown;

	@FindBy(xpath = "//tbody//input[@placeholder='Select Field']")
	public static WebElement advanceSearch_SelectField1Dropdown;

	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[3]/select")
	public static WebElement advanceSearch_SelectOperator1Dropdown;

	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[4]/select")
	public static WebElement advanceSearch_CompareWith1Dropdown;

	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[5]/input")
	public static WebElement advanceSearch_Value1Txt;

	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[6]/span")
	public static WebElement advanceSearch_CloseRow1Btn;

	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[7]/span")
	public static WebElement advanceSearch_AddRowBtn;

	// Second Row Fields
	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[1]/select")
	public static WebElement advanceSearch_ConjuctionDropdown;

	@FindBy(xpath = "//tbody//input[@placeholder='Select Field']")
	public static WebElement advanceSearch_SelectFieldDropdown;

	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[3]/select")
	public static WebElement advanceSearch_SelectOperatorDropdown;

	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[4]/select")
	public static WebElement advanceSearch_CompareWithDropdown;

	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[5]/input")
	public static WebElement advanceSearch_ValueTxt;

	@FindBy(xpath = "//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[6]/span")
	public static WebElement advanceSearch_CloseRow2Btn;

	@FindBy(xpath = "//*[@id='divCreateNewTreeModalBody']/div[2]/div[2]/input")
	public static WebElement advanceSearch_GenerateQueryBtn;

	@FindBy(xpath = "//div[@id='divStrQuery']")
	public static WebElement advanceSearch_QueryDescriptionTxt;

	@FindBy(xpath = "//button[@id='btnOk']")
	public static WebElement advanceSearch_OkBtn;

	@FindBy(xpath = "//*[@id='btnCancel']")
	public static WebElement advanceSearch_CancelBtn;

	@FindBy(xpath = "//*[@id='btnCancel']/i") /// Both Has Same ID But But
												/// Different in Fields
	public static WebElement advanceSearch_CloseBtn;

	@FindBy(xpath = "//input[@id='cmbUserTypeMaster']")
	public static WebElement mastercmbMasterTxt;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_input_image']/span")
	public static WebElement masterCmbMasterExpansionBtn;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_input_settings']/span")
	public static WebElement masterCumMasterSettingBtn;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_container']")
	public static WebElement masterCumMaster_Pop_sNameTxt;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[1]")
	public static WebElement masterCumMaster_StandardFieldsBtn;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_heading']")
	public static WebElement masterCumMaster_PopCustomizeDispalyColumnsLabel;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_standardfields_list']")
	public static WebElement masterCumMaster_Pop_StandardFields_Filedsdropdown;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_standardfields_header']")
	public static WebElement masterCumMaster_Pop_StandardFields_HeaderTxt;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_standardfields_alignment']")
	public static WebElement masterCumMaster_Pop_StandardFields_Allignmentdropdown;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_standardfields_width']")
	public static WebElement masterCumMaster_Pop_StandardFields_WidthTxt;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[3]")
	public static WebElement masterCumMaster_Pop_StandardFields_OkBtn;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[4]")
	public static WebElement masterCumMaster_Pop_StandardFields_CancelBtn;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[2]")
	public static WebElement masterCumMaster_Pop_DeleteColumnBtn;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[3]")
	public static WebElement masterCumMaster_Pop_OkBtn;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[4]")
	public static WebElement masterCumMaster_Pop_CancelBtn;

	@FindBy(xpath = "//*[@id='li_moveup']/div/div[1]/a[1]/span")
	public static WebElement masterMoveTheSelectionToNextBookMarkBtn;

	@FindBy(xpath = "//span[@class='icon-font6 icon-bookmarkdown theme_icon-color']")
	public static WebElement masterMoveTheSelectionToPrevoiusBookmarkBtn;

	@FindBy(xpath = "//span[@class='theme_icon-color icon-font6 icon-show-all-records']")
	public static WebElement masterShowAllRecordsBtn;

	@FindBy(xpath = "//span[@class='icon-font6 icon-missmatched-entries theme_icon-color']")
	public static WebElement masterShowAllUnauthorisedRecords;

	@FindBy(xpath = "//span[@class='icon-font6 icon-closed-records theme_icon-color']")
	public static WebElement masterShowAllClosedRecordsBtn;

	@FindBy(xpath = "//span[@class='icon-font6 icon-external-module theme_icon-color']")
	public static WebElement masterAutoAdjustColoumnsBtn;

	@FindBy(xpath = "//input[@id='chkRetainSelection']")
	public static WebElement masterRetainSelectionCheckBox;

	@FindBy(xpath = "//*[@id='btnsideBar']")
	public static WebElement masterSideBarBtn;

	// InfoPanel
	@FindBy(xpath = "//label[contains(text(),'Info Panel')]")
	public static WebElement masterInfoPanelLabel;

	@FindBy(xpath = "//i[@class='icon-custamize theme_icon-color']")
	public static WebElement masterInfoPanelCustammizeBtn;

	@FindBy(xpath = "//h4[contains(text(),'Customize InfoPanel')]")
	public static WebElement infoPanel_CustomizeInfoPanelLabel;

	@FindBy(xpath = "//*[@id='Customize_AddNew_InfoPanel']/div[1]/span")
	public static WebElement infoPanel_PopAddBtn;

	@FindBy(xpath = "//*[@id='Customize_RemoveOne_InfoPanel']/div[1]/span")
	public static WebElement infoPanel_PopRemoveBtn;

	@FindBy(xpath = "//*[@id='btnShowPanelNames_CustomizeInfoPanel']/div/span")
	public static WebElement infoPanel_PopAllIcon;

	@FindBy(xpath = "//*[@id='btnShowPanelDetails_CustomizeInfoPanel']/div/span")
	public static WebElement infoPanel_PopDetailsIcon;

	@FindBy(xpath = "//*[@id='tbl_infoPanel_names']/tbody/tr[1]/td[4]/i")
	public static WebElement infoPane_PopGridCreditHistoryAddBtn;

	@FindBy(xpath = "//*[@id='tbl_infoPanel_names']/tbody/tr[2]/td[4]/i")
	public static WebElement infoPane_PopGridAgingAnalysisAddBtn;

	@FindBy(xpath = "//*[@id='tbl_infoPanel_names']/tbody/tr[3]/td[4]/i")
	public static WebElement infoPane_PopGridAgingAnlaysisBaseAddBtn;

	@FindBy(xpath = "//*[@id='tbl_infoPanel_names']/tbody/tr[4]/td[4]/i")
	public static WebElement infoPane_PopGridAuthorizationAddBtn;

	@FindBy(xpath = "//a[@class='Fbutton previous_link']")
	public static WebElement infoPane_PopDetailsPreviousBtn;

	@FindBy(xpath = "//*[@id='page_navigation']/a[2]")
	public static WebElement infoPane_PopDeailsOneBtn;

	@FindBy(xpath = "//*[@id='customize_InfoPanel_btnSave']")
	public static WebElement infoPane_PopDeatilsSaveBtn;

	@FindBy(xpath = "//*[@id='customize_InfoPanel_btnCancel']")
	public static WebElement infoPane_PopDetailsCloseBtn;

	@FindBy(xpath = "//*[@id='btnCancel']/i")
	public static WebElement infoPane_PopCloseBtn;

	@FindBy(xpath = "//i[@id='id_InfoPanelEdit']")
	public static WebElement masterInfoPanelEditBtn;

	@FindBy(xpath = "//i[@id='infopanelCloseButton']")
	public static WebElement masterInfoPanelCloseBtn;

	// Grid Elements
	// Body Elements

	@FindBy(xpath = "//th[2]//span[1]")
	public static WebElement masterGrid_Header_SelectTxt;

	@FindBy(xpath = "//input[@id='liSelectAllMasters']")
	public static WebElement masterGridHeader_SelectAllRowsCheckBox;

	@FindBy(xpath = "//section[@id='page_Content']//th[3]")
	public static WebElement masterGridHeader_MasterId;

	@FindBy(xpath = "//section[@id='page_Content']//th[4]]")
	public static WebElement masterGridHeader_Name;
	
	
	@FindBy(xpath = "//th[contains(@class,'OverFlowHidden text-center')]//span[contains(text(),'Name')]")
	public static WebElement masterGridHeader_UnitsName;
	
	@FindBy(xpath = "//th[contains(@class,'OverFlowHidden text-center')]//span[contains(text(),'Code')]")
	public static WebElement masterGridHeader_Code;
	
	@FindBy(xpath = "//th[contains(@class,'OverFlowHidden text-center')]//span[contains(text(),'No of decimals')]")
	public static WebElement masterGridHeader_NoOfDecimal;
	
	@FindBy(xpath = "//th[contains(@class,'OverFlowHidden text-center')]//span[contains(text(),'Rounding Type')]")
	public static WebElement masterGridHeader_UnitsRoundingType;

	@FindBy(xpath = "//td[contains(text(),'ASSETS')]")
	public static WebElement masterAssets;

	@FindBy(xpath = "//td[contains(text(),'EXPENSES')]")
	public static WebElement masterExpenses;

	@FindBy(xpath = "//td[contains(text(),'CONTROL ACCOUNTS')]")
	public static WebElement masterControlAccounts;

	@FindBy(xpath = "//td[contains(text(),'REVENUE')]")
	public static WebElement masterRevenue;

	@FindBy(xpath = "//td[contains(text(),'EQUITIES')]")
	public static WebElement masterEquities;

	@FindBy(xpath = "//td[contains(text(),'LIABILITIES')]")
	public static WebElement masterLiabilities;

	@FindBy(xpath = "//section[@id='page_Content']//th[6]")
	public static WebElement masterGridHeader_ReorderLevel;

	@FindBy(xpath = "//section[@id='page_Content']//th[7]")
	public static WebElement masterGridHeader_BinCapacity;

	@FindBy(xpath = "//section[@id='page_Content']//th[8]")
	public static WebElement masterGridHeader_ISAttribute;

	@FindBy(xpath = "//section[@id='page_Content']//th[9]")
	public static WebElement masterGridHeader_ProducyType;

	@FindBy(xpath = "//th[contains(text(),'Valuation Method')]")
	public static WebElement masterGridHeader_ValuationMethod;

	@FindBy(xpath = "//th[@class='OverFlowHidden text-center']//span[contains(text(),'No of decimals')]")
	public static WebElement masterGridHeader_NoOfDecimals;

	@FindBy(xpath = "//section[@id='page_Content']//th[7]")
	public static WebElement masterGridHeader_RoundingType;

	@FindBy(xpath = "//td[contains(text(),'Customer A')]")
	public static WebElement masterCustomerA;

	@FindBy(xpath = "//td[contains(text(),'Customer B')]")
	public static WebElement masterCustomerB;

	@FindBy(xpath = "//td[contains(text(),'Customer B')]")
	public static WebElement masterCustomerC;

	// Row Selecting
	@FindBy(xpath = "//*[@id='lblnchecked']/input")
	public static WebElement masterGrid_SelectFirstRow;

	// Footer Fields
	@FindBy(xpath = "//*[@id='id_PageButtonsMasterLanding']/div/div[1]/div/input")
	public static WebElement masterFirstBtn;

	@FindBy(xpath = "//*[@id='id_PageButtonsMasterLanding']/div/div[2]/div/input")
	public static WebElement masterPreviousBtn;

	@FindBy(xpath = "//*[@id='btn1']")
	public static WebElement masterOneBtn;

	@FindBy(xpath = "//*[@id='id_PageButtonsMasterLanding']/div/div[4]/div/input")
	public static WebElement masterNextBtn;

	@FindBy(xpath = "//*[@id='id_PageButtonsMasterLanding']/div/div[5]/div/input")
	public static WebElement masterEndBtn;

	// Accounts Creation Page

	// Header tab Fields
	@FindBy(xpath = "//*[@id='divBtnGroup0']/div/a")
	public static WebElement headerGeneralTab;
	
	@FindBy(xpath = "//*[@id='divBtnGroup1']/div/a")
	public static WebElement headerAccountSettingTab;

	@FindBy(xpath = "//*[@id='divBtnGroup2']/div/a")
	public static WebElement headerDetailsTab;

	@FindBy(xpath = "//*[@id='divBtnGroup3']/div/a")
	public static WebElement headerPrintLayoutTab;

	@FindBy(xpath = "//*[@id='divBtnGroup1']/div/a")
	public static WebElement headerUnitsTab;

	@FindBy(xpath = "//*[@id='divBtnGroup2']/div/a")
	public static WebElement headerItemSettingsTab;

	@FindBy(xpath = "//*[@id='divBtnGroup3']/div/a")
	public static WebElement headerClassificationTab;

	@FindBy(xpath = "//*[@id='divBtnGroup4']/div/a")
	public static WebElement headerOtherDetailsTab;

	@FindBy(xpath = "//*[@id='divBtnGroup5']/div/a")
	public static WebElement headerReplenishmentTab;

	@FindBy(xpath = "//*[@id='divBtnGroup6']/div/a")
	public static WebElement headerOutletTab;

	// Header Section Fields
	@FindBy(xpath = "//*[@id='btnMasterSaveClick']")
	public static WebElement saveBtn;

	@FindBy(xpath = "//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	public static WebElement closeBtn;

	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  closeBtnInDocumentCustmization;
	
	// Edit option Fields
	@FindBy(xpath = "//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[6]")
	public static WebElement editcloseBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-paste-clipboard']")
	public static WebElement pasteBtn;

	@FindBy(xpath = "//button[@id='btnMasterClone']")
	public static WebElement editcloneBtn;

	@FindBy(xpath = "//*[@id='btnMasterCopy']")
	public static WebElement copyBtn;

	// New General Elements
	// Name
	@FindBy(xpath = "//input[@id='sName']")
	public static WebElement nameTxt;

	// Code
	@FindBy(xpath = "//input[@id='sCode']")
	public static WebElement codeTxt;

	// AccountType
	@FindBy(xpath = "//select[@id='iAccountType']")
	public static WebElement accountTypeDropdown;

	// CreditLimit
	@FindBy(xpath = "//input[@id='fCreditLimit']")
	public static WebElement creditLimitTxt;

	// CreditDays
	@FindBy(xpath = "//input[@id='iCreditDays']")
	public static WebElement creditdaysTxt;

	// ChequeDiscountLimit
	@FindBy(xpath = "//input[@id='fChequeDiscountLimit']")
	public static WebElement chequeDiscountLimitTxt;

	// Rate Of Interest
	@FindBy(xpath = "//input[@id='fRateofinterest']")
	public static WebElement rateofinterestTxt;

	// BankAccount
	@FindBy(xpath = "//input[@id='iBankAc']")
	public static WebElement bankAccountTxt;

	@FindBy(xpath = "//*[@id='iBankAc_input_image']/span")
	public static WebElement bankAccount_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iBankAc_input_settings']/span")
	public static WebElement bankAccount_SettingBtn;

	// Setting Elements

	// DebitCreditProposal
	@FindBy(xpath = "//select[@id='iDebitCreditProposal']")
	public static WebElement debitCreditProposalDropdown;

	// DebitCreditRequired
	@FindBy(xpath = "//select[@id='iDebitCreditRequired']")
	public static WebElement debitCreditRequiredDropdown;

	// ExchangeAdjustmentGainAC
	@FindBy(xpath = "//input[@id='iExchangeAdjustmentGainAC']")
	public static WebElement exchangeAdjustmentGainACTxt;

	@FindBy(xpath = "//*[@id='iExchangeAdjustmentGainAC_input_image']/span")
	public static WebElement exchangeAdjustmentGainAC_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iExchangeAdjustmentGainAC_input_settings']/span")
	public static WebElement exchangeAdjustmentGainAC_SettingBtn;

	// ExchangeAdjustmentLossAC
	@FindBy(xpath = "//input[@id='iExchangeAdjustmentLossAC']")
	public static WebElement exchangeAdjustmentLossACTxt;

	@FindBy(xpath = "//*[@id='iExchangeAdjustmentLossAC_input_image']/span")
	public static WebElement exchangeAdjustmentLossAC_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iExchangeAdjustmentLossAC_input_settings']/span")
	public static WebElement exchangeAdjustmentLossAC_SettingBtn;

	// PrimaryAccount
	@FindBy(xpath = "//input[@id='iPrimaryAccount']")
	public static WebElement primaryAccountTxt;

	@FindBy(xpath = "//*[@id='iPrimaryAccount_input_image']/span")
	public static WebElement primaryAccount_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iPrimaryAccount_input_settings']/span")
	public static WebElement primaryAccount_SettingBtn;

	// DefaultCurrency
	@FindBy(xpath = "//input[@id='iDefaultCurrency']")
	public static WebElement defaultCurrencyTxt;

	@FindBy(xpath = "//*[@id='iDefaultCurrency_input_image']/span")
	public static WebElement defaultCurrency_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iDefaultCurrency_input_settings']/span")
	public static WebElement defaultCurrency_SettingBtn;

	// ConsolidationMethod
	@FindBy(xpath = "//select[@id='iConsolidationMethod']")
	public static WebElement consolidationMethodDropdown;

	// PaymentTerms
	@FindBy(xpath = "//input[@id='iPaymentTerms']")
	public static WebElement paymentTermstxt;

	@FindBy(xpath = "//*[@id='iPaymentTerms_input_image']/span")
	public static WebElement paymentTerms_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iPaymentTerms_input_settings']/span")
	public static WebElement paymentTerms_SettingBtn;

	// ReminderTerms
	@FindBy(xpath = "//*[@id='iReminderTerms']")
	public static WebElement reminderTermsTxt;

	@FindBy(xpath = "//*[@id='iReminderTerms_input_image']/span")
	public static WebElement reminderTerms_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iReminderTerms_input_settings']/span")
	public static WebElement reminderTerms_SettingBtn;

	// FinanceChargeTerms
	@FindBy(xpath = "//*[@id='iFinanceChargeTerms']")
	public static WebElement financeChargeTermsTxt;

	@FindBy(xpath = "//*[@id='iFinanceChargeTerms_input_image']/span")
	public static WebElement financeChargeTerms_Expansion;

	@FindBy(xpath = "//*[@id='iFinanceChargeTerms_input_settings']/span")
	public static WebElement financeChargeTerms_SettingBtn;

	// Details Elements

	// Address
	@FindBy(xpath = "//textarea[@id='sAddress']")
	public static WebElement addressTxt;

	// City
	@FindBy(xpath = "//input[@id='iCity']")
	public static WebElement cityTxt;

	@FindBy(xpath = "//*[@id='iCity_input_image']/span")
	public static WebElement city_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iCity_input_settings']/span")
	public static WebElement city_SettingBtn;

	// DeliveryAddress
	@FindBy(xpath = "//textarea[@id='sDeliveryAddress']")
	public static WebElement deliveryAddressTxt;

	// Pin
	@FindBy(xpath = "//input[@id='sPin']")
	public static WebElement pinTxt;

	// City2 DeliveryCity (City As Second TextBox)
	@FindBy(xpath = "//input[@id='iDeliveryCity']")
	public static WebElement city2Text;

	@FindBy(xpath = "//*[@id='iDeliveryCity_input_image']/span")
	public static WebElement city2_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iDeliveryCity_input_settings']/span")
	public static WebElement city2_SettingBtn;

	//// Pin Delivery pin Second Pin TxtBox
	@FindBy(xpath = "//input[@id='sDeliveryPin']")
	public static WebElement pin2Txt;

	// Send Email
	@FindBy(xpath = "//input[@id='bSendEmailtocustomer']")
	public static WebElement sendEmailCheckBox;

	// AllowCustomerPortal
	@FindBy(xpath = "//input[@id='bAllowCustomerPortal']")
	public static WebElement allowCustomerPortalCheckBox;

	// SendEmail
	@FindBy(xpath = "//input[@id='sEMail']")
	public static WebElement sendEmailTxt;

	// Password
	@FindBy(xpath = "//input[@id='sPassword']")
	public static WebElement passwordTxt;

	// TelphoneNumber
	@FindBy(xpath = "//input[@id='sTelNo']")
	public static WebElement telphoneNumberTxt;

	// FaxNo
	@FindBy(xpath = "//input[@id='sFaxNo']")
	public static WebElement faxNoTxt;

	// PortalEmail
	@FindBy(xpath = "//input[@id='sPortalEmail']")
	public static WebElement portalEmailTxt;

	// Print Layout Elements
	// Voucher Type
	@FindBy(xpath = "//label[contains(text(),'Voucher Type')]")
	public static WebElement gridVoucherTypeTxt;

	@FindBy(xpath = "//*[@id='iVoucherType_input_image']/span")
	public static WebElement gridVoucher_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iVoucherType_input_settings']/span")
	public static WebElement gridVoucher_SettingBtn;

	// Print layout
	@FindBy(xpath = "//label[contains(text(),'Print Layout')]")
	public static WebElement gridPrintLayoutTxt;

	@FindBy(xpath = "//*[@id='iPrintLayout_input_image']/span")
	public static WebElement gridPrintLayout_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iPrintLayout_input_settings']/span")
	public static WebElement gridPrintLayout_SettingBtn;

	// Item
	@FindBy(xpath = "//*[@id='spnHeaderText']")
	private static WebElement itemLabel;

	@FindBy(xpath = "//*[@id='btnNew']")
	private static WebElement itemNewBtn;

	// Item General Tab
	@FindBy(xpath = "//*[@id='divBtnGroup0']/div/a")
	private static WebElement ItemNewnewGeneralBtn;

	@FindBy(xpath = "//input[@id='sName']")
	private static WebElement newGeneralName;

	@FindBy(xpath = "//input[@id='sCode']")
	private static WebElement newGeneralCode;

	@FindBy(xpath = "//select[@id='iProductType']")
	private static WebElement newGeneralItemTypeDropDown;

	@FindBy(xpath = "//input[@id='fReorderLevel']")
	private static WebElement newGeneralReorderLevel;

	@FindBy(xpath = "//input[@id='iBinCapacity']")
	private static WebElement newGeneralBinCapacity;

	@FindBy(xpath = "//select[@id='iValuationMethod']")
	private static WebElement newGeneralValuationMethodDropDown;

	@FindBy(xpath = "//input[@id='iCategory']")
	private static WebElement newGeneralCategoryDropDown;

	@FindBy(xpath = "//td[@id='iCategory_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement newGeneralCategorySettingBtn;

	@FindBy(xpath = "//select[@id='iProductMake']")
	private static WebElement newGeneralItemMakeDropDown;

	@FindBy(xpath = "//input[@id='Printer']")
	private static WebElement newGeneralPrint;

	@FindBy(xpath = "//input[@id='iAlternateCategory']")
	private static WebElement newGeneralAlternativeCategoryDropdown;

	@FindBy(xpath = "//td[@id='iAlternateCategory_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement newGeneralAlternativeCategoryDropdownSettingBtn;

	@FindBy(xpath = "//textarea[@id='sDescription']")
	private static WebElement newGeneralDescription;

	@FindBy(xpath = "//input[@id='bPerishableItem']")
	private static WebElement newGeneralPerishableItemCheckBox;

	@FindBy(xpath = "//input[@id='iBin']")
	private static WebElement newGeneralBinDropdown;

	@FindBy(xpath = "//td[@id='iBin_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement newGeneralBinDropdownSettingBtn;

	@FindBy(xpath = "//input[@id='pImage']")
	private static WebElement newGeneralUploadImageOrFileBtn;

	@FindBy(xpath = "//*[@id='btnMasterSaveClick']/i")
	private static WebElement newGeneralSaveBtn;

	@FindBy(xpath = "//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	private static WebElement newGeneralCLoseBtn;

	// Item Units Tab
	@FindBy(xpath = "//*[@id='divBtnGroup1']/div/a")
	private static WebElement ItemNewUnitsBtn;

	@FindBy(xpath = "//input[@id='iDefaultBaseUnit']")
	private static WebElement itemUnitsDefaultBaseUnitDropdown;

	@FindBy(xpath = "//td[@id='iDefaultBaseUnit_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement itemUnitsDefaultBaseUnitSetting;

	@FindBy(xpath = "//input[@id='iDefaultSalesUnit']")
	private static WebElement itemUnitsDefaultSalesUnitDropdown;

	@FindBy(xpath = "//td[@id='iDefaultSalesUnit_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement itemUnitsDefaultSalesUnitSettingsBtn;

	@FindBy(xpath = "//input[@id='iDefaultPurchaseUnit']")
	private static WebElement itemUnitsDefaultPurchaseUnitDropDown;

	@FindBy(xpath = "//td[@id='iDefaultPurchaseUnit_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement itemUnitsDefaultPurchaseUnitSettingsBtn;

	@FindBy(xpath = "//input[@id='fLength']")
	private static WebElement itemUnitsLength;

	@FindBy(xpath = "//input[@id='fWidth']")
	private static WebElement itemUnitswidth;

	@FindBy(xpath = "//input[@id='fHeight']")
	private static WebElement itemUnitsHeight;

	@FindBy(xpath = "//*[@id='fCBM']")
	private static WebElement itemUnitsCBM;

	@FindBy(xpath = "//input[@id='fWeight']")
	private static WebElement itemUnitsWeight;

	@FindBy(xpath = "//input[@id='iPalletUnit']")
	private static WebElement itemUnitsPalletUnitTxt;

	@FindBy(xpath = "//input[@id='fPalletQty']")
	private static WebElement itemUnitsPalletQtyTxt;

	@FindBy(xpath = "//input[@id='fPalletLength']")
	private static WebElement itemUnitsPalletLengthTXt;

	@FindBy(xpath = "//input[@id='fPalletWidth']")
	private static WebElement itemUnitsPalletWidthTxt;

	@FindBy(xpath = "//input[@id='fPalletHeight']")
	private static WebElement itemUnitsPalletHeightTxt;

	// Master Item Settings
	@FindBy(xpath = "//*[@id='divBtnGroup2']/div/a")
	private static WebElement ItemNewSettingsBtn;

	@FindBy(xpath = "//*[@id='fStandardCost']")
	private static WebElement NewSettingsStandardCost;

	@FindBy(xpath = "//*[@id='fOverheadCost']")
	private static WebElement NewSettingsOverheadCost;

	@FindBy(xpath = "//*[@id='fIndirectCost']")
	private static WebElement NewSettingsIndirectCost;

	@FindBy(xpath = "//*[@id='fProfit']")
	private static WebElement NewSettingsProfit;

	@FindBy(xpath = "//*[@id='iDontshowproductexpireddays']")
	private static WebElement NewSettingsDontshowproductexpireddays;

	@FindBy(xpath = "//*[@id='iTaxCode']")
	private static WebElement NewSettingsTaxCode;

	@FindBy(xpath = "//*[@id='iTaxCode_input_settings']/span")
	private static WebElement NewSettingsTaxCodeSttingsBtn;

	@FindBy(xpath = "//*[@id='btnMasterSaveClick']")
	private static WebElement NewSettingsSaveBtn;

	@FindBy(xpath = "//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	private static WebElement NewSettingsCloseBtn;

	// Master Item Classification
	@FindBy(xpath = "//*[@id='divBtnGroup3']/div/a")
	private static WebElement ItemNewClassificationBtn;

	@FindBy(xpath = "//*[@id='iABCCodeValue']")
	private static WebElement newItemClassificationABC_CodeValueDropdown;

	@FindBy(xpath = "//*[@id='iABCCodeMargin']")
	private static WebElement newItemClassificationABC_CodeMarginDropdOwn;

	@FindBy(xpath = "//*[@id='iABCCodeRevenue']")
	private static WebElement newItemClassificationABCCodeRevenueDropdown;

	@FindBy(xpath = "//*[@id='iABCCodeCarryingCost']")
	private static WebElement newItemClassificationABCCodeCarryingCostDropdown;

	@FindBy(xpath = "//*[@id='sBarcode1']")
	private static WebElement newItemClassificationBarcode1;

	@FindBy(xpath = "//*[@id='sBarcode2']")
	private static WebElement newItemClassificationBarcode2;

	@FindBy(xpath = "//*[@id='sBarcode3']")
	private static WebElement newItemClassificationBarcode3;

	@FindBy(xpath = "//*[@id='iUnit1']")
	private static WebElement newItemgridFirstrowUnit;

	@FindBy(xpath = "//*[@id='sBarcode1']")
	private static WebElement newItemgridFirstrowBarcode;

	// Grid element
	@FindBy(xpath = "//*[@id='sBatch1']")
	private static WebElement newItemClassificationgridFirstrowBatch;

	@FindBy(xpath = "//*[@id='iUnit2']")
	private static WebElement newItemClassificationgridSecondrowUnit;

	@FindBy(xpath = "//*[@id='sBarcode2']")
	private static WebElement newItemClassificationgridSecondrowBarcode;

	@FindBy(xpath = "//*[@id='sBatch2']")
	private static WebElement newItemClassificationgridSecondrowBatch;

	@FindBy(xpath = "//*[@id='iUnit3']")
	private static WebElement newItemClassificationgridThridrowUnit;

	@FindBy(xpath = "//*[@id='sBarcode3']")
	private static WebElement newItemClassificationgridThridrowBarcode;

	@FindBy(xpath = "//*[@id='sBatch3']")
	private static WebElement newItemClassificationgridThridrowBatch;

	@FindBy(xpath = "//*[@id='iUnit_input_settings']")
	private static WebElement newItemClassificationgridUnitSettings;

	@FindBy(xpath = "//div[@id='divTreeMenu']")
	private static WebElement treeUnitsDisplay;

	// Master Item Other Details
	@FindBy(xpath = "//*[@id='divBtnGroup4']/div/a")
	private static WebElement ItemNewOtherDetailsBtn;

	@FindBy(xpath = "//input[@id='iCostOfIssueAccount']")
	private static WebElement newOtherDetailsCostOfIssueitem;

	@FindBy(xpath = "//td[@id='iCostOfIssueAccount_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement newOtherDetailsCostOfIssueitemsettingsBtn;

	@FindBy(xpath = "//input[@id='iStocksAccount']")
	private static WebElement newOtherDetailsStocksitem;

	@FindBy(xpath = "//td[@id='iStocksAccount_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement newOtherDetailsiStocksitemsettingsBtn;

	@FindBy(xpath = "//input[@id='iSalesAccount']")
	private static WebElement newOtherDetailsSalesAccount;

	@FindBy(xpath = "//td[@id='iSalesAccount_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement newOtherDetailsSalesitemsettingsBtn;

	@FindBy(xpath = "//input[@id='iWIPAccount']")
	private static WebElement newOtherDetailsWIPitem;

	@FindBy(xpath = "//td[@id='iWIPAccount_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
	private static WebElement newOtherDetailsWIPitemsettingsBtn;

	@FindBy(xpath = "//input[@id='iCostofShortageStockAC']")
	private static WebElement newOtherDetailsCostofShortageStockAC;

	@FindBy(xpath = "//td[@id='iCostofShortageStockAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
	private static WebElement newOtherDetailsCostofShortageStockACsettingsBtn;

	@FindBy(xpath = "//input[@id='iCostofExcessStockAC']")
	private static WebElement newOtherDetailsCostofExcessStockAC;

	@FindBy(xpath = "//td[@id='iCostofExcessStockAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
	private static WebElement OtherDetailsCostofExcessStockACsettingsBtn;

	@FindBy(xpath = "//input[@id='iCostofSaleReturnAC']")
	private static WebElement OtherDetailsCostofSaleReturnAC;

	@FindBy(xpath = "//td[@id='iCostofSaleReturnAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
	private static WebElement OtherDetailsCostofSaleReturnACsettingsBtn;

	@FindBy(xpath = "//input[@id='iPurchaseVarianceAC']")
	private static WebElement OtherDetailsPurchaseVarianceAC;

	@FindBy(xpath = "//td[@id='iPurchaseVarianceAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
	private static WebElement OtherDetailsPurchaseVarianceACsettingsBtn;

	@FindBy(xpath = "//*[@id='btnMasterSaveClick']")
	private static WebElement newOtherDetailsSaveBtn;

	@FindBy(xpath = "//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	private static WebElement newOtherDetailsCloseBtn;

	// Grid Elements
	@FindBy(xpath = "//*[@id='ioWarehouse1']")
	private static WebElement newOtherDetailsgridFirstrowWareHouse;

	@FindBy(xpath = "//*[@id='ioWarehouse_input_settings']/span")
	private static WebElement newGridWarehouseSettingBtn;

	@FindBy(xpath = "//*[@id='1']")
	private static WebElement newOtherDetailsgridFirstrowSupplier;

	@FindBy(xpath = "//*[@id='iSupplier_input_settings']/span")
	private static WebElement newGridSupplierSettingBtn;

	@FindBy(xpath = "//*[@id='sSupCode1']")
	private static WebElement newOtherDetailsgridFirstrowCode;

	@FindBy(xpath = "//*[@id='iStartDate1']")
	private static WebElement newOtherDetailsgridFirstrowStartDate;

	@FindBy(xpath = "//*[@id='iEndDate1']")
	private static WebElement newOtherDetailsgridFirstrowEnddate;

	@FindBy(xpath = "//*[@id='fRate1']")
	private static WebElement newOtherDetailsgridFirstrowRate;

	@FindBy(xpath = "//*[@id='iTolerance1']")
	private static WebElement newOtherDetailsgridFirstTolerance;

	@FindBy(xpath = "//*[@id='iLeadTime1']")
	private static WebElement newOtherDetailsgridFirstrowLeadTime;

	@FindBy(xpath = "//*[@id='iCreditDays1']")
	private static WebElement newOtherDetailsgridFirstrowUnitCreditDays;

	@FindBy(xpath = "//*[@id='iCreditLimit1']")
	private static WebElement newOtherDetailsgridFirstrowCreditLimit;

	@FindBy(xpath = "//*[@id='LeastDeliveryDate1']")
	private static WebElement newOtherDetailsgridFirstrowLastDeliveryDate;

	// Master Item Replenishment
	@FindBy(xpath = "//*[@id='divBtnGroup5']/div/a")
	private static WebElement ItemNewReplenishmentBtn;

	@FindBy(xpath = "//*[@id='iDefaultReplenishment']")
	private static WebElement newreplenishmentDefaultReplenishment;

	@FindBy(xpath = "//*[@id='iManufacturePolicy']")
	private static WebElement newreplenishmentManufacturePolicy;

	@FindBy(xpath = "//*[@id='iPackingBOM']")
	private static WebElement newreplenishmentPackingBOM;

	@FindBy(xpath = "//*[@id='iPackingBOM_input_settings']/span")
	private static WebElement newreplenishmentPackingBOMsettingsBtn;

	@FindBy(xpath = "//*[@id='iBOM']")
	private static WebElement newreplenishmentBOM;

	@FindBy(xpath = "//*[@id='iFlushing']")
	private static WebElement newreplenishmentFlushing;

	@FindBy(xpath = "//*[@id='btnMasterSaveClick']")
	private static WebElement newreplenishmentSaveBtn;

	@FindBy(xpath = "//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	private static WebElement newreplenishmentCloseBtn;

	// Grid
	@FindBy(xpath = "//*[@id='irWarehouse1']")
	private static WebElement newreplenishmentGridFirstRowWarehouse;

	@FindBy(xpath = "//*[@id='irStartdate1']")
	private static WebElement newreplenishmentGridFirstRowStartDate;

	@FindBy(xpath = "//*[@id='irEnddate1']")
	private static WebElement newreplenishmentGridFirstRowEndDate;

	@FindBy(xpath = "//*[@id='iReplenishqty1']")
	private static WebElement newreplenishmentGridFirstRowReplenishqty;

	@FindBy(xpath = "//*[@id='iReorderPolicy1']")
	private static WebElement newreplenishmentGridFirstRowReorderPolicy;

	@FindBy(xpath = "//*[@id='fSafetyStock1']")
	private static WebElement newreplenishmentGridFirstRowSafetyStock;

	@FindBy(xpath = "//*[@id='iSafetyLeadTime1']")
	private static WebElement newreplenishmentFirstRowSafetyLeadTime;

	@FindBy(xpath = "//*[@id='fReordercycle1']")
	private static WebElement newreplenishmentFirstRowReordercycle;

	@FindBy(xpath = "//*[@id='fReorderPoint1']")
	private static WebElement newreplenishmentFirstRowReorderPoint;

	@FindBy(xpath = "//*[@id='fReorderQuantity1']")
	private static WebElement newreplenishmentFirstRowReorderQuantity;

	@FindBy(xpath = "//*[@id='fMaxInventoryLevel1']")
	private static WebElement newreplenishmentFirstRowMaxInventoryLevel;

	@FindBy(xpath = "//*[@id='iDefaultVendor1']")
	private static WebElement newreplenishmentFirstRowDefaultVendor;

	@FindBy(xpath = "//*[@id='fMinOrderQuantity1']")
	private static WebElement newreplenishmentFirstRowMinOrderQuantity;

	@FindBy(xpath = "//*[@id='fMaxOrderQuantity1']")
	private static WebElement newreplenishmentFirstRowMaxOrderQuantity1;

	@FindBy(xpath = "//*[@id='fOrderMultiple1']")
	private static WebElement newreplenishmentFirstRowOrderMultiple;

	// OutLet Elements
	@FindBy(xpath = "//*[@id='divBtnGroup7']/div/a")
	private static WebElement ItemNewOutletBtn;

	@FindBy(xpath = "//*[@id='txtsrch-term0']")
	private static WebElement newOutletSearchOutlet;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster']")
	private static WebElement newOutletAdvanceSearch;

	@FindBy(xpath = "//*[@id='chkResizeGrid0']/span")
	private static WebElement newOutletResizeBtn;

	@FindBy(xpath = "//*[@id='chkRetainSelection']")
	private static WebElement newOutletRetainSelctionCheckBox;

	@FindBy(xpath = "//a[contains(text(),'Tariff')]")
	private static WebElement tariffTab;

	@FindBy(xpath = "//input[@id='iTariffCode1']")
	private static WebElement tariffGridTariffCode;

	@FindBy(xpath = "//input[@id='iAffectedDate1']")
	private static WebElement tariffGridAffecteddate;

	@FindBy(xpath = "//*[@id='btnMasterSaveClick']/i")
	private static WebElement itemCreationScreenSaveBtn;

	@FindBy(xpath = "//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	private static WebElement itemCreationScreenCloseBtn;

	@FindBy(xpath = "//*[@id='doc_Searchbox']")
	public static WebElement searchBoxInDocumentCustomization;

	@FindBy(xpath = "//*[@id='liSearchOn']/a")
	public static WebElement search_SearchOnBtn;

	@FindBy(xpath = "//*[@id='liAdvanceSearch']/a")
	public static WebElement search_AdvanceSearch;

	@FindBy(xpath = "//input[@id='cmbUserTypeMaster']")
	public static WebElement cmbSearchTxt;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_input_image']/span")
	public static WebElement cmbSearchExpansionBtn;

	@FindBy(xpath = "//*[@id='cmbUserTypeMaster_input_settings']/span")
	public static WebElement cmbSearchSettingBtn;

	@FindBy(xpath = "//a[@id='chkResizeGrid0']")
	public static WebElement resizeGridBtn;

	@FindBy(xpath = "//input[@id='chkRetainSelection']")
	public static WebElement retainSelectionCheckbox;

	@FindBy(xpath = "//label[@id='oncheckaccorderan0']")
	public static WebElement checkAccorderanBtn;

	@FindBy(xpath = "//*[@id='iTreeId0']")
	public static WebElement treeIdDropdown;

	@FindBy(xpath = "//*[@id='iTreeViewId0']")
	public static WebElement treeViewIdDropdown;

	// WareHouse Master

	@FindBy(xpath = "//input[@id='iBins']")
	public static WebElement binsText;

	@FindBy(xpath = "//*[@id='iBins_input_image']/span")
	public static WebElement bins_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iBins_input_settings']/span")
	public static WebElement bins_SettingBtn;

	@FindBy(xpath = "//input[@id='iPhysInventoryCountingFrequency']")
	public static WebElement physInventoryCountingFrequencyTxt;

	@FindBy(xpath = "//select[@id='iWarehouseType']")
	public static WebElement warehouseTypeDropdown;

	@FindBy(xpath = "//input[@id='bDontMaintainBin']")
	public static WebElement dontMaintainBinCheckBox;

	// State Master

	@FindBy(xpath = "//input[@id='iCountry']")
	public static WebElement countryTxt;

	@FindBy(xpath = "//*[@id='iCountry_input_image']/span")
	public static WebElement country_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iCountry_input_settings']/span")
	public static WebElement country_SettingBtn;

	// City Master

	@FindBy(xpath = "//input[@id='iState']")
	public static WebElement stateTxt;

	@FindBy(xpath = "//*[@id='iState_input_image']/span")
	public static WebElement state_ExpansionBtn;

	@FindBy(xpath = "//*[@id='iState_input_settings']/span")
	public static WebElement state_SettingBtn;

	// Master Delete Field

	@FindBy(xpath = "//*[@id='btnDelete']/i")
	public static WebElement deleteBtn;

	@FindBy(xpath = "//div[@id='idGlobalError']")
	public static WebElement validationConfirmationMessage;

	@FindBy(xpath = "//div[@class='theme_color font-6']")
	public static WebElement validationUpdatingConfirmationMessage;
	
	@FindBy(xpath = "//*[@id='idGlobalError']/div/table/tbody/tr/td[2]/div[2]")
	public static WebElement closeValidationConfirmationMessageInUnits;

	@FindBy(xpath = "//*[@id='idGlobalError']/div/table/tbody/tr/td[3]/span")
	public static WebElement closeValidationConfirmationMessage;

	@FindBy(xpath = "//*[@id='LandingGridBody']/tr[1]/td[11]")
	public static WebElement accountNewCreationNameOfLane1;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[11]")
	public static WebElement accountNewCreationNameOfLane2;

	@FindBy(xpath = "//*[@id='LandingGridBody']/tr[1]/td[11]")
	public static WebElement masterCreationNameOfLane1;

	@FindBy(xpath = "//*[@id='LandingGridBody']/tr[2]/td[11]")
	public static WebElement masterCreationNameOfLane2;

	@FindBy(xpath = "//*[@id='LandingGridBody']/tr[1]/td[12]")
	public static WebElement masterCreationCodeOfLane1;

	@FindBy(xpath = "//*[@id='LandingGridBody']/tr[2]/td[12]")
	public static WebElement masterCreationCodeOfLane2;

	@FindBy(xpath = "//*[@id='LandingGridBody']/tr[1]/td[13]")
	public static WebElement masterCreationTypeOfLane1;

	@FindBy(xpath = "//*[@id='LandingGridBody']/tr[2]/td[13]")
	public static WebElement masterCreationTypeOfLane2;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
	public static WebElement accountFirstCheckBoxToSelection;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[5]/span[1]")
	public static WebElement accountGroupTitleDisplay;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[2]/span[1]")
	public static WebElement productGroupTitleDisplay;

	// Master Customization

	@FindBy(xpath = "//i[@class='icon-expand']")
	private static WebElement plusBtn;

	@FindBy(xpath = "//i[@class='icon-collepse']")
	private static WebElement minusBtn;

	@FindBy(xpath = "//span[contains(text(),'Master Fields')]")
	private static WebElement masterFieldsOption;

	@FindBy(xpath = "//*[@id='masterFields_list']/li[1]/span")
	private static WebElement generalTab;

	@FindBy(xpath = "//span[@class='font-5'][contains(text(),'Main')]")
	private static WebElement generalMainTab;

	@FindBy(xpath = "//div[@id='mainTab_0']//tbody//tr[1]//td[4]")
	private static WebElement accountCustomizeName;

	@FindBy(xpath = "//div[@id='mainTab_0']//tr[2]//td[4]")
	private static WebElement accountCustomizeCode;

	@FindBy(xpath = "//div[@id='mainTab_0']//tr[3]//td[4]")
	private static WebElement accountCustomizeAccountType;

	@FindBy(xpath = "//div[@id='mainTab_0']//tr[4]//td[4]")
	private static WebElement accountCustomizeCreditLimit;

	@FindBy(xpath = "//div[@id='mainTab_0']//tr[5]//td[4]")
	private static WebElement accountCustomizeCreditDays;

	@FindBy(xpath = "//*[@id='tabId_4']/ul/li[2]/a")
	private static WebElement generalHeaderDetailsTab;

	@FindBy(xpath = "//div[@id='tabId_1']//tbody[contains(@class,'ui-sortable')]//tr[1]//td[4]")
	private static WebElement accountCustomizeChequeDiscountLimit;

	@FindBy(xpath = "//div[@id='HeaderDetails_0']//tr[2]//td[4]")
	private static WebElement accountCustomizeRateOfInterest;

	@FindBy(xpath = "//*[@id='HeaderDetails_0']/div/div/table/tbody/tr[3]/td[4]")
	private static WebElement accountCustomizeBankAc;

	@FindBy(xpath = "//*[@id='HeaderDetails_0']/div/div/table/tbody/tr[4]/td[4]")
	private static WebElement accountCustomizePDCDiscountedAccount;

	@FindBy(xpath = "//*[@id='btnMove_Field_MasterCust']/div[1]/span")
	private static WebElement accountHeaderMoveFiledBtn;

	@FindBy(xpath = "//div[contains(text(),'Preview')]")
	private static WebElement accountHeaderPreview;

	@FindBy(xpath = "//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	private static WebElement accountSaveBtn;

	@FindBy(xpath = "//*[@id='btnAdd_Field_MasterCust']/div[1]/span")
	private static WebElement accountAddBtn;

	@FindBy(xpath = "//*[@id='btnCloseMasterCutomizationFromMasterScreen']/div[1]/span")
	private static WebElement accountCloseBtn;

	@FindBy(xpath = "//span[@class='Flabel theme_icon-color'][contains(text(),'Settings')]")
	private static WebElement settingOption;

	@FindBy(xpath = "//div[@id='tabId_68']//span[@class='font-5'][contains(text(),'Header Details')]")
	private static WebElement settingsHeaderDetailsTab;

	@FindBy(xpath = "//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[1]/td[1]/i[1]")
	private static WebElement accountSettingsHeaderEditFirstRowBtn;

	@FindBy(xpath = "//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[2]/td[1]/i[1]")
	private static WebElement accountSettingsHeaderEditSecondRowBtn;

	@FindBy(xpath = "//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[3]/td[1]/i[1]")
	private static WebElement accountSettingsHeaderEditThirdRowBtn;

	@FindBy(xpath = "//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[4]/td[1]/i[1]")
	private static WebElement accountSettingsHeaderEditFourthRowBtn;

	@FindBy(xpath = "//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[5]/td[1]/i[1]")
	private static WebElement accountSettingsHeaderEditFifthRowBtn;

	@FindBy(xpath = "//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[6]/td[1]/i[1]")
	private static WebElement accountSettingsHeaderEditSixthRowBtn;

	@FindBy(xpath = "//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[7]/td[1]/i[1]")
	private static WebElement accountSettingsHeaderEditSeventhRowBtn;

	@FindBy(xpath = "//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[8]/td[1]/i[1]")
	private static WebElement accountSettingsHeaderEditEighthRowBtn;

	@FindBy(xpath = "//div[contains(text(),'Move Field')]")
	private static WebElement accountSettingsHeaderMoveFiledBtn;

	@FindBy(xpath = "//div[contains(text(),'Preview')]")
	private static WebElement accountSettingsHeaderPreview;

	@FindBy(xpath = "//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	private static WebElement accountSettingsSaveBtn;

	@FindBy(xpath = "//div[@id='btnAdd_Field_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Add')]")
	private static WebElement accountSettingsAddBtn;

	@FindBy(xpath = "//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	private static WebElement accountSettingsCloseBtn;

	@FindBy(xpath = "//div[@id='tabId_68']//span[@class='font-5'][contains(text(),'Body Details')]")
	private static WebElement settingsBodyDetailsTab;

	@FindBy(xpath = "//div[@id='BodyDetails_1']//div[@class='scrollable tbl-emptyfields-mastercust']")
	private static WebElement settingsBodyDetailsEmptyTab;

	@FindBy(xpath = "//span[@class='Flabel theme_icon-color'][contains(text(),'Details')]")
	private static WebElement accountMasterFieldDetailsOption;

	@FindBy(xpath = "//div[@id='tabId_69']//span[@class='font-5'][contains(text(),'Header Details')]")
	private static WebElement detailsHeaderDetailsTab;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[1]/td[4]")
	private static WebElement detailsHeaderAddress;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[2]/td[4]")
	private static WebElement detailsHeaderCity;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[3]/td[4]")
	private static WebElement detailsHeaderPin;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[4]/td[4]")
	private static WebElement detailsHeaderDeliveryAddress;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[5]/td[4]")
	private static WebElement detailsHeaderCityOne;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[6]/td[4]")
	private static WebElement detailsHeaderPinOne;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[7]/td[4]")
	private static WebElement detailsHeaderSendEmailToCustomer;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[8]/td[4]")
	private static WebElement detailsHeaderAllowCustomerPortal;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[9]/td[4]")
	private static WebElement detailsHeaderEmail;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[10]/td[4]")
	private static WebElement detailsHeaderPassword;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[11]/td[4]")
	private static WebElement detailsHeaderTelNo;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[12]/td[4]")
	private static WebElement detailsHeaderFaxNo;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[13]/td[4]")
	private static WebElement detailsHeaderBankAccountName;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[14]/td[4]")
	private static WebElement detailsHeaderBankAccountNumber;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[15]/td[4]")
	private static WebElement detailsHeaderIFSCCode;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[16]/td[4]")
	private static WebElement detailsHeaderPaymentType;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[17]/td[4]")
	private static WebElement detailsHeaderFinanceEmail;

	@FindBy(xpath = "//*[@id='HeaderDetails_2']/div/div/table/tbody/tr[18]/td[4]")
	private static WebElement detailsHeaderPortalEmail;

	@FindBy(xpath = "//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	private static WebElement detailsHeaderBankSaveBtn;

	@FindBy(xpath = "//div[contains(text(),'Move Field')]")
	private static WebElement detailsHeaderMoveFieldBtn;

	@FindBy(xpath = "//div[@id='btnAdd_Field_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Add')]")
	private static WebElement detailsHeaderAddBtn;

	@FindBy(xpath = "//div[contains(text(),'Preview')]")
	private static WebElement detailsHeaderPreviewBtn;

	@FindBy(xpath = "//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	private static WebElement detailsHeaderCloseBtn;

	@FindBy(xpath = "//div[@id='tabId_69']//span[@class='font-5'][contains(text(),'Body Details')]")
	private static WebElement detailsBodyDetailsTab;

	@FindBy(xpath = "//div[@id='BodyDetails_2']//div[@class='scrollable tbl-emptyfields-mastercust']")
	private static WebElement detailsBodyDetailsEmptyTab;

	@FindBy(xpath = "//*[@id='masterFields_list']/li[4]/span")
	private static WebElement accountMasterFieldPrintLayoutOption;

	@FindBy(xpath = "//div[@id='tabId_70']//span[@class='font-5'][contains(text(),'Header Details')]")
	private static WebElement printlayoutHeaderDetailsTab;

	@FindBy(xpath = "//div[@id='HeaderDetails_3']//div[@class='scrollable tbl-emptyfields-mastercust']")
	private static WebElement printLayoutHeaderDetailsEmpty;

	@FindBy(xpath = "//div[@id='tabId_70']//li[2]//a[1]")
	private static WebElement printLayouBodyDetailsTab;

	@FindBy(xpath = "//*[@id='BodyDetails_3']/div/div/table/tbody/tr[1]/td[4]")
	private static WebElement printlayoutBodyVoucherType;

	@FindBy(xpath = "//*[@id='BodyDetails_3']/div/div/table/tbody/tr[2]/td[4]")
	private static WebElement printLayoutBodyPrintlayout;

	@FindBy(xpath = "//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	private static WebElement printLayoutSaveBtn;

	@FindBy(xpath = "//div[@id='btnAdd_Field_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Add')]")
	private static WebElement printLayoutAddBtn;

	@FindBy(xpath = "//div[contains(text(),'Preview')]")
	private static WebElement printLayoutPreviewBtn;

	@FindBy(xpath = "//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	private static WebElement printLayoutCloseBtn;

	@FindBy(xpath = "//span[contains(text(),'Unique Constraints')]")
	private static WebElement accountMasterFieldsUniqueConstraintsOption;

	@FindBy(xpath = "//div[@id='tabContent_UConstraints_MasterCust']//div[@id='btnAddOrEdit_UniqueConstraints']")
	private static WebElement UniqueConstraintsAddBtn;

	@FindBy(xpath = "//div[@id='tabContent_UConstraints_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Delete')]")
	private static WebElement UniqueConstraintsDeleteBtn;

	@FindBy(xpath = "//div[@id='tabContent_UConstraints_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	private static WebElement UniqueConstraintsCloseBtn;

	@FindBy(xpath = "//input[@id='txtConstraintName']")
	private static WebElement ConstraintNameTxt;

	@FindBy(xpath = "//select[@id='ddlConstraintTabList']")
	private static WebElement UniqueConstraints_TabsDropdown;

	@FindBy(xpath = "//*[@id='tab_Main_UcFields']/i")
	private static WebElement UniqueConstraints_MainExpansionBtn;

	@FindBy(xpath = "//*[@id='chkList_MainFields_1']/div[1]")
	private static WebElement accountUniqueConstraints_Main_NameChekbox;

	@FindBy(xpath = "//div[@id='chkList_MainFields_1']//div[2]")
	private static WebElement accountUniqueConstraints_Main_CodeChekbox;

	@FindBy(xpath = "//div[@id='chkList_MainFields_1']//div[3]")
	private static WebElement accountUniqueConstraints_Main_AccountTypeCheckbox;

	@FindBy(xpath = "//div[@id='chkList_MainFields_1']//div[4]")
	private static WebElement accountUniqueConstraints_Main_CreditLimitCheckBox;

	@FindBy(xpath = "//div[@id='chkList_MainFields_1']//div[5]")
	private static WebElement accountUniqueConstraints_Main_CreditDays;

	@FindBy(xpath = "//div[@id='tab_Header_UcFields']//i[@class='pull-right icon-expand theme_icon-color']")
	private static WebElement UniqueConstraints_HeaderExpansionBtn;

	@FindBy(xpath = "//*[@id='chkList_HeaderFields_1']/div[1]")
	private static WebElement UniqueConstraints_Header_ChequeDiscountLimitChekbox;

	@FindBy(xpath = "//*[@id='chkList_HeaderFields_1']/div[2]")
	private static WebElement UniqueConstraints_Header_RateOfInterestChekbox;

	@FindBy(xpath = "//*[@id='chkList_HeaderFields_1']/div[3]")
	private static WebElement UniqueConstraints_Header_BankAcChekbox;

	@FindBy(xpath = "//*[@id='chkList_HeaderFields_1']/div[4]")
	private static WebElement UniqueConstraints_Header_PDCDiscountedChekbox;

	@FindBy(xpath = "//*[@id='tab_Body_UcFields']/i")
	private static WebElement UniqueConstraints_BodyExpansionBtn;

	@FindBy(xpath = "//span[contains(text(),'Rules')]")
	private static WebElement RulesOption;

	@FindBy(xpath = "//*[@id='newRuleTab_div_MasterRules']/div[1]/div/div[1]/div[1]")
	private static WebElement accountRules_SaveBtn;

	@FindBy(xpath = "//div[contains(text(),'New')]")
	private static WebElement accountRules_NewBtn;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[3]/div[1]/div[1]/div[1]/div[1]/div[3]/div[2]")
	private static WebElement accountRules_DeleteBtn;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[3]/div[1]/div[1]/div[1]/div[1]/div[4]/div[2]")
	private static WebElement accountRules_CloseBtn;

	@FindBy(xpath = "//*[@id='txtMasterRuleName_MasterRules']")
	private static WebElement Rules_RuleNameText;

	@FindBy(xpath = "//*[@id='chkCreatingGroup_Rule_MasterRules']")
	private static WebElement Rules_CreatingGroupChekbox;

	@FindBy(xpath = "//*[@id='chkNewRecord_Rule_MasterRules']")
	private static WebElement Rules_NewRecordChekbox;

	@FindBy(xpath = "//*[@id='chkEdit_Rule_MasterRules']")
	private static WebElement Rules_EditChekbox;

	@FindBy(xpath = "//*[@id='chkLoad_Rule_MasterRules']")
	private static WebElement Rules_LoadChekbox;

	@FindBy(xpath = "//*[@id='chkBeforeSave_Rule_MasterRules']")
	private static WebElement Rules_BeforeSaveChekbox;

	@FindBy(xpath = "//*[@id='chkOnLeave_Rule_MasterRules']")
	private static WebElement Rules_OnLeaveChekbox;

	@FindBy(xpath = "//*[@id='chkBeforeDelete_Rule_MasterRules']")
	private static WebElement Rules_BeforeDeleteChekbox;

	@FindBy(xpath = "//*[@id='chkOnEnter_Rule_MasterRules']")
	private static WebElement Rules_OnEnterChekbox;

	@FindBy(xpath = "//label[contains(text(),'Active')]")
	private static WebElement Rules_ActiveChekbox;

	@FindBy(xpath = "//*[@id='Conditions-Context_Menu']/li[3]")
	private static WebElement Rules_NoConditionChekbox;

	@FindBy(xpath = "//*[@id='allMasterCustTabs']/li[4]/span")
	private static WebElement rules_ExternalModules;

	@FindBy(xpath = "//select[@id='ddlOnEvent_MasterExternalModule']")
	private static WebElement rules_ExternalModulesOnEventDropdown;

	@FindBy(xpath = "//input[@id='txtbuttonCaption_MasterExternalModule']")
	private static WebElement rules_ExternalModulesButtonCaption;

	@FindBy(xpath = "//select[@id='ddlModuleType_MasterExternalModule']")
	private static WebElement rules_ExternalModules_ModuleTypeBtn;

	@FindBy(xpath = "//select[@id='ddlAllDllFiles_MasterExternalModule']")
	private static WebElement rules_ExternalModules_ModuleNameDropdown;

	@FindBy(xpath = "//select[@id='ddlClassNames_MasterExternalModule']")
	private static WebElement rules_ExternalModulesClassNameDropdown;

	@FindBy(xpath = "//select[@id='ddlClassMethods_MasterExternalModule']")
	private static WebElement rules_ExternalModulesFuctionalNameDropdown;

	@FindBy(xpath = "//div[contains(text(),'Update')]")
	private static WebElement rules_ExternalModulesUpdateBtn;

	@FindBy(xpath = "//div[@id='ExternalModulesDiv_MasterExternalModule']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	private static WebElement rules_ExternalModulesSaveBtn;

	@FindBy(xpath = "//div[contains(text(),'Edit')]")
	private static WebElement rules_ExternalModulesEditBtn;

	@FindBy(xpath = "//div[@id='ExternalModulesDiv_MasterExternalModule']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Delete')]")
	private static WebElement rules_ExternalModulesDeleteBtn;

	@FindBy(xpath = "//div[@id='ExternalModulesDiv_MasterExternalModule']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	private static WebElement rules_ExternalModulesCloseBtn;

	@FindBy(xpath = "//span[contains(text(),'Info Panel Customization')]")
	private static WebElement itemInfoPanelCustomizationTab;

	@FindBy(xpath = "//body[@class='custom_scrollbar']/section[@id='mainDiv']/div[@id='id_focus8_wrapper_default']/div[@class='content-wrapper']/section[@id='page_Content']/div[@class='container']/div[@id='mainLandingDiv']/div[@id='masterFirstDiv']/div[@class='tab-content']/div[@id='divLanding']/div[@id='divSecondsub']/div/div[@class='col-xs-12 col-sm-8 col-md-9 col-lg-9 padding-left-right5 mainDivCustomWidth']/div[@id='tabContent_IPCust_MasterCust']/div[@class='col-xs-12 col-sm-12 padding0']/div[@class='pull-right']/div[1]")
	private static WebElement iteminfoPanelCust_AddBtn;

	@FindBy(xpath = "//div[@id='tabContent_IPCust_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Delete')]")
	private static WebElement infoPanelCust_DeleteBtn;

	@FindBy(xpath = "//div[@id='tabContent_IPCust_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	private static WebElement infoPanelCust_CloseBtn;

	@FindBy(xpath = "//strong[contains(text(),'Credit History')]")
	private static WebElement infoPanelCustCreditHistory;

	@FindBy(xpath = "//div[@id='divPanel_2']//strong[contains(text(),'Ageing Analysis')]")
	private static WebElement infoPanelCustAgeingAnalysis;

	@FindBy(xpath = "//strong[contains(text(),'Ageing Analysis Base')]")
	private static WebElement infoPanelCustAgeingAnalysisBase;

	@FindBy(xpath = "//strong[contains(text(),'Ageing Analysis Local')]")
	private static WebElement infoPanelCustAgeingAnalysisLocal;

	@FindBy(xpath = "//strong[contains(text(),'Authorization')]")
	private static WebElement infoPanelAuthorization;

	@FindBy(xpath = "//span[@class='Flabel'][contains(text(),'Reports')]")
	private static WebElement accountReportsTab;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	private static WebElement accountReports_SaveBtn;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	private static WebElement accountReports_CloseBtn;

	@FindBy(xpath = "//*[@id='AllReportsDiv_MasterCust']/div[1]/label/input")
	private static WebElement reports_AdvancedbudgetReportChkBox;

	@FindBy(xpath = "//div[@id='AllReportsDiv_MasterCust']//div[1]//label[1]")
	private static WebElement reports_MasterInfoChkBox;

	@FindBy(xpath = "//div[@class='col-xs-12 col-sm-8 col-md-8 col-lg-9 padding0']//div[2]//label[1]")
	private static WebElement reports_ABCAnalysisAmountChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[3]//label[1]")
	private static WebElement reports_BankBookChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[4]//label[1]")
	private static WebElement reports_BankreconciliationstatementChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[5]//label[1]")
	private static WebElement reports_CashBookChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[6]//label[1]")
	private static WebElement reports_ComparativeAnalysisChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[7]//label[1]")
	private static WebElement reports_CustomerAgeingDetailsAnalysisChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[8]//label[1]")
	private static WebElement reports_CustomerageingdetailbyduedateChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[9]//label[1]")
	private static WebElement reports_CustomerageingsummaryanalysisChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[10]//label[1]")
	private static WebElement reports_CustomerbillwisesummaryChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[11]//label[1]")
	private static WebElement reports_CustomerduedateanalysisChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[12]//label[1]")
	private static WebElement reports_CustomerlistingofoutstandingbillsChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[13]//label[1]")
	private static WebElement reports_CustomeroverdueanalysisChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[14]//label[1]")
	private static WebElement reports_CustomeroverduesummaryChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[15]//label[1]")
	private static WebElement reports_CustomerstatementsChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[16]//label[1]")
	private static WebElement reports_CustomersummaryageingbyduedateChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[17]//label[1]")
	private static WebElement reports_IncomeExpenseTrendChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[18]//label[1]")
	private static WebElement reports_InterestcalculationChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[19]//label[1]")
	private static WebElement reports_LedgerChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[20]//label[1]")
	private static WebElement reports_LedgerdetailChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[21]//label[1]")
	private static WebElement reports_MonthlySalesChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[22]//label[1]")
	private static WebElement reports_PeakandlowbalanceamountChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[23]//label[1]")
	private static WebElement reports_PettycashbookChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[24]//label[1]")
	private static WebElement reports_PurchaseregisterChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[25]//label[1]")
	private static WebElement reports_PurchasereturnregisterChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[26]//label[1]")
	private static WebElement reports_PurchasesgroupedbydepartmentChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[27]//label[1]")
	private static WebElement reports_PurchasesgroupedbyItemChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[28]//label[1]")
	private static WebElement reports_PurchasesgroupedbyvendorChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[29]//label[1]")
	private static WebElement reports_SalesdaybookChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[30]//label[1]")
	private static WebElement reports_SalesgroupedbycustomerChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[31]//label[1]")
	private static WebElement reports_salesgroupedbydepartmentrChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[32]//label[1]")
	private static WebElement reports_SalesgroupedbyItemChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[33]//label[1]")
	private static WebElement reports_SalesreturnregisterChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[34]//label[1]")
	private static WebElement reports_SchedulesChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[35]//label[1]")
	private static WebElement reports_SubledgerChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[36]//label[1]")
	private static WebElement reports_SummarypurchaseregisterChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[37]//label[1]")
	private static WebElement reports_SummarysalesregisterChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[38]//label[1]")
	private static WebElement reports_TopCustomersChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[39]//label[1]")
	private static WebElement reports_TradingaccountrChkBox;

	@FindBy(xpath = "//div[40]//label[1]")
	private static WebElement reports_TransactionstypeanalysisChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[41]//label[1]")
	private static WebElement reports_VendorageingdetailanalysisChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[42]//label[1]")
	private static WebElement reports_VendorageingdetailbyduedateChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[43]//label[1]")
	private static WebElement reports_VendorageingsummaryanalysisChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[44]//label[1]")
	private static WebElement reports_VendorbillwisesummaryChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[45]//label[1]")
	private static WebElement reports_VendorduedateanalysisChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[46]//label[1]")
	private static WebElement reports_VendorlistingofoutstandingbillsChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[47]//label[1]")
	private static WebElement reports_VendoroverdueanalysisChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[48]//label[1]")
	private static WebElement reports_VendoroverduesummaryChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[49]//label[1]")
	private static WebElement reports_VendorstatementsChkBox;

	@FindBy(xpath = "//div[@id='tabContent_Reports_MasterCust']//div[50]//label[1]")
	private static WebElement reports_VendorsummaryageingbyduedateChkBox;

	// Create Tabs
	@FindBy(xpath = "//button[@id='btnCreateTab_MCust']")
	private static WebElement createTab;

	@FindBy(xpath = "//a[contains(text(),'Tree Tab')]")
	private static WebElement createTabTreeTab;

	@FindBy(xpath = "//input[@id='txtNewTreeTabCaption']")
	private static WebElement treeTabCaptionTxt;

	@FindBy(xpath = "//input[@id='txtNewTreeTabName']")
	private static WebElement treeTabTabNameTxt;

	@FindBy(xpath = "//input[@id='fOption_tab_masterName']")
	private static WebElement treeTabNewMastertxt;

	@FindBy(xpath = "//*[@id='fOption_tab_masterName_input_image']/span")
	private static WebElement treeTabNewMasterdropdown;

	@FindBy(xpath = "//*[@id='fOption_tab_masterName_input_settings']/span")
	private static WebElement treeTab_NewMasterSettingsBtn;

	@FindBy(xpath = "//input[@id='txtNewTreeTabFieldCaption']")
	private static WebElement treeTab_FieldCaptiontxt;

	@FindBy(xpath = "//input[@id='txtNewTreeTabFieldName']")
	private static WebElement treeTab_FieldNameTxt;

	@FindBy(xpath = "//input[@id='bIsTreeHiddenTab']")
	private static WebElement treeTab_HiddenChkBox;

	@FindBy(xpath = "//div[@id='fOption_tab_masterName_customize_popup_container']")
	private static WebElement treeTab_NewMaster_ContainerTxt;

	@FindBy(xpath = "//div[@id='fOption_tab_masterName_customize_popup_footer']//input[1]")
	private static WebElement treeTab_NewMaster_StanadrdfieldsBtn;

	@FindBy(xpath = "//select[@id='fOption_tab_masterName_customize_popup_standardfields_list']")
	private static WebElement treeTab_NewMaster_Stanadrdfields_Fielddropdown;

	@FindBy(xpath = "//input[@id='fOption_tab_masterName_customize_popup_standardfields_header']")
	private static WebElement treeTab_NewMaster_Stanadrdfields_headerTxt;

	@FindBy(xpath = "//select[@id='fOption_tab_masterName_customize_popup_standardfields_alignment']")
	private static WebElement treeTab_NewMaster_Stanadrdfields_Allignmentdropdown;

	@FindBy(xpath = "//input[@id='fOption_tab_masterName_customize_popup_standardfields_width']")
	private static WebElement treeTab_NewMaster_Stanadrdfields_WidthTxt;

	@FindBy(xpath = "//div[@id='divSecondsub']//input[3]")
	private static WebElement treeTab_NewMaster_Stanadrdfields_OkBtn;

	@FindBy(xpath = "//div[@id='divSecondsub']//input[4]")
	private static WebElement treeTab_NewMaster_Stanadrdfields_CancelBtn;

	@FindBy(xpath = "//div[@id='fOption_tab_masterName_search_container']//input[2]")
	private static WebElement treeTab_NewMaster_deleteColumnBtn;

	@FindBy(xpath = "//div[@id='divSecondsub']//input[3]")
	private static WebElement treeTab_NewMaster_OkBtn;

	@FindBy(xpath = "//div[@id='divSecondsub']//input[4]")
	private static WebElement treeTab_NewMaster_CancelBtn;

	@FindBy(xpath = "//*[@id='MCustomize_CreateTreeTab_Modal']/div/div/div[3]/button[1]")
	private static WebElement treeTab_OkBtn;

	@FindBy(xpath = "//div[@id='MCustomize_EditTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'OK')]")
	private static WebElement treeTab_UpdateOkBtn;

	@FindBy(xpath = "//*[@id='MCustomize_CreateTreeTab_Modal']/div/div/div[3]/button[2]")
	private static WebElement treeTab_CancelBtn;

	@FindBy(xpath = "//a[contains(text(),'Document Tab')]")
	private static WebElement createTab_DocumentTab;

	@FindBy(xpath = "//input[@id='txtNewDocTabCaption']")
	private static WebElement documentTab_TabCaption;

	@FindBy(xpath = "//input[@id='txtNewDocTabName']")
	private static WebElement documentTab_TabName;

	@FindBy(xpath = "//input[@id='bIsDocHiddenTab']")
	private static WebElement documentTab_HiddenChkbox;

	@FindBy(xpath = "//div[@id='MCustomize_CreateDocTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'OK')]")
	private static WebElement documentTab_OkBtn;

	@FindBy(xpath = "//div[@id='MCustomize_CreateDocTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'Cancel')]")
	private static WebElement documentTab_CancelBtn;

	@FindBy(xpath = "//label[@id='lblNameError_DocTab']")
	private static WebElement customizeMasterCreateTabDocumentTabMessage;

	@FindBy(xpath = "//span[contains(text(),'Document Tab')]")
	private static WebElement customizeMasterCreateDocumentTabNewlyCreate;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/ul[1]/li[1]/a[1]/span[1]")
	private static WebElement customizeMasterCreateDocumentTabNewlyHeaderDetails;

	@FindBy(xpath = "//div[@id='HeaderDetails_5']//div[@class='scrollable tbl-emptyfields-mastercust']")
	private static WebElement customizeMasterCreateDocumentTabNewlyBlankInHeaderDetails;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/ul[1]/li[2]/a[1]/span[1]")
	private static WebElement customizeMasterCreateDocumentTabNewlyBodyDetails;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
	private static WebElement customizeMasterCreateDocumentTabFieldName;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[2]/td[4]")
	private static WebElement customizeMasterCreateDocumentTabDocument;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[3]/td[4]")
	private static WebElement customizeMasterCreateDocumentTabCreatedDate;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[4]/td[4]")
	private static WebElement customizeMasterCreateDocumentTabLastModified;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[5]/td[4]")
	private static WebElement customizeMasterCreateDocumentFileSize;

	@FindBy(xpath = "//a[contains(text(),'Create Tab')]")
	private static WebElement createTab_CreateTab;

	@FindBy(xpath = "//div[@id='MCustomize_CreateDocTab_Modal']//h4[@class='modal-title'][contains(text(),'Tab Details')]")
	private static WebElement createTab_TabDetailsLabel;

	@FindBy(xpath = "//input[@id='txtNewTabCaption']")
	private static WebElement createTab_TabCaptionTxt;

	@FindBy(xpath = "//input[@id='txtNewTabName']")
	private static WebElement createTab_TabNameTxt;

	@FindBy(xpath = "//input[@id='bIsHiddenTab']")
	private static WebElement createTab_PopHiddenChkbox;

	@FindBy(xpath = "//*[@id='MCustomize_CreateTab_Modal']/div/div/div[3]/button[1]")
	private static WebElement createTab_PopOkBtn;

	@FindBy(xpath = "//*[@id='MCustomize_CreateTab_Modal']/div/div/div[3]/button[2]")
	private static WebElement createTab_PopCancelBtn;

	@FindBy(xpath = "//label[@id='lblNameError_NewTab']")
	private static WebElement customizeMasterCreateTabCreateTabMessage;

	// Newly Created Create Tab
	@FindBy(xpath = "//span[contains(text(),'Create Tab')]")
	private static WebElement customizeMasterCreateCreateTabNewlyCreateTabCaption;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/ul[1]/li[1]/a[1]/span[1]")
	private static WebElement customizeMasterCreateCreateTabHeaderDetails;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]")
	private static WebElement customizeMasterCreateCreateTabBlankHeaderDetails;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/ul[1]/li[2]/a[1]/span[1]")
	private static WebElement customizeMasterCreateCreateTabBodyDetails;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[2]/div[1]/div[1]")
	private static WebElement customizeMasterCreateCreateTabBlankBodyDetails;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[1]/div[2]")
	private static WebElement customizeMasterCreateCreateTabNewlyCreateTabSaveButton;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[3]/div[2]")
	private static WebElement customizeMasterCreateCreateTabAddButton;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[4]/div[2]")
	private static WebElement customizeMasterCreateCreateTabPreviewButton;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[5]/div[2]")
	private static WebElement customizeMasterCreateCreateTabCloseButton;

	@FindBy(xpath = "//button[@id='btnDeleteTab_MCust']")
	private static WebElement tabs_DeleteBtn;

	@FindBy(xpath = "//label[@id='lblNameError_TreeTab']")
	private static WebElement customizeMasterCreateTabsMessage;

	@FindBy(xpath = "//label[@id='lblMasterNameError_TreeTab']")
	private static WebElement customizeMasterCreateTabsMasterNameMessage;

	@FindBy(xpath = "//span[contains(text(),'Tree Tab')]")
	private static WebElement customizeMasterCreateTreeTabNewlyCreate;

	@FindBy(xpath = "//input[@id='txtEditTabCaption']")
	private static WebElement customizeMasterCreateTreeTabNewlyCreateTabCaption;

	@FindBy(xpath = "//div[@id='MCustomize_EditTab_Modal']//label[@class='col-sm-12 col-xs-12 col-md-5 col-lg-5 form-control-static Flabel'][contains(text(),'Hidden')]")
	private static WebElement customizeMasterCreateTreeTabNewlyCreateHidden;

	@FindBy(xpath = "//div[@id='MCustomize_EditTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'OK')]")
	private static WebElement customizeMasterCreateTreeTabNewlyCreateOkButton;

	@FindBy(xpath = "//div[@id='MCustomize_EditTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'Cancel')]")
	private static WebElement customizeMasterCreateTreeTabNewlyCreateCancelButton;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[5]/ul[1]/li[1]/a[1]/span[1]")
	private static WebElement customizeMasterCreateTreeTabNewlyHeaderDetails;

	@FindBy(xpath = "//div[@id='HeaderDetails_4']//div[@class='scrollable tbl-emptyfields-mastercust']")
	private static WebElement customizeMasterCreateTreeTabNewlyBlankInHeaderDetails;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[5]/ul[1]/li[2]/a[1]/span[1]")
	private static WebElement customizeMasterCreateTreeTabNewlyBodyDetails;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[5]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
	private static WebElement customizeMasterCreateTreeTabNewlyFieldInBodyDetails;

	@FindBy(xpath = "//span[contains(text(),'Tree Tab Delete')]")
	private static WebElement CustomizeCreateTreeTab;

	@FindBy(xpath = "//*[@id='lblWarnMessage_TabModal']")
	private static WebElement CustomizeDeleteTabMessage;

	@FindBy(xpath = "//div[@id='MCustomize_DeleteTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'Yes')]")
	private static WebElement CustomizeDeleteTabMessageYesBtn;

	@FindBy(xpath = "//div[@id='MCustomize_DeleteTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'No')]")
	private static WebElement CustomizeDeleteTabMessageNoBtn;

	// Master Customization Extra Fields Creation On Click Add button
	@FindBy(xpath = "//input[@id='ExtraField_FieldCaption']")
	private static WebElement extraFields_FieldDetailsTab;

	@FindBy(xpath = "//span[contains(text(),'Field Details')]")
	private static WebElement extraFields_ClickOnFieldDetailsTab;

	@FindBy(xpath = "//*[@id='ExtraField_FieldCaption']")
	private static WebElement extraFields_FieldDetailsCaption;

	@FindBy(xpath = "//div[@id='tab_FieldDetails_ExtraField']//div[1]//div[2]//div[1]//input[1]")
	private static WebElement extraFields_FieldDetailsName;

	@FindBy(xpath = "//*[@id='ddlDatatype_ExtraField']")
	private static WebElement extraFields_FieldDetailsDatTypeDropdown;

	@FindBy(xpath = "//*[@id='ExtraField_DefaultValue']")
	private static WebElement extraFields_FieldDetailsDefaultValue;

	@FindBy(xpath = "//*[@id='ExtraField_BannerText']")
	private static WebElement extraFields_FieldDetailsBannerText;

	@FindBy(xpath = "//*[@id='ExtraField_MaxSize']")
	private static WebElement extraFields_FieldDetails_MaxSize;

	@FindBy(xpath = "//*[@id='ExtraField_ControlType']")
	private static WebElement extraFields_FieldDetailsControlTypeDropdown;

	@FindBy(xpath = "//*[@id='ExtraField_ToolTipText']")
	private static WebElement extraFields_FieldDetailsToolTipText;

	@FindBy(xpath = "//*[@id='ExtraField_RegularExpression']")
	private static WebElement extraFields_FieldDetailsRegularExpressionText;

	@FindBy(xpath = " //*[@id='btnLoad_RExp']")
	private static WebElement extraFields_RegularExperssionLoadExpansionBtn;

	@FindBy(xpath = "//*[@id='extraFieldContainer_div']/ul/li[2]/a/span")
	private static WebElement extraFields_PropertiesTab;

	@FindBy(xpath = "//*[@id='tab_Properties_ExtraField']/div[1]/div[1]")
	private static WebElement extraFields_PropertiesTabPartOfDeliveryAddressChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_PartOfBillingAddress']")
	private static WebElement extraFields_PropertiesPartOfBillingAddressChekbox;

	@FindBy(xpath = "//input[@id='FieldsDetails_IsMandatory']")
	private static WebElement extraFields_PropertiesMandatoryChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_AllowAsParameter']")
	private static WebElement extraFields_PropertiesAllowAsParameterChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_IsHidden']")
	private static WebElement extraFields_PropertiesHiddenChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_HiddenInGroup']")
	private static WebElement extraFields_PropertiesHiddenInGroupChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_SpellCheck']")
	private static WebElement extraFields_PropertiesSpellCheckChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_MandatoryInGroup']")
	private static WebElement extraFields_PropertiesMandatoryInGroupChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_AuditTrial']")
	private static WebElement extraFields_PropertiesAuditTrialChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_NotAvailableForReports']")
	private static WebElement extraFields_PropertiesNotAvailableForReportsChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_MergeField']")
	private static WebElement extraFields_PropertiesMergeFieldChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_MassUpdate']")
	private static WebElement extraFields_PropertiesMassUpdateChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_IncludeInQuickCreate']")
	private static WebElement extraFields_PropertiesIncludeInQuickCreateChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_CannotBeExported']")
	private static WebElement extraFields_PropertiesCannotBeExportedChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_CannotBeImported']")
	private static WebElement extraFields_PropertiesCannotBeImportedChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_CopyFromParent']")
	private static WebElement extraFields_PropertiesCopyFromParentChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_ReadOnly']")
	private static WebElement extraFields_PropertiesReadOnlyChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_InformationField']")
	private static WebElement extraFields_PropertiesInformationFieldChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_IsMandatoryInRevision']")
	private static WebElement extraFields_PropertiesIsMandatoryInRevisionChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_AvailableinCustomerPortal']")
	private static WebElement extraFields_PropertiesAvailableinCustomerPortalChekbox;

	@FindBy(xpath = "//*[@id='FieldsDetails_EditableinCustomerPortal']")
	private static WebElement extraFields_PropertiesEditableinCustomerPortalChekbox;

	@FindBy(xpath = "//*[@id='Behaviour']")
	private static WebElement extraFields_PropertiesBehaviourDropdown;

	@FindBy(xpath = "//*[@id='extraFieldContainer_div']/ul/li[3]/a/span")
	private static WebElement extraFields_FormattingTab;

	@FindBy(xpath = "//*[@id='FieldsDetails_ColumnSpan']")
	private static WebElement extraFields_FormattingColumnSpan;

	@FindBy(xpath = "//*[@id='FieldsDetails_RowSpan']")
	private static WebElement extraFields_FormattingRowSpan;

	@FindBy(xpath = "//*[@id='CharacterCasing']")
	private static WebElement extraFields_FormattingCharacterCasingDropdown;

	@FindBy(xpath = "//*[@id='TextAlign']")
	private static WebElement extraFields_FormattingTextAlignDropdown;

	@FindBy(xpath = "//*[@id='FieldsDetails_Font']")
	private static WebElement extraFields_FormattingFieldsDetailsFont;

	@FindBy(xpath = "//*[@id='FieldsDetails_BackColor']")
	private static WebElement extraFields_FormattingBackColor;

	@FindBy(xpath = "//*[@id='FieldsDetails_Font_Button']")
	private static WebElement extraFields_FormattingFieldsDetailsFont_Btn;

	// Elements are used for font edit option pop in field details and rules
	@FindBy(xpath = "//*[@id='fontFamily_ExtraField_FontCtrl']")
	private static WebElement FontAreialDropdown;

	@FindBy(xpath = "//*[@id='fontStyle_ExtraField_FontCtrl']")
	private static WebElement fontStyleDropdown;

	@FindBy(xpath = "//*[@id='fontWeight_ExtraField_FontCtrl']")
	private static WebElement fontWeightDropdown;

	@FindBy(xpath = "//*[@id='fontSizes_ExtraField_FontCtrl']")
	private static WebElement fontSizeDropdown;

	@FindBy(xpath = "//*[@id='fontForeColor_ExtraField_FontCtrl']")
	private static WebElement foreColourDropdown;

	@FindBy(xpath = "//*[@id='fontBackColor_ExtraField_FontCtrl']")
	private static WebElement backColorDropdown;

	@FindBy(xpath = "//*[@id='chkBaseline_ExtraField_FontCtrl']")
	private static WebElement baselineChekbox;

	@FindBy(xpath = "//*[@id='chkOverLine_ExtraField_FontCtrl']")
	private static WebElement overLineChekbox;

	@FindBy(xpath = "//*[@id='chkStrikeThrough_ExtraField_FontCtrl']")
	private static WebElement strikeThroughChekbox;

	@FindBy(xpath = "//*[@id='chkUnderline_ExtraField_FontCtrl']")
	private static WebElement underlineChekbox;

	@FindBy(xpath = "//*[@id='chkEnableFont_ExtraField_FontCtrl']")
	private static WebElement enableFontChekbox;

	@FindBy(xpath = "//*[@id='previewfont_ExtraField_FontCtrl']")
	private static WebElement frontPriveiw;

	@FindBy(xpath = "//*[@id='myFontControl_IF_Save']/i")
	private static WebElement frontSaveBtn;

	@FindBy(xpath = "//*[@id='myFontControl_IF_Close']")
	private static WebElement frontCloseBtn;

	@FindBy(xpath = "//*[@id='extraFieldContainer_div']/ul/li[4]/a/span")
	private static WebElement extraFields_RulesTab;

	@FindBy(xpath = "//*[@id='newRuleTab_div_FieldRules']/div[1]/div/div[1]/div[2]")
	private static WebElement extraFields_RulesSaveBtn;

	@FindBy(xpath = "//*[@id='newRuleTab_div_FieldRules']/div[1]/div/div[2]/div[2]")
	private static WebElement extraFields_RulesNewBtn;

	@FindBy(xpath = "//*[@id='newRuleTab_div_FieldRules']/div[1]/div/div[3]/div[2]")
	private static WebElement extraFields_RulesDeleteBtn;

	@FindBy(xpath = "//div[@id='newRuleTab_div_FieldRules']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	private static WebElement extraFields_RulesCloseBtn;

	@FindBy(xpath = "//*[@id='lnkRule_div_FieldRules']/input")
	private static WebElement extraFields_RulesClickHereAddRuleButtonBtn;

	@FindBy(xpath = "//*[@id='txtMasterRuleName_FieldRules']")
	private static WebElement extraFields_RuleNameDropdown;

	@FindBy(xpath = "//*[@id='txtMasterRuleName_FieldRules_input_settings']/span")
	private static WebElement extraFields_RuleNameSetingBtn;

	@FindBy(xpath = "//*[@id='extraFieldContainer_div']/ul/li[5]/a/span")
	private static WebElement extraFields_ExternalModulesTab;

	@FindBy(xpath = "//*[@id='ddlOnEvent_mExtraFieldExternalModule']")
	private static WebElement extraFields_ExternalModulesOnEventDropdown;

	@FindBy(xpath = "//*[@id='txtbuttonCaption_mExtraFieldExternalModule']")
	private static WebElement extraFields_ExternalModulesButtonCaption;

	@FindBy(xpath = "//*[@id='ddlModuleType_mExtraFieldExternalModule']")
	private static WebElement extraFields_ExternalModules_ModuleTypeBtn;

	@FindBy(xpath = "//*[@id='ddlAllDllFiles_mExtraFieldExternalModule']")
	private static WebElement extraFields_ExternalModules_ModuleNameDropdown;

	@FindBy(xpath = "//*[@id='ddlClassNames_mExtraFieldExternalModule']")
	private static WebElement extraFields_ExternalModulesClassNameDropdown;

	@FindBy(xpath = "//*[@id='ddlClassMethods_mExtraFieldExternalModule']")
	private static WebElement extraFields_ExternalModulesFuctionalNameDropdown;

	@FindBy(xpath = "//*[@id='ddlAvailability_mExtraFieldExternalModule']")
	private static WebElement extraFields_ExternalModulesAvabileInDropdown;

	@FindBy(xpath = "//*[@id='MCustomize_FontDialog_Modal']/div/div/div[3]/button[1]")
	private static WebElement extraFields_ExternalModulesForMatFieldDeatailsOkBtn;

	@FindBy(xpath = "//*[@id='MCustomize_FontDialog_Modal']/div/div/div[3]/button[2]")
	private static WebElement extraFields_externalModulesForMatFieldDeatailsCanceBtn;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]")
	private static WebElement extraFields_OkBtn;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[2]/div[2]")
	private static WebElement extraFields_CloseBtn;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
	private static WebElement extraFields_CreatedByUserInHeaderDetailsTab;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/i[1]")
	private static WebElement extraFields_EditOptionInHeaderDetailsTab;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/i[2]")
	private static WebElement extraFields_DeleteOptionInHeaderDetailsTab;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[2]/td[4]")
	private static WebElement extraFields_SecondFieldInHeaderDetailsTab;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[2]/div[2]")
	private static WebElement extraFields_MoveFieldOption;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[8]/div[1]/div[1]/div[2]/div[1]/div[2]/div[1]/select[1]")
	private static WebElement extraFields_MoveFieldTabName;

	@FindBy(xpath = "//div[@id='tableType_div']//div[1]//label[1]")
	private static WebElement extraFields_MoveFieldHeader;

	@FindBy(xpath = "//div[@id='rdbBodyDiv_MoveField_Modal']//label[1]")
	private static WebElement extraFields_MoveFieldBody;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[8]/div[1]/div[1]/div[3]/button[1]")
	private static WebElement extraFields_MoveFieldOkButton;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[8]/div[1]/div[1]/div[3]/button[2]")
	private static WebElement extraFields_MoveFieldCancelButton;

	// Settings Tab Move Field
	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[3]/td[1]/i[1]")
	private static WebElement extraFields_SettingsTab_MoveField;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
	private static WebElement extraFields_SettingsTab_First;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/i[2]")
	private static WebElement extraFields_SettingsTab_FirstDelete;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[3]/td[1]/i[2]")
	private static WebElement extraFields_SettingsTab_MoveFieldOptsDelete;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[9]/div[1]/div[1]/div[2]/div[1]/div[1]/label[1]")
	private static WebElement extraFields_SettingsTab_DeleteMessage;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[9]/div[1]/div[1]/div[3]/button[2]")
	private static WebElement extraFields_SettingsTab_DeleteMessageNoOption;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[9]/div[1]/div[1]/div[3]/button[1]")
	private static WebElement extraFields_SettingsTab_DeleteMessageYesOption;

	@FindBy(xpath = "//a[@class='icon-font7 theme_color-inverse']")
	private static WebElement extraFields_GeneralTab;

	@FindBy(xpath = "//a[contains(text(),'Settings')]")
	private static WebElement extraFields_SettingsTab;

	@FindBy(xpath = "//a[contains(text(),'Details')]")
	private static WebElement extraFields_DetailsTab;

	@FindBy(xpath = "//a[contains(text(),'Print Layout')]")
	private static WebElement extraFields_PrintLayout;

	@FindBy(xpath = "//li[5]/div/div/a")
	private static WebElement extraFields_TreeTabUpdate;

	@FindBy(xpath = "//a[@class='icon-font7 theme_color'][contains(text(),'Document Tab')]")
	private static WebElement extraFields_DocumentTab;

	@FindBy(xpath = "//a[@class='icon-font7 theme_color'][contains(text(),'Create Tab')]")
	private static WebElement extraFields_CreateTab;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[4]/div[2]")
	private static WebElement extraFields_PreviewTab;

	@FindBy(xpath = "//input[@id='sFileName1']")
	private static WebElement extraFields_PreviewTab_DocumentTab_FileName;

	@FindBy(xpath = "//input[@id='biDocument1']")
	private static WebElement extraFields_PreviewTab_DocumentTab_Document;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[1]")
	private static WebElement extraFields_PreviewTab_DocumentTab_UploadDocument;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[2]")
	private static WebElement extraFields_PreviewTab_DocumentTab_SaveDocument;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[3]")
	private static WebElement extraFields_PreviewTab_DocumentTab_DeleteDocument;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[7]/table[1]/tbody[1]/tr[1]/td[2]/input[2]")
	private static WebElement extraFields_PreviewTab_DocumentTab_CreateDate;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[9]/div[1]/input[1]")
	private static WebElement extraFields_PreviewTab_DocumentTab_FileSize;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[7]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
	private static WebElement extraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[3]/div[2]/div[1]/ul[1]/li[2]/button[2]/i[1]")
	private static WebElement extraFields_PreviewTab_SaveBtn;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[3]/div[2]/div[1]/ul[1]/li[2]/button[5]")
	private static WebElement extraFields_PreviewTab_CloseBtn;

	@FindBy(xpath = "/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td/div/table/tbody/tr[2]/td[8]/div[1]/label/input")
	private static WebElement selectVendorB;

	@FindBy(xpath = "//input[@id='iPDCDiscountedAC']")
	private static WebElement pdcDicountAccount;

	@FindBy(xpath = "//input[@id='uploadBtnbiDocument1']")
	private static WebElement addGroupDocumentTab_UploadDocument;

	@FindBy(xpath = "//tr[1]//td[5]//div[1]//div[1]//div[2]")
	private static WebElement addGroupDocumentTab_SaveDocument;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[3]/i[1]")
	private static WebElement addGroupDocumentTab_DeleteDocument;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[7]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
	private static WebElement addGroupCreateCreateTab_ExtraFieldUpdate;

	@FindBy(xpath = "//td[contains(@class,'tdName padding0')][contains(text(),'Vendor Group')]")
	public static WebElement accountGroupCreation;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
	private static WebElement accSelect;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
	public static WebElement accSelectBySingleClick;

	@FindBy(xpath = "//span[contains(text(),'Vendor Group')]")
	public static WebElement clickOnAccountGroupToDisplayTitle;

	@FindBy(xpath = "//span[contains(text(),'VG')]")
	public static WebElement checkAccountGroupTitle;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[4]/span[1]")
	public static WebElement clickOnAccountGroup;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
	public static WebElement getCpationOfGroup;

	@FindBy(xpath = "//label[@class='msgInfo']")
	public static WebElement clickOnEmptyGroup;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[3]/ul[1]/li[1]/ul[6]/li[1]/ul[3]/li[1]/ul[1]/li[1]/a[2]")
	public static WebElement selectVendorGroupCheckbox;

	@FindBy(xpath = "/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td/div/table/tbody/tr[1]/td[8]/div[1]/label/input")
	public static WebElement selectVendorGroup;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[9]/div[1]/div[1]/div[1]/div[2]/div[1]/label[1]")
	public static WebElement getMsgOnDelete;

	@FindBy(xpath = "//button[@id='btnOkForDelete']")
	public static WebElement clickOnOkInDelete;

	@FindBy(xpath = "//button[@id='btnCancelForDelete']")
	public static WebElement clickOnCancelInDelete;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[4]/span[1]")
	public static WebElement clickOnVendorGroup;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
	public static WebElement getVendorGroupName;

	@FindBy(xpath = "//button[@class='btn-link theme_icon-color btnGenerateMasterclose closeMasterPartial clsMasterSaveClose']//i[@class='icon-font6 icon-close']")
	public static WebElement closeAccountCreationScreen;

	@FindBy(xpath = "//input[@id='chkRetainSelection']")
	public static WebElement accountMasterRetain;

	@FindBy(xpath = "//input[@id='liSelectAllMasters']")
	public static WebElement accountMasterSelect;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
	public static WebElement accountFirstCheckBox;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[8]/div[1]/label[1]/input[1]")
	public static WebElement accountSecondCheckBox;

	@FindBy(xpath = "//button[@class='btn-link theme_icon-color btnGenerateMasterclose closeMasterPartial clsMasterSaveClose']")
	public static WebElement closeAccMasterCreationScreen;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/ul[1]/li[2]/button[5]/i[1]")
	public static WebElement closeMaster;

	// Dash board Page
	@FindBy(xpath = "//*[@id='dashName']")
	private static WebElement labelDashboard;

	@FindBy(xpath = "//*[@id='Select_dash']")
	private static WebElement selectDashboard;

	@FindBy(xpath = "//*[@id='Dashboard_AddDash']")
	private static WebElement newAddDashBoard;

	@FindBy(xpath = "//*[@id='Dashboard_Dash_Config']")
	private static WebElement dashboardCustomizationSettings;

	// Properties Page
	@FindBy(xpath = "//span[contains(text(),'Account Properties')]")
	public static WebElement accountPropertiesLabel;

	@FindBy(xpath = "//input[@id='rbnNormal']")
	public static WebElement normalRadioBtn;

	@FindBy(xpath = "//input[@id='rbnDisplayDebitCreditTotalForEachAccountUnderGroup']")
	private static WebElement displayDebitCreditTotalForEachAccountUnderGroup;

	@FindBy(xpath = "//input[@id='rbnClubTranOfAllAcctsUnderGrpWhenDispInLedger']")
	private static WebElement ClubTheTransactionsofAllTheAccountsUnderGroup;

	@FindBy(xpath = "//input[@id='rbnShowSummaryOfAccount']")
	private static WebElement showSummaryOfTheAccountRadioBtn;

	@FindBy(xpath = "//input[@id='chkSuspendCreditLimit']")
	private static WebElement suspendCreditLimitChkbox;

	@FindBy(xpath = "//input[@id='rbnDisplayDebitCreditTotalForEachMonth']")
	private static WebElement displayDebitCreditTotalForEachMonthRadioBtn;

	@FindBy(xpath = "//input[@id='rbnrbnDisplayDebitCreditTotalForEachDay']")
	private static WebElement displayDebitCreditTotalForEachDayRadioBtn;

	@FindBy(xpath = "//input[@id='rbnNone']")
	public static WebElement noneRadioBtn;

	@FindBy(xpath = "//input[@id='rbnConsolidateWhenBothAccountsAreSame']")
	public static WebElement consolidateWhenBothAccountsAreSameRadioBtn;

	@FindBy(xpath = "//input[@id='rbnConsolidateAlways']")
	public static WebElement consolidateAlwaysRadioBtn;

	@FindBy(xpath = "//select[@id='ddlStatus']")
	public static WebElement statusDropdown;

	@FindBy(xpath = "//input[@id='chkDoNotRestrictSelectionEvenIfRightsNotAllotted']")
	public static WebElement doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox;

	@FindBy(xpath = "//input[@id='chkAllowOtherCompaniesToViewRecords']")
	public static WebElement allowOtherCompaniesToViewRecordsCheckbox;

	@FindBy(xpath = "//input[@id='chkGenerateLedgerByCurrency']")
	public static WebElement generateLedgerByCurrencyCheckbox;

	@FindBy(xpath = "//input[@id='chkSendSmsEmailWhereverAcDebitedCredited']")
	public static WebElement sendSmsEmailWhereverAcDebitedCreditedCheckbox;

	@FindBy(xpath = "//span[@id='btnPropOk']")
	public static WebElement properties_okBtn;

	@FindBy(xpath = "//*[@id='divMasterProperty']/ul/li/span[2]")
	public static WebElement properties_cancelBtn;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/ul[1]/li[1]/ul[1]/li[5]/span[1]")
	public static WebElement customizeTabWithTreeTabUpdate;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/ul[1]/li[1]/ul[1]/li[6]/span[1]")
	public static WebElement customizeTabWithDocumentTab;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/ul[1]/li[1]/ul[1]/li[7]/span[1]")
	public static WebElement customizeTabWithCreateTreeTab;

	@FindBy(xpath = "//div[@id='Layout_Popup']//input[2]")
	private static WebElement noIn;

	@FindBy(xpath = "//*[@id='dashName']")
	private static WebElement dashboard;

	@FindBy(xpath = "//div[@id='chartdiv0']")
	public static WebElement dashboardGraph;

	@FindBy(xpath = "//span[@id='btnPropOk']")
	public static WebElement dashboardLedger;

	@FindBy(xpath = "//span[@id='btnPropOk']")
	public static WebElement dashboardInfoPanel;

	// General tab
	@FindBy(xpath = "//tbody[@id='iBankAc_table_data_body']/tr/td")
	private static List<WebElement> bankAccountListCount;

	@FindBy(xpath = "//tbody[@id='iPDCDiscountedAC_table_data_body']/tr/td")
	private static List<WebElement> pdcAccountListCount;

	// Settings Tab
	@FindBy(xpath = "//tbody[@id='iExchangeAdjustmentGainAC_table_data_body']/tr/td")
	private static List<WebElement> exgGainListCount;

	@FindBy(xpath = "//tbody[@id='iExchangeAdjustmentLossAC_table_data_body']/tr/td")
	private static List<WebElement> exgLossListCount;

	@FindBy(xpath = "//tbody[@id='iPrimaryAccount_table_data_body']/tr/td")
	private static List<WebElement> primaryAccountListCount;

	@FindBy(xpath = "//tbody[@id='iReminderTerms_table_data_body']")
	private static WebElement reminderTermsEmptyList;

	@FindBy(xpath = "//tbody[@id='iDefaultCurrency_table_data_body']/tr/td")
	private static List<WebElement> defaultCurrencyListCount;

	@FindBy(xpath = "//tbody[@id='iFinanceChargeTerms_table_data_body']")
	private static WebElement financeChargeTermsEmptyList;

	@FindBy(xpath = "//tbody[@id='iPaymentTerms_table_data_body']")
	private static WebElement paymentTermsEmptyList;

	// Detail tab
	@FindBy(xpath = "//tbody[@id='iCity_table_data_body']")
	private static WebElement city1EmptyList;

	@FindBy(xpath = "//tbody[@id='iDeliveryCity_table_data_body']")
	private static WebElement city2EmptyList;

	// Tree tab
	@FindBy(xpath = "//tbody[@id='cmbUserTypeMaster_table_data_body']/tr/td")
	private static List<WebElement> mastercmbMasterListCount;

	// Currency Page
	@FindBy(xpath = "//span[@class='navText']//span[contains(text(),'Currency Master')]")
	private static WebElement currencyMasterlabel;

	@FindBy(xpath = "//*[@id='ISOCurrencyCode']")
	private static WebElement ISOCurrencyCodeTxt;

	@FindBy(xpath = "//td[@id='ISOCurrencyCode_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement ISOCurrencyCodeSettingsBtn;

	@FindBy(xpath = "//h4[@id='ISOCurrencyCode_customize_popup_heading']")
	private static WebElement ISOCurrencyCode_CustomizeDisplayColumnsLabel;

	@FindBy(xpath = "//div[@id='ISOCurrencyCode_customize_popup_container']")
	private static WebElement ISOCurrencysCodeContainerTxt;

	@FindBy(xpath = "//div[@id='ISOCurrencyCode_customize_popup_footer']//input[1]")
	private static WebElement ISOCurrencyCodeStanadrdfieldsBtn;

	@FindBy(xpath = "//select[@id='ISOCurrencyCode_customize_popup_standardfields_list']")
	private static WebElement ISOCurrencyCodeStanadrdfields_Fielddropdown;

	@FindBy(xpath = "//input[@id='ISOCurrencyCode_customize_popup_standardfields_header']")
	private static WebElement ISOCurrencyCodeStanadrdfields_headerTxt;

	@FindBy(xpath = "//select[@id='ISOCurrencyCode_customize_popup_standardfields_alignment']")
	private static WebElement ISOCurrencyCodeStanadrdfields_Allignmentdropdown;

	@FindBy(xpath = "//input[@id='ISOCurrencyCode_customize_popup_standardfields_width']")
	private static WebElement ISOCurrencyCodeStanadrdfields_WidthTxt;

	@FindBy(xpath = "//div[@id='currencyMasterWidth']//input[3]")
	private static WebElement ISOCurrencyCodeStanadrdfields_OkBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[4]")
	private static WebElement ISOCurrencyCodeStanadrdfields_CancelBtn;

	@FindBy(xpath = "//div[@id='ISOCurrencyCode_search_container']//input[2]")
	private static WebElement ISOCurrencyCodedeleteColumnBtn;

	@FindBy(xpath = "//div[@id='currencyMasterWidth']//input[3]")
	private static WebElement ISOCurrencyCodeOkBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[4]")
	private static WebElement ISOCurrencyCodeCancelBtn;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[2]/fieldset[1]/div[1]/div[2]/div[2]/input[1]")
	private static WebElement coinsNameTxt;

	@FindBy(xpath = "//input[@id='currencyName']")
	private static WebElement currencyNameTxt;

	@FindBy(xpath = "//input[@id='GeneralRoundOff']")
	private static WebElement generalRoundOffTxt;

	@FindBy(xpath = "//select[@id='RoundingType']")
	private static WebElement roundingTypeDropdown;
	
	@FindBy(xpath = "//input[@id='CurrencyUnit']")
	private static WebElement currencyUnitTxt;

	@FindBy(xpath = "//input[@id='CurrencySubUnit']")
	private static WebElement currencySubUnitTxt;

	@FindBy(xpath = "//input[@id='connector']")
	private static WebElement connectorTxt;

	@FindBy(xpath = "//input[@id='controlSymbol']")
	private static WebElement controlSymbolDropdown;

	// Control SymbolPop Up
	@FindBy(xpath = "//td[@id='controlSymbol_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement symbolSettingsBtn;

	@FindBy(xpath = "//h4[@id='controlSymbol_customize_popup_heading']")
	private static WebElement symbol_CustomizeDisplayColumnsLabel;

	@FindBy(xpath = "//div[@id='controlSymbol_customize_popup_container']")
	private static WebElement ISOCurrencysSymbolContainerTxt;

	@FindBy(xpath = "//div[@id='controlSymbol_customize_popup_footer']//input[1]")
	private static WebElement symbolStanadrdfieldsBtn;

	@FindBy(xpath = "//select[@id='controlSymbol_customize_popup_standardfields_list']")
	private static WebElement symbolStanadrdfields_Fielddropdown;

	@FindBy(xpath = "//input[@id='controlSymbol_customize_popup_standardfields_header']")
	private static WebElement symbolStanadrdfields_headerTxt;

	@FindBy(xpath = "//select[@id='controlSymbol_customize_popup_standardfields_alignment']")
	private static WebElement symbolStanadrdfields_Allignmentdropdown;

	@FindBy(xpath = "//input[@id='controlSymbol_customize_popup_standardfields_width']")
	private static WebElement symbolStanadrdfields_WidthTxt;

	@FindBy(xpath = "//div[@id='currencyMasterWidth']//input[3]")
	private static WebElement symbolStanadrdfields_OkBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[4]")
	private static WebElement symbolStanadrdfields_CancelBtn;

	@FindBy(xpath = "//div[@id='controlSymbol_search_container']//input[2]")
	private static WebElement symboldeleteColumnBtn;

	@FindBy(xpath = "//div[@id='currencyMasterWidth']//input[3]")
	private static WebElement symbolOkBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[4]")
	private static WebElement symbolCancelBtn;

	@FindBy(xpath = "//input[@id='iNoOfDecimals']")
	private static WebElement noOfDecimalsTxt;

	@FindBy(xpath = "//input[@id='NoOfDesimals']")
	private static WebElement noOfDecimalsTxtInCurrency;
	
	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[2]/fieldset[1]/div[1]/div[2]/div[4]/table[1]/tbody[1]/tr[2]")
	private static WebElement tableRow;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[2]/fieldset[1]/div[1]/div[2]/div[4]/table[1]/tbody[1]/tr[2]/td[1]")
	private static WebElement tableCol;

	// Grid Fields in Denomination Details
	@FindBy(xpath = "//td[@id='CurrencyMasterGrid_col_1-1']")
	private static WebElement denominationCode1;

	@FindBy(xpath = "//input[@id='CurrencyMasterGrid_control_heading_ctrl_2']")
	private static WebElement denominationValue1;

	@FindBy(xpath = "//td[@id='CurrencyMasterGrid_col_2-1']")
	private static WebElement denominationCode2;

	@FindBy(xpath = "//td[@id='CurrencyMasterGrid_col_2-2']")
	private static WebElement denominationValue2;

	// Pop Up Field
	@FindBy(xpath = "//span[contains(text(),'Exchange Rate Definition')]")
	private static WebElement exchangeRateDefinitionLabel;

	@FindBy(xpath = "//i[@class='icon-font7 icon-import-from-excel']")
	private static WebElement importFromExcelIcon;

	@FindBy(xpath = "//i[@class='icon-font7 icon-clear']")
	private static WebElement exchangeRateDefinitionClearIcon;

	@FindBy(xpath = "//i[@class='icon-font7 icon-save']")
	private static WebElement exchangeRateDefinitionSaveIcon;

	@FindBy(xpath = "//span[@id='btnCurrencyMasterCancel']//i[@class='icon-font7 icon-close']")
	private static WebElement exchangeRateDefinitionPopCloseIcon;

	@FindBy(xpath = "//span[@id='closeExchangeRate']")
	private static WebElement exchangeRateDefinitionPageCloseIcon;

	@FindBy(xpath = "//input[@id='id_option']")
	private static WebElement baseCurrencyTxt;

	@FindBy(xpath = "//td[@id='id_option_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement baseCurrencySettingsBtn;
	
	@FindBy(xpath = "//h4[@id='id_option_customize_popup_heading']")
	private static WebElement baseCurrency_CustomizeDisplayColumnsLabel;

	@FindBy(xpath = "//div[@id='id_option_customize_popup_container']")
	private static WebElement baseCurrencyscodeContainerTxt;

	@FindBy(xpath = "//div[@id='id_option_customize_popup_footer']//input[1]")
	private static WebElement baseCurrencyStanadrdfieldsBtn;

	@FindBy(xpath = "//select[@id='id_option_customize_popup_standardfields_list']")
	private static WebElement baseCurrencyStanadrdfields_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_option_customize_popup_standardfields_header']")
	private static WebElement baseCurrencyStanadrdfields_headerTxt;

	@FindBy(xpath = "//select[@id='id_option_customize_popup_standardfields_alignment']")
	private static WebElement baseCurrencyStanadrdfields_Allignmentdropdown;

	@FindBy(xpath = "//input[@id='id_option_customize_popup_standardfields_width']")
	private static WebElement baseCurrencyStanadrdfields_WidthTxt;

	@FindBy(xpath = "//div[@class='row']//input[3]")
	private static WebElement baseCurrencyStanadrdfields_OkBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[4]")
	private static WebElement baseCurrencyStanadrdfields_CancelBtn;

	@FindBy(xpath = "//div[@id='id_option_search_container']//input[2]")
	private static WebElement baseCurrencydeleteColumnBtn;

	@FindBy(xpath = "//div[@class='row']//input[3]")
	private static WebElement baseCurrencyOkBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[4]")
	private static WebElement baseCurrencyCancelBtn;

	// Grid Fields
	@FindBy(xpath = "//input[@id='ExchangeTable_CurrencyName']")
	private static WebElement gridcurrencyName1Txt;

	@FindBy(xpath = "//td[@id='ExchangeTable_CurrencyName_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement currencyNameSettingsBtn;

	// Pop Up
	@FindBy(xpath = "//h4[@id='ExchangeTable_CurrencyName_customize_popup_heading']")
	private static WebElement currencyName_CustomizeDisplayColumnsLabel;

	@FindBy(xpath = "//div[@id='ExchangeTable_CurrencyName_customize_popup_container']")
	private static WebElement currencyNameContainerTxt;

	@FindBy(xpath = "//div[@id='ExchangeTable_CurrencyName_customize_popup_footer']//input[1]")
	private static WebElement currencyNameStanadrdfieldsBtn;

	@FindBy(xpath = "//select[@id='ExchangeTable_CurrencyName_customize_popup_standardfields_list']")
	private static WebElement currencyNameStanadrdfields_Fielddropdown;

	@FindBy(xpath = "//input[@id='ExchangeTable_CurrencyName_customize_popup_standardfields_header']")
	private static WebElement currencyNameStanadrdfields_headerTxt;

	@FindBy(xpath = "//select[@id='ExchangeTable_CurrencyName_customize_popup_standardfields_alignment']")
	private static WebElement currencyNameStanadrdfields_Allignmentdropdown;

	@FindBy(xpath = "//input[@id='ExchangeTable_CurrencyName_customize_popup_standardfields_width']")
	private static WebElement currencyNameStanadrdfields_WidthTxt;

	@FindBy(xpath = "//table[@id='ExchangeTable']//input[3]")
	private static WebElement currencyNameStanadrdfields_OkBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[4]")
	private static WebElement currencyNameStanadrdfields_CancelBtn;

	@FindBy(xpath = "//div[@id='ExchangeTable_CurrencyName_search_container']//input[2]")
	private static WebElement currencyNamedeleteColumnBtn;

	@FindBy(xpath = "//table[@id='ExchangeTable']//input[3]")
	private static WebElement currencyNameOkBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[4]")
	private static WebElement currencyNameCancelBtn;

	@FindBy(xpath = "//input[@id='EffectiveDate']")
	private static WebElement withEffectiveDateTxt;

	@FindBy(xpath = "//*[@id='EffectiveDate_input_image']/span")
	private static WebElement dOne;

	@FindBy(xpath = "//*[@id='EffectiveDate_day_today']/td/span[1]")
	private static WebElement dTwo;

	@FindBy(xpath = "//input[@id='ExchangeTable_DefinedAs']")
	private static WebElement gridDefineAsTxt;

	@FindBy(xpath = "//input[@id='ExchangeTable_Rate']")
	private static WebElement gridRateTxt;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-2']")
	private static WebElement gridDefineAs1Txt;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-3']")
	private static WebElement gridRate1Txt;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-4']")
	private static WebElement gridDescription1Txt;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-1']")
	private static WebElement gridcurrencyName2Txt;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-2']")
	private static WebElement gridDefineAs2Txt;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-3']")
	private static WebElement gridRate2Txt;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-4']")
	private static WebElement gridDescription2Txt;
	
	@FindBy(xpath = "//td[@id='ExchangeTable_col_3-1']")
	private static WebElement gridcurrencyName3Txt;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_3-2']")
	private static WebElement gridDefineAs3Txt;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_3-3']")
	private static WebElement gridRate3Txt;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_3-4']")
	private static WebElement gridDescription3Txt;

	@FindBy(xpath = "//span[@id='exchange_currency']")
	private static WebElement exchangeRateIcon;

	@FindBy(xpath = "//div[contains(text(),'Clear')]")
	private static WebElement clearIcon;

	
	@FindBy(xpath = "//span[@id='btnSave']")
	private static WebElement saveIcon;

	@FindBy(xpath = "//span[@id='btnClose']")
	private static WebElement cancelIcon;

	// Exchange Rate Page

	// Header Fields
	@FindBy(xpath = "//i[@class='icon-font7 icon-delete']")
	private static WebElement exchangeRateDefinitionDeleteIcon;

	@FindBy(xpath = " //span[@id='closeExchangeRate']//i[@class='icon-font7 icon-close']")
	private static WebElement exchangeRateDefinitionCloseIcon;

	// Exchange Rate History
	@FindBy(xpath = "//div[@class='navText']//span[contains(text(),'Exchange Rate History')]")
	private static WebElement exchangeRateHistoryLabel;

	@FindBy(xpath = "//input[@id='id_option']")
	private static WebElement baseCurrencyInExchangeRateHistory;

	@FindBy(xpath = "//*[@id='DateOption']")
	private static WebElement dateOptionDropdown;

	@FindBy(xpath = "//*[@id='FromDate']")
	private static WebElement fromDateTxt;

	@FindBy(xpath = "//*[@id='ToDate']")
	private static WebElement toDateTxt;

	@FindBy(xpath = "//i[@class='icon-font7 icon-refresh']")
	private static WebElement loadIcon;

	@FindBy(xpath = "//i[@class='icon-font7 icon-clear']")
	private static WebElement exchangeRateHistoryclearIcon;

	// Grid
	@FindBy(xpath = "//input[@id='chkSelectAll']")
	private static WebElement toSelectAllChkBox;

	@FindBy(xpath = "//input[@id='ExchangeTable_chk0']")
	private static WebElement row1Chkbox;

	@FindBy(xpath = "//input[@id='//td[@id='ExchangeTable_col_1-2']")
	private static WebElement selectCurrency1;

	// PopUp
	@FindBy(xpath = "//td[@id='ExchangeTable_CurrencyName_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement selectCurrencySettingsBtn;

	@FindBy(xpath = "//h4[@id='ExchangeTable_CurrencyName_customize_popup_heading']")
	private static WebElement selectCurrency_CustomizeDisplayColumnsLabel;

	@FindBy(xpath = "//div[@id='ExchangeTable_CurrencyName_customize_popup_container']")
	private static WebElement isoCurrencysselectCurrencysCodeContainerTxt;

	@FindBy(xpath = "//div[@id='ExchangeTable_CurrencyName_customize_popup_footer']//input[1]")
	private static WebElement selectCurrencyStanadrdfieldsBtn;

	@FindBy(xpath = "//select[@id='ExchangeTable_CurrencyName_customize_popup_standardfields_list']")
	private static WebElement selectCurrencyStanadrdfields_Fielddropdown;

	@FindBy(xpath = "//input[@id='ExchangeTable_CurrencyName_customize_popup_standardfields_header']")
	private static WebElement selectCurrencyStanadrdfields_headerTxt;

	@FindBy(xpath = "//select[@id='ExchangeTable_CurrencyName_customize_popup_standardfields_alignment']")
	private static WebElement selectCurrencyStanadrdfields_Allignmentdropdown;

	@FindBy(xpath = "//input[@id='ExchangeTable_CurrencyName_customize_popup_standardfields_width']")
	private static WebElement selectCurrencyStanadrdfields_WidthTxt;

	@FindBy(xpath = "//section[@id='page_Content']//input[3]")
	private static WebElement selectCurrencyStanadrdfields_OkBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[4]")
	private static WebElement selectCurrencyStanadrdfields_CancelBtn;

	@FindBy(xpath = "//div[@id='ExchangeTable_CurrencyName_search_container']//input[2]")
	private static WebElement selectCurrencydeleteColumnBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[3]")
	private static WebElement selectCurrencyOkBtn;

	@FindBy(xpath = "//section[@id='page_Content']//input[4]")
	private static WebElement selectCurrencyCancelBtn;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-3']")
	private static WebElement DefineAs1Txt;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr/td[3]")
	private static WebElement valueUSD;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr/td[4]")
	private static WebElement valueAED;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-2']")
	private static WebElement selCurrencyOne;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-2']")
	private static WebElement selCurrecnyTwo;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-3']")
	private static WebElement defCurrecnyOne;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-3']")
	private static WebElement defCurrecnyTwo;

	// Grid Second Row
	@FindBy(xpath = "//input[@id='ExchangeTable_chk1']")
	private static WebElement Row2Chkbox;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-2']")
	private static WebElement SelectCurrency2;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-3']")
	private static WebElement DefineAs2Txt;

	@FindBy(xpath = "//i[@class='icon-font6 icon-close']")
	private static WebElement exchangeRateHistoryCloseIcon;

	@FindBy(xpath = "//span[contains(text(),'Graph')]")
	private static WebElement graphTab;

	@FindBy(xpath = "//span[@class='font-5'][contains(text(),'Table')]")
	private static WebElement tableTab;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-0']")
	private static WebElement selectFirstRowIndex;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-0']")
	private static WebElement selectSecondRowIndex;

	@FindBy(xpath = "//div[contains(text(),'Delete Row')]")
	private static WebElement selectDeleteOption;

	@FindBy(xpath = "//span[@id='DeleteData']")
	private static WebElement exchnageRateDeleteOption;

	// Vouchers Home Page Ribbon Control

	@FindBy(xpath = "//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
	private static WebElement newBtn;

	@FindBy(xpath = "//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
	private static WebElement editBtn;

	@FindBy(xpath = "//span[@class='icon-print icon-font6']")
	private static WebElement printBtn;

	@FindBy(xpath = "//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
	private static WebElement transHomePageDeleteBtn;

	@FindBy(xpath = "//span[@class='icon-authorize icon-font6']")
	private static WebElement authorizeBtn;

	@FindBy(xpath = "//span[@class='icon-suspend icon-font6']")
	private static WebElement suspendBtn;

	@FindBy(xpath = "//span[@class='icon-reject2 icon-font6']")
	private static WebElement rejectBtn;

	@FindBy(xpath = "//span[@class='icon-cheque icon-font6']")
	private static WebElement chequeReturnBtn;

	@FindBy(xpath = "//span[@class='icon-printbarcode icon-font6']")
	private static WebElement printBarCodeBtn;

	@FindBy(xpath = "//span[@class='icon-convert icon-font6']")
	private static WebElement convertBtn;

	@FindBy(xpath = "//span[@class='icon-export icon-font6']")
	private static WebElement exportToXMLBtn;

	@FindBy(xpath = "//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
	private static WebElement settingsBtn;

	@FindBy(xpath = "//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")
	private static WebElement homeCloseBtn;

	// Vouchers Home Page Options
	@FindBy(xpath = "//a[@class='transaction_viewname_anchor theme_color-inverse font-5']")
	private static WebElement allVouchersOption;

	@FindBy(xpath = "//a[@class='transaction_viewname_anchor font-5']")
	private static WebElement pendingBillsOption;

	@FindBy(xpath = "//input[@id='SelectDefaultView']")
	private static WebElement selectDefaultViewChkBox;

	@FindBy(xpath = "//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
	private static WebElement sortingBtn;

	@FindBy(xpath = "//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
	private static WebElement createViewBtn;

	@FindBy(xpath = "//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
	private static WebElement customizeBtn;

	@FindBy(xpath = "//span[@class='icon-filter icon-font6']")
	private static WebElement filterBtn;

	@FindBy(xpath = "//span[@id='reportRefresh']")
	private static WebElement refreshBtn;

	@FindBy(xpath = "//i[@class='icon-font6 icon-export']")
	private static WebElement exportBtn;

	// Options Button (Display Option)
	@FindBy(xpath = "//span[@id='transOptions']")
	private static WebElement optionsBtn;

	@FindBy(xpath = "//a[contains(text(),'Auto Adjust Width')]")
	private static WebElement autoAdjustWidthBtn;

	@FindBy(xpath = "//a[contains(text(),'Fit To Screen')]")
	private static WebElement fitToScreenBtn;

	@FindBy(xpath = "//a[contains(text(),'Normal')]")
	private static WebElement normalBtn;

	// Voucher Home Page Grid Header Columns
	@FindBy(xpath = "//input[@id='HeaderChkBox']")
	private static WebElement grid_HeaderChkBox;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[3]")
	private static WebElement grid_Header_Date;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[4]")
	private static WebElement grid_Header_VoucherNumber;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[5]")
	private static WebElement grid_Header_CreatedBy;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[6]")
	private static WebElement grid_Header_ModifiedBy;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[7]")
	private static WebElement grid_Header_CreatedDate;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[8]")
	private static WebElement grid_Header_ModifiedDate;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[9]")
	private static WebElement grid_Header_CreatedTime;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[10]")
	private static WebElement grid_Header_ModifiedTime;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[11]")
	private static WebElement grid_Header_Suspended;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[12]")
	private static WebElement grid_Header_Cancelled;

	@FindBy(xpath = "//*[@id='tblHeadTransRenderRow']/th[13]")
	private static WebElement grid_Header_AuthorizationStatus;

	// Grid Voucher DetailsBtn
	@FindBy(xpath = "//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
	private static WebElement grid_VoucherDetailsBtn1;

	@FindBy(xpath = "//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
	private static WebElement grid_VoucherDetailsBtn2;

	// Grid CheckBox 1 And 2

	@FindBy(xpath = "//tr[@id='trRender_1']//td//input")
	private static WebElement grid_ChkBox1;

	@FindBy(xpath = "//tr[@id='trRender_2']//td//input")
	private static WebElement grid_ChkBox2;

	@FindBy(xpath = "//tr[@id='trRender_3']//td//input")
	private static WebElement grid_ChkBox3;

	@FindBy(xpath = "//tr[@id='trRender_4']//td//input")
	private static WebElement grid_ChkBox4;

	// Vouchers Home Page Footer
	@FindBy(xpath = "//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
	private static WebElement searchField;

	@FindBy(xpath = "//button[@id='frstPage']")
	private static WebElement firstPageBtn;

	@FindBy(xpath = "//button[@id='id_previousPage']")
	private static WebElement previousPageBtn;

	@FindBy(xpath = "//button[@id='id_pagenumber']")
	private static WebElement currentPageNo;

	@FindBy(xpath = "//button[@id='id_nextPage']")
	private static WebElement nextPageBtn;

	@FindBy(xpath = "//button[@id='lstPage']")
	private static WebElement lastPageBtn;

	// Vouchers Entry Page Ribbon Control Options
	@FindBy(xpath = "//span[@class='icon-scroll icon-font6']")
	private static WebElement freeFlowBtn;

	@FindBy(xpath = "//span[@class='icon-header icon-font6']")
	private static WebElement jumpToHeaderSectionBtn;

	@FindBy(xpath = "//span[@class='icon-panel icon-font6']")
	private static WebElement jumpToBodySectionBtn;

	@FindBy(xpath = "//span[@class='icon-footer icon-font6']")
	private static WebElement jumpToFooterBtn;

	@FindBy(xpath = "//*[@id='id_transactionentry_new']")
	private static WebElement new_newBtn;

	@FindBy(xpath = "//*[@id='id_transactionentry_save']")
	private static WebElement transSaveBtn;

	@FindBy(xpath = "//*[@id='id_transactionentry_previous']")
	private static WebElement previousBtn;

	@FindBy(xpath = "//*[@id='id_transactionentry_next']")
	private static WebElement nextBtn;

	@FindBy(xpath = "//*[@id='id_transactionentry_print']")
	private static WebElement new_PrintBtn;

	@FindBy(xpath = "//*[@id='id_transactionentry_suspend']")
	private static WebElement new_SuspendBtn;

	@FindBy(xpath = "//*[@id='id_transactionentry_close']")
	private static WebElement new_CloseBtn;

	@FindBy(xpath = "//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
	private static WebElement new_DeleteBtn;

	@FindBy(xpath = "//span[@class='icon-menu icon-font4']")
	private static WebElement toggleBtn;

	@FindBy(xpath = "//*[@id='id_transactionentry_copydocument']")
	private static WebElement copyDocumentOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_copytoclipboard']")
	private static WebElement copyToClipBoardOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_pastefromclipboard']")
	private static WebElement pasteFromClipBoardOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_raisechequereturn']")
	private static WebElement raiseCheckReturnOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_addtostock']")
	private static WebElement addToStockOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_markconvert']")
	private static WebElement markConvertedOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_bominput']")
	private static WebElement bOMinputOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_autoallocate']")
	private static WebElement autoAllocateOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_reverseentry']")
	private static WebElement reverseEntryOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_printbarcode']")
	private static WebElement printBarCodeOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_postingdetails']")
	private static WebElement postingDetailsOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_exporttoxml']")
	private static WebElement exportToXMLOption;

	@FindBy(xpath = "//*[@id='id_transactionentry_settings']")
	private static WebElement settingsOption;

	// Voucher Entry Page Header Fields
	@FindBy(xpath = "//input[@id='id_header_1']")
	private static WebElement documentNumberTxt;

	@FindBy(xpath = "//*[@id='id_header_1_input_image']/span")
	private static WebElement documentNumberdropdown_ExpansionBtn;

	@FindBy(xpath = "//input[@id='id_header_2']")
	private static WebElement dateTxt;

	@FindBy(xpath = "//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement dateTxt_CalenderBtn;

	@FindBy(xpath = "//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
	private static WebElement calender_TodayBtn;

	@FindBy(xpath = "//input[@id='id_header_4']")
	private static WebElement caskBankAccountTxt;

	@FindBy(xpath = "//*[@id='id_header_4_input_image']/span")
	private static WebElement caskBankAccount_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_header_4_input_settings']/span")
	private static WebElement cashBankAccount_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_4_customize_popup_container']")
	private static WebElement cashBankAccount_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_4_customize_popup_footer']//input[1]")
	private static WebElement cashBankAccount_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_4_customize_popup_standardfields_list']")
	private static WebElement cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_4_customize_popup_standardfields_header']")
	private static WebElement cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_4_customize_popup_standardfields_alignment']")
	private static WebElement cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_4_customize_popup_standardfields_width']")
	private static WebElement cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement cashBankAccount_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_4_search_container']//input[2]")
	private static WebElement cashBankAccount_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement cashBankAccount_Settings_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement cashBankAccount_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_header_268435459']")
	private static WebElement departmentTxt;

	@FindBy(xpath = "//*[@id='id_header_268435459_input_image']/span")
	private static WebElement department_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_header_268435459_input_settings']/span")
	private static WebElement department_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_268435459_customize_popup_container']")
	private static WebElement department_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
	private static WebElement department_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_268435459_customize_popup_standardfields_list']")
	private static WebElement department_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_268435459_customize_popup_standardfields_header']")
	private static WebElement department_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
	private static WebElement department_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_268435459_customize_popup_standardfields_width']")
	private static WebElement department_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement department_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement department_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_268435459_search_container']//input[2]")
	private static WebElement department_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement department_Settings_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement department_Settings_CancelBtn;

	@FindBy(xpath = "//*[@id='id_header_6']")
	private static WebElement maturityDateTxt;

	@FindBy(xpath = "//*[@id='id_header_6_input_image']/span']")
	private static WebElement maturityDateTxt_CalenderBtn;

	@FindBy(xpath = "//input[@id='id_header_3']")
	private static WebElement purchaseAccountTxt;

	@FindBy(xpath = "//*[@id='id_header_3_input_image']/span")
	private static WebElement purchaseAccount_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_header_3_input_settings']/span")
	private static WebElement purchaseAccount_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_3_customize_popup_container']")
	private static WebElement purchaseAccount_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_3_customize_popup_footer']//input[1]")
	private static WebElement purchaseAccount_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_3_customize_popup_standardfields_list']")
	private static WebElement purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_3_customize_popup_standardfields_header']")
	private static WebElement purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_3_customize_popup_standardfields_alignment']")
	private static WebElement purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_3_customize_popup_standardfields_width']")
	private static WebElement purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement purchaseAccount_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_3_search_container']//input[2]")
	private static WebElement purchaseAccount_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement purchaseAccount_Settings_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement purchaseAccount_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_header_4']")
	private static WebElement vendorAccountTxt;

	@FindBy(xpath = "//*[@id='id_header_4_input_image']/span")
	private static WebElement vendorAccount_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_header_4_input_settings']/span")
	private static WebElement vendorAccount_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_4_customize_popup_container']")
	private static WebElement vendorAccount_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_4_customize_popup_footer']//input[1]")
	private static WebElement vendorAccount_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_4_customize_popup_standardfields_list']")
	private static WebElement vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_4_customize_popup_standardfields_header']")
	private static WebElement vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_4_customize_popup_standardfields_alignment']")
	private static WebElement vendorAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_4_customize_popup_standardfields_width']")
	private static WebElement vendorAccount_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement vendorAccount_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement vendorAccount_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_4_search_container']//input[2]")
	private static WebElement vendorAccount_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement vendorAccount_Settings_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement vendorAccount_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_header_3']")
	private static WebElement salesAccountTxt;

	@FindBy(xpath = "//*[@id='id_header_3_input_image']/span")
	private static WebElement salesAccountExpansionBtn;

	@FindBy(xpath = "//*[@id='id_header_3_input_settings']/span")
	private static WebElement salesAccount_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_3_customize_popup_container']")
	private static WebElement salesAccount_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_3_customize_popup_footer']//input[1]")
	private static WebElement salesAccount_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_3_customize_popup_standardfields_list']")
	private static WebElement salesAccount_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_3_customize_popup_standardfields_header']")
	private static WebElement salesAccount_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_3_customize_popup_standardfields_alignment']")
	private static WebElement salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_3_customize_popup_standardfields_width']")
	private static WebElement salesAccount_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement salesAccount_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement salesAccount_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_3_search_container']//input[2]")
	private static WebElement salesAccount_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement salesAccount_Settings_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement salesAccount_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_header_4']")
	private static WebElement customerAccountTxt;

	@FindBy(xpath = "//*[@id='id_header_4_input_image']/span")
	private static WebElement customerAccount_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_header_4_input_settings']/span")
	private static WebElement customerAccount_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_4_customize_popup_container']")
	private static WebElement customerAccount_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_4_customize_popup_footer']//input[1]")
	private static WebElement customerAccount_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_4_customize_popup_standardfields_list']")
	private static WebElement customerAccount_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_4_customize_popup_standardfields_header']")
	private static WebElement customerAccount_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_4_customize_popup_standardfields_alignment']")
	private static WebElement customerAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_4_customize_popup_standardfields_width']")
	private static WebElement customerAccount_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement customerAccount_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement customerAccount_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_4_search_container']//input[2]")
	private static WebElement customerAccount_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement customerAccount_Settings_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement customerAccount_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_header_12']")
	private static WebElement accountTxt;

	@FindBy(xpath = "//*[@id='id_header_12_input_image']/span")
	private static WebElement account_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_header_4_input_settings']/span")
	private static WebElement account_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_4_customize_popup_container']")
	private static WebElement account_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_4_customize_popup_footer']//input[1]")
	private static WebElement account_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_4_customize_popup_standardfields_list']")
	private static WebElement account_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_4_customize_popup_standardfields_header']")
	private static WebElement account_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_4_customize_popup_standardfields_alignment']")
	private static WebElement account_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_4_customize_popup_standardfields_width']")
	private static WebElement account_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement account_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement account_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_4_search_container']//input[2]")
	private static WebElement account_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement account_Settings_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement account_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_header_31']")
	private static WebElement issuesReceiptsTxt;

	@FindBy(xpath = "//input[@id='id_header_268435460']")
	private static WebElement wareHouseTxt;

	@FindBy(xpath = "//*[@id='id_header_268435460_input_image']/span")
	private static WebElement wareHouse_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_header_268435460_input_settings']/span")
	private static WebElement wareHouse_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_268435460_customize_popup_container']")
	private static WebElement wareHouse_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
	private static WebElement wareHouse_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_268435460_customize_popup_standardfields_list']")
	private static WebElement wareHouse_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_268435460_customize_popup_standardfields_header']")
	private static WebElement wareHouse_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
	private static WebElement wareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_268435460_customize_popup_standardfields_width']")
	private static WebElement wareHouse_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement wareHouse_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement wareHouse_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_268435460_search_container']//input[2]")
	private static WebElement wareHouse_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement wareHouse_Settings_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement wareHouse_Settings_CancelBtn;

	@FindBy(xpath = "//span[contains(text(),'sName')]")
	private static WebElement customize_sName;

	@FindBy(xpath = "//span[@class='vcenter'][contains(text(),'Code')]")
	private static WebElement customize_sCode;

	@FindBy(xpath = "//span[contains(text(),'Alias')]")
	private static WebElement customize_Alias;

	@FindBy(xpath = "//span[@class='vcenter'][contains(text(),'Group')]")
	private static WebElement customize_bGroup;

	@FindBy(xpath = "//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
	private static WebElement customize_Balance;

	@FindBy(xpath = "//input[@id='id_header_67108920']")
	private static WebElement appropriateBasedOndropdown;

	@FindBy(xpath = "//input[@id='id_header_67108921']")
	private static WebElement additionalValueTxt;

	@FindBy(xpath = "//input[@id='id_header_21']")
	private static WebElement raiseReceiptsChkBox;

	@FindBy(xpath = "//input[@id='id_header_67108865']")
	private static WebElement receipts_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108868']")
	private static WebElement payments_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108871']")
	private static WebElement pettyCash_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108874']")
	private static WebElement postDatedReceipts_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108865']")
	private static WebElement postDatedPayments_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108880']")
	private static WebElement purchaseVouchers_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108881']")
	private static WebElement purchaseReturns_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108884']")
	private static WebElement salesInvoice_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108886']")
	private static WebElement salesOrder_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108928']")
	private static WebElement salesInvoiceNewNarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108885']")
	private static WebElement salesReturns_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108913']")
	private static WebElement cashSales_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108914']")
	private static WebElement hirePurchaseSales_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108890']")
	private static WebElement journalEntries_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108916']")
	private static WebElement forexJV_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108910']")
	private static WebElement interDepartmentalJV_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108888']")
	private static WebElement nonStandardJournalEntries_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108892']")
	private static WebElement debitNotes_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108911']")
	private static WebElement debitNotesLineWise_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108893']")
	private static WebElement creditNotes_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108912']")
	private static WebElement creditNotesLineWisePayroll_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108894']")
	private static WebElement openingBalance_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108891']")
	private static WebElement fixedAssetDepreciationVoucher_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108909']")
	private static WebElement requestForQuote_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108903']")
	private static WebElement purchasesQuotations_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108882']")
	private static WebElement purchasesOrders_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108882']")
	private static WebElement materialReceiptsNotes_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108904']")
	private static WebElement salesQuotationss_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108887']")
	private static WebElement deliveryNotes_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108917']")
	private static WebElement posSales_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108918']")
	private static WebElement productionOrder_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108886']")
	private static WebElement salesOrders_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108895']")
	private static WebElement shortagesinStock_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108896']")
	private static WebElement excessesinStocks_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108897']")
	private static WebElement stockTransfers_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108898']")
	private static WebElement openingStocks_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108923']")
	private static WebElement openingStocksNEW_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108908']")
	private static WebElement materialRequisition_NarrationTxt;

	@FindBy(xpath = "//input[@id='id_header_67108866']")
	private static WebElement receipts_ChequeNoTxt;

	@FindBy(xpath = "//input[@id='id_header_67108869']")
	private static WebElement payments_ChequeNoTxt;

	@FindBy(xpath = "//input[@id='id_header_67108872']")
	private static WebElement pettyCash_ChequeNoTxt;

	@FindBy(xpath = "//input[@id='id_header_67108875']")
	private static WebElement postDatedReceipts_ChequeNoTxt;

	@FindBy(xpath = "//input[@id='id_header_67108878']")
	private static WebElement postDatedPayments_ChequeNoTxt;

	// Voucher Entry Page Body Fields

	@FindBy(xpath = "//input[@id='id_body_536870916']")
	private static WebElement pvWareHouseTxt;

	@FindBy(xpath = "//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
	private static WebElement pvWareHouse_ExpansionBtn;

	@FindBy(xpath = "//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement pvWareHouse_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_body_536870916_customize_popup_container']")
	private static WebElement pvWareHouse_Settings_Container;

	@FindBy(xpath = "//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
	private static WebElement pvWareHouse_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_body_536870916_customize_popup_standardfields_list']")
	private static WebElement pvWareHouse_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_body_536870916_customize_popup_standardfields_header']")
	private static WebElement pvWareHouse_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
	private static WebElement pvWareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_body_536870916_customize_popup_standardfields_width']")
	private static WebElement pvWareHouse_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement pvWareHouse_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement pvWareHouse_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_body_536870916_search_container']//input[2]")
	private static WebElement pvWareHouse_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[@class='panel']//input[3]")
	private static WebElement pvWareHouse_Settings_OkBtn;

	@FindBy(xpath = "//div[@class='panel']//input[4]")
	private static WebElement pvWareHouse_Settings_CancelBtn;

	// Grid Elements
	@FindBy(xpath = "//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement grid_Header_Account;

	@FindBy(xpath = "//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement grid_Header_Item;

	@FindBy(xpath = "//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement grid_Header_DebitAC;

	@FindBy(xpath = "//th[@id='id_transaction_entry_detail_table_control_heading_2']")
	private static WebElement grid_Header_CreditAC;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
	private static WebElement firstRowIndex;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
	private static WebElement secondRowIndex;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
	private static WebElement thirdRowIndex;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[1]")
	private static WebElement fourthRowIndex;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[1]")
	private static WebElement fifthRowIndex;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[1]")
	private static WebElement sixthRowIndex;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[1]")
	private static WebElement seventhRowIndex;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[1]")
	private static WebElement eigthRowIndex;

	@FindBy(xpath = "//span[@class='icon-delete icon-font8']")
	private static WebElement deleteRowBtn;

	@FindBy(xpath = "//span[@class='icon-insertrow icon-font8']")
	private static WebElement insertRowBtn;

	@FindBy(xpath = "//span[@class='icon-selectall icon-font8']")
	private static WebElement selectRowBtn;

	@FindBy(xpath = "//span[@class='icon-unselectall1 icon-font8']")
	private static WebElement unSelectRowBtn;

	@FindBy(xpath = "//span[@class='icon-clone icon-font8']")
	private static WebElement duplicateRowBtn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
	private static WebElement select1stRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
	private static WebElement select1stRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
	private static WebElement select1stRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
	private static WebElement select1stRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
	private static WebElement select1stRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
	private static WebElement select1stRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
	private static WebElement select1stRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
	private static WebElement select1stRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
	private static WebElement select1stRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
	private static WebElement select1stRow_10thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
	private static WebElement select1stRow_11thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
	private static WebElement select1stRow_12thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
	private static WebElement select1stRow_13thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
	private static WebElement select1stRow_14thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
	private static WebElement select1stRow_15thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
	private static WebElement select1stRow_16thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
	private static WebElement select2ndRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
	private static WebElement select2ndRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
	private static WebElement select2ndRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
	private static WebElement select2ndRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
	private static WebElement select2ndRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
	private static WebElement select2ndRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
	private static WebElement select2ndRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
	private static WebElement select2ndRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
	private static WebElement select2ndRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
	private static WebElement select2ndRow_11thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
	private static WebElement select2ndRow_12thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
	private static WebElement select2ndRow_10thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
	private static WebElement select2ndRow_14thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
	private static WebElement select2ndRow_15thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
	private static WebElement select2ndRow_16thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
	private static WebElement select3rdRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
	private static WebElement select3rdRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
	private static WebElement select3rdRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
	private static WebElement select3rdRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
	private static WebElement select3rdRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
	private static WebElement select3rdRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
	private static WebElement select3rdRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
	private static WebElement select3rdRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
	private static WebElement select3rdRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
	private static WebElement select3rdRow_10thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
	private static WebElement select3rdRow_11thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
	private static WebElement select3rdRow_12thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
	private static WebElement select3rdRow_13thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
	private static WebElement select3rdRow_14thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
	private static WebElement select3rdRow_15thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
	private static WebElement select3rdRow_16thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
	private static WebElement select4thRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
	private static WebElement select4thRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
	private static WebElement select4thRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
	private static WebElement select4thRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
	private static WebElement select4thRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
	private static WebElement select4thRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
	private static WebElement select4thRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
	private static WebElement select4thRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
	private static WebElement select4thRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
	private static WebElement select4thRow_10thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
	private static WebElement select4thRow_11thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
	private static WebElement select4thRow_12thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
	private static WebElement select4thRow_13thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
	private static WebElement select4thRow_14thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
	private static WebElement select4thRow_15thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
	private static WebElement select4thRow_16thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
	private static WebElement select5thRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
	private static WebElement select5thRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
	private static WebElement select5thRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
	private static WebElement select5thRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
	private static WebElement select5thRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
	private static WebElement select5thRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
	private static WebElement select5thRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
	private static WebElement select5thRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
	private static WebElement select5thRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[11]")
	private static WebElement select5thRow_10thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[12]")
	private static WebElement select5thRow_11thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[13]")
	private static WebElement select5thRow_12thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[14]")
	private static WebElement select5thRow_13thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[15]")
	private static WebElement select5thRow_14thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[16]")
	private static WebElement select5thRow_15thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[17]")
	private static WebElement select5thRow_16thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
	private static WebElement select6thRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
	private static WebElement select6thRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
	private static WebElement select6thRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
	private static WebElement select6thRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
	private static WebElement select6thRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
	private static WebElement select6thRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
	private static WebElement select6thRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
	private static WebElement select6thRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
	private static WebElement select6thRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[11]")
	private static WebElement select6thRow_10thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[12]")
	private static WebElement select6thRow_11thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[13]")
	private static WebElement select6thRow_12thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[14]")
	private static WebElement select6thRow_13thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[15]")
	private static WebElement select6thRow_14thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[16]")
	private static WebElement select6thRow_15thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[17]")
	private static WebElement select6thRow_16thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
	private static WebElement select7thRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
	private static WebElement select7thRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
	private static WebElement select7thRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
	private static WebElement select7thRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
	private static WebElement select7thRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
	private static WebElement select7thRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
	private static WebElement select7thRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
	private static WebElement select7thRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
	private static WebElement select7thRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
	private static WebElement select8thRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
	private static WebElement select8thRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
	private static WebElement select8thRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
	private static WebElement select8thRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
	private static WebElement select8thRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
	private static WebElement select8thRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
	private static WebElement select8thRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
	private static WebElement select8thRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
	private static WebElement select8thRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
	private static WebElement select9thRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
	private static WebElement select9thRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
	private static WebElement select9thRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
	private static WebElement select9thRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
	private static WebElement select9thRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
	private static WebElement select9thRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
	private static WebElement select9thRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
	private static WebElement select9thRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
	private static WebElement select9thRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
	private static WebElement select10thRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
	private static WebElement select10thRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
	private static WebElement select10thRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
	private static WebElement select10thRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
	private static WebElement select10thRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
	private static WebElement select10thRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
	private static WebElement select10thRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
	private static WebElement select10thRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
	private static WebElement select10thRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
	private static WebElement select11thRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
	private static WebElement select11thRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
	private static WebElement select11thRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
	private static WebElement select11thRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
	private static WebElement select11thRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
	private static WebElement select11thRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
	private static WebElement select11thRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
	private static WebElement select11thRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
	private static WebElement select11thRow_9thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
	private static WebElement select12thRow_1stColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
	private static WebElement select12thRow_2ndColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
	private static WebElement select12thRow_3rdColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
	private static WebElement select12thRow_4thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
	private static WebElement select12thRow_5thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
	private static WebElement select12thRow_6thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
	private static WebElement select12thRow_7thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
	private static WebElement select12thRow_8thColumn;

	@FindBy(xpath = "//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
	private static WebElement select12thRow_9thColumn;

	@FindBy(xpath = "//input[@id='id_body_12']")
	private static WebElement enter_AccountTxt;

	@FindBy(xpath = "//*[@id='id_body_12_input_image']/span")
	private static WebElement enter_Account_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_body_12_input_settings']/span")
	private static WebElement enter_Account_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_12_customize_popup_container']")
	private static WebElement enter_Account_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_12_customize_popup_footer']//input[1]")
	private static WebElement enter_Account_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_12_customize_popup_standardfields_list']")
	private static WebElement enter_Account_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_12_customize_popup_standardfields_header']")
	private static WebElement enter_Account_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_12_customize_popup_standardfields_alignment']")
	private static WebElement enter_Account_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_12_customize_popup_standardfields_width']")
	private static WebElement enter_Account_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement enter_Account_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement enter_Account_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_12_search_container']//input[2]")
	private static WebElement enter_Account_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement enter_Account_Settings_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement enter_Account_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_body_16']")
	private static WebElement enter_Amount;

	@FindBy(xpath = "//textarea[@id='id_body_16777219']")
	private static WebElement enter_Receipts_Remarks;

	@FindBy(xpath = "//textarea[@id='id_body_16777222']")
	private static WebElement enter_Payments_Remarks;

	@FindBy(xpath = "//textarea[@id='id_body_16777225']")
	private static WebElement enter_PettyCash_Remarks;

	@FindBy(xpath = "//textarea[@id='id_body_16777228']")
	private static WebElement enter_PostDatedReceipts_Remarks;

	@FindBy(xpath = "//textarea[@id='id_body_16777231']")
	private static WebElement enter_PostDatedPaymentss_Remarks;

	@FindBy(xpath = "//input[@id='id_body_23']")
	private static WebElement enter_ItemTxt;

	@FindBy(xpath = "//*[@id='id_body_23_input_image']/span")
	private static WebElement item_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_body_23_input_settings']/span")
	private static WebElement item_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_body_23_customize_popup_container']")
	private static WebElement item_Settings_Container;

	@FindBy(xpath = "//div[@id='id_body_23_customize_popup_footer']//input[1]")
	private static WebElement item_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_body_23_customize_popup_standardfields_list']")
	private static WebElement item_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_body_23_customize_popup_standardfields_header']")
	private static WebElement item_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_body_23_customize_popup_standardfields_alignment']")
	private static WebElement item_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_body_23_customize_popup_standardfields_width']")
	private static WebElement item_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement item_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement item_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_body_23_search_container']//input[2]")
	private static WebElement item_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement item_Settings_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement item_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_body_24']")
	private static WebElement enter_UnitTxt;

	@FindBy(xpath = "//*[@id='id_body_24_input_image']/span")
	private static WebElement unit_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_body_24_input_settings']/span")
	private static WebElement unit_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_body_24_customize_popup_container']")
	private static WebElement unit_Settings_Container;

	@FindBy(xpath = "//div[@id='id_body_24_customize_popup_footer']//input[1]")
	private static WebElement unit_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_body_24_customize_popup_standardfields_list']")
	private static WebElement unit_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_body_24_customize_popup_standardfields_header']")
	private static WebElement unit_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_body_24_customize_popup_standardfields_alignment']")
	private static WebElement unit_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_body_24_customize_popup_standardfields_width']")
	private static WebElement unit_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement unit_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement unit_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_body_24_search_container']//input[2]")
	private static WebElement unit_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement unit_Settings_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement unit_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_body_26']")
	private static WebElement enter_Quantity;

	@FindBy(xpath = "//input[@id='id_body_27']")
	private static WebElement enter_Rate;

	@FindBy(xpath = "//input[@id='id_body_28']")
	private static WebElement enter_Gross;

	@FindBy(xpath = "//input[@id='id_body_13']")
	private static WebElement enter_Batch;

	@FindBy(xpath = "//input[@id='id_body_12']")
	private static WebElement enter_DebitACTxt;

	@FindBy(xpath = "//*[@id='id_body_12_input_image']/span")
	private static WebElement enter_DebitAC_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_body_12_input_settings']/span")
	private static WebElement enter_DebitAC_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_12_customize_popup_container']")
	private static WebElement enter_DebitAC_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_12_customize_popup_footer']//input[1]")
	private static WebElement enter_DebitAC_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_12_customize_popup_standardfields_list']")
	private static WebElement enter_DebitAC_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_12_customize_popup_standardfields_header']")
	private static WebElement enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_12_customize_popup_standardfields_alignment']")
	private static WebElement enter_DebitAC_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_12_customize_popup_standardfields_width']")
	private static WebElement enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_12_search_container']//input[2]")
	private static WebElement enter_DebitAC_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement enter_DebitAC_Settings_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement enter_DebitAC_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_body_39']")
	private static WebElement enter_CreditACTxt;

	@FindBy(xpath = "//*[@id='id_body_39_input_image']/span")
	private static WebElement enter_CreditAC_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_body_39_input_settings']/span")
	private static WebElement enter_CreditAC_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_39_customize_popup_container']")
	private static WebElement enter_CreditAC_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_39_customize_popup_footer']//input[1]")
	private static WebElement enter_CreditAC_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_39_customize_popup_standardfields_list']")
	private static WebElement enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_39_customize_popup_standardfields_header']")
	private static WebElement enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_39_customize_popup_standardfields_alignment']")
	private static WebElement enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_39_customize_popup_standardfields_width']")
	private static WebElement enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_39_search_container']//input[2]")
	private static WebElement enter_CreditAC_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement enter_CreditAC_Settings_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement enter_CreditAC_Settings_CancelBtn;

	@FindBy(xpath = "//input[@id='id_body_18']")
	private static WebElement enter_DebitTxt;

	@FindBy(xpath = "//input[@id='id_body_19']")
	private static WebElement enter_CreditTxt;

	@FindBy(xpath = "//textarea[@id='id_body_16777241']")
	private static WebElement enter_NonStandardJournalEntries_RemarksTxt;

	@FindBy(xpath = "//input[@id='id_body_87']")
	private static WebElement enter_Warehouse2Txt;

	@FindBy(xpath = "//*[@id='id_body_87_input_image']/span")
	private static WebElement enter_Warehouse2_ExpansionBtn;

	@FindBy(xpath = "//*[@id='id_body_87_input_settings']/span")
	private static WebElement enter_Warehouse2_SettingsBtn;

	@FindBy(xpath = "//div[@id='id_header_87_customize_popup_container']")
	private static WebElement enter_WareHouse2_Settings_Container;

	@FindBy(xpath = "//div[@id='id_header_87_customize_popup_footer']//input[1]")
	private static WebElement enter_WareHouse2_Settings_StandardFieldsBtn;

	@FindBy(xpath = "//select[@id='id_header_87_customize_popup_standardfields_list']")
	private static WebElement enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath = "//input[@id='id_header_87_customize_popup_standardfields_header']")
	private static WebElement enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath = "//select[@id='id_header_87_customize_popup_standardfields_alignment']")
	private static WebElement enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath = "//input[@id='id_header_87_customize_popup_standardfields_width']")
	private static WebElement enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath = "//div[@id='id_header_87_search_container']//input[2]")
	private static WebElement enter_WareHouse2_Settings_DeleteColumnBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[3]")
	private static WebElement enter_WareHouse2_Settings_OkBtn;

	@FindBy(xpath = "//div[contains(@class,'panel')]//input[4]")
	private static WebElement enter_WareHouse2_Settings_CancelBtn;

	@FindBy(xpath = "//*[@id='ISOCurrencyCode_input_image']/span")
	private static WebElement isoCurrencyCodeComboboxButton;
	
	@FindBy(xpath = "//input[@id='sFileName1']")
	private static WebElement extraFields_DocumentTab_FileName;

	@FindBy(xpath = "//input[@id='biDocument1']")
	private static WebElement extraFields_DocumentTab_Document;

	@FindBy(xpath = "//tr[1]//td[5]//div[1]//div[1]//div[1]")
	private static WebElement extraFields_DocumentTab_UploadDocument;

	@FindBy(xpath = "//a[@id='SaveImg']")
	private static WebElement extraFields_DocumentTab_SaveDocument;

	@FindBy(xpath = "//i[@class='fa fa-eraser RemoveImg']")
	private static WebElement extraFields_DocumentTab_DeleteDocument;

	@FindBy(xpath = "//input[@id='iFileSize1']")
	private static WebElement extraFields_DocumentTab_FileSize;

	// Right Panel InfoSide Bar
	@FindBy(xpath = "//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
	private static WebElement infoSideBarCustomizeBtn;

	@FindBy(xpath = "//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
	private static WebElement customizeCloseBtn;

	@FindBy(xpath = "//div[@id='id_transactionentry_infopanel_customize_container']//li[@id='Dash_Save']")
	private static WebElement customizeSaveBtn;

	@FindBy(xpath = "//div[@id='id_transactionentry_infopanel_customize_container']//li[@id='Dash_Close']")
	private static WebElement customizeCancelBtn;

	@FindBy(xpath = "//input[@id='searchBoxTrans']")
	private static WebElement customizeSearchTxt;

	@FindBy(xpath = "//div[@id='Dashboard_Graph_panelID_Trans']//i[@class='icon-search searchicon']")
	private static WebElement customizeSearchBtn;

	@FindBy(xpath = "//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='g']")
	private static WebElement graphBtn;

	@FindBy(xpath = "//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='Newgraph']")
	private static WebElement newGraphOption;

	@FindBy(xpath = "//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='r']")
	private static WebElement reportBtn;

	@FindBy(xpath = "//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewReport']")
	private static WebElement newReportOption;

	@FindBy(xpath = "//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='i']")
	private static WebElement infoPanelBtn;

	@FindBy(xpath = "//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewInfopanel']")
	private static WebElement newInfoPanelOption;

	@FindBy(xpath = "//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='w']")
	private static WebElement workFlowBtn;

	@FindBy(xpath = "//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewWorkflow']")
	private static WebElement newWorkFlowOption;

	@FindBy(xpath = "//a[@id='DocumentInfoOption']")
	private static WebElement otherDashlets;

	@FindBy(xpath = "//*[@id='id_Dashlet0']")
	private static WebElement documentInfo;

	@FindBy(xpath = "//span[contains(@class,'icon-left-and-right-panel-icon icon-font6 no_padding_left_right')]")
	private static WebElement infoSideBarMinimizeExpandBtn;

	@FindBy(xpath = "//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
	private static WebElement infoSideBarExpandBtn;

	// Footer Section
	@FindBy(xpath = "//label[@id='id_transactionentry_footer_panel_summary_value_net']")
	private static WebElement netLabel;

	@FindBy(xpath = "//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
	private static WebElement netAmount;

	// Login Page
	@FindBy(xpath = "//*[@id='txtUsername']")
	private static WebElement username;

	@FindBy(id = "txtPassword")
	private static WebElement password;

	@FindBy(id = "btnSignin")
	private static WebElement signIn;

	@FindBy(id = "ddlCompany")
	private static WebElement companyDropDownList;

	@FindBy(xpath="//span[@class='hidden-xs']")
	private static WebElement userNameDisplay;

    
   /* @FindBy(xpath="//*[@id='mainHeader_MainLayout']/nav/div/ul/li[7]/a/span")
	private static WebElement userNameDisplay;*/

	@FindBy(xpath = "//*[@id='companyLogo']")
	private static WebElement companyLogo;

	@FindBy(xpath = "//*[@id='ulCompanyDetails_HomePage']/li[1]")
	private static WebElement companyName;

	@FindBy(xpath = "//*[@id='userprofile']/li/span[2]")
	private static WebElement logoutOption;

	@FindBy(xpath = "//input[@id='donotshow']")
	private static WebElement doNotShowCheckbox;

	@FindBy(xpath = "//span[@class='pull-right']")
	private static WebElement closeBtnInDemoPopupScreen;

	    
	// Server Error Elements
	@FindBy(xpath = "//div[@id='id_focus_msgbox_main']")
	private static WebElement serverErrorPopup;

	@FindBy(xpath = "//div[@id='id_focus_msgbox_main']/div[2]/button")
	private static WebElement serverErrorClose;


	
	// Customize Master In Accounts Master Page
	@FindBy(xpath = "//a[@href='#HeaderDetails_0']")
	private static WebElement accountsCustomizeGeneralHeaderDetailsTab;

	@FindBy(xpath = "//a[@href='#HeaderDetails_1']")
	private static WebElement accountsCustomizeSettingsHeaderDetailsTab;

	@FindBy(xpath = "//a[@href='#BodyDetails_1']")
	private static WebElement accountsCustomizeSettingsBodyDetailsTab;

	@FindBy(xpath = "//a[@href='#HeaderDetails_2']")
	private static WebElement accountsCustomizeDetailsHeaderDetailsTab;

	@FindBy(xpath = "//a[@href='#BodyDetails_2']")
	private static WebElement accountsCustomizeDetailsBodyDetailsTab;

	@FindBy(xpath = "//a[@href='#HeaderDetails_3']")
	private static WebElement accountsCustomizePrintLayoutHeaderDetailsTab;

	@FindBy(xpath = "//a[@href='#BodyDetails_3']")
	private static WebElement accountsCustomizePrintLayoutBodyDetailsTab;

	@FindBy(xpath = "//a[@href='#HeaderDetails_4']")
	private static WebElement accountsCustomizeTreeTabHeaderDetailsTab;

	@FindBy(xpath = "//a[@href='#BodyDetails_4']")
	private static WebElement accountsCustomizeTreeTabBodyDetailsTab;

	@FindBy(xpath = "//a[@href='#HeaderDetails_5']")
	private static WebElement accountCustomizeDocumetTabHeaderDetailsTab;

	@FindBy(xpath = "//a[@href='#BodyDetails_5']")
	private static WebElement accountCustomizeDocumetTabBodyDetailsTab;

	@FindBy(xpath = "//a[@href='#HeaderDetails_6']")
	private static WebElement accountCustomizeCreateTabHeaderDetailsTab;

	@FindBy(xpath = "//a[@href='#BodyDetails_6']")
	private static WebElement accountCustomizeCreateTabBodyDetailsTab;

	@FindBy(xpath = "//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[9]/td[1]/i[1]")
	private static WebElement accountSettingsHeaderEditNinethRowBtn;
	
	@FindBy(xpath = "//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[10]/td[1]/i[1]")
	private static WebElement accountSettingsHeaderEditTenthRowBtn;
	
	@FindBy(xpath="//*[@id='navigation_menu']/li/a/div/div")
	private static List<WebElement> menusList;
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[1]/ul/li/a/span")
	private static List<WebElement> homeMenuList;
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[1]/ul/li[3]/ul/li/a/span")
	private static List<WebElement> mastersMenuList;
	
	@FindBy(xpath="//*[@id='ulCommonlyUsedRibbon']/li/span")
	private static List<WebElement> mastersRibbonControlList;
	
	@FindBy(xpath ="//*[@id='ulRibbonControl']/li/span")
	private static List<WebElement> ribbonControlExpandList;
	
	
	
	
	
	private static String xlfile;
	private static String resPass = "Pass";
	private static String resFail = "Fail";
	private static ExcelReader excelReader;
	private static boolean methodReturnStatus;
	private static String xlSheetName = "SmokeMasters";
	
	private static boolean statusOfValue;

   public boolean checkFirstValidSignInAfterBrowserLaunchToVerifyDemoPopUpPageIsDisplayInLoginPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
   {
     excelReader = new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
   
     System.out.println("******* checkFirstValidSignInAfterBrowserLaunchToVerifyDemoPopUpPageIsDisplayInLoginPage Method Executes.............  ********************");

     try
     {
       getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
    	 
       LoginPage lp = new LoginPage(getDriver());
    
	   LoginPage.enterUserName("su");
	   LoginPage.enterPassword("su");
	   LoginPage.clickOnSignInBtn();
	   //Thread.sleep(4000);

	   //getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
	   boolean actDemoPopUpDoNotShowCheckbox = doNotShowCheckbox.isDisplayed();
	   boolean actDemoPopUpCloseButton       = closeBtnInDemoPopupScreen.isDisplayed();
	
	   boolean expDemoPopUpDoNotShowCheckbox = true;
	   boolean expDemoPopUpCloseButton       = true;

	   System.out.println("Do Not Show Check Box Display Value Actual  : " + actDemoPopUpDoNotShowCheckbox + " Value Expected : " + expDemoPopUpDoNotShowCheckbox);
	   System.out.println("Close Button Object Display Value Actual    : " + actDemoPopUpCloseButton +       " Value Expected : " + expDemoPopUpCloseButton);
	
	   if(actDemoPopUpDoNotShowCheckbox==expDemoPopUpDoNotShowCheckbox && actDemoPopUpCloseButton==expDemoPopUpCloseButton)
	   {
		 excelReader.setCellData(xlfile, xlSheetName, 7, 9, resPass);
		 methodReturnStatus=true;
       } 
	   else 
	   {
		 excelReader.setCellData(xlfile, xlSheetName, 7, 9, resFail);
		 methodReturnStatus=false;
	   }
     }
     catch (NoSuchElementException nse)
	 {
		System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY "+ nse.getMessage());
		methodReturnStatus=false;
	 }
     catch(Exception e) 
     {
		/*System.err.println("CATCH BLOCK : SERVER ERROR MESSAGE IS DISPLAY : " + serverErrorPopup.getText() + e.getMessage());
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(serverErrorClose));
		serverErrorClose.click();*/
		methodReturnStatus=false;
      }
     
     return methodReturnStatus;
    }
	


   public boolean checkSignInDemoPopupPageOnClickDoNotShowAndCloseToDisplayMenusAndHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
   {
     excelReader = new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
   
     System.out.println("***************** checkSignInDemoPopupPageOnClickDoNotShowAndCloseToDisplayMenusAndHomePage Method Executes.............  *********************");
     
	 try
	 {
		 
		 

		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
	    	 
		 LoginPage lp = new LoginPage(getDriver());
		 
		 String unamelt =excelReader.getCellData(xlSheetName, 8, 6);
		 String pawslt  =excelReader.getCellData(xlSheetName, 8, 6);
		 
		 LoginPage.enterUserName(unamelt);
		 LoginPage.enterPassword(pawslt);
		 
		 LoginPage.clickOnSignInBtn();
		 
		 Thread.sleep(4000);
		
		 System.out.println("1");
		 
		 int actMenusCount	= menusList.size();
		 
		 ArrayList<String> actMenusArray=new ArrayList<String>();
		 
		 for (int i = 0; i < actMenusCount; i++) 
		 {
			 String data = menusList.get(i).getText();
			 actMenusArray.add(data);
		 }	
				
		 String actMenus 	=actMenusArray.toString();
		 String expMenus	= excelReader.getCellData(xlSheetName, 8, 7);
		 
		 System.out.println("Menus Display Value Actual        : " + actMenus);
		 System.out.println("Menus Display Value Expected      : " + expMenus);
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		 String actUserInfo = userNameDisplay.getText();
		 String expUserInfo = excelReader.getCellData(xlSheetName, 9, 7);	
		 
		 System.out.println("User Name Display Value Actual    : " + actUserInfo            + " Value Expected : " + expUserInfo);
		 
		 System.out.println("2");
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		 companyLogo.click();
		 
		 System.out.println("3");
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyName));
		 String actGetLoginCompanyNameInformation = companyName.getText();
		 String actGetLoginCompanyName   = actGetLoginCompanyNameInformation.substring(0, 19);
		 String expGetLoginCompanyName   = excelReader.getCellData(xlSheetName, 10, 7);
		
		 System.out.println("Company Name Display Value Actual : " + actGetLoginCompanyName + " Value Expected : " + expGetLoginCompanyName);
		 
		 companyLogo.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		 String actDashboardLabel        = labelDashboard.getText();
		 String expDashboardLabel        =  excelReader.getCellData(xlSheetName, 11, 7);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 8, 8, actMenus);
		 excelReader.setCellData(xlfile, xlSheetName, 9, 8, actUserInfo);
		 excelReader.setCellData(xlfile, xlSheetName, 10, 8, actGetLoginCompanyName);
		 excelReader.setCellData(xlfile, xlSheetName, 11, 8, actDashboardLabel);
		 
		 System.out.println("4");

		 System.out.println("Dashboard Label Value Actual      : " + actDashboardLabel      + " Value Expected : " + expDashboardLabel);
		 
		 if (actUserInfo.equalsIgnoreCase(expUserInfo) && actGetLoginCompanyName.equalsIgnoreCase(expGetLoginCompanyName)
				 && actDashboardLabel.equalsIgnoreCase(expDashboardLabel) && actMenus.equalsIgnoreCase(expMenus)) 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 7, 9, resPass);
			 return true;
		 }	 
		 else 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 7, 9, resFail);
			 return false;
		 }
	 }
	 catch (Exception e) 
     {
         excelReader.setExceptionInExcel(xlfile, xlSheetName, 7, 10, e.getMessage());
         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
         return false;
     }
   }
   
   
   public boolean checkHomeMenuSubMenuOnClickHomeMenuToDisplaySubMenus() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
   {
     excelReader = new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
     
     System.out.println("*****************   checkHomeMenuSubMenuOnClickHomeMenuToDisplaySubMenus Method Executes.............    *************************");
   
     try
     {
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
    	homeMenu.click();
		
		int actMenusCount					    = homeMenuList.size();
		 
		ArrayList<String> actMenusArray=new ArrayList<String>();
		 
		for (int i = 0; i < actMenusCount; i++) 
		{
			String data = homeMenuList.get(i).getText();
			actMenusArray.add(data);
		}	
				
		String actMenus 	=actMenusArray.toString();
		String expMenus		= excelReader.getCellData(xlSheetName, 13, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 13, 8, actMenus);
		
		System.out.println("Home Menu Display Value Actual      : " + actMenus);
		System.out.println("Home Menu  Display Value Expected   : " + expMenus);
		
		if(actMenus.equalsIgnoreCase(expMenus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 12, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 12, 9, resFail);
			return false;
		}
     }
     catch (Exception e) 
     {
		 String exception =e.getMessage().substring(0, 50);
         excelReader.setExceptionInExcel(xlfile, xlSheetName, 12, 10, exception);
         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
         return false;
     }
   }
   
   
   public boolean checkMastersMenuSubMenuOnClickMasterMenuToDisplaySubMenus() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
   {
     excelReader = new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
   
     System.out.println("******************** checkMastersMenuSubMenuOnClickMasterMenuToDisplaySubMenus Method Executes.............   *****************************");
  
     try
     {
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu)); 
    	mastersMenu.click();
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouse));
		
		int actMenusCount	= mastersMenuList.size();
		 
		ArrayList<String> actMenusArray=new ArrayList<String>();
		 
		for (int i = 0; i < actMenusCount; i++) 
		{
			String data = mastersMenuList.get(i).getText();
			actMenusArray.add(data);
		}	
				
		String actMenus =actMenusArray.toString();
		String expMenus = excelReader.getCellData(xlSheetName, 15, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 15, 8, actMenus);
		
		System.out.println("Master Menu Display Value Actual    : " + actMenus);
		System.out.println("Master Menu  Display Value Expected : " + expMenus);
		
		if(actMenus.equalsIgnoreCase(expMenus)) 
		{ 
			excelReader.setCellData(xlfile, xlSheetName, 14, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 14, 9, resFail);
			return false;
		}
     }
     catch (Exception e) 
     {
		 String exception =e.getMessage().substring(0, 50);
         excelReader.setExceptionInExcel(xlfile, xlSheetName, 14, 10, exception);
         System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
         return false;
     }  
   }
  
 
   // This checkValidationMessagebooleanIsEmpty Method Used in Page Class But Not To Call in Test Class
   
   public static boolean checkErrorMessageIsDisplayingOrNotDisplaying() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
   {     
	   
	 System.out.println("************************   checkErrorMessageIsDisplayingOrNotDisplaying Method Executes.............    ******************************");
	   
	 try 
	 { 
		boolean actValidationMessageIsEmptyDisplay      = validationConfirmationMessage.getText().isEmpty();
        boolean expValidationMessageIsEmptyDisplay      = true;   
		
        System.out.println("Error Message Is Displaying Or Not Displaying Value Actual : " + actValidationMessageIsEmptyDisplay + " Value Expected : " + expValidationMessageIsEmptyDisplay);
        
		if (actValidationMessageIsEmptyDisplay == expValidationMessageIsEmptyDisplay)
		{
			//System.out.println("No Error Message Is Displaying On Opening Page,Click On Add, Edit, Delete Etc...... In Method : " + validationConfirmationMessage.getText());
			return true;
		} 
		else 
		{
			//System.err.println("Error Message Is Displaying On Opening Page, Click, Add, Edit, Delete Etc..... In Method : " + validationConfirmationMessage.getText());
			newErrorMessageCloseBtn.click();
			return false;
		}
		
	 } 
	 catch (NoSuchElementException nse)
	 {
		System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY  :   "+ nse.getMessage());
		return false;
	 }
  }
   
	   
	   
   public boolean checkAccountsMastersPageOnClickOnAccountsMenuFromMastersMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
   {
	   excelReader = new ExcelReader(POJOUtility.getExcelPath());
	   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	   System.out.println("********************* checkAccountsMastersPageOnClickOnAccountsMenuFromMastersMenu Method Executes.............   *****************************");
	
	   try
	   {
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		   accounts.click();
		
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));
				
		   boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		   boolean expSummaryErrorMessage  = true;
		   String actAccountsTitle         = accountsTitle.getText();
		   String expAccountsTitle         = excelReader.getCellData(xlSheetName, 17, 7);
		   
		   excelReader.setCellData(xlfile, xlSheetName, 17, 8, actAccountsTitle);
				
		   System.out.println("Opening Accounts Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		   System.out.println("Accounts Masters Title Display Value Actual        : " + actAccountsTitle       + " Value Expected : " + expAccountsTitle);
		   
		   if (actAccountsTitle.equalsIgnoreCase(expAccountsTitle) && actSummaryErrorMessage==expSummaryErrorMessage) 
		   {
			   excelReader.setCellData(xlfile, xlSheetName, 16, 9, resPass);
			   return true;
		   } 
		   else 
		   {
			   excelReader.setCellData(xlfile, xlSheetName, 16, 9, resFail);
			   return false;
		   }
	   }
	   catch (Exception e) 
	   {
		   String exception =e.getMessage().substring(0, 50);
		   excelReader.setExceptionInExcel(xlfile, xlSheetName, 16, 10, exception);
		   System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   return false;
	   } 
   }
	 
	
   
   public static boolean checkMainOptionsAvailabilityInAccountMastersPageOnClickOnAccountsFromMastersMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
   {
	   excelReader=new ExcelReader(POJOUtility.getExcelPath());
	   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			 
	   System.out.println("************ checkMainOptionsAvailabilityInAccountMastersPageOnClickOnAccountsFromMastersMenu Method Executes............ **********************");
	
	   try
	   {
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		   
		   int mastersRibbonControlListCount = mastersRibbonControlList.size();
		   
		   System.err.println("mastersRibbonControlList : "+mastersRibbonControlListCount);
		   
		   Set<String> actMenusArray= new HashSet<String>();

		   for (int i = 1; i < mastersRibbonControlListCount; i++) 
		   {
			   String data = mastersRibbonControlList.get(i).getText();
			   System.err.println(data);
			   actMenusArray.add(data);
		   }	

		   String actMenus =actMenusArray.toString();
		   String expMenus = excelReader.getCellData(xlSheetName, 19, 7);
		   
		   excelReader.setCellData(xlfile, xlSheetName, 19, 8, actMenus);
	
		   System.out.println("Account Ribbon Control Display Value Actual    : " + actMenus);
		   System.out.println("Account Ribbon Control  Display Value Expected : " + expMenus);
		   
		   if (actMenus.equalsIgnoreCase(expMenus))
		   {
			   excelReader.setCellData(xlfile, xlSheetName, 18, 9, resPass);
			   return true;
		   } 
		   else 
		   {
			   excelReader.setCellData(xlfile, xlSheetName, 18, 9, resFail);
			   return false;
		   }
	   }
	   catch (Exception e) 
	   {
		   String exception =e.getMessage().substring(0, 50);
		   excelReader.setExceptionInExcel(xlfile, xlSheetName, 18, 10, exception);
		   System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		   return false;
	   } 
   }
	 
  
  public static boolean checkToolsOptionsAvailabilityOnClickMasterRibbonToExpandOptionsInAccountMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("*********** checkToolsOptionsAvailabilityOnClickMasterRibbonToExpandOptionsInAccountMastersPage Method Executes............*******************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
		masterRibbonToExpandOptions.click();

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
        System.out.println("Click On Ribbon Expand Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));

		int ribbonControlExpandListCount =ribbonControlExpandList.size();
		
		System.err.println("ribbonControlExpandList : "+ribbonControlExpandListCount);
		
		ArrayList<String> actribbonControlExpandList=new ArrayList<String>();
		
		for(int i=0;i<ribbonControlExpandListCount;i++)
		{
			String data=ribbonControlExpandList.get(i).getText();
			actribbonControlExpandList.add(data);
		}
		
		String actToggleList =actribbonControlExpandList.toString();
		String expToggleList =excelReader.getCellData(xlSheetName, 21, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 21, 8, actToggleList);

		System.out.println("ToggleList Actual   : "+actToggleList);
		System.out.println("ToggleList Expected : "+expToggleList);
		
		if (actSummaryErrorMessage==expSummaryErrorMessage
				&& actToggleList.equalsIgnoreCase(expToggleList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 20, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 20, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 20, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 	
   }
  
  
  public static boolean checkOtherToolsOptionsAvailabilityInAccountMastersPageOnClickRibbonControlNextButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********* checkOtherToolsOptionsAvailabilityInAccountMastersPageOnClickRibbonControlNextButton Method Executes............  *******************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));

		masterRibbonControlNextBtn.click();
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
        System.out.println("Click On Ribbon Control Next Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
	
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTranferBtn));

		int ribbonControlExpandListCount =ribbonControlExpandList.size();
		
		System.err.println("ribbonControlExpandList : "+ribbonControlExpandListCount);
		
		ArrayList<String> actribbonControlExpandList=new ArrayList<String>();
		
		for(int i=0;i<ribbonControlExpandListCount;i++)
		{
			String data=ribbonControlExpandList.get(i).getText();
			System.err.println(data);
			actribbonControlExpandList.add(data);
		}
		
		String actToggleList =actribbonControlExpandList.toString();
		String expToggleList =excelReader.getCellData(xlSheetName, 23, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 23, 8, actToggleList);

		System.out.println("ToggleList Actual   : "+actToggleList);
		System.out.println("ToggleList Expected : "+expToggleList);
		
		if (actSummaryErrorMessage==expSummaryErrorMessage 
				&& actToggleList.equalsIgnoreCase(expToggleList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 22, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 22, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 22, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
   }
	
  
 
  public static boolean checkTreeViewOptionsAvailableInAccountMastersPageOnClickOnAccountsFromMastersMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("***********  checkTreeViewOptionsAvailableInAccountMastersPageOnClickOnAccountsFromMastersMenu Method Executes............ ********************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));

		Select masterTreeIdDropdownSelect=new Select(masterTreeIdDropdown);
		String actmasterTreeIdDropdownText=masterTreeIdDropdownSelect.getFirstSelectedOption().getText();
		String expmasterTreeIdDropdownText=excelReader.getCellData(xlSheetName, 25, 7);
		
		Select masterTreeViewIDDropdownSelect=new Select(masterTreeViewIDDropdown);
		String actmasterTreeViewIDDropdownText=masterTreeViewIDDropdownSelect.getFirstSelectedOption().getText();
		String expmasterTreeViewIDDropdownText=excelReader.getCellData(xlSheetName, 26, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 25, 8, actmasterTreeIdDropdownText);
		excelReader.setCellData(xlfile, xlSheetName, 26, 8, actmasterTreeViewIDDropdownText);
		
		System.out.println("masterTreeIdDropdownText      : "+actmasterTreeIdDropdownText     +" Value Expected : "+expmasterTreeIdDropdownText);
		System.out.println("masterTreeViewIDDropdownText  : "+actmasterTreeViewIDDropdownText +" Value Expected : "+expmasterTreeViewIDDropdownText);
		
		if (actmasterTreeIdDropdownText.equalsIgnoreCase(expmasterTreeIdDropdownText)
				&& actmasterTreeViewIDDropdownText.equalsIgnoreCase(expmasterTreeViewIDDropdownText))
		{
			excelReader.setCellData(xlfile, xlSheetName, 24, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 24, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 24, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
	
  
  @FindBy(xpath="//div[@id='divTreeMenu']/ul/li/ul//li/a[2]")
  private static List<WebElement> masterTreeViewList;

  public static boolean checkDisplayOfGroupAvailableTreeStructureLeftPaneInAccountMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("**************************  checkDisplayOfGroupAvailableInAccountMastersPage Method Executes............  *******************************");
     
	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));
		
		String actaccountRootAccount=accountRootAccount.getText();
		String expaccountRootAccount=excelReader.getCellData(xlSheetName, 28, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 28, 8, actaccountRootAccount);
		
		int masterTreeViewListCount=masterTreeViewList.size();
		
		ArrayList<String> actmasterTreeViewArray=new ArrayList<String>();
		
		for(int i=0;i<masterTreeViewListCount;i++)
		{
			String data=masterTreeViewList.get(i).getText();
			actmasterTreeViewArray.add(data);
		}
		
		String actmasterTreeViewList=actmasterTreeViewArray.toString();

		String expmasterTreeViewList=excelReader.getCellData(xlSheetName, 29, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 29, 8, actmasterTreeViewList);
	    	
		System.out.println("masterTreeViewList Actual   : "+actmasterTreeViewList);
		System.out.println("masterTreeViewList Expected : "+expmasterTreeViewList);
		System.out.println("accountRootAccount Actual   : "+actaccountRootAccount);
		System.out.println("accountRootAccount Expected : "+expaccountRootAccount);
		
		if (actaccountRootAccount.equalsIgnoreCase(expaccountRootAccount) && actmasterTreeViewList.equalsIgnoreCase(expmasterTreeViewList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 27, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 27, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 27, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
 
  @FindBy(xpath = "//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li/a")
  public static List<WebElement> masterTreeIDToggleList;
 
  public static boolean checkCreateTreeToggleOptionsAvailableInAccountMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 
	 System.out.println("********************* checkCreateTreeToggleOptionsAvailableInAccountMastersPage Method Executes............ *******************************");
     
	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggleBtn)); 
		masterTreeIDToggleBtn.click();
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

	    System.out.println("Click on Create Tree Toggle Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggle_setDefaultBtn));

		int masterTreeIDToggleListCount=masterTreeIDToggleList.size();
		
		ArrayList<String> actmasterTreeIDToggleListArray=new ArrayList<String>();
		
		for(int i=0;i<masterTreeIDToggleListCount;i++)
		{
			String data=masterTreeIDToggleList.get(i).getText();
			actmasterTreeIDToggleListArray.add(data);
		}
		
		String actmasterTreeIDToggleList=actmasterTreeIDToggleListArray.toString();

		String expmasterTreeIDToggleList=excelReader.getCellData(xlSheetName, 31, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 31, 8, actmasterTreeIDToggleList);
		
		System.out.println("masterTreeIDToggleList Actual   : "+actmasterTreeIDToggleList);
		System.out.println("masterTreeIDToggleList Expected : "+expmasterTreeIDToggleList);
		 
		if (actSummaryErrorMessage==actSummaryErrorMessage && actmasterTreeIDToggleList.equalsIgnoreCase(expmasterTreeIDToggleList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 30, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 30, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
 	
  
  @FindBy(xpath = "//*[@id='spnhiererchy']/div/div[2]/div/div/ul/li/a")
  public static List<WebElement> masterViewIDToggleList;
  
  public static boolean checkCreateViewToggleOptionsAvailableInAccountMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkCreateViewToggleOptionsAvailableInAccountMastersPage Method Executes............***********************************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIDToggleBtn));
		masterTreeViewIDToggleBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIdCreateViewBtn));

		int masterViewIDToggleListCount=masterViewIDToggleList.size();
		
		ArrayList<String> actmasterViewIDToggleListArray=new ArrayList<String>();
		
		for(int i=0;i<masterViewIDToggleListCount;i++)
		{
			String data=masterViewIDToggleList.get(i).getText();
			actmasterViewIDToggleListArray.add(data);
		}
		
		String actmasterViewIDToggleList=actmasterViewIDToggleListArray.toString();

		String expmasterViewIDToggleList=excelReader.getCellData(xlSheetName, 33, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 33, 8, actmasterViewIDToggleList);
		
		System.out.println("masterViewIDToggleList Actual   : "+actmasterViewIDToggleList);
		System.out.println("masterViewIDToggleList Expected : "+expmasterViewIDToggleList);
		
		if(actmasterViewIDToggleList.equalsIgnoreCase(expmasterViewIDToggleList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 32, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 32, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 32, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
	
	
  public static boolean checkHideAccountGroupOptionsAvailableInAccountMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************* checkHideAccountGroupOptionsAvailableInAccountMastersPage Method Executes............*************************");

	 try
	 {
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
	   masterOptionToHideAccountsGroupTree.click();
	   
	   boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
	   boolean expSummaryErrorMessage  = true;

	   System.out.println("Click on Hide Accounts Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);  

	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeDisplayMenuAccountGroups));

	   boolean actAccountMasterTreeDisplayMenuAccountsGroup = masterTreeDisplayMenuAccountGroups.isDisplayed();
	   boolean expAccountMasterTreeDisplayMenuAccountsGroup = true;
	   
	   String actResult = Boolean.toString(actAccountMasterTreeDisplayMenuAccountsGroup);
	   
	   excelReader.setCellData(xlfile, xlSheetName, 34, 8, actResult.toUpperCase());
			
	   System.out.println("Tree View Create View Option Value Actual : " + actAccountMasterTreeDisplayMenuAccountsGroup+ " Value Expected : " + expAccountMasterTreeDisplayMenuAccountsGroup);

	   if (actSummaryErrorMessage==actSummaryErrorMessage && actAccountMasterTreeDisplayMenuAccountsGroup == expAccountMasterTreeDisplayMenuAccountsGroup)
	   {
			excelReader.setCellData(xlfile, xlSheetName, 34, 9, resPass);
			return true;
	   } 
	   else 
	   {
			excelReader.setCellData(xlfile, xlSheetName, 34, 9, resFail);
			return false;
	   }
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 34, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
	
	
  public static boolean checkUnHideAccountGroupOptionsAvailableInAccountMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkUnHideAccountGroupOptionsAvailableInAccountMastersPage Method Executes............ ******************************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
		masterOptionToHideAccountsGroupTree.click();
		   
	    boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
	    boolean expSummaryErrorMessage  = true;

	    System.out.println("Click on Un Hide Accounts Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);  

	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));
		
		String actaccountRootAccount=accountRootAccount.getText();
		String expaccountRootAccount=excelReader.getCellData(xlSheetName, 36, 7);
		
		int masterTreeViewListCount=masterTreeViewList.size();
		
		ArrayList<String> actmasterTreeViewArray=new ArrayList<String>();
		
		for(int i=0;i<masterTreeViewListCount;i++)
		{
			String data=masterTreeViewList.get(i).getText();
			actmasterTreeViewArray.add(data);
		}
		
		String actmasterTreeViewList=actmasterTreeViewArray.toString();

		String expmasterTreeViewList=excelReader.getCellData(xlSheetName, 37, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 36, 8, actaccountRootAccount);
		excelReader.setCellData(xlfile, xlSheetName, 37, 8, actmasterTreeViewList);
	    	
		System.out.println("masterTreeViewList Actual   : "+actmasterTreeViewList);
		System.out.println("masterTreeViewList Expected : "+expmasterTreeViewList);
		System.out.println("accountRootAccount Actual   : "+actaccountRootAccount);
		System.out.println("accountRootAccount Expected : "+expaccountRootAccount);
		
		if (actSummaryErrorMessage==actSummaryErrorMessage &&
				actaccountRootAccount.equalsIgnoreCase(expaccountRootAccount) && actmasterTreeViewList.equalsIgnoreCase(expmasterTreeViewList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 35, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 35, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 35, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
	
  @FindBy(xpath="//*[@id='li_moveup']/div/div[1]/a")
  private static List<WebElement> searchControlList;
	
  public static boolean checkHeaderFieldsOptionsAvailableInAccountMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkHeaderFieldsOptionsAvailableInAccountMastersPage Method Executes............ **********************************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));

		boolean actAccountMasterSearchTxt                  = masterSearchTxt.isDisplayed();
		boolean actAccountMasterSearchBtn                  = masterSearchBtn.isDisplayed();
		boolean actAccountMasterCmbMasterTxt               = mastercmbMasterTxt.isDisplayed();
		boolean actAccountMasterCmbMasterExpansionBtn      = masterCmbMasterExpansionBtn.isDisplayed();
		boolean actAccountMasterCmbMasterSettingsBtn       = masterCumMasterSettingBtn.isDisplayed();
		boolean actAccountMasterNextBookMark               = masterMoveTheSelectionToNextBookMarkBtn.isDisplayed();
		boolean actAccountMasterPrviousBookMark            = masterMoveTheSelectionToPrevoiusBookmarkBtn.isDisplayed();
		boolean actAccountMasterShowAllRecordsBtn          = masterShowAllRecordsBtn.isDisplayed();
		boolean actAccountMasterShowAllUnAuthorisedRecords = masterShowAllUnauthorisedRecords.isDisplayed();
		boolean actAccountMasterShowAllClosedRecordsBtn    = masterShowAllClosedRecordsBtn.isDisplayed();
		boolean actAccountMasterAutoAdjustColumnBtn        = masterAutoAdjustColoumnsBtn.isDisplayed();
		boolean actAccountMasterRetainSelectionCheckbox    = masterRetainSelectionCheckBox.isDisplayed();
		boolean actAccountMasterSideBarBtn                 = masterSideBarBtn.isDisplayed();

		boolean expAccountMasterSearchTxt                  = true;
		boolean expAccountMasterSearchBtn                  = true;
		boolean expAccountMasterCmbMasterTxt               = true;
		boolean expAccountMasterCmbMasterExpansionBtn      = true;
		boolean expAccountMasterCmbMasterSettingsBtn       = true;
		boolean expAccountMasterNextBookMark               = true;
		boolean expAccountMasterPrviousBookMark            = true;
		boolean expAccountMasterShowAllRecordsBtn          = true;
		boolean expAccountMasterShowAllUnAuthorisedRecords = true;
		boolean expAccountMasterShowAllClosedRecordsBtn    = true;
		boolean expAccountMasterAutoAdjustColumnBtn        = true;
		boolean expAccountMasterRetainSelectionCheckbox    = true;
		boolean expAccountMasterSideBarBtn                 = true;
		
		boolean actMethod = actAccountMasterSearchTxt == 	expAccountMasterSearchTxt && actAccountMasterSearchBtn == expAccountMasterSearchBtn
							&& actAccountMasterCmbMasterTxt == expAccountMasterCmbMasterTxt 
							&& actAccountMasterCmbMasterExpansionBtn == expAccountMasterCmbMasterExpansionBtn
							&& actAccountMasterCmbMasterSettingsBtn == expAccountMasterCmbMasterSettingsBtn 
							&& actAccountMasterNextBookMark == expAccountMasterNextBookMark
							&& actAccountMasterPrviousBookMark == expAccountMasterPrviousBookMark
							&& actAccountMasterShowAllRecordsBtn == expAccountMasterShowAllRecordsBtn
							&& actAccountMasterShowAllUnAuthorisedRecords == expAccountMasterShowAllUnAuthorisedRecords
							&& actAccountMasterShowAllClosedRecordsBtn == expAccountMasterShowAllClosedRecordsBtn 
							&& actAccountMasterAutoAdjustColumnBtn == expAccountMasterAutoAdjustColumnBtn
							&& actAccountMasterRetainSelectionCheckbox == expAccountMasterRetainSelectionCheckbox 
							&& actAccountMasterSideBarBtn == expAccountMasterSideBarBtn;
		
		String actResult=Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 38, 8, actResult.toUpperCase());
		
		int searchControlListCount=searchControlList.size();
		
		ArrayList<String> searchControlListArray=new ArrayList<String>();
		
		for(int i=0;i<searchControlListCount;i++)
		{
			String data=searchControlList.get(i).getAttribute("title");
			searchControlListArray.add(data);
		}
		
		String actsearchControlList=searchControlListArray.toString();

		String expsearchControlList=excelReader.getCellData(xlSheetName, 39, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 39, 8, actsearchControlList);

		System.out.println("Search Txt  Value Actual             : " + actAccountMasterSearchTxt                  + " Value Expected : " + expAccountMasterSearchTxt);
		System.out.println("Search Button Value Actual           : " + actAccountMasterSearchBtn                  + " Value Expected : " + expAccountMasterSearchBtn);
		System.out.println("Comb Box Value Actual                : " + actAccountMasterCmbMasterTxt               + " Value Expected : " + expAccountMasterCmbMasterTxt);
		System.out.println("Combo Box Expansion Value Actual     : " + actAccountMasterCmbMasterExpansionBtn      + " Value Expected : " + expAccountMasterCmbMasterExpansionBtn);
		System.out.println("Combo Box Settings Value Actual      : " + actAccountMasterCmbMasterSettingsBtn       + " Value Expected : " + expAccountMasterCmbMasterSettingsBtn);
		System.out.println("Next Book Mark Value Actual          : " + actAccountMasterNextBookMark               + " Value Expected : " + expAccountMasterNextBookMark);
		System.out.println("Previous Book Mark Value Actual      : " + actAccountMasterPrviousBookMark            + " Value Expected : " + expAccountMasterPrviousBookMark);
		System.out.println("Show All Records Value Actual        : " + actAccountMasterShowAllRecordsBtn          + " Value Expected : " + expAccountMasterShowAllRecordsBtn);
		System.out.println("Show All Un Authoize Value Actual    : " + actAccountMasterShowAllUnAuthorisedRecords + " Value Expected : " + expAccountMasterShowAllUnAuthorisedRecords);
		System.out.println("Show All Closed Value Actual         : " + actAccountMasterShowAllClosedRecordsBtn    + " Value Expected : " + expAccountMasterShowAllClosedRecordsBtn);
		System.out.println("Auto Adjust Column Value Actual      : " + actAccountMasterAutoAdjustColumnBtn        + " Value Expected : " + expAccountMasterAutoAdjustColumnBtn);
		System.out.println("Selection Check Box Value Actual     : " + actAccountMasterRetainSelectionCheckbox    + " Value Expected : " + expAccountMasterRetainSelectionCheckbox);
		System.out.println("Side Bar Value Actual                : " + actAccountMasterSideBarBtn                 + " Value Expected : " + expAccountMasterSideBarBtn);
		
		System.out.println("searchControlList Actual             : "+actsearchControlList);
		System.out.println("searchControlList Axpected           : "+expsearchControlList);
		
		if (actAccountMasterSearchTxt == expAccountMasterSearchTxt
				&& actAccountMasterSearchBtn == expAccountMasterSearchBtn
				&& actAccountMasterCmbMasterTxt == expAccountMasterCmbMasterTxt
				&& actAccountMasterCmbMasterExpansionBtn == expAccountMasterCmbMasterExpansionBtn
				&& actAccountMasterCmbMasterSettingsBtn == expAccountMasterCmbMasterSettingsBtn
				&& actAccountMasterNextBookMark == expAccountMasterNextBookMark
				&& actAccountMasterPrviousBookMark == expAccountMasterPrviousBookMark
				&& actAccountMasterShowAllRecordsBtn == expAccountMasterShowAllRecordsBtn
				&& actAccountMasterShowAllUnAuthorisedRecords == expAccountMasterShowAllUnAuthorisedRecords
				&& actAccountMasterShowAllClosedRecordsBtn == expAccountMasterShowAllClosedRecordsBtn
				&& actAccountMasterAutoAdjustColumnBtn == expAccountMasterAutoAdjustColumnBtn
				&& actAccountMasterRetainSelectionCheckbox == expAccountMasterRetainSelectionCheckbox
				&& actAccountMasterSideBarBtn == expAccountMasterSideBarBtn
				
				&& actsearchControlList.equalsIgnoreCase(expsearchControlList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 38, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 38, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 38, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
	
	
  @FindBy(xpath="//*[@id='btnSearchAcc']/ol/li/a")
  private static List<WebElement> searchOnOptions;
  
  public static boolean checkSearchOptionAvailableInAccountMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("*************************** checkSearchOptionAvailableInAccountMastersPage Method Executes............ ********************************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchBtn));
		masterSearchBtn.click();

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Search Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);

		int searchOnOptionsCount=searchOnOptions.size();
		
		ArrayList<String> searchOnOptionsArray = new ArrayList<String>();
		
		for(int i=0;i<searchOnOptionsCount;i++)
		{
			String data=searchOnOptions.get(i).getText();
			searchOnOptionsArray.add(data);
		}
		
		String actsearchOnOptions=searchOnOptionsArray.toString();
		
		String expsearchOnOptions=excelReader.getCellData(xlSheetName, 41, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 41, 8, actsearchOnOptions);

		System.out.println("searchOnOptions Actual   : "+actsearchOnOptions);
		System.out.println("searchOnOptions Expected : "+expsearchOnOptions);
		
		if (actSummaryErrorMessage==expSummaryErrorMessage && actsearchOnOptions.equalsIgnoreCase(expsearchOnOptions))
		{
			excelReader.setCellData(xlfile, xlSheetName, 40, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 40, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 40, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
  
  
  @FindBy(xpath="//*[@id='landgridData']/thead/tr/th/span")
  private static List<WebElement> masterGridHeader;
	
  public static boolean checkAccountsDisplayTableColumnNamesAvailableInAccountMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
	 System.out.println("************************* checkAccountsDisplayTableColumnNamesAvailableInAccountMastersPage Method Executes............ *************************");
		
	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGrid_Header_SelectTxt));
		boolean actAccountMasterGridSelectTxt = masterGrid_Header_SelectTxt.isDisplayed();
		masterGrid_Header_SelectTxt.click();

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Master Grid Header Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		boolean actAccountMasterGridSelectAllChkbox = masterGridHeader_SelectAllRowsCheckBox.isDisplayed();

		boolean expAccountMasterGridSelectTxt       = true;
		boolean expAccountMasterGridSelectAllChkbox = true;
		
		int masterGridHeaderCount=masterGridHeader.size();
		
		ArrayList<String> masterGridHeaderArray=new ArrayList<String>();
		
		for (int i=1;i<masterGridHeaderCount;i++)
		{
			String data=masterGridHeader.get(i).getText();
			masterGridHeaderArray.add(data);
		}
		
		String actmasterGridHeader=masterGridHeaderArray.toString();
		
		String expmasterGridHeader=excelReader.getCellData(xlSheetName, 43, 7);
		
		
		boolean actMethod = actAccountMasterGridSelectTxt == expAccountMasterGridSelectTxt && actAccountMasterGridSelectAllChkbox == expAccountMasterGridSelectAllChkbox;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 43, 8, actmasterGridHeader);
		excelReader.setCellData(xlfile, xlSheetName, 42, 8, actResult.toUpperCase());
		
		System.out.println("Grid Select txt Option Value Actual  : " + actAccountMasterGridSelectTxt       + " Value Expected : " + expAccountMasterGridSelectTxt);
		System.out.println("Grid Select All Option Value Actual  : " + actAccountMasterGridSelectAllChkbox + " Value Expected : " + expAccountMasterGridSelectAllChkbox);
		System.out.println("masterGridHeader Actual              : "+actmasterGridHeader);
		System.out.println("masterGridHeader Expected            : "+expmasterGridHeader);
		
		if (actSummaryErrorMessage==expSummaryErrorMessage && actMethod==true && actmasterGridHeader.equalsIgnoreCase(expmasterGridHeader))
		{
			excelReader.setCellData(xlfile, xlSheetName, 42, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 42, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 42, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
  
  @FindBy(xpath="//*[@id='LandingGridBody']/tr")
  private static List<WebElement> masterGridBodyRowCount;
  
  @FindBy(xpath="//*[@id='LandingGridBody']/tr/td[11]")
  private static List<WebElement> masterGridBodyName;
  
  @FindBy(xpath="//*[@id='LandingGridBody']/tr/td[12]")
  private static List<WebElement> masterGridBodyCode;
  
  @FindBy(xpath="//*[@id='LandingGridBody']/tr/td[13]")
  private static List<WebElement> masterGridBodyAccountType;
  

	

  public static boolean checkAccountsDisplayTableColumnValuesAvailableInAccountMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
    excelReader=new ExcelReader(POJOUtility.getExcelPath());
    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
    System.out.println("********************** checkAccountsDisplayTableColumnValuesAvailableInAccountMastersPage Method Executes............ **************************");
	
    try
    {
    	int masterGridBodyListCount=masterGridBodyRowCount.size();
    	
    	
    	ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterGridBodyListCount;i++)
    	{
    		String masterGridBodyNamedata        =masterGridBodyName.get(i).getText();
    		String masterGridBodyCodedata        =masterGridBodyCode.get(i).getText();
    		String masterGridBodyAccountTypedata =masterGridBodyAccountType.get(i).getText();
    		
    		
    		masterGridBodyListArray.add(masterGridBodyNamedata);
    		masterGridBodyListArray.add(masterGridBodyCodedata);
    		masterGridBodyListArray.add(masterGridBodyAccountTypedata);
    	}
    	
    	String actmasterGridBodyList=masterGridBodyListArray.toString();
    	
    	String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 45, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 45, 8, actmasterGridBodyList);
    	
    	System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
    	System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);
    	
    	if(actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList))
    	{
    		excelReader.setCellData(xlfile, xlSheetName, 44, 9, resPass);
    		return true;
    	} 
    	else 
    	{
    		excelReader.setCellData(xlfile, xlSheetName, 44, 9, resFail);
    		return false;
    	}
    }
    catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 50);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 44, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    } 
  }
	
  
  
  
  // NEW OPTION IN ACCOUNTS MASTERS PAGE
  
  @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[2]/div[1]/ul/li/div/div/a")
  private static List<WebElement> masterNewGridHeader;
  
  @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button")
  private static List<WebElement> masterNewGridHeaderButtons;
  
  @FindBy(xpath="//*[@id='newMasterDiv0']/div/div/div[1]/label/a")
  private static List<WebElement> masterNewGeneralTabList;
  
  public static boolean checkAccountsCreationPageAndGeneralTabFieldsAvailabilityOnClickOnNewButtonInAccountsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************ checkAccountsCreationPageAndGeneralTabFieldsAvailabilityOnClickOnNewButtonInAccountsMasterPage Method Executes............ **********");

	try
	{		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on New Button and check Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		
		int masterNewGridHeaderCount=masterNewGridHeader.size();
    	
    	ArrayList<String> masterNewGridHeaderArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterNewGridHeaderCount;i++)
    	{
    		String data=masterNewGridHeader.get(i).getText();
    		masterNewGridHeaderArray.add(data);
    	}
    	
    	String actmasterNewGridHeader=masterNewGridHeaderArray.toString();
    	
    	String expmasterNewGridHeader=excelReader.getCellData(xlSheetName, 47, 7);
    	
    	int masterNewGridHeaderButtonsCount=masterNewGridHeaderButtons.size();
    	
    	ArrayList<String> masterNewGridHeaderButtonsArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterNewGridHeaderButtonsCount;i++)
    	{
    		String data=masterNewGridHeaderButtons.get(i).getText();
    		masterNewGridHeaderButtonsArray.add(data);
    	}
    	
    	String actmasterNewGridHeaderButtons=masterNewGridHeaderButtonsArray.toString();
    	
    	String expmasterNewGridHeaderButtons=excelReader.getCellData(xlSheetName, 48, 7);
    	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		
		int masterNewGeneralTabListCount=masterNewGeneralTabList.size();
    	
    	ArrayList<String> masterNewGeneralTabListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterNewGeneralTabListCount;i++)
    	{
    		String data=masterNewGeneralTabList.get(i).getText();
    		masterNewGeneralTabListArray.add(data);
    	}
    	
    	String actmasterNewGeneralTabList=masterNewGeneralTabListArray.toString();
    	
    	String expmasterNewGeneralTabList=excelReader.getCellData(xlSheetName, 49, 7);
    	
    	ArrayList<String> accountTypeDropdownArray = new ArrayList<String>();
    	
		Select oSelect = new Select(accountTypeDropdown);
		
		List<WebElement> elementCount = oSelect.getOptions();

		int accAccountTypeSize = elementCount.size();
		
		for(int i=0;i<accAccountTypeSize;i++)
		{
			String data=oSelect.getOptions().get(i).getText();
			
			accountTypeDropdownArray.add(data);
			
		}
		
		String actaccountTypeDropdown = accountTypeDropdownArray.toString();
		String expaccountTypeDropdown = "[Cash, Bank, Sales, Purchases, Customer, Vendor, Customer Vendor, Assets, Liabilities, Income, Expenses Group, Petty cash expenses, Travel & Entertainment  expenses, Selling expenses, Manufacturing expenses, TDS, Taxes payable, General & Administration, Depreciation & Amortization, Other expenses, Control, Cost, Treasury  stock, Short term investments, Revenues not producing working capital, Sinking fund payable, Sales returns & discounts, Property plant & Equipment, Project operation expense, Preferred dividends, Prospect, Inventory, Fixed Assets, lblTradingAccount, Cash/Petty Cash Account, Employee, Assets/Liabilities, Income / Expense, Trust Receipt Account]";
		
		System.out.println("accountTypeDropdown Actual   : " + actaccountTypeDropdown);
		System.out.println("accountTypeDropdown Expected : " + expaccountTypeDropdown);
		
		String actAccountTypeSize=Integer.toString(accAccountTypeSize);	
		String expAccountTypeSize = excelReader.getCellData(xlSheetName, 50, 7);
		
		
		System.out.println("Account Type Size Value Actual : " + actAccountTypeSize + " Value Expected : " + expAccountTypeSize);
		
		
		// Bank Account (GENERAL TAB)

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankAccountTxt));
		bankAccountTxt.click();
		bankAccountTxt.sendKeys(Keys.SPACE);

		ArrayList<String> actbankAccountTxtValues = new ArrayList<String>();

		int count = bankAccountListCount.size();

		for (int i = 0; i < count; i++) 
		{
			String data = bankAccountListCount.get(i).getText();
			actbankAccountTxtValues.add(data);
		}

		String actbankAccountList = actbankAccountTxtValues.toString();
		
		String expbankAccountList = excelReader.getCellData(xlSheetName, 51, 7);
		
		// Pdc Account (GENERAL TAB)

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcDicountAccount));
		pdcDicountAccount.click();

		pdcDicountAccount.sendKeys(Keys.SPACE);

		ArrayList<String> actpdcDicountAccountValues = new ArrayList<String>();

		int pdccount = pdcAccountListCount.size();

		for (int i = 0; i < pdccount; i++) 
		{
			String data = pdcAccountListCount.get(i).getText();
			actpdcDicountAccountValues.add(data);
		}

		String actpdcDicountAccountlist = actpdcDicountAccountValues.toString();
		
		String exppdcDicountAccountlist = excelReader.getCellData(xlSheetName, 52, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 47, 8, actmasterNewGridHeader);
    	excelReader.setCellData(xlfile, xlSheetName, 48, 8, actmasterNewGridHeaderButtons);
    	excelReader.setCellData(xlfile, xlSheetName, 49, 8, actmasterNewGeneralTabList);
		excelReader.setCellData(xlfile, xlSheetName, 50, 8, actAccountTypeSize); 
		excelReader.setCellData(xlfile, xlSheetName, 51, 8, actbankAccountList); 
		excelReader.setCellData(xlfile, xlSheetName, 52, 8, actpdcDicountAccountlist); 
		
		System.out.println("masterNewGridHeader Actual          : "+actmasterNewGridHeader);
    	System.out.println("masterNewGridHeader Expected        : "+expmasterNewGridHeader);
    	System.out.println("masterNewGridHeaderButtons Actual   : "+actmasterNewGridHeaderButtons);
    	System.out.println("masterNewGridHeaderButtons Expected : "+expmasterNewGridHeaderButtons);
    	System.out.println("masterNewGeneralTabList Actual      : "+actmasterNewGeneralTabList);
    	System.out.println("masterNewGeneralTabList Expected    : "+expmasterNewGeneralTabList);
		System.out.println("AccountTypeSize Actual              : "+actAccountTypeSize);
		System.out.println("AccountTypeSize Expected            : "+expAccountTypeSize);
		System.out.println("bankAccountList  Actual             : "+actbankAccountList);
		System.out.println("bankAccountList Expected            : "+expbankAccountList);
		System.out.println("pdcDicountAccountlist Actual        : "+actpdcDicountAccountlist);
		System.out.println("pdcDicountAccountlist Expected      : "+exppdcDicountAccountlist);

		if (actSummaryErrorMessage==actSummaryErrorMessage && actmasterNewGridHeader.equalsIgnoreCase(expmasterNewGridHeader)
				&& actmasterNewGridHeaderButtons.equalsIgnoreCase(expmasterNewGridHeaderButtons) && actmasterNewGeneralTabList.equalsIgnoreCase(expmasterNewGeneralTabList)
				&& actAccountTypeSize.equalsIgnoreCase(expAccountTypeSize) && actbankAccountList.equalsIgnoreCase(expbankAccountList) 
				&& actpdcDicountAccountlist.equalsIgnoreCase(exppdcDicountAccountlist)
				
				
				&& actaccountTypeDropdown.equalsIgnoreCase(expaccountTypeDropdown))
		{
			excelReader.setCellData(xlfile, xlSheetName, 46, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 46, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 46, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    } 
  }
    
  @FindBy(xpath="//*[@id='newMasterDiv1']/div/div/div[1]/label/a")
  private static List<WebElement> masterNewSettingsTabList;
  
  
  public static boolean checkSettingTabFieldsAvailabilityOnClickOnSettingsTabInAccountsMasterCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************ checkClickOnSettingsTabInAccountsMasterCreationPage Method Executes............  *********************************");
	////Thread.sleep(2000);

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerAccountSettingTab));
		headerAccountSettingTab.click();
	
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Setting Tab and Check Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitCreditProposalDropdown));
		
		int masterNewSettingsTabListCount=masterNewSettingsTabList.size();
    	
    	ArrayList<String> masterNewSettingsTabListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterNewSettingsTabListCount;i++)
    	{
    		String data=masterNewSettingsTabList.get(i).getText();
    		masterNewSettingsTabListArray.add(data);
    	}
    	
    	String actmasterNewSettingsTabList=masterNewSettingsTabListArray.toString();
    	
    	String expmasterNewSettingsTabList=excelReader.getCellData(xlSheetName, 54, 7);
    	
    	// EXCHANGE ADJUSTMENT GAIN ACCOUNT
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeAdjustmentGainACTxt));
		exchangeAdjustmentGainACTxt.click();
		exchangeAdjustmentGainACTxt.sendKeys(Keys.SPACE);
	
		ArrayList<String> actexchangeAdjustmentGainACValues = new ArrayList<String>();
	
	
		int exgGaincount = exgGainListCount.size();
	
		for (int i = 0; i < exgGaincount; i++) 
		{
			String data = exgGainListCount.get(i).getText();
			actexchangeAdjustmentGainACValues.add(data);
		}	
	
		String actexchangeAdjustmentGainACListValues = actexchangeAdjustmentGainACValues.toString();
		
		String expexchangeAdjustmentGainACListValues = excelReader.getCellData(xlSheetName, 55, 7);
    	
		// EXCHANGE ADJUSTMENT LOSS
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeAdjustmentLossACTxt));
		exchangeAdjustmentLossACTxt.click();
		exchangeAdjustmentLossACTxt.sendKeys(Keys.SPACE);
	
		ArrayList<String> actexchangeAdjustmentLossACValues = new ArrayList<String>();
	
		int exgLosscount = exgLossListCount.size();
	
		for (int i = 0; i < exgLosscount; i++) 
		{
			String data = exgLossListCount.get(i).getText();
			actexchangeAdjustmentLossACValues.add(data);
		}
	
		String actexchangeAdjustmentLossACListValues = actexchangeAdjustmentLossACValues.toString();
		
		String expexchangeAdjustmentLossACListValues = excelReader.getCellData(xlSheetName, 56, 7);
    	
		// PRIMARY ACCOUNT
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(primaryAccountTxt));
		primaryAccountTxt.click();
		primaryAccountTxt.sendKeys(Keys.SPACE);
	
		ArrayList<String> actPrimaryACValues = new ArrayList<String>();
	
		int primaryAccountcount = primaryAccountListCount.size();
	
		for (int i = 0; i < primaryAccountcount; i++)
		{
			String data = primaryAccountListCount.get(i).getText();
			actPrimaryACValues.add(data);
		}
	
		String actPrimaryACListValues = actPrimaryACValues.toString();
		
		String expPrimaryACListValues = excelReader.getCellData(xlSheetName, 57, 7);
	    	
		primaryAccountTxt.sendKeys(Keys.TAB);
	
		// DEFAULT CURRENCY

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(defaultCurrencyTxt));
		defaultCurrencyTxt.click();
		defaultCurrencyTxt.sendKeys(Keys.SPACE);
	
		ArrayList<String> actdefaultCurrencyValues = new ArrayList<String>();

		int defaultCurrencycountcount = defaultCurrencyListCount.size();
	
		for (int i = 0; i < defaultCurrencycountcount; i++) 
		{
			String data = defaultCurrencyListCount.get(i).getText();
			actdefaultCurrencyValues.add(data);
		}
	
		String actdefaultCurrencyListValues = actdefaultCurrencyValues.toString();
		String expdefaultCurrencyListValues = excelReader.getCellData(xlSheetName, 58, 7);
    	
		// REMINDER TERMS
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reminderTermsTxt));
		reminderTermsTxt.click();
	
		reminderTermsTxt.sendKeys(Keys.SPACE);
	
		boolean actreminderTermsEmptyList = reminderTermsEmptyList.getText().isEmpty();
		boolean expreminderTermsEmptyList = true;
		
		// FINANCE CHARGE TERMS
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financeChargeTermsTxt));
		financeChargeTermsTxt.click();
		financeChargeTermsTxt.sendKeys(Keys.SPACE);
	
		boolean actfinanceChargeTermsEmptyList = financeChargeTermsEmptyList.getText().isEmpty();
		boolean expfinanceChargeTermsEmptyList = true;
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reminderTermsTxt));
		reminderTermsTxt.click();
		
		// PAYMENT TERMS
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentTermstxt));
		paymentTermstxt.click();
		paymentTermstxt.sendKeys(Keys.SPACE);
	
		boolean actpaymentTermsEmptyList = paymentTermsEmptyList.getText().isEmpty();
		boolean exppaymentTermsEmptyList = true;
	
		boolean actmethod=actpaymentTermsEmptyList==exppaymentTermsEmptyList && actfinanceChargeTermsEmptyList==expfinanceChargeTermsEmptyList &&
						  actreminderTermsEmptyList==expreminderTermsEmptyList;
		
		String actResult=Boolean.toString(actmethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 54, 8, actmasterNewSettingsTabList);
    	excelReader.setCellData(xlfile, xlSheetName, 55, 8, actexchangeAdjustmentGainACListValues);
    	excelReader.setCellData(xlfile, xlSheetName, 56, 8, actexchangeAdjustmentLossACListValues);
		excelReader.setCellData(xlfile, xlSheetName, 57, 8, actPrimaryACListValues); 
		excelReader.setCellData(xlfile, xlSheetName, 58, 8, actdefaultCurrencyListValues);
		excelReader.setCellData(xlfile, xlSheetName, 53, 8, actResult.toUpperCase());
		
		System.err.println("Reminder Terms Combo Box Value Actual       : " + actreminderTermsEmptyList      + "  Value Expected : " + expreminderTermsEmptyList);
		System.err.println("Finance Chagre Terms Combo Box Value Actual : " + actfinanceChargeTermsEmptyList + "  Value Expected : " + expfinanceChargeTermsEmptyList);
		System.err.println("Payment Terms Combo Box Value Actual        : " + actpaymentTermsEmptyList       + "  Value Expected : " + exppaymentTermsEmptyList);
		System.out.println("masterNewSettingsTabList Actual             : " +actmasterNewSettingsTabList);
    	System.out.println("masterNewSettingsTabList Expected           : " +expmasterNewSettingsTabList);
    	System.out.println("exchangeAdjustmentGainACListValues Actual   : " +actexchangeAdjustmentGainACListValues);
    	System.out.println("exchangeAdjustmentGainACListValues Expected : " +expexchangeAdjustmentGainACListValues);
    	System.out.println("exchangeAdjustmentLossACListValues Actual   : " +actexchangeAdjustmentLossACListValues);
    	System.out.println("exchangeAdjustmentLossACListValues Expected : " +expexchangeAdjustmentLossACListValues);
		System.out.println("PrimaryACListValues Actual                  : " +actPrimaryACListValues);
		System.out.println("PrimaryACListValues Expected                : " +expPrimaryACListValues);
		System.out.println("defaultCurrencyListValues Actual            : " +actdefaultCurrencyListValues);
		System.out.println("defaultCurrencyListValues Expected          : " +expdefaultCurrencyListValues);
	
		if(actSummaryErrorMessage==expSummaryErrorMessage && actmasterNewSettingsTabList.equalsIgnoreCase(expmasterNewSettingsTabList)
				&& actexchangeAdjustmentGainACListValues.equalsIgnoreCase(expexchangeAdjustmentGainACListValues)
				&& actexchangeAdjustmentLossACListValues.equalsIgnoreCase(expexchangeAdjustmentLossACListValues)
				&& actPrimaryACListValues.equalsIgnoreCase(expPrimaryACListValues) && actdefaultCurrencyListValues.equalsIgnoreCase(expdefaultCurrencyListValues)
				&& actmethod==true)
		{
			excelReader.setCellData(xlfile, xlSheetName, 53, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 53, 9, resFail);
			return false;
	    }
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 53, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    } 
  }
  
 
  @FindBy(xpath="//*[@id='newMasterDiv2']/div/div/div[1]/label/a")
  private static List<WebElement> masterNewDetailsTabList;
  
  public static boolean checkDetailsTabFieldsAvailabilityOnClickOnDetailsTabInAccountsMasterCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************** checkDetailsTabFieldsAvailabilityOnClickOnDetailsTabInAccountsMasterCreationPage Method Executes............ *****************");
    
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsTab));
		headerDetailsTab.click();
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Header Details Tab Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addressTxt));

		int masterNewDetailsTabListCount=masterNewDetailsTabList.size();
    	
    	ArrayList<String> masterNewDetailsTabListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterNewDetailsTabListCount;i++)
    	{
    		String data=masterNewDetailsTabList.get(i).getText();
    		masterNewDetailsTabListArray.add(data);
    	}
    	
    	String actmasterNewDetailsTabList=masterNewDetailsTabListArray.toString();
    	
    	String expmasterNewDetailsTabList=excelReader.getCellData(xlSheetName, 60, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 60, 8, actmasterNewDetailsTabList); 
    	
		// CITY 1
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cityTxt));
		cityTxt.click();
		cityTxt.sendKeys(Keys.SPACE);
	
		boolean actcity1EmptyList                        = city1EmptyList.getText().isEmpty();
		boolean expcity1EmptyList                        = true;
	
		// CITY 2
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(city2Text));
		city2Text.click();
		city2Text.sendKeys(Keys.SPACE);
	
		boolean actcity2EmptyList                       = city2EmptyList.getText().isEmpty();
		boolean expcity2EmptyList                       = true;
		
		boolean actmethod=actcity1EmptyList==expcity1EmptyList && actcity2EmptyList==expcity2EmptyList;

		String actResult=Boolean.toString(actmethod);

		excelReader.setCellData(xlfile, xlSheetName, 59, 8, actResult.toUpperCase());

		System.err.println("City 1 Value Actual              : " + actcity1EmptyList + " Value Expected : " + expcity1EmptyList);
		System.err.println("City 2 Value Actual              : " + actcity2EmptyList + " Value Expected : " + expcity2EmptyList);
		System.out.println("masterNewDetailsTabList Actual   : "+actmasterNewDetailsTabList);
    	System.out.println("masterNewDetailsTabList Expected : "+expmasterNewDetailsTabList);
	
		if (actSummaryErrorMessage==expSummaryErrorMessage && actmasterNewDetailsTabList.equalsIgnoreCase(expmasterNewDetailsTabList)
				&& actmethod==true)
		{
			excelReader.setCellData(xlfile, xlSheetName, 59, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 59, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 59, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    } 
  }
  
  
  @FindBy(xpath="//*[@id='tblNewMasterGenerator']/thead/tr/th/label")
  private static List<WebElement> masterNewprintLayoutTabList;
  

  public static boolean checkPrintLayoutTabFieldsAvailabilityOnClickOnPrintLayoutTabInAccountsMasterCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("*************** checkPrintLayoutTabFieldsAvailabilityOnClickOnPrintLayoutTabInAccountsMasterCreationPage Method Executes............ *****************");

	try
	{		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerPrintLayoutTab));
		headerPrintLayoutTab.click();

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Print Layout Tab Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridVoucherTypeTxt));
		
		int masterNewprintLayoutTabListCount=masterNewprintLayoutTabList.size();
    	
    	ArrayList<String> masterNewprintLayoutTabListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterNewprintLayoutTabListCount;i++)
    	{
    		String data=masterNewprintLayoutTabList.get(i).getText();
    		masterNewprintLayoutTabListArray.add(data);
    	}
    	
    	String actmasterNewprintLayoutTabList=masterNewprintLayoutTabListArray.toString();
    	
    	String expmasterNewprintLayoutTabList=excelReader.getCellData(xlSheetName, 62, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 62, 8, actmasterNewprintLayoutTabList); 
    	
    	System.out.println("masterNewprintLayoutTabList Actual   : "+actmasterNewprintLayoutTabList);
    	System.out.println("masterNewprintLayoutTabList Expected : "+expmasterNewprintLayoutTabList);

		if(actSummaryErrorMessage==expSummaryErrorMessage && actmasterNewprintLayoutTabList.equalsIgnoreCase(expmasterNewprintLayoutTabList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 61, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 61, 9, resFail);
			return false;
		}
	}  
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 61, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    } 
  }
  
    
  public static boolean checkAccountSaveOnInputAndClickOnSaveButtonInMasterCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************* checkAccountSaveOnInputAndClickOnSaveButtonInMasterCreationPage Method Executes............ *******************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 71, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 72, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 73, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);
		////Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditLimitTxt));
		creditLimitTxt.sendKeys(excelReader.getCellData(xlSheetName, 74, 6));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditLimitTxt));
		creditLimitTxt.sendKeys(Keys.TAB);
		////Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditdaysTxt));
		creditdaysTxt.sendKeys(excelReader.getCellData(xlSheetName, 75, 6));
		creditdaysTxt.sendKeys(Keys.TAB);
		////Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeDiscountLimitTxt));
		chequeDiscountLimitTxt.sendKeys(excelReader.getCellData(xlSheetName, 76, 6));
		chequeDiscountLimitTxt.sendKeys(Keys.TAB);
		////Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateofinterestTxt));
		rateofinterestTxt.sendKeys(excelReader.getCellData(xlSheetName, 77, 6));

		nameTxt.click();
		////Thread.sleep(2000);

	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));
		extraFields_CreateTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));
		addGroupCreateCreateTab_ExtraFieldUpdate.click();
		addGroupCreateCreateTab_ExtraFieldUpdate.sendKeys(excelReader.getCellData(xlSheetName, 78, 6));
*/		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Before Click on Save Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expSaveMessage = excelReader.getCellData(xlSheetName, 72, 7);	
		boolean actSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveAccountMessage = true;
		
		String actResult = Boolean.toString(actSaveAccountMessage);

		System.out.println("Click on Save With Valid Information Value Actual : " + actSaveAccountMessage + "  Value Expected : " + expSaveAccountMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 71, 8, actResult.toUpperCase());

		if (actSummaryErrorMessage==expSummaryErrorMessage && actSaveAccountMessage==expSaveAccountMessage) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 71, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 71, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 71, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    } 
 }
  
  
  
  public static boolean checkCloseAccountsCreationPageOnClickOnCloseButtonInAccountsCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************* checkCloseAccountsCreationPageOnClickOnCloseButtonInAccountsCreationPage Method Executes............ ************************");

	try
	{
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		 closeBtn.click();

		 boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		 boolean expSummaryErrorMessage  = true;

		 System.out.println("Click on Close in Master Creation Page Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCreationNameOfLane1));
		 
		 int masterGridBodyListCount=masterGridBodyRowCount.size();
	    	
	    	
		 ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
		 
		 for (int i=0;i<masterGridBodyListCount;i++)
		 {
			 String masterGridBodyNamedata        =masterGridBodyName.get(i).getText();
			 String masterGridBodyCodedata        =masterGridBodyCode.get(i).getText();
			 String masterGridBodyAccountTypedata =masterGridBodyAccountType.get(i).getText();
			 
			 
			 masterGridBodyListArray.add(masterGridBodyNamedata);
			 masterGridBodyListArray.add(masterGridBodyCodedata);
			 masterGridBodyListArray.add(masterGridBodyAccountTypedata);
		 }	
	    	
		 String actmasterGridBodyList=masterGridBodyListArray.toString();
		 
		 String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 80, 7);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 80, 8, actmasterGridBodyList);
		 
		 System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
		 System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);
	    	
	     if(actSummaryErrorMessage==expSummaryErrorMessage && actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 79, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 79, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 79, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    } 
 }

	@FindBy(xpath = "/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td/div/table/tbody/tr[1]/td[8]/div[1]/label/input")
	public static WebElement firstRowSelect;
  
  //Editing the Account in the Accounts Master
  public static boolean checkClickOnAccountSavedCheckBoxToCheckInAccountsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************** checkAccountMasterSavedInfomationDetailsOnClickOnEditInAccountsMasterPage Method Executes............  ********************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBox));
		accountFirstCheckBox.click();
		
		boolean actSelectedMasterSearchCheckbox = firstRowSelect.isSelected();
		boolean expSelectedMasterSearchCheckbox = true;
		
		String actResult = Boolean.toString(actSelectedMasterSearchCheckbox);
		
		excelReader.setCellData(xlfile, xlSheetName, 81, 8, actResult.toUpperCase());

		System.out.println("Account Name Check as Checked Value Actual           :" + actSelectedMasterSearchCheckbox+ "     Value Expected : " + expSelectedMasterSearchCheckbox);
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Check Box Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		

		if (actSelectedMasterSearchCheckbox==actSelectedMasterSearchCheckbox 
				&& actSummaryErrorMessage==expSummaryErrorMessage) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 81, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 81, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 81, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    } 
  }
  
  
  //Editing the Account in the Accounts Master
  public static boolean checkAccountMasterSavedInfomationDetailsOnClickOnEditInAccountsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************** checkAccountMasterSavedInfomationDetailsOnClickOnEditInAccountsMasterPage Method Executes............  ********************");
	
	try
	{		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Edit Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		Select oSelect                           = new Select(accountTypeDropdown);
		String actAccountMasterType              = oSelect.getFirstSelectedOption().getText();

		String actAccountMasterName              = nameTxt.getAttribute("value");
		String actAccountMasteCode               = codeTxt.getAttribute("value");

		codeTxt.click();
		codeTxt.sendKeys(Keys.TAB);

		String actAccountMasterCreditLimit       = creditLimitTxt.getAttribute("value");
		String actAccountMasterCreditDays        = creditdaysTxt.getAttribute("value");
		String actAccountMasterChequeDiscount    = chequeDiscountLimitTxt.getAttribute("value");
		String actAccountMasterRateOfInterest    = rateofinterestTxt.getAttribute("value");

	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));
		extraFields_CreateTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));
		String actAccountMasterExtraFieldUpdate  = addGroupCreateCreateTab_ExtraFieldUpdate.getAttribute("value");
*/
		String expAccountMasterName              = excelReader.getCellData(xlSheetName, 83, 7);
		String expAccountMasteCode               = excelReader.getCellData(xlSheetName, 84, 7);
		String expAccountMasterType              = excelReader.getCellData(xlSheetName, 85, 7);
		String expAccountMasterCreditLimit       = excelReader.getCellData(xlSheetName, 86, 7);
		String expAccountMasterCreditDays        = excelReader.getCellData(xlSheetName, 87, 7);
		String expAccountMasterChequeDiscount    = excelReader.getCellData(xlSheetName, 88, 7);
		String expAccountMasterRateOfInterest    = excelReader.getCellData(xlSheetName, 89, 7);
		//String expAccountMasterExtraFieldUpdate  = excelReader.getCellData(xlSheetName, 90, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 83, 8, actAccountMasterName);
		excelReader.setCellData(xlfile, xlSheetName, 84, 8, actAccountMasteCode);
		excelReader.setCellData(xlfile, xlSheetName, 85, 8, actAccountMasterType);
		excelReader.setCellData(xlfile, xlSheetName, 86, 8, actAccountMasterCreditLimit);
		excelReader.setCellData(xlfile, xlSheetName, 87, 8, actAccountMasterCreditDays);
		excelReader.setCellData(xlfile, xlSheetName, 88, 8, actAccountMasterChequeDiscount);
		excelReader.setCellData(xlfile, xlSheetName, 89, 8, actAccountMasterRateOfInterest);
		//excelReader.setCellData(xlfile, xlSheetName, 90, 8, actAccountMasterExtraFieldUpdate);

		System.out.println("Edit Name Value Actual                : " + actAccountMasterName+             " Value Expected : " + expAccountMasterName);
		System.out.println("Edit Code Value Actual                : " + actAccountMasteCode+              " Value Expected : " + expAccountMasteCode);
		System.out.println("Edit Type Value Actual                : " + actAccountMasterType+             " Value Expected : " + expAccountMasterType);
		System.out.println("Edit Credit Limit Value Actual        : " + actAccountMasterCreditLimit+      " Value Expected : " + expAccountMasterCreditLimit);
		System.out.println("Edit Credit Days Value Actual         : " + actAccountMasterCreditDays+       " Value Expected : " + expAccountMasterCreditDays);
        System.out.println("Edit Cheque Discount Value Actual     : " + actAccountMasterChequeDiscount+   " Value Expected : " + expAccountMasterChequeDiscount);
		System.out.println("Edit Rate Of Interest Value Actual    : " + actAccountMasterRateOfInterest+   " Value Expected : " + expAccountMasterRateOfInterest);
		//System.out.println("Edit Extra Field Update Value Actual  : " + actAccountMasterExtraFieldUpdate+ " Value Expected : " + expAccountMasterExtraFieldUpdate);

		if (actSummaryErrorMessage==expSummaryErrorMessage
			    && actAccountMasterName.equalsIgnoreCase(expAccountMasterName)
				&& actAccountMasteCode.equalsIgnoreCase(expAccountMasteCode)
				&& actAccountMasterType.equalsIgnoreCase(expAccountMasterType)
				&& actAccountMasterCreditLimit.equalsIgnoreCase(expAccountMasterCreditLimit)
				&& actAccountMasterCreditDays.equalsIgnoreCase(expAccountMasterCreditDays)
				&& actAccountMasterChequeDiscount.equalsIgnoreCase(expAccountMasterChequeDiscount)
				&& actAccountMasterRateOfInterest.equalsIgnoreCase(expAccountMasterRateOfInterest)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 82, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 82, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 82, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
  }
  
 
  public static boolean checkUpdatingAccountInformationOnClickSaveButtonInAccountsCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("*************** checkUpdatingAccountInformationOnClickSaveButtonInAccountsCreationPage Method Executes............ *********************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 91, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 92, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 93, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);
		////Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditLimitTxt));
		creditLimitTxt.sendKeys(excelReader.getCellData(xlSheetName, 94, 6));

		getAction().moveToElement(creditLimitTxt).sendKeys(Keys.TAB).perform();
		////Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditdaysTxt));
		creditdaysTxt.sendKeys(excelReader.getCellData(xlSheetName, 95, 6));
		creditdaysTxt.sendKeys(Keys.TAB);
		////Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeDiscountLimitTxt));
		chequeDiscountLimitTxt.sendKeys(excelReader.getCellData(xlSheetName, 96, 6));
		chequeDiscountLimitTxt.sendKeys(Keys.TAB);
		////Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateofinterestTxt));
		rateofinterestTxt.sendKeys(excelReader.getCellData(xlSheetName, 97, 6));

		nameTxt.click();
		////Thread.sleep(2000);

	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));
		extraFields_CreateTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));
		addGroupCreateCreateTab_ExtraFieldUpdate.click();
		addGroupCreateCreateTab_ExtraFieldUpdate.sendKeys(excelReader.getCellData(xlSheetName, 98, 6));
*/		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Before Update Account Master Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

		//String actSaveMessage = validationConfirmationMessage.getText();
		
		String expSaveMessage = excelReader.getCellData(xlSheetName, 92, 7);
		
		boolean actMessageOnUpdateAccount=checkValidationMessageboolean(expSaveMessage);
        boolean expMessageOnUpdateAccount=true;
        
        String actResult = Boolean .toString(actMessageOnUpdateAccount);
        
        excelReader.setCellData(xlfile, xlSheetName, 91, 8, actResult.toUpperCase());
			
		System.out.println("Click on Save With Valid Information Value Actual  : " + actMessageOnUpdateAccount + "  Value Expected : " + expMessageOnUpdateAccount);

		if (actSummaryErrorMessage==actSummaryErrorMessage
				&& actMessageOnUpdateAccount==expMessageOnUpdateAccount) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 91, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 91, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 91, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
 }
  
  
  public static boolean checkAccountUpdatedInformationDisplayInMasterDisplayTableOfMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("*************** checkAccountUpdatedInformationDisplayInMasterDisplayTableOfMastersPage Method Executes............ *************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationNameOfLane1));

		int masterGridBodyListCount=masterGridBodyRowCount.size();
    	
    	
    	ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterGridBodyListCount;i++)
    	{
    		String masterGridBodyNamedata        =masterGridBodyName.get(i).getText();
    		String masterGridBodyCodedata        =masterGridBodyCode.get(i).getText();
    		String masterGridBodyAccountTypedata =masterGridBodyAccountType.get(i).getText();
    		
    		
    		masterGridBodyListArray.add(masterGridBodyNamedata);
    		masterGridBodyListArray.add(masterGridBodyCodedata);
    		masterGridBodyListArray.add(masterGridBodyAccountTypedata);
    	}
    	
    	String actmasterGridBodyList=masterGridBodyListArray.toString();
		 
		String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 100, 7);
		 
		excelReader.setCellData(xlfile, xlSheetName, 100, 8, actmasterGridBodyList);
	
		boolean actSelectedMasterSearchCheckbox = firstRowSelect.isSelected();
		boolean expSelectedMasterSearchCheckbox = true;
		
		String actResult = Boolean.toString(actSelectedMasterSearchCheckbox);
		
		excelReader.setCellData(xlfile, xlSheetName, 99, 8, actResult.toUpperCase());

		System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
		System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);
		System.out.println("Account Master Update, Account Check box as Check Value Actual :" + actSelectedMasterSearchCheckbox+ "Value Expected : " + expSelectedMasterSearchCheckbox);
		
		
		if (actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 99, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 99, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 99, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
 }
  
  
  //Editing the Account in the Accounts Master
  public static boolean checkClickOnSavedAccountCheckBoxToUnCheckInAccountsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************** checkAccountMasterSavedInfomationDetailsOnClickOnEditInAccountsMasterPage Method Executes............  ********************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBox));
		accountFirstCheckBox.click();
		
		boolean actSelectedMasterSearchCheckbox = firstRowSelect.isSelected();
		boolean expSelectedMasterSearchCheckbox = false;

		System.out.println("Account Name Check as Un Checked Value Actual :" + actSelectedMasterSearchCheckbox+ "     Value Expected : " + expSelectedMasterSearchCheckbox);
			
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
		String actResult = Boolean.toString(actSelectedMasterSearchCheckbox==actSelectedMasterSearchCheckbox);
		
		excelReader.setCellData(xlfile, xlSheetName, 101, 8, actResult.toUpperCase());
		
		System.out.println("Click on Check Box Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		if (actSelectedMasterSearchCheckbox==actSelectedMasterSearchCheckbox 
				&& actSummaryErrorMessage==expSummaryErrorMessage) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 101, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 101, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 101, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
  }
  
  

 // Editing the Update Account
 public static boolean checkUpdateAcountInformationForUpdateAccountInAccountsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************ checkUpdateAcountInformationForUpdateAccount Method Executes............ ***********************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBox));
		accountFirstCheckBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		Select oSelect                          = new Select(accountTypeDropdown);
		String actAccountMasterType             = oSelect.getFirstSelectedOption().getText();

		String actAccountMasterName             = nameTxt.getAttribute("value");
		String actAccountMasteCode              = codeTxt.getAttribute("value");

		String actAccountMasterCreditLimit      = creditLimitTxt.getAttribute("value");
		String actAccountMasterCreditDays       = creditdaysTxt.getAttribute("value");
		String actAccountMasterChequeDiscount   = chequeDiscountLimitTxt.getAttribute("value");
		String actAccountMasterRateOfInterest   = rateofinterestTxt.getAttribute("value");

	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));
		extraFields_CreateTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));
		String actAccountMasterExtraFieldUpdate = addGroupCreateCreateTab_ExtraFieldUpdate.getAttribute("value");
	*/	
		
		String expAccountMasterName              = excelReader.getCellData(xlSheetName, 103, 7);
		String expAccountMasteCode               = excelReader.getCellData(xlSheetName, 104, 7);
		String expAccountMasterType              = excelReader.getCellData(xlSheetName, 105, 7);
		String expAccountMasterCreditLimit       = excelReader.getCellData(xlSheetName, 106, 7);
		String expAccountMasterCreditDays        = excelReader.getCellData(xlSheetName, 107, 7);
		String expAccountMasterChequeDiscount    = excelReader.getCellData(xlSheetName, 108, 7);
		String expAccountMasterRateOfInterest    = excelReader.getCellData(xlSheetName, 109, 7);
	//	String expAccountMasterExtraFieldUpdate  = excelReader.getCellData(xlSheetName, 110, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 103, 8, actAccountMasterName);
		excelReader.setCellData(xlfile, xlSheetName, 104, 8, actAccountMasteCode);
		excelReader.setCellData(xlfile, xlSheetName, 105, 8, actAccountMasterType);
		excelReader.setCellData(xlfile, xlSheetName, 106, 8, actAccountMasterCreditLimit);
		excelReader.setCellData(xlfile, xlSheetName, 107, 8, actAccountMasterCreditDays);
		excelReader.setCellData(xlfile, xlSheetName, 108, 8, actAccountMasterChequeDiscount);
		excelReader.setCellData(xlfile, xlSheetName, 109, 8, actAccountMasterRateOfInterest);
		//excelReader.setCellData(xlfile, xlSheetName, 110, 8, actAccountMasterExtraFieldUpdate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloseBtn));
		editcloseBtn.click();
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Close in Edit Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);

		int masterGridBodyListCount=masterGridBodyRowCount.size();
    	
    	
    	ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterGridBodyListCount;i++)
    	{
    		String masterGridBodyNamedata        =masterGridBodyName.get(i).getText();
    		String masterGridBodyCodedata        =masterGridBodyCode.get(i).getText();
    		String masterGridBodyAccountTypedata =masterGridBodyAccountType.get(i).getText();
    		
    		
    		masterGridBodyListArray.add(masterGridBodyNamedata);
    		masterGridBodyListArray.add(masterGridBodyCodedata);
    		masterGridBodyListArray.add(masterGridBodyAccountTypedata);
    	}
    	
    	String actmasterGridBodyList=masterGridBodyListArray.toString();
		 
		 String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 111, 7);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 111, 8, actmasterGridBodyList);
		 
		 System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
		 System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);

		System.out.println("Update Name Value Actual                : " + actAccountMasterName+             " Value Expected : " + expAccountMasterName);
		System.out.println("Update Code Value Actual                : " + actAccountMasteCode+              " Value Expected : " + expAccountMasteCode);
		System.out.println("Update Type Value Actual                : " + actAccountMasterType+             " Value Expected : " + expAccountMasterType);
		System.out.println("Update Credit Limit Value Actual        : " + actAccountMasterCreditLimit+      " Value Expected : " + expAccountMasterCreditLimit);
		System.out.println("Update Credit Days Value Actual         : " + actAccountMasterCreditDays+       " Value Expected : " + expAccountMasterCreditDays);
		System.out.println("Update Cheque Discount Value Actual     : " + actAccountMasterChequeDiscount+   " Value Expected : " + expAccountMasterChequeDiscount);
		System.out.println("Update Rate Of Interest Value Actual    : " + actAccountMasterRateOfInterest+   " Value Expected : " + expAccountMasterRateOfInterest);
		//System.out.println("Update Extra Field Update Value Actual  : " + actAccountMasterExtraFieldUpdate+ " Value Expected : " + expAccountMasterExtraFieldUpdate);
	

		if (actAccountMasterName.equalsIgnoreCase(expAccountMasterName)
				&& actAccountMasteCode.equalsIgnoreCase(expAccountMasteCode)
				&& actAccountMasterType.equalsIgnoreCase(expAccountMasterType)
				&& actAccountMasterCreditLimit.equalsIgnoreCase(expAccountMasterCreditLimit)
				&& actAccountMasterCreditDays.equalsIgnoreCase(expAccountMasterCreditDays)
				&& actAccountMasterChequeDiscount.equalsIgnoreCase(expAccountMasterChequeDiscount)
				&& actAccountMasterRateOfInterest.equalsIgnoreCase(expAccountMasterRateOfInterest)
				//&& actAccountMasterExtraFieldUpdate.equalsIgnoreCase(expAccountMasterExtraFieldUpdate)
				&& actSummaryErrorMessage==expSummaryErrorMessage
				&& actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 102, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 102, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 102, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
  }


 

  @FindBy(xpath = "/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td/div/table/tbody/tr/td[8]/div[1]/label/input")
  public static WebElement firstRowSelectUnderGroup;
 
  // To Delete Account
  public static boolean checkSeclectAccountAndDeleteOptionInMasterPage()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************** checkDeleteAccountBeforeCustomization Method Executes............  *************************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		boolean actSelectedMasterSearchCheckbox = accountFirstCheckBoxToSelection.isSelected();
		boolean expSelectedMasterSearchCheckbox = false;
		
		if(actSelectedMasterSearchCheckbox==expSelectedMasterSearchCheckbox)
		{
			accountFirstCheckBoxToSelection.click();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
		masterDeleteBtn.click();
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
		String actGetMsgOnDeleteButton = getMsgOnDelete.getText();
		String expGetMsgOnDeleteButton = excelReader.getCellData(xlSheetName, 113, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 113, 8, actGetMsgOnDeleteButton);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
		clickOnOkInDelete.click();
		
		String actValidationDisplayMessage = validationUpdatingConfirmationMessage.getText();
      
		String expValidationDisplayMessage = excelReader.getCellData(xlSheetName, 114, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 114, 8, actValidationDisplayMessage);
		
		boolean actDeleteDisplayMessageOkIsClicked = checkValidationMessageboolean(expValidationDisplayMessage);
		boolean expDeleteDisplayMessageOkIsClicked = true;
		
		String actResult = Boolean.toString(actDeleteDisplayMessageOkIsClicked);
		
		excelReader.setCellData(xlfile, xlSheetName, 112, 8, actResult.toUpperCase());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationNameOfLane1));
		
		int masterGridBodyListCount=masterGridBodyRowCount.size();
    	
    	
    	ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterGridBodyListCount;i++)
    	{
    		String masterGridBodyNamedata        =masterGridBodyName.get(i).getText();
    		String masterGridBodyCodedata        =masterGridBodyCode.get(i).getText();
    		String masterGridBodyAccountTypedata =masterGridBodyAccountType.get(i).getText();
    		
    		
    		masterGridBodyListArray.add(masterGridBodyNamedata);
    		masterGridBodyListArray.add(masterGridBodyCodedata);
    		masterGridBodyListArray.add(masterGridBodyAccountTypedata);
    	}
    	
    	String actmasterGridBodyList=masterGridBodyListArray.toString();
		 
		String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 115, 7);
		 
		excelReader.setCellData(xlfile, xlSheetName, 115, 8, actmasterGridBodyList);
		 
		System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
		System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);
		System.out.println("Check The account Check Box is Check Value Actual        : " + actSelectedMasterSearchCheckbox + " Value Expected : " + expSelectedMasterSearchCheckbox);
		System.out.println("Click On Delete Button Is Any Error Message Value Actual : " + actSummaryErrorMessage          + " Value Expected : " + expSummaryErrorMessage);
		System.out.println("Check Alert Message On Click Delete Accounts             : " + actGetMsgOnDeleteButton         + "  Value Expected : " + expGetMsgOnDeleteButton);
		System.out.println("Confirmation Message and Close Button display            : " + actValidationDisplayMessage     + "  Value Expected : " + expValidationDisplayMessage);

		if(actSummaryErrorMessage==actSummaryErrorMessage && actValidationDisplayMessage.equalsIgnoreCase(expValidationDisplayMessage)
				&& actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 112, 9, resPass);
			return true;
		}	
		else
		{	
			excelReader.setCellData(xlfile, xlSheetName, 112, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 112, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
  }

  public static boolean checkDeleteAccountMasterNotDisplayInAccountGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("****************************** checkDeleteAccountMasterNotDisplayInAccountGrid Method Executes............  *********************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationNameOfLane1));

		int masterGridBodyListCount=masterGridBodyRowCount.size();
    	
    	
    	ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterGridBodyListCount;i++)
    	{
    		String masterGridBodyNamedata        =masterGridBodyName.get(i).getText();
    		String masterGridBodyCodedata        =masterGridBodyCode.get(i).getText();
    		String masterGridBodyAccountTypedata =masterGridBodyAccountType.get(i).getText();
    		
    		
    		masterGridBodyListArray.add(masterGridBodyNamedata);
    		masterGridBodyListArray.add(masterGridBodyCodedata);
    		masterGridBodyListArray.add(masterGridBodyAccountTypedata);
    	}
    	
    	String actmasterGridBodyList=masterGridBodyListArray.toString();
		 
		String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 117, 7);
		 
		excelReader.setCellData(xlfile, xlSheetName, 117, 8, actmasterGridBodyList);
		 
		System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
		System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);

		if(actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 116, 9, resPass);
			return true;
		}	
		else
		{	
			excelReader.setCellData(xlfile, xlSheetName, 116, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 116, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
 }
  
  /*
  public boolean checkSaveCOGSAccount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
     excelReader = new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     System.out.println("********************* checkSaveCOGSAccount Method Executes.............   *****************************");

     try
     {
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCreationNameOfLane1));
        masterCreationNameOfLane1.click();
	
     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
     	masterNewBtn.click();
    	
     	//COGS POSTING ACC
     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 118, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 119, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 120, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

        String expSaveMessage = excelReader.getCellData(xlSheetName, 119, 7);
		
		boolean actSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveAccountMessage = true;

		//Thread.sleep(3000);
     
     	//BR COGS ACC INV
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 121, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 122, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 123, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		boolean actSaveBRAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveBRAccountMessage = true;

		//Thread.sleep(3000);
		
     	//FIFO COGS ACC INV
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 124, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 125, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 126, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
     	
     	boolean actSaveFIFOAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveFIFOAccountMessage = true;

		//Thread.sleep(3000);
		
     	//WA COGS ACC INV
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 127, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 128, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 129, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
     	
     	boolean actSaveWAAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveWAAccountMessage = true;

		//Thread.sleep(3000);
		
     	//STD RATE COGS ACC INV
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 130, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 131, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 132, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
     	
    	boolean actSaveSRATEAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveSRATEAccountMessage = true;

		//Thread.sleep(3000);

		//SR COGS POSTING ACC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 133, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 134, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 135, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
     	
     	boolean actSaveSRAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveSRAccountMessage = true;

		//Thread.sleep(3000);
     	
    	//SHORTAGE COGS POSTING ACC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 136, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 137, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 138, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
     		
    	boolean actSaveSSAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveSSAccountMessage = true;

		//Thread.sleep(3000);
		
		//EXCESS COGS POSTING ACC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 139, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 140, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 141, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
	
		boolean actStockSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expStockSaveAccountMessage = true;

		//Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();


		int masterGridBodyListCount=masterGridBodyRowCount.size();
    	
    	
    	ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterGridBodyListCount;i++)
    	{
    		String masterGridBodyNamedata        =masterGridBodyName.get(i).getText();
    		String masterGridBodyCodedata        =masterGridBodyCode.get(i).getText();
    		String masterGridBodyAccountTypedata =masterGridBodyAccountType.get(i).getText();
    		
    		
    		masterGridBodyListArray.add(masterGridBodyNamedata);
    		masterGridBodyListArray.add(masterGridBodyCodedata);
    		masterGridBodyListArray.add(masterGridBodyAccountTypedata);
    	}
    	
    	String actmasterGridBodyList=masterGridBodyListArray.toString();
		 
		String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 120, 7);
		 
		boolean actMethod = actSaveAccountMessage==expSaveAccountMessage && actSaveBRAccountMessage==expSaveBRAccountMessage 
				 			&& actSaveFIFOAccountMessage==expSaveFIFOAccountMessage && actSaveWAAccountMessage==expSaveWAAccountMessage
				 			&& actSaveSRATEAccountMessage==expSaveSRATEAccountMessage && actSaveSRAccountMessage==expSaveSRAccountMessage 
				 			&& actSaveSSAccountMessage==expSaveSSAccountMessage && actStockSaveAccountMessage==expStockSaveAccountMessage ;
				 
		String actResult = Boolean.toString(actMethod);
		 
		excelReader.setCellData(xlfile, xlSheetName, 118, 8, actResult.toUpperCase());
		excelReader.setCellData(xlfile, xlSheetName, 120, 8, actmasterGridBodyList);
		 
		 
		System.out.println("masterGridBodyList Actual                   : "+actmasterGridBodyList);
		System.out.println("masterGridBodyList Expected                 : "+expmasterGridBodyList);
		System.out.println("COGS POSTING ACC Save Value Actual          : " + actSaveAccountMessage      + "  Value Expected : " + expSaveAccountMessage);
		System.out.println("BR COGS ACC INV ACC Save Value Actual       : " + actSaveBRAccountMessage    + "  Value Expected : " + expSaveBRAccountMessage);
		System.out.println("FIFO COGS ACC INV ACC Save Value Actual     : " + actSaveFIFOAccountMessage  + "  Value Expected : " + expSaveFIFOAccountMessage);
		System.out.println("WA COGS ACC INV ACC Save Value Actual       : " + actSaveWAAccountMessage    + "  Value Expected : " + expSaveWAAccountMessage);
		System.out.println("STD RATE COGS ACC INV ACC Save Value Actual : " + actSaveSRATEAccountMessage + "  Value Expected : " + expSaveSRATEAccountMessage);
		System.out.println("SR COGS POSTING ACC Save Value Actual       : " + actSaveSRAccountMessage    + "  Value Expected : " + expSaveSRAccountMessage);
		System.out.println("SHORTAGE COGS POSTING ACC Save Value Actual : " + actSaveSSAccountMessage    + "  Value Expected : " + expSaveSSAccountMessage);
		System.out.println("Stock Value Actual                          : " + actStockSaveAccountMessage + "  Value Expected : " + expStockSaveAccountMessage);
		
		if (actSaveAccountMessage==expSaveAccountMessage && actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 118, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 118, 9, resFail);
			return false;
		}
		
	  }
     catch (Exception e) 
     {
     	String exception =e.getMessage().substring(0, 100);
     	excelReader.setExceptionInExcel(xlfile, xlSheetName, 118, 10, exception);
     	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
     	return false;
     }
   }
 
  
  
  public boolean checkSaveAccountsByCreatingVATAccounts() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
     excelReader = new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     System.out.println("********************* checkSaveAccountsByCreatingVATAccounts Method Executes.............  *****************************");

     try
     {
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCreationNameOfLane1));
        masterCreationNameOfLane1.click();
	
     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
     	masterNewBtn.click();
    	
     	//VAT OUTPUT ACC
     	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 142, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 143, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 144, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
        
        String expSaveMessage = "Saved Successfully";
		
		boolean actSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveAccountMessage = true;

		Thread.sleep(3000);
     	//VAT ADVANCE SALE
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 145, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 146, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 147, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
     	
		boolean actSaveBRAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveBRAccountMessage = true;
		
     	
     	//VAT ADVANCE PURCHASE
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 148, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 149, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
	    //Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 150, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
     	
     	boolean actSaveFIFOAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveFIFOAccountMessage = true;
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();
		
		
		int masterGridBodyListCount=masterGridBodyRowCount.size();
    	
    	
    	ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterGridBodyListCount;i++)
    	{
    		String masterGridBodyNamedata        =masterGridBodyName.get(i).getText();
    		String masterGridBodyCodedata        =masterGridBodyCode.get(i).getText();
    		String masterGridBodyAccountTypedata =masterGridBodyAccountType.get(i).getText();
    		
    		
    		masterGridBodyListArray.add(masterGridBodyNamedata);
    		masterGridBodyListArray.add(masterGridBodyCodedata);
    		masterGridBodyListArray.add(masterGridBodyAccountTypedata);
    	}
    	
    	String actmasterGridBodyList=masterGridBodyListArray.toString();
		 
		String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 144, 7);
		 
		boolean actMethod = actSaveAccountMessage==expSaveAccountMessage && actSaveBRAccountMessage==expSaveBRAccountMessage 
				 			&& actSaveFIFOAccountMessage==expSaveFIFOAccountMessage;
				 
		String actResult = Boolean.toString(actMethod);
		 
		excelReader.setCellData(xlfile, xlSheetName, 142, 8, actResult.toUpperCase());
		excelReader.setCellData(xlfile, xlSheetName, 144, 8, actmasterGridBodyList);

		System.out.println("masterGridBodyList Actual              : " +actmasterGridBodyList);
		System.out.println("masterGridBodyList Expected            : " +expmasterGridBodyList);
		System.out.println("VAT OUTPUT ACC Save Value Actual       : " + actSaveAccountMessage     + "  Value Expected : " + expSaveAccountMessage);
		System.out.println("VAT ADVANCE SALE ACC Save Value Actual : " + actSaveBRAccountMessage   + "  Value Expected : " + expSaveBRAccountMessage);
		System.out.println("VAT ADVANCE PURCHASE Save Value Actual : " + actSaveFIFOAccountMessage + "  Value Expected : " + expSaveFIFOAccountMessage);
		
		if (actSaveAccountMessage==expSaveAccountMessage && actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 142, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 142, 9, resFail);
			return false;
		}
		
     }
     catch (Exception e) 
     {
     	String exception =e.getMessage().substring(0, 100);
     	excelReader.setExceptionInExcel(xlfile, xlSheetName, 142, 10, exception);
     	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
     	return false;
     }
   }
*/  
  
 
  public boolean checkClickOnCloseButtonInAccountMasterToCloseAccountsPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	System.out.println("******************************** checkClickOnCloseButtonInAccountMasterToCloseAccountsPage Method Executes.....  ******************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
		masterCloseBtn.click();
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click On Close Button To Close Accounts MasterIs Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 152, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 152, 8, actDashboardLabel);

		System.out.println("Click Close button In Accounts Master Value Actual  : " + actDashboardLabel+ "      Value Expected : " + expDashboardLabel);

		if (actSummaryErrorMessage==actSummaryErrorMessage
				&& actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 151, 9, resPass);
			System.out.println(" Test Pass: Close Button is working");
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 151, 9, resFail);
			System.out.println(" Test Fail: Close Button is not working");
			return false;
		}
	 }		
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 151, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
  }

  
  
  
  
 //CURRENCY EXCHANGE RATE PAGE STARTS
  
  
  @FindBy(xpath="//*[@id='navigation_menu']/li[1]/ul/li[3]/ul/li[2]/ul/li/a/span")
  private static List<WebElement> currencyMenuList;

  public boolean checkCurrencyMenuSubMenuBySelectingMastersFromHomeMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
  {
    excelReader = new ExcelReader(POJOUtility.getExcelPath());
    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
    
    System.out.println("*****************   checkCurrencyMenuSubMenuBySelectingMastersFromHomeMenu Method Executes.............    *************************");
  
    try
    {	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyMenu));
		currencyMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateHistoryMenu));
		
		int currencyMenuListCount = currencyMenuList.size();
		
		ArrayList<String> currencyMenuListArray = new ArrayList<String>();
		
		for (int i=0;i<currencyMenuListCount;i++)
		{
			String data = currencyMenuList.get(i).getText();
			currencyMenuListArray.add(data);
		}
		
		String actcurrencyMenuList = currencyMenuListArray.toString();
		String expcurrencyMenuList = excelReader.getCellData(xlSheetName, 155, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 155, 8, actcurrencyMenuList);
				
		System.out.println("currencyMenuList Actual   : "+actcurrencyMenuList);
		System.out.println("currencyMenuList Expected : "+expcurrencyMenuList);
		
		if (actcurrencyMenuList.equalsIgnoreCase(expcurrencyMenuList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 154, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 154, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 154, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
  }


  @FindBy(xpath="//*[@id='myNavbar']/ul/li/div/div[2]")
  private static List<WebElement> currencyRibbonControlList;
  
  @FindBy(xpath="//*[@id='currencyMasterWidth']/fieldset/div/div/div")
  private static List<WebElement> currencyDetailsList;
  
  @FindBy(xpath="//*[@id='currencyMasterWidth']/div/div/div/div")
  private static List<WebElement> roundingOffDetailsList;
  
  @FindBy(xpath="//*[@id='CurrencyMasterGridDiv']/label")
  private static WebElement denominationDetailsLabel;
  
  @FindBy(xpath="//*[@id='CurrencyMasterGrid_head']/tr/th/div")
  private static List<WebElement> denominationDetailsGridHeader;
  
  

 public static boolean checkClickOnCurrencyMasterMenuToDisplayCurrencyPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************** checkClickOnCurrencyMasterMenuToDisplayCurrencyPage Method Executes.............  *********************************");

	try 
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyMasterMenu));
		currencyMasterMenu.click();
		//Thread.sleep(2000);

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
        System.out.println("Opening Currency Master Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyMasterlabel));
        
		String actCuurencyMasterLabel      = currencyMasterlabel.getText();
		String expCuurencyMasterLabel      = excelReader.getCellData(xlSheetName, 157, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 157, 8, actCuurencyMasterLabel);
		
		int currencyRibbonControlListCount = currencyRibbonControlList.size();
		
		ArrayList<String> currencyRibbonControlListArray = new ArrayList<String>();
		
		for(int i=0;i<currencyRibbonControlListCount;i++)
		{
			String data = currencyRibbonControlList.get(i).getText();
			currencyRibbonControlListArray.add(data);
		}
		
		String actcurrencyRibbonControlList = currencyRibbonControlListArray.toString();
		String expcurrencyRibbonControlList = excelReader.getCellData(xlSheetName, 158, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 158, 8, actcurrencyRibbonControlList);
		
		int currencyDetailsListCount = currencyDetailsList.size();
		
		ArrayList<String> currencyDetailsListArray = new ArrayList<String>();
		
		for(int i=0;i<currencyDetailsListCount;i++)
		{
			String data = currencyDetailsList.get(i).getText();
			currencyDetailsListArray.add(data);
		}
		
		String actcurrencyDetailsList = currencyDetailsListArray.toString();
		String expcurrencyDetailsList = excelReader.getCellData(xlSheetName, 159, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 159, 8, actcurrencyDetailsList);
		
		int roundingOffDetailsListCount = roundingOffDetailsList.size();
		
		ArrayList<String> roundingOffDetailsListArray = new ArrayList<String>();
		
		for(int i=0;i<roundingOffDetailsListCount;i++)
		{
			String data = roundingOffDetailsList.get(i).getText();
			roundingOffDetailsListArray.add(data);
		}
		
		String actroundingOffDetailsList = roundingOffDetailsListArray.toString();
		String exproundingOffDetailsList = excelReader.getCellData(xlSheetName, 160, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 160, 8, actroundingOffDetailsList);
		
		String actdenominationDetailsLabel      = denominationDetailsLabel.getText();
		String expdenominationDetailsLabel      = excelReader.getCellData(xlSheetName, 161, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 161, 8, actdenominationDetailsLabel);
		
		int denominationDetailsGridHeaderCount = denominationDetailsGridHeader.size();
		
		ArrayList<String> denominationDetailsGridHeaderArray = new ArrayList<String>();
		
		for(int i=0;i<denominationDetailsGridHeaderCount;i++)
		{
			String data = denominationDetailsGridHeader.get(i).getText();
			denominationDetailsGridHeaderArray.add(data);
		}
		
		String actdenominationDetailsGridHeader = denominationDetailsGridHeaderArray.toString();
		String expdenominationDetailsGridHeader = excelReader.getCellData(xlSheetName, 162, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 162, 8, actdenominationDetailsGridHeader);
		
		
		System.out.println("Currency Label Value Actual        : " + actCuurencyMasterLabel    + " Value Expected : " + expCuurencyMasterLabel);
		System.out.println("denominationDetailsLabel           : " + actdenominationDetailsLabel+ " Value Expected : " + expdenominationDetailsLabel);
		System.out.println("currencyRibbonControlList Actual   : " + actcurrencyRibbonControlList);
		System.out.println("currencyRibbonControlList Expected : " + expcurrencyRibbonControlList);
		System.out.println("currencyDetailsList Actual         : " + actcurrencyDetailsList);
		System.out.println("currencyDetailsList Expected       : " + expcurrencyDetailsList);
		System.out.println("roundingOffDetailsList Actual      : " + actroundingOffDetailsList);
		System.out.println("roundingOffDetailsList Expected    : " + exproundingOffDetailsList);
        

		if (actCuurencyMasterLabel.equalsIgnoreCase(expCuurencyMasterLabel) && actcurrencyRibbonControlList.equalsIgnoreCase(expcurrencyRibbonControlList)
				&& actcurrencyDetailsList.equalsIgnoreCase(expcurrencyDetailsList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 156, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 156, 9, resFail);
			return false;
		}
	} 
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 156, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
 }

 
 
 @FindBy(xpath="//div[@id='currencyMasterWidth']/fieldset/div")
 private static WebElement currencyDropdownSeventhRowValue ;
 
 @FindBy(xpath="//*[@id='ISOCurrencyCode_table_data_body']/tr/td")
 private static List<WebElement> isoCurrencyCodeComboList;
 
 
 
 
 public static boolean checkSaveOptionInCurrencyMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************** checkSaveOptionInCurrencyMaster Method Executes.............  *********************************");
	
	try
	{
		Thread.sleep(4000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ISOCurrencyCodeTxt));
		ISOCurrencyCodeTxt.click();
		Thread.sleep(2000);
		ISOCurrencyCodeTxt.sendKeys("INR");
		Thread.sleep(2000);
		ISOCurrencyCodeTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ISOCurrencyCodeTxt));
		ISOCurrencyCodeTxt.click();
		
	    		
		// Check The coins Code will be different as we will restore the backup

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noOfDecimalsTxtInCurrency));
		String actISOCurrencyCode             = ISOCurrencyCodeTxt.getAttribute("value");
		String actCoinsNameTxt                = coinsNameTxt.getAttribute("value");
		String actCurrencyNameTxt             = currencyNameTxt.getAttribute("value");
		String actRoundOff                    = generalRoundOffTxt.getAttribute("value");

	    Select roundTypeOptions               = new Select(roundingTypeDropdown);
		String actRoundingType                = roundTypeOptions.getFirstSelectedOption().getText();

		String actCurrencyMasterControlSymbol = controlSymbolDropdown.getAttribute("value");
		String actNoOfDecimals                = noOfDecimalsTxtInCurrency.getAttribute("value");

		String expISOCurrencyCode             = excelReader.getCellData(xlSheetName, 164, 7);
		String expCoinsNameTxt                = excelReader.getCellData(xlSheetName, 165, 7);
		String expCurrencyNameTxt             = excelReader.getCellData(xlSheetName, 166, 7);
		String expRoundOff                    = excelReader.getCellData(xlSheetName, 167, 7);
		String expRoundingType                = excelReader.getCellData(xlSheetName, 168, 7);
		String expCurrencyMasterControlSymbol = excelReader.getCellData(xlSheetName, 169, 7);
		String expNoOfDecimals                = excelReader.getCellData(xlSheetName, 170, 7);

		
		System.out.println("ISO Currency Value Actual                 : " + actISOCurrencyCode               + " Value Expected : " + expISOCurrencyCode);
		System.out.println("Coins Name Value Actual                   : " + actCoinsNameTxt                  + " Value Expected : " + expCoinsNameTxt);
		System.out.println("Currency Name Value Actual                : " + actCurrencyNameTxt               + " Value Expected : " + expCurrencyNameTxt);
	    System.out.println("Round Off Value Actual                    : " + actRoundOff                      + " Value Expected : " + expRoundOff);
		System.out.println("Round Type Value Actual                   : " + actRoundingType                  + " Value Expected : " + expRoundingType);
		System.out.println("Symbol Value Actual                       : " + actCurrencyMasterControlSymbol   + " Value Expected : " + expCurrencyMasterControlSymbol);
		System.out.println("No Of Decimals Value Actual               : " + actNoOfDecimals                  + " Value Expected : " + expNoOfDecimals);
		
		
		Thread.sleep(2000);
		
		
		//Save with SLL Currency Name
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ISOCurrencyCodeTxt));
		ISOCurrencyCodeTxt.click();
		Thread.sleep(2000);
		ISOCurrencyCodeTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		ISOCurrencyCodeTxt.sendKeys(Keys.BACK_SPACE);
		Thread.sleep(2000);
		ISOCurrencyCodeTxt.sendKeys(Keys.BACK_SPACE);
		Thread.sleep(2000);
		ISOCurrencyCodeTxt.sendKeys(Keys.BACK_SPACE);
		Thread.sleep(2000);
		ISOCurrencyCodeTxt.sendKeys("SLL");
		Thread.sleep(2000);
		ISOCurrencyCodeTxt.sendKeys(Keys.TAB);
	
		
		
		//ISOCurrencyCodeTxt.sendKeys(excelReader.getCellData(xlSheetName, 171, 6));
		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(coinsNameTxt));
		coinsNameTxt.sendKeys(Keys.TAB);
		
		
		
		coinsNameTxt.click();
		coinsNameTxt.sendKeys(Keys.HOME);
		coinsNameTxt.sendKeys(Keys.SHIFT, Keys.END);
		coinsNameTxt.sendKeys(excelReader.getCellData(xlSheetName, 171, 6));
		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(coinsNameTxt));
		coinsNameTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noOfDecimalsTxtInCurrency));
		noOfDecimalsTxtInCurrency.click();
		noOfDecimalsTxtInCurrency.sendKeys(Keys.HOME);
		noOfDecimalsTxtInCurrency.sendKeys(Keys.SHIFT, Keys.END);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noOfDecimalsTxtInCurrency));
		noOfDecimalsTxtInCurrency.sendKeys(excelReader.getCellData(xlSheetName, 164, 6));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noOfDecimalsTxtInCurrency));
		noOfDecimalsTxtInCurrency.sendKeys(Keys.TAB);

		boolean actAlertPresent = getIsAlertPresent();
		boolean expAlertPresent = true;

		getWaitForAlert();

		getAlert().accept();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveIcon));
		saveIcon.click();

		String expSaveCurrency = excelReader.getCellData(xlSheetName, 171, 7);

		boolean actSaveDisplayMessageOkIsClicked = checkValidationMessageboolean(expSaveCurrency);
		boolean expSaveDisplayMessageOkIsClicked = true;
		
		excelReader.setCellData(xlfile, xlSheetName, 164, 8, actISOCurrencyCode);
		excelReader.setCellData(xlfile, xlSheetName, 165, 8, actCoinsNameTxt);
		excelReader.setCellData(xlfile, xlSheetName, 166, 8, actCurrencyNameTxt);
		excelReader.setCellData(xlfile, xlSheetName, 167, 8, actRoundOff);
		excelReader.setCellData(xlfile, xlSheetName, 168, 8, actRoundingType);
		excelReader.setCellData(xlfile, xlSheetName, 169, 8, actCurrencyMasterControlSymbol);
		excelReader.setCellData(xlfile, xlSheetName, 170, 8, actNoOfDecimals);
		
		System.out.println("ISO Currency Value Actual                 : " + actISOCurrencyCode               + " Value Expected : " + expISOCurrencyCode);
		System.out.println("Coins Name Value Actual                   : " + actCoinsNameTxt                  + " Value Expected : " + expCoinsNameTxt);
		System.out.println("Currency Name Value Actual                : " + actCurrencyNameTxt               + " Value Expected : " + expCurrencyNameTxt);
	    System.out.println("Round Off Value Actual                    : " + actRoundOff                      + " Value Expected : "+ expRoundOff);
		System.out.println("Round Type Value Actual                   : " + actRoundingType                  + " Value Expected : " + expRoundingType);
		System.out.println("Symbol Value Actual                       : " + actCurrencyMasterControlSymbol   + " Value Expected : " + expCurrencyMasterControlSymbol);
		System.out.println("No Of Decimals Value Actual               : " + actNoOfDecimals                  + " Value Expected : " + expNoOfDecimals);
		System.out.println("Alert Is Display on Modify Value Actual   : " + actAlertPresent                  + " Value Expected : " + expAlertPresent);
		System.out.println("Save Currency Message Value Actual        : " + actSaveDisplayMessageOkIsClicked + " Value Expected : " + expSaveDisplayMessageOkIsClicked);

		if (actISOCurrencyCode.equalsIgnoreCase(expISOCurrencyCode) && actCoinsNameTxt.equalsIgnoreCase(expCoinsNameTxt)
				&& actCurrencyNameTxt.equalsIgnoreCase(expCurrencyNameTxt) && actRoundOff.equalsIgnoreCase(expRoundOff)
				&& actRoundingType.equalsIgnoreCase(expRoundingType)
				&& actCurrencyMasterControlSymbol.equalsIgnoreCase(expCurrencyMasterControlSymbol)
				&& actNoOfDecimals.equalsIgnoreCase(expNoOfDecimals)
				&& actSaveDisplayMessageOkIsClicked==expSaveDisplayMessageOkIsClicked) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 163, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 163, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 163, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }

 }

 public static boolean checkCurrencyUpdateInformationInCurrencyMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************** checkCurrencyUpdateInformationInCurrencyMaster Method Executes.............  *********************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ISOCurrencyCodeTxt));
		ISOCurrencyCodeTxt.click();
		ISOCurrencyCodeTxt.sendKeys("s");
		
		int isoCurrencyCodeComboListCount = isoCurrencyCodeComboList.size();
		
		ArrayList<String> isoCurrencyCodeComboListArray = new ArrayList<String>();
		
		for(int i=1;i<isoCurrencyCodeComboListCount;i++)
		{
			String data=isoCurrencyCodeComboList.get(i).getText();
			if(data.equalsIgnoreCase("SLL"))
			{
				isoCurrencyCodeComboList.get(i).click();
			}
		}
	
		ISOCurrencyCodeTxt.sendKeys(Keys.TAB);

		Thread.sleep(3999);
		
		// Check The coins Code will be different as we will restore the backup

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ISOCurrencyCodeTxt));
		String actISOCurrencyCode             = ISOCurrencyCodeTxt.getAttribute("value");
		String actCoinsNameTxt                = coinsNameTxt.getAttribute("value");
		String actCurrencyNameTxt             = currencyNameTxt.getAttribute("value");
		String actRoundOff                    = generalRoundOffTxt.getAttribute("value");

		Select roundTypeOptions               = new Select(roundingTypeDropdown);
		String actRoundingType                = roundTypeOptions.getFirstSelectedOption().getText();

		String actCurrencyMasterControlSymbol = controlSymbolDropdown.getAttribute("value");
		String actNoOfDecimals                = noOfDecimalsTxtInCurrency.getAttribute("value");

		String expISOCurrencyCode             = excelReader.getCellData(xlSheetName, 173, 7);
		String expCoinsNameTxt                = excelReader.getCellData(xlSheetName, 174, 7);
		String expCurrencyNameTxt             = excelReader.getCellData(xlSheetName, 175, 7);
		String expRoundOff                    = excelReader.getCellData(xlSheetName, 176, 7);
		String expRoundingType                = excelReader.getCellData(xlSheetName, 177, 7);
		String expCurrencyMasterControlSymbol = excelReader.getCellData(xlSheetName, 178, 7);
		String expNoOfDecimals                = excelReader.getCellData(xlSheetName, 179, 7);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(coinsNameTxt));
		coinsNameTxt.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(coinsNameTxt));
		coinsNameTxt.sendKeys(Keys.HOME);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(coinsNameTxt));
		coinsNameTxt.sendKeys(Keys.SHIFT, Keys.END);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(coinsNameTxt));
		coinsNameTxt.sendKeys(excelReader.getCellData(xlSheetName, 173, 7));
		////Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(coinsNameTxt));
		coinsNameTxt.sendKeys(Keys.TAB);
		////Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(coinsNameTxt));
		
		excelReader.setCellData(xlfile, xlSheetName, 173, 8, actISOCurrencyCode);
		excelReader.setCellData(xlfile, xlSheetName, 174, 8, actCoinsNameTxt);
		excelReader.setCellData(xlfile, xlSheetName, 175, 8, actCurrencyNameTxt);
		excelReader.setCellData(xlfile, xlSheetName, 176, 8, actRoundOff);
		excelReader.setCellData(xlfile, xlSheetName, 177, 8, actRoundingType);
		excelReader.setCellData(xlfile, xlSheetName, 178, 8, actCurrencyMasterControlSymbol);
		excelReader.setCellData(xlfile, xlSheetName, 179, 8, actNoOfDecimals);
		
		System.out.println("ISO Currency Value Actual                : " + actISOCurrencyCode+             " Value Expected : " + expISOCurrencyCode);
		System.out.println("Coins Name Value Actual                  : " + actCoinsNameTxt+                " Value Expected : " + expCoinsNameTxt);
		System.out.println("Currency Name Value Actual               : " + actCurrencyNameTxt+             " Value Expected : " + expCurrencyNameTxt);
		System.out.println("Round Off Value Actual                   : " + actRoundOff +                   " Value Expected : "+ expRoundOff);
		System.out.println("Round Type Value Actual                  : " + actRoundingType+                " Value Expected : " + expRoundingType);
		System.out.println("Symbol Value Actual                      : " + actCurrencyMasterControlSymbol+ " Value Expected : " + expCurrencyMasterControlSymbol);
		System.out.println("No Of Decimals Value Actual              : " + actNoOfDecimals+                " Value Expected : " + expNoOfDecimals);

		if (actISOCurrencyCode.equalsIgnoreCase(expISOCurrencyCode) && actCoinsNameTxt.equalsIgnoreCase(expCoinsNameTxt)
				&& actCurrencyNameTxt.equalsIgnoreCase(expCurrencyNameTxt) && actRoundOff.equalsIgnoreCase(expRoundOff)
				&& actRoundingType.equalsIgnoreCase(expRoundingType)
				&& actCurrencyMasterControlSymbol.equalsIgnoreCase(expCurrencyMasterControlSymbol)
				&& actNoOfDecimals.equalsIgnoreCase(expNoOfDecimals)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 172, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 172, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 172, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
 }	
  
  
	// Checking Exchange Rate Option in Currency Master
 
 @FindBy(xpath="//*[@id='divExchangeRate']/ul/li/span")
 private static List<WebElement> exchangeRateDefintionRibbonControlList;

  public static boolean checkClickOnExchangeRateOptionInCurrencyMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************************* checkClickOnExchangeRateOptionInCurrencyMaster *************************************************");	

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateIcon));
		exchangeRateIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionLabel));

		String actExchangeRateLabel   = exchangeRateDefinitionLabel.getText();
		String expExchangeRateLabel   = excelReader.getCellData(xlSheetName, 181, 7);
		
		int exchangeRateDefintionRibbonControlListCount = exchangeRateDefintionRibbonControlList.size();
		
		ArrayList<String> exchangeRateDefintionRibbonControlListArray = new ArrayList<String>();
		
		for(int i=0;i<exchangeRateDefintionRibbonControlListCount;i++)
		{
			String data=exchangeRateDefintionRibbonControlList.get(i).getText();
			exchangeRateDefintionRibbonControlListArray.add(data);
		}
		
		String actexchangeRateDefintionRibbonControlList=exchangeRateDefintionRibbonControlListArray.toString();
		String expexchangeRateDefintionRibbonControlList=excelReader.getCellData(xlSheetName, 182, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 181, 8, actExchangeRateLabel);
		excelReader.setCellData(xlfile, xlSheetName, 182, 8, actexchangeRateDefintionRibbonControlList);

		System.out.println("Exchange Rate Value Actual                      : " + actExchangeRateLabel+ "  Value Expected : " + expExchangeRateLabel);
		System.out.println("exchangeRateDefintionRibbonControlList Actual   : "+actexchangeRateDefintionRibbonControlList);
		System.out.println("exchangeRateDefintionRibbonControlList Expected : "+expexchangeRateDefintionRibbonControlList);
		
		if (actExchangeRateLabel.equalsIgnoreCase(expExchangeRateLabel) 
				&& actexchangeRateDefintionRibbonControlList.equalsIgnoreCase(expexchangeRateDefintionRibbonControlList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 180, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 180, 9, resFail);
			return false;
		}
		
	}
	catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 100);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 180, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    }
 }

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-1']")
	private static WebElement exchangeRateDefinitionCurrencyNameRow1Col1;
	
	@FindBy(xpath = "//*[@id='ExchangeTable_col_1-1']")
	private static WebElement exchangeRateDefinitionCurrencyNameRow1Col1q;
	
	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-1']")
	private static WebElement exchangeRateDefinitionCurrencyNameRow2Col1;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-2']")
	private static WebElement exchangeRateDefinitionDefinedAsRow1Col2;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-2']")
	private static WebElement exchangeRateDefinitionDefinedAsRow2Col2;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-3']")
	private static WebElement exchangeRateDefinitionRateRow1Col3;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-3']")
	private static WebElement exchangeRateDefinitionRateRow2Col3;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_1-4']")
	private static WebElement exchangeRateDefinitionDescriptionRow1Col4;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_2-4']")
	private static WebElement exchangeRateDefinitionDescriptionRow2Col4;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_3-1']")
	private static WebElement exchangeRateDefinitionCurrencyNameRow3Col1;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_4-1']")
	private static WebElement exchangeRateDefinitionCurrencyNameRow4Col1;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_3-2']")
	private static WebElement exchangeRateDefinitionDefinedAsRow3Col2;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_4-2']")
	private static WebElement exchangeRateDefinitionDefinedAsRow4Col2;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_3-3']")
	private static WebElement exchangeRateDefinitionRateRow3Col3;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_4-3']")
	private static WebElement exchangeRateDefinitionRateRow4Col3;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_3-4']")
	private static WebElement exchangeRateDefinitionDescriptionRow3Col4;

	@FindBy(xpath = "//td[@id='ExchangeTable_col_4-4']")
	private static WebElement exchangeRateDefinitionDescriptionRow4Col4;
	
	
	@FindBy(xpath="//*[@id='id_option_table_data_body']/tr/td")
	private static List<WebElement> baseCurrencyComboList;

	public static boolean checkValuesInSavedExchangeRateOptionInCurrencyMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

	  excelReader = new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	  System.out.println("******************************************************** checkValuesInSavedExchangeRateOptionInCurrencyMaster *****************************************************");
		
	  try
	  {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		baseCurrencyTxt.click();
		baseCurrencyTxt.sendKeys("i");
		
		int baseCurrencyComboListCount = baseCurrencyComboList.size();
		
		ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
		
		for(int i=1;i<baseCurrencyComboListCount;i++)
		{
			String data=baseCurrencyComboList.get(i).getText();
			if(data.equalsIgnoreCase("INR"))
			{
				baseCurrencyComboList.get(i).click();
			}
		}
	
		String actBaseCurrencyValue = baseCurrencyTxt.getAttribute("value");
		baseCurrencyTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
		withEffectiveDateTxt.click();

		String actWithEffectiveDate = withEffectiveDateTxt.getAttribute("value");
		//Thread.sleep(3000);

		String actCurrencyNameR1C1 = exchangeRateDefinitionCurrencyNameRow1Col1.getText();
		String actCurrencyNameR2C1 = exchangeRateDefinitionCurrencyNameRow2Col1.getText();

		String actCurrencyDefinedAsR1C2 = exchangeRateDefinitionDefinedAsRow1Col2.getText();
		String actCurrencyDefinedAsR2C2 = exchangeRateDefinitionDefinedAsRow2Col2.getText();

		String actCurrencyRateR1C3 = exchangeRateDefinitionRateRow1Col3.getText();
		String actCurrencyRateR2C3 = exchangeRateDefinitionRateRow2Col3.getText();

		String actCurrencyDescriptionR1C4 = exchangeRateDefinitionDescriptionRow1Col4.getText();
		String actCurrencyDescriptionR2C4 = exchangeRateDefinitionDescriptionRow2Col4.getText();

		String expBaseCurrencyValue = excelReader.getCellData(xlSheetName, 184, 7);

		String expCurrencyNameR1C1 = excelReader.getCellData(xlSheetName, 185, 7);
		String expCurrencyNameR2C1 = excelReader.getCellData(xlSheetName, 186, 7);

		String expCurrencyDefinedAsR1C2 = excelReader.getCellData(xlSheetName, 187, 7);
		String expCurrencyDefinedAsR2C2 = excelReader.getCellData(xlSheetName, 188, 7);

		String expCurrencyRateR1C3 = excelReader.getCellData(xlSheetName, 189, 7);
		String expCurrencyRateR2C3 = excelReader.getCellData(xlSheetName, 190, 7);

		String expCurrencyDescriptionR1C4 = excelReader.getCellData(xlSheetName, 191, 7);
		String expCurrencyDescriptionR2C4 = excelReader.getCellData(xlSheetName, 192, 7);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 184, 8, actBaseCurrencyValue);
		excelReader.setCellData(xlfile, xlSheetName, 185, 8, actCurrencyNameR1C1);
		excelReader.setCellData(xlfile, xlSheetName, 186, 8, actCurrencyNameR2C1);
		excelReader.setCellData(xlfile, xlSheetName, 187, 8, actCurrencyDefinedAsR1C2);
		excelReader.setCellData(xlfile, xlSheetName, 188, 8, actCurrencyDefinedAsR2C2);
		excelReader.setCellData(xlfile, xlSheetName, 189, 8, actCurrencyRateR1C3);
		excelReader.setCellData(xlfile, xlSheetName, 190, 8, actCurrencyRateR2C3);
		excelReader.setCellData(xlfile, xlSheetName, 191, 8, actCurrencyDescriptionR1C4);
		excelReader.setCellData(xlfile, xlSheetName, 192, 8, actCurrencyDescriptionR2C4);
		
		System.out.println("Base Currency Value Actual             : " + actBaseCurrencyValue+       " Value Expected : " + expBaseCurrencyValue);
		System.out.println("Currency Name Value Actual             : " + actCurrencyNameR1C1+        " Value Expected : " + expCurrencyNameR1C1);
		System.out.println("Currency Defined As Value Actual       : " + actCurrencyDefinedAsR1C2+   " Value Expected : " + expCurrencyDefinedAsR1C2);
		System.out.println("Currency Rate Value Actual             : " + actCurrencyRateR1C3+        " Value Expected : " + expCurrencyRateR1C3);
		System.out.println("Currency Description Value Actual      : " + actCurrencyDescriptionR1C4+ " Value Expected : " + expCurrencyDescriptionR1C4);
		System.out.println("Currency Name Value Actual             : " + actCurrencyNameR2C1+        " Value Expected : " + expCurrencyNameR2C1);
		System.out.println("Currency Defined As Value Actual       : " + actCurrencyDefinedAsR2C2+   " Value Expected : " + expCurrencyDefinedAsR2C2);
		System.out.println("Currency Rate Value Actual             : " + actCurrencyRateR2C3+        " Value Expected : " + expCurrencyRateR2C3);
        System.out.println("Currency Description Value Actual      : " + actCurrencyDescriptionR2C4+ " Value Expected : " + expCurrencyDescriptionR2C4);

		if (actBaseCurrencyValue.equalsIgnoreCase(expBaseCurrencyValue)

				&& actCurrencyNameR1C1.equalsIgnoreCase(expCurrencyNameR1C1)
				&& actCurrencyDefinedAsR1C2.equalsIgnoreCase(expCurrencyDefinedAsR1C2)
				&& actCurrencyRateR1C3.equalsIgnoreCase(expCurrencyRateR1C3)
				&& actCurrencyDescriptionR1C4.equalsIgnoreCase(actCurrencyDescriptionR1C4)

				&& actCurrencyNameR2C1.equalsIgnoreCase(expCurrencyNameR2C1)
				&& actCurrencyDefinedAsR2C2.equalsIgnoreCase(expCurrencyDefinedAsR2C2)
				&& actCurrencyRateR2C3.equalsIgnoreCase(expCurrencyRateR2C3)
				&& actCurrencyDescriptionR2C4.equalsIgnoreCase(actCurrencyDescriptionR2C4))
		{
			excelReader.setCellData(xlfile, xlSheetName, 183, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 183, 9, resFail);
			return false;
		}
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage().substring(0, 100);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 183, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	}

	public static boolean checkSaveExchangeRateOfCurrencyMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		System.out.println("************************************************ checkSaveExchangeRateOfCurrencyMaster **********************************************");
	
		try
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			    	  
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
			baseCurrencyTxt.click();
			
			Thread.sleep(3000);
			baseCurrencyTxt.clear();
			baseCurrencyTxt.sendKeys(excelReader.getCellData(xlSheetName, 184, 6));//inr
	
			
			Thread.sleep(2000);  
			getAction().moveToElement(baseCurrencyTxt).sendKeys(Keys.TAB).perform();
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
			withEffectiveDateTxt.click();
			getAction().moveToElement(withEffectiveDateTxt).sendKeys(Keys.TAB).perform();		
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridcurrencyName1Txt));
			
			gridcurrencyName1Txt.click();
			gridcurrencyName1Txt.clear();
			Thread.sleep(3000);
			
			gridcurrencyName1Txt.sendKeys(excelReader.getCellData(xlSheetName, 185, 6));//usd
			Thread.sleep(3000);
			getAction().moveToElement(gridcurrencyName1Txt).sendKeys(Keys.TAB).perform();
			
	
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridDefineAsTxt));
			
			gridDefineAsTxt.click();
			
			gridDefineAsTxt.sendKeys(excelReader.getCellData(xlSheetName, 186, 6)); //inr
			Thread.sleep(3000);
			getAction().moveToElement(gridDefineAsTxt).sendKeys(Keys.TAB).perform();
			
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridRateTxt));
			
			gridRateTxt.sendKeys(excelReader.getCellData(xlSheetName, 187, 6));  //rate
			getAction().moveToElement(gridRateTxt).sendKeys(Keys.TAB).perform();
			
		    Thread.sleep(3000);
			
		    
		    
		    
            //Second row data
			
            
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridcurrencyName1Txt));
			
			gridcurrencyName1Txt.click();
			
			gridcurrencyName1Txt.sendKeys(excelReader.getCellData(xlSheetName, 188, 6));//AED
			Thread.sleep(3000);
			getAction().moveToElement(gridcurrencyName1Txt).sendKeys(Keys.TAB).perform();
			
	
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridDefineAsTxt));
			
			gridDefineAsTxt.click();
			
			gridDefineAsTxt.sendKeys(excelReader.getCellData(xlSheetName, 189, 6));  //inr
			Thread.sleep(3000);
			getAction().moveToElement(gridDefineAsTxt).sendKeys(Keys.TAB).perform();
			
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridRateTxt));
			
			gridRateTxt.sendKeys(excelReader.getCellData(xlSheetName, 190, 6));
			Thread.sleep(3000);
			getAction().moveToElement(gridRateTxt).sendKeys(Keys.TAB).perform();
		
         	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionSaveIcon));		
			exchangeRateDefinitionSaveIcon.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
			
			System.out.println(validationConfirmationMessage.getText());

			String expSaveExchangeRate = excelReader.getCellData(xlSheetName, 194, 7);
			
			boolean actMessageOnSaveExchangeRate=checkValidationMessageboolean(expSaveExchangeRate);
			boolean expMessageOnSaveExchangeRate=true;
			
			String actResult = Boolean.toString(actMessageOnSaveExchangeRate);
			
			excelReader.setCellData(xlfile, xlSheetName, 194, 8, actResult.toUpperCase());
	
			System.out.println("Excange Rate Update Currency Master Value Actual : " + actMessageOnSaveExchangeRate+ " Value Expected : " + expMessageOnSaveExchangeRate);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
			baseCurrencyTxt.click();
	
			if (actMessageOnSaveExchangeRate==expMessageOnSaveExchangeRate) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 193, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 193, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 100);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 193, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	 }

		
		
	 public static boolean checkValuesInUpdatedExchangeRateOptionInCurrencyMaster()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	 {
	
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		System.out.println("****************************************** checkValuesInUpdatedExchangeRateOptionInCurrencyMaster *****************************************");
		
		try
		{
			
			Thread.sleep(5000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
			baseCurrencyTxt.click();
			Thread.sleep(2000);
			baseCurrencyTxt.sendKeys("INR");
			Thread.sleep(2000);
			
			/*int baseCurrencyComboListCount = baseCurrencyComboList.size();
			
			ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
			
			for(int i=1;i<baseCurrencyComboListCount;i++)
			{
				String data=baseCurrencyComboList.get(i).getText();
				if(data.equalsIgnoreCase("INR"))
				{
					baseCurrencyComboList.get(i).click();
				}
			}*/
		
			String actBaseCurrencyValue = baseCurrencyTxt.getAttribute("value");
			Thread.sleep(5000);
			
			baseCurrencyTxt.sendKeys(Keys.TAB);			
			Thread.sleep(4000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
			withEffectiveDateTxt.click();

			Thread.sleep(5000);
			
			String actWithEffectiveDate = withEffectiveDateTxt.getAttribute("value");
			

			String actCurrencyNameR1C1 = exchangeRateDefinitionCurrencyNameRow1Col1.getText();
			String actCurrencyNameR2C1 = exchangeRateDefinitionCurrencyNameRow2Col1.getText();

			String actCurrencyDefinedAsR1C2 = exchangeRateDefinitionDefinedAsRow1Col2.getText();
			String actCurrencyDefinedAsR2C2 = exchangeRateDefinitionDefinedAsRow2Col2.getText();

			String actCurrencyRateR1C3 = exchangeRateDefinitionRateRow1Col3.getText();
			String actCurrencyRateR2C3 = exchangeRateDefinitionRateRow2Col3.getText();

			String actCurrencyDescriptionR1C4 = exchangeRateDefinitionDescriptionRow1Col4.getText();
			String actCurrencyDescriptionR2C4 = exchangeRateDefinitionDescriptionRow2Col4.getText();

			String expBaseCurrencyValue = excelReader.getCellData(xlSheetName, 196, 7);

			String expCurrencyNameR1C1 = excelReader.getCellData(xlSheetName, 197, 7);
			String expCurrencyNameR2C1 = excelReader.getCellData(xlSheetName, 198, 7);

			String expCurrencyDefinedAsR1C2 = excelReader.getCellData(xlSheetName, 199, 7);
			String expCurrencyDefinedAsR2C2 = excelReader.getCellData(xlSheetName, 200, 7);

			String expCurrencyRateR1C3 = excelReader.getCellData(xlSheetName, 201, 7);
			String expCurrencyRateR2C3 = excelReader.getCellData(xlSheetName, 202, 7);

			String expCurrencyDescriptionR1C4 = excelReader.getCellData(xlSheetName, 203, 7);
			String expCurrencyDescriptionR2C4 = excelReader.getCellData(xlSheetName, 204, 7);
			
			
			excelReader.setCellData(xlfile, xlSheetName, 196, 8, actBaseCurrencyValue);
			excelReader.setCellData(xlfile, xlSheetName, 197, 8, actCurrencyNameR1C1);
			excelReader.setCellData(xlfile, xlSheetName, 198, 8, actCurrencyNameR2C1);
			excelReader.setCellData(xlfile, xlSheetName, 199, 8, actCurrencyDefinedAsR1C2);
			excelReader.setCellData(xlfile, xlSheetName, 200, 8, actCurrencyDefinedAsR2C2);
			excelReader.setCellData(xlfile, xlSheetName, 201, 8, actCurrencyRateR1C3);
			excelReader.setCellData(xlfile, xlSheetName, 202, 8, actCurrencyRateR2C3);
			excelReader.setCellData(xlfile, xlSheetName, 203, 8, actCurrencyDescriptionR1C4);
			excelReader.setCellData(xlfile, xlSheetName, 204, 8, actCurrencyDescriptionR2C4);
		
			System.out.println("Base Currency Value Actual              : " + actBaseCurrencyValue+       " Value Expected : " + expBaseCurrencyValue);
			System.out.println("Currency Name Value Actual              : " + actCurrencyNameR1C1+        " Value Expected : " + expCurrencyNameR1C1);
			System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR1C2+   " Value Expected : " + expCurrencyDefinedAsR1C2);
			System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR1C3+        " Value Expected : " + expCurrencyRateR1C3);
			System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR1C4+ " Value Expected : " + expCurrencyDescriptionR1C4);
			System.out.println("Currency Name Value Actual              : " + actCurrencyNameR2C1+        " Value Expected : " + expCurrencyNameR2C1);
			System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR2C2+   " Value Expected : " + expCurrencyDefinedAsR2C2);
			System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR2C3+        " Value Expected : " + expCurrencyRateR2C3);
			System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR2C4+ " Value Expected : " + expCurrencyDescriptionR2C4);
	
			if (actBaseCurrencyValue.equalsIgnoreCase(expBaseCurrencyValue)
		
					&& actCurrencyNameR1C1.equalsIgnoreCase(expCurrencyNameR1C1)
					&& actCurrencyDefinedAsR1C2.equalsIgnoreCase(expCurrencyDefinedAsR1C2)
					&& actCurrencyRateR1C3.equalsIgnoreCase(expCurrencyRateR1C3)
					&& actCurrencyDescriptionR1C4.equalsIgnoreCase(actCurrencyDescriptionR1C4)
		
					&& actCurrencyNameR2C1.equalsIgnoreCase(expCurrencyNameR2C1)
					&& actCurrencyDefinedAsR2C2.equalsIgnoreCase(expCurrencyDefinedAsR2C2)
					&& actCurrencyRateR2C3.equalsIgnoreCase(expCurrencyRateR2C3)
					&& actCurrencyDescriptionR2C4.equalsIgnoreCase(actCurrencyDescriptionR2C4)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 195, 9, resPass);
				return true;
			}
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 195, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 100);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 195, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	}

	  public static boolean checkClickOnClearToClearValuesInExchangeRateOptionInCurrencyMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	  {
	
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		System.out.println("************************************* checkClickOnClearToClearValuesInExchangeRateOptionInCurrencyMaster **********************************");
	
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionClearIcon));
			exchangeRateDefinitionClearIcon.click();
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
			baseCurrencyTxt.click();
	
			boolean actBaseCurrencyValue       = baseCurrencyTxt.getAttribute("value").isEmpty();
			baseCurrencyTxt.sendKeys(Keys.TAB);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
			withEffectiveDateTxt.click();
	
			String actWithEffectiveDate        = withEffectiveDateTxt.getAttribute("value");
			
			boolean actCurrencyNameR1C1        = exchangeRateDefinitionCurrencyNameRow1Col1.getText().isEmpty();
			boolean actCurrencyNameR2C1        = exchangeRateDefinitionCurrencyNameRow2Col1.getText().isEmpty();
	
			boolean actCurrencyDefinedAsR1C2   = exchangeRateDefinitionDefinedAsRow1Col2.getText().isEmpty();
			boolean actCurrencyDefinedAsR2C2   = exchangeRateDefinitionDefinedAsRow2Col2.getText().isEmpty();
	
			String actCurrencyRateR1C33       = exchangeRateDefinitionRateRow1Col3.getText();
			boolean actCurrencyRateR2C3        = exchangeRateDefinitionRateRow2Col3.getText().isEmpty();
	
			boolean actCurrencyDescriptionR1C4 = exchangeRateDefinitionDescriptionRow1Col4.getText().isEmpty();
			boolean actCurrencyDescriptionR2C4 = exchangeRateDefinitionDescriptionRow2Col4.getText().isEmpty();
	
			boolean expBaseCurrencyValue       = true;
	
			boolean expCurrencyNameR1C1        = true;
			boolean expCurrencyNameR2C1        = true;
	
			boolean expCurrencyDefinedAsR1C2   = true;
			boolean expCurrencyDefinedAsR2C2   = true;
	
			String expCurrencyRateR1C3         = excelReader.getCellData(xlSheetName, 206, 7);
			boolean expCurrencyRateR2C3        = true;
	
			boolean expCurrencyDescriptionR1C4 = true;
			boolean expCurrencyDescriptionR2C4 = true;
			
			
			boolean actMethod = actBaseCurrencyValue == expBaseCurrencyValue && actCurrencyNameR1C1 == expCurrencyNameR1C1 
					            && actCurrencyDefinedAsR1C2 == expCurrencyDefinedAsR1C2 && actCurrencyDescriptionR1C4 == actCurrencyDescriptionR1C4
					            && actCurrencyNameR2C1 == expCurrencyNameR2C1 && actCurrencyDefinedAsR2C2 == expCurrencyDefinedAsR2C2
					            && actCurrencyRateR2C3 == expCurrencyRateR2C3 && actCurrencyDescriptionR2C4 == actCurrencyDescriptionR2C4;
			
			String actResult = Boolean.toString(actMethod);
			
			excelReader.setCellData(xlfile, xlSheetName, 205, 8, actResult.toUpperCase());
			
			excelReader.setCellData(xlfile, xlSheetName, 206, 8, actCurrencyRateR1C33);
			
			System.out.println("Base Currency Value Actual              : " + actBaseCurrencyValue       + "  Value Expected : " + expBaseCurrencyValue);
			System.out.println("Currency Name Value Actual              : " + actCurrencyNameR1C1        + "  Value Expected : " + expCurrencyNameR1C1);
			System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR1C2   + "  Value Expected : " + expCurrencyDefinedAsR1C2);
			System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR1C33       + "  Value Expected : " + expCurrencyRateR1C3);
			System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR1C4 + "  Value Expected : " + expCurrencyDescriptionR1C4);
			System.out.println("Currency Name Value Actual              : " + actCurrencyNameR2C1        + "  Value Expected : " + expCurrencyNameR2C1);
			System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR2C2   + "  Value Expected : " + expCurrencyDefinedAsR2C2);
			System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR2C3        + "  Value Expected : " + expCurrencyRateR2C3);
		    System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR2C4 + "  Value Expected : " + expCurrencyDescriptionR2C4);
	
			if (actMethod== true && actCurrencyRateR1C33.equalsIgnoreCase(expCurrencyRateR1C3)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 205, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 205, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 100);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 205, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	}

	@FindBy(xpath = "//div[contains(text(),'Save')]")
	public static WebElement currencyMasterSaveBtn;
	
	// Cancel in the Exchange Rate Option
	public static boolean checkCancelOptionSaveExchangeRateInExchangeRateOptionInCurrencyMaster()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		System.out.println("*************************************** checkCancelOptionInExchangeRateOptionInCurrencyMaster *****************************************");
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionPopCloseIcon));
			exchangeRateDefinitionPopCloseIcon.click();
			Thread.sleep(5000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveIcon));
			//saveIcon.click();
	
	     /*   String actMessageOnClickOnCancelAndClickOnSaveButton        = excelReader.getCellData(xlSheetName, 208, 7);
	        		
			boolean actSummaryMessageOnClickonCancelAndClickSaveButton  = checkValidationMessageboolean(actMessageOnClickOnCancelAndClickOnSaveButton);
			boolean expSummaryMessageOnClickonCancelAndClickSaveButton  = true;
			
			String actResult = Boolean.toString(actSummaryMessageOnClickonCancelAndClickSaveButton);
		*/	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ISOCurrencyCodeTxt));
			String actISOCurrencyCode             = ISOCurrencyCodeTxt.getAttribute("value");
		

	       String expISOCurrencyCode             = excelReader.getCellData(xlSheetName, 208, 7);
	
		   String actMessageOnClickOnCancelAndClickOnSaveButton        = excelReader.getCellData(xlSheetName, 208, 7);
	
		   excelReader.setCellData(xlfile, xlSheetName, 207, 8, actISOCurrencyCode.toUpperCase());
			
	       System.out.println("Click On Cancel Is Any Error Message Value Actual : " + actISOCurrencyCode + " Value Expected : " + expISOCurrencyCode);
	     
			if (actISOCurrencyCode.equalsIgnoreCase(expISOCurrencyCode))
			{
				System.out.println("Pass : Cancel Button works in exhange rate");
				excelReader.setCellData(xlfile, xlSheetName, 207, 9, resPass);
				return true;
			}
			else 
			{
				System.out.println("Fail : Cancel Button works in exhange rate");
				excelReader.setCellData(xlfile, xlSheetName, 207, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 100);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 207, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	}

	

	// Currency Master page will be display on Click on Cancel
	
	// Check Clear Option in the Currency Master page

	 public static boolean checkClickOnClearButtonToDisplayBlankInCurrencyMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	 {
	
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		System.out.println("**************************************** checkClickOnClearButtonToDisplayBlankInCurrencyMaster *******************************************");	
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ISOCurrencyCodeTxt));
			ISOCurrencyCodeTxt.click();
			ISOCurrencyCodeTxt.sendKeys("s");
			
			int isoCurrencyCodeComboListCount = isoCurrencyCodeComboList.size();
			
			ArrayList<String> isoCurrencyCodeComboListArray = new ArrayList<String>();
			
			for(int i=1;i<isoCurrencyCodeComboListCount;i++)
			{
				String data=isoCurrencyCodeComboList.get(i).getText();
				if(data.equalsIgnoreCase("SLL"))
				{
					isoCurrencyCodeComboList.get(i).click();
				}
			}
		
			ISOCurrencyCodeTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clearIcon));
			clearIcon.click();
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ISOCurrencyCodeTxt));
			boolean actISOCurrencyCode             = ISOCurrencyCodeTxt.getAttribute("value").isEmpty();
			boolean actCoinsNameTxt                = coinsNameTxt.getAttribute("value").isEmpty();
			boolean actCurrencyNameTxt             = currencyNameTxt.getAttribute("value").isEmpty();
			boolean actRoundOff                    = generalRoundOffTxt.getAttribute("value").isEmpty();
			boolean actCurrencyMasterControlSymbol = controlSymbolDropdown.getAttribute("value").isEmpty();
			boolean actNoOfDecimals                = noOfDecimalsTxtInCurrency.getAttribute("value").isEmpty();
	
			boolean expISOCurrencyCode             = true;
			boolean expCoinsNameTxt                = true;
			boolean expCurrencyNameTxt             = true;
			boolean expRoundOff                    = true;
			boolean expCurrencyMasterControlSymbol = true;
			boolean expNoOfDecimals                = true;
			
			boolean actMethod = actISOCurrencyCode == expISOCurrencyCode && actCoinsNameTxt == expCoinsNameTxt
								&& actCurrencyNameTxt == expCurrencyNameTxt && actRoundOff == actRoundOff
								&& actCurrencyMasterControlSymbol == expCurrencyMasterControlSymbol
								&& actNoOfDecimals == expNoOfDecimals;

			String actResult = Boolean.toString(actMethod);

			excelReader.setCellData(xlfile, xlSheetName, 209, 8, actResult.toUpperCase());
	
			System.out.println("ISO Currency Value Actual     : " + actISOCurrencyCode+ "              Value Expected : " + expISOCurrencyCode);
			System.out.println("Coins Name Value Actual       : " + actCoinsNameTxt+ "                 Value Expected : " + expCoinsNameTxt);
			System.out.println("Currency Name Value Actual    : " + actCurrencyNameTxt+ "              Value Expected : " + expCurrencyNameTxt);
			System.out.println("Round Off Value Actual        : " + actRoundOff+ "                     Value Expected : " + actRoundOff);
			System.out.println("Symbol Value Actual           : " + actCurrencyMasterControlSymbol+ "  Value Expected : " + expCurrencyMasterControlSymbol);
			System.out.println("No Of Decimals Value Actual   : " + actNoOfDecimals+ "                 Value Expected : " + expNoOfDecimals);
	
			if (actMethod==true) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 209, 9, resPass);
				return true;
			}
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 209, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 100);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 209, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	 }

		 
	 public boolean checkClickOnCancelButtonInCurrencyMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	 {
		 excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		 System.out.println("************************************************** checkClickOnCancelButtonInCurrencyMaster  ********************************************");
	
		 try
		 {
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cancelIcon));
			 cancelIcon.click();
			 
			 Thread.sleep(2000);
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			 String actDashboardLabel = labelDashboard.getText();
			 String expDashboardLabel = excelReader.getCellData(xlSheetName, 211, 7);
			 
			 excelReader.setCellData(xlfile, xlSheetName, 211, 8, actDashboardLabel);
			 
			 System.out.println("Click on Close button                              :" + actDashboardLabel + "      Value Expected : " + expDashboardLabel);
			 
			 Thread.sleep(5000);
			 
			 if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
			 {
				 System.out.println(" Test Pass: Close Button is working");
				 excelReader.setCellData(xlfile, xlSheetName, 210, 9, resPass);
				 return true;
			 }
			 else 
			 {
				 System.out.println(" Test Fail: Close Button is not working");
				 excelReader.setCellData(xlfile, xlSheetName, 210, 9, resFail);
				 return false;
			 }
		 }
		 catch (Exception e) 
		 {
			 String exception =e.getMessage().substring(0, 100);
			 excelReader.setExceptionInExcel(xlfile, xlSheetName, 210, 10, exception);
			 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 return false;
		 }
	 }
	  
  
  
	 // EXCHANGE RATE PAGE STARTS
	 

		 
	 public static boolean checkClickOnExchangeRateFromCurrecnyMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	 {
		 excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		 System.out.println("************************************************** checkClickOnExchangeRateFromCurrecnyMenu  ********************************************");
			
		 try 
		 {
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			 homeMenu.click();
	
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			 mastersMenu.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyMenu));
			 currencyMenu.click();
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateMenu));
			 exchangeRateMenu.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionLabel));
			 
			 String actExchangeRateLabel   = exchangeRateDefinitionLabel.getText();
			 String expExchangeRateLabel   = excelReader.getCellData(xlSheetName, 214, 7);
			 
			 System.out.println("Exchange Rate Value Actual                      : " + actExchangeRateLabel+ "  Value Expected : " + expExchangeRateLabel);
			 
			 int exchangeRateDefintionRibbonControlListCount = exchangeRateDefintionRibbonControlList.size();
			 
			 ArrayList<String> exchangeRateDefintionRibbonControlListArray = new ArrayList<String>();
			 
			 for(int i=0;i<exchangeRateDefintionRibbonControlListCount;i++)
			 {
				 String data=exchangeRateDefintionRibbonControlList.get(i).getText();
				 exchangeRateDefintionRibbonControlListArray.add(data);
			 }	
			 
			 String actexchangeRateDefintionRibbonControlList=exchangeRateDefintionRibbonControlListArray.toString();
			 String expexchangeRateDefintionRibbonControlList=excelReader.getCellData(xlSheetName, 215, 7);
			 
			 System.out.println("exchangeRateDefintionRibbonControlList Actual   : "+actexchangeRateDefintionRibbonControlList);
			 System.out.println("exchangeRateDefintionRibbonControlList Expected : "+expexchangeRateDefintionRibbonControlList);
			 
			 
			 excelReader.setCellData(xlfile, xlSheetName, 214, 8, actExchangeRateLabel);
			 excelReader.setCellData(xlfile, xlSheetName, 215, 8, actexchangeRateDefintionRibbonControlList);
			 
			
			 
			 
			 if (actExchangeRateLabel.equalsIgnoreCase(expExchangeRateLabel)
					 && actexchangeRateDefintionRibbonControlList.equalsIgnoreCase(expexchangeRateDefintionRibbonControlList)) 
			 {
				 excelReader.setCellData(xlfile, xlSheetName, 213, 9, resPass);
				 return true;
			 }
			 else 
			 {
				 excelReader.setCellData(xlfile, xlSheetName, 213, 9, resFail);
				 return false;
			 }
		 } 
		 catch (Exception e) 
		 {
			 String exception =e.getMessage().substring(0, 100);
			 excelReader.setExceptionInExcel(xlfile, xlSheetName, 213, 10, exception);
			 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 return false;
		 }
	 }

	 
	 public static boolean checkValuesInSavedExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	 {
		 excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		 System.out.println("******************************************************** checkValuesInSavedExchangeRate *****************************************************");
	
		 try
		 {
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
			 baseCurrencyTxt.click();
			 baseCurrencyTxt.sendKeys("i");
			 
			 int baseCurrencyComboListCount = baseCurrencyComboList.size();
			 
			 ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
			 
			 for(int i=1;i<baseCurrencyComboListCount;i++)
			 {
				 String data=baseCurrencyComboList.get(i).getText();
				 if(data.equalsIgnoreCase("INR"))
				 {
					 baseCurrencyComboList.get(i).click();
				 }	
			 }
			 
			 String actBaseCurrencyValue = baseCurrencyTxt.getAttribute("value");
			 baseCurrencyTxt.sendKeys(Keys.TAB);
			 Thread.sleep(4000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
			 withEffectiveDateTxt.click();
			 
			 String actWithEffectiveDate = withEffectiveDateTxt.getAttribute("value");
			 //Thread.sleep(3000);
			 
			 String actCurrencyNameR1C1 = exchangeRateDefinitionCurrencyNameRow1Col1.getText();
			 String actCurrencyNameR2C1 = exchangeRateDefinitionCurrencyNameRow2Col1.getText();
			 
			 String actCurrencyDefinedAsR1C2 = exchangeRateDefinitionDefinedAsRow1Col2.getText();
			 String actCurrencyDefinedAsR2C2 = exchangeRateDefinitionDefinedAsRow2Col2.getText();
			 
			 String actCurrencyRateR1C3 = exchangeRateDefinitionRateRow1Col3.getText();
			 String actCurrencyRateR2C3 = exchangeRateDefinitionRateRow2Col3.getText();
			 
			 String actCurrencyDescriptionR1C4 = exchangeRateDefinitionDescriptionRow1Col4.getText();
			 String actCurrencyDescriptionR2C4 = exchangeRateDefinitionDescriptionRow2Col4.getText();
			 
			 String expBaseCurrencyValue = excelReader.getCellData(xlSheetName, 217, 7);
			 
			 String expCurrencyNameR1C1 = excelReader.getCellData(xlSheetName, 218, 7);
			 String expCurrencyNameR2C1 = excelReader.getCellData(xlSheetName, 219, 7);
			 
			 String expCurrencyDefinedAsR1C2 = excelReader.getCellData(xlSheetName, 220, 7);
			 String expCurrencyDefinedAsR2C2 = excelReader.getCellData(xlSheetName, 221, 7);
			 
			 String expCurrencyRateR1C3 = excelReader.getCellData(xlSheetName, 222, 7);
			 String expCurrencyRateR2C3 = excelReader.getCellData(xlSheetName, 223, 7);
			 
			 String expCurrencyDescriptionR1C4 = excelReader.getCellData(xlSheetName, 224, 7);
			 String expCurrencyDescriptionR2C4 = excelReader.getCellData(xlSheetName, 225, 7);
			 
			 
			 excelReader.setCellData(xlfile, xlSheetName, 217, 8, actBaseCurrencyValue);
			 excelReader.setCellData(xlfile, xlSheetName, 218, 8, actCurrencyNameR1C1);
			 excelReader.setCellData(xlfile, xlSheetName, 219, 8, actCurrencyNameR2C1);
			 excelReader.setCellData(xlfile, xlSheetName, 220, 8, actCurrencyDefinedAsR1C2);
			 excelReader.setCellData(xlfile, xlSheetName, 221, 8, actCurrencyDefinedAsR2C2);
			 excelReader.setCellData(xlfile, xlSheetName, 222, 8, actCurrencyRateR1C3);
			 excelReader.setCellData(xlfile, xlSheetName, 223, 8, actCurrencyRateR2C3);
			 excelReader.setCellData(xlfile, xlSheetName, 224, 8, actCurrencyDescriptionR1C4);
			 excelReader.setCellData(xlfile, xlSheetName, 225, 8, actCurrencyDescriptionR2C4);
			 
			 System.out.println("Base Currency Value Actual              : " + actBaseCurrencyValue+       " Value Expected : " + expBaseCurrencyValue);
			 System.out.println("Currency Name Value Actual              : " + actCurrencyNameR1C1+        " Value Expected : " + expCurrencyNameR1C1);
			 System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR1C2+   " Value Expected : " + expCurrencyDefinedAsR1C2);
			 System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR1C3+        " Value Expected : " + expCurrencyRateR1C3);
			 System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR1C4+ " Value Expected : " + expCurrencyDescriptionR1C4);
			 System.out.println("Currency Name Value Actual              : " + actCurrencyNameR2C1+        " Value Expected : " + expCurrencyNameR2C1);
			 System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR2C2+   " Value Expected : " + expCurrencyDefinedAsR2C2);
			 System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR2C3+        " Value Expected : " + expCurrencyRateR2C3);
			 System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR2C4+ " Value Expected : " + expCurrencyDescriptionR2C4);
			 
			 if (actBaseCurrencyValue.equalsIgnoreCase(expBaseCurrencyValue)
	
					&& actCurrencyNameR1C1.equalsIgnoreCase(expCurrencyNameR1C1)
					&& actCurrencyDefinedAsR1C2.equalsIgnoreCase(expCurrencyDefinedAsR1C2)
					&& actCurrencyRateR1C3.equalsIgnoreCase(expCurrencyRateR1C3)
					&& actCurrencyDescriptionR1C4.equalsIgnoreCase(actCurrencyDescriptionR1C4)
	
					&& actCurrencyNameR2C1.equalsIgnoreCase(expCurrencyNameR2C1)
					&& actCurrencyDefinedAsR2C2.equalsIgnoreCase(expCurrencyDefinedAsR2C2)
					&& actCurrencyRateR2C3.equalsIgnoreCase(expCurrencyRateR2C3)
					&& actCurrencyDescriptionR2C4.equalsIgnoreCase(actCurrencyDescriptionR2C4))
			{
				 excelReader.setCellData(xlfile, xlSheetName, 216, 9, resPass);
				return true;
			} 
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 216, 9, resFail);
				return false;
			}
		 }
		 catch (Exception e) 
		 {
			 String exception =e.getMessage().substring(0, 100);
			 excelReader.setExceptionInExcel(xlfile, xlSheetName, 216, 10, exception);
			 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 return false;
		 } 
	 }
	
	  
	  
	 public static boolean checkClickOnClearToClearValuesInExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	 {
		 excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		 System.out.println("***************************************** checkClickOnClearToClearValuesInExchangeRate *******************************************");
	
		 try
		 {
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionClearIcon));
			 exchangeRateDefinitionClearIcon.click();
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
			 baseCurrencyTxt.click();
			 
			 boolean actBaseCurrencyValue       = baseCurrencyTxt.getAttribute("value").isEmpty();
			 baseCurrencyTxt.sendKeys(Keys.TAB);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
			 withEffectiveDateTxt.click();
			 
			 String actWithEffectiveDate        = withEffectiveDateTxt.getAttribute("value");
			 
			 boolean actCurrencyNameR1C1        = exchangeRateDefinitionCurrencyNameRow1Col1.getText().isEmpty();
			 boolean actCurrencyNameR2C1        = exchangeRateDefinitionCurrencyNameRow2Col1.getText().isEmpty();
			 
			 boolean actCurrencyDefinedAsR1C2   = exchangeRateDefinitionDefinedAsRow1Col2.getText().isEmpty();
			 boolean actCurrencyDefinedAsR2C2   = exchangeRateDefinitionDefinedAsRow2Col2.getText().isEmpty();
			 
			 String actCurrencyRateR1C33       = exchangeRateDefinitionRateRow1Col3.getText();
			 boolean actCurrencyRateR2C3        = exchangeRateDefinitionRateRow2Col3.getText().isEmpty();
			 
			 boolean actCurrencyDescriptionR1C4 = exchangeRateDefinitionDescriptionRow1Col4.getText().isEmpty();
			 boolean actCurrencyDescriptionR2C4 = exchangeRateDefinitionDescriptionRow2Col4.getText().isEmpty();
			 
			 boolean expBaseCurrencyValue       = true;
			 
			 boolean expCurrencyNameR1C1        = true;
			 boolean expCurrencyNameR2C1        = true;
			 
			 boolean expCurrencyDefinedAsR1C2   = true;
			 boolean expCurrencyDefinedAsR2C2   = true;
			 
			 String expCurrencyRateR1C3         = excelReader.getCellData(xlSheetName, 227, 7);
			 boolean expCurrencyRateR2C3        = true;
			 
			 boolean expCurrencyDescriptionR1C4 = true;
			 boolean expCurrencyDescriptionR2C4 = true;
			 
			 
			 boolean actMethod = actBaseCurrencyValue == expBaseCurrencyValue && actCurrencyNameR1C1 == expCurrencyNameR1C1 
					 && actCurrencyDefinedAsR1C2 == expCurrencyDefinedAsR1C2 && actCurrencyDescriptionR1C4 == actCurrencyDescriptionR1C4
					 && actCurrencyNameR2C1 == expCurrencyNameR2C1 && actCurrencyDefinedAsR2C2 == expCurrencyDefinedAsR2C2
					 && actCurrencyRateR2C3 == expCurrencyRateR2C3 && actCurrencyDescriptionR2C4 == actCurrencyDescriptionR2C4;
					
			 String actResult = Boolean.toString(actMethod);
				
			 excelReader.setCellData(xlfile, xlSheetName, 226, 8, actResult.toUpperCase());
			 
			 excelReader.setCellData(xlfile, xlSheetName, 227, 8, actCurrencyRateR1C33);
			 
			 System.out.println("Base Currency Value Actual              : " + actBaseCurrencyValue       + "  Value Expected : " + expBaseCurrencyValue);
			 System.out.println("Currency Name Value Actual              : " + actCurrencyNameR1C1        + "  Value Expected : " + expCurrencyNameR1C1);
			 System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR1C2   + "  Value Expected : " + expCurrencyDefinedAsR1C2);
			 System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR1C33       + "  Value Expected : " + expCurrencyRateR1C3);
			 System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR1C4 + "  Value Expected : " + expCurrencyDescriptionR1C4);
			 System.out.println("Currency Name Value Actual              : " + actCurrencyNameR2C1        + "  Value Expected : " + expCurrencyNameR2C1);
			 System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR2C2   + "  Value Expected : " + expCurrencyDefinedAsR2C2);
			 System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR2C3        + "  Value Expected : " + expCurrencyRateR2C3);
			 System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR2C4 + "  Value Expected : " + expCurrencyDescriptionR2C4);
			 
			 if (actBaseCurrencyValue == expBaseCurrencyValue && actCurrencyRateR1C33.equalsIgnoreCase(expCurrencyRateR1C3))
			 {
				 excelReader.setCellData(xlfile, xlSheetName, 226, 9, resPass);
				 return true;
			 } 
			 else
			 {
				 excelReader.setCellData(xlfile, xlSheetName, 226, 9, resFail);
				 return false;
			 }
		 }
		 catch (Exception e) 
		 {
			 String exception =e.getMessage().substring(0, 100);
			 excelReader.setExceptionInExcel(xlfile, xlSheetName, 226, 10, exception);
			 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			 return false;
		 }  
	 }

  
	 //Changing the USD Currency Value
 
	 public static boolean checkSaveExchangeRateBaseCurrencyUSD() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	 {
	
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		System.out.println("************************************************ checkUpdateValuesInExchangeRateForCompanyBase **********************************************");
	
		try
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
			baseCurrencyTxt.click();
			baseCurrencyTxt.sendKeys("u");
			
			int baseCurrencyComboListCount = baseCurrencyComboList.size();
			 
			ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
			
			for(int i=1;i<baseCurrencyComboListCount;i++)
			{
				String data=baseCurrencyComboList.get(i).getText();
				if(data.equalsIgnoreCase("USD"))
				{
					baseCurrencyComboList.get(i).click();
				}	
			}
			*/ 
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
			
			baseCurrencyTxt.click();
			
			baseCurrencyTxt.sendKeys(excelReader.getCellData(xlSheetName, 231, 6));
			
			Thread.sleep(3000);  
			
			getAction().moveToElement(baseCurrencyTxt).sendKeys(Keys.TAB).perform();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
			
			withEffectiveDateTxt.click();
			Thread.sleep(3000);
			getAction().moveToElement(withEffectiveDateTxt).sendKeys(Keys.TAB).perform();
						
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridcurrencyName1Txt));
			
			gridcurrencyName1Txt.click();
			
			gridcurrencyName1Txt.sendKeys(excelReader.getCellData(xlSheetName, 232, 6));
			Thread.sleep(3000);
			getAction().moveToElement(gridcurrencyName1Txt).sendKeys(Keys.TAB).perform();
			
	
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridDefineAsTxt));
			
			gridDefineAsTxt.click();
			
			gridDefineAsTxt.sendKeys(excelReader.getCellData(xlSheetName, 233, 6));
			Thread.sleep(3000);
			getAction().moveToElement(gridDefineAsTxt).sendKeys(Keys.TAB).perform();
			
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridRateTxt));
			
			gridRateTxt.sendKeys(excelReader.getCellData(xlSheetName, 234, 6));
			Thread.sleep(3000);
			getAction().moveToElement(gridRateTxt).sendKeys(Keys.TAB).perform();
			
			
			//Second row data
			
            
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridcurrencyName1Txt));
			gridcurrencyName1Txt.click();			
			gridcurrencyName1Txt.sendKeys(excelReader.getCellData(xlSheetName, 235, 6));
			Thread.sleep(3000);
			getAction().moveToElement(gridcurrencyName1Txt).sendKeys(Keys.TAB).perform();
			
	
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridDefineAsTxt));			
			gridDefineAsTxt.click();
			gridDefineAsTxt.sendKeys(excelReader.getCellData(xlSheetName, 236, 6));
			Thread.sleep(3000);
			getAction().moveToElement(gridDefineAsTxt).sendKeys(Keys.TAB).perform();
			
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridRateTxt));
			
			gridRateTxt.sendKeys(excelReader.getCellData(xlSheetName, 237, 6));
			Thread.sleep(3000);
			getAction().moveToElement(gridRateTxt).sendKeys(Keys.TAB).perform();
			
			Thread.sleep(3000);
         	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionSaveIcon));
			
			exchangeRateDefinitionSaveIcon.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
	
			
			/*String actBaseCurrencyValue = baseCurrencyTxt.getAttribute("value");
			baseCurrencyTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridRate2Txt));
			gridRate2Txt.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridRateTxt));
			gridRateTxt.sendKeys(excelReader.getCellData(xlSheetName, 238, 6));
			gridRateTxt.sendKeys(Keys.TAB);
	*/
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionSaveIcon));
			exchangeRateDefinitionSaveIcon.click();
	
			String expSaveExchangeRate = excelReader.getCellData(xlSheetName, 229, 7);
			
			boolean actMessageOnExchangeRate=checkValidationMessageboolean(expSaveExchangeRate);
	        boolean expMessageOnExchangeRate=true;
	        
	        String actResult = Boolean.toString(actMessageOnExchangeRate);
	        
	        excelReader.setCellData(xlfile, xlSheetName, 229, 8, actResult.toUpperCase());
			  
			System.out.println("Excange Rate Update Currency Definition Value Actual : " + actMessageOnExchangeRate+ "      Value Expected : " + expMessageOnExchangeRate);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
			baseCurrencyTxt.click();
	
			if (actMessageOnExchangeRate==expMessageOnExchangeRate) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 228, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 228, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 100);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 228, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}  
	 }
	 
	 
	 public static boolean checkUSDValuesInSavedExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	 {
		 excelReader = new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		 System.out.println("******************************************************** checkValuesInSavedExchangeRate *****************************************************");
	
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
			baseCurrencyTxt.click();
			baseCurrencyTxt.sendKeys("U");
			 
			int baseCurrencyComboListCount = baseCurrencyComboList.size();
			
			ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
			
			for(int i=1;i<baseCurrencyComboListCount;i++)
			{
				String data=baseCurrencyComboList.get(i).getText();
				if(data.equalsIgnoreCase("USD"))
				{
					baseCurrencyComboList.get(i).click();
				}	
			}
			 
			String actBaseCurrencyValue = baseCurrencyTxt.getAttribute("value");
			baseCurrencyTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
			withEffectiveDateTxt.click();
			
			String actWithEffectiveDate = withEffectiveDateTxt.getAttribute("value");
			
			String actCurrencyNameR1C1 = exchangeRateDefinitionCurrencyNameRow1Col1.getText();
			String actCurrencyNameR2C1 = exchangeRateDefinitionCurrencyNameRow2Col1.getText();
			
			String actCurrencyDefinedAsR1C2 = exchangeRateDefinitionDefinedAsRow1Col2.getText();
			String actCurrencyDefinedAsR2C2 = exchangeRateDefinitionDefinedAsRow2Col2.getText();
			
			String actCurrencyRateR1C3 = exchangeRateDefinitionRateRow1Col3.getText();
			String actCurrencyRateR2C3 = exchangeRateDefinitionRateRow2Col3.getText();
			
			String actCurrencyDescriptionR1C4 = exchangeRateDefinitionDescriptionRow1Col4.getText();
			String actCurrencyDescriptionR2C4 = exchangeRateDefinitionDescriptionRow2Col4.getText();
			
			String expBaseCurrencyValue = excelReader.getCellData(xlSheetName, 231, 7);
			
			String expCurrencyNameR1C1 = excelReader.getCellData(xlSheetName, 232, 7);
			String expCurrencyNameR2C1 = excelReader.getCellData(xlSheetName, 233, 7);
			
			String expCurrencyDefinedAsR1C2 = excelReader.getCellData(xlSheetName, 234, 7);
			String expCurrencyDefinedAsR2C2 = excelReader.getCellData(xlSheetName, 235, 7);
			
			String expCurrencyRateR1C3 = excelReader.getCellData(xlSheetName, 236, 7);
			String expCurrencyRateR2C3 = excelReader.getCellData(xlSheetName, 237, 7);
			
			String expCurrencyDescriptionR1C4 = excelReader.getCellData(xlSheetName, 238, 7);
			String expCurrencyDescriptionR2C4 = excelReader.getCellData(xlSheetName, 239, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 231, 8, actBaseCurrencyValue);
			excelReader.setCellData(xlfile, xlSheetName, 232, 8, actCurrencyNameR1C1);
			excelReader.setCellData(xlfile, xlSheetName, 233, 8, actCurrencyNameR2C1);
			excelReader.setCellData(xlfile, xlSheetName, 234, 8, actCurrencyDefinedAsR1C2);
			excelReader.setCellData(xlfile, xlSheetName, 235, 8, actCurrencyDefinedAsR2C2);
			excelReader.setCellData(xlfile, xlSheetName, 236, 8, actCurrencyRateR1C3);
			excelReader.setCellData(xlfile, xlSheetName, 237, 8, actCurrencyRateR2C3);
			excelReader.setCellData(xlfile, xlSheetName, 238, 8, actCurrencyDescriptionR1C4);
			excelReader.setCellData(xlfile, xlSheetName, 239, 8, actCurrencyDescriptionR2C4);
			
			System.out.println("Base Currency Value Actual              : " + actBaseCurrencyValue+       " Value Expected : " + expBaseCurrencyValue);
			System.out.println("Currency Name Value Actual              : " + actCurrencyNameR1C1+        " Value Expected : " + expCurrencyNameR1C1);
			System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR1C2+   " Value Expected : " + expCurrencyDefinedAsR1C2);
			System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR1C3+        " Value Expected : " + expCurrencyRateR1C3);
			System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR1C4+ " Value Expected : " + expCurrencyDescriptionR1C4);
			System.out.println("Currency Name Value Actual              : " + actCurrencyNameR2C1+        " Value Expected : " + expCurrencyNameR2C1);
			System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR2C2+   " Value Expected : " + expCurrencyDefinedAsR2C2);
			System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR2C3+        " Value Expected : " + expCurrencyRateR2C3);
			System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR2C4+ " Value Expected : " + expCurrencyDescriptionR2C4);
			
			if (actBaseCurrencyValue.equalsIgnoreCase(expBaseCurrencyValue)
					
					&& actCurrencyNameR1C1.equalsIgnoreCase(expCurrencyNameR1C1)
					&& actCurrencyDefinedAsR1C2.equalsIgnoreCase(expCurrencyDefinedAsR1C2)
					&& actCurrencyRateR1C3.equalsIgnoreCase(expCurrencyRateR1C3)
					&& actCurrencyDescriptionR1C4.equalsIgnoreCase(actCurrencyDescriptionR1C4)
	
					&& actCurrencyNameR2C1.equalsIgnoreCase(expCurrencyNameR2C1)
					&& actCurrencyDefinedAsR2C2.equalsIgnoreCase(expCurrencyDefinedAsR2C2)
					&& actCurrencyRateR2C3.equalsIgnoreCase(expCurrencyRateR2C3)
					&& actCurrencyDescriptionR2C4.equalsIgnoreCase(actCurrencyDescriptionR2C4))
			{
				excelReader.setCellData(xlfile, xlSheetName, 230, 9, resPass);
				return true;
			} 
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 230, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 100);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 230, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}  
	 }
 
	 
  @FindBy(xpath="//td[@id='ExchangeTable_col_1-0']")
  private static WebElement selectRow;

  public static boolean checkDeleteRowInUSDExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	  excelReader = new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	  System.out.println("****************************************** checkValuesUpdatedInExchangeRateForCompanyBase *****************************************");

	  try
	  {
		  /*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		  baseCurrencyTxt.click();
		  baseCurrencyTxt.sendKeys(Keys.END);
		  baseCurrencyTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		  baseCurrencyTxt.sendKeys(Keys.BACK_SPACE);
		  Thread.sleep(1000);
			 
		  int baseCurrencyComboListCount = baseCurrencyComboList.size();
			
		  ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
			
		  for(int i=1;i<baseCurrencyComboListCount;i++)
		  {
			  String data=baseCurrencyComboList.get(i).getText();
			  if(data.equalsIgnoreCase("AED"))
			  {
				  baseCurrencyComboList.get(i).click();
			  }	
		  }
			 
		  String actBaseCurrencyValue = baseCurrencyTxt.getAttribute("value");
		  baseCurrencyTxt.sendKeys(Keys.TAB);
	
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
		  withEffectiveDateTxt.click();*/
		
		  
		  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectRow));
		  selectRow.click();
			
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectDeleteOption));		
		  selectDeleteOption.click();
			
		  getWaitForAlert();
			
		  String actCompanySaveMsg=getAlert().getText();
		    
		  String getExpectedDeleteRowMsg= excelReader.getCellData(xlSheetName, 241, 7); 
		  
		  excelReader.setCellData(xlfile, xlSheetName, 241, 8, actCompanySaveMsg);
		    
		  System.out.println("Delete Row Message Value Actual          :" + actCompanySaveMsg + "      Value Expected : " + getExpectedDeleteRowMsg);
	
		  getAlert().accept();
		    	  
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionSaveIcon));
		  exchangeRateDefinitionSaveIcon.click();
			
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
			
		  String expSaveExchangeRate = excelReader.getCellData(xlSheetName, 242, 7);
			
		  boolean actMessageOnExchangeRate=checkValidationMessageboolean(expSaveExchangeRate);
		  boolean expMessageOnExchangeRate=true;
		  
		  String actResult = Boolean.toString(actMessageOnExchangeRate);
		  
		  excelReader.setCellData(xlfile, xlSheetName, 240, 8, actResult.toUpperCase());
		  
		  System.out.println("Excange Rate Update Currency Definition Value Actual : " + actMessageOnExchangeRate+ "      Value Expected : " + expMessageOnExchangeRate);
		    
		  if(getExpectedDeleteRowMsg.equalsIgnoreCase(actCompanySaveMsg)
				  && actMessageOnExchangeRate==expMessageOnExchangeRate)
		  {
			  excelReader.setCellData(xlfile, xlSheetName, 240, 9, resPass);
			  return true;
		  }
		  else
		  {
			  excelReader.setCellData(xlfile, xlSheetName, 240, 9, resFail);
			  return false;
		  }
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage().substring(0, 100);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 240, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }  
  }

	
	
  public static boolean checkUSDUpdatedWithRowDeleteValuesInSavedExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	  excelReader = new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	  System.out.println("******************************************************** checkUSDUpdatedWithRowDelteValuesInSavedExchangeRate *****************************************************");

	  try
	  {
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		  baseCurrencyTxt.click();
		  baseCurrencyTxt.sendKeys("USD");
		  Thread.sleep(2000);
			 
		/*  int baseCurrencyComboListCount = baseCurrencyComboList.size();
			
		  ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
			
		  for(int i=1;i<baseCurrencyComboListCount;i++)
		  {
			  String data=baseCurrencyComboList.get(i).getText();
			  if(data.equalsIgnoreCase("USD"))
			  {
				  baseCurrencyComboList.get(i).click();
			  }	
		  }*/
			 
		  baseCurrencyTxt.sendKeys(Keys.TAB);
		  
		  Thread.sleep(2000);
		  
		  String actBaseCurrencyValue = baseCurrencyTxt.getAttribute("value");

		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
		  withEffectiveDateTxt.click();
						
		  String actCurrencyNameR1C1         = exchangeRateDefinitionCurrencyNameRow2Col1.getText();
		  String actCurrencyDefinedAsR1C2    = exchangeRateDefinitionDefinedAsRow2Col2.getText();
		  String actCurrencyRateR1C3         = exchangeRateDefinitionRateRow2Col3.getText();
		  String actCurrencyDescriptionR1C4  = exchangeRateDefinitionDescriptionRow2Col4.getText();
		  
		  String expBaseCurrencyValue        = excelReader.getCellData(xlSheetName, 244, 7);
		  String expCurrencyNameR1C1         = excelReader.getCellData(xlSheetName, 245, 7);
		  String expCurrencyDefinedAsR1C2    = excelReader.getCellData(xlSheetName, 246, 7);
		  String expCurrencyRateR1C3         = excelReader.getCellData(xlSheetName, 247, 7);
		  String expCurrencyDescriptionR1C4  = excelReader.getCellData(xlSheetName, 248, 7);
			
		  excelReader.setCellData(xlfile, xlSheetName, 244, 8, actBaseCurrencyValue);
		  excelReader.setCellData(xlfile, xlSheetName, 245, 8, actCurrencyNameR1C1);
		  excelReader.setCellData(xlfile, xlSheetName, 246, 8, actCurrencyDefinedAsR1C2);
		  excelReader.setCellData(xlfile, xlSheetName, 247, 8, actCurrencyRateR1C3);
		  excelReader.setCellData(xlfile, xlSheetName, 248, 8, actCurrencyDescriptionR1C4);
			
		  System.out.println("Base Currency Value Actual              : " + actBaseCurrencyValue+       " Value Expected : " + expBaseCurrencyValue);
		  System.out.println("Currency Name Value Actual              : " + actCurrencyNameR1C1+        " Value Expected : " + expCurrencyNameR1C1);
		  System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR1C2+   " Value Expected : " + expCurrencyDefinedAsR1C2);
		  System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR1C3+        " Value Expected : " + expCurrencyRateR1C3);
		  System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR1C4+ " Value Expected : " + expCurrencyDescriptionR1C4);
			
		  if (actBaseCurrencyValue.equalsIgnoreCase(expBaseCurrencyValue)
				  
				  && actCurrencyNameR1C1.equalsIgnoreCase(expCurrencyNameR1C1)
				  && actCurrencyDefinedAsR1C2.equalsIgnoreCase(expCurrencyDefinedAsR1C2)
				  && actCurrencyRateR1C3.equalsIgnoreCase(expCurrencyRateR1C3)
				  && actCurrencyDescriptionR1C4.equalsIgnoreCase(actCurrencyDescriptionR1C4))
		  {
			  excelReader.setCellData(xlfile, xlSheetName, 243, 9, resPass);
			  return true;
		  } 
		  else
		  {
			  excelReader.setCellData(xlfile, xlSheetName, 243, 9, resFail);
			  return false;
		  }
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage().substring(0, 100);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 243, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  return false;
	  }   
  }
  
  
  
  //Here Exchange Rate Update Successfully message is display if Currency is not deleted and loading the details and saving
  public static boolean checkDeleteOptionWithYesInExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************* checkDeleteOptionWithYesInExchangeRate Method Is Executing.....................  **********************");

	try
	{
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchnageRateDeleteOption));
	  exchnageRateDeleteOption.click();
			    	     
	  getWaitForAlert();
	  
	  String actCompanySaveMsg=getAlert().getText();
	    
	  String getExpectedDeleteRowMsg= excelReader.getCellData(xlSheetName, 250, 7); 
	  
	  excelReader.setCellData(xlfile, xlSheetName, 250, 8, actCompanySaveMsg);
	    
	  System.out.println("Delete Row Message Value Actual          :" + actCompanySaveMsg + "      Value Expected : " + getExpectedDeleteRowMsg);
		
	  getAlert().accept();
		
	  String expGetMessageTextFromDeleteCurrency=excelReader.getCellData(xlSheetName, 251, 7); 
	  
	  boolean actMessageOnDeleteExchangeRate=checkValidationMessageboolean(expGetMessageTextFromDeleteCurrency);
	  boolean expMessageOnDeleteExchangeRate=true;
	  
	  String actResult = Boolean.toString(actMessageOnDeleteExchangeRate);
	  
	  excelReader.setCellData(xlfile, xlSheetName, 249, 8, actResult.toUpperCase());

	  System.out.println("Currency Master Delete Option, In Alert Click on Ok button Value Actual : "+actMessageOnDeleteExchangeRate +"Value Exepected : "+ expMessageOnDeleteExchangeRate);
	     		
	  if(actMessageOnDeleteExchangeRate==expMessageOnDeleteExchangeRate)
	  {	
		excelReader.setCellData(xlfile, xlSheetName, 249, 9, resPass);
		return true;
	  }	 
	  else
	  {    
		 excelReader.setCellData(xlfile, xlSheetName, 249, 9, resFail);
		 return false;
  	  }	    
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 249, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}   
  }
	
	
  // Check The AED Currency is displaying or not
  // There is Issue as of now in delete row, update the row and delete the exchange rate.....But if user delete whole exchange rate it is deleting
 
  @FindBy(xpath="//input[@id='ExchangeTable_CurrencyName']")
  private static WebElement currencyNameExchangeTable;
  
  public static boolean checkDeletedCurrencyValuesIsDisplayInExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("****************** checkDeletedCurrencyValuesIsDisplayInExchangeRate Method Is Executing.....................******************************");	
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		baseCurrencyTxt.click();
		baseCurrencyTxt.sendKeys(Keys.SPACE);
		
		int baseCurrencyComboListCount = baseCurrencyComboList.size();
		
		ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
		
		for(int i=1;i<baseCurrencyComboListCount;i++)
		{
			String data=baseCurrencyComboList.get(i).getText();
			if(data.equalsIgnoreCase("USD"))
			{
				baseCurrencyComboList.get(i).click();
			}		
		}
			 
		baseCurrencyTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
		withEffectiveDateTxt.click();
		withEffectiveDateTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyNameExchangeTable));
		
		System.out.println("The Currency Name must be Blank"+currencyNameExchangeTable.getAttribute("value"));
	
		
		boolean actCurrencyNameR1C1        = currencyNameExchangeTable.getAttribute("value").isEmpty();
	
		boolean expCurrencyNameR1C1        = true;
		
		String actResult = Boolean.toString(actCurrencyNameR1C1);
		
		excelReader.setCellData(xlfile, xlSheetName, 252, 8, actResult.toUpperCase());
		

		System.out.println("Currency Name Value Actual               : " + actCurrencyNameR1C1+        " Value Expected : " + expCurrencyNameR1C1);

		if (actCurrencyNameR1C1 == expCurrencyNameR1C1 )
		{
			excelReader.setCellData(xlfile, xlSheetName, 252, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 252, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 252, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	} 
  }

  
  
  //Save with AED with Input 
  
  public static boolean checkSaveAEDExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("**************************** checkSaveAEDExchangeRate Method Is Executing..................... *********************");
	
	String expDeleteMessageOkIsClicked;
	boolean actDeleteDisplayMessageOkIsClicked;
	boolean expDeleteDisplayMessageOkIsClicked;
	
	
	try
	{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		baseCurrencyTxt.click();
		
		baseCurrencyTxt.sendKeys(Keys.END);
		baseCurrencyTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		
		baseCurrencyTxt.sendKeys(excelReader.getCellData(xlSheetName, 254, 6));
		
		Thread.sleep(3000);  
		
		getAction().moveToElement(baseCurrencyTxt).sendKeys(Keys.TAB).perform();
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
		
		withEffectiveDateTxt.click();
		Thread.sleep(3000);
		getAction().moveToElement(withEffectiveDateTxt).sendKeys(Keys.TAB).perform();
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridcurrencyName1Txt));
		
		gridcurrencyName1Txt.click();
		
		gridcurrencyName1Txt.sendKeys(excelReader.getCellData(xlSheetName, 253, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridcurrencyName1Txt).sendKeys(Keys.TAB).perform();
		

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridDefineAsTxt));
		
		gridDefineAsTxt.click();
		
		gridDefineAsTxt.sendKeys(excelReader.getCellData(xlSheetName, 254, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridDefineAsTxt).sendKeys(Keys.TAB).perform();
		
			
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridRateTxt));
		
		gridRateTxt.sendKeys(excelReader.getCellData(xlSheetName, 255, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridRateTxt).sendKeys(Keys.TAB).perform();
		
		
		//Second row data
		
        
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridcurrencyName1Txt));
		gridcurrencyName1Txt.click();			
		gridcurrencyName1Txt.sendKeys(excelReader.getCellData(xlSheetName, 256, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridcurrencyName1Txt).sendKeys(Keys.TAB).perform();
		

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridDefineAsTxt));			
		gridDefineAsTxt.click();
		gridDefineAsTxt.sendKeys(excelReader.getCellData(xlSheetName, 257, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridDefineAsTxt).sendKeys(Keys.TAB).perform();
		
			
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridRateTxt));
		
		gridRateTxt.sendKeys(excelReader.getCellData(xlSheetName, 258, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridRateTxt).sendKeys(Keys.TAB).perform();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionSaveIcon));
		exchangeRateDefinitionSaveIcon.click();

		String expSaveExchangeRate = excelReader.getCellData(xlSheetName, 254, 7);
		
		boolean actMessageOnExchangeRate=checkValidationMessageboolean(expSaveExchangeRate);
        boolean expMessageOnExchangeRate=true;
        
        String actResult = Boolean.toString(actMessageOnExchangeRate);
        
        excelReader.setCellData(xlfile, xlSheetName, 254, 8, actResult.toUpperCase());
		  
		System.out.println("Excange Rate Update Currency Definition Value Actual : " + actMessageOnExchangeRate+ "      Value Expected : " + expMessageOnExchangeRate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		baseCurrencyTxt.click();

		
		
		//Save USD currency
		
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		
		baseCurrencyTxt.click();
		
		baseCurrencyTxt.sendKeys(excelReader.getCellData(xlSheetName, 231, 6));
		
		Thread.sleep(3000);  
		
		getAction().moveToElement(baseCurrencyTxt).sendKeys(Keys.TAB).perform();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
		
		withEffectiveDateTxt.click();
		Thread.sleep(3000);
		getAction().moveToElement(withEffectiveDateTxt).sendKeys(Keys.TAB).perform();
					
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridcurrencyName1Txt));
		
		gridcurrencyName1Txt.click();
		
		gridcurrencyName1Txt.sendKeys(excelReader.getCellData(xlSheetName, 232, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridcurrencyName1Txt).sendKeys(Keys.TAB).perform();
		

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridDefineAsTxt));
		
		gridDefineAsTxt.click();
		
		gridDefineAsTxt.sendKeys(excelReader.getCellData(xlSheetName, 233, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridDefineAsTxt).sendKeys(Keys.TAB).perform();
		
			
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridRateTxt));
		
		gridRateTxt.sendKeys(excelReader.getCellData(xlSheetName, 234, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridRateTxt).sendKeys(Keys.TAB).perform();
		
		
		//Second row data
		
        
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridcurrencyName1Txt));
		gridcurrencyName1Txt.click();			
		gridcurrencyName1Txt.sendKeys(excelReader.getCellData(xlSheetName, 235, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridcurrencyName1Txt).sendKeys(Keys.TAB).perform();
		

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridDefineAsTxt));			
		gridDefineAsTxt.click();
		gridDefineAsTxt.sendKeys(excelReader.getCellData(xlSheetName, 236, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridDefineAsTxt).sendKeys(Keys.TAB).perform();
		
			
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridRateTxt));
		
		gridRateTxt.sendKeys(excelReader.getCellData(xlSheetName, 237, 6));
		Thread.sleep(3000);
		getAction().moveToElement(gridRateTxt).sendKeys(Keys.TAB).perform();
		
		Thread.sleep(3000);
     	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionSaveIcon));
		
		exchangeRateDefinitionSaveIcon.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionSaveIcon));
		exchangeRateDefinitionSaveIcon.click();

		String expSaveExchangeRate0 = excelReader.getCellData(xlSheetName, 229, 7);
		
		boolean actMessageOnExchangeRate0=checkValidationMessageboolean(expSaveExchangeRate0);
        boolean expMessageOnExchangeRate0=true;
        
        String actResults = Boolean.toString(actMessageOnExchangeRate0);
        
        excelReader.setCellData(xlfile, xlSheetName, 229, 8, actResults.toUpperCase());
		  
		System.out.println("Excange Rate Update Currency Definition Value Actual : " + actMessageOnExchangeRate0 + "      Value Expected : " + expMessageOnExchangeRate0);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		baseCurrencyTxt.click();

		if (actMessageOnExchangeRate==expMessageOnExchangeRate && actMessageOnExchangeRate0==expMessageOnExchangeRate0) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 228, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 228, 9, resFail);
			return false;
		}

	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage().substring(0, 100);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 243, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  return false;
	  }   
  }  
  
  
	
  public static boolean checkSavedCurrencyValuesAfterDeleteAndInput() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************************************** checkSavedCurrencyValuesAfterDeleteAndInput ************************************************");

	try
	{
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyMenu));
		currencyMenu.click();
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateMenu));
		exchangeRateMenu.click();
		
		Thread.sleep(2000);
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		baseCurrencyTxt.click();
		baseCurrencyTxt.sendKeys(Keys.SPACE);
		 
		int baseCurrencyComboListCount = baseCurrencyComboList.size();
		
		ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
		
		for(int i=1;i<baseCurrencyComboListCount;i++)
		{
			String data=baseCurrencyComboList.get(i).getText();
			if(data.equalsIgnoreCase("AED"))
			{
				baseCurrencyComboList.get(i).click();
			}	
		}
		 
		
		baseCurrencyTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(4000);
		
		String actBaseCurrencyValue = baseCurrencyTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
		withEffectiveDateTxt.click();
		
		String actWithEffectiveDate = withEffectiveDateTxt.getAttribute("value");
		
		String actCurrencyNameR1C1 = exchangeRateDefinitionCurrencyNameRow1Col1.getText();
		String actCurrencyNameR2C1 = exchangeRateDefinitionCurrencyNameRow2Col1.getText();
		
		String actCurrencyDefinedAsR1C2 = exchangeRateDefinitionDefinedAsRow1Col2.getText();
		String actCurrencyDefinedAsR2C2 = exchangeRateDefinitionDefinedAsRow2Col2.getText();
		
		String actCurrencyRateR1C3 = exchangeRateDefinitionRateRow1Col3.getText();
		String actCurrencyRateR2C3 = exchangeRateDefinitionRateRow2Col3.getText();
		
		String actCurrencyDescriptionR1C4 = exchangeRateDefinitionDescriptionRow1Col4.getText();
		String actCurrencyDescriptionR2C4 = exchangeRateDefinitionDescriptionRow2Col4.getText();
		
		String expBaseCurrencyValue = excelReader.getCellData(xlSheetName, 260, 7);
		
		String expCurrencyNameR1C1 = excelReader.getCellData(xlSheetName, 261, 7);
		String expCurrencyNameR2C1 = excelReader.getCellData(xlSheetName, 262, 7);
		
		String expCurrencyDefinedAsR1C2 = excelReader.getCellData(xlSheetName, 263, 7);
		String expCurrencyDefinedAsR2C2 = excelReader.getCellData(xlSheetName, 264, 7);
		
		String expCurrencyRateR1C3 = excelReader.getCellData(xlSheetName, 265, 7);
		String expCurrencyRateR2C3 = excelReader.getCellData(xlSheetName, 266, 7);
		
		String expCurrencyDescriptionR1C4 = excelReader.getCellData(xlSheetName, 267, 7);
		String expCurrencyDescriptionR2C4 = excelReader.getCellData(xlSheetName, 268, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 260, 8, actBaseCurrencyValue);
		excelReader.setCellData(xlfile, xlSheetName, 261, 8, actCurrencyNameR1C1);
		excelReader.setCellData(xlfile, xlSheetName, 262, 8, actCurrencyNameR2C1);
		excelReader.setCellData(xlfile, xlSheetName, 263, 8, actCurrencyDefinedAsR1C2);
		excelReader.setCellData(xlfile, xlSheetName, 264, 8, actCurrencyDefinedAsR2C2);
		excelReader.setCellData(xlfile, xlSheetName, 265, 8, actCurrencyRateR1C3);
		excelReader.setCellData(xlfile, xlSheetName, 266, 8, actCurrencyRateR2C3);
		excelReader.setCellData(xlfile, xlSheetName, 267, 8, actCurrencyDescriptionR1C4);
		excelReader.setCellData(xlfile, xlSheetName, 268, 8, actCurrencyDescriptionR2C4);
		
		System.out.println("Base Currency Value Actual              : " + actBaseCurrencyValue+       " Value Expected : " + expBaseCurrencyValue);
		System.out.println("Currency Name Value Actual              : " + actCurrencyNameR1C1+        " Value Expected : " + expCurrencyNameR1C1);
		System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR1C2+   " Value Expected : " + expCurrencyDefinedAsR1C2);
		System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR1C3+        " Value Expected : " + expCurrencyRateR1C3);
		System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR1C4+ " Value Expected : " + expCurrencyDescriptionR1C4);
		System.out.println("Currency Name Value Actual              : " + actCurrencyNameR2C1+        " Value Expected : " + expCurrencyNameR2C1);
		System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR2C2+   " Value Expected : " + expCurrencyDefinedAsR2C2);
		System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR2C3+        " Value Expected : " + expCurrencyRateR2C3);
		System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR2C4+ " Value Expected : " + expCurrencyDescriptionR2C4);
		
		if (actBaseCurrencyValue.equalsIgnoreCase(expBaseCurrencyValue)
				
				&& actCurrencyNameR1C1.equalsIgnoreCase(expCurrencyNameR1C1)
				&& actCurrencyDefinedAsR1C2.equalsIgnoreCase(expCurrencyDefinedAsR1C2)
				&& actCurrencyRateR1C3.equalsIgnoreCase(expCurrencyRateR1C3)
				&& actCurrencyDescriptionR1C4.equalsIgnoreCase(actCurrencyDescriptionR1C4)

				&& actCurrencyNameR2C1.equalsIgnoreCase(expCurrencyNameR2C1)
				&& actCurrencyDefinedAsR2C2.equalsIgnoreCase(expCurrencyDefinedAsR2C2)
				&& actCurrencyRateR2C3.equalsIgnoreCase(expCurrencyRateR2C3)
				&& actCurrencyDescriptionR2C4.equalsIgnoreCase(actCurrencyDescriptionR2C4))
		{	
			excelReader.setCellData(xlfile, xlSheetName, 259, 9, resPass);
			return true;
		}		 
		else
		{    
			excelReader.setCellData(xlfile, xlSheetName, 259, 9, resFail);
			return false;
		}		  		
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 259, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	} 
 }
  
  
  // Check Import From Excel in Exchange Rate
  
  @FindBy(xpath = "//input[@id='uploadFile']")
  private static WebElement importFilePathTxt;

  // input[@id='uploadBtn']
  @FindBy(xpath = "//*[@id='formLoadDataExcel']/div/div/span/span")
  private static WebElement importFileBtn;

  @FindBy(xpath = "//div[contains(text(),'Exchange Rate Fields')]")
  private static WebElement importFileExchangeRateColumnName;

  @FindBy(xpath = "//div[contains(text(),'External Fields')]")
  private static WebElement importFileExternalFieldsColumnName;

  @FindBy(xpath = "//td[@id='ImportTable_col_1-1']")
  private static WebElement importFileBaseCurrencyName;

  @FindBy(xpath = "//td[@id='ImportTable_col_1-2']")
  private static WebElement importFileBaseCurrencyValue;

  @FindBy(xpath = "//td[@id='ImportTable_col_2-1']")
  private static WebElement importFileEffectiveDateName;

  @FindBy(xpath = "//td[@id='ImportTable_col_2-2']")
  private static WebElement importFileEffectiveDateValue;

  @FindBy(xpath = "//td[@id='ImportTable_col_3-1']")
  private static WebElement importFileDefinedCurrencyName;

  @FindBy(xpath = "//td[@id='ImportTable_col_3-2']")
  private static WebElement importFileDefinedCurrencyValue;

  @FindBy(xpath = "//td[@id='ImportTable_col_4-1']")
  private static WebElement importFileRateName;

  @FindBy(xpath = "//td[@id='ImportTable_col_4-2']")
  private static WebElement importFileRateValue;

  @FindBy(xpath = "//td[@id='ImportTable_col_5-1']")
  private static WebElement importFileSelectedCurrencyName;
	
  @FindBy(xpath = "//td[@id='ImportTable_col_5-2']")
  private static WebElement importFileSelectedCurrencyValue;
	
  @FindBy(xpath = "//button[@id='btnImportData']")
  private static WebElement importDataBtn;
	
  @FindBy(xpath = "//button[@id='btnCloseImport']")
  private static WebElement closeImportBtn;
	
  @FindBy(xpath = "//span[contains(text(),'Select Sheet')]")
  private static WebElement selectSheetName;
	
  @FindBy(xpath = "//select[@id='ImportTable_ExternalField']")
  private static WebElement selectTextFromComboBox;
	
  @FindBy(xpath = "//div[@id='popUpdataSheetName']")
  private static WebElement sheetNamesDisplayArea;
	
  @FindBy(xpath = "//li[@class='clsSheetName']")
  private static WebElement SmokeMasters;
	
  @FindBy(xpath = "//button[@id='btnSheetOk']")
  private static WebElement sheetOkBtn;
	
  @FindBy(xpath = "//button[@id='btnSheetClose']")
  private static WebElement sheetCloseBtn;

	
	
 public static boolean checkClickOnImportFromExcelToDisplayImportScreenInExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************* checkClickOnImportFromExcelToDisplayImportScreenInExchangeRate **********************************");
		
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importFromExcelIcon));
		importFromExcelIcon.click();
		//Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importFilePathTxt));

		boolean actImportFilePath               = importFilePathTxt.isDisplayed();
		boolean actImportFileBtn                = importFileBtn.isDisplayed();
		boolean actExchangeRateFieldsColumnName = importFileExchangeRateColumnName.isDisplayed();
		boolean actExternalFieldsColumnName     = importFileExternalFieldsColumnName.isDisplayed();

		boolean actBaseCurrrencyName            = importFileBaseCurrencyName.isDisplayed();
		boolean actBaseCurrrencyValue           = importFileBaseCurrencyValue.isDisplayed();

		boolean actEffectiveDateName            = importFileEffectiveDateName.isDisplayed();
		boolean actEffectiveDateValue           = importFileEffectiveDateValue.isDisplayed();

		boolean actDefinedCurrencyName          = importFileDefinedCurrencyName.isDisplayed();
		boolean actDefinedCurrencyValue         = importFileDefinedCurrencyValue.isDisplayed();

		boolean actRateName                     = importFileRateName.isDisplayed();
		boolean actRateValue                    = importFileRateValue.isDisplayed();

		boolean actSelectedCurrencyName         = importFileSelectedCurrencyName.isDisplayed();
		boolean actSelectedCurrencyValue        = importFileSelectedCurrencyValue.isDisplayed();

		boolean actImportDataBtn                = importDataBtn.isDisplayed();
		boolean actImportCloseBtn               = closeImportBtn.isDisplayed();

		boolean expImportFilePath               = true;
		boolean expImportFileBtn                = true;
		boolean expExchangeRateFieldsColumnName = true;
		boolean expExternalFieldsColumnName     = true;

		boolean expBaseCurrrencyName            = true;
		boolean expBaseCurrrencyValue           = true;

		boolean expEffectiveDateName            = true;
		boolean expEffectiveDateValue           = true;

		boolean expDefinedCurrencyName          = true;
		boolean expDefinedCurrencyValue         = true;

		boolean expRateName                     = true;
		boolean expRateValue                    = true;

		boolean expSelectedCurrencyName         = true;
		boolean expSelectedCurrencyValue        = true;

		boolean expImportDataBtn                = true;
		boolean expImportCloseBtn               = true;

		System.out.println("Import File Path Value Actual                      : " + actImportFilePath+               " Value Expected : " + expImportFilePath);

		System.out.println("Import File Button Value Actual                    : " + actImportFileBtn+                " Value Expected : " + expImportFileBtn);
		System.out.println("Exchange Rate Name Value Actual                    : " + actExchangeRateFieldsColumnName+ " Value Expected : " + expExchangeRateFieldsColumnName);
		System.out.println("External Fields Name Value Actual                  : " + actExternalFieldsColumnName+     " Value Expected : " + expExternalFieldsColumnName);
		System.out.println("Base Currency Name Value Actual                    : " + actBaseCurrrencyName+            " Value Expected : " + expBaseCurrrencyName);

		System.out.println("Base Currency Value Actual                         : " + actBaseCurrrencyValue+           " Value Expected : " + expBaseCurrrencyValue);
		System.out.println("Effective Date Name Value Actual                   : " + actEffectiveDateName+            " Value Expected : " + expEffectiveDateName);
		System.out.println("Effective Date Value Actual                        : " + actEffectiveDateValue+           " Value Expected : " + expEffectiveDateValue);
		System.out.println("Defined Currency Name Value Actual                 : " + actDefinedCurrencyName+          " Value Expected : " + expDefinedCurrencyName);

		System.out.println("Defined Currency Value Actual                      : " + actDefinedCurrencyValue+         " Value Expected : " + expDefinedCurrencyValue);
		System.out.println("Rate Name Value Actual                             : " + actRateName +                    " Value Expected : "+ expRateName);
		System.out.println("Rate Value Actual                                  : " + actRateValue+                    " Value Expected : " + expRateValue);
        System.out.println("Selected Currency Name Value Actual                : " + actSelectedCurrencyName+         " Value Expected : " + expSelectedCurrencyName);
		System.out.println("Selected Currency Value Actual                     : " + actSelectedCurrencyValue+        " Value Expected : " + expSelectedCurrencyValue);

		System.out.println("Import Data Button Value Actual                    : " + actImportDataBtn+                " Value Expected : " + expImportDataBtn);
        System.out.println("Import Close Button Value Actual                   : " + actImportCloseBtn+               " Value Expected : " + expImportCloseBtn);
        
        
        boolean actMethod = actImportFilePath == expImportFilePath && actExchangeRateFieldsColumnName == expExchangeRateFieldsColumnName
							&& actExternalFieldsColumnName == expExternalFieldsColumnName && actBaseCurrrencyName == expBaseCurrrencyName
							&& actBaseCurrrencyValue == expBaseCurrrencyValue && actEffectiveDateName == expEffectiveDateName
							&& actEffectiveDateName == expEffectiveDateName && actEffectiveDateValue == expEffectiveDateValue
							&& actDefinedCurrencyName == expDefinedCurrencyName && actDefinedCurrencyValue == expDefinedCurrencyValue && actRateName == expRateName
							&& actRateValue == expRateValue && actSelectedCurrencyName == expSelectedCurrencyName && actSelectedCurrencyValue == actSelectedCurrencyValue
							&& actImportDataBtn == expImportDataBtn && actImportCloseBtn == expImportCloseBtn;

        String actResult = Boolean.toString(actMethod);
        
        excelReader.setCellData(xlfile, xlSheetName, 269, 8, actResult.toUpperCase());
        
		if (actMethod==true)
		{	
			excelReader.setCellData(xlfile, xlSheetName, 269, 9, resPass);
			return true;
		}		 
		else
		{    
			excelReader.setCellData(xlfile, xlSheetName, 269, 9, resFail);
			return false;
		}		  		
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 269, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	} 
 }

 
 public static boolean checkClickOnImportDataInImportFromExcelPageOfExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************* checkClickOnImportDataInImportFromExcelPageOfExchangeRate ********************************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importFilePathTxt));
		importFilePathTxt.click();
		importFilePathTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importFileBtn));
		importFileBtn.click();
		
		Thread.sleep(5000);
		
		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\exchangeRateTwoRows.exe");

		Thread.sleep(5000);

		boolean actSelectSheetName     = selectSheetName.isDisplayed();
		boolean actSheetNameArea       = sheetNamesDisplayArea.isDisplayed();
		boolean actSmokeMasters        = SmokeMasters.isDisplayed();
		boolean actSheetOkBtn          = sheetOkBtn.isDisplayed();
		boolean actSheetCloseBtn       = sheetCloseBtn.isDisplayed();

		boolean expSelectSheetName     = true;
		boolean expSheetNameArea       = true;
		boolean expSmokeMasters        = true;
		boolean expSheetOkBtn          = true;
		boolean expSheetCloseBtn       = true;

		System.out.println("Sheet Name Value Actual                   : " + actSelectSheetName+  " Value Expected : " + expSelectSheetName);
		System.out.println("Sheet Name Area Value Actual              : " + actSheetNameArea+    " Value Expected : " + expSheetNameArea);
		System.out.println("Sheet One Value Actual                    : " + actSmokeMasters +    " Value Expected : "+ expSmokeMasters);
		System.out.println("Ok Button Value Actual                    : " + actSheetOkBtn+       " Value Expected : " + expSheetOkBtn);
		System.out.println("Close Button Value Actual                 : " + actSheetCloseBtn+    " Value Expected : " + expSheetCloseBtn);


		boolean actMethod = actSelectSheetName == expSelectSheetName && actSheetNameArea == expSheetNameArea && actSmokeMasters == expSmokeMasters
				&& actSheetOkBtn == expSheetOkBtn && actSheetCloseBtn == expSheetCloseBtn;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 270, 8, actResult.toUpperCase());
		
		if (actMethod==true)
		{	
			excelReader.setCellData(xlfile, xlSheetName, 270, 9, resPass);
			return true;
		}		 
		else
		{    
			excelReader.setCellData(xlfile, xlSheetName, 270, 9, resFail);
			return false;
		}		  		
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 270, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	}  
 }

 
  public static boolean checkSelectColumnsMappingInImportScreenOfExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************* checkSelectColumnsMappingInImportScreenOfExchangeRate ********************************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SmokeMasters));
		SmokeMasters.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sheetOkBtn));
		sheetOkBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importFilePathTxt));
		importFilePathTxt.click();

		String actFileName = importFilePathTxt.getAttribute("value");
		String expFileName = excelReader.getCellData(xlSheetName, 272, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 272, 8, actFileName);

		System.out.println("Import File Path Value Actual                   :   " + actFileName +             "  Value Expected :  "+ expFileName);

		if (actFileName.equalsIgnoreCase(expFileName)) 
		{	
			excelReader.setCellData(xlfile, xlSheetName, 271, 9, resPass);
			return true;
		}		 
		else
		{    
			excelReader.setCellData(xlfile, xlSheetName, 271, 9, resFail);
			return false;
		}		  		
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 271, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	}  
  }
  

  public static boolean checkSelectSheetAndClickOnOkButtonInSelectSheetScreenOfExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************* checkSelectSheetAndClickOnOkButtonInSelectSheetScreenOfExchangeRate ***************************************");
	
     
	try
	{
		// Here i am using Second Row Selection for alternative mechanism
		// Selecting Effective Date
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importFileEffectiveDateValue));
		importFileEffectiveDateValue.click();

		selectTextFromComboBox.sendKeys(excelReader.getCellData(xlSheetName, 273, 6));
		selectTextFromComboBox.sendKeys(Keys.TAB);
		//Thread.sleep(2000);

		// Selecting Defined Currency Name
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importFileDefinedCurrencyValue));
		importFileDefinedCurrencyValue.click();

		selectTextFromComboBox.sendKeys(excelReader.getCellData(xlSheetName, 274, 6));
		selectTextFromComboBox.sendKeys(Keys.TAB);
		//Thread.sleep(2000);

		// Selecting Rate
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importFileRateValue));
		importFileRateValue.click();

		selectTextFromComboBox.sendKeys(excelReader.getCellData(xlSheetName, 275, 6));
		selectTextFromComboBox.sendKeys(Keys.TAB);
		//Thread.sleep(2000);

		// Selecting Selected Currency
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importFileSelectedCurrencyValue));
		importFileSelectedCurrencyValue.click();

		selectTextFromComboBox.sendKeys(excelReader.getCellData(xlSheetName, 276, 6));
		selectTextFromComboBox.sendKeys(Keys.TAB);
		//Thread.sleep(2000);

		// Selecting Base Currency Name
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importFileBaseCurrencyValue));
		importFileBaseCurrencyValue.click();

		selectTextFromComboBox.sendKeys(excelReader.getCellData(xlSheetName, 277, 6));
		selectTextFromComboBox.sendKeys(Keys.TAB);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importDataBtn));
		importDataBtn.click();
		//Thread.sleep(5000);

		String expImportCurrencyExchangeRate = excelReader.getCellData(xlSheetName, 274, 7);

		boolean actMessageOnSaveExchangeRate=checkValidationMessageboolean(expImportCurrencyExchangeRate);
		boolean expMessageOnSaveExchangeRate=true;
		
		System.out.println("Import File Path Value Actual        : " + actMessageOnSaveExchangeRate+ "  Value Expected : " + expMessageOnSaveExchangeRate);

		String actResult = Boolean.toString(actMessageOnSaveExchangeRate);

		excelReader.setCellData(xlfile, xlSheetName, 273, 8, actResult.toUpperCase());
		
		if (actMessageOnSaveExchangeRate==expMessageOnSaveExchangeRate)
		{	
			excelReader.setCellData(xlfile, xlSheetName, 273, 9, resPass);
			return true;
		}		 
		else
		{    
			excelReader.setCellData(xlfile, xlSheetName, 273, 9, resFail);
			return false;
		}		  		
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 273, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	}  
 }

  
 // Checking the Import Currency Values displaying the Exchange

 @FindBy(xpath="//input[@id='ExchangeTable_DefinedAs']")
 private static WebElement currencyDefinedAsExchangeTable;
  
 public static boolean checkImportedValuesFirstInExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("****************************************** checkImportedValuesFirstInExchangeRate *****************************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		baseCurrencyTxt.click();
		baseCurrencyTxt.sendKeys(Keys.END);
		baseCurrencyTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		baseCurrencyTxt.sendKeys("i");
		
		Thread.sleep(2000);
		 
		int baseCurrencyComboListCount = baseCurrencyComboList.size();
		 
		ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
		
		for(int i=1;i<baseCurrencyComboListCount;i++)
		{
			String data=baseCurrencyComboList.get(i).getText();
			if(data.equalsIgnoreCase("INR"))
			{
				baseCurrencyComboList.get(i).click();
			}	
		}
		 
		baseCurrencyTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(4000);
		
		String actBaseCurrencyValue = baseCurrencyTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
		withEffectiveDateTxt.click();
		withEffectiveDateTxt.sendKeys("01/01");
		withEffectiveDateTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		baseCurrencyTxt.click();
		baseCurrencyTxt.sendKeys(Keys.TAB);
		
		String actWithEffectiveDate = withEffectiveDateTxt.getAttribute("value");
		Thread.sleep(2000);
		
		String actCurrencyNameR1C1 = exchangeRateDefinitionCurrencyNameRow1Col1.getText();
		String actCurrencyNameR2C1 = exchangeRateDefinitionCurrencyNameRow2Col1.getText();
		
		String actCurrencyDefinedAsR1C2 = exchangeRateDefinitionDefinedAsRow1Col2.getText();
		String actCurrencyDefinedAsR2C2 = exchangeRateDefinitionDefinedAsRow2Col2.getText();
		
		String actCurrencyRateR1C3 = exchangeRateDefinitionRateRow1Col3.getText();
		String actCurrencyRateR2C3 = exchangeRateDefinitionRateRow2Col3.getText();
		
		String actCurrencyDescriptionR1C4 = exchangeRateDefinitionDescriptionRow1Col4.getText();
		String actCurrencyDescriptionR2C4 = exchangeRateDefinitionDescriptionRow2Col4.getText();
		
		String expBaseCurrencyValue = excelReader.getCellData(xlSheetName, 279, 7);
		
		String expCurrencyNameR1C1 = excelReader.getCellData(xlSheetName, 280, 7);
		String expCurrencyNameR2C1 = excelReader.getCellData(xlSheetName, 281, 7);
		
		String expCurrencyDefinedAsR1C2 = excelReader.getCellData(xlSheetName, 282, 7);
		String expCurrencyDefinedAsR2C2 = excelReader.getCellData(xlSheetName, 283, 7);
		
		String expCurrencyRateR1C3 = excelReader.getCellData(xlSheetName, 284, 7);
		String expCurrencyRateR2C3 = excelReader.getCellData(xlSheetName, 285, 7);
		
		String expCurrencyDescriptionR1C4 = excelReader.getCellData(xlSheetName, 286, 7);
		String expCurrencyDescriptionR2C4 = excelReader.getCellData(xlSheetName, 287, 7);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 279, 8, actBaseCurrencyValue);
		excelReader.setCellData(xlfile, xlSheetName, 280, 8, actCurrencyNameR1C1);
		excelReader.setCellData(xlfile, xlSheetName, 281, 8, actCurrencyNameR2C1);
		excelReader.setCellData(xlfile, xlSheetName, 282, 8, actCurrencyDefinedAsR1C2);
		excelReader.setCellData(xlfile, xlSheetName, 283, 8, actCurrencyDefinedAsR2C2);
		excelReader.setCellData(xlfile, xlSheetName, 284, 8, actCurrencyRateR1C3);
		excelReader.setCellData(xlfile, xlSheetName, 285, 8, actCurrencyRateR2C3);
		excelReader.setCellData(xlfile, xlSheetName, 286, 8, actCurrencyDescriptionR1C4);
		excelReader.setCellData(xlfile, xlSheetName, 287, 8, actCurrencyDescriptionR2C4);
		
		System.out.println("Base Currency Value Actual              : " + actBaseCurrencyValue+       " Value Expected : " + expBaseCurrencyValue);
		System.out.println("Currency Name Value Actual              : " + actCurrencyNameR1C1+        " Value Expected : " + expCurrencyNameR1C1);
		System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR1C2+   " Value Expected : " + expCurrencyDefinedAsR1C2);
		System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR1C3+        " Value Expected : " + expCurrencyRateR1C3);
		System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR1C4+ " Value Expected : " + expCurrencyDescriptionR1C4);
		System.out.println("Currency Name Value Actual              : " + actCurrencyNameR2C1+        " Value Expected : " + expCurrencyNameR2C1);
		System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR2C2+   " Value Expected : " + expCurrencyDefinedAsR2C2);
		System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR2C3+        " Value Expected : " + expCurrencyRateR2C3);
		System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR2C4+ " Value Expected : " + expCurrencyDescriptionR2C4);
		
		if (actBaseCurrencyValue.equalsIgnoreCase(expBaseCurrencyValue)
				
					&& actCurrencyNameR1C1.equalsIgnoreCase(expCurrencyNameR1C1)
					&& actCurrencyDefinedAsR1C2.equalsIgnoreCase(expCurrencyDefinedAsR1C2)
					&& actCurrencyRateR1C3.equalsIgnoreCase(expCurrencyRateR1C3)
					&& actCurrencyDescriptionR1C4.equalsIgnoreCase(actCurrencyDescriptionR1C4)

					&& actCurrencyNameR2C1.equalsIgnoreCase(expCurrencyNameR2C1)
					&& actCurrencyDefinedAsR2C2.equalsIgnoreCase(expCurrencyDefinedAsR2C2)
					&& actCurrencyRateR2C3.equalsIgnoreCase(expCurrencyRateR2C3)
					&& actCurrencyDescriptionR2C4.equalsIgnoreCase(actCurrencyDescriptionR2C4))
		{
			excelReader.setCellData(xlfile, xlSheetName, 278, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 278, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 50);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 278, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	} 
 }

  public static boolean checkImportedValuesSecondInExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("*********************************************** checkImportedValuesSecondInExchangeRate ****************************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		baseCurrencyTxt.click();
		baseCurrencyTxt.sendKeys(Keys.END);
		baseCurrencyTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		baseCurrencyTxt.sendKeys(Keys.SPACE);
		 
		int baseCurrencyComboListCount = baseCurrencyComboList.size();
		
		ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
		
		for(int i=1;i<baseCurrencyComboListCount;i++)
		{
			String data=baseCurrencyComboList.get(i).getText();
			if(data.equalsIgnoreCase("AED"))
			{
				baseCurrencyComboList.get(i).click();
			}	
		}
		 
		
		baseCurrencyTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		String actBaseCurrencyValue = baseCurrencyTxt.getAttribute("value");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(withEffectiveDateTxt));
		withEffectiveDateTxt.click();
		withEffectiveDateTxt.sendKeys("01/01");
		withEffectiveDateTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyTxt));
		baseCurrencyTxt.click();
		
		
		baseCurrencyTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2990);
		
		String actWithEffectiveDate = withEffectiveDateTxt.getAttribute("value");
		
		String actCurrencyNameR1C1 = exchangeRateDefinitionCurrencyNameRow1Col1.getText();
		String actCurrencyNameR2C1 = exchangeRateDefinitionCurrencyNameRow2Col1.getText();
		
		String actCurrencyDefinedAsR1C2 = exchangeRateDefinitionDefinedAsRow1Col2.getText();
		String actCurrencyDefinedAsR2C2 = exchangeRateDefinitionDefinedAsRow2Col2.getText();
		
		String actCurrencyRateR1C3 = exchangeRateDefinitionRateRow1Col3.getText();
		String actCurrencyRateR2C3 = exchangeRateDefinitionRateRow2Col3.getText();
		
		String actCurrencyDescriptionR1C4 = exchangeRateDefinitionDescriptionRow1Col4.getText();
		String actCurrencyDescriptionR2C4 = exchangeRateDefinitionDescriptionRow2Col4.getText();
		
		String expBaseCurrencyValue = excelReader.getCellData(xlSheetName, 289, 7);
		
		String expCurrencyNameR1C1 = excelReader.getCellData(xlSheetName, 290, 7);
		String expCurrencyNameR2C1 = excelReader.getCellData(xlSheetName, 291, 7);
		
		String expCurrencyDefinedAsR1C2 = excelReader.getCellData(xlSheetName, 292, 7);
		String expCurrencyDefinedAsR2C2 = excelReader.getCellData(xlSheetName, 293, 7);
		
		String expCurrencyRateR1C3 = excelReader.getCellData(xlSheetName, 294, 7);
		String expCurrencyRateR2C3 = excelReader.getCellData(xlSheetName, 295, 7);
		
		String expCurrencyDescriptionR1C4 = excelReader.getCellData(xlSheetName, 296, 7);
		String expCurrencyDescriptionR2C4 = excelReader.getCellData(xlSheetName, 297, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 289, 8, actBaseCurrencyValue);
		excelReader.setCellData(xlfile, xlSheetName, 290, 8, actCurrencyNameR1C1);
		excelReader.setCellData(xlfile, xlSheetName, 291, 8, actCurrencyNameR2C1);
		excelReader.setCellData(xlfile, xlSheetName, 292, 8, actCurrencyDefinedAsR1C2);
		excelReader.setCellData(xlfile, xlSheetName, 293, 8, actCurrencyDefinedAsR2C2);
		excelReader.setCellData(xlfile, xlSheetName, 294, 8, actCurrencyRateR1C3);
		excelReader.setCellData(xlfile, xlSheetName, 295, 8, actCurrencyRateR2C3);
		excelReader.setCellData(xlfile, xlSheetName, 296, 8, actCurrencyDescriptionR1C4);
		excelReader.setCellData(xlfile, xlSheetName, 297, 8, actCurrencyDescriptionR2C4);
		
		System.out.println("Base Currency Value Actual              : " + actBaseCurrencyValue+       " Value Expected : " + expBaseCurrencyValue);
		System.out.println("Currency Name Value Actual              : " + actCurrencyNameR1C1+        " Value Expected : " + expCurrencyNameR1C1);
		System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR1C2+   " Value Expected : " + expCurrencyDefinedAsR1C2);
		System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR1C3+        " Value Expected : " + expCurrencyRateR1C3);
		System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR1C4+ " Value Expected : " + expCurrencyDescriptionR1C4);
		System.out.println("Currency Name Value Actual              : " + actCurrencyNameR2C1+        " Value Expected : " + expCurrencyNameR2C1);
		System.out.println("Currency Defined As Value Actual        : " + actCurrencyDefinedAsR2C2+   " Value Expected : " + expCurrencyDefinedAsR2C2);
		System.out.println("Currency Rate Value Actual              : " + actCurrencyRateR2C3+        " Value Expected : " + expCurrencyRateR2C3);
		System.out.println("Currency Description Value Actual       : " + actCurrencyDescriptionR2C4+ " Value Expected : " + expCurrencyDescriptionR2C4);
		
		if (actBaseCurrencyValue.equalsIgnoreCase(expBaseCurrencyValue)
				
				&& actCurrencyNameR1C1.equalsIgnoreCase(expCurrencyNameR1C1)
				&& actCurrencyDefinedAsR1C2.equalsIgnoreCase(expCurrencyDefinedAsR1C2)
				&& actCurrencyRateR1C3.equalsIgnoreCase(expCurrencyRateR1C3)
				&& actCurrencyDescriptionR1C4.equalsIgnoreCase(actCurrencyDescriptionR1C4)

				&& actCurrencyNameR2C1.equalsIgnoreCase(expCurrencyNameR2C1)
				&& actCurrencyDefinedAsR2C2.equalsIgnoreCase(expCurrencyDefinedAsR2C2)
				&& actCurrencyRateR2C3.equalsIgnoreCase(expCurrencyRateR2C3)
				&& actCurrencyDescriptionR2C4.equalsIgnoreCase(actCurrencyDescriptionR2C4))
		{	
			excelReader.setCellData(xlfile, xlSheetName, 288, 9, resPass);
			return true;
		}		 
		else
		{    
			excelReader.setCellData(xlfile, xlSheetName, 288, 9, resFail);
			return false;
		}		  		
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 288, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	} 
  }

 
  // Check Cancel Button in the Exchange Rate

  public static boolean checkCancelOptionInExchangeRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("*********************************************** checkCancelOptionInExchangeRate *********************************************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateDefinitionPageCloseIcon));
		exchangeRateDefinitionPageCloseIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 299, 7);
		 
		excelReader.setCellData(xlfile, xlSheetName, 299, 8, actDashboardLabel);
		 
		System.out.println("Click on Close button                              :" + actDashboardLabel + "      Value Expected : " + expDashboardLabel);
		 
		if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 298, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 298, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 298, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
  }
  
  
  
 // Exchange Rate History Page Starts
 public static boolean checkClickOnExchangeRateHistoryMenuFromCurrency() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("*************************************** checkClickOnExchangeRateHistoryMenuFromCurrency *****************************************");

	try
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyMenu));
		currencyMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateHistoryMenu));
		exchangeRateHistoryMenu.click();
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateHistoryLabel));

		String actExchangeRateLabel       = exchangeRateHistoryLabel.getText();
		boolean actExchangeRateHistory    = baseCurrencyInExchangeRateHistory.isDisplayed();
		boolean actExchangeRateDateOption = dateOptionDropdown.isDisplayed();
		boolean actExchangeRateFromDate   = fromDateTxt.isDisplayed();
		boolean actExchangeRateToDate     = toDateTxt.isDisplayed();
		boolean actExchangeRateLoadBtn    = loadIcon.isDisplayed();
		boolean actExchangeRateClearBtn   = exchangeRateHistoryclearIcon.isDisplayed();
		boolean actExchangeRateTableTab   = tableTab.isDisplayed();
		boolean actExchangeRateGraphTab   = graphTab.isDisplayed();
		boolean actExchangeRateCloseBtn   = exchangeRateHistoryCloseIcon.isDisplayed();

		String expExchangeRateLabel       = excelReader.getCellData(xlSheetName, 302, 7);
		boolean expExchangeRateHistory    = true;
		boolean expExchangeRateDateOption = true;
		boolean expExchangeRateFromDate   = true;
		boolean expExchangeRateToDate     = true;
		boolean expExchangeRateLoadBtn    = true;
		boolean expExchangeRateClearBtn   = true;
		boolean expExchangeRateTableTab   = true;
		boolean expExchangeRateGraphTab   = true;
		boolean expExchangeRateCloseBtn   = true;

		System.out.println("Exchange Rate History Label Value Actual     : " + actExchangeRateLabel+      " Value Expected : " + expExchangeRateLabel);
		System.out.println("Base Currency Value Actual                   : " + actExchangeRateHistory+    " Value Expected : " + expExchangeRateHistory);
        System.out.println("Date Dropdown Value Actual                   : " + actExchangeRateDateOption+ " Value Expected : " + expExchangeRateDateOption);
		System.out.println("From Date Value Actual                       : " + actExchangeRateFromDate+   " Value Expected : " + expExchangeRateFromDate);
		System.out.println("To Date Value Actual                         : " + actExchangeRateToDate+     " Value Expected : " + expExchangeRateToDate);
		System.out.println("Load Button Value Actual                     : " + actExchangeRateLoadBtn+    " Value Expected : " + expExchangeRateLoadBtn);
        System.out.println("Clear Button Value Actual                    : " + actExchangeRateClearBtn+   " Value Expected : " + expExchangeRateClearBtn);

		System.out.println("Table Tab Value Actual                       : " + actExchangeRateTableTab+   " Value Expected : " + expExchangeRateTableTab);
		System.out.println("Rate Graph Value Actual                      : " + actExchangeRateGraphTab+   " Value Expected : " + expExchangeRateGraphTab);
		System.out.println("Close Button Value Actual                    : " + actExchangeRateCloseBtn+   " Value Expected : " + expExchangeRateCloseBtn);
		
		
		boolean actMethod = actExchangeRateHistory == expExchangeRateHistory && actExchangeRateDateOption == expExchangeRateDateOption
							&& actExchangeRateFromDate == expExchangeRateFromDate && actExchangeRateToDate == expExchangeRateToDate
							&& actExchangeRateLoadBtn == expExchangeRateLoadBtn && actExchangeRateClearBtn == expExchangeRateClearBtn
							&& actExchangeRateTableTab == expExchangeRateTableTab && actExchangeRateGraphTab == expExchangeRateGraphTab
							&& actExchangeRateGraphTab == expExchangeRateGraphTab && actExchangeRateCloseBtn == expExchangeRateCloseBtn;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 302, 8, actExchangeRateLabel);
		excelReader.setCellData(xlfile, xlSheetName, 301, 8, actResult.toUpperCase());

		if (actExchangeRateLabel.equalsIgnoreCase(expExchangeRateLabel) && actMethod==true)
		{
			 System.out.println(" Test Pass: Close Button is working");
			 excelReader.setCellData(xlfile, xlSheetName, 301, 9, resPass);
			 return true;
		 }
		 else 
		 {
			 System.out.println(" Test Fail: Close Button is not working");
			 excelReader.setCellData(xlfile, xlSheetName, 301, 9, resFail);
			 return false;
		 }
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 100);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 301, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 }
  }

  public static boolean checkExchangeRateHistoryClearButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("****************************************** checkExchangeRateHistoryClearButton **********************************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyInExchangeRateHistory));
		baseCurrencyInExchangeRateHistory.click();
		baseCurrencyTxt.sendKeys(Keys.SPACE);
		
		int baseCurrencyComboListCount = baseCurrencyComboList.size();
		
		ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
		
		for(int i=1;i<baseCurrencyComboListCount;i++)
		{
			String data=baseCurrencyComboList.get(i).getText();
			if(data.equalsIgnoreCase("INR"))
			{
				baseCurrencyComboList.get(i).click();
			}
		}
	
		baseCurrencyInExchangeRateHistory.sendKeys(Keys.TAB);
	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateHistoryclearIcon));
		exchangeRateHistoryclearIcon.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selCurrencyOne));

		boolean actSelectCurrencyOne     = selCurrencyOne.getText().isEmpty();
		boolean actSelectCurrencyTwo     = selCurrecnyTwo.getText().isEmpty();
		boolean actDefinedAsCurrencyOne  = defCurrecnyOne.getText().isEmpty();
		boolean actDefinedAsCurrencyTwo  = defCurrecnyTwo.getText().isEmpty();

		boolean expSelectCurrencyOne     = true;
		boolean expSelectCurrencyTwo     = true;
		boolean expDefinedAsCurrencyOne  = true;
		boolean expDefinedAsCurrencyTwo  = true;

		System.out.println("Selected Currency One Value Actual             : " + actSelectCurrencyOne+    "  Value Expected : " + expSelectCurrencyOne);
		System.out.println("Selected Currency Two Value Actual             : " + actSelectCurrencyTwo+    "  Value Expected : " + expSelectCurrencyTwo);
		System.out.println("Defined Currency One Value Actual              : " + actDefinedAsCurrencyOne+ "  Value Expected : " + expDefinedAsCurrencyOne);
		System.out.println("Defined Currency Two Value Actual              : " + actDefinedAsCurrencyTwo+ "  Value Expected : " + expDefinedAsCurrencyTwo);

		boolean actMethod = actSelectCurrencyOne == expSelectCurrencyOne && actSelectCurrencyTwo == expSelectCurrencyTwo
							&& actDefinedAsCurrencyOne == expDefinedAsCurrencyOne && actDefinedAsCurrencyTwo == expDefinedAsCurrencyTwo;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 303, 8, actResult.toUpperCase());
		
		if (actMethod==true)
		{
			 System.out.println(" Test Pass: Close Button is working");
			 excelReader.setCellData(xlfile, xlSheetName, 303, 9, resPass);
			 return true;
		 }
		 else 
		 {
			 System.out.println(" Test Fail: Close Button is not working");
			 excelReader.setCellData(xlfile, xlSheetName, 303, 9, resFail);
			 return false;
		 }
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 100);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 303, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 }
 }

 public static boolean checkExchangeRateHistorySelectAED() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************************************** checkExchangeRateHistorySelectAED ************************************************************");
		
	try
	{
		System.out.println("First");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(baseCurrencyInExchangeRateHistory));
		baseCurrencyInExchangeRateHistory.click();
		Thread.sleep(2000);
		baseCurrencyTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		
		System.out.println("Second");
		int baseCurrencyComboListCount = baseCurrencyComboList.size();
		
		ArrayList<String> baseCurrencyComboListArray = new ArrayList<String>();
		
		for(int i=1;i<baseCurrencyComboListCount;i++)
		{
			String data=baseCurrencyComboList.get(i).getText();
			if(data.equalsIgnoreCase("AED"))
			{
				baseCurrencyComboList.get(i).click();
			}
		}
	
		baseCurrencyInExchangeRateHistory.sendKeys(Keys.TAB);
		Thread.sleep(9000);
		System.out.println("Three");
		Thread.sleep(4000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(valueUSD));
		

		String actValueAEDTOUSD        = valueUSD.getText();
		String actValueAEDTOINR        = valueAED.getText();
		String actSelectCurrencyOne    = selCurrencyOne.getText();
		String actSelectCurrencyTwo    = selCurrecnyTwo.getText();
		String actDefinedAsCurrencyOne = defCurrecnyOne.getText();
		String actDefinedAsCurrencyTwo = defCurrecnyTwo.getText();

		String expValueAEDTOUSD        = excelReader.getCellData(xlSheetName, 305, 7);
		String expValueAEDTOINR        = excelReader.getCellData(xlSheetName, 306, 7);
		String expSelectCurrencyOne    = excelReader.getCellData(xlSheetName, 307, 7);
		String expSelectCurrencyTwo    = excelReader.getCellData(xlSheetName, 308, 7);
		String expDefinedAsCurrencyOne = excelReader.getCellData(xlSheetName, 309, 7);
		String expDefinedAsCurrencyTwo = excelReader.getCellData(xlSheetName, 310, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 305, 8, actValueAEDTOUSD);
		excelReader.setCellData(xlfile, xlSheetName, 306, 8, actValueAEDTOINR);
		excelReader.setCellData(xlfile, xlSheetName, 307, 8, actSelectCurrencyOne);
		excelReader.setCellData(xlfile, xlSheetName, 308, 8, actSelectCurrencyTwo);
		excelReader.setCellData(xlfile, xlSheetName, 309, 8, actDefinedAsCurrencyOne);
		excelReader.setCellData(xlfile, xlSheetName, 310, 8, actDefinedAsCurrencyTwo);

		System.out.println("AED TO USD Value Actual                : " + actValueAEDTOUSD+        "  Value Expected : " + expValueAEDTOUSD);
		System.out.println("AED TO INR Value Actual                : " + actValueAEDTOINR+        "  Value Expected : " + expValueAEDTOINR);
		System.out.println("Select Currency One Value Actual       : " + actSelectCurrencyOne+    "  Value Expected : " + expSelectCurrencyOne);
		System.out.println("Select Currency Two Value Actual       : " + actSelectCurrencyTwo+    "  Value Expected : " + expSelectCurrencyTwo);
		System.out.println("Defined Currency One Value Actual      : " + actDefinedAsCurrencyOne+ "  Value Expected : " + expDefinedAsCurrencyOne);
		System.out.println("Defined Currency Two Value Actual      : " + actDefinedAsCurrencyTwo+ "  Value Expected : " + expDefinedAsCurrencyTwo);

		if (actValueAEDTOUSD.equalsIgnoreCase(expValueAEDTOUSD) && actValueAEDTOINR.equalsIgnoreCase(expValueAEDTOINR)
				&& actSelectCurrencyOne.equalsIgnoreCase(expSelectCurrencyOne)
				&& actSelectCurrencyTwo.equalsIgnoreCase(expSelectCurrencyTwo)
				&& actDefinedAsCurrencyOne.equalsIgnoreCase(expDefinedAsCurrencyOne)
				&& actDefinedAsCurrencyTwo.equalsIgnoreCase(expDefinedAsCurrencyTwo)) 
		{
			 System.out.println(" Test Pass: Close Button is working");
			 excelReader.setCellData(xlfile, xlSheetName, 304, 9, resPass);
			 return true;
		 }
		 else 
		 {
			 System.out.println(" Test Fail: Close Button is not working");
			 excelReader.setCellData(xlfile, xlSheetName, 304, 9, resFail);
			 return false;
		 }
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 100);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 304, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		 return false;
	 }
  }

 public static boolean checkCancelOptionInExchangeRateHistory()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************************************** checkCancelOptionInExchangeRateHistory ****************************************************");
	
	try
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exchangeRateHistoryCloseIcon));
		exchangeRateHistoryCloseIcon.click();
		//Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		boolean actLoadDashboard           = labelDashboard.isDisplayed();
		boolean actSelectDashboard         = selectDashboard.isDisplayed();
		boolean actNewDashboard            = newAddDashBoard.isDisplayed();
		boolean actDashboardCustomization  = dashboardCustomizationSettings.isDisplayed();

		boolean expLoadDashboard          = true;
		boolean expSelectDashboard        = true;
		boolean expNewDashboard           = true;
		boolean expDashboardCustomization = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 312, 7);
		
		
		
		boolean actMethod = actLoadDashboard == expLoadDashboard && actSelectDashboard == expSelectDashboard
							&& actNewDashboard == expNewDashboard && actDashboardCustomization == expDashboardCustomization;
		
		String actResult = Boolean.toString(actMethod);
		System.out.println("actMethod"+actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 311, 8, actResult.toUpperCase());
		excelReader.setCellData(xlfile, xlSheetName, 312, 8, actDashboardLabel);

		System.out.println("Load Dashbord Value Actual                          : " + actLoadDashboard+          " Value Expected : " + expLoadDashboard);
		System.out.println("Select Dashbord Value Actual                        : " + actSelectDashboard+        " Value Expected : " + expSelectDashboard);
		System.out.println("New Dashbord Value Actual                           : " + actNewDashboard+           " Value Expected : " + expNewDashboard);
		System.out.println("Dashbord Customization Value Actual                 : " + actDashboardCustomization+ " Value Expected : " + expDashboardCustomization);
		
		System.out.println("Load Dashbord Value Actual                          : " + actDashboardLabel+          " Value Expected : " + expDashboardLabel);

		if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel) && actMethod==true)
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 311, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 311, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 311, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
 }

  
 
 
 //UNITS MASTER PAGE STARTS FROM HERE
 
 public static boolean checkUnitsMasterPageIsDisplayByClickOnUnitsMenuFromItemMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************ checkUnitsMasterPageIsDisplayByClickOnUnitsMenuFromItemMenu ********************************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemsMenu));
		itemsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsMenu));
		unitsMenu.click();
		//Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));

		String actUnitsTitle = accountsTitle.getText();
		String expUnitsTitle = excelReader.getCellData(xlSheetName, 315, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 315, 8, actUnitsTitle);

		System.out.println("Opening Units Master From Item Menu Title Actual Value  :" + actUnitsTitle + "     Expected Value    : " + expUnitsTitle);

		if (actUnitsTitle.equalsIgnoreCase(expUnitsTitle)) 
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 314, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 314, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 314, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
 }
  
  
 public static boolean checkMainOptionsAvailabilityInUnitsMastersPageOnClickOnUnitsFromItemMastersMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
	 System.out.println("************ checkMainOptionsAvailabilityInUnitsMastersPageOnClickOnUnitsFromItemMastersMenu Method Executes............ *********************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));

		
		int mastersRibbonControlListCount = mastersRibbonControlList.size();
		   
		System.err.println("mastersRibbonControlList : "+mastersRibbonControlListCount);
		
		Set<String> actMenusArray= new HashSet<String>();
		
		for (int i = 1; i < mastersRibbonControlListCount; i++) 
		{
			String data = mastersRibbonControlList.get(i).getText();
			System.err.println(data);
			actMenusArray.add(data);
		}	
		
		String actMenus =actMenusArray.toString();
		String expMenus = excelReader.getCellData(xlSheetName, 317, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 317, 8, actMenus);
		
		System.out.println("Account Ribbon Control Display Value Actual    : " + actMenus);
		System.out.println("Account Ribbon Control  Display Value Expected : " + expMenus);
		   
		
		if (actMenus.equalsIgnoreCase(expMenus))	
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 316, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 316, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 316, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
 }

 
 public static boolean checkToolsOptionsAvailabilityOnClickMasterRibbonToExpandOptionsInUnitsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("*********** checkToolsOptionsAvailabilityOnClickMasterRibbonToExpandOptionsInUnitsMastersPage Method Executes............*******************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
		masterRibbonToExpandOptions.click();

		boolean actSummaryErrorMessage                  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage                  = true;
		
       System.out.println("Click On Ribbon Expand Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));

		/*boolean actAccountMasterGroupBtn              = masterGroupBtn.isDisplayed();
		boolean actAccountMasterDeleteAllBtn          = masterDeleteAllBtn.isDisplayed();
		boolean actAccountMasterCloseAccountBtn       = masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
		boolean actAccountMasterOpenCloseAccountBtn   = masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
		boolean actAccountMasterAdvanceImortExportBtn = masterAdvanceMasterImportORExportBtn.isDisplayed();
		boolean actAccountMasterAuthorInfoBtn         = masterAuthorInfoBtn.isDisplayed();
		boolean actAccountMasterMoveUpBtn             = masterMoveUpBtn.isDisplayed();
		boolean actAccountMasterMoveDownBtn           = masterMoveDownBtn.isDisplayed();
		boolean actAccountMasterSortBtn               = masterSortBtn.isDisplayed();
		boolean actAccountMasterMassUpdateBtn         = masterMassUpdateBtn.isDisplayed();
		boolean actAccountMasterImportFromXMLBtn      = masterImportFromXmlBtn.isDisplayed();
		boolean actAccountMasterExportFormatToXMLBtn  = masterExportFormatToXmlBtn.isDisplayed();

		boolean expAccountMasterGroupBtn              = true;
		boolean expAccountMasterDeleteAllBtn          = true;
		boolean expAccountMasterCloseAccountBtn       = true;
		boolean expAccountMasterOpenCloseAccountBtn   = true;
		boolean expAccountMasterAdvanceImortExportBtn = true;
		boolean expAccountMasterAuthorInfoBtn         = true;
		boolean expAccountMasterMoveUpBtn             = true;
		boolean expAccountMasterMoveDownBtn           = true;
		boolean expAccountMasterSortBtn               = true;
		boolean expAccountMasterMassUpdateBtn         = true;
		boolean expAccountMasterImportFromXMLBtn      = true;
		boolean expAccountMasterExportFormatToXMLBtn  = true;

		System.out.println("Group Button Display Value Actual           : " + actAccountMasterGroupBtn+              " Value Expected : " + expAccountMasterGroupBtn);
		System.out.println("Delete All Button Display Value Actual      : " + actAccountMasterDeleteAllBtn+          " Value Expected : " + expAccountMasterDeleteAllBtn);
		System.out.println("Close Account Button Display Value Actual   : " + actAccountMasterCloseAccountBtn+       " Value Expected : " + expAccountMasterCloseAccountBtn);
		System.out.println("Import Export Button Display Value Actual   : " + actAccountMasterAdvanceImortExportBtn+ " Value Expected : " + expAccountMasterAdvanceImortExportBtn);
		System.out.println("Authorize Info Button Display Value Actual  : " + actAccountMasterAuthorInfoBtn+         " Value Expected : " + expAccountMasterAuthorInfoBtn); 
		System.out.println("Move Down Button Display Value Actual       : " + actAccountMasterMoveDownBtn+           " Value Expected : " + expAccountMasterMoveDownBtn);
		System.out.println("Move Up Button Display Value Actual         : " + expAccountMasterMoveUpBtn+             " Value Expected : " + expAccountMasterMoveUpBtn);
		System.out.println("Sort Button Display Value Actual            : " + actAccountMasterSortBtn+               " Value Expected : " + expAccountMasterSortBtn);
		System.out.println("Import From XML Button Display Value Actual : " + actAccountMasterImportFromXMLBtn+      " Value Expected : " + expAccountMasterImportFromXMLBtn);
		System.out.println("Export From XML Button Display Value Actual : "+ actAccountMasterExportFormatToXMLBtn+   " Value Expected : " + expAccountMasterExportFormatToXMLBtn);

		if (actSummaryErrorMessage==expSummaryErrorMessage
				&& actAccountMasterGroupBtn == expAccountMasterGroupBtn
				&& actAccountMasterDeleteAllBtn == expAccountMasterDeleteAllBtn
				&& actAccountMasterCloseAccountBtn == expAccountMasterCloseAccountBtn
				&& actAccountMasterOpenCloseAccountBtn == expAccountMasterOpenCloseAccountBtn
				&& actAccountMasterAdvanceImortExportBtn == expAccountMasterAdvanceImortExportBtn
				&& actAccountMasterAuthorInfoBtn == expAccountMasterAuthorInfoBtn
				&& actAccountMasterMoveUpBtn == expAccountMasterMoveUpBtn
				&& actAccountMasterMoveDownBtn == expAccountMasterMoveDownBtn
				&& actAccountMasterSortBtn == expAccountMasterSortBtn
				&& actAccountMasterMassUpdateBtn == expAccountMasterMassUpdateBtn
				&& actAccountMasterImportFromXMLBtn == expAccountMasterImportFromXMLBtn
				&& actAccountMasterExportFormatToXMLBtn == expAccountMasterExportFormatToXMLBtn)*/
		

		int ribbonControlExpandListCount =ribbonControlExpandList.size();
		
		System.err.println("ribbonControlExpandList : "+ribbonControlExpandListCount);
		
		ArrayList<String> actribbonControlExpandList=new ArrayList<String>();
		
		for(int i=0;i<ribbonControlExpandListCount;i++)
		{
			String data=ribbonControlExpandList.get(i).getText();
			actribbonControlExpandList.add(data);
		}
		
		String actToggleList =actribbonControlExpandList.toString();
		String expToggleList =excelReader.getCellData(xlSheetName, 319, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 319, 8, actToggleList);

		System.out.println("ToggleList Actual   : "+actToggleList);
		System.out.println("ToggleList Expected : "+expToggleList);
		
		if (actSummaryErrorMessage==expSummaryErrorMessage
				&& actToggleList.equalsIgnoreCase(expToggleList))
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 318, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 318, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 318, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
 }
 
 @FindBy(xpath = "//a[@class='clsMasterName']")
 public static WebElement unitsMasterRootUnitsDisplayInTree;
 
 
 public static boolean checkOtherToolsOptionsAvailabilityInUnitsMastersPageOnClickRibbonControlNextButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********* checkOtherToolsOptionsAvailabilityInAccountMastersPageOnClickRibbonControlNextButton Method Executes............  *******************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));

		masterRibbonControlNextBtn.click();
		
		boolean actSummaryErrorMessage             = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage             = true;
		

       System.out.println("Click On Ribbon Control Next Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
	
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizeMasterBtn));

		int ribbonControlExpandListCount =ribbonControlExpandList.size();
		
		System.err.println("ribbonControlExpandList : "+ribbonControlExpandListCount);
		
		ArrayList<String> actribbonControlExpandList=new ArrayList<String>();
		
		for(int i=0;i<ribbonControlExpandListCount;i++)
		{
			String data=ribbonControlExpandList.get(i).getText();
			System.err.println(data);
			actribbonControlExpandList.add(data);
		}
		
		String actToggleList =actribbonControlExpandList.toString();
		String expToggleList =excelReader.getCellData(xlSheetName, 321, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 321, 8, actToggleList);

		System.out.println("ToggleList Actual   : "+actToggleList);
		System.out.println("ToggleList Expected : "+expToggleList);
		
		if (actSummaryErrorMessage==expSummaryErrorMessage 
				&& actToggleList.equalsIgnoreCase(expToggleList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 320, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 320, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 320, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }
	
 

 public static boolean checkTreeViewOptionsAvailableInUnitsMastersPageOnClickOnUnitsFromMastersMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("***********  checkTreeViewOptionsAvailableInAccountMastersPageOnClickOnAccountsFromMastersMenu Method Executes............ ********************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));
		
		boolean actAccountMasterTreeIdDropdown        = masterTreeIdDropdown.isDisplayed();
		boolean actAccountMasterTreeIDToggleBtn       = masterTreeIDToggleBtn.isDisplayed();
		boolean actAccountMasterTreeViewIDDropdown    = masterTreeViewIDDropdown.isDisplayed();
		boolean actAccountMasterTreeViewIDToggleBtn   = masterTreeViewIDToggleBtn.isDisplayed();
		boolean actAccountMasterHideAccountsGroupTree = masterOptionToHideAccountsGroupTree.isDisplayed();

		boolean expAccountMasterTreeIdDropdown        = true;
		boolean expAccountMasterTreeIDToggleBtn       = true;
		boolean expAccountMasterTreeViewIDDropdown    = true;
		boolean expAccountMasterTreeViewIDToggleBtn   = true;
		boolean expAccountMasterHideAccountsGroupTree = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));

		Select masterTreeIdDropdownSelect=new Select(masterTreeIdDropdown);
		String actmasterTreeIdDropdownText=masterTreeIdDropdownSelect.getFirstSelectedOption().getText();
		String expmasterTreeIdDropdownText=excelReader.getCellData(xlSheetName, 323, 7);
		
		Select masterTreeViewIDDropdownSelect=new Select(masterTreeViewIDDropdown);
		String actmasterTreeViewIDDropdownText=masterTreeViewIDDropdownSelect.getFirstSelectedOption().getText();
		String expmasterTreeViewIDDropdownText=excelReader.getCellData(xlSheetName, 324, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 323, 8, actmasterTreeIdDropdownText);
		excelReader.setCellData(xlfile, xlSheetName, 324, 8, actmasterTreeViewIDDropdownText);
		
		boolean actMethod = actAccountMasterTreeIdDropdown == expAccountMasterTreeIdDropdown
							&& actAccountMasterTreeIDToggleBtn == expAccountMasterTreeIDToggleBtn
							&& actAccountMasterTreeViewIDDropdown == expAccountMasterTreeViewIDDropdown
							&& actAccountMasterTreeViewIDToggleBtn == expAccountMasterTreeViewIDToggleBtn
							&& actAccountMasterHideAccountsGroupTree == expAccountMasterHideAccountsGroupTree; 
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 322, 8, actResult.toUpperCase());

		System.out.println("Tree ID Dropdown Option Value Actual      : " + actAccountMasterTreeIdDropdown+         " Value Expected : " + expAccountMasterTreeIdDropdown);
		System.out.println("Tree ID Toggle Option Value Actual        : " + actAccountMasterTreeIDToggleBtn+        " Value Expected : " + expAccountMasterTreeIDToggleBtn);
		System.out.println("Tree View ID Option Value Actual          : " + actAccountMasterTreeViewIDDropdown+     " Value Expected : " + expAccountMasterTreeViewIDDropdown);
		System.out.println("Tree View ID Toggle Value Actual          : " + actAccountMasterTreeViewIDToggleBtn +   " Value Expected : " + expAccountMasterTreeViewIDToggleBtn);
		System.out.println("Hide Accounts Group Tree Value Actual     : " + actAccountMasterHideAccountsGroupTree+  " Value Expected : " + expAccountMasterHideAccountsGroupTree);
		System.out.println("masterTreeIdDropdownText                  : " +actmasterTreeIdDropdownText+             " Value Expected : " +expmasterTreeIdDropdownText);
		System.out.println("masterTreeViewIDDropdownText              : " +actmasterTreeViewIDDropdownText+         " Value Expected : " +expmasterTreeViewIDDropdownText);
		
		if ( actAccountMasterTreeIdDropdown == expAccountMasterTreeIdDropdown
				&& actAccountMasterTreeIDToggleBtn == expAccountMasterTreeIDToggleBtn
				&& actAccountMasterTreeViewIDDropdown == expAccountMasterTreeViewIDDropdown
				&& actAccountMasterTreeViewIDToggleBtn == expAccountMasterTreeViewIDToggleBtn
				&& actAccountMasterHideAccountsGroupTree == expAccountMasterHideAccountsGroupTree
				&& actmasterTreeIdDropdownText.equalsIgnoreCase(expmasterTreeIdDropdownText)
				&& actmasterTreeViewIDDropdownText.equalsIgnoreCase(expmasterTreeViewIDDropdownText))
		{
			excelReader.setCellData(xlfile, xlSheetName, 322, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 322, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 322, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
 }
	

 public static boolean checkDisplayOfGroupAvailableTreeStructureLeftPaneInUnitsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("**************************  checkDisplayOfGroupAvailableInAccountMastersPage Method Executes............  *******************************");
    
	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));

		boolean actUnitsMasterRoot                = accountRootAccount.isDisplayed();
		boolean expUnitsMasterRoot                = true;
		
		String actUnitRootName=accountRootAccount.getText();
		String expUnitRootName=excelReader.getCellData(xlSheetName, 326, 7);

		String actResult = Boolean.toString(actUnitsMasterRoot);
		
		excelReader.setCellData(xlfile, xlSheetName, 325, 8, actResult.toUpperCase());
		
		
		System.out.println("Open Units Master Unit Root Is Display Value Actual  : " + actUnitsMasterRoot+ " Value Expected : " + expUnitsMasterRoot);
		System.out.println("Root Units Text Display Value Actual                 : " + actUnitRootName+            " Value Expected : " + expUnitRootName);
			
		if (actUnitsMasterRoot == expUnitsMasterRoot
				&& actUnitRootName.equalsIgnoreCase(expUnitRootName))
		{
			excelReader.setCellData(xlfile, xlSheetName, 325, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 325, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 325, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
  }


 public static boolean checkCreateTreeToggleOptionsAvailableInUnitsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 
	 System.out.println("********************* checkCreateTreeToggleOptionsAvailableInAccountMastersPage Method Executes............ *******************************");
    
	 try
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggleBtn)); 
		 masterTreeIDToggleBtn.click();
			
		 boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		 boolean expSummaryErrorMessage  = true;
		 
		 System.out.println("Click on Create Tree Toggle Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggle_setDefaultBtn));
		 
		 int masterTreeIDToggleListCount=masterTreeIDToggleList.size();
		 
		 ArrayList<String> actmasterTreeIDToggleListArray=new ArrayList<String>();
		 
		 for(int i=0;i<masterTreeIDToggleListCount;i++)
		 {
			 String data=masterTreeIDToggleList.get(i).getText();
			 actmasterTreeIDToggleListArray.add(data);
		 }	
		 
		 String actmasterTreeIDToggleList=actmasterTreeIDToggleListArray.toString();
		 
		 String expmasterTreeIDToggleList=excelReader.getCellData(xlSheetName, 328, 7);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 328, 8, actmasterTreeIDToggleList);
		 
		 System.out.println("masterTreeIDToggleList Actual   : "+actmasterTreeIDToggleList);
		 System.out.println("masterTreeIDToggleList Expected : "+expmasterTreeIDToggleList);
		 
		 if (actSummaryErrorMessage==actSummaryErrorMessage && actmasterTreeIDToggleList.equalsIgnoreCase(expmasterTreeIDToggleList))
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 327, 9, resPass);
			 return true;
		 }	 
		 else	 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 327, 9, resFail);
			 return false;
		 }	
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 327, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
 }
	
 public static boolean checkCreateViewToggleOptionsAvailableInUnitsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkCreateViewToggleOptionsAvailableInUnitsMastersPage Method Executes............***********************************");

	 try
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIDToggleBtn));
		 masterTreeViewIDToggleBtn.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIdCreateViewBtn));
		 
		 int masterViewIDToggleListCount=masterViewIDToggleList.size();
		 
		 ArrayList<String> actmasterViewIDToggleListArray=new ArrayList<String>();
		 
		 for(int i=0;i<masterViewIDToggleListCount;i++)
		 {
			 String data=masterViewIDToggleList.get(i).getText();
			 actmasterViewIDToggleListArray.add(data);
		 }
			
		 String actmasterViewIDToggleList=actmasterViewIDToggleListArray.toString();
		 
		 String expmasterViewIDToggleList=excelReader.getCellData(xlSheetName, 330, 7);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 330, 8, actmasterViewIDToggleList);
		 
		 System.out.println("masterViewIDToggleList Actual   : "+actmasterViewIDToggleList);
		 System.out.println("masterViewIDToggleList Expected : "+expmasterViewIDToggleList);
		 
		 if(actmasterViewIDToggleList.equalsIgnoreCase(expmasterViewIDToggleList))
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 329, 9, resPass);
			 return true;
		 } 
		 else 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 329, 9, resFail);
			 return false;
		 }	
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 329, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
 }
	
	
 public static boolean checkHideUnitGroupOptionsAvailableInUnitMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************* checkHideUnitGroupOptionsAvailableInUnitMastersPage Method Executes............*************************");

	 try
	 {
			
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
		 masterOptionToHideAccountsGroupTree.click();
		   
		 boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		 boolean expSummaryErrorMessage  = true;
		 
		 System.out.println("Click on Hide Accounts Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);  
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeDisplayMenuAccountGroups));
		 
		 boolean actAccountMasterTreeUnits = treeUnitsDisplay.isDisplayed();
		 boolean expAccountMasterTreeUnits = true;
		 
		 String actResult = Boolean.toString(actAccountMasterTreeUnits);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 331, 8, actResult.toUpperCase());
		 
		 System.out.println("Tree View Create View Option Value Actual : " + actAccountMasterTreeUnits+ " Value Expected : " + expAccountMasterTreeUnits);
		 
		 if (actSummaryErrorMessage==actSummaryErrorMessage && actAccountMasterTreeUnits == expAccountMasterTreeUnits)
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 331, 9, resPass);
			 return true;
		 } 
		 else 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 331, 9, resFail);
			 return false;
		 }	
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 331, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
 }
	
	
 public static boolean checkUnHideUnitsGroupOptionsAvailableInUnitMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkUnHideUnitsGroupOptionsAvailableInUnitMastersPage Method Executes............ ******************************");
     //Thread.sleep(2000);
	 
	 
	 try
	 {

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
		 masterOptionToHideAccountsGroupTree.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));
		 
		 boolean actUnitsMasterRoot                = accountRootAccount.isDisplayed();
		 boolean expUnitsMasterRoot                = true;
		 
		 
		 String actUnitRootName=accountRootAccount.getText();
		 String expUnitRootName=excelReader.getCellData(xlSheetName, 333, 7);

		 String actResult = Boolean.toString(actUnitsMasterRoot);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 333, 8, actResult.toUpperCase());
		 
		 
		 System.out.println("Open Units Master Unit Root Is Display Value Actual  : " + actUnitsMasterRoot+ " Value Expected : " + expUnitsMasterRoot);
		 System.out.println("Root Units Text Display Value Actual                 : " + actUnitRootName+            " Value Expected : " + expUnitRootName);
		 
		 if (actUnitsMasterRoot == expUnitsMasterRoot
				 && actUnitRootName.equalsIgnoreCase(expUnitRootName))
		 {	
			 excelReader.setCellData(xlfile, xlSheetName, 332, 9, resPass);
			 return true;
		 } 
		 else 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 332, 9, resFail);
			 return false;
		 }
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 332, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
 }
	
	
 public static boolean checkHeaderFieldsOptionsAvailableInUnitsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkHeaderFieldsOptionsAvailableInUnitsMastersPage Method Executes............ **********************************");

	 try
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));

		 boolean actAccountMasterSearchTxt                  = masterSearchTxt.isDisplayed();
		 boolean actAccountMasterSearchBtn                  = masterSearchBtn.isDisplayed();
		 boolean actAccountMasterCmbMasterTxt               = mastercmbMasterTxt.isDisplayed();
		 boolean actAccountMasterCmbMasterExpansionBtn      = masterCmbMasterExpansionBtn.isDisplayed();
		 boolean actAccountMasterCmbMasterSettingsBtn       = masterCumMasterSettingBtn.isDisplayed();
		 boolean actAccountMasterNextBookMark               = masterMoveTheSelectionToNextBookMarkBtn.isDisplayed();
		 boolean actAccountMasterPrviousBookMark            = masterMoveTheSelectionToPrevoiusBookmarkBtn.isDisplayed();
		 boolean actAccountMasterShowAllRecordsBtn          = masterShowAllRecordsBtn.isDisplayed();
		 boolean actAccountMasterShowAllUnAuthorisedRecords = masterShowAllUnauthorisedRecords.isDisplayed();
		 boolean actAccountMasterShowAllClosedRecordsBtn    = masterShowAllClosedRecordsBtn.isDisplayed();
		 boolean actAccountMasterAutoAdjustColumnBtn        = masterAutoAdjustColoumnsBtn.isDisplayed();
		 boolean actAccountMasterRetainSelectionCheckbox    = masterRetainSelectionCheckBox.isDisplayed();
		 boolean actAccountMasterSideBarBtn                 = masterSideBarBtn.isDisplayed();
		 
		 boolean expAccountMasterSearchTxt                  = true;
		 boolean expAccountMasterSearchBtn                  = true;
		 boolean expAccountMasterCmbMasterTxt               = true;
		 boolean expAccountMasterCmbMasterExpansionBtn      = true;
		 boolean expAccountMasterCmbMasterSettingsBtn       = true;
		 boolean expAccountMasterNextBookMark               = true;
		 boolean expAccountMasterPrviousBookMark            = true;
		 boolean expAccountMasterShowAllRecordsBtn          = true;
		 boolean expAccountMasterShowAllUnAuthorisedRecords = true;
		 boolean expAccountMasterShowAllClosedRecordsBtn    = true;
		 boolean expAccountMasterAutoAdjustColumnBtn        = true;
		 boolean expAccountMasterRetainSelectionCheckbox    = true;
		 boolean expAccountMasterSideBarBtn                 = true;
		 
		 boolean actMethod = actAccountMasterSearchTxt == 	expAccountMasterSearchTxt && actAccountMasterSearchBtn == expAccountMasterSearchBtn
					&& actAccountMasterCmbMasterTxt == expAccountMasterCmbMasterTxt 
					&& actAccountMasterCmbMasterExpansionBtn == expAccountMasterCmbMasterExpansionBtn
					&& actAccountMasterCmbMasterSettingsBtn == expAccountMasterCmbMasterSettingsBtn 
					&& actAccountMasterNextBookMark == expAccountMasterNextBookMark
					&& actAccountMasterPrviousBookMark == expAccountMasterPrviousBookMark
					&& actAccountMasterShowAllRecordsBtn == expAccountMasterShowAllRecordsBtn
					&& actAccountMasterShowAllUnAuthorisedRecords == expAccountMasterShowAllUnAuthorisedRecords
					&& actAccountMasterShowAllClosedRecordsBtn == expAccountMasterShowAllClosedRecordsBtn 
					&& actAccountMasterAutoAdjustColumnBtn == expAccountMasterAutoAdjustColumnBtn
					&& actAccountMasterRetainSelectionCheckbox == expAccountMasterRetainSelectionCheckbox 
					&& actAccountMasterSideBarBtn == expAccountMasterSideBarBtn;
		
		String actResult=Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 38, 8, actResult.toUpperCase());
		
		int searchControlListCount=searchControlList.size();
		
		ArrayList<String> searchControlListArray=new ArrayList<String>();
		
		for(int i=0;i<searchControlListCount;i++)
		{
			String data=searchControlList.get(i).getAttribute("title");
			searchControlListArray.add(data);
		}
		
		String actsearchControlList=searchControlListArray.toString();
		
		String expsearchControlList=excelReader.getCellData(xlSheetName, 335, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 335, 8, actsearchControlList);
		
		System.out.println("Search Txt  Value Actual             : " + actAccountMasterSearchTxt                  + " Value Expected : " + expAccountMasterSearchTxt);
		System.out.println("Search Button Value Actual           : " + actAccountMasterSearchBtn                  + " Value Expected : " + expAccountMasterSearchBtn);
		System.out.println("Comb Box Value Actual                : " + actAccountMasterCmbMasterTxt               + " Value Expected : " + expAccountMasterCmbMasterTxt);
		System.out.println("Combo Box Expansion Value Actual     : " + actAccountMasterCmbMasterExpansionBtn      + " Value Expected : " + expAccountMasterCmbMasterExpansionBtn);
		System.out.println("Combo Box Settings Value Actual      : " + actAccountMasterCmbMasterSettingsBtn       + " Value Expected : " + expAccountMasterCmbMasterSettingsBtn);
		System.out.println("Next Book Mark Value Actual          : " + actAccountMasterNextBookMark               + " Value Expected : " + expAccountMasterNextBookMark);
		System.out.println("Previous Book Mark Value Actual      : " + actAccountMasterPrviousBookMark            + " Value Expected : " + expAccountMasterPrviousBookMark);
		System.out.println("Show All Records Value Actual        : " + actAccountMasterShowAllRecordsBtn          + " Value Expected : " + expAccountMasterShowAllRecordsBtn);
		System.out.println("Show All Un Authoize Value Actual    : " + actAccountMasterShowAllUnAuthorisedRecords + " Value Expected : " + expAccountMasterShowAllUnAuthorisedRecords);
		System.out.println("Show All Closed Value Actual         : " + actAccountMasterShowAllClosedRecordsBtn    + " Value Expected : " + expAccountMasterShowAllClosedRecordsBtn);
		System.out.println("Auto Adjust Column Value Actual      : " + actAccountMasterAutoAdjustColumnBtn        + " Value Expected : " + expAccountMasterAutoAdjustColumnBtn);
		System.out.println("Selection Check Box Value Actual     : " + actAccountMasterRetainSelectionCheckbox    + " Value Expected : " + expAccountMasterRetainSelectionCheckbox);
		System.out.println("Side Bar Value Actual                : " + actAccountMasterSideBarBtn                 + " Value Expected : " + expAccountMasterSideBarBtn);
		
		System.out.println("searchControlList Actual             : "+actsearchControlList);
		System.out.println("searchControlList Axpected           : "+expsearchControlList);
		
		if (actAccountMasterSearchTxt == expAccountMasterSearchTxt
				&& actAccountMasterSearchBtn == expAccountMasterSearchBtn
				&& actAccountMasterCmbMasterTxt == expAccountMasterCmbMasterTxt
				&& actAccountMasterCmbMasterExpansionBtn == expAccountMasterCmbMasterExpansionBtn
				&& actAccountMasterCmbMasterSettingsBtn == expAccountMasterCmbMasterSettingsBtn
				&& actAccountMasterNextBookMark == expAccountMasterNextBookMark
				&& actAccountMasterPrviousBookMark == expAccountMasterPrviousBookMark
				&& actAccountMasterShowAllRecordsBtn == expAccountMasterShowAllRecordsBtn
				&& actAccountMasterShowAllUnAuthorisedRecords == expAccountMasterShowAllUnAuthorisedRecords
				&& actAccountMasterShowAllClosedRecordsBtn == expAccountMasterShowAllClosedRecordsBtn
				&& actAccountMasterAutoAdjustColumnBtn == expAccountMasterAutoAdjustColumnBtn
				&& actAccountMasterRetainSelectionCheckbox == expAccountMasterRetainSelectionCheckbox
				&& actAccountMasterSideBarBtn == expAccountMasterSideBarBtn
				
				&& actsearchControlList.equalsIgnoreCase(expsearchControlList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 334, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 334, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 334, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
 }
	
	
 public static boolean checkSearchOptionAvailableInUnitsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("*************************** checkSearchOptionAvailableInUnitsMastersPage Method Executes............ ********************************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchBtn));
		masterSearchBtn.click();

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Search Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		int searchOnOptionsCount=searchOnOptions.size();
		
		ArrayList<String> searchOnOptionsArray = new ArrayList<String>();
		
		for(int i=0;i<searchOnOptionsCount;i++)
		{
			String data=searchOnOptions.get(i).getText();
			searchOnOptionsArray.add(data);
		}
		
		String actsearchOnOptions=searchOnOptionsArray.toString();
		
		String expsearchOnOptions=excelReader.getCellData(xlSheetName, 337, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 337, 8, actsearchOnOptions);

		System.out.println("searchOnOptions Actual   : "+actsearchOnOptions);
		System.out.println("searchOnOptions Expected : "+expsearchOnOptions);
		
		if (actSummaryErrorMessage==expSummaryErrorMessage && actsearchOnOptions.equalsIgnoreCase(expsearchOnOptions))
		{
			excelReader.setCellData(xlfile, xlSheetName, 336, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 336, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 336, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 

 }
	
 public static boolean checkUnitsDisplayTableColumnNamesAvailableInUnitsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
	 System.out.println("************************* checkUnitsDisplayTableColumnNamesAvailableInUnitsMastersPage Method Executes............ *************************");
		
	 try
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGrid_Header_SelectTxt));
		 boolean actAccountMasterGridSelectTxt = masterGrid_Header_SelectTxt.isDisplayed();
		 masterGrid_Header_SelectTxt.click();

		 boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		 boolean expSummaryErrorMessage  = true;
			
		 System.out.println("Click on Master Grid Header Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
			
		 boolean actAccountMasterGridSelectAllChkbox = masterGridHeader_SelectAllRowsCheckBox.isDisplayed();

		 boolean expAccountMasterGridSelectTxt       = true;
		 boolean expAccountMasterGridSelectAllChkbox = true;
			
		 int masterGridHeaderCount=masterGridHeader.size();
			
		 ArrayList<String> masterGridHeaderArray=new ArrayList<String>();
			
		 for (int i=1;i<masterGridHeaderCount;i++)
		 {
			 String data=masterGridHeader.get(i).getText();
			 masterGridHeaderArray.add(data);
		 }
			
		 String actmasterGridHeader=masterGridHeaderArray.toString();
		 
		 String expmasterGridHeader=excelReader.getCellData(xlSheetName, 339, 7);
		 
		 
		 boolean actMethod = actAccountMasterGridSelectTxt == expAccountMasterGridSelectTxt && actAccountMasterGridSelectAllChkbox == expAccountMasterGridSelectAllChkbox;
		 
		 String actResult = Boolean.toString(actMethod);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 339, 8, actmasterGridHeader);
		 excelReader.setCellData(xlfile, xlSheetName, 338, 8, actResult.toUpperCase());
		 
		 System.out.println("Grid Select txt Option Value Actual  : " + actAccountMasterGridSelectTxt       + " Value Expected : " + expAccountMasterGridSelectTxt);
		 System.out.println("Grid Select All Option Value Actual  : " + actAccountMasterGridSelectAllChkbox + " Value Expected : " + expAccountMasterGridSelectAllChkbox);
		 System.out.println("masterGridHeader Actual              : " +actmasterGridHeader);
		 System.out.println("masterGridHeader Expected            : " +expmasterGridHeader);
		 
		 if (actSummaryErrorMessage==expSummaryErrorMessage && actMethod==true && actmasterGridHeader.equalsIgnoreCase(expmasterGridHeader))
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 338, 9, resPass);
			 return true;
		 }	 
		 else	 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 338, 9, resFail);
			 return false;
		 }	
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 338, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 
 }
	
 @FindBy(xpath="//*[@id='LandingGridBody']/tr/td[10]")
 private static List<WebElement> unitGridBodyName;
 
 @FindBy(xpath="//*[@id='LandingGridBody']/tr/td[11]")
 private static List<WebElement> unitGridBodycode;
 
 @FindBy(xpath="//*[@id='LandingGridBody']/tr/td[12]")
 private static List<WebElement> unitGridBodyNoOfDecimals;
 
 @FindBy(xpath="//*[@id='LandingGridBody']/tr/td[13]")
 private static List<WebElement> unitGridBodyRoundingType;
 
 
 public static boolean checkUnitsDisplayTableColumnValuesAvailableInUnitMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
   excelReader=new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
   System.out.println("********************** checkUnitsDisplayTableColumnValuesAvailableInUnitMastersPage Method Executes............ **************************");
	
   try
   {
	   int masterGridBodyListCount=masterGridBodyRowCount.size();
   	
	   System.out.println("masterGridBodyListCount"+masterGridBodyListCount);
	   
	   
	/*   ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
	   
	   for (int i=0;i<masterGridBodyListCount;i++)
	   {
		   String unitGridBodyNamedata         =unitGridBodyName.get(i).getText();
		   String unitGridBodycodedata         =unitGridBodycode.get(i).getText();
		   String unitGridBodyNoOfDecimalsdata =unitGridBodyNoOfDecimals.get(i).getText();
		   String unitGridBodyRoundingTypedata =unitGridBodyRoundingType.get(i).getText();
	   		
		   masterGridBodyListArray.add(unitGridBodyNamedata);
		   masterGridBodyListArray.add(unitGridBodycodedata);
		   masterGridBodyListArray.add(unitGridBodyNoOfDecimalsdata);
		   masterGridBodyListArray.add(unitGridBodyRoundingTypedata);
	   }
	*/   	
	   
	 
		
	   String actmasterGridBodyList=clickOnEmptyGroup.getText();
	   	
	   String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 341, 7);
	   	
	   excelReader.setCellData(xlfile, xlSheetName, 341, 8, actmasterGridBodyList);
	   	
	   System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
	   System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);
	   	
	   if(actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList))
	   {
		   excelReader.setCellData(xlfile, xlSheetName, 340, 9, resPass);
		   return true;
	   } 
	   else 
	   {
		   excelReader.setCellData(xlfile, xlSheetName, 340, 9, resFail);
		   return false;
	   }
   }
   catch (Exception e) 
   {
	   String exception =e.getMessage().substring(0, 50);
	   excelReader.setExceptionInExcel(xlfile, xlSheetName, 340, 10, exception);
	   System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   return false;
   } 
 }
  
  
 
 
	@FindBy(xpath = "//select[@id='iRoundingType']")
	private static WebElement unitsmasterRoundingType;
	
	@FindBy(xpath = "//*[@id='UnitType']")
	private static WebElement unitsmasterUnitType;
 
 
 public static boolean checkClickOnNewButtonInUnitsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	 excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	 System.out.println("********************** checkClickOnNewButtonInUnitsMasterPage Method Executes............ **************************");
	
	 try
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		 masterNewBtn.click();
		 
		 int masterNewGridHeaderButtonsCount=masterNewGridHeaderButtons.size();
		 
		 ArrayList<String> masterNewGridHeaderButtonsArray = new ArrayList<String>();
		 
		 for (int i=0;i<masterNewGridHeaderButtonsCount;i++)
		 {
			 String data=masterNewGridHeaderButtons.get(i).getText();
			 masterNewGridHeaderButtonsArray.add(data);
		 }	
		 
		 String actmasterNewGridHeaderButtons=masterNewGridHeaderButtonsArray.toString();
		 
		 String expmasterNewGridHeaderButtons=excelReader.getCellData(xlSheetName, 343, 7);
		 
		 int masterNewGeneralTabListCount=masterNewGeneralTabList.size();
		 
		 ArrayList<String> masterNewGeneralTabListArray = new ArrayList<String>();
		 
		 for (int i=0;i<masterNewGeneralTabListCount;i++)
		 {
			 String data=masterNewGeneralTabList.get(i).getText();
			 masterNewGeneralTabListArray.add(data);
		 }
		 
		 String actmasterNewGeneralTabList=masterNewGeneralTabListArray.toString();
		 
		 String expmasterNewGeneralTabList=excelReader.getCellData(xlSheetName, 344, 7);
		 
		 Select oSelect = new Select(unitsmasterRoundingType);
		 List<WebElement> elementCount = oSelect.getOptions();
		 
		 int accRoundingTypeSize = elementCount.size();
		 
		 String actRoundingTypeSize=Integer.toString(accRoundingTypeSize);
		 
		 String expRoundingTypeSize = excelReader.getCellData(xlSheetName, 345, 7);
		 
		 Select oSelect1 = new Select(unitsmasterUnitType);
		 List<WebElement> elementCount1 = oSelect1.getOptions();
		 
		 int accunitsmasterUnitType = elementCount1.size();
		 
		 String actunitsmasterUnitType=Integer.toString(accunitsmasterUnitType);
		 
		 String expunitsmasterUnitType = excelReader.getCellData(xlSheetName, 346, 7);
		 
		 
		 excelReader.setCellData(xlfile, xlSheetName, 343, 8, actmasterNewGridHeaderButtons);
		 excelReader.setCellData(xlfile, xlSheetName, 344, 8, actmasterNewGeneralTabList);
		 excelReader.setCellData(xlfile, xlSheetName, 345, 8, actRoundingTypeSize);
		 excelReader.setCellData(xlfile, xlSheetName, 346, 8, actunitsmasterUnitType);
		 
		 System.out.println("actmasterNewGridHeaderButtons    : " + actmasterNewGridHeaderButtons);
		 System.out.println("expmasterNewGridHeaderButtons    : " + expmasterNewGridHeaderButtons);
		 System.out.println("actmasterNewGeneralTabList       : " + actmasterNewGeneralTabList);
		 System.out.println("expmasterNewGeneralTabList       : " + expmasterNewGeneralTabList);
		 System.out.println("RoundingTypeSize Value Actual    : " + actRoundingTypeSize     + " Value Expected : " + expRoundingTypeSize);
		 System.out.println("unitsmasterUnitType Value Actual : " + actunitsmasterUnitType  + " Value Expected : " + expunitsmasterUnitType);
		 
		 
		 if (actmasterNewGridHeaderButtons.equalsIgnoreCase(expmasterNewGridHeaderButtons) && actmasterNewGeneralTabList.equalsIgnoreCase(expmasterNewGeneralTabList)
				 && actRoundingTypeSize.equalsIgnoreCase(expRoundingTypeSize) && actunitsmasterUnitType.equalsIgnoreCase(expunitsmasterUnitType)) 
		 {	
			 excelReader.setCellData(xlfile, xlSheetName, 342, 9, resPass);
			 return true;
		 } 
		 else 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 342, 9, resFail);
			 return false;
		 }		
	 }
	 catch (Exception e) 
	 {
		  String exception =e.getMessage().substring(0, 50);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 342, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	 } 	
 }

 
 public static boolean checkInputNameCodeNoOfDecimalsAndClickOnSaveButtonInUnitsCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	 excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	 System.out.println("***************** checkInputNameCodeNoOfDecimalsAndClickOnSaveButtonInUnitsCreationPage Method Executes............************************");
	
	 try
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		 nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 347, 6));
		 	
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		 codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 348, 6));
		 codeTxt.sendKeys(Keys.TAB);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noOfDecimalsTxt));
		 noOfDecimalsTxt.sendKeys(excelReader.getCellData(xlSheetName, 349, 6));
	
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		 saveBtn.click();
	
		 String expUnitsSaveMessage = excelReader.getCellData(xlSheetName, 348, 7);
	
		 boolean actMessageOnSaveUnit = checkValidationMessageboolean(expUnitsSaveMessage);
		 boolean expMessageOnSaveUnit = true;
		 
		 String actResult = Boolean.toString(actMessageOnSaveUnit);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 347, 8, actResult.toUpperCase());
	
		 System.out.println("Click on Save                   : " + actMessageOnSaveUnit + "  Value Expected :       "+ expMessageOnSaveUnit);
	
		 if (actMessageOnSaveUnit==expMessageOnSaveUnit)
		 {	
			 excelReader.setCellData(xlfile, xlSheetName, 347, 9, resPass);
			 return true;
		 } 
		 else 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 347, 9, resFail);
			 return false;
		 }		
	 }
	 catch (Exception e) 
	 {
		  String exception =e.getMessage().substring(0, 50);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 347, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	 } 	
 }

 
	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
	public static WebElement unitsNewCreationNameInFirstRow;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[11]")
	public static WebElement unitNewCreationNameInSecondRow;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[3]/td[11]")
	public static WebElement unitNewCreationNameInThirdRow;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[6]/td[11]")
	public static WebElement unitNewCreationNameInSixthRow;
 
  public static boolean checkUnitsCreationAndClickOnCloseButtonToDisplayCreatedUnitsInDisplayGrid()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("***************  checkUnitsCreationAndClickOnCloseButtonToDisplayCreatedUnitsInDisplayGrid Method Executes..........   *********************");
	
	try
	{
		boolean actUnitsMasterName                   = nameTxt.getText().isEmpty();
		boolean actUnitsMasterCode                   = codeTxt.getText().isEmpty();
		
		boolean expUnitsMasterName                   = true;
		boolean expUnitsMasterCode                   = true;
		
		boolean actMethod = actUnitsMasterName == expUnitsMasterName && actUnitsMasterCode == expUnitsMasterCode;
		
		String actResult = Boolean.toString(actMethod);
		
		int masterNewGridHeaderButtonsCount=masterNewGridHeaderButtons.size();
		 
		 ArrayList<String> masterNewGridHeaderButtonsArray = new ArrayList<String>();
		 
		 for (int i=0;i<masterNewGridHeaderButtonsCount;i++)
		 {
			 String data=masterNewGridHeaderButtons.get(i).getText();
			 masterNewGridHeaderButtonsArray.add(data);
		 }	
		 
		 String actmasterNewGridHeaderButtons=masterNewGridHeaderButtonsArray.toString();
		 
		 String expmasterNewGridHeaderButtons=excelReader.getCellData(xlSheetName, 351, 7);
		 
		 int masterNewGeneralTabListCount=masterNewGeneralTabList.size();
		 
		 ArrayList<String> masterNewGeneralTabListArray = new ArrayList<String>();
		 
		 for (int i=0;i<masterNewGeneralTabListCount;i++)
		 {
			 String data=masterNewGeneralTabList.get(i).getText();
			 masterNewGeneralTabListArray.add(data);
		 }
		 
		 String actmasterNewGeneralTabList=masterNewGeneralTabListArray.toString();
		 
		 String expmasterNewGeneralTabList=excelReader.getCellData(xlSheetName, 352, 7);
		 
		 Select oSelect = new Select(unitsmasterRoundingType);
		 List<WebElement> elementCount = oSelect.getOptions();
		 
		 int accRoundingTypeSize = elementCount.size();
		 
		 String actRoundingTypeSize=Integer.toString(accRoundingTypeSize);
		 
		 String expRoundingTypeSize = excelReader.getCellData(xlSheetName, 353, 7);
		 
		 Select oSelect1 = new Select(unitsmasterUnitType);
		 List<WebElement> elementCount1 = oSelect1.getOptions();
		 
		 int accunitsmasterUnitType = elementCount1.size();
		 
		 String actunitsmasterUnitType=Integer.toString(accunitsmasterUnitType);
		 
		 String expunitsmasterUnitType = excelReader.getCellData(xlSheetName, 354, 7);
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		 closeBtn.click();
			
		 int masterGridBodyListCount=masterGridBodyRowCount.size();
		 
		 ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
		 
		 for (int i=0;i<masterGridBodyListCount;i++)
		 {
			 String unitGridBodyNamedata         =unitGridBodyName.get(i).getText();
			 String unitGridBodycodedata         =unitGridBodycode.get(i).getText();
			 String unitGridBodyNoOfDecimalsdata =unitGridBodyNoOfDecimals.get(i).getText();
			 String unitGridBodyRoundingTypedata =unitGridBodyRoundingType.get(i).getText();
			 
			 masterGridBodyListArray.add(unitGridBodyNamedata);
			 masterGridBodyListArray.add(unitGridBodycodedata);
			 masterGridBodyListArray.add(unitGridBodyNoOfDecimalsdata);
			 masterGridBodyListArray.add(unitGridBodyRoundingTypedata);
		 }
		 
		 String actmasterGridBodyList=masterGridBodyListArray.toString();
		 
		 String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 355, 7);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 350, 8, actResult.toUpperCase());
		 excelReader.setCellData(xlfile, xlSheetName, 351, 8, actmasterNewGridHeaderButtons);
		 excelReader.setCellData(xlfile, xlSheetName, 352, 8, actmasterNewGeneralTabList);
		 excelReader.setCellData(xlfile, xlSheetName, 353, 8, actRoundingTypeSize);
		 excelReader.setCellData(xlfile, xlSheetName, 354, 8, actunitsmasterUnitType);
		 excelReader.setCellData(xlfile, xlSheetName, 355, 8, actmasterGridBodyList);
		 
		 System.out.println("actmasterNewGridHeaderButtons    : " + actmasterNewGridHeaderButtons);
		 System.out.println("expmasterNewGridHeaderButtons    : " + expmasterNewGridHeaderButtons);
		 System.out.println("actmasterNewGeneralTabList       : " + actmasterNewGeneralTabList);
		 System.out.println("expmasterNewGeneralTabList       : " + expmasterNewGeneralTabList);
		 System.out.println("RoundingTypeSize Value Actual    : " + actRoundingTypeSize     + " Value Expected : " + expRoundingTypeSize);
		 System.out.println("unitsmasterUnitType Value Actual : " + actunitsmasterUnitType  + " Value Expected : " + expunitsmasterUnitType);
		 System.out.println("masterGridBodyList Actual        : " + actmasterGridBodyList);
		 System.out.println("masterGridBodyList Expected      : " + expmasterGridBodyList);
		 
		 
		 if (actMethod==true && actmasterNewGridHeaderButtons.equalsIgnoreCase(expmasterNewGridHeaderButtons)
				 && actmasterNewGeneralTabList.equalsIgnoreCase(expmasterNewGeneralTabList) && actRoundingTypeSize.equalsIgnoreCase(expRoundingTypeSize) 
				 && actunitsmasterUnitType.equalsIgnoreCase(expunitsmasterUnitType) && actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList)) 
		 {	
			 excelReader.setCellData(xlfile, xlSheetName, 350, 9, resPass);
			 return true;
		 } 
		 else 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 350, 9, resFail);
			 return false;
		 }		
	 }
	 catch (Exception e) 
	 {
		  String exception =e.getMessage().substring(0, 50);
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 350, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	 } 	
 }

 @FindBy(xpath = "//tr[@class='webgrid-row-style padding0 ui-sortable-handle textRedColor FRowColor']//input[@name='chkRowCheck']")
 public static WebElement unitsNameCheckBoxIsCheckedAfterSearch;

 @FindBy(xpath = "//input[@id='liSelectAllMasters']")
 public static WebElement mastersSelectAllCheckbox;
 

 // Edit Units

 public static boolean checkSearchUnitsAndClickOnEditToDisplayUnitsSavedInformation() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	 excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 System.out.println("*****************  checkSearchUnitsAndClickOnEditToDisplayUnitsSavedInformation Method Executes.........     ********************");
  
	 try
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastercmbMasterTxt));
		 mastercmbMasterTxt.click();
		 mastercmbMasterTxt.sendKeys(Keys.SPACE);
		 
		 int mastercmbMasterList = mastercmbMasterListCount.size();
		 
		 for(int i=0;i<mastercmbMasterList;i++)
		 {
			 String data = mastercmbMasterListCount.get(i).getText();
			 if(data.equalsIgnoreCase("PcsST"))
			 {
				 mastercmbMasterListCount.get(i).click();
			 }	
		 }
		 
		 mastercmbMasterTxt.sendKeys(Keys.TAB);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsNameCheckBoxIsCheckedAfterSearch));
		 boolean actUnitNameSearchedIsChecked = unitsNameCheckBoxIsCheckedAfterSearch.isSelected();
		 boolean expUnitNameSearchedIsChecked = true;
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		 masterEditBtn.click();
		 
		 int masterNewGridHeaderButtonsCount=masterNewGridHeaderButtons.size();
		 
		 ArrayList<String> masterNewGridHeaderButtonsArray = new ArrayList<String>();
		 
		 for (int i=0;i<masterNewGridHeaderButtonsCount;i++)
		 {
			 String data=masterNewGridHeaderButtons.get(i).getText();
			 masterNewGridHeaderButtonsArray.add(data);
		 }	
		 
		 String actmasterNewGridHeaderButtons=masterNewGridHeaderButtonsArray.toString();
		 
		 String expmasterNewGridHeaderButtons=excelReader.getCellData(xlSheetName, 357, 7);
		 
		 int masterNewGeneralTabListCount=masterNewGeneralTabList.size();
		 
		 ArrayList<String> masterNewGeneralTabListArray = new ArrayList<String>();
		 
		 for (int i=0;i<masterNewGeneralTabListCount;i++)
		 {
			 String data=masterNewGeneralTabList.get(i).getText();
			 masterNewGeneralTabListArray.add(data);
		 }
		 
		 String actmasterNewGeneralTabList=masterNewGeneralTabListArray.toString();
		 
		 String expmasterNewGeneralTabList=excelReader.getCellData(xlSheetName, 358, 7);
		 
		 Select oSelect = new Select(unitsmasterRoundingType);
		 List<WebElement> elementCount = oSelect.getOptions();
		 
		 int accRoundingTypeSize = elementCount.size();
		 
		 String actRoundingTypeSize=Integer.toString(accRoundingTypeSize);
		 
		 String expRoundingTypeSize = excelReader.getCellData(xlSheetName, 359, 7);
		 
		 Select oSelect1 = new Select(unitsmasterUnitType);
		 List<WebElement> elementCount1 = oSelect1.getOptions();
		 
		 int accunitsmasterUnitType = elementCount1.size();
		 
		 String actunitsmasterUnitType=Integer.toString(accunitsmasterUnitType);
		 
		 String expunitsmasterUnitType = excelReader.getCellData(xlSheetName, 360, 7);
		 
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		 
		 String actUnitsMasterName                    = nameTxt.getAttribute("value");
		 String actUnitsMasterCode                    = codeTxt.getAttribute("value");
		 String actUnitsNoOfDecimals                  = noOfDecimalsTxt.getAttribute("value");
		 
		 String expUnitMasterName                     = excelReader.getCellData(xlSheetName, 361, 7);
		 String expUnitsMasterCode                    = excelReader.getCellData(xlSheetName, 362, 7);
		 String expUnitsNoOfDecimals                  = excelReader.getCellData(xlSheetName, 363, 7);
		 
		 String actResult = Boolean.toString(actUnitNameSearchedIsChecked);
		 
		 excelReader.setCellData(xlfile, xlSheetName, 356, 8, actResult.toUpperCase());
		 excelReader.setCellData(xlfile, xlSheetName, 357, 8, actmasterNewGridHeaderButtons);
		 excelReader.setCellData(xlfile, xlSheetName, 358, 8, actmasterNewGeneralTabList);
		 excelReader.setCellData(xlfile, xlSheetName, 359, 8, actRoundingTypeSize);
		 excelReader.setCellData(xlfile, xlSheetName, 360, 8, actunitsmasterUnitType);
		 excelReader.setCellData(xlfile, xlSheetName, 361, 8, actUnitsMasterName);
		 excelReader.setCellData(xlfile, xlSheetName, 362, 8, actUnitsMasterCode);
		 excelReader.setCellData(xlfile, xlSheetName, 363, 8, actUnitsNoOfDecimals);
		 
		 System.out.println("actmasterNewGridHeaderButtons    : " + actmasterNewGridHeaderButtons);
		 System.out.println("expmasterNewGridHeaderButtons    : " + expmasterNewGridHeaderButtons);
		 System.out.println("actmasterNewGeneralTabList       : " + actmasterNewGeneralTabList);
		 System.out.println("expmasterNewGeneralTabList       : " + expmasterNewGeneralTabList);
		 System.out.println("RoundingTypeSize Value Actual    : " + actRoundingTypeSize               + " Value Expected : " + expRoundingTypeSize);
		 System.out.println("unitsmasterUnitType Value Actual : " + actunitsmasterUnitType            + " Value Expected : " + expunitsmasterUnitType);
		 System.out.println("Name Value Actual                : " + actUnitNameSearchedIsChecked      + " Value Expected : " + expUnitNameSearchedIsChecked);
		 System.out.println("Name Value Actual                : " + actUnitsMasterName                + " Value Expected : " + expUnitMasterName);
		 System.out.println("Code Value Actual                : " + actUnitsMasterCode                + " Value Expected : " + expUnitsMasterCode);
		 System.out.println("No Of Decimals Value Actual      : " + actUnitsNoOfDecimals              + " Value Expected : " + expUnitsNoOfDecimals);
		 
		 if (actUnitNameSearchedIsChecked == expUnitNameSearchedIsChecked && actUnitsMasterName.equalsIgnoreCase(expUnitMasterName)
				 && actUnitsMasterCode.equalsIgnoreCase(expUnitsMasterCode) && actUnitsNoOfDecimals.equalsIgnoreCase(expUnitsNoOfDecimals)
				 && actmasterNewGridHeaderButtons.equalsIgnoreCase(expmasterNewGridHeaderButtons) 
				 && actmasterNewGeneralTabList.equalsIgnoreCase(expmasterNewGeneralTabList)
				 && actRoundingTypeSize.equalsIgnoreCase(expRoundingTypeSize) && actunitsmasterUnitType.equalsIgnoreCase(expunitsmasterUnitType))
		 {			
			 excelReader.setCellData(xlfile, xlSheetName, 356, 9, resPass);
			 return true;
		 } 
		 else 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 356, 9, resFail);
			 return false;
		 }		
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 356, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 	
 }

 // Update Units

 public static boolean checkUpdateUnitsOnInputNameCodeAndClickOnSaveButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("*******************      checkUpdateUnitsOnInputNameCodeAndClickOnSaveButton Method Executes............    ***************************");
		
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.sendKeys(Keys.END);
		nameTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 364, 6));
		//Thread.sleep(2000);
		nameTxt.sendKeys(Keys.TAB);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys(Keys.END);
		codeTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 365, 6));
		//Thread.sleep(2000);
		codeTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expUnitsUpdateMessage = excelReader.getCellData(xlSheetName, 365, 7);
		
		boolean actMessageOnUpdateUnits = checkValidationMessageboolean(expUnitsUpdateMessage);
		boolean expMessageOnUpdateUnits = true;
		
		String actResult = Boolean.toString(actMessageOnUpdateUnits);
		
		excelReader.setCellData(xlfile, xlSheetName, 364, 8, actResult.toUpperCase());
	
		System.out.println("Click on Save in Edit Units        : " + actMessageOnUpdateUnits +        "  Value Expected :       "+ expMessageOnUpdateUnits);

		if (actMessageOnUpdateUnits==expMessageOnUpdateUnits) 
		{			
			 excelReader.setCellData(xlfile, xlSheetName, 364, 9, resPass);
			 return true;
		 } 
		 else 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 364, 9, resFail);
			 return false;
		 }		
	 }
	 catch (Exception e) 
	 {
		 String exception =e.getMessage().substring(0, 50);
		 excelReader.setExceptionInExcel(xlfile, xlSheetName, 364, 10, exception);
		 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		 return false;
	 } 	
 }

	// Update Unit display in Unit Display Grid

  public static boolean checkUpdateUnitNameInUnitDisplayGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	  
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************     checkUpdateUnitNameInUnitDisplayGrid Method Executes............     ********************************");
		
    try
    {
    	//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitNewCreationNameInThirdRow));
    	
    	int masterGridBodyListCount=masterGridBodyRowCount.size();
		 
    	ArrayList<String> masterGridBodyListArray = new ArrayList<String>();
    	
    	for (int i=0;i<masterGridBodyListCount;i++)
    	{
    		String unitGridBodyNamedata         =unitGridBodyName.get(i).getText();
    		String unitGridBodycodedata         =unitGridBodycode.get(i).getText();
    		String unitGridBodyNoOfDecimalsdata =unitGridBodyNoOfDecimals.get(i).getText();
    		String unitGridBodyRoundingTypedata =unitGridBodyRoundingType.get(i).getText();
			 
    		masterGridBodyListArray.add(unitGridBodyNamedata);
    		masterGridBodyListArray.add(unitGridBodycodedata);
    		masterGridBodyListArray.add(unitGridBodyNoOfDecimalsdata);
    		masterGridBodyListArray.add(unitGridBodyRoundingTypedata);
    	}
		 
    	String actmasterGridBodyList=masterGridBodyListArray.toString();
		 
    	String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 367, 7);
    	
    	excelReader.setCellData(xlfile, xlSheetName, 367, 8, actmasterGridBodyList);
    	
    	System.out.println("masterGridBodyList Actual        : " + actmasterGridBodyList);
    	System.out.println("masterGridBodyList Expected      : " + expmasterGridBodyList);

		if (actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList)) 
		{			
			excelReader.setCellData(xlfile, xlSheetName, 366, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 366, 9, resFail);
			return false;
		}		
    }
    catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 50);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 366, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
    	return false;
    } 	
  }

  // Delete Unit

  @FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
  public static WebElement unitFirstCheckBox;

  @FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[8]/div[1]/label[1]/input[1]")
  public static WebElement masterSecondCheckBox;

  public static boolean checkDeleteUnitsWhichAreDefinedInProductsOnSelectUnitAndClickOnDelete() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

   excelReader = new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

   System.out.println("***************   checkDeleteUnitsWhichAreDefinedInProductsOnSelectUnitAndClickOnDelete Method Executes............    **********************");
		
   try
   {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys(Keys.END);
		masterSearchTxt.sendKeys(Keys.SHIFT, Keys.HOME);

		masterSearchTxt.sendKeys("DozsST");
		//Thread.sleep(2000);

		masterSearchTxt.sendKeys(Keys.ENTER);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsNewCreationNameInFirstRow));
		System.out.println(unitsNewCreationNameInFirstRow.getText());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
		unitFirstCheckBox.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
		masterDeleteBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));

		String actMessageOnClickOnDeleteButton = getMsgOnDelete.getText();
		
		String expMessageOnClickOnDeleteButton = excelReader.getCellData(xlSheetName, 369, 7);
		
		System.out.println("Click on Save in Edit Units        : " + actMessageOnClickOnDeleteButton+ " Value Expected :       " + expMessageOnClickOnDeleteButton);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
		clickOnOkInDelete.click();
		
		
		if(validationConfirmationMessage.isDisplayed())
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
			String actUnitsDeleteOkMessage = validationConfirmationMessage.getText();
			String expUnitsDeleteOkMessage = excelReader.getCellData(xlSheetName, 370, 7);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		    closeValidationConfirmationMessage.click();
	
		    System.out.println("Click on Save in Edit Units        : " + actUnitsDeleteOkMessage+         " Value Expected :       " + expUnitsDeleteOkMessage);
		}
		
		
	
		excelReader.setCellData(xlfile, xlSheetName, 369, 8, expMessageOnClickOnDeleteButton);

		if (actMessageOnClickOnDeleteButton.equalsIgnoreCase(expMessageOnClickOnDeleteButton)
				/*&& actUnitsDeleteOkMessage.equalsIgnoreCase(expUnitsDeleteOkMessage)*/) 
		{			
			excelReader.setCellData(xlfile, xlSheetName, 368, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 368, 9, resFail);
			return false;
		}		
    }
    catch (Exception e) 
    {
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 368, 10, e.getMessage());
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
    	return false;
    } 	
  }

  @FindBy(xpath = "//a[@class='clsMasterName theme_color-inverse']")
  public static WebElement unitsTreeLeftSide;

  public static boolean checkDeleteUnitsOnSelectUnitAndClickOnDelete() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("**********************   checkDeleteUnitsOnSelectUnitAndClickOnDelete  Method Executes............  *******************************");

   try
   {
	  
	    /*//Creating Units of Pcs   
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsNewCreationNameInFirstRow));
		unitsNewCreationNameInFirstRow.click();
		*/
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 371, 6));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 371, 6));
		codeTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noOfDecimalsTxt));
		noOfDecimalsTxt.sendKeys(excelReader.getCellData(xlSheetName, 373, 6));
		
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expUnitsSaveMessage = excelReader.getCellData(xlSheetName, 372, 7);
		
		boolean actMessageOnSaveUnits=checkValidationMessageboolean(expUnitsSaveMessage);
		boolean expMessageOnSaveUnits=true;
		
		System.out.println("Click on Save                   : " + actMessageOnSaveUnits +            " Value Expected :  " + expMessageOnSaveUnits);

		
		Thread.sleep(2000);
		
		
		//Creating Units of Dozs
	
		   

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 372, 6));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 372, 6));
		codeTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(noOfDecimalsTxt));
		noOfDecimalsTxt.sendKeys(excelReader.getCellData(xlSheetName, 373, 6));
		
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expUnitsSaveMessages = excelReader.getCellData(xlSheetName, 372, 7);
		
		boolean actMessageOnSaveUnitss=checkValidationMessageboolean(expUnitsSaveMessages);
		boolean expMessageOnSaveUnitss=true;
		
		System.out.println("Click on Save                   : " + actMessageOnSaveUnitss +            " Value Expected :  " + expMessageOnSaveUnitss);

		
		Thread.sleep(2000);
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		 closeBtn.click();
			
		//Thread.sleep(5000); 
		
			if (actMessageOnSaveUnits==expMessageOnSaveUnits) 
		{			
			excelReader.setCellData(xlfile, xlSheetName, 371, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 371, 9, resFail);
			return false;
		}		
    }
    catch (Exception e) 
    {
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 371, 10, e.getMessage());
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
    	return false;
    } 		
  }
  
  
/* public static boolean ServerErrorExecption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	
		 boolean actValidationDisplayMessage = serverErrorPopup.isDisplayed();

			if (actValidationDisplayMessage == true)
			{
				System.err.println("Server Error Popup is Displaying");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(serverErrorClose));
				serverErrorClose.click();
				return actValidationDisplayMessage;
			} 
			else
			{
				System.out.println("NO Server Error Popup is Displaying");
				return false;
			}
	 
 }*/
  

  public static boolean checkDeletedUnitDisplayInUnitsMainGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************ checkDeleteUnitsOnSelectUnitAndClickOnDelete  Method Executes  ............ *******************************");

	try
	{
		  String actmasterGridBodyList=clickOnEmptyGroup.getText();
		   	
		   String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 341, 7);
		   	
		   excelReader.setCellData(xlfile, xlSheetName, 341, 8, actmasterGridBodyList);
		   	
		   System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
		   System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);
		   	
		   if(actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList))
		   {
			   excelReader.setCellData(xlfile, xlSheetName, 340, 9, resPass);
			   return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 375, 9, resFail);
			return false;
		}		
    }
    catch (Exception e) 
    {
    	String exception =e.getMessage().substring(0, 50);
    	excelReader.setExceptionInExcel(xlfile, xlSheetName, 375, 10, exception);
    	System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    	return false;
    } 	
  }

  @FindBy(xpath = "//span[@id='btnClose']")
  public static WebElement unitsCloseBtn;

  public static boolean checkClicOnCloseButtonToCloseUnitsMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("*********************************    checkCloseUnitsMaster Method Executes............    **********************************************");
		
    try
    {	
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsCloseBtn));
		unitsCloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		boolean actLoadDashboard           = labelDashboard.isDisplayed();
		boolean actSelectDashboard         = selectDashboard.isDisplayed();
		boolean actNewDashboard            = newAddDashBoard.isDisplayed();
		boolean actDashboardCustomization  = dashboardCustomizationSettings.isDisplayed();

		boolean expLoadDashboard          = true;
		boolean expSelectDashboard        = true;
		boolean expNewDashboard           = true;
		boolean expDashboardCustomization = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 378, 7);
		
		boolean actMethod = actLoadDashboard == expLoadDashboard && actSelectDashboard == expSelectDashboard
							&& actNewDashboard == expNewDashboard && actDashboardCustomization == expDashboardCustomization;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 377, 8, actResult.toUpperCase());
		excelReader.setCellData(xlfile, xlSheetName, 378, 8, actDashboardLabel);

		System.out.println("Load Dashbord Value Actual                          : " + actLoadDashboard+          " Value Expected : " + expLoadDashboard);
		System.out.println("Select Dashbord Value Actual                        : " + actSelectDashboard+        " Value Expected : " + expSelectDashboard);
		System.out.println("New Dashbord Value Actual                           : " + actNewDashboard+           " Value Expected : " + expNewDashboard);
		System.out.println("Dashbord Customization Value Actual                 : " + actDashboardCustomization+ " Value Expected : " + expDashboardCustomization);

		if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel) && actMethod==true)
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 377, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 377, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 377, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}

}
 

  
  
  
  
  
  
  //UNITS CONVERTION PAGE STARTS
  
  
  
  
  
  
  
  
  
  
  
  
  
  @FindBy(xpath = "//div[contains(text(),'Save')]")
  private static WebElement unitsConversionSaveButton;

  @FindBy(xpath = "//div[contains(text(),'Import From Excel')]")
  private static WebElement unitsConversionImportFromExcelButton;

  @FindBy(xpath = "//div[contains(text(),'Delete')]")
  private static WebElement unitsConversionDeleteButton;
  
  @FindBy(xpath = "//*[@id='btnDelete']")
  private static WebElement unitsConversionDeleteQButton;

  @FindBy(xpath = "//div[contains(text(),'Clear')]")
  private static WebElement unitsConversionClearButton;

  @FindBy(xpath = "//li[@id='ucCancel']//div[@class='toolbar_button_text'][contains(text(),'Cancel')]")
  private static WebElement unitsConversionCancelButton;

  @FindBy(xpath = "//input[@id='optionBaseUnit']")
  private static WebElement unitsConversionBaseUnit;

  @FindBy(xpath = "//input[@id='optionProduct']")
  private static WebElement unitsConversionProduct;

  @FindBy(xpath = "//input[@id='optionLoadFrom']")
  private static WebElement unitsConversionLoadFrom;

  @FindBy(xpath = "//td[@id='myTagsTable_col_1-2']")
  private static WebElement unitsConversionUnit;

  @FindBy(xpath = "//input[@id='myTagsTable_UnitName']")
  private static WebElement inputUnitConversionUnit;

  @FindBy(xpath = "//td[@id='myTagsTable_col_1-3']")
  private static WebElement unitsConversionXFactor;

  @FindBy(xpath = "//input[@id='myTagsTable_XFactor']")
  private static WebElement inputUnitsConversionXFactor;

  @FindBy(xpath = "//input[@id='myTagsTable_AdditionalQuantity']")
  private static WebElement inputUnitsConversionAdditionalQuantity;

  @FindBy(xpath = "//td[@id='myTagsTable_col_1-4']")
  private static WebElement unitsConversionAdditionalQuantity;

  @FindBy(xpath = "//input[@id='myTagsTable_RoundOff']")
  private static WebElement unitsConversionRoundOff;

  @FindBy(xpath = "///*[@id='myTagsTable_body']/tr[1]/td[1]")
  private static WebElement selectFirstRowInUnitsConversion;

  @FindBy(xpath = "//*[@id='myTagsTable_body']/tr[2]/td[1]")
  private static WebElement selectSecondRowInUnitsConversion;

  @FindBy(xpath = "//td[@id='myTagsTable_col_1-6']")
  private static WebElement unitsConversionDescriptionFirstRow;


  
  public static boolean checkServerErrorMessageIsNotDisplay() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
     try
     {
        getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(serverErrorClose));
 
        boolean actValidationMessageIsEmptyDisplay                  = serverErrorClose.isDisplayed();
        boolean expValidationMessageIsEmptyDisplay                  = false;
                  
       if(actValidationMessageIsEmptyDisplay==expValidationMessageIsEmptyDisplay)
       {      
         System.out.println("Server Error Message Is Not Display  :  "+actValidationMessageIsEmptyDisplay +" Value Expected : "+expValidationMessageIsEmptyDisplay);
	     return true;
       }
       else
       {
    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(serverErrorClose));
    	 serverErrorClose.click();

    	 System.out.println("Server Error Message Is Not Display  :  "+actValidationMessageIsEmptyDisplay +" Value Expected : "+expValidationMessageIsEmptyDisplay);
         return false;    
       }          
     }
     catch(Exception e)
     {
      System.err.println("Error Message NOT Found or NOT Clickable");
      return true;
     }
  }
  	
  
  
  // Units Conversion Page
  
  @FindBy(xpath="//*[@id='page_Content']/div[2]/div[1]/div/label")
  private static List<WebElement> unitConversionHeaderList;
  
  @FindBy(xpath="//*[@id='myTagsTable_head']/tr/th/div")
  private static List<WebElement> unitConversionTabelHeaderList;
  
  
  public static boolean checkClickOnUnitsConversionMenuFromItemMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************************      checkClickOnUnitsConversionMenuFromItemMenu Method Executes............     ******************************");
    
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemsMenu));
		itemsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionMenu));
		unitsConversionMenu.click();
		
		
		//we need to add in two catch stmts
		//boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		//boolean expSummaryErrorMessage  = true;
		
		//boolean actServerErrorMessage  = checkServerErrorMessageIsNotDisplay();
		//boolean expServerErrorMessage  = false;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionSaveButton));
		
		String actUnitsConversionTitle             = unitsConversionTitle.getText();
		String expUnitsConversionTitle             = excelReader.getCellData(xlSheetName, 381, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 381, 8, actUnitsConversionTitle);
		
		int currencyRibbonControlListCount = currencyRibbonControlList.size();
			
		ArrayList<String> currencyRibbonControlListArray = new ArrayList<String>();
		
		for(int i=0;i<currencyRibbonControlListCount;i++)
		{
			String data = currencyRibbonControlList.get(i).getText();
			currencyRibbonControlListArray.add(data);
		}
			
		String actcurrencyRibbonControlList = currencyRibbonControlListArray.toString();
		String expcurrencyRibbonControlList = excelReader.getCellData(xlSheetName, 382, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 382, 8, actcurrencyRibbonControlList);
		
		int unitConversionHeaderListCount = unitConversionHeaderList.size();
		
		ArrayList<String> unitConversionHeaderListArray = new ArrayList<String>();
		
		for(int i=0;i<unitConversionHeaderListCount;i++)
		{
			String data = unitConversionHeaderList.get(i).getText();
			unitConversionHeaderListArray.add(data);
		}
			
		String actunitConversionHeaderList = unitConversionHeaderListArray.toString();
		String expunitConversionHeaderList = excelReader.getCellData(xlSheetName, 383, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 383, 8, actunitConversionHeaderList);
		
		int unitConversionTabelHeaderListCount = unitConversionTabelHeaderList.size();
		
		ArrayList<String> unitConversionTabelHeaderListArray = new ArrayList<String>();
		
		for(int i=0;i<unitConversionTabelHeaderListCount;i++)
		{
			String data = unitConversionTabelHeaderList.get(i).getText();
			unitConversionTabelHeaderListArray.add(data);
		}
			
		String actunitConversionTabelHeaderList = unitConversionTabelHeaderListArray.toString();
		String expunitConversionTabelHeaderList = excelReader.getCellData(xlSheetName, 384, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 384, 8, actunitConversionTabelHeaderList);
		

		//System.out.println("Opening UnitsConversion Error Message Value Actual : " + actSummaryErrorMessage +  " Value Expected : " + expSummaryErrorMessage);
		//System.out.println("Opening UnitsConversion Error Message              : " + actServerErrorMessage +   " Value Expected : " +  expServerErrorMessage);
		
		
		System.out.println("New Value Actual          : " + actUnitsConversionTitle +            " Value Expected : " + expUnitsConversionTitle);
		System.out.println("UnitConversionRibbonControlList Value Actual   : " + actcurrencyRibbonControlList);
		System.out.println("UnitConversionRibbonControlList Value Expected : " + expcurrencyRibbonControlList);
		System.out.println("unitConversionHeaderList Value Actual          : " + actunitConversionHeaderList);
		System.out.println("unitConversionHeaderList Value Expected        : " + expunitConversionHeaderList);
		System.out.println("unitConversionTabelHeaderList Value Actual     : " + actunitConversionTabelHeaderList);
		System.out.println("unitConversionTabelHeaderList Value Expected   : " + expunitConversionTabelHeaderList);

		if (actUnitsConversionTitle.equalsIgnoreCase(expUnitsConversionTitle) && actcurrencyRibbonControlList.equalsIgnoreCase(expcurrencyRibbonControlList)
				&& actunitConversionHeaderList.equalsIgnoreCase(expunitConversionHeaderList) 
				&& actunitConversionTabelHeaderList.equalsIgnoreCase(expunitConversionTabelHeaderList))
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 380, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 380, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 380, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
  }
  
  
  @FindBy(xpath="//*[@id='optionBaseUnit_table_data_body']/tr/td")
  private static List<WebElement> baseUnitComboList;
  
  public static boolean checkPreviousValuesOfConversionPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************* checkPreviousValuesOfConversionPage  Method Executes............  *************************************");
		
    try
    {	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionBaseUnit));
		unitsConversionBaseUnit.click();
		unitsConversionBaseUnit.sendKeys(Keys.SPACE);

		int baseUnitComboListCount = baseUnitComboList.size();
		
		for(int i=0;i<baseUnitComboListCount;i++)
		{
			String data= baseUnitComboList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 385, 6)))
			{
				baseUnitComboList.get(i).click();
			}
		}
		
		unitsConversionBaseUnit.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionDescriptionFirstRow));
		String actUnitConversionBaseUnit       = unitsConversionBaseUnit.getAttribute("value");
		String actUnitConversionConversionUnit = unitsConversionUnit.getText();
		String actUnitConversionXFactor        = unitsConversionXFactor.getText();
		String actUnitConversionAdditionalQty  = unitsConversionAdditionalQuantity.getText();
		String actUnitConversionDescription    = unitsConversionDescriptionFirstRow.getText();

		String expUnitConversionBaseUnit       = excelReader.getCellData(xlSheetName, 386, 7);
		String expUnitConversionConversionUnit = excelReader.getCellData(xlSheetName, 387, 7);
		String expUnitConversionXFactor        = excelReader.getCellData(xlSheetName, 388, 7);
		String expUnitConversionAdditionalQty  = excelReader.getCellData(xlSheetName, 389, 7);
		String expUnitConversionDescription    = excelReader.getCellData(xlSheetName, 390, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 386, 8, actUnitConversionBaseUnit);
		excelReader.setCellData(xlfile, xlSheetName, 387, 8, actUnitConversionConversionUnit);
		excelReader.setCellData(xlfile, xlSheetName, 388, 8, actUnitConversionXFactor);
		excelReader.setCellData(xlfile, xlSheetName, 389, 8, actUnitConversionAdditionalQty);
		excelReader.setCellData(xlfile, xlSheetName, 390, 8, actUnitConversionDescription);

		System.out.println("Base Unit Value Actual          : " + actUnitConversionBaseUnit +      " Value Expected : " + expUnitConversionBaseUnit);
		System.out.println("Conversion Unit Value Actual    : " + actUnitConversionConversionUnit+ " Value Expected : " + expUnitConversionConversionUnit);
		System.out.println("X Factor Value Actual           : " + actUnitConversionXFactor +       " Value Expected : " + expUnitConversionXFactor);
		System.out.println("Additional Qty Value Actual     : " + actUnitConversionAdditionalQty + " Value Expected : " + expUnitConversionAdditionalQty);
		System.out.println("Description Value Actual        : " + actUnitConversionDescription +   " Value Expected : " + expUnitConversionDescription);

		if (actUnitConversionBaseUnit.equalsIgnoreCase(expUnitConversionBaseUnit)
				&& actUnitConversionConversionUnit.equalsIgnoreCase(expUnitConversionConversionUnit)
				&& actUnitConversionXFactor.equalsIgnoreCase(expUnitConversionXFactor)
				&& actUnitConversionAdditionalQty.equalsIgnoreCase(expUnitConversionAdditionalQty)
				&& actUnitConversionDescription.equalsIgnoreCase(expUnitConversionDescription))
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 385, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 385, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 385, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
}


public static boolean checkPreviousConversionIsDeletingOnClickOnDeleteOptionInUnitsConversion() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
{

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************** checkPreviousConversionIsDeletingOnClickOnDeleteOptionInUnitsConversion Method Executes............*************************");

	try
	{
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionBaseUnit));
		unitsConversionBaseUnit.click();
		unitsConversionBaseUnit.sendKeys(Keys.SPACE);

		int baseUnitComboListCount = baseUnitComboList.size();
		
		for(int i=0;i<baseUnitComboListCount;i++)
		{
			String data= baseUnitComboList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 385, 6)))
			{
				baseUnitComboList.get(i).click();
			}
		}
		
		unitsConversionBaseUnit.sendKeys(Keys.TAB);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionDeleteButton));
		unitsConversionDeleteButton.click();
		
		getWaitForAlert();

		String actAlertMessageOnDeletUnitsConversion = getAlert().getText();
		String expAlertMessageOnDeletUnitsConversion = excelReader.getCellData(xlSheetName, 392, 7);

		excelReader.setCellData(xlfile, xlSheetName, 392, 8, actAlertMessageOnDeletUnitsConversion);
		
		System.out.println("Alert On Delete Value Actual        : " + actAlertMessageOnDeletUnitsConversion+  "  Value Expected : " + expAlertMessageOnDeletUnitsConversion);
		
		getAlert().accept();

		String expDeleteMessageOkIsClicked = excelReader.getCellData(xlSheetName, 393, 7);

		boolean actDeleteDisplayMessageOkIsClicked = checkValidationMessageboolean(expDeleteMessageOkIsClicked);
		boolean expDeleteDisplayMessageOkIsClicked = true;
		
	
		System.out.println("Message on Ok Click Value Actual   : " + actDeleteDisplayMessageOkIsClicked +    "  Value Expected : " + expDeleteDisplayMessageOkIsClicked);

		if ( actAlertMessageOnDeletUnitsConversion.equalsIgnoreCase(expAlertMessageOnDeletUnitsConversion)
				&& actDeleteDisplayMessageOkIsClicked == expDeleteDisplayMessageOkIsClicked) 
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 391, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 391, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 391, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
}

public static boolean checkTheConversionValuesDeletedIsDisplayingInUnitsConversion()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
{

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************** checkClickOnClearButtonToClearTheFiledsInUnitsConversion Method Executes............  **************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionBaseUnit));
		unitsConversionBaseUnit.click();
		unitsConversionBaseUnit.sendKeys(Keys.END);
		unitsConversionBaseUnit.sendKeys(Keys.SHIFT,Keys.HOME);
		unitsConversionBaseUnit.sendKeys(Keys.SPACE);

		int baseUnitComboListCount = baseUnitComboList.size();
		
		for(int i=0;i<baseUnitComboListCount;i++)
		{
			String data= baseUnitComboList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 394, 6)))
			{
				baseUnitComboList.get(i).click();
			}
		}
		
		unitsConversionBaseUnit.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionDescriptionFirstRow));
		String actUnitConversionBaseUnit       = unitsConversionBaseUnit.getAttribute("value");
		boolean actUnitConversionConversionUnit = unitsConversionUnit.getText().isEmpty();
		String actUnitConversionXFactor         = unitsConversionXFactor.getText();
		String actUnitConversionAdditionalQty   = unitsConversionAdditionalQuantity.getText();
		boolean actUnitConversionDescription    = unitsConversionDescriptionFirstRow.getText().isEmpty();

		String expUnitConversionBaseUnit        = excelReader.getCellData(xlSheetName, 395, 7);
		boolean expUnitConversionConversionUnit = true;
		String expUnitConversionXFactor         = excelReader.getCellData(xlSheetName, 396, 7);
		String expUnitConversionAdditionalQty   = excelReader.getCellData(xlSheetName, 397, 7);
		boolean expUnitConversionDescription    = true;
		
		
		excelReader.setCellData(xlfile, xlSheetName, 395, 8, actUnitConversionBaseUnit);
		excelReader.setCellData(xlfile, xlSheetName, 396, 8, actUnitConversionXFactor);
		excelReader.setCellData(xlfile, xlSheetName, 397, 8, actUnitConversionAdditionalQty);
		
		boolean actMethod = actUnitConversionConversionUnit == expUnitConversionConversionUnit && actUnitConversionDescription == expUnitConversionDescription;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 394, 8, actResult.toUpperCase());

		System.out.println("Base Unit Value Actual          : " + actUnitConversionBaseUnit +      " Value Expected : " + expUnitConversionBaseUnit);
		System.out.println("Conversion Unit Value Actual    : " + actUnitConversionConversionUnit+ " Value Expected : " + expUnitConversionConversionUnit);
		System.out.println("X Factor Value Actual           : " + actUnitConversionXFactor +       " Value Expected : " + expUnitConversionXFactor);
		System.out.println("Additional Qty Value Actual     : " + actUnitConversionAdditionalQty + " Value Expected : " + expUnitConversionAdditionalQty);
		System.out.println("Description Value Actual        : " + actUnitConversionDescription +   " Value Expected : " + expUnitConversionDescription);

		if ( actUnitConversionBaseUnit.equalsIgnoreCase(expUnitConversionBaseUnit)
				&& actUnitConversionConversionUnit == expUnitConversionConversionUnit
				&& actUnitConversionXFactor.equalsIgnoreCase(expUnitConversionXFactor)
				&& actUnitConversionAdditionalQty.equalsIgnoreCase(expUnitConversionAdditionalQty)
				&& actUnitConversionDescription == expUnitConversionDescription) 
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 394, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 394, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 394, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
}

 

  // Clear Option
  public static boolean checkClickOnClearButtonToClearOnFirstTheFiledsInUnitsConversion()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************* checkClickOnClearButtonToClearTheFiledsInUnitsConversion Method Executes............  ************************");

	try
	{
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionBaseUnit));
		unitsConversionBaseUnit.click();
		unitsConversionBaseUnit.sendKeys(Keys.END);
		unitsConversionBaseUnit.sendKeys(Keys.SHIFT,Keys.HOME);
		//Thread.sleep(2000);
		unitsConversionBaseUnit.sendKeys("Pcs");
		//Thread.sleep(2000);
		unitsConversionBaseUnit.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
*/		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionClearButton));
		unitsConversionClearButton.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionDescriptionFirstRow));
		boolean actUnitConversionBaseUnit       = unitsConversionBaseUnit.getAttribute("value").isEmpty();
		boolean actUnitConversionConversionUnit = unitsConversionUnit.getText().isEmpty();
		boolean actUnitConversionXFactor        = unitsConversionXFactor.getText().isEmpty();
		boolean actUnitConversionAdditionalQty  = unitsConversionAdditionalQuantity.getText().isEmpty();
		boolean actUnitConversionDescription    = unitsConversionDescriptionFirstRow.getText().isEmpty();

		boolean expUnitConversionBaseUnit       = true;
		boolean expUnitConversionConversionUnit = true;
		boolean expUnitConversionXFactor        = true;
		boolean expUnitConversionAdditionalQty  = true;
		boolean expUnitConversionDescription    = true;
		
		boolean actMethod = actUnitConversionBaseUnit == expUnitConversionBaseUnit && actUnitConversionConversionUnit == expUnitConversionConversionUnit
							&& actUnitConversionConversionUnit == expUnitConversionConversionUnit && actUnitConversionXFactor == expUnitConversionXFactor
							&& actUnitConversionAdditionalQty == expUnitConversionAdditionalQty && actUnitConversionDescription == expUnitConversionDescription
							&& actUnitConversionBaseUnit == expUnitConversionBaseUnit;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 398, 8, actResult.toUpperCase());

		System.out.println("Base Unit Value Actual          : " + actUnitConversionBaseUnit +      " Value Expected : " + expUnitConversionBaseUnit);
		System.out.println("Conversion Unit Value Actual    : " + actUnitConversionConversionUnit+ " Value Expected : " + expUnitConversionConversionUnit);
		System.out.println("X Factor Value Actual           : " + actUnitConversionXFactor +       " Value Expected : " + expUnitConversionXFactor);
		System.out.println("Additional Qty Value Actual     : " + actUnitConversionAdditionalQty + " Value Expected : " + expUnitConversionAdditionalQty);
		System.out.println("Description Value Actual        : " + actUnitConversionDescription +   " Value Expected : " + expUnitConversionDescription);

		if (actMethod==true) 
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 398, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 398, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 398, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
  }

  
  @FindBy(xpath="//*[@id='myTagsTable_UnitName_table_data_body']/tr/td")
  private static List<WebElement> unitNameComboList;
  
  public static boolean checkClickOnSaveWithAllInputsInUnitsConversion() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException   
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************   checkClickOnSaveWithAllInputsInUnitsConversion Method Executes............   ***********************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionBaseUnit));
		unitsConversionBaseUnit.click();
		unitsConversionBaseUnit.sendKeys(Keys.SPACE);

		int baseUnitComboListCount = baseUnitComboList.size();
		
		for(int i=0;i<baseUnitComboListCount;i++)
		{
			String data= baseUnitComboList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 399, 6)))
			{
				baseUnitComboList.get(i).click();
			}
		}
		
		unitsConversionBaseUnit.sendKeys(Keys.TAB);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionProduct));
		unitsConversionProduct.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionLoadFrom));
		unitsConversionLoadFrom.click();
		unitsConversionLoadFrom.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputUnitConversionUnit));
		inputUnitConversionUnit.click();
		inputUnitConversionUnit.sendKeys(Keys.SPACE);

		int unitNameComboListCount = unitNameComboList.size();
		
		for(int i=0;i<unitNameComboListCount;i++)
		{
			String data= unitNameComboList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 400, 6)))
			{
				unitNameComboList.get(i).click();
			}
		}
		
		inputUnitConversionUnit.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputUnitsConversionXFactor));
		inputUnitsConversionXFactor.sendKeys(excelReader.getCellData(xlSheetName, 401, 6));
		inputUnitsConversionXFactor.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionSaveButton));
		unitsConversionSaveButton.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
			
		String actUnitsSaveConversion = validationConfirmationMessage.getText();
		String expUnitsSaveConversion = excelReader.getCellData(xlSheetName, 400, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 400, 8, actUnitsSaveConversion);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		closeValidationConfirmationMessage.click();
		
		System.out.println("Save Conversion          : " + actUnitsSaveConversion           + "  Value Expected : " + expUnitsSaveConversion);
		
		if (actUnitsSaveConversion.equalsIgnoreCase(expUnitsSaveConversion)) 
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 399, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 399, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 399, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	}
 }

  
  
 public static boolean checkUnitConversionSaveInformationAndUpdateButtonWithAllInputs() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("**********************    checkUnitConversionSaveInformationAndUpdateButtonWithAllInputs Method Executes............    *********************************");

	try
	{
		
		System.out.println("**********************    checkUnitConversionSaveInformationAndUpdateButtonWithAllInputs Method Executes1............    *********************************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionBaseUnit));
		unitsConversionBaseUnit.click();
		Thread.sleep(2000);
		unitsConversionBaseUnit.sendKeys(Keys.SPACE);

		int baseUnitComboListCount = baseUnitComboList.size();
		
		for(int i=0;i<baseUnitComboListCount;i++)
		{
			String data= baseUnitComboList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 405, 6)))
			{
				baseUnitComboList.get(i).click();
			}
		}
		
		unitsConversionBaseUnit.sendKeys(Keys.TAB);
		Thread.sleep(2000);		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionDescriptionFirstRow));
		String actUnitConversionBaseUnit       = unitsConversionBaseUnit.getAttribute("value");
		String actUnitConversionConversionUnit = unitsConversionUnit.getText();
		String actUnitConversionXFactor        = unitsConversionXFactor.getText();
		String actUnitConversionAdditionalQty  = unitsConversionAdditionalQuantity.getText();
		String actUnitConversionDescription    = unitsConversionDescriptionFirstRow.getText();

		String expUnitConversionBaseUnit       = excelReader.getCellData(xlSheetName, 406, 7);
		String expUnitConversionConversionUnit = excelReader.getCellData(xlSheetName, 407, 7);
		String expUnitConversionXFactor        = excelReader.getCellData(xlSheetName, 408, 7);
		String expUnitConversionAdditionalQty  = excelReader.getCellData(xlSheetName, 409, 7);
		String expUnitConversionDescription    = excelReader.getCellData(xlSheetName, 410, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 406, 8, actUnitConversionBaseUnit);
		excelReader.setCellData(xlfile, xlSheetName, 407, 8, actUnitConversionConversionUnit);
		excelReader.setCellData(xlfile, xlSheetName, 408, 8, actUnitConversionXFactor);
		excelReader.setCellData(xlfile, xlSheetName, 409, 8, actUnitConversionAdditionalQty);
		excelReader.setCellData(xlfile, xlSheetName, 410, 8, actUnitConversionDescription);
		
	
		System.out.println("Base Unit Value Actual             : " + actUnitConversionBaseUnit +       " Value Expected : " + expUnitConversionBaseUnit);
		System.out.println("Conversion Unit Value Actual       : " + actUnitConversionConversionUnit+  " Value Expected : " + expUnitConversionConversionUnit);
		System.out.println("X Factor Value Actual              : " + actUnitConversionXFactor +        " Value Expected : " + expUnitConversionXFactor);
		System.out.println("Additional Qty Value Actual        : " + actUnitConversionAdditionalQty+   " Value Expected : " + expUnitConversionAdditionalQty);
		System.out.println("Description Value Actual           : " + actUnitConversionDescription+     " Value Expected : " + expUnitConversionDescription);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionProduct));
		unitsConversionProduct.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputUnitConversionUnit));
		inputUnitConversionUnit.click();
		inputUnitConversionUnit.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputUnitsConversionXFactor));
		inputUnitsConversionXFactor.sendKeys(excelReader.getCellData(xlSheetName, 406, 6));	
		inputUnitsConversionXFactor.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
	
		String actUnitConversionDescriptionInput = unitsConversionDescriptionFirstRow.getText();
		String expUnitConversionDescriptionInput = excelReader.getCellData(xlSheetName, 411, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 411, 8, actUnitConversionDescriptionInput);
			
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionSaveButton));
		unitsConversionSaveButton.click();
		
		String actUpdateUnitConversionMessage = validationConfirmationMessage.getText();
		String expUpdateUnitConversionMessage = excelReader.getCellData(xlSheetName, 412, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 412, 8, actUpdateUnitConversionMessage);
		
		System.out.println("Save Message  Value Actual         : " + actUpdateUnitConversionMessage+ "  Value Expected : " + expUpdateUnitConversionMessage);

		if (actUnitConversionBaseUnit.equalsIgnoreCase(expUnitConversionBaseUnit)
				&& actUnitConversionConversionUnit.equalsIgnoreCase(expUnitConversionConversionUnit)
				&& actUnitConversionConversionUnit.equalsIgnoreCase(expUnitConversionConversionUnit)
				&& actUnitConversionXFactor.equalsIgnoreCase(expUnitConversionXFactor)
				&& actUnitConversionAdditionalQty.equalsIgnoreCase(expUnitConversionAdditionalQty)
				&& actUnitConversionDescription.equalsIgnoreCase(expUnitConversionDescription)
				&& actUnitConversionDescriptionInput.equalsIgnoreCase(expUnitConversionDescriptionInput)
				&& actUpdateUnitConversionMessage.equalsIgnoreCase(expUpdateUnitConversionMessage))
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 405, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 405, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 405, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	}
 }

 public static boolean checkUpdatedConversionValueDisplayUserModifyAndSave() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	 excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 System.out.println("************** checkUpdatedConversionValueDisplayUserModifyAndSave Method Executes............   ********************************************");
		
    try                                                        
    {
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionBaseUnit));
		unitsConversionBaseUnit.click();
		unitsConversionBaseUnit.sendKeys(Keys.SPACE);

		int baseUnitComboListCount = baseUnitComboList.size();
		
		for(int i=0;i<baseUnitComboListCount;i++)
		{
			String data= baseUnitComboList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 413, 6)))
			{
				baseUnitComboList.get(i).click();
			}
		}
		
		unitsConversionBaseUnit.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionDescriptionFirstRow));
		String actUnitConversionBaseUnit       = unitsConversionBaseUnit.getAttribute("value");
		String actUnitConversionConversionUnit = unitsConversionUnit.getText();
		String actUnitConversionXFactor        = unitsConversionXFactor.getText();
		String actUnitConversionAdditionalQty  = unitsConversionAdditionalQuantity.getText();
		String actUnitConversionDescription    = unitsConversionDescriptionFirstRow.getText();

		String expUnitConversionBaseUnit       = excelReader.getCellData(xlSheetName, 414, 7);
		String expUnitConversionConversionUnit = excelReader.getCellData(xlSheetName, 415, 7);
		String expUnitConversionXFactor        = excelReader.getCellData(xlSheetName, 416, 7);
		String expUnitConversionAdditionalQty  = excelReader.getCellData(xlSheetName, 417, 7);
		String expUnitConversionDescription    = excelReader.getCellData(xlSheetName, 418, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 414, 8, actUnitConversionBaseUnit);
		excelReader.setCellData(xlfile, xlSheetName, 415, 8, actUnitConversionConversionUnit);
		excelReader.setCellData(xlfile, xlSheetName, 416, 8, actUnitConversionXFactor);
		excelReader.setCellData(xlfile, xlSheetName, 417, 8, actUnitConversionAdditionalQty);
		excelReader.setCellData(xlfile, xlSheetName, 418, 8, actUnitConversionDescription);

		System.out.println("Base Unit Value Actual          : " + actUnitConversionBaseUnit +      " Value Expected : " + expUnitConversionBaseUnit);
		System.out.println("Conversion Unit Value Actual    : " + actUnitConversionConversionUnit+ " Value Expected : " + expUnitConversionConversionUnit);
		System.out.println("X Factor Value Actual           : " + actUnitConversionXFactor +       " Value Expected : " + expUnitConversionXFactor);
		System.out.println("Additional Qty Value Actual     : " + actUnitConversionAdditionalQty + " Value Expected : " + expUnitConversionAdditionalQty);
		System.out.println("Description Value Actual        : " + actUnitConversionDescription +   " Value Expected : " + expUnitConversionDescription);

		if (actUnitConversionBaseUnit.equalsIgnoreCase(expUnitConversionBaseUnit)
				&& actUnitConversionConversionUnit.equalsIgnoreCase(expUnitConversionConversionUnit)
				&& actUnitConversionXFactor.equalsIgnoreCase(expUnitConversionXFactor)
				&& actUnitConversionAdditionalQty.equalsIgnoreCase(expUnitConversionAdditionalQty)
				&& actUnitConversionDescription.equalsIgnoreCase(expUnitConversionDescription))
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 413, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 413, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 413, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
 }

  public static boolean checkClickOnClearButtonToClearTheFiledsInUnitsConversion()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************* checkClickOnClearButtonToClearTheFiledsInUnitsConversion  Method Executes............   *******************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionClearButton));
		unitsConversionClearButton.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionDescriptionFirstRow));
		boolean actUnitConversionBaseUnit       = unitsConversionBaseUnit.getAttribute("value").isEmpty();
		boolean actUnitConversionConversionUnit = unitsConversionUnit.getText().isEmpty();
		boolean actUnitConversionXFactor        = unitsConversionXFactor.getText().isEmpty();
		boolean actUnitConversionAdditionalQty  = unitsConversionAdditionalQuantity.getText().isEmpty();
		boolean actUnitConversionDescription    = unitsConversionDescriptionFirstRow.getText().isEmpty();

		boolean expUnitConversionBaseUnit       = true;
		boolean expUnitConversionConversionUnit = true;
		boolean expUnitConversionXFactor        = true;
		boolean expUnitConversionAdditionalQty  = true;
		boolean expUnitConversionDescription    = true;
		
		boolean actMethod = actUnitConversionBaseUnit == expUnitConversionBaseUnit && actUnitConversionConversionUnit == expUnitConversionConversionUnit
							&& actUnitConversionConversionUnit == expUnitConversionConversionUnit && actUnitConversionXFactor == expUnitConversionXFactor
							&& actUnitConversionAdditionalQty == expUnitConversionAdditionalQty && actUnitConversionDescription == expUnitConversionDescription
							&& actUnitConversionBaseUnit == expUnitConversionBaseUnit;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 419, 8, actResult.toUpperCase());

		System.out.println("Base Unit Value Actual          : " + actUnitConversionBaseUnit +      " Value Expected : " + expUnitConversionBaseUnit);
		System.out.println("Conversion Unit Value Actual    : " + actUnitConversionConversionUnit+ " Value Expected : " + expUnitConversionConversionUnit);
		System.out.println("X Factor Value Actual           : " + actUnitConversionXFactor +       " Value Expected : " + expUnitConversionXFactor);
		System.out.println("Additional Qty Value Actual     : " + actUnitConversionAdditionalQty + " Value Expected : " + expUnitConversionAdditionalQty);
		System.out.println("Description Value Actual        : " + actUnitConversionDescription +   " Value Expected : " + expUnitConversionDescription);

		if (actMethod==true) 
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 419, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 419, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 419, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
  }

  public static boolean checkSaveUnitsConversionOfOtherBaseUnit() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException   
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************   checkClickOnSaveWithAllInputsInUnitsConversion Method Executes............   ***********************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionBaseUnit));
		unitsConversionBaseUnit.click();
		Thread.sleep(2000);
		unitsConversionBaseUnit.sendKeys(Keys.SPACE);

		int baseUnitComboListCount = baseUnitComboList.size();
		
		for(int i=0;i<baseUnitComboListCount;i++)
		{
			String data= baseUnitComboList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 420, 6)))
			{
				baseUnitComboList.get(i).click();
			}
		}
		
		
		
		unitsConversionBaseUnit.sendKeys(Keys.TAB);
		Thread.sleep(2000); 
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionProduct));
		unitsConversionProduct.sendKeys(Keys.TAB);
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionLoadFrom));
		unitsConversionLoadFrom.click();
		unitsConversionLoadFrom.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputUnitConversionUnit));
		inputUnitConversionUnit.click();
		inputUnitConversionUnit.sendKeys(Keys.SPACE);

		int unitNameComboListCount = unitNameComboList.size();
		
		for(int i=0;i<unitNameComboListCount;i++)
		{
			String data= unitNameComboList.get(i).getText();
			if(data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 421, 6)))
			{
				unitNameComboList.get(i).click();
			}
		}
		
		inputUnitConversionUnit.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputUnitsConversionXFactor));
		inputUnitsConversionXFactor.sendKeys(excelReader.getCellData(xlSheetName, 422, 6));
		inputUnitsConversionXFactor.sendKeys(Keys.TAB);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionSaveButton));
		unitsConversionSaveButton.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
			
		String actUnitsSaveConversion = validationConfirmationMessage.getText();
		String expUnitsSaveConversion = excelReader.getCellData(xlSheetName, 421, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 421, 8, actUnitsSaveConversion);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		closeValidationConfirmationMessage.click();
		
		System.out.println("Save Conversion          : " + actUnitsSaveConversion           + "  Value Expected : " + expUnitsSaveConversion);
		
		if (actUnitsSaveConversion.equalsIgnoreCase(expUnitsSaveConversion)) 
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 420, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 420, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 420, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		return false;
	}
 }

  

 // Cancel in Units Conversion

  public static boolean checkClickOnCancelToCloseUnitsConversion() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************************** checkClickOnCancelToCloseUnitsConversion  ********************************************");
   
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsConversionCancelButton));
		unitsConversionCancelButton.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		boolean actLoadDashboard           = labelDashboard.isDisplayed();
		boolean actSelectDashboard         = selectDashboard.isDisplayed();
		boolean actNewDashboard            = newAddDashBoard.isDisplayed();
		boolean actDashboardCustomization  = dashboardCustomizationSettings.isDisplayed();

		boolean expLoadDashboard          = true;
		boolean expSelectDashboard        = true;
		boolean expNewDashboard           = true;
		boolean expDashboardCustomization = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 424, 7);
		
		boolean actMethod = actLoadDashboard == expLoadDashboard && actSelectDashboard == expSelectDashboard
							&& actNewDashboard == expNewDashboard && actDashboardCustomization == expDashboardCustomization;
		
		String actResult = Boolean.toString(actMethod);
		
		excelReader.setCellData(xlfile, xlSheetName, 423, 8, actResult.toUpperCase());
		excelReader.setCellData(xlfile, xlSheetName, 424, 8, actDashboardLabel);

		System.out.println("Load Dashbord Value Actual                          : " + actLoadDashboard+          " Value Expected : " + expLoadDashboard);
		System.out.println("Select Dashbord Value Actual                        : " + actSelectDashboard+        " Value Expected : " + expSelectDashboard);
		System.out.println("New Dashbord Value Actual                           : " + actNewDashboard+           " Value Expected : " + expNewDashboard);
		System.out.println("Dashbord Customization Value Actual                 : " + actDashboardCustomization+ " Value Expected : " + expDashboardCustomization);

		if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel) && actMethod==true)
		{
			System.out.println(" Test Pass: Close Button is working");
			excelReader.setCellData(xlfile, xlSheetName, 423, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Close Button is not working");
			excelReader.setCellData(xlfile, xlSheetName, 423, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		String exception =e.getMessage().substring(0, 100);
		excelReader.setExceptionInExcel(xlfile, xlSheetName, 423, 10, exception);
		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		return false;
	}
  }
  
  

  //ITEMS MATER PAGE STARTS

	@FindBy(xpath = "//i[@class='icon-convert icon-font6']")
	private static WebElement itemUnitConversionBtn;

	@FindBy(xpath = "//span[@id='btnAlternateProduct']")
	private static WebElement itemAlternateProductBtn;

	@FindBy(xpath = "//span[@id='btnRelatedProduct']")
	private static WebElement itembtnRelatedProductBtn;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[12]")
	public static WebElement itemNewCreationName;

	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[12]")
	public static WebElement itemNewCreationNameR2;

	@FindBy(xpath = "//span[@id='btnLedger']")
	private static WebElement itemLedgerBtn;

	@FindBy(xpath = "//a[contains(text(),'Create Tab')]")
	public static WebElement itemNewCreateTab;

	@FindBy(xpath = "//input[@id='ExtraFieldOne']")
	public static WebElement itemExtraFieldOne;

	@FindBy(xpath = "//*[@id='ExtraFieldTwo']")
	public static WebElement itemExtraFieldTwo;

	@FindBy(xpath = "//i[@class='icon-font6 icon-transfer']")
	private static WebElement itemTransferBtn;
	
	@FindBy(xpath = "//*[@id='ulCommonlyUsedRibbon']/li/span")
	private static List<WebElement> itemRibbonControlList;
  
  
 public boolean checkClickOnItemFromItemMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {

	  excelReader = new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	  System.out.println("********************************************** checkClickOnItemFromItemMenu  ********************************************");
	
	  try
	  {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemsMenu));
		itemsMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItemMainMenuItem));
		homeMasterItemMainMenuItem.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		
		String actItemLabel                   = itemLabel.getText();
		boolean actAccountMasterNewBtn        = masterNewBtn.isDisplayed();
		boolean actAccountMasterAddGroupBtn   = masterAddGroupBtn.isDisplayed();
		boolean actAccountMasterEditBtn       = masterEditBtn.isDisplayed();
		boolean actAccountMasterCloneBtn      = masterCloneBtn.isDisplayed();
		boolean actAccountMasterPropertiesBtn = masterPropertiesBtn.isDisplayed();
		boolean actAccountMasterDeleteBtn     = masterDeleteBtn.isDisplayed();
		boolean actAccountMasterCloseBtn      = masterCloseBtn.isDisplayed();
		boolean actAccountMasterExpandBtn     = masterRibbonToExpandOptions.isDisplayed();
	
		String expItemLabel                   = excelReader.getCellData(xlSheetName, 427, 7);
		boolean expAccountMasterNewBtn        = true;
		boolean expAccountMasterAddGroupBtn   = true;
		boolean expAccountMasterEditBtn       = true;
		boolean expAccountMasterCloneBtn      = true;
		boolean expAccountMasterPropertiesBtn = true;
		boolean expAccountMasterDeleteBtn     = true;
		boolean expAccountMasterCloseBtn      = true;
		boolean expAccountMasterExpandBtn     = true;
		
		Set<String> actRibbonControl= new HashSet<String>();
		
		int count = itemRibbonControlList.size();
		
		System.err.println(" Ribbon :   "+count);
		
		for (int i=1;i<count;i++)
		{
			String data=itemRibbonControlList.get(i).getText();
			actRibbonControl.add(data);
		}
		
		String actItemRibbon = actRibbonControl.toString();
		
		String expItemRibbon = excelReader.getCellData(xlSheetName, 428, 7);
		
	
		System.out.println("New Value Actual        : " + actItemLabel                  + "  Value Expected : " + expItemLabel);
		System.out.println("New Value Actual        : " + actAccountMasterNewBtn        + "  Value Expected : " + expAccountMasterNewBtn);
		System.out.println("Add Group Value Actual  : " + actAccountMasterAddGroupBtn   + "  Value Expected : " + expAccountMasterAddGroupBtn);
		System.out.println("Edit Value Actual       : " + actAccountMasterEditBtn       + "  Value Expected : " + expAccountMasterEditBtn);
		System.out.println("Clone Value Actual      : " + actAccountMasterCloneBtn      + "  Value Expected : " + expAccountMasterCloneBtn);
		System.out.println("Properties Value Actual : " + actAccountMasterPropertiesBtn + "  Value Expected : " + expAccountMasterPropertiesBtn);
		System.out.println("Delete Value Actual     : " + actAccountMasterDeleteBtn     + "  Value Expected : " + expAccountMasterDeleteBtn);
		System.out.println("Close Value Actual      : " + actAccountMasterCloseBtn      + "  Value Expected : " + expAccountMasterCloseBtn);
		System.out.println("Expand Value Actual     : " + actAccountMasterExpandBtn     + "  Value Expected : " + expAccountMasterExpandBtn);
		
		System.out.println("ItemRibbon  Acutal   : "+actItemRibbon);
		System.out.println("ItemRibbon  Expected : "+expItemRibbon);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 427, 8, actItemLabel);
		excelReader.setCellData(xlfile, xlSheetName, 428, 8, actItemRibbon);
	
			
		if (actItemLabel.equalsIgnoreCase(expItemLabel) 
				&&  actAccountMasterNewBtn == expAccountMasterNewBtn 
				&& actAccountMasterAddGroupBtn == expAccountMasterAddGroupBtn
				&& actAccountMasterEditBtn == expAccountMasterEditBtn
				&& actAccountMasterCloneBtn == expAccountMasterCloneBtn
				&& actAccountMasterPropertiesBtn == actAccountMasterPropertiesBtn
				&& actAccountMasterDeleteBtn == expAccountMasterDeleteBtn
				&& actAccountMasterCloseBtn == expAccountMasterCloseBtn
				&& actAccountMasterExpandBtn == expAccountMasterExpandBtn
				
				&& actItemRibbon.equalsIgnoreCase(expItemRibbon))
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 426, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 426, 9, resFail);
			return false;
		}
			
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 426, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 
 }
		
	@FindBy(xpath ="//*[@id='ulRibbonControl']/li/span/i/parent::span")
	private static List<WebElement> itemRibbonControlExpandList;
 

 
 public boolean checkToolsOptionsOnClickMasterExpandOptionsInItemMasterPageu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {

	  excelReader = new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	  System.out.println("***************************************************** checkToolsOptionsInItemMenu  *****************************************************************");
	
	  try
	  {
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
		masterRibbonToExpandOptions.click();
	
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));
	
		boolean actAccountMasterGroupBtn              = masterGroupBtn.isDisplayed();
		boolean actAccountMasterDeleteAllBtn          = masterDeleteAllBtn.isDisplayed();
		boolean actAccountMasterCloseAccountBtn       = masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
		boolean actAccountMasterOpenCloseAccountBtn   = masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
		boolean actAccountMasterAdvanceImortExportBtn = masterAdvanceMasterImportORExportBtn.isDisplayed();
		boolean actUnitConversionBtn                  = itemUnitConversionBtn.isDisplayed();
		boolean actAccountMasterAuthorInfoBtn         = masterAuthorInfoBtn.isDisplayed();
		boolean actAccountMasterMoveUpBtn             = masterMoveUpBtn.isDisplayed();
		boolean actAccountMasterMoveDownBtn           = masterMoveDownBtn.isDisplayed();
		boolean actAccountMasterSortBtn               = masterSortBtn.isDisplayed();
		boolean actAccountMasterMassUpdateBtn         = masterMassUpdateBtn.isDisplayed();
		boolean actAccountMasterImportFromXMLBtn      = masterImportFromXmlBtn.isDisplayed();
	
		boolean expAccountMasterGroupBtn              = true;
		boolean expAccountMasterDeleteAllBtn          = true;
		boolean expAccountMasterCloseAccountBtn       = true;
		boolean expAccountMasterOpenCloseAccountBtn   = true;
		boolean expAccountMasterAdvanceImortExportBtn = true;
		boolean expUnitConversionBtn                  = true;
		boolean expAccountMasterAuthorInfoBtn         = true;
		boolean expAccountMasterMoveUpBtn             = true;
		boolean expAccountMasterMoveDownBtn           = true;
		boolean expAccountMasterSortBtn               = true;
		boolean expAccountMasterMassUpdateBtn         = true;
		boolean expAccountMasterImportFromXMLBtn      = true;
			
        ArrayList<String> actRibbonControlExpandList= new ArrayList<String>();
		
		int count = itemRibbonControlExpandList.size();
		
		System.err.println("count   :"+count);
		
		for (int i=0;i<count;i++)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
			masterRibbonControlNextBtn.click();
			
			String data=itemRibbonControlExpandList.get(i).getText();
			actRibbonControlExpandList.add(data);
		}
		
		String actItemRibbonExpand = actRibbonControlExpandList.toString();
		
		String expItemRibbonExpand = excelReader.getCellData(xlSheetName, 430, 7);
		
		
		
		System.out.println("actItemRibbonExpand   : "+actItemRibbonExpand);
		
		System.out.println("expItemRibbonExpand   : "+expItemRibbonExpand);		
		
		System.out.println("Group Value Actual                    : " + actAccountMasterGroupBtn +             "  Value Expected : " + expAccountMasterGroupBtn);
	    System.out.println("Delete All Value Actual               : " + actAccountMasterDeleteAllBtn+          "  Value Expected : " + expAccountMasterDeleteAllBtn);
		System.out.println("Close Value Actual                    : " + actAccountMasterCloseAccountBtn+       "  Value Expected : " + expAccountMasterCloseAccountBtn);
		System.out.println("Advance Import Export Value Actual    : " + actAccountMasterAdvanceImortExportBtn+ "  Value Expected : " + expAccountMasterAdvanceImortExportBtn);
		System.out.println("Unit Conversion Value Actual          : " + actUnitConversionBtn +                 "  Value Expected : " + expUnitConversionBtn);
		System.out.println("Authorize Info Value Actual           : " + actAccountMasterAuthorInfoBtn+         "  Value Expected : " + expAccountMasterAuthorInfoBtn);
		System.out.println("Move Down Value Actual                : " + actAccountMasterMoveDownBtn+           "  Value Expected : " + expAccountMasterMoveDownBtn);
		System.out.println("Move Up Value Acttual                 : " + actAccountMasterMoveUpBtn+             "  Value Expected : " + expAccountMasterMoveUpBtn);
		System.out.println("Sort Value Actual                     : " + actAccountMasterSortBtn +              "  Value Expected : " + expAccountMasterSortBtn);
		System.out.println("Import XML Value Actual               : " + actAccountMasterImportFromXMLBtn+      "  Value Expected : " + expAccountMasterImportFromXMLBtn);

		System.out.println(" Item Ribbon Expand Get Text          : " + actItemRibbonExpand+                   "  Value Expected : " + expItemRibbonExpand);

		excelReader.setCellData(xlfile, xlSheetName, 430, 8, actItemRibbonExpand);
		
		if ( actAccountMasterGroupBtn == expAccountMasterGroupBtn
				&& actAccountMasterDeleteAllBtn == expAccountMasterDeleteAllBtn
				&& actAccountMasterCloseAccountBtn == expAccountMasterCloseAccountBtn
				&& actAccountMasterOpenCloseAccountBtn == expAccountMasterOpenCloseAccountBtn
				&& actAccountMasterAdvanceImortExportBtn == expAccountMasterAdvanceImortExportBtn
				&& actAccountMasterAuthorInfoBtn == expAccountMasterAuthorInfoBtn
				&& actAccountMasterMoveUpBtn == expAccountMasterMoveUpBtn
				&& actAccountMasterMoveDownBtn == expAccountMasterMoveDownBtn
				&& actAccountMasterSortBtn == expAccountMasterSortBtn
				&& actAccountMasterMassUpdateBtn == expAccountMasterMassUpdateBtn
				&& actAccountMasterImportFromXMLBtn == expAccountMasterImportFromXMLBtn
				
				&& actItemRibbonExpand.equalsIgnoreCase(expItemRibbonExpand))
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 429, 9, resPass);
			return true;
		}
		else
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 429, 9, resFail);
			return false;
		}
			
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 429, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 
 }
	
 public boolean checkOtherToolsOptionsOnClickMasterExpandOptionsInItemMasterPageu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {

  excelReader = new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("***************************************************** checkOtherToolsOptionsOnClickMasterExpandOptionsInItemMasterPageu  *****************************************************************");

  try
  {
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
	masterRibbonControlNextBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
	masterRibbonControlNextBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
	masterRibbonControlNextBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
	masterRibbonControlNextBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
	masterRibbonControlNextBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
	masterRibbonControlNextBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
	masterRibbonControlNextBtn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
	masterRibbonControlNextBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
	masterRibbonControlNextBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
	masterRibbonControlNextBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizeMasterBtn));

	boolean actAccountMasterExportFormatToXMLBtn = masterExportFormatToXmlBtn.isDisplayed();
	boolean actAccountMasterCustomizeMasterBtn   = masterCustamizeMasterBtn.isDisplayed();
	boolean actAccountMasterCustomizeViewBtn     = masterCustamizeViewBtn.isDisplayed();
	boolean actAccountMasterCustomizeTreeBtn     = mastercustamizeTreeBtn.isDisplayed();
	boolean actAccountMasterLedgerBtn            = itemLedgerBtn.isDisplayed();
	boolean actAlertnateProductBtn               = itemAlternateProductBtn.isDisplayed();
	boolean actRelatedProduct                    = itembtnRelatedProductBtn.isDisplayed();
	boolean actAccountMasterBudgetBtn            = masterBudgetBtn.isDisplayed();
	boolean actAccountMasterBacktrackBtn         = masterBackTrackBtn.isDisplayed();
	boolean actAccountMasterTransferBtn          = itemTransferBtn.isDisplayed();

	boolean expAccountMasterExportFormatToXMLBtn = true;
	boolean expAccountMasterCustomizeMasterBtn   = true;
	boolean expAccountMasterCustomizeViewBtn     = true;
	boolean expAccountMasterCustomizeTreeBtn     = true;
	boolean expAccountMasterLedgerBtn            = true;
	boolean expAlertnateProductBtn               = true;
	boolean expRelatedProduct                    = true;
	boolean expAccountMasterBudgetBtn            = true;
	boolean expAccountMasterBacktrackBtn         = true;
	boolean expAccountMasterTransferBtn          = true;

	   ArrayList<String> actRibbonControlExpandList= new ArrayList<String>();
		
		int count = itemRibbonControlExpandList.size();
		System.err.println("count   :"+count);
		
		for (int i=0;i<count;i++)
		{
			String data=itemRibbonControlExpandList.get(i).getText();
			actRibbonControlExpandList.add(data);
		}
		
		String actItemRibbonExpand = actRibbonControlExpandList.toString();
		
		String expItemRibbonExpand = excelReader.getCellData(xlSheetName, 432, 7);
		
		
		
		System.out.println("actItemRibbonExpand   : "+actItemRibbonExpand);
		
		System.out.println("expItemRibbonExpand   : "+expItemRibbonExpand);		
	
	
		System.out.println("Export XML Value Actual                     : " + actAccountMasterExportFormatToXMLBtn+ " Value Expected : " + expAccountMasterExportFormatToXMLBtn);
		System.out.println("Customize Master Option Value Actual        : " + actAccountMasterCustomizeMasterBtn+   " Value Expected : " + expAccountMasterCustomizeMasterBtn);
		System.out.println("Customize View Option Value Actual          : " + actAccountMasterCustomizeViewBtn+     " Value Expected : " + expAccountMasterCustomizeViewBtn);
		System.out.println("Customize Tree Option Value Actual          : " + actAccountMasterCustomizeTreeBtn+     " Value Expected : " + expAccountMasterCustomizeTreeBtn);
		System.out.println("Legder Option Value Actual                  : " + actAccountMasterLedgerBtn+            " Value Expected : " + expAccountMasterLedgerBtn);
		System.out.println("Manage Credit Option Value Actual           : " + actAlertnateProductBtn+               " Value Expected : " + expAlertnateProductBtn);
		System.out.println("Department Approriation Option Value Actual : " + actRelatedProduct +                   " Value Expected : " + expRelatedProduct);
		System.out.println("Budget Option Value Actual                  : " + actAccountMasterBudgetBtn+            " Value Expected : " + expAccountMasterBudgetBtn);
		System.out.println("BackTrack Option Value Actual               : " + actAccountMasterBacktrackBtn+         " Value Expected : " + expAccountMasterBacktrackBtn);
		System.out.println("Transfer Option Value Actual                : " + actAccountMasterTransferBtn+          " Value Expected : " + expAccountMasterTransferBtn);
	
		System.out.println(" Item Ribbon Expand Get Text          : " + actItemRibbonExpand+                   "  Value Expected : " + expItemRibbonExpand);

	excelReader.setCellData(xlfile, xlSheetName, 432, 8, actItemRibbonExpand);
	
	
	if(actAccountMasterCustomizeMasterBtn == expAccountMasterCustomizeMasterBtn
			&& actAccountMasterCustomizeViewBtn == expAccountMasterCustomizeViewBtn
			&& actAccountMasterCustomizeTreeBtn == expAccountMasterCustomizeTreeBtn
			&& actAccountMasterLedgerBtn == expAccountMasterLedgerBtn
			&& actAlertnateProductBtn == expAlertnateProductBtn && actRelatedProduct == expRelatedProduct
			&& actAccountMasterBudgetBtn == expAccountMasterBudgetBtn
			&& actAccountMasterBacktrackBtn == expAccountMasterBacktrackBtn
			&& actAccountMasterTransferBtn == expAccountMasterTransferBtn)
	{
		
		excelReader.setCellData(xlfile, xlSheetName, 431, 9, resPass);
		return true;
	}
	else
	{
		
		excelReader.setCellData(xlfile, xlSheetName, 431, 9, resPass);
		return false;
	}
  }
  catch (Exception e) 
  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 431, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
  }
 }
		
		
		
  public static boolean checkTreeViewOptionsAvailableInItemMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	  excelReader = new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("***********  checkTreeViewOptionsAvailableInItemMastersPage Method Executes............ ********************");

	 try
	 {
		 
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));
		boolean actAccountMasterTreeIdDropdownIsDisplay        = masterTreeIdDropdown.isDisplayed();
		
		Select MasterId=new Select(masterTreeIdDropdown);
		String actAccountMasterTreeIdDropdownGetText           = MasterId.getFirstSelectedOption().getText();
		
		boolean actAccountMasterTreeIDToggleBtnIsDisplay       = masterTreeIDToggleBtn.isDisplayed();
		boolean actAccountMasterTreeViewIDDropdownIsDisplay    = masterTreeViewIDDropdown.isDisplayed();
		
		Select MasterTreeViewId=new Select(masterTreeViewIDDropdown);
		String actAccountMasterTreeViewIDDropdownGetText          = MasterTreeViewId.getFirstSelectedOption().getText();
		
		boolean actAccountMasterTreeViewIDToggleBtnIsDisplay   = masterTreeViewIDToggleBtn.isDisplayed();
		boolean actAccountMasterHideAccountsGroupTreeIsDisplay = masterOptionToHideAccountsGroupTree.isDisplayed();

		boolean expAccountMasterTreeIdDropdownIsDisplay        = true;
		String expAccountMasterTreeIdDropdownGetText           = excelReader.getCellData(xlSheetName, 434, 7);
		                                                        
		boolean expAccountMasterTreeIDToggleBtnIsDisplay       = true;
		boolean expAccountMasterTreeViewIDDropdownIsDisplay    = true;
		String expAccountMasterTreeViewIDDropdownGetText       = excelReader.getCellData(xlSheetName, 435, 7);
		
		boolean expAccountMasterTreeViewIDToggleBtnIsDisplay   = true;
		boolean expAccountMasterHideAccountsGroupTreeIsDisplay = true;
		

		System.out.println("Tree ID Dropdown Option Value Actual      : " +actAccountMasterTreeIdDropdownIsDisplay+        " Value Expected : " + expAccountMasterTreeIdDropdownIsDisplay);
		System.out.println("Tree ID Dropdown Option Value Actual      : " +actAccountMasterTreeIdDropdownGetText+         " Value Expected : " + expAccountMasterTreeIdDropdownGetText);
		
		System.out.println("Tree ID Toggle Option Value Actual        : " +actAccountMasterTreeIDToggleBtnIsDisplay+        " Value Expected : " + expAccountMasterTreeIDToggleBtnIsDisplay);
	
		
		System.out.println("Tree View ID Option Value Actual          : " +actAccountMasterTreeViewIDDropdownIsDisplay+     " Value Expected : " + expAccountMasterTreeViewIDDropdownIsDisplay);
		System.out.println("Tree View ID Option Value Actual          : " +actAccountMasterTreeViewIDDropdownGetText+     " Value Expected : " + expAccountMasterTreeViewIDDropdownGetText);
		
		System.out.println("Tree View ID Toggle Value Actual          : " +actAccountMasterTreeViewIDToggleBtnIsDisplay +   " Value Expected : " + expAccountMasterTreeViewIDToggleBtnIsDisplay);
		
		
		System.out.println("Hide Accounts Group Tree Value Actual     : " +actAccountMasterHideAccountsGroupTreeIsDisplay+  " Value Expected : " + expAccountMasterHideAccountsGroupTreeIsDisplay);
		
        excelReader.setCellData(xlfile, xlSheetName, 434, 8, actAccountMasterTreeIdDropdownGetText);
		
		excelReader.setCellData(xlfile, xlSheetName, 435, 8, actAccountMasterTreeViewIDDropdownGetText);
		
		
		if ( actAccountMasterTreeIdDropdownIsDisplay == expAccountMasterTreeIdDropdownIsDisplay
				&& actAccountMasterTreeIDToggleBtnIsDisplay == expAccountMasterTreeIDToggleBtnIsDisplay
				&& actAccountMasterTreeViewIDDropdownIsDisplay == expAccountMasterTreeViewIDDropdownIsDisplay
				&& actAccountMasterTreeViewIDToggleBtnIsDisplay == expAccountMasterTreeViewIDToggleBtnIsDisplay
				&& actAccountMasterHideAccountsGroupTreeIsDisplay == expAccountMasterHideAccountsGroupTreeIsDisplay && 
				
				actAccountMasterTreeIdDropdownGetText.equalsIgnoreCase(expAccountMasterTreeIdDropdownGetText) && 
				 
				actAccountMasterTreeViewIDDropdownGetText.equalsIgnoreCase(expAccountMasterTreeViewIDDropdownGetText))
				 
				
		{
			excelReader.setCellData(xlfile, xlSheetName, 433, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 433, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 433, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	
  public static boolean checkDisplayOfGroupAvailableTreeStructureLeftPaneInItemMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("**************************  checkDisplayOfGroupAvailableInAccountMastersPage Method Executes............  *******************************");
     
 	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));

 		boolean actUnitsMasterRoot                = accountRootAccount.isDisplayed();
 		boolean expUnitsMasterRoot                = true;
 		
 		String actUnitRootName=accountRootAccount.getText();
 		String expUnitRootName=excelReader.getCellData(xlSheetName, 436, 7);
 		
 		System.out.println("UnitRootName   " +actUnitRootName+" Value Expected  : "+expUnitRootName);
 		System.out.println("Open Units Master Unit Root Is Display Value Actual  : " +actUnitsMasterRoot+ " Value Expected : " +expUnitsMasterRoot);
 		System.out.println("Root Units Text Display Value Actual          : " +actUnitRootName+            " Value Expected : " +expUnitRootName);
 			
 		excelReader.setCellData(xlfile, xlSheetName, 436, 8, actUnitRootName);
 		
 		if (actUnitsMasterRoot == expUnitsMasterRoot
 				&& actUnitRootName.equalsIgnoreCase(expUnitRootName))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 436, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 436, 9, resFail);
 			return false;
 		}
 	  }
 	  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 436, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
   }

  
  
  @FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li")
  private static List<WebElement> mastertreeIdList;
  

  public static boolean checkCreateTreeToggleOptionsAvailableInItemMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 	 
 	 System.out.println("********************* checkCreateTreeToggleOptionsAvailableInAccountMastersPage Method Executes............ *******************************");
     
 	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggleBtn)); 
 		masterTreeIDToggleBtn.click();
 		
 		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage  = true;

 	    System.out.println("Click on Create Tree Toggle Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 		
 	   ArrayList<String> actMasterIDListList= new ArrayList<String>();
		
		int count = mastertreeIdList.size();
		System.err.println("count   :"+count);
		
		for (int i=0;i<count;i++)
		{
			String data=mastertreeIdList.get(i).getText();
			actMasterIDListList.add(data);
		}
		
		String actMasterIDExpand = actMasterIDListList.toString();
		String expMasterIDExpand = excelReader.getCellData(xlSheetName, 437, 7);
		
		System.out.println("actMasterIDExpand   : "+actMasterIDExpand);
		System.out.println("expMasterIDExpand   : "+expMasterIDExpand);	
 	    
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggle_setDefaultBtn));

 		boolean actAccountMasterTreeCreateTreeBtn = masterTreeIDToggle_CreateTreeBtn.isDisplayed();
 		boolean actAccountMasterTreeEditBtn       = masterTreeIDToggle_EditBtn.isDisplayed();
 		boolean actAccountMasterTreeDeleteBtn     = masterTreeIDToggle_DeleteBtn.isDisplayed();
 		boolean actAccountMasterTreeSetDefaultBtn = masterTreeIDToggle_setDefaultBtn.isDisplayed();

 		boolean expAccountMasterTreeCreateTreeBtn = true;
 		boolean expAccountMasterTreeEditBtn       = true;
 		boolean expAccountMasterTreeDeleteBtn     = true;
 		boolean expAccountMasterTreeSetDefaultBtn = true;

 		System.out.println("Tree ID Dropdown Option Value Actual  : " + actAccountMasterTreeCreateTreeBtn+ " Value Expected : " + expAccountMasterTreeCreateTreeBtn);
 		System.out.println("Tree ID Toggle Option Value Actual    : " + actAccountMasterTreeEditBtn+       " Value Expected : " + expAccountMasterTreeEditBtn);
 		System.out.println("Tree View ID Option Value Actual      : " + actAccountMasterTreeDeleteBtn+     " Value Expected : " + expAccountMasterTreeDeleteBtn);
 		System.out.println("Tree View ID Toggle Value Actual      : " + actAccountMasterTreeSetDefaultBtn+ " Value Expected : " + expAccountMasterTreeDeleteBtn);
 		
 		
 		System.out.println("Master Item Tree ID       : " + actMasterIDExpand+ " Value Expected : " + expMasterIDExpand);
 		 
 		excelReader.setCellData(xlfile, xlSheetName, 437, 8, actMasterIDExpand);
 		
 		if (actSummaryErrorMessage==actSummaryErrorMessage
 				&& actAccountMasterTreeCreateTreeBtn == expAccountMasterTreeCreateTreeBtn
 				&& actAccountMasterTreeEditBtn == expAccountMasterTreeEditBtn
 				&& actAccountMasterTreeDeleteBtn == expAccountMasterTreeDeleteBtn
 				&& actAccountMasterTreeSetDefaultBtn==expAccountMasterTreeSetDefaultBtn && actMasterIDExpand.equalsIgnoreCase(expMasterIDExpand))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 437, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 437, 9, resFail);
 			return false;
 		}
 	  }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 437, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 	
  @FindBy(xpath="//*[@id='spnhiererchy']/div/div[2]/div/div/ul/li")
  private static List<WebElement> mastertreeViewIdList;
  

  
  
  public static boolean checkCreateViewToggleOptionsAvailableInItemMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("********************** checkCreateViewToggleOptionsAvailableInUnitsMastersPage Method Executes............***********************************");

 	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIDToggleBtn));
 		masterTreeViewIDToggleBtn.click();

  	   ArrayList<String> actMasterViewIDListList= new ArrayList<String>();
		
 		int count = mastertreeViewIdList.size();
 		System.err.println("count   :"+count);
 		
 		for (int i=0;i<count;i++)
 		{
 			String data=mastertreeViewIdList.get(i).getText();
 			actMasterViewIDListList.add(data);
 		}
 		
 		String actMasterViewIDExpand = actMasterViewIDListList.toString();
 		String expMasterViewIDExpand = excelReader.getCellData(xlSheetName, 438, 7);
 		
 		System.out.println("actMasterViewIDExpand   : "+actMasterViewIDExpand);
 		System.out.println("expMasterViewIDExpand   : "+expMasterViewIDExpand);	
 		
 		
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIdCreateViewBtn));

 		boolean actAccountMasterTreeViewCreateViewBtn = masterTreeViewIdCreateViewBtn.isDisplayed();
 		boolean actAccountMasterTreeViewEditViewBtn   = masterTreeeViewIdEditBtn.isDisplayed();
 		boolean actAccountMasterTreeViewDeleteBtn     = masterTreeViewIdDeleteBtn.isDisplayed();

 		boolean expAccountMasterTreeViewCreateViewBtn = true;
 		boolean expAccountMasterTreeViewEditViewBtn   = true;
 		boolean expAccountMasterTreeViewDeleteBtn     = true;

 		System.out.println("Tree View Create View Option Value Actual : " + actAccountMasterTreeViewCreateViewBtn+ " Value Expected : " + expAccountMasterTreeViewCreateViewBtn);
 		System.out.println("Tree View Edit View Option Value Actual   : " + actAccountMasterTreeViewEditViewBtn+   " Value Expected : " + expAccountMasterTreeViewEditViewBtn);
 		System.out.println("Tree View Delete View Option Value Actual : " + actAccountMasterTreeViewDeleteBtn+     " Value Expected : " + expAccountMasterTreeViewDeleteBtn);

 		excelReader.setCellData(xlfile, xlSheetName, 438, 8, actMasterViewIDExpand);
 		
 		if (actAccountMasterTreeViewCreateViewBtn == expAccountMasterTreeViewCreateViewBtn
 				&& actAccountMasterTreeViewEditViewBtn == expAccountMasterTreeViewEditViewBtn
 				&& actAccountMasterTreeViewDeleteBtn == expAccountMasterTreeViewDeleteBtn && 
 				
 				actMasterViewIDExpand.equalsIgnoreCase(expMasterViewIDExpand))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 438, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 438, 9, resPass);
 			return false;
 		}
 	  }
 	  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 438, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 	
 	
  public static boolean checkHideUnitGroupOptionsAvailableInItemMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("********************* checkHideUnitGroupOptionsAvailableInUnitMastersPage Method Executes............*************************");

 	 try
 	 {
 	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
 	   masterOptionToHideAccountsGroupTree.click();
 	   
 	   boolean actSummaryErrorMessage    = checkErrorMessageIsDisplayingOrNotDisplaying();
 	   boolean expSummaryErrorMessage    = true;

 	   System.out.println("Click on Hide Units Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);  

 	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeUnitsDisplay));

 	   boolean actAccountMasterTreeUnits = treeUnitsDisplay.isDisplayed();
 	   boolean expAccountMasterTreeUnits = true;
 		
 	   System.out.println("Tree View Create View Option Value Actual : " + actAccountMasterTreeUnits+ " Value Expected : " + expAccountMasterTreeUnits);

 	   boolean actTestResult=actSummaryErrorMessage==actSummaryErrorMessage 
 			                  && actSummaryErrorMessage == expAccountMasterTreeUnits && masterOptionToHideAccountsGroupTree.isDisplayed()==true;
 	   
 	   String actValue = Boolean.toString(actTestResult);
 	   String expValue = excelReader.getCellData(xlSheetName, 439, 7);
 	   
 	   System.err.println(" Actual; Value : "+actValue +"  Value Expected : "+expValue);
 	  
 	   
 	  excelReader.setCellData(xlfile, xlSheetName, 439, 8, actValue.toUpperCase());
 	  
 	   if (actValue.equalsIgnoreCase(expValue))
 	   {
 		    excelReader.setCellData(xlfile, xlSheetName, 439, 9, resPass);
 			return true;
 	   } 
 	   else 
 	   {
 		  excelReader.setCellData(xlfile, xlSheetName, 439, 9, resFail);
 			return false;
 	   }
 	 }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 439, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 	
 	
  public static boolean checkUnHideUnitsGroupOptionsAvailableInItemMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("********************** checkUnHideUnitsGroupOptionsAvailableInItemMastersPage Method Executes............ ******************************");
    
 	 try
 	 {
 		  
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
	    masterOptionToHideAccountsGroupTree.click();
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));
	    
		boolean actUnitsMasterRoot                = accountRootAccount.isDisplayed();
		
		boolean expUnitsMasterRoot                = true;
		
		String actUnitRootName=accountRootAccount.getText();
		
		String expUnitRootName=excelReader.getCellData(xlSheetName, 440, 7);	

		
		
		System.out.println("Open Units Master Unit Root Is Display Value Actual  : " + actUnitsMasterRoot+ " Value Expected : " + expUnitsMasterRoot);
		System.out.println("Root Units Text Display Value Actual          : " + actUnitRootName+            " Value Expected : " + expUnitRootName);
			
		excelReader.setCellData(xlfile, xlSheetName, 440, 8, actUnitRootName);
		
		if (actUnitsMasterRoot == expUnitsMasterRoot
				&& actUnitRootName.equalsIgnoreCase(expUnitRootName))
		{
			 excelReader.setCellData(xlfile, xlSheetName, 440, 9, resPass);
			 return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 440, 9, resFail);
			return false;
		}
	  }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 440, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	   
 	 }
 	
 	
  @FindBy(xpath="//*[@id='divSearchControls']/div//div/a")
  private static List<WebElement> masterItemSearchControlList;
  

  
  public static boolean checkHeaderFieldsOptionsAvailableInItemMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("********************** checkHeaderFieldsOptionsAvailableInItemMastersPage Method Executes............ **********************************");

 	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));

 		
 		String actAccountMasterSearchGetText               = masterSearchTxt.getAttribute("placeholder");
 		
 		String expAccountMasterSearchGetText               = excelReader.getCellData(xlSheetName, 441, 7);
 		
 		boolean actAccountMasterSearchBtn                  = masterSearchBtn.isDisplayed();
 		boolean actAccountMasterCmbMasterTxt               = mastercmbMasterTxt.isDisplayed();
 		boolean actAccountMasterCmbMasterExpansionBtn      = masterCmbMasterExpansionBtn.isDisplayed();
 		boolean actAccountMasterCmbMasterSettingsBtn       = masterCumMasterSettingBtn.isDisplayed();
 		boolean actAccountMasterRetainSelectionCheckbox    = masterRetainSelectionCheckBox.isDisplayed();
 		boolean actAccountMasterSideBarBtn                 = masterSideBarBtn.isDisplayed();
 		
 		ArrayList<String> actmasterItemSearchControlList= new ArrayList<String>();
 		
  		int count = masterItemSearchControlList.size();
  		System.err.println("count   :"+count);
  		
  		for (int i=0;i<count;i++)
  		{
  			String data=masterItemSearchControlList.get(i).getAttribute("title");
  			actmasterItemSearchControlList.add(data);
  		}
  		
  		String actControlList = actmasterItemSearchControlList.toString();
  		String expControlList = excelReader.getCellData(xlSheetName, 442, 7);
  		
  		System.out.println("actControlList   : "+actControlList);
  		System.out.println("expControlList   : "+expControlList);

 		
 		boolean expAccountMasterSearchBtn                  = true;
 		boolean expAccountMasterCmbMasterTxt               = true;
 		boolean expAccountMasterCmbMasterExpansionBtn      = true;
 		boolean expAccountMasterCmbMasterSettingsBtn       = true;
 		boolean expAccountMasterRetainSelectionCheckbox    = true;
 		boolean expAccountMasterSideBarBtn                 = true;

 		
 		System.out.println("Search Button Value Actual           : "+ actAccountMasterSearchBtn+                  " Value Expected : " + expAccountMasterSearchBtn);
 		System.out.println("Comb Box Value Actual                : "+ actAccountMasterCmbMasterTxt+               " Value Expected : " + expAccountMasterCmbMasterTxt);
 		System.out.println("Combo Box Expansion Value Actual     : "+ actAccountMasterCmbMasterExpansionBtn+      " Value Expected : " + expAccountMasterCmbMasterExpansionBtn);
 		System.out.println("Combo Box Settings Value Actual      : "+ actAccountMasterCmbMasterSettingsBtn+       " Value Expected : " + expAccountMasterCmbMasterSettingsBtn);
 		System.out.println("Selection Check Box Value Actual     : "+ actAccountMasterRetainSelectionCheckbox+    " Value Expected : " + expAccountMasterRetainSelectionCheckbox);
 		System.out.println("Side Bar Value Actual                : "+ actAccountMasterSideBarBtn+                 " Value Expected : " + expAccountMasterSideBarBtn);
 		
 		System.out.println("AccountMasterSearchGetText          : "+actAccountMasterSearchGetText +"  Value Expected  : "+expAccountMasterSearchGetText);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 441, 8, actAccountMasterSearchGetText);
 		excelReader.setCellData(xlfile, xlSheetName, 442, 8, actControlList);
 		
 		
 		boolean actTestResult= actAccountMasterSearchBtn == expAccountMasterSearchBtn
				 				&& actAccountMasterCmbMasterTxt == expAccountMasterCmbMasterTxt
				 				&& actAccountMasterCmbMasterExpansionBtn == expAccountMasterCmbMasterExpansionBtn
				 				&& actAccountMasterCmbMasterSettingsBtn == expAccountMasterCmbMasterSettingsBtn
		 						&& actAccountMasterRetainSelectionCheckbox == expAccountMasterRetainSelectionCheckbox
		 		 				&& actAccountMasterSideBarBtn == expAccountMasterSideBarBtn;
 		
 		String actDispalyResult=Boolean.toString(actTestResult);
 		String expDispalyResult=excelReader.getCellData(xlSheetName, 443, 7);	
 		
 		System.err.println("DispalyResult  "+actDispalyResult +" Value Expected : "+expDispalyResult);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 443, 8, actDispalyResult);
 		
 		
 		if(actDispalyResult.equalsIgnoreCase(expDispalyResult) && actControlList.equalsIgnoreCase(expControlList) 
 				&& actAccountMasterSearchGetText.equalsIgnoreCase(expAccountMasterSearchGetText)) 
 		
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 441, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 441, 9, resFail);
 			return false;
 		}
 	 }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 441, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 	
 	


	
@FindBy(xpath="//*[@id='btnSearchAcc']/ol/li")
private static List<WebElement> masterSearchList;  
  
  
  public static boolean checkSearchOptionAvailableInItemMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("*************************** checkSearchOptionAvailableInItemMastersPage Method Executes............ ********************************");

 	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchBtn));
 		masterSearchBtn.click();

 		boolean actSummaryErrorMessage                      = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage                      = true;

 		System.out.println("Click on Search Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 		
        ArrayList<String> actmasterSearchList= new ArrayList<String>();
 		
  		int count = masterSearchList.size();
  		System.err.println("count   :"+count);
  		
  		for (int i=0;i<count;i++)
  		{
  			String data=masterSearchList.get(i).getText();
  			actmasterSearchList.add(data);
  		}
  		
  		String actSearchList = actmasterSearchList.toString();
  		String expSearchList = excelReader.getCellData(xlSheetName, 444, 7);
  		
  		System.out.println("actSearchList   : "+actSearchList);
  		System.out.println("expSearchList   : "+expSearchList);
 		
  		excelReader.setCellData(xlfile, xlSheetName, 444, 8, actSearchList);
  		
 		if (actSearchList.equalsIgnoreCase(expSearchList) && actSummaryErrorMessage==expSummaryErrorMessage)
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 444, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 444, 9, resFail);
 			return false;
 		}
 	 }
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 444, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 	

	@FindBy(xpath = "//*[@id='landgridData']/thead/tr/th[2]")
	public static WebElement masterItemGridHeader_SelectAll;

	@FindBy(xpath = "//*[@id='landgridData']/thead/tr/th[3]")
	public static WebElement masterItemGridHeader_MasterId;

	@FindBy(xpath = "//*[@id='landgridData']/thead/tr/th[4]")
	public static WebElement masterItemGridHeader_Name;
	
	@FindBy(xpath = "//*[@id='landgridData']/thead/tr/th[5]")
	public static WebElement masterItemGridHeader_Code;
	
	@FindBy(xpath ="//*[@id='landgridData']/thead/tr/th")
	public static List<WebElement> masterItemHeaderList;
	
	
	
  public static boolean checkItemDisplayTableColumnNamesAvailableInItemMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  		 
 	 System.out.println("************************* checkItemDisplayTableColumnNamesAvailableInItemMastersPage Method Executes............ *************************");
 		
 	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGrid_Header_SelectTxt));
 		boolean actAccountMasterGridSelectTxt = masterGrid_Header_SelectTxt.isDisplayed();
 		masterGrid_Header_SelectTxt.click();

 		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage  = true;

 		System.out.println("Click on Master Grid Header Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 		
 		
 		ArrayList<String> actmasterItemHeaderList=new ArrayList<String>();
 		
 		int HeaderCount =masterItemHeaderList.size();
 		
 		System.err.println("HeaderCount   :  "+HeaderCount);
 		
 		for (int i = 0; i < HeaderCount; i++) 
 		{
			String data=masterItemHeaderList.get(i).getText();
			actmasterItemHeaderList.add(data);
		}
 		
 	
 		String actMasterItemHeaderTextList=actmasterItemHeaderList.toString();
 		String expMasterItemHeaderTextList=excelReader.getCellData(xlSheetName, 445, 7);
 		
 		System.out.println("actMasterItemHeaderTextList"+actMasterItemHeaderTextList);
 		System.out.println("expMasterItemHeaderTextList"+expMasterItemHeaderTextList);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 445, 8, actMasterItemHeaderTextList);
 		
 		if (actSummaryErrorMessage==expSummaryErrorMessage && actMasterItemHeaderTextList.equalsIgnoreCase(expMasterItemHeaderTextList))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 445, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 445, 9, resFail);
 			return false;
 		}
 	 }
 	 catch (Exception e) 
 	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 445, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 	

	@FindBy(xpath ="//*[@id='LandingGridBody']/tr/td[12]")
	public static List<WebElement> masterItemNameList;

	@FindBy(xpath ="//*[@id='LandingGridBody']/tr/td[13]")
	public static List<WebElement> masterItemCodeList;
  

	
	@FindBy(xpath ="//*[@id='LandingGridBody']/tr/td[10]")
	public static List<WebElement> masterDepNameList;
	
	@FindBy(xpath ="//*[@id='LandingGridBody']/tr/td[11]")
	public static List<WebElement> masterDepCodeList;

	
	
	
  
  public static boolean checkItemDisplayTableColumnValuesAvailableInItemMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
    excelReader=new ExcelReader(POJOUtility.getExcelPath());
    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  		 
    System.out.println("********************** checkItemDisplayTableColumnValuesAvailableInItemMastersPage Method Executes............ **************************");
 	
    try
    {
       String actmasterGridBodyList=clickOnEmptyGroup.getText();
  	   	
   	   String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 341, 7);
   	   	
   	   excelReader.setCellData(xlfile, xlSheetName, 341, 8, actmasterGridBodyList);
   	   	
   	   System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
   	   System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);
   	   	
   	   if(actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList))
	   {
	    		excelReader.setCellData(xlfile, xlSheetName, 446, 9, resPass);
	 		return true;
	   } 
	   else 
	   {
	 		excelReader.setCellData(xlfile, xlSheetName, 446, 9, resFail);
	 		return false;
	   }
    }
    catch (Exception e) 
	{
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 446, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  return false;
    }
  }
   
   	
	

	@FindBy(xpath ="//*[@id='GenerateNewMasterModel']/div/div[2]/div[1]/ul/li")
	public static List<WebElement> itemNewHeaderTabList;
  
 public boolean checkNewButtonOnClickToDisplayItemCreationPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
   excelReader=new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 	 
   System.out.println("***************************** checkClickOnNewButtonToDisplayItemCreationPageInTheItemMasterPage  ********************************************");
	
   try
   {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewBtn));
		itemNewBtn.click();
		

        ArrayList<String> actitemNewHeaderTabList=new ArrayList<String>();
 		
 		int NewTabList =itemNewHeaderTabList.size();
 		
 		System.err.println("NewTabList   :  "+NewTabList);
 		
 		for (int i = 0; i < NewTabList; i++) 
 		{
			String data=itemNewHeaderTabList.get(i).getText();
			actitemNewHeaderTabList.add(data);
		}
 		
 	
 		String actMasterItemNewTabList=actitemNewHeaderTabList.toString();
 		String expMasterItemNewTabList=excelReader.getCellData(xlSheetName, 450, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 450, 8, actMasterItemNewTabList);
    	
    	System.err.println("  Actual MasterItemNewTabList : "+actMasterItemNewTabList);
    	System.err.println("  Expected  MasterItemNewTabList : "+expMasterItemNewTabList);
		
		
		if(actMasterItemNewTabList.equalsIgnoreCase(expMasterItemNewTabList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 449, 9, resPass);
			return true;
		}
	    else 
	    {
	    	excelReader.setCellData(xlfile, xlSheetName, 449, 9, resFail);
			return false;
		}
   }
   catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 449, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }	
  }
	     
	     

 

	@FindBy(xpath ="//*[@id='newMasterDiv0']/div/div/div[2]/parent::div/div[1]")
	public static List<WebElement> itemNewBodyFieldsList;
	     
 public boolean checkGeneralTabInItemMasterCreationPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	 
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("******************************** checkGeneralTabInItemMasterCreationPage  *******************************************************");
	
	try
	{
		
        ArrayList<String> actitemNewBodyFieldsList=new ArrayList<String>();
 		
 		int BodyFielddList =itemNewBodyFieldsList.size();
 		
 		System.err.println("BodyFielddList   :  "+BodyFielddList);
 		
 		for (int i = 0; i < BodyFielddList; i++) 
 		{
			String data=itemNewBodyFieldsList.get(i).getText();
			actitemNewBodyFieldsList.add(data);
		}
 		
 	
 		String actMasterItemNewFieldList=actitemNewBodyFieldsList.toString();
 		String expMasterItemNewFieldList=excelReader.getCellData(xlSheetName, 452, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 452, 8, actMasterItemNewFieldList);
    	
    	System.err.println("  Actual MasterItemNewFieldList : "+actMasterItemNewFieldList);
    	System.err.println("  Expected  MasterItemNewTabList : "+expMasterItemNewFieldList);
		
		
		if(actMasterItemNewFieldList.equalsIgnoreCase(expMasterItemNewFieldList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 451, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 451, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 451, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }	
 }

 
 @FindBy(xpath ="//*[@id='newMasterDiv1']/div/div/div/label")
 public static List<WebElement> itemNewUnitBodyFieldsList;
 
 
  public boolean checkUnitsTabInItemMasterCreationPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
    	 
	 System.out.println("****************************************************** checkUnitsTabInItemMasterCreationPage  **********************************************************");
	 
	 try
	 {
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
		ItemNewUnitsBtn.click();
	
		Thread.sleep(2000);
		
		ArrayList<String> actitemNewUnitBodyFieldsList=new ArrayList<String>();
	 		
 		int BodyFielddList =itemNewUnitBodyFieldsList.size();
	 		
	 	System.err.println("BodyFielddList   :  "+BodyFielddList);
	 		
	 	for (int i = 1; i < BodyFielddList; i++) 
	 	{
			String data=itemNewUnitBodyFieldsList.get(i).getText();
			actitemNewUnitBodyFieldsList.add(data);
		}
	 		
	 	
	 	String actMasterItemNewUnitFieldList=actitemNewUnitBodyFieldsList.toString();
	 	String expMasterItemNewUnitFieldList=excelReader.getCellData(xlSheetName, 454, 7);
	 		
	 	excelReader.setCellData(xlfile, xlSheetName, 454, 8, actMasterItemNewUnitFieldList);
	    	
	    System.err.println("  Actual MasterItemNewFieldList : "+actMasterItemNewUnitFieldList);
	    System.err.println("  Expected  MasterItemNewTabList : "+expMasterItemNewUnitFieldList);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitSettingsBtn));
		boolean actUnitsBaseUnit              = itemUnitsDefaultBaseUnitDropdown.isDisplayed();
		boolean actUnitBaseUnitSettings       = itemUnitsDefaultBaseUnitSetting.isDisplayed();
		boolean actUnitSalesUnit              = itemUnitsDefaultSalesUnitDropdown.isDisplayed();
		boolean actUnitSalesUnitSettings      = itemUnitsDefaultSalesUnitSettingsBtn.isDisplayed();
		boolean actUnitsPurchase              = itemUnitsDefaultPurchaseUnitDropDown.isDisplayed();
		boolean actUnitsPurchaseSettings      = itemUnitsDefaultPurchaseUnitSettingsBtn.isDisplayed();
		boolean actUnitsLength                = itemUnitsLength.isDisplayed();
		boolean actUnitsWidth                 = itemUnitswidth.isDisplayed();
		boolean actUnitHeight                 = itemUnitsHeight.isDisplayed();
		boolean actUnitsWeight                = itemUnitsWeight.isDisplayed();

		boolean expUnitsBaseUnit              = true;
		boolean expUnitBaseUnitSettings       = true;
		boolean expUnitSalesUnit              = true;
		boolean expUnitSalesUnitSettings      = true;
		boolean expUnitsPurchase              = true;
		boolean expUnitsPurchaseSettings      = true;
		boolean expUnitsLength                = true;
		boolean expUnitsWidth                 = true;
		boolean expUnitHeight                 = true;
		boolean expUnitsWeight                = true;
		
		System.out.println("Base Unit Value Actual              :  " + actUnitsBaseUnit +         " Value Expected :  " + expUnitsBaseUnit);
		System.out.println("Base Unit Settings Value Actual     :  " + actUnitBaseUnitSettings +  " Value Expected :  " + expUnitBaseUnitSettings);
		System.out.println("Sale Unit Value Actual              :  " + actUnitSalesUnit +         " Value Expected :  " + expUnitSalesUnit);
		System.out.println("Sale Unit Settings Value Actual     :  " + actUnitSalesUnitSettings + " Value Expected :  " + expUnitSalesUnitSettings);
		System.out.println("Purchase Unit Value Actual          :  " + actUnitsPurchase +         " Value Expected :  " + expUnitsPurchase);
		System.out.println("Purchase Unit Settings Value Actual :  " + actUnitsPurchaseSettings + " Value Expected :  " + expUnitsPurchaseSettings);
		System.out.println("Unis Length Value Actual            :  " + actUnitsLength +           " Value Expected :  " + expUnitsLength);
		System.out.println("Units Width Value Actual            :  " + actUnitsWidth +            " Value Expected :  " + expUnitsWidth);
		System.out.println("Units Height Value Actual           :  " + actUnitHeight +            " Value Expected :  " + expUnitHeight);
		System.out.println("Units Weight Value Actual           :  " + actUnitsWeight +           " Value Expected :  " + expUnitsWeight);
		
		boolean TestResult=actUnitsBaseUnit == actUnitsBaseUnit && actUnitBaseUnitSettings == expUnitBaseUnitSettings
							&& actUnitSalesUnit == expUnitSalesUnit && actUnitSalesUnitSettings == expUnitSalesUnitSettings
							&& actUnitsPurchase == expUnitsPurchase && actUnitsPurchaseSettings == expUnitsPurchaseSettings
							&& actUnitsLength == expUnitsLength && actUnitsWidth == expUnitsWidth && actUnitHeight == expUnitHeight
							&& actUnitsWeight == expUnitsWeight;
		
		
		String actNewUnitBodyFileds=Boolean.toString(TestResult);
		String expNewUnitBodyFileds=excelReader.getCellData(xlSheetName, 455, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 455, 8, actNewUnitBodyFileds.toUpperCase());
				
	    System.err.println("Actual NewUnitBodyFileds       : "+actNewUnitBodyFileds);
	    System.err.println("Expected NewUnitBodyFileds       : "+expNewUnitBodyFileds);
		
		if (actNewUnitBodyFileds.equalsIgnoreCase(expNewUnitBodyFileds) && 
				actMasterItemNewUnitFieldList.equalsIgnoreCase(expMasterItemNewUnitFieldList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 453, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 453, 9, resPass);
			return false;
		}
	 }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 453, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }	
	
 }
		

  @FindBy(xpath ="//*[@id='newMasterDiv2']/div/div/div/label")
  public static List<WebElement> itemNewSettingsBodyFieldsList;

	
  public boolean checkSettingTabInItemMasterCreationPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	  
    excelReader=new ExcelReader(POJOUtility.getExcelPath());
    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
    	
  	System.out.println("****************************************************** checkSettingsTabsOptions  **********************************************************");
    
  	try
  	{
      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewSettingsBtn));
	  ItemNewSettingsBtn.click();
		
	  Thread.sleep(2000);
	  
	  
	  
	   ArrayList<String> actitemNewSettingsBodyFieldsList=new ArrayList<String>();
		
		int SettingsBodyFielddList =itemNewSettingsBodyFieldsList.size();
	 		
	 	System.err.println("SettingsBodyFielddList   :  "+SettingsBodyFielddList);
	 		
		 	for (int i = 1; i < SettingsBodyFielddList; i++) 
		 	{
				String data=itemNewSettingsBodyFieldsList.get(i).getText();
				actitemNewSettingsBodyFieldsList.add(data);
			}
		 		
		 	String actMasterItemNewSettingsFieldList=actitemNewSettingsBodyFieldsList.toString();
		 	String expMasterItemNewSettingsFieldList=excelReader.getCellData(xlSheetName, 457, 7);
		 		
		 	excelReader.setCellData(xlfile, xlSheetName, 457, 8, actMasterItemNewSettingsFieldList);
		    	
		    System.err.println("  Actual MasterItemNewFieldList : "+actMasterItemNewSettingsFieldList);
		    System.err.println("  Expected  MasterItemNewTabList : "+expMasterItemNewSettingsFieldList);
		
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NewSettingsOverheadCost));

	  boolean actStandardCost               = NewSettingsStandardCost.isDisplayed();
	  boolean actOverheadCost               = NewSettingsOverheadCost.isDisplayed();
	  boolean actIndirectCost               = NewSettingsIndirectCost.isDisplayed();
	  boolean actProfit                     = NewSettingsProfit.isDisplayed();
	  boolean actDoNotShowProductExpiryDays = NewSettingsDontshowproductexpireddays.isDisplayed();
	  boolean actTaxCode                    = NewSettingsTaxCode.isDisplayed();

	  boolean expStandardCost               = true;
	  boolean expOverheadCost               = true;
	  boolean expIndirectCost               = true;
	  boolean expProfit                     = true;
	  boolean expDoNotShowProductExpiryDays = true;
	  boolean expTaxCode                    = true;


	 System.out.println("General Tab Value Actual         :  " + actStandardCost +              " Value Expected :  " + expStandardCost);
	 System.out.println("Unit Tab Value Actual            :  " + actOverheadCost +              " Value Expected :  " + expOverheadCost);
	 System.out.println("Settings Tab Value Actual        :  " + actIndirectCost +              " Value Expected :  " + expIndirectCost);
	 System.out.println("Classification Tab Value Actual  :  " + actProfit +                    " Value Expected :  " + expProfit);
	 System.out.println("Other Details Tab Value Actual   :  " + actDoNotShowProductExpiryDays+ " Value Expected :  " + expDoNotShowProductExpiryDays);
	 System.out.println("Replenishment Tab Value Actual   :  " + actTaxCode +                   " Value Expected :  " + expTaxCode);
	
	 
	 boolean testResult=actStandardCost == expStandardCost && actOverheadCost == actOverheadCost
							&&  actIndirectCost == expIndirectCost && actProfit == expProfit
							&& actDoNotShowProductExpiryDays == expDoNotShowProductExpiryDays && actTaxCode == expTaxCode;
	 
	 String actSettingBodyFileds=Boolean.toString(testResult);
	 String expSettingBodyFileds=excelReader.getCellData(xlSheetName, 458, 7);
	 
	excelReader.setCellData(xlfile, xlSheetName, 458, 8, actSettingBodyFileds);
	 
	 System.err.println("actSettingBodyFileds  : "+actSettingBodyFileds);
	 System.err.println("expSettingBodyFileds   : "+expSettingBodyFileds);
	 
	 
	 if (actSettingBodyFileds.equalsIgnoreCase(expSettingBodyFileds) && 
			 actMasterItemNewSettingsFieldList.equalsIgnoreCase(expMasterItemNewSettingsFieldList))
	 {
		 
		 excelReader.setCellData(xlfile, xlSheetName, 456, 9, resPass);
		return true;
	 }
	 else
	 {
		 
		 excelReader.setCellData(xlfile, xlSheetName, 456, 9, resFail);
		 return false;
	 }
  	}
  	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 456, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }	
 }
			  
  
  @FindBy(xpath ="//*[@id='newMasterDiv3']/div/div/div/label")
  public static List<WebElement> itemNewClassificationBodyFieldsList;

				     
  public boolean checkClassificationTabInItemMasterCreationPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {

    excelReader=new ExcelReader(POJOUtility.getExcelPath());
    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
  
	System.out.println("************************ checkClassificationTabInItemMasterCreationPage  ************************************");
  
	try
	{
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewClassificationBtn));
  	    ItemNewClassificationBtn.click();
		
  	    Thread.sleep(1000);
  	    
  	    
  	   ArrayList<String> actitemNewClassificationBodyFieldsList=new ArrayList<String>();
		
		int ClassificationBodyFielddList =itemNewClassificationBodyFieldsList.size();
	 		
	 	System.err.println("ClassificationBodyFielddList   :  "+ClassificationBodyFielddList);
	 		
		 	for (int i = 1; i < ClassificationBodyFielddList; i++) 
		 	{
				String data=itemNewClassificationBodyFieldsList.get(i).getText();
				actitemNewClassificationBodyFieldsList.add(data);
			}
		 		
		 	String actMasterItemNewClassificationFieldList=actitemNewClassificationBodyFieldsList.toString();
		 	String expMasterItemNewClassificationFieldList=excelReader.getCellData(xlSheetName, 460, 7);
		 		
		 	excelReader.setCellData(xlfile, xlSheetName, 460, 8, actMasterItemNewClassificationFieldList);
		    	
		    System.err.println("  Actual MasterItemNewClassificationFieldList : "+actMasterItemNewClassificationFieldList);
		    System.err.println("  Expected  MasterItemClassificationNewTabList : "+expMasterItemNewClassificationFieldList);
  	    
  	    
  	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newItemClassificationABC_CodeValueDropdown));

		boolean actCodeValue        = newItemClassificationABC_CodeValueDropdown.isDisplayed();
		boolean actCodeMargin       = newItemClassificationABC_CodeMarginDropdOwn.isDisplayed();
		boolean actCodeRevenue      = newItemClassificationABCCodeRevenueDropdown.isDisplayed();
		boolean actCodeCarryingCost = newItemClassificationABCCodeCarryingCostDropdown.isDisplayed();
		boolean actBarcode1         = newItemClassificationBarcode1.isDisplayed();
		boolean actBarcode2         = newItemClassificationBarcode2.isDisplayed();
		boolean actBarcode3         = newItemClassificationBarcode3.isDisplayed();
		boolean actGridUnit         = newItemgridFirstrowUnit.isDisplayed();
		boolean actGridBarcode      = newItemgridFirstrowBarcode.isDisplayed();

		boolean expCodeValue        = true;
		boolean expCodeMargin       = true;
		boolean expCodeRevenue      = true;
		boolean expCodeCarryingCost = true;
		boolean expBarcode1         = true;
		boolean expBarcode2         = true;
		boolean expBarcode3         = true;
		boolean expGridUnit         = true; 
		boolean expGridBarcode      = true;

	
		System.out.println("Code Value Value Actual          :  " + actCodeValue +        " Value Expected :  " + expCodeValue);
		System.out.println("Code Margin Value Actual         :  " + actCodeMargin +       " Value Expected :  " + expCodeMargin);
		System.out.println("CodeRevenue  Value Actual        :  " + actCodeRevenue +      " Value Expected :  " + expCodeRevenue);
		System.out.println("Classification Tab Value Actual  :  " + actCodeCarryingCost + " Value Expected :  "+ expCodeCarryingCost);
		System.out.println("CodeCarryingCost Value Actual    :  " + actBarcode1 +         " Value Expected :  " + expBarcode1);
		System.out.println("Barcode1 Value Actual            :  " + actBarcode2 +         " Value Expected :  " + expBarcode2);
		System.out.println("Barcode2 Value Actual            :  " + actBarcode3 +         " Value Expected :  " + expBarcode3);
		System.out.println("Barcode3 Value Actual            :  " + actGridUnit +         " Value Expected :  " + expGridUnit);
		System.out.println("GridBarcode Value Actual         :  " + actGridBarcode +      " Value Expected :  " + expGridBarcode);

		
		boolean TestResult =actCodeValue == expCodeValue && actCodeMargin == expCodeMargin && actCodeRevenue == expCodeRevenue
							&& actCodeCarryingCost == expCodeCarryingCost  && actBarcode1 == expBarcode1 && actBarcode2 == expBarcode2
							&& actBarcode3 == expBarcode3 && actGridUnit == expGridUnit && actGridBarcode == expGridBarcode;
		
		
		String actClassficationTab=Boolean.toString(TestResult);
		String expClassification=excelReader.getCellData(xlSheetName, 461, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 461, 8, actClassficationTab);
		
		System.err.println("actClassficationTab  : "+actClassficationTab);
		System.err.println("expClassification    : "+expClassification);
		
		
		if (actClassficationTab.equalsIgnoreCase(expClassification) && 
				actMasterItemNewClassificationFieldList.equalsIgnoreCase(expMasterItemNewClassificationFieldList))
		{
			
			 excelReader.setCellData(xlfile, xlSheetName, 459, 9, resPass);
			return true;
		}
		else
		{
			 excelReader.setCellData(xlfile, xlSheetName, 459, 9, resPass);
			return false;
		}
    }
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 459, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }	
				
  }
			
  
  @FindBy(xpath ="//*[@id='newMasterDiv4']/div/div/div/label")
  public static List<WebElement> itemNewOtherDetailsBodyFieldsList;
  
  public boolean checkOtherDeailsTabInMasterCreationPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	  
	 System.out.println("****************************************************** checkOtherDeailsTabInMasterCreationPage  **********************************************************");

	 try
	 {  
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewOtherDetailsBtn));
  		ItemNewOtherDetailsBtn.click();

  		
  		Thread.sleep(2000);
  		
        ArrayList<String> actitemNewOtherDetailsBodyFieldsList=new ArrayList<String>();
		
		int OtherDeailsBodyFielddList =itemNewOtherDetailsBodyFieldsList.size();
	 		
	 	System.err.println("OtherDeailsBodyFielddList   :  "+OtherDeailsBodyFielddList);
	 		
		 	for (int i = 1; i < OtherDeailsBodyFielddList; i++) 
		 	{
				String data=itemNewOtherDetailsBodyFieldsList.get(i).getText();
				actitemNewOtherDetailsBodyFieldsList.add(data);
			}
		 		
		 	String actMasterItemNewOtherDeailsFieldList=actitemNewOtherDetailsBodyFieldsList.toString();
		 	String expMasterItemNewOtherDeailsFieldList=excelReader.getCellData(xlSheetName, 463, 7);
		 		
		 	excelReader.setCellData(xlfile, xlSheetName, 463, 8, actMasterItemNewOtherDeailsFieldList);
		    	
		    System.err.println("  Actual MasterItemNewOtherDeailsFieldList : "+actMasterItemNewOtherDeailsFieldList);
		    System.err.println("  Expected  MasterItemOtherDeailsNewTabList : "+expMasterItemNewOtherDeailsFieldList);
  		
  		
  		
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostOfIssueitem));

  		boolean actCostofIssue           = newOtherDetailsCostOfIssueitem.isDisplayed();
  		boolean actStockAccount          = newOtherDetailsStocksitem.isDisplayed();
  		boolean actSalesAccount          = newOtherDetailsSalesAccount.isDisplayed();
  		boolean actWIPAccount            = newOtherDetailsWIPitem.isDisplayed();
  		boolean actShortagesStockAccount = newOtherDetailsCostofShortageStockAC.isDisplayed();
  		boolean actExcessAccount         = newOtherDetailsCostofExcessStockAC.isDisplayed();
  		boolean actReturnAccount         = OtherDetailsCostofSaleReturnAC.isDisplayed();
  		boolean actPurchaseVariance      = OtherDetailsPurchaseVarianceAC.isDisplayed();
  		boolean actGridWarehouse         = newOtherDetailsgridFirstrowWareHouse.isDisplayed();

  		boolean expCostofIssue           = true;
  		boolean expStockAccount          = true;
  		boolean expSalesAccount          = true;
  		boolean expWIPAccount            = true;
  		boolean expShortagesStockAccount = true;
  		boolean expExcessAccount         = true;
  		boolean expReturnAccount         = true;
  		boolean expPurchaseVariance      = true;
  		boolean expGridWarehouse         = true;

  		
  		System.out.println("Cost Of Issue Value Actual            :  " + actCostofIssue +          " Value Expected :  " + expCostofIssue);
  		System.out.println("StockAccount Value Actual             :  " + actStockAccount +         " Value Expected :  " + expStockAccount);
  		System.out.println("Sale sAccount Value Actual            :  " + actSalesAccount +         " Value Expected :  " + expSalesAccount);
  		System.out.println("WIPAccount Value Actual               :  " + actWIPAccount +           " Value Expected :  " + expWIPAccount);
  		System.out.println("ShortagesStockAccount Value Actual    :  " + actShortagesStockAccount+ " Value Expected :  " + expShortagesStockAccount);
  		System.out.println("ExcessAccount Value Actual            :  " + actExcessAccount +        " Value Expected :  " + expExcessAccount);
  		System.out.println("ReturnAccount Value Actual            :  " + actReturnAccount +        " Value Expected :  " + expReturnAccount);
  		System.out.println("PurchaseVariance Value Actual         :  " + actPurchaseVariance +     " Value Expected :  " + expPurchaseVariance);
  		System.out.println("GridWarehouse Value Actual            :  " + actGridWarehouse +        " Value Expected :  " + expGridWarehouse);
  		
  		
  		boolean testResult=actCostofIssue == expCostofIssue && actStockAccount == expStockAccount
										&& actSalesAccount == expSalesAccount && actWIPAccount == expWIPAccount
										&& actShortagesStockAccount == expShortagesStockAccount && actExcessAccount == expExcessAccount
										&& actReturnAccount == expReturnAccount && actPurchaseVariance == expPurchaseVariance
										&& actGridWarehouse == expGridWarehouse;
  		
  		
  		String actOtherDetailsResult=Boolean .toString(testResult);
  		String expOtherDetailsResult=excelReader.getCellData(xlSheetName, 464, 7);
  		
  		excelReader.setCellData(xlfile, xlSheetName, 464, 8, actOtherDetailsResult);
  		
  		if (actOtherDetailsResult.equalsIgnoreCase(expOtherDetailsResult) && 
  				actMasterItemNewOtherDeailsFieldList.equalsIgnoreCase(expMasterItemNewOtherDeailsFieldList))
		{
  			
  			excelReader.setCellData(xlfile, xlSheetName, 462, 9, resPass);
			return true;
		}
		else
		{
			 excelReader.setCellData(xlfile, xlSheetName, 462, 9, resFail);
			return false;
		}
	 }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 462, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }	
  }


		
  
  @FindBy(xpath ="//*[@id='newMasterDiv5']/div/div/div/label")
  public static List<WebElement> itemNewReplenishmentTabBodyFieldsList;
  
 public boolean checkReplenishmentTabInItemMasterCreationPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
  excelReader=new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("************************************** checkReplenishmentTabInItemMasterCreationPage  *******************************************");
	
  try
  {
   	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewReplenishmentBtn));
	ItemNewReplenishmentBtn.click();

	
	Thread.sleep(2000);
	
	ArrayList<String> actitemNewReplenishmentTabBodyFieldsList=new ArrayList<String>();
		
	int ReplenishmentBodyFielddList =itemNewReplenishmentTabBodyFieldsList.size();
	 		
	System.err.println("ReplenishmentBodyFielddList   :  "+ReplenishmentBodyFielddList);
	 		
	     for (int i = 1; i < ReplenishmentBodyFielddList; i++) 
		 {
			String data=itemNewReplenishmentTabBodyFieldsList.get(i).getText();
			actitemNewReplenishmentTabBodyFieldsList.add(data);
		 }
		 		
	String actMasterItemNewReplenishmentFieldList=actitemNewReplenishmentTabBodyFieldsList.toString();
	String expMasterItemNewReplenishmentFieldList=excelReader.getCellData(xlSheetName, 466, 7);
		 		
	excelReader.setCellData(xlfile, xlSheetName, 466, 8, actMasterItemNewReplenishmentFieldList);
		    	
    System.err.println("  Actual MasterItemNewReplenishmentFieldList : "+actMasterItemNewReplenishmentFieldList);
    System.err.println("  Expected  MasterItemReplenishmentNewTabList : "+expMasterItemNewReplenishmentFieldList);
	
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newreplenishmentDefaultReplenishment));

	boolean actDefaultReplenishment      = newreplenishmentDefaultReplenishment.isDisplayed();
	boolean actManufacturePolicy         = newreplenishmentManufacturePolicy.isDisplayed();
	boolean actPackingBOM                = newreplenishmentPackingBOM.isDisplayed();
	boolean actBOM                       = newreplenishmentBOM.isDisplayed();
	boolean actFlushing                  = newreplenishmentFlushing.isDisplayed();
	boolean actGridFirstRowWarehouse     = newreplenishmentGridFirstRowWarehouse.isDisplayed();
	boolean actGridFirstRowStartDate     = newreplenishmentGridFirstRowStartDate.isDisplayed();
	boolean actGridFirstRowEndDate       = newreplenishmentGridFirstRowEndDate.isDisplayed();
	boolean actGridFirstRowReplenishqty  = newreplenishmentGridFirstRowReplenishqty.isDisplayed();
	boolean actGridFirstRowReorderPolicy = newreplenishmentGridFirstRowReorderPolicy.isDisplayed();
	boolean actGridFirstRowSafetyStock   = newreplenishmentGridFirstRowSafetyStock.isDisplayed();
	boolean actFirstRowSafetyLeadTime    = newreplenishmentFirstRowSafetyLeadTime.isDisplayed();
	boolean actFirstRowReordercycle      = newreplenishmentFirstRowReordercycle.isDisplayed();
	boolean actFirstRowReorderPoint      = newreplenishmentFirstRowReorderPoint.isDisplayed();
	boolean actFirstRowReorderQuantity   = newreplenishmentFirstRowReorderQuantity.isDisplayed();
	boolean actFirstRowMaxInventoryLevel = newreplenishmentFirstRowMaxInventoryLevel.isDisplayed();
	boolean actFirstRowDefaultVendor     = newreplenishmentFirstRowDefaultVendor.isDisplayed();
	boolean actFirstRowMinOrderQuantity  = newreplenishmentFirstRowMinOrderQuantity.isDisplayed();
	boolean actFirstRowMaxOrderQuantity1 = newreplenishmentFirstRowMaxOrderQuantity1.isDisplayed();
	boolean actFirstRowOrderMultiple     = newreplenishmentFirstRowOrderMultiple.isDisplayed();

	boolean expDefaultReplenishment      = true;
	boolean expManufacturePolicy         = true;
	boolean expPackingBOM                = true;
	boolean expBOM                       = true;
	boolean expFlushing                  = true;
	boolean expGridFirstRowWarehouse     = true;
	boolean expGridFirstRowStartDate     = true;
	boolean expGridFirstRowEndDate       = true;
	boolean expGridFirstRowReplenishqty  = true;
	boolean expGridFirstRowReorderPolicy = true;
	boolean expGridFirstRowSafetyStock   = true;
	boolean expFirstRowSafetyLeadTime    = true;
	boolean expFirstRowReordercycle      = true;
	boolean expFirstRowReorderPoint      = true;
	boolean expFirstRowReorderQuantity   = true;
	boolean expFirstRowMaxInventoryLevel = true;
	boolean expFirstRowDefaultVendor     = true;
	boolean expFirstRowMinOrderQuantity  = true;
	boolean expFirstRowMaxOrderQuantity1 = true;
	boolean expFirstRowOrderMultiple     = true;

	System.out.println("Default Replenishment              :  " + actDefaultReplenishment +     "  Value Expected :  " + expDefaultReplenishment);
	System.out.println("Manufacture Policy             	   :  " + actManufacturePolicy +        "  Value Expected :  " + expManufacturePolicy);
	System.out.println("Packing BOM                        :  " + actPackingBOM +               "  Value Expected :  " + expPackingBOM);
	System.out.println("BOM                                :  " + actBOM +                      "  Value Expected :  " + expBOM);
	System.out.println("Flushing                           :  " + actFlushing +                 "  Value Expected :  " + expFlushing);
	System.out.println("Grid First Row Warehouse           :  " + actGridFirstRowWarehouse +    "  Value Expected :  " + expGridFirstRowWarehouse);
	System.out.println("Grid First Row Start Date          :  " + actGridFirstRowStartDate +    "  Value Expected :  " + expGridFirstRowStartDate);
	System.out.println("Grid First Row End Date            :  " + actGridFirstRowEndDate +      "  Value Expected :  " + expGridFirstRowEndDate);
	System.out.println("Grid First Row Replenishqty        :  " + actGridFirstRowReplenishqty+  "  Value Expected :  " + expGridFirstRowReplenishqty);
	System.out.println("Grid First Row Reorder Policy      :  " + actGridFirstRowReorderPolicy+ "  Value Expected :  " + expGridFirstRowReorderPolicy);
	System.out.println("Grid First Row Safety Stock        :  " + actGridFirstRowSafetyStock+   "  Value Expected :  " + expGridFirstRowSafetyStock);
	System.out.println("First Row Safety Lead Time         :  " + actFirstRowSafetyLeadTime +   "  Value Expected :  " + expFirstRowSafetyLeadTime);
	System.out.println("First Row Reorder cycle            :  " + actFirstRowReordercycle +     "  Value Expected :  " + expFirstRowReordercycle);
	System.out.println("First Row Reorder Point            :  " + actFirstRowReorderPoint +     "  Value Expected :  " + expFirstRowReorderPoint);
	System.out.println("First Row Reorder Quantity         :  " + actFirstRowReorderQuantity+   "  Value Expected :  " + expFirstRowReorderQuantity);
	System.out.println("First Row Max Inventory Level      :  " + actFirstRowMaxInventoryLevel+ "  Value Expected :  " + expFirstRowMaxInventoryLevel);
	System.out.println("First Row Default Vendor           :  " + actFirstRowDefaultVendor +    "  Value Expected :  " + expFirstRowDefaultVendor);
	System.out.println("First Row Min Order Quantity       :  " + actFirstRowMinOrderQuantity+  "  Value Expected :  " + expFirstRowMinOrderQuantity);
	System.out.println("First Row Max Order Quantity1      :  " + actFirstRowMaxOrderQuantity1+ "  Value Expected :  " + expFirstRowMaxOrderQuantity1);
	System.out.println("First Row Order Multiple           :  " + actFirstRowOrderMultiple +    "  Value Expected :  " + expFirstRowOrderMultiple);
	
	
	boolean testResult=actDefaultReplenishment == actDefaultReplenishment && actManufacturePolicy == expManufacturePolicy
						&& actPackingBOM == expPackingBOM && actBOM == expBOM && actFlushing == expFlushing
						&& actGridFirstRowWarehouse == expGridFirstRowWarehouse
						&& actGridFirstRowStartDate == expGridFirstRowStartDate
						&& actGridFirstRowEndDate == expGridFirstRowEndDate
						&& actGridFirstRowReplenishqty == expGridFirstRowReplenishqty
						&& actGridFirstRowReorderPolicy == expGridFirstRowReorderPolicy
						&& actGridFirstRowSafetyStock == expGridFirstRowSafetyStock
						&& actFirstRowSafetyLeadTime == expFirstRowSafetyLeadTime
						&& actFirstRowReordercycle == expFirstRowReordercycle
						&& actFirstRowReorderPoint == expFirstRowReorderPoint
						&& actFirstRowReorderQuantity == expFirstRowReorderQuantity
						&& actFirstRowMaxInventoryLevel == expFirstRowMaxInventoryLevel
						&& actFirstRowDefaultVendor == expFirstRowDefaultVendor
						&& actFirstRowMinOrderQuantity == expFirstRowMinOrderQuantity
						&& actFirstRowMaxOrderQuantity1 == expFirstRowMaxOrderQuantity1
						&& actFirstRowOrderMultiple == expFirstRowOrderMultiple;
	
	String actReplenishmentResult=Boolean.toString(testResult);
	String expReplenishmentResult=excelReader.getCellData(xlSheetName, 467, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 467, 8, actReplenishmentResult);
	
	
	if (actMasterItemNewReplenishmentFieldList.equalsIgnoreCase(expMasterItemNewReplenishmentFieldList) &&
			actReplenishmentResult.equalsIgnoreCase(expReplenishmentResult))
	{
		excelReader.setCellData(xlfile, xlSheetName, 465, 9, resPass);
		return true;
	}
	else
	{
		excelReader.setCellData(xlfile, xlSheetName, 465, 9, resFail);
		return false;
	}
  }
  catch (Exception e) 
  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 465, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
  }	
}
		    


 public boolean checkOutletTabInItemMasterCreationPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
		
  excelReader=new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
  System.out.println("***************************************** checkOutletTabInItemMasterCreationPage  ****************************************************");
	
   try
   {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewOutletBtn));
		ItemNewOutletBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOutletSearchOutlet));

		boolean actOutletSearchIsDisplayed                  = newOutletSearchOutlet.isDisplayed();
		
		String actOutletSearchGetText   = newOutletSearchOutlet.getAttribute("placeholder");
		String expOutletSearchGetText  =excelReader.getCellData(xlSheetName, 469, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 469, 8, actOutletSearchGetText);
		
		boolean actOutletAdvanceSearch           = newOutletAdvanceSearch.isDisplayed();
		boolean actOutletResizeBtn               = newOutletResizeBtn.isDisplayed();
		boolean actOutletRetainSelectionCheckbox = newOutletRetainSelctionCheckBox.isDisplayed();

		boolean expOutletSearch                  = true;
		boolean expOutletAdvanceSearch           = true;
		boolean expOutletResizeBtn               = true;
		boolean expOutletRetainSelectionCheckbox = true;		

		System.out.println("Outlet Search                 :  " + actOutletSearchIsDisplayed +      "  Value Expected :  " + expOutletSearch);
		System.out.println("Advance Search             	  :  " + actOutletAdvanceSearch +          "  Value Expected :  " + expOutletAdvanceSearch);
		System.out.println("Resize Btn                    :  " + actOutletResizeBtn +              "  Value Expected :  " + expOutletResizeBtn);
		System.out.println("Retain Selection              :  " + actOutletRetainSelectionCheckbox+ "  Value Expected :  " + expOutletRetainSelectionCheckbox);
				
		
		
		boolean TestResult=actOutletSearchIsDisplayed == expOutletSearch && actOutletAdvanceSearch == expOutletAdvanceSearch
				           && actOutletResizeBtn == actOutletResizeBtn && actOutletRetainSelectionCheckbox == expOutletRetainSelectionCheckbox;
		
		String actOutletResult=Boolean.toString(TestResult);
		String expOutletResult=excelReader.getCellData(xlSheetName, 470, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 470, 8, actOutletResult);
		
		if (actOutletResult.equalsIgnoreCase(expOutletResult) &&
				actOutletSearchGetText.equalsIgnoreCase(expOutletSearchGetText))
				
		{
			excelReader.setCellData(xlfile, xlSheetName, 468, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 468, 9, resFail);
			return false;
		}
  }
   catch (Exception e) 
   {
 	  String exception =e.getMessage();
 	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 468, 10, exception);
 	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
 	  return false;
   }	
}

	@FindBy (xpath="//*[@id='newMasterDiv8']/div/div[2]/div[1]/label")
    private static WebElement itemNewCreateTabList;
	

 
 public boolean checkCreateTabInItemMasterCreationPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
		
  excelReader=new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
  System.out.println("***************************************** checkCreateTabInItemMasterCreationPage  ****************************************************");
	
  try
  { 
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewCreateTab));
	itemNewCreateTab.click();
		
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemExtraFieldOne));

	boolean actItemExtraFieldIsDisplayed = itemExtraFieldOne.isDisplayed();
	boolean expItemExtraFieldIsDisplayed = true;

	String actItemExtraFieldGetText = itemNewCreateTabList.getText();;
	String expItemExtraFieldGetText = excelReader.getCellData(xlSheetName, 471, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 471, 8, actItemExtraFieldGetText);
	
	System.out.println("Create Tab Tab              :  " + actItemExtraFieldIsDisplayed + "  Value Expected :  " + expItemExtraFieldIsDisplayed);

	System.err.println("actItemExtraFieldGetText   : "+actItemExtraFieldGetText);
	System.err.println("expItemExtraFieldGetText   : "+expItemExtraFieldGetText);
	
	if ( actItemExtraFieldIsDisplayed == expItemExtraFieldIsDisplayed && 
			actItemExtraFieldGetText.equalsIgnoreCase(expItemExtraFieldGetText))
	{
		excelReader.setCellData(xlfile, xlSheetName, 471, 9, resPass);
		return true;
	}
	else
	{
		excelReader.setCellData(xlfile, xlSheetName, 471, 9, resFail);
		return false;
	}
  }
  catch (Exception e) 
  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 471, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
  }
 }
	
 
 
 public static boolean checkSaveButtonByInputInProductCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkSaveButtonByInputInProductCreationPage *************************");

	try
	{
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewnewGeneralBtn));
		ItemNewnewGeneralBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
		newGeneralName.sendKeys(excelReader.getCellData(xlSheetName, 473, 6));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
		newGeneralCode.sendKeys(excelReader.getCellData(xlSheetName, 474, 6));

		getAction().moveToElement(newGeneralCode).sendKeys(Keys.TAB).perform();
		newGeneralItemTypeDropDown.sendKeys(excelReader.getCellData(xlSheetName, 475, 6));
		newGeneralItemTypeDropDown.sendKeys(Keys.TAB);

		newGeneralBinCapacity.click();
		newGeneralBinCapacity.sendKeys(excelReader.getCellData(xlSheetName, 476, 6));
		newGeneralBinCapacity.sendKeys(Keys.TAB);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
		ItemNewUnitsBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultBaseUnitDropdown));
		itemUnitsDefaultBaseUnitDropdown.sendKeys(excelReader.getCellData(xlSheetName, 477, 6));
		itemUnitsDefaultBaseUnitDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultSalesUnitDropdown));
		itemUnitsDefaultSalesUnitDropdown.sendKeys(excelReader.getCellData(xlSheetName, 478, 6));
		itemUnitsDefaultSalesUnitDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitDropDown));
		itemUnitsDefaultPurchaseUnitDropDown.sendKeys(excelReader.getCellData(xlSheetName, 479, 6));
		itemUnitsDefaultPurchaseUnitDropDown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

		String actItemSaveMessage = validationConfirmationMessage.getText();
		String expItemSaveMessage = excelReader.getCellData(xlSheetName, 472, 7);

		excelReader.setCellData(xlfile, xlSheetName, 472, 8, actItemSaveMessage);
		
		
		System.err.println(" actItemSaveMessage : "+actItemSaveMessage);
		System.err.println(" expItemSaveMessage : "+expItemSaveMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		closeValidationConfirmationMessage.click();

		System.out.println("Input and Click on Save Button : " + actItemSaveMessage + " Value Expected :  " + expItemSaveMessage);

		if (actItemSaveMessage.equalsIgnoreCase(expItemSaveMessage)) 
		{

			excelReader.setCellData(xlfile, xlSheetName, 472, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 472, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 472, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
 


  public static boolean checkClickOnCloseAndCreatedMasterItemDisplayInGrid()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************* checkClickOnCloseAndCreatedMasterItemDisplayInGrid ****************************");
		
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		
		ArrayList<String> actmasterItemNameList=new ArrayList<String>();
	 		
	 	int HeaderCount =masterItemNameList.size();
	 		
	 	System.err.println("HeaderCount   :  "+HeaderCount);
	 		
	 	for (int i = 0; i < HeaderCount; i++) 
	 	{
			String data=masterItemNameList.get(i).getText();
			
			
			if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 480, 6)))
			{
				break;
			}
		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewCreationName));

		String actGetItemNewCreationOfLane = itemNewCreationName.getText();
		String expGetItemNewCreationOfLane = excelReader.getCellData(xlSheetName, 480, 7);

		System.out.println("Item Name Display : " + actGetItemNewCreationOfLane + " Value Expected :  " + expGetItemNewCreationOfLane);

		excelReader.setCellData(xlfile, xlSheetName, 480, 8, actGetItemNewCreationOfLane);
		
		if (actGetItemNewCreationOfLane.equalsIgnoreCase(actGetItemNewCreationOfLane)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 480, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 480, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 480, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }

  @FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
  public static WebElement itemFirstCheckBox;

  @FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[8]/div[1]/label[1]/input[1]")
  public static WebElement itemSecondCheckBox;

  @FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[3]/td[8]/div[1]/label[1]/input[1]")
  public static WebElement itemThirdCheckBox;

  //Editing the Account in the Accounts Master
  public static boolean checkCheckBoxOfSavedMasterItemIsCheckedByClickingOnItemMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************** checkCheckBoxOfSavedMasterItemIsCheckedByClickingOnItemMaster Method Executes............  ********************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
		itemFirstCheckBox.click();
		
		boolean SelectedMasterSearchCheckbox = firstRowSelect.isSelected();
		
		String actSelectedMasterSearchCheckbox=Boolean.toString(SelectedMasterSearchCheckbox);
		
		String expSelectedMasterSearchCheckbox = excelReader.getCellData(xlSheetName, 481, 7);

		excelReader.setCellData(xlfile, xlSheetName, 481, 8, actSelectedMasterSearchCheckbox);
		
		
		System.out.println("Account Name Check as Checked Value Actual           :" + actSelectedMasterSearchCheckbox+ "     Value Expected : " + expSelectedMasterSearchCheckbox);
		
		boolean actSummaryErrorMessage         = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage         = true;

		System.out.println("Click on Check Box Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		

		if (actSelectedMasterSearchCheckbox==actSelectedMasterSearchCheckbox 
				&& actSummaryErrorMessage==expSummaryErrorMessage) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 481, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 481, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 481, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
  
  
  
  public static boolean checkEditOptionForNewlyCreatedItem() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************* checkEditOptionForNewlyCreatedItem ****************************");
		
    try
    {
      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
	  masterEditBtn.click();
	  
	  boolean actSummaryErrorMessage         = checkErrorMessageIsDisplayingOrNotDisplaying();
	  boolean expSummaryErrorMessage         = true;

	  System.out.println("Click on Check Box Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
	  String actItemName                    = newGeneralName.getAttribute("value");
	  String actItemCode                    = newGeneralCode.getAttribute("value");

	  Select itemType                       = new Select(newGeneralItemTypeDropDown);
	  String actItemType                    = itemType.getFirstSelectedOption().getText();
	  String actBinCapacity                 = newGeneralBinCapacity.getAttribute("value");

	  String expItemName                    = excelReader.getCellData(xlSheetName, 483, 7);
	  String expItemCode                    = excelReader.getCellData(xlSheetName, 484, 7);
	  String expItemType                    = excelReader.getCellData(xlSheetName, 485, 7);
	  String expBinCapacity                 = excelReader.getCellData(xlSheetName, 486, 7);

	  excelReader.setCellData(xlfile, xlSheetName, 483, 8, actItemName);
	  excelReader.setCellData(xlfile, xlSheetName, 484, 8, actItemCode);
	  excelReader.setCellData(xlfile, xlSheetName, 485, 8, actItemType);
	  excelReader.setCellData(xlfile, xlSheetName, 486, 8, actBinCapacity);
	  
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
	  newGeneralName.click();
	  newGeneralName.sendKeys(Keys.END);
	  newGeneralName.sendKeys(Keys.SHIFT, Keys.HOME);
	  newGeneralName.sendKeys(excelReader.getCellData(xlSheetName, 491, 6));
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
	  newGeneralCode.click();
	  newGeneralCode.sendKeys(Keys.END);
	  newGeneralCode.sendKeys(Keys.SHIFT, Keys.HOME);
	  newGeneralCode.sendKeys(excelReader.getCellData(xlSheetName, 492, 6));
	  Thread.sleep(2000);

	  getAction().moveToElement(newGeneralCode).sendKeys(Keys.TAB).perform();
	  newGeneralItemTypeDropDown.sendKeys(excelReader.getCellData(xlSheetName, 493, 6));
	  newGeneralItemTypeDropDown.sendKeys(Keys.TAB);

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
	  ItemNewUnitsBtn.click();
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultSalesUnitDropdown));
	  String actBaseUnit               = itemUnitsDefaultBaseUnitDropdown.getAttribute("value");
	  String actSalesUnit              = itemUnitsDefaultSalesUnitDropdown.getAttribute("value");
	  String actPurchaseUnit           = itemUnitsDefaultPurchaseUnitDropDown.getAttribute("value");

	  String expBaseUnit               = excelReader.getCellData(xlSheetName, 487, 7);
	  String expSalesUnit              = excelReader.getCellData(xlSheetName, 488, 7);
	  String expPurchaseUnit           = excelReader.getCellData(xlSheetName, 489, 7);
	  
	  
	  excelReader.setCellData(xlfile, xlSheetName, 487, 8, actBaseUnit);
	  excelReader.setCellData(xlfile, xlSheetName, 488, 8, actSalesUnit);
	  excelReader.setCellData(xlfile, xlSheetName, 489, 8, actPurchaseUnit);

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultBaseUnitDropdown));
	  itemUnitsDefaultBaseUnitDropdown.click();
	  itemUnitsDefaultBaseUnitDropdown.sendKeys(Keys.TAB);

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultSalesUnitDropdown));
	  itemUnitsDefaultSalesUnitDropdown.sendKeys(Keys.TAB);

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitDropDown));
	  itemUnitsDefaultPurchaseUnitDropDown.click();
	  
	  itemUnitsDefaultPurchaseUnitDropDown.sendKeys(Keys.END);
	  
	  itemUnitsDefaultPurchaseUnitDropDown.sendKeys(Keys.SHIFT, Keys.HOME);
	 
	  itemUnitsDefaultPurchaseUnitDropDown.sendKeys(excelReader.getCellData(xlSheetName, 494, 6));
	  Thread.sleep(2000);
	  itemUnitsDefaultPurchaseUnitDropDown.sendKeys(Keys.TAB);

	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	  saveBtn.click();

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

	  String actItemSaveMessage           = validationConfirmationMessage.getText();
	  String expItemSaveMessage           = excelReader.getCellData(xlSheetName, 491, 7);
 
	  excelReader.setCellData(xlfile, xlSheetName, 491, 8, actItemSaveMessage);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
	  closeValidationConfirmationMessage.click();
	 	  

	  String actUpdatedItem               = itemNewCreationName.getText();
	  String expUpdatedItem               =  excelReader.getCellData(xlSheetName, 495, 7);

	  excelReader.setCellData(xlfile, xlSheetName, 495, 8, actUpdatedItem);
	  
	  
	  System.out.println("Item Name Display                : " + actItemName +        " Value Expected :  " + expItemName);
	  System.out.println("Item Code Display                : " + actItemCode +        " Value Expected :  " + expItemCode);
	  System.out.println("Item Type Display                : " + actItemType +        " Value Expected :  " + expItemType);
	  System.out.println("Item BUnit Display               : " + actBaseUnit +        " Value Expected :  " + expBaseUnit);
	  System.out.println("Item SUnit Display               : " + actSalesUnit +       " Value Expected :  " + expSalesUnit);
	  System.out.println("Item PUnit Display               : " + actPurchaseUnit +    " Value Expected :  " + expPurchaseUnit);
	  System.out.println("Bin Capacity                     : " + actBinCapacity +     " Value Expected :  " + expBinCapacity);
	  System.out.println("Update and Click on Save Button  : " + actItemSaveMessage + " Value Expected :  " + expItemSaveMessage);
	  System.out.println("Updated Item Name Display        : " + actUpdatedItem +     " Value Expected :  " + expUpdatedItem);

	  if (actSummaryErrorMessage==actSummaryErrorMessage && expItemName.equalsIgnoreCase(expItemName) 
			&& actItemCode.equalsIgnoreCase(expItemCode) && actItemType.equalsIgnoreCase(expItemType) 
			&& actBaseUnit.equalsIgnoreCase(expBaseUnit) && actSalesUnit.equalsIgnoreCase(expSalesUnit) 
			&& actPurchaseUnit.equalsIgnoreCase(expPurchaseUnit) && actBinCapacity.equalsIgnoreCase(expBinCapacity)
			&& actItemSaveMessage.equalsIgnoreCase(expItemSaveMessage) && actUpdatedItem.equalsIgnoreCase(expUpdatedItem))
	  {
		  excelReader.setCellData(xlfile, xlSheetName, 482, 9, resPass);
		return true;
	  }
	  else
	  {
		  excelReader.setCellData(xlfile, xlSheetName, 482, 9, resFail);
		return false;
	  }
     }
     catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 482, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }

   
  //Editing the Account in the Accounts Master
  public static boolean checkUnCheckBoxOfSavedMasterItemIsCheckedByClickingOnItemMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************** checkUnCheckBoxOfSavedMasterItemIsCheckedByClickingOnItemMaster Method Executes............  ********************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
		itemFirstCheckBox.click();
		
		boolean SelectedMasterSearchCheckbox = firstRowSelect.isSelected();
		
        String actSelectedMasterSearchCheckbox=Boolean.toString(SelectedMasterSearchCheckbox);
		
		String expSelectedMasterSearchCheckbox = excelReader.getCellData(xlSheetName, 496, 7);

		excelReader.setCellData(xlfile, xlSheetName, 496, 8, actSelectedMasterSearchCheckbox);

		System.out.println("Account Name Check as Checked Value Actual           :" + actSelectedMasterSearchCheckbox+ "     Value Expected : " + expSelectedMasterSearchCheckbox);
		
		
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Check Box Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);

		if (actSelectedMasterSearchCheckbox==actSelectedMasterSearchCheckbox 
				&& actSummaryErrorMessage==expSummaryErrorMessage) 
		{
			 excelReader.setCellData(xlfile, xlSheetName, 496, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 496, 9, resPass);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 496, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
  
  
  
  
  
 public static boolean checkUpdatedItemInformation()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkUpdatedItemInformation *************************");
		
	try
	{
	  Thread.sleep(4000);
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
	  itemFirstCheckBox.click();

	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
	  masterEditBtn.click();

	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
	  String actItemName    = newGeneralName.getAttribute("value");
	  String actItemCode    = newGeneralCode.getAttribute("value");

	  Select itemType       = new Select(newGeneralItemTypeDropDown);
	  String actItemType    = itemType.getFirstSelectedOption().getText();
	  String actBinCapacity = newGeneralBinCapacity.getAttribute("value");

	  excelReader.setCellData(xlfile, xlSheetName, 498, 8, actItemName);
	  excelReader.setCellData(xlfile, xlSheetName, 499, 8, actItemCode);
	  excelReader.setCellData(xlfile, xlSheetName, 500, 8, actItemType);
	  excelReader.setCellData(xlfile, xlSheetName, 501, 8, actBinCapacity);
	  
	  String expItemName    = excelReader.getCellData(xlSheetName, 498, 7);
  	  String expItemCode    = excelReader.getCellData(xlSheetName, 499, 7);
	  String expItemType    = excelReader.getCellData(xlSheetName, 500, 7);
	  String expBinCapacity = excelReader.getCellData(xlSheetName, 501, 7);

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
	  ItemNewUnitsBtn.click();
	  
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitDropDown));
	  String actBaseUnit     = itemUnitsDefaultBaseUnitDropdown.getAttribute("value");
	  String actSalesUnit    = itemUnitsDefaultSalesUnitDropdown.getAttribute("value");
	  String actPurchaseUnit = itemUnitsDefaultPurchaseUnitDropDown.getAttribute("value");

	  excelReader.setCellData(xlfile, xlSheetName, 502, 8, actBaseUnit);
	  excelReader.setCellData(xlfile, xlSheetName, 503, 8, actSalesUnit);
	  excelReader.setCellData(xlfile, xlSheetName, 504, 8, actPurchaseUnit);
	  
	  String expBaseUnit     = excelReader.getCellData(xlSheetName, 502, 7);
	  String expSalesUnit    = excelReader.getCellData(xlSheetName, 503, 7);
	  String expPurchaseUnit = excelReader.getCellData(xlSheetName, 504, 7);

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloseBtn));
	  editcloseBtn.click();

	  System.out.println("Item Name Display                : " + actItemName +     " Value Expected :  " + expItemName);
	  System.out.println("Item Code Display                : " + actItemCode +     " Value Expected :  " + expItemCode);
	  System.out.println("Item Type Display                : " + actItemType +     " Value Expected :  " + expItemType);
	  System.out.println("Item BUnit Display               : " + actBaseUnit +     " Value Expected :  " + expBaseUnit);
	  System.out.println("Item SUnit Display               : " + actSalesUnit +    " Value Expected :  " + expSalesUnit);
	  System.out.println("Item PUnit Display               : " + actPurchaseUnit + " Value Expected :  " + expPurchaseUnit);
	  System.out.println("Bin Capacity                     : " + actBinCapacity +  " Value Expected :  " + expBinCapacity);

	  if (actItemName.equalsIgnoreCase(expItemName) && actItemCode.equalsIgnoreCase(expItemCode)
			&& actItemType.equalsIgnoreCase(expItemType) && actBaseUnit.equalsIgnoreCase(expBaseUnit)
			&& actSalesUnit.equalsIgnoreCase(expSalesUnit) && actPurchaseUnit.equalsIgnoreCase(expPurchaseUnit)
			&& actBinCapacity.equalsIgnoreCase(expBinCapacity)) 
	  {
		  excelReader.setCellData(xlfile, xlSheetName, 497, 9, resPass);
		  return true;
	  }
	  else
	  {
		  excelReader.setCellData(xlfile, xlSheetName, 497, 9, resFail);
		return false;
	  }
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 497, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }

 @FindBy(xpath = "//input[@id='liSelectAllMasters']")
 public static WebElement itemMasterSelect;

 public static boolean checkDeleteItemFromItemMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkDeleteItemFromItemMasterPage *************************");
		
    try
    {
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemMasterSelect));
		itemMasterSelect.click();
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;

		System.out.println("Click on Check Box Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemMasterSelect));
		itemMasterSelect.click();
		
		
		boolean actSummaryErrorMessageClick  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessageClick  = true;

		System.out.println("Click on Check Box Is Any Error Message Value Actual : " + actSummaryErrorMessageClick + " Value Expected : " + expSummaryErrorMessageClick);

		Thread.sleep(3000);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
		itemFirstCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
		masterDeleteBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
		String actGetMsgOnDelete = getMsgOnDelete.getText();
		String expGetMsgOnDelete = excelReader.getCellData(xlSheetName, 506, 7);
	
		excelReader.setCellData(xlfile, xlSheetName, 506, 8, actGetMsgOnDelete);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
		clickOnOkInDelete.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
		String actGetMsgOnClickOnOkButtonInDeleteMessage = validationConfirmationMessage.getText();
		String expGetMsgOnClickOnOkButtonInDeleteMessage = excelReader.getCellData(xlSheetName, 507, 7);

		
		excelReader.setCellData(xlfile, xlSheetName, 507, 8, actGetMsgOnClickOnOkButtonInDeleteMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		closeValidationConfirmationMessage.click();
	

		System.out.println("Item Name Display : " + actGetMsgOnDelete + " Value Expected :  " + expGetMsgOnDelete);
		System.out.println("Item Code Display : " + actGetMsgOnClickOnOkButtonInDeleteMessage + " Value Expected :  "+ expGetMsgOnClickOnOkButtonInDeleteMessage);

		if (actGetMsgOnDelete.equalsIgnoreCase(expGetMsgOnDelete) && actGetMsgOnClickOnOkButtonInDeleteMessage.equalsIgnoreCase(expGetMsgOnClickOnOkButtonInDeleteMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 505, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 505, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 505, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }

 public static boolean checkDeleteItemDisplayInMasterDisplay() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkDeleteItemDisplayInMasterDisplay *************************");
		
  
    	try
        {
           String actmasterGridBodyList=clickOnEmptyGroup.getText();
      	   	
       	   String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 509, 7);
       	   	
       	   excelReader.setCellData(xlfile, xlSheetName, 509, 8, actmasterGridBodyList);
       	   	
       	   System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
       	   System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);
       	   	
       	   if(actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList))
    	   {
    	    		excelReader.setCellData(xlfile, xlSheetName, 508, 9, resPass);
    	 		return true;
    	   } 
    	   else 
    	   {
    	 		excelReader.setCellData(xlfile, xlSheetName, 508, 9, resFail);
    	 		return false;
		   }
       }
       catch (Exception e) 
	   {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 508, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	   }
  }

 
 @FindBy(xpath="//*[@id='btnAddGroup']")
 private static WebElement itemAddGroupBtn;
 
 //Create Group
 public static boolean checkItemsAddGroupButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {

 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

 	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemAddGroupBtn));
 	
 	 itemAddGroupBtn.click();
 	 
 	 Thread.sleep(4999);
 	 
 	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewnewGeneralBtn));
 	 if (ItemNewnewGeneralBtn.isDisplayed() && ItemNewUnitsBtn.isDisplayed() && 
 			 ItemNewSettingsBtn.isDisplayed() && ItemNewClassificationBtn.isDisplayed() &&
 			 ItemNewOtherDetailsBtn.isDisplayed() && ItemNewReplenishmentBtn.isDisplayed() &&
 			 ItemNewOutletBtn.isDisplayed() ) 
 	 {
 		System.out.println("***Pass: New Screen Creation In Item Screen");
 		excelReader.setCellData(xlfile, "Sheet1", 748, 9, resPass);
 		return true;
 	 } 
 	 else 
 	 {
 		System.out.println("***Fail: New Screen Creation In Item Screen");
 		excelReader.setCellData(xlfile, "Sheet1", 748, 9, resFail);
 		return false;
 	}
 }


public static boolean checkSaveButtonWithoutInputCodeMandatoryFieldsInAddGroupOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	

	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
	 
	 newGeneralName.sendKeys("ITEM GROUP");
	 
	 getAction().moveToElement(newGeneralName).sendKeys(Keys.TAB).perform();
	 
	 
	 
     getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
		 
     newGeneralCode.click();
       
     newGeneralCode.sendKeys("ITEM GROUP");
      
     newGeneralCode.sendKeys(Keys.TAB);
     
     
     newGeneralItemTypeDropDown.sendKeys("Raw Material");
     
     newGeneralItemTypeDropDown.sendKeys(Keys.TAB);
     
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	 
	 saveBtn.click();
	 
	 Thread.sleep(2000);
	 
	 getWebDriverWait().until(ExpectedConditions.visibilityOf(validationConfirmationMessage));
	 
	 String getValidationConfirmationMessage=validationConfirmationMessage.getText();
	 
	 System.out.println(getValidationConfirmationMessage);
	 
	 System.out.println("validationConfirmationMessage"+validationConfirmationMessage.getText());
	 
	 System.out.println("validationConfirmationMessage"+validationConfirmationMessage.getAttribute("Value"));
	 
	 if(validationConfirmationMessage.getText().equalsIgnoreCase("Saved Successfully"))
	 {
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 751, 9, resPass);
		 return true;
	 }
	 else
	 {
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 751, 9, resFail);
		 return false;
	 }
}



public static boolean checkItemAddGroupCreationScreenAfterSaving() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 		 

	
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
	 
	 newGeneralName.click();
	 
	 Thread.sleep(5000);
	 
	 boolean checkgroupscreen=ItemNewnewGeneralBtn.isDisplayed() && ItemNewUnitsBtn.isDisplayed() && 
			 ItemNewSettingsBtn.isDisplayed() && ItemNewClassificationBtn.isDisplayed() &&
			 ItemNewOtherDetailsBtn.isDisplayed() && ItemNewReplenishmentBtn.isDisplayed() &&
			 ItemNewOutletBtn.isDisplayed();
	 
      getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
	 
	 closeBtn.click();
	 
     getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewCreationName));
     
     System.out.println("itemNewCreationName"+itemNewCreationName.getText());
	 

	 if (checkgroupscreen==true && itemNewCreationName.getText().equalsIgnoreCase("ITEM GROUP")) 
	 {
		System.out.println("***Pass: New Screen Creation In Item Screen");
		excelReader.setCellData(xlfile, "Sheet1", 752, 9, resPass);
		return true;
	 } 
	 else 
	 {
		System.out.println("***Fail: New Screen Creation In Item Screen");
		excelReader.setCellData(xlfile, "Sheet1", 752, 9, resFail);
		return false;
	}
}



public static boolean checkEditOptionForItemGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
     getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
	 
	 itemFirstCheckBox.click();
	
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
 
	 masterEditBtn.click();
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
	 
	 System.out.println("nameTxt"+newGeneralName.getText());
	 
	 System.out.println("nameTxt"+newGeneralName.getAttribute("Value"));
	 
	 System.out.println("codeTxt"+newGeneralCode.getText());
	 
	 System.out.println("codeTxt"+newGeneralCode.getAttribute("Value"));
	 
	 if(newGeneralName.getAttribute("Value").equalsIgnoreCase("ITEM GROUP"))
	 { 
		 excelReader.setCellData(xlfile, "Sheet1", 754, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 754, 9, resFail);
		 return false;
	 }
}


public static boolean checkUpateForGroupItem() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 		 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
	 
	 newGeneralName.click();
	
	 newGeneralName.clear();

	 newGeneralName.sendKeys("ITEMS GROUP");
	 
	 getAction().moveToElement(newGeneralName).sendKeys(Keys.TAB).perform();
	 
	 Thread.sleep(3000);
	
	 newGeneralCode.click();
	 
	 newGeneralCode.clear();

	 newGeneralCode.sendKeys("ITEMS GROUP");
	 		 
     getWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	 
	 saveBtn.click();
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
	 
	 String getvalidationConfirmationMessage=validationConfirmationMessage.getText();
	 
	 System.out.println("getvalidationConfirmationMessage"+getvalidationConfirmationMessage);
	 
	 if(validationConfirmationMessage.getText().equalsIgnoreCase("Updated Successfully"))
	 {
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 755, 9, resPass);
		 return true;
	 }
	 else
	 {
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		 excelReader.setCellData(xlfile, "Sheet1", 755, 9, resFail);
		 return false;
	 }
}


public static boolean checkSaveOnUpdateItemGroupDisplayInItemGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewCreationName));
	 
	 System.out.println("New"+itemNewCreationName.getText());
 
	 if(itemNewCreationName.getText().equalsIgnoreCase("ITEMS GROUP"))
	 { 
		 excelReader.setCellData(xlfile, "Sheet1", 756, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 756, 9, resFail);
		 return false;
	 }
}




	public static boolean checkClickOnGroupItemToDisplayEmpty() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
     getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
	  
     itemFirstCheckBox.click();
	 		 
	 getAction().doubleClick(itemFirstCheckBox).perform();
	 
	 Thread.sleep(4004);
	 
	
	
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnEmptyGroup));
	
	 if( clickOnEmptyGroup.getText().equalsIgnoreCase("No record found"))
	 { 
		 excelReader.setCellData(xlfile, "Sheet1", 757, 9, resPass);
		 return true;
	 }
	 
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 757, 9, resFail);
		 return false;
	 }
   }


 
 
	public static boolean checkSaveItemInItemGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
	 Thread.sleep(3040);
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewBtn));
		
	 itemNewBtn.click();

	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
	 		 
	 newGeneralName.sendKeys("RMA STITEM");
	 
     getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
	 
     newGeneralCode.sendKeys("RMA FSITEM");
   
     newGeneralCode.sendKeys(Keys.TAB);
     
     newGeneralItemTypeDropDown.sendKeys("Raw Material");
     
     newGeneralItemTypeDropDown.sendKeys(Keys.TAB);
     
     Thread.sleep(3000);
     
   	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
   	 ItemNewUnitsBtn.click();
         
   	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultBaseUnitDropdown));
   	 itemUnitsDefaultBaseUnitDropdown.sendKeys("Pcs");
   	 itemUnitsDefaultBaseUnitDropdown.sendKeys( Keys.TAB);

   	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultSalesUnitDropdown));
   	 itemUnitsDefaultSalesUnitDropdown.sendKeys("Pcs");
   	 itemUnitsDefaultSalesUnitDropdown.sendKeys( Keys.TAB);
   	 
   	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitDropDown));
   	 itemUnitsDefaultPurchaseUnitDropDown.sendKeys("Dozs");
   	 itemUnitsDefaultPurchaseUnitDropDown.sendKeys( Keys.TAB);
   	 
     Thread.sleep(3040);     
   
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	 
	 saveBtn.click();
	 
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
	 String actdata=validationConfirmationMessage.getText();
	 String expdata="Saved Successfully";
		
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
	 closeValidationConfirmationMessage.click();
	 
	 Thread.sleep(3000);
	 
	 
	
	
	 
	 
	 
	 if(actdata.equalsIgnoreCase(expdata))
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 758, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 758, 9, resFail);
		 return false;
	 }
   }







public static boolean checkCloseOptionInItemCreationInItemCreation() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	 Thread.sleep(5040);
	 
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
	 closeBtn.click();
	 
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
	 itemFirstCheckBox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();
		
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(PropertiesDontMaintainStockbyBatchChekbox));
		PropertiesDontMaintainStockbyBatchChekbox.click();
			
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontinputBinChekbox));
		ItemPropertiesDontinputBinChekbox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesReserverByRadioBtn));
		ItemPropertiesReserverByRadioBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesRMAChekbox));
		ItemPropertiesRMAChekbox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click(); 
	 
	
	 
	 System.out.println("New"+itemNewCreationName.getText());
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewCreationName));
 
	 if(itemNewCreationName.getText().equalsIgnoreCase("RMA STITEM"))
	 { 
		 excelReader.setCellData(xlfile, "Sheet1", 759, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 759, 9, resFail);
		 return false;
	 }
 }


@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[1]/span[1]")
public static WebElement itemFirstLevelMastersDisplayInItemUnderG;

 public static boolean checkItemFirstLevel() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstLevelMastersDisplayInItemUnderG));
	 
	 itemFirstLevelMastersDisplayInItemUnderG.click();
	 
	 
	 Thread.sleep(9000);
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewCreationName));
	 
	 if(itemNewCreationName.getText().equalsIgnoreCase("ITEMS GROUP"))
	 { 
		 excelReader.setCellData(xlfile, "Sheet1", 760, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 760, 9, resFail);
		 return false;
     }
	 
}


	
	
	
  @FindBy(xpath = "//*[@id='btnClose']")
  private static WebElement itemCloseBtn;

  
  
  public boolean checkSaveCOGSItems() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
     excelReader = new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     System.out.println("********************* checkSaveCOGSItems Method Executes.............   *****************************");

     try
     {
	   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
    	masterNewBtn.click();
	   
	    // WA COGS ITEM
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
		newGeneralName.click();
		newGeneralName.sendKeys(excelReader.getCellData(xlSheetName, 511, 6));
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
		newGeneralCode.click();
		newGeneralCode.sendKeys(excelReader.getCellData(xlSheetName, 512, 6));
	
		getAction().moveToElement(newGeneralCode).sendKeys(Keys.TAB).perform();
		newGeneralItemTypeDropDown.click();
		newGeneralItemTypeDropDown.sendKeys(excelReader.getCellData(xlSheetName, 513, 6));
		newGeneralItemTypeDropDown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralValuationMethodDropDown));
		newGeneralValuationMethodDropDown.click();
		newGeneralValuationMethodDropDown.sendKeys(excelReader.getCellData(xlSheetName, 514, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
		ItemNewUnitsBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultBaseUnitDropdown));
		itemUnitsDefaultBaseUnitDropdown.click();
		itemUnitsDefaultBaseUnitDropdown.sendKeys(excelReader.getCellData(xlSheetName, 515, 6));
		itemUnitsDefaultBaseUnitDropdown.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultSalesUnitDropdown));
		itemUnitsDefaultSalesUnitDropdown.click();
		itemUnitsDefaultSalesUnitDropdown.sendKeys(excelReader.getCellData(xlSheetName, 516, 6));
		itemUnitsDefaultSalesUnitDropdown.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitDropDown));
		itemUnitsDefaultPurchaseUnitDropDown.click();
		itemUnitsDefaultPurchaseUnitDropDown.sendKeys(excelReader.getCellData(xlSheetName, 517, 6));
		itemUnitsDefaultPurchaseUnitDropDown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewOtherDetailsBtn));
		ItemNewOtherDetailsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostOfIssueitem));
		newOtherDetailsCostOfIssueitem.click();
		newOtherDetailsCostOfIssueitem.sendKeys(excelReader.getCellData(xlSheetName, 518, 6));
		newOtherDetailsCostOfIssueitem.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsStocksitem));
		newOtherDetailsStocksitem.click();
		newOtherDetailsStocksitem.sendKeys(excelReader.getCellData(xlSheetName, 519, 6));
		newOtherDetailsStocksitem.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsSalesAccount));
		newOtherDetailsSalesAccount.click();
		newOtherDetailsSalesAccount.sendKeys(excelReader.getCellData(xlSheetName, 520, 6));
		Thread.sleep(2000);
		newOtherDetailsSalesAccount.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostofShortageStockAC));
		newOtherDetailsCostofShortageStockAC.click();
		newOtherDetailsCostofShortageStockAC.sendKeys(excelReader.getCellData(xlSheetName, 521, 6));
		newOtherDetailsCostofShortageStockAC.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostofExcessStockAC));
		newOtherDetailsCostofExcessStockAC.click();
		newOtherDetailsCostofExcessStockAC.sendKeys(excelReader.getCellData(xlSheetName, 522, 6));
		newOtherDetailsCostofExcessStockAC.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OtherDetailsCostofSaleReturnAC));
		OtherDetailsCostofSaleReturnAC.click();
		OtherDetailsCostofSaleReturnAC.sendKeys(excelReader.getCellData(xlSheetName, 523, 6));
		OtherDetailsCostofSaleReturnAC.sendKeys(Keys.TAB);
		
    
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
     	saveBtn.click();
       
        String expSaveMessage = excelReader.getCellData(xlSheetName, 524, 7);
		
		boolean actSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveAccountMessage = true;

		String actSavingStatus= Boolean.toString(actSaveAccountMessage);
		
		excelReader.setCellData(xlfile, xlSheetName, 524, 8, actSavingStatus);
		
		System.out.println("Actual Saving Status of WA : "+actSavingStatus);
		System.out.println(" Expected Saving Status OF WA : "+expSaveAccountMessage);
		
		System.out.println("COGS POSTING Item Save Value Actual : " + actSaveAccountMessage + "  Value Expected : " + expSaveAccountMessage);
		
		
		Thread.sleep(2000);
		
		//FIFO ITEM
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
		newGeneralName.click();
		newGeneralName.sendKeys(excelReader.getCellData(xlSheetName, 525, 6));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
		newGeneralCode.click();
		newGeneralCode.sendKeys(excelReader.getCellData(xlSheetName, 526, 6));

		getAction().moveToElement(newGeneralCode).sendKeys(Keys.TAB).perform();
		newGeneralItemTypeDropDown.click();
		newGeneralItemTypeDropDown.sendKeys(excelReader.getCellData(xlSheetName, 527, 6));
		newGeneralItemTypeDropDown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralBinCapacity));
		newGeneralBinCapacity.click();
		newGeneralBinCapacity.sendKeys(excelReader.getCellData(xlSheetName, 528, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralValuationMethodDropDown));
		newGeneralValuationMethodDropDown.click();
		newGeneralValuationMethodDropDown.sendKeys(excelReader.getCellData(xlSheetName, 529, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
		ItemNewUnitsBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultBaseUnitDropdown));
		itemUnitsDefaultBaseUnitDropdown.click();
		itemUnitsDefaultBaseUnitDropdown.sendKeys(excelReader.getCellData(xlSheetName, 530, 6));
		itemUnitsDefaultBaseUnitDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultSalesUnitDropdown));
		itemUnitsDefaultSalesUnitDropdown.click();
		itemUnitsDefaultSalesUnitDropdown.sendKeys(excelReader.getCellData(xlSheetName, 531, 6));
		itemUnitsDefaultSalesUnitDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitDropDown));
		itemUnitsDefaultPurchaseUnitDropDown.click();
		itemUnitsDefaultPurchaseUnitDropDown.sendKeys(excelReader.getCellData(xlSheetName, 532, 6));
		itemUnitsDefaultPurchaseUnitDropDown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewOtherDetailsBtn));
		ItemNewOtherDetailsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostOfIssueitem));
		newOtherDetailsCostOfIssueitem.click();
  		newOtherDetailsCostOfIssueitem.sendKeys(excelReader.getCellData(xlSheetName, 533, 6));
  		newOtherDetailsCostOfIssueitem.sendKeys(Keys.TAB);
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsStocksitem));
  		newOtherDetailsStocksitem.click();
  		newOtherDetailsStocksitem.sendKeys(excelReader.getCellData(xlSheetName, 534, 6));
  		newOtherDetailsStocksitem.sendKeys(Keys.TAB);
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsSalesAccount));
  		newOtherDetailsSalesAccount.click();
  		newOtherDetailsSalesAccount.sendKeys(excelReader.getCellData(xlSheetName, 535, 6));
  		Thread.sleep(2000);
  		newOtherDetailsSalesAccount.sendKeys(Keys.TAB);
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostofShortageStockAC));
  		newOtherDetailsCostofShortageStockAC.click();
  		newOtherDetailsCostofShortageStockAC.sendKeys(excelReader.getCellData(xlSheetName, 536, 6));
  		newOtherDetailsCostofShortageStockAC.sendKeys(Keys.TAB);
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostofExcessStockAC));
  		newOtherDetailsCostofExcessStockAC.click();
  		newOtherDetailsCostofExcessStockAC.sendKeys(excelReader.getCellData(xlSheetName, 537, 6));
  		newOtherDetailsCostofExcessStockAC.sendKeys(Keys.TAB);
  		
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OtherDetailsCostofSaleReturnAC));
  		OtherDetailsCostofSaleReturnAC.click();
  		OtherDetailsCostofSaleReturnAC.sendKeys(excelReader.getCellData(xlSheetName, 538, 6));
  		OtherDetailsCostofSaleReturnAC.sendKeys(Keys.TAB);
		

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 	saveBtn.click();
   
	boolean actSaveFIFOMessage = checkValidationMessageboolean(expSaveMessage);
	boolean expSaveFIFOMessage = true;

	
	String actFIFOSavingStatus= Boolean.toString(actSaveFIFOMessage);
	String expFIFOSavingStatus=excelReader.getCellData(xlSheetName, 539, 7);
	
	
	excelReader.setCellData(xlfile, xlSheetName, 539, 8, actFIFOSavingStatus);
	
	System.out.println("Actual Saving Status of FIFO : "+actFIFOSavingStatus);
	System.out.println(" Expected Saving Status OF FIFO : "+expFIFOSavingStatus);
	
	System.out.println("COGS POSTING Item Save Value Actual : " + actSaveFIFOMessage + "  Value Expected : " + expSaveFIFOMessage);
	
	Thread.sleep(2000);
	
	        //BR ITEM
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
			newGeneralName.click();
			newGeneralName.sendKeys(excelReader.getCellData(xlSheetName, 540, 6));

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
			newGeneralCode.click();
			newGeneralCode.sendKeys(excelReader.getCellData(xlSheetName, 541, 6));

			getAction().moveToElement(newGeneralCode).sendKeys(Keys.TAB).perform();
			newGeneralItemTypeDropDown.click();
			newGeneralItemTypeDropDown.sendKeys(excelReader.getCellData(xlSheetName, 542, 6));
			newGeneralItemTypeDropDown.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralValuationMethodDropDown));
			newGeneralValuationMethodDropDown.click();
			newGeneralValuationMethodDropDown.sendKeys(excelReader.getCellData(xlSheetName, 543, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
			ItemNewUnitsBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultBaseUnitDropdown));
			itemUnitsDefaultBaseUnitDropdown.click();
			itemUnitsDefaultBaseUnitDropdown.sendKeys(excelReader.getCellData(xlSheetName, 544, 6));
			itemUnitsDefaultBaseUnitDropdown.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultSalesUnitDropdown));
			itemUnitsDefaultSalesUnitDropdown.click();
			itemUnitsDefaultSalesUnitDropdown.sendKeys(excelReader.getCellData(xlSheetName, 545, 6));
			itemUnitsDefaultSalesUnitDropdown.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitDropDown));
			itemUnitsDefaultPurchaseUnitDropDown.click();
			itemUnitsDefaultPurchaseUnitDropDown.sendKeys(excelReader.getCellData(xlSheetName, 546, 6));
			itemUnitsDefaultPurchaseUnitDropDown.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewOtherDetailsBtn));
			ItemNewOtherDetailsBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostOfIssueitem));
			newOtherDetailsCostOfIssueitem.click();
	  		newOtherDetailsCostOfIssueitem.sendKeys(excelReader.getCellData(xlSheetName, 547, 6));
	  		newOtherDetailsCostOfIssueitem.sendKeys(Keys.TAB);
	  		
	  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsStocksitem));
	  		newOtherDetailsStocksitem.click();
	  		newOtherDetailsStocksitem.sendKeys(excelReader.getCellData(xlSheetName, 548, 6));
	  		newOtherDetailsStocksitem.sendKeys(Keys.TAB);
	  		
	  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsSalesAccount));
	  		newOtherDetailsSalesAccount.click();
	  		newOtherDetailsSalesAccount.sendKeys(excelReader.getCellData(xlSheetName, 549, 6));
	  		Thread.sleep(2000);
	  		newOtherDetailsSalesAccount.sendKeys(Keys.TAB);
	  		
	  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostofShortageStockAC));
	  		newOtherDetailsCostofShortageStockAC.click();
	  		newOtherDetailsCostofShortageStockAC.sendKeys(excelReader.getCellData(xlSheetName, 550, 6));
	  		newOtherDetailsCostofShortageStockAC.sendKeys(Keys.TAB);
	  		
	  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostofExcessStockAC));
	  		newOtherDetailsCostofExcessStockAC.click();
	  		newOtherDetailsCostofExcessStockAC.sendKeys(excelReader.getCellData(xlSheetName, 551, 6));
	  		newOtherDetailsCostofExcessStockAC.sendKeys(Keys.TAB);
	  		
	  		
	  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OtherDetailsCostofSaleReturnAC));
	  		OtherDetailsCostofSaleReturnAC.click();
	  		OtherDetailsCostofSaleReturnAC.sendKeys(excelReader.getCellData(xlSheetName, 552, 6));
	  		OtherDetailsCostofSaleReturnAC.sendKeys(Keys.TAB);
			

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	 	saveBtn.click();
	   
		boolean actSaveBRMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveBRMessage = true;

		
		String actBRSavingStatus= Boolean.toString(actSaveBRMessage);
		String expBRSavingStatus=excelReader.getCellData(xlSheetName, 553, 7);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 553, 8, actBRSavingStatus);
		
		System.out.println("Actual Saving Status of BR : "+actBRSavingStatus);
		System.out.println(" Expected Saving Status OF BR : "+expBRSavingStatus);
		
		
		System.out.println("COGS POSTING Item Save Value Actual : " + actSaveBRMessage + "  Value Expected : " + expSaveBRMessage);	
	
		Thread.sleep(2000);
		
		
		//STD RATE ITEM
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralName));
		newGeneralName.click();
		newGeneralName.sendKeys(excelReader.getCellData(xlSheetName, 554, 6));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralCode));
		newGeneralCode.click();
		newGeneralCode.sendKeys(excelReader.getCellData(xlSheetName, 555, 6));

		getAction().moveToElement(newGeneralCode).sendKeys(Keys.TAB).perform();
		newGeneralItemTypeDropDown.click();
		newGeneralItemTypeDropDown.sendKeys(excelReader.getCellData(xlSheetName, 556, 6));
		newGeneralItemTypeDropDown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGeneralValuationMethodDropDown));
		newGeneralValuationMethodDropDown.click();
		newGeneralValuationMethodDropDown.sendKeys(excelReader.getCellData(xlSheetName, 557, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewUnitsBtn));
		ItemNewUnitsBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultBaseUnitDropdown));
		itemUnitsDefaultBaseUnitDropdown.click();
		itemUnitsDefaultBaseUnitDropdown.sendKeys(excelReader.getCellData(xlSheetName, 558, 6));
		itemUnitsDefaultBaseUnitDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultSalesUnitDropdown));
		itemUnitsDefaultSalesUnitDropdown.click();
		itemUnitsDefaultSalesUnitDropdown.sendKeys(excelReader.getCellData(xlSheetName, 559, 6));
		itemUnitsDefaultSalesUnitDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemUnitsDefaultPurchaseUnitDropDown));
		itemUnitsDefaultPurchaseUnitDropDown.click();
		itemUnitsDefaultPurchaseUnitDropDown.sendKeys(excelReader.getCellData(xlSheetName, 560, 6));
		itemUnitsDefaultPurchaseUnitDropDown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewOtherDetailsBtn));
		ItemNewOtherDetailsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostOfIssueitem));
		newOtherDetailsCostOfIssueitem.click();
  		newOtherDetailsCostOfIssueitem.sendKeys(excelReader.getCellData(xlSheetName, 561, 6));
  		newOtherDetailsCostOfIssueitem.sendKeys(Keys.TAB);
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsStocksitem));
  		newOtherDetailsStocksitem.click();
  		newOtherDetailsStocksitem.sendKeys(excelReader.getCellData(xlSheetName, 562, 6));
  		newOtherDetailsStocksitem.sendKeys(Keys.TAB);
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsSalesAccount));
  		newOtherDetailsSalesAccount.click();
  		newOtherDetailsSalesAccount.sendKeys(excelReader.getCellData(xlSheetName, 563, 6));
  		Thread.sleep(2000);
  		newOtherDetailsSalesAccount.sendKeys(Keys.TAB);
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostofShortageStockAC));
  		newOtherDetailsCostofShortageStockAC.click();
  		newOtherDetailsCostofShortageStockAC.sendKeys(excelReader.getCellData(xlSheetName, 564, 6));
  		newOtherDetailsCostofShortageStockAC.sendKeys(Keys.TAB);
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newOtherDetailsCostofExcessStockAC));
  		newOtherDetailsCostofExcessStockAC.click();
  		newOtherDetailsCostofExcessStockAC.sendKeys(excelReader.getCellData(xlSheetName, 565, 6));
  		newOtherDetailsCostofExcessStockAC.sendKeys(Keys.TAB);
  		
  		
  		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OtherDetailsCostofSaleReturnAC));
  		OtherDetailsCostofSaleReturnAC.click();
  		OtherDetailsCostofSaleReturnAC.sendKeys(excelReader.getCellData(xlSheetName, 566, 6));
  		OtherDetailsCostofSaleReturnAC.sendKeys(Keys.TAB);
		

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 	saveBtn.click();
 	
	boolean actSaveSTDRATEMessage = checkValidationMessageboolean(expSaveMessage);
	boolean expSaveSTDRATEMessage = true;
	
    String actSTDSavingStatus= Boolean.toString(actSaveSTDRATEMessage);
	String expSTDSavingStatus=excelReader.getCellData(xlSheetName, 567, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 567, 8, actSTDSavingStatus);
	
	System.out.println("Actual Saving Status of STD : "+actSTDSavingStatus);
	System.out.println(" Expected Saving Status OF STD : "+expSTDSavingStatus);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
	closeBtn.click();

	System.out.println("COGS POSTING Item Save Value Actual : " + actSaveSTDRATEMessage + "  Value Expected : " + expSaveSTDRATEMessage);	
		
		if ( actSaveAccountMessage==expSaveAccountMessage && actSaveAccountMessage==expSaveAccountMessage && 
				actFIFOSavingStatus.equalsIgnoreCase(expFIFOSavingStatus) && actBRSavingStatus.equalsIgnoreCase(expBRSavingStatus) && 
				actSTDSavingStatus.equalsIgnoreCase(expSTDSavingStatus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 510, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 510, 9, resFail);
			return false;
		}
	  }
     catch (Exception e) 
     {
     	  String exception =e.getMessage();
     	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 510, 10, exception);
     	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
     	  return false;
     }
  }
  
  
  
  
  public static boolean checkSavePropertiesForCOGSItems() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
 	excelReader = new ExcelReader(POJOUtility.getExcelPath());
 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

 	System.out.println("********************************** checkUnCheckingSelectWarehouseAndCheckUnSelectWarehouse ************************************************");
 		
 	try
 	{	
 		//Stock Item for first item
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
 		itemFirstCheckBox.click();
 				
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
 		itemPropertiesBtn.click();

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStockbyBatchCheckbox));
		dontMaintainStockbyBatchCheckbox.click();
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontinputBinChekbox));
		ItemPropertiesDontinputBinChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontMaintainStocksByRMAChekbox));
		ItemPropertiesDontMaintainStocksByRMAChekbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qualitiesRadioBtn));
		qualitiesRadioBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();
		
		boolean actSummaryErrorMessageCS  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessageCS  = true;
		
		
		String actSummaryValidationMessageCS= Boolean.toString(actSummaryErrorMessageCS);
		String expSummaryValidationMessageCS=excelReader.getCellData(xlSheetName, 569, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 569, 8, actSummaryValidationMessageCS);
		
		System.out.println("Saving COGS Account                  : " + actSummaryErrorMessageCS                + " Value Expected : " + expSummaryErrorMessageCS);
		
		System.out.println("actSummaryValidationMessageCS   : "+actSummaryValidationMessageCS);
		System.out.println("expSummaryValidationMessageCS   : "+expSummaryValidationMessageCS);		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectSecondRow));
		selectSecondRow.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();
		

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontinputBinChekbox));
		ItemPropertiesDontinputBinChekbox.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontMaintainStocksByRMAChekbox));
		ItemPropertiesDontMaintainStocksByRMAChekbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reserveByRadioBtn));
		reserveByRadioBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCheckbox));
		batchCheckbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();
		
		boolean actSummaryErrorMessageCBS  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessageCBS  = true;
		
		
		String actSummaryValidationMessageCBS= Boolean.toString(actSummaryErrorMessageCBS);
		String expSummaryValidationMessageCBS=excelReader.getCellData(xlSheetName, 570, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 570, 8, actSummaryValidationMessageCBS);
		
		System.out.println("actSummaryValidationMessageCBS   : "+actSummaryValidationMessageCBS);
		System.out.println("expSummaryValidationMessageCBS   : "+expSummaryValidationMessageCBS);	
		
		System.out.println("Saving COGS Account                  : " + actSummaryErrorMessageCBS                + " Value Expected : " + expSummaryErrorMessageCBS);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectThirdRow));
		selectThirdRow.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();
        
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStockbyBatchCheckbox));
		dontMaintainStockbyBatchCheckbox.click();
				
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontinputBinChekbox));
		ItemPropertiesDontinputBinChekbox.click();*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontMaintainStocksByRMAChekbox));
		ItemPropertiesDontMaintainStocksByRMAChekbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qualitiesRadioBtn));
		qualitiesRadioBtn.click();
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();
		
		
		boolean actSummaryErrorMessageCSS  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessageCSS  = true;
		
		String actSummaryValidationMessageCSS= Boolean.toString(actSummaryErrorMessageCSS);
		String expSummaryValidationMessageCSS=excelReader.getCellData(xlSheetName, 571, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 571, 8, actSummaryValidationMessageCSS);
		
		System.out.println("Saving COGS Account                  : " + actSummaryErrorMessageCSS                + " Value Expected : " + expSummaryErrorMessageCSS);
		
		System.out.println("actSummaryValidationMessageCSS   : "+actSummaryValidationMessageCSS);
		System.out.println("expSummaryValidationMessageCSS   : "+expSummaryValidationMessageCSS);	
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectFourthRow));
	    selectFourthRow.click();
			
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();

	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStockbyBatchCheckbox));
			dontMaintainStockbyBatchCheckbox.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontinputBinChekbox));
			ItemPropertiesDontinputBinChekbox.click();

			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesDontMaintainStocksByRMAChekbox));
			ItemPropertiesDontMaintainStocksByRMAChekbox.click();*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(qualitiesRadioBtn));
			qualitiesRadioBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
			ItemPropertiesOkBtn.click();
		
			boolean actSummaryErrorMessageCSSS  = checkErrorMessageIsDisplayingOrNotDisplaying();
			boolean expSummaryErrorMessageCSSS  = true;
			
			String actSummaryValidationMessageCSSS= Boolean.toString(actSummaryErrorMessageCSSS);
			String expSummaryValidationMessageCSSS=excelReader.getCellData(xlSheetName, 572, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 572, 8, actSummaryValidationMessageCSSS);
			
			System.out.println("Saving COGS Account                  : " + actSummaryErrorMessageCSSS                + " Value Expected : " + expSummaryErrorMessageCSSS);
		
			
			System.out.println("actSummaryValidationMessageCSSS   : "+actSummaryValidationMessageCSSS);
			System.out.println("expSummaryValidationMessageCSSS   : "+expSummaryValidationMessageCSSS);	
			
		if(actSummaryErrorMessageCSSS==expSummaryErrorMessageCSSS && actSummaryValidationMessageCSSS.equalsIgnoreCase(expSummaryValidationMessageCSSS) && 
				actSummaryValidationMessageCS.equalsIgnoreCase(expSummaryValidationMessageCS) && actSummaryValidationMessageCSS.equalsIgnoreCase(expSummaryValidationMessageCSS) &&
				actSummaryValidationMessageCBS.equalsIgnoreCase(expSummaryValidationMessageCBS))
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 568, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 568, 9, resFail);
			return false;
		}
		
 	}
 	catch (Exception e) 
 	{
 	 String exception =e.getMessage();
 	 excelReader.setExceptionInExcel(xlfile, xlSheetName, 568, 10, exception);
 	 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
 	 return false;
 	}
   }
  
  
  
  
  public static boolean checkCloseItemMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkCloseItemMaster ********************************");

    try
    {	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCloseBtn));
		itemCloseBtn.click();
       
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		boolean actLoadDashboard          = labelDashboard.isDisplayed();
		boolean actSelectDashboard        = selectDashboard.isDisplayed();
		boolean actNewDashboard           = newAddDashBoard.isDisplayed();
		boolean actDashboardCustomization = dashboardCustomizationSettings.isDisplayed();

		boolean expLoadDashboard          = true;
		boolean expSelectDashboard        = true;
		boolean expNewDashboard           = true;
		boolean expDashboardCustomization = true;

		System.out.println("Load Dashbord Value Actual          : " + actLoadDashboard +         " Value Expected : " + expLoadDashboard);
		System.out.println("Select Dashbord Value Actual        : " + actSelectDashboard +       " Value Expected : " + expSelectDashboard);
		System.out.println("New Dashbord Value Actual           : " + actNewDashboard +          " Value Expected : " + expNewDashboard);
		System.out.println("Dashbord Customization Value Actual : " + actDashboardCustomization+ " Value Expected : " + expDashboardCustomization);

		if (actLoadDashboard == expLoadDashboard && actSelectDashboard == expSelectDashboard
				&& actNewDashboard == expNewDashboard && actDashboardCustomization == expDashboardCustomization) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 573, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 573, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
 	{
 	 String exception =e.getMessage();
 	 excelReader.setExceptionInExcel(xlfile, xlSheetName, 573, 10, exception);
 	 System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
 	 return false;
 	}
  }
  
  
  
  
  //BUYER PRICE BOOK PAGE

	@FindBy(xpath = "//*[@id='ctrlOptionProPriceBookH']")
	private static WebElement buyerPriceBook_PriceBook;

	@FindBy(xpath = "//*[@id='ctrlOptionProPriceBookH_input_settings']/span")
	private static WebElement buyerPriceBook_PriceBookSettingBtn;

	@FindBy(xpath = "//*[@id='txtAbbreviation']")
	private static WebElement buyerPriceBook_AbbreviationBtn;

	@FindBy(xpath = "//*[@id='PriceBookContainer']/div[2]/nav/div/div[1]/a/div/span[2]")
	private static WebElement buyerPriceBookLabel;

	@FindBy(xpath = "//*[@id='btnClear']")
	private static WebElement buyerPriceBookClearBtn;

	@FindBy(xpath = "//*[@id='btnPaste']")
	private static WebElement buyerPriceBookPasteBtn;

	@FindBy(xpath = "//*[@id='btnCopy']")
	private static WebElement buyerPriceBookCopyBtn;

	@FindBy(xpath = "//*[@id='btnSelectAll']")
	private static WebElement buyerPriceBookSelectAllBtn;

	@FindBy(xpath = "//*[@id='btnClose']")
	private static WebElement buyerPriceBookCloseBtn;

	@FindBy(xpath = "//*[@id='btnSave']")
	private static WebElement buyerPriceBookSaveBtn;

	@FindBy(xpath = "//span[@id='btnClose']")
	private static WebElement buyerPriceBookCloseAfterImport;

	@FindBy(xpath = "//*[@id='btnDelete']")
	private static WebElement buyerPriceBookDeleteBtn;

	@FindBy(xpath = "//*[@id='StartingDateH']")
	private static WebElement buyerPriceBookStaringDate;

	@FindBy(xpath = "//*[@id='EndingDateH']")
	private static WebElement buyerPriceBookENdingDate;

	@FindBy(xpath = "//*[@id='InActive']")
	private static WebElement buyerPriceBookInActiveCheckBox;

	@FindBy(xpath = "//*[@id='FilterProduct']")
	private static WebElement buyerPriceBookFilter_Item;

	@FindBy(xpath = "//*[@id='FilterCurrency']")
	private static WebElement buyerPriceBookFilter_Currency;

	@FindBy(xpath = "//*[@id='FilterCustomer']")
	private static WebElement buyerPriceBookFilter_Customer;

	@FindBy(xpath = "//*[@id='FilterDepartment']")
	private static WebElement buyerPriceBookFilter_Department;

	@FindBy(xpath = "//*[@id='btnFilterClear']")
	private static WebElement buyerPriceBookFilter_ClearBtn;

	@FindBy(xpath = "//*[@id='btnFilter']")
	private static WebElement buyerPriceBookFilter_FilterBtn;

	@FindBy(xpath = "//*[@id='btnLoad']")
	private static WebElement buyerPriceBookFilter_FilterAndLoadBtn;

	@FindBy(xpath = "//*[@id='btnAdvExcelImport']")
	private static WebElement buyerPriceBook_AdvanceExcelImportBtn;

	@FindBy(xpath = "//*[@id='btnPBPrintRateHistory']")
	private static WebElement buyerPriceBook_PrintRateHistoryBtn;

	@FindBy(xpath = "//*[@id='btnPBExportToXML']")
	private static WebElement buyerPriceBook_ExportToXmlBtn;

	@FindBy(xpath = "//span[contains(text(),'Import From XML')]")
	private static WebElement buyerPriceBook_ImportFromXmlBtn;

	@FindBy(xpath = "//form[@id='formLoadDataXML']//button[@id='btnExporttoExcel']")
	private static WebElement buyerPriceBook_ExportToExcel;

	@FindBy(xpath = "//button[@id='btnPBImportFromExcel']")
	private static WebElement buyerPriceBook_ImportFromExcel;

	@FindBy(xpath = "//button[@id='btnViewPrice']")
	private static WebElement buyerPriceBook_ViewPrice;

	@FindBy(xpath = "//button[@id='btnUpdatePriceList']")
	private static WebElement buyerPriceBook_UpdatePriceList;

	@FindBy(xpath = "//*[@id='toggleDropDown']/i")
	private static WebElement buyerPriceBook_CustamizeSettingBtn;

	@FindBy(xpath = "//*[@id='chkDateRange']")
	private static WebElement buyerPriceBook_CustamizeDateRangeCheckBox;

	@FindBy(xpath = "//*[@id='chkCustomer']")
	private static WebElement buyerPriceBook_CustomizeVendorCheckBox;

	@FindBy(xpath = "//*[@id='chkDepartment']")
	private static WebElement buyerPriceBook_WarehouseCheckBox;

	@FindBy(xpath = "//*[@id='chkQtyRange']")
	private static WebElement buyerPriceBook_QualityRangeCheckBox;

	@FindBy(xpath = "//*[@id='chkCurrency']")
	private static WebElement buyerPriceBook_CurrencyCheckBox;

	@FindBy(xpath = "//*[@id='chkUnit']")
	private static WebElement buyerPriceBook_UnitCheckBox;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_1']//div[contains(text(),'Item')]")
	private static WebElement gridItemColoumn;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_3']//div[1]")
	private static WebElement gridWareHouseColoumn;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_11']//div[contains(text(),'Rate')]")
	private static WebElement gridRateColoumn;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_12']//div[contains(text(),'Po')]")
	private static WebElement gridPoColoumn;

	@FindBy(xpath = "//div[contains(text(),'Pt')]")
	private static WebElement gridPtColoumn;

	@FindBy(xpath = "//*[@id='16']/div/span")
	private static WebElement settingsmenuBtn;

	@FindBy(xpath = "//span[contains(text(),'Configure Transactions')]")
	private static WebElement configureTransactionBtn;

	@FindBy(xpath = "//select[@id='SellingRate']")
	private static WebElement sellingsRateDropdown;

	@FindBy(xpath = "//select[@id='BuyingRates']")
	private static WebElement buyingRatesdropdown;

	@FindBy(xpath = "//span[@id='updateButton']")
	private static WebElement updateBtn;

	
	@FindBy (xpath="//*[@id='myNavbar']/ul/li")
	public static List<WebElement> itemBuyerPriceBookHeaderList;
	
	@FindBy (xpath="//*[@id='formLoadDataXML']/button")
	public static List<WebElement> itemBuyerPriceBookBottomList;
	
	
 public boolean checkClickOnBuyerPriceBook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {
   excelReader = new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

   System.out.println("*************************************************** checkClickOnBuyerPriceBook *****************************************************************");

   try
   {
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	homeMenu.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
	mastersMenu.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemsMenu));
	itemsMenu.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookMenu));
	buyerPriceBookMenu.click();
	
	
  /*   Thread.sleep(2000);
	
	ArrayList<String> actitemBuyerPriceBookHeaderList=new ArrayList<String>();
		
	int BuyerPriceBookHeaderList =itemBuyerPriceBookHeaderList.size();
	 		
	System.err.println("BuyerPriceBookHeaderList   :  "+BuyerPriceBookHeaderList);
	 		
	     for (int i = 0; i < BuyerPriceBookHeaderList; i++) 
		 {
			String data=itemBuyerPriceBookHeaderList.get(i).getText();
			actitemBuyerPriceBookHeaderList.add(data);
		 }
		 		
	String actMasterItemBuyerPriceBookHeader=actitemBuyerPriceBookHeaderList.toString();
	String expMasterItemBuyerPriceBookHeader=excelReader.getCellData(xlSheetName, 576, 7);
		 		
	excelReader.setCellData(xlfile, xlSheetName, 576, 8, actMasterItemBuyerPriceBookHeader);
		    	
    System.err.println("  Actual  MasterItemBuyerPriceBookHeader : "+actMasterItemBuyerPriceBookHeader);
    System.err.println("  Expected  MasterItemBuyerPriceBookHeader : "+expMasterItemBuyerPriceBookHeader);
	
	
    ArrayList<String> actitemBuyerPriceBookBottomList=new ArrayList<String>();
	
	int BuyerPriceBookBottomList =itemBuyerPriceBookBottomList.size();
	 		
	System.err.println("BuyerPriceBookBottomList   :  "+BuyerPriceBookBottomList);
	 		
	     for (int i = 0; i < BuyerPriceBookBottomList; i++) 
		 {
			String data=itemBuyerPriceBookBottomList.get(i).getText();
			actitemBuyerPriceBookBottomList.add(data);
		 }
		 		
	String actMasterItemBuyerPriceBookBottom=actitemBuyerPriceBookBottomList.toString();
	String expMasterItemBuyerPriceBookBottom=excelReader.getCellData(xlSheetName, 577, 7);
		 		
	excelReader.setCellData(xlfile, xlSheetName, 577, 8, actMasterItemBuyerPriceBookBottom);
		    	
    System.err.println("  Actual  MasterItemBuyerPriceBookBottom : "+actMasterItemBuyerPriceBookBottom);
    System.err.println("  Expected  MasterItemBuyerPriceBookBottom : "+expMasterItemBuyerPriceBookBottom);
	
	*/
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookSaveBtn));
	boolean actBuyerPriceBook                         = buyerPriceBook_PriceBook.isDisplayed();
	boolean actBuyerPriceBookAbbreviation             = buyerPriceBook_AbbreviationBtn.isDisplayed();
	boolean actBuyerPriceBookLabel                    = buyerPriceBookLabel.isDisplayed();
	boolean actBuyerPriceBookClearBtn                 = buyerPriceBookClearBtn.isDisplayed();
	boolean actBuyerPriceBookPasteBtn                 = buyerPriceBookPasteBtn.isDisplayed();
	boolean actBuyerPriceBookCopyBtn                  = buyerPriceBookCopyBtn.isDisplayed();
	boolean actBuyerPriceBookSelectAllBtn             = buyerPriceBookSelectAllBtn.isDisplayed();
	boolean actBuyerPriceBookCloseBtn                 = buyerPriceBookCloseBtn.isDisplayed();
	boolean actBuyerPriceBookSaveBtn                  = buyerPriceBookSaveBtn.isDisplayed();
	boolean actBuyerPriceBookDeleteBtn                = buyerPriceBookDeleteBtn.isDisplayed();
	boolean actBuyerPriceBookStartingDate             = buyerPriceBookStaringDate.isDisplayed();
	boolean actBuyerPriceBookEndingDate               = buyerPriceBookENdingDate.isDisplayed();
	boolean actBuyerPriceBookInActiveCheckbox         = buyerPriceBookInActiveCheckBox.isDisplayed();
	boolean actBuyerPriceBookFilterItem               = buyerPriceBookFilter_Item.isDisplayed();
	boolean actBuyerPriceBookFilterCurrency           = buyerPriceBookFilter_Currency.isDisplayed();
	boolean actBuyerPriceBookFilterCustomer           = buyerPriceBookFilter_Customer.isDisplayed();
	boolean actBuyerPriceBookFilterDepartment         = buyerPriceBookFilter_Department.isDisplayed();
	boolean actBuyerPriceBookFilterClearBtn           = buyerPriceBookFilter_ClearBtn.isDisplayed();
	boolean actBuyerPriceBookFilterBtn                = buyerPriceBookFilter_FilterBtn.isDisplayed();
	boolean actBuyerPriceBookLoadBtn                  = buyerPriceBookFilter_FilterAndLoadBtn.isDisplayed();
	boolean actBuyerPriceBookAdvanceExportImportExcel = buyerPriceBook_AdvanceExcelImportBtn.isDisplayed();
	boolean actBuyerPriceBookHistory                  = buyerPriceBook_PrintRateHistoryBtn.isDisplayed();
	boolean actBuyerPriceBookExportXML                = buyerPriceBook_ExportToXmlBtn.isDisplayed();
	boolean actBuyerPriceBookImportFromXML            = buyerPriceBook_ImportFromXmlBtn.isDisplayed();
	boolean actBuyerPriceBookExportExcel              = buyerPriceBook_ExportToExcel.isDisplayed();
	boolean actBuyerPriceBookImportFromExcel          = buyerPriceBook_ImportFromExcel.isDisplayed();
	boolean actBuyerPriceBookViewPrice                = buyerPriceBook_ViewPrice.isDisplayed();
	boolean actBuyerPriceBookUpdatePriceList          = buyerPriceBook_UpdatePriceList.isDisplayed();
	boolean actBuyerPriceBookGridItem                 = gridItemColoumn.isDisplayed();
	boolean actBuyerPriceBookRateColumn               = gridRateColoumn.isDisplayed();
	/*boolean actBuyerPriceBookGridPOColoumn            = gridPoColoumn.isDisplayed();
	boolean actBuyerPriceBookPTColumn                 = gridPtColoumn.isDisplayed();*/

	boolean expBuyerPriceBook                         = true;
	boolean expBuyerPriceBookAbbreviation             = true;
	boolean expBuyerPriceBookLabel                    = true;
	boolean expBuyerPriceBookClearBtn                 = true;
	boolean expBuyerPriceBookPasteBtn                 = true;
	boolean expBuyerPriceBookCopyBtn                  = true;
	boolean expBuyerPriceBookSelectAllBtn             = true;
	boolean expBuyerPriceBookCloseBtn                 = true;
	boolean expBuyerPriceBookSaveBtn                  = true;
	boolean expBuyerPriceBookDeleteBtn                = true;
	boolean expBuyerPriceBookStartingDate 			  = true;
	boolean expBuyerPriceBookEndingDate 			  = true;
	boolean expBuyerPriceBookInActiveCheckbox 		  = true;
	boolean expBuyerPriceBookFilterItem               = true;
	boolean expBuyerPriceBookFilterCurrency 		  = true;
	boolean expBuyerPriceBookFilterCustomer 		  = true;
	boolean expBuyerPriceBookFilterDepartment 		  = true;
	boolean expBuyerPriceBookFilterClearBtn 		  = true;
	boolean expBuyerPriceBookFilterBtn 			      = true;
	boolean expBuyerPriceBookLoadBtn 				  = true;
	boolean expBuyerPriceBookAdvanceExportImportExcel = true;
	boolean expBuyerPriceBookHistory                  = true;
	boolean expBuyerPriceBookExportXML                = true;
	boolean expBuyerPriceBookImportFromXML            = true;
	boolean expBuyerPriceBookExportExcel              = true;
	boolean expBuyerPriceBookImportFromExcel          = true;
	boolean expBuyerPriceBookViewPrice                = true;
	boolean expBuyerPriceBookUpdatePriceList          = true;
	boolean expBuyerPriceBookGridItem                 = true;
	boolean expBuyerPriceBookRateColumn               = true;
	/*boolean expBuyerPriceBookGridPOColoumn            = true;
	boolean expBuyerPriceBookPTColumn                 = true;*/

	System.out.println("Buyer Price Book Value Actual              : " + actBuyerPriceBook +                        " Value Expected : "+ expBuyerPriceBook);
	System.out.println("Buyer Price Book Abbreviation Value Actual : " + actBuyerPriceBookAbbreviation+             " Value Expected : " + expBuyerPriceBookAbbreviation);
	System.out.println("Buyer Price Book Label Value Actual        : " + actBuyerPriceBookLabel+                    " Value Expected : " + expBuyerPriceBookLabel);
	System.out.println("Clear Button Value Actual                  : " + actBuyerPriceBookClearBtn+                 " Value Expected : " + expBuyerPriceBookClearBtn);
	System.out.println("Paste Button Value Actual                  : " + actBuyerPriceBookPasteBtn+                 " Value Expected : " + expBuyerPriceBookPasteBtn);
	System.out.println("Copy Button Value Actual                   : " + actBuyerPriceBookCopyBtn+                  " Value Expected : " + expBuyerPriceBookCopyBtn);
	System.out.println("Select All Button Value Actual             : " + actBuyerPriceBookSelectAllBtn+             " Value Expected : " + expBuyerPriceBookSelectAllBtn);
	System.out.println("Close Button Value Actual                  : " + actBuyerPriceBookCloseBtn+                 " Value Expected : " + expBuyerPriceBookCloseBtn);
	System.out.println("Save Button Value Actual                   : " + actBuyerPriceBookSaveBtn+                  " Value Expected : " + expBuyerPriceBookSaveBtn);
	System.out.println("Delete Button Value Actual                 : " + actBuyerPriceBookDeleteBtn+                " Value Expected : " + expBuyerPriceBookDeleteBtn);
	System.out.println("Starting Date Value Actual                 : " + actBuyerPriceBookStartingDate+             " Value Expected : " + expBuyerPriceBookStartingDate);
	System.out.println("Ending Date Value Actual                   : " + actBuyerPriceBookEndingDate+               " Value Expected : " + expBuyerPriceBookEndingDate);
	System.out.println("In Active Value Actual                     : " + actBuyerPriceBookInActiveCheckbox+         " Value Expected : " + expBuyerPriceBookInActiveCheckbox);
    System.out.println("Filter Item Value Actual                   : " + actBuyerPriceBookFilterItem+               " Value Expected : " + expBuyerPriceBookFilterItem);
	System.out.println("Filter Currency Value Actual               : " + actBuyerPriceBookFilterCurrency+           " Value Expected : " + expBuyerPriceBookFilterCurrency);
	System.out.println("Filter Customer Value Actual               : " + actBuyerPriceBookFilterCustomer+           " Value Expected : " + expBuyerPriceBookFilterCustomer);
	System.out.println("Filter Department Value Actual             : " + actBuyerPriceBookFilterDepartment+         " Value Expected : " + expBuyerPriceBookFilterDepartment);
	System.out.println("Filter Clear Button Value Actual           : " + actBuyerPriceBookFilterClearBtn+           " Value Expected : " + expBuyerPriceBookFilterClearBtn);
	System.out.println("Filter Button Value Actual                 : " + actBuyerPriceBookFilterBtn+                " Value Expected : " + expBuyerPriceBookFilterBtn);
	System.out.println("Load Button Value Actual                   : " + actBuyerPriceBookLoadBtn+                  " Value Expected : " + expBuyerPriceBookLoadBtn);
	System.out.println("Advance Import and Export Value Actual     : " + actBuyerPriceBookAdvanceExportImportExcel+ " Value Expected : " + expBuyerPriceBookAdvanceExportImportExcel);
	System.out.println("History Value Actual                       : " + actBuyerPriceBookHistory+                  " Value Expected : " + expBuyerPriceBookHistory);
	System.out.println("Export XML Value Actual                    : " + actBuyerPriceBookExportXML+                " Value Expected : " + expBuyerPriceBookExportXML);
	System.out.println("Import XML Value Actual                    : " + actBuyerPriceBookImportFromXML+            " Value Expected : " + expBuyerPriceBookImportFromXML);
	System.out.println("Export Excel Value Actual                  : " + actBuyerPriceBookExportExcel+              " Value Expected : " + expBuyerPriceBookExportExcel);
	System.out.println("Import from Excel Value Actual             : " + actBuyerPriceBookImportFromExcel+          " Value Expected : " + expBuyerPriceBookImportFromExcel);
	System.out.println("View Price Button Value Actual             : " + actBuyerPriceBookViewPrice+                " Value Expected : " + expBuyerPriceBookViewPrice);
	System.out.println("Buyer Price Book Value Actual              : " + actBuyerPriceBookUpdatePriceList+          " Value Expected : " + expBuyerPriceBookUpdatePriceList);
	System.out.println("Buyer Price Book Abbreviation Value Actual : " + actBuyerPriceBookGridItem+                 " Value Expected : " + expBuyerPriceBookGridItem);
	System.out.println("Buyer Price Book Label Value Actual        : " + actBuyerPriceBookRateColumn+               " Value Expected : " + expBuyerPriceBookRateColumn);
/*	System.out.println("Clear Button Value Actual                  : " + actBuyerPriceBookGridPOColoumn+            " Value Expected : " + expBuyerPriceBookGridPOColoumn);
	System.out.println("Buyer Price Book Value Actual              : " + actBuyerPriceBookPTColumn+                 " Value Expected : " + expBuyerPriceBookPTColumn);
*/
	
	
	boolean TestResult=actBuyerPriceBook == expBuyerPriceBook && actBuyerPriceBookAbbreviation == expBuyerPriceBookAbbreviation
						&& actBuyerPriceBookLabel == expBuyerPriceBookLabel
						&& actBuyerPriceBookClearBtn == expBuyerPriceBookClearBtn
						&& actBuyerPriceBookPasteBtn == expBuyerPriceBookPasteBtn
						&& actBuyerPriceBookCopyBtn == expBuyerPriceBookCopyBtn
						&& actBuyerPriceBookSelectAllBtn == expBuyerPriceBookSelectAllBtn
						&& actBuyerPriceBookCloseBtn == expBuyerPriceBookCloseBtn
						&& actBuyerPriceBookSaveBtn == expBuyerPriceBookSaveBtn
						&& actBuyerPriceBookDeleteBtn == expBuyerPriceBookDeleteBtn
						&& actBuyerPriceBookStartingDate == expBuyerPriceBookStartingDate
						&& actBuyerPriceBookEndingDate == expBuyerPriceBookEndingDate
						&& actBuyerPriceBookInActiveCheckbox == expBuyerPriceBookInActiveCheckbox
						&& actBuyerPriceBookFilterItem == expBuyerPriceBookFilterItem
						&& actBuyerPriceBookFilterCurrency == expBuyerPriceBookFilterCurrency
						&& actBuyerPriceBookFilterCustomer == expBuyerPriceBookFilterCustomer
						&& actBuyerPriceBookFilterDepartment == expBuyerPriceBookFilterDepartment
						&& actBuyerPriceBookFilterClearBtn == expBuyerPriceBookFilterClearBtn
						&& actBuyerPriceBookFilterBtn == expBuyerPriceBookFilterBtn
						&& actBuyerPriceBookLoadBtn == expBuyerPriceBookLoadBtn
						&& actBuyerPriceBookAdvanceExportImportExcel == expBuyerPriceBookAdvanceExportImportExcel
						&& actBuyerPriceBookHistory == expBuyerPriceBookHistory
						&& actBuyerPriceBookExportXML == expBuyerPriceBookExportXML
						&& actBuyerPriceBookImportFromXML == expBuyerPriceBookImportFromXML
						&& actBuyerPriceBookExportExcel == expBuyerPriceBookExportExcel
						&& actBuyerPriceBookImportFromExcel == expBuyerPriceBookImportFromExcel
						&& actBuyerPriceBookViewPrice == expBuyerPriceBookViewPrice
						&& actBuyerPriceBookUpdatePriceList == expBuyerPriceBookUpdatePriceList
						&& actBuyerPriceBookGridItem == expBuyerPriceBookGridItem
						&& actBuyerPriceBookRateColumn == expBuyerPriceBookRateColumn;
	
	
	String actBuyerHomePageBody=Boolean.toString(TestResult);
	String expBuyerHomePageBody=excelReader.getCellData(xlSheetName, 578, 7);
	
	
	excelReader.setCellData(xlfile, xlSheetName, 578, 8, actBuyerHomePageBody.toUpperCase());
	
	
	if (actBuyerHomePageBody.equalsIgnoreCase(expBuyerHomePageBody)) 
	{
		excelReader.setCellData(xlfile, xlSheetName, 575, 9, resPass);
		return true;
	}
	else 
	{
		excelReader.setCellData(xlfile, xlSheetName, 575, 9, resFail);
		return false;
	}
  }
	   catch (Exception e) 
	   {
	   String exception =e.getMessage();
	   excelReader.setExceptionInExcel(xlfile, xlSheetName, 575, 10, exception);
	   System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   return false;
	   }
    
  }

 

	@FindBy (xpath="//*[@id='ddlMenu']/li")
	public static List<WebElement> itemBuyerPriceBookCustomizationList;
 
 

	
 public boolean checkClickOnCustomizationSettingsOptionInBuyerPriceBook() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

  excelReader = new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("************************************* checkClickOnCustomizationSettingsOptionInBuyerPriceBook ***************************************");
  
  try
  {
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_PriceBook));
    buyerPriceBook_PriceBook.click();
    buyerPriceBook_PriceBook.sendKeys(excelReader.getCellData(xlSheetName, 580, 6));
    Thread.sleep(2000);
    buyerPriceBook_PriceBook.sendKeys(Keys.TAB);

    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeSettingBtn));
    buyerPriceBook_CustamizeSettingBtn.click();

    
    ArrayList<String> actitemBuyerPriceBookCustomizationList=new ArrayList<String>();
	
	int itemBuyerPriceBookCustomizationCount =itemBuyerPriceBookCustomizationList.size();
	 		
	System.err.println("itemBuyerPriceBookCustomizationCount   :  "+itemBuyerPriceBookCustomizationCount);
	 		
	     for (int i = 0; i < itemBuyerPriceBookCustomizationCount; i++) 
		 {
			String data=itemBuyerPriceBookCustomizationList.get(i).getText();
			actitemBuyerPriceBookCustomizationList.add(data);
		 }
		 		
	String actitemBuyerPriceBookCustomization=actitemBuyerPriceBookCustomizationList.toString();
	String expitemBuyerPriceBookCustomization=excelReader.getCellData(xlSheetName, 581, 7);
		 		
	excelReader.setCellData(xlfile, xlSheetName, 581, 8, actitemBuyerPriceBookCustomization);
		    	
    System.err.println("  Actual  itemBuyerPriceBookCustomization : "+actitemBuyerPriceBookCustomization);
    System.err.println("  Expected itemBuyerPriceBookCustomization : "+expitemBuyerPriceBookCustomization);
    
    
    
	boolean actDateRangeCheckBox = buyerPriceBook_CustamizeDateRangeCheckBox.isDisplayed();
	boolean actVendorCheckBox    = buyerPriceBook_CustomizeVendorCheckBox.isDisplayed();
	boolean actWarehouseCheckBox = buyerPriceBook_WarehouseCheckBox.isDisplayed();
	boolean actQtyRangeCheckbox  = buyerPriceBook_QualityRangeCheckBox.isDisplayed();
	boolean actCurrencyCheckBox  = buyerPriceBook_CurrencyCheckBox.isDisplayed();
	boolean actUnitCheckBox      = buyerPriceBook_UnitCheckBox.isDisplayed();

	boolean expDateRangeCheckBox = true;
	boolean expVendorCheckBox    = true;
	boolean expWarehouseCheckBox = true;
	boolean expQtyRangeCheckbox  = true;
	boolean expCurrencyCheckBox  = true;
	boolean expUnitCheckBox      = true;

	System.out.println("Buyer Price Book Value Actual              : " + actDateRangeCheckBox+  " Value Expected : " + expDateRangeCheckBox);
	System.out.println("Buyer Price Book Abbreviation Value Actual : " + actVendorCheckBox +    " Value Expected : " + expVendorCheckBox);
	System.out.println("Buyer Price Book Label Value Actual        : " + actWarehouseCheckBox+  " Value Expected : " + expWarehouseCheckBox);
	System.out.println("Clear Button Value Actual                  : " + actQtyRangeCheckbox +  " Value Expected : " + expQtyRangeCheckbox);
	System.out.println("Paste Button Value Actual                  : " + actCurrencyCheckBox +  " Value Expected : " + expCurrencyCheckBox);
	System.out.println("Copy Button Value Actual                   : " + actUnitCheckBox +      " Value Expected : " + expUnitCheckBox);

	
	
	boolean TestResult=actDateRangeCheckBox == expDateRangeCheckBox && actVendorCheckBox == expVendorCheckBox
							&& actWarehouseCheckBox == expWarehouseCheckBox && actQtyRangeCheckbox == expQtyRangeCheckbox
							&& actCurrencyCheckBox == expCurrencyCheckBox && actUnitCheckBox == expUnitCheckBox;
	
	
	String actCustomizationCheckBoxesDisplayed=Boolean.toString(TestResult);
	String expCustomizationCheckBoxesDisplayed=excelReader.getCellData(xlSheetName, 582, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 582, 8, actCustomizationCheckBoxesDisplayed.toUpperCase());
	
	
	if (actitemBuyerPriceBookCustomization.equalsIgnoreCase(expitemBuyerPriceBookCustomization) && 
			actCustomizationCheckBoxesDisplayed.equalsIgnoreCase(expCustomizationCheckBoxesDisplayed)) 
	{
		excelReader.setCellData(xlfile, xlSheetName, 579, 9, resPass);
		return true;
	}
	else
	{
		excelReader.setCellData(xlfile, xlSheetName, 579, 9, resPass);
		return false;
	}
  }
	  catch (Exception e) 
	  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 579, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
	  }
 }

	@FindBy(xpath = "//*[@id='idGlobalError']/div/table/tbody/tr/td[2]/div[2]")
	public static WebElement newErrorMessage;

	@FindBy(xpath = "//span[@class='icon-reject2 theme_color']")
	public static WebElement newErrorMessageCloseBtn;

	@FindBy(xpath = "//i[@id='ToggleFilter']")
	private static WebElement beforeClickOnToggle;

	@FindBy(xpath = "//i[@id='TogglePBTable']")
	private static WebElement afterClickOnToggle;

	@FindBy(xpath = "//div[contains(text(),'Starting date')]")
	private static WebElement startingdate;

	@FindBy(xpath = "//div[contains(text(),'Ending date')]")
	private static WebElement endingdate;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_6']//div[contains(text(),'Vendor')]")
	private static WebElement vendor;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_6']//div[contains(text(),'Customer')]")
	private static WebElement customer;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_7']//div[contains(text(),'Currency')]")
	private static WebElement currencyPriceBook;

	@FindBy(xpath = "//div[contains(text(),'Min Qty')]")
	private static WebElement minQty;

	@FindBy(xpath = "//div[contains(text(),'Max Qty')]")
	private static WebElement maxQty;

	@FindBy(xpath = "//div[contains(text(),'Unit')]")
	private static WebElement unit;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_11']//div[contains(text(),'Rate')]")
	private static WebElement rate;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_12']//div[contains(text(),'Po')]")
	private static WebElement po;

	@FindBy(xpath = "//div[contains(text(),'So')]")
	private static WebElement so;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_13']//div[contains(text(),'St')]")
	private static WebElement st;

	@FindBy(xpath = "//div[contains(text(),'Pt')]")
	private static WebElement pt;

	@FindBy(xpath = "//div[contains(text(),'Val 3')]")
	private static WebElement Val3;

	@FindBy(xpath = "//div[contains(text(),'Val 4')]")
	private static WebElement Val4;

	@FindBy(xpath = "//div[contains(text(),'Val 5')]")
	private static WebElement Val5;

	@FindBy(xpath = "//div[contains(text(),'Val 6')]")
	private static WebElement Val6;

	@FindBy(xpath = "//div[contains(text(),'Val 7')]")
	private static WebElement Val7;

	@FindBy(xpath = "//div[contains(text(),'Val 8')]")
	private static WebElement Val8;

	@FindBy(xpath = "//div[contains(text(),'Val 9')]")
	private static WebElement Val9;

	@FindBy(xpath = "//div[contains(text(),'Val 10')]")
	private static WebElement Val10;

	@FindBy(xpath = "//div[contains(text(),'Val 11')]")
	private static WebElement Val1;

	@FindBy(xpath = "//div[contains(text(),'Val 12')]")
	private static WebElement Val12;

	@FindBy(xpath = "//div[contains(text(),'Val 13')]")
	private static WebElement Val13;

	// Grid Options display
	// First Row
	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-1']")
	private static WebElement itemFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-3']")
	private static WebElement wareHouseFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-4']")
	private static WebElement satrtingDateFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-5']")
	private static WebElement endingDateFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-6']")
	private static WebElement vendorFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-7']")
	private static WebElement currencyFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-8']")
	private static WebElement minQtyFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-9']")
	private static WebElement maxQtyFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-10']")
	private static WebElement unitFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-11']")
	private static WebElement rateFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-12']")
	private static WebElement PoFirstCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_1-13']")
	private static WebElement PtFirstCellSelect;

	// Second Row
	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-1']")
	private static WebElement itemSecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-3']")
	private static WebElement wareHouseSecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-4']")
	private static WebElement satrtingDateSecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-5']")
	private static WebElement endingDateSecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-6']")
	private static WebElement vendorSecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-7']")
	private static WebElement currencySecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-8']")
	private static WebElement minQtySecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-9']")
	private static WebElement maxQtySecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-10']")
	private static WebElement unitSecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-11']")
	private static WebElement rateSecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-12']")
	private static WebElement PoSecondCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_2-13']")
	private static WebElement PtSecondCellSelect;

	// Third Row
	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-1']")
	private static WebElement itemThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-3']")
	private static WebElement wareHouseThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-4']")
	private static WebElement satrtingDateThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-5']")
	private static WebElement endingDateThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-6']")
	private static WebElement vendorThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-7']")
	private static WebElement currencyThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-8']")
	private static WebElement minQtyThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-9']")
	private static WebElement maxQtyThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-10']")
	private static WebElement unitThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-11']")
	private static WebElement rateThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-12']")
	private static WebElement PoThirdCellSelect;

	@FindBy(xpath = "//td[@id='PriceBookWebGrid_col_3-13']")
	private static WebElement PtThirdCellSelect;

	// To get Value From Cell
	@FindBy(xpath = "//input[@id='PriceBookWebGrid_option_2']")
	private static WebElement itemValuePriceBook;

	@FindBy(xpath = "//*[@id='PriceBookWebGrid_option_3']")
	private static WebElement wareHouseValue;

	@FindBy(xpath = "//input[@id='PriceBookWebGrid_option_StartingDate']")
	private static WebElement startingDateValue;

	@FindBy(xpath = "//input[@id='PriceBookWebGrid_option_EndingDate']")
	private static WebElement endingDateValue;

	@FindBy(xpath = "//input[@id='PriceBookWebGrid_option_1']")
	private static WebElement vendorValue;

	@FindBy(xpath = "//input[@id='Currency_option']")
	private static WebElement currencyOptionValue;

	@FindBy(xpath = "//input[@id='PriceBookWebGrid_minqty']")
	private static WebElement minQtyValue;

	@FindBy(xpath = "//input[@id='PriceBookWebGrid_maxqty']")
	private static WebElement maxQtyValue;

	@FindBy(xpath = "//input[@id='PriceBookWebGrid_option_11']")
	private static WebElement unitValuePriceBook;

	@FindBy(xpath = "//input[@id='PriceBookWebGrid_val0']")
	private static WebElement rateValue;

	@FindBy(xpath = "//input[@id='PriceBookWebGrid_val1']")
	private static WebElement PoValue;

	@FindBy(xpath = "//input[@id='PriceBookWebGrid_val2']")
	private static WebElement PtValue;

	@FindBy(xpath = "//div[contains(text(),'So')]")
	private static WebElement gridSoColumn;

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_13']//div[@class='no-select'][contains(text(),'St')]")
	private static WebElement gridStColumn;
	
	@FindBy(xpath = "//*[@id='PriceBookWebGrid_head']/tr/th/div[1]")
	private static List<WebElement> bodyGridHeaderList;
	
	
	
 public boolean checkCustomizeColumnsInGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
   excelReader = new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

   System.out.println("********************************************** checkCustomizeColumnsInGrid  ******************************************************");

   try
   {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeDateRangeCheckBox));
		buyerPriceBook_CustamizeDateRangeCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustomizeVendorCheckBox));
		buyerPriceBook_CustomizeVendorCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_WarehouseCheckBox));
		buyerPriceBook_WarehouseCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_QualityRangeCheckBox));
		buyerPriceBook_QualityRangeCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CurrencyCheckBox));
		buyerPriceBook_CurrencyCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_UnitCheckBox));
		buyerPriceBook_UnitCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeSettingBtn));
		buyerPriceBook_CustamizeSettingBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(beforeClickOnToggle));
		beforeClickOnToggle.click();
		
		
		Thread.sleep(2000);
		

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridWareHouseColoumn));
		boolean actGridItemColumn         = gridItemColoumn.isDisplayed();
		boolean actGridWarehouseColumn    = gridWareHouseColoumn.isDisplayed();
		boolean actGridStartingDateColumn = startingdate.isDisplayed();
		boolean actGridEndingDateColumn   = endingdate.isDisplayed();
		boolean actGridVendorColumn       = vendor.isDisplayed();
		boolean actGridCurrencyColumn     = currencyPriceBook.isDisplayed();

		boolean expGridItemColumn         = true;
		boolean expGridWarehouseColumn    = true;
		boolean expGridStartingDateColumn = true;
		boolean expGridEndingDateColumn   = true;
		boolean expGridVendorColumn       = true;
		boolean expGridCurrencyColumn     = true;

		System.out.println("Grid Item Column Value Actual               : " + actGridItemColumn +        " Value Expected : " + expGridItemColumn);
		System.out.println("Grid Warehouse Column Value Actual          : " + actGridWarehouseColumn+    " Value Expected : " + expGridWarehouseColumn);
		System.out.println("Grid Starting Date Column Value Actual      : " + actGridStartingDateColumn+ " Value Expected : " + expGridStartingDateColumn);
		System.out.println("Grid Ending Date Column Value Actual        : " + actGridEndingDateColumn+   " Value Expected : " + expGridEndingDateColumn);
		System.out.println("Grid Vendor Column Value Actual             : " + actGridVendorColumn+       " Value Expected : " + expGridVendorColumn);
		System.out.println("Grid Currency Columnn Value Actual          : " + actGridCurrencyColumn+     " Value Expected : " + expGridCurrencyColumn);

		
	/*	
		ArrayList<String> actbodyGridHeaderList=new ArrayList<String>();
		
		int bodyGridHeaderCount=bodyGridHeaderList.size();
		
		System.err.println(" Body Grid Header Count : "+bodyGridHeaderCount);
		
		
		for (int i = 1; i < bodyGridHeaderCount; i++) 
		{
			
			String data=bodyGridHeaderList.get(i).getText();
			
			actbodyGridHeaderList.add(data);
		
		}
		
		String actbodyGridHeader=actbodyGridHeaderList.toString();
		String expbodyGridHeader=excelReader.getCellData(xlSheetName, 584, 7);
			 		
		excelReader.setCellData(xlfile, xlSheetName, 584, 8, actbodyGridHeader);
			    	
	    System.err.println("  Actual  bodyGridHeader : "+actbodyGridHeader);
	    System.err.println("  Expected bodyGridHeader : "+expbodyGridHeader);*/
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCellSelect));
		itemFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemValuePriceBook));
		itemValuePriceBook.click();
		itemValuePriceBook.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseValue));
		wareHouseValue.click();
		wareHouseValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(satrtingDateFirstCellSelect));
		satrtingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingDateValue));
		startingDateValue.click();
		startingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateFirstCellSelect));
		endingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateValue));
		endingDateValue.click();
		endingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorFirstCellSelect));
		vendorFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
		vendorValue.click();
		vendorValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorFirstCellSelect));
		vendorFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
		vendorValue.click();
		vendorValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyFirstCellSelect));
		currencyFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyOptionValue));
		currencyOptionValue.click();
		currencyOptionValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyFirstCellSelect));
		minQtyFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyValue));
		minQtyValue.click();
		minQtyValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyFirstCellSelect));
		maxQtyFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyValue));
		maxQtyValue.click();
		maxQtyValue.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rate));
		boolean actGridMinQtyColumn = minQty.isDisplayed();
		boolean actGridMaxQtyColumn = maxQty.isDisplayed();
		boolean actGridUnitColumn   = unit.isDisplayed();
		boolean actGridRateColumn   = rate.isDisplayed();
		/*boolean actGridPOColumn     = po.isDisplayed();
		boolean actGridPTColumn     = pt.isDisplayed();*/

		boolean expGridMinQtyColumn = true;
		boolean expGridMaxQtyColumn = true;
		boolean expGridUnitColumn   = true;
		boolean expGridRateColumn   = true;
		/*boolean expGridPOColumn     = true;
		boolean expGridPTColumn     = true;*/

		System.out.println("Grid Min Qty Column Value Actual              : " + actGridMinQtyColumn+ " Value Expected : " + expGridMinQtyColumn);
		System.out.println("Grid Max Qty Column Value Actual              : " + actGridMaxQtyColumn+ " Value Expected : " + expGridMaxQtyColumn);
		System.out.println("Grid Unit Column Value Actual                 : " + actGridUnitColumn+   " Value Expected : " + expGridUnitColumn);
		System.out.println("Grid Rate Column Value Actual                 : " + actGridRateColumn+   " Value Expected : " + expGridRateColumn);
		/*System.out.println("Grid PO Column Value Actual                   : " + actGridPOColumn +    " Value Expected : "+ expGridPOColumn);
		System.out.println("Grid PT Column Value Actual                   : " + actGridPTColumn +    " Value Expected : "+ expGridPTColumn);
*/
		
		
		boolean testResult=actGridItemColumn == expGridItemColumn && actGridWarehouseColumn == actGridWarehouseColumn
							&& actGridStartingDateColumn == actGridStartingDateColumn
							&& actGridEndingDateColumn == actGridEndingDateColumn && actGridVendorColumn == actGridVendorColumn
							&& actGridCurrencyColumn == actGridCurrencyColumn
			
							&& actGridMinQtyColumn == expGridMinQtyColumn && actGridMaxQtyColumn == expGridMaxQtyColumn
							&& actGridUnitColumn == expGridUnitColumn && actGridRateColumn == expGridRateColumn
							/*&& actGridPOColumn == expGridPOColumn && actGridPTColumn == expGridPTColumn*/;
		
		
		String actBuyerPriceBook=Boolean.toString(testResult);
		String expBuyerPriceBook= excelReader.getCellData(xlSheetName, 585, 7);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 585, 8, actBuyerPriceBook);
		
		if (actBuyerPriceBook.equalsIgnoreCase(expBuyerPriceBook) )	
		{
			excelReader.setCellData(xlfile, xlSheetName, 583, 9, resPass);
			return true;
		}
		else
		{excelReader.setCellData(xlfile, xlSheetName, 583, 9, resPass);
			return false;
		}
   }
   catch (Exception e) 
	  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 583, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	  return false;
	  }
 }

 
  public boolean checkSaveBuyerPriceBook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************************** checkSaveBuyerPriceBook  ******************************************************");
		
    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCellSelect));
		itemFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemValuePriceBook));
		itemValuePriceBook.click();
		itemValuePriceBook.sendKeys(excelReader.getCellData(xlSheetName, 587, 6));
        Thread.sleep(2000);

        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseFirstCellSelect));
		wareHouseFirstCellSelect.click();
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseValue));
		wareHouseValue.click();
		wareHouseValue.sendKeys(excelReader.getCellData(xlSheetName, 588, 6));
		Thread.sleep(2000);*/
		wareHouseValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(satrtingDateFirstCellSelect));
		satrtingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingDateValue));
		startingDateValue.click();
		startingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateFirstCellSelect));
		endingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateValue));
		endingDateValue.click();
		endingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorFirstCellSelect));
		vendorFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
		vendorValue.click();
		/*vendorValue.sendKeys(excelReader.getCellData(xlSheetName, 589, 6));
		Thread.sleep(2000);*/
		vendorValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyFirstCellSelect));
		currencyFirstCellSelect.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyOptionValue));
		currencyOptionValue.click();
		currencyOptionValue.sendKeys(excelReader.getCellData(xlSheetName, 590, 6));
		Thread.sleep(2000);
		currencyOptionValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyFirstCellSelect));
		minQtyFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyValue));
		minQtyValue.click();
		minQtyValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyFirstCellSelect));
		maxQtyFirstCellSelect.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyValue));
		maxQtyValue.click();
		maxQtyValue.sendKeys(Keys.TAB);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateFirstCellSelect));
		rateFirstCellSelect.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateValue));
		rateValue.sendKeys(excelReader.getCellData(xlSheetName, 591, 6));
		Thread.sleep(2000);
		rateValue.sendKeys(Keys.TAB);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PoValue));
		PoValue.sendKeys(excelReader.getCellData(xlSheetName, 592, 6));
		PoValue.sendKeys(Keys.TAB);
*/
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookSaveBtn));
		buyerPriceBookSaveBtn.click();
		
        String expSaveMessage = excelReader.getCellData(xlSheetName, 593, 7);
		
		boolean actSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveAccountMessage = true;

		String actSavingStatus= Boolean.toString(actSaveAccountMessage);
		String expSavingStatus=excelReader.getCellData(xlSheetName, 594, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 594, 8, actSavingStatus.toUpperCase());
		
		System.out.println("Actual Saving Status  : "+actSavingStatus);
		System.out.println(" Expected Saving Status  : "+expSavingStatus);
		

		if (actSavingStatus.equalsIgnoreCase(expSavingStatus) ) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 586, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 586, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 586, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
	  }
 }

 public boolean checkEditBuyerPriceBook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************************** checkEditBuyerPriceBook  ******************************************************");
		
    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(afterClickOnToggle));
		afterClickOnToggle.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_PriceBook));
		buyerPriceBook_PriceBook.click();
		buyerPriceBook_PriceBook.sendKeys(excelReader.getCellData(xlSheetName, 596, 6));
		Thread.sleep(2000);
		buyerPriceBook_PriceBook.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_AbbreviationBtn));
		buyerPriceBook_AbbreviationBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_PriceBook));
		String actPriceBookName = buyerPriceBook_PriceBook.getAttribute("value");
		String expPriceBookName = excelReader.getCellData(xlSheetName, 597, 7);

		excelReader.setCellData(xlfile, xlSheetName, 597, 8, actPriceBookName);
		
		System.out.println("Edit Buyer Price Book Check Price Book Name  : " + actPriceBookName + "  Value Expected : "+ expPriceBookName);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookFilter_FilterAndLoadBtn));
		buyerPriceBookFilter_FilterAndLoadBtn.click();
		Thread.sleep(4000);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorFirstCellSelect));
		String actItemFirstCell      = itemFirstCellSelect.getText();
	/*	String actWarehouseFirstCell = wareHouseFirstCellSelect.getText();
		String actVendorFirstCell    = vendorFirstCellSelect.getText();
	*/	String actCurrencyFirstCell  = currencyFirstCellSelect.getText();
		String actRateFirstCell      = rateFirstCellSelect.getText();
		/*String actPOFirstCell        = PoFirstCellSelect.getText();*/

		
		String expItemFirstCell      = excelReader.getCellData(xlSheetName, 598, 7);
	/*	String expWarehouseFirstCell = excelReader.getCellData(xlSheetName, 599, 7);
		String expVendorFirstCell    = excelReader.getCellData(xlSheetName, 600, 7);
	*/	String expCurrencyFirstCell  = excelReader.getCellData(xlSheetName, 601, 7);
		String expRateFirstCell      = excelReader.getCellData(xlSheetName, 602, 7);
		/*String expPOFirstCell        = excelReader.getCellData(xlSheetName, 603, 7);*/
		
		excelReader.setCellData(xlfile, xlSheetName, 598, 8, actItemFirstCell);
	/*	excelReader.setCellData(xlfile, xlSheetName, 599, 8, actWarehouseFirstCell);
		excelReader.setCellData(xlfile, xlSheetName, 600, 8, actVendorFirstCell);
	*/	excelReader.setCellData(xlfile, xlSheetName, 601, 8, actCurrencyFirstCell);
		excelReader.setCellData(xlfile, xlSheetName, 602, 8, actRateFirstCell);/*
		excelReader.setCellData(xlfile, xlSheetName, 603, 8, actPOFirstCell);

		System.out.println("Edit Buyer Price Book check Item            : " + actItemFirstCell +     " Value Expected : "+ expItemFirstCell);
	/*	System.out.println("Edit Buyer Price Book check Warehouse       : " + actWarehouseFirstCell+ " Value Expected : " + expWarehouseFirstCell);
		System.out.println("Edit Buyer Price Book check Vendor          : " + actVendorFirstCell +   " Value Expected : "+ expVendorFirstCell);
	*/	System.out.println("Edit Buyer Price Book check Currency        : " + actCurrencyFirstCell + " Value Expected : " + expCurrencyFirstCell);
		System.out.println("Edit Buyer Price Book check Rate            : " + actRateFirstCell +     " Value Expected : "+ expRateFirstCell);
		/*System.out.println("Edit Buyer Price Book check PO              : " + actPOFirstCell +       " Value Expected : "+ expPOFirstCell);*/

		if (actPriceBookName.equalsIgnoreCase(expPriceBookName)

				&& actItemFirstCell.equalsIgnoreCase(expItemFirstCell)
	/*			&& actWarehouseFirstCell.equalsIgnoreCase(expWarehouseFirstCell)
				&& actVendorFirstCell.equalsIgnoreCase(expVendorFirstCell)
	*/			&& actCurrencyFirstCell.equalsIgnoreCase(expCurrencyFirstCell)
				&& actRateFirstCell.equalsIgnoreCase(expRateFirstCell)) 
		{
			System.out.println("Pass: Edit Buyer PriceBook");
			excelReader.setCellData(xlfile, xlSheetName, 595, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println("Fail: Edit Buyer PriceBook");
			excelReader.setCellData(xlfile, xlSheetName, 595, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
    {
    String exception =e.getMessage();
    excelReader.setExceptionInExcel(xlfile, xlSheetName, 595, 10, exception);
    System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
    return false;
    }
  }


 
  @FindBy(xpath = "//input[@id='PriceBookWebGrid_option_11']")
  private static WebElement buyerPriceBookUnit;

  public boolean checkUpdateBuyerPriceBook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {

   excelReader = new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

   System.out.println("********************************************** checkUpdateBuyerPriceBook  ******************************************************");
		
   try
   {
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemSecondCellSelect));
	itemSecondCellSelect.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemValuePriceBook));
	itemValuePriceBook.click();
	
	itemValuePriceBook.sendKeys(excelReader.getCellData(xlSheetName, 605, 6));
	Thread.sleep(2000);
	itemValuePriceBook.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseSecondCellSelect));
	wareHouseSecondCellSelect.click();
	/*wareHouseValue.sendKeys(excelReader.getCellData(xlSheetName, 606, 6));
	Thread.sleep(2000);*/
	wareHouseValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(satrtingDateSecondCellSelect));
	satrtingDateSecondCellSelect.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingDateValue));
	startingDateValue.click();
	startingDateValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateSecondCellSelect));
	endingDateSecondCellSelect.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateValue));
	endingDateValue.click();
	endingDateValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSecondCellSelect));
	vendorSecondCellSelect.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
	vendorValue.click();
	Thread.sleep(3000);
	/*vendorValue.sendKeys(excelReader.getCellData(xlSheetName, 607, 6));
	Thread.sleep(2000);*/
	vendorValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyOptionValue));
	currencyOptionValue.click();
	currencyOptionValue.sendKeys(excelReader.getCellData(xlSheetName, 608, 6));
	Thread.sleep(2000);
	currencyOptionValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyValue));
	minQtyValue.click();
	minQtyValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyValue));
	maxQtyValue.click();
	maxQtyValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookUnit));
	buyerPriceBookUnit.click();
	buyerPriceBookUnit.sendKeys(Keys.END);
	buyerPriceBookUnit.sendKeys(Keys.SHIFT,Keys.HOME);
	buyerPriceBookUnit.sendKeys(excelReader.getCellData(xlSheetName, 609, 6));
	Thread.sleep(2000);
	buyerPriceBookUnit.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateValue));
	rateValue.sendKeys(excelReader.getCellData(xlSheetName, 610, 6));
	Thread.sleep(2000);
	rateValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PoValue));
	PoValue.sendKeys(excelReader.getCellData(xlSheetName, 611, 6));
	Thread.sleep(2000);
	PoValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookSaveBtn));
	buyerPriceBookSaveBtn.click();
	
	String expSaveMessage = excelReader.getCellData(xlSheetName, 612, 7);
	
	//excelReader.setCellData(xlfile, xlSheetName, 612, 8, expSaveMessage);//To Get Actual Saving Message 
	
	boolean actSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
	boolean expSaveAccountMessage = true;

	String actUpdatingSavingStatus= Boolean.toString(actSaveAccountMessage);
	String expUpdatingSavingStatus=excelReader.getCellData(xlSheetName, 613, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 613, 8, actUpdatingSavingStatus.toUpperCase());
	
	System.out.println("Actual Updating Saving Status  : "+actUpdatingSavingStatus);
	System.out.println(" Expected  Updating Saving Status  : "+expUpdatingSavingStatus);
	
	
	if (actUpdatingSavingStatus.equalsIgnoreCase(expUpdatingSavingStatus)) 
	{
		System.out.println("Pass: Update Buyer PriceBook and Saved Successfully");
		excelReader.setCellData(xlfile, xlSheetName, 604, 9, resPass);
		return true;
	} 
	else
	{
		System.out.println("Fail:   Update Buyer PriceBook and Saved Successfully");
		excelReader.setCellData(xlfile, xlSheetName, 604, 9, resFail);
		return false;
	}
   }
   catch (Exception e) 
   {
   String exception =e.getMessage();
   excelReader.setExceptionInExcel(xlfile, xlSheetName, 604, 10, exception);
   System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
   return false;
   }
 }

 public boolean checkUpdatePricebookInEditPricebook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {

  excelReader = new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("********************************************** checkUpdatePricebookInEditPricebook  ******************************************************");
		
  try
  {
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_PriceBook));
	buyerPriceBook_PriceBook.click();
	buyerPriceBook_PriceBook.sendKeys(excelReader.getCellData(xlSheetName, 615, 6));
	Thread.sleep(2000);
	buyerPriceBook_PriceBook.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_AbbreviationBtn));
	buyerPriceBook_AbbreviationBtn.click();
	Thread.sleep(2000);

	String actPriceBookName       = buyerPriceBook_PriceBook.getAttribute("value");
	String expPriceBookName       = excelReader.getCellData(xlSheetName, 616, 7);

	excelReader.setCellData(xlfile, xlSheetName, 616, 8, actPriceBookName);
	
	System.out.println("Edit Buyer Price Book Check Price Book Name  : " + actPriceBookName + "  Value Expected : " + expPriceBookName);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookFilter_FilterAndLoadBtn));
	buyerPriceBookFilter_FilterAndLoadBtn.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCellSelect));
	String actItemFirstCell       = itemFirstCellSelect.getText();
	/*String actWarehouseFirstCell  = wareHouseFirstCellSelect.getText();
	String actVendorFirstCell     = vendorFirstCellSelect.getText();
	*/
	String actCurrencyFirstCell   = currencyFirstCellSelect.getText();
	String actRateFirstCell       = rateFirstCellSelect.getText();
	/*String actPOFirstCell         = PoFirstCellSelect.getText();*/

	excelReader.setCellData(xlfile, xlSheetName, 618, 8, actItemFirstCell);
	/*excelReader.setCellData(xlfile, xlSheetName, 619, 8, actWarehouseFirstCell);
	excelReader.setCellData(xlfile, xlSheetName, 620, 8, actVendorFirstCell);
	*/excelReader.setCellData(xlfile, xlSheetName, 621, 8, actCurrencyFirstCell);
	excelReader.setCellData(xlfile, xlSheetName, 622, 8, actRateFirstCell);
	/*excelReader.setCellData(xlfile, xlSheetName, 623, 8, actPOFirstCell);*/
	
	
	String actItemSecondCell      = itemSecondCellSelect.getText();
	/*String actWarehouseSecondCell = wareHouseSecondCellSelect.getText();
	String actVendorSecondCell    = vendorSecondCellSelect.getText();
	*/
	String actx                   = unitSecondCellSelect.getText();
	String actCurrencySecondCell  = currencySecondCellSelect.getText();
	String actRateSecondCell      = rateSecondCellSelect.getText();
	/*String actPOSecondCell        = PoSecondCellSelect.getText();*/

	
	excelReader.setCellData(xlfile, xlSheetName, 625, 8, actItemSecondCell);
	/*excelReader.setCellData(xlfile, xlSheetName, 626, 8, actWarehouseSecondCell);
	excelReader.setCellData(xlfile, xlSheetName, 627, 8, actVendorSecondCell);
	*/excelReader.setCellData(xlfile, xlSheetName, 628, 8, actx);
	excelReader.setCellData(xlfile, xlSheetName, 629, 8, actCurrencySecondCell);
	excelReader.setCellData(xlfile, xlSheetName, 630, 8, actRateSecondCell);
	/*excelReader.setCellData(xlfile, xlSheetName, 631, 8, actPOSecondCell);*/
	
	
	String expItemFirstCell       = excelReader.getCellData(xlSheetName, 618, 7);
	/*String expWarehouseFirstCell  = excelReader.getCellData(xlSheetName, 619, 7);
	String expVendorFirstCell     = excelReader.getCellData(xlSheetName, 620, 7);*/
	String expCurrencyFirstCell   = excelReader.getCellData(xlSheetName, 621, 7);
	String expRateFirstCell       = excelReader.getCellData(xlSheetName, 622, 7);
	/*String expPOFirstCell         = excelReader.getCellData(xlSheetName, 623, 7);*/

	String expItemSecondCell      = excelReader.getCellData(xlSheetName, 625, 7);
	/*String expWarehouseSecondCell = excelReader.getCellData(xlSheetName, 626, 7);
	String expVendorSecondCell    = excelReader.getCellData(xlSheetName, 627, 7);*/
	String expx                   = excelReader.getCellData(xlSheetName, 628, 7);
	String expCurrencySecondCell  = excelReader.getCellData(xlSheetName, 629, 7);
	String expRateSecondCell      = excelReader.getCellData(xlSheetName, 630, 7);
	/*String expPOSecondCell        = excelReader.getCellData(xlSheetName, 631, 7);*/

	System.out.println("Edit Buyer Price Book check Item            : " + actItemFirstCell +      " Value Expected : " + expItemFirstCell);
	/*System.out.println("Edit Buyer Price Book check Warehouse       : " + actWarehouseFirstCell+  " Value Expected : " + expWarehouseFirstCell);
	System.out.println("Edit Buyer Price Book check Vendor          : " + actVendorFirstCell +    " Value Expected : "+ expVendorFirstCell); 
	*/
	System.out.println("Edit Buyer Price Book check Currency        : " + actCurrencyFirstCell+   " Value Expected : " + expCurrencyFirstCell);
	System.out.println("Edit Buyer Price Book check Rate            : " + actRateFirstCell +      " Value Expected : "+ expRateFirstCell);
	/*System.out.println("Edit Buyer Price Book check PO              : " + actPOFirstCell +        " Value Expected : "+ expPOFirstCell);*/

	System.out.println("Edit Buyer Price Book check Item            : " + actItemSecondCell +     " Value Expected : "+ expItemSecondCell);
	/*System.out.println("Edit Buyer Price Book check Warehouse       : " + actWarehouseSecondCell+ " Value Expected : " + expWarehouseSecondCell);
	System.out.println("Edit Buyer Price Book check Vendor          : " + actVendorSecondCell+    " Value Expected : " + expVendorSecondCell);
	*/
	System.out.println("Edit Buyer Price Book check X               : " + actx +                  " Value Expected : " + expx);
	System.out.println("Edit Buyer Price Book check Currency        : " + actCurrencySecondCell+  " Value Expected : " + expCurrencySecondCell);
	System.out.println("Edit Buyer Price Book check Rate            : " + actRateSecondCell +     " Value Expected : "+ expRateSecondCell);
	/*System.out.println("Edit Buyer Price Book check PO              : " + actPOSecondCell +       " Value Expected : "+ expPOSecondCell);*/

	if (actPriceBookName.equalsIgnoreCase(expPriceBookName)

			&& actItemFirstCell.equalsIgnoreCase(expItemFirstCell)
			&& actCurrencyFirstCell.equalsIgnoreCase(expCurrencyFirstCell)
			&& actRateFirstCell.equalsIgnoreCase(expRateFirstCell)
			

			&& actItemSecondCell.equalsIgnoreCase(expItemSecondCell)
			&& actCurrencySecondCell.equalsIgnoreCase(expCurrencySecondCell) && actx.equalsIgnoreCase(expx)
			&& actRateSecondCell.equalsIgnoreCase(expRateSecondCell)) 
	{
		System.out.println("Pass: Edit Buyer PriceBook");
		excelReader.setCellData(xlfile, xlSheetName, 614, 9, resPass);
		return true;
	}
	else 
	{
		System.out.println("Fail: Edit Buyer PriceBook");
		excelReader.setCellData(xlfile, xlSheetName, 614, 9, resFail);
		return false;
	}
  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 614, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }

	
 public boolean checkClickOnYesOptionInDeleteSavedCopyAndPaste() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {

  excelReader = new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("********************************************** checkClickOnYesOptionInDeleteSavedCopyAndPaste  *******************************************");
	
  try
  {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookDeleteBtn));
		buyerPriceBookDeleteBtn.click();

		getWaitForAlert();
		
		getAlert().accept();

		
       String expSaveMessage = excelReader.getCellData(xlSheetName, 633, 7);
		
        //excelReader.setCellData(xlfile, xlSheetName, 1408, 8, expSaveMessage);
       
		boolean actDeleteMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expDeleteAccountMessage = true;

		String actDeleteStatus= Boolean.toString(actDeleteMessage);
		String expDeleteStatus=excelReader.getCellData(xlSheetName, 634, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 634, 8, actDeleteStatus.toUpperCase());
		
		System.out.println("Actual Delete Status  : "+actDeleteStatus);
		System.out.println(" Expected Delete Status  : "+expDeleteStatus);
		
		if (actDeleteStatus.equalsIgnoreCase(expDeleteStatus))
		{
			System.out.println("Pass: Yes Button in Delete option ");
			excelReader.setCellData(xlfile, xlSheetName, 632, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Fail: Yes Button in Delete option ");
			excelReader.setCellData(xlfile, xlSheetName, 632, 9, resPass);
			return false;
		}
    }
    catch (Exception e) 
    {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 632, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
    }
  }

 
 
 public boolean checkSaveOptionBuyerPriceBook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************************** checkSaveBuyerPriceBook  ******************************************************");
		
   try
   {
	   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_PriceBook));
	    buyerPriceBook_PriceBook.click();
	    buyerPriceBook_PriceBook.sendKeys(excelReader.getCellData(xlSheetName, 580, 6));
	    Thread.sleep(2000);
	    buyerPriceBook_PriceBook.sendKeys(Keys.TAB);
	    
	    
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeSettingBtn));
	    buyerPriceBook_CustamizeSettingBtn.click();
	    Thread.sleep(2000);
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeDateRangeCheckBox));
		buyerPriceBook_CustamizeDateRangeCheckBox.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustomizeVendorCheckBox));
		buyerPriceBook_CustomizeVendorCheckBox.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_WarehouseCheckBox));
		buyerPriceBook_WarehouseCheckBox.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_QualityRangeCheckBox));
		buyerPriceBook_QualityRangeCheckBox.click();
		
        // This is getting checked so thats why commenting 
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CurrencyCheckBox));
		buyerPriceBook_CurrencyCheckBox.click();
		*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_UnitCheckBox));
		buyerPriceBook_UnitCheckBox.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeSettingBtn));
		buyerPriceBook_CustamizeSettingBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(beforeClickOnToggle));
		beforeClickOnToggle.click();
		
		
	
	    
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCellSelect));
		itemFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemValuePriceBook));
		itemValuePriceBook.click();
		itemValuePriceBook.sendKeys(excelReader.getCellData(xlSheetName, 587, 6));
        Thread.sleep(2000);
        itemValuePriceBook.sendKeys(Keys.TAB);
        
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseFirstCellSelect));
		wareHouseFirstCellSelect.click();
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseValue));
		wareHouseValue.click();
		wareHouseValue.sendKeys(excelReader.getCellData(xlSheetName, 588, 6));
		Thread.sleep(2000);*/
		wareHouseValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(satrtingDateFirstCellSelect));
		satrtingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingDateValue));
		startingDateValue.click();
		startingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateFirstCellSelect));
		endingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateValue));
		endingDateValue.click();
		endingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorFirstCellSelect));
		vendorFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
		vendorValue.click();
		/*vendorValue.sendKeys(excelReader.getCellData(xlSheetName, 589, 6));
		Thread.sleep(2000);*/
		vendorValue.sendKeys(Keys.TAB);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyFirstCellSelect));
		currencyFirstCellSelect.click();
*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyOptionValue));
		currencyOptionValue.click();
		currencyOptionValue.sendKeys(excelReader.getCellData(xlSheetName, 590, 6));
		Thread.sleep(2000);
		currencyOptionValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyFirstCellSelect));
		minQtyFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyValue));
		minQtyValue.click();
		Thread.sleep(2000);
		minQtyValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyFirstCellSelect));
		maxQtyFirstCellSelect.click();
		Thread.sleep(2000);
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyValue));
		maxQtyValue.click();
		maxQtyValue.sendKeys(Keys.TAB);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateFirstCellSelect));
		rateFirstCellSelect.click();
		Thread.sleep(2000);
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateValue));
		rateValue.sendKeys(excelReader.getCellData(xlSheetName, 591, 6));
		Thread.sleep(2000);
		rateValue.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemSecondCellSelect));
		itemSecondCellSelect.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemValuePriceBook));
		itemValuePriceBook.click();
		
		itemValuePriceBook.sendKeys(excelReader.getCellData(xlSheetName, 605, 6));
		Thread.sleep(2000);
		itemValuePriceBook.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseSecondCellSelect));
		wareHouseSecondCellSelect.click();
		/*wareHouseValue.sendKeys(excelReader.getCellData(xlSheetName, 606, 6));
		Thread.sleep(2000);*/
		wareHouseValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(satrtingDateSecondCellSelect));
		satrtingDateSecondCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingDateValue));
		startingDateValue.click();
		startingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateSecondCellSelect));
		endingDateSecondCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateValue));
		endingDateValue.click();
		endingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSecondCellSelect));
		vendorSecondCellSelect.click();

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
		vendorValue.click();
		Thread.sleep(3000);
		vendorValue.sendKeys(excelReader.getCellData(xlSheetName, 607, 6));
		Thread.sleep(2000);*/
		vendorValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyOptionValue));
		currencyOptionValue.click();
		currencyOptionValue.sendKeys(excelReader.getCellData(xlSheetName, 608, 6));
		Thread.sleep(2000);
		currencyOptionValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyValue));
		minQtyValue.click();
		minQtyValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyValue));
		maxQtyValue.click();
		maxQtyValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookUnit));
		buyerPriceBookUnit.click();
		buyerPriceBookUnit.sendKeys(Keys.END);
		buyerPriceBookUnit.sendKeys(Keys.SHIFT,Keys.HOME);
		buyerPriceBookUnit.sendKeys(excelReader.getCellData(xlSheetName, 609, 6));
		Thread.sleep(2000);
		buyerPriceBookUnit.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateValue));
		rateValue.sendKeys(excelReader.getCellData(xlSheetName, 610, 6));
		Thread.sleep(2000);
		rateValue.sendKeys(Keys.TAB);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PoValue));
		PoValue.sendKeys(excelReader.getCellData(xlSheetName, 592, 6));
		PoValue.sendKeys(Keys.TAB);
*/
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookSaveBtn));
		buyerPriceBookSaveBtn.click();
		
       String expSaveMessage = excelReader.getCellData(xlSheetName, 593, 7);
		
		boolean actSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveAccountMessage = true;

		String actSavingStatus= Boolean.toString(actSaveAccountMessage);
		String expSavingStatus=excelReader.getCellData(xlSheetName, 594, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 594, 8, actSavingStatus.toUpperCase());
		
		System.out.println("Actual Saving Status  : "+actSavingStatus);
		System.out.println(" Expected Saving Status  : "+expSavingStatus);
		

		if (actSavingStatus.equalsIgnoreCase(expSavingStatus) ) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 586, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 586, 9, resFail);
			return false;
		}
   }
   catch (Exception e) 
	  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 586, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
	  }
}

 

 public boolean checkClickOnCloseButtonInBuyingRates() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************************** checkClickOnCloseButtonInBuyingRates  ******************************************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookCloseBtn));
		buyerPriceBookCloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 635, 7);

		excelReader.setCellData(xlfile, xlSheetName, 635, 8, actDashboardLabel);
		
		System.out.println("Close Button  : " + actDashboardLabel + "  Value Expected : " + expDashboardLabel);

		if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
		{
			System.out.println("Test Pass : Transaction Authorization is Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 635, 9, resPass);
			return true;
		} 
		else 
		{
			System.out.println("Test Fail : Transaction Authorization is Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 635, 9, resFail);
			return false;

		}
	 }
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 635, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	}

 @FindBy(xpath = "//*[@id='myNavbar']/ul/li")
 public static List<WebElement> sellerHomePageHeaderList;

 @FindBy(xpath = "//*[@id='formLoadDataXML']/button")
 public static List<WebElement> sellerHomePageFooterList;
 

 public boolean checkClickOnSellerPriceBook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {
   excelReader = new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

   System.out.println("*************************************************** checkClickOnSellerPriceBook *****************************************************************");

   try
   {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemsMenu));
		itemsMenu.click();
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sellerPriceBookMenu));
		sellerPriceBookMenu.click();
		
		Thread.sleep(2000);
			
		ArrayList<String> actsellerHomePageHeaderList=new ArrayList<String>();
		
		int sellerHomePageHeaderCount =sellerHomePageHeaderList.size();
		
		System.err.println("sellerHomePageHeaderCount   :  "+sellerHomePageHeaderCount);
		
		for (int i = 0; i < sellerHomePageHeaderCount; i++) 
		{
			String data=sellerHomePageHeaderList.get(i).getText();
			actsellerHomePageHeaderList.add(data);
		}
				 		
		String actsellerHomePageHeader=actsellerHomePageHeaderList.toString();
		String expsellerHomePageHeader=excelReader.getCellData(xlSheetName, 638, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 638, 8, actsellerHomePageHeader);
		
		System.err.println("  Actual  sellerHomePageHeader : "+actsellerHomePageHeader);
		System.err.println("  Expected  sellerHomePageHeader : "+expsellerHomePageHeader);
			
		    	
		ArrayList<String> actsellerHomePageFooterList=new ArrayList<String>();
			
		int sellerHomePageFooterCount =sellerHomePageFooterList.size();
		
		System.err.println("sellerHomePageFooterCount   :  "+sellerHomePageFooterCount);
		
		for (int i = 0; i < sellerHomePageFooterCount; i++) 
		{
			String data=sellerHomePageFooterList.get(i).getText();
			actsellerHomePageFooterList.add(data);
		}
				 		
		String actsellerHomePageFooter=actsellerHomePageFooterList.toString();
		String expsellerHomePageFooter=excelReader.getCellData(xlSheetName, 639, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 639, 8, actsellerHomePageFooter);
		
		System.err.println("  Actual  sellerHomePageFooter : "+actsellerHomePageFooter);
		System.err.println("  Expected  sellerHomePageFooter : "+expsellerHomePageFooter);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookSaveBtn));
		boolean actBuyerPriceBook                         = buyerPriceBook_PriceBook.isDisplayed();
		boolean actBuyerPriceBookAbbreviation             = buyerPriceBook_AbbreviationBtn.isDisplayed();
		boolean actBuyerPriceBookLabel                    = buyerPriceBookLabel.isDisplayed();
		boolean actBuyerPriceBookClearBtn                 = buyerPriceBookClearBtn.isDisplayed();
		boolean actBuyerPriceBookPasteBtn                 = buyerPriceBookPasteBtn.isDisplayed();
		boolean actBuyerPriceBookCopyBtn                  = buyerPriceBookCopyBtn.isDisplayed();
		boolean actBuyerPriceBookSelectAllBtn             = buyerPriceBookSelectAllBtn.isDisplayed();
		boolean actBuyerPriceBookCloseBtn                 = buyerPriceBookCloseBtn.isDisplayed();
		boolean actBuyerPriceBookSaveBtn                  = buyerPriceBookSaveBtn.isDisplayed();
		boolean actBuyerPriceBookDeleteBtn                = buyerPriceBookDeleteBtn.isDisplayed();
		boolean actBuyerPriceBookStartingDate             = buyerPriceBookStaringDate.isDisplayed();
		boolean actBuyerPriceBookEndingDate               = buyerPriceBookENdingDate.isDisplayed();
		boolean actBuyerPriceBookInActiveCheckbox         = buyerPriceBookInActiveCheckBox.isDisplayed();
		boolean actBuyerPriceBookFilterItem               = buyerPriceBookFilter_Item.isDisplayed();
		boolean actBuyerPriceBookFilterCurrency           = buyerPriceBookFilter_Currency.isDisplayed();
		boolean actBuyerPriceBookFilterCustomer           = buyerPriceBookFilter_Customer.isDisplayed();
		boolean actBuyerPriceBookFilterDepartment         = buyerPriceBookFilter_Department.isDisplayed();
		boolean actBuyerPriceBookFilterClearBtn           = buyerPriceBookFilter_ClearBtn.isDisplayed();
		boolean actBuyerPriceBookFilterBtn                = buyerPriceBookFilter_FilterBtn.isDisplayed();
		boolean actBuyerPriceBookLoadBtn                  = buyerPriceBookFilter_FilterAndLoadBtn.isDisplayed();
		boolean actBuyerPriceBookAdvanceExportImportExcel = buyerPriceBook_AdvanceExcelImportBtn.isDisplayed();
		boolean actBuyerPriceBookHistory                  = buyerPriceBook_PrintRateHistoryBtn.isDisplayed();
		boolean actBuyerPriceBookExportXML                = buyerPriceBook_ExportToXmlBtn.isDisplayed();
		boolean actBuyerPriceBookImportFromXML            = buyerPriceBook_ImportFromXmlBtn.isDisplayed();
		boolean actBuyerPriceBookExportExcel              = buyerPriceBook_ExportToExcel.isDisplayed();
		boolean actBuyerPriceBookImportFromExcel          = buyerPriceBook_ImportFromExcel.isDisplayed();
		boolean actBuyerPriceBookViewPrice                = buyerPriceBook_ViewPrice.isDisplayed();
		boolean actBuyerPriceBookUpdatePriceList          = buyerPriceBook_UpdatePriceList.isDisplayed();
		boolean actBuyerPriceBookGridItem                 = gridItemColoumn.isDisplayed();
		boolean actBuyerPriceBookRateColumn               = gridRateColoumn.isDisplayed();
	/*	boolean actBuyerPriceBookGridSOColoumn            = gridSoColumn.isDisplayed();
		boolean actBuyerPriceBookSTColumn                 = gridStColumn.isDisplayed();
	*/
		boolean expBuyerPriceBook                         = true;
		boolean expBuyerPriceBookAbbreviation             = true;
		boolean expBuyerPriceBookLabel                    = true;
		boolean expBuyerPriceBookClearBtn                 = true;
		boolean expBuyerPriceBookPasteBtn                 = true;
		boolean expBuyerPriceBookCopyBtn                  = true;
		boolean expBuyerPriceBookSelectAllBtn             = true;
		boolean expBuyerPriceBookCloseBtn                 = true;
		boolean expBuyerPriceBookSaveBtn                  = true;
		boolean expBuyerPriceBookDeleteBtn                = true;
		boolean expBuyerPriceBookStartingDate 			  = true;
		boolean expBuyerPriceBookEndingDate 			  = true;
		boolean expBuyerPriceBookInActiveCheckbox 		  = true;
		boolean expBuyerPriceBookFilterItem               = true;
		boolean expBuyerPriceBookFilterCurrency 		  = true;
		boolean expBuyerPriceBookFilterCustomer 		  = true;
		boolean expBuyerPriceBookFilterDepartment 		  = true;
		boolean expBuyerPriceBookFilterClearBtn 		  = true;
		boolean expBuyerPriceBookFilterBtn 			      = true;
		boolean expBuyerPriceBookLoadBtn 				  = true;
		boolean expBuyerPriceBookAdvanceExportImportExcel = true;
		boolean expBuyerPriceBookHistory                  = true;
		boolean expBuyerPriceBookExportXML                = true;
		boolean expBuyerPriceBookImportFromXML            = true;
		boolean expBuyerPriceBookExportExcel              = true;
		boolean expBuyerPriceBookImportFromExcel          = true;
		boolean expBuyerPriceBookViewPrice                = true;
		boolean expBuyerPriceBookUpdatePriceList          = true;
		boolean expBuyerPriceBookGridItem                 = true;
		boolean expBuyerPriceBookRateColumn               = true;
		/*boolean expBuyerPriceBookGridPOColoumn            = true;
		boolean expBuyerPriceBookPTColumn                 = true;
	*/
		System.out.println("Buyer Price Book Value Actual              : " + actBuyerPriceBook +                        " Value Expected : "+ expBuyerPriceBook);
		System.out.println("Buyer Price Book Abbreviation Value Actual : " + actBuyerPriceBookAbbreviation+             " Value Expected : " + expBuyerPriceBookAbbreviation);
		System.out.println("Buyer Price Book Label Value Actual        : " + actBuyerPriceBookLabel+                    " Value Expected : " + expBuyerPriceBookLabel);
		System.out.println("Clear Button Value Actual                  : " + actBuyerPriceBookClearBtn+                 " Value Expected : " + expBuyerPriceBookClearBtn);
		System.out.println("Paste Button Value Actual                  : " + actBuyerPriceBookPasteBtn+                 " Value Expected : " + expBuyerPriceBookPasteBtn);
		System.out.println("Copy Button Value Actual                   : " + actBuyerPriceBookCopyBtn+                  " Value Expected : " + expBuyerPriceBookCopyBtn);
		System.out.println("Select All Button Value Actual             : " + actBuyerPriceBookSelectAllBtn+             " Value Expected : " + expBuyerPriceBookSelectAllBtn);
		System.out.println("Close Button Value Actual                  : " + actBuyerPriceBookCloseBtn+                 " Value Expected : " + expBuyerPriceBookCloseBtn);
		System.out.println("Save Button Value Actual                   : " + actBuyerPriceBookSaveBtn+                  " Value Expected : " + expBuyerPriceBookSaveBtn);
		System.out.println("Delete Button Value Actual                 : " + actBuyerPriceBookDeleteBtn+                " Value Expected : " + expBuyerPriceBookDeleteBtn);
		System.out.println("Starting Date Value Actual                 : " + actBuyerPriceBookStartingDate+             " Value Expected : " + expBuyerPriceBookStartingDate);
		System.out.println("Ending Date Value Actual                   : " + actBuyerPriceBookEndingDate+               " Value Expected : " + expBuyerPriceBookEndingDate);
		System.out.println("In Active Value Actual                     : " + actBuyerPriceBookInActiveCheckbox+         " Value Expected : " + expBuyerPriceBookInActiveCheckbox);
	    System.out.println("Filter Item Value Actual                   : " + actBuyerPriceBookFilterItem+               " Value Expected : " + expBuyerPriceBookFilterItem);
		System.out.println("Filter Currency Value Actual               : " + actBuyerPriceBookFilterCurrency+           " Value Expected : " + expBuyerPriceBookFilterCurrency);
		System.out.println("Filter Customer Value Actual               : " + actBuyerPriceBookFilterCustomer+           " Value Expected : " + expBuyerPriceBookFilterCustomer);
		System.out.println("Filter Department Value Actual             : " + actBuyerPriceBookFilterDepartment+         " Value Expected : " + expBuyerPriceBookFilterDepartment);
		System.out.println("Filter Clear Button Value Actual           : " + actBuyerPriceBookFilterClearBtn+           " Value Expected : " + expBuyerPriceBookFilterClearBtn);
		System.out.println("Filter Button Value Actual                 : " + actBuyerPriceBookFilterBtn+                " Value Expected : " + expBuyerPriceBookFilterBtn);
		System.out.println("Load Button Value Actual                   : " + actBuyerPriceBookLoadBtn+                  " Value Expected : " + expBuyerPriceBookLoadBtn);
		System.out.println("Advance Import and Export Value Actual     : " + actBuyerPriceBookAdvanceExportImportExcel+ " Value Expected : " + expBuyerPriceBookAdvanceExportImportExcel);
		System.out.println("History Value Actual                       : " + actBuyerPriceBookHistory+                  " Value Expected : " + expBuyerPriceBookHistory);
		System.out.println("Export XML Value Actual                    : " + actBuyerPriceBookExportXML+                " Value Expected : " + expBuyerPriceBookExportXML);
		System.out.println("Import XML Value Actual                    : " + actBuyerPriceBookImportFromXML+            " Value Expected : " + expBuyerPriceBookImportFromXML);
		System.out.println("Export Excel Value Actual                  : " + actBuyerPriceBookExportExcel+              " Value Expected : " + expBuyerPriceBookExportExcel);
		System.out.println("Import from Excel Value Actual             : " + actBuyerPriceBookImportFromExcel+          " Value Expected : " + expBuyerPriceBookImportFromExcel);
		System.out.println("View Price Button Value Actual             : " + actBuyerPriceBookViewPrice+                " Value Expected : " + expBuyerPriceBookViewPrice);
		System.out.println("Buyer Price Book Value Actual              : " + actBuyerPriceBookUpdatePriceList+          " Value Expected : " + expBuyerPriceBookUpdatePriceList);
		System.out.println("Buyer Price Book Abbreviation Value Actual : " + actBuyerPriceBookGridItem+                 " Value Expected : " + expBuyerPriceBookGridItem);
		System.out.println("Buyer Price Book Label Value Actual        : " + actBuyerPriceBookRateColumn+               " Value Expected : " + expBuyerPriceBookRateColumn);
		/*System.out.println("Clear Button Value Actual                  : " + actBuyerPriceBookGridSOColoumn+            " Value Expected : " + expBuyerPriceBookGridPOColoumn);
		System.out.println("Buyer Price Book Value Actual              : " + actBuyerPriceBookSTColumn+                 " Value Expected : " + expBuyerPriceBookPTColumn);
	*/
		boolean SellerHomeDisplayFileds=actBuyerPriceBook == expBuyerPriceBook && actBuyerPriceBookAbbreviation == expBuyerPriceBookAbbreviation
							&& actBuyerPriceBookLabel == expBuyerPriceBookLabel
							&& actBuyerPriceBookClearBtn == expBuyerPriceBookClearBtn
							&& actBuyerPriceBookPasteBtn == expBuyerPriceBookPasteBtn
							&& actBuyerPriceBookCopyBtn == expBuyerPriceBookCopyBtn
							&& actBuyerPriceBookSelectAllBtn == expBuyerPriceBookSelectAllBtn
							&& actBuyerPriceBookCloseBtn == expBuyerPriceBookCloseBtn
							&& actBuyerPriceBookSaveBtn == expBuyerPriceBookSaveBtn
							&& actBuyerPriceBookDeleteBtn == expBuyerPriceBookDeleteBtn
							&& actBuyerPriceBookStartingDate == expBuyerPriceBookStartingDate
							&& actBuyerPriceBookEndingDate == expBuyerPriceBookEndingDate
							&& actBuyerPriceBookInActiveCheckbox == expBuyerPriceBookInActiveCheckbox
							&& actBuyerPriceBookFilterItem == expBuyerPriceBookFilterItem
							&& actBuyerPriceBookFilterCurrency == expBuyerPriceBookFilterCurrency
							&& actBuyerPriceBookFilterCustomer == expBuyerPriceBookFilterCustomer
							&& actBuyerPriceBookFilterDepartment == expBuyerPriceBookFilterDepartment
							&& actBuyerPriceBookFilterClearBtn == expBuyerPriceBookFilterClearBtn
							&& actBuyerPriceBookFilterBtn == expBuyerPriceBookFilterBtn
							&& actBuyerPriceBookLoadBtn == expBuyerPriceBookLoadBtn
							&& actBuyerPriceBookAdvanceExportImportExcel == expBuyerPriceBookAdvanceExportImportExcel
							&& actBuyerPriceBookHistory == expBuyerPriceBookHistory
							&& actBuyerPriceBookExportXML == expBuyerPriceBookExportXML
							&& actBuyerPriceBookImportFromXML == expBuyerPriceBookImportFromXML
							&& actBuyerPriceBookExportExcel == expBuyerPriceBookExportExcel
							&& actBuyerPriceBookImportFromExcel == expBuyerPriceBookImportFromExcel
							&& actBuyerPriceBookViewPrice == expBuyerPriceBookViewPrice
							&& actBuyerPriceBookUpdatePriceList == expBuyerPriceBookUpdatePriceList
							&& actBuyerPriceBookGridItem == expBuyerPriceBookGridItem
							&& actBuyerPriceBookRateColumn == expBuyerPriceBookRateColumn;
							/*&& actBuyerPriceBookGridSOColoumn == expBuyerPriceBookGridPOColoumn
							&& actBuyerPriceBookSTColumn == expBuyerPriceBookPTColumn;*/
		
		
		String actSellerHomePage=Boolean.toString(SellerHomeDisplayFileds);
		String expSellerHomePage=excelReader.getCellData(xlSheetName, 640, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 640, 8, actSellerHomePage);
		
		if (actSellerHomePage.equalsIgnoreCase(expSellerHomePage) && 
				actsellerHomePageFooter.equalsIgnoreCase(expsellerHomePageFooter) && 
				actsellerHomePageHeader.equalsIgnoreCase(expsellerHomePageHeader)) 
		{
			System.out.println("Pass: Dispalyed Buyer Price Book Screen");
			excelReader.setCellData(xlfile, xlSheetName, 637, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println("Fail: Dispalyed Buyer Price Book Screen");
			excelReader.setCellData(xlfile, xlSheetName, 637, 9, resFail);
			return false;
		}
   }
   catch (Exception e) 
   {
	   String exception =e.getMessage();
	   excelReader.setExceptionInExcel(xlfile, xlSheetName, 637, 10, exception);
	   System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   return false;
   }	
}

 
 
 public boolean checkClickOnCustomizationSettingsOptionInSellerPriceBook() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

  excelReader = new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("************************************* checkClickOnCustomizationSettingsOptionInSellerPriceBook ***************************************");
  
  try
  {
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_PriceBook));
	    buyerPriceBook_PriceBook.click();
	    buyerPriceBook_PriceBook.sendKeys(excelReader.getCellData(xlSheetName, 642, 6));
	    Thread.sleep(2000);
	    buyerPriceBook_PriceBook.sendKeys(Keys.TAB);
	
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeSettingBtn));
	    buyerPriceBook_CustamizeSettingBtn.click();
	
	    
	     ArrayList<String> actitemBuyerPriceBookCustomizationList=new ArrayList<String>();
		
		int itemBuyerPriceBookCustomizationCount =itemBuyerPriceBookCustomizationList.size();
		 		
		System.err.println("itemBuyerPriceBookCustomizationCount   :  "+itemBuyerPriceBookCustomizationCount);
		 		
	     for (int i = 0; i < itemBuyerPriceBookCustomizationCount; i++) 
		 {
			String data=itemBuyerPriceBookCustomizationList.get(i).getText();
			actitemBuyerPriceBookCustomizationList.add(data);
		 }
		 		
		String actitemSellerPriceBookCustomization=actitemBuyerPriceBookCustomizationList.toString();
		String expitemSellerPriceBookCustomization=excelReader.getCellData(xlSheetName, 643, 7);
			 		
		excelReader.setCellData(xlfile, xlSheetName, 643, 8, actitemSellerPriceBookCustomization);
			    	
	    System.err.println("  Actual  itemSellerPriceBookCustomization : "+actitemSellerPriceBookCustomization);
	    System.err.println("  Expected itemSellerPriceBookCustomization : "+expitemSellerPriceBookCustomization);
	    
	    
		boolean actDateRangeCheckBox = buyerPriceBook_CustamizeDateRangeCheckBox.isDisplayed();
		boolean actVendorCheckBox    = buyerPriceBook_CustomizeVendorCheckBox.isDisplayed();
		boolean actWarehouseCheckBox = buyerPriceBook_WarehouseCheckBox.isDisplayed();
		boolean actQtyRangeCheckbox  = buyerPriceBook_QualityRangeCheckBox.isDisplayed();
		boolean actCurrencyCheckBox  = buyerPriceBook_CurrencyCheckBox.isDisplayed();
		boolean actUnitCheckBox      = buyerPriceBook_UnitCheckBox.isDisplayed();
	
		boolean expDateRangeCheckBox = true;
		boolean expVendorCheckBox    = true;
		boolean expWarehouseCheckBox = true;
		boolean expQtyRangeCheckbox  = true;
		boolean expCurrencyCheckBox  = true;
		boolean expUnitCheckBox      = true;
	
		System.out.println("Buyer Price Book Value Actual              : " + actDateRangeCheckBox+  " Value Expected : " + expDateRangeCheckBox);
		System.out.println("Buyer Price Book Abbreviation Value Actual : " + actVendorCheckBox +    " Value Expected : " + expVendorCheckBox);
		System.out.println("Buyer Price Book Label Value Actual        : " + actWarehouseCheckBox+  " Value Expected : " + expWarehouseCheckBox);
		System.out.println("Clear Button Value Actual                  : " + actQtyRangeCheckbox +  " Value Expected : " + expQtyRangeCheckbox);
		System.out.println("Paste Button Value Actual                  : " + actCurrencyCheckBox +  " Value Expected : " + expCurrencyCheckBox);
		System.out.println("Copy Button Value Actual                   : " + actUnitCheckBox +      " Value Expected : " + expUnitCheckBox);
	
		if (actDateRangeCheckBox == expDateRangeCheckBox && actVendorCheckBox == expVendorCheckBox
				&& actWarehouseCheckBox == expWarehouseCheckBox && actQtyRangeCheckbox == expQtyRangeCheckbox
				&& actCurrencyCheckBox == expCurrencyCheckBox && actUnitCheckBox == expUnitCheckBox && 
				actitemSellerPriceBookCustomization.equalsIgnoreCase(expitemSellerPriceBookCustomization)) 
		{
			System.out.println("Pass: Customize Screen Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 641, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Fail: Customize Screen Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 641, 9, resFail);
			return false;
		}
  }
  catch (Exception e) 
  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 641, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
  }
 }

	@FindBy(xpath = "//th[@id='PriceBookWebGrid_control_heading_6']//div[@class='no-select'][contains(text(),'Customer')]")
	private static WebElement gridCustomizeCustomerCheckbox;

 public boolean checkSellerPriceBookCustomizeColumnsInGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
   excelReader = new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

   System.out.println("********************************************** checkSellerPriceBookCustomizeColumnsInGrid  ******************************************************");

   try
   {
	   Thread.sleep(1000);
	   
	    
        if(buyerPriceBook_CustamizeDateRangeCheckBox.isSelected())
        {
        	System.out.println("The Elements are checked");
        }
        else
        {
        	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeDateRangeCheckBox));
    		buyerPriceBook_CustamizeDateRangeCheckBox.click();

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustomizeVendorCheckBox));
    		buyerPriceBook_CustomizeVendorCheckBox.click();

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_WarehouseCheckBox));
    		buyerPriceBook_WarehouseCheckBox.click();

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_QualityRangeCheckBox));
    		buyerPriceBook_QualityRangeCheckBox.click();

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CurrencyCheckBox));
    		buyerPriceBook_CurrencyCheckBox.click();

    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_UnitCheckBox));
    		buyerPriceBook_UnitCheckBox.click();

        }
        	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeSettingBtn));
		buyerPriceBook_CustamizeSettingBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(beforeClickOnToggle));
		beforeClickOnToggle.click();
	    Thread.sleep(3000);
	    
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridWareHouseColoumn));
		boolean actGridItemColumn         = gridItemColoumn.isDisplayed();
		boolean actGridWarehouseColumn    = gridWareHouseColoumn.isDisplayed();
		boolean actGridStartingDateColumn = startingdate.isDisplayed();
		boolean actGridEndingDateColumn   = endingdate.isDisplayed();
		boolean actGridVendorColumn       = customer.isDisplayed();
		boolean actGridCurrencyColumn     = currencyPriceBook.isDisplayed();

		boolean expGridItemColumn         = true;
		boolean expGridWarehouseColumn    = true;
		boolean expGridStartingDateColumn = true;
		boolean expGridEndingDateColumn   = true;
		boolean expGridVendorColumn       = true;
		boolean expGridCurrencyColumn     = true;

		System.out.println("Grid Item Column Value Actual               : " + actGridItemColumn +        " Value Expected : " + expGridItemColumn);
		System.out.println("Grid Warehouse Column Value Actual          : " + actGridWarehouseColumn+    " Value Expected : " + expGridWarehouseColumn);
		System.out.println("Grid Starting Date Column Value Actual      : " + actGridStartingDateColumn+ " Value Expected : " + expGridStartingDateColumn);
		System.out.println("Grid Ending Date Column Value Actual        : " + actGridEndingDateColumn+   " Value Expected : " + expGridEndingDateColumn);
		System.out.println("Grid Vendor Column Value Actual             : " + actGridVendorColumn+       " Value Expected : " + expGridVendorColumn);
		System.out.println("Grid Currency Columnn Value Actual          : " + actGridCurrencyColumn+     " Value Expected : " + expGridCurrencyColumn);

		
		
       ArrayList<String> actbodyGridHeaderList=new ArrayList<String>();
		
		int bodyGridHeaderCount=bodyGridHeaderList.size();
		
		System.err.println(" Body Grid Header Count : "+bodyGridHeaderCount);
		
		
		for (int i = 1; i < bodyGridHeaderCount; i++) 
		{
			
			String data=bodyGridHeaderList.get(i).getText();
			
			actbodyGridHeaderList.add(data);
		
		}
		
		String actbodyGridHeader=actbodyGridHeaderList.toString();
		String expbodyGridHeader=excelReader.getCellData(xlSheetName, 645, 7);
			 		
		excelReader.setCellData(xlfile, xlSheetName, 645, 8, actbodyGridHeader);
			    	
	    System.err.println("  Actual  bodyGridHeader : "+actbodyGridHeader);
	    System.err.println("  Expected bodyGridHeader : "+expbodyGridHeader);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCellSelect));
		itemFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemValuePriceBook));
		itemValuePriceBook.click();
		itemValuePriceBook.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseValue));
		wareHouseValue.click();
		wareHouseValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(satrtingDateFirstCellSelect));
		satrtingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingDateValue));
		startingDateValue.click();
		startingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateFirstCellSelect));
		endingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateValue));
		endingDateValue.click();
		endingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorFirstCellSelect));
		vendorFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
		vendorValue.click();
		vendorValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorFirstCellSelect));
		vendorFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
		vendorValue.click();
		vendorValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyFirstCellSelect));
		currencyFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyOptionValue));
		currencyOptionValue.click();
		currencyOptionValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyFirstCellSelect));
		minQtyFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyValue));
		minQtyValue.click();
		minQtyValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyFirstCellSelect));
		maxQtyFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyValue));
		maxQtyValue.click();
		maxQtyValue.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rate));
		boolean actGridMinQtyColumn = minQty.isDisplayed();
		boolean actGridMaxQtyColumn = maxQty.isDisplayed();
		boolean actGridUnitColumn   = unit.isDisplayed();
		boolean actGridRateColumn   = rate.isDisplayed();
		/*boolean actGridPOColumn     = gridSoColumn.isDisplayed();
		boolean actGridPTColumn     = gridStColumn.isDisplayed();*/

		boolean expGridMinQtyColumn = true;
		boolean expGridMaxQtyColumn = true;
		boolean expGridUnitColumn   = true;
		boolean expGridRateColumn   = true;
		/*boolean expGridPOColumn     = true;
		boolean expGridPTColumn     = true;*/

		System.out.println("Grid Min Qty Column Value Actual              : " + actGridMinQtyColumn+ " Value Expected : " + expGridMinQtyColumn);
		System.out.println("Grid Max Qty Column Value Actual              : " + actGridMaxQtyColumn+ " Value Expected : " + expGridMaxQtyColumn);
		System.out.println("Grid Unit Column Value Actual                 : " + actGridUnitColumn+   " Value Expected : " + expGridUnitColumn);
		System.out.println("Grid Rate Column Value Actual                 : " + actGridRateColumn+   " Value Expected : " + expGridRateColumn);
		/*System.out.println("Grid PO Column Value Actual                   : " + actGridPOColumn +    " Value Expected : "+ expGridPOColumn);
		System.out.println("Grid PT Column Value Actual                   : " + actGridPTColumn +    " Value Expected : "+ expGridPTColumn);
*/
		
		boolean sellerHomePageBodyFiledsDisplay=actGridItemColumn == expGridItemColumn && actGridWarehouseColumn == actGridWarehouseColumn
													&& actGridStartingDateColumn == actGridStartingDateColumn
													&& actGridEndingDateColumn == actGridEndingDateColumn && actGridVendorColumn == actGridVendorColumn
													&& actGridCurrencyColumn == actGridCurrencyColumn
									
													&& actGridMinQtyColumn == expGridMinQtyColumn && actGridMaxQtyColumn == expGridMaxQtyColumn
													&& actGridUnitColumn == expGridUnitColumn && actGridRateColumn == expGridRateColumn
													/*&& actGridPOColumn == expGridPOColumn && actGridPTColumn == expGridPTColumn*/;
		
		
		String actSellerHomeBodyGrid=Boolean.toString(sellerHomePageBodyFiledsDisplay);
		String expSellerHomeBodyGrid=excelReader.getCellData(xlSheetName, 646, 7);
 		
		excelReader.setCellData(xlfile, xlSheetName, 646, 8, actSellerHomeBodyGrid);
		    	
		System.err.println("  Actual  SellerHomeBodyGrid : "+actSellerHomeBodyGrid);
		System.err.println("  Expected SellerHomeBodyGrid : "+expSellerHomeBodyGrid);
				
		
		if (actSellerHomeBodyGrid.equalsIgnoreCase(expSellerHomeBodyGrid) && actbodyGridHeader.equalsIgnoreCase(expbodyGridHeader))
		{
			System.out.println("Pass: Customize Screen Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 644, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Fail: Customize Screen Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 644, 9, resFail);
			return false;
		}
   }
   catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 644, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }

  public boolean checkSaveSellerPriceBook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************************** checkSaveSellerPriceBook  ******************************************************");
		
    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCellSelect));
		itemFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemValuePriceBook));
		itemValuePriceBook.click();
		itemValuePriceBook.sendKeys(excelReader.getCellData(xlSheetName, 648, 6));
        Thread.sleep(2000);

        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseFirstCellSelect));
		wareHouseFirstCellSelect.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseValue));
		wareHouseValue.click();
		wareHouseValue.sendKeys(excelReader.getCellData(xlSheetName, 649, 6));
		Thread.sleep(2000);
		wareHouseValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(satrtingDateFirstCellSelect));
		satrtingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingDateValue));
		startingDateValue.click();
		startingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateFirstCellSelect));
		endingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateValue));
		endingDateValue.click();
		endingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorFirstCellSelect));
		vendorFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
		vendorValue.click();
		vendorValue.sendKeys(excelReader.getCellData(xlSheetName, 650, 6));
		Thread.sleep(2000);
		vendorValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyFirstCellSelect));
		currencyFirstCellSelect.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyOptionValue));
		currencyOptionValue.click();
		currencyOptionValue.sendKeys(excelReader.getCellData(xlSheetName, 651, 6));
		Thread.sleep(2000);
		currencyOptionValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyFirstCellSelect));
		minQtyFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyValue));
		minQtyValue.click();
		minQtyValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyFirstCellSelect));
		maxQtyFirstCellSelect.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyValue));
		maxQtyValue.click();
		maxQtyValue.sendKeys(Keys.TAB);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateFirstCellSelect));
		rateFirstCellSelect.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateValue));
		rateValue.sendKeys(excelReader.getCellData(xlSheetName, 652, 6));
		Thread.sleep(2000);
		rateValue.sendKeys(Keys.TAB);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PoValue));
		PoValue.sendKeys(excelReader.getCellData(xlSheetName, 653, 6));
		PoValue.sendKeys(Keys.TAB);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookSaveBtn));
		buyerPriceBookSaveBtn.click();

		
        String expSaveMessage = excelReader.getCellData(xlSheetName, 654, 7);
		
        //excelReader.setCellData(xlfile, xlSheetName, 1430, 8, expSaveMessage);
        
		boolean actSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveAccountMessage = true;

		String actSavingStatus= Boolean.toString(actSaveAccountMessage);
		String expSavingStatus=excelReader.getCellData(xlSheetName, 655, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 655, 8, actSavingStatus);
		
		System.out.println("Actual Saving Status  : "+actSavingStatus);
		System.out.println(" Expected Saving Status  : "+expSavingStatus);
		
		if (actSavingStatus.equalsIgnoreCase(expSavingStatus)) 
		{
			System.out.println("Pass: Input data in to warehouse And Selecting Products in Cumbobox and Saved Successfully");
			excelReader.setCellData(xlfile, xlSheetName, 647, 9, resPass);
			return true;
		} 
		else
		{
			System.out.println("Fail:  Input data in to warehouse And Selecting Products in Cumbobox and Saved Successfully");
			excelReader.setCellData(xlfile, xlSheetName, 647, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 647, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
  

 public boolean checkEditSellerPriceBook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************************** checkEditSellerPriceBook  ******************************************************");
		
    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(afterClickOnToggle));
		afterClickOnToggle.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_PriceBook));
		buyerPriceBook_PriceBook.click();
		buyerPriceBook_PriceBook.sendKeys(excelReader.getCellData(xlSheetName, 657, 6));
		Thread.sleep(2000);
		buyerPriceBook_PriceBook.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_AbbreviationBtn));
		buyerPriceBook_AbbreviationBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_PriceBook));
		String actPriceBookName = buyerPriceBook_PriceBook.getAttribute("value");
		String expPriceBookName = excelReader.getCellData(xlSheetName, 658, 7);

		excelReader.setCellData(xlfile, xlSheetName, 658, 8, actPriceBookName);
		
		System.out.println("Edit Buyer Price Book Check Price Book Name  : " + actPriceBookName + "  Value Expected : "+ expPriceBookName);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookFilter_FilterAndLoadBtn));
		buyerPriceBookFilter_FilterAndLoadBtn.click();
		Thread.sleep(4000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorFirstCellSelect));
		String actItemFirstCell      = itemFirstCellSelect.getText();
		String actWarehouseFirstCell = wareHouseFirstCellSelect.getText();
		String actVendorFirstCell    = vendorFirstCellSelect.getText();
		String actCurrencyFirstCell  = currencyFirstCellSelect.getText();
		String actRateFirstCell      = rateFirstCellSelect.getText();
		//String actPOFirstCell        = PoFirstCellSelect.getText();
		
		String expItemFirstCell      = excelReader.getCellData(xlSheetName, 659, 7);
		String expWarehouseFirstCell = excelReader.getCellData(xlSheetName, 660, 7);
		String expVendorFirstCell    = excelReader.getCellData(xlSheetName, 661, 7);
		String expCurrencyFirstCell  = excelReader.getCellData(xlSheetName, 662, 7);
		String expRateFirstCell      = excelReader.getCellData(xlSheetName, 663, 7);
		String expPOFirstCell        = excelReader.getCellData(xlSheetName, 664, 7);

		excelReader.setCellData(xlfile, xlSheetName, 659, 8, actItemFirstCell);
		excelReader.setCellData(xlfile, xlSheetName, 660, 8, actWarehouseFirstCell);
		excelReader.setCellData(xlfile, xlSheetName, 661, 8, actVendorFirstCell);
		excelReader.setCellData(xlfile, xlSheetName, 662, 8, actCurrencyFirstCell);
		excelReader.setCellData(xlfile, xlSheetName, 663, 8, actRateFirstCell);
		//excelReader.setCellData(xlfile, xlSheetName, 664, 8, actPOFirstCell);
		
		System.out.println("Edit Buyer Price Book check Item            : " + actItemFirstCell +     " Value Expected : "+ expItemFirstCell);
		System.out.println("Edit Buyer Price Book check Warehouse       : " + actWarehouseFirstCell+ " Value Expected : " + expWarehouseFirstCell);
		System.out.println("Edit Buyer Price Book check Vendor          : " + actVendorFirstCell +   " Value Expected : "+ expVendorFirstCell);
		System.out.println("Edit Buyer Price Book check Currency        : " + actCurrencyFirstCell + " Value Expected : " + expCurrencyFirstCell);
		System.out.println("Edit Buyer Price Book check Rate            : " + actRateFirstCell +     " Value Expected : "+ expRateFirstCell);
		//System.out.println("Edit Buyer Price Book check PO              : " + actPOFirstCell +       " Value Expected : "+ expPOFirstCell);

		if (actPriceBookName.equalsIgnoreCase(expPriceBookName)
				&& actItemFirstCell.equalsIgnoreCase(expItemFirstCell)
				&& actWarehouseFirstCell.equalsIgnoreCase(expWarehouseFirstCell)
				&& actVendorFirstCell.equalsIgnoreCase(expVendorFirstCell)
				&& actCurrencyFirstCell.equalsIgnoreCase(expCurrencyFirstCell)
				&& actRateFirstCell.equalsIgnoreCase(expRateFirstCell)
				//&& actPOFirstCell.equalsIgnoreCase(expPOFirstCell)
				) 
		{
			System.out.println("Pass: Edit Buyer PriceBook");
			excelReader.setCellData(xlfile, xlSheetName, 656, 9, resPass);
			return true;
		}
		else 
		{
			System.out.println("Fail: Edit Buyer PriceBook");
			excelReader.setCellData(xlfile, xlSheetName, 656, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 656, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }



  public boolean checkUpdateSellerPriceBook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {

   excelReader = new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

   System.out.println("********************************************** checkUpdateSellerPriceBook  ******************************************************");
		
   try
   {
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemSecondCellSelect));
	itemSecondCellSelect.click();
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemValuePriceBook));
	itemValuePriceBook.click();
	Thread.sleep(3000);
	itemValuePriceBook.sendKeys(excelReader.getCellData(xlSheetName, 666, 6));
	Thread.sleep(2000);
	itemValuePriceBook.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseSecondCellSelect));
	wareHouseSecondCellSelect.click();
	wareHouseValue.sendKeys(excelReader.getCellData(xlSheetName, 667, 6));
	Thread.sleep(2000);
	wareHouseValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(satrtingDateSecondCellSelect));
	satrtingDateSecondCellSelect.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingDateValue));
	startingDateValue.click();
	startingDateValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateSecondCellSelect));
	endingDateSecondCellSelect.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateValue));
	endingDateValue.click();
	endingDateValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSecondCellSelect));
	vendorSecondCellSelect.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
	vendorValue.click();
	Thread.sleep(3000);
	vendorValue.sendKeys(excelReader.getCellData(xlSheetName, 668, 6));
	Thread.sleep(2000);
	vendorValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyOptionValue));
	currencyOptionValue.click();
	currencyOptionValue.sendKeys(excelReader.getCellData(xlSheetName, 669, 6));
	Thread.sleep(2000);
	currencyOptionValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyValue));
	minQtyValue.click();
	minQtyValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyValue));
	maxQtyValue.click();
	maxQtyValue.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookUnit));
	buyerPriceBookUnit.click();
	buyerPriceBookUnit.sendKeys(Keys.END);
	buyerPriceBookUnit.sendKeys(Keys.SHIFT,Keys.HOME);
	buyerPriceBookUnit.sendKeys(excelReader.getCellData(xlSheetName, 670, 6));
	Thread.sleep(2000);
	buyerPriceBookUnit.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateValue));
	rateValue.sendKeys(excelReader.getCellData(xlSheetName, 671, 6));
	Thread.sleep(2000);
	rateValue.sendKeys(Keys.TAB);

	/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PoValue));
	PoValue.sendKeys(excelReader.getCellData(xlSheetName, 672, 6));
	Thread.sleep(2000);
	PoValue.sendKeys(Keys.TAB);*/

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookSaveBtn));
	buyerPriceBookSaveBtn.click();
	
	String expSaveMessage = excelReader.getCellData(xlSheetName, 673, 7);
		
    // excelReader.setCellData(xlfile, xlSheetName, 1449, 8, expSaveMessage);
     
	boolean actSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
	boolean expSaveAccountMessage = true;

	String actSavingStatusUpdating= Boolean.toString(actSaveAccountMessage);
	String expSavingStatusUpdating=excelReader.getCellData(xlSheetName, 674, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 674, 8, actSavingStatusUpdating.toUpperCase());
	
	System.out.println("Actual Saving Status Updating  : "+actSavingStatusUpdating);
	System.out.println(" Expected Saving Status Updating : "+expSavingStatusUpdating);
	
	if (actSavingStatusUpdating.equalsIgnoreCase(expSavingStatusUpdating)) 
	{
		System.out.println("Pass: Update Buyer PriceBook and Saved Successfully");
		excelReader.setCellData(xlfile, xlSheetName, 665, 9, resPass);
		return true;
	} 
	else
	{
		System.out.println("Fail:   Update Buyer PriceBook and Saved Successfully");
		excelReader.setCellData(xlfile, xlSheetName, 665, 9, resFail);
		return false;
	}
   }
   catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 665, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }

 public boolean checkUpdateSellerPricebookInEditPricebook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {

  excelReader = new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("********************************************** checkUpdatePricebookInEditPricebook  ******************************************************");
		
  try
  {
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_PriceBook));
	buyerPriceBook_PriceBook.click();
	buyerPriceBook_PriceBook.sendKeys(excelReader.getCellData(xlSheetName, 676, 6));
	Thread.sleep(2000);
	buyerPriceBook_PriceBook.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_AbbreviationBtn));
	buyerPriceBook_AbbreviationBtn.click();
	Thread.sleep(2000);

	String actPriceBookName       = buyerPriceBook_PriceBook.getAttribute("value");
	String expPriceBookName       = excelReader.getCellData(xlSheetName, 677, 7);

	excelReader.setCellData(xlfile, xlSheetName, 677, 8, actPriceBookName);
	
	System.out.println("Edit Buyer Price Book Check Price Book Name  : " + actPriceBookName + "  Value Expected : " + expPriceBookName);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookFilter_FilterAndLoadBtn));
	buyerPriceBookFilter_FilterAndLoadBtn.click();
	
	Thread.sleep(1000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PoFirstCellSelect));
	String actItemFirstCell       = itemFirstCellSelect.getText();
	String actWarehouseFirstCell  = wareHouseFirstCellSelect.getText();
	String actVendorFirstCell     = vendorFirstCellSelect.getText();
	String actCurrencyFirstCell   = currencyFirstCellSelect.getText();
	String actRateFirstCell       = rateFirstCellSelect.getText();
	//tring actPOFirstCell         = PoFirstCellSelect.getText();

	excelReader.setCellData(xlfile, xlSheetName, 679, 8, actItemFirstCell);
	excelReader.setCellData(xlfile, xlSheetName, 680, 8, actWarehouseFirstCell);
	excelReader.setCellData(xlfile, xlSheetName, 681, 8, actVendorFirstCell);
	excelReader.setCellData(xlfile, xlSheetName, 682, 8, actCurrencyFirstCell);
	excelReader.setCellData(xlfile, xlSheetName, 683, 8, actRateFirstCell);
	//excelReader.setCellData(xlfile, xlSheetName, 684, 8, actPOFirstCell);
	
	
	String actItemSecondCell      = itemSecondCellSelect.getText();
	String actWarehouseSecondCell = wareHouseSecondCellSelect.getText();
	String actVendorSecondCell    = vendorSecondCellSelect.getText();
	String actx                   = unitSecondCellSelect.getText();
	String actCurrencySecondCell  = currencySecondCellSelect.getText();
	String actRateSecondCell      = rateSecondCellSelect.getText();
	//String actPOSecondCell        = PoSecondCellSelect.getText();
	
	excelReader.setCellData(xlfile, xlSheetName, 686, 8, actItemSecondCell);
	excelReader.setCellData(xlfile, xlSheetName, 687, 8, actWarehouseSecondCell);
	excelReader.setCellData(xlfile, xlSheetName, 688, 8, actVendorSecondCell);
	excelReader.setCellData(xlfile, xlSheetName, 689, 8, actx);
	excelReader.setCellData(xlfile, xlSheetName, 690, 8, actCurrencySecondCell);
	excelReader.setCellData(xlfile, xlSheetName, 691, 8, actRateSecondCell);
	//excelReader.setCellData(xlfile, xlSheetName, 692, 8, actPOSecondCell);
	
	
	String expItemFirstCell       = excelReader.getCellData(xlSheetName, 679, 7);
	String expWarehouseFirstCell  = excelReader.getCellData(xlSheetName, 680, 7);
	String expVendorFirstCell     = excelReader.getCellData(xlSheetName, 681, 7);
	String expCurrencyFirstCell   = excelReader.getCellData(xlSheetName, 682, 7);
	String expRateFirstCell       = excelReader.getCellData(xlSheetName, 683, 7);
	//String expPOFirstCell         = excelReader.getCellData(xlSheetName, 684, 7);

	String expItemSecondCell      = excelReader.getCellData(xlSheetName, 686, 7);
	String expWarehouseSecondCell = excelReader.getCellData(xlSheetName, 687, 7);
	String expVendorSecondCell    = excelReader.getCellData(xlSheetName, 688, 7);
	String expx                   = excelReader.getCellData(xlSheetName, 689, 7);
	String expCurrencySecondCell  = excelReader.getCellData(xlSheetName, 690, 7);
	String expRateSecondCell      = excelReader.getCellData(xlSheetName, 691, 7);
	//String expPOSecondCell        = excelReader.getCellData(xlSheetName, 692, 7);
	

	System.out.println("Edit Seller Price Book check Item            : " + actItemFirstCell +      " Value Expected : " + expItemFirstCell);
	System.out.println("Edit Seller Price Book check Warehouse       : " + actWarehouseFirstCell+  " Value Expected : " + expWarehouseFirstCell);
	System.out.println("Edit Seller Price Book check Vendor          : " + actVendorFirstCell +    " Value Expected : "+ expVendorFirstCell); 
	System.out.println("Edit Seller Price Book check Currency        : " + actCurrencyFirstCell+   " Value Expected : " + expCurrencyFirstCell);
	System.out.println("Edit Seller Price Book check Rate            : " + actRateFirstCell +      " Value Expected : "+ expRateFirstCell);
	//System.out.println("Edit Seller Price Book check PO              : " + actPOFirstCell +        " Value Expected : "+ expPOFirstCell);

	System.out.println("Edit Seller Price Book check Item            : " + actItemSecondCell +     " Value Expected : "+ expItemSecondCell);
	System.out.println("Edit Seller Price Book check Warehouse       : " + actWarehouseSecondCell+ " Value Expected : " + expWarehouseSecondCell);
	System.out.println("Edit Seller Price Book check Vendor          : " + actVendorSecondCell+    " Value Expected : " + expVendorSecondCell);
	System.out.println("Edit Seller Price Book check Vendor          : " + actx +                  " Value Expected : " + expx);
	System.out.println("Edit Seller Price Book check Currency        : " + actCurrencySecondCell+  " Value Expected : " + expCurrencySecondCell);
	System.out.println("Edit Seller Price Book check Rate            : " + actRateSecondCell +     " Value Expected : "+ expRateSecondCell);
	//System.out.println("Edit Seller Price Book check PO              : " + actPOSecondCell +       " Value Expected : "+ expPOSecondCell);

	if (actPriceBookName.equalsIgnoreCase(expPriceBookName)

			&& actItemFirstCell.equalsIgnoreCase(expItemFirstCell)
			&& actWarehouseFirstCell.equalsIgnoreCase(expWarehouseFirstCell)
			&& actVendorFirstCell.equalsIgnoreCase(expVendorFirstCell)
			&& actCurrencyFirstCell.equalsIgnoreCase(expCurrencyFirstCell)
			&& actRateFirstCell.equalsIgnoreCase(expRateFirstCell)
			/*&& actPOFirstCell.equalsIgnoreCase(expPOFirstCell)*/

			&& actItemSecondCell.equalsIgnoreCase(expItemSecondCell)
			&& actWarehouseSecondCell.equalsIgnoreCase(expWarehouseSecondCell)
			&& actVendorSecondCell.equalsIgnoreCase(expVendorSecondCell)
			&& actCurrencySecondCell.equalsIgnoreCase(expCurrencySecondCell) && actx.equalsIgnoreCase(expx)
			&& actRateSecondCell.equalsIgnoreCase(expRateSecondCell)
			/*&& actPOSecondCell.equalsIgnoreCase(expPOSecondCell)*/) 
	{
		System.out.println("Pass: Edit Buyer PriceBook");
		excelReader.setCellData(xlfile, xlSheetName, 675, 9, resPass);
		return true;
	}
	else 
	{
		System.out.println("Fail: Edit Buyer PriceBook");
		excelReader.setCellData(xlfile, xlSheetName, 675, 9, resFail);
		return false;
	}
  }
  catch (Exception e) 
  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 675, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
  }
 }

	
 public boolean checkClickOnYesOptionInDeleteSavedCopyAndPasteInSellerPriceBookPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {

  excelReader = new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

  System.out.println("********************************************** checkClickOnYesOptionInDeleteSavedCopyAndPasteInSellerPriceBookPage  *******************************************");
	
  try
  {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookDeleteBtn));
		buyerPriceBookDeleteBtn.click();

		getWaitForAlert();
		
		getDriver().switchTo().alert().accept();

		String expSaveMessage = excelReader.getCellData(xlSheetName, 694, 7);
			
	    //excelReader.setCellData(xlfile, xlSheetName, 694, 8, expSaveMessage);
       
		boolean actDeleteMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expDeleteAccountMessage = true;

		String actDeleteStatus= Boolean.toString(actDeleteMessage);
		String expDeleteStatus=excelReader.getCellData(xlSheetName, 695, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 695, 8, actDeleteStatus.toUpperCase());
		
		System.out.println("Actual Delete Status  : "+actDeleteStatus);
		System.out.println(" Expected Delete Status  : "+expDeleteStatus);
	
		if (actDeleteStatus.equalsIgnoreCase(expDeleteStatus))
		{
			System.out.println("Pass: Yes Button in Delete option ");
			excelReader.setCellData(xlfile, xlSheetName, 693, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Fail: Yes Button in Delete option ");
			excelReader.setCellData(xlfile, xlSheetName, 693, 9, resFail);
			return false;
		}
    }
  catch (Exception e) 
  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 693, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
  }
  }


 
 public boolean checkSaveOptionSellerPriceBook() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************************** checkSaveSellerPriceBook  ******************************************************");
		
   try
   {
	   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_PriceBook));
	    buyerPriceBook_PriceBook.click();
	    buyerPriceBook_PriceBook.sendKeys(excelReader.getCellData(xlSheetName, 580, 6));
	    Thread.sleep(2000);
	    buyerPriceBook_PriceBook.sendKeys(Keys.TAB);
	    
	    
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeSettingBtn));
	    buyerPriceBook_CustamizeSettingBtn.click();
	    Thread.sleep(2000);
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeDateRangeCheckBox));
		buyerPriceBook_CustamizeDateRangeCheckBox.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustomizeVendorCheckBox));
		buyerPriceBook_CustomizeVendorCheckBox.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_WarehouseCheckBox));
		buyerPriceBook_WarehouseCheckBox.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_QualityRangeCheckBox));
		buyerPriceBook_QualityRangeCheckBox.click();
		
        // This is getting checked so thats why commenting 
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CurrencyCheckBox));
		buyerPriceBook_CurrencyCheckBox.click();
		*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_UnitCheckBox));
		buyerPriceBook_UnitCheckBox.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBook_CustamizeSettingBtn));
		buyerPriceBook_CustamizeSettingBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(beforeClickOnToggle));
		beforeClickOnToggle.click();
		
		
	
	    
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCellSelect));
		itemFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemValuePriceBook));
		itemValuePriceBook.click();
		itemValuePriceBook.sendKeys(excelReader.getCellData(xlSheetName, 587, 6));
        Thread.sleep(2000);
        itemValuePriceBook.sendKeys(Keys.TAB);
        
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseFirstCellSelect));
		wareHouseFirstCellSelect.click();
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseValue));
		wareHouseValue.click();
		wareHouseValue.sendKeys(excelReader.getCellData(xlSheetName, 588, 6));
		Thread.sleep(2000);*/
		wareHouseValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(satrtingDateFirstCellSelect));
		satrtingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingDateValue));
		startingDateValue.click();
		startingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateFirstCellSelect));
		endingDateFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateValue));
		endingDateValue.click();
		endingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorFirstCellSelect));
		vendorFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
		vendorValue.click();
		vendorValue.sendKeys("Customer B");
		Thread.sleep(2000);
		vendorValue.sendKeys(Keys.TAB);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyFirstCellSelect));
		currencyFirstCellSelect.click();
*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyOptionValue));
		currencyOptionValue.click();
		currencyOptionValue.sendKeys(excelReader.getCellData(xlSheetName, 590, 6));
		Thread.sleep(2000);
		currencyOptionValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyFirstCellSelect));
		minQtyFirstCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyValue));
		minQtyValue.click();
		Thread.sleep(2000);
		minQtyValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyFirstCellSelect));
		maxQtyFirstCellSelect.click();
		Thread.sleep(2000);
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyValue));
		maxQtyValue.click();
		maxQtyValue.sendKeys(Keys.TAB);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateFirstCellSelect));
		rateFirstCellSelect.click();
		Thread.sleep(2000);
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateValue));
		rateValue.sendKeys(excelReader.getCellData(xlSheetName, 591, 6));
		Thread.sleep(2000);
		rateValue.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemSecondCellSelect));
		itemSecondCellSelect.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemValuePriceBook));
		itemValuePriceBook.click();
		
		itemValuePriceBook.sendKeys(excelReader.getCellData(xlSheetName, 605, 6));
		Thread.sleep(2000);
		itemValuePriceBook.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseSecondCellSelect));
		wareHouseSecondCellSelect.click();
		/*wareHouseValue.sendKeys(excelReader.getCellData(xlSheetName, 606, 6));
		Thread.sleep(2000);*/
		wareHouseValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(satrtingDateSecondCellSelect));
		satrtingDateSecondCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(startingDateValue));
		startingDateValue.click();
		startingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateSecondCellSelect));
		endingDateSecondCellSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateValue));
		endingDateValue.click();
		endingDateValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSecondCellSelect));
		vendorSecondCellSelect.click();

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorValue));
		vendorValue.click();
		Thread.sleep(3000);
		vendorValue.sendKeys(excelReader.getCellData(xlSheetName, 607, 6));
		Thread.sleep(2000);*/
		vendorValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(currencyOptionValue));
		currencyOptionValue.click();
		currencyOptionValue.sendKeys(excelReader.getCellData(xlSheetName, 608, 6));
		Thread.sleep(2000);
		currencyOptionValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minQtyValue));
		minQtyValue.click();
		minQtyValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(maxQtyValue));
		maxQtyValue.click();
		maxQtyValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookUnit));
		buyerPriceBookUnit.click();
		buyerPriceBookUnit.sendKeys(Keys.END);
		buyerPriceBookUnit.sendKeys(Keys.SHIFT,Keys.HOME);
		buyerPriceBookUnit.sendKeys(excelReader.getCellData(xlSheetName, 609, 6));
		Thread.sleep(2000);
		buyerPriceBookUnit.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateValue));
		rateValue.sendKeys(excelReader.getCellData(xlSheetName, 610, 6));
		Thread.sleep(2000);
		rateValue.sendKeys(Keys.TAB);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PoValue));
		PoValue.sendKeys(excelReader.getCellData(xlSheetName, 592, 6));
		PoValue.sendKeys(Keys.TAB);
*/
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookSaveBtn));
		buyerPriceBookSaveBtn.click();
		
       String expSaveMessage = excelReader.getCellData(xlSheetName, 593, 7);
		
		boolean actSaveAccountMessage = checkValidationMessageboolean(expSaveMessage);
		boolean expSaveAccountMessage = true;

		String actSavingStatus= Boolean.toString(actSaveAccountMessage);
		String expSavingStatus=excelReader.getCellData(xlSheetName, 594, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 594, 8, actSavingStatus.toUpperCase());
		
		System.out.println("Actual Saving Status  : "+actSavingStatus);
		System.out.println(" Expected Saving Status  : "+expSavingStatus);
		

		if (actSavingStatus.equalsIgnoreCase(expSavingStatus) ) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 586, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 586, 9, resFail);
			return false;
		}
   }
   catch (Exception e) 
	  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 586, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
	  }
}
 
 
 public boolean checkClickOnCloseButtonInSellingRates() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************************** checkClickOnCloseButtonInSellingRates  ******************************************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(buyerPriceBookCloseBtn));
		buyerPriceBookCloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 696, 7);

		excelReader.setCellData(xlfile, xlSheetName, 696, 8, actDashboardLabel);
		
		
		System.out.println("Close Button  : " + actDashboardLabel + "  Value Expected : " + expDashboardLabel);

		if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
		{
			System.out.println("Test Pass : Transaction Authorization is Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 696, 9, resPass);
			return true;
		} 
		else 
		{
			System.out.println("Test Fail : Transaction Authorization is Displayed");
			excelReader.setCellData(xlfile, xlSheetName, 696, 9, resFail);
			return false;

		}
	 }
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 696, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	}

 
 //DEPARTMENTS MASTER PAGE STARTS
 
 public static boolean checkDepartmentsMasterPageIsDisplayByClickOnDepartmentsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************ checkDepartmentsMasterPageIsDisplayByClickOnDepartmentsMenu ********************************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentMenu));
		departmentMenu.click();
		
		/*boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
		boolean actServerErrorMessage  = checkServerErrorMessageIsNotDisplay();
		boolean expServerErrorMessage  = false;
		
		System.out.println("Opening UnitsConversion Error Message Value Actual : " + actSummaryErrorMessage +  " Value Expected : " + expSummaryErrorMessage);
		System.out.println("Opening UnitsConversion Error Message              : " + actServerErrorMessage +   " Value Expected : " +  expServerErrorMessage);*/
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));

		String actDepartmentTitle = accountsTitle.getText();
		String expDepartmentTitle = excelReader.getCellData(xlSheetName, 699, 7);

		excelReader.setCellData(xlfile, xlSheetName, 699, 8, actDepartmentTitle);
		
		System.out.println("Opening Units Master From Item Menu Title Actual Value  :" + actDepartmentTitle + "     Expected Value    : " + expDepartmentTitle);

		if (actDepartmentTitle.equalsIgnoreCase(expDepartmentTitle)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 698, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 698, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 698, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
  
  
 public static boolean checkMainOptionsAvailabilityInDepartmentsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
	 System.out.println("************ checkMainOptionsAvailabilityInDepartmentsMasterPage Method Executes............ *********************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));

		
        Set<String> actRibbonControl= new HashSet<String>();
		
		int count = itemRibbonControlList.size();
		
		System.err.println(" Ribbon :   "+count);
		
		for (int i=1;i<count;i++)
		{
			String data=itemRibbonControlList.get(i).getText();
			actRibbonControl.add(data);
		}
		
		String actItemRibbon = actRibbonControl.toString();
		
		String expItemRibbon = excelReader.getCellData(xlSheetName, 701, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 701, 8, actItemRibbon);
		
		System.out.println("actItemRibbon  : "+actItemRibbon);
		System.out.println("expItemRibbon  : "+expItemRibbon);
		
		boolean actAccountMasterNewBtn        = masterNewBtn.isDisplayed();
		boolean actAccountMasterAddGroupBtn   = masterAddGroupBtn.isDisplayed();
		boolean actAccountMasterEditBtn       = masterEditBtn.isDisplayed();
		boolean actAccountMasterCloneBtn      = masterCloneBtn.isDisplayed();
		boolean actAccountMasterPropertiesBtn = masterPropertiesBtn.isDisplayed();
		boolean actAccountMasterDeleteBtn     = masterDeleteBtn.isDisplayed();
		boolean actAccountMasterCloseBtn      = masterCloseBtn.isDisplayed();
		boolean actAccountMasterExpandBtn     = masterRibbonToExpandOptions.isDisplayed();

		boolean expAccountMasterNewBtn        = true;
		boolean expAccountMasterAddGroupBtn   = true;
		boolean expAccountMasterEditBtn       = true;
		boolean expAccountMasterCloneBtn      = true;
		boolean expAccountMasterPropertiesBtn = true;
		boolean expAccountMasterDeleteBtn     = true;
		boolean expAccountMasterCloseBtn      = true;
		boolean expAccountMasterExpandBtn     = true;

		System.out.println("New Button Display Value Actual          : " + actAccountMasterNewBtn+        "  Value Expected : " + expAccountMasterNewBtn);
		System.out.println("Add Group Button Display Value Actual    : " + actAccountMasterAddGroupBtn+   "  Value Expected : " + expAccountMasterAddGroupBtn);
		System.out.println("Edit Button Display Value Actual         : " + actAccountMasterEditBtn +      "  Value Expected : " + expAccountMasterEditBtn);
		System.out.println("Close Button Display Value Actual        : " + actAccountMasterCloneBtn+      "  Value Expected : " + expAccountMasterCloneBtn);
		System.out.println("Properties Button Display Value Actual   : " + actAccountMasterPropertiesBtn+ "  Value Expected : " + expAccountMasterPropertiesBtn);
		System.out.println("Delete Button Display Value Actual       : " + actAccountMasterDeleteBtn+     "  Value Expected : " + expAccountMasterDeleteBtn);
		System.out.println("Close Button Button Display Value Actual : " + actAccountMasterCloseBtn+      "  Value Expected : " + expAccountMasterCloseBtn);
		System.out.println("Expand Button Display Value Actual       : " + actAccountMasterExpandBtn+     "  Value Expected : " + expAccountMasterExpandBtn);
			
		if (actItemRibbon.equals(expItemRibbon) && actAccountMasterNewBtn == expAccountMasterNewBtn
				&& actAccountMasterAddGroupBtn == expAccountMasterAddGroupBtn
				&& actAccountMasterEditBtn == expAccountMasterEditBtn
				&& actAccountMasterCloneBtn == expAccountMasterCloneBtn
				&& actAccountMasterPropertiesBtn == actAccountMasterPropertiesBtn
				&& actAccountMasterDeleteBtn == expAccountMasterDeleteBtn
				&& actAccountMasterCloseBtn == expAccountMasterCloseBtn
				&& actAccountMasterExpandBtn == expAccountMasterExpandBtn)
		{
			excelReader.setCellData(xlfile, xlSheetName, 700, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 700, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 700, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

 
 public static boolean checkToolsOptionsAvailabilityOnClickMasterRibbonToExpandOptionsInDepartmentMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("*********** checkToolsOptionsAvailabilityOnClickMasterRibbonToExpandOptionsInDepartmentMastersPage Method Executes............*******************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
		masterRibbonToExpandOptions.click();

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
       System.out.println("Click On Ribbon Expand Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));

		boolean actAccountMasterGroupBtn              = masterGroupBtn.isDisplayed();
		boolean actAccountMasterDeleteAllBtn          = masterDeleteAllBtn.isDisplayed();
		boolean actAccountMasterCloseAccountBtn       = masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
		boolean actAccountMasterOpenCloseAccountBtn   = masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
		boolean actAccountMasterAdvanceImortExportBtn = masterAdvanceMasterImportORExportBtn.isDisplayed();
		boolean actAccountMasterAuthorInfoBtn         = masterAuthorInfoBtn.isDisplayed();
		boolean actAccountMasterMoveUpBtn             = masterMoveUpBtn.isDisplayed();
		boolean actAccountMasterMoveDownBtn           = masterMoveDownBtn.isDisplayed();
		boolean actAccountMasterSortBtn               = masterSortBtn.isDisplayed();
		boolean actAccountMasterMassUpdateBtn         = masterMassUpdateBtn.isDisplayed();
		boolean actAccountMasterImportFromXMLBtn      = masterImportFromXmlBtn.isDisplayed();
		boolean actAccountMasterExportFormatToXMLBtn  = masterExportFormatToXmlBtn.isDisplayed();

		boolean expAccountMasterGroupBtn              = true;
		boolean expAccountMasterDeleteAllBtn          = true;
		boolean expAccountMasterCloseAccountBtn       = true;
		boolean expAccountMasterOpenCloseAccountBtn   = true;
		boolean expAccountMasterAdvanceImortExportBtn = true;
		boolean expAccountMasterAuthorInfoBtn         = true;
		boolean expAccountMasterMoveUpBtn             = true;
		boolean expAccountMasterMoveDownBtn           = true;
		boolean expAccountMasterSortBtn               = true;
		boolean expAccountMasterMassUpdateBtn         = true;
		boolean expAccountMasterImportFromXMLBtn      = true;
		boolean expAccountMasterExportFormatToXMLBtn  = true;

		System.out.println("Group Button Display Value Actual           : " + actAccountMasterGroupBtn+              " Value Expected : " + expAccountMasterGroupBtn);
		System.out.println("Delete All Button Display Value Actual      : " + actAccountMasterDeleteAllBtn+          " Value Expected : " + expAccountMasterDeleteAllBtn);
		System.out.println("Close Account Button Display Value Actual   : " + actAccountMasterCloseAccountBtn+       " Value Expected : " + expAccountMasterCloseAccountBtn);
		System.out.println("Import Export Button Display Value Actual   : " + actAccountMasterAdvanceImortExportBtn+ " Value Expected : " + expAccountMasterAdvanceImortExportBtn);
		System.out.println("Authorize Info Button Display Value Actual  : " + actAccountMasterAuthorInfoBtn+         " Value Expected : " + expAccountMasterAuthorInfoBtn); 
		System.out.println("Move Down Button Display Value Actual       : " + actAccountMasterMoveDownBtn+           " Value Expected : " + expAccountMasterMoveDownBtn);
		System.out.println("Move Up Button Display Value Actual         : " + expAccountMasterMoveUpBtn+             " Value Expected : " + expAccountMasterMoveUpBtn);
		System.out.println("Sort Button Display Value Actual            : " + actAccountMasterSortBtn+               " Value Expected : " + expAccountMasterSortBtn);
		System.out.println("Import From XML Button Display Value Actual : " + actAccountMasterImportFromXMLBtn+      " Value Expected : " + expAccountMasterImportFromXMLBtn);
		System.out.println("Export From XML Button Display Value Actual : "+ actAccountMasterExportFormatToXMLBtn+   " Value Expected : " + expAccountMasterExportFormatToXMLBtn);

		Thread.sleep(1000);
		
		
	     ArrayList<String> actRibbonControlExpandList= new ArrayList<String>();
		
	 	 int count = itemRibbonControlExpandList.size();
		
		 System.err.println("count   :"+count);
		
		 for (int i=0;i<count;i++)
		 {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
			masterRibbonControlNextBtn.click();
			
			String data=itemRibbonControlExpandList.get(i).getText();
			actRibbonControlExpandList.add(data);
		 }
		
		 String actItemRibbonExpand = actRibbonControlExpandList.toString();
	 	
		 String expItemRibbonExpand = excelReader.getCellData(xlSheetName, 703, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 703, 8, actItemRibbonExpand);
		
		 System.out.println("actItemRibbonExpand   : "+actItemRibbonExpand);
		
		 System.out.println("expItemRibbonExpand   : "+expItemRibbonExpand);	
		
		
		 if (actSummaryErrorMessage==expSummaryErrorMessage
				&& actAccountMasterGroupBtn == expAccountMasterGroupBtn
				&& actAccountMasterDeleteAllBtn == expAccountMasterDeleteAllBtn
				&& actAccountMasterCloseAccountBtn == expAccountMasterCloseAccountBtn
				&& actAccountMasterOpenCloseAccountBtn == expAccountMasterOpenCloseAccountBtn
				&& actAccountMasterAdvanceImortExportBtn == expAccountMasterAdvanceImortExportBtn
				&& actAccountMasterAuthorInfoBtn == expAccountMasterAuthorInfoBtn
				&& actAccountMasterMoveUpBtn == expAccountMasterMoveUpBtn
				&& actAccountMasterMoveDownBtn == expAccountMasterMoveDownBtn
				&& actAccountMasterSortBtn == expAccountMasterSortBtn
				&& actAccountMasterMassUpdateBtn == expAccountMasterMassUpdateBtn
				&& actAccountMasterImportFromXMLBtn == expAccountMasterImportFromXMLBtn
				&& actAccountMasterExportFormatToXMLBtn == expAccountMasterExportFormatToXMLBtn && 
				
				actItemRibbonExpand.equalsIgnoreCase(expItemRibbonExpand))
		{
			excelReader.setCellData(xlfile, xlSheetName, 702, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 702, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 702, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 
/* @FindBy(xpath = "//a[@class='clsMasterName']")
 public static WebElement unitsMasterRootUnitsDisplayInTree;*/
 
 
 public static boolean checkOtherToolsOptionsAvailabilityInDepartmentMastersPageOnClickRibbonControlNextButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********* checkOtherToolsOptionsAvailabilityInDepartmentMastersPageOnClickRibbonControlNextButton Method Executes............  *******************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));

		masterRibbonControlNextBtn.click();
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		

       System.out.println("Click On Ribbon Control Next Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
	
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		/*masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();*/

		

	     ArrayList<String> actRibbonControlExpandList= new ArrayList<String>();
		
	 	 int count = itemRibbonControlExpandList.size();
		
		 System.err.println("count   :"+count);
		
		 for (int i=0;i<count;i++)
		 {
			String data=itemRibbonControlExpandList.get(i).getText();
			actRibbonControlExpandList.add(data);
		 }
		
		 String actItemRibbonExpand = actRibbonControlExpandList.toString();
	 	
		 String expItemRibbonExpand = excelReader.getCellData(xlSheetName, 705, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 705, 8, actItemRibbonExpand);
		
		 System.out.println("actItemRibbonExpand   : "+actItemRibbonExpand);
		
		 System.out.println("expItemRibbonExpand   : "+expItemRibbonExpand);	
		
		
		getWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizeMasterBtn));

		boolean actAccountMasterCustomizeMasterBtn = masterCustamizeMasterBtn.isDisplayed();
		boolean actAccountMasterCustomizeViewBtn   = masterCustamizeViewBtn.isDisplayed();
		boolean actAccountMasterCustomizeTreeBtn   = mastercustamizeTreeBtn.isDisplayed();

		boolean expAccountMasterCustomizeMasterBtn = true;
		boolean expAccountMasterCustomizeViewBtn   = true;
		boolean expAccountMasterCustomizeTreeBtn   = true;

		System.out.println("Customize Master Option Value Actual        : " + actAccountMasterCustomizeMasterBtn+        " Value Expected : " + expAccountMasterCustomizeMasterBtn);
		System.out.println("Customize View Option Value Actual          : " + actAccountMasterCustomizeViewBtn+          " Value Expected : " + expAccountMasterCustomizeViewBtn);
		System.out.println("Customize Tree Option Value Actual          : " + actAccountMasterCustomizeTreeBtn+          " Value Expected : " + expAccountMasterCustomizeTreeBtn);

		if (actSummaryErrorMessage==expSummaryErrorMessage 
				&& actAccountMasterCustomizeMasterBtn == expAccountMasterCustomizeMasterBtn
				&& actAccountMasterCustomizeViewBtn == expAccountMasterCustomizeViewBtn
				&& actAccountMasterCustomizeTreeBtn == expAccountMasterCustomizeTreeBtn && actItemRibbonExpand.equalsIgnoreCase(expItemRibbonExpand))
		{
			excelReader.setCellData(xlfile, xlSheetName, 704, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 704, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 704, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	
 

 public static boolean checkTreeViewOptionsAvailableInDepartmentsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("***********  checkTreeViewOptionsAvailableInDepartmentsMastersPage Method Executes............ ********************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));

		boolean actAccountMasterTreeIdDropdownIsDisplay        = masterTreeIdDropdown.isDisplayed();
		
		Select MasterId=new Select(masterTreeIdDropdown);
		String actAccountMasterTreeIdDropdownGetText           = MasterId.getFirstSelectedOption().getText();
		
		boolean actAccountMasterTreeIDToggleBtnIsDisplay       = masterTreeIDToggleBtn.isDisplayed();
		boolean actAccountMasterTreeViewIDDropdownIsDisplay    = masterTreeViewIDDropdown.isDisplayed();
		
		Select MasterTreeViewId=new Select(masterTreeViewIDDropdown);
		String actAccountMasterTreeViewIDDropdownGetText          = MasterTreeViewId.getFirstSelectedOption().getText();
		
		boolean actAccountMasterTreeViewIDToggleBtnIsDisplay   = masterTreeViewIDToggleBtn.isDisplayed();
		boolean actAccountMasterHideAccountsGroupTreeIsDisplay = masterOptionToHideAccountsGroupTree.isDisplayed();

		boolean expAccountMasterTreeIdDropdownIsDisplay        = true;
		String expAccountMasterTreeIdDropdownGetText           = excelReader.getCellData(xlSheetName, 707, 7);
		                                                        
		boolean expAccountMasterTreeIDToggleBtnIsDisplay       = true;
		boolean expAccountMasterTreeViewIDDropdownIsDisplay    = true;
		String expAccountMasterTreeViewIDDropdownGetText       = excelReader.getCellData(xlSheetName, 708, 7);
		
		boolean expAccountMasterTreeViewIDToggleBtnIsDisplay   = true;
		boolean expAccountMasterHideAccountsGroupTreeIsDisplay = true;
		

		System.out.println("Tree ID Dropdown Option Value Actual      : " +actAccountMasterTreeIdDropdownIsDisplay+        " Value Expected : " + expAccountMasterTreeIdDropdownIsDisplay);
		System.out.println("Tree ID Dropdown Option Value Actual      : " +actAccountMasterTreeIdDropdownGetText+         " Value Expected : " + expAccountMasterTreeIdDropdownGetText);
		
		System.out.println("Tree ID Toggle Option Value Actual        : " +actAccountMasterTreeIDToggleBtnIsDisplay+        " Value Expected : " + expAccountMasterTreeIDToggleBtnIsDisplay);
	
		
		System.out.println("Tree View ID Option Value Actual          : " +actAccountMasterTreeViewIDDropdownIsDisplay+     " Value Expected : " + expAccountMasterTreeViewIDDropdownIsDisplay);
		System.out.println("Tree View ID Option Value Actual          : " +actAccountMasterTreeViewIDDropdownGetText+     " Value Expected : " + expAccountMasterTreeViewIDDropdownGetText);
		
		System.out.println("Tree View ID Toggle Value Actual          : " +actAccountMasterTreeViewIDToggleBtnIsDisplay +   " Value Expected : " + expAccountMasterTreeViewIDToggleBtnIsDisplay);
		
		
		System.out.println("Hide Accounts Group Tree Value Actual     : " +actAccountMasterHideAccountsGroupTreeIsDisplay+  " Value Expected : " + expAccountMasterHideAccountsGroupTreeIsDisplay);
		
        excelReader.setCellData(xlfile, xlSheetName, 707, 8, actAccountMasterTreeIdDropdownGetText);
		
		excelReader.setCellData(xlfile, xlSheetName, 708, 8, actAccountMasterTreeViewIDDropdownGetText);
		
		
		if ( actAccountMasterTreeIdDropdownIsDisplay == expAccountMasterTreeIdDropdownIsDisplay
				&& actAccountMasterTreeIDToggleBtnIsDisplay == expAccountMasterTreeIDToggleBtnIsDisplay
				&& actAccountMasterTreeViewIDDropdownIsDisplay == expAccountMasterTreeViewIDDropdownIsDisplay
				&& actAccountMasterTreeViewIDToggleBtnIsDisplay == expAccountMasterTreeViewIDToggleBtnIsDisplay
				&& actAccountMasterHideAccountsGroupTreeIsDisplay == expAccountMasterHideAccountsGroupTreeIsDisplay && 
				
				actAccountMasterTreeIdDropdownGetText.equalsIgnoreCase(expAccountMasterTreeIdDropdownGetText) && 
				 
				actAccountMasterTreeViewIDDropdownGetText.equalsIgnoreCase(expAccountMasterTreeViewIDDropdownGetText))
				 
				
		{
			excelReader.setCellData(xlfile, xlSheetName, 706, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 706, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 706, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
	

 public static boolean checkDisplayOfGroupAvailableTreeStructureLeftPageDepartmentsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("**************************  checkDisplayOfGroupAvailableTreeStructureLeftPageDepartmentsMasterPage Method Executes............  *******************************");
    
	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));

		boolean actDepartmentMasterRoot                = accountRootAccount.isDisplayed();
		
		boolean expDepartmentMasterRoot                = true;
		
		String actDepartmentRootName=accountRootAccount.getText();
		
		String expDepartmentRootName=excelReader.getCellData(xlSheetName, 710, 7);	
		
		System.out.println("Open Units Master Department Root Is Display Value Actual  : " + actDepartmentMasterRoot+   " Value Expected : " + expDepartmentMasterRoot);
		System.out.println("Root Department Text Display Value Actual                 : " + actDepartmentRootName+      " Value Expected : " + expDepartmentRootName);
			
		excelReader.setCellData(xlfile, xlSheetName, 710, 8, actDepartmentRootName);
		
		
		if (actDepartmentMasterRoot == expDepartmentMasterRoot
				&& actDepartmentRootName.equalsIgnoreCase(expDepartmentRootName))
		{
			excelReader.setCellData(xlfile, xlSheetName, 709, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 709, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 709, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }


 public static boolean checkCreateTreeToggleOptionsAvailableInDepartmentMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 
	 System.out.println("********************* checkCreateTreeToggleOptionsAvailableInDepartmentMastersPage Method Executes............ *******************************");
    
	 try
	 {
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggleBtn)); 
		masterTreeIDToggleBtn.click();
		
		
		 ArrayList<String> actMasterIDListList= new ArrayList<String>();
			
			int count = mastertreeIdList.size();
			System.err.println("count   :"+count);
			
			for (int i=0;i<count;i++)
			{
				String data=mastertreeIdList.get(i).getText();
				actMasterIDListList.add(data);
			}
			
			String actMasterIDExpand = actMasterIDListList.toString();
			String expMasterIDExpand = excelReader.getCellData(xlSheetName, 711, 7);
			
			System.out.println("actMasterIDExpand   : "+actMasterIDExpand);
			System.out.println("expMasterIDExpand   : "+expMasterIDExpand);	
	 	    
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggle_setDefaultBtn));

	 		boolean actAccountMasterTreeCreateTreeBtn = masterTreeIDToggle_CreateTreeBtn.isDisplayed();
	 		boolean actAccountMasterTreeEditBtn       = masterTreeIDToggle_EditBtn.isDisplayed();
	 		boolean actAccountMasterTreeDeleteBtn     = masterTreeIDToggle_DeleteBtn.isDisplayed();
	 		boolean actAccountMasterTreeSetDefaultBtn = masterTreeIDToggle_setDefaultBtn.isDisplayed();

	 		boolean expAccountMasterTreeCreateTreeBtn = true;
	 		boolean expAccountMasterTreeEditBtn       = true;
	 		boolean expAccountMasterTreeDeleteBtn     = true;
	 		boolean expAccountMasterTreeSetDefaultBtn = true;

	 		System.out.println("Tree ID Dropdown Option Value Actual  : " + actAccountMasterTreeCreateTreeBtn+ " Value Expected : " + expAccountMasterTreeCreateTreeBtn);
	 		System.out.println("Tree ID Toggle Option Value Actual    : " + actAccountMasterTreeEditBtn+       " Value Expected : " + expAccountMasterTreeEditBtn);
	 		System.out.println("Tree View ID Option Value Actual      : " + actAccountMasterTreeDeleteBtn+     " Value Expected : " + expAccountMasterTreeDeleteBtn);
	 		System.out.println("Tree View ID Toggle Value Actual      : " + actAccountMasterTreeSetDefaultBtn+ " Value Expected : " + expAccountMasterTreeDeleteBtn);
	 		
	 		
	 		System.out.println("Master Item Tree ID       : " + actMasterIDExpand+ " Value Expected : " + expMasterIDExpand);
	 		 
	 		excelReader.setCellData(xlfile, xlSheetName, 711, 8, actMasterIDExpand);
	 		
	 		if ( actAccountMasterTreeCreateTreeBtn == expAccountMasterTreeCreateTreeBtn
	 				&& actAccountMasterTreeEditBtn == expAccountMasterTreeEditBtn
	 				&& actAccountMasterTreeDeleteBtn == expAccountMasterTreeDeleteBtn
	 				&& actAccountMasterTreeSetDefaultBtn==expAccountMasterTreeSetDefaultBtn && actMasterIDExpand.equalsIgnoreCase(expMasterIDExpand))
	 		{
	 			excelReader.setCellData(xlfile, xlSheetName, 711, 9, resPass);
	 			return true;
	 		} 
	 		else 
	 		{
	 			excelReader.setCellData(xlfile, xlSheetName, 711, 9, resFail);
	 			return false;
	 		}
	 	  }
	 	 catch (Exception e) 
		  {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 711, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		  }
 }
		
	
 public static boolean checkCreateViewToggleOptionsAvailableInDepartmentMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("********************** checkCreateViewToggleOptionsAvailableInUnitsMastersPage Method Executes............***********************************");

 	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIDToggleBtn));
 		masterTreeViewIDToggleBtn.click();

  	   ArrayList<String> actMasterViewIDListList= new ArrayList<String>();
		
 		int count = mastertreeViewIdList.size();
 		System.err.println("count   :"+count);
 		
 		for (int i=0;i<count;i++)
 		{
 			String data=mastertreeViewIdList.get(i).getText();
 			actMasterViewIDListList.add(data);
 		}
 		
 		String actMasterViewIDExpand = actMasterViewIDListList.toString();
 		String expMasterViewIDExpand = excelReader.getCellData(xlSheetName, 712, 7);
 		
 		System.out.println("actMasterViewIDExpand   : "+actMasterViewIDExpand);
 		System.out.println("expMasterViewIDExpand   : "+expMasterViewIDExpand);	
 		
 		
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIdCreateViewBtn));

 		boolean actAccountMasterTreeViewCreateViewBtn = masterTreeViewIdCreateViewBtn.isDisplayed();
 		boolean actAccountMasterTreeViewEditViewBtn   = masterTreeeViewIdEditBtn.isDisplayed();
 		boolean actAccountMasterTreeViewDeleteBtn     = masterTreeViewIdDeleteBtn.isDisplayed();

 		boolean expAccountMasterTreeViewCreateViewBtn = true;
 		boolean expAccountMasterTreeViewEditViewBtn   = true;
 		boolean expAccountMasterTreeViewDeleteBtn     = true;

 		System.out.println("Tree View Create View Option Value Actual : " + actAccountMasterTreeViewCreateViewBtn+ " Value Expected : " + expAccountMasterTreeViewCreateViewBtn);
 		System.out.println("Tree View Edit View Option Value Actual   : " + actAccountMasterTreeViewEditViewBtn+   " Value Expected : " + expAccountMasterTreeViewEditViewBtn);
 		System.out.println("Tree View Delete View Option Value Actual : " + actAccountMasterTreeViewDeleteBtn+     " Value Expected : " + expAccountMasterTreeViewDeleteBtn);

 		excelReader.setCellData(xlfile, xlSheetName, 712, 8, actMasterViewIDExpand);
 		
 		if (actAccountMasterTreeViewCreateViewBtn == expAccountMasterTreeViewCreateViewBtn
 				&& actAccountMasterTreeViewEditViewBtn == expAccountMasterTreeViewEditViewBtn
 				&& actAccountMasterTreeViewDeleteBtn == expAccountMasterTreeViewDeleteBtn && 
 				
 				actMasterViewIDExpand.equalsIgnoreCase(expMasterViewIDExpand))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 712, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 712, 9, resPass);
 			return false;
 		}
 	  }
 	  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 712, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	
	
 public static boolean checkHideUnitGroupOptionsAvailableInDepartmentMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************* checkHideUnitGroupOptionsAvailableInDepartmentMastersPage Method Executes............*************************");

	 try
 	 {
 	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
 	   masterOptionToHideAccountsGroupTree.click();
 	   
 	   boolean actSummaryErrorMessage    = checkErrorMessageIsDisplayingOrNotDisplaying();
 	   boolean expSummaryErrorMessage    = true;

 	   System.out.println("Click on Hide Units Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);  

 	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeUnitsDisplay));

 	   boolean actAccountMasterTreeUnits = treeUnitsDisplay.isDisplayed();
 	   boolean expAccountMasterTreeUnits = true;
 		
 	   System.out.println("Tree View Create View Option Value Actual : " + actAccountMasterTreeUnits+ " Value Expected : " + expAccountMasterTreeUnits);

 	   boolean actTestResult=actSummaryErrorMessage==actSummaryErrorMessage 
 			                  && actSummaryErrorMessage == expAccountMasterTreeUnits && masterOptionToHideAccountsGroupTree.isDisplayed()==true;
 	   
 	   String actValue = Boolean.toString(actTestResult);
 	   String expValue = excelReader.getCellData(xlSheetName, 713, 7);
 	   
 	   System.err.println(" Actual; Value : "+actValue +"  Value Expected : "+expValue);
 	  
 	   
 	  excelReader.setCellData(xlfile, xlSheetName, 713, 8, actValue.toUpperCase());
 	  
 	   if (actValue.equalsIgnoreCase(expValue))
 	   {
 		    excelReader.setCellData(xlfile, xlSheetName, 713, 9, resPass);
 			return true;
 	   } 
 	   else 
 	   {
 		  excelReader.setCellData(xlfile, xlSheetName, 713, 9, resFail);
 			return false;
 	   }
 	 }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 713, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	
	
 public static boolean checkUnHideUnitsGroupOptionsAvailableInDepartmentMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkUnHideUnitsGroupOptionsAvailableInDepartmentMastersPage Method Executes............ ******************************");
   
	 
	 
	 try
 	 {
 		  
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
	    masterOptionToHideAccountsGroupTree.click();
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));
	    
		boolean actUnitsMasterRoot                = accountRootAccount.isDisplayed();
		
		boolean expUnitsMasterRoot                = true;
		
		String actUnitRootName=accountRootAccount.getText();
		
		String expUnitRootName=excelReader.getCellData(xlSheetName, 714, 7);	

		
		
		System.out.println("Open Units Master Unit Root Is Display Value Actual  : " + actUnitsMasterRoot+ " Value Expected : " + expUnitsMasterRoot);
		System.out.println("Root Units Text Display Value Actual          : " + actUnitRootName+            " Value Expected : " + expUnitRootName);
			
		excelReader.setCellData(xlfile, xlSheetName, 714, 8, actUnitRootName);
		
		if (actUnitsMasterRoot == expUnitsMasterRoot
				&& actUnitRootName.equalsIgnoreCase(expUnitRootName))
		{
			 excelReader.setCellData(xlfile, xlSheetName, 714, 9, resPass);
			 return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 714, 9, resFail);
			return false;
		}
	  }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 714, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	   
 	 }
	 
	 
	
	
 public static boolean checkHeaderFieldsOptionsAvailableInDepartmentMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkHeaderFieldsOptionsAvailableInDepartmentMastersPage Method Executes............ **********************************");

	 
	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));

 		
 		String actAccountMasterSearchGetText               = masterSearchTxt.getAttribute("placeholder");
 		
 		String expAccountMasterSearchGetText               = excelReader.getCellData(xlSheetName, 715, 7);
 		
 		
 		excelReader.setCellData(xlfile, xlSheetName, 715, 8, actAccountMasterSearchGetText);
 		
 		boolean actAccountMasterSearchBtn                  = masterSearchBtn.isDisplayed();
 		boolean actAccountMasterCmbMasterTxt               = mastercmbMasterTxt.isDisplayed();
 		boolean actAccountMasterCmbMasterExpansionBtn      = masterCmbMasterExpansionBtn.isDisplayed();
 		boolean actAccountMasterCmbMasterSettingsBtn       = masterCumMasterSettingBtn.isDisplayed();
 		boolean actAccountMasterRetainSelectionCheckbox    = masterRetainSelectionCheckBox.isDisplayed();
 		boolean actAccountMasterSideBarBtn                 = masterSideBarBtn.isDisplayed();
 		
 		ArrayList<String> actmasterItemSearchControlList= new ArrayList<String>();
 		
  		int count = masterItemSearchControlList.size();
  		System.err.println("count   :"+count);
  		
  		for (int i=0;i<count;i++)
  		{
  			String data=masterItemSearchControlList.get(i).getAttribute("title");
  			actmasterItemSearchControlList.add(data);
  		}
  		
  		String actControlList = actmasterItemSearchControlList.toString();
  		String expControlList = excelReader.getCellData(xlSheetName, 716, 7);
  		
  		System.out.println("actControlList   : "+actControlList);
  		System.out.println("expControlList   : "+expControlList);

  		excelReader.setCellData(xlfile, xlSheetName, 716, 8, actControlList);
  		
 		boolean expAccountMasterSearchBtn                  = true;
 		boolean expAccountMasterCmbMasterTxt               = true;
 		boolean expAccountMasterCmbMasterExpansionBtn      = true;
 		boolean expAccountMasterCmbMasterSettingsBtn       = true;
 		boolean expAccountMasterRetainSelectionCheckbox    = true;
 		boolean expAccountMasterSideBarBtn                 = true;

 		
 		System.out.println("Search Button Value Actual           : "+ actAccountMasterSearchBtn+                  " Value Expected : " + expAccountMasterSearchBtn);
 		System.out.println("Comb Box Value Actual                : "+ actAccountMasterCmbMasterTxt+               " Value Expected : " + expAccountMasterCmbMasterTxt);
 		System.out.println("Combo Box Expansion Value Actual     : "+ actAccountMasterCmbMasterExpansionBtn+      " Value Expected : " + expAccountMasterCmbMasterExpansionBtn);
 		System.out.println("Combo Box Settings Value Actual      : "+ actAccountMasterCmbMasterSettingsBtn+       " Value Expected : " + expAccountMasterCmbMasterSettingsBtn);
 		System.out.println("Selection Check Box Value Actual     : "+ actAccountMasterRetainSelectionCheckbox+    " Value Expected : " + expAccountMasterRetainSelectionCheckbox);
 		System.out.println("Side Bar Value Actual                : "+ actAccountMasterSideBarBtn+                 " Value Expected : " + expAccountMasterSideBarBtn);
 		
 		System.out.println("AccountMasterSearchGetText          : "+actAccountMasterSearchGetText +"  Value Expected  : "+expAccountMasterSearchGetText);
 		
 		
 		
 		
 		
 		boolean actTestResult= actAccountMasterSearchBtn == expAccountMasterSearchBtn
				 				&& actAccountMasterCmbMasterTxt == expAccountMasterCmbMasterTxt
				 				&& actAccountMasterCmbMasterExpansionBtn == expAccountMasterCmbMasterExpansionBtn
				 				&& actAccountMasterCmbMasterSettingsBtn == expAccountMasterCmbMasterSettingsBtn
		 						&& actAccountMasterRetainSelectionCheckbox == expAccountMasterRetainSelectionCheckbox
		 		 				&& actAccountMasterSideBarBtn == expAccountMasterSideBarBtn;
 		
 		String actDispalyResult=Boolean.toString(actTestResult);
 		String expDispalyResult=excelReader.getCellData(xlSheetName, 717, 7);	
 		
 		System.err.println("DispalyResult  "+actDispalyResult +" Value Expected : "+expDispalyResult);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 717, 8, actDispalyResult.toUpperCase());
 		
 		
 		if(actDispalyResult.equalsIgnoreCase(expDispalyResult) && actControlList.equalsIgnoreCase(expControlList) 
 				&& actAccountMasterSearchGetText.equalsIgnoreCase(expAccountMasterSearchGetText)) 
 		
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 715, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 715, 9, resFail);
 			return false;
 		}
 	 }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 715, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
	 
	
	
 public static boolean checkSearchOptionAvailableInDepartmentMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("*************************** checkSearchOptionAvailableInDepartmentMastersPage Method Executes............ ********************************");

	 
	 
	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchBtn));
 		masterSearchBtn.click();

 		boolean actSummaryErrorMessage                      = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage                      = true;

 		System.out.println("Click on Search Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 		
        ArrayList<String> actmasterSearchList= new ArrayList<String>();
 		
  		int count = masterSearchList.size();
  		System.err.println("count   :"+count);
  		
  		for (int i=0;i<count;i++)
  		{
  			String data=masterSearchList.get(i).getText();
  			actmasterSearchList.add(data);
  		}
  		
  		String actSearchList = actmasterSearchList.toString();
  		String expSearchList = excelReader.getCellData(xlSheetName, 718, 7);
  		
  		System.out.println("actSearchList   : "+actSearchList);
  		System.out.println("expSearchList   : "+expSearchList);
 		
  		excelReader.setCellData(xlfile, xlSheetName, 718, 8, actSearchList);
  		
 		if (actSearchList.equalsIgnoreCase(expSearchList) && actSummaryErrorMessage==expSummaryErrorMessage)
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 718, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 718, 9, resFail);
 			return false;
 		}
 	 }
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 718, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	 

 public static boolean checkDepartmentMastersDisplayTableColumnNamesAvailableInDepartmentMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
	 System.out.println("************************* checkDepartmentMastersDisplayTableColumnNamesAvailableInDepartmentMastersPage Method Executes............ *************************");
		
	 
	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGrid_Header_SelectTxt));
 		boolean actAccountMasterGridSelectTxt = masterGrid_Header_SelectTxt.isDisplayed();
 		masterGrid_Header_SelectTxt.click();

 		/*boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage  = true;

 		System.out.println("Click on Master Grid Header Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 	*/	
 		
 		ArrayList<String> actmasterItemHeaderList=new ArrayList<String>();
 		
 		int HeaderCount =masterItemHeaderList.size();
 		
 		System.err.println("HeaderCount   :  "+HeaderCount);
 		
 		for (int i = 0; i < HeaderCount; i++) 
 		{
			String data=masterItemHeaderList.get(i).getText();
			actmasterItemHeaderList.add(data);
		}
 	
 		 String actMasterItemHeaderTextList=actmasterItemHeaderList.toString();
 		 String expMasterItemHeaderTextList=excelReader.getCellData(xlSheetName, 719, 7);
 		
 		
 		excelReader.setCellData(xlfile, xlSheetName, 719, 8, actMasterItemHeaderTextList);
 		
 		if (actMasterItemHeaderTextList.equalsIgnoreCase(expMasterItemHeaderTextList))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 719, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 719, 9, resFail);
 			return false;
 		}
 	 }
 	 catch (Exception e) 
 	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 719, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	 
	 

	

 public static boolean checkDepartmentMastersDisplayTableColumnValuesAvailableInDepartmentMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
   excelReader=new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
   System.out.println("********************** checkDepartmentMastersDisplayTableColumnValuesAvailableInDepartmentMastersPage Method Executes............ **************************");
	
   try
   {
         ArrayList<String> actmasterDepNameList=new ArrayList<String>();
	
		 int HeaderCount =masterDepNameList.size();
		
		 System.err.println("HeaderCount   :  "+HeaderCount);
		
		 for (int i = 0; i < HeaderCount; i++) 
		 {
			String data=masterDepNameList.get(i).getText();
			actmasterDepNameList.add(data);
		 }
		
		 String actMasterDepNameTextList=actmasterDepNameList.toString();
		 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 721, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 721, 8, actMasterDepNameTextList);
   	
	   	 System.err.println("  Actual MasterDepNameTextList : "+actMasterDepNameTextList);
	   	 System.err.println("  Expected  MasterDepNameTextList : "+expMasterDepNameTextList);
	   	
   	
         ArrayList<String> actmasterDepCodeList=new ArrayList<String>();
		
		 int CodeList =masterDepCodeList.size();
		
		 System.err.println("CodeList   :  "+CodeList);
		
		 for (int i = 0; i < CodeList; i++) 
		 {
			String data=masterDepCodeList.get(i).getText();
			actmasterDepCodeList.add(data);
		 }
		
	
		 String actMasterDepCodeTextList=actmasterDepCodeList.toString();
		 String expMasterDepCodeTextList=excelReader.getCellData(xlSheetName, 722, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 722, 8, actMasterDepCodeTextList);
	   	
	   	System.err.println("  Actual MasterItemDepCodeTextList : "+actMasterDepCodeTextList);
	   	System.err.println("  Expected  MasterDepCodeTextList : "+expMasterDepNameTextList);
	   	
	   	if(actMasterDepNameTextList.equalsIgnoreCase(expMasterDepNameTextList) && 
	   			actMasterDepCodeTextList.equalsIgnoreCase(expMasterDepCodeTextList))
	   	
		 {
   		excelReader.setCellData(xlfile, xlSheetName, 720, 9, resPass);
		return true;
	 } 
	 else 
	 {
		excelReader.setCellData(xlfile, xlSheetName, 720, 9, resFail);
		return false;
	 }
   }
   catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 720, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
   
 
 
  @FindBy(xpath = "//*[@id='iCurrencyId']")
  private static WebElement localCurrencyComboBox;

  @FindBy(xpath = "//*[@id='newMasterDiv0']/div/div/div/label/a")
  private static List<WebElement> depNewScreenBodyList;
  
  @FindBy(xpath = "//*[@id='GenerateNewMasterModel']/div/div/div/div/ul/li/button")
  private static List<WebElement> depNewScreenHeaderList;

  
  
  public static boolean checkClickOnNewButtonInDepartmentMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("****************************************** checkClickOnNewButtonInDepartmentMasterPage  ****************************************************");
	
	try
	{
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();
		
		//boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		//boolean expSummaryErrorMessage  = true;
		
		//System.out.println("Check Any Error Message On Click On New Value Actual  : " + actSummaryErrorMessage + "  Value Expected : "+ expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		
		
       ArrayList<String> actdepNewScreenBodyList=new ArrayList<String>();
		
		int BodyList =depNewScreenBodyList.size();
		
		System.err.println("BodyList   :  "+BodyList);
		
		for (int i = 0; i < BodyList; i++) 
		{
			String data=depNewScreenBodyList.get(i).getText();
			actdepNewScreenBodyList.add(data);
		}
		
	
		String actdepNewScreenBodyText=actdepNewScreenBodyList.toString();
		String expdepNewScreenBodyText=excelReader.getCellData(xlSheetName, 724, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 724, 8, actdepNewScreenBodyText);
		
		System.out.println("actdepNewScreenBodyText        :"+actdepNewScreenBodyText);
		System.out.println("expdepNewScreenBodyText        :"+expdepNewScreenBodyText);
		
		
		ArrayList<String> actdepNewScreenHeaderList=new ArrayList<String>();
			
		int HeaderList =depNewScreenHeaderList.size();
		
		System.err.println("HeaderList   :  "+HeaderList);
		
		for (int i = 0; i < HeaderList; i++) 
		{
			String data=depNewScreenHeaderList.get(i).getText();
			actdepNewScreenHeaderList.add(data);
		}
		
	
		String actdepNewScreenHeaderText=actdepNewScreenHeaderList.toString();
		String expdepNewScreenHeaderText=excelReader.getCellData(xlSheetName, 725, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 725, 8, actdepNewScreenHeaderText);

		System.out.println("actdepNewScreenHeaderText        :"+actdepNewScreenHeaderText);
		System.out.println("expdepNewScreenHeaderText        :"+expdepNewScreenHeaderText);
		
		
		
		boolean actUnitsMasterName      = nameTxt.isDisplayed();
		boolean actUnitsMasterCode      = codeTxt.isDisplayed();
		boolean actLocalCurrency        = localCurrencyComboBox.isDisplayed();
		boolean actMasterSearchSaveBtn  = saveBtn.isDisplayed();
		boolean actMasterSearchCloseBtn = closeBtn.isDisplayed();

		boolean expUnitsMasterName      = true;
		boolean expUnitsMasterCode      = true;
		boolean expLocalCurrency        = true;
		boolean expMasterSearchSaveBtn  = true;
		boolean expMasterSearchCloseBtn = true;

		System.out.println("Name Value Actual                          : " + actUnitsMasterName +     " Value Expected : " + expUnitsMasterName);
		System.out.println("Code Value Actual                          : " + actUnitsMasterCode +     " Value Expected : " + expUnitsMasterCode);
		System.out.println("Code Value Actual                          : " + actLocalCurrency +       " Value Expected : " + expLocalCurrency);
		System.out.println("Save Button Value Actual                   : " + actMasterSearchSaveBtn+  " Value Expected : " + expMasterSearchSaveBtn);
		System.out.println("Close Button Value Actual                  : " + actMasterSearchCloseBtn+ " Value Expected : " + expMasterSearchCloseBtn);

		
		boolean DisplayResult=actUnitsMasterName == expUnitsMasterName && actUnitsMasterCode == expUnitsMasterCode
									&& actLocalCurrency == actLocalCurrency && actMasterSearchSaveBtn == expMasterSearchSaveBtn
									&& actMasterSearchCloseBtn == expMasterSearchCloseBtn;
		
		String actDepNewScreen=Boolean.toString(DisplayResult);
		String expDepNewScreen=excelReader.getCellData(xlSheetName, 726, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 726, 8, actDepNewScreen.toUpperCase());
		
		
		if (actDepNewScreen.equalsIgnoreCase(expDepNewScreen)&& actdepNewScreenHeaderText.equalsIgnoreCase(expdepNewScreenHeaderText) && 
				actdepNewScreenBodyText.equalsIgnoreCase(expdepNewScreenBodyText))
		{
			excelReader.setCellData(xlfile, xlSheetName, 723, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 723, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 723, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
 
 
  public static boolean checkInputNameCodeLocalCurrencyFieldsInDepartmentCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************************** checkInputNameCodeLocalCurrencyFieldsInDepartmentCreationPage ************************************");
		
    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 728, 6));
		Thread.sleep(2000);
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 729, 6));
		Thread.sleep(2000);
		codeTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(localCurrencyComboBox));
		localCurrencyComboBox.sendKeys(excelReader.getCellData(xlSheetName, 730, 6));
		Thread.sleep(5000);
		localCurrencyComboBox.sendKeys(Keys.TAB);

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
		
		System.out.println("Check Any Error Message On Click On New Value Actual  : " + actSummaryErrorMessage + "  Value Expected : "+ expSummaryErrorMessage);
	

		if (actSummaryErrorMessage==expSummaryErrorMessage) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 727, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 727, 9, resFail);
			return false;
		}
    }	

	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 727, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

  public static boolean checkClickOnSaveButtonInDepartmentCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************************** checkClickOnSaveButtonInDepartmentCreationPage ************************************");

    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMasterSaveMessage = excelReader.getCellData(xlSheetName, 732, 7);;
		
		//excelReader.setCellData(xlfile, xlSheetName, 732, 8, expMasterSaveMessage);
		
		boolean actMasterSave = checkValidationMessageboolean(expMasterSaveMessage);
		boolean expMasterSave = true;

		System.out.println("Click on Save                   : " + actMasterSave + "  Value Expected :       " + expMasterSave);

		if (actMasterSave == expMasterSave)
		{
			excelReader.setCellData(xlfile, xlSheetName, 731, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 731, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 731, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }

  public static boolean checkDepartmentCreationAndClickOnCloseButtonToDisplayCreatedDepartmentInDisplayGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
    excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkDepartmentCreationAndClickOnCloseButtonToDisplayCreatedDepartmentInDisplayGrid *******************************");
	
	try
	{
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		boolean actUnitsMasterName      = nameTxt.getText().isEmpty();
		boolean actUnitsMasterCode      = codeTxt.getText().isEmpty();
		boolean actLocalCurrency        = localCurrencyComboBox.isDisplayed();
		boolean actMasterSearchSaveBtn  = saveBtn.isDisplayed();
		boolean actMasterSearchCloseBtn = closeBtn.isDisplayed();

		boolean expUnitsMasterName      = true;
		boolean expUnitsMasterCode      = true;
		boolean expLocalCurrency        = true;
		boolean expMasterSearchSaveBtn  = true;
		boolean expMasterSearchCloseBtn = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsNewCreationNameInFirstRow));
		String actUnitsCreationNameDisplayInGrid = unitsNewCreationNameInFirstRow.getText();
		String expUnitsCreationNameDisplayInGrid = excelReader.getCellData(xlSheetName, 734, 7);

		excelReader.setCellData(xlfile, xlSheetName, 734, 8, actUnitsCreationNameDisplayInGrid);
		
		System.out.println("Name Value Actual                         : " + actUnitsMasterName+                " Value Expected : " + expUnitsMasterName);
		System.out.println("Code Value Actual                         : " + actUnitsMasterCode+                " Value Expected : " + expUnitsMasterCode);
		System.out.println("Local Curency Value Actual                : " + actLocalCurrency +                 " Value Expected : "+ expLocalCurrency);
		System.out.println("Save Button Value Actual                  : " + actMasterSearchSaveBtn+            " Value Expected : " + expMasterSearchSaveBtn);
		System.out.println("Close Button Value Actual                 : " + actMasterSearchCloseBtn+           " Value Expected : " + expMasterSearchCloseBtn);
		System.out.println("Department Created display in Grid        : " + actUnitsCreationNameDisplayInGrid+ " Value Expected : " + expUnitsCreationNameDisplayInGrid);

		boolean DisplayedResult=actUnitsMasterName == expUnitsMasterName && actUnitsMasterCode == expUnitsMasterCode
								&& actLocalCurrency == expLocalCurrency && actMasterSearchSaveBtn == expMasterSearchSaveBtn
								&& actMasterSearchCloseBtn == expMasterSearchCloseBtn;
		
		String actDisplayResult=Boolean.toString(DisplayedResult);
		
		String expDisplayResult=excelReader.getCellData(xlSheetName, 735, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 735, 8, expDisplayResult.toUpperCase());
						
		System.out.println("actDisplayResult   : "+actDisplayResult);
		System.out.println("expDisplayResult   : "+expDisplayResult);
		
		
		if (actDisplayResult.equalsIgnoreCase(expDisplayResult)
				&& actUnitsCreationNameDisplayInGrid.equalsIgnoreCase(expUnitsCreationNameDisplayInGrid)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 733, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 733, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 733, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
}

  public static boolean checkClickOnEditForNewlyCreatedDepartment() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("****************************************** checkClickOnEditForNewlyCreatedDepartment **************************************************");

	try
	{
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
 		unitFirstCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
		String actMessage=Boolean.toString(actSummaryErrorMessage);
		
		String expMessage=excelReader.getCellData(xlSheetName, 737, 7);
		
        excelReader.setCellData(xlfile, xlSheetName, 737, 8, actMessage);
		
		System.out.println("Check Any Error Message On Click On New Value Actual  : " + actSummaryErrorMessage + "  Value Expected : "+ expSummaryErrorMessage);

		
		if (actSummaryErrorMessage==expSummaryErrorMessage) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 736, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 736, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 736, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

  
  public static boolean checkNameCodeAndCurrencyOptionForNewlyCreatedDepartmentThroughEdit() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkNameCodeAndCurrencyOptionForNewlyCreatedDepartmentThroughEdit *******************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		String actDepartmentNameTxt = nameTxt.getAttribute("value");
		String actDepartmentCodeTxt = codeTxt.getAttribute("value");

		excelReader.setCellData(xlfile, xlSheetName, 739, 8, actDepartmentNameTxt);
		
		excelReader.setCellData(xlfile, xlSheetName, 740, 8, actDepartmentCodeTxt);
		
		String expDepartmentNameTxt = excelReader.getCellData(xlSheetName, 739, 7);
		String expDepartmentCodeTxt = excelReader.getCellData(xlSheetName, 740, 7);

		System.out.println("Name Value Actual                         : " + actDepartmentNameTxt+ "     Value Expected : " + expDepartmentNameTxt);
		System.out.println("Code Value Actual                         : " + actDepartmentCodeTxt+ "     Value Expected : " + expDepartmentCodeTxt);

		if (actDepartmentNameTxt.equalsIgnoreCase(expDepartmentNameTxt)
				&& actDepartmentCodeTxt.equalsIgnoreCase(expDepartmentCodeTxt)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 738, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 738, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 738, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }

}

  public static boolean checkUpatingNameCodeCurrencyForNewlyCreateDepartment()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkUpatingNameCodeCurrencyForNewlyCreateDepartment *******************************");
	
    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.clear();
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 742, 6));
		Thread.sleep(2000);
		getAction().moveToElement(nameTxt).sendKeys(Keys.TAB).perform();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.clear();
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 743, 6));
		Thread.sleep(2000);
		getAction().moveToElement(codeTxt).sendKeys(Keys.TAB).perform();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(localCurrencyComboBox));
		localCurrencyComboBox.sendKeys(excelReader.getCellData(xlSheetName, 744, 6));
		Thread.sleep(5000);
		localCurrencyComboBox.sendKeys(Keys.TAB);
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
		System.out.println("Check Any Error Message On Click On New Value Actual  : " + actSummaryErrorMessage + "  Value Expected : "+ expSummaryErrorMessage);


		if (actSummaryErrorMessage==expSummaryErrorMessage) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 741, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 741, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 741, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  } 

  public static boolean checkClickOnSaveByUpdatingMasterAndDisplayDepartmentDisplayInGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkUpatingNameCodeCurrencyForNewlyCreateDepartment *******************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMasterSaveMessage = excelReader.getCellData(xlSheetName, 746, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 746, 8, expMasterSaveMessage);
		
		boolean MasterSave = checkValidationMessageboolean(expMasterSaveMessage);
		/*boolean Mastersave = true;*/

		
		String actMasterSave=Boolean.toString(MasterSave);
		String expMasterSave=excelReader.getCellData(xlSheetName, 747, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 747, 8, actMasterSave);
		
		System.out.println("Click on Save                   : " + actMasterSave + "  Value Expected :       " + expMasterSave);

		Thread.sleep(1000);
		
		String actUnitsCreationNameDisplayInGrid = unitsNewCreationNameInFirstRow.getText();
		String expUnitsCreationNameDisplayInGrid = excelReader.getCellData(xlSheetName, 748, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 748, 8, actUnitsCreationNameDisplayInGrid);
		
		System.out.println("Department Created display in Grid        : " + actUnitsCreationNameDisplayInGrid + "     Value Expected : " + expUnitsCreationNameDisplayInGrid);

		if (actMasterSave.equalsIgnoreCase(expMasterSave) && actUnitsCreationNameDisplayInGrid.equalsIgnoreCase(expUnitsCreationNameDisplayInGrid)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 745, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 745, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 745, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  } 

  public static boolean checkDeleteDepartmentMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkDeleteItemGroupFromItemMasterPageInGroup *************************");
	
    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemMasterSelect));
		itemMasterSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemMasterSelect));
		itemMasterSelect.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
		unitFirstCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
		masterDeleteBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
		String actGetMsgOnDelete = getMsgOnDelete.getText();
		String expGetMsgOnDelete = excelReader.getCellData(xlSheetName, 750, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 750, 8, actGetMsgOnDelete);
		
		System.out.println("Message diplay on Delete The Master          : " + actGetMsgOnDelete + " Value Expected :  " + expGetMsgOnDelete);

		String expMasterSaveMessage =  excelReader.getCellData(xlSheetName, 751, 7);
		excelReader.setCellData(xlfile, xlSheetName, 751, 8, expMasterSaveMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
		clickOnOkInDelete.click();
		
		boolean MasterSave = checkValidationMessageboolean(expMasterSaveMessage);
		boolean Mastersave = true;
		
		String actMasterSave=Boolean.toString(MasterSave);
		String expMasterSave=excelReader.getCellData(xlSheetName, 752, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 752, 8, actMasterSave);
		
		System.out.println("Delete the Master Confirmation Message              : " + actMasterSave + "  Value Expected : " + expMasterSave);

		if (actGetMsgOnDelete.equalsIgnoreCase(expGetMsgOnDelete) /*&& actMasterSave.equalsIgnoreCase(expMasterSave)*/)
		{
			excelReader.setCellData(xlfile, xlSheetName, 749, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 749, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 749, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

  public static boolean checkDeleteMasterDisplayInGroup()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkDeletenMasterDisplayInGroup *************************");
	
    try
    {
   	 ArrayList<String> actmasterDepNameList=new ArrayList<String>();
		
	 int HeaderCount =masterDepNameList.size();
		
	 System.err.println("HeaderCount   :  "+HeaderCount);
		
	 for (int i = 0; i < HeaderCount; i++) 
	 {
		String data=masterDepNameList.get(i).getText();
		actmasterDepNameList.add(data);
	 }
	
	 String actMasterDepNameTextList=actmasterDepNameList.toString();
	 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 754, 7);
		
	 excelReader.setCellData(xlfile, xlSheetName, 754, 8, actMasterDepNameTextList);
	

	 
	/*	String actItemName = unitsNewCreationNameInFirstRow.getText();
		String expItemName = excelReader.getCellData(xlSheetName, 754, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 754, 8, actItemName);
		
		System.out.println("Item Name Display                : " + actItemName + " Value Expected :  " + expItemName);*/

		if (actMasterDepNameTextList.equalsIgnoreCase(expMasterDepNameTextList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 753, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 753, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 753, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }

  } 

  
  
  public static boolean checkSaveDepartment() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************************** checkInputNameCodeLocalCurrencyFieldsInDepartmentCreationPage ************************************");
		
    try
    {
    	
    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 728, 6));
		Thread.sleep(2000);
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 729, 6));
		Thread.sleep(2000);
		codeTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(localCurrencyComboBox));
		localCurrencyComboBox.sendKeys(excelReader.getCellData(xlSheetName, 730, 6));
		Thread.sleep(5000);
		localCurrencyComboBox.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
 		nameTxt.click();

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();

 		
        String exWarehouseSaveMessage = excelReader.getCellData(xlSheetName, 879, 7);
 		
 		//excelReader.setCellData(xlfile, xlSheetName, 1666, 8, exWarehouseSaveMessage);
 		
 		boolean MasterSave = checkValidationMessageboolean(exWarehouseSaveMessage);
 		
 		
 		String actMasterSave= Boolean.toString(MasterSave);
 		String expMasterSave=excelReader.getCellData(xlSheetName, 880, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 880, 8, actMasterSave.toUpperCase());
 		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		if (actMasterSave.equalsIgnoreCase(expMasterSave)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 727, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 727, 9, resFail);
			return false;
		}
    }	

	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 727, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
  
  
  public static boolean checkCloseDepartmentMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkCloseDepartmentMaster ********************************");

    try
    {
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCloseBtn));
		itemCloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		boolean actLoadDashboard          = labelDashboard.isDisplayed();
		boolean actSelectDashboard        = selectDashboard.isDisplayed();
		boolean actNewDashboard           = newAddDashBoard.isDisplayed();
		boolean actDashboardCustomization = dashboardCustomizationSettings.isDisplayed();

		boolean expLoadDashboard          = true;
		boolean expSelectDashboard        = true;
		boolean expNewDashboard           = true;
		boolean expDashboardCustomization = true;

		System.out.println("Load Dashbord Value Actual          : " + actLoadDashboard +         " Value Expected : " + expLoadDashboard);
		System.out.println("Select Dashbord Value Actual        : " + actSelectDashboard +       " Value Expected : " + expSelectDashboard);
		System.out.println("New Dashbord Value Actual           : " + actNewDashboard +          " Value Expected : " + expNewDashboard);
		System.out.println("Dashbord Customization Value Actual : " + actDashboardCustomization+ " Value Expected : " + expDashboardCustomization);

		
		boolean DisplayResult=actLoadDashboard == expLoadDashboard && actSelectDashboard == expSelectDashboard
				                 && actNewDashboard == expNewDashboard && actDashboardCustomization == expDashboardCustomization;
		
		String actDispalyResult=Boolean.toString(DisplayResult);
		String expDispalyResult=excelReader.getCellData(xlSheetName, 756, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 756, 8, actDispalyResult.toUpperCase());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 757, 7);

		excelReader.setCellData(xlfile, xlSheetName, 757, 8, actDashboardLabel);
		
		
		System.out.println("Close Button  : " + actDashboardLabel + "  Value Expected : " + expDashboardLabel);
		
		
		if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel) && actDispalyResult.equalsIgnoreCase(expDispalyResult)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 755, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 755, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 755, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	  
  
  //BIN MASTER PAGE STARTS
  
  public static boolean checkBinsMasterPageIsDisplayByClickOnBinsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
 	excelReader = new ExcelReader(POJOUtility.getExcelPath());
 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

 	System.out.println("************************************ checkBinsMasterPageIsDisplayByClickOnBinsMenu ********************************************");

 	try
 	{
 		
 		Thread.sleep(2000);
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
 		homeMenu.click();

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
 		mastersMenu.click();

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsMenu));
 		binsMenu.click();
 		
 		
 		/*boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage  = true;
 		
 		boolean actServerErrorMessage  = checkServerErrorMessageIsNotDisplay();
 		boolean expServerErrorMessage  = false;
 		
 		System.out.println("Opening UnitsConversion Error Message Value Actual : " + actSummaryErrorMessage +  " Value Expected : " + expSummaryErrorMessage);
 		System.out.println("Opening UnitsConversion Error Message              : " + actServerErrorMessage +   " Value Expected : " +  expServerErrorMessage);*/
 		
 		
 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));

 		String actUnitsTitle = accountsTitle.getText();
 		String expUnitsTitle = excelReader.getCellData(xlSheetName, 760, 7	);

 		
 		excelReader.setCellData(xlfile, xlSheetName, 760, 8, actUnitsTitle);
 		
 		System.out.println("Opening Units Master From Item Menu Title Actual Value  :" + actUnitsTitle + "     Expected Value    : " + expUnitsTitle);

 		if (actUnitsTitle.equalsIgnoreCase(expUnitsTitle)) 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 759, 9, resPass);
 			return true;
 		}
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 759, 9, resFail);
 			return false;
 		}
 	}
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 759, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
   
   
  public static boolean checkMainOptionsAvailabilityInBinsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		 
 	 System.out.println("************ checkMainOptionsAvailabilityInBinsMasterPage Method Executes............ *********************");

 	 try
 	 {
 		 
 		 
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));

 		boolean actAccountMasterNewBtn        = masterNewBtn.isDisplayed();
 		boolean actAccountMasterAddGroupBtn   = masterAddGroupBtn.isDisplayed();
 		boolean actAccountMasterEditBtn       = masterEditBtn.isDisplayed();
 		boolean actAccountMasterCloneBtn      = masterCloneBtn.isDisplayed();
 		boolean actAccountMasterPropertiesBtn = masterPropertiesBtn.isDisplayed();
 		boolean actAccountMasterDeleteBtn     = masterDeleteBtn.isDisplayed();
 		boolean actAccountMasterCloseBtn      = masterCloseBtn.isDisplayed();
 		boolean actAccountMasterExpandBtn     = masterRibbonToExpandOptions.isDisplayed();

 		boolean expAccountMasterNewBtn        = true;
 		boolean expAccountMasterAddGroupBtn   = true;
 		boolean expAccountMasterEditBtn       = true;
 		boolean expAccountMasterCloneBtn      = true;
 		boolean expAccountMasterPropertiesBtn = true;
 		boolean expAccountMasterDeleteBtn     = true;
 		boolean expAccountMasterCloseBtn      = true;
 		boolean expAccountMasterExpandBtn     = true;

 		System.out.println("New Button Display Value Actual          : " + actAccountMasterNewBtn+        "  Value Expected : " + expAccountMasterNewBtn);
 		System.out.println("Add Group Button Display Value Actual    : " + actAccountMasterAddGroupBtn+   "  Value Expected : " + expAccountMasterAddGroupBtn);
 		System.out.println("Edit Button Display Value Actual         : " + actAccountMasterEditBtn +      "  Value Expected : " + expAccountMasterEditBtn);
 		System.out.println("Close Button Display Value Actual        : " + actAccountMasterCloneBtn+      "  Value Expected : " + expAccountMasterCloneBtn);
 		System.out.println("Properties Button Display Value Actual   : " + actAccountMasterPropertiesBtn+ "  Value Expected : " + expAccountMasterPropertiesBtn);
 		System.out.println("Delete Button Display Value Actual       : " + actAccountMasterDeleteBtn+     "  Value Expected : " + expAccountMasterDeleteBtn);
 		System.out.println("Close Button Button Display Value Actual : " + actAccountMasterCloseBtn+      "  Value Expected : " + expAccountMasterCloseBtn);
 		System.out.println("Expand Button Display Value Actual       : " + actAccountMasterExpandBtn+     "  Value Expected : " + expAccountMasterExpandBtn);
 			
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));

		
        Set<String> actRibbonControl= new HashSet<String>();
		
		int count = itemRibbonControlList.size();
		
		System.err.println(" Ribbon :   "+count);
		
		for (int i=1;i<count;i++)
		{
			String data=itemRibbonControlList.get(i).getText();
			actRibbonControl.add(data);
		}
		
		String actBinsRibbon = actRibbonControl.toString();
		
		String expBinsRibbon = excelReader.getCellData(xlSheetName, 762, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 762, 8, actBinsRibbon);
		
		System.out.println("actItemRibbon  : "+actBinsRibbon);
		System.out.println("expItemRibbon  : "+expBinsRibbon);
 		
 		
 		if (actBinsRibbon.equalsIgnoreCase(expBinsRibbon) && actAccountMasterNewBtn == expAccountMasterNewBtn
 				&& actAccountMasterAddGroupBtn == expAccountMasterAddGroupBtn
 				&& actAccountMasterEditBtn == expAccountMasterEditBtn
 				&& actAccountMasterCloneBtn == expAccountMasterCloneBtn
 				&& actAccountMasterPropertiesBtn == actAccountMasterPropertiesBtn
 				&& actAccountMasterDeleteBtn == expAccountMasterDeleteBtn
 				&& actAccountMasterCloseBtn == expAccountMasterCloseBtn
 				&& actAccountMasterExpandBtn == expAccountMasterExpandBtn)
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 761, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 761, 9, resFail);
 			return false;
 		}
 	  }
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 761, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
   }

  
  public static boolean checkToolsOptionsAvailabilityOnClickMasterRibbonToExpandOptionsInBinsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("*********** checkToolsOptionsAvailabilityOnClickMasterRibbonToExpandOptionsInBinsMastersPage Method Executes............*******************");

 	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
 		masterRibbonToExpandOptions.click();

 		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage  = true;
 		
        System.out.println("Click On Ribbon Expand Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));

 		boolean actAccountMasterGroupBtn              = masterGroupBtn.isDisplayed();
 		boolean actAccountMasterDeleteAllBtn          = masterDeleteAllBtn.isDisplayed();
 		boolean actAccountMasterCloseAccountBtn       = masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
 		boolean actAccountMasterOpenCloseAccountBtn   = masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
 		boolean actAccountMasterAdvanceImortExportBtn = masterAdvanceMasterImportORExportBtn.isDisplayed();
 		boolean actAccountMasterAuthorInfoBtn         = masterAuthorInfoBtn.isDisplayed();
 		boolean actAccountMasterMoveUpBtn             = masterMoveUpBtn.isDisplayed();
 		boolean actAccountMasterMoveDownBtn           = masterMoveDownBtn.isDisplayed();
 		boolean actAccountMasterSortBtn               = masterSortBtn.isDisplayed();
 		boolean actAccountMasterMassUpdateBtn         = masterMassUpdateBtn.isDisplayed();
 		boolean actAccountMasterImportFromXMLBtn      = masterImportFromXmlBtn.isDisplayed();
 		boolean actAccountMasterExportFormatToXMLBtn  = masterExportFormatToXmlBtn.isDisplayed();

 		boolean expAccountMasterGroupBtn              = true;
 		boolean expAccountMasterDeleteAllBtn          = true;
 		boolean expAccountMasterCloseAccountBtn       = true;
 		boolean expAccountMasterOpenCloseAccountBtn   = true;
 		boolean expAccountMasterAdvanceImortExportBtn = true;
 		boolean expAccountMasterAuthorInfoBtn         = true;
 		boolean expAccountMasterMoveUpBtn             = true;
 		boolean expAccountMasterMoveDownBtn           = true;
 		boolean expAccountMasterSortBtn               = true;
 		boolean expAccountMasterMassUpdateBtn         = true;
 		boolean expAccountMasterImportFromXMLBtn      = true;
 		boolean expAccountMasterExportFormatToXMLBtn  = true;

 		System.out.println("Group Button Display Value Actual           : " + actAccountMasterGroupBtn+              " Value Expected : " + expAccountMasterGroupBtn);
 		System.out.println("Delete All Button Display Value Actual      : " + actAccountMasterDeleteAllBtn+          " Value Expected : " + expAccountMasterDeleteAllBtn);
 		System.out.println("Close Account Button Display Value Actual   : " + actAccountMasterCloseAccountBtn+       " Value Expected : " + expAccountMasterCloseAccountBtn);
 		System.out.println("Import Export Button Display Value Actual   : " + actAccountMasterAdvanceImortExportBtn+ " Value Expected : " + expAccountMasterAdvanceImortExportBtn);
 		System.out.println("Authorize Info Button Display Value Actual  : " + actAccountMasterAuthorInfoBtn+         " Value Expected : " + expAccountMasterAuthorInfoBtn); 
 		System.out.println("Move Down Button Display Value Actual       : " + actAccountMasterMoveDownBtn+           " Value Expected : " + expAccountMasterMoveDownBtn);
 		System.out.println("Move Up Button Display Value Actual         : " + expAccountMasterMoveUpBtn+             " Value Expected : " + expAccountMasterMoveUpBtn);
 		System.out.println("Sort Button Display Value Actual            : " + actAccountMasterSortBtn+               " Value Expected : " + expAccountMasterSortBtn);
 		System.out.println("Import From XML Button Display Value Actual : " + actAccountMasterImportFromXMLBtn+      " Value Expected : " + expAccountMasterImportFromXMLBtn);
 		System.out.println("Export From XML Button Display Value Actual : "+ actAccountMasterExportFormatToXMLBtn+   " Value Expected : " + expAccountMasterExportFormatToXMLBtn);

 		
 		Thread.sleep(1000);
		
		
	     ArrayList<String> actRibbonControlExpandList= new ArrayList<String>();
		
	 	 int count = itemRibbonControlExpandList.size();
		
		 System.err.println("count   :"+count);
		
		 for (int i=0;i<count;i++)
		 {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
			masterRibbonControlNextBtn.click();
			
			String data=itemRibbonControlExpandList.get(i).getText();
			actRibbonControlExpandList.add(data);
		 }
		
		 String actItemRibbonExpand = actRibbonControlExpandList.toString();
	 	
		 String expItemRibbonExpand = excelReader.getCellData(xlSheetName, 764, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 764, 8, actItemRibbonExpand);
		
		 System.out.println("actItemRibbonExpand   : "+actItemRibbonExpand);
		
		 System.out.println("expItemRibbonExpand   : "+expItemRibbonExpand);	
 		
 		if (actSummaryErrorMessage==expSummaryErrorMessage
 				&& actAccountMasterGroupBtn == expAccountMasterGroupBtn
 				&& actAccountMasterDeleteAllBtn == expAccountMasterDeleteAllBtn
 				&& actAccountMasterCloseAccountBtn == expAccountMasterCloseAccountBtn
 				&& actAccountMasterOpenCloseAccountBtn == expAccountMasterOpenCloseAccountBtn
 				&& actAccountMasterAdvanceImortExportBtn == expAccountMasterAdvanceImortExportBtn
 				&& actAccountMasterAuthorInfoBtn == expAccountMasterAuthorInfoBtn
 				&& actAccountMasterMoveUpBtn == expAccountMasterMoveUpBtn
 				&& actAccountMasterMoveDownBtn == expAccountMasterMoveDownBtn
 				&& actAccountMasterSortBtn == expAccountMasterSortBtn
 				&& actAccountMasterMassUpdateBtn == expAccountMasterMassUpdateBtn
 				&& actAccountMasterImportFromXMLBtn == expAccountMasterImportFromXMLBtn
 				&& actAccountMasterExportFormatToXMLBtn == expAccountMasterExportFormatToXMLBtn 
 				&& actItemRibbonExpand.equalsIgnoreCase(expItemRibbonExpand))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 763, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 763, 9, resFail);
 			return false;
 		}
 	  }
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 763, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
   }
 
  
  public static boolean checkOtherToolsOptionsAvailabilityInBinsMastersPageOnClickRibbonControlNextButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("********* checkOtherToolsOptionsAvailabilityInBinsMastersPageOnClickRibbonControlNextButton Method Executes............  *******************");

 	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
        masterRibbonControlNextBtn.click();
 		
 		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage  = true;
 		
        System.out.println("Click On Ribbon Control Next Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 	
 		masterRibbonControlNextBtn.click();
 		masterRibbonControlNextBtn.click();
 		/*masterRibbonControlNextBtn.click();
 		masterRibbonControlNextBtn.click();
 		masterRibbonControlNextBtn.click();
 		masterRibbonControlNextBtn.click();
 		masterRibbonControlNextBtn.click();*/

 		getWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizeMasterBtn));

 		boolean actAccountMasterCustomizeMasterBtn = masterCustamizeMasterBtn.isDisplayed();
 		boolean actAccountMasterCustomizeViewBtn   = masterCustamizeViewBtn.isDisplayed();
 		boolean actAccountMasterCustomizeTreeBtn   = mastercustamizeTreeBtn.isDisplayed();

 		boolean expAccountMasterCustomizeMasterBtn = true;
 		boolean expAccountMasterCustomizeViewBtn   = true;
 		boolean expAccountMasterCustomizeTreeBtn   = true;

 		System.out.println("Customize Master Option Value Actual        : " + actAccountMasterCustomizeMasterBtn+        " Value Expected : " + expAccountMasterCustomizeMasterBtn);
 		System.out.println("Customize View Option Value Actual          : " + actAccountMasterCustomizeViewBtn+          " Value Expected : " + expAccountMasterCustomizeViewBtn);
 		System.out.println("Customize Tree Option Value Actual          : " + actAccountMasterCustomizeTreeBtn+          " Value Expected : " + expAccountMasterCustomizeTreeBtn);

 		ArrayList<String> actRibbonControlExpandList= new ArrayList<String>();
		
	 	 int count = itemRibbonControlExpandList.size();
		
		 System.err.println("count   :"+count);
		
		 for (int i=0;i<count;i++)
		 {
			String data=itemRibbonControlExpandList.get(i).getText();
			actRibbonControlExpandList.add(data);
		 }
		
		 String actItemRibbonExpand = actRibbonControlExpandList.toString();
	 	
		 String expItemRibbonExpand = excelReader.getCellData(xlSheetName, 766, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 766, 8, actItemRibbonExpand);
		
		 System.out.println("actItemRibbonExpand   : "+actItemRibbonExpand);
		
		 System.out.println("expItemRibbonExpand   : "+expItemRibbonExpand);	
 		
 		
		 boolean displayResult=actSummaryErrorMessage==expSummaryErrorMessage 
					 				&& actAccountMasterCustomizeMasterBtn == expAccountMasterCustomizeMasterBtn
					 				&& actAccountMasterCustomizeViewBtn == expAccountMasterCustomizeViewBtn
					 				&& actAccountMasterCustomizeTreeBtn == expAccountMasterCustomizeTreeBtn;
		 
		 String actDisplayResult=Boolean.toString(displayResult);
		 String expDispalyResult=excelReader.getCellData(xlSheetName, 767, 7);
		 
				
		 excelReader.setCellData(xlfile, xlSheetName, 767, 8, actDisplayResult.toUpperCase());
				 
		 
 		if (actItemRibbonExpand.equalsIgnoreCase(expItemRibbonExpand) && 
 				actDisplayResult.equalsIgnoreCase(expDispalyResult))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 765, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 765, 9, resFail);
 			return false;
 		}
 	  }

 	catch (Exception e) 
 	  {
 		  String exception =e.getMessage();
 		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 765, 10, exception);
 		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
 		  return false;
 	  }
   }
 	
  

  public static boolean checkTreeViewOptionsAvailableInBinsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("***********  checkTreeViewOptionsAvailableInBinsMastersPage Method Executes............ ********************");
 	 
 	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));

		boolean actAccountMasterTreeIdDropdownIsDisplay                 = masterTreeIdDropdown.isDisplayed();
		
		Select MasterId=new Select(masterTreeIdDropdown);
		String actAccountMasterTreeIdDropdownGetText                    = MasterId.getFirstSelectedOption().getText();
		
		boolean actAccountMasterTreeIDToggleBtnIsDisplay                = masterTreeIDToggleBtn.isDisplayed();
		boolean actAccountMasterTreeViewIDDropdownIsDisplay             = masterTreeViewIDDropdown.isDisplayed();
		
		Select MasterTreeViewId=new Select(masterTreeViewIDDropdown);
		String actAccountMasterTreeViewIDDropdownGetText                = MasterTreeViewId.getFirstSelectedOption().getText();
		
		boolean actAccountMasterTreeViewIDToggleBtnIsDisplay            = masterTreeViewIDToggleBtn.isDisplayed();
		boolean actAccountMasterHideAccountsGroupTreeIsDisplay          = masterOptionToHideAccountsGroupTree.isDisplayed();

		boolean expAccountMasterTreeIdDropdownIsDisplay                 = true;
		String expAccountMasterTreeIdDropdownGetText                    = excelReader.getCellData(xlSheetName, 769, 7);
		                                                        
		boolean expAccountMasterTreeIDToggleBtnIsDisplay                = true;
		boolean expAccountMasterTreeViewIDDropdownIsDisplay             = true;
		String expAccountMasterTreeViewIDDropdownGetText                = excelReader.getCellData(xlSheetName, 770, 7);
		
		boolean expAccountMasterTreeViewIDToggleBtnIsDisplay            = true;
		boolean expAccountMasterHideAccountsGroupTreeIsDisplay          = true;
		

		System.out.println("Tree ID Dropdown Option Value Actual      : " +actAccountMasterTreeIdDropdownIsDisplay    +" Value Expected : " + expAccountMasterTreeIdDropdownIsDisplay);
		System.out.println("Tree ID Dropdown Option Value Actual      : " +actAccountMasterTreeIdDropdownGetText      +" Value Expected : " + expAccountMasterTreeIdDropdownGetText);
		
		System.out.println("Tree ID Toggle Option Value Actual        : " +actAccountMasterTreeIDToggleBtnIsDisplay   +" Value Expected : " + expAccountMasterTreeIDToggleBtnIsDisplay);
	
		
		System.out.println("Tree View ID Option Value Actual          : " +actAccountMasterTreeViewIDDropdownIsDisplay +" Value Expected : " + expAccountMasterTreeViewIDDropdownIsDisplay);
		System.out.println("Tree View ID Option Value Actual          : " +actAccountMasterTreeViewIDDropdownGetText   +" Value Expected : " + expAccountMasterTreeViewIDDropdownGetText);
		
		System.out.println("Tree View ID Toggle Value Actual          : " +actAccountMasterTreeViewIDToggleBtnIsDisplay +" Value Expected : " + expAccountMasterTreeViewIDToggleBtnIsDisplay);
		
		
		System.out.println("Hide Accounts Group Tree Value Actual     : " +actAccountMasterHideAccountsGroupTreeIsDisplay+" Value Expected : " + expAccountMasterHideAccountsGroupTreeIsDisplay);
		
        excelReader.setCellData(xlfile, xlSheetName, 769, 8, actAccountMasterTreeIdDropdownGetText);
		
		excelReader.setCellData(xlfile, xlSheetName, 770, 8, actAccountMasterTreeViewIDDropdownGetText);
		
		
		if ( actAccountMasterTreeIdDropdownIsDisplay == expAccountMasterTreeIdDropdownIsDisplay
				&& actAccountMasterTreeIDToggleBtnIsDisplay == expAccountMasterTreeIDToggleBtnIsDisplay
				&& actAccountMasterTreeViewIDDropdownIsDisplay == expAccountMasterTreeViewIDDropdownIsDisplay
				&& actAccountMasterTreeViewIDToggleBtnIsDisplay == expAccountMasterTreeViewIDToggleBtnIsDisplay
				&& actAccountMasterHideAccountsGroupTreeIsDisplay == expAccountMasterHideAccountsGroupTreeIsDisplay && 
				
				actAccountMasterTreeIdDropdownGetText.equalsIgnoreCase(expAccountMasterTreeIdDropdownGetText) && 
				 
				actAccountMasterTreeViewIDDropdownGetText.equalsIgnoreCase(expAccountMasterTreeViewIDDropdownGetText))
				 
				
		{
			excelReader.setCellData(xlfile, xlSheetName, 768, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 768, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 768, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 	
  @FindBy(xpath = "//*[@id='10']/a[2]")
  private static WebElement localBinOneGroupDisplayInTree;
  
  @FindBy(xpath = "//*[@id='7']/a[2]")
  private static WebElement localBinTwoGroupDisplayInTree;
  
  @FindBy(xpath = "//*[@id='6']/a[2]")
  private static WebElement warehouseGroupDisplayInTree;
  
  @FindBy(xpath = "//*[@id='tree2']/li//a[2]")
  private static List<WebElement> leftPannelList;

  
  public static boolean checkDisplayOfGroupAvailableTreeStructureLeftPageBinsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("**************************  checkDisplayOfGroupAvailableTreeStructureLeftPageBinsMasterPage Method Executes............  *******************************");
     
 	 try
 	 {
 		 
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));
 
 		boolean actBinsMasterRoot                 = accountRootAccount.isDisplayed();
 		/*boolean actBinGroupOneMasterRoot          = localBinOneGroupDisplayInTree.isDisplayed();
 		boolean actBinGroupTwoMasterRoot          = localBinTwoGroupDisplayInTree.isDisplayed();
 		*/
 		boolean expBinsMasterRoot                 = true;
 	/*	boolean expBinGroupOneMasterRoot          = true;
 		boolean expBinGroupTwoMasterRoot          = true;
 		*/
 		System.out.println("Bins Root Is Display Value Actual        : " + actBinsMasterRoot+        " Value Expected : " + expBinsMasterRoot);
 		/*System.out.println("Root Bins Group One Display Value Actual : " + actBinGroupOneMasterRoot+ " Value Expected : " + expBinGroupOneMasterRoot);
 		System.out.println("Root Bins Group Two Display Value Actual : " + actBinGroupTwoMasterRoot+ " Value Expected : " + expBinGroupTwoMasterRoot);
 		*/
 		String actBinsRootName                    = accountRootAccount.getText();
 		String expBinsRootName                    = excelReader.getCellData(xlSheetName, 772, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 772, 8, actBinsRootName);
 		
 	/*	ArrayList<String> actleftPannelList= new ArrayList<String>();
		
	 	 int count = leftPannelList.size();
		
		 System.err.println("count   :"+count);
		
		 for (int i=0;i<count;i++)
		 {
			String data=leftPannelList.get(i).getText();
			actleftPannelList.add(data);
		 }
		
		 String actleftPannelElements = actleftPannelList.toString();
	 	
		 String expleftPannelElements = excelReader.getCellData(xlSheetName, 773, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 773, 8, actleftPannelElements);
		
		 System.out.println("actleftPannelElements   : "+actleftPannelElements);
		
		 System.out.println("expleftPannelElements   : "+expleftPannelElements);	
 		*/
 		
        boolean DisplayResult=actBinsMasterRoot == expBinsMasterRoot /*&& actBinGroupOneMasterRoot==expBinGroupOneMasterRoot
 				                              && actBinGroupTwoMasterRoot==expBinGroupTwoMasterRoot*/
 				                              && actBinsRootName.equalsIgnoreCase(expBinsRootName);
        
        String actDisplayResult=Boolean.toString(DisplayResult);
        String expDisplayResult=excelReader.getCellData(xlSheetName, 774, 7);
 		
        excelReader.setCellData(xlfile, xlSheetName, 774, 8, actDisplayResult.toUpperCase());
 		
 		
 			
 		if (actDisplayResult.equalsIgnoreCase(expDisplayResult) /*&& actleftPannelElements.equalsIgnoreCase(expleftPannelElements)
 				&& actBinsRootName.equalsIgnoreCase(expBinsRootName)*/)
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 771, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 771, 9, resFail);
 			return false;
 		}
 	  }
 	  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 771, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
   }


  public static boolean checkCreateTreeToggleOptionsAvailableInBinsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 	 
 	 System.out.println("********************* checkCreateTreeToggleOptionsAvailableInBinsMastersPage Method Executes............ *******************************");
     
 	 try
	 {
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggleBtn)); 
		masterTreeIDToggleBtn.click();
		
		
		 ArrayList<String> actMasterIDListList= new ArrayList<String>();
			
			int count = mastertreeIdList.size();
			System.err.println("count   :"+count);
			
			for (int i=0;i<count;i++)
			{
				String data=mastertreeIdList.get(i).getText();
				actMasterIDListList.add(data);
			}
			
			String actMasterIDExpand = actMasterIDListList.toString();
			String expMasterIDExpand = excelReader.getCellData(xlSheetName, 776, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 776, 8, actMasterIDExpand);
			
			System.out.println("actMasterIDExpand   : "+actMasterIDExpand);
			System.out.println("expMasterIDExpand   : "+expMasterIDExpand);	
	 	    
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggle_setDefaultBtn));

	 		boolean actAccountMasterTreeCreateTreeBtn = masterTreeIDToggle_CreateTreeBtn.isDisplayed();
	 		boolean actAccountMasterTreeEditBtn       = masterTreeIDToggle_EditBtn.isDisplayed();
	 		boolean actAccountMasterTreeDeleteBtn     = masterTreeIDToggle_DeleteBtn.isDisplayed();
	 		boolean actAccountMasterTreeSetDefaultBtn = masterTreeIDToggle_setDefaultBtn.isDisplayed();

	 		boolean expAccountMasterTreeCreateTreeBtn = true;
	 		boolean expAccountMasterTreeEditBtn       = true;
	 		boolean expAccountMasterTreeDeleteBtn     = true;
	 		boolean expAccountMasterTreeSetDefaultBtn = true;

	 		System.out.println("Tree ID Dropdown Option Value Actual  : " + actAccountMasterTreeCreateTreeBtn+ " Value Expected : " + expAccountMasterTreeCreateTreeBtn);
	 		System.out.println("Tree ID Toggle Option Value Actual    : " + actAccountMasterTreeEditBtn+       " Value Expected : " + expAccountMasterTreeEditBtn);
	 		System.out.println("Tree View ID Option Value Actual      : " + actAccountMasterTreeDeleteBtn+     " Value Expected : " + expAccountMasterTreeDeleteBtn);
	 		System.out.println("Tree View ID Toggle Value Actual      : " + actAccountMasterTreeSetDefaultBtn+ " Value Expected : " + expAccountMasterTreeDeleteBtn);
	 		
	 		
	 		System.out.println("Master Item Tree ID       : " + actMasterIDExpand+ " Value Expected : " + expMasterIDExpand);
	 		 
	 		
	 		
	 		if ( actAccountMasterTreeCreateTreeBtn == expAccountMasterTreeCreateTreeBtn
	 				&& actAccountMasterTreeEditBtn == expAccountMasterTreeEditBtn
	 				&& actAccountMasterTreeDeleteBtn == expAccountMasterTreeDeleteBtn
	 				&& actAccountMasterTreeSetDefaultBtn==expAccountMasterTreeSetDefaultBtn && actMasterIDExpand.equalsIgnoreCase(expMasterIDExpand))
	 		{
	 			excelReader.setCellData(xlfile, xlSheetName, 775, 9, resPass);
	 			return true;
	 		} 
	 		else 
	 		{
	 			excelReader.setCellData(xlfile, xlSheetName, 775, 9, resFail);
	 			return false;
	 		}
	 	  }
	 	 catch (Exception e) 
		  {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 775, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		  }
  }
 	
  public static boolean checkCreateViewToggleOptionsAvailableBinsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("********************** checkCreateViewToggleOptionsAvailableBinsMastersPage Method Executes............***********************************");

 	try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIDToggleBtn));
		masterTreeViewIDToggleBtn.click();

 	   ArrayList<String> actMasterViewIDListList= new ArrayList<String>();
		
		int count = mastertreeViewIdList.size();
		System.err.println("count   :"+count);
		
		for (int i=0;i<count;i++)
		{
			String data=mastertreeViewIdList.get(i).getText();
			actMasterViewIDListList.add(data);
		}
		
		String actMasterViewIDExpand = actMasterViewIDListList.toString();
		String expMasterViewIDExpand = excelReader.getCellData(xlSheetName, 778, 7);
		
		System.out.println("actMasterViewIDExpand   : "+actMasterViewIDExpand);
		System.out.println("expMasterViewIDExpand   : "+expMasterViewIDExpand);	
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIdCreateViewBtn));

		boolean actAccountMasterTreeViewCreateViewBtn = masterTreeViewIdCreateViewBtn.isDisplayed();
		boolean actAccountMasterTreeViewEditViewBtn   = masterTreeeViewIdEditBtn.isDisplayed();
		boolean actAccountMasterTreeViewDeleteBtn     = masterTreeViewIdDeleteBtn.isDisplayed();

		boolean expAccountMasterTreeViewCreateViewBtn = true;
		boolean expAccountMasterTreeViewEditViewBtn   = true;
		boolean expAccountMasterTreeViewDeleteBtn     = true;

		System.out.println("Tree View Create View Option Value Actual : " + actAccountMasterTreeViewCreateViewBtn+ " Value Expected : " + expAccountMasterTreeViewCreateViewBtn);
		System.out.println("Tree View Edit View Option Value Actual   : " + actAccountMasterTreeViewEditViewBtn+   " Value Expected : " + expAccountMasterTreeViewEditViewBtn);
		System.out.println("Tree View Delete View Option Value Actual : " + actAccountMasterTreeViewDeleteBtn+     " Value Expected : " + expAccountMasterTreeViewDeleteBtn);

		excelReader.setCellData(xlfile, xlSheetName, 778, 8, actMasterViewIDExpand);
		
		if (actAccountMasterTreeViewCreateViewBtn == expAccountMasterTreeViewCreateViewBtn
				&& actAccountMasterTreeViewEditViewBtn == expAccountMasterTreeViewEditViewBtn
				&& actAccountMasterTreeViewDeleteBtn == expAccountMasterTreeViewDeleteBtn && 
				
				actMasterViewIDExpand.equalsIgnoreCase(expMasterViewIDExpand))
		{
			excelReader.setCellData(xlfile, xlSheetName, 777, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 777, 9, resPass);
			return false;
		}
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 777, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
 	
 	
  public static boolean checkHideUnitGroupOptionsAvailableInBinsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("********************* checkHideUnitGroupOptionsAvailableInBinsMastersPage Method Executes............*************************");

 	 try
 	 {
 	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
 	   masterOptionToHideAccountsGroupTree.click();
 	   
 	   boolean actSummaryErrorMessage    = checkErrorMessageIsDisplayingOrNotDisplaying();
 	   boolean expSummaryErrorMessage    = true;

 	   System.out.println("Click on Hide Units Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);  

 	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeUnitsDisplay));

 	   boolean actAccountMasterTreeUnits = treeUnitsDisplay.isDisplayed();
 	   boolean expAccountMasterTreeUnits = true;
 		
 	   System.out.println("Tree View Create View Option Value Actual : " + actAccountMasterTreeUnits+ " Value Expected : " + expAccountMasterTreeUnits);

 	   boolean actTestResult=actSummaryErrorMessage==actSummaryErrorMessage 
 			                  && actSummaryErrorMessage == expAccountMasterTreeUnits && masterOptionToHideAccountsGroupTree.isDisplayed()==true;
 	   
 	   String actValue = Boolean.toString(actTestResult);
 	   String expValue = excelReader.getCellData(xlSheetName, 779, 7);
 	   
 	   System.err.println(" Actual; Value : "+actValue +"  Value Expected : "+expValue);
 	  
 	   
 	  excelReader.setCellData(xlfile, xlSheetName, 779, 8, actValue);
 	  
 	   if (actValue.equalsIgnoreCase(expValue))
 	   {
 		    excelReader.setCellData(xlfile, xlSheetName, 779, 9, resPass);
 			return true;
 	   } 
 	   else 
 	   {
 		  excelReader.setCellData(xlfile, xlSheetName, 779, 9, resFail);
 			return false;
 	   }
 	 }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 779, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 	
 	
  public static boolean checkUnHideUnitsGroupOptionsAvailableInBinsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("********************** checkUnHideUnitsGroupOptionsAvailableInDepartmentMastersPage Method Executes............ ******************************");
    
 	 
 	 
 	 try
 	 {
 		  
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
	    masterOptionToHideAccountsGroupTree.click();
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));
	    
		boolean actUnitsMasterRoot                = accountRootAccount.isDisplayed();
		
		boolean expUnitsMasterRoot                = true;
		
		String actUnitRootName=accountRootAccount.getText();
		
		String expUnitRootName=excelReader.getCellData(xlSheetName, 781, 7);	

		System.out.println("Open Units Master Unit Root Is Display Value Actual  : " + actUnitsMasterRoot+ " Value Expected : " + expUnitsMasterRoot);
		System.out.println("Root Units Text Display Value Actual          : " + actUnitRootName+            " Value Expected : " + expUnitRootName);
			
		excelReader.setCellData(xlfile, xlSheetName, 781, 8, actUnitRootName);
		
		if (actUnitsMasterRoot == expUnitsMasterRoot
				&& actUnitRootName.equalsIgnoreCase(expUnitRootName))
		{
			 excelReader.setCellData(xlfile, xlSheetName, 780, 9, resPass);
			 return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 780, 9, resFail);
			return false;
		}
	  }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 780, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	   
 	 }
 	 

 	
 	
  public static boolean checkHeaderFieldsOptionsAvailableInBinsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("********************** checkHeaderFieldsOptionsAvailableInBinsMastersPage Method Executes............ **********************************");

 	 
 	 
	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));

 		
 		String actAccountMasterSearchGetText               = masterSearchTxt.getAttribute("placeholder");
 		
 		String expAccountMasterSearchGetText               = excelReader.getCellData(xlSheetName, 782, 7);
 		
 		
 		excelReader.setCellData(xlfile, xlSheetName, 782, 8, actAccountMasterSearchGetText);
 		
 		boolean actAccountMasterSearchBtn                  = masterSearchBtn.isDisplayed();
 		boolean actAccountMasterCmbMasterTxt               = mastercmbMasterTxt.isDisplayed();
 		boolean actAccountMasterCmbMasterExpansionBtn      = masterCmbMasterExpansionBtn.isDisplayed();
 		boolean actAccountMasterCmbMasterSettingsBtn       = masterCumMasterSettingBtn.isDisplayed();
 		boolean actAccountMasterRetainSelectionCheckbox    = masterRetainSelectionCheckBox.isDisplayed();
 		boolean actAccountMasterSideBarBtn                 = masterSideBarBtn.isDisplayed();
 		
 		ArrayList<String> actmasterItemSearchControlList= new ArrayList<String>();
 		
  		int count = masterItemSearchControlList.size();
  		System.err.println("count   :"+count);
  		
  		for (int i=0;i<count;i++)
  		{
  			String data=masterItemSearchControlList.get(i).getAttribute("title");
  			actmasterItemSearchControlList.add(data);
  		}
  		
  		String actControlList = actmasterItemSearchControlList.toString();
  		String expControlList = excelReader.getCellData(xlSheetName, 783, 7);
  		
  		System.out.println("actControlList   : "+actControlList);
  		System.out.println("expControlList   : "+expControlList);

  		excelReader.setCellData(xlfile, xlSheetName, 783, 8, actControlList);
  		
 		boolean expAccountMasterSearchBtn                  = true;
 		boolean expAccountMasterCmbMasterTxt               = true;
 		boolean expAccountMasterCmbMasterExpansionBtn      = true;
 		boolean expAccountMasterCmbMasterSettingsBtn       = true;
 		boolean expAccountMasterRetainSelectionCheckbox    = true;
 		boolean expAccountMasterSideBarBtn                 = true;

 		
 		System.out.println("Search Button Value Actual           : "+ actAccountMasterSearchBtn+                  " Value Expected : " + expAccountMasterSearchBtn);
 		System.out.println("Comb Box Value Actual                : "+ actAccountMasterCmbMasterTxt+               " Value Expected : " + expAccountMasterCmbMasterTxt);
 		System.out.println("Combo Box Expansion Value Actual     : "+ actAccountMasterCmbMasterExpansionBtn+      " Value Expected : " + expAccountMasterCmbMasterExpansionBtn);
 		System.out.println("Combo Box Settings Value Actual      : "+ actAccountMasterCmbMasterSettingsBtn+       " Value Expected : " + expAccountMasterCmbMasterSettingsBtn);
 		System.out.println("Selection Check Box Value Actual     : "+ actAccountMasterRetainSelectionCheckbox+    " Value Expected : " + expAccountMasterRetainSelectionCheckbox);
 		System.out.println("Side Bar Value Actual                : "+ actAccountMasterSideBarBtn+                 " Value Expected : " + expAccountMasterSideBarBtn);
 		
 		System.out.println("AccountMasterSearchGetText          : "+actAccountMasterSearchGetText +"  Value Expected  : "+expAccountMasterSearchGetText);
 		
 		boolean actTestResult= actAccountMasterSearchBtn == expAccountMasterSearchBtn
				 				&& actAccountMasterCmbMasterTxt == expAccountMasterCmbMasterTxt
				 				&& actAccountMasterCmbMasterExpansionBtn == expAccountMasterCmbMasterExpansionBtn
				 				&& actAccountMasterCmbMasterSettingsBtn == expAccountMasterCmbMasterSettingsBtn
		 						&& actAccountMasterRetainSelectionCheckbox == expAccountMasterRetainSelectionCheckbox
		 		 				&& actAccountMasterSideBarBtn == expAccountMasterSideBarBtn;
 		
 		String actDispalyResult=Boolean.toString(actTestResult);
 		String expDispalyResult=excelReader.getCellData(xlSheetName, 784, 7);	
 		
 		System.err.println("DispalyResult  "+actDispalyResult +" Value Expected : "+expDispalyResult);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 784, 8, actDispalyResult.toUpperCase());
 		
 		
 		if(actDispalyResult.equalsIgnoreCase(expDispalyResult) && actControlList.equalsIgnoreCase(expControlList) 
 				&& actAccountMasterSearchGetText.equalsIgnoreCase(expAccountMasterSearchGetText)) 
 		
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 782, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 782, 9, resFail);
 			return false;
 		}
 	 }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 782, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
 	 

 	
  public static boolean checkSearchOptionAvailableInBinsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  
 	 System.out.println("*************************** checkSearchOptionAvailableInBinsMastersPage Method Executes............ ********************************");
 	 
	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchBtn));
 		masterSearchBtn.click();

 		boolean actSummaryErrorMessage                      = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage                      = true;

 		System.out.println("Click on Search Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 		
        ArrayList<String> actmasterSearchList= new ArrayList<String>();
 		
  		int count = masterSearchList.size();
  		System.err.println("count   :"+count);
  		
  		for (int i=0;i<count;i++)
  		{
  			String data=masterSearchList.get(i).getText();
  			actmasterSearchList.add(data);
  		}
  		
  		String actSearchList = actmasterSearchList.toString();
  		String expSearchList = excelReader.getCellData(xlSheetName, 785, 7);
  		
  		System.out.println("actSearchList   : "+actSearchList);
  		System.out.println("expSearchList   : "+expSearchList);
 		
  		excelReader.setCellData(xlfile, xlSheetName, 785, 8, actSearchList);
  		
 		if (actSearchList.equalsIgnoreCase(expSearchList) && actSummaryErrorMessage==expSummaryErrorMessage)
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 785, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 785, 9, resFail);
 			return false;
 		}
 	 }
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 785, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 	 
 	 
 	
  public static boolean checkBinsMastersDisplayTableColumnNamesAvailableInBinstMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
 	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  		 
 	 System.out.println("************************* checkBinsMastersDisplayTableColumnNamesAvailableInBinstMastersPage Method Executes............ *************************");
 		
 	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGrid_Header_SelectTxt));
 		boolean actAccountMasterGridSelectTxt = masterGrid_Header_SelectTxt.isDisplayed();
 		masterGrid_Header_SelectTxt.click();

 		/*boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage  = true;

 		System.out.println("Click on Master Grid Header Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 		*/
 		
 		ArrayList<String> actmasterItemHeaderList=new ArrayList<String>();
 		
 		int HeaderCount =masterItemHeaderList.size();
 		
 		System.err.println("HeaderCount   :  "+HeaderCount);
 		
 		for (int i = 0; i < HeaderCount; i++) 
 		{
			String data=masterItemHeaderList.get(i).getText();
			actmasterItemHeaderList.add(data);
		}
 	
 		 String actMasterItemHeaderTextList=actmasterItemHeaderList.toString();
 		 String expMasterItemHeaderTextList=excelReader.getCellData(xlSheetName, 786, 7);
 		
 		
 		excelReader.setCellData(xlfile, xlSheetName, 786, 8, actMasterItemHeaderTextList);
 		
 		if (/*actSummaryErrorMessage==expSummaryErrorMessage &&*/ actMasterItemHeaderTextList.equalsIgnoreCase(expMasterItemHeaderTextList))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 786, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 786, 9, resFail);
 			return false;
 		}
 	 }
 	 catch (Exception e) 
 	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 786, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 	 
 	 
 	 

  public static boolean checkBinsMastersDisplayTableColumnValuesAvailableInBinsMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {
    excelReader=new ExcelReader(POJOUtility.getExcelPath());
    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 		  		 
    System.out.println("********************** checkBinsMastersDisplayTableColumnValuesAvailableInBinsMastersPage Method Executes............ **************************");
 	
    try
    {
    	
        ArrayList<String> actmasterDepNameList=new ArrayList<String>();
 		
 		int HeaderCount =masterDepNameList.size();
 		
 		System.err.println("HeaderCount   :  "+HeaderCount);
 		
 		for (int i = 0; i < HeaderCount; i++) 
 		{
 			String data=masterDepNameList.get(i).getText();
 			actmasterDepNameList.add(data);
 		}
 		
 	
 		 String actMasterDepNameTextList=actmasterDepNameList.toString();
 		 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 788, 7);
 		
 		 excelReader.setCellData(xlfile, xlSheetName, 788, 8, actMasterDepNameTextList);
    	
    	 System.err.println("  Actual MasterDepNameTextList : "+actMasterDepNameTextList);
    	 System.err.println("  Expected  MasterDepNameTextList : "+expMasterDepNameTextList);
    	
    	
        ArrayList<String> actmasterDepCodeList=new ArrayList<String>();
 		
 		int CodeList =masterDepCodeList.size();
 		
 		System.err.println("CodeList   :  "+CodeList);
 		
 		for (int i = 0; i < CodeList; i++) 
 		{
 			String data=masterDepCodeList.get(i).getText();
 			actmasterDepCodeList.add(data);
 		}
 		
 	
 		String actMasterDepCodeTextList=actmasterDepCodeList.toString();
 		String expMasterDepCodeTextList=excelReader.getCellData(xlSheetName, 789, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 789, 8, actMasterDepCodeTextList);
    	
    	System.err.println("  Actual MasterItemDepCodeTextList : "+actMasterDepCodeTextList);
    	System.err.println("  Expected  MasterDepCodeTextList : "+expMasterDepNameTextList);
    	
    	if(actMasterDepNameTextList.equalsIgnoreCase(expMasterDepNameTextList) && 
    			actMasterDepCodeTextList.equalsIgnoreCase(expMasterDepCodeTextList))
    	
 	 {
    		excelReader.setCellData(xlfile, xlSheetName, 787, 9, resPass);
 		return true;
 	 } 
 	 else 
 	 {
 		excelReader.setCellData(xlfile, xlSheetName, 787, 9, resFail);
 		return false;
 	 }
    }
    catch (Exception e) 
 	  {
 		  String exception =e.getMessage();
 		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 787, 10, exception);
 		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
 		  return false;
 	  }
  }
    
    
   
  
    @FindBy(xpath = "//a[contains(text(),'General')]")
	private static WebElement generalTabOpen;// Before Clicking

	@FindBy(xpath = "//input[@id='iCapacity']")
	private static WebElement capacityTxt;

	@FindBy(xpath = "//input[@id='fCurrentCapacity']")
	private static WebElement currentCapacityTxt;

	@FindBy(xpath = "//select[@id='iType']")
	private static WebElement typeDropdown;

	@FindBy(xpath = "//input[@id='iCategory']")
	private static WebElement categoryTxt;

	@FindBy(xpath = "//td[@id='iCategory_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement categorySettingBtn;

	@FindBy(xpath = "//input[@id='iDistance']")
	private static WebElement distanceTxt;

	@FindBy(xpath = "//*[@id='ibinLevel']")
	private static WebElement levelTxt;

	@FindBy(xpath = "//input[@id='iColNo']")
	private static WebElement colNoTxt;

	@FindBy(xpath = "//select[@id='iStorageType']")
	private static WebElement storageTypeDropdown;

	@FindBy(xpath = "//input[@id='bHold']")
	private static WebElement holdChkBox;

	@FindBy(xpath = "//input[@id='bDamaged']")
	private static WebElement damagedChkBox;

	@FindBy(xpath = "//textarea[@id='sRemarks']")
	private static WebElement remarksTxt;

	@FindBy(xpath = "//a[contains(text(),'Task Manager')]")
	private static WebElement taskManagerTab;

	@FindBy(xpath = "//input[@id='iEmployee1']")
	private static WebElement gridEmployeeTxt;

	@FindBy(xpath = "//select[@id='iPick1']")
	private static WebElement gridPickDropDown;

	@FindBy(xpath = "//select[@id='iPut1']")
	private static WebElement gridPutDropdown;

	@FindBy(xpath = "//a[contains(text(),'Dimension')]")
	private static WebElement dimensionTab;

	@FindBy(xpath = "//input[@id='fLength']")
	private static WebElement lengthTxt;

	@FindBy(xpath = "//input[@id='fWidth']")
	private static WebElement widthTxt;

	@FindBy(xpath = "//input[@id='fHeight']")
	private static WebElement heightTxt;

	@FindBy(xpath = "//input[@id='fCBM']")
	private static WebElement CBMTxt;

	@FindBy(xpath = "//input[@id='fCurrentLength']")
	private static WebElement currentLengthTxt;

	@FindBy(xpath = "//input[@id='fCurrentWidth']")
	private static WebElement currentWidthTxt;

	@FindBy(xpath = "//input[@id='fCurrentHeight']")
	private static WebElement currentHeightTxt;

	@FindBy(xpath = "//input[@id='FCurrentCBM']")
	private static WebElement currentCBMTxt;

	@FindBy(xpath = "//input[@id='fWeight']")
	private static WebElement weightTxt;

	@FindBy(xpath = "//select[@id='iType']")
	private static WebElement selectLevelTxt;
	
	@FindBy(xpath = "//input[@id='fMinimumCBM']")
	private static WebElement minimumCBMTxt;

	@FindBy(xpath = "//input[@id='fOccupiedWeight']")
	private static WebElement occupiedWeightTxt;

	@FindBy(xpath = "//input[@id='fOccupiedCBM']")
	private static WebElement occupiedCBMTxt;

	@FindBy(xpath = "//input[@id='bConsiderSize']")
	private static WebElement considerSizeChkBox;

	@FindBy(xpath = "//input[@id='bConsiderWeight']")
	private static WebElement considerWeightChkBox;

	@FindBy(xpath = "//select[@id='UnitType']")
	private static WebElement unitTypeDropdown;

	@FindBy(xpath = "//td[@class='text-center']")
	private static WebElement unitsInMainPageEmpty;

	
	
  public static boolean checkClickOnNewButtonInBinGroups() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("**************************************** checkClickOnNewButtonInBinsMasterPage  ***********************************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();
		
		boolean actClickOnNewBtnErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expClickOnNewBtnErrorMessage  = true;
 		
 		
        
 		ArrayList<String> actdepNewScreenBodyList=new ArrayList<String>();
		
		int BodyList =depNewScreenBodyList.size();
		
		System.err.println("BodyList   :  "+BodyList);
		
		for (int i = 0; i < BodyList; i++) 
		{
			String data=depNewScreenBodyList.get(i).getText();
			actdepNewScreenBodyList.add(data);
		}
		
	
		String actBinsNewScreenBodyText=actdepNewScreenBodyList.toString();
		String expBinsNewScreenBodyText=excelReader.getCellData(xlSheetName, 791, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 791, 8, actBinsNewScreenBodyText);
		
		System.out.println("actBinsNewScreenBodyText        :"+actBinsNewScreenBodyText);
		System.out.println("expBinsNewScreenBodyText        :"+expBinsNewScreenBodyText);
		
		
		ArrayList<String> actdepNewScreenHeaderList=new ArrayList<String>();
			
		int HeaderList =depNewScreenHeaderList.size();
		
		System.err.println("HeaderList   :  "+HeaderList);
		
		for (int i = 0; i < HeaderList; i++) 
		{
			String data=depNewScreenHeaderList.get(i).getText();
			actdepNewScreenHeaderList.add(data);
		}
		
	
		String actBinsNewScreenHeaderText=actdepNewScreenHeaderList.toString();
		String expBinsNewScreenHeaderText=excelReader.getCellData(xlSheetName, 792, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 792, 8, actBinsNewScreenHeaderText);

		System.out.println("actBinsNewScreenHeaderText        :"+actBinsNewScreenHeaderText);
		System.out.println("expBinsNewScreenHeaderText        :"+expBinsNewScreenHeaderText);
 		
 		
        System.out.println("Click On New Button Is Any Error Message Value Actual : " + actClickOnNewBtnErrorMessage + " Value Expected : " + expClickOnNewBtnErrorMessage);
 	
		boolean actMasterName                 = nameTxt.getText().isEmpty();
		boolean actMasterCode                 = codeTxt.getText().isEmpty();
		boolean actMasterCapacity             = capacityTxt.isDisplayed();
		boolean actMasterCurrentMaster        = currentCapacityTxt.isDisplayed();
		boolean actMasterType                 = typeDropdown.isDisplayed();

		Select binTypeDefaultValueSelected    = new Select(typeDropdown);
		String actBinTypeDefaultSelectedValue = binTypeDefaultValueSelected.getFirstSelectedOption().getText();

		boolean actMasterCategory             = categoryTxt.isDisplayed();
		boolean actMasterCategorySettings     = categorySettingBtn.isDisplayed();
		boolean actMasterDistance             = distanceTxt.isDisplayed();
		boolean actMasterColumn               = colNoTxt.isDisplayed();                 
		boolean actMasterRemarks              = remarksTxt.isDisplayed();
		boolean actMasterLevel                = levelTxt.isDisplayed();

		boolean actMasterSaveBtn              = saveBtn.isDisplayed();
		boolean actMasterCloseBtn             = closeBtn.isDisplayed();

		boolean expMasterName                 = true;
		boolean expMasterCode                 = true;
		boolean expMasterCapacity             = true;
		boolean expMasterCurrentCapacity      = true;
		boolean expMasterType                 = true;
		String expBinTypeDefaultSelectedValue = excelReader.getCellData(xlSheetName, 793, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 793, 8, expBinTypeDefaultSelectedValue);
		
		boolean expMasterCategory             = true;
		boolean expMasterCategorySettings     = true;
		boolean expMasterDistance             = true;
		boolean expMasterLevel                = true;
		boolean expMasterColumn               = true;
		
		boolean expMasterSaveBtn              = true;
		boolean expMasterCloseBtn             = true;

		System.out.println("************************************************** FieldsInGeneralDisplayAfterCreationNewBins  **********************************************************************");

		System.out.println("Name Value Actual                       : " + actMasterName +                 "  Value Expected : " + expMasterName);
		System.out.println("Code Value Actual                       : " + actMasterCode +                 "  Value Expected : " + expMasterCode);
		System.out.println("Capacity Value Actual                   : " + actMasterCapacity+              "  Value Expected : " + expMasterCapacity);
		System.out.println("Current Capacity Value Actual           : " + actMasterCurrentMaster+         "  Value Expected : " + expMasterCurrentCapacity);
		
		System.out.println("Type Value Actual                       : " + actMasterType +                 "  Value Expected : " + expMasterType);
		System.out.println("Type Default Value Actual               : " + actBinTypeDefaultSelectedValue+ "  Value Expected : " + expBinTypeDefaultSelectedValue);
		System.out.println("Category Value Actual                   : " + actMasterCategory+              "  Value Expected : " + expMasterCategory);
		System.out.println("Cateogry Settings Value Actual          : " + actMasterCategorySettings+      "  Value Expected : " + expMasterCategorySettings);
		System.out.println("Distance Value Actual                   : " + actMasterDistance+              "  Value Expected : " + expMasterDistance);
		System.out.println("Remarks Value Actual                    : " + actMasterRemarks+               "  Value Expected : " + actMasterRemarks);
		System.out.println("Level Value Actual                      : " + actMasterLevel +                "  Value Expected : " + expMasterLevel);
		System.out.println("Columnn Value Actual                    : " + actMasterColumn +               "  Value Expected : " + expMasterColumn);
		
		System.out.println("Save Button Value Actual                : " + actMasterSaveBtn+               "  Value Expected : " + expMasterSaveBtn);
		System.out.println("Close Button Value Actual               : " + actMasterCloseBtn+              "  Value Expected : " + expMasterCloseBtn);

		
		boolean DispalyResult=actClickOnNewBtnErrorMessage==actClickOnNewBtnErrorMessage && actMasterName == expMasterName 
								&& actMasterCode == expMasterCode && actMasterCapacity == expMasterCapacity 
								&& actMasterType == expMasterType && actBinTypeDefaultSelectedValue.equalsIgnoreCase(expBinTypeDefaultSelectedValue)
								&& actMasterCategory == expMasterCategory && actMasterCategorySettings == expMasterCategorySettings
								&& actMasterDistance == expMasterDistance && actMasterLevel == expMasterLevel
								&& actMasterColumn == expMasterColumn && actMasterSaveBtn == expMasterSaveBtn 
								&& actMasterCloseBtn == expMasterCloseBtn;
		
		String actDisplayResult=Boolean.toString(DispalyResult);
		String expDisplayResult=excelReader.getCellData(xlSheetName, 794, 7);
		
        excelReader.setCellData(xlfile, xlSheetName, 794, 8, actDisplayResult.toUpperCase());
		
		if (actDisplayResult.equalsIgnoreCase(expDisplayResult) && actBinsNewScreenHeaderText.equalsIgnoreCase(expBinsNewScreenHeaderText)&& 
				actBinsNewScreenBodyText.equalsIgnoreCase(expBinsNewScreenBodyText)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 790, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 790, 9, resFail);
			return false;
		}
	}
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 790, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
  
 
  public static boolean checkSaveBinCreation() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************************ checkSaveButtonInBinsGroupCreationPage  **********************************************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 796, 6));
		
		getAction().moveToElement(nameTxt).sendKeys(Keys.TAB).perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 797, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(capacityTxt));
		capacityTxt.click();
		capacityTxt.clear();
		capacityTxt.sendKeys(excelReader.getCellData(xlSheetName, 798, 6));
		capacityTxt.sendKeys(Keys.TAB);
		Thread.sleep(4000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		
        String expMasterSaveMessage = excelReader.getCellData(xlSheetName, 799, 7);
		
		//excelReader.setCellData(xlfile, xlSheetName, 799, 8, expMasterSaveMessage);
		
		boolean MasterSave = checkValidationMessageboolean(expMasterSaveMessage);
		
		
		String actMasterSave= Boolean.toString(MasterSave);
		String expMasterSave=excelReader.getCellData(xlSheetName, 800, 7);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(capacityTxt));
	
		boolean actMasterName                 = nameTxt.getText().isEmpty();
		boolean actMasterCode                 = codeTxt.getText().isEmpty();
		boolean actMasterCapacity             = capacityTxt.isDisplayed();
		boolean actMasterCurrentMaster        = currentCapacityTxt.isDisplayed();
		boolean actMasterType                 = typeDropdown.isDisplayed();

		Select binTypeDefaultValueSelected    = new Select(typeDropdown);
		String actBinTypeDefaultSelectedValue = binTypeDefaultValueSelected.getFirstSelectedOption().getText();

		boolean actMasterCategory             = categoryTxt.isDisplayed();
		boolean actMasterCategorySettings     = categorySettingBtn.isDisplayed();
		boolean actMasterDistance             = distanceTxt.isDisplayed();
		boolean actMasterColumn               = colNoTxt.isDisplayed();                 
		boolean actMasterRemarks              = remarksTxt.isDisplayed();
		boolean actMasterLevel                = levelTxt.isDisplayed();

		boolean actMasterSaveBtn              = saveBtn.isDisplayed();
		boolean actMasterCloseBtn             = closeBtn.isDisplayed();

		boolean expMasterName                 = true;
		boolean expMasterCode                 = true;
		boolean expMasterCapacity             = true;
		boolean expMasterCurrentCapacity      = true;
		boolean expMasterType                 = true;
		String expBinTypeDefaultSelectedValue = excelReader.getCellData(xlSheetName, 801, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 801, 8, actBinTypeDefaultSelectedValue);
		
		boolean expMasterCategory             = true;
		boolean expMasterCategorySettings     = true;
		boolean expMasterDistance             = true;
		boolean expMasterLevel                = true;
		boolean expMasterColumn               = true;
		
		boolean expMasterSaveBtn              = true;
		boolean expMasterCloseBtn             = true;
		
		System.out.println("************************************************** FieldsInGeneralDisplayAfterCreationNewBins  **********************************************************************");

		System.out.println("Name Value Actual                       : " + actMasterName +                 "  Value Expected : " + expMasterName);
		System.out.println("Code Value Actual                       : " + actMasterCode +                 "  Value Expected : " + expMasterCode);
		System.out.println("Capacity Value Actual                   : " + actMasterCapacity+              "  Value Expected : " + expMasterCapacity);
		System.out.println("Current Capacity Value Actual           : " + actMasterCurrentMaster+         "  Value Expected : " + expMasterCurrentCapacity);
		
		System.out.println("Type Value Actual                       : " + actMasterType +                 "  Value Expected : " + expMasterType);
		System.out.println("Type Default Value Actual               : " + actBinTypeDefaultSelectedValue+ "  Value Expected : " + expBinTypeDefaultSelectedValue);
		System.out.println("Category Value Actual                   : " + actMasterCategory+              "  Value Expected : " + expMasterCategory);
		System.out.println("Cateogry Settings Value Actual          : " + actMasterCategorySettings+      "  Value Expected : " + expMasterCategorySettings);
		System.out.println("Distance Value Actual                   : " + actMasterDistance+              "  Value Expected : " + expMasterDistance);
		System.out.println("Remarks Value Actual                    : " + actMasterRemarks+               "  Value Expected : " + actMasterRemarks);
		System.out.println("Level Value Actual                      : " + actMasterLevel +                "  Value Expected : " + expMasterLevel);
		System.out.println("Columnn Value Actual                    : " + actMasterColumn +               "  Value Expected : " + expMasterColumn);
		
		System.out.println("Save Button Value Actual                : " + actMasterSaveBtn+               "  Value Expected : " + expMasterSaveBtn);
		System.out.println("Close Button Value Actual               : " + actMasterCloseBtn+              "  Value Expected : " + expMasterCloseBtn);

		
		
		boolean DispalyResult= actMasterSave.equalsIgnoreCase(expMasterSave) && actMasterName == expMasterName && actMasterCode == expMasterCode
								&& actMasterCapacity == expMasterCapacity && actMasterType == expMasterType
								&& actBinTypeDefaultSelectedValue.equalsIgnoreCase(expBinTypeDefaultSelectedValue)
								&& actMasterCategory == expMasterCategory && actMasterCategorySettings == expMasterCategorySettings
								&& actMasterDistance == expMasterDistance && actMasterLevel == expMasterLevel
								&& actMasterColumn == expMasterColumn
								&& actMasterSaveBtn == expMasterSaveBtn && actMasterCloseBtn == expMasterCloseBtn ;
						
		String actDisaplayResult=Boolean.toString(DispalyResult);
		String expDisaplayResult=excelReader.getCellData(xlSheetName, 802, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 802, 8, actDisaplayResult.toUpperCase());
		
		if (actDisaplayResult.equalsIgnoreCase(expDisaplayResult)&& actMasterSave.equalsIgnoreCase(expMasterSave)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 795, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 795, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 795, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

	
  public static boolean checkCloseButtonBinsCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkCloseButtonInBinGroupCreationPage ******************************************");
    
	try
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		boolean actClickOnCloseBtnErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expClickOnCloseBtnErrorMessage  = true;

 		System.out.println("Click On Close Button Is Error Message Value Actual : " + actClickOnCloseBtnErrorMessage + " Value Expected : " + expClickOnCloseBtnErrorMessage);

        ArrayList<String> actmasterDepNameList=new ArrayList<String>();
 		
 		int HeaderCount =masterDepNameList.size();
 		
 		System.err.println("HeaderCount   :  "+HeaderCount);
 		
 		for (int i = 0; i < HeaderCount; i++) 
 		{
 			String data=masterDepNameList.get(i).getText();
 			actmasterDepNameList.add(data);
 		}
 		
 	
 		 String actMasterDepNameTextList=actmasterDepNameList.toString();
 		 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 804, 7);
 		
 		 excelReader.setCellData(xlfile, xlSheetName, 804, 8, actMasterDepNameTextList);
    	
    	 System.err.println("  Actual MasterDepNameTextList : "+actMasterDepNameTextList);
    	 System.err.println("  Expected  MasterDepNameTextList : "+expMasterDepNameTextList);

		if (actClickOnCloseBtnErrorMessage == expClickOnCloseBtnErrorMessage && 
				actMasterDepNameTextList.equalsIgnoreCase(expMasterDepNameTextList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 803, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 803, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 803, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

	@FindBy(xpath="//tr[5]//td[8]//div[1]//label[1]//input[1]")
	private static WebElement unitFifthCheckBox;
	
  public static boolean checkEditOptionForNewlyCreateBins() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************************** checkEditOptionForNewlyCreateBins *******************************************************");
	try
	{

	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
	  unitFirstCheckBox.click();
		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFifthCheckBox));
		unitFifthCheckBox.click();*/

	  boolean actClickOnCheckBoxErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 	  boolean expClickOnCheckBoxErrorMessage  = true;

 	  System.out.println("Check Check Box Is Any Error Message Value Actual : " + actClickOnCheckBoxErrorMessage + " Value Expected : " + expClickOnCheckBoxErrorMessage);
 		
	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
	  masterEditBtn.click();

	  boolean actClickOnEditBtnErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 	  boolean expClickOnEditBtnErrorMessage  = true;
 	  	
      System.out.println("Click On Edit Button Is Any Error Message Value Actual : " + actClickOnEditBtnErrorMessage + " Value Expected : " + expClickOnEditBtnErrorMessage);
 	
      String actMasterName                  = nameTxt.getAttribute("value");
	  String actMasterCode                  = codeTxt.getAttribute("value");
	  String actMasterCapacity              = capacityTxt.getAttribute("value");
	  String actMasterCurrentMaster         = currentCapacityTxt.getAttribute("value");
	  boolean actMasterType                 = typeDropdown.isDisplayed();

	  Select binTypeDefaultValueSelected    = new Select(typeDropdown);
	  String actBinTypeDefaultSelectedValue = binTypeDefaultValueSelected.getFirstSelectedOption().getText();  
	 
	  boolean actMasterCategory             = categoryTxt.isDisplayed();
	  boolean actMasterCategorySettings     = categorySettingBtn.isDisplayed();
      boolean actMasterDistance             = distanceTxt.isDisplayed();
	  boolean actMasterLevel                = levelTxt.isDisplayed();

	  boolean actMasterColumn               = colNoTxt.isDisplayed();
	  boolean actMasterRemarks              = remarksTxt.isDisplayed();

	  boolean actMasterSaveBtn              = saveBtn.isDisplayed();
	  boolean actMasterCloseBtn             = closeBtn.isDisplayed();
     
	  excelReader.setCellData(xlfile, xlSheetName, 806, 8, actMasterName);
	  excelReader.setCellData(xlfile, xlSheetName, 807, 8, actMasterCode);
	  excelReader.setCellData(xlfile, xlSheetName, 808, 8, actMasterCapacity);
	  excelReader.setCellData(xlfile, xlSheetName, 809, 8, actBinTypeDefaultSelectedValue);
	  excelReader.setCellData(xlfile, xlSheetName, 810, 8, actMasterCurrentMaster);
	  
	  String expMasterName                  = excelReader.getCellData(xlSheetName, 806, 7);
	  String expMasterCode                  = excelReader.getCellData(xlSheetName, 807, 7);
	  String expMasterCapacity              = excelReader.getCellData(xlSheetName, 808, 7);
	  boolean expMasterType                 = true;
	  String expBinTypeDefaultSelectedValue = excelReader.getCellData(xlSheetName, 809, 7);
	  String expMasterCurrentCapacity       = excelReader.getCellData(xlSheetName, 810, 7);
	  boolean expMasterCategory             = true;
	  boolean expMasterCategorySettings     = true;
	  boolean expMasterDistance             = true;
	  boolean expMasterLevel                = true;
	  boolean expMasterColumn               = true;
	  boolean expMasterRemarks              = true;
	  boolean expMasterStorageType          = true;
	  boolean expMasterSaveBtn              = true;
	  boolean expMasterCloseBtn             = true;

	  System.out.println("****************************************** FieldsInGeneralDisplayAfterCreationNewBins  **********************************************");
	  
	  System.out.println("Name Value Actual                       : " + actMasterName +                 "  Value Expected : " + expMasterName);
	  System.out.println("Code Value Actual                       : " + actMasterCode +                 "  Value Expected : " + expMasterCode);
	  System.out.println("Capacity Value Actual                   : " + actMasterCapacity+              "  Value Expected : " + expMasterCapacity);
	  System.out.println("Current Capacity Value Actual           : " + actMasterCurrentMaster+         "  Value Expected : " + expMasterCurrentCapacity);
	  
	  System.out.println("Type Value Actual                       : " + actMasterType +                 "  Value Expected : " + expMasterType);
	  System.out.println("Type Default Value Actual               : " + actBinTypeDefaultSelectedValue+ "  Value Expected : " + expBinTypeDefaultSelectedValue);
	  System.out.println("Category Value Actual                   : " + actMasterCategory+              "  Value Expected : " + expMasterCategory);
	  System.out.println("Cateogry Settings Value Actual          : " + actMasterCategorySettings+      "  Value Expected : " + expMasterCategorySettings);
	  System.out.println("Distance Value Actual                   : " + actMasterDistance+              "  Value Expected : " + expMasterDistance);
	  System.out.println("Remarks Value Actual                    : " + actMasterRemarks+               "  Value Expected : " + actMasterRemarks);
	  System.out.println("Level Value Actual                      : " + actMasterLevel +                "  Value Expected : " + expMasterLevel);
	  System.out.println("Columnn Value Actual                    : " + actMasterColumn +               "  Value Expected : " + expMasterColumn);
	
	  System.out.println("Save Button Value Actual                : " + actMasterSaveBtn+               "  Value Expected : " + expMasterSaveBtn);
	  System.out.println("Close Button Value Actual               : " + actMasterCloseBtn+              "  Value Expected : " + expMasterCloseBtn);

	  
	  boolean DisplayResult=actClickOnCheckBoxErrorMessage==expClickOnCheckBoxErrorMessage && actClickOnEditBtnErrorMessage==expClickOnEditBtnErrorMessage 
										&& actMasterName.equalsIgnoreCase(expMasterName) && actMasterCode.equalsIgnoreCase(expMasterCode) 
										&& actMasterCapacity.equalsIgnoreCase(expMasterCapacity) && actMasterCurrentMaster.equalsIgnoreCase(expMasterCurrentCapacity)
										&& actMasterType == expMasterType && actBinTypeDefaultSelectedValue.equalsIgnoreCase(expBinTypeDefaultSelectedValue) 
										&& actMasterCategory == expMasterCategory  && actMasterCategorySettings == expMasterCategorySettings 
										&& actMasterDistance == expMasterDistance && actMasterLevel == expMasterLevel 
										&& actMasterColumn == expMasterColumn && actMasterSaveBtn == expMasterSaveBtn 
										&& actMasterCloseBtn == expMasterCloseBtn;
	  
	  
	  String actDisplayResult=Boolean.toString(DisplayResult);
	  String expDisplayResult=excelReader.getCellData(xlSheetName, 811, 7);
	  
	  excelReader.setCellData(xlfile, xlSheetName, 811, 8, actDisplayResult.toUpperCase());
	  
	  if (actDisplayResult.equalsIgnoreCase(expDisplayResult)) 
	  {
		  excelReader.setCellData(xlfile, xlSheetName, 805, 9, resPass);
		return true;
	  } 
	  else 
	  {
		  excelReader.setCellData(xlfile, xlSheetName, 805, 9, resFail);
		return false;
	  }
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 805, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
  
	
 public static boolean checkSaveByUpdatingNameCodeTypeInBinsCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
   excelReader = new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

   System.out.println("**************************************** checkSaveByUpdatingNameCodeTypeInBinsCreationPage *******************************************");
   
   try
   {
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
	 nameTxt.click();
	 nameTxt.clear();
	 nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 813, 6));

	 getAction().moveToElement(nameTxt).sendKeys(Keys.TAB).perform();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
	 codeTxt.click();
	 codeTxt.clear();
	 codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 814, 6));

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(capacityTxt));
	 capacityTxt.click();
	 capacityTxt.clear();
	 capacityTxt.sendKeys(excelReader.getCellData(xlSheetName, 815, 6));
	 Thread.sleep(2000);
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
	 nameTxt.click();

	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	 saveBtn.click();

	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

	 
	 String expMasterSaveMessage = excelReader.getCellData(xlSheetName, 816, 7);
		
	 excelReader.setCellData(xlfile, xlSheetName, 816, 8, expMasterSaveMessage);
			
	 boolean MasterSave = checkValidationMessageboolean(expMasterSaveMessage);
			
			
	 String actMasterSave= Boolean.toString(MasterSave);
	 String expMasterSave=excelReader.getCellData(xlSheetName, 817, 7);
			
	 excelReader.setCellData(xlfile, xlSheetName, 817, 8, actMasterSave);
	 
	 System.out.println(" Saving Message : "+actMasterSave +" Value Expected : "+expMasterSave);
	
	 ArrayList<String> actmasterDepNameList=new ArrayList<String>();
		
	 int HeaderCount =masterDepNameList.size();
		
	 System.err.println("HeaderCount   :  "+HeaderCount);
		
	 for (int i = 0; i < HeaderCount; i++) 
	 {
		String data=masterDepNameList.get(i).getText();
		actmasterDepNameList.add(data);
	 }
	
	 String actMasterDepNameTextList=actmasterDepNameList.toString();
	 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 818, 7);
		
	 excelReader.setCellData(xlfile, xlSheetName, 818, 8, actMasterDepNameTextList);
	
	 System.err.println("  Actual MasterDepNameTextList : "+actMasterDepNameTextList);
	 System.err.println("  Expected  MasterDepNameTextList : "+expMasterDepNameTextList);

	 if (actMasterSave.equalsIgnoreCase(expMasterSave) && actMasterDepNameTextList.equals(expMasterDepNameTextList))
			
	 {
		 excelReader.setCellData(xlfile, xlSheetName, 812, 9, resPass);
		return true;
	 }
	 else 
	 {
		 excelReader.setCellData(xlfile, xlSheetName, 812, 9, resFail);
		return false;
	 }
   }
   catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 812, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }



 public static boolean checkEditOptionForNewlyUpdateBins() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************************** checkEditOptionForNewlyCreateAddGroupBins *******************************************************");
	
	try
	{
	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
	  unitFirstCheckBox.click();

	  boolean actClickOnCheckBoxErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
	  boolean expClickOnCheckBoxErrorMessage  = true;

	  System.out.println("Check Check Box Is Any Error Message Value Actual : " + actClickOnCheckBoxErrorMessage + " Value Expected : " + expClickOnCheckBoxErrorMessage);
		
	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
	  masterEditBtn.click();

	  boolean actClickOnEditBtnErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
	  boolean expClickOnEditBtnErrorMessage  = true;
	  	
      System.out.println("Click On Edit Button Is Any Error Message Value Actual : " + actClickOnEditBtnErrorMessage + " Value Expected : " + expClickOnEditBtnErrorMessage);
	
      String actMasterName                  = nameTxt.getAttribute("value");
	  String actMasterCode                  = codeTxt.getAttribute("value");
	  String actMasterCapacity              = capacityTxt.getAttribute("value");
	  String actMasterCurrentMaster         = currentCapacityTxt.getAttribute("value");
	  boolean actMasterType                 = typeDropdown.isDisplayed();

	  Select binTypeDefaultValueSelected    = new Select(typeDropdown);
	  String actBinTypeDefaultSelectedValue = binTypeDefaultValueSelected.getFirstSelectedOption().getText();  
	 

      excelReader.setCellData(xlfile, xlSheetName, 820, 8, actMasterName);
      excelReader.setCellData(xlfile, xlSheetName, 821, 8, actMasterCode);      
      excelReader.setCellData(xlfile, xlSheetName, 822, 8, actMasterCapacity);
      excelReader.setCellData(xlfile, xlSheetName, 823, 8, actBinTypeDefaultSelectedValue);
      
	  boolean actMasterCategory             = categoryTxt.isDisplayed();
	  boolean actMasterCategorySettings     = categorySettingBtn.isDisplayed();
      boolean actMasterDistance             = distanceTxt.isDisplayed();
	  boolean actMasterLevel                = levelTxt.isDisplayed();


	  boolean actMasterColumn               = colNoTxt.isDisplayed();
	  boolean actMasterRemarks              = remarksTxt.isDisplayed();

	  boolean actMasterSaveBtn              = saveBtn.isDisplayed();
	  boolean actMasterCloseBtn             = closeBtn.isDisplayed();
     
    
	  String expMasterName                  = excelReader.getCellData(xlSheetName, 820, 7);
	  String expMasterCode                  = excelReader.getCellData(xlSheetName, 821, 7);
	  String expMasterCapacity              = excelReader.getCellData(xlSheetName, 822, 7);
	  boolean expMasterType                 = true;
	  String expBinTypeDefaultSelectedValue = excelReader.getCellData(xlSheetName, 823, 7);
	  boolean expMasterCurrentCapacity      = true;
	  boolean expMasterCategory             = true;
	  boolean expMasterCategorySettings     = true;
	  boolean expMasterDistance             = true;
	  boolean expMasterLevel                = true;
	  boolean expMasterColumn               = true;
	  boolean expMasterRemarks              = true;
	  boolean expMasterStorageType          = true;
	  boolean expMasterSaveBtn              = true;
	  boolean expMasterCloseBtn             = true;

	  System.out.println("****************************************** FieldsInGeneralDisplayAfterCreationNewBins  **********************************************");
	  
	  System.out.println("Name Value Actual                       : " + actMasterName +                 "  Value Expected : " + expMasterName);
	  System.out.println("Code Value Actual                       : " + actMasterCode +                 "  Value Expected : " + expMasterCode);
	  System.out.println("Capacity Value Actual                   : " + actMasterCapacity+              "  Value Expected : " + expMasterCapacity);
	  System.out.println("Current Capacity Value Actual           : " + actMasterCurrentMaster+         "  Value Expected : " + expMasterCurrentCapacity);
	  
	  System.out.println("Type Value Actual                       : " + actMasterType +                 "  Value Expected : " + expMasterType);
	  System.out.println("Type Default Value Actual               : " + actBinTypeDefaultSelectedValue+ "  Value Expected : " + expBinTypeDefaultSelectedValue);
	  System.out.println("Category Value Actual                   : " + actMasterCategory+              "  Value Expected : " + expMasterCategory);
	  System.out.println("Cateogry Settings Value Actual          : " + actMasterCategorySettings+      "  Value Expected : " + expMasterCategorySettings);
	  System.out.println("Distance Value Actual                   : " + actMasterDistance+              "  Value Expected : " + expMasterDistance);
	  System.out.println("Remarks Value Actual                    : " + actMasterRemarks+               "  Value Expected : " + actMasterRemarks);
	  System.out.println("Level Value Actual                      : " + actMasterLevel +                "  Value Expected : " + expMasterLevel);
	  System.out.println("Columnn Value Actual                    : " + actMasterColumn +               "  Value Expected : " + expMasterColumn);
	
	  System.out.println("Save Button Value Actual                : " + actMasterSaveBtn+               "  Value Expected : " + expMasterSaveBtn);
	  System.out.println("Close Button Value Actual               : " + actMasterCloseBtn+              "  Value Expected : " + expMasterCloseBtn);

	  if (actClickOnCheckBoxErrorMessage==expClickOnCheckBoxErrorMessage && actClickOnEditBtnErrorMessage==expClickOnEditBtnErrorMessage 
			&& actMasterName.equalsIgnoreCase(expMasterName) && actMasterCode.equalsIgnoreCase(expMasterCode)
			&& actMasterCapacity.equalsIgnoreCase(expMasterCapacity) && actMasterType == expMasterType
			&& actBinTypeDefaultSelectedValue.equalsIgnoreCase(expBinTypeDefaultSelectedValue) && actMasterCategory == expMasterCategory 
			&& actMasterCategorySettings == expMasterCategorySettings && actMasterDistance == expMasterDistance 
			&& actMasterLevel == expMasterLevel && actMasterColumn == expMasterColumn 
			&& actMasterSaveBtn == expMasterSaveBtn && actMasterCloseBtn == expMasterCloseBtn) 
	  {
		  excelReader.setCellData(xlfile, xlSheetName, 819, 9, resPass);
		return true;
	  } 
	  else 
	  {
		  excelReader.setCellData(xlfile, xlSheetName, 819, 9, resFail);
		return false;
	  }
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 819, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
 
	
 
 public static boolean checkCloseButtonBinsUpdateCheck() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("******************************************* checkCloseButtonBinsUpdateCheck **************************************************");

	try
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloseBtn));
		editcloseBtn.click();
	
		boolean actClickOnCloseBtnErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expClickOnCloseBtnErrorMessage  = true;
		  	
	    System.out.println("Click On Edit Button Is Any Error Message Value Actual : " + actClickOnCloseBtnErrorMessage + " Value Expected : " + expClickOnCloseBtnErrorMessage);
			
	    
	    ArrayList<String> actmasterDepNameList=new ArrayList<String>();
		
		 int HeaderCount =masterDepNameList.size();
			
		 System.err.println("HeaderCount   :  "+HeaderCount);
			
		 for (int i = 0; i < HeaderCount; i++) 
		 {
			String data=masterDepNameList.get(i).getText();
			actmasterDepNameList.add(data);
		 }
		
		 String actMasterDepNameTextList=actmasterDepNameList.toString();
		 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 825, 7);
			
		 excelReader.setCellData(xlfile, xlSheetName, 825, 8, actMasterDepNameTextList);
		
		 System.err.println("  Actual MasterDepNameTextList : "+actMasterDepNameTextList);
		 System.err.println("  Expected  MasterDepNameTextList : "+expMasterDepNameTextList);
	
		if (actClickOnCloseBtnErrorMessage == expClickOnCloseBtnErrorMessage
				&& actMasterDepNameTextList.equalsIgnoreCase(expMasterDepNameTextList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 824, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 824, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 824, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }

 public static boolean checkUnCheckingSelectBinsAndCheckUnSelectBins() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************************** checkUnCheckingSelectBinsAndCheckUnSelectBins *******************************************************");
		
	try
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
		unitFirstCheckBox.click();

		 boolean UnCheckErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		
		 String actUnCheckErrorMessage=Boolean.toString(UnCheckErrorMessage);
		 String expUnCheckErrorMessage=excelReader.getCellData(xlSheetName, 827, 7);
		
		
	    System.out.println("Click On Edit Button Is Any Error Message Value Actual : " + actUnCheckErrorMessage + " Value Expected : " + expUnCheckErrorMessage);
		
		boolean ServerErrorMessage  = checkServerErrorMessageIsNotDisplay();
 		
 		String actServerErrorMessage=Boolean.toString(ServerErrorMessage);
 		String expServerErrorMessage=excelReader.getCellData(xlSheetName, 828, 7);
 		
 		
 		System.out.println("Un Checking Bins Error Message                         : " + actServerErrorMessage +   " Value Expected : " +  expServerErrorMessage);
		
		if (actUnCheckErrorMessage .equalsIgnoreCase(expUnCheckErrorMessage)
				&& actServerErrorMessage .equalsIgnoreCase( expServerErrorMessage)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 826, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 826, 9, resFail);
			return false;
		}
	}
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 826, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 
 
 

 public static boolean checkDeleteBinsOptionForBinsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************************** chekDeleteBinsOptionForBinsMasterPage *******************************************************");
	
	try
	{
		if(unitFirstCheckBox.isSelected())
		{
			System.out.println("Check Box is Selected");
		}
		else
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
			unitFirstCheckBox.click();
		
		}
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
		masterDeleteBtn.click();		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
		System.out.println(getMsgOnDelete.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
		clickOnOkInDelete.click();

		
        String expSaveMessage = excelReader.getCellData(xlSheetName, 830, 7);
		
        //excelReader.setCellData(xlfile, xlSheetName, 830, 8, expSaveMessage);
        
		boolean ValidationConfirmationMessageOnDelete = checkValidationMessageboolean(expSaveMessage);
		
		
		String actValidationConfirmationMessageOnDelete=Boolean.toString(ValidationConfirmationMessageOnDelete);
	    String expValidationConfirmationMessageOnDelete = excelReader.getCellData(xlSheetName, 831, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 831, 8, actValidationConfirmationMessageOnDelete.toUpperCase());
		 	 
		 ArrayList<String> actmasterDepNameList=new ArrayList<String>();
			
		 int HeaderCount =masterDepNameList.size();
			
		 System.err.println("HeaderCount   :  "+HeaderCount);
			
		 for (int i = 0; i < HeaderCount; i++) 
		 {
			String data=masterDepNameList.get(i).getText();
			actmasterDepNameList.add(data);
		 }
		
		 String actMasterDepNameTextList=actmasterDepNameList.toString();
		 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 832, 7);
			
		 excelReader.setCellData(xlfile, xlSheetName, 832, 8, actMasterDepNameTextList);
		
		 System.err.println("  Actual MasterDepNameTextList : "+actMasterDepNameTextList);
		 System.err.println("  Expected  MasterDepNameTextList : "+expMasterDepNameTextList);

		if (actValidationConfirmationMessageOnDelete.equalsIgnoreCase(expValidationConfirmationMessageOnDelete)
				&& actMasterDepNameTextList.equalsIgnoreCase(expMasterDepNameTextList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 829, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 829, 9, resFail);
			return false;
		}
	}

	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 829, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
   }
 
 
 public static boolean checkSaveBin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************************ checkSaveButtonInBinsGroupCreationPage  **********************************************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

       getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 796, 6));
		
		getAction().moveToElement(nameTxt).sendKeys(Keys.TAB).perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 797, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(capacityTxt));
		capacityTxt.click();
		capacityTxt.clear();
		capacityTxt.sendKeys(excelReader.getCellData(xlSheetName, 798, 6));
		capacityTxt.sendKeys(Keys.TAB);
		Thread.sleep(4000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		
        String expMasterSaveMessage = excelReader.getCellData(xlSheetName, 799, 7);
		
		//excelReader.setCellData(xlfile, xlSheetName, 799, 8, expMasterSaveMessage);
		
		boolean MasterSave = checkValidationMessageboolean(expMasterSaveMessage);
		
		
		String actMasterSave= Boolean.toString(MasterSave);
		String expMasterSave=excelReader.getCellData(xlSheetName, 800, 7);
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		if ( actMasterSave.equalsIgnoreCase(expMasterSave)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 795, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 795, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 795, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
 
 
 
 
 
 
 public static boolean checkCloseBinsMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkCloseBinsMaster ********************************");

	try
    {
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCloseBtn));
		itemCloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		boolean actLoadDashboard          = labelDashboard.isDisplayed();
		boolean actSelectDashboard        = selectDashboard.isDisplayed();
		boolean actNewDashboard           = newAddDashBoard.isDisplayed();
		boolean actDashboardCustomization = dashboardCustomizationSettings.isDisplayed();

		boolean expLoadDashboard          = true;
		boolean expSelectDashboard        = true;
		boolean expNewDashboard           = true;
		boolean expDashboardCustomization = true;

		System.out.println("Load Dashbord Value Actual          : " + actLoadDashboard +         " Value Expected : " + expLoadDashboard);
		System.out.println("Select Dashbord Value Actual        : " + actSelectDashboard +       " Value Expected : " + expSelectDashboard);
		System.out.println("New Dashbord Value Actual           : " + actNewDashboard +          " Value Expected : " + expNewDashboard);
		System.out.println("Dashbord Customization Value Actual : " + actDashboardCustomization+ " Value Expected : " + expDashboardCustomization);

		
		boolean DisplayResult=actLoadDashboard == expLoadDashboard && actSelectDashboard == expSelectDashboard
				                 && actNewDashboard == expNewDashboard && actDashboardCustomization == expDashboardCustomization;
		
		String actDispalyResult=Boolean.toString(DisplayResult);
		String expDispalyResult=excelReader.getCellData(xlSheetName, 834, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 834, 8, actDispalyResult.toUpperCase());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 835, 7);

		excelReader.setCellData(xlfile, xlSheetName, 835, 8, actDashboardLabel);
		
		
		System.out.println("Close Button  : " + actDashboardLabel + "  Value Expected : " + expDashboardLabel);
		
		
		if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel) && actDispalyResult.equalsIgnoreCase(expDispalyResult)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 833, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 833, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 833, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 
 
 
 //WAREHOUSE MASTER PAGE
 
 public static boolean checkWarehouseMasterPageIsDisplayByClickOnWarehouseMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************ checkWarehouseMasterPageIsDisplayByClickOnWarehouseMenu ********************************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouse));
		warehouse.click();
		
		
		/*boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
		boolean actServerErrorMessage  = checkServerErrorMessageIsNotDisplay();
		boolean expServerErrorMessage  = false;
		
		System.out.println("Opening UnitsConversion Error Message Value Actual : " + actSummaryErrorMessage +  " Value Expected : " + expSummaryErrorMessage);
		System.out.println("Opening UnitsConversion Error Message              : " + actServerErrorMessage +   " Value Expected : " +  expServerErrorMessage);*/
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));

		String actUnitsTitle = accountsTitle.getText();
		String expUnitsTitle = excelReader.getCellData(xlSheetName, 838, 7);

		excelReader.setCellData(xlfile, xlSheetName, 838, 8, actUnitsTitle);
		
		System.out.println("Opening Units Master From Item Menu Title Actual Value  :" + actUnitsTitle + "     Expected Value    : " + expUnitsTitle);

		if (actUnitsTitle.equalsIgnoreCase(expUnitsTitle)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 837, 9, resPass);
			return true;
		}
		else 
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 837, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 837, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	}
 }
  
  
 public static boolean checkMainOptionsAvailabilityInWarhouseMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
	 System.out.println("************************ checkMainOptionsAvailabilityInWarhouseMasterPage Method Executes............ ****************************");

	 try
	 {
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));

		boolean actAccountMasterNewBtn        = masterNewBtn.isDisplayed();
		boolean actAccountMasterAddGroupBtn   = masterAddGroupBtn.isDisplayed();
		boolean actAccountMasterEditBtn       = masterEditBtn.isDisplayed();
		boolean actAccountMasterCloneBtn      = masterCloneBtn.isDisplayed();
		boolean actAccountMasterPropertiesBtn = masterPropertiesBtn.isDisplayed();
		boolean actAccountMasterDeleteBtn     = masterDeleteBtn.isDisplayed();
		boolean actAccountMasterCloseBtn      = masterCloseBtn.isDisplayed();
		boolean actAccountMasterExpandBtn     = masterRibbonToExpandOptions.isDisplayed();

		boolean expAccountMasterNewBtn        = true;
		boolean expAccountMasterAddGroupBtn   = true;
		boolean expAccountMasterEditBtn       = true;
		boolean expAccountMasterCloneBtn      = true;
		boolean expAccountMasterPropertiesBtn = true;
		boolean expAccountMasterDeleteBtn     = true;
		boolean expAccountMasterCloseBtn      = true;
		boolean expAccountMasterExpandBtn     = true;

		System.out.println("New Button Display Value Actual          : " + actAccountMasterNewBtn+        "  Value Expected : " + expAccountMasterNewBtn);
		System.out.println("Add Group Button Display Value Actual    : " + actAccountMasterAddGroupBtn+   "  Value Expected : " + expAccountMasterAddGroupBtn);
		System.out.println("Edit Button Display Value Actual         : " + actAccountMasterEditBtn +      "  Value Expected : " + expAccountMasterEditBtn);
		System.out.println("Close Button Display Value Actual        : " + actAccountMasterCloneBtn+      "  Value Expected : " + expAccountMasterCloneBtn);
		System.out.println("Properties Button Display Value Actual   : " + actAccountMasterPropertiesBtn+ "  Value Expected : " + expAccountMasterPropertiesBtn);
		System.out.println("Delete Button Display Value Actual       : " + actAccountMasterDeleteBtn+     "  Value Expected : " + expAccountMasterDeleteBtn);
		System.out.println("Close Button Button Display Value Actual : " + actAccountMasterCloseBtn+      "  Value Expected : " + expAccountMasterCloseBtn);
		System.out.println("Expand Button Display Value Actual       : " + actAccountMasterExpandBtn+     "  Value Expected : " + expAccountMasterExpandBtn);
			
		
        Set<String> actRibbonControl= new HashSet<String>();
		
		int count = itemRibbonControlList.size();
		
		System.err.println(" Ribbon :   "+count);
		
		for (int i=1;i<count;i++)
		{
			String data=itemRibbonControlList.get(i).getText();
			actRibbonControl.add(data);
		}
		
		String actBinsRibbon = actRibbonControl.toString();
		
		String expBinsRibbon = excelReader.getCellData(xlSheetName, 840, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 840, 8, actBinsRibbon);
		
		System.out.println("actItemRibbon  : "+actBinsRibbon);
		System.out.println("expItemRibbon  : "+expBinsRibbon); 
		
		
		
		
		if (actAccountMasterNewBtn == expAccountMasterNewBtn
				&& actAccountMasterAddGroupBtn == expAccountMasterAddGroupBtn
				&& actAccountMasterEditBtn == expAccountMasterEditBtn
				&& actAccountMasterCloneBtn == expAccountMasterCloneBtn
				&& actAccountMasterPropertiesBtn == actAccountMasterPropertiesBtn
				&& actAccountMasterDeleteBtn == expAccountMasterDeleteBtn
				&& actAccountMasterCloseBtn == expAccountMasterCloseBtn
				&& actAccountMasterExpandBtn == expAccountMasterExpandBtn && 
				
				actBinsRibbon.equalsIgnoreCase(expBinsRibbon))
		{
			excelReader.setCellData(xlfile, xlSheetName, 839, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 839, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 839, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

 
 public static boolean checkToolsOptionsAvailabilityOnClickMasterRibbonToExpandOptionsInWarehouseMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("*********** checkToolsOptionsAvailabilityOnClickMasterRibbonToExpandOptionsInWarehouseMastersPage Method Executes............*******************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
		masterRibbonToExpandOptions.click();

		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
       System.out.println("Click On Ribbon Expand Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));

		boolean actAccountMasterGroupBtn              = masterGroupBtn.isDisplayed();
		boolean actAccountMasterDeleteAllBtn          = masterDeleteAllBtn.isDisplayed();
		boolean actAccountMasterCloseAccountBtn       = masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
		boolean actAccountMasterOpenCloseAccountBtn   = masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
		boolean actAccountMasterAdvanceImortExportBtn = masterAdvanceMasterImportORExportBtn.isDisplayed();
		boolean actAccountMasterAuthorInfoBtn         = masterAuthorInfoBtn.isDisplayed();
		boolean actAccountMasterMoveUpBtn             = masterMoveUpBtn.isDisplayed();
		boolean actAccountMasterMoveDownBtn           = masterMoveDownBtn.isDisplayed();
		boolean actAccountMasterSortBtn               = masterSortBtn.isDisplayed();
		boolean actAccountMasterMassUpdateBtn         = masterMassUpdateBtn.isDisplayed();
		boolean actAccountMasterImportFromXMLBtn      = masterImportFromXmlBtn.isDisplayed();
		boolean actAccountMasterExportFormatToXMLBtn  = masterExportFormatToXmlBtn.isDisplayed();

		boolean expAccountMasterGroupBtn              = true;
		boolean expAccountMasterDeleteAllBtn          = true;
		boolean expAccountMasterCloseAccountBtn       = true;
		boolean expAccountMasterOpenCloseAccountBtn   = true;
		boolean expAccountMasterAdvanceImortExportBtn = true;
		boolean expAccountMasterAuthorInfoBtn         = true;
		boolean expAccountMasterMoveUpBtn             = true;
		boolean expAccountMasterMoveDownBtn           = true;
		boolean expAccountMasterSortBtn               = true;
		boolean expAccountMasterMassUpdateBtn         = true;
		boolean expAccountMasterImportFromXMLBtn      = true;
		boolean expAccountMasterExportFormatToXMLBtn  = true;

		System.out.println("Group Button Display Value Actual           : " + actAccountMasterGroupBtn+              " Value Expected : " + expAccountMasterGroupBtn);
		System.out.println("Delete All Button Display Value Actual      : " + actAccountMasterDeleteAllBtn+          " Value Expected : " + expAccountMasterDeleteAllBtn);
		System.out.println("Close Account Button Display Value Actual   : " + actAccountMasterCloseAccountBtn+       " Value Expected : " + expAccountMasterCloseAccountBtn);
		System.out.println("Import Export Button Display Value Actual   : " + actAccountMasterAdvanceImortExportBtn+ " Value Expected : " + expAccountMasterAdvanceImortExportBtn);
		System.out.println("Authorize Info Button Display Value Actual  : " + actAccountMasterAuthorInfoBtn+         " Value Expected : " + expAccountMasterAuthorInfoBtn); 
		System.out.println("Move Down Button Display Value Actual       : " + actAccountMasterMoveDownBtn+           " Value Expected : " + expAccountMasterMoveDownBtn);
		System.out.println("Move Up Button Display Value Actual         : " + expAccountMasterMoveUpBtn+             " Value Expected : " + expAccountMasterMoveUpBtn);
		System.out.println("Sort Button Display Value Actual            : " + actAccountMasterSortBtn+               " Value Expected : " + expAccountMasterSortBtn);
		System.out.println("Import From XML Button Display Value Actual : " + actAccountMasterImportFromXMLBtn+      " Value Expected : " + expAccountMasterImportFromXMLBtn);
		System.out.println("Export From XML Button Display Value Actual : "+ actAccountMasterExportFormatToXMLBtn+   " Value Expected : " + expAccountMasterExportFormatToXMLBtn);

		ArrayList<String> actRibbonControlExpandList= new ArrayList<String>();
		
	 	 int count = itemRibbonControlExpandList.size();
		
		 System.err.println("count   :"+count);
		
		 for (int i=0;i<count;i++)
		 {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
			masterRibbonControlNextBtn.click();
			
			String data=itemRibbonControlExpandList.get(i).getText();
			actRibbonControlExpandList.add(data);
		 }
		
		 String actItemRibbonExpand = actRibbonControlExpandList.toString();
	 	
		 String expItemRibbonExpand = excelReader.getCellData(xlSheetName, 842, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 842, 8, actItemRibbonExpand);
		
		 System.out.println("actItemRibbonExpand   : "+actItemRibbonExpand);
		
		 System.out.println("expItemRibbonExpand   : "+expItemRibbonExpand);
		
		if (actSummaryErrorMessage==expSummaryErrorMessage
				&& actAccountMasterGroupBtn == expAccountMasterGroupBtn
				&& actAccountMasterDeleteAllBtn == expAccountMasterDeleteAllBtn
				&& actAccountMasterCloseAccountBtn == expAccountMasterCloseAccountBtn
				&& actAccountMasterOpenCloseAccountBtn == expAccountMasterOpenCloseAccountBtn
				&& actAccountMasterAdvanceImortExportBtn == expAccountMasterAdvanceImortExportBtn
				&& actAccountMasterAuthorInfoBtn == expAccountMasterAuthorInfoBtn
				&& actAccountMasterMoveUpBtn == expAccountMasterMoveUpBtn
				&& actAccountMasterMoveDownBtn == expAccountMasterMoveDownBtn
				&& actAccountMasterSortBtn == expAccountMasterSortBtn
				&& actAccountMasterMassUpdateBtn == expAccountMasterMassUpdateBtn
				&& actAccountMasterImportFromXMLBtn == expAccountMasterImportFromXMLBtn
				&& actAccountMasterExportFormatToXMLBtn == expAccountMasterExportFormatToXMLBtn  
				&& actItemRibbonExpand.equalsIgnoreCase(expItemRibbonExpand))
		{
			excelReader.setCellData(xlfile, xlSheetName, 841, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 841, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 841, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

 
 public static boolean checkOtherToolsOptionsAvailabilityInWarehouseMastersPageOnClickRibbonControlNextButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********* checkOtherToolsOptionsAvailabilityInBinsMastersPageOnClickRibbonControlNextButton Method Executes............  *******************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));
        masterRibbonControlNextBtn.click();
		
		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		boolean expSummaryErrorMessage  = true;
		
        System.out.println("Click On Ribbon Control Next Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
	
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		/*masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();*/

		getWebDriverWait().until(ExpectedConditions.visibilityOf(masterCustamizeMasterBtn));

		boolean actAccountMasterCustomizeMasterBtn = masterCustamizeMasterBtn.isDisplayed();
		boolean actAccountMasterCustomizeViewBtn   = masterCustamizeViewBtn.isDisplayed();
		boolean actAccountMasterCustomizeTreeBtn   = mastercustamizeTreeBtn.isDisplayed();

		boolean expAccountMasterCustomizeMasterBtn = true;
		boolean expAccountMasterCustomizeViewBtn   = true;
		boolean expAccountMasterCustomizeTreeBtn   = true;

		System.out.println("Customize Master Option Value Actual        : " + actAccountMasterCustomizeMasterBtn+        " Value Expected : " + expAccountMasterCustomizeMasterBtn);
		System.out.println("Customize View Option Value Actual          : " + actAccountMasterCustomizeViewBtn+          " Value Expected : " + expAccountMasterCustomizeViewBtn);
		System.out.println("Customize Tree Option Value Actual          : " + actAccountMasterCustomizeTreeBtn+          " Value Expected : " + expAccountMasterCustomizeTreeBtn);

		ArrayList<String> actRibbonControlExpandList= new ArrayList<String>();
		
	 	 int count = itemRibbonControlExpandList.size();
		
		 System.err.println("count   :"+count);
		
		 for (int i=0;i<count;i++)
		 {
			String data=itemRibbonControlExpandList.get(i).getText();
			actRibbonControlExpandList.add(data);
		 }
		
		 String actItemRibbonExpand = actRibbonControlExpandList.toString();
	 	
		 String expItemRibbonExpand = excelReader.getCellData(xlSheetName, 844, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 844, 8, actItemRibbonExpand);
		
		 System.out.println("actItemRibbonExpand   : "+actItemRibbonExpand);
		
		 System.out.println("expItemRibbonExpand   : "+expItemRibbonExpand);
		
		
		
		if (actSummaryErrorMessage==expSummaryErrorMessage 
				&& actAccountMasterCustomizeMasterBtn == expAccountMasterCustomizeMasterBtn
				&& actAccountMasterCustomizeViewBtn == expAccountMasterCustomizeViewBtn
				&& actAccountMasterCustomizeTreeBtn == expAccountMasterCustomizeTreeBtn
				&& actItemRibbonExpand.equalsIgnoreCase(expItemRibbonExpand))
		{
			excelReader.setCellData(xlfile, xlSheetName, 843, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 843, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 843, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	
 

 public static boolean checkTreeViewOptionsAvailableInWarehouseMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************  checkTreeViewOptionsAvailableInWarehouseMastersPage Method Executes............ *****************************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));

		boolean actAccountMasterTreeIdDropdownIsDisplay                 = masterTreeIdDropdown.isDisplayed();
		
		Select MasterId=new Select(masterTreeIdDropdown);
		String actAccountMasterTreeIdDropdownGetText                    = MasterId.getFirstSelectedOption().getText();
		
		boolean actAccountMasterTreeIDToggleBtnIsDisplay                = masterTreeIDToggleBtn.isDisplayed();
		boolean actAccountMasterTreeViewIDDropdownIsDisplay             = masterTreeViewIDDropdown.isDisplayed();
		
		Select MasterTreeViewId=new Select(masterTreeViewIDDropdown);
		String actAccountMasterTreeViewIDDropdownGetText                = MasterTreeViewId.getFirstSelectedOption().getText();
		
		boolean actAccountMasterTreeViewIDToggleBtnIsDisplay            = masterTreeViewIDToggleBtn.isDisplayed();
		boolean actAccountMasterHideAccountsGroupTreeIsDisplay          = masterOptionToHideAccountsGroupTree.isDisplayed();

		boolean expAccountMasterTreeIdDropdownIsDisplay                 = true;
		String expAccountMasterTreeIdDropdownGetText                    = excelReader.getCellData(xlSheetName, 846, 7);
		                                                        
		boolean expAccountMasterTreeIDToggleBtnIsDisplay                = true;
		boolean expAccountMasterTreeViewIDDropdownIsDisplay             = true;
		String expAccountMasterTreeViewIDDropdownGetText                = excelReader.getCellData(xlSheetName, 847, 7);
		
		boolean expAccountMasterTreeViewIDToggleBtnIsDisplay            = true;
		boolean expAccountMasterHideAccountsGroupTreeIsDisplay          = true;
		

		System.out.println("Tree ID Dropdown Option Value Actual      : " +actAccountMasterTreeIdDropdownIsDisplay    +" Value Expected : " + expAccountMasterTreeIdDropdownIsDisplay);
		System.out.println("Tree ID Dropdown Option Value Actual      : " +actAccountMasterTreeIdDropdownGetText      +" Value Expected : " + expAccountMasterTreeIdDropdownGetText);
		
		System.out.println("Tree ID Toggle Option Value Actual        : " +actAccountMasterTreeIDToggleBtnIsDisplay   +" Value Expected : " + expAccountMasterTreeIDToggleBtnIsDisplay);
	
		
		System.out.println("Tree View ID Option Value Actual          : " +actAccountMasterTreeViewIDDropdownIsDisplay +" Value Expected : " + expAccountMasterTreeViewIDDropdownIsDisplay);
		System.out.println("Tree View ID Option Value Actual          : " +actAccountMasterTreeViewIDDropdownGetText   +" Value Expected : " + expAccountMasterTreeViewIDDropdownGetText);
		
		System.out.println("Tree View ID Toggle Value Actual          : " +actAccountMasterTreeViewIDToggleBtnIsDisplay +" Value Expected : " + expAccountMasterTreeViewIDToggleBtnIsDisplay);
		
		
		System.out.println("Hide Accounts Group Tree Value Actual     : " +actAccountMasterHideAccountsGroupTreeIsDisplay+" Value Expected : " + expAccountMasterHideAccountsGroupTreeIsDisplay);
		
        excelReader.setCellData(xlfile, xlSheetName, 846, 8, actAccountMasterTreeIdDropdownGetText);
		
		excelReader.setCellData(xlfile, xlSheetName, 847, 8, actAccountMasterTreeViewIDDropdownGetText);
		
		
		if ( actAccountMasterTreeIdDropdownIsDisplay == expAccountMasterTreeIdDropdownIsDisplay
				&& actAccountMasterTreeIDToggleBtnIsDisplay == expAccountMasterTreeIDToggleBtnIsDisplay
				&& actAccountMasterTreeViewIDDropdownIsDisplay == expAccountMasterTreeViewIDDropdownIsDisplay
				&& actAccountMasterTreeViewIDToggleBtnIsDisplay == expAccountMasterTreeViewIDToggleBtnIsDisplay
				&& actAccountMasterHideAccountsGroupTreeIsDisplay == expAccountMasterHideAccountsGroupTreeIsDisplay && 
				
				actAccountMasterTreeIdDropdownGetText.equalsIgnoreCase(expAccountMasterTreeIdDropdownGetText) && 
				 
				actAccountMasterTreeViewIDDropdownGetText.equalsIgnoreCase(expAccountMasterTreeViewIDDropdownGetText))
				 
				
		{
			excelReader.setCellData(xlfile, xlSheetName, 845, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 845, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 845, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	

 
 public static boolean checkDisplayOfGroupAvailableTreeStructureLeftPageWarehouseMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("**************************  checkDisplayOfGroupAvailableTreeStructureLeftPageWarehouseMasterPage Method Executes............  *******************************");
    
	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));

		boolean actUnitsMasterRoot                = accountRootAccount.isDisplayed();
		//boolean actBinGroupOneMasterRoot          = warehouseGroupDisplayInTree.isDisplayed();
		
		boolean expUnitsMasterRoot                = true;
		//boolean expBinGroupOneMasterRoot          = true;
		
		System.out.println("Warehouse Root Is Display Value Actual        : " + actUnitsMasterRoot+       " Value Expected : " + expUnitsMasterRoot);
		//System.out.println("Root Warehouse Group One Display Value Actual : " + actBinGroupOneMasterRoot+ " Value Expected : " + expBinGroupOneMasterRoot);
		
		String actUnitRootName                    = accountRootAccount.getText();
		//String actBinOneGroupRootName             = warehouseGroupDisplayInTree.getText();
			
		excelReader.setCellData(xlfile, xlSheetName, 849, 8, actUnitRootName);
		//excelReader.setCellData(xlfile, xlSheetName, 850, 8, actBinOneGroupRootName);
		
		String expUnitRootName                    = excelReader.getCellData(xlSheetName, 849, 7);
		//String expBinOneGroupRootName             = excelReader.getCellData(xlSheetName, 850, 7);
		
		System.out.println("Bin Root Text Is Display Value Actual   : " + actUnitsMasterRoot+   " Value Expected : " + expUnitsMasterRoot);
		System.out.println("Bin Group One Text Display Value Actual : " + actUnitRootName+      " Value Expected : " + expUnitRootName);
		
			
		if (actUnitsMasterRoot == expUnitsMasterRoot/* && actBinGroupOneMasterRoot==expBinGroupOneMasterRoot*/
		    	&& actUnitRootName.equalsIgnoreCase(expUnitRootName)
				/*&& actBinOneGroupRootName.equalsIgnoreCase(expBinOneGroupRootName)*/)
		{
			excelReader.setCellData(xlfile, xlSheetName, 848, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 848, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 848, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }


 public static boolean checkCreateTreeToggleOptionsAvailableInWarehouseMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 
	 System.out.println("********************* checkCreateTreeToggleOptionsAvailableInWarehouseMastersPage Method Executes............ *******************************");
    
	 try
	 {
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggleBtn)); 
		masterTreeIDToggleBtn.click();
		
		
		 ArrayList<String> actMasterIDListList= new ArrayList<String>();
			
			int count = mastertreeIdList.size();
			System.err.println("count   :"+count);
			
			for (int i=0;i<count;i++)
			{
				String data=mastertreeIdList.get(i).getText();
				actMasterIDListList.add(data);
			}
			
			String actMasterIDExpand = actMasterIDListList.toString();
			String expMasterIDExpand = excelReader.getCellData(xlSheetName, 852, 7);
			
			excelReader.setCellData(xlfile, xlSheetName, 852, 8, actMasterIDExpand);
			
			System.out.println("actMasterIDExpand   : "+actMasterIDExpand);
			System.out.println("expMasterIDExpand   : "+expMasterIDExpand);	
	 	    
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggle_setDefaultBtn));

	 		boolean actAccountMasterTreeCreateTreeBtn = masterTreeIDToggle_CreateTreeBtn.isDisplayed();
	 		boolean actAccountMasterTreeEditBtn       = masterTreeIDToggle_EditBtn.isDisplayed();
	 		boolean actAccountMasterTreeDeleteBtn     = masterTreeIDToggle_DeleteBtn.isDisplayed();
	 		boolean actAccountMasterTreeSetDefaultBtn = masterTreeIDToggle_setDefaultBtn.isDisplayed();

	 		boolean expAccountMasterTreeCreateTreeBtn = true;
	 		boolean expAccountMasterTreeEditBtn       = true;
	 		boolean expAccountMasterTreeDeleteBtn     = true;
	 		boolean expAccountMasterTreeSetDefaultBtn = true;

	 		System.out.println("Tree ID Dropdown Option Value Actual  : " + actAccountMasterTreeCreateTreeBtn+ " Value Expected : " + expAccountMasterTreeCreateTreeBtn);
	 		System.out.println("Tree ID Toggle Option Value Actual    : " + actAccountMasterTreeEditBtn+       " Value Expected : " + expAccountMasterTreeEditBtn);
	 		System.out.println("Tree View ID Option Value Actual      : " + actAccountMasterTreeDeleteBtn+     " Value Expected : " + expAccountMasterTreeDeleteBtn);
	 		System.out.println("Tree View ID Toggle Value Actual      : " + actAccountMasterTreeSetDefaultBtn+ " Value Expected : " + expAccountMasterTreeDeleteBtn);
	 		
	 		
	 		System.out.println("Master Item Tree ID       : " + actMasterIDExpand+ " Value Expected : " + expMasterIDExpand);
	 		 
	 		
	 		
	 		if ( actAccountMasterTreeCreateTreeBtn == expAccountMasterTreeCreateTreeBtn
	 				&& actAccountMasterTreeEditBtn == expAccountMasterTreeEditBtn
	 				&& actAccountMasterTreeDeleteBtn == expAccountMasterTreeDeleteBtn
	 				&& actAccountMasterTreeSetDefaultBtn==expAccountMasterTreeSetDefaultBtn && actMasterIDExpand.equalsIgnoreCase(expMasterIDExpand))
	 		{
	 			excelReader.setCellData(xlfile, xlSheetName, 851, 9, resPass);
	 			return true;
	 		} 
	 		else 
	 		{
	 			excelReader.setCellData(xlfile, xlSheetName, 851, 9, resFail);
	 			return false;
	 		}
	 	  }
	 	 catch (Exception e) 
		  {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, xlSheetName, 851, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			  return false;
		  }
  }
	
 public static boolean checkCreateViewToggleOptionsAvailableWarehouseMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkCreateViewToggleOptionsAvailableWarehouseMastersPage Method Executes............***********************************");

	 try
	 {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIDToggleBtn));
		masterTreeViewIDToggleBtn.click();

 	   ArrayList<String> actMasterViewIDListList= new ArrayList<String>();
		
		int count = mastertreeViewIdList.size();
		System.err.println("count   :"+count);
		
		for (int i=0;i<count;i++)
		{
			String data=mastertreeViewIdList.get(i).getText();
			actMasterViewIDListList.add(data);
		}
		
		String actMasterViewIDExpand = actMasterViewIDListList.toString();
		String expMasterViewIDExpand = excelReader.getCellData(xlSheetName, 854, 7);
		
		System.out.println("actMasterViewIDExpand   : "+actMasterViewIDExpand);
		System.out.println("expMasterViewIDExpand   : "+expMasterViewIDExpand);	
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIdCreateViewBtn));

		boolean actAccountMasterTreeViewCreateViewBtn = masterTreeViewIdCreateViewBtn.isDisplayed();
		boolean actAccountMasterTreeViewEditViewBtn   = masterTreeeViewIdEditBtn.isDisplayed();
		boolean actAccountMasterTreeViewDeleteBtn     = masterTreeViewIdDeleteBtn.isDisplayed();

		boolean expAccountMasterTreeViewCreateViewBtn = true;
		boolean expAccountMasterTreeViewEditViewBtn   = true;
		boolean expAccountMasterTreeViewDeleteBtn     = true;

		System.out.println("Tree View Create View Option Value Actual : " + actAccountMasterTreeViewCreateViewBtn+ " Value Expected : " + expAccountMasterTreeViewCreateViewBtn);
		System.out.println("Tree View Edit View Option Value Actual   : " + actAccountMasterTreeViewEditViewBtn+   " Value Expected : " + expAccountMasterTreeViewEditViewBtn);
		System.out.println("Tree View Delete View Option Value Actual : " + actAccountMasterTreeViewDeleteBtn+     " Value Expected : " + expAccountMasterTreeViewDeleteBtn);

		excelReader.setCellData(xlfile, xlSheetName, 854, 8, actMasterViewIDExpand);
		
		if (actAccountMasterTreeViewCreateViewBtn == expAccountMasterTreeViewCreateViewBtn
				&& actAccountMasterTreeViewEditViewBtn == expAccountMasterTreeViewEditViewBtn
				&& actAccountMasterTreeViewDeleteBtn == expAccountMasterTreeViewDeleteBtn && 
				
				actMasterViewIDExpand.equalsIgnoreCase(expMasterViewIDExpand))
		{
			excelReader.setCellData(xlfile, xlSheetName, 853, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 853, 9, resPass);
			return false;
		}
	  }
	  catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 853, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
	
	
 public static boolean checkHideUnitGroupOptionsAvailableInWarehouseMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************* checkHideUnitGroupOptionsAvailableInWarehouseMastersPage Method Executes............*************************");

	 try
	 {
	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
	   masterOptionToHideAccountsGroupTree.click();
	   
	   boolean SummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
	  
       String actSummaryErrorMessage=Boolean.toString(SummaryErrorMessage);
       String expSummaryErrorMessage=excelReader.getCellData(xlSheetName, 856, 7);
	   

        excelReader.setCellData(xlfile, xlSheetName, 856, 8, actSummaryErrorMessage.toUpperCase());
       
	   System.out.println("Click on Hide Units Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);  

	   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeUnitsDisplay));

	   boolean AccountMasterTreeUnits = treeUnitsDisplay.isDisplayed();
	   
	   String actAccountMasterTreeUnits=Boolean.toString(AccountMasterTreeUnits);
	   String expAccountMasterTreeUnits=excelReader.getCellData(xlSheetName, 857, 7);

       excelReader.setCellData(xlfile, xlSheetName, 857, 8, actAccountMasterTreeUnits.toUpperCase());
	   
	   System.out.println("Tree View Create View Option Value Actual : " + actAccountMasterTreeUnits+ " Value Expected : " + expAccountMasterTreeUnits);

	   if (actAccountMasterTreeUnits.equalsIgnoreCase(expAccountMasterTreeUnits) && actSummaryErrorMessage.equalsIgnoreCase(expSummaryErrorMessage))
	   {
		   excelReader.setCellData(xlfile, xlSheetName, 855, 9, resPass);
			return true;
	   } 
	   else 
	   {
		   excelReader.setCellData(xlfile, xlSheetName, 855, 9, resFail);
			return false;
	   }
	 }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 855, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
	
	
 public static boolean checkUnHideUnitsGroupOptionsAvailableInWarehouseMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkUnHideUnitsGroupOptionsAvailableInWarehouseMastersPage Method Executes............ ******************************");
   
	 try
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));
		 masterOptionToHideAccountsGroupTree.click();
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRootAccount));
	 
		 boolean actUnitsMasterRoot                = accountRootAccount.isDisplayed();	
		 String actUnitRootName=accountRootAccount.getText();
		
		 boolean expUnitsMasterRoot                = true;
		 String expUnitRootName                    =excelReader.getCellData(xlSheetName, 859, 7);

		 excelReader.setCellData(xlfile, xlSheetName, 859, 8, actUnitRootName);
		 
		 System.out.println("Open Units Master Unit Root Is Display Value Actual  : " + actUnitsMasterRoot+ " Value Expected : " + expUnitsMasterRoot);
		 System.out.println("Root Units Text Display Value Actual                 : " + actUnitRootName+    " Value Expected : " + expUnitRootName);
			
		 if (actUnitsMasterRoot == expUnitsMasterRoot
				&& actUnitRootName.equalsIgnoreCase(expUnitRootName))
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 858, 9, resPass);
			return true;
		 } 
		 else 
		 {
			 excelReader.setCellData(xlfile, xlSheetName, 858, 9, resFail);
			return false;
		 }
	  }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 858, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	
	
 public static boolean checkHeaderFieldsOptionsAvailableInWarehouseMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("********************** checkHeaderFieldsOptionsAvailableInWarehouseMastersPage Method Executes............ **********************************");

	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));

 		
 		String actAccountMasterSearchGetText               = masterSearchTxt.getAttribute("placeholder");
 		
 		String expAccountMasterSearchGetText               = excelReader.getCellData(xlSheetName, 861, 7);
 		
 		
 		excelReader.setCellData(xlfile, xlSheetName, 861, 8, actAccountMasterSearchGetText);
 		
 		boolean actAccountMasterSearchBtn                  = masterSearchBtn.isDisplayed();
 		boolean actAccountMasterCmbMasterTxt               = mastercmbMasterTxt.isDisplayed();
 		boolean actAccountMasterCmbMasterExpansionBtn      = masterCmbMasterExpansionBtn.isDisplayed();
 		boolean actAccountMasterCmbMasterSettingsBtn       = masterCumMasterSettingBtn.isDisplayed();
 		boolean actAccountMasterRetainSelectionCheckbox    = masterRetainSelectionCheckBox.isDisplayed();
 		boolean actAccountMasterSideBarBtn                 = masterSideBarBtn.isDisplayed();
 		
 		ArrayList<String> actmasterItemSearchControlList= new ArrayList<String>();
 		
  		int count = masterItemSearchControlList.size();
  		System.err.println("count   :"+count);
  		
  		for (int i=0;i<count;i++)
  		{
  			String data=masterItemSearchControlList.get(i).getAttribute("title");
  			actmasterItemSearchControlList.add(data);
  		}
  		
  		String actControlList = actmasterItemSearchControlList.toString();
  		String expControlList = excelReader.getCellData(xlSheetName, 862, 7);
  		
  		System.out.println("actControlList   : "+actControlList);
  		System.out.println("expControlList   : "+expControlList);

  		excelReader.setCellData(xlfile, xlSheetName, 862, 8, actControlList);
  		
 		boolean expAccountMasterSearchBtn                  = true;
 		boolean expAccountMasterCmbMasterTxt               = true;
 		boolean expAccountMasterCmbMasterExpansionBtn      = true;
 		boolean expAccountMasterCmbMasterSettingsBtn       = true;
 		boolean expAccountMasterRetainSelectionCheckbox    = true;
 		boolean expAccountMasterSideBarBtn                 = true;

 		
 		System.out.println("Search Button Value Actual           : "+ actAccountMasterSearchBtn+                  " Value Expected : " + expAccountMasterSearchBtn);
 		System.out.println("Comb Box Value Actual                : "+ actAccountMasterCmbMasterTxt+               " Value Expected : " + expAccountMasterCmbMasterTxt);
 		System.out.println("Combo Box Expansion Value Actual     : "+ actAccountMasterCmbMasterExpansionBtn+      " Value Expected : " + expAccountMasterCmbMasterExpansionBtn);
 		System.out.println("Combo Box Settings Value Actual      : "+ actAccountMasterCmbMasterSettingsBtn+       " Value Expected : " + expAccountMasterCmbMasterSettingsBtn);
 		System.out.println("Selection Check Box Value Actual     : "+ actAccountMasterRetainSelectionCheckbox+    " Value Expected : " + expAccountMasterRetainSelectionCheckbox);
 		System.out.println("Side Bar Value Actual                : "+ actAccountMasterSideBarBtn+                 " Value Expected : " + expAccountMasterSideBarBtn);
 		
 		System.out.println("AccountMasterSearchGetText          : "+actAccountMasterSearchGetText +"  Value Expected  : "+expAccountMasterSearchGetText);
 		
 		boolean actTestResult= actAccountMasterSearchBtn == expAccountMasterSearchBtn
				 				&& actAccountMasterCmbMasterTxt == expAccountMasterCmbMasterTxt
				 				&& actAccountMasterCmbMasterExpansionBtn == expAccountMasterCmbMasterExpansionBtn
				 				&& actAccountMasterCmbMasterSettingsBtn == expAccountMasterCmbMasterSettingsBtn
		 						&& actAccountMasterRetainSelectionCheckbox == expAccountMasterRetainSelectionCheckbox
		 		 				&& actAccountMasterSideBarBtn == expAccountMasterSideBarBtn;
 		
 		String actDispalyResult=Boolean.toString(actTestResult);
 		String expDispalyResult=excelReader.getCellData(xlSheetName, 863, 7);	
 		
 		System.err.println("DispalyResult  "+actDispalyResult +" Value Expected : "+expDispalyResult);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 863, 8, actDispalyResult.toUpperCase());
 		
 		
 		if(actDispalyResult.equalsIgnoreCase(expDispalyResult) && actControlList.equalsIgnoreCase(expControlList) 
 				&& actAccountMasterSearchGetText.equalsIgnoreCase(expAccountMasterSearchGetText)) 
 		
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 860, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 860, 9, resFail);
 			return false;
 		}
 	 }
 	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 860, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
	
	
 public static boolean checkSearchOptionAvailableInWarehouseMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  
	 System.out.println("*************************** checkSearchOptionAvailableInWarehouseMastersPage Method Executes............ ********************************");
	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchBtn));
 		masterSearchBtn.click();

 		boolean SummaryErrorMessage                      = checkErrorMessageIsDisplayingOrNotDisplaying();
 		
        String actSummaryErrorMessage=Boolean.toString(SummaryErrorMessage);
        String expSummaryErrorMessage=excelReader.getCellData(xlSheetName, 865, 7);
 		
        excelReader.setCellData(xlfile, xlSheetName, 865, 8, actSummaryErrorMessage.toUpperCase());
 		
 		System.out.println("Click on Search Button Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 		
        ArrayList<String> actmasterSearchList= new ArrayList<String>();
 		
  		int count = masterSearchList.size();
  		System.err.println("count   :"+count);
  		
  		for (int i=0;i<count;i++)
  		{
  			String data=masterSearchList.get(i).getText();
  			actmasterSearchList.add(data);
  		}
  		
  		String actSearchList = actmasterSearchList.toString();
  		String expSearchList = excelReader.getCellData(xlSheetName, 866, 7);
  		
  		System.out.println("actSearchList   : "+actSearchList);
  		System.out.println("expSearchList   : "+expSearchList);
 		
  		excelReader.setCellData(xlfile, xlSheetName, 866, 8, actSearchList);
  		
 		if (actSearchList.equalsIgnoreCase(expSearchList) && actSummaryErrorMessage.equalsIgnoreCase(expSummaryErrorMessage))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 864, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			 excelReader.setCellData(xlfile, xlSheetName, 864, 9, resFail);
 			return false;
 		}
 	 }
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 864, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	
 public static boolean checkWarehouseMastersDisplayTableColumnNamesAvailableInWarehouseMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
	 System.out.println("************************* checkWarehouseMastersDisplayTableColumnNamesAvailableInWarehouseMastersPage Method Executes............ *************************");
		
	 try
 	 {
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGrid_Header_SelectTxt));
 		boolean actAccountMasterGridSelectTxt = masterGrid_Header_SelectTxt.isDisplayed();
 		masterGrid_Header_SelectTxt.click();

 		boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expSummaryErrorMessage  = true;

 		System.out.println("Click on Master Grid Header Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
 		
 		
 		ArrayList<String> actmasterItemHeaderList=new ArrayList<String>();
 		
 		int HeaderCount =masterItemHeaderList.size();
 		
 		System.err.println("HeaderCount   :  "+HeaderCount);
 		
 		for (int i = 0; i < HeaderCount; i++) 
 		{
			String data=masterItemHeaderList.get(i).getText();
			actmasterItemHeaderList.add(data);
		}
 	
 		 String actMasterItemHeaderTextList=actmasterItemHeaderList.toString();
 		 String expMasterItemHeaderTextList=excelReader.getCellData(xlSheetName, 868, 7);
 		
 		
 		excelReader.setCellData(xlfile, xlSheetName, 868, 8, actMasterItemHeaderTextList);
 		
 		if (actSummaryErrorMessage==expSummaryErrorMessage && actMasterItemHeaderTextList.equalsIgnoreCase(expMasterItemHeaderTextList))
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 867, 9, resPass);
 			return true;
 		} 
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 867, 9, resFail);
 			return false;
 		}
 	 }
 	 catch (Exception e) 
 	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 867, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	

 public static boolean checkWarehouseMastersDisplayTableColumnValuesAvailableInWarehouseMastersPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
   excelReader=new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		  		 
   System.out.println("********************** checkWarehouseMastersDisplayTableColumnValuesAvailableInWarehouseMastersPage Method Executes............ **************************");
	
   try
   {
   	
	   String actmasterGridBodyList=clickOnEmptyGroup.getText();
	   	
	   String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 341, 7);
	   	
	   excelReader.setCellData(xlfile, xlSheetName, 341, 8, actmasterGridBodyList);
	   	
	   System.out.println("masterGridBodyList Actual   : "+actmasterGridBodyList);
	   System.out.println("masterGridBodyList Expected : "+expmasterGridBodyList);
	   	
	   if(actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList))
	   {
		   excelReader.setCellData(xlfile, xlSheetName, 340, 9, resPass);
		   return true;
	   } 
	   else 
	   {
		   excelReader.setCellData(xlfile, xlSheetName, 340, 9, resFail);
		   return false;
	   }
   }
   catch (Exception e) 
   {
	   String exception =e.getMessage().substring(0, 50);
	   excelReader.setExceptionInExcel(xlfile, xlSheetName, 340, 10, exception);
	   System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	   return false;
   } 
 }
   
  
 
	@FindBy(xpath = "//*[@id='iBins']")
	private static WebElement binsCombobox;

	@FindBy(xpath = "//*[@id='iPhysInventoryCountingFrequency']")
	private static WebElement physicalInventoryCountingFrequency;

	@FindBy(xpath = "//*[@id='iWarehouseType']")
	private static WebElement warehouseType;

	@FindBy(xpath = "//*[@id='bDontMaintainBin']")
	private static WebElement doNotMain;
	
	
	
	
	
	
	  
	
	//Customization of warehouse master where bins option to be enabled
	
	@FindBy(xpath="//i[@class='icon-font6 icon-custamize']")
	public static WebElement masterCustamizemasterBtn; 
	
	
			public static boolean checkCustomizeMasterTabOptionInWarehouseMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{

				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				 		 
			    /* getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
			 
			     masterRibbonToExpandOptions.click();*/
			     	     
			     //Thread.sleep(3000);
				 
		         getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
				 
		         masterRibbonControlNextBtn.click();
				 
				 //Thread.sleep(3000);
				 		 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
				 
				 masterCustamizemasterBtn.click();
				 
				 //Thread.sleep(3000);
			     
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minusBtn));			 
				 minusBtn.click();

				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(plusBtn));
				 
				 boolean actplusBtn                                 = plusBtn.isDisplayed();
				 boolean actmasterFieldsOption                      = masterFieldsOption.isDisplayed();
				 boolean actaccUniqueConstraintsOption              = accountMasterFieldsUniqueConstraintsOption.isDisplayed();
				 boolean actRulesOption                             = RulesOption.isDisplayed();
				 boolean actrules_ExternalModules                   = rules_ExternalModules.isDisplayed();
				 boolean actitemInfoPanelCustomizationTab           = itemInfoPanelCustomizationTab.isDisplayed();
				 boolean actaccountReportsTab                       = accountReportsTab.isDisplayed();
				 
				 boolean expplusBtn                                 = true;
				 boolean expmasterFieldsOption                      = true;
				 boolean expaccUniqueConstraintsOption              = true;
				 boolean expRulesOption                             = true;
				 boolean exprules_ExternalModules                   = true;
				 boolean expitemInfoPanelCustomizationTab           = true;
				 boolean expaccountReportsTab                       = true;
				 
				 System.out.println("********************************checkCustomizeMasterTabOption****************************");
				 
				 System.out.println("plusBtn                          "+actplusBtn                       +" Value Excepted   :"+expplusBtn);
				 System.out.println("masterFieldsOption               "+actmasterFieldsOption            +" Value Excepted   :"+expmasterFieldsOption);
				 System.out.println("accUniqueConstraintsOption       "+actaccUniqueConstraintsOption    +" Value Excepted   :"+expaccUniqueConstraintsOption);
				 System.out.println("RulesOption                      "+actRulesOption                   +" Value Excepted   :"+expRulesOption);
				 System.out.println("rules_ExternalModules            "+actrules_ExternalModules         +" Value Excepted   :"+exprules_ExternalModules);
				 System.out.println("itemInfoPanelCustomizationTab    "+actitemInfoPanelCustomizationTab +" Value Excepted   :"+expitemInfoPanelCustomizationTab);
				 System.out.println("accountReportsTab                "+actaccountReportsTab             +" Value Excepted   :"+expaccountReportsTab);
				 
				 if (actplusBtn==expplusBtn && actmasterFieldsOption==expmasterFieldsOption && actaccUniqueConstraintsOption==expaccUniqueConstraintsOption && 
						 actRulesOption==expRulesOption && actrules_ExternalModules==exprules_ExternalModules && actitemInfoPanelCustomizationTab==expitemInfoPanelCustomizationTab && 
						 actaccountReportsTab==expaccountReportsTab)
				 {
					 
					 excelReader.setCellData(xlfile, "Sheet1", 680, 9, resPass);
					 return true;
				 }
				 else
				 {
					 excelReader.setCellData(xlfile, "Sheet1", 680, 9, resFail);
					 return false;
				 }
		      }

		
			public static boolean checkCustomizeMasterTabMasterFieldsOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{

				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(plusBtn));				 
				 plusBtn.click();
				 
				 //Thread.sleep(3000);

				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTab));
				 boolean actgeneralTab                   = generalTab.isDisplayed();
				 boolean actgeneralMainTab               = generalMainTab.isDisplayed();
				 boolean actgeneralHeaderDetailsTab      = generalHeaderDetailsTab.isDisplayed();
				 
				 
				 boolean expgeneralTab                   = true;
				 boolean expgeneralMainTab               = true;
				 boolean expgeneralHeaderDetailsTab      = true;
				
				 
				 System.out.println("*************************************checkCustomizeMasterTabMasterFieldsOption***********************************");
				 
				 System.out.println("generalTab                 : "+actgeneralTab               +" Value Expected : "+expgeneralTab);
				 System.out.println("generalMainTab             : "+actgeneralMainTab           +" Value Expected : "+expgeneralMainTab);
				 System.out.println("generalHeaderDetailsTab    : "+actgeneralHeaderDetailsTab  +" Value Expected : "+expgeneralHeaderDetailsTab);
				
				 
				 if(actgeneralTab==expgeneralTab && actgeneralMainTab==expgeneralMainTab
						 && actgeneralHeaderDetailsTab==expgeneralHeaderDetailsTab)
				 {
					 excelReader.setCellData(xlfile, "Sheet1", 681, 9, resPass);
					 return true;
				 }
				 else
				 {
					 excelReader.setCellData(xlfile, "Sheet1", 681, 9, resFail);
					 return false;
				 }
		      }
			
			public static boolean checkGeneralTabOptionMainTabInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{

				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			 
				
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCustomizeName));
				 
				 boolean actaccountCustomizeName          =accountCustomizeName.isDisplayed();
				 boolean actaccountCustomizeCode          =accountCustomizeCode.isDisplayed();
				 boolean actaccountSaveBtn                =accountSaveBtn.isDisplayed();
				 boolean actaccountHeaderPreview          =accountHeaderPreview.isDisplayed();
				 boolean actaccountCloseBtn               =accountCloseBtn.isDisplayed();
				 
				 boolean expaccountCustomizeName          =true;
				 boolean expaccountCustomizeCode          =true;
				 boolean expaccountSaveBtn                =true;
				 boolean expaccountHeaderPreview          =true;
				 boolean expaccountCloseBtn              =true;
				 
				 System.out.println("*******************************checkGeneralTabOptionMainTabInCustomizeMaster***************************");
				 
				 System.out.println("accountCustomizeName         : "+actaccountCustomizeName     +" value Expected : "+expaccountCustomizeName);
				 System.out.println("accountCustomizeCode         : "+actaccountCustomizeCode     +" value Expected : "+expaccountCustomizeCode);
				 System.out.println("accountSaveBtn               : "+actaccountSaveBtn           +" value Expected : "+expaccountSaveBtn);
				 System.out.println("accountHeaderPreview         : "+actaccountHeaderPreview     +" value Expected : "+expaccountHeaderPreview);
				 System.out.println("accountCloseBtn              : "+actaccountCloseBtn          +" value Expected : "+expaccountCloseBtn);
				 
				 if(actaccountCustomizeName==expaccountCustomizeName && actaccountCustomizeCode==expaccountCustomizeCode
						 && actaccountSaveBtn==expaccountSaveBtn && actaccountHeaderPreview==expaccountHeaderPreview
						 && actaccountCloseBtn==expaccountCloseBtn)
				 {
					 excelReader.setCellData(xlfile, "Sheet1", 682, 9, resPass);
					 return true;
				 }
				 else
				 {
					 excelReader.setCellData(xlfile, "Sheet1", 682, 9, resFail);
					 return false;
				 }
		      }
			

			
			@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div/table/tbody/tr[1]/td[4]")
			private static WebElement warehouseHeaderDetailsBins;

			@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div/table/tbody/tr[2]/td[4]")
			private static WebElement warehouseHeaderDetailsPhysInventory;

			@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div/table/tbody/tr[3]/td[4]")
			private static WebElement warehouseHeaderDetailsWarehouse;
			
			@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div/table/tbody/tr[4]/td[4]")
			private static WebElement warehouseHeaderDetailsDonotMaintainStocks;

			
			public static boolean checkGeneralTabOptionHeaderDetailsTabInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{

				 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			 
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalHeaderDetailsTab));
				 
				 generalHeaderDetailsTab.click();
				
				 //Thread.sleep(3000);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseHeaderDetailsBins));
				 
				 boolean actwarehouseHeaderDetailsBins                  = warehouseHeaderDetailsBins.isDisplayed();
				 boolean actwarehouseHeaderDetailsPhysInventory         = warehouseHeaderDetailsPhysInventory.isDisplayed();
				 boolean actwarehouseHeaderDetailsWarehouse             = warehouseHeaderDetailsWarehouse.isDisplayed();
				 boolean actwarehouseHeaderDetailsDonotMaintainStocks   = warehouseHeaderDetailsDonotMaintainStocks.isDisplayed();
				
				 
				 boolean expwarehouseHeaderDetailsBins                   = true;
				 boolean expwarehouseHeaderDetailsPhysInventory          = true;
				 boolean expwarehouseHeaderDetailsWarehouse              = true;
				 boolean expwarehouseHeaderDetailsDonotMaintainStocks    = true;
			
				 
				 System.out.println("*******************************checkGeneralTabOptionHeaderDetailsTabInCustomizeMaster***************************");
				 
				 System.out.println("warehouseHeaderDetailsBins                 : "+actwarehouseHeaderDetailsBins               +" value Expected : "+expwarehouseHeaderDetailsBins);
				 System.out.println("warehouseHeaderDetailsPhysInventory        : "+actwarehouseHeaderDetailsPhysInventory      +" value Expected : "+expwarehouseHeaderDetailsPhysInventory);
				 System.out.println("warehouseHeaderDetailsWarehouse            : "+actwarehouseHeaderDetailsWarehouse          +" value Expected : "+expwarehouseHeaderDetailsWarehouse);
				 System.out.println("warehouseHeaderDetailsDonotMaintainStocks  : "+actwarehouseHeaderDetailsDonotMaintainStocks+" value Expected : "+expwarehouseHeaderDetailsDonotMaintainStocks);
				 
				 
				 if(actwarehouseHeaderDetailsBins==expwarehouseHeaderDetailsBins && actwarehouseHeaderDetailsPhysInventory==expwarehouseHeaderDetailsPhysInventory &&
						 actwarehouseHeaderDetailsWarehouse==expwarehouseHeaderDetailsWarehouse && 
						 actwarehouseHeaderDetailsDonotMaintainStocks==expwarehouseHeaderDetailsDonotMaintainStocks)
				 {
					 excelReader.setCellData(xlfile, "Sheet1", 683, 9, resPass);
					 return true;
				 }
				 else
				 {
					 excelReader.setCellData(xlfile, "Sheet1", 683, 9, resFail);
					 return false;
				 }
		      }
			

			
			@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[1]/div/div[2]/div/div/table/tbody/tr[1]/td[1]/i[1]")
			private static WebElement warehouseHeaderDetailsBinsEdit;
			
		     @FindBy(xpath="//*[@id='ExtraField_IncludeGroups']")
		     private static WebElement extraFields_FieldDetailsInCludeGroups;  
		
			public static boolean checkEditBinInMainTabInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{

				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseHeaderDetailsBinsEdit));
				 
				warehouseHeaderDetailsBinsEdit.click();

				//Thread.sleep(3000);
	             
	            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
	             
	            boolean actextraFields_FieldDetailsCaption   				=extraFields_FieldDetailsCaption.isDisplayed();
	         	boolean actextraFields_FieldDetailsName   					=extraFields_FieldDetailsName.isDisplayed();
	         	boolean actextraFields_FieldDetailsDatTypeDropdown   		=extraFields_FieldDetailsDatTypeDropdown.isDisplayed();
	         	boolean actextraFields_FieldDetailsBannerText   			=extraFields_FieldDetailsBannerText.isDisplayed();
	         	boolean actextraFields_FieldDetails_MaxSize   				=extraFields_FieldDetails_MaxSize.isDisplayed();
	         	boolean actextraFields_FieldDetailsControlTypeDropdown   	=extraFields_FieldDetailsControlTypeDropdown.isDisplayed();
	         	boolean actextraFields_FieldDetailsToolTipText   			=extraFields_FieldDetailsToolTipText.isDisplayed();
	         	boolean actextraFields_FieldDetailsInCludeGroups   	         =extraFields_FieldDetailsInCludeGroups.isDisplayed();
	         
	         	
	         	boolean expextraFields_FieldDetailsCaption   				=true;
	         	boolean expextraFields_FieldDetailsName   					=true;
	         	boolean expextraFields_FieldDetailsDatTypeDropdown   		=true;
	         	boolean expextraFields_FieldDetailsBannerText   			=true;
	         	boolean expextraFields_FieldDetails_MaxSize   				=true;
	         	boolean expextraFields_FieldDetailsControlTypeDropdown   	=true;
	         	boolean expextraFields_FieldDetailsToolTipText   			=true;
	         	boolean expextraFields_FieldDetailsInCludeGroups   	        =true;
	         	
	         	
	         	System.out.println("************************checkFieldsDetailsTabInCreateCreateTabDisplayInCustomizeTab********************************");
	         	
	         	System.out.println("extraFields_FieldDetailsCaption                : "+actextraFields_FieldDetailsCaption               +" Value Expected : "+expextraFields_FieldDetailsCaption);
	         	System.out.println("extraFields_FieldDetailsName                   : "+actextraFields_FieldDetailsName                  +" Value Expected : "+expextraFields_FieldDetailsName);
	         	System.out.println("extraFields_FieldDetailsDatTypeDropdown        : "+actextraFields_FieldDetailsDatTypeDropdown       +" Value Expected : "+expextraFields_FieldDetailsDatTypeDropdown);
	         	System.out.println("extraFields_FieldDetailsBannerText             : "+actextraFields_FieldDetailsBannerText            +" Value Expected : "+expextraFields_FieldDetailsBannerText);
	         	System.out.println("extraFields_FieldDetails_MaxSize               : "+actextraFields_FieldDetails_MaxSize              +" Value Expected : "+expextraFields_FieldDetails_MaxSize);
	         	System.out.println("extraFields_FieldDetailsControlTypeDropdown    : "+actextraFields_FieldDetailsControlTypeDropdown   +" Value Expected : "+expextraFields_FieldDetailsControlTypeDropdown);
	         	System.out.println("extraFields_FieldDetailsToolTipText            : "+actextraFields_FieldDetailsToolTipText           +" Value Expected : "+expextraFields_FieldDetailsToolTipText);
	         	System.out.println("extraFields_FieldDetailsInCludeGroups          : "+actextraFields_FieldDetailsInCludeGroups         +" Value Expected : "+expextraFields_FieldDetailsInCludeGroups);
	         	
	                  
	         	if(actextraFields_FieldDetailsCaption==expextraFields_FieldDetailsCaption && actextraFields_FieldDetailsName==expextraFields_FieldDetailsName
	         			&& actextraFields_FieldDetailsDatTypeDropdown==expextraFields_FieldDetailsDatTypeDropdown
	         			&& actextraFields_FieldDetailsBannerText==expextraFields_FieldDetailsBannerText
	         			&& actextraFields_FieldDetails_MaxSize==expextraFields_FieldDetails_MaxSize
	         			&& actextraFields_FieldDetailsControlTypeDropdown==expextraFields_FieldDetailsControlTypeDropdown
	         			&& actextraFields_FieldDetailsToolTipText==expextraFields_FieldDetailsToolTipText
	         			&& actextraFields_FieldDetailsInCludeGroups==expextraFields_FieldDetailsInCludeGroups)
	 	   		{
					 excelReader.setCellData(xlfile, "Sheet1", 684, 9, resPass);
					 return true;
				 }
				 else
				 {
					 excelReader.setCellData(xlfile, "Sheet1", 684, 9, resFail);
					 return false;
				 }
		      }
			
			

			@FindBy(xpath="//div[@class='theme_color font-6']")
			public static WebElement errorMessage;
			
			@FindBy(xpath="//span[@class='icon-reject2 theme_color']")
			public static WebElement errorMessageCloseBtn;
			
			public static String checkValidationMessagebooleanInWhM(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			        try
			        {
			                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			                String actErrorMessage=errorMessage.getText();
			                String expErrorMessage=ExpMessage;

			                try
			                {
			                
				                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				                errorMessageCloseBtn.click();

				                System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
				                
				                return actErrorMessage;
			                }
			                catch(Exception ee)
			                {
			                	
			                	System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
			                	
			                	return actErrorMessage;
			                }
			        }
			        catch(Exception e)
			        {
			                System.err.println("Error Message NOT Found or NOT Clickable");
			                System.err.println(e.getMessage());
			                
			                String Exception=e.getMessage();
			            
			                return Exception;
			        }
			}
				
			
			
			
			public static boolean checkUpdateCreatedFieldInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		     {
	   			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	   			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	   			
	   			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsInCludeGroups));
	   			 
	   			 extraFields_FieldDetailsInCludeGroups.click();
	   			   			
	   			 extraFields_FieldDetailsInCludeGroups.sendKeys("All Data");
	   			
	   			 extraFields_FieldDetailsInCludeGroups.sendKeys(Keys.TAB);
	   		     
	   		     //Thread.sleep(2000);
	   		     
	   		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
				 
	   		     extraFields_PropertiesTab.click();
	   		     
	   		     //Thread.sleep(2000);
	   		     
	   		     if(extraFields_PropertiesHiddenChekbox.isSelected() && extraFields_PropertiesHiddenInGroupChekbox.isSelected())
	   		     {
		   		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
					 
		   		     extraFields_PropertiesHiddenChekbox.click();
				     
				     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
					 
				     extraFields_PropertiesHiddenInGroupChekbox.click();
	   		     }
	   		  
	   		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
			     
		   		extraFields_OkBtn.click();
		   		 
		   		System.out.println("*********************************checkUpdateCreatedFieldInCreateCreateTabDisplayInCustomizeTab******************");
		   		 
		   		String expMessage="Field Updated Successfully";
				
		   		String actMessage=checkValidationMessagebooleanInWhM(expMessage);
		          
		   		 if(actMessage.equalsIgnoreCase(expMessage))
		   		 {
		   			 excelReader.setCellData(xlfile, "Sheet1", 685, 9, resPass);
		   			 return true;
		   		 }
		   		 else
		   		 {
		   			 excelReader.setCellData(xlfile, "Sheet1", 685, 9, resFail);
		   			 return false;
		   		 }
	   			  
		      }
			
			
			public static boolean checkCloseBtnOpenWarehouseMasterUpdateWarehouse() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		     {
				  excelReader=new ExcelReader(POJOUtility.getExcelPath());
				  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		         
		          getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtn));
				 
		          accountCloseBtn.click();
				
		          getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
		 		 
		 		  masterCloseBtn.click();
		 		 
		 		  
	              getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			     
			      homeMenu.click();
				
			      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			     
			      mastersMenu.click();
			     
			      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseMenu));
			     
			      warehouseMenu.click();
			     
			      
			  	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));

				String actUnitsTitle = accountsTitle.getText();
				String expUnitsTitle = excelReader.getCellData(xlSheetName, 838, 7);

				excelReader.setCellData(xlfile, xlSheetName, 838, 8, actUnitsTitle);
				
				System.out.println("Opening Units Master From Item Menu Title Actual Value  :" + actUnitsTitle + "     Expected Value    : " + expUnitsTitle);

				if (actUnitsTitle.equalsIgnoreCase(expUnitsTitle)) 
				{
					excelReader.setCellData(xlfile, xlSheetName, 837, 9, resPass);
					return true;
				}
				else 
				{
					
					excelReader.setCellData(xlfile, xlSheetName, 837, 9, resFail);
					return false;
				}
			
					 
		     }
			
			
			
			
			@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
			private static WebElement wareHouse1stRowChkBox;
			
			@FindBy(xpath="//input[@name='chkRowCheck']")
			private static WebElement WH1RowChkBox;
			
			
			// Should Check
			public static boolean checkEditMasterUpdateWarehouseWH1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		    {
				  excelReader=new ExcelReader(POJOUtility.getExcelPath());
				  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		         
		    
			      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouse1stRowChkBox));
			      getAction().doubleClick(wareHouse1stRowChkBox).build().perform();
			      
			      
			      //Thread.sleep(3000);
			      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(WH1RowChkBox));
			      WH1RowChkBox.click();
			      
			      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
					 
				  masterEditBtn.click();
					 
				  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
				 
				  nameTxt.click();

				  nameTxt.sendKeys(Keys.TAB);
				 
				 			 
				  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
				 
				  codeTxt.click();
	 
				  codeTxt.sendKeys(Keys.TAB);
				 
	              getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsCombobox));
	             
	              binsCombobox.click();
				 
	              binsCombobox.sendKeys(Keys.END);
	             
	              binsCombobox.sendKeys(Keys.SHIFT,Keys.HOME);
	             
	              //Thread.sleep(2000);
	             
	              binsCombobox.sendKeys("Bin3");
		         
		          getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		     
		          nameTxt.click();
			             
			      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				 
				  saveBtn.click();
				  
				  System.out.println("***********************************checkEditMasterUpdateWarehouseWH1*******************************");
				  
				  String expMessage="Updated Successfully";
					
				  String actMessage=checkValidationMessagebooleanInWhM(expMessage);
				 
				  if(actMessage.equalsIgnoreCase(expMessage))
				  {
					 excelReader.setCellData(xlfile, "Sheet1", 687, 9, resPass);
					 return true;
				  }
				  else
				  {
					 excelReader.setCellData(xlfile, "Sheet1", 687, 9, resFail);
					 return false; 
				  }
					 
					 
		     }
			

			public static boolean checkCloseBtnInWarehouseMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{

				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					  		 		
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitsCloseBtn));
				 
				unitsCloseBtn.click();
				 
				//Thread.sleep(3000);
				 
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
					 
				boolean actlabelDashboard                 = labelDashboard.isDisplayed();
				boolean actselectDashboard                = selectDashboard.isDisplayed();
				boolean actnewAddDashBoard                = newAddDashBoard.isDisplayed();
				boolean actdashboardCustomizationSettings = dashboardCustomizationSettings.isDisplayed();
				
				boolean explabelDashboard                 = true;
				boolean expselectDashboard                = true;
				boolean expnewAddDashBoard                = true;
				boolean expdashboardCustomizationSettings = true;
				
				System.out.println("********************************************** checkCloseBtnInWarehouseMaster ******************");
			
				System.out.println("Home Page labelDashboard Value Actual                      :"+actlabelDashboard+               "  Value Expected : "+explabelDashboard);
				System.out.println("Home Page selectDashboard Value Actual                     :"+actselectDashboard+   "  Value Expected : "+expselectDashboard);
				System.out.println("Home Page newAddDashBoard Actual                           :"+actnewAddDashBoard+    "	 Value Expected : "+expnewAddDashBoard);
				System.out.println("Home Page dashboardCustomizationSettings Value Actual      :"+actdashboardCustomizationSettings+"	 Value Expected : "+expdashboardCustomizationSettings);
				
				if( actlabelDashboard==explabelDashboard  && actselectDashboard==expselectDashboard
						&& actnewAddDashBoard==expnewAddDashBoard && actdashboardCustomizationSettings==expdashboardCustomizationSettings)
				 {
					 excelReader.setCellData(xlfile, "Sheet1", 688, 9, resPass);
					 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
					 userNameDisplay.click();
					  
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
					 logoutOption.click();
					 return true;
				 }
				 else
				 {
					 excelReader.setCellData(xlfile, "Sheet1", 688, 9, resFail);
					 getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
					 userNameDisplay.click();
					  
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
					 logoutOption.click();
					 return false;
				 }
			  }



	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	///////////////////////////////////////////////////////////////////////////////
	
	
	
	
	
 
 public static boolean checkNewButtonInWarehouseMasterOptions() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkNewButtonInWarehouseMasterOptions **************************************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		boolean actClickOnNewBtnErrorMessage   = checkErrorMessageIsDisplayingOrNotDisplaying();
 		boolean expClickOnNewBtnErrorMessage   = true;
 		
        System.out.println("Click On New Button Is Any Error Message Value Actual : " + actClickOnNewBtnErrorMessage + " Value Expected : " + expClickOnNewBtnErrorMessage);
 	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		boolean actMasterName                  = nameTxt.isDisplayed();
		boolean actMasterCode                  = codeTxt.isDisplayed();
		boolean actMasterBins                  = binsCombobox.isDisplayed();
		boolean actMasterPhysicalInventory     = physicalInventoryCountingFrequency.isDisplayed();
		String actGetPhysicalInventoryValue    = physicalInventoryCountingFrequency.getAttribute("value");
		
		excelReader.setCellData(xlfile, xlSheetName, 873, 8, actGetPhysicalInventoryValue);
		
		boolean actMasterWarehouseType         = warehouseType.isDisplayed();

		Select actWarehouseType                = new Select(warehouseType);
		String actGetWarehouseFirstValue       = actWarehouseType.getFirstSelectedOption().getText();

		excelReader.setCellData(xlfile, xlSheetName, 874, 8, actGetWarehouseFirstValue);
		
		boolean actMasterSaveBtn               = saveBtn.isDisplayed();
		boolean actMasterCloseBtn              = closeBtn.isDisplayed();

		boolean expMasterName                  = true;
		boolean expMasterCode                  = true;
		boolean expMasterBins                  = true;
		boolean expMasterPhysicalInventory     = true;
		String expGetPhysicalInventoryValue    = excelReader.getCellData(xlSheetName, 873, 7);
		boolean expMasterWarehouseType         = true;

		String expGetWarehouseFirstValue       = excelReader.getCellData(xlSheetName, 874, 7);

		boolean expMasterDoNotMaintain         = true;
		boolean expMasterDoNotMaintainNotCheck = false;
		boolean expMasterSaveBtn               = true;
		boolean expMasterCloseBtn              = true;


		System.out.println("Name Value Actual                        : " + actMasterName +                 " Value Expected : " + expMasterName);
		System.out.println("Code Value Actual                        : " + actMasterCode +                 " Value Expected : " + expMasterCode);
		System.out.println("Bins Value Actual                        : " + actMasterBins +                 " Value Expected : " + expMasterBins);
		System.out.println("Phys Inventory Value Actual              : " + actMasterPhysicalInventory+     " Value Expected : " + expMasterPhysicalInventory);
		System.out.println("Phys Inventory Get Value Actual          : " + actGetPhysicalInventoryValue+   " Value Expected : " + expGetPhysicalInventoryValue);
		System.out.println("Warehouse Type Value Actual              : " + actMasterWarehouseType+         " Value Expected : " + expMasterWarehouseType);
		System.out.println("Warehouse Get Value Actual               : " + actGetWarehouseFirstValue+      " Value Expected : " + expGetWarehouseFirstValue);

		System.out.println("Save Button Value Actual                 : " + actMasterSaveBtn +              " Value Expected : " + expMasterSaveBtn);
		System.out.println("Close Button Value Actual                : " + actMasterCloseBtn +             " Value Expected : " + expMasterCloseBtn);

		
		
		if (actClickOnNewBtnErrorMessage == expClickOnNewBtnErrorMessage

				&& actMasterName == expMasterName && actMasterCode == expMasterCode && actMasterBins == expMasterBins
				&& actMasterPhysicalInventory == expMasterPhysicalInventory
				&& actGetPhysicalInventoryValue.equalsIgnoreCase(expGetPhysicalInventoryValue)
				&& actMasterWarehouseType == expMasterWarehouseType
				&& actGetWarehouseFirstValue.equalsIgnoreCase(expGetWarehouseFirstValue)
				&& actMasterSaveBtn == expMasterSaveBtn && actMasterCloseBtn == expMasterCloseBtn)
	
		{
			excelReader.setCellData(xlfile, xlSheetName, 872, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 872, 9, resFail);
			return false;
		}
    }
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 872, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

 
 public static boolean checkSaveButtonInWarehouseMasterCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("********************************** checkNewButtonInWarehouseMasterOptions **************************************************");

	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 876, 6));
		getAction().moveToElement(nameTxt).sendKeys(Keys.TAB).perform();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 877, 6));
		getAction().moveToElement(codeTxt).sendKeys(Keys.TAB).perform();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsCombobox));
		binsCombobox.click();
		binsCombobox.sendKeys(excelReader.getCellData(xlSheetName, 878, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		
       String exWarehouseSaveMessage = excelReader.getCellData(xlSheetName, 879, 7);
		
		//excelReader.setCellData(xlfile, xlSheetName, 1666, 8, exWarehouseSaveMessage);
		
		boolean MasterSave = checkValidationMessageboolean(exWarehouseSaveMessage);
		
		
		String actMasterSave= Boolean.toString(MasterSave);
		String expMasterSave=excelReader.getCellData(xlSheetName, 880, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 880, 8, actMasterSave.toUpperCase());
		
		System.out.println("Input Valid and Click On Save Button      : " + actMasterSave + "  Value Expected : "+ expMasterSave);
		
		boolean actMasterName                  = nameTxt.getText().isEmpty();
		boolean actMasterCode                  = codeTxt.getText().isEmpty();
		boolean actMasterBins                  = binsCombobox.getAttribute("value").isEmpty();
		boolean actMasterPhysicalInventory     = physicalInventoryCountingFrequency.isDisplayed();
		String actGetPhysicalInventoryValue    = physicalInventoryCountingFrequency.getAttribute("value");
		boolean actMasterWarehouseType         = warehouseType.isDisplayed();

		Select actWarehouseType                = new Select(warehouseType);
		String actGetWarehouseFirstValue       = actWarehouseType.getFirstSelectedOption().getText();

/*		boolean actMasterDoNotMaintain         = doNotMain.isDisplayed();
		boolean actMasterDoNotMaintainNotCheck = doNotMain.isSelected();*/
		boolean actMasterSaveBtn               = saveBtn.isDisplayed();
		boolean actMasterCloseBtn              = closeBtn.isDisplayed();

		boolean expMasterName                  = true;
		boolean expMasterCode                  = true;
		boolean expMasterBins                  = true;
		boolean expMasterPhysicalInventory     = true;
		String expGetPhysicalInventoryValue    = "0";
		boolean expMasterWarehouseType         = true;

		String expGetWarehouseFirstValue       = "Normal";

/*		boolean expMasterDoNotMaintain         = true;
		boolean expMasterDoNotMaintainNotCheck = false;*/
		boolean expMasterSaveBtn               = true;
		boolean expMasterCloseBtn              = true;
		
		System.out.println("Input Name Code and Click on Save Button : " + actMasterSave +                 " Value Expected : " + expMasterSave);
		System.out.println("Name Value Actual                        : " + actMasterName +                 " Value Expected : " + expMasterName);
		System.out.println("Code Value Actual                        : " + actMasterCode +                 " Value Expected : " + expMasterCode);
		System.out.println("Bins Value Actual                        : " + actMasterBins +                 " Value Expected : " + expMasterBins);
		System.out.println("Phys Inventory Value Actual              : " + actMasterPhysicalInventory+     " Value Expected : " + expMasterPhysicalInventory);
		System.out.println("Phys Inventory Get Value Actual          : " + actGetPhysicalInventoryValue+   " Value Expected : " + expGetPhysicalInventoryValue);
		System.out.println("Warehouse Type Value Actual              : " + actMasterWarehouseType+         " Value Expected : " + expMasterWarehouseType);
		System.out.println("Warehouse Get Value Actual               : " + actGetWarehouseFirstValue+      " Value Expected : " + expGetWarehouseFirstValue);
		/*System.out.println("Do Not Maintain Value Actual             : " + actMasterDoNotMaintain+         " Value Expected : " + expMasterDoNotMaintain);
		System.out.println("Do Not Maintain Not Select Value Actual  : " + actMasterDoNotMaintainNotCheck+ " Value Expected : " + expMasterDoNotMaintainNotCheck);*/
		System.out.println("Save Button Value Actual                 : " + actMasterSaveBtn +              " Value Expected : " + expMasterSaveBtn);
		System.out.println("Close Button Value Actual                : " + actMasterCloseBtn +             " Value Expected : " + expMasterCloseBtn);


		if (actMasterSave.equalsIgnoreCase(expMasterSave)

				&& actMasterName == expMasterName && actMasterCode == expMasterCode && actMasterBins == expMasterBins

				&& actMasterPhysicalInventory == expMasterPhysicalInventory
				&& actGetPhysicalInventoryValue.equalsIgnoreCase(expGetPhysicalInventoryValue)
				&& actMasterWarehouseType == expMasterWarehouseType
				&& actGetWarehouseFirstValue.equalsIgnoreCase(expGetWarehouseFirstValue)
	/*			&& actMasterDoNotMaintain == expMasterDoNotMaintain
				&& actMasterDoNotMaintainNotCheck == expMasterDoNotMaintainNotCheck*/
				&& actMasterSaveBtn == expMasterSaveBtn && actMasterCloseBtn == expMasterCloseBtn) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 875, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 875, 9, resFail);
			return false;
		}
    }
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 875, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
 
 
 
 public static boolean checkCloseButtonInWarehouseGroupCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************************** checkCloseButtonInWarehouseGroupCreationPage *******************************************************");

	try
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		boolean ClickOnCloseBtnErrorMessage   = checkErrorMessageIsDisplayingOrNotDisplaying();
 		
 		String actClickOnCloseBtnErrorMessage=Boolean.toString(ClickOnCloseBtnErrorMessage);
 		String expClickOnCloseBtnErrorMessage=excelReader.getCellData(xlSheetName, 882, 7);
 		
 		
 		excelReader.setCellData(xlfile, xlSheetName, 882, 8, actClickOnCloseBtnErrorMessage.toUpperCase());
 		
        System.out.println("Click On New Button Is Any Error Message Value Actual : " + actClickOnCloseBtnErrorMessage + " Value Expected : " + expClickOnCloseBtnErrorMessage);
 	

        ArrayList<String> actmasterDepNameList=new ArrayList<String>();
 		
 		int HeaderCount =masterDepNameList.size();
 		
 		System.err.println("HeaderCount   :  "+HeaderCount);
 		
 		for (int i = 0; i < HeaderCount; i++) 
 		{
 			String data=masterDepNameList.get(i).getText();
 			actmasterDepNameList.add(data);
 		}
 		
 	
 		 String actMasterDepNameTextList=actmasterDepNameList.toString();
 		 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 883, 7);
 		
 		 excelReader.setCellData(xlfile, xlSheetName, 883, 8, actMasterDepNameTextList);
    	
    	 System.err.println("  Actual MasterDepNameTextList : "+actMasterDepNameTextList);
    	 System.err.println("  Expected  MasterDepNameTextList : "+expMasterDepNameTextList);
    	 
    	 
		if (actClickOnCloseBtnErrorMessage .equalsIgnoreCase(expClickOnCloseBtnErrorMessage)

				&& actMasterDepNameTextList.equalsIgnoreCase(expMasterDepNameTextList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 881, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 881, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 881, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

	// Edit Option in The Masters Fo Bin Group Master
 
    @FindBy(xpath="//tr[6]//td[8]//div[1]//label[1]//input[1]")
	private static WebElement unitSixthCheckBox;

  public static boolean checkEditOptionForNewlyCreateAddGroupWarehouse() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************************** checkEditOptionForNewlyCreateAddGroupWarehouse *******************************************************");

   try
   {
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
        unitFirstCheckBox.click();

		boolean ClickOnCheckBoxToSelectErrorMessage   = checkErrorMessageIsDisplayingOrNotDisplaying();
 		
 		
 		String actClickOnCheckBoxToSelectErrorMessage=Boolean.toString(ClickOnCheckBoxToSelectErrorMessage);
 		String expClickOnCheckBoxToSelectErrorMessage=excelReader.getCellData(xlSheetName, 885, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 885, 8, actClickOnCheckBoxToSelectErrorMessage.toUpperCase());
 		
 		
        System.out.println("Check Check Box Is Any Error Message Value Actual : " + actClickOnCheckBoxToSelectErrorMessage + " Value Expected : " + expClickOnCheckBoxToSelectErrorMessage);
 	
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		boolean ClickOnEditBtnErrorMessage   = checkErrorMessageIsDisplayingOrNotDisplaying();
 		
 		String actClickOnEditBtnErrorMessage=Boolean.toString(ClickOnEditBtnErrorMessage);
 		String expClickOnEditBtnErrorMessage=excelReader.getCellData(xlSheetName, 886, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 886, 8, actClickOnEditBtnErrorMessage.toUpperCase());
 		
        System.out.println("Click On Edit Button Is Any Error Message Value Actual : " + actClickOnEditBtnErrorMessage + " Value Expected : " + expClickOnEditBtnErrorMessage);
 	
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseType));
		String actMasterName                    = nameTxt.getAttribute("value");
		String actMasterCode                    = codeTxt.getAttribute("value");
		boolean actMasterBins                   = binsCombobox.isDisplayed();
		
		/*Select actMasterSelectedBins            = new Select(binsCombobox);
		String actMasterSelectedBinName         = actMasterSelectedBins.getFirstSelectedOption().getText();*/
		
		boolean actMasterPhysicalInventory      = physicalInventoryCountingFrequency.isDisplayed();
		String actGetPhysicalInventoryValue     = physicalInventoryCountingFrequency.getAttribute("value");
		boolean actMasterWarehouseType          = warehouseType.isDisplayed();

		Select actWarehouseType                 = new Select(warehouseType);
		String actGetWarehouseFirstValue        = actWarehouseType.getFirstSelectedOption().getText();


		excelReader.setCellData(xlfile, xlSheetName, 887, 8, actMasterName);
		excelReader.setCellData(xlfile, xlSheetName, 888, 8, actMasterCode);
		excelReader.setCellData(xlfile, xlSheetName, 889, 8, actGetPhysicalInventoryValue);
		excelReader.setCellData(xlfile, xlSheetName, 890, 8, actGetWarehouseFirstValue);
		
		boolean actMasterSaveBtn                = saveBtn.isDisplayed();
		boolean actMasterCloseBtn               = closeBtn.isDisplayed();

		String expMasterName                    = excelReader.getCellData(xlSheetName, 887, 7);
		String expMasterCode                    = excelReader.getCellData(xlSheetName, 888, 7);
		boolean expMasterBins                   = true;
		boolean expMasterPhysicalInventory      = true;
		String expGetPhysicalInventoryValue     = excelReader.getCellData(xlSheetName, 889, 7);
		boolean expMasterWarehouseType          = true;
		//String expMasterSelectedBinName         = "BG2";
		String expGetWarehouseFirstValue        = excelReader.getCellData(xlSheetName, 890, 7);

		boolean expMasterSaveBtn                = true;
		boolean expMasterCloseBtn               = true;

		System.out.println("************************************************** FieldsInGeneralDisplayAfterCreationNewWarehouse  **********************************************************************");

		System.out.println("Name Value Actual                            : " + actMasterName +                 "  Value Expected : " + expMasterName);
		System.out.println("Code Value Actual                            : " + actMasterCode +                 "  Value Expected : " + expMasterCode);
		System.out.println("Bins Value Actual                            : " + actMasterBins +                 "  Value Expected : " + expMasterBins);
		System.out.println("Phys Inventory Value Actual                  : " + actMasterPhysicalInventory+     "  Value Expected : " + expMasterPhysicalInventory);
		System.out.println("Phys Inventory Value Actual                  : " + actGetPhysicalInventoryValue+   "  Value Expected : " + expGetPhysicalInventoryValue);
		//System.out.println("Phys Inventory Value Actual                  : " + actMasterSelectedBinName+       "  Value Expected : " + expMasterSelectedBinName);
		System.out.println("Warehouse Type Value Actual                  : " + actMasterWarehouseType+         "  Value Expected : " + expMasterWarehouseType);
		
		System.out.println("Warehouse Type First Value Actual            : " + actGetWarehouseFirstValue+      "  Value Expected : " + expGetWarehouseFirstValue);

		System.out.println("Save Button Value Actual                     : " + actMasterSaveBtn +              "  Value Expected : " + expMasterSaveBtn);
		System.out.println("Close Button Value Actual                    : " + actMasterCloseBtn +             "  Value Expected : " + expMasterCloseBtn);

		if (actClickOnCheckBoxToSelectErrorMessage .equalsIgnoreCase(expClickOnCheckBoxToSelectErrorMessage)
				&& actClickOnEditBtnErrorMessage .equalsIgnoreCase( expClickOnEditBtnErrorMessage)

				&& actMasterName.equalsIgnoreCase(expMasterName) && actMasterCode == actMasterCode
				&& actMasterBins == actMasterBins

				&& actMasterPhysicalInventory == actMasterPhysicalInventory
				&& actGetPhysicalInventoryValue.equalsIgnoreCase(actGetPhysicalInventoryValue)
				&& actMasterWarehouseType == actMasterWarehouseType
				&& actGetWarehouseFirstValue.equalsIgnoreCase(actGetWarehouseFirstValue)
				&& actMasterSaveBtn == expMasterSaveBtn && actMasterCloseBtn == expMasterCloseBtn) 
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 884, 9, resPass);
			return true;
		} 
		else 
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 884, 9, resFail);
			return false;
		}
    }
   catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 884, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }

 }

 public static boolean checkSaveByUpdatingNameAndCodeInWarehouseGroupCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
 {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("************************************************** checkSaveByUpdatingNameAndCodeInWarehouseGroupCreationPage ***************************************");
	
    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.clear();
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 892, 6));
		getAction().moveToElement(nameTxt).sendKeys(Keys.TAB).perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.clear();
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 893, 6));
		Thread.sleep(2000);
		                 
        boolean ClickOnCheckBoxToSelectErrorMessage   = checkErrorMessageIsDisplayingOrNotDisplaying();
 		
 		
 		String actClickOnCheckBoxToSelectErrorMessage=Boolean.toString(ClickOnCheckBoxToSelectErrorMessage);
 		String expClickOnCheckBoxToSelectErrorMessage=excelReader.getCellData(xlSheetName, 894, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 894, 8, actClickOnCheckBoxToSelectErrorMessage.toUpperCase());
 		
 		
        System.out.println("Check Check Box Is Any Error Message Value Actual : " + actClickOnCheckBoxToSelectErrorMessage + " Value Expected : " + expClickOnCheckBoxToSelectErrorMessage);
 	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		
		
	    String exWarehouseSaveMessage = excelReader.getCellData(xlSheetName, 895, 7);
		
		//excelReader.setCellData(xlfile, xlSheetName, 895, 8, exWarehouseSaveMessage);
		
		boolean MasterSave = checkValidationMessageboolean(exWarehouseSaveMessage);
		
		
		String actMasterSave= Boolean.toString(MasterSave);
		String expMasterSave=excelReader.getCellData(xlSheetName, 896, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 896, 8, actMasterSave.toUpperCase());

		// Here message is closing fast so thats why kept in If Condition is
		// visible then click

		/*if (closeValidationConfirmationMessage.isDisplayed())
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
			closeValidationConfirmationMessage.click();

		}*/

		System.out.println("Check Error Message Before Save                   : " + actClickOnCheckBoxToSelectErrorMessage + "  Value Expected : " + expClickOnCheckBoxToSelectErrorMessage);
		System.out.println("Update Valid Information And Click On Save Button : " + actMasterSave+                      "  Value Expected : " + expMasterSave);

		ArrayList<String> actmasterDepNameList=new ArrayList<String>();
	 		
	 	int HeaderCount =masterDepNameList.size();
	 		
	 	System.err.println("HeaderCount   :  "+HeaderCount);
	 		
	 	for (int i = 0; i < HeaderCount; i++) 
	 	{
	 		String data=masterDepNameList.get(i).getText();
	 		actmasterDepNameList.add(data);
	 	}
	 		 	
	 	 String actMasterDepNameTextList=actmasterDepNameList.toString();
	 	 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 897, 7);
	 		
	 	 excelReader.setCellData(xlfile, xlSheetName, 897, 8, actMasterDepNameTextList);
	    	
	     System.err.println("  Actual MasterDepNameTextList : "+actMasterDepNameTextList);
	     System.err.println("  Expected  MasterDepNameTextList : "+expMasterDepNameTextList);

		if (actClickOnCheckBoxToSelectErrorMessage .equalsIgnoreCase(expClickOnCheckBoxToSelectErrorMessage)
				&& actMasterSave.equalsIgnoreCase(expMasterSave)

				&& actMasterDepNameTextList.equalsIgnoreCase(expMasterDepNameTextList))
		{
			excelReader.setCellData(xlfile, xlSheetName, 891, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 891, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 891, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }

 }

  // Edit Option in The Masters to Check Updated Warehouse Group

  public static boolean checkEditOptionForUpdatedGroupWarehouse() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("************************************************** checkEditOptionForUpdatedGroupBins *******************************************************");
		
    try
    {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
		unitFirstCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		String actMasterName                = nameTxt.getAttribute("value");
		String actMasterCode                = codeTxt.getAttribute("value");
		boolean actMasterBins               = binsCombobox.isDisplayed();
		boolean actMasterPhysicalInventory  = physicalInventoryCountingFrequency.isDisplayed();
		String actGetPhysicalInventoryValue = physicalInventoryCountingFrequency.getAttribute("value");
		boolean actMasterWarehouseType      = warehouseType.isDisplayed();

		Select actWarehouseType             = new Select(warehouseType);
		String actGetWarehouseFirstValue    = actWarehouseType.getFirstSelectedOption().getText();

		boolean actMasterSaveBtn            = saveBtn.isDisplayed();
		boolean actMasterCloseBtn           = closeBtn.isDisplayed();

		excelReader.setCellData(xlfile, xlSheetName, 899, 8, actMasterName);
		excelReader.setCellData(xlfile, xlSheetName, 900, 8, actMasterCode);
		excelReader.setCellData(xlfile, xlSheetName, 901, 8, actGetPhysicalInventoryValue);
		excelReader.setCellData(xlfile, xlSheetName, 902, 8, actGetWarehouseFirstValue);
		
		
		String expMasterName                = excelReader.getCellData(xlSheetName, 899, 7);
		String expMasterCode                = excelReader.getCellData(xlSheetName, 900, 7);
		boolean expMasterBins               = true;
		boolean expMasterPhysicalInventory  = true;
		String expGetPhysicalInventoryValue = excelReader.getCellData(xlSheetName, 901, 7);
		boolean expMasterWarehouseType      = true;

		String expGetWarehouseFirstValue    = excelReader.getCellData(xlSheetName, 902, 7);

		boolean expMasterSaveBtn            = true;
		boolean expMasterCloseBtn           = true;

		System.out.println("***************************************** FieldsInGeneralDisplayAfterCreationNewWarehouse  ********************************************");

		System.out.println("Name Value Actual                            : " + actMasterName +               " Value Expected : " + expMasterName);
		System.out.println("Code Value Actual                            : " + actMasterCode +               " Value Expected : " + expMasterCode);
		System.out.println("Bins Value Actual                            : " + actMasterBins +               " Value Expected : " + expMasterBins);
		System.out.println("Phys Inventory Value Actual                  : " + actMasterPhysicalInventory +  " Value Expected : " + expMasterPhysicalInventory);
		System.out.println("Phys Inventory Value Actual                  : " + actGetPhysicalInventoryValue+ " Value Expected : " + expGetPhysicalInventoryValue);
		System.out.println("Warehouse Type Value Actual                  : " + actMasterWarehouseType +      " Value Expected : " + expMasterWarehouseType);
		System.out.println("Do Not Maintain Value Actual                 : " + actGetWarehouseFirstValue+    " Value Expected : " + expGetWarehouseFirstValue);
		System.out.println("Close Button Value Actual                    : " + actMasterSaveBtn +            " Value Expected : " + expMasterSaveBtn);
		System.out.println("Close Button Value Actual                    : " + actMasterCloseBtn +           " Value Expected : " + expMasterCloseBtn);

		if (actMasterName.equalsIgnoreCase(expMasterName) && actMasterCode == actMasterCode
				&& actMasterBins == actMasterBins

				&& actMasterPhysicalInventory == actMasterPhysicalInventory
				&& actGetPhysicalInventoryValue.equalsIgnoreCase(actGetPhysicalInventoryValue)
				&& actMasterWarehouseType == actMasterWarehouseType
				&& actGetWarehouseFirstValue.equalsIgnoreCase(actGetWarehouseFirstValue)
				&& actMasterSaveBtn == expMasterSaveBtn && actMasterCloseBtn == expMasterCloseBtn) 
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 898, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 898, 9, resFail);
			return false;
		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 898, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

  public static boolean checkCloseButtonOnEditWarehouseGroupCreationPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("************************************************** checkCloseButtonBinGroupCreationPage *******************************************************");
	
	try
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloseBtn));
		editcloseBtn.click();

		boolean ClickOnCloseBtnErrorMessage   = checkErrorMessageIsDisplayingOrNotDisplaying();
 		
 		String actClickOnCloseBtnErrorMessage=Boolean.toString(ClickOnCloseBtnErrorMessage);
 		String expClickOnCloseBtnErrorMessage=excelReader.getCellData(xlSheetName, 904, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 904, 8, actClickOnCloseBtnErrorMessage.toUpperCase());
 		
        System.out.println("Click On New Button Is Any Error Message Value Actual : " + actClickOnCloseBtnErrorMessage + " Value Expected : " + expClickOnCloseBtnErrorMessage);
 	
        ArrayList<String> actmasterDepNameList=new ArrayList<String>();
 		
	 	int HeaderCount =masterDepNameList.size();
	 		
	 	System.err.println("HeaderCount   :  "+HeaderCount);
	 		
	 	for (int i = 0; i < HeaderCount; i++) 
	 	{
	 		String data=masterDepNameList.get(i).getText();
	 		actmasterDepNameList.add(data);
	 	}
	 	
	 	 String actMasterDepNameTextList=actmasterDepNameList.toString();
	 	 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 905, 7);
	 		
	 	 excelReader.setCellData(xlfile, xlSheetName, 905, 8, actMasterDepNameTextList);
	    	
	     System.err.println("  Actual MasterDepNameTextList : "+actMasterDepNameTextList);
	     System.err.println("  Expected  MasterDepNameTextList : "+expMasterDepNameTextList);
	     
	     
		if (actClickOnCloseBtnErrorMessage.equalsIgnoreCase(expClickOnCloseBtnErrorMessage)

				&& actMasterDepNameTextList.equalsIgnoreCase(expMasterDepNameTextList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 903, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 903, 9, resFail);
			return false;
		}
	}
	
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 903, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	
	}

 
 
  /*public static boolean checkUnCheckingSelectWarehouseAndCheckUnSelectWarehouse() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
 	excelReader = new ExcelReader(POJOUtility.getExcelPath());
 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

 	System.out.println("********************************** checkUnCheckingSelectWarehouseAndCheckUnSelectWarehouse ************************************************");
 		
 	try
 	{
 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
 		unitFirstCheckBox.click();

 		boolean UnCheckErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
 		
 		String actUnCheckErrorMessage=Boolean.toString(UnCheckErrorMessage);
 		String expUnCheckErrorMessage=excelReader.getCellData(xlSheetName, 907, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 907, 8, actUnCheckErrorMessage);
 		
 		
 	    System.out.println("Click On Edit Button Is Any Error Message Value Actual : " + actUnCheckErrorMessage + " Value Expected : " + expUnCheckErrorMessage);
 		
 		boolean ServerErrorMessage  = checkServerErrorMessageIsNotDisplay();
  		
 		String actServerErrorMessage=Boolean.toString(ServerErrorMessage);
 		String expServerErrorMessage=excelReader.getCellData(xlSheetName, 908, 7);

 		excelReader.setCellData(xlfile, xlSheetName, 908, 8, actServerErrorMessage);
 				
  		System.out.println("Un Checking Bins Error Message                         : " + actServerErrorMessage +   " Value Expected : " +  expServerErrorMessage);
 		
 		if (actUnCheckErrorMessage.equalsIgnoreCase(expUnCheckErrorMessage)
 				&& actServerErrorMessage.equalsIgnoreCase(expServerErrorMessage)) 
 		{
 			
 			excelReader.setCellData(xlfile, xlSheetName, 906, 9, resPass);
 			return true;
 		}
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 906, 9, resFail);
 			return false;
 		}
 	}
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 906, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
   }*/
  

  public static boolean chekDeleteWarehouseOptionForWarhouseMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
 	excelReader = new ExcelReader(POJOUtility.getExcelPath());
 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

 	System.out.println("************************************************** chekDeleteWarehouseOptionForWarhouseMasterPage *******************************************************");
 	
 	try
 	{
 		/*if(unitFirstCheckBox.isSelected())
 		{
 			System.out.println("Check Box is Selected");
 		}
 		else
 		{
 			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
 			unitFirstCheckBox.click();
 		}*/
 		
 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
 		unitFirstCheckBox.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
 		masterDeleteBtn.click();		

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
 		System.out.println(getMsgOnDelete.getText());

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
 		clickOnOkInDelete.click();	
 		
        String expSaveMessage = excelReader.getCellData(xlSheetName, 910, 7);
		
        //excelReader.setCellData(xlfile, xlSheetName, 910, 8, expSaveMessage);
        
		boolean ValidationConfirmationMessageOnDelete = checkValidationMessageboolean(expSaveMessage);
		
		
		String actValidationConfirmationMessageOnDelete=Boolean.toString(ValidationConfirmationMessageOnDelete);
	    String expValidationConfirmationMessageOnDelete = excelReader.getCellData(xlSheetName, 911, 7);
		
		 excelReader.setCellData(xlfile, xlSheetName, 911, 8, actValidationConfirmationMessageOnDelete.toUpperCase());
		 
		 
		 ArrayList<String> actmasterDepNameList=new ArrayList<String>();
			
		 int HeaderCount =masterDepNameList.size();
			
		 System.err.println("HeaderCount   :  "+HeaderCount);
			
		 for (int i = 0; i < HeaderCount; i++) 
		 {
			String data=masterDepNameList.get(i).getText();
			actmasterDepNameList.add(data);
		 }
		
		 String actMasterDepNameTextList=actmasterDepNameList.toString();
		 String expMasterDepNameTextList=excelReader.getCellData(xlSheetName, 912, 7);
			
		 excelReader.setCellData(xlfile, xlSheetName, 912, 8, actMasterDepNameTextList);
		
		 System.err.println("  Actual MasterDepNameTextList : "+actMasterDepNameTextList);
		 System.err.println("  Expected  MasterDepNameTextList : "+expMasterDepNameTextList);
 		

 		if (actValidationConfirmationMessageOnDelete.equalsIgnoreCase(expValidationConfirmationMessageOnDelete)
 				&& actMasterDepNameTextList.equalsIgnoreCase(expMasterDepNameTextList)) 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 909, 9, resPass);
 			return true;
 		} 
 		else
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 909, 9, resFail);
 			return false;
 		}
 	}
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 909, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
  
  
  
  
  
  
  
  
  public static boolean checkSaveWarhouse() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
 	excelReader = new ExcelReader(POJOUtility.getExcelPath());
 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

 	System.out.println("********************************** checkNewButtonInWarehouseMasterOptions **************************************************");

 	try
 	{
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();
		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
 		nameTxt.click();
 		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 876, 6));
 		getAction().moveToElement(nameTxt).sendKeys(Keys.TAB).perform();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
 		codeTxt.click();
 		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 877, 6));
 		getAction().moveToElement(codeTxt).sendKeys(Keys.TAB).perform();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsCombobox));
 		binsCombobox.click();
 		binsCombobox.sendKeys(excelReader.getCellData(xlSheetName, 878, 6));
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
 		nameTxt.click();

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
 		saveBtn.click();

 		
        String exWarehouseSaveMessage = excelReader.getCellData(xlSheetName, 879, 7);
 		
 		//excelReader.setCellData(xlfile, xlSheetName, 1666, 8, exWarehouseSaveMessage);
 		
 		boolean MasterSave = checkValidationMessageboolean(exWarehouseSaveMessage);
 		
 		
 		String actMasterSave= Boolean.toString(MasterSave);
 		String expMasterSave=excelReader.getCellData(xlSheetName, 880, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 880, 8, actMasterSave.toUpperCase());
 		
 		
 		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();
 		
 		System.out.println("Input Valid and Click On Save Button      : " + actMasterSave + "  Value Expected : "+ expMasterSave);
 		
 		
 		
 		
 		if (actMasterSave.equalsIgnoreCase(expMasterSave)) 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 875, 9, resPass);
 			return true;
 		}
 		else 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 875, 9, resFail);
 			return false;
 		}
     }
 	catch (Exception e) 
 	  {
 		  String exception =e.getMessage();
 		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 875, 10, exception);
 		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
 		  return false;
 	  }
   }

  
  
  
  
  
  
  
  
  
  
  
  
  public static boolean checkCloseWarehouseMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
 	excelReader = new ExcelReader(POJOUtility.getExcelPath());
 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

 	System.out.println("********************************** checkCloseWarehouseMaster ********************************");

    try
    {
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCloseBtn));
 		itemCloseBtn.click();

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

 		boolean actLoadDashboard          = labelDashboard.isDisplayed();
 		boolean actSelectDashboard        = selectDashboard.isDisplayed();
 		boolean actNewDashboard           = newAddDashBoard.isDisplayed();
 		boolean actDashboardCustomization = dashboardCustomizationSettings.isDisplayed();

 		boolean expLoadDashboard          = true;
 		boolean expSelectDashboard        = true;
 		boolean expNewDashboard           = true;
 		boolean expDashboardCustomization = true;

 		System.out.println("Load Dashbord Value Actual          : " + actLoadDashboard +         " Value Expected : " + expLoadDashboard);
 		System.out.println("Select Dashbord Value Actual        : " + actSelectDashboard +       " Value Expected : " + expSelectDashboard);
 		System.out.println("New Dashbord Value Actual           : " + actNewDashboard +          " Value Expected : " + expNewDashboard);
 		System.out.println("Dashbord Customization Value Actual : " + actDashboardCustomization+ " Value Expected : " + expDashboardCustomization);

 		Boolean displayResult=actLoadDashboard == expLoadDashboard && actSelectDashboard == expSelectDashboard
 				&& actNewDashboard == expNewDashboard && actDashboardCustomization == expDashboardCustomization;
 		
 		
 		String actDisplayResult=Boolean.toString(displayResult);
 		String expDisplayResult=excelReader.getCellData(xlSheetName, 914, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 914, 8, actDisplayResult.toUpperCase());
 		
 		
 		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 915, 7);

		excelReader.setCellData(xlfile, xlSheetName, 915, 8, actDashboardLabel);
 		
 		if (actDisplayResult.equalsIgnoreCase(expDisplayResult) && 
 				actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 913, 9, resPass);
 			return true;
 		}
 		else
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 913, 9, resFail);
 			return false;
 		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 913, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
  
 
  
  
  
  
    //Masters Import Starts From here
  
    @FindBy(xpath = "//span[contains(text(),'Advance Master Import/Export----> Account')]")
	private static WebElement advanceMasterImportAndExportLabel;

	@FindBy(xpath = "//span[contains(text(),'Advance Master Import/Export----> Item')]")
	private static WebElement advanceMasterImportAndExportLabelInItem;

	@FindBy(xpath = "//*[@id='divAdvMasterImportExport']/ul/li[1]/div/span")
	private static WebElement advMasterImpAndExpBulkIcon;
	
	@FindBy(xpath = "//span[@type='button']")
	private static WebElement bulkImportOption;
	
	@FindBy(xpath = "//a[contains(text(),'Bulk Import')]")
	private static WebElement importInBulkImportOption;

	@FindBy(xpath = "//span[@id='btnMappingForAdvanceMasterPopUp']")
	private static WebElement advMasterImpAndExpSAvMappingIcon;

	@FindBy(xpath = "//span[@id='btnProformaExportForAdvanceMasterPopUp']")
	private static WebElement advMasterImpAndExpExportIcon;

	@FindBy(xpath = "//*[@id='btnImportMastersBulkData']")
	private static WebElement advMasterImpAndExpBulkImport;
	
	
	
	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/ul[1]/li[2]/span[3]")
	private static WebElement advMasterImpAndExpImportIcon;

	@FindBy(xpath = "//*[@id='divAdvMasterImportExport']/ul/li[2]/span[4]")
	private static WebElement advMasterImpAndExpCloseIcon;

	// Body Fields
	@FindBy(xpath = "//input[@id='txtAdvImportFileName']")
	private static WebElement advMasterImpAndExpFileName;

	@FindBy(xpath = "//button[@id='btnFile']")
	private static WebElement advMasterImpAndExpUploadFileBtn;

	@FindBy(xpath = "//input[@id='id_MasterExportTemplate']")
	private static WebElement advMasterImpAndExpTemplateName;

	@FindBy(xpath = "//*[@id='id_MasterExportTemplate_input_settings']/span")
	private static WebElement advMasterImpAndExpTemplateSettingBtn;

	@FindBy(xpath = "//select[@id='ddlHeaderFieldAction']")
	private static WebElement advMasterImpAndExpHeaderFieldsDropdown;

	@FindBy(xpath = "//select[@id='ddlImportAction']")
	private static WebElement advMasterImpAndExpBodyFeildsDropdown;

	@FindBy(xpath = "//select[@id='ddlBulkImport']")
	private static WebElement advMasterImpAndExpBulkImportDropdown;

	@FindBy(xpath = "//div[@id='divAdvGrid1']")
	private static WebElement advMasterImpAndExpHeaderFiledArea;

	@FindBy(xpath = "//div[@id='divAdvGrid2']")
	private static WebElement advMasterImpAndExpBodyFiledArea;

	@FindBy(xpath = "//*[@id='0']/a")
	private static WebElement accountlable;

  
  public static boolean checkAdvanceImportExportOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	System.out.println("*********************************************** checkAdvanceImportExportOption  **********************************************************");
	Thread.sleep(2000);
	
	 try
	{
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
    	homeMenu.click();

        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu)); 
    	mastersMenu.click();

        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
	    accounts.click();
	
	    getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
	    masterRibbonToExpandOptions.click();

	    getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));
	    masterAdvanceMasterImportORExportBtn.click();

		boolean actAdvImportExportLabel = advanceMasterImportAndExportLabel.isDisplayed();
		boolean actAdvImportExportBulkIcon = advMasterImpAndExpBulkIcon.isDisplayed();
		boolean actAdvImportExportMappingIcon = advMasterImpAndExpSAvMappingIcon.isDisplayed();
		boolean actAdvExportIcon = advMasterImpAndExpExportIcon.isDisplayed();
		boolean actAdvImportIocn = advMasterImpAndExpImportIcon.isDisplayed();
		boolean actAdvImportCloseIcon = advMasterImpAndExpCloseIcon.isDisplayed();
		boolean actAdvImportExportFileName = advMasterImpAndExpFileName.isDisplayed();
		boolean actAdvImportExportUpload = advMasterImpAndExpUploadFileBtn.isDisplayed();
		boolean actAdvImportExportTemplateName = advMasterImpAndExpTemplateName.isDisplayed();
		boolean actAdvImportExportTemplateSettings = advMasterImpAndExpTemplateSettingBtn.isDisplayed();
		boolean actAdvImportExportHeaderDropdown = advMasterImpAndExpHeaderFieldsDropdown.isDisplayed();
		boolean actAdvImportExportBodyDropdown = advMasterImpAndExpBodyFeildsDropdown.isDisplayed();
		boolean actAdvImportExportBulkImport = advMasterImpAndExpBulkImportDropdown.isDisplayed();
		boolean actAdvImportExportHeaderFieldArea = advMasterImpAndExpHeaderFiledArea.isDisplayed();
		boolean actAdvImportExportBodyFieldArea = advMasterImpAndExpBodyFiledArea.isDisplayed();

		boolean expAdvImportExportLabel = true;
		boolean expAdvImportExportBulkIcon = true;
		boolean expAdvImportExportMappingIcon = true;
		boolean expAdvExportIcon = true;
		boolean expAdvImportIocn = true;
		boolean expAdvImportCloseIcon = true;
		boolean expAdvImportExportFileName = true;
		boolean expAdvImportExportUpload = true;
		boolean expAdvImportExportTemplateName = true;
		boolean expAdvImportExportTemplateSettings = true;
		boolean expAdvImportExportHeaderDropdown = true;
		boolean expAdvImportExportBodyDropdown = true;
		boolean expAdvImportExportBulkImport = true;
		boolean expAdvImportExportHeaderFieldArea = true;
		boolean expAdvImportExportBodyFieldArea = true;

		System.out.println("AdvImportExportLabels              : " + actAdvImportExportLabel + "  Value Expected : "+ expAdvImportExportLabel);
		System.out.println("AdvImportExportBulkIcon            : " + actAdvImportExportBulkIcon + "  Value Expected :" + expAdvImportExportBulkIcon);
		System.out.println("AdvImportExportMappingIcon         : " + actAdvImportExportMappingIcon+ "  Value Expected : " + expAdvImportExportMappingIcon);
		System.out.println("AdvExportIcon                      : " + actAdvExportIcon + "  Value Expected : " + expAdvExportIcon);
		System.out.println("AdvImportIocn                      : " + actAdvImportIocn + "  Value Expected : " + expAdvImportIocn);
		System.out.println("AdvImportCloseIcon                 : " + actAdvImportCloseIcon + "  Value Expected : "+ expAdvImportCloseIcon);
		System.out.println("AdvImportExportFileName            : " + actAdvImportExportFileName + "  Value Expected : "+ expAdvImportExportFileName);
		System.out.println("AdvImportExportUpload              : " + actAdvImportExportUpload + "  Value Expected : "+ expAdvImportExportUpload);
		System.out.println("AdvImportExportTemplateName        : " + actAdvImportExportTemplateName+ "  Value Expected : " + expAdvImportExportTemplateName);
		System.out.println("AdvImportExportTemplateSettings    : " + actAdvImportExportTemplateSettings+ "  Value Expected : " + expAdvImportExportTemplateSettings);
		System.out.println("AdvImportExportHeaderDropdown      : " + actAdvImportExportHeaderDropdown+ "  Value Expected : " + expAdvImportExportHeaderDropdown);
		System.out.println("AdvImportExportBodyDropdown        : " + actAdvImportExportBodyDropdown+ "  Value Expected : " + expAdvImportExportBodyDropdown);
		System.out.println("AdvImportExportBulkImport          : " + actAdvImportExportBulkImport+ "  Value Expected : " + expAdvImportExportBulkImport);
		System.out.println("AdvImportExportHeaderFieldArea     : " + actAdvImportExportHeaderFieldArea+ "  Value Expected : " + expAdvImportExportHeaderFieldArea);
		System.out.println("AdvImportExportBodyFieldArea       : " + actAdvImportExportBodyFieldArea+ "  Value Expected : " + expAdvImportExportBodyFieldArea);

		if (actAdvImportExportLabel == expAdvImportExportLabel
				&& actAdvImportExportBulkIcon == expAdvImportExportBulkIcon
				&& actAdvImportExportMappingIcon == expAdvImportExportMappingIcon
				&& actAdvExportIcon == expAdvExportIcon && actAdvImportIocn == expAdvImportIocn
				&& actAdvImportCloseIcon == expAdvImportCloseIcon
				&& actAdvImportExportFileName == expAdvImportExportFileName
				&& actAdvImportExportUpload == expAdvImportExportUpload
				&& actAdvImportExportTemplateName == expAdvImportExportTemplateName
				&& actAdvImportExportTemplateSettings == expAdvImportExportTemplateSettings
				&& actAdvImportExportHeaderDropdown == expAdvImportExportHeaderDropdown
				&& actAdvImportExportBodyDropdown == expAdvImportExportBodyDropdown
				&& actAdvImportExportBulkImport == expAdvImportExportBulkImport
				&& actAdvImportExportHeaderFieldArea == expAdvImportExportHeaderFieldArea
				&& actAdvImportExportBodyFieldArea == expAdvImportExportBodyFieldArea)
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
	System.err.println("CATCH BLOCK : MESSAGE IS DISPLAY " + e.getMessage());
	System.err.println("Server Error Popup is Displaying : " + serverErrorPopup.getText());
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(serverErrorClose));
	serverErrorClose.click();
	return false;
	}
		
 }

//Export Click Screen is display

	@FindBy(xpath = "//li[contains(text(),'General')]")
	private static WebElement generalTabExport;

	@FindBy(xpath = "//li[contains(text(),'Settings')]")
	private static WebElement settingsTabExport;

	@FindBy(xpath = "//li[contains(text(),'Details')]")
	private static WebElement detailsTabExport;

	@FindBy(xpath = "//li[contains(text(),'Print Layout')]")
	private static WebElement printLayoutTabExport;

	@FindBy(xpath = "//li[contains(text(),'Tree Tab Update')]")
	private static WebElement treeTabExport;

	@FindBy(xpath = "//li[contains(text(),'Document Tab')]")
	private static WebElement documentTabExport;

	@FindBy(xpath = "//li[contains(text(),'Create Tab')]")
	private static WebElement createTabExport;

	@FindBy(xpath = "//span[@class='font-5'][contains(text(),'Main')]")
	private static WebElement mainTabExport;

	@FindBy(xpath = "//div[@id='tab_1_Main']//li[1]//label[1]")
	private static WebElement nameMainTabExport;

	@FindBy(xpath = "//div[@id='tab_1_Main']//li[2]//label[1]")
	private static WebElement codeMainTabExport;

	@FindBy(xpath = "//div[@id='tab_1_Main']//li[3]//label[1]")
	private static WebElement typeMainTabExport;

	@FindBy(xpath = "//div[@id='tab_1_Main']//li[4]//label[1]")
	private static WebElement creditLimitMainTabExport;

	@FindBy(xpath = "//div[@id='tab_1_Main']//li[5]//label[1]")
	private static WebElement creditDaysMainTabExport;

	@FindBy(xpath = "//div[@id='tab_1_Main']//li[6]//label[1]")
	private static WebElement groupMainTabExport;

	@FindBy(xpath = "//div[@id='tab_1_Main']//li[7]//label[1]")
	private static WebElement parentMainTabExport;

	@FindBy(xpath = "//li[@class='cls1']//span[@class='font-5'][contains(text(),'Header Field')]")
	private static WebElement headerFieldTabExport;

	@FindBy(xpath = "//div[@id='tab_1_HeaderFields']//li[1]//label[1]")
	private static WebElement chequeDiscountMainTabExport;

	@FindBy(xpath = "//div[@id='tab_1_HeaderFields']//li[2]//label[1]")
	private static WebElement rateOfInterestMainTabExport;

	@FindBy(xpath = "//*[@id='tab_1_HeaderFields']/ul/li[3]/label")
	private static WebElement bankAccountMainTabExport;

	@FindBy(xpath = "//*[@id='tab_1_HeaderFields']/ul/li[4]/label")
	private static WebElement pdcDiscountMainTabExport;

	@FindBy(xpath = "//input[@id='btnMasterAdvanceExportSelectAll']")
	private static WebElement selectAllBtnExport;

	@FindBy(xpath = "//span[@id='btnMasterAdvanceExport']")
	private static WebElement exportBtnExport;

	@FindBy(xpath = "//span[@class='theme_icon-color'][contains(text(),'Close')]")
	private static WebElement closeBtnImportExportScreen;

	@FindBy(xpath = "//select[@id='ddlExportExtensionType']")
	private static WebElement xlTypeExport;

	@FindBy(xpath = "//select[@id='ddlMasterAdvanceExportType']")
	private static WebElement withDataExport;
  
  
  public static boolean checkExportOptionInAdvanceImportExport() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		try
		{
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpExportIcon));
		advMasterImpAndExpExportIcon.click();

		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTabExport));

		boolean actGeneralTabInExport = generalTabExport.isDisplayed();
		boolean actSettingsTabInExport = settingsTabExport.isDisplayed();
		boolean actDetailsTabInExport = detailsTabExport.isDisplayed();
		boolean actPrintLayoutTabInExport = printLayoutTabExport.isDisplayed();
/*		boolean actTreeTabInExport = treeTabExport.isDisplayed();
		boolean actCreateTabInExport = createTabExport.isDisplayed();*/
		boolean actMainTabInExport = mainTabExport.isDisplayed();

		boolean actNameInMainTabExport = nameMainTabExport.isDisplayed();
		boolean actCodeInMainTabExport = codeMainTabExport.isDisplayed();
		boolean actTypeInMainTabExport = typeMainTabExport.isDisplayed();
		boolean actCreditDayInsMainTabExport = creditDaysMainTabExport.isDisplayed();
		boolean actGroupmainTabExport = groupMainTabExport.isDisplayed();
		boolean actParentCodeMainTab = parentMainTabExport.isDisplayed();

		boolean actHeaderFieldTab = headerFieldTabExport.isDisplayed();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerFieldTabExport));
		headerFieldTabExport.click();

		boolean actChequeDiscountInExport = chequeDiscountMainTabExport.isDisplayed();
		boolean actRateOfInterestInExport = rateOfInterestMainTabExport.isDisplayed();
		boolean actBankAccountInExport = bankAccountMainTabExport.isDisplayed();
		boolean actPDCDiscountInExport = pdcDiscountMainTabExport.isDisplayed();
		boolean actSelectAllBtnInExport = selectAllBtnExport.isDisplayed();
		boolean actExportBtnInExport = exportBtnExport.isDisplayed();
		boolean actCloseBtnInExport = closeBtnImportExportScreen.isDisplayed();
		boolean actExportTypeInExport = xlTypeExport.isDisplayed();
		boolean actWithDataInExport = withDataExport.isDisplayed();

		boolean expGeneralTabInExport = true;
		boolean expSettingsTabInExport = true;
		boolean expDetailsTabInExport = true;
		boolean expPrintLayoutTabInExport = true;
/*		boolean expTreeTabInExport = true;
		boolean expCreateTabInExport = true;*/
		boolean expMainTabInExport = true;
		boolean expChequeDiscountInExport = true;
		boolean expRateOfInterestInExport = true;
		boolean expBankAccountInExport = true;
		boolean expPDCDiscountInExport = true;
		boolean expNameInMainTabExport = true;
		boolean expCodeInMainTabExport = true;
		boolean expTypeInMainTabExport = true;
		boolean expCreditDayInsMainTabExport = true;
		boolean expGroupmainTabExport = true;
		boolean expParentCodeMainTab = true;
		boolean expSelectAllBtnInExport = true;
		boolean expExportBtnInExport = true;
		boolean expCloseBtnInExport = true;
		boolean expExportTypeInExport = true;
		boolean expWithDataInExport = true;

		System.out.println("********************************************* checkExportOptionInAdvanceImportExport  **********************************************************");
		System.out.println("General Tab in Export              : " + actGeneralTabInExport + "  Value Expected : "+ expGeneralTabInExport);
		System.out.println("Settings Tab in Export             : " + actSettingsTabInExport + "  Value Expected : "+ expSettingsTabInExport);
		System.out.println("Details Tab in Export              : " + actDetailsTabInExport + "  Value Expected : "+ expDetailsTabInExport);
		System.out.println("Print Layout in Export             : " + actPrintLayoutTabInExport + "  Value Expected : "+ expPrintLayoutTabInExport);
/*		System.out.println("Tree Tab in Export                 : " + actTreeTabInExport + "  Value Expected : "+ expTreeTabInExport);
		System.out.println("Create Tab in Export               : " + actCreateTabInExport + "  Value Expected : "+ expCreateTabInExport);*/
		System.out.println("Main Tab in Export                 : " + actMainTabInExport + "  Value Expected : "+ expMainTabInExport);
		System.out.println("Cheque Discount in Export          : " + actChequeDiscountInExport + "  Value Expected : "+ expChequeDiscountInExport);
		System.out.println("Rate of Interest in Export         : " + actRateOfInterestInExport + "  Value Expected : "+ expRateOfInterestInExport);
		System.out.println("Bank Account in Export             : " + actBankAccountInExport + "  Value Expected : "+ expBankAccountInExport);
		System.out.println("PDC Discount in Export             : " + actPDCDiscountInExport + "  Value Expected : "+ expPDCDiscountInExport);
		System.out.println("Name in Export                     : " + actNameInMainTabExport + "  Value Expected : "+ expNameInMainTabExport);
		System.out.println("Code in Export                     : " + actCodeInMainTabExport + "  Value Expected : "+ expCodeInMainTabExport);
		System.out.println("Type in Export                     : " + actTypeInMainTabExport + "  Value Expected : "+ expTypeInMainTabExport);
		System.out.println("Credit Days in Export              : " + actCreditDayInsMainTabExport+ "  Value Expected : " + expCreditDayInsMainTabExport);
		System.out.println("Group in Export                    : " + actGroupmainTabExport + "  Value Expected : "+ expGroupmainTabExport);
		System.out.println("Parent in Export                   : " + actParentCodeMainTab + "  Value Expected : " + expParentCodeMainTab);
		System.out.println("Select All in Export               : " + actSelectAllBtnInExport + "  Value Expected : " + expSelectAllBtnInExport);
		System.out.println("Export Btn in Export               : " + actExportBtnInExport + "  Value Expected : "				+ expExportBtnInExport);
		System.out.println("Close Btn in Export                : " + actCloseBtnInExport + "  Value Expected : "				+ expCloseBtnInExport);
		System.out.println("Export Type in Export              : " + actExportTypeInExport + "  Value Expected : "				+ expExportTypeInExport);
		System.out.println("withData in Export                 : " + actWithDataInExport + "  Value Expected : "				+ expWithDataInExport);

		if (actGeneralTabInExport == expGeneralTabInExport && actSettingsTabInExport == expSettingsTabInExport
				&& actDetailsTabInExport == expDetailsTabInExport
				&& actPrintLayoutTabInExport == expPrintLayoutTabInExport 
				&& actChequeDiscountInExport == expChequeDiscountInExport
				&& actRateOfInterestInExport == expRateOfInterestInExport
				&& actBankAccountInExport == expBankAccountInExport && actPDCDiscountInExport == expPDCDiscountInExport
				&& actNameInMainTabExport == expNameInMainTabExport && actCodeInMainTabExport == expCodeInMainTabExport
				&& actTypeInMainTabExport == expTypeInMainTabExport
				&& actCreditDayInsMainTabExport == expCreditDayInsMainTabExport
				&& actGroupmainTabExport == expGroupmainTabExport && actParentCodeMainTab == expParentCodeMainTab
				&& actSelectAllBtnInExport == expSelectAllBtnInExport && actExportBtnInExport == expExportBtnInExport
				&& actCloseBtnInExport == expCloseBtnInExport && actExportTypeInExport == expExportTypeInExport
				&& actWithDataInExport == expWithDataInExport) 
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
	System.err.println("CATCH BLOCK : MESSAGE IS DISPLAY " + e.getMessage());
	return false;
	}
  }

	@FindBy(xpath = "//*[@id='chkExtraFieldOne']")
	private static WebElement createTabFieldExtraField;

	public static boolean checkSelectAllOptionInAdvanceImportExport() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("***************************************************** checkExportOptionInAdvanceImportExport  *****************************************************************");
		Thread.sleep(2000);

		try
		{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(mainTabExport));
		mainTabExport.click();
		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllBtnExport));
		selectAllBtnExport.click();

		boolean actNameInMainTabExport = nameMainTabExport.isEnabled();
		boolean actNameInMainTabExporz = nameMainTabExport.isSelected();
		boolean actCodeInMainTabExport = codeMainTabExport.isDisplayed();
		boolean actTypeInMainTabExport = typeMainTabExport.isDisplayed();
		boolean actCreditDayInsMainTabExport = creditDaysMainTabExport.isDisplayed();
		boolean actGroupmainTabExport = groupMainTabExport.isDisplayed();
		boolean actParentCodeMainTab = parentMainTabExport.isDisplayed();

		System.out.println(actNameInMainTabExport);
		System.out.println(actNameInMainTabExporz);

		boolean expNameInMainTabExport = true;
		boolean expNameInMainTabExporz = true;

		boolean expCodeInMainTabExport = true;
		boolean expTypeInMainTabExport = true;
		boolean expCreditDayInsMainTabExport = true;
		boolean expGroupmainTabExport = true;
		boolean expParentCodeMainTab = true;

		System.out.println("General Tab in Export Value Actual                 : " + actNameInMainTabExport+ "  Value Expected : " + expNameInMainTabExport);
		System.out.println("Details Tab in Export Value Actual                 : " + actCodeInMainTabExport				+ "  Value Expected : " + expCodeInMainTabExport);
		System.out.println("Print Layout in Export Value Actual                : " + actTypeInMainTabExport				+ "  Value Expected : " + expTypeInMainTabExport);
		System.out.println("Tree Tab in Export Value Actual                    : " + actCreditDayInsMainTabExport				+ "  Value Expected : " + expCreditDayInsMainTabExport);
		System.out.println("Create Tab in Export Value Actual                  : " + actGroupmainTabExport				+ "  Value Expected : " + expGroupmainTabExport);
		System.out.println("Main Tab in Export Value Actual                    : " + actParentCodeMainTab				+ "  Value Expected : " + expParentCodeMainTab);

		if (actNameInMainTabExport == expNameInMainTabExport && actCodeInMainTabExport == expCodeInMainTabExport
				&& actTypeInMainTabExport == expTypeInMainTabExport
				&& actCreditDayInsMainTabExport == expCreditDayInsMainTabExport
				&& actGroupmainTabExport == expGroupmainTabExport && actParentCodeMainTab == expParentCodeMainTab) {
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
			return true;
		} else
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
	System.err.println("CATCH BLOCK : MESSAGE IS DISPLAY " + e.getMessage());
	System.err.println("Server Error Popup is Displaying : " + serverErrorPopup.getText());
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(serverErrorClose));
	serverErrorClose.click();
	return false;
	}
 }

  
  
	public static boolean checkClickOnCreateTabInAdvanceImportExport() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("***************************************************** checClickOnCreateInAdvanceImportExport  *****************************************************************");
		Thread.sleep(2000);
		
		try
		{

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabExport));
		createTabExport.click();
		Thread.sleep(2000);

		boolean actExtraField = createTabFieldExtraField.isEnabled();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabFieldExtraField));
		createTabFieldExtraField.click();

		System.out.println(createTabFieldExtraField.isSelected());

		boolean actExtraSelected = createTabFieldExtraField.isEnabled();

		boolean expExtraField = true;
		boolean expExtraSelected = true;

		System.out.println("General Tab in Export Value Actual                : " + actExtraField				+ "  Value Expected : " + expExtraField);
		System.out.println("Details Tab in Export Value Actual                : " + actExtraSelected		    + "  Value Expected : " + expExtraSelected);

		if (actExtraField == expExtraField && actExtraSelected == expExtraSelected) 
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
			return true;
		}
		else 
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
	System.err.println("CATCH BLOCK : MESSAGE IS DISPLAY " + e.getMessage());
	System.err.println("Server Error Popup is Displaying : " + serverErrorPopup.getText());
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(serverErrorClose));
	serverErrorClose.click();
	return false;
	}

   }

	public static boolean checkFileDownloadInExportScreen() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("***************************************************** checkFileDownloadInExportScreen  *****************************************************************");
		try
		{
		
		Thread.sleep(5000);
		
		File file = new File(getBaseDir()+"\\autoIt\\ExportFiles\\Account.zip");

		if (file.exists())
		{
			file.delete();

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(exportBtnExport));
			exportBtnExport.click();
			Thread.sleep(3000);
		}
		else
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(exportBtnExport));
			exportBtnExport.click();
			Thread.sleep(3000);
		}

		Thread.sleep(5000);
		
		boolean actIsFileAvailable = file.exists();
		boolean expIsFileAvailable = true;

		System.out.println("Export the File is downloaded Value Actual          : " + actIsFileAvailable				+ "  Value Expected : " + expIsFileAvailable);

		if (actIsFileAvailable == expIsFileAvailable)
		{
			System.out.println("Pass : File Exists");
			return true;
		}
		else
		{
			System.out.println("Fail : File does not Exists");
			return false;
		}
	}
	catch (Exception e) 
	{
	System.err.println("CATCH BLOCK : MESSAGE IS DISPLAY " + e.getMessage());
	System.err.println("Server Error Popup is Displaying : " + serverErrorPopup.getText());
	return false;
	}	
  }

	@FindBy(xpath = "//button[@id='btnFile']")
	private static WebElement browseFileInImportExport;

	@FindBy(xpath = "//div[contains(text(),'General')]")
	private static WebElement generalTextInHeaderAfterImport;

	@FindBy(xpath = "//div[contains(text(),'Base Field')]")
	private static WebElement baseFieldColumnHeadingInHeaderAfterImport;

	@FindBy(xpath = "//div[contains(text(),'External Fields')]")
	private static WebElement externalFieldsColumnHeadingInHeaderAfterImport;

	@FindBy(xpath = "//td[@id='GeneralGrid_col_1-2']")
	private static WebElement nameBaseInGeneralGrid;

	@FindBy(xpath = "//td[@id='GeneralGrid_col_1-3']")
	private static WebElement nameExternalFieldsInGeneralGrid;

	@FindBy(xpath = "//td[@id='GeneralGrid_col_2-2']")
	private static WebElement codeBaseInGeneralField;

	@FindBy(xpath = "//td[@id='GeneralGrid_col_2-3']")
	private static WebElement codeExternalFieldsInGeneralField;

	@FindBy(xpath = "//td[@id='GeneralGrid_col_3-2']")
	private static WebElement accountTypeBaseInGeneralGrid;

	@FindBy(xpath = "//td[@id='GeneralGrid_col_3-3']")
	private static WebElement accountTypeExternalFieldsInGeneralGrid;

	@FindBy(xpath = "//td[@id='GeneralGrid_col_4-2']")
	private static WebElement groupBaseInGenaeralGrid;

	@FindBy(xpath = "//td[@id='GeneralGrid_col_4-3']")
	private static WebElement groupExternalFieldsInGeneralGrid;

	@FindBy(xpath = "//label[contains(text(),'No of Fields')]")
	private static WebElement noOfRecordsImport;

	@FindBy(xpath = "//tbody[@id='LandingGridBody']/tr")
	private static List<WebElement> masterAccountHomeGridCount;

	@FindBy(xpath = "//ul[@id='allMasterCustTabs']//li")
	private static List<WebElement> customizeMasterFieldsTab;

	@FindBy(xpath = "//div[@id='mainTab_0']/div/div/table/tbody/tr")
	private static List<WebElement> masterFieldsGeneralMainTableCount;

	@FindBy(xpath = "//div[@id='HeaderDetails_0']/div/div/table/tbody/tr")
	private static List<WebElement> masterFieldsGeneralHeaderDetailsTableCount;

	@FindBy(xpath = "//div[@id='HeaderDetails_1']/div/div/table/tbody/tr")
	private static List<WebElement> masterFieldsSettingsHeaderDetailsTableCount;

	@FindBy(xpath = "//div[@id='BodyDetails_1']/div/div/table/tbody")
	private static WebElement masterFieldsSettingsBodyDetailsTableCount;

	@FindBy(xpath = "//div[@id='HeaderDetails_2']/div/div/table/tbody/tr")
	private static List<WebElement> masterFieldsDetailsHeaderDetailsTableCount;

	@FindBy(xpath = "//div[@id='BodyDetails_2']/div/div/table/tbody")
	private static WebElement masterFieldsDetailsBodyDetailsTableCount;

	@FindBy(xpath = "//div[@id='HeaderDetails_3']/div/div/table/tbody")
	private static WebElement masterFieldsPageLayoutHeaderDetailsTableCount;

	@FindBy(xpath = "//div[@id='BodyDetails_3']/div/div/table/tbody/tr")
	private static List<WebElement> masterFieldsPageLayoutBodyDetailsTableCount;

	@FindBy(xpath = "//div[@id='HeaderDetails_4']/div/div/table/tbody")
	private static WebElement masterFieldsTreeTabHeaderDetailsTableCount;

	@FindBy(xpath = "//div[@id='BodyDetails_4']/div/div/table/tbody/tr")
	private static List<WebElement> masterFieldsTreeTabBodyDetailsTableCount;

	@FindBy(xpath = "//div[@id='HeaderDetails_5']/div/div/table/tbody")
	private static WebElement masterFieldsDocumentTabHeaderDetailsTableCount;

	@FindBy(xpath = "//div[@id='BodyDetails_5']/div/div/table/tbody/tr")
	private static List<WebElement> masterFieldsDocumentTabBodyDetailsTableCount;

	@FindBy(xpath = "//div[@id='HeaderDetails_6']/div/div/table/tbody/tr")
	private static List<WebElement> masterFieldsCreateTabHeaderDetailsTableCount;

	@FindBy(xpath = "//div[@id='BodyDetails_6']/div/div/table/tbody")
	private static WebElement masterFieldsCreateTabBodyDetailsTableCount;

	@FindBy(xpath = "//div[@id='infoPanelContainer_div']/div")
	private static List<WebElement> masterFieldsInfoPanelCustomizationPanelsCount;

	@FindBy(xpath = "//div[@id='AllReportsDiv_MasterCust']//input")
	private static List<WebElement> masterFieldsReportsChkBoxCount;

	// Item customize
	@FindBy(xpath = "//div[@id='BodyDetails_8']/div/div/table/tbody/tr")
	private static List<WebElement> itemCustomizeCreateTabBodyDetailsTableCount;

	@FindBy(xpath = "//input[@id='sBankAccountName']")
	private static WebElement detailsBankAccountName;

	@FindBy(xpath = "//input[@id='sBankAccountNumber']")
	private static WebElement detailsBankAccountNumber;

	@FindBy(xpath = "//input[@id='sIFSCCode']")
	private static WebElement detailsIFSCCode;

	@FindBy(xpath = "//select[@id='iPaymentType']")
	private static WebElement detailsPaymentType;

	@FindBy(xpath = "//input[@id='sFinanceEmail']")
	private static WebElement detailsFinanceEmail;

	@FindBy(xpath = "//span[contains(text(),'Trade Payable')]")
	private static WebElement accountGroupTradePaybleTitle;

	

	// Mass Update
	@FindBy(xpath = "//input[@id='chkHeader1']")
	private static WebElement massUpdateAccountTypeChkbox;

	@FindBy(xpath = "//input[@id='chkHeader2']")
	private static WebElement massUpdateCreditlimitChkbox;

	@FindBy(xpath = "//input[@id='chkHeader3']")
	private static WebElement massUpdateCreditDaysChkbox;

	@FindBy(xpath = "//input[@id='chkHeader4']")
	private static WebElement massUpdatePasswordChkbox;

	@FindBy(xpath = "//div[contains(text(),'Fields')]")
	private static WebElement massUpdateHeaderFieldTxt;

	@FindBy(xpath = "//div[@class='col-lg-4 col-md-4 col-sm-4 col-xs-4 theme_color'][contains(text(),'Value')]")
	private static WebElement massUpdateHeaderValueTxt;

	@FindBy(xpath = "//div[contains(text(),'Action')]")
	private static WebElement massUpdateHeaderActionTxt;

	@FindBy(xpath = "//*[@id='1104_2_AdvanceFilter']/table/tbody/tr/td[1]/select")
	private static WebElement massUpdateConjuctionDrpdwn;

	@FindBy(xpath = "//*[@id='1104_2_AdvanceFilter']/table/tbody/tr/td[1]/select/option")
	private static List<WebElement> massUpdateConjuctionDrpdwnList;

	@FindBy(xpath = "//*[@id='1104_2_AdvanceFilter']/table/tbody/tr/td[2]/input")
	private static WebElement massUpdateSelectField;

	@FindBy(xpath = "//*[@id='1104_2_AdvanceFilter']/table/tbody/tr/td[2]/input/option")
	private static List<WebElement> massUpdateSelectFieldList;

	@FindBy(xpath = "//*[@id='1104_2_AdvanceFilter']/table/tbody/tr/td[3]/select")
	private static WebElement massUpdateSelectDrpdwn;

	@FindBy(xpath = "//*[@id='1104_2_AdvanceFilter']/table/tbody/tr/td[4]/select")
	private static WebElement massUpdateCompareWithDrpdwn;

	@FindBy(xpath = "//*[@id='1104_2_AdvanceFilter']/table/tbody/tr/td[4]/select/option")
	private static List<WebElement> massUpdateCompareWithDrpdwnList;

	@FindBy(xpath = "//*[@id='1104_2_AdvanceFilter']/table/tbody/tr/td[5]/input")
	private static WebElement massUpdateValueTxt;

	@FindBy(xpath = "//tbody//span[@class='icon-close icon-font6']")
	private static WebElement massUpdateFilterCloseBtn;

	@FindBy(xpath = "//tbody//span[@class='icon-pluse icon-font6']")
	private static WebElement massUpdateFilterAddBtn;

	@FindBy(xpath = "//input[@id='btnMassUpdateGenerateQuery']")
	private static WebElement massUpdateFilterGenerateQueryBtn;

	@FindBy(xpath = "//i[@class='icon-font7 icon-ok']")
	private static WebElement massUpdate_updateBtn;

	@FindBy(xpath = "//i[@class='icon-font7 icon-close']")
	private static WebElement massUpdateCloseBtn;

	@FindBy(xpath = "//*[@id='LandingGridBody']/tr[1]/td[11]")
	public static WebElement accountNameInGrid;

	@FindBy(xpath = "//div[@id='div0']//div[1]")
	private static WebElement fieldNameR1;

	@FindBy(xpath = "//div[@id='div1']//div[1]")
	private static WebElement fieldNameR2;

	@FindBy(xpath = "//div[@id='div2']//div[1]")
	private static WebElement fieldNameR3;

	@FindBy(xpath = "//div[@id='div3']//div[1]")
	private static WebElement fieldNameR4;

	@FindBy(xpath = "//select[@id='ddlNumberList']")
	private static WebElement valueDrpdwnR1;

	@FindBy(xpath = "//div[@id='div1']//input[@class='Ftxtbox']")
	private static WebElement valueTxtR1;

	@FindBy(xpath = "//div[@id='div1']//input[@class='Ftxtbox']")
	private static WebElement valueTxtR2;

	@FindBy(xpath = "//div[@id='div3']//input[@class='Ftxtbox']")
	private static WebElement valueTxtR3;

	@FindBy(xpath = "//div[@id='div0']//select[@class='Fselect clsActionType']")
	private static WebElement accTypeActiondrpdwnR1;

	@FindBy(xpath = "//div[@id='div1']//select[@class='Fselect clsActionType']")
	private static WebElement actiondrpdwnR1;

	@FindBy(xpath = "//div[@id='div2']//select[@class='Fselect clsActionType']")
	private static WebElement actiondrpdwnR2;

	@FindBy(xpath = "//div[@id='div2']//select[@class='Fselect clsActionType']")
	private static WebElement actiondrpdwnR3;

	@FindBy(xpath = "//span[@id='btnPurchases grouped by vendor']")
	private static WebElement purchaseReportAddedInReportsOption;

	public static boolean checkReadingImportFileOnClickBrowseFileImportInImportExport() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("********************************************** checkReadingImportFileOnClickBrowseFileImportInImportExport  ********************************************************");
		Thread.sleep(2000);

		try
		{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(browseFileInImportExport));
		browseFileInImportExport.click();
		Thread.sleep(3000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\accountsMasterImport.exe");

		Thread.sleep(5000);

		String actFileNameDisplayAfterImport = advMasterImpAndExpFileName.getAttribute("value");
		boolean actGeneralTextInHeaderAfterImport = generalTextInHeaderAfterImport.isDisplayed();
		boolean actBaseFieldColumnHeadingInHeaderAfterImport = baseFieldColumnHeadingInHeaderAfterImport.isDisplayed();
		boolean actExternalFieldsColumnHeadingInHeaderAfterImport = externalFieldsColumnHeadingInHeaderAfterImport.isDisplayed();
		boolean actNameBase = nameBaseInGeneralGrid.isDisplayed();
		boolean actNameExternal = nameExternalFieldsInGeneralGrid.isDisplayed();
		boolean actCodeBase = codeBaseInGeneralField.isDisplayed();
		boolean actCodeExternal = codeExternalFieldsInGeneralField.isDisplayed();
		boolean actAccountTypeBase = accountTypeBaseInGeneralGrid.isDisplayed();
		boolean actAccountTypeExternal = accountTypeExternalFieldsInGeneralGrid.isDisplayed();
		boolean actGroupBase = groupBaseInGenaeralGrid.isDisplayed();
		boolean actGroupExternal = groupExternalFieldsInGeneralGrid.isDisplayed();
		boolean actNoOfRecords = noOfRecordsImport.isDisplayed();

		String expFileNameDisplayAfterImport = "AMI.xlsx";
		boolean expGeneralTextInHeaderAfterImport = true;
		boolean expBaseFieldColumnHeadingInHeaderAfterImport = true;
		boolean expExternalFieldsColumnHeadingInHeaderAfterImport = true;
		boolean expNameBase = true;
		boolean expNameExternal = true;
		boolean expCodeBase = true;
		boolean expCodeExternal = true;
		boolean expAccountTypeBase = true;
		boolean expAccountTypeExternal = true;
		boolean expGroupBase = true;
		boolean expGroupExternal = true;
		boolean expNoOfRecords = true;

		System.out.println("File Name                    : " + actFileNameDisplayAfterImport + "  Value Expected : "				+ expFileNameDisplayAfterImport);
		System.out.println("General Text                 : " + actGeneralTextInHeaderAfterImport + "  Value Expected : "				+ expGeneralTextInHeaderAfterImport);
		System.out.println("Base Column Name             : " + actBaseFieldColumnHeadingInHeaderAfterImport				+ "  Value Expected : " + expBaseFieldColumnHeadingInHeaderAfterImport);
		System.out.println("External Module Column Name  : " + actExternalFieldsColumnHeadingInHeaderAfterImport				+ "  Value Expected : " + expExternalFieldsColumnHeadingInHeaderAfterImport);
		System.out.println("Name Base                    : " + actNameBase + "  Value Expected : " + expNameBase);
		System.out.println("Name External Module         : " + actNameExternal + "  Value Expected : " + expNameExternal);
		System.out.println("Code Base                    : " + actCodeBase + "  Value Expected : " + expCodeBase);
		System.out.println("Code External Module         : " + actCodeExternal + "  Value Expected : " + expCodeExternal);
		System.out.println("Account Type Base            : " + actAccountTypeBase + "  Value Expected : " + expAccountTypeBase);
		System.out.println("Account Type External Module : " + actAccountTypeExternal + "  Value Expected : "				+ expAccountTypeExternal);
		System.out.println("Group Base                   : " + actGroupBase + "  Value Expected : " + expGroupBase);
		System.out.println("Group External Module        : " + actGroupExternal + "  Value Expected : " + expGroupExternal);
		System.out.println("No Of Records                : " + actNoOfRecords + "  Value Expected : " + expNoOfRecords);

		if (actFileNameDisplayAfterImport.equalsIgnoreCase(expFileNameDisplayAfterImport)
				&& actGeneralTextInHeaderAfterImport == expGeneralTextInHeaderAfterImport
				&& actBaseFieldColumnHeadingInHeaderAfterImport == expBaseFieldColumnHeadingInHeaderAfterImport
				&& actExternalFieldsColumnHeadingInHeaderAfterImport == expExternalFieldsColumnHeadingInHeaderAfterImport
				&& actNameBase == expNameBase && actNameExternal == expNameExternal && actCodeBase == expCodeBase
				&& actAccountTypeBase == expAccountTypeBase && actAccountTypeExternal == expAccountTypeExternal
				&& actGroupBase == expGroupBase && actGroupExternal == expGroupExternal
				&& actNoOfRecords == expNoOfRecords)
		{
			System.out.println("Pass : File Exists");
			return true;
		}
		else 
		{
			System.out.println("Fail : File does not Exists");
			return false;
		}
	}
	catch (Exception e) 
	{
	System.err.println("CATCH BLOCK : MESSAGE IS DISPLAY " + e.getMessage());
	return false;
	}
  }

	public static boolean checkSaveMappingImportFileInImportExport() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("********************************************** checkSaveMappingImportFileInImportExport  **********************************************");
		Thread.sleep(2000);

		try
		{
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpTemplateName));
		advMasterImpAndExpTemplateName.click();

		advMasterImpAndExpTemplateName.sendKeys("Import Accounts Template");
		Thread.sleep(3000);

		advMasterImpAndExpTemplateName.sendKeys(Keys.TAB);
		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpSAvMappingIcon));
		advMasterImpAndExpSAvMappingIcon.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

		String actSaveMessage = validationConfirmationMessage.getText();
		String expSaveMessage = "Mapping saved successfully";

		closeValidationConfirmationMessage.click();

		System.out.println("Save Mapping then Message display Value Actual     : " + actSaveMessage
				+ "           Value Expected : " + expSaveMessage);

		if (actSaveMessage.equalsIgnoreCase(expSaveMessage)) 
		{
			System.out.println("Pass : File Exists");
			return true;
		} 
		else 
		{
			System.out.println("Fail : File does not Exists");
			return false;
		}
	}
	catch (Exception e) 
	{
	System.err.println("CATCH BLOCK : MESSAGE IS DISPLAY " + e.getMessage());
	System.err.println("Server Error Popup is Displaying : " + serverErrorPopup.getText());
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(serverErrorClose));
	serverErrorClose.click();
	return false;
	}
  }

	@FindBy(xpath = "//span[@class='optioncontrol_arrow_margin icon-down-arrow']")
	private static WebElement templateNameDropdown;

	public static boolean checkClickOnTemplateNameDropdown()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("*************************************************** checkClickOnTemplateNameDropdown  ***************************************************");
		Thread.sleep(2000);
		
		try
		{

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpTemplateName));
		advMasterImpAndExpTemplateName.click();

		advMasterImpAndExpTemplateName.sendKeys(Keys.END);
		Thread.sleep(2000);

		advMasterImpAndExpTemplateName.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);

		advMasterImpAndExpTemplateName.sendKeys("Import Accounts Template");
		Thread.sleep(2000);

		advMasterImpAndExpTemplateName.sendKeys(Keys.TAB);
		Thread.sleep(2000);

		templateNameDropdown.click();
		Thread.sleep(2000);

		boolean actGetIsPresent = getIsAlertPresent();
		boolean expGetIsPresent = false;

		System.out.println("Click on Template Name Dropdown               : " + actGetIsPresent				+ "           Value Expected : " + expGetIsPresent);

		if (actGetIsPresent == expGetIsPresent)
		{
			excelReader.setCellData(xlfile, "Sheet6", 207, 9, resPass);
			return true;
		}
		else
		{
			getAlert().accept();
			getAlert().accept();
			excelReader.setCellData(xlfile, "Sheet6", 207, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	{
	System.err.println("CATCH BLOCK : MESSAGE IS DISPLAY " + e.getMessage());
	return false;
	}
  }

	public static boolean checkCloseImportExportScreenAndImport() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

	 excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 System.out.println("********************************************** checkCloseImportExportScreenAndImport  *****************************************");
	 Thread.sleep(2000);

	 try
 	 {
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		advMasterImpAndExpCloseIcon.click();
		
		// Refreshing the screen
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		
		getDriver().navigate().refresh();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();
		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
		masterRibbonToExpandOptions.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));
		masterAdvanceMasterImportORExportBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(browseFileInImportExport));
		browseFileInImportExport.click();
		Thread.sleep(5000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\accountsMasterImport.exe");

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpImportIcon));
		advMasterImpAndExpImportIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		validationConfirmationMessage.click();

		String actSaveMessageSingleClick = validationConfirmationMessage.getText();
		String expSaveMessageSingleClick = "17 Records Imported Successfully";

		closeValidationConfirmationMessage.click();

		System.out.println("Import Button Click, Message Display Value Actual  : " + actSaveMessageSingleClick				+ "           Value Expected : " + expSaveMessageSingleClick);

		if (actSaveMessageSingleClick.equalsIgnoreCase(expSaveMessageSingleClick))
		{
			System.out.println("Pass : Import File button works on signle click");
			return true;
		} 
		else 
		{
			System.out.println("Fail : Import File button does not works more than twice click");
			return false;
		}
	}
	catch (Exception e) 
	{
	System.err.println("CATCH BLOCK : MESSAGE IS DISPLAY " + e.getMessage());
	return false;
	}
  }

	// Check Account Type Cash is displaying, need to change the code after
	// correcting the importing accounts are not importing in group

	@FindBy(xpath = "//td[contains(text(),'Customer Update Group Import')]")
	private static WebElement customerGroupImport;

	public static boolean checkImportedAccountsDisplayInAccountsDisplayGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("********************************************** checkImportedAccountsDisplayInAccountsDisplayGrid  *****************************************");
		Thread.sleep(9000);

		try
		{
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys(Keys.END);
		masterSearchTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		masterSearchTxt.sendKeys("Customer Update Group");
		Thread.sleep(2000);
		masterSearchTxt.sendKeys(Keys.ENTER);
		Thread.sleep(2000);

		masterGrid_SelectFirstRow.click();

		String actSearchAccountName = accountNewCreationNameOfLane1.getText();
		String expSearchAccountName = "Customer Update Group";

		System.out.println("Imported Account Group Name Value Actual         : " + actSearchAccountName				+ "  Value Expected : " + expSearchAccountName);

		Thread.sleep(3000);

		// Create Accounts in Group
		getAction().doubleClick(masterCreationNameOfLane1).perform();

		Thread.sleep(3000);

		String actSearchAccountNameUG = accountNewCreationNameOfLane1.getText();
		String expSearchAccountNameUG = "Customer Display CD For Each Account One";

		System.out.println("Account Name Display In Group Value Actual        : " + actSearchAccountNameUG				+ "           Value Expected : " + expSearchAccountNameUG);

		System.out.println("size : " + masterAccountHomeGridCount.size());

		Thread.sleep(2000);
			
		
		
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
		masterCloseBtn.click();
		
		
		                   	
		if (actSearchAccountName.equalsIgnoreCase(expSearchAccountName)
				&& actSearchAccountNameUG.equalsIgnoreCase(expSearchAccountNameUG))
		{
			System.out.println("Pass : File Exists");
			return true;
		}
		else
		{
			System.out.println("Fail : File does not Exists");
			return false;
		}
		}
	catch (Exception e) 
	{
	System.err.println("CATCH BLOCK : MESSAGE IS DISPLAY " + e.getMessage());
	return false;
	}
 }

  
	
	
	//Item Masters To Import
	
	public static boolean checkAdvanceImportExportOptionInItemMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemsMenu));
		itemsMenu.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItemMainMenuItem));
		homeMasterItemMainMenuItem.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
		masterRibbonToExpandOptions.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));
		masterAdvanceMasterImportORExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(advanceMasterImportAndExportLabelInItem));

		boolean actAdvImportExportLabel = advanceMasterImportAndExportLabelInItem.isDisplayed();
		boolean actAdvImportExportBulkIcon = advMasterImpAndExpBulkIcon.isDisplayed();
		boolean actAdvImportExportMappingIcon = advMasterImpAndExpSAvMappingIcon.isDisplayed();
		boolean actAdvExportIcon = advMasterImpAndExpExportIcon.isDisplayed();
		boolean actAdvImportIocn = advMasterImpAndExpImportIcon.isDisplayed();
		boolean actAdvImportCloseIcon = advMasterImpAndExpCloseIcon.isDisplayed();
		boolean actAdvImportExportFileName = advMasterImpAndExpFileName.isDisplayed();
		boolean actAdvImportExportUpload = advMasterImpAndExpUploadFileBtn.isDisplayed();
		boolean actAdvImportExportTemplateName = advMasterImpAndExpTemplateName.isDisplayed();
		boolean actAdvImportExportTemplateSettings = advMasterImpAndExpTemplateSettingBtn.isDisplayed();
		boolean actAdvImportExportHeaderDropdown = advMasterImpAndExpHeaderFieldsDropdown.isDisplayed();
		boolean actAdvImportExportBodyDropdown = advMasterImpAndExpBodyFeildsDropdown.isDisplayed();
		boolean actAdvImportExportBulkImport = advMasterImpAndExpBulkImportDropdown.isDisplayed();
		boolean actAdvImportExportHeaderFieldArea = advMasterImpAndExpHeaderFiledArea.isDisplayed();
		boolean actAdvImportExportBodyFieldArea = advMasterImpAndExpBodyFiledArea.isDisplayed();

		boolean expAdvImportExportLabel = true;
		boolean expAdvImportExportBulkIcon = true;
		boolean expAdvImportExportMappingIcon = true;
		boolean expAdvExportIcon = true;
		boolean expAdvImportIocn = true;
		boolean expAdvImportCloseIcon = true;
		boolean expAdvImportExportFileName = true;
		boolean expAdvImportExportUpload = true;
		boolean expAdvImportExportTemplateName = true;
		boolean expAdvImportExportTemplateSettings = true;
		boolean expAdvImportExportHeaderDropdown = true;
		boolean expAdvImportExportBodyDropdown = true;
		boolean expAdvImportExportBulkImport = true;
		boolean expAdvImportExportHeaderFieldArea = true;
		boolean expAdvImportExportBodyFieldArea = true;

		System.out.println("***************************************************** checkAdvanceImportExportOption  *****************************************************************");
		System.out.println("AdvImportExportLabels              : " + actAdvImportExportLabel            + "  Value Expected : "				+ expAdvImportExportLabel);
		System.out.println("AdvImportExportBulkIcon            : " + actAdvImportExportBulkIcon         + "  Value Expected : "				+ expAdvImportExportBulkIcon);
		System.out.println("AdvImportExportMappingIcon         : " + actAdvImportExportMappingIcon      + "  Value Expected : " + expAdvImportExportMappingIcon);
		System.out.println("AdvExportIcon                      : " + actAdvExportIcon                   + "  Value Expected : " + expAdvExportIcon);
		System.out.println("AdvImportIocn                      : " + actAdvImportIocn                   + "  Value Expected : " + expAdvImportIocn);
		System.out.println("AdvImportCloseIcon                 : " + actAdvImportCloseIcon              + "  Value Expected : "				+ expAdvImportCloseIcon);
		System.out.println("AdvImportExportFileName            : " + actAdvImportExportFileName         + "  Value Expected : "				+ expAdvImportExportFileName);
		System.out.println("AdvImportExportUpload              : " + actAdvImportExportUpload           + "  Value Expected : "				+ expAdvImportExportUpload);
		System.out.println("AdvImportExportTemplateName        : " + actAdvImportExportTemplateName	    + "  Value Expected : " + expAdvImportExportTemplateName);
		System.out.println("AdvImportExportTemplateSettings    : " + actAdvImportExportTemplateSettings	+ "  Value Expected : " + expAdvImportExportTemplateSettings);
		System.out.println("AdvImportExportHeaderDropdown      : " + actAdvImportExportHeaderDropdown	+ "  Value Expected : " + expAdvImportExportHeaderDropdown);
		System.out.println("AdvImportExportBodyDropdown        : " + actAdvImportExportBodyDropdown		+ "  Value Expected : " + expAdvImportExportBodyDropdown);
		System.out.println("AdvImportExportBulkImport          : " + actAdvImportExportBulkImport	    + "  Value Expected : " + expAdvImportExportBulkImport);
		System.out.println("AdvImportExportHeaderFieldArea     : " + actAdvImportExportHeaderFieldArea	+ "  Value Expected : " + expAdvImportExportHeaderFieldArea);
		System.out.println("AdvImportExportBodyFieldArea       : " + actAdvImportExportBodyFieldArea    + "  Value Expected : " + expAdvImportExportBodyFieldArea);

		if (actAdvImportExportLabel == expAdvImportExportLabel
				&& actAdvImportExportBulkIcon == expAdvImportExportBulkIcon
				&& actAdvImportExportMappingIcon == expAdvImportExportMappingIcon
				&& actAdvExportIcon == expAdvExportIcon && actAdvImportIocn == expAdvImportIocn
				&& actAdvImportCloseIcon == expAdvImportCloseIcon
				&& actAdvImportExportFileName == expAdvImportExportFileName
				&& actAdvImportExportUpload == expAdvImportExportUpload
				&& actAdvImportExportTemplateName == expAdvImportExportTemplateName
				&& actAdvImportExportTemplateSettings == expAdvImportExportTemplateSettings
				&& actAdvImportExportHeaderDropdown == expAdvImportExportHeaderDropdown
				&& actAdvImportExportBodyDropdown == expAdvImportExportBodyDropdown
				&& actAdvImportExportBulkImport == expAdvImportExportBulkImport
				&& actAdvImportExportHeaderFieldArea == expAdvImportExportHeaderFieldArea
				&& actAdvImportExportBodyFieldArea == expAdvImportExportBodyFieldArea) 
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
			return false;
		}

	}

	
	
 
	
	@FindBy(xpath = "//li[@id='2']")
	private static WebElement generalTabExportItem;

	@FindBy(xpath = "//li[@id='72']")
	private static WebElement unitsTabExportItem;

	@FindBy(xpath = "//li[@id='73']")
	private static WebElement settingsTabExportItem;

	@FindBy(xpath = "//li[@id='74']")
	private static WebElement classificationTabExportItem;

	@FindBy(xpath = "//li[@id='75']")
	private static WebElement otherDetailsTabExportItem;

	@FindBy(xpath = "//li[@id='76']")
	private static WebElement replenishmentTabExportItem;

	@FindBy(xpath = "//li[@id='77']")
	private static WebElement orderreTabExportItem;

	@FindBy(xpath = "//li[@id='78']")
	private static WebElement outletTabExportItem;

	@FindBy(xpath = "//li[@id='114']")
	private static WebElement createTabExportItem;

	@FindBy(xpath = "//span[@class='font-5'][contains(text(),'Main')]")
	private static WebElement mainTabExportItem;

	@FindBy(xpath = "//div[@id='tab_2_Main']//li[1]//label[1]")
	private static WebElement nameMainTabExportItem;

	@FindBy(xpath = "//div[@id='tab_2_Main']//li[2]//label[1]")
	private static WebElement codeMainTabExportItem;

	@FindBy(xpath = "//div[@id='tab_2_Main']//li[3]//label[1]")
	private static WebElement typeMainTabExportItem;

	@FindBy(xpath = "//div[@id='tab_2_Main']//li[4]//label[1]")
	private static WebElement reorderLeveltMainTabExportItem;

	@FindBy(xpath = "//div[@id='tab_2_Main']//li[5]//label[1]")
	private static WebElement binCapacityMainTabExportItem;

	@FindBy(xpath = "//div[@id='tab_2_Main']//li[6]//label[1]")
	private static WebElement valuationMainTabExportItem;

	@FindBy(xpath = "//div[@id='tab_2_Main']//li[7]//label[1]")
	private static WebElement groupMainTabExportItem;

	@FindBy(xpath = "//div[@id='tab_2_Main']//li[8]//label[1]")
	private static WebElement parentCodeTabExportItem;

	@FindBy(xpath = "//div[@id='tab_114_HeaderFields']//li[1]//label[1]")
	private static WebElement extraFieldOneInCreateTab;

	@FindBy(xpath = "//div[@id='tab_114_HeaderFields']//li[2]//label[1]")
	private static WebElement extraFieldTwoInCreateTab;

	public static boolean checkExportOptionInAdvanceImportExportOfItemMaster()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpExportIcon));
		advMasterImpAndExpExportIcon.click();

		Thread.sleep(4000);

		boolean actGeneralTabInExport = generalTabExportItem.isDisplayed();
		boolean actUnitsTabInExport = unitsTabExportItem.isDisplayed();
		boolean actSettingsTabInExport = settingsTabExportItem.isDisplayed();
		boolean actClassificationTabInExport = classificationTabExportItem.isDisplayed();
		boolean actOtherDetailsTabInExport = otherDetailsTabExportItem.isDisplayed();
		boolean actReplenishmentTabInExport = replenishmentTabExportItem.isDisplayed();
		boolean actOrderTabInExport = orderreTabExportItem.isDisplayed();
		boolean actOutletTabExportItem = outletTabExportItem.isDisplayed();
		//boolean actCreateTabExportItem = createTabExportItem.isDisplayed();

		boolean actMainTabExportItem = mainTabExportItem.isDisplayed();
		boolean actNameInsMainTabExport = nameMainTabExportItem.isDisplayed();
		boolean actCodeInMainTabExport = codeMainTabExportItem.isDisplayed();
		boolean actTypeInMainTab = typeMainTabExportItem.isDisplayed();
		boolean actReOrderLevelInMainTab = reorderLeveltMainTabExportItem.isDisplayed();
		boolean actBinCapacityInMainTab = binCapacityMainTabExportItem.isDisplayed();
		boolean actValuationMenthodInMainTab = valuationMainTabExportItem.isDisplayed();
		boolean actGroupInMainTab = groupMainTabExportItem.isDisplayed();
		boolean actParentCodeInMainTab = parentCodeTabExportItem.isDisplayed();

		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabExportItem));
		createTabExportItem.click();

		boolean actFieldOne = extraFieldOneInCreateTab.isDisplayed();
		boolean actFieldTwo = extraFieldTwoInCreateTab.isDisplayed();
*/
		boolean expGeneralTabInExport = true;
		boolean expUnitsTabInExport = true;
		boolean expSettingsTabInExport = true;
		boolean expClassificationTabInExport = true;
		boolean expOtherDetailsTabInExport = true;
		boolean expReplenishmentTabInExport = true;
		boolean expOrderTabInExport = true;
		boolean expOutletTabExportItem = true;
		boolean expCreateTabExportItem = true;

		boolean expMainTabExportItem = true;
		boolean expNameInsMainTabExport = true;
		boolean expCodeInMainTabExport = true;
		boolean expTypeInMainTab = true;
		boolean expReOrderLevelInMainTab = true;
		boolean expBinCapacityInMainTab = true;
		boolean expValuationMenthodInMainTab = true;
		boolean expGroupInMainTab = true;
		boolean expParentCodeInMainTab = true;

		/*boolean expFieldOne = true;
		boolean expFieldTwo = true;*/

		System.out.println("************************************ checkExportOptionInAdvanceImportExportOfItemMaster  *************************************************");

		System.out.println("General Tab in Export              : " + actGeneralTabInExport + "  Value Expected : "				+ expGeneralTabInExport);
		System.out.println("Settings Tab in Export             : " + actUnitsTabInExport + "  Value Expected : "				+ expUnitsTabInExport);
		System.out.println("Details Tab in Export              : " + actSettingsTabInExport + "  Value Expected : "				+ expSettingsTabInExport);
		System.out.println("Print Layout in Export             : " + actClassificationTabInExport				+ "  Value Expected : " + expClassificationTabInExport);
		System.out.println("Tree Tab in Export                 : " + actOtherDetailsTabInExport + "  Value Expected : "				+ expOtherDetailsTabInExport);
		System.out.println("Create Tab in Export               : " + actReplenishmentTabInExport + "  Value Expected : "				+ expReplenishmentTabInExport);
		System.out.println("Main Tab in Export                 : " + actOrderTabInExport + "  Value Expected : "				+ expOrderTabInExport);
		System.out.println("Cheque Discount in Export          : " + actOutletTabExportItem + "  Value Expected : "				+ expOutletTabExportItem);
		//System.out.println("Rate of Interest in Export         : " + actCreateTabExportItem + "  Value Expected : "				+ expCreateTabExportItem);
		System.out.println("Bank Account in Export             : " + actMainTabExportItem + "  Value Expected : "				+ expMainTabExportItem);
		System.out.println("PDC Discount in Export             : " + actNameInsMainTabExport + "  Value Expected : "				+ expNameInsMainTabExport);
		System.out.println("Name in Export                     : " + actCodeInMainTabExport + "  Value Expected : "				+ expCodeInMainTabExport);
		System.out.println("Code in Export                     : " + actTypeInMainTab + "  Value Expected : " + expTypeInMainTab);
		System.out.println("Type in Export                     : " + actReOrderLevelInMainTab + "  Value Expected : "				+ expReOrderLevelInMainTab);
		System.out.println("Credit Days in Export              : " + actBinCapacityInMainTab + "  Value Expected : "				+ expBinCapacityInMainTab);
		System.out.println("Group in Export                    : " + actValuationMenthodInMainTab				+ "  Value Expected : " + expValuationMenthodInMainTab);
		System.out.println("Parent in Export                   : " + actGroupInMainTab + "  Value Expected : "				+ expGroupInMainTab);
		System.out.println("Select All in Export               : " + actParentCodeInMainTab + "  Value Expected : "				+ expParentCodeInMainTab);
		
		if (actGeneralTabInExport == expGeneralTabInExport && actUnitsTabInExport == expUnitsTabInExport
				&& actSettingsTabInExport == expSettingsTabInExport
				&& actClassificationTabInExport == expClassificationTabInExport
				&& actOtherDetailsTabInExport == expOtherDetailsTabInExport
				&& actReplenishmentTabInExport == expReplenishmentTabInExport
				&& actOrderTabInExport == expOrderTabInExport && actOutletTabExportItem == expOutletTabExportItem
				/*&& actCreateTabExportItem == expCreateTabExportItem*/ && actMainTabExportItem == expMainTabExportItem
				&& actNameInsMainTabExport == expNameInsMainTabExport
				&& actCodeInMainTabExport == expCodeInMainTabExport && actCodeInMainTabExport == actCodeInMainTabExport
				&& actTypeInMainTab == actTypeInMainTab && actReOrderLevelInMainTab == expReOrderLevelInMainTab
				&& actBinCapacityInMainTab == expBinCapacityInMainTab
				&& actValuationMenthodInMainTab == expValuationMenthodInMainTab
				&& actGroupInMainTab == expGroupInMainTab && actParentCodeInMainTab == expParentCodeInMainTab) 
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
			return false;
		}

	}

	
	public static boolean checkItemMasterSelectAllOptionInAdvanceImportExport()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		/*Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTabExportItem));
		generalTabExportItem.click();*/

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllBtnExport));
		selectAllBtnExport.click();

		boolean actNameInsMainTabExport = nameMainTabExportItem.isEnabled();
		boolean actCodeInMainTabExport = codeMainTabExportItem.isEnabled();
		boolean actTypeInMainTab = typeMainTabExportItem.isEnabled();
		boolean actReOrderLevelInMainTab = reorderLeveltMainTabExportItem.isEnabled();
		boolean actBinCapacityInMainTab = binCapacityMainTabExportItem.isEnabled();
		boolean actValuationMenthodInMainTab = valuationMainTabExportItem.isEnabled();
		boolean actGroupInMainTab = groupMainTabExportItem.isEnabled();
		boolean actParentCodeInMainTab = parentCodeTabExportItem.isEnabled();

		boolean expNameInsMainTabExport = true;
		boolean expCodeInMainTabExport = true;
		boolean expTypeInMainTab = true;
		boolean expReOrderLevelInMainTab = true;
		boolean expBinCapacityInMainTab = true;
		boolean expValuationMenthodInMainTab = true;
		boolean expGroupInMainTab = true;
		boolean expParentCodeInMainTab = true;

		System.out.println("***************************************************** checkItemMasterSelectAllOptionInAdvanceImportExport  *****************************************************************");
		System.out.println("General Tab in Export              : " + actNameInsMainTabExport + "  Value Expected : "				+ expNameInsMainTabExport);
		System.out.println("Details Tab in Export              : " + actCodeInMainTabExport + "  Value Expected : "				+ expCodeInMainTabExport);
		System.out.println("Print Layout in Export             : " + actTypeInMainTab + "  Value Expected : " + expTypeInMainTab);
		System.out.println("Tree Tab in Export                 : " + actReOrderLevelInMainTab + "  Value Expected : "				+ expReOrderLevelInMainTab);
		System.out.println("Create Tab in Export               : " + actBinCapacityInMainTab + "  Value Expected : "				+ expBinCapacityInMainTab);
		System.out.println("Main Tab in Export                 : " + actValuationMenthodInMainTab				+ "  Value Expected : " + expValuationMenthodInMainTab);

		System.out.println("General Tab in Export              : " + actGroupInMainTab + "  Value Expected : "				+ expGroupInMainTab);
		System.out.println("Details Tab in Export              : " + actParentCodeInMainTab + "  Value Expected : "				+ expParentCodeInMainTab);

		if (actNameInsMainTabExport == expNameInsMainTabExport && actCodeInMainTabExport == expCodeInMainTabExport
				&& actTypeInMainTab == expTypeInMainTab && actReOrderLevelInMainTab == expReOrderLevelInMainTab
				&& actBinCapacityInMainTab == expBinCapacityInMainTab
				&& actValuationMenthodInMainTab == expValuationMenthodInMainTab
				&& actGroupInMainTab == expGroupInMainTab && actParentCodeInMainTab == expParentCodeInMainTab)

		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
			return true;
		} 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
			return false;
		}

	}

	public static boolean checkFileDownloadInExportScreenOfItemMaster()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(5000);

		File file = new File(getBaseDir()+"\\autoIt\\ExportFiles\\Item.zip");

		System.out.println("The file name"+ file);
		Thread.sleep(5000);
		
		if (file.exists()) 
		{
			file.delete();

			System.out.println("File is Exists");
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(exportBtnExport));
			exportBtnExport.click();

			Thread.sleep(3000);
		}
		else 
		{
			
			System.out.println("File not Exists");
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(exportBtnExport));
			exportBtnExport.click();

			Thread.sleep(3000);
		}

		Thread.sleep(5000);
		
		boolean actIsFileAvailable = file.exists();
		boolean expIsFileAvailable = true;

		System.out.println("***************************************************** checkFileDownloadInExportScreenOfItemMaster  *****************************************************************");
		System.out.println("Export the File is downloaded              : " + actIsFileAvailable + "  Value Expected : "+ expIsFileAvailable);

		if (actIsFileAvailable == expIsFileAvailable)
		{
			System.out.println("Pass : File Exists");
			return true;

		} 
		else 
		{
			System.out.println("Fail : File does not Exists");
			return false;
		}

	}

	public static boolean checkImportDataOption()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(browseFileInImportExport));
		browseFileInImportExport.click();

		Thread.sleep(5000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\itemMasterImport.exe");

		Thread.sleep(5000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpImportIcon));
		advMasterImpAndExpImportIcon.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeValidationConfirmationMessage));
		validationConfirmationMessage.click();

		String actSaveMessageSingleClick = validationConfirmationMessage.getText();
		String expSaveMessageSingleClick = "18 Records Imported Successfully";

		closeValidationConfirmationMessage.click();

		System.out.println("********************************************** checkCloseImportExportScreenAndImport  *****************************************");
		System.out.println("File Name                    : " + actSaveMessageSingleClick				+ "           Value Expected : " + expSaveMessageSingleClick);

		if (actSaveMessageSingleClick.equalsIgnoreCase(expSaveMessageSingleClick))
		{
			System.out.println("Pass : Import File button works on signle click");
			return true;
		} 
		else 
		{
			System.out.println("Fail : Import File button does not works more than twice click");
			return false;
		}

	}

	public static boolean checkImportedItemsDisplayInItemGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys(Keys.END);
		masterSearchTxt.sendKeys(Keys.SHIFT, Keys.HOME);

		masterSearchTxt.sendKeys("COGS");
		Thread.sleep(2000);

		masterSearchTxt.sendKeys(Keys.ENTER);
		Thread.sleep(2000);

		String actGetItemNewCreationOfLaneOne = itemNewCreationName.getText();
		String expGetItemNewCreationOfLaneOne = "WA COGS ITEM";

		String actGetItemNewCreationOfLaneTwo = itemNewCreationNameR2.getText();
		String expGetItemNewCreationOfLaneTwo = "FIFO COGS ITEM";

		System.out.println("********************************************** checkImportedAccountsDisplayInAccountsDisplayGrid  **********8*********************************");
		System.out.println("File Name                    : " + actGetItemNewCreationOfLaneOne				+ "           Value Expected : " + expGetItemNewCreationOfLaneOne);
		System.out.println("File Name                    : " + actGetItemNewCreationOfLaneTwo				+ "           Value Expected : " + expGetItemNewCreationOfLaneTwo);

		System.out.println("size : " + masterAccountHomeGridCount.size());
		Thread.sleep(2000);

		if (actGetItemNewCreationOfLaneOne.equalsIgnoreCase(expGetItemNewCreationOfLaneOne)
				&& actGetItemNewCreationOfLaneTwo.equalsIgnoreCase(expGetItemNewCreationOfLaneTwo))
		{
			System.out.println("Pass : File Exists");
			return true;
		} 
		else
		{
			System.out.println("Fail : File does not Exists");
			return false;
		}

	}

	
	
	public boolean checkPropertiesOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
		itemFirstCheckBox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();
		
		if (ItemPropertiesLabel.isDisplayed() && properties_okBtn.isDisplayed() && 
				properties_cancelBtn.isDisplayed() && dontMaintainStockbyBatchCheckbox.isDisplayed() &&
				dontinputBinCheckbox.isDisplayed() && dontMaintainStocksByRMACheckbox.isDisplayed() &&
				inputBreakupofQuantitiesForEachCategoriesCheckbox.isDisplayed() && doNotPrintInBillIfRateIszeroCheckbox.isDisplayed() &&
				notAllowedforHomeDeliveryCheckbox.isDisplayed() && starProductCheckbox.isDisplayed() &&
				donotUpdateStockCheckbox.isDisplayed() && ignoreExpiryforthisItemCheckBox.isDisplayed() &&
				ignoreFractionInQtyCheckbox.isDisplayed() && defaultRadioBtn.isDisplayed() &&
				qualitiesRadioBtn.isDisplayed() && reserveByRadioBtn.isDisplayed() &&
				batchCheckbox.isDisplayed() && binCheckbox.isDisplayed() &&
				RMACheckbox.isDisplayed() && inventoryAllocationDropdown.isDisplayed() &&
				DonotrestricttheselectionevenifrightsarenotallottedChkbox.isDisplayed() && AllowOtherCompaniesToViewRecordChkbox.isDisplayed()) 
		{
			System.out.println("***Pass: Displayed Propertied Screen Of Batch -WA");
			excelReader.setCellData(xlfile, "Sheet1", 730, 9, resPass);
			return true;
		} 
		else 
		{
			System.out.println("***Fail: Displayed Propertied Screen Of Batch -WA");
			excelReader.setCellData(xlfile, "Sheet1", 730, 9, resPass);
			return false;
		}
	}


	public boolean checkPropertiesForWACOGSRMAItems() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStockbyBatchCheckbox));
		dontMaintainStockbyBatchCheckbox.click();
		
		Thread.sleep(2000);
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontinputBinCheckbox));
		dontinputBinCheckbox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(reserveByRadioBtn));
		reserveByRadioBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(RMACheckbox));
		RMACheckbox.click();
		
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
		itemFirstCheckBox.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewCreationName));

		String actItemName = itemNewCreationName.getText();

		String expItemName = "WA COGS ITEM";

		System.out.println("Item Name after Creation and saving Properties         :  " + actItemName				+ "  Value Expected :  " + expItemName);

		if (actItemName.equalsIgnoreCase(expItemName)) 
		{
			excelReader.setCellData(xlfile, "Sheet1", 732, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 732, 9, resFail);
			return false;
		}
		
	}



	
	
	
	public boolean checkPropertiesForFIFOCOGSBINSItems() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
		//Saving the properties 
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemSecondCheckBox));
		itemSecondCheckBox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();
		
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStockbyBatchCheckbox));
		dontMaintainStockbyBatchCheckbox.click();
		
		
		Thread.sleep(2000);
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStocksByRMACheckbox));
		dontMaintainStocksByRMACheckbox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(reserveByRadioBtn));
		reserveByRadioBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCheckbox));
		binCheckbox.click();
		
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemSecondCheckBox));
		itemSecondCheckBox.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewCreationName));

		String actItemName = itemNewCreationName.getText();

		String expItemName = "WA COGS ITEM";

		System.out.println("Item Name after Creation and saving Properties         :  " + actItemName				+ "  Value Expected :  " + expItemName);

		if (actItemName.equalsIgnoreCase(expItemName)) 
		{
			excelReader.setCellData(xlfile, "Sheet1", 732, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 732, 9, resFail);
			return false;
		}
	}
	
	
	
	public boolean checkPropertiesForBRCOGSBatchItems() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemThirdCheckBox));
		itemThirdCheckBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontinputBinCheckbox));
		dontinputBinCheckbox.click();	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStocksByRMACheckbox));
		dontMaintainStocksByRMACheckbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reserveByRadioBtn));
		reserveByRadioBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCheckbox));
		batchCheckbox.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemThirdCheckBox));
		itemThirdCheckBox.click();

		
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\clickOnCloseOnAutoDownload.exe");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewCreationName));


		String actItemName = itemNewCreationName.getText();
		String expItemName = "WA COGS ITEM";
		
		
		

		System.out.println("Item Name after Creation and saving Properties         :  " + actItemName				+ "  Value Expected :  " + expItemName);

		if (actItemName.equalsIgnoreCase(expItemName)) 
		{
			excelReader.setCellData(xlfile, "Sheet1", 732, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 732, 9, resFail);
			return false;
		}
	}
	
	
	
	@FindBy(xpath = "/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[4]/td[8]/div[1]/label[1]/input[1]")
	public static WebElement itemFourthCheckBox;
	
	public boolean checkPropertiesForSTDRATECOGSStockItems() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile="E:\\FocusSmoke\\FocusAI\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFourthCheckBox));
		itemFourthCheckBox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStockbyBatchCheckbox));
		dontMaintainStockbyBatchCheckbox.click();
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontinputBinCheckbox));
		dontinputBinCheckbox.click();
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStocksByRMACheckbox));
		dontMaintainStocksByRMACheckbox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(qualitiesRadioBtn));
		qualitiesRadioBtn.click();		
		Thread.sleep(2000); 
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFourthCheckBox));
		itemFourthCheckBox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewCreationName));

		String actItemName = itemNewCreationName.getText();

		String expItemName = "WA COGS ITEM";

		System.out.println("Item Name after Creation and saving Properties         :  " + actItemName				+ "  Value Expected :  " + expItemName);

		
		
		// checking the properties for batch item
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys(Keys.END);
		masterSearchTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		masterSearchTxt.sendKeys("batch br Item");
		Thread.sleep(2000);

		masterSearchTxt.sendKeys(Keys.ENTER);
		Thread.sleep(2000);

		String actGetItemNewCreationOfLaneOne = itemNewCreationName.getText();
		String expGetItemNewCreationOfLaneOne = "BATCH BR ITEM";

        getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemFirstCheckBox));
		itemFirstCheckBox.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemPropertiesBtn));
		itemPropertiesBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontinputBinCheckbox));
		dontinputBinCheckbox.click();	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dontMaintainStocksByRMACheckbox));
		dontMaintainStocksByRMACheckbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reserveByRadioBtn));
		reserveByRadioBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCheckbox));
		batchCheckbox.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemPropertiesOkBtn));
		ItemPropertiesOkBtn.click();
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemThirdCheckBox));
		itemThirdCheckBox.click();		*/
		
		Thread.sleep(3000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
		masterCloseBtn.click();
		
		if (actItemName.equalsIgnoreCase(expItemName)) 
		{
			excelReader.setCellData(xlfile, "Sheet1", 732, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 732, 9, resFail);
			return false;
		}
	}
	
	
	
	
	
    // Bins Master Importing
	
	public static boolean checkBinsMasterImportingBins() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	  {
	 	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 	System.out.println("************************************ checkBinsMasterPageIsDisplayByClickOnBinsMenu ********************************************");

	 
	 		
	 		Thread.sleep(2000);
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	 		homeMenu.click();

	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
	 		mastersMenu.click();

	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsMenu));
	 		binsMenu.click();
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
			masterRibbonToExpandOptions.click();

			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));
			masterAdvanceMasterImportORExportBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpFileName));
			boolean actAdvImportExportBulkIcon = advMasterImpAndExpBulkIcon.isDisplayed();
			boolean actAdvImportExportMappingIcon = advMasterImpAndExpSAvMappingIcon.isDisplayed();
			boolean actAdvExportIcon = advMasterImpAndExpExportIcon.isDisplayed();
			boolean actAdvImportIocn = advMasterImpAndExpImportIcon.isDisplayed();
			boolean actAdvImportCloseIcon = advMasterImpAndExpCloseIcon.isDisplayed();
			boolean actAdvImportExportFileName = advMasterImpAndExpFileName.isDisplayed();
			boolean actAdvImportExportUpload = advMasterImpAndExpUploadFileBtn.isDisplayed();
			boolean actAdvImportExportTemplateName = advMasterImpAndExpTemplateName.isDisplayed();
			boolean actAdvImportExportTemplateSettings = advMasterImpAndExpTemplateSettingBtn.isDisplayed();
			boolean actAdvImportExportHeaderDropdown = advMasterImpAndExpHeaderFieldsDropdown.isDisplayed();
			boolean actAdvImportExportBodyDropdown = advMasterImpAndExpBodyFeildsDropdown.isDisplayed();
			boolean actAdvImportExportBulkImport = advMasterImpAndExpBulkImportDropdown.isDisplayed();
			boolean actAdvImportExportHeaderFieldArea = advMasterImpAndExpHeaderFiledArea.isDisplayed();
			boolean actAdvImportExportBodyFieldArea = advMasterImpAndExpBodyFiledArea.isDisplayed();

		
			boolean expAdvImportExportBulkIcon = true;
			boolean expAdvImportExportMappingIcon = true;
			boolean expAdvExportIcon = true;
			boolean expAdvImportIocn = true;
			boolean expAdvImportCloseIcon = true;
			boolean expAdvImportExportFileName = true;
			boolean expAdvImportExportUpload = true;
			boolean expAdvImportExportTemplateName = true;
			boolean expAdvImportExportTemplateSettings = true;
			boolean expAdvImportExportHeaderDropdown = true;
			boolean expAdvImportExportBodyDropdown = true;
			boolean expAdvImportExportBulkImport = true;
			boolean expAdvImportExportHeaderFieldArea = true;
			boolean expAdvImportExportBodyFieldArea = true;

			System.out.println("***************************************************** checkAdvanceImportExportOption  *****************************************************************");
			//System.out.println("AdvImportExportLabels              : " + actAdvImportExportLabel            + "  Value Expected : "				+ expAdvImportExportLabel);
			System.out.println("AdvImportExportBulkIcon            : " + actAdvImportExportBulkIcon         + "  Value Expected : "				+ expAdvImportExportBulkIcon);
			System.out.println("AdvImportExportMappingIcon         : " + actAdvImportExportMappingIcon      + "  Value Expected : " + expAdvImportExportMappingIcon);
			System.out.println("AdvExportIcon                      : " + actAdvExportIcon                   + "  Value Expected : " + expAdvExportIcon);
			System.out.println("AdvImportIocn                      : " + actAdvImportIocn                   + "  Value Expected : " + expAdvImportIocn);
			System.out.println("AdvImportCloseIcon                 : " + actAdvImportCloseIcon              + "  Value Expected : "				+ expAdvImportCloseIcon);
			System.out.println("AdvImportExportFileName            : " + actAdvImportExportFileName         + "  Value Expected : "				+ expAdvImportExportFileName);
			System.out.println("AdvImportExportUpload              : " + actAdvImportExportUpload           + "  Value Expected : "				+ expAdvImportExportUpload);
			System.out.println("AdvImportExportTemplateName        : " + actAdvImportExportTemplateName	    + "  Value Expected : " + expAdvImportExportTemplateName);
			System.out.println("AdvImportExportTemplateSettings    : " + actAdvImportExportTemplateSettings	+ "  Value Expected : " + expAdvImportExportTemplateSettings);
			System.out.println("AdvImportExportHeaderDropdown      : " + actAdvImportExportHeaderDropdown	+ "  Value Expected : " + expAdvImportExportHeaderDropdown);
			System.out.println("AdvImportExportBodyDropdown        : " + actAdvImportExportBodyDropdown		+ "  Value Expected : " + expAdvImportExportBodyDropdown);
			System.out.println("AdvImportExportBulkImport          : " + actAdvImportExportBulkImport	    + "  Value Expected : " + expAdvImportExportBulkImport);
			System.out.println("AdvImportExportHeaderFieldArea     : " + actAdvImportExportHeaderFieldArea	+ "  Value Expected : " + expAdvImportExportHeaderFieldArea);
			System.out.println("AdvImportExportBodyFieldArea       : " + actAdvImportExportBodyFieldArea    + "  Value Expected : " + expAdvImportExportBodyFieldArea);

			if ( actAdvImportExportBulkIcon == expAdvImportExportBulkIcon
					&& actAdvImportExportMappingIcon == expAdvImportExportMappingIcon
					&& actAdvExportIcon == expAdvExportIcon && actAdvImportIocn == expAdvImportIocn
					&& actAdvImportCloseIcon == expAdvImportCloseIcon
					&& actAdvImportExportFileName == expAdvImportExportFileName
					&& actAdvImportExportUpload == expAdvImportExportUpload
					&& actAdvImportExportTemplateName == expAdvImportExportTemplateName
					&& actAdvImportExportTemplateSettings == expAdvImportExportTemplateSettings
					&& actAdvImportExportHeaderDropdown == expAdvImportExportHeaderDropdown
					&& actAdvImportExportBodyDropdown == expAdvImportExportBodyDropdown
					&& actAdvImportExportBulkImport == expAdvImportExportBulkImport
					&& actAdvImportExportHeaderFieldArea == expAdvImportExportHeaderFieldArea
					&& actAdvImportExportBodyFieldArea == expAdvImportExportBodyFieldArea) 
			{
				excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
				return true;
			} 
			else
			{
				excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
				return false;
			}


	  }
	
	
	public static boolean checkBinsImportDataOption()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(browseFileInImportExport));
		browseFileInImportExport.click();

		Thread.sleep(5000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\binsMasterImport.exe");

		Thread.sleep(5000);

		//getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpBulkIcon));
		//advMasterImpAndExpImportIcon.click();
		//Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(bulkImportOption));
		bulkImportOption.click();
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(importInBulkImportOption));
		importInBulkImportOption.click();
		Thread.sleep(2000);
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
		validationConfirmationMessage.click();

		String actSaveMessageSingleClick = validationConfirmationMessage.getText();
		String expSaveMessageSingleClick = "Records Imported Successfully";

		closeValidationConfirmationMessage.click();

		Thread.sleep(2000);
		
		/*//Here doing twice then bin importing is happening
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));
		masterAdvanceMasterImportORExportBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(browseFileInImportExport));
		browseFileInImportExport.click();

		Thread.sleep(5000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\binsMasterImport.exe");

		Thread.sleep(5000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpBulkIcon));
		advMasterImpAndExpImportIcon.click();
		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
		validationConfirmationMessage.click();
*/		
		
		System.out.println("********************************************** checkCloseImportExportScreenAndImport  *****************************************");
		System.out.println("File Name                    : " + actSaveMessageSingleClick				+ "           Value Expected : " + expSaveMessageSingleClick);

		if (actSaveMessageSingleClick.equalsIgnoreCase(expSaveMessageSingleClick))
		{
			System.out.println("Pass : Import File button works on signle click");
			return true;
		} 
		else 
		{
			System.out.println("Fail : Import File button does not works more than twice click");
			return false;
		}

	}
	
	@FindBy(xpath = "/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td/div/table/tbody/tr[1]/td[10]")
	public static WebElement binsNewCreationName;

	@FindBy(xpath = "/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td/div/table/tbody/tr[2]/td[10]")
	public static WebElement binsNewCreationNameR2;

	public static boolean checkBinsImportedDisplayInItemGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(3000);

		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys(Keys.END);
		masterSearchTxt.sendKeys(Keys.SHIFT, Keys.HOME);

		masterSearchTxt.sendKeys("COGS");
		Thread.sleep(2000);

		masterSearchTxt.sendKeys(Keys.ENTER);*/
	
		String actGetItemNewCreationOfLaneOne = binsNewCreationName.getText();
		String expGetItemNewCreationOfLaneOne = "Bin3";

		String actGetItemNewCreationOfLaneTwo = binsNewCreationNameR2.getText();
		String expGetItemNewCreationOfLaneTwo = "BG1";

		System.out.println("********************************************** checkImportedAccountsDisplayInAccountsDisplayGrid  **********8*********************************");
		System.out.println("File Name                    : " + actGetItemNewCreationOfLaneOne				+ "           Value Expected : " + expGetItemNewCreationOfLaneOne);
		System.out.println("File Name                    : " + actGetItemNewCreationOfLaneTwo				+ "           Value Expected : " + expGetItemNewCreationOfLaneTwo);

		System.out.println("size : " + masterAccountHomeGridCount.size());
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
		masterCloseBtn.click();

		if (actGetItemNewCreationOfLaneOne.equalsIgnoreCase(expGetItemNewCreationOfLaneOne)
				&& actGetItemNewCreationOfLaneTwo.equalsIgnoreCase(expGetItemNewCreationOfLaneTwo))
		{
			System.out.println("Pass : File Exists");
			return true;
		} 
		else
		{
			System.out.println("Fail : File does not Exists");
			return false;
		}
	}


    // Warehouse Master
	public static boolean checkWarehouseMasterImportingWarehouse() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	  {
	 	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 	System.out.println("************************************ checkWarehouseMasterImportingWarehouse ********************************************");

	 
	 		
	 		Thread.sleep(2000);
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	 		homeMenu.click();
	 		Thread.sleep(2000);
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
	 		mastersMenu.click();
	 		Thread.sleep(2000);
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouse));
	 		warehouse.click();
	 		Thread.sleep(2000);
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
			masterRibbonToExpandOptions.click();
	 		Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));
			masterAdvanceMasterImportORExportBtn.click();
	 		Thread.sleep(2000);

			boolean actAdvImportExportBulkIcon = advMasterImpAndExpBulkIcon.isDisplayed();
			boolean actAdvImportExportMappingIcon = advMasterImpAndExpSAvMappingIcon.isDisplayed();
			boolean actAdvExportIcon = advMasterImpAndExpExportIcon.isDisplayed();
			boolean actAdvImportIocn = advMasterImpAndExpImportIcon.isDisplayed();
			boolean actAdvImportCloseIcon = advMasterImpAndExpCloseIcon.isDisplayed();
			boolean actAdvImportExportFileName = advMasterImpAndExpFileName.isDisplayed();
			boolean actAdvImportExportUpload = advMasterImpAndExpUploadFileBtn.isDisplayed();
			boolean actAdvImportExportTemplateName = advMasterImpAndExpTemplateName.isDisplayed();
			boolean actAdvImportExportTemplateSettings = advMasterImpAndExpTemplateSettingBtn.isDisplayed();
			boolean actAdvImportExportHeaderDropdown = advMasterImpAndExpHeaderFieldsDropdown.isDisplayed();
			boolean actAdvImportExportBodyDropdown = advMasterImpAndExpBodyFeildsDropdown.isDisplayed();
			boolean actAdvImportExportBulkImport = advMasterImpAndExpBulkImportDropdown.isDisplayed();
			boolean actAdvImportExportHeaderFieldArea = advMasterImpAndExpHeaderFiledArea.isDisplayed();
			boolean actAdvImportExportBodyFieldArea = advMasterImpAndExpBodyFiledArea.isDisplayed();

		
			boolean expAdvImportExportBulkIcon = true;
			boolean expAdvImportExportMappingIcon = true;
			boolean expAdvExportIcon = true;
			boolean expAdvImportIocn = true;
			boolean expAdvImportCloseIcon = true;
			boolean expAdvImportExportFileName = true;
			boolean expAdvImportExportUpload = true;
			boolean expAdvImportExportTemplateName = true;
			boolean expAdvImportExportTemplateSettings = true;
			boolean expAdvImportExportHeaderDropdown = true;
			boolean expAdvImportExportBodyDropdown = true;
			boolean expAdvImportExportBulkImport = true;
			boolean expAdvImportExportHeaderFieldArea = true;
			boolean expAdvImportExportBodyFieldArea = true;

			System.out.println("***************************************************** checkAdvanceImportExportOption  *****************************************************************");
			//System.out.println("AdvImportExportLabels              : " + actAdvImportExportLabel            + "  Value Expected : "				+ expAdvImportExportLabel);
			System.out.println("AdvImportExportBulkIcon            : " + actAdvImportExportBulkIcon         + "  Value Expected : "				+ expAdvImportExportBulkIcon);
			System.out.println("AdvImportExportMappingIcon         : " + actAdvImportExportMappingIcon      + "  Value Expected : " + expAdvImportExportMappingIcon);
			System.out.println("AdvExportIcon                      : " + actAdvExportIcon                   + "  Value Expected : " + expAdvExportIcon);
			System.out.println("AdvImportIocn                      : " + actAdvImportIocn                   + "  Value Expected : " + expAdvImportIocn);
			System.out.println("AdvImportCloseIcon                 : " + actAdvImportCloseIcon              + "  Value Expected : "				+ expAdvImportCloseIcon);
			System.out.println("AdvImportExportFileName            : " + actAdvImportExportFileName         + "  Value Expected : "				+ expAdvImportExportFileName);
			System.out.println("AdvImportExportUpload              : " + actAdvImportExportUpload           + "  Value Expected : "				+ expAdvImportExportUpload);
			System.out.println("AdvImportExportTemplateName        : " + actAdvImportExportTemplateName	    + "  Value Expected : " + expAdvImportExportTemplateName);
			System.out.println("AdvImportExportTemplateSettings    : " + actAdvImportExportTemplateSettings	+ "  Value Expected : " + expAdvImportExportTemplateSettings);
			System.out.println("AdvImportExportHeaderDropdown      : " + actAdvImportExportHeaderDropdown	+ "  Value Expected : " + expAdvImportExportHeaderDropdown);
			System.out.println("AdvImportExportBodyDropdown        : " + actAdvImportExportBodyDropdown		+ "  Value Expected : " + expAdvImportExportBodyDropdown);
			System.out.println("AdvImportExportBulkImport          : " + actAdvImportExportBulkImport	    + "  Value Expected : " + expAdvImportExportBulkImport);
			System.out.println("AdvImportExportHeaderFieldArea     : " + actAdvImportExportHeaderFieldArea	+ "  Value Expected : " + expAdvImportExportHeaderFieldArea);
			System.out.println("AdvImportExportBodyFieldArea       : " + actAdvImportExportBodyFieldArea    + "  Value Expected : " + expAdvImportExportBodyFieldArea);

			if ( actAdvImportExportBulkIcon == expAdvImportExportBulkIcon
					&& actAdvImportExportMappingIcon == expAdvImportExportMappingIcon
					&& actAdvExportIcon == expAdvExportIcon && actAdvImportIocn == expAdvImportIocn
					&& actAdvImportCloseIcon == expAdvImportCloseIcon
					&& actAdvImportExportFileName == expAdvImportExportFileName
					&& actAdvImportExportUpload == expAdvImportExportUpload
					&& actAdvImportExportTemplateName == expAdvImportExportTemplateName
					&& actAdvImportExportTemplateSettings == expAdvImportExportTemplateSettings
					&& actAdvImportExportHeaderDropdown == expAdvImportExportHeaderDropdown
					&& actAdvImportExportBodyDropdown == expAdvImportExportBodyDropdown
					&& actAdvImportExportBulkImport == expAdvImportExportBulkImport
					&& actAdvImportExportHeaderFieldArea == expAdvImportExportHeaderFieldArea
					&& actAdvImportExportBodyFieldArea == expAdvImportExportBodyFieldArea) 
			{
				excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
				return true;
			} 
			else
			{
				excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
				return false;
			}


	  }
	
	
	public static boolean checkWarehouseImportDataOption()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(browseFileInImportExport));
		browseFileInImportExport.click();

		Thread.sleep(5000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\warehouseMasterImport.exe");

		Thread.sleep(5000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpBulkIcon));
		advMasterImpAndExpImportIcon.click();
		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
		validationConfirmationMessage.click();

		String actSaveMessageSingleClick = validationConfirmationMessage.getText();
		String expSaveMessageSingleClick = "6 Records Imported Successfully";

		closeValidationConfirmationMessage.click();

		/*Thread.sleep(2000);
		
		//Here doing twice then bin importing is happening
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
		masterRibbonToExpandOptions.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));
		masterAdvanceMasterImportORExportBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(browseFileInImportExport));
		browseFileInImportExport.click();

		Thread.sleep(5000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\binsMasterImport.exe");

		Thread.sleep(5000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpBulkIcon));
		advMasterImpAndExpImportIcon.click();
		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
		validationConfirmationMessage.click();*/
		
		
		System.out.println("********************************************** checkCloseImportExportScreenAndImport  *****************************************");
		System.out.println("File Name                    : " + actSaveMessageSingleClick				+ "           Value Expected : " + expSaveMessageSingleClick);

		if (actSaveMessageSingleClick.equalsIgnoreCase(expSaveMessageSingleClick))
		{
			System.out.println("Pass : Import File button works on signle click");
			return true;
		} 
		else 
		{
			System.out.println("Fail : Import File button does not works more than twice click");
			return false;
		}

	}
	

	public static boolean checkWarehouseImportedDisplayInWarehouseGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(3000);

		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys(Keys.END);
		masterSearchTxt.sendKeys(Keys.SHIFT, Keys.HOME);

		masterSearchTxt.sendKeys("COGS");
		Thread.sleep(2000);

		masterSearchTxt.sendKeys(Keys.ENTER);*/
	
		String actGetItemNewCreationOfLaneOne = binsNewCreationName.getText();
		String expGetItemNewCreationOfLaneOne = "STWH";

		String actGetItemNewCreationOfLaneTwo = binsNewCreationNameR2.getText();
		String expGetItemNewCreationOfLaneTwo = "SECUNDERABAD";

		System.out.println("********************************************** checkImportedAccountsDisplayInAccountsDisplayGrid  **********8*********************************");
		System.out.println("File Name                    : " + actGetItemNewCreationOfLaneOne				+ "           Value Expected : " + expGetItemNewCreationOfLaneOne);
		System.out.println("File Name                    : " + actGetItemNewCreationOfLaneTwo				+ "           Value Expected : " + expGetItemNewCreationOfLaneTwo);

		System.out.println("size : " + masterAccountHomeGridCount.size());
		Thread.sleep(2000);
		
	

		if (actGetItemNewCreationOfLaneOne.equalsIgnoreCase(expGetItemNewCreationOfLaneOne)
				&& actGetItemNewCreationOfLaneTwo.equalsIgnoreCase(expGetItemNewCreationOfLaneTwo))
		{
			System.out.println("Pass : File Exists");
			return true;
		} 
		else
		{
			System.out.println("Fail : File does not Exists");
			return false;
		}
	}

	
	
	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
	public static WebElement accountNewCreationName;

	
	public static boolean checkWarehouseSettingThePropertAsInactive() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		Thread.sleep(2000);
		masterSearchTxt.sendKeys(Keys.END);
		masterSearchTxt.sendKeys(Keys.SHIFT, Keys.HOME);

		masterSearchTxt.sendKeys("WHTOINACTIVE");
		Thread.sleep(2000);

		masterSearchTxt.sendKeys(Keys.ENTER);
	
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(unitFirstCheckBox));
		 
		 unitFirstCheckBox.click();
		 		 
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		 
		 masterPropertiesBtn.click();
		 
		 Thread.sleep(3000);
			
		 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(statusDropdown));
		 
	        statusDropdown.click();
	        
	        Thread.sleep(2000);
	        
	        statusDropdown.sendKeys("Inactive");
	        
	        Thread.sleep(2000);
	        
	        statusDropdown.sendKeys(Keys.TAB);
			 

	         getWebDriverWait().until(ExpectedConditions.elementToBeClickable(properties_okBtn));
			 
	         properties_okBtn.click();
	        
	        Thread.sleep(3000);
			 
			 
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationName));
			 
			 
			 System.out.println("qqqqqqqqqqqq"+accountNewCreationName.getText());
			 
			 if(accountNewCreationName.getText().equalsIgnoreCase("WHTOINACTIVE"))
			 { 
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
					masterCloseBtn.click();
					
				 excelReader.setCellData(xlfile, "Sheet1", 662, 9, resPass);
				 return true;
			 }
			 else
			 {
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
					masterCloseBtn.click();
					
				 excelReader.setCellData(xlfile, "Sheet1", 662, 9, resFail);
				 return false;
			 }
		}
	
	

	
	
	//Department Master
	
	public static boolean checkDepartmentMasterImportingDepartment() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	  {
	 	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 	System.out.println("************************************ checkDepartmentMasterImportingDepartment ********************************************");

	 		
	 		Thread.sleep(2000);
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	 		homeMenu.click();

	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
	 		mastersMenu.click();

	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentMenu));
	 		departmentMenu.click();
	 		
	 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
			masterRibbonToExpandOptions.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));
			masterAdvanceMasterImportORExportBtn.click();
		
           Thread.sleep(10000);
			boolean actAdvImportExportBulkIcon = advMasterImpAndExpBulkIcon.isDisplayed();
			boolean actAdvImportExportMappingIcon = advMasterImpAndExpSAvMappingIcon.isDisplayed();
			boolean actAdvExportIcon = advMasterImpAndExpExportIcon.isDisplayed();
			boolean actAdvImportIocn = advMasterImpAndExpImportIcon.isDisplayed();
			boolean actAdvImportCloseIcon = advMasterImpAndExpCloseIcon.isDisplayed();
			boolean actAdvImportExportFileName = advMasterImpAndExpFileName.isDisplayed();
			boolean actAdvImportExportUpload = advMasterImpAndExpUploadFileBtn.isDisplayed();
			boolean actAdvImportExportTemplateName = advMasterImpAndExpTemplateName.isDisplayed();
			boolean actAdvImportExportTemplateSettings = advMasterImpAndExpTemplateSettingBtn.isDisplayed();
			boolean actAdvImportExportHeaderDropdown = advMasterImpAndExpHeaderFieldsDropdown.isDisplayed();
			boolean actAdvImportExportBodyDropdown = advMasterImpAndExpBodyFeildsDropdown.isDisplayed();
			boolean actAdvImportExportBulkImport = advMasterImpAndExpBulkImportDropdown.isDisplayed();
			boolean actAdvImportExportHeaderFieldArea = advMasterImpAndExpHeaderFiledArea.isDisplayed();
			boolean actAdvImportExportBodyFieldArea = advMasterImpAndExpBodyFiledArea.isDisplayed();

		
			boolean expAdvImportExportBulkIcon = true;
			boolean expAdvImportExportMappingIcon = true;
			boolean expAdvExportIcon = true;
			boolean expAdvImportIocn = true;
			boolean expAdvImportCloseIcon = true;
			boolean expAdvImportExportFileName = true;
			boolean expAdvImportExportUpload = true;
			boolean expAdvImportExportTemplateName = true;
			boolean expAdvImportExportTemplateSettings = true;
			boolean expAdvImportExportHeaderDropdown = true;
			boolean expAdvImportExportBodyDropdown = true;
			boolean expAdvImportExportBulkImport = true;
			boolean expAdvImportExportHeaderFieldArea = true;
			boolean expAdvImportExportBodyFieldArea = true;

			System.out.println("***************************************************** checkAdvanceImportExportOption  *****************************************************************");
			//System.out.println("AdvImportExportLabels              : " + actAdvImportExportLabel            + "  Value Expected : "				+ expAdvImportExportLabel);
			System.out.println("AdvImportExportBulkIcon            : " + actAdvImportExportBulkIcon         + "  Value Expected : "				+ expAdvImportExportBulkIcon);
			System.out.println("AdvImportExportMappingIcon         : " + actAdvImportExportMappingIcon      + "  Value Expected : " + expAdvImportExportMappingIcon);
			System.out.println("AdvExportIcon                      : " + actAdvExportIcon                   + "  Value Expected : " + expAdvExportIcon);
			System.out.println("AdvImportIocn                      : " + actAdvImportIocn                   + "  Value Expected : " + expAdvImportIocn);
			System.out.println("AdvImportCloseIcon                 : " + actAdvImportCloseIcon              + "  Value Expected : "				+ expAdvImportCloseIcon);
			System.out.println("AdvImportExportFileName            : " + actAdvImportExportFileName         + "  Value Expected : "				+ expAdvImportExportFileName);
			System.out.println("AdvImportExportUpload              : " + actAdvImportExportUpload           + "  Value Expected : "				+ expAdvImportExportUpload);
			System.out.println("AdvImportExportTemplateName        : " + actAdvImportExportTemplateName	    + "  Value Expected : " + expAdvImportExportTemplateName);
			System.out.println("AdvImportExportTemplateSettings    : " + actAdvImportExportTemplateSettings	+ "  Value Expected : " + expAdvImportExportTemplateSettings);
			System.out.println("AdvImportExportHeaderDropdown      : " + actAdvImportExportHeaderDropdown	+ "  Value Expected : " + expAdvImportExportHeaderDropdown);
			System.out.println("AdvImportExportBodyDropdown        : " + actAdvImportExportBodyDropdown		+ "  Value Expected : " + expAdvImportExportBodyDropdown);
			System.out.println("AdvImportExportBulkImport          : " + actAdvImportExportBulkImport	    + "  Value Expected : " + expAdvImportExportBulkImport);
			System.out.println("AdvImportExportHeaderFieldArea     : " + actAdvImportExportHeaderFieldArea	+ "  Value Expected : " + expAdvImportExportHeaderFieldArea);
			System.out.println("AdvImportExportBodyFieldArea       : " + actAdvImportExportBodyFieldArea    + "  Value Expected : " + expAdvImportExportBodyFieldArea);

			if ( actAdvImportExportBulkIcon == expAdvImportExportBulkIcon
					&& actAdvImportExportMappingIcon == expAdvImportExportMappingIcon
					&& actAdvExportIcon == expAdvExportIcon && actAdvImportIocn == expAdvImportIocn
					&& actAdvImportCloseIcon == expAdvImportCloseIcon
					&& actAdvImportExportFileName == expAdvImportExportFileName
					&& actAdvImportExportUpload == expAdvImportExportUpload
					&& actAdvImportExportTemplateName == expAdvImportExportTemplateName
					&& actAdvImportExportTemplateSettings == expAdvImportExportTemplateSettings
					&& actAdvImportExportHeaderDropdown == expAdvImportExportHeaderDropdown
					&& actAdvImportExportBodyDropdown == expAdvImportExportBodyDropdown
					&& actAdvImportExportBulkImport == expAdvImportExportBulkImport
					&& actAdvImportExportHeaderFieldArea == expAdvImportExportHeaderFieldArea
					&& actAdvImportExportBodyFieldArea == expAdvImportExportBodyFieldArea) 
			{
				excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
				return true;
			} 
			else
			{
				excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
				return false;
			}


	  }
	
	
	public static boolean checkDepartmentImportDataOption()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(browseFileInImportExport));
		browseFileInImportExport.click();

		Thread.sleep(5000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\departmentMasterImport.exe");

		Thread.sleep(5000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpBulkIcon));
		advMasterImpAndExpImportIcon.click();
		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
		validationConfirmationMessage.click();

		String actSaveMessageSingleClick = validationConfirmationMessage.getText();
		String expSaveMessageSingleClick = "6 Records Imported Successfully";

		closeValidationConfirmationMessage.click();

		/*Thread.sleep(2000);
		
		//Here doing twice then bin importing is happening
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));
		masterRibbonToExpandOptions.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));
		masterAdvanceMasterImportORExportBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(browseFileInImportExport));
		browseFileInImportExport.click();

		Thread.sleep(5000);

		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\binsMasterImport.exe");

		Thread.sleep(5000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(advMasterImpAndExpBulkIcon));
		advMasterImpAndExpImportIcon.click();
		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
		validationConfirmationMessage.click();*/
		
		
		
		
		System.out.println("********************************************** checkCloseImportExportScreenAndImport  *****************************************");
		System.out.println("File Name                    : " + actSaveMessageSingleClick				+ "           Value Expected : " + expSaveMessageSingleClick);

		if (actSaveMessageSingleClick.equalsIgnoreCase(expSaveMessageSingleClick))
		{
			System.out.println("Pass : Import File button works on signle click");
			return true;
		} 
		else 
		{
			System.out.println("Fail : Import File button does not works more than twice click");
			return false;
		}

	}
	

	public static boolean checkDepartmentImportedDisplayInDepartmentGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{

		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(3000);

		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys(Keys.END);
		masterSearchTxt.sendKeys(Keys.SHIFT, Keys.HOME);

		masterSearchTxt.sendKeys("COGS");
		Thread.sleep(2000);

		masterSearchTxt.sendKeys(Keys.ENTER);*/
	
		String actGetItemNewCreationOfLaneOne = binsNewCreationName.getText();
		String expGetItemNewCreationOfLaneOne = "DepartmentST";

		String actGetItemNewCreationOfLaneTwo = binsNewCreationNameR2.getText();
		String expGetItemNewCreationOfLaneTwo = "INDIA";

		System.out.println("********************************************** checkImportedAccountsDisplayInAccountsDisplayGrid  *******************************************");
		System.out.println("File Name                    : " + actGetItemNewCreationOfLaneOne				+ "           Value Expected : " + expGetItemNewCreationOfLaneOne);
		System.out.println("File Name                    : " + actGetItemNewCreationOfLaneTwo				+ "           Value Expected : " + expGetItemNewCreationOfLaneTwo);

		System.out.println("size : " + masterAccountHomeGridCount.size());
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
		masterCloseBtn.click();
		
	
		

		if (actGetItemNewCreationOfLaneOne.equalsIgnoreCase(expGetItemNewCreationOfLaneOne)
				&& actGetItemNewCreationOfLaneTwo.equalsIgnoreCase(expGetItemNewCreationOfLaneTwo))
		{
			System.out.println("Pass : File Exists");
			return true;
		} 
		else
		{
			System.out.println("Fail : File does not Exists");
			return false;
		}
	}


	
	public boolean checkLogoutUserSecurityPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	   {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		 
		 try
			{
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			  userNameDisplay.click();
			 
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			  logoutOption.click();
			  
			  Thread.sleep(2000);
			  
			  
			  
			  boolean actUserLoginPage              = username.isDisplayed() && username.isEnabled()
	                                                  && password.isDisplayed() && password.isEnabled();
	                                         
			  boolean expUserLoginPage              = true;
			  
			  if(actUserLoginPage==expUserLoginPage)  
		      {
				System.out.println("***Test Pass: Login Successfull***");
				excelReader.setCellData(xlfile, xlSheetName, 285, 9, resPass);
				return true;
			  }
		      else
		      {
		  	 
				System.out.println("***Test Fail: Login Not Successfull***");
				excelReader.setCellData(xlfile, xlSheetName, 285, 9, resFail);
				return false;
			  }
			}
			catch (Exception e)
			{
			 	String exception = e.getMessage();
			 	excelReader.setCellData(xlfile, xlSheetName, 285, 10, exception);	
				return false;
			}
		}
		
	
	
	
	
 /*
  //COGS ACCOUNTS AND ITEMS SAVING STARTS
  public boolean checkOpenAccountsMastersToSaveCOGS() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
     excelReader = new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     System.out.println("********************* checkOpenAccountsMastersToSaveCOGS Method Executes.............   *****************************");

     try
     {

        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
     	homeMenu.click();

        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu)); 
     	mastersMenu.click();
 		
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
	 	accounts.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));
	

	 	String actAccountsTitle         = accountsTitle.getText();
	 	String expAccountsTitle         = "Account";
	 	
	 	
	   	System.out.println("Accounts Masters Title Display Value Actual        : " + actAccountsTitle       + " Value Expected : " + expAccountsTitle);
	
	 	if (actAccountsTitle.equalsIgnoreCase(expAccountsTitle)) 
	 	{
	 		excelReader.setCellData(xlfile, xlSheetName, 7, 9, resPass);
	 		return true;
	 	} 
	     else 
	     {
	 		excelReader.setCellData(xlfile, xlSheetName, 7, 9, resFail);
	 		return false;
	 	}
   }
   catch (NoSuchElementException nse)
   {
  	System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :   " + nse.getMessage());
 	return false;
   }
   catch(TimeoutException te)
   {
 	System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :   " + te.getMessage());
 	return false;
   }
  }
  
 
  */
  
  // CONFIGURE TRANSACTIONS STARTS 
  
   /* @FindBy(xpath="//*[@id='16']/div/span")
	private static WebElement  SettingsmenuBtn;*/
  
	/*@FindBy(xpath = "//a[@id='16']//div[@class='form-group theme_button_color']")
	private static WebElement settingsmenuBtn;*/

		@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
		private static WebElement  ConfigureTransactionBtn;
	
			@FindBy(xpath="//label[contains(text(),'Preferences')]")
			private static WebElement  PreferencesBtn;
			
			@FindBy(xpath="//label[contains(text(),'Document Customization')]")
			private static WebElement  DocumentCustomizationBtn;			
			
		@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
		private static WebElement  settingsConfigureTransactions;   
		
		@FindBy(xpath="//*[@id='68']/span")
		private static WebElement  settingsTransactionAuthorization;
		
		@FindBy(xpath="//*[@id='235']/span")
		private static WebElement  settingsPricebookAuthorization;
		
		@FindBy(xpath="//*[@id='19']/span")
		private static WebElement  settingsConfigureMasters;
		
		@FindBy(xpath="//*[@id='67']/span")
		private static WebElement  settingsMasterAuthorization;
	
		@FindBy(xpath="//*[@id='69']/span")
		private static WebElement  settingsCreditLimitAuthorization;
		
		@FindBy(xpath="//*[@id='74']/span")
		private static WebElement  settingsDesignWorkflow;
		
		@FindBy(xpath="//*[@id='105']/span")
		private static WebElement  settingsSettingsWizard;
		
		@FindBy(xpath="//*[@id='232']/span")
		private static WebElement  settingsBatchCodeGeneration;
		
		@FindBy(xpath="//*[@id='34']/span")
		private static WebElement  settingsMapCreditLimit;
		
		@FindBy(xpath="//*[@id='257']/span")
		private static WebElement  settingsVATTaxCode;
		
		@FindBy(xpath="//*[@id='258']/span")
		private static WebElement  settingsCustomerPortalAdmin;
		
		@FindBy(xpath="//*[@id='3308']/span")
		private static WebElement  settingsBudgetAuthorization;
		
		@FindBy(xpath="//*[@id='3320']/span")
		private static WebElement  settingsPaymentGatewayIntegration;	
		
		@FindBy(xpath="//*[@id='3327']/span")
		private static WebElement  settingsFixedAssetsAuthorization;	
	
		@FindBy(xpath="//*[@id='navigation_menu']/li[8]/ul/li")
		private static List<WebElement>  settingMenuList;
		
		
		
  public boolean checkAvailableOptionsInSettingsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
		
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkAvailableOptionsInSettingsMenu Method Executes.............   *****************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		
		ArrayList<String>actsettingMenuList=new ArrayList<String>();
		
		int SettingMenuCount=settingMenuList.size();
		
		System.out.println(" SettingMenuCount  :  "+SettingMenuCount);
		
		for (int i = 0; i < SettingMenuCount; i++)
		{
			String data=settingMenuList.get(i).getText();
			actsettingMenuList.add(data);
		}
		
		String actsettingMenu=actsettingMenuList.toString();
		String expsettingMenu=excelReader.getCellData(xlSheetName, 918, 7);
		
		System.err.println("  Actual settingMenu : "+actsettingMenu);
		System.err.println("  Expected  settingMenu : "+expsettingMenu);
		
		excelReader.setCellData(xlfile, xlSheetName, 918, 8, actsettingMenu);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsConfigureTransactions));
			
		boolean actConfigureTransactionsMenu     = settingsConfigureTransactions.isDisplayed(); 
		boolean actTransactionAuthorizationMenu  = settingsTransactionAuthorization.isDisplayed();
		boolean actPriceBookAuthorizationMenu    = settingsPricebookAuthorization.isDisplayed();
		boolean actConfigureMastersMenu          = settingsConfigureMasters.isDisplayed(); 
		boolean actMasterAuthorizationMenu       = settingsMasterAuthorization.isDisplayed();
		boolean actCreditLimitAuthorizationMenu  = settingsCreditLimitAuthorization.isDisplayed(); 
		boolean actDesignWorkFlowMenu            = settingsDesignWorkflow.isDisplayed();
		boolean actSettingsWizardMenu            = settingsSettingsWizard.isDisplayed(); 
	    boolean actBatchCodeGenerationMenu       = settingsBatchCodeGeneration.isDisplayed(); 
		boolean actMapCreditLimitMenu            = settingsMapCreditLimit.isDisplayed(); 
		boolean actVATTaxCodeMenu                = settingsVATTaxCode.isDisplayed();
		boolean actCustomerPortalAdminMenu       = settingsCustomerPortalAdmin.isDisplayed(); 
	    boolean actPaymentGatewayIntegrationMenu = settingsPaymentGatewayIntegration.isDisplayed();
        boolean actFixedAssetsAuthorization      = settingsFixedAssetsAuthorization.isDisplayed();
        
        
        boolean expConfigureTransactionsMenu     = true;
        boolean expTransactionAuthorizationMenu  = true;
        boolean expPriceBookAuthorizationMenu    = true;
        boolean expConfigureMastersMenu          = true;
        boolean expMasterAuthorizationMenu       = true;
        boolean expCreditLimitAuthorizationMenu  = true;
        boolean expDesignWorkFlowMenu            = true;
        boolean expSettingsWizardMenu            = true;
        boolean expBatchCodeGenerationMenu       = true;
        boolean expMapCreditLimitMenu            = true;
        boolean expVATTaxCodeMenu                = true;
        boolean expCustomerPortalAdminMenu       = true;
        boolean expPaymentGatewayIntegrationMenu = true;
        boolean expFixedAssetsAuthorization      = true;
        
        System.out.println("Configure Transactions Menu Value Actual      : " + actConfigureTransactionsMenu +     " Value Expected : " + expConfigureTransactionsMenu);
        System.out.println("Transaction Authorization Menu Value Actual   : " + actTransactionAuthorizationMenu +  " Value Expected : " + expTransactionAuthorizationMenu);
        System.out.println("Pricebook Authorization Menu Value Actual     : " + actPriceBookAuthorizationMenu +    " Value Expected : " + expPriceBookAuthorizationMenu);
        System.out.println("Configure Masters Menu Value Actual           : " + actConfigureMastersMenu +          " Value Expected : " + expConfigureMastersMenu);
        System.out.println("Master Authorization Menu Value Actual        : " + actMasterAuthorizationMenu +       " Value Expected : " + expMasterAuthorizationMenu);
        System.out.println("Credit Limit Authoization Menu Value Actual   : " + actCreditLimitAuthorizationMenu +  " Value Expected : " + expCreditLimitAuthorizationMenu);
        System.out.println("Design Workflow Menu Value Actual             : " + actDesignWorkFlowMenu +            " Value Expected : " + actDesignWorkFlowMenu);
        System.out.println("Settings Wizard Menu Value Actual             : " + actSettingsWizardMenu +            " Value Expected : " + actSettingsWizardMenu);
        System.out.println("Batch Code Generation Menu Value Actual       : " + expBatchCodeGenerationMenu +       " Value Expected : " + expBatchCodeGenerationMenu);
        System.out.println("Map Credit Limit Menu Value Actual            : " + expMapCreditLimitMenu +            " Value Expected : " + expMapCreditLimitMenu);
        System.out.println("VAT Tax Code Menu Value Actual                : " + expVATTaxCodeMenu +                " Value Expected : " + expVATTaxCodeMenu);
        System.out.println("Customer Portal Menu Value Actual             : " + expCustomerPortalAdminMenu +       " Value Expected : " + expCustomerPortalAdminMenu);
        System.out.println("Payment Gateway Integration Menu Value Actual : " + expPaymentGatewayIntegrationMenu + " Value Expected : " + expPaymentGatewayIntegrationMenu);
        System.out.println("Fixed Assets Authorization Menu Value Actual  : " + expFixedAssetsAuthorization +      " Value Expected : " + expFixedAssetsAuthorization);
        
        
        
        
        boolean displayResult=actConfigureTransactionsMenu==expConfigureTransactionsMenu && actTransactionAuthorizationMenu==expTransactionAuthorizationMenu
								&& actPriceBookAuthorizationMenu==expPriceBookAuthorizationMenu && actConfigureMastersMenu==expConfigureMastersMenu
								&& actMasterAuthorizationMenu==expMasterAuthorizationMenu && actCreditLimitAuthorizationMenu==expCreditLimitAuthorizationMenu
								&& actDesignWorkFlowMenu==expDesignWorkFlowMenu && actSettingsWizardMenu==expSettingsWizardMenu
								&& actBatchCodeGenerationMenu==expBatchCodeGenerationMenu && actMapCreditLimitMenu==expMapCreditLimitMenu
								&& actVATTaxCodeMenu==expVATTaxCodeMenu && actCustomerPortalAdminMenu==expCustomerPortalAdminMenu
								&& actPaymentGatewayIntegrationMenu==expPaymentGatewayIntegrationMenu && actFixedAssetsAuthorization==expFixedAssetsAuthorization;
				        
        
        String actDisplayResult=Boolean.toString(displayResult);
        String expDisplayResult=excelReader.getCellData(xlSheetName, 919, 7);
        
        excelReader.setCellData(xlfile, xlSheetName, 919, 8, actDisplayResult);
        		
        
        
        
          
		if (actDisplayResult.equalsIgnoreCase(expDisplayResult)&& 
				actsettingMenu.equalsIgnoreCase(expsettingMenu))
		{	
			System.out.println("Test Pass : VerifyPreferencesOptions Elements Are Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 917, 9, resPass);
			return true;
		} 	
		else 
		{
			System.out.println("Test Fail :VerifyPreferencesOptions Elements Are Not Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 917, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 917, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	
	
	@FindBy(xpath="//*[@id='dvTag']/div/label")
	private static List<WebElement>  configureTransactionPageList;
  

	
  public boolean checkConfigureTransactionsMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkConfigureTransactionsMenu Method Executes.............   *****************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
	
		
     ArrayList<String>actconfigureTransactionPageList=new ArrayList<String>();
		
		int configureTransactionPageCount=configureTransactionPageList.size();
		
		System.out.println(" configureTransactionPageCount  :  "+configureTransactionPageCount);
		
		for (int i = 0; i < configureTransactionPageCount; i++)
		{
			String data=configureTransactionPageList.get(i).getText();
			actconfigureTransactionPageList.add(data);
		}
		
		String actconfigureTransactionPage=actconfigureTransactionPageList.toString();
		String expconfigureTransactionPage=excelReader.getCellData(xlSheetName, 921, 7);
		
		System.err.println("  Actual configureTransactionPageList : "+actconfigureTransactionPage);
		System.err.println("  Expected  configureTransactionPageList : "+expconfigureTransactionPage);
		
		excelReader.setCellData(xlfile, xlSheetName, 921, 8, actconfigureTransactionPage);
		
		
		boolean actPreferencesOption             = PreferencesBtn.isDisplayed(); 
		boolean actDocumentCustomizationOption   = DocumentCustomizationBtn.isDisplayed();
		
		boolean expPreferencesOption             = true;
	    boolean expDocumentCustomizationOption   = true;
		
	    System.out.println("Preferences Option Value Actual            : " + actPreferencesOption           +  " Value Expected : " + expPreferencesOption);
	    System.out.println("Document Customization Option Value Actual : " + actDocumentCustomizationOption +  " Value Expected : " + expDocumentCustomizationOption);
	     
	    
	    boolean displayResult=actPreferencesOption==expPreferencesOption && actDocumentCustomizationOption==expDocumentCustomizationOption;
	    
	    String actDisplayResult=Boolean.toString(displayResult);
	    String expDisplayResult=excelReader.getCellData(xlSheetName, 922, 7);
	    
	    excelReader.setCellData(xlfile, xlSheetName, 922, 8, actDisplayResult);
	    
		if (actDisplayResult.equalsIgnoreCase(expDisplayResult)&& actconfigureTransactionPage.equalsIgnoreCase(expconfigureTransactionPage))
		{	
			System.out.println("Test Pass : VerifyPreferencesOptions Elements Are Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 920, 9, resPass);
			return true;
		} 	
		else 
		{
			System.out.println("Test Fail :VerifyPreferencesOptions Elements Are Not Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 920, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 920, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	
  }
 
	
	@FindBy(xpath="//a[@id='0']")
	private static WebElement  TagsBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='1']")
	private static WebElement  AccountsBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='2']")
	private static WebElement  BudgetBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='3']")
	private static WebElement  ARAPBtn;
	
	@FindBy(xpath="//a[@id='4']")
	private static WebElement  MiselleanousBtn;
	
	@FindBy(xpath="//a[@id='5']")
	private static WebElement  PDCBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']/li[3]/a[@id='6']")
	private static WebElement  InventoryBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='7']")
	private static WebElement  BatchBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='30']")
	private static WebElement  RMABtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='8']")
	private static WebElement  BinsBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='9']")
	private static WebElement  HirePurchaseBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='10']")
	private static WebElement  QuotationAnalysisBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='34']")
	private static WebElement  RFIDBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='29']")
	private static WebElement  AutoIndentBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='14']")
	private static WebElement  ABCAnalysisBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='11']")
	private static WebElement  ReportBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='12']")
	private static WebElement  InternetBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='13']")
	private static WebElement  MailSettingsBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='16']")
	private static WebElement  MastersBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='17']")
	private static WebElement  ExternalModulesBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='18']")
	private static WebElement  InfoBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='19']")
	private static WebElement  ProductionBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='20']")
	private static WebElement  MrpBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='22']")
	private static WebElement  FixedAssetsBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='25']")
	private static WebElement  VatBtn;
	
	@FindBy(xpath="//a[@id='28']")
	private static WebElement  PosBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='35']")
	private static WebElement  WareHouseManagementBtn;
	
	@FindBy(xpath="//a[@id='36']")
	private static WebElement  LetterForCreditBtn;
	
	@FindBy(xpath="//*[@id='preferenceUL']/li[16]")
	private static WebElement  PronghornBtn;
	
	@FindBy(xpath="//input[@id='txtVoucherWizard']")
	private static WebElement  SearchTxt;
	
	@FindBy(xpath="//span[@id='updateButton']")
	private static WebElement  UpdateBtn;
	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  CloseBtn;
	
	@FindBy(xpath="//select[@id='Accounts']")
	private static WebElement  AccountingDropdown;
	
	@FindBy(xpath="//select[@id='Inventory']")
	private static WebElement  InventoryDropdown;
	
	@FindBy(xpath="//select[@id='Payroll']")
	private static WebElement  PayRollCostCenterDropdown;
	
	@FindBy(xpath="//select[@id='SellingRate']")
	private static WebElement  SellingsRateDropdown;
	
	@FindBy(xpath="//select[@id='BuyingRates']")
	private static WebElement  BuyingRatesdropdown;
	
	@FindBy(xpath="//select[@id='PayrolDept']")
	private static WebElement  PayRollDepartmentDropdown;
	
	@FindBy(xpath="//select[@id='PayrollSite']")
	private static WebElement  PayRollSiteDropdown;
	
	@FindBy(xpath="//select[@id='DeptwiseAppropriation']")
	private static WebElement  FinancialAppropriationByDropdown;
	
	@FindBy(xpath="//select[@id='VAT']")
	private static WebElement  VatDropdown;
	
	@FindBy(xpath="//select[@id='Schemes']")
	private static WebElement  SchemesDropdown;
	
	@FindBy(xpath="//select[@id='Inventoryallocationtag']")
	private static WebElement  InventoryAloocationTagDropdown;

	@FindBy(xpath="//*[@id='preferenceUL']/li/a")
	private static List<WebElement>  preferenceList;
	
	
	
 public boolean checkPreferencesOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
	System.out.println("********************* checkPreferencesOption Method Executes.............   *****************************");
	
	try
	{
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(QuotationAnalysisBtn));
	
		boolean actTags                           = TagsBtn.isDisplayed();
		boolean actAccounts                       = AccountsBtn.isDisplayed();
		boolean actBudget                         = BudgetBtn.isDisplayed(); 
		boolean actARAP                           = ARAPBtn.isDisplayed(); 
		boolean actMiscelleanous                  = MiselleanousBtn.isDisplayed(); 
		boolean actPDC                            = PDCBtn.isDisplayed();
		boolean actInventory                      = InventoryBtn.isDisplayed();
		boolean actBatch                          = BatchBtn.isDisplayed();
		boolean actRMA                            = RMABtn.isDisplayed();    
		boolean actBins                           = BinsBtn.isDisplayed(); 
		boolean actPurchase                       = HirePurchaseBtn.isDisplayed();
		boolean actQuotationAnalysis              = QuotationAnalysisBtn.isDisplayed(); 
		boolean actRFID                           = RFIDBtn.isDisplayed(); 
		boolean actAutoIndent                     = AutoIndentBtn.isDisplayed(); 
		
		boolean actABCAnalysis                    = ABCAnalysisBtn.isDisplayed(); 
		boolean actReport                         = ReportBtn.isDisplayed(); 
		boolean actInternet                       = InternetBtn.isDisplayed();	
		boolean actMiscellaneous                  = MailSettingsBtn.isDisplayed();  
		boolean actMasters                        = MastersBtn.isDisplayed();       
		boolean actExternalModules                = ExternalModulesBtn.isDisplayed();  
		boolean actInfo                           = InfoBtn.isDisplayed();  
		boolean actProduction                     = ProductionBtn.isDisplayed();  
		
		boolean actMRP                            = MrpBtn.isDisplayed(); 
		boolean actFixedAssets                    = FixedAssetsBtn.isDisplayed(); 
		boolean actVAT                            = VatBtn.isDisplayed(); 
		boolean actPOS                            = PosBtn.isDisplayed(); 
		boolean actWarehouseManagement            = WareHouseManagementBtn.isDisplayed();  
		boolean actLetterForCredit                = LetterForCreditBtn.isDisplayed(); 
		
		
		boolean actPronghorn                      = PronghornBtn.isDisplayed();
	
		
		boolean expTags                           = true;
		boolean expAccounts                       = true;
		boolean expBudget                         = true; 
		boolean expARAP                           = true;  
		boolean expMiscelleanous                  = true;  
		boolean expPDC                            = true; 
		boolean expInventory                      = true; 
		boolean expBatch                          = true; 
		boolean expRMA                            = true;     
		boolean expBins                           = true;  
		boolean expPurchase                       = true; 
		boolean expQuotationAnalysis              = true;  
		boolean expRFID                           = true;  
		boolean expAutoIndent                     = true;  
		
		boolean expABCAnalysis                    = true;  
		boolean expReport                         = true;  
		boolean expInternet                       = true; 	
		boolean expMiscellaneous                  = true;   
		boolean expMasters                        = true;        
		boolean expExternalModules                = true;   
		boolean expInfo                           = true;   
		boolean expProduction                     = true;   
		
		boolean expMRP                            = true;   
		boolean expFixedAssets                    = true;  
		boolean expVAT                            = true;  
		boolean expPOS                            = true;  
		boolean expWarehouseManagement            = true;   
		boolean expLetterForCredit                = true;  
		boolean expPronghorn                      = true; 
		
		
		 ArrayList<String>actpreferenceList=new ArrayList<String>();
			
			int preferenceListCount=preferenceList.size();
			
			System.out.println(" preferenceListCount  :  "+preferenceListCount);
			
			for (int i = 0; i < preferenceListCount; i++)
			{
				String data=preferenceList.get(i).getText();
				actpreferenceList.add(data);
			}
			
			String actpreferenceOptions=actpreferenceList.toString();
			String exppreferenceOptions=excelReader.getCellData(xlSheetName, 924, 7);
			
			System.err.println("  Actual preferenceList : "+actpreferenceOptions);
			System.err.println("  Expected  preferenceList : "+exppreferenceOptions);
			
			excelReader.setCellData(xlfile, xlSheetName, 924, 8, actpreferenceOptions);
		
	    System.out.println("Tags Value Actual                : " + actTags +                " Value Expected : " + expTags);
        System.out.println("Accounts Value Actual            : " + actAccounts +            " Value Expected : " + expAccounts);
        System.out.println("Budget Value Actual              : " + actBudget +              " Value Expected : " + expBudget);
        System.out.println("AR AP Value Actual               : " + actARAP +                " Value Expected : " + expARAP);
        System.out.println("Miscellaneous Value Actual       : " + actMiscelleanous +       " Value Expected : " + expMiscelleanous);
        System.out.println("PDC Value Actual                 : " + actPDC +                 " Value Expected : " + expPDC);
        System.out.println("Inventory Value Actual           : " + actInventory +           " Value Expected : " + expInventory);
        System.out.println("Batch Value Actual               : " + actBatch +               " Value Expected : " + expBatch);
        System.out.println("RMA Value Actual                 : " + actRMA +                 " Value Expected : " + expRMA);
        System.out.println("Bins Value Actual                : " + actBins +                " Value Expected : " + expBins);
        System.out.println("Purchase Value Actual            : " + actPurchase +            " Value Expected : " + expPurchase);
        System.out.println("Quotation Analysis Value Actual  : " + actQuotationAnalysis +   " Value Expected : " + expQuotationAnalysis);
        System.out.println("RFID Menu Value Actual           : " + actRFID +                " Value Expected : " + expRFID);
        System.out.println("Auto Indent Value Actual         : " + actAutoIndent +          " Value Expected : " + expAutoIndent);
        
        
        System.out.println("ABC Analysis Value Actual        : " + actABCAnalysis +         " Value Expected : " + expABCAnalysis);
        System.out.println("Report Value Actual              : " + actReport +              " Value Expected : " + expReport);
        System.out.println("Internet Value Actual            : " + actInternet +            " Value Expected : " + expInternet);
        System.out.println("Miscellaneous Value Actual       : " + actMiscellaneous +       " Value Expected : " + expMiscellaneous);
        System.out.println("Masters Value Actual             : " + actMasters +             " Value Expected : " + expMasters);
        System.out.println("External Modules Value Actual    : " + actExternalModules +     " Value Expected : " + expExternalModules);
        System.out.println("Info Value Actual                : " + actInfo +                " Value Expected : " + expInfo);
        System.out.println("Production Value Actual          : " + actProduction +          " Value Expected : " + expProduction);
        
        System.out.println("MRP Value Actual                 : " + actMRP +                 " Value Expected : " + expMRP);
        System.out.println("Fixed Assets Value Actual        : " + actFixedAssets +         " Value Expected : " + expFixedAssets);
        System.out.println("VAT Value Actual                 : " + actVAT +                 " Value Expected : " + expVAT);
        System.out.println("POS Value Actual                 : " + actPOS +                 " Value Expected : " + expPOS);
        System.out.println("Warehouse Mangement Value Actual : " + actWarehouseManagement + " Value Expected : " + expWarehouseManagement);
        System.out.println("Letter For Credit Value Actual   : " + actLetterForCredit +     " Value Expected : " + expLetterForCredit);
        System.out.println("Pronghorn Value Actual           : " + actPronghorn +           " Value Expected : " + expPronghorn);
	            
        
        boolean displayResult=actTags==expTags && actAccounts==expAccounts
								&& actBudget==expBudget && actARAP==expARAP
								&& actMiscelleanous==expMiscelleanous && actPDC==expPDC
								&& actInventory==expInventory && actBatch==expBatch
								&& actRMA==expRMA && actBins==expBins
								&& actPurchase==expPurchase && actQuotationAnalysis==expQuotationAnalysis
								&& actRFID==actRFID && actAutoIndent==actAutoIndent
								&& actABCAnalysis==expABCAnalysis && actReport==expReport
								&& actInternet==expInternet && actInternet==expInternet
								&& actMiscellaneous==expMiscellaneous && actMasters==expMasters
								&& actExternalModules==expExternalModules && actInfo==expInfo
				                && actProduction==expProduction && actMRP==expMRP
				                && actFixedAssets==expFixedAssets && actVAT==expVAT
				                && actPOS==expPOS && actWarehouseManagement==expWarehouseManagement
				                && actLetterForCredit==expLetterForCredit && actPronghorn==expPronghorn;
        
        String actDisplayResult=Boolean.toString(displayResult);
        String expDisplayResult=excelReader.getCellData(xlSheetName, 925, 7);
        
        excelReader.setCellData(xlfile, xlSheetName, 925, 8, actDisplayResult);
        
		if (actDisplayResult.equalsIgnoreCase(expDisplayResult)&& 
				actpreferenceOptions.equalsIgnoreCase(exppreferenceOptions))
		{	
			System.out.println("Test Pass : VerifyPreferencesOptions Elements Are Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 923, 9, resPass);
			return true;
		} 	
		else 
		{
			System.out.println("Test Fail :VerifyPreferencesOptions Elements Are Not Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 923, 9, resFail);
			return false;
		}
	}
	
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 923, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
		
	
	
 public boolean checkTagsDefaultTagSettingsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkTagsDefaultTagSettingsOption Method Executes.............   *****************************");
	
	try
	{
		
		
        ArrayList<String>actconfigureTransactionPageList=new ArrayList<String>();
		
		int configureTransactionPageCount=configureTransactionPageList.size();
		
		System.out.println(" configureTransactionPageCount  :  "+configureTransactionPageCount);
		
		for (int i = 0; i < configureTransactionPageCount; i++)
		{
			String data=configureTransactionPageList.get(i).getText();
			actconfigureTransactionPageList.add(data);
		}
		
		String actconfigureTransactionPage=actconfigureTransactionPageList.toString();
		String expconfigureTransactionPage=excelReader.getCellData(xlSheetName, 927, 7);
		
		System.err.println("  Actual configureTransactionPageList : "+actconfigureTransactionPage);
		System.err.println("  Expected  configureTransactionPageList : "+expconfigureTransactionPage);
		
		excelReader.setCellData(xlfile, xlSheetName, 927, 8, actconfigureTransactionPage);
		
		boolean actAccountingDropdown             = AccountingDropdown.isDisplayed(); 
		boolean actInventoryDropdown              = InventoryDropdown.isDisplayed();  
		boolean actPayrollCostcenterDropdown      = PayRollCostCenterDropdown.isDisplayed();
		boolean actSellingRatesDropdown           = SellingsRateDropdown.isDisplayed(); 
		boolean actBuyingRatesDropdown            = BuyingRatesdropdown.isDisplayed();
		boolean actPayrollDepartmentDropdown      = PayRollDepartmentDropdown.isDisplayed(); 
		boolean actPayrollSiteDropdown            = PayRollSiteDropdown.isDisplayed(); 
		boolean actFinancialAppropriationDropdown = FinancialAppropriationByDropdown.isDisplayed(); 
		boolean actVATDropdown                    = VatDropdown.isDisplayed(); 
		boolean actSchemeDropdown                 = SchemesDropdown.isDisplayed(); 
		boolean actInventoryAllocationTagDropdown = InventoryAloocationTagDropdown.isDisplayed(); 
		boolean actSearchTxt                      = SearchTxt.isDisplayed(); 
		boolean actUpdateBtn                      = UpdateBtn.isDisplayed(); 
		boolean actCloseBtn                       = CloseBtn.isDisplayed();
		
		boolean expAccountingDropdown             = true;
		boolean expInventoryDropdown              = true;  
		boolean expPayrollCostcenterDropdown      = true;
		boolean expSellingRatesDropdown           = true; 
		boolean expBuyingRatesDropdown            = true;
		boolean expPayrollDepartmentDropdown      = true; 
		boolean expPayrollSiteDropdown            = true; 
		boolean expFinancialAppropriationDropdown = true; 
		boolean expVATDropdown                    = true; 
		boolean expSchemeDropdown                 = true; 
		boolean expInventoryAllocationTagDropdown = true; 
		boolean expSearchTxt                      = true; 
		boolean expUpdateBtn                      = true; 
		boolean expCloseBtn                       = true;
		
	    System.out.println("Configure Transactions Menu Value Actual      : " + actAccountingDropdown +              " Value Expected : " + expAccountingDropdown);
        System.out.println("Transaction Authorization Menu Value Actual   : " + actInventoryDropdown +               " Value Expected : " + expInventoryDropdown);
        System.out.println("Pricebook Authorization Menu Value Actual     : " + actPayrollCostcenterDropdown +       " Value Expected : " + expPayrollCostcenterDropdown);
        System.out.println("Configure Masters Menu Value Actual           : " + actSellingRatesDropdown +            " Value Expected : " + expSellingRatesDropdown);
        System.out.println("Master Authorization Menu Value Actual        : " + actBuyingRatesDropdown +             " Value Expected : " + expBuyingRatesDropdown);
        System.out.println("Credit Limit Authoization Menu Value Actual   : " + actPayrollDepartmentDropdown +       " Value Expected : " + expPayrollDepartmentDropdown);
        System.out.println("Design Workflow Menu Value Actual             : " + actPayrollSiteDropdown +             " Value Expected : " + expPayrollSiteDropdown);
        System.out.println("Settings Wizard Menu Value Actual             : " + actFinancialAppropriationDropdown +  " Value Expected : " + expFinancialAppropriationDropdown);
        System.out.println("Batch Code Generation Menu Value Actual       : " + actVATDropdown +                     " Value Expected : " + expVATDropdown);
        System.out.println("Map Credit Limit Menu Value Actual            : " + actSchemeDropdown +                  " Value Expected : " + expSchemeDropdown);
        System.out.println("VAT Tax Code Menu Value Actual                : " + actInventoryAllocationTagDropdown +  " Value Expected : " + expInventoryAllocationTagDropdown);
        System.out.println("Customer Portal Menu Value Actual             : " + actSearchTxt +                       " Value Expected : " + expSearchTxt);
        System.out.println("Payment Gateway Integration Menu Value Actual : " + actUpdateBtn +                       " Value Expected : " + expUpdateBtn);
        System.out.println("Fixed Assets Authorization Menu Value Actual  : " + actCloseBtn +                        " Value Expected : " + expCloseBtn);
        
        
        boolean displayResult=actAccountingDropdown==expAccountingDropdown && actInventoryDropdown==expInventoryDropdown
									&& actPayrollCostcenterDropdown==expPayrollCostcenterDropdown && actSellingRatesDropdown==expSellingRatesDropdown
									&& actBuyingRatesDropdown==expBuyingRatesDropdown && actPayrollDepartmentDropdown==expPayrollDepartmentDropdown
									&& actPayrollSiteDropdown==expPayrollSiteDropdown && actFinancialAppropriationDropdown==expFinancialAppropriationDropdown
									&& actVATDropdown==expVATDropdown && actSchemeDropdown==expSchemeDropdown
									&& actInventoryAllocationTagDropdown==expInventoryAllocationTagDropdown && actSearchTxt==expSearchTxt
									&& actUpdateBtn==expUpdateBtn && actCloseBtn==expCloseBtn;
					        
        String actDisplayresult=Boolean.toString(displayResult);
        String expDisplayResult=excelReader.getCellData(xlSheetName, 928, 7);
        
        excelReader.setCellData(xlfile, xlSheetName, 928, 8, actDisplayresult);
        
       
		if (actDisplayresult.equalsIgnoreCase(expDisplayResult) && 
				actconfigureTransactionPage.equalsIgnoreCase(expconfigureTransactionPage))
		{	
			System.out.println("Test Pass : VerifyPreferencesOptions Elements Are Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 926, 9, resPass);
			return true;
		} 	
		else 
		{
			System.out.println("Test Fail :VerifyPreferencesOptions Elements Are Not Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 926, 9, resFail);
			return false;
		}
	}

	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 926, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
}
		
	
	
	@FindBy(xpath="//input[@id='CheckNegativeStock']")
	private static WebElement  CheckNegativeStockChkBox;
	
	@FindBy(xpath="//input[@id='CheckNegativeStockGroup_0']")
	private static WebElement  CheckNegativeStockWarnandAllowRadio;
	
	@FindBy(xpath="//input[@id='CheckNegativeStockGroup_1']")
	private static WebElement  CheckNegativeStockStopRadio;
	
	@FindBy(xpath="//input[@id='IncludePendingPOToCheckNegativeStock']")
	private static WebElement  IncludePendingPOToCheckNegativeStockChkBox;
	
	@FindBy(xpath="//input[@id='CheckStockInOrders']")
	private static WebElement  CheckStockInOrdersChkBox;
	
	@FindBy(xpath="//input[@id='IncludePendingSOQuantityInnegativeStockCheck']")
	private static WebElement  IncludePendingSOQuantityInnegativeStockCheckChkBox;
	
	@FindBy(xpath="//input[@id='IncludeReserveStockInStockCheck']")
	private static WebElement  IncludeReserveStockInStockCheckChkBox;
	
	@FindBy(xpath="//input[@id='ReorderLevel']")
	private static WebElement  CheckReorderLevelChkBox;
	
	@FindBy(xpath="//input[@id='ReorderLevelGroup_0']")
	private static WebElement  CheckReorderLevelWarnandAllowRadio;
	
	@FindBy(xpath="//input[@id='ReorderLevelGroup_1']")
	private static WebElement  CheckReorderLevelStoRadio;
	
	@FindBy(xpath="//input[@id='MaintainQuantityAndValueby_0']")
	private static WebElement  MaintainQtyAndValuebyWareHouseRadio;
	
	@FindBy(xpath="//input[@id='MaintainQuantityAndValueby_1']")
	private static WebElement  MaintainQtyByWareHouseandVlueOverAllRadio;
	
	@FindBy(xpath="//input[@id='MaintainQuantityAndValueby_2']")
	private static WebElement  MaintainQtyOverAllAndValueOverAllRadio;
	
	@FindBy(xpath="//input[@id='IntegrateInventoryWithAccounts']")
	private static WebElement  IntegrateInventoryWithAccountsChkBox;
	
	@FindBy(xpath="//input[@id='IncludeReserveStockInStockLedger']")
	private static WebElement  IncludeReserveStockInStockLedgerChkBox;
	
	@FindBy(xpath="//input[@id='InputUnitInTransactions']")
	private static WebElement  InputUnitInTransactionsChkBox;
	
	@FindBy(xpath="//input[@id='MaintainInventoryInAlternateUnit']")
	private static WebElement  MaintainInventoryInAlternateUnitChkBox;
	
	@FindBy(xpath="//input[@id='RestrictProductSelectionDependingOnType']")
	private static WebElement  RestrictProductSelectionDependingOnTypeChkBox;
	
	@FindBy(xpath="//input[@id='UpdateMRNValueStockThroughPurchase']")
	private static WebElement  UpdateMRNValueStockThroughPurchaseChkBox;
	
	@FindBy(xpath="//input[@id='DisplayProductAlias']")
	private static WebElement  DisplayProductAliasChkBox;
	
	@FindBy(xpath="//input[@id='ReorderLevelsByWarehouse']")
	private static WebElement  ReorderLevelsByWarehouseChkBox;
	
	@FindBy(xpath="//input[@id='DonotUseRealTimeRate']")
	private static WebElement  DonotUseRealTimeRateChkBox;
	
	@FindBy(xpath="//input[@id='Reservation_1']")
	private static WebElement  Reservation_NoneRadio;
	
	@FindBy(xpath="//input[@id='Reservation_2']")
	private static WebElement  Reservation_QuantitiesRadio;
	
	@FindBy(xpath="//input[@id='Reservation_3']")
	private static WebElement  Reservation_ReserveByRadio;
	
	@FindBy(xpath="//input[@id='ReservationByBatch']")
	private static WebElement  ReservationByBatchChkBox;
	
	@FindBy(xpath="//input[@id='ReservationByBin']")
	private static WebElement  ReservationByBinChkBox;
	
	@FindBy(xpath="//input[@id='ReservationByRMA']")
	private static WebElement  ReservationByRMAChkBox;

	@FindBy(xpath="//select[@id='ddlInventoryAllocationBy']")
	private static WebElement  InventoryAllocationByDropdown;
	
	
	@FindBy(xpath="//*[@id='dvInventory']/div")
	private static List<WebElement>  settingsInventoryList;
	
	//*[@id='dvInventory']/div
	
	//*[@id="dvInventory"]/div/div/label
	
	//*[@id='dvInventory']/div/div/div/label
	
  public boolean checkInventoryOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkInventoryOptions Method Executes.............   *****************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(InventoryBtn));
		InventoryBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CheckNegativeStockChkBox));
		
		boolean actNegativeStocksChkBox                                 = CheckNegativeStockChkBox.isDisplayed();
		boolean actNegativeStockWarnAndAllowRadioBtn                    = CheckNegativeStockWarnandAllowRadio.isDisplayed();
		boolean actNegativeStocksStopRadioBtn                           = CheckNegativeStockStopRadio.isDisplayed(); 
		boolean actIncludePendingPOToCheckNegativeStocksChkBox          = IncludePendingPOToCheckNegativeStockChkBox.isDisplayed(); 
		boolean actStocksOrdersChkBox                                   = CheckStockInOrdersChkBox.isDisplayed(); 
		boolean actIncludePendingSOQuantityInNegativeStocksCheckChkBox  = IncludePendingSOQuantityInnegativeStockCheckChkBox.isDisplayed();
		boolean actIncludeReserveStocksCheckChkBox                      = IncludeReserveStockInStockCheckChkBox.isDisplayed();
		boolean actReOrderLevelChkBox                                   = CheckReorderLevelChkBox.isDisplayed();
		boolean actMaintainQtyAndValueByWareHouseRadioBtn               = MaintainQtyAndValuebyWareHouseRadio.isDisplayed();    
		boolean actMaintainQtyByWarehouseAndValueOverAllRadioBtn        = MaintainQtyByWareHouseandVlueOverAllRadio.isDisplayed(); 
		boolean actMaintainQtyOverAllAndValueOverAllRadioBtn            = MaintainQtyOverAllAndValueOverAllRadio.isDisplayed();
		boolean actIntegrateInventoryWithAccountsChkBox                 = IntegrateInventoryWithAccountsChkBox.isDisplayed(); 
		boolean actIncludeReserveStockInStockLedgerChkBox               = IncludeReserveStockInStockLedgerChkBox.isDisplayed(); 
		boolean actInputUnitsInTransactionsChkBox                       = InputUnitInTransactionsChkBox.isDisplayed(); 
		
		boolean actMaintainInventoryInAlternativeUnitChkBox             = MaintainInventoryInAlternateUnitChkBox.isDisplayed(); 
		boolean actRestrictProductSelectionDependingOnTypeChkBox        = RestrictProductSelectionDependingOnTypeChkBox.isDisplayed(); 
		boolean actUpdateMRNValuesStockThroughPurchaseChkBox            = UpdateMRNValueStockThroughPurchaseChkBox.isDisplayed();	
		boolean actDisplayProductAliasChkBox                            = DisplayProductAliasChkBox.isDisplayed();  
		boolean actReorderLevelByWarehouseChkBox                        = ReorderLevelsByWarehouseChkBox.isDisplayed();       
		boolean actDonotUseRealTimeRateChkBox                           = DonotUseRealTimeRateChkBox.isDisplayed();  
		boolean actReservationNonRadioBtn                               = Reservation_NoneRadio.isDisplayed();  
		boolean actReservationQuantitiesRadioBtn                        = Reservation_QuantitiesRadio.isDisplayed();  
		boolean actReserveByRadioBtn                                    = Reservation_ReserveByRadio.isDisplayed();
		boolean actInventoryAllocationDropdown                          = InventoryAllocationByDropdown.isDisplayed(); 
		
		boolean expNegativeStocksChkBox                                 = true;
		boolean expNegativeStockWarnAndAllowRadioBtn                    = true;
		boolean expNegativeStocksStopRadioBtn                           = true; 
		boolean expIncludePendingPOToCheckNegativeStocksChkBox          = true; 
		boolean expStocksOrdersChkBox                                   = true; 
		boolean expIncludePendingSOQuantityInNegativeStocksCheckChkBox  = true;
		boolean expIncludeReserveStocksCheckChkBox                      = true;
		boolean expReOrderLevelChkBox                                   = true;
		boolean expMaintainQtyAndValueByWareHouseRadioBtn               = true;    
		boolean expMaintainQtyByWarehouseAndValueOverAllRadioBtn        = true; 
		boolean expMaintainQtyOverAllAndValueOverAllRadioBtn            = true;
		boolean expIntegrateInventoryWithAccountsChkBox                 = true; 
		boolean expIncludeReserveStockInStockLedgerChkBox               = true; 
		boolean expInputUnitsInTransactionsChkBox                       = true; 
		
		boolean expMaintainInventoryInAlternativeUnitChkBox             = true; 
		boolean expRestrictProductSelectionDependingOnTypeChkBox        = true; 
		boolean expUpdateMRNValuesStockThroughPurchaseChkBox            = true;	
		boolean expDisplayProductAliasChkBox                            = true;  
		boolean expReorderLevelByWarehouseChkBox                        = true;       
		boolean expDonotUseRealTimeRateChkBox                           = true;  
		boolean expReservationNonRadioBtn                               = true;  
		boolean expReservationQuantitiesRadioBtn                        = true;  
		
		boolean expReserveByRadioBtn                                    = true; 
		boolean expInventoryAllocationDropdown                          = true; 
		

       ArrayList<String>actsettingsInventoryList=new ArrayList<String>();
		
		int settingsInventoryListCount=settingsInventoryList.size();
		
		System.out.println(" settingsInventoryListCount  :  "+settingsInventoryListCount);
		
		for (int i = 0; i < settingsInventoryListCount; i++)
		{
			String data=settingsInventoryList.get(i).getText();
			actsettingsInventoryList.add(data);
		}
		
		String actsettingsInventory=actsettingsInventoryList.toString();
		String expsettingsInventory=excelReader.getCellData(xlSheetName, 930, 7);
		
		System.err.println("  Actual settingsInventoryList : "+actsettingsInventory);
		System.err.println("  Expected  settingsInventoryList : "+expsettingsInventory);
		
		excelReader.setCellData(xlfile, xlSheetName, 930, 8, actsettingsInventory);
		
		
		
		
	    System.out.println("Negative Stocks Check Box Value Actual                         : " + actNegativeStocksChkBox +                                " Value Expected : " + expNegativeStocksChkBox);
        System.out.println("Warn And Allow Radio Button Value Actual                       : " + actNegativeStockWarnAndAllowRadioBtn +                   " Value Expected : " + expNegativeStockWarnAndAllowRadioBtn);
        System.out.println("Negative Stocks Radio Button Value Actual                      : " + actNegativeStocksStopRadioBtn +                          " Value Expected : " + expNegativeStocksStopRadioBtn);
        System.out.println("Include Pending PO Stocks Value Actual                         : " + actIncludePendingPOToCheckNegativeStocksChkBox +         " Value Expected : " + expIncludePendingPOToCheckNegativeStocksChkBox);
        System.out.println("Stocks Orders Value Actual                                     : " + actStocksOrdersChkBox +                                  " Value Expected : " + expStocksOrdersChkBox);
        System.out.println("Include Pending SO Stocks Value Actual                         : " + actIncludePendingSOQuantityInNegativeStocksCheckChkBox + " Value Expected : " + expIncludePendingSOQuantityInNegativeStocksCheckChkBox);
        System.out.println("Include Reserve Stocks  Value Actual                           : " + actIncludeReserveStocksCheckChkBox +                     " Value Expected : " + expIncludeReserveStocksCheckChkBox);
        System.out.println("Re Order Level Value Actual                                    : " + actReOrderLevelChkBox +                                  " Value Expected : " + expReOrderLevelChkBox);
        System.out.println("Maintain Qty And Value By Warehouse Value Actual               : " + actMaintainQtyAndValueByWareHouseRadioBtn +              " Value Expected : " + expMaintainQtyAndValueByWareHouseRadioBtn);
        System.out.println("Maintain Qty By Warehouse and Value By Over All Value Actual   : " + actMaintainQtyByWarehouseAndValueOverAllRadioBtn +       " Value Expected : " + expMaintainQtyByWarehouseAndValueOverAllRadioBtn);
        System.out.println("Maintain Qty Over All And Value Over All Value Actual          : " + actMaintainQtyOverAllAndValueOverAllRadioBtn +           " Value Expected : " + expMaintainQtyOverAllAndValueOverAllRadioBtn);
        System.out.println("Integrate Accounts Value Actual                                : " + actIntegrateInventoryWithAccountsChkBox +                " Value Expected : " + expIntegrateInventoryWithAccountsChkBox);
        System.out.println("Inlude Reserve Stocks in Stock Ledger Value Actual             : " + actIncludeReserveStockInStockLedgerChkBox +              " Value Expected : " + expIncludeReserveStockInStockLedgerChkBox);
        System.out.println("Input Units In Transactions Value Actual                       : " + actInputUnitsInTransactionsChkBox +                      " Value Expected : " + expInputUnitsInTransactionsChkBox);
        System.out.println("Maintain Inventory In Alternative Units Check Box Value Actual : " + actMaintainInventoryInAlternativeUnitChkBox +            " Value Expected : " + expMaintainInventoryInAlternativeUnitChkBox);
        System.out.println("Restrict Product Selection Value Actual                        : " + actRestrictProductSelectionDependingOnTypeChkBox +       " Value Expected : " + expRestrictProductSelectionDependingOnTypeChkBox);
        System.out.println("Update MRN Value Stock Value Actual                            : " + actUpdateMRNValuesStockThroughPurchaseChkBox +           " Value Expected : " + expUpdateMRNValuesStockThroughPurchaseChkBox);
        System.out.println("Display Product Alias Check BoxValue Actual                    : " + actDisplayProductAliasChkBox +                           " Value Expected : " + expDisplayProductAliasChkBox);
        System.out.println("Reorder Level By Warehouse Check BoxValue Actual               : " + actReorderLevelByWarehouseChkBox +                       " Value Expected : " + expReorderLevelByWarehouseChkBox);
        System.out.println("Do Not UseValue Actual                                         : " + actDonotUseRealTimeRateChkBox +                          " Value Expected : " + expDonotUseRealTimeRateChkBox);
        System.out.println("Reservation None Value Actual                                  : " + actReservationNonRadioBtn +                              " Value Expected : " + expReservationNonRadioBtn);
        System.out.println("Reservation Quantities Value Actual                            : " + actReservationQuantitiesRadioBtn +                       " Value Expected : " + expReservationQuantitiesRadioBtn);
        System.out.println("Reserve By Radio Value Actual                                  : " + actReserveByRadioBtn +                                   " Value Expected : " + expReserveByRadioBtn);
        System.out.println("Inventory Allocation Value Actual                              : " + actInventoryAllocationDropdown +                         " Value Expected : " + expInventoryAllocationDropdown);
                
		boolean actCheckInludeReserveStockIsChecked                    = IncludeReserveStockInStockLedgerChkBox.isSelected();
		boolean actCheckUnitsInTransaction                             = InputUnitInTransactionsChkBox.isSelected();
        boolean actCheckUpdateMRNThroughValue                          = UpdateMRNValueStockThroughPurchaseChkBox.isSelected();
        boolean actCheckReserveByBatchChkBox                           = ReservationByBatchChkBox.isDisplayed();
        boolean actCheckReserveByBinChkBox                             = ReservationByBinChkBox.isSelected();
        boolean actCheckReservationBYRMAChkBox                         = ReservationByRMAChkBox.isSelected();       
        
  		boolean expCheckInludeReserveStockIsChecked                   = true;
  		boolean expCheckUnitsInTransaction                            = true;
        boolean expCheckUpdateMRNThroughValue                         = true;
        boolean expCheckReserveByBatchChkBox                          = true;
        boolean expCheckReserveByBinChkBox                            = true;
        boolean expCheckReservationBYRMAChkBox                        = true;
        
        System.out.println("Warn And Allow Radio Button Value Actual                       : " + actCheckInludeReserveStockIsChecked +   " Value Expected : " + expCheckInludeReserveStockIsChecked);
        System.out.println("Negative Stocks Radio Button Value Actual                      : " + actCheckUnitsInTransaction +            " Value Expected : " + expCheckUnitsInTransaction);
        System.out.println("Include Pending PO Stocks Value Actual                         : " + actCheckUpdateMRNThroughValue +         " Value Expected : " + expCheckUpdateMRNThroughValue);
        System.out.println("Stocks Orders Value Actual                                     : " + actCheckReserveByBatchChkBox +          " Value Expected : " + expCheckReserveByBatchChkBox);
        System.out.println("Include Pending SO Stocks Value Actual                         : " + actCheckReserveByBinChkBox +            " Value Expected : " + expCheckReserveByBinChkBox);
        System.out.println("Include Reserve Stocks  Value Actual                           : " + actCheckReservationBYRMAChkBox +        " Value Expected : " + expCheckReservationBYRMAChkBox);     
        
        
        boolean displayResult=actNegativeStocksChkBox==expNegativeStocksChkBox && actNegativeStockWarnAndAllowRadioBtn==expNegativeStockWarnAndAllowRadioBtn 
	
								&& actNegativeStocksStopRadioBtn==expNegativeStocksStopRadioBtn && actIncludePendingPOToCheckNegativeStocksChkBox==expIncludePendingPOToCheckNegativeStocksChkBox 
								&& actStocksOrdersChkBox==expStocksOrdersChkBox && actIncludePendingSOQuantityInNegativeStocksCheckChkBox==expIncludePendingSOQuantityInNegativeStocksCheckChkBox
								&& actIncludeReserveStocksCheckChkBox==expIncludeReserveStocksCheckChkBox && actReOrderLevelChkBox==expReOrderLevelChkBox 
								&& actMaintainQtyAndValueByWareHouseRadioBtn==expMaintainQtyAndValueByWareHouseRadioBtn && actMaintainQtyByWarehouseAndValueOverAllRadioBtn==expMaintainQtyByWarehouseAndValueOverAllRadioBtn
								&& actMaintainQtyOverAllAndValueOverAllRadioBtn==expMaintainQtyOverAllAndValueOverAllRadioBtn && actIntegrateInventoryWithAccountsChkBox==expIntegrateInventoryWithAccountsChkBox
								&& actIncludeReserveStockInStockLedgerChkBox==expIncludeReserveStockInStockLedgerChkBox && actInputUnitsInTransactionsChkBox==expInputUnitsInTransactionsChkBox
								&& actMaintainInventoryInAlternativeUnitChkBox==expMaintainInventoryInAlternativeUnitChkBox && actRestrictProductSelectionDependingOnTypeChkBox==expRestrictProductSelectionDependingOnTypeChkBox
								&& actUpdateMRNValuesStockThroughPurchaseChkBox==expUpdateMRNValuesStockThroughPurchaseChkBox && actDisplayProductAliasChkBox==expDisplayProductAliasChkBox
								&& actReorderLevelByWarehouseChkBox==expReorderLevelByWarehouseChkBox && actDonotUseRealTimeRateChkBox==expDonotUseRealTimeRateChkBox 
								&& actReservationNonRadioBtn==expReservationNonRadioBtn && actReservationQuantitiesRadioBtn==expReservationQuantitiesRadioBtn
								&& actReserveByRadioBtn==expReserveByRadioBtn && actInventoryAllocationDropdown==expInventoryAllocationDropdown
								
								&& actCheckInludeReserveStockIsChecked==expCheckInludeReserveStockIsChecked && actCheckInludeReserveStockIsChecked==expCheckInludeReserveStockIsChecked
								&& actCheckUpdateMRNThroughValue==expCheckUpdateMRNThroughValue && actCheckReserveByBatchChkBox==expCheckReserveByBatchChkBox
								&& actCheckReserveByBinChkBox==expCheckReserveByBinChkBox && actCheckReservationBYRMAChkBox==expCheckReservationBYRMAChkBox;
				        
        String actDisplayResult=Boolean.toString(displayResult);
        String expDisplayresult=excelReader.getCellData(xlSheetName, 931, 7);
        
        excelReader.setCellData(xlfile, xlSheetName, 931, 8, actDisplayResult);
        
        
		if( actDisplayResult.equalsIgnoreCase(expDisplayresult) && actsettingsInventory.equalsIgnoreCase(expsettingsInventory))
		{
			System.out.println(" Test Pass : VerifyCheckNegativeStocks Inventory Options are Displayed as Expected");	
			excelReader.setCellData(xlfile, xlSheetName, 929, 9, resPass);
			return true;
		}
		else
		{
			System.out.println(" Test Pass : VerifyCheckNegativeStocks Inventory Options are Not Displayed as Expected");	
			excelReader.setCellData(xlfile, xlSheetName, 929, 9, resFail);
			return false;	
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 929, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
	
	
	
  public boolean checkUpdateInventoryOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {

	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkUpdateInventoryOptions Method Executes.............   *****************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CheckStockInOrdersChkBox));
		CheckStockInOrdersChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(IncludePendingSOQuantityInnegativeStockCheckChkBox));
		IncludePendingSOQuantityInnegativeStockCheckChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(IncludeReserveStockInStockCheckChkBox));
		IncludeReserveStockInStockCheckChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MaintainQtyByWareHouseandVlueOverAllRadio));
		MaintainQtyByWareHouseandVlueOverAllRadio.click();

		MaintainQtyByWareHouseandVlueOverAllRadio.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(IntegrateInventoryWithAccountsChkBox));
		IntegrateInventoryWithAccountsChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();
		
		getWaitForAlert();
		
		boolean AlertPresent = getIsAlertPresent();
		
		String actAlertPresent=Boolean.toString(AlertPresent);
	    String expAlertPresent=excelReader.getCellData(xlSheetName, 933, 7);
	    
	    excelReader.setCellData(xlfile, xlSheetName, 933, 8, actAlertPresent);

		System.out.println("Select Options In Inventory Tab and Click on Update  Value Actual : " + actAlertPresent +  " Value Expected : " + expAlertPresent);
	       
		String actMessageOnUpdateInAlert = getAlert().getText();
		String expMessageOnUpdateInAlert = excelReader.getCellData(xlSheetName, 934, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 934, 8, actMessageOnUpdateInAlert);
		
		System.out.println("Select Options In Inventory Tab and Click on Ok  Value Actual : " + actMessageOnUpdateInAlert +  " Value Expected : " + expMessageOnUpdateInAlert);
	    
		getAlert().accept();
        
		String actMessageOnOkInAlert = excelReader.getCellData(xlSheetName, 935, 7);
        		 
		excelReader.setCellData(xlfile, xlSheetName, 935, 8, actMessageOnOkInAlert);
		
        boolean actMessageOnOkInAlertValue = checkValidationMessageboolean(actMessageOnOkInAlert);
     	boolean expMessageOnOkInAlertValue = true;

     	System.out.println("COGS POSTING Item Save Value Actual : " + actMessageOnOkInAlertValue + "  Value Expected : " + expMessageOnOkInAlertValue);	
 	
		if(actAlertPresent.equalsIgnoreCase(expAlertPresent) && actMessageOnUpdateInAlert.equalsIgnoreCase(expMessageOnUpdateInAlert)
				&& actMessageOnOkInAlertValue==expMessageOnOkInAlertValue)
		{
			System.out.println("Test Pass :VerifyUpdatebutton Alert Pop_Up Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 932, 9, resPass);
			return true;
			
		}
		else
		{
			System.out.println("Test Fail :VerifyUpdatebutton Alert Pop_Up Not Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 932, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 932, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
}

  
  
  public boolean checkInventoryOptionsSaveAreDisplayingAsSelectOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkInventoryOptionsSaveAreDisplayingAsSelectOption Method Executes.............   *****************************");
	
	try
	{	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(InventoryBtn));
		InventoryBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CheckNegativeStockChkBox));
		
		boolean actNegativeStocksChkBox                                 = CheckNegativeStockChkBox.isDisplayed();
		boolean actNegativeStockWarnAndAllowRadioBtn                    = CheckNegativeStockWarnandAllowRadio.isDisplayed();
		boolean actNegativeStocksStopRadioBtn                           = CheckNegativeStockStopRadio.isDisplayed(); 
		boolean actIncludePendingPOToCheckNegativeStocksChkBox          = IncludePendingPOToCheckNegativeStockChkBox.isDisplayed(); 
		boolean actStocksOrdersChkBox                                   = CheckStockInOrdersChkBox.isDisplayed(); 
		boolean actIncludePendingSOQuantityInNegativeStocksCheckChkBox  = IncludePendingSOQuantityInnegativeStockCheckChkBox.isDisplayed();
		boolean actIncludeReserveStocksCheckChkBox                      = IncludeReserveStockInStockCheckChkBox.isDisplayed();
		boolean actReOrderLevelChkBox                                   = CheckReorderLevelChkBox.isDisplayed();
		boolean actMaintainQtyAndValueByWareHouseRadioBtn               = MaintainQtyAndValuebyWareHouseRadio.isDisplayed();    
		boolean actMaintainQtyByWarehouseAndValueOverAllRadioBtn        = MaintainQtyByWareHouseandVlueOverAllRadio.isDisplayed(); 
		boolean actMaintainQtyOverAllAndValueOverAllRadioBtn            = MaintainQtyOverAllAndValueOverAllRadio.isDisplayed();
		boolean actIntegrateInventoryWithAccountsChkBox                 = IntegrateInventoryWithAccountsChkBox.isDisplayed(); 
		boolean actIncludeReserveStockInStockLedgerChkBox               = IncludeReserveStockInStockLedgerChkBox.isDisplayed(); 
		boolean actInputUnitsInTransactionsChkBox                       = InputUnitInTransactionsChkBox.isDisplayed(); 
		
		boolean actMaintainInventoryInAlternativeUnitChkBox             = MaintainInventoryInAlternateUnitChkBox.isDisplayed(); 
		boolean actRestrictProductSelectionDependingOnTypeChkBox        = RestrictProductSelectionDependingOnTypeChkBox.isDisplayed(); 
		boolean actUpdateMRNValuesStockThroughPurchaseChkBox            = UpdateMRNValueStockThroughPurchaseChkBox.isDisplayed();	
		boolean actDisplayProductAliasChkBox                            = DisplayProductAliasChkBox.isDisplayed();  
		boolean actReorderLevelByWarehouseChkBox                        = ReorderLevelsByWarehouseChkBox.isDisplayed();       
		boolean actDonotUseRealTimeRateChkBox                           = DonotUseRealTimeRateChkBox.isDisplayed();  
		boolean actReservationNonRadioBtn                               = Reservation_NoneRadio.isDisplayed();  
		boolean actReservationQuantitiesRadioBtn                        = Reservation_QuantitiesRadio.isDisplayed();  
		boolean actReserveByRadioBtn                                    = Reservation_ReserveByRadio.isDisplayed();
		boolean actInventoryAllocationDropdown                          = InventoryAllocationByDropdown.isDisplayed(); 
		
		boolean expNegativeStocksChkBox                                 = true;
		boolean expNegativeStockWarnAndAllowRadioBtn                    = true;
		boolean expNegativeStocksStopRadioBtn                           = true; 
		boolean expIncludePendingPOToCheckNegativeStocksChkBox          = true; 
		boolean expStocksOrdersChkBox                                   = true; 
		boolean expIncludePendingSOQuantityInNegativeStocksCheckChkBox  = true;
		boolean expIncludeReserveStocksCheckChkBox                      = true;
		boolean expReOrderLevelChkBox                                   = true;
		boolean expMaintainQtyAndValueByWareHouseRadioBtn               = true;    
		boolean expMaintainQtyByWarehouseAndValueOverAllRadioBtn        = true; 
		boolean expMaintainQtyOverAllAndValueOverAllRadioBtn            = true;
		boolean expIntegrateInventoryWithAccountsChkBox                 = true; 
		boolean expIncludeReserveStockInStockLedgerChkBox               = true; 
		boolean expInputUnitsInTransactionsChkBox                       = true; 
		
		boolean expMaintainInventoryInAlternativeUnitChkBox             = true; 
		boolean expRestrictProductSelectionDependingOnTypeChkBox        = true; 
		boolean expUpdateMRNValuesStockThroughPurchaseChkBox            = true;	
		boolean expDisplayProductAliasChkBox                            = true;  
		boolean expReorderLevelByWarehouseChkBox                        = true;       
		boolean expDonotUseRealTimeRateChkBox                           = true;  
		boolean expReservationNonRadioBtn                               = true;  
		boolean expReservationQuantitiesRadioBtn                        = true;  
		
		boolean expReserveByRadioBtn                                    = true; 
		boolean expInventoryAllocationDropdown                          = true; 
		
	    System.out.println("Negative Stocks Check Box Value Actual                         : " + actNegativeStocksChkBox +                                " Value Expected : " + expNegativeStocksChkBox);
        System.out.println("Warn And Allow Radio Button Value Actual                       : " + actNegativeStockWarnAndAllowRadioBtn +                   " Value Expected : " + expNegativeStockWarnAndAllowRadioBtn);
        System.out.println("Negative Stocks Radio Button Value Actual                      : " + actNegativeStocksStopRadioBtn +                          " Value Expected : " + expNegativeStocksStopRadioBtn);
        System.out.println("Include Pending PO Stocks Value Actual                         : " + actIncludePendingPOToCheckNegativeStocksChkBox +         " Value Expected : " + expIncludePendingPOToCheckNegativeStocksChkBox);
        System.out.println("Stocks Orders Value Actual                                     : " + actStocksOrdersChkBox +                                  " Value Expected : " + expStocksOrdersChkBox);
        System.out.println("Include Pending SO Stocks Value Actual                         : " + actIncludePendingSOQuantityInNegativeStocksCheckChkBox + " Value Expected : " + expIncludePendingSOQuantityInNegativeStocksCheckChkBox);
        System.out.println("Include Reserve Stocks  Value Actual                           : " + actIncludeReserveStocksCheckChkBox +                     " Value Expected : " + expIncludeReserveStocksCheckChkBox);
        System.out.println("Re Order Level Value Actual                                    : " + actReOrderLevelChkBox +                                  " Value Expected : " + expReOrderLevelChkBox);
        System.out.println("Maintain Qty And Value By Warehouse Value Actual               : " + actMaintainQtyAndValueByWareHouseRadioBtn +              " Value Expected : " + expMaintainQtyAndValueByWareHouseRadioBtn);
        System.out.println("Maintain Qty By Warehouse and Value By Over All Value Actual   : " + actMaintainQtyByWarehouseAndValueOverAllRadioBtn +       " Value Expected : " + expMaintainQtyByWarehouseAndValueOverAllRadioBtn);
        System.out.println("Maintain Qty Over All And Value Over All Value Actual          : " + actMaintainQtyOverAllAndValueOverAllRadioBtn +           " Value Expected : " + expMaintainQtyOverAllAndValueOverAllRadioBtn);
        System.out.println("Integrate Accounts Value Actual                                : " + actIntegrateInventoryWithAccountsChkBox +                " Value Expected : " + expIntegrateInventoryWithAccountsChkBox);
        System.out.println("Inlude Reserve Stocks in Stock Ledger Value Actual             : " + actIncludeReserveStockInStockLedgerChkBox +              " Value Expected : " + expIncludeReserveStockInStockLedgerChkBox);
        System.out.println("Input Units In Transactions Value Actual                       : " + actInputUnitsInTransactionsChkBox +                      " Value Expected : " + expInputUnitsInTransactionsChkBox);
        System.out.println("Maintain Inventory In Alternative Units Check Box Value Actual : " + actMaintainInventoryInAlternativeUnitChkBox +            " Value Expected : " + expMaintainInventoryInAlternativeUnitChkBox);
        System.out.println("Restrict Product Selection Value Actual                        : " + actRestrictProductSelectionDependingOnTypeChkBox +       " Value Expected : " + expRestrictProductSelectionDependingOnTypeChkBox);
        System.out.println("Update MRN Value Stock Value Actual                            : " + actUpdateMRNValuesStockThroughPurchaseChkBox +           " Value Expected : " + expUpdateMRNValuesStockThroughPurchaseChkBox);
        System.out.println("Display Product Alias Check BoxValue Actual                    : " + actDisplayProductAliasChkBox +                           " Value Expected : " + expDisplayProductAliasChkBox);
        System.out.println("Reorder Level By Warehouse Check BoxValue Actual               : " + actReorderLevelByWarehouseChkBox +                       " Value Expected : " + expReorderLevelByWarehouseChkBox);
        System.out.println("Do Not UseValue Actual                                         : " + actDonotUseRealTimeRateChkBox +                          " Value Expected : " + expDonotUseRealTimeRateChkBox);
        System.out.println("Reservation None Value Actual                                  : " + actReservationNonRadioBtn +                              " Value Expected : " + expReservationNonRadioBtn);
        System.out.println("Reservation Quantities Value Actual                            : " + actReservationQuantitiesRadioBtn +                       " Value Expected : " + expReservationQuantitiesRadioBtn);
        System.out.println("Reserve By Radio Value Actual                                  : " + actReserveByRadioBtn +                                   " Value Expected : " + expReserveByRadioBtn);
        System.out.println("Inventory Allocation Value Actual                              : " + actInventoryAllocationDropdown +                         " Value Expected : " + expInventoryAllocationDropdown);
                
		boolean actCheckInludeReserveStockIsChecked                    = IncludeReserveStockInStockLedgerChkBox.isSelected();
		boolean actCheckUnitsInTransaction                             = InputUnitInTransactionsChkBox.isSelected();
        boolean actCheckUpdateMRNThroughValue                          = UpdateMRNValueStockThroughPurchaseChkBox.isSelected();
        boolean actCheckReserveByBatchChkBox                           = ReservationByBatchChkBox.isDisplayed();
        boolean actCheckReserveByBinChkBox                             = ReservationByBinChkBox.isSelected();
        boolean actCheckReservationBYRMAChkBox                         = ReservationByRMAChkBox.isSelected();       
              
  		boolean expCheckInludeReserveStockIsChecked                   = true;
  		boolean expCheckUnitsInTransaction                            = true;
        boolean expCheckUpdateMRNThroughValue                         = true;
        boolean expCheckReserveByBatchChkBox                          = true;
        boolean expCheckReserveByBinChkBox                            = true;
        boolean expCheckReservationBYRMAChkBox                        = true;    
        
        System.out.println("Warn And Allow Radio Button Value Actual                       : " + actCheckInludeReserveStockIsChecked +   " Value Expected : " + expCheckInludeReserveStockIsChecked);
        System.out.println("Negative Stocks Radio Button Value Actual                      : " + actCheckUnitsInTransaction +            " Value Expected : " + expCheckUnitsInTransaction);
        System.out.println("Include Pending PO Stocks Value Actual                         : " + actCheckUpdateMRNThroughValue +         " Value Expected : " + expCheckUpdateMRNThroughValue);
        System.out.println("Stocks Orders Value Actual                                     : " + actCheckReserveByBatchChkBox +          " Value Expected : " + expCheckReserveByBatchChkBox);
        System.out.println("Include Pending SO Stocks Value Actual                         : " + actCheckReserveByBinChkBox +            " Value Expected : " + expCheckReserveByBinChkBox);
        System.out.println("Include Reserve Stocks  Value Actual                           : " + actCheckReservationBYRMAChkBox +        " Value Expected : " + expCheckReservationBYRMAChkBox);     
    
        boolean actStockOrdersIsSelected                               = CheckStockInOrdersChkBox.isSelected();
        boolean actIncludePendingSOIsSelected                          = IncludePendingSOQuantityInnegativeStockCheckChkBox.isSelected();
        boolean actIncludeReserveStockCheckIsSelected                  = IncludeReserveStockInStockCheckChkBox.isSelected();
        boolean actMaintainQtyByWarehouseOverAllIsSelected             = MaintainQtyByWareHouseandVlueOverAllRadio.isSelected();
        boolean actCheckBoxIntegrateIsSelected                         = IntegrateInventoryWithAccountsChkBox.isSelected();
       
        boolean expStockOrdersIsSelected                               = true;
        boolean expIncludePendingSOIsSelected                          = true;
        boolean expIncludeReserveStockCheckIsSelected                  = true;
        boolean expMaintainQtyByWarehouseOverAllIsSelected             = true;
        boolean expCheckBoxIntegrateIsSelected                         = true;
        
        System.out.println("Sales Order Check Value Actual                                : " + actStockOrdersIsSelected +                   " Value Expected : " + expStockOrdersIsSelected);
        System.out.println("Include Pending SO Value Actual                               : " + actIncludePendingSOIsSelected +              " Value Expected : " + expIncludePendingSOIsSelected);
        System.out.println("Check Include Reserve Stock Value Actual                      : " + actIncludeReserveStockCheckIsSelected +      " Value Expected : " + expIncludeReserveStockCheckIsSelected);
        System.out.println("Maintain Qty By Warehouse OverAll Value Actual                : " + actMaintainQtyByWarehouseOverAllIsSelected + " Value Expected : " + expMaintainQtyByWarehouseOverAllIsSelected);
        System.out.println("Integration Value Actual                                      : " + actCheckBoxIntegrateIsSelected +             " Value Expected : " + expCheckBoxIntegrateIsSelected);
                
        
        boolean displayAndSelectedResult=actNegativeStocksChkBox==expNegativeStocksChkBox && actNegativeStockWarnAndAllowRadioBtn==expNegativeStockWarnAndAllowRadioBtn 
	
				&& actNegativeStocksStopRadioBtn==expNegativeStocksStopRadioBtn && actIncludePendingPOToCheckNegativeStocksChkBox==expIncludePendingPOToCheckNegativeStocksChkBox 
				&& actStocksOrdersChkBox==expStocksOrdersChkBox && actIncludePendingSOQuantityInNegativeStocksCheckChkBox==expIncludePendingSOQuantityInNegativeStocksCheckChkBox
				&& actIncludeReserveStocksCheckChkBox==expIncludeReserveStocksCheckChkBox && actReOrderLevelChkBox==expReOrderLevelChkBox 
				&& actMaintainQtyAndValueByWareHouseRadioBtn==expMaintainQtyAndValueByWareHouseRadioBtn && actMaintainQtyByWarehouseAndValueOverAllRadioBtn==expMaintainQtyByWarehouseAndValueOverAllRadioBtn
				&& actMaintainQtyOverAllAndValueOverAllRadioBtn==expMaintainQtyOverAllAndValueOverAllRadioBtn && actIntegrateInventoryWithAccountsChkBox==expIntegrateInventoryWithAccountsChkBox
				&& actIncludeReserveStockInStockLedgerChkBox==expIncludeReserveStockInStockLedgerChkBox && actInputUnitsInTransactionsChkBox==expInputUnitsInTransactionsChkBox
				&& actMaintainInventoryInAlternativeUnitChkBox==expMaintainInventoryInAlternativeUnitChkBox && actRestrictProductSelectionDependingOnTypeChkBox==expRestrictProductSelectionDependingOnTypeChkBox
				&& actUpdateMRNValuesStockThroughPurchaseChkBox==expUpdateMRNValuesStockThroughPurchaseChkBox && actDisplayProductAliasChkBox==expDisplayProductAliasChkBox
				&& actReorderLevelByWarehouseChkBox==expReorderLevelByWarehouseChkBox && actDonotUseRealTimeRateChkBox==expDonotUseRealTimeRateChkBox 
				&& actReservationNonRadioBtn==expReservationNonRadioBtn && actReservationQuantitiesRadioBtn==expReservationQuantitiesRadioBtn
				&& actReserveByRadioBtn==expReserveByRadioBtn && actInventoryAllocationDropdown==expInventoryAllocationDropdown
				
				&& actCheckInludeReserveStockIsChecked==expCheckInludeReserveStockIsChecked && actCheckInludeReserveStockIsChecked==expCheckInludeReserveStockIsChecked
				&& actCheckUpdateMRNThroughValue==expCheckUpdateMRNThroughValue && actCheckReserveByBatchChkBox==expCheckReserveByBatchChkBox
				&& actCheckReserveByBinChkBox==expCheckReserveByBinChkBox && actCheckReservationBYRMAChkBox==expCheckReservationBYRMAChkBox
				
				&& actStockOrdersIsSelected==expStockOrdersIsSelected && actIncludePendingSOIsSelected==expIncludePendingSOIsSelected
				&& actIncludeReserveStockCheckIsSelected==expIncludeReserveStockCheckIsSelected && actMaintainQtyByWarehouseOverAllIsSelected==expMaintainQtyByWarehouseOverAllIsSelected
				&& actCheckBoxIntegrateIsSelected==expCheckBoxIntegrateIsSelected;
        
        
        String actDisplayAndSelectedResult=Boolean.toString(displayAndSelectedResult);
        String expdisplayAndSelectedResult=excelReader.getCellData(xlSheetName, 937, 7);
        
        		
        excelReader.setCellData(xlfile, xlSheetName, 937, 8, actDisplayAndSelectedResult);	
        		
        
		if(actDisplayAndSelectedResult.equalsIgnoreCase(expdisplayAndSelectedResult))
		{
			System.out.println(" Test Pass : VerifyCheckNegativeStocks Inventory Options are Displayed as Expected");	
			excelReader.setCellData(xlfile, xlSheetName, 936, 9, resPass);
			return true;
		}
		else
		{
			System.out.println(" Test Pass : VerifyCheckNegativeStocks Inventory Options are Not Displayed as Expected");	
			excelReader.setCellData(xlfile, xlSheetName, 936, 9, resFail);
			return false;	
			
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 936, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
  
	
  @FindBy(xpath="//input[@id='ocBranchSales0']")
  private static WebElement VATBranchSalesTxt;

  @FindBy(xpath="//input[@id='ocVATAdvancePurAC27']")
  private static WebElement VATAdvancePurchaseACTxt;

  @FindBy(xpath="//input[@id='ocCapitalPuchase1']")
  private static WebElement VATCapitalPurchasesACTxt;

  @FindBy(xpath="//input[@id='ocSatSales15']")
  private static WebElement VATSatSalesTxt;

  @FindBy(xpath="//input[@id='ocCashAc2']")
  private static WebElement VATCashAccountTxt;

  @FindBy(xpath="//input[@id='ocServicTaXAc16']")
  private static WebElement VATServiceTaxACTxt;

  @FindBy(xpath="//input[@id='ocConsignmentPur3']")
  private static WebElement VATConsignmentPurchaseACTxt;

  @FindBy(xpath="//input[@id='ocConsignSalesAC4']")
  private static WebElement VATConsignmentSalesACTxt;

  @FindBy(xpath="//input[@id='txtFormType']")
  private static WebElement VATFormTypeTxt;

  @FindBy(xpath="//input[@id='txtDocumentLocator']")
  private static WebElement VATDocumentLocationTxt;

  @FindBy(xpath="//input[@id='txtTaxFormFilingType']")
  private static WebElement VATTaxFormFilingTypeTxt;

  @FindBy(xpath="//input[@id='ocInterStateSales5']")
  private static WebElement VATInterStateSalesACTxt;

  @FindBy(xpath="//input[@id='ocSalestoDealer6']")
  private static WebElement VATSalesToDealerTxt;

  @FindBy(xpath="//input[@id='ocExportSales7']")
  private static WebElement VATExportSalesACTxt;

  @FindBy(xpath="//input[@id='txtTRN']")
  private static WebElement VATTRNTxt;

  @FindBy(xpath="//input[@id='txtTaxablePersonNameE']")
  private static WebElement VATTaxablePersonNameEngTxt;

  @FindBy(xpath="//input[@id='txtTaxablePersonNameA']")
  private static WebElement VATTaxablePersonNameArbTxt;

  @FindBy(xpath="//input[@id='txtTaxPersonAddress']")
  private static WebElement VATTaxablePersonAddressTxt;

  @FindBy(xpath="//input[@id='txtTaxAgencyName']")
  private static WebElement VATTaxAgencyNameTxt;

  @FindBy(xpath="//input[@id='txtTAN']")
  private static WebElement VATTANTxt;

  @FindBy(xpath="//input[@id='txtTaxAgentName']")
  private static WebElement VATTaxAgentNameTxt;

  @FindBy(xpath="//input[@id='txtTAAN']")
  private static WebElement VATTAANameTxt;

  @FindBy(xpath="//input[@id='ocFuel8']")
  private static WebElement VATFuelACTxt;

  @FindBy(xpath="//input[@id='ocSalestoEOU9']")
  private static WebElement VATSalesToEOUTxt;

  @FindBy(xpath="//input[@id='ocInterStatePUR10']")
  private static WebElement VATInterStatePurchasesACTxt;

  @FindBy(xpath="//input[@id='ocVatoutput11']")
  private static WebElement VATOutputTxt;

  @FindBy(xpath="//input[@id='ocVatAc12']")
  private static WebElement VATInputTxt;

  @FindBy(xpath="//input[@id='ocSatAC13']")
  private static WebElement VATSATACTxt;

  @FindBy(xpath="//input[@id='ocSatPur14']")
  private static WebElement VATSatPurchasesTxt;

  @FindBy(xpath="//input[@id='ocVATAdvanceAC26']")
  private static WebElement VATAdvanceAccountTxt;

  @FindBy(xpath="//input[@id='chkEnableMultiEntity']")
  private static WebElement VATEnableMultiEntryChkBox;

  @FindBy(xpath="//tbody[@id='gVATPercentage_body']")
  private static WebElement VATPercentageTable;
  
  @FindBy(xpath="//*[@id='dvVAT']/div[1]/div[13]/label")
  private static WebElement  vatInputLabel;
  
  @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[2]/div[3]/div[2]/div/ul/li[2]/button[2]")
  private static WebElement  vatCreationPageSaveBtn;
  
  @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[2]/div[3]/div[2]/div/ul/li[2]/button[5]/i")
  private static WebElement  vatCreationPageCloseBtn;
  
  
  @FindBy(xpath="//*[@id='dvVAT']/div")
  private static List<WebElement>  vatCreationPageList;
  

  
  public boolean checkVATInPreferences() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkVATInPreferences Method Executes.............   *****************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VatBtn));
		VatBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATPercentageTable));
		
		boolean actVATBranchSalesTxt					=VATBranchSalesTxt.isDisplayed();
		boolean actVATAdvancePurchaseACTxt				=VATAdvancePurchaseACTxt.isDisplayed();
		boolean actVATCapitalPurchasesACTxt				=VATCapitalPurchasesACTxt.isDisplayed();
		boolean actVATSatSalesTxt						=VATSatSalesTxt.isDisplayed();
		boolean actVATCashAccountTxt					=VATCashAccountTxt.isDisplayed();
		boolean actVATServiceTaxACTxt					=VATServiceTaxACTxt.isDisplayed();
		boolean actVATConsignmentPurchaseACTxt			=VATConsignmentPurchaseACTxt.isDisplayed();
		boolean actVATConsignmentSalesACTxt				=VATConsignmentSalesACTxt.isDisplayed();
		boolean actVATFormTypeTxt						=VATFormTypeTxt.isDisplayed();
		boolean actVATDocumentLocationTxt				=VATDocumentLocationTxt.isDisplayed();
		boolean actVATTaxFormFilingTypeTxt				=VATTaxFormFilingTypeTxt.isDisplayed();
		boolean actVATInterStateSalesACTxt				=VATInterStateSalesACTxt.isDisplayed();
		boolean actVATSalesToDealerTxt					=VATSalesToDealerTxt.isDisplayed();
		boolean actVATExportSalesACTxt					=VATExportSalesACTxt.isDisplayed();
		boolean actVATTRNTxt							=VATTRNTxt.isDisplayed();
		boolean actVATTaxablePersonNameEngTxt			=VATTaxablePersonNameEngTxt.isDisplayed();
		boolean actVATTaxablePersonNameArbTxt			=VATTaxablePersonNameArbTxt.isDisplayed();
		boolean actVATTaxablePersonAddressTxt			=VATTaxablePersonAddressTxt.isDisplayed();
		boolean actVATTaxAgencyNameTxt					=VATTaxAgencyNameTxt.isDisplayed();
		boolean actVATTANTxt							=VATTANTxt.isDisplayed();
		boolean actVATTaxAgentNameTxt					=VATTaxAgentNameTxt.isDisplayed();
		boolean actVATTAANameTxt						=VATTAANameTxt.isDisplayed();
		boolean actVATFuelACTxt							=VATFuelACTxt.isDisplayed();
		boolean actVATSalesToEOUTxt						=VATSalesToEOUTxt.isDisplayed();
		boolean actVATInterStatePurchasesACTxt			=VATInterStatePurchasesACTxt.isDisplayed();
		boolean actVATOutputTxt							=VATOutputTxt.isDisplayed();
		boolean actVATInputTxt							=VATInputTxt.isDisplayed();
		boolean actVATSATACTxt							=VATSATACTxt.isDisplayed();
		boolean actVATSatPurchasesTxt					=VATSatPurchasesTxt.isDisplayed();
		boolean actVATAdvanceAccountTxt					=VATAdvanceAccountTxt.isDisplayed();
		boolean actVATEnableMultiEntryChkBox			=VATEnableMultiEntryChkBox.isDisplayed();
		boolean actVATPercentageTable					=VATPercentageTable.isDisplayed();
		
		
		boolean expVATBranchSalesTxt					=true;
		boolean expVATAdvancePurchaseACTxt				=true;
		boolean expVATCapitalPurchasesACTxt				=true;
		boolean expVATSatSalesTxt						=true;
		boolean expVATCashAccountTxt					=true;
		boolean expVATServiceTaxACTxt					=true;
		boolean expVATConsignmentPurchaseACTxt			=true;
		boolean expVATConsignmentSalesACTxt				=true;
		boolean expVATFormTypeTxt						=true;
		boolean expVATDocumentLocationTxt				=true;
		boolean expVATTaxFormFilingTypeTxt				=true;
		boolean expVATInterStateSalesACTxt				=true;
		boolean expVATSalesToDealerTxt					=true;
		boolean expVATExportSalesACTxt					=true;
		boolean expVATTRNTxt							=true;
		boolean expVATTaxablePersonNameEngTxt			=true;
		boolean expVATTaxablePersonNameArbTxt			=true;
		boolean expVATTaxablePersonAddressTxt			=true;
		boolean expVATTaxAgencyNameTxt					=true;
		boolean expVATTANTxt							=true;
		boolean expVATTaxAgentNameTxt					=true;
		boolean expVATTAANameTxt						=true;
		boolean expVATFuelACTxt							=true;
		boolean expVATSalesToEOUTxt						=true;
		boolean expVATInterStatePurchasesACTxt			=true;
		boolean expVATOutputTxt							=true;
		boolean expVATInputTxt							=true;
		boolean expVATSATACTxt							=true;
		boolean expVATSatPurchasesTxt					=true;
		boolean expVATAdvanceAccountTxt					=true;
		boolean expVATEnableMultiEntryChkBox			=true;
		boolean expVATPercentageTable					=true;
		
		
		
		ArrayList<String>actvatCreationPageList=new ArrayList<String>();
			
		int vatCreationPageListCount=vatCreationPageList.size();
			
		System.out.println(" vatCreationPageListCount  :  "+vatCreationPageListCount);
			
		for (int i = 0; i < vatCreationPageListCount; i++)
		{
			String data=vatCreationPageList.get(i).getText();
			actvatCreationPageList.add(data);
		}
			
		String actvatCreationPage=actvatCreationPageList.toString();
		String expvatCreationPage=excelReader.getCellData(xlSheetName, 939, 7);
			
		System.err.println("  Actual vatCreationPageList : "+actvatCreationPage);
		System.err.println("  Expected  vatCreationPageList : "+expvatCreationPage);
			
		excelReader.setCellData(xlfile, xlSheetName, 939, 8, actvatCreationPage);
		
		
		System.out.println("*********************************************checkPreferencesVATOptions***********************************************");
		
		System.out.println("VATBranchSalesTxt             : "+actVATBranchSalesTxt             +"  value expected  "+expVATBranchSalesTxt);
		System.out.println("VATAdvancePurchaseACTxt       : "+actVATAdvancePurchaseACTxt       +"  value expected  "+expVATAdvancePurchaseACTxt);
		System.out.println("VATCapitalPurchasesACTxt      : "+actVATCapitalPurchasesACTxt      +"  value expected  "+expVATCapitalPurchasesACTxt);
		System.out.println("VATSatSalesTxt                : "+actVATSatSalesTxt                +"  value expected  "+expVATSatSalesTxt);
		System.out.println("VATCashAccountTxt             : "+actVATCashAccountTxt             +"  value expected  "+expVATCashAccountTxt);
		System.out.println("VATServiceTaxACTxt            : "+actVATServiceTaxACTxt            +"  value expected  "+expVATServiceTaxACTxt);
		System.out.println("VATConsignmentPurchaseACTxt   : "+actVATConsignmentPurchaseACTxt   +"  value expected  "+expVATConsignmentPurchaseACTxt);
		System.out.println("VATConsignmentSalesACTxt      : "+actVATConsignmentSalesACTxt      +"  value expected  "+expVATConsignmentSalesACTxt);
		System.out.println("VATFormTypeTxt                : "+actVATFormTypeTxt                +"  value expected  "+expVATFormTypeTxt);
		System.out.println("VATDocumentLocationTxt        : "+actVATDocumentLocationTxt        +"  value expected  "+expVATDocumentLocationTxt);
		System.out.println("VATTaxFormFilingTypeTxt       : "+actVATTaxFormFilingTypeTxt       +"  value expected  "+expVATTaxFormFilingTypeTxt);
		System.out.println("VATInterStateSalesACTxt       : "+actVATInterStateSalesACTxt       +"  value expected  "+expVATInterStateSalesACTxt);
		System.out.println("VATSalesToDealerTxt           : "+actVATSalesToDealerTxt           +"  value expected  "+expVATSalesToDealerTxt);
		System.out.println("VATExportSalesACTxt           : "+actVATExportSalesACTxt           +"  value expected  "+expVATExportSalesACTxt);
		System.out.println("VATTRNTxt                     : "+actVATTRNTxt                     +"  value expected  "+expVATTRNTxt);
		System.out.println("VATTaxablePersonNameEngTxt    : "+actVATTaxablePersonNameEngTxt    +"  value expected  "+expVATTaxablePersonNameEngTxt);
		System.out.println("VATTaxablePersonNameArbTxt    : "+actVATTaxablePersonNameArbTxt    +"  value expected  "+expVATTaxablePersonNameArbTxt);
		System.out.println("VATTaxablePersonAddressTxt    : "+actVATTaxablePersonAddressTxt    +"  value expected  "+expVATTaxablePersonAddressTxt);
		System.out.println("VATTaxAgencyNameTxt           : "+actVATTaxAgencyNameTxt           +"  value expected  "+expVATTaxAgencyNameTxt);
		System.out.println("VATTANTxt                     : "+actVATTANTxt                     +"  value expected  "+expVATTANTxt);
		System.out.println("VATTaxAgentNameTxt            : "+actVATTaxAgentNameTxt            +"  value expected  "+expVATTaxAgentNameTxt);
		System.out.println("VATTAANameTxt                 : "+actVATTAANameTxt                 +"  value expected  "+expVATTAANameTxt);
		System.out.println("VATFuelACTxt                  : "+actVATFuelACTxt                  +"  value expected  "+expVATFuelACTxt);
		System.out.println("VATSalesToEOUTxt              : "+actVATSalesToEOUTxt              +"  value expected  "+expVATSalesToEOUTxt);
		System.out.println("VATInterStatePurchasesACTxt   : "+actVATInterStatePurchasesACTxt   +"  value expected  "+expVATInterStatePurchasesACTxt);
		System.out.println("VATOutputTxt                  : "+actVATOutputTxt                  +"  value expected  "+expVATOutputTxt);
		System.out.println("VATInputTxt                   : "+actVATInputTxt                   +"  value expected  "+expVATInputTxt);
		System.out.println("VATSATACTxt                   : "+actVATSATACTxt                   +"  value expected  "+expVATSATACTxt);
		System.out.println("VATSatPurchasesTxt            : "+actVATSatPurchasesTxt            +"  value expected  "+expVATSatPurchasesTxt);
		System.out.println("VATAdvanceAccountTxt          : "+actVATAdvanceAccountTxt          +"  value expected  "+expVATAdvanceAccountTxt);
		System.out.println("VATEnableMultiEntryChkBox     : "+actVATEnableMultiEntryChkBox     +"  value expected  "+expVATEnableMultiEntryChkBox);
		System.out.println("VATPercentageTable            : "+actVATPercentageTable            +"  value expected  "+expVATPercentageTable);
		
		boolean diplayResult=actVATBranchSalesTxt==expVATBranchSalesTxt && actVATAdvancePurchaseACTxt==expVATAdvancePurchaseACTxt && actVATCapitalPurchasesACTxt==expVATCapitalPurchasesACTxt &&
								 actVATSatSalesTxt==expVATSatSalesTxt && actVATCashAccountTxt==expVATCashAccountTxt && actVATServiceTaxACTxt==expVATServiceTaxACTxt &&
								 actVATConsignmentPurchaseACTxt==expVATConsignmentPurchaseACTxt && actVATConsignmentSalesACTxt==expVATConsignmentSalesACTxt && 
								 actVATFormTypeTxt==expVATFormTypeTxt && actVATDocumentLocationTxt==expVATDocumentLocationTxt && actVATTaxFormFilingTypeTxt==expVATTaxFormFilingTypeTxt &&
								 actVATInterStateSalesACTxt==expVATInterStateSalesACTxt && actVATSalesToDealerTxt==expVATSalesToDealerTxt && actVATExportSalesACTxt==expVATExportSalesACTxt &&
								 actVATTRNTxt==expVATTRNTxt && actVATTaxablePersonNameEngTxt==expVATTaxablePersonNameEngTxt && actVATTaxablePersonNameArbTxt==expVATTaxablePersonNameArbTxt &&
								 actVATTaxablePersonAddressTxt==expVATTaxablePersonAddressTxt && actVATTaxAgencyNameTxt==expVATTaxAgencyNameTxt && actVATTANTxt==expVATTANTxt &&
								 actVATTaxAgentNameTxt==expVATTaxAgentNameTxt && actVATTAANameTxt==expVATTAANameTxt && actVATFuelACTxt==expVATFuelACTxt && 
								 actVATSalesToEOUTxt==expVATSalesToEOUTxt && actVATInterStatePurchasesACTxt==expVATInterStatePurchasesACTxt && actVATOutputTxt==expVATOutputTxt &&
								 actVATInputTxt==expVATInputTxt && actVATSATACTxt==expVATSATACTxt && actVATSatPurchasesTxt==expVATSatPurchasesTxt && 
								 actVATAdvanceAccountTxt==expVATAdvanceAccountTxt && actVATEnableMultiEntryChkBox==expVATEnableMultiEntryChkBox && actVATPercentageTable==expVATPercentageTable;
		
		
		String actDisplayResult=Boolean.toString(diplayResult);
		String expDisplayResult=excelReader.getCellData(xlSheetName, 940, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 940, 8, actDisplayResult);
		
		if (actDisplayResult.equalsIgnoreCase(expDisplayResult)) 
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 938, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 938, 9, resFail);
			return false;
		}
	  }
	  catch (Exception e)
	{
		  String exception=e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 938, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	}
  }
	
	
	@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[2]/div[1]/ul/li")
	private static List<WebElement> vatInputAccountHeaderList;
  
	
  public boolean checkCreateVATInputAccountInPreferences() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkCreateVATInputAccountInPreferences Method Executes.............   *****************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatInputLabel));
		vatInputLabel.click();
	
		boolean SummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
		
		String actSummaryErrorMessage=Boolean.toString(SummaryErrorMessage);
		String expSummaryErrorMessage=excelReader.getCellData(xlSheetName, 947, 7);

		
		excelReader.setCellData(xlfile, xlSheetName, 947, 8, actSummaryErrorMessage);
		
		System.out.println("Click on New Button and check Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerAccountSettingTab));

		boolean actAccountMasterHeaderGeneralTab        = headerGeneralTab.isDisplayed();
		boolean actAccountMasterHeaderAccountSettingTab = headerAccountSettingTab.isDisplayed();
		boolean actAccountMasterHeaderDetailsTab        = headerDetailsTab.isDisplayed();
		boolean actAccountMasterHeaderPrintLayoutTab    = headerPrintLayoutTab.isDisplayed();
		boolean actAccountMasterHeaderTreeTab           = extraFields_TreeTabUpdate.isDisplayed();
		boolean actAccountMasterHeaderDocumentTab       = extraFields_DocumentTab.isDisplayed();
		boolean actAccountMasterHeaderCreateTreeTab     = extraFields_CreateTab.isDisplayed();

		boolean actAccountMasterHeaderSaveBtn           = vatCreationPageSaveBtn.isDisplayed();
		boolean actAccountMasterHeaderCloseBtn          = vatCreationPageCloseBtn.isDisplayed();

		boolean expAccountMasterHeaderGeneralTab        = true;
		boolean expAccountMasterHeaderAccountSettingTab = true;
		boolean expAccountMasterHeaderDetailsTab        = true;
		boolean expAccountMasterHeaderPrintLayoutTab    = true;
		boolean expAccountMasterHeaderTreeTab           = true;
		boolean expAccountMasterHeaderDocumentTab       = true;
		boolean expAccountMasterHeaderCreateTreeTab     = true;

		boolean expAccountMasterHeaderSaveBtn           = true;
		boolean expAccountMasterHeaderCloseBtn          = true;

		

		ArrayList<String>actvatInputAccountHeaderList=new ArrayList<String>();
			
		int vatInputAccountHeaderListCount=vatInputAccountHeaderList.size();
			
		System.out.println(" vatInputAccountHeaderListCount  :  "+vatInputAccountHeaderListCount);
			
		for (int i = 0; i < vatInputAccountHeaderListCount; i++)
		{
			String data=vatInputAccountHeaderList.get(i).getText();
			actvatInputAccountHeaderList.add(data);
		}
			
		String actvatInputAccountHeader=actvatInputAccountHeaderList.toString();
		String expvatInputAccountHeader=excelReader.getCellData(xlSheetName, 942, 7);
			
		System.err.println("  Actual vatInputAccountHeader : "+actvatInputAccountHeader);
		System.err.println("  Expected  vatInputAccountHeader : "+expvatInputAccountHeader);
			
		excelReader.setCellData(xlfile, xlSheetName, 942, 8, actvatInputAccountHeader);
		
		System.out.println("General Tab Value Actual           : " + actAccountMasterHeaderGeneralTab+        " Value Expected : " + expAccountMasterHeaderGeneralTab);
		System.out.println("Settings Tab Value Actual          : " + actAccountMasterHeaderAccountSettingTab+ " Value Expected : " + expAccountMasterHeaderAccountSettingTab);
		System.out.println("Details Tab Value Actual           : " + actAccountMasterHeaderDetailsTab+        " Value Expected : " + expAccountMasterHeaderDetailsTab);
		System.out.println("Print Layout Tab Value Actual      : " + actAccountMasterHeaderPrintLayoutTab +   " Value Expected : " + expAccountMasterHeaderPrintLayoutTab);
		System.out.println("Tree Tab Value Actual              : " + actAccountMasterHeaderTreeTab+           " Value Expected : " + expAccountMasterHeaderTreeTab);
		System.out.println("Document Tab Value Actual          : " + actAccountMasterHeaderDocumentTab+       " Value Expected : " + expAccountMasterHeaderDocumentTab);
		System.out.println("Create Tab Tab Value Actual        : " + actAccountMasterHeaderCreateTreeTab +    " Value Expected : " + expAccountMasterHeaderCreateTreeTab);
		System.out.println("Save Button Value Actual           : " + actAccountMasterHeaderSaveBtn+           " Value Expected : " + expAccountMasterHeaderSaveBtn);
		System.out.println("Close Button Value Actual          : " + actAccountMasterHeaderCloseBtn+          " Value Expected : " + expAccountMasterHeaderCloseBtn);

		System.out.println("****************************************************** MasterCreationPageGenralTab **************************************************************************");

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		boolean actAccountMasterGeneralTabNameTxt          = nameTxt.isDisplayed();
		boolean actAccountMasterGeneralCodeTxt             = codeTxt.isDisplayed();
		boolean actAccountMasterGeneralTypeDropdown        = accountTypeDropdown.isDisplayed();
		boolean actAccountMasterGeneralCreditLimitTxt      = creditLimitTxt.isDisplayed();
		boolean actAccountMasterGeneralCreditDaysTxt       = creditdaysTxt.isDisplayed();
		boolean actAccountMasterGeneralChequeDiscountTxt   = chequeDiscountLimitTxt.isDisplayed();
		boolean actAccountMasterGeneralRateOfInterestTxt   = rateofinterestTxt.isDisplayed();
		boolean actAccountMasterGeneralBankAccountTxt      = bankAccountTxt.isDisplayed();
		boolean actAccountMasterGeneralPdcAccountTxt       = pdcDicountAccount.isDisplayed();
		
		boolean expAccountMasterGeneralTabNameTxt          = true;
		boolean expAccountMasterGeneralCodeTxt             = true;
		boolean expAccountMasterGeneralTypeDropdown        = true;
		boolean expAccountMasterGeneralCreditLimitTxt      = true;
		boolean expAccountMasterGeneralCreditDaysTxt       = true;
		boolean expAccountMasterGeneralChequeDiscountTxt   = true;
		boolean expAccountMasterGeneralRateOfInterestTxt   = true;
		boolean expAccountMasterGeneralBankAccountTxt      = true;

		Select oSelect = new Select(accountTypeDropdown);
		List<WebElement> elementCount = oSelect.getOptions();

		int accAccountTypeSize = elementCount.size();
		int expAccountTypeSize = 39;

		System.out.println("Name Value Actual              : " + actAccountMasterGeneralTabNameTxt +       " Value Expected : " + expAccountMasterGeneralTabNameTxt);
		System.out.println("Code Value Actual              : " + actAccountMasterGeneralCodeTxt+           " Value Expected : " + expAccountMasterGeneralCodeTxt);
		System.out.println("Type Value Actual              : " + actAccountMasterGeneralTypeDropdown+      " Value Expected : " + expAccountMasterGeneralTypeDropdown);
		System.out.println("Credit Limit Value Actual      : " + actAccountMasterGeneralCreditLimitTxt+    " Value Expected : " + expAccountMasterGeneralCreditLimitTxt);
		System.out.println("Credit Days Value Actual       : "+ actAccountMasterGeneralCreditDaysTxt +     " Value Expected : " + expAccountMasterGeneralCreditDaysTxt);
		System.out.println("Cheque Disocunt Value Actual   : " + expAccountMasterGeneralChequeDiscountTxt+ " Value Expected : " + expAccountMasterGeneralChequeDiscountTxt);
		System.out.println("Rate Of Interest Value Actual  : " + actAccountMasterGeneralRateOfInterestTxt+ " Value Expected : " + expAccountMasterGeneralChequeDiscountTxt);
		System.out.println("Bank Account Value Actual      : " + actAccountMasterGeneralBankAccountTxt	+  " Value Expected : " + expAccountMasterGeneralRateOfInterestTxt);
		System.out.println("Account Type Value Actual      : " + accAccountTypeSize+                       " Value Expected : " + expAccountTypeSize);
        
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
     	nameTxt.click();
     	nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 943, 6));
		nameTxt.sendKeys(Keys.TAB);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 944, 6));
	    codeTxt.sendKeys(Keys.TAB);
      
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 945, 6));
		getAction().moveToElement(accountTypeDropdown).sendKeys(Keys.TAB).perform();
     			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatCreationPageSaveBtn));
		vatCreationPageSaveBtn.click();
     	
		boolean displayResult=  actSummaryErrorMessage.equalsIgnoreCase(expSummaryErrorMessage)
							&& actAccountMasterHeaderGeneralTab == expAccountMasterHeaderGeneralTab
							&& actAccountMasterHeaderAccountSettingTab == expAccountMasterHeaderAccountSettingTab
							&& actAccountMasterHeaderDetailsTab == expAccountMasterHeaderDetailsTab
							&& actAccountMasterHeaderPrintLayoutTab == expAccountMasterHeaderPrintLayoutTab
							&& actAccountMasterHeaderTreeTab == expAccountMasterHeaderPrintLayoutTab
							&& actAccountMasterHeaderTreeTab == expAccountMasterHeaderTreeTab
							&& actAccountMasterHeaderDocumentTab == expAccountMasterHeaderDocumentTab
							&& actAccountMasterHeaderCreateTreeTab == expAccountMasterHeaderCreateTreeTab
							&& actAccountMasterHeaderSaveBtn == expAccountMasterHeaderSaveBtn
							&& actAccountMasterHeaderCloseBtn == expAccountMasterHeaderCloseBtn
			
							&& actAccountMasterGeneralTabNameTxt == expAccountMasterGeneralTabNameTxt
							&& actAccountMasterGeneralCodeTxt == expAccountMasterGeneralCodeTxt
							&& actAccountMasterGeneralTypeDropdown == expAccountMasterGeneralTypeDropdown
							&& actAccountMasterGeneralCreditLimitTxt == expAccountMasterGeneralCreditLimitTxt
							&& actAccountMasterGeneralChequeDiscountTxt == expAccountMasterGeneralChequeDiscountTxt
							&& actAccountMasterGeneralRateOfInterestTxt == expAccountMasterGeneralRateOfInterestTxt
							&& actAccountMasterGeneralBankAccountTxt == expAccountMasterGeneralBankAccountTxt
							&& accAccountTypeSize == expAccountTypeSize;
		
		
		String actDisplayResult=Boolean.toString(displayResult);
		String expDisplayResult=excelReader.getCellData(xlSheetName, 946, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 946, 8, actDisplayResult);
		
		
		if (actDisplayResult.equalsIgnoreCase(expDisplayResult) && 
				actvatInputAccountHeader.equalsIgnoreCase(expvatInputAccountHeader))
				
		{
			excelReader.setCellData(xlfile, xlSheetName, 941, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 941, 9, resFail);
			return false;
		}
	  }
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 941, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }

  }	
  
  
  
  
  
  public boolean checkSaveVATAccountsInPreferences() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkVATInPreferences Method Executes.............   *****************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATCashAccountTxt));
		VATCashAccountTxt.click();
		VATCashAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 949, 6));
		Thread.sleep(3000);
		VATCashAccountTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATInputTxt));
		VATInputTxt.click();
		VATInputTxt.sendKeys(excelReader.getCellData(xlSheetName, 950, 6));
		Thread.sleep(3000);
		VATInputTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATOutputTxt));
		VATOutputTxt.click();
		VATOutputTxt.sendKeys(excelReader.getCellData(xlSheetName, 951, 6));
		Thread.sleep(3000);
		VATOutputTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATAdvanceAccountTxt));
		VATAdvanceAccountTxt.click();
		VATAdvanceAccountTxt.sendKeys(excelReader.getCellData(xlSheetName, 952, 6));
		Thread.sleep(3000);
		VATAdvanceAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATAdvancePurchaseACTxt));
		VATAdvancePurchaseACTxt.click();
		VATAdvancePurchaseACTxt.sendKeys(excelReader.getCellData(xlSheetName, 953, 6));
		Thread.sleep(3000);
		VATAdvancePurchaseACTxt.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();
		
		getWaitForAlert();
		
		boolean AlertPresent = getIsAlertPresent();
		
		String actAlertPresent=Boolean.toString(AlertPresent);
		String expAlertPresent=excelReader.getCellData(xlSheetName, 954, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 954, 8, actAlertPresent);
		
		System.out.println("Select Options In Inventory Tab and Click on Update  Value Actual : " + actAlertPresent +  " Value Expected : " + expAlertPresent);
	       
		String actMessageOnUpdateInAlert = getAlert().getText();
		String expMessageOnUpdateInAlert = excelReader.getCellData(xlSheetName, 955, 7);
		
		
		excelReader.setCellData(xlfile, xlSheetName, 955, 8, actMessageOnUpdateInAlert);
		
		System.out.println("Select Options In Inventory Tab and Click on Ok  Value Actual : " + actMessageOnUpdateInAlert +  " Value Expected : " + expMessageOnUpdateInAlert);
	    
		getAlert().accept();
        
		String actMessageOnOkInAlert = excelReader.getCellData(xlSheetName, 956, 7);
        		 
        boolean actMessageOnOkInAlertValue = checkValidationMessageboolean(actMessageOnOkInAlert);
     	boolean expMessageOnOkInAlertValue = true;

     	excelReader.setCellData(xlfile, xlSheetName, 956, 8, actMessageOnOkInAlert);
     	
     	System.out.println("COGS POSTING Item Save Value Actual : " + actMessageOnOkInAlertValue + "  Value Expected : " + expMessageOnOkInAlertValue);	
 	
		if(actAlertPresent.equalsIgnoreCase(expAlertPresent) && actMessageOnUpdateInAlert.equalsIgnoreCase(expMessageOnUpdateInAlert)
				&& actMessageOnOkInAlertValue==expMessageOnOkInAlertValue)
		{
			System.out.println("Test Pass :VerifyUpdatebutton Alert Pop_Up Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 948, 9, resPass);
			return true;
			
		}
		else
		{
			System.out.println("Test Fail :VerifyUpdatebutton Alert Pop_Up Not Displayed As Expected");
			excelReader.setCellData(xlfile, xlSheetName, 948, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 948, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	
  }
	
  
  @FindBy(xpath="//*[@id='configTransMenu']/ul/li[2]/span[2]/i")
  private static WebElement closeBtnInPreferences;
  
  public static boolean checkClosePreferencesSaveTheVATOptions() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
  {
 	excelReader = new ExcelReader(POJOUtility.getExcelPath());
 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

 	System.out.println("********************************** checkCloseWarehouseMaster ********************************");

    try
    {
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInPreferences));
    	closeBtnInPreferences.click();

 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

 		boolean actLoadDashboard          = labelDashboard.isDisplayed();
 		boolean actSelectDashboard        = selectDashboard.isDisplayed();
 		boolean actNewDashboard           = newAddDashBoard.isDisplayed();
 		boolean actDashboardCustomization = dashboardCustomizationSettings.isDisplayed();

 		boolean expLoadDashboard          = true;
 		boolean expSelectDashboard        = true;
 		boolean expNewDashboard           = true;
 		boolean expDashboardCustomization = true;

 		System.out.println("Load Dashbord Value Actual          : " + actLoadDashboard +         " Value Expected : " + expLoadDashboard);
 		System.out.println("Select Dashbord Value Actual        : " + actSelectDashboard +       " Value Expected : " + expSelectDashboard);
 		System.out.println("New Dashbord Value Actual           : " + actNewDashboard +          " Value Expected : " + expNewDashboard);
 		System.out.println("Dashbord Customization Value Actual : " + actDashboardCustomization+ " Value Expected : " + expDashboardCustomization);

 		
 		Boolean displayResult=actLoadDashboard == expLoadDashboard && actSelectDashboard == expSelectDashboard
 				&& actNewDashboard == expNewDashboard && actDashboardCustomization == expDashboardCustomization;
 		
 		
 		String actDisplayResult=Boolean.toString(displayResult);
 		String expDisplayResult=excelReader.getCellData(xlSheetName, 958, 7);
 		
 		excelReader.setCellData(xlfile, xlSheetName, 958, 8, actDisplayResult);
 		
 		
 		String actDashboardLabel = labelDashboard.getText();
		String expDashboardLabel = excelReader.getCellData(xlSheetName, 958, 7);

		excelReader.setCellData(xlfile, xlSheetName, 959, 8, actDashboardLabel);
 		
 		if (actDisplayResult.equalsIgnoreCase(expDisplayResult) && 
 				actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 957, 9, resPass);
 			return true;
 		}
 		else
 		{
 			excelReader.setCellData(xlfile, xlSheetName, 957, 9, resFail);
 			return false;
 		}
    }
    catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 957, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
  
  
  
  
  
  public boolean checVATOptionsSaveIsDisplayInPreferences() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkSaveVATOptionsInPreferences Method Executes.............   *****************************");
	
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VatBtn));
		VatBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATPercentageTable));
		
		boolean actVATBranchSalesTxt					=VATBranchSalesTxt.isDisplayed();
		boolean actVATAdvancePurchaseACTxt				=VATAdvancePurchaseACTxt.isDisplayed();
		boolean actVATCapitalPurchasesACTxt				=VATCapitalPurchasesACTxt.isDisplayed();
		boolean actVATSatSalesTxt						=VATSatSalesTxt.isDisplayed();
		boolean actVATCashAccountTxt					=VATCashAccountTxt.isDisplayed();
		boolean actVATServiceTaxACTxt					=VATServiceTaxACTxt.isDisplayed();
		boolean actVATConsignmentPurchaseACTxt			=VATConsignmentPurchaseACTxt.isDisplayed();
		boolean actVATConsignmentSalesACTxt				=VATConsignmentSalesACTxt.isDisplayed();
		boolean actVATFormTypeTxt						=VATFormTypeTxt.isDisplayed();
		boolean actVATDocumentLocationTxt				=VATDocumentLocationTxt.isDisplayed();
		boolean actVATTaxFormFilingTypeTxt				=VATTaxFormFilingTypeTxt.isDisplayed();
		boolean actVATInterStateSalesACTxt				=VATInterStateSalesACTxt.isDisplayed();
		boolean actVATSalesToDealerTxt					=VATSalesToDealerTxt.isDisplayed();
		boolean actVATExportSalesACTxt					=VATExportSalesACTxt.isDisplayed();
		boolean actVATTRNTxt							=VATTRNTxt.isDisplayed();
		boolean actVATTaxablePersonNameEngTxt			=VATTaxablePersonNameEngTxt.isDisplayed();
		boolean actVATTaxablePersonNameArbTxt			=VATTaxablePersonNameArbTxt.isDisplayed();
		boolean actVATTaxablePersonAddressTxt			=VATTaxablePersonAddressTxt.isDisplayed();
		boolean actVATTaxAgencyNameTxt					=VATTaxAgencyNameTxt.isDisplayed();
		boolean actVATTANTxt							=VATTANTxt.isDisplayed();
		boolean actVATTaxAgentNameTxt					=VATTaxAgentNameTxt.isDisplayed();
		boolean actVATTAANameTxt						=VATTAANameTxt.isDisplayed();
		boolean actVATFuelACTxt							=VATFuelACTxt.isDisplayed();
		boolean actVATSalesToEOUTxt						=VATSalesToEOUTxt.isDisplayed();
		boolean actVATInterStatePurchasesACTxt			=VATInterStatePurchasesACTxt.isDisplayed();
		boolean actVATOutputTxt							=VATOutputTxt.isDisplayed();
		boolean actVATInputTxt							=VATInputTxt.isDisplayed();
		boolean actVATSATACTxt							=VATSATACTxt.isDisplayed();
		boolean actVATSatPurchasesTxt					=VATSatPurchasesTxt.isDisplayed();
		boolean actVATAdvanceAccountTxt					=VATAdvanceAccountTxt.isDisplayed();
		boolean actVATEnableMultiEntryChkBox			=VATEnableMultiEntryChkBox.isDisplayed();
		boolean actVATPercentageTable					=VATPercentageTable.isDisplayed();
		
		
		boolean expVATBranchSalesTxt					=true;
		boolean expVATAdvancePurchaseACTxt				=true;
		boolean expVATCapitalPurchasesACTxt				=true;
		boolean expVATSatSalesTxt						=true;
		boolean expVATCashAccountTxt					=true;
		boolean expVATServiceTaxACTxt					=true;
		boolean expVATConsignmentPurchaseACTxt			=true;
		boolean expVATConsignmentSalesACTxt				=true;
		boolean expVATFormTypeTxt						=true;
		boolean expVATDocumentLocationTxt				=true;
		boolean expVATTaxFormFilingTypeTxt				=true;
		boolean expVATInterStateSalesACTxt				=true;
		boolean expVATSalesToDealerTxt					=true;
		boolean expVATExportSalesACTxt					=true;
		boolean expVATTRNTxt							=true;
		boolean expVATTaxablePersonNameEngTxt			=true;
		boolean expVATTaxablePersonNameArbTxt			=true;
		boolean expVATTaxablePersonAddressTxt			=true;
		boolean expVATTaxAgencyNameTxt					=true;
		boolean expVATTANTxt							=true;
		boolean expVATTaxAgentNameTxt					=true;
		boolean expVATTAANameTxt						=true;
		boolean expVATFuelACTxt							=true;
		boolean expVATSalesToEOUTxt						=true;
		boolean expVATInterStatePurchasesACTxt			=true;
		boolean expVATOutputTxt							=true;
		boolean expVATInputTxt							=true;
		boolean expVATSATACTxt							=true;
		boolean expVATSatPurchasesTxt					=true;
		boolean expVATAdvanceAccountTxt					=true;
		boolean expVATEnableMultiEntryChkBox			=true;
		boolean expVATPercentageTable					=true;
		
		System.out.println("********************************************* checkPreferencesVATOptionsIsDisplayed ***********************************************");
		
		System.out.println("VATBranchSalesTxt             : "+actVATBranchSalesTxt             +"  value expected  "+expVATBranchSalesTxt);
		System.out.println("VATAdvancePurchaseACTxt       : "+actVATAdvancePurchaseACTxt       +"  value expected  "+expVATAdvancePurchaseACTxt);
		System.out.println("VATCapitalPurchasesACTxt      : "+actVATCapitalPurchasesACTxt      +"  value expected  "+expVATCapitalPurchasesACTxt);
		System.out.println("VATSatSalesTxt                : "+actVATSatSalesTxt                +"  value expected  "+expVATSatSalesTxt);
		System.out.println("VATCashAccountTxt             : "+actVATCashAccountTxt             +"  value expected  "+expVATCashAccountTxt);
		System.out.println("VATServiceTaxACTxt            : "+actVATServiceTaxACTxt            +"  value expected  "+expVATServiceTaxACTxt);
		System.out.println("VATConsignmentPurchaseACTxt   : "+actVATConsignmentPurchaseACTxt   +"  value expected  "+expVATConsignmentPurchaseACTxt);
		System.out.println("VATConsignmentSalesACTxt      : "+actVATConsignmentSalesACTxt      +"  value expected  "+expVATConsignmentSalesACTxt);
		System.out.println("VATFormTypeTxt                : "+actVATFormTypeTxt                +"  value expected  "+expVATFormTypeTxt);
		System.out.println("VATDocumentLocationTxt        : "+actVATDocumentLocationTxt        +"  value expected  "+expVATDocumentLocationTxt);
		System.out.println("VATTaxFormFilingTypeTxt       : "+actVATTaxFormFilingTypeTxt       +"  value expected  "+expVATTaxFormFilingTypeTxt);
		System.out.println("VATInterStateSalesACTxt       : "+actVATInterStateSalesACTxt       +"  value expected  "+expVATInterStateSalesACTxt);
		System.out.println("VATSalesToDealerTxt           : "+actVATSalesToDealerTxt           +"  value expected  "+expVATSalesToDealerTxt);
		System.out.println("VATExportSalesACTxt           : "+actVATExportSalesACTxt           +"  value expected  "+expVATExportSalesACTxt);
		System.out.println("VATTRNTxt                     : "+actVATTRNTxt                     +"  value expected  "+expVATTRNTxt);
		System.out.println("VATTaxablePersonNameEngTxt    : "+actVATTaxablePersonNameEngTxt    +"  value expected  "+expVATTaxablePersonNameEngTxt);
		System.out.println("VATTaxablePersonNameArbTxt    : "+actVATTaxablePersonNameArbTxt    +"  value expected  "+expVATTaxablePersonNameArbTxt);
		System.out.println("VATTaxablePersonAddressTxt    : "+actVATTaxablePersonAddressTxt    +"  value expected  "+expVATTaxablePersonAddressTxt);
		System.out.println("VATTaxAgencyNameTxt           : "+actVATTaxAgencyNameTxt           +"  value expected  "+expVATTaxAgencyNameTxt);
		System.out.println("VATTANTxt                     : "+actVATTANTxt                     +"  value expected  "+expVATTANTxt);
		System.out.println("VATTaxAgentNameTxt            : "+actVATTaxAgentNameTxt            +"  value expected  "+expVATTaxAgentNameTxt);
		System.out.println("VATTAANameTxt                 : "+actVATTAANameTxt                 +"  value expected  "+expVATTAANameTxt);
		System.out.println("VATFuelACTxt                  : "+actVATFuelACTxt                  +"  value expected  "+expVATFuelACTxt);
		System.out.println("VATSalesToEOUTxt              : "+actVATSalesToEOUTxt              +"  value expected  "+expVATSalesToEOUTxt);
		System.out.println("VATInterStatePurchasesACTxt   : "+actVATInterStatePurchasesACTxt   +"  value expected  "+expVATInterStatePurchasesACTxt);
		System.out.println("VATOutputTxt                  : "+actVATOutputTxt                  +"  value expected  "+expVATOutputTxt);
		System.out.println("VATInputTxt                   : "+actVATInputTxt                   +"  value expected  "+expVATInputTxt);
		System.out.println("VATSATACTxt                   : "+actVATSATACTxt                   +"  value expected  "+expVATSATACTxt);
		System.out.println("VATSatPurchasesTxt            : "+actVATSatPurchasesTxt            +"  value expected  "+expVATSatPurchasesTxt);
		System.out.println("VATAdvanceAccountTxt          : "+actVATAdvanceAccountTxt          +"  value expected  "+expVATAdvanceAccountTxt);
		System.out.println("VATEnableMultiEntryChkBox     : "+actVATEnableMultiEntryChkBox     +"  value expected  "+expVATEnableMultiEntryChkBox);
		System.out.println("VATPercentageTable            : "+actVATPercentageTable            +"  value expected  "+expVATPercentageTable);
		
		
		
		ArrayList<String>actvatCreationPageList=new ArrayList<String>();
		
		int vatCreationPageListCount=vatCreationPageList.size();
			
		System.out.println(" vatCreationPageListCount  :  "+vatCreationPageListCount);
			
		for (int i = 0; i < vatCreationPageListCount; i++)
		{
			String data=vatCreationPageList.get(i).getText();
			actvatCreationPageList.add(data);
		}
			
		String actvatCreationPage=actvatCreationPageList.toString();
		String expvatCreationPage=excelReader.getCellData(xlSheetName, 963, 7);
			
		System.err.println("  Actual vatCreationPageList : "+actvatCreationPage);
		System.err.println("  Expected  vatCreationPageList : "+expvatCreationPage);
			
		excelReader.setCellData(xlfile, xlSheetName, 963, 8, actvatCreationPage);
		
		String  actVATAdvancePurchaseACTxtGetValue			= VATAdvancePurchaseACTxt.getAttribute("value");
	    String  expVATAdvancePurchaseACTxtGetValue          = excelReader.getCellData(xlSheetName, 964, 7);
		
	    excelReader.setCellData(xlfile, xlSheetName, 964, 8, actVATAdvancePurchaseACTxtGetValue);
	    
		String  actVATCashAccountTxtGetValue				= VATCashAccountTxt.getAttribute("value");
		String  expVATCashAccountTxtGetValue                = excelReader.getCellData(xlSheetName, 965, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 965, 8, actVATCashAccountTxtGetValue);
		
		String actVATOutputTxtGetValue						= VATOutputTxt.getAttribute("value");
		String expVATOutputTxtGetValue                      = excelReader.getCellData(xlSheetName, 966, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 966, 8, actVATOutputTxtGetValue);
		
		String actVATInputTxtGetValue                       = VATInputTxt.getAttribute("value");
		String expVATInputTxtGetValue                       = excelReader.getCellData(xlSheetName, 967, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 967, 8, actVATInputTxtGetValue);
		
		String actVATAdvanceAccountTxtGetValue				= VATAdvanceAccountTxt.getAttribute("value");
		String expVATAdvanceAccountTxtGetValue              = excelReader.getCellData(xlSheetName, 968, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 968, 8, actVATAdvanceAccountTxtGetValue);
		
        System.out.println("********************************************* checkSavePreferencesVATOptionsIsSelected ***********************************************");
		
		System.out.println("VATBranchSalesTxt             : " + actVATAdvancePurchaseACTxtGetValue + "  value expected  " + expVATAdvancePurchaseACTxtGetValue);
		System.out.println("VATAdvancePurchaseACTxt       : " + actVATCashAccountTxtGetValue       + "  value expected  " + expVATCashAccountTxtGetValue);
		System.out.println("VATCapitalPurchasesACTxt      : " + actVATOutputTxtGetValue            + "  value expected  " + expVATOutputTxtGetValue);
		System.out.println("VATSatSalesTxt                : " + actVATInputTxtGetValue             + "  value expected  " + expVATInputTxtGetValue);
		System.out.println("VATCashAccountTxt             : " + actVATAdvanceAccountTxtGetValue    + "  value expected  " + expVATAdvanceAccountTxtGetValue);
		
		if (actVATBranchSalesTxt==expVATBranchSalesTxt && actVATAdvancePurchaseACTxt==expVATAdvancePurchaseACTxt && actVATCapitalPurchasesACTxt==expVATCapitalPurchasesACTxt 
			 && actVATSatSalesTxt==expVATSatSalesTxt && actVATCashAccountTxt==expVATCashAccountTxt && actVATServiceTaxACTxt==expVATServiceTaxACTxt 
			 && actVATConsignmentPurchaseACTxt==expVATConsignmentPurchaseACTxt && actVATConsignmentSalesACTxt==expVATConsignmentSalesACTxt 
			 && actVATFormTypeTxt==expVATFormTypeTxt && actVATDocumentLocationTxt==expVATDocumentLocationTxt && actVATTaxFormFilingTypeTxt==expVATTaxFormFilingTypeTxt
			 && actVATInterStateSalesACTxt==expVATInterStateSalesACTxt && actVATSalesToDealerTxt==expVATSalesToDealerTxt && actVATExportSalesACTxt==expVATExportSalesACTxt
			 && actVATTRNTxt==expVATTRNTxt && actVATTaxablePersonNameEngTxt==expVATTaxablePersonNameEngTxt && actVATTaxablePersonNameArbTxt==expVATTaxablePersonNameArbTxt
			 && actVATTaxablePersonAddressTxt==expVATTaxablePersonAddressTxt && actVATTaxAgencyNameTxt==expVATTaxAgencyNameTxt && actVATTANTxt==expVATTANTxt
			 && actVATTaxAgentNameTxt==expVATTaxAgentNameTxt && actVATTAANameTxt==expVATTAANameTxt && actVATFuelACTxt==expVATFuelACTxt 
			 && actVATSalesToEOUTxt==expVATSalesToEOUTxt && actVATInterStatePurchasesACTxt==expVATInterStatePurchasesACTxt && actVATOutputTxt==expVATOutputTxt
			 && actVATInputTxt==expVATInputTxt && actVATSATACTxt==expVATSATACTxt && actVATSatPurchasesTxt==expVATSatPurchasesTxt 
			 && actVATAdvanceAccountTxt==expVATAdvanceAccountTxt && actVATEnableMultiEntryChkBox==expVATEnableMultiEntryChkBox && actVATPercentageTable==expVATPercentageTable
				
			 && actVATAdvancePurchaseACTxtGetValue.equalsIgnoreCase(expVATAdvancePurchaseACTxtGetValue) && actVATCashAccountTxtGetValue.equalsIgnoreCase(expVATCashAccountTxtGetValue)
			 && actVATCashAccountTxtGetValue.equalsIgnoreCase(expVATCashAccountTxtGetValue) && actVATInputTxtGetValue.equalsIgnoreCase(expVATInputTxtGetValue)
			 && actVATAdvanceAccountTxtGetValue.equalsIgnoreCase(expVATAdvanceAccountTxtGetValue)) 
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 962, 9, resPass);
			return true;
		} 
		else 
		{
			
			excelReader.setCellData(xlfile, xlSheetName, 962, 9, resFail);
			return false;
		}
	  }
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 962, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }
  
   
  
    @FindBy(xpath="//span[@class='icon-general icon-font6 theme_button_color']")
	private static WebElement  createVoucherBtn;
	
	@FindBy(xpath="//span[@id='spanDeleteVoucher']")
	private static WebElement  deletevoucherBtn;
	
	@FindBy(xpath="//a[@id='4608']")
	private static WebElement  receiptsBtn;
	
	@FindBy(xpath="//a[@id='4609']")
	private static WebElement  receiptsNewVoucherOneBtn;
	
	@FindBy(xpath="//a[@id='4610']")
	private static WebElement  receiptsNewVoucherTwoBtn;
	
	@FindBy(xpath="//a[@id='4864']")
	private static WebElement  paymentsBtn;
	
	@FindBy(xpath="//a[@id='5120']")
	private static WebElement  pettyCashBtn;
	
	@FindBy(xpath="//a[@id='5888']")
	private static WebElement  postDatedreceiptsBtn;
	
	@FindBy(xpath="//a[@id='7168']")
	private static WebElement  postDatedpaymentsBtn;
	
	@FindBy(xpath="//a[@id='768']")
	private static WebElement  purchaseVouchersBtn;
	
	@FindBy(xpath="//a[@id='769']")
	private static WebElement  purchaseVouchersNewVoucherBtn;
	
	@FindBy(xpath="//a[@id='1023']")
	private static WebElement  stockAdjustmentBtn;
	
	@FindBy(xpath="//a[@id='6400']")
	private static WebElement  purchaseReturnsBtn;
	
	@FindBy(xpath="//a[@id='2560']")
	private static WebElement  purcahseOrdersBtn;
	
	@FindBy(xpath="//a[@id='2561']")
	private static WebElement  jobOrdersBtn;
	
	@FindBy(xpath="//a[@id='1280']")
	private static WebElement  materialReceiptsNotesBtn;
	
	@FindBy(xpath="//a[@id='3328']")
	private static WebElement  salesInvoiceBtn;
	
	@FindBy(xpath="//a[@id='3329']")
	private static WebElement  cashSalesBtn;
	
	@FindBy(xpath="//a[@id='3330']")
	private static WebElement  hirePurcahseSalesBtn;
	
	@FindBy(xpath="//a[@id='3331']")
	private static WebElement  posSalesBtn;
	
	@FindBy(xpath="//a[@id='3332']")
	private static WebElement  salesInvoiceNewVoucherAuto;
	
	@FindBy(xpath="//a[@id='3333']")
	private static WebElement  salesInvoiceNewVoucherN;
	
	@FindBy(xpath="//a[@id='1792']")
	private static WebElement  salesReturnsBtn;
	
	@FindBy(xpath="//a[@id='5632']")
	private static WebElement  salesOrdersBtn;
	
	@FindBy(xpath="//a[@id='5633']")
	private static WebElement  productionOrderBtn;
	
	@FindBy(xpath="//a[@id='6144']")
	private static WebElement  deliveryNotesBtn;
	
	@FindBy(xpath="//a[@id='3584']")
	private static WebElement  nonStandardjournalEntriesBtn;
	
	@FindBy(xpath="//a[@id='3585']")
	private static WebElement  interDepartmentalJVBtn;
	
	@FindBy(xpath="//a[@id='3586']")
	private static WebElement  debitNotesLineWiseBtn;
	
	@FindBy(xpath="//a[@id='3587']")
	private static WebElement  creditNotesLineWiseBtn;
	
	@FindBy(xpath="//a[@id='3588']")
	private static WebElement  fixedAssetDepreciationVoucherBtn;
	
	@FindBy(xpath="//a[@id='8704']")
	private static WebElement  journalEntriesBtn;
	
	@FindBy(xpath="//a[@id='3840']")
	private static WebElement  debitNotesBtn;
	
	@FindBy(xpath="//a[@id='4096']")
	private static WebElement  creditNotesBtn;
	
	@FindBy(xpath="//a[@id='4097']")
	private static WebElement  payRollPostingsBtn;
	
	@FindBy(xpath="//a[@id='256']")
	private static WebElement  openingBalancesBtn;
	
	@FindBy(xpath="//a[@id='5376']")
	private static WebElement  shortageInStocksBtn;
	
	@FindBy(xpath="//div[@class='col-xs-12']//a[@id='2048']")
	private static WebElement  excessInStocksBtn;
	
	@FindBy(xpath="//a[@id='3072']")
	private static WebElement  stockTransfersBtn;
	
	@FindBy(xpath="//a[@id='3073']")
	private static WebElement  stockTransfersNewVoucherBtn;
		
	@FindBy(xpath="//div[@class='col-xs-12']//a[@id='512']")
	private static WebElement  openingStocksBtn;
	
	@FindBy(xpath="//*[@id='513")
	private static WebElement  openingStocksNewVoucher;
	
	@FindBy(xpath="//a[@id='6656']")
	private static WebElement  issuesToProductionBtn;
	
	@FindBy(xpath="//a[@id='1024']")
	private static WebElement  receiptsFromProductionBtn;
	
	@FindBy(xpath="//a[@id='1056']")
	private static WebElement  returnsFromShopfloorBtn;
	
	@FindBy(xpath="//a[@id='6912']")
	private static WebElement  jobWorkIssuesBtn;
	
	@FindBy(xpath="//a[@id='1536']")
	private static WebElement  jobWorkReeceiptsBtn;
	
	@FindBy(xpath="//a[@id='2304']")
	private static WebElement  purchaseQuotationsBtn;
	
	@FindBy(xpath="//a[@id='7424']")
	private static WebElement  salesQuotationsBtn;
	
	@FindBy(xpath="//a[@id='7680']")
	private static WebElement  jobOrderBtn;
	
	@FindBy(xpath="//a[@id='2816']")
	private static WebElement  productionProcessBtn;
	
	@FindBy(xpath="//a[@id='7936']")
	private static WebElement  materialRequisitionBtn;
	
	@FindBy(xpath="//a[@id='8192']")
	private static WebElement  requestForQuoteBtn;
	
	@FindBy(xpath="//a[@id='8448']")
	private static WebElement  forecxJVBtn;
	
	@FindBy(xpath="//span[@id='updateButton']")
	private static WebElement  updateBtnDocumentCustomization;

	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  closeBtnDocumentCustomization;
	
	@FindBy(xpath="//*[@id='docCustomizationUL']/div//li/a")
	private static List<WebElement>  documentCustomizationList;
	
	
	
  public boolean checkDocumentCustomizationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 			
 	System.out.println("********************* checkDocumentCustomizationOption Method Executes.............   *****************************");
 	
 	try
 	{
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DocumentCustomizationBtn));
 		DocumentCustomizationBtn.click();
 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
 		
 		boolean actSearch                    = searchBoxInDocumentCustomization.isDisplayed();
 		boolean actCreateVoucher             = createVoucherBtn.isDisplayed();
 		boolean actDeleteVoucher             = deletevoucherBtn.isDisplayed(); 
 		boolean actReceipts                  = receiptsBtn.isDisplayed(); 
 		boolean actReceiptsVoucherOne        = receiptsNewVoucherOneBtn.isDisplayed();
 		boolean actReceiptsVoucherTwo        = receiptsNewVoucherTwoBtn.isDisplayed();
 		boolean actPaymentVoucherBtn         = paymentsBtn.isDisplayed(); 
 		boolean actPettyCashBtn              = pettyCashBtn.isDisplayed();
 		boolean actPDCPostDatedReeciptsBtn   = postDatedreceiptsBtn.isDisplayed();
 		boolean actPDCPayment                = postDatedpaymentsBtn.isDisplayed();
 		boolean actPurchaseVoucherBtn        = purchaseVouchersBtn.isDisplayed();
 		boolean actPurchaseVoucherNewBtn     = purchaseVouchersNewVoucherBtn.isDisplayed();
 		boolean actPurchaseReturnsBtn        = purchaseReturnsBtn.isDisplayed(); 
 		boolean actPurchaseOrdersBtn         = purcahseOrdersBtn.isDisplayed();
 		boolean actJobOrderBtn               = jobOrdersBtn.isDisplayed(); 
 		
 		boolean actMRNBtn                    = materialReceiptsNotesBtn.isDisplayed(); 
 		boolean actSIBtn                     = salesInvoiceBtn.isDisplayed(); 
 		boolean actSalesInvoiceNewAuto       = salesInvoiceNewVoucherAuto.isDisplayed();
 		boolean actSalesInvoiceN             = salesInvoiceNewVoucherN.isDisplayed();
 		boolean actPosSalesBtn               = posSalesBtn.isDisplayed(); 
 		boolean actSRBtn                     = salesReturnsBtn.isDisplayed(); 
 		boolean actSOBtn                     = salesOrdersBtn.isDisplayed(); 
 		boolean actProductionOrderBtn        = productionOrderBtn.isDisplayed(); 
 		boolean actDeliveryNotesBtn          = deliveryNotesBtn.isDisplayed(); 
 		boolean actNonStandardJVBtn          = nonStandardjournalEntriesBtn.isDisplayed();	
 		boolean actInterDepartmentalJVBtn    = interDepartmentalJVBtn.isDisplayed();  
 		boolean actDebitNotesLinewiseBtn     = debitNotesLineWiseBtn.isDisplayed();       
 		boolean actCreditNotesLinewiseBtn    = creditNotesLineWiseBtn.isDisplayed();  
 		boolean actFADepreciationVoucherBtn  = fixedAssetDepreciationVoucherBtn.isDisplayed();  
 		boolean actJVBtn                     = journalEntriesBtn.isDisplayed();  
 		
 		
 		boolean expSearch                    = true;
 		boolean expCreateVoucher             = true;
 		boolean expDeleteVoucher             = true; 
 		boolean expReceipts                  = true; 
 		boolean expReceiptsVoucherOne        = true;
 		boolean expReceiptsVoucherTwo        = true;
 		boolean expPaymentVoucherBtn         = true; 
 		boolean expPettyCashBtn              = true;
 		boolean expPDCPostDatedReeciptsBtn   = true;
 		boolean expPDCPayment                = true;
 		boolean expPurchaseVoucherBtn        = true;   
 		boolean expPurchaseVoucherNewBtn     = true;
 		boolean expPurchaseReturnsBtn        = true; 
 		boolean expPurchaseOrdersBtn         = true;
 		boolean expJobOrderBtn               = true; 
 		boolean expMRNBtn                    = true;
 		boolean expSIBtn                     = true;
 		boolean expSalesInvoiceNewAuto       = true;
 		boolean expSalesInvoiceN             = true;
 		boolean expPosSalesBtn               = true;
 		boolean expSRBtn                     = true;
 		boolean expSOBtn                     = true; 
 		boolean expProductionOrderBtn        = true; 
 		boolean expDeliveryNotesBtn          = true; 
 		boolean expNonStandardJVBtn          = true;	
 		boolean expInterDepartmentalJVBtn    = true;  
 		boolean expDebitNotesLinewiseBtn     = true;       
 		boolean expCreditNotesLinewiseBtn    = true;  
 		boolean expFADepreciationVoucherBtn  = true;  
 		boolean expJVBtn                     = true;  
 		
 		
		System.out.println("Search Value Actual                : " + actSearch +                   " Value Expected : " + expSearch);
        System.out.println("Create Voucher Value Actual        : " + actCreateVoucher +            " Value Expected : " + expCreateVoucher);
        System.out.println("Delete Voucher Value Actual        : " + actDeleteVoucher +            " Value Expected : " + expDeleteVoucher);
        System.out.println("Receipts Value Actual              : " + actReceipts +                 " Value Expected : " + expReceipts);
        System.out.println("Receipts N One Value Actual        : " + actReceiptsVoucherOne +       " Value Expected : " + expReceiptsVoucherOne);
        System.out.println("Receipts N Two Value Actual        : " + actReceiptsVoucherTwo +       " Value Expected : " + expReceiptsVoucherTwo);
        
        System.out.println("Payments Value Actual              : " + actPaymentVoucherBtn +        " Value Expected : " + expPaymentVoucherBtn);
        System.out.println("Petty Cash Value Actual            : " + actPettyCashBtn +             " Value Expected : " + expPettyCashBtn);
        System.out.println("Post Dated Receipts Value Actual   : " + actPDCPostDatedReeciptsBtn +  " Value Expected : " + expPDCPostDatedReeciptsBtn);
        System.out.println("Post Dated Payments Value Actual   : " + actPDCPayment +               " Value Expected : " + expPDCPayment);
        System.out.println("Purchase Voucher Value Actual      : " + actPurchaseVoucherBtn +       " Value Expected : " + expPurchaseVoucherBtn);
        System.out.println("Purchase N One Value Actual        : " + actPurchaseVoucherNewBtn +    " Value Expected : " + expPurchaseVoucherNewBtn);
        System.out.println("Purchase Returns Value Actual      : " + actPurchaseReturnsBtn +       " Value Expected : " + expPurchaseReturnsBtn); 
        System.out.println("Purchase Orders Value Actual       : " + actPurchaseOrdersBtn +        " Value Expected : " + expPurchaseOrdersBtn);
        System.out.println("Job Order Value Actual             : " + actJobOrderBtn +              " Value Expected : " + expJobOrderBtn);         
        System.out.println("MRN Value Actual                   : " + actMRNBtn +                   " Value Expected : " + expMRNBtn);
        System.out.println("Sales Invoice Value Actual         : " + actSIBtn +                    " Value Expected : " + expSIBtn);
        System.out.println("SI One Voucher Value Actual        : " + actSalesInvoiceNewAuto +      " Value Expected : " + expSalesInvoiceNewAuto);
        System.out.println("SI Two Voucher Value Actual        : " + actSalesInvoiceN +            " Value Expected : " + expSalesInvoiceN);
        System.out.println("POS Sales Value Actual             : " + actPosSalesBtn +              " Value Expected : " + expPosSalesBtn);
        System.out.println("Sales Returns Value Actual         : " + actSRBtn +                    " Value Expected : " + expSRBtn);
        System.out.println("Sales Orders Value Actual          : " + actSOBtn +                    " Value Expected : " + expSOBtn);
        System.out.println("Production Order Value Actual      : " + actProductionOrderBtn +       " Value Expected : " + expProductionOrderBtn);
        System.out.println("Delivery Notes Value Actual        : " + actDeliveryNotesBtn +         " Value Expected : " + expDeliveryNotesBtn);
        System.out.println("Non Standard JV Value Actual       : " + actNonStandardJVBtn +         " Value Expected : " + expNonStandardJVBtn);
        System.out.println("Inter Departmental JV Value Actual : " + actInterDepartmentalJVBtn +   " Value Expected : " + expInterDepartmentalJVBtn);
        System.out.println("Debit Linewise Value Actual        : " + actDebitNotesLinewiseBtn +    " Value Expected : " + expDebitNotesLinewiseBtn);       
        System.out.println("Credit Linewise Value Actual       : " + actCreditNotesLinewiseBtn +   " Value Expected : " + expCreditNotesLinewiseBtn);
        System.out.println("FA Depreciation Value Actual       : " + actFADepreciationVoucherBtn + " Value Expected : " + expFADepreciationVoucherBtn);
        System.out.println("JV Value Actual                    : " + actJVBtn +                    " Value Expected : " + expJVBtn);
           
 		boolean actDebitNotesBtn             = debitNotesBtn.isDisplayed(); 
 		boolean actCreditNotesBtn            = creditNotesBtn.isDisplayed(); 
 		boolean actPayrollPostingsBtn        = payRollPostingsBtn.isDisplayed(); 
 		boolean actOpeningBalanceBtn         = openingBalancesBtn.isDisplayed(); 
 		boolean actSISBtn                    = shortageInStocksBtn.isDisplayed();  
 		boolean actEISBtn                    = excessInStocksBtn.isDisplayed();
 		boolean actSTBtn                     = stockTransfersBtn.isDisplayed();
 		boolean actSTNewOneVoucher           = stockTransfersNewVoucherBtn.isDisplayed();
 		boolean actOPSBtn                    = openingStocksBtn.isDisplayed(); 
 		boolean actIssueToProductionBtn      = issuesToProductionBtn.isDisplayed();  
 		boolean actRFProductionsBtn          = receiptsFromProductionBtn.isDisplayed(); 
 		boolean actReturnFromShopFloor       = returnsFromShopfloorBtn.isDisplayed();
 		boolean actJWIssuesBtn               = jobWorkIssuesBtn.isDisplayed(); 
 		boolean actJWReceiptsBtn             = jobWorkReeceiptsBtn.isDisplayed();  
 		boolean actPurchaseQuotationBtn      = purchaseQuotationsBtn.isDisplayed(); 	
 		boolean actSalesQuotationBtn         = salesQuotationsBtn.isDisplayed(); 
 		boolean actJobOrder                  = jobOrderBtn.isDisplayed();
 		boolean actProductionProcess         = productionProcessBtn.isDisplayed();
 		boolean actMaterialRequition         = materialRequisitionBtn.isDisplayed();
 		boolean actRequestForQuote           = requestForQuoteBtn.isDisplayed();
 		boolean actForexJV                   = forecxJVBtn.isDisplayed();
 		
 		boolean actUpdateBtnInDocCust        = updateBtnDocumentCustomization.isDisplayed(); 
 		boolean actCloseBtnInDocCust         = closeBtnDocumentCustomization.isDisplayed(); 	
 		
 		
 		boolean expDebitNotesBtn             = true; 
 		boolean expCreditNotesBtn            = true; 
 		boolean expPayrollPostingsBtn        = true; 
 		boolean expOpeningBalanceBtn         = true; 
 		boolean expSISBtn                    = true;  
 		boolean expEISBtn                    = true; 
 		boolean expSTBtn                     = true;
 		boolean expSTNewOneVoucher           = true;

 		boolean expOPSBtn                    = true; 
 		boolean expIssueToProductionBtn      = true;  
 		boolean expRFProductionsBtn          = true; 
 		boolean expReturnFromShopFloor       = true;
 		boolean expPronghornBtn              = true;
 		boolean expJWIssuesBtn               = true; 
 		boolean expJWReceiptsBtn             = true;  
 		boolean expPurchaseQuotationBtn      = true; 	
 		boolean expSalesQuotationBtn         = true; 
 		boolean expJobOrder                  = true;
 		boolean expProductionProcess         = true;
 		boolean expMaterialRequition         = true;
 		boolean expForexJV                   = true;
 		
 		boolean expUpdateBtnInDocCust        = true; 
 		boolean expCloseBtnInDocCust         = true; 
 			
 		

		ArrayList<String>actdocumentCustomizationList=new ArrayList<String>();
		
		int documentCustomizationListCount=documentCustomizationList.size();
			
		System.out.println(" documentCustomizationListCount  :  "+documentCustomizationListCount);
			
		for (int i = 0; i < documentCustomizationListCount; i++)
		{
			String data=documentCustomizationList.get(i).getText();
			actdocumentCustomizationList.add(data);
		}
			
		String actdocumentCustomization=actdocumentCustomizationList.toString();
		String expdocumentCustomization=excelReader.getCellData(xlSheetName, 971, 7);
			
		System.err.println("  Actual documentCustomizationList : "+actdocumentCustomization);
		System.err.println("  Expected  vatCreationPageList : "+expdocumentCustomization);
			
		excelReader.setCellData(xlfile, xlSheetName, 971, 8, actdocumentCustomization);
		
		System.out.println("Debit Notes Value Actual           : " + actDebitNotesBtn +              " Value Expected : " + expDebitNotesBtn);
        System.out.println("Credit Notes Value Actual          : " + actCreditNotesBtn +             " Value Expected : " + expCreditNotesBtn);
        System.out.println("Payroll Posting Value Actual       : " + actPayrollPostingsBtn +         " Value Expected : " + expPayrollPostingsBtn);
        System.out.println("Opening Balance Value Actual       : " + actOpeningBalanceBtn +          " Value Expected : " + expOpeningBalanceBtn);
        System.out.println("Shortages In Stocks Value Actual   : " + actSISBtn +                     " Value Expected : " + expSISBtn);
        System.out.println("Excess In Stocks Value Actual      : " + actEISBtn +                     " Value Expected : " + expEISBtn);
        System.out.println("Stock Transfer Value Actual        : " + actSTBtn +                      " Value Expected : " + expSTBtn);
        System.out.println("Stock Transfer New Value Actual    : " + actSTNewOneVoucher +            " Value Expected : " + expSTNewOneVoucher);
        System.out.println("Opening Stocks Value Actual        : " + actOPSBtn +                     " Value Expected : " + expOPSBtn);
        System.out.println("Issue To Production Value Actual   : " + actIssueToProductionBtn +       " Value Expected : " + expIssueToProductionBtn);   
        System.out.println("RF Production Value Actual         : " + actRFProductionsBtn +           " Value Expected : " + expRFProductionsBtn);
        System.out.println("RFShopFloor Value Actual           : " + actReturnFromShopFloor +        " Value Expected : " + expReturnFromShopFloor);
        System.out.println("JobWork Issues Value Actual        : " + actJWIssuesBtn +                " Value Expected : " + expJWIssuesBtn);
        System.out.println("JobWork Receipts Value Actual      : " + actJWReceiptsBtn +              " Value Expected : " + expJWReceiptsBtn);
        System.out.println("Purchase Quotations Value Actual   : " + actPurchaseQuotationBtn +       " Value Expected : " + expPurchaseQuotationBtn);
        System.out.println("Sales Quotations Value Actual      : " + actSalesQuotationBtn +          " Value Expected : " + expSalesQuotationBtn);
        System.out.println("Job Order Value Actual             : " + actJobOrder +                   " Value Expected : " + expJobOrder);
        System.out.println("Production Process Value Actual    : " + actProductionProcess +          " Value Expected : " + expProductionProcess);
        System.out.println("Material Requistion Value Actual   : " + actMaterialRequition +          " Value Expected : " + expMaterialRequition);
        System.out.println("Forex JV Value Actual              : " + actForexJV +                    " Value Expected : " + expForexJV);
        System.out.println("Update Button Value Actual         : " + actUpdateBtnInDocCust +         " Value Expected : " + expUpdateBtnInDocCust);
        System.out.println("Close Button Value Actual          : " + actCloseBtnInDocCust +          " Value Expected : " + expCloseBtnInDocCust);
 	              
        boolean displayResult=actSearch==expSearch && actCreateVoucher==expCreateVoucher
			  				&& actDeleteVoucher==expDeleteVoucher && actReceipts==expReceipts
			  				&& actReceiptsVoucherOne==expReceiptsVoucherOne && actReceiptsVoucherTwo==expReceiptsVoucherTwo
			  				&& actPaymentVoucherBtn==expPaymentVoucherBtn && actPettyCashBtn==expPettyCashBtn
			  				&& actPDCPostDatedReeciptsBtn==expPDCPostDatedReeciptsBtn && actPDCPayment==expPDCPayment
			  				&& actPurchaseVoucherBtn==expPurchaseVoucherBtn && actPurchaseVoucherNewBtn==expPurchaseVoucherNewBtn 
			  				&& actPurchaseOrdersBtn==expPurchaseOrdersBtn && actJobOrderBtn==expJobOrderBtn 
			  				&& actPurchaseReturnsBtn==expPurchaseReturnsBtn && actMRNBtn==expMRNBtn 
			  				&& actSIBtn==expSIBtn && actSalesInvoiceNewAuto==expSalesInvoiceNewAuto 
			  				&& actSalesInvoiceN==expSalesInvoiceN && actPosSalesBtn==expPosSalesBtn 
			  				&& actSRBtn==expSRBtn && actSOBtn==expSOBtn 
			  				&& actProductionOrderBtn==expProductionOrderBtn && actDeliveryNotesBtn==actDeliveryNotesBtn 
			  				&& actNonStandardJVBtn==expNonStandardJVBtn && actInterDepartmentalJVBtn==expInterDepartmentalJVBtn 
			  				&& actDebitNotesLinewiseBtn==expDebitNotesLinewiseBtn && actCreditNotesLinewiseBtn==expCreditNotesLinewiseBtn 
			  				&& actFADepreciationVoucherBtn==expFADepreciationVoucherBtn && actJVBtn==expJVBtn
			          
			        		&& actDebitNotesBtn==expDebitNotesBtn && actCreditNotesBtn==expCreditNotesBtn
			         		&& actPayrollPostingsBtn==expPayrollPostingsBtn && actOpeningBalanceBtn==expOpeningBalanceBtn
			         		&& actSISBtn==expSISBtn && actEISBtn==expEISBtn
			         		&& actSTBtn==expSTBtn && actSTNewOneVoucher==expSTNewOneVoucher
			         		&& actOPSBtn==expOPSBtn && actIssueToProductionBtn==expIssueToProductionBtn
			         		&& actRFProductionsBtn==expRFProductionsBtn && actReturnFromShopFloor==expReturnFromShopFloor
			         		&& actJWIssuesBtn==expJWIssuesBtn && actJWReceiptsBtn==expJWReceiptsBtn 
			         		&& actPurchaseQuotationBtn==expPurchaseQuotationBtn && actSalesQuotationBtn==expSalesQuotationBtn 
			         		&& actUpdateBtnInDocCust==expUpdateBtnInDocCust && actCloseBtnInDocCust==expCloseBtnInDocCust;
        
        
        String actDispalyResult=Boolean.toString(displayResult);
        String expDisplayResult=excelReader.getCellData(xlSheetName, 972, 8);
        
        excelReader.setCellData(xlfile, xlSheetName, 972, 8, actDispalyResult);
        
        
        if (actDispalyResult.equalsIgnoreCase(expDisplayResult) && 
        		actdocumentCustomization.equalsIgnoreCase(expdocumentCustomization))
 		{	
 			System.out.println("Test Pass : VerifyPreferencesOptions Elements Are Displayed As Expected");
 			excelReader.setCellData(xlfile, xlSheetName, 969, 9, resPass);
 			return true;
 		} 	
 		else 
 		{
 			System.out.println("Test Fail :VerifyPreferencesOptions Elements Are Not Displayed As Expected");
 			excelReader.setCellData(xlfile, xlSheetName, 969, 9, resFail);
 			return false;
 		}
 	}
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 969, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
  }

  
  @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/input[1]")
  private static WebElement  titleTxt;
  
  @FindBy(xpath="//*[@id='doc_baseDocument']")
  private static WebElement  baseDocumentTxtInDocCust;
  
  @FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
  private static WebElement  documentsTab;	
 
  @FindBy(xpath="//span[@class='icon-miscellaneous']")
  private static WebElement  miscellaneousTab;
  
  @FindBy(xpath="//span[contains(text(),'Edit Screen')]")
  private static WebElement  editScreenTab; 
  
/*  @FindBy(xpath="//span[@class='icon-inventory']")
  private static WebElement  inventoryoptionsTab;*/
  
  @FindBy(xpath="//span[contains(text(),'Edit Layout')]")
  private static WebElement editLayoutTab;
  
  @FindBy(xpath="//*[@id='navHidetab4']")
  private static WebElement  viewsBtn;
	
  @FindBy(xpath="//span[@class='dropdown icon-menuicon1 icon-font6 theme_color-inverse pull-right']")
  private static WebElement  toogleExpandBtn;
  
  @FindBy(xpath="//*[@id='navHidetab5']/span[2]")
  private static WebElement  externalFunctionsBtn;
  
  @FindBy(xpath="//*[@id='navHidetab15']")
  private static WebElement  schemesBtn;
  
  @FindBy(xpath="//*[@id='navHidetab6']")
  private static WebElement  exportFieldsBtn;
	
  @FindBy(xpath="//*[@id='navHidetab7']")
  private static WebElement  triggersBtn;
	
  @FindBy(xpath="//*[@id='navHidetab8']")
  private static WebElement  documentNumberingBtn;
	
  @FindBy(xpath="//*[@id='navHidetab10']")
  private static WebElement  hirePurchaseBtn;
				
  @FindBy(xpath="//*[@id='navHidetab11']")
  private static WebElement  rulesBtn;
	
  @FindBy(xpath="//*[@id='navHidetab12']")
  private static WebElement  reportsBtn;
  
  @FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
  private static WebElement  masterDropDown;
	
  @FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
  private static WebElement  positionDropdown;
	
  @FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
  private static WebElement  showDependencyDropdown;
	
  @FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
  private static WebElement  groupTxt;
	
  @FindBy(xpath="//select[@id='docFilter']")
  private static WebElement  filterDropdown;
	
  @FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
  private static WebElement  mandatoryDropDown;
  
  @FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
  private static WebElement  mastersR1C1;
	
  @FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
  private static WebElement  mastersPositionR1C2;
  
  @FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
  private static WebElement  mastersR2C1;
	
  @FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
  private static WebElement  mastersPositionR2C2;
  
  @FindBy(xpath="//input[@id='misc_Abbrivation']")
	private static WebElement  abbreviationTxt;
	
	@FindBy(xpath="//input[@id='misc_defaultAcc']")
	private static WebElement  defaultAccount1Txt;
	
	@FindBy(xpath="//*[@id='misc_defaultAcc_input_image']/span")
	private static WebElement  defaultAccount1Dropdown;
	
	@FindBy(xpath="//*[@id='misc_defaultAcc_input_settings']/span")
	private static WebElement  defaultAccount1SettingBtn;
	
	@FindBy(xpath="//div[@id='misc_defaultAcc_customize_popup_container']")
	private static WebElement  defaultAccount1ContainerTxt;
	
	@FindBy(xpath="//div[@id='misc_defaultAcc_customize_popup_footer']//input[1]")
	private static WebElement  defaultAccount1StandardfieldsBtn;
	
				@FindBy(xpath="//select[@id='misc_defaultAcc_customize_popup_standardfields_list']")
				private static WebElement  defaultAccount1FieldsDropdown;
				
				@FindBy(xpath="//input[@id='misc_defaultAcc_customize_popup_standardfields_header']")
				private static WebElement  defaultAccount1HeaderTxt;
				
				@FindBy(xpath="//select[@id='misc_defaultAcc_customize_popup_standardfields_alignment']")
				private static WebElement  defaultAccount1AllignmentDropdown;
				
				@FindBy(xpath="//input[@id='misc_defaultAcc_customize_popup_standardfields_width']")
				private static WebElement  defaultAccount1WidthTxt;
				
				@FindBy(xpath="//section[@id='page_Content']//input[3]")
				private static WebElement  defaultAccount1StandardFieldsokBtn;
				
				@FindBy(xpath="//section[@id='page_Content']//input[4]")
				private static WebElement  defaultAccount1StanadardFieldscancelBtn;
	
	@FindBy(xpath="//div[@id='misc_defaultAcc_search_container']//input[2]")
	private static WebElement  defaultAccount1DeleteColumnBtn;
	
	@FindBy(xpath="//section[@id='page_Content']//input[3]")
	private static WebElement  defaultAccount1okBtn;
	
	@FindBy(xpath="//section[@id='page_Content']//input[4]")
	private static WebElement  defaultAccount1cancelBtn;
	
	@FindBy(xpath="//input[@id='misc_defaultAcc2']")
	private static WebElement  defaultAccount2Txt;

	@FindBy(xpath="//*[@id='misc_defaultAcc2_input_image']/span")
	private static WebElement  defaultAccount2Dropdown;
	
	@FindBy(xpath="//*[@id='misc_defaultAcc2_input_settings']/span")
	private static WebElement  defaultAccount2SettingBtn;
	
	@FindBy(xpath="//div[@id='misc_defaultAcc2_customize_popup_container']")
	private static WebElement  defaultAccount2ContainerTxt;
	
	@FindBy(xpath="//div[@id='misc_defaultAcc2_customize_popup_footer']//input[1]")
	private static WebElement  defaultAccount2StandardfieldsBtn;
	
				@FindBy(xpath="//select[@id='misc_defaultAcc2_customize_popup_standardfields_list']")
				private static WebElement  defaultAccount2FieldsDropdown;
				
				@FindBy(xpath="//input[@id='misc_defaultAcc2_customize_popup_standardfields_header']")
				private static WebElement  defaultAccount2HeaderTxt;
				
				@FindBy(xpath="//select[@id='misc_defaultAcc2_customize_popup_standardfields_alignment']")
				private static WebElement  defaultAccount2AllignmentDropdown;
				
				@FindBy(xpath="//input[@id='misc_defaultAcc2_customize_popup_standardfields_width']")
				private static WebElement  defaultAccount2WidthTxt;
				
				@FindBy(xpath="//section[@id='page_Content']//input[3]")
				private static WebElement  defaultAccount2StandardFieldsokBtn;
				
				@FindBy(xpath="//section[@id='page_Content']//input[4]")
				private static WebElement  defaultAccount2StanadardFieldscancelBtn;
	
	@FindBy(xpath="//div[@id='misc_defaultAcc2_search_container']//input[2]")
	private static WebElement  defaultAccount2DeleteColumnBtn;
	
	@FindBy(xpath="//section[@id='page_Content']//input[3]")
	private static WebElement  defaultAccount2okBtn;
	
	@FindBy(xpath="//section[@id='page_Content']//input[4]")
	private static WebElement  defaultAccount2cancelBtn;
	
	@FindBy(xpath="//input[@id='misc_chkallowDeptAppropriation']")
	private static WebElement  allowDeptAppropriationChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkTransDateWhnAuthzed']")
	private static WebElement  changeTransactionDateWhenAuthorizedChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkdateCntbePriorPrevDocDate']")
	private static WebElement  dateCannotBePriortoPrevdateChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkdetailedDisinSummryBar']")
	private static WebElement  detailedDisplayInSummaryBarChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkdontAllowEditThisDoc']")
	private static WebElement  dontAllowEditThisDocChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkDontAllowInputDate']")
	private static WebElement  dontAllowInputDateChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkdontRestrictAcc1Type']")
	private static WebElement  dontRestrictAccount1TypeChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkdontRestrictAcc2Type']")
	private static WebElement  dontRestrictAccount2TypeChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkdontRestrictonLoginAcc']")
	private static WebElement  dontRestrictOnLoginAccountChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkdontRestrictLoginTag']")
	private static WebElement  dontRestrictOnLoginTagChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkenableVersion']")
	private static WebElement  enableVersionChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkPrintUsingDefaultPrintFormat']")
	private static WebElement  printUsingDefaultPrinterAndFormatChkBox;
	
	@FindBy(xpath="//select[@id='misc_chkCheckBudget']")
	private static WebElement  checkbudgetDropdown;
	
	@FindBy(xpath="//select[@id='misc_PickEmailFrom']")
	private static WebElement  pickEmailFromDropdown;
	
	// Restrictions Sections
	
	@FindBy(xpath="//input[@id='misc_restrictionRdStop']")
	private static WebElement  stopRadio;
	
	@FindBy(xpath="//input[@id='misc_restrictionRdwarnandAllow']")
	private static WebElement  warnAndAllowRadio;
	
	@FindBy(xpath="//input[@id='misc_restrictionentryCondition_textbox']")
	private static WebElement  entryRestrictConditionTxt;
	
				@FindBy(xpath="//input[@id='misc_restrictionentryCondition_formulaText']")
				private static WebElement  miscformulaTxt;
				
				@FindBy(xpath="//div[@id='misc_restrictionentryCondition_expandedFormula']")
				private static WebElement  miscexpandeFormula;
				
				 // Grid Elements 
				
				@FindBy(xpath="//span[@class='icon-collepse icon-font8']")
				private static WebElement  miscTransactionExpandBtn;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_2-2']")
				private static WebElement  miscQuantity;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_2-3']")
				private static WebElement  miscqty;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_3-2']")
				private static WebElement  miscRate;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_3-3']")
				private static WebElement  miscrt;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_4-2']")
				private static WebElement  miscAlternateQty;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_4-3']")
				private static WebElement  miscqtya;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_5-2']")
				private static WebElement  miscGrossAmount;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_5-3']")
				private static WebElement  miscgr;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_6-2']")
				private static WebElement  miscStockValue;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_6-3']")
				private static WebElement  miscstkv;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_7-2']")
				private static WebElement  miscAccount;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_7-3']")
				private static WebElement  miscacc;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_8-2']")
				private static WebElement  miscAccount2;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_8-3']")
				private static WebElement  miscacc2;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_9-2']")
				private static WebElement  miscExchangeRate;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_9-3']")
				private static WebElement  miscexrt;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_10-2']")
				private static WebElement  miscQtyinBaseUnit;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_10-3']")
				private static WebElement  miscqtyb;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_11-2']")
				private static WebElement  miscCurrency;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_11-3']")
				private static WebElement  misccrn;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_12-2']")
				private static WebElement  miscValueOfThetagMasterIDofTheTag;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_12-3']")
				private static WebElement  misctgval;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_13-2']")
				private static WebElement  miscNetAmount;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_13-3']")
				private static WebElement  miscnet;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_14-2']")
				private static WebElement  miscNetAmountInOriginalCurrency;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_14-3']")
				private static WebElement  miscneto;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_15-2']")
				private static WebElement  miscTotalQuantity;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_15-3']")
				private static WebElement  misctqty;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_16-2']")
				private static WebElement  miscTotalGross;
				
				@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_16-3']")
				private static WebElement  misctgr;
				
				// grid completed
			
				@FindBy(xpath="//input[@id='misc_restrictionentryCondition_availableVariables']")
				private static WebElement  searchTxt;
				
				@FindBy(xpath="//button[@id='misc_restrictionentryCondition_PlusOpt']")
				private static WebElement  plusBtnInMiscellaneousTab;
				
				@FindBy(xpath="//button[contains(text(),'-')]")
				private static WebElement  minusBtnInMiscellaneousTab;
				
				@FindBy(xpath="//button[contains(text(),'/')]")
				private static WebElement  divideBtn;
				
				@FindBy(xpath="//button[contains(text(),'*')]")
				private static WebElement  multiplyBtn;
		
				@FindBy(xpath="//button[5]")
				private static WebElement  brackets1Btn;
				
				@FindBy(xpath="//button[6]")
				private static WebElement  brackets2Btn;
				
				@FindBy(xpath="//button[contains(text(),'~')]")
				private static WebElement  tildeBtn;
				
				@FindBy(xpath="//button[contains(text(),'&')]")
				private static WebElement  andBtn;
				
				@FindBy(xpath="//button[contains(text(),'%')]")
				private static WebElement  percentBtn;
				
				@FindBy(xpath="//button[contains(text(),']')]")
				private static WebElement  squarebracketBtn;
				
				@FindBy(xpath="//button[contains(text(),'|')]")
				private static WebElement  verticalBarBtn;
				
				@FindBy(xpath="//button[contains(text(),'\')]")
				private static WebElement  backSlashBtn;
				
				@FindBy(xpath="//button[contains(text(),'<')]")
				private static WebElement  lessThanbtn;
				
				@FindBy(xpath="//button[contains(text(),'>')]")
				private static WebElement  greaterThanBtn;
				
				@FindBy(xpath="//button[contains(text(),'!')]")
				private static WebElement  exclamationBtn;
				
				@FindBy(xpath="//button[contains(text(),'=')]")
				private static WebElement  equalBtn;
				
				@FindBy(xpath="//button[contains(text(),'?:')]")
				private static WebElement  questionBtn;
			
				@FindBy(xpath="//button[contains(text(),'^')]")
				private static WebElement  caretBtn;
				
				@FindBy(xpath="//button[contains(text(),'DateDiff()')]")
				private static WebElement  dateDiffBtn;
				
				@FindBy(xpath="//button[contains(text(),'Cond()')]")
				private static WebElement  condBtn;
				
				@FindBy(xpath="//button[contains(text(),'Min()')]")
				private static WebElement  minBtn;
				
				@FindBy(xpath="//button[contains(text(),'Max()')]")
				private static WebElement  maxBtn;
				
				@FindBy(xpath="//button[@id='misc_restrictionentryCondition_Ok']")
				private static WebElement  entryRestrictConditionokBtn;
				
				@FindBy(xpath="//button[@id='misc_restrictionentryCondition_Cancel']")
				private static WebElement  entryRestrictConditioncancelBtn;
				
	@FindBy(xpath="//input[@id='misc_restrictionEntryMessage']")
	private static WebElement  entryRestrictMessageTxt;
	
   // Apply Rules On	
	
	@FindBy(xpath="//input[@id='misc_chkRulesExtMod']")
	private static WebElement applyRulesOnExternalModuleChkbox;
	
	@FindBy(xpath="//input[@id='misc_chkRulesLink']")
	private static WebElement applyRulesOnLinkChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkRulesItems']")
	private static WebElement applyRulesOnSetItemsChkBox;
	
   //	Apply Dependency On
	
	@FindBy(xpath="//input[@id='misc_chkdependencyExtMod']")
	private static WebElement applyDependencyOnExternalModuleChkbox;
	
	@FindBy(xpath="//input[@id='misc_chkdependencyLink']")
	private static WebElement applyDependencyOnLinkChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkdependencyItems']")
	private static WebElement applyDependencyOnSetItemsChkBox;
	
   // Posting Details	
	
	@FindBy(xpath="//input[@id='misc_PostingUpdateFA']")
	private static WebElement updateFAChkBox;
	
	@FindBy(xpath="//input[@id='misc_PostingSelectAccInLine']")
	private static WebElement selectAmountInEveryLineChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkDetailedPosting']")
	private static WebElement detailedPostingChkbox;
	
	@FindBy(xpath="//input[@id='misc_chkUpdateStock']")
	private static WebElement updateStockChkBox;
	
	@FindBy(xpath="//input[@id='misc_chkFixUpdateStock']")
	private static WebElement allowChangingUpdateStock;
	
	@FindBy(xpath="//input[@id='misc_PostingPostServiceTax']")
	private static WebElement postServicetaxChkBox;
	
	@FindBy(xpath="//input[@id='misc_PostingPostTDS']")
	private static WebElement postTDSchkBox;
	
	@FindBy(xpath="//input[@id='misc_PostingPostVAT']")
	private static WebElement postVATchkBox;
	
	@FindBy(xpath="//input[@id='misc_PostingLinkToLetterOfCredit']")
	private static WebElement linkToLetterOfCreditChkBox;
	
	@FindBy(xpath="//input[@id='misc_Dontcheckcreditlimit']")
	private static WebElement dontcheckcreditlimitChkBox;
  
    @FindBy(xpath="//select[@id='editLayout_voucherDropDown']")
    private static WebElement editLayoutLoadFieldsDropdown;  

    @FindBy(xpath="//button[@class='Fbutton pull-left']")
  	private static WebElement editLayoutselectAllBtn;  

    @FindBy(xpath="//div[@id='editLayout_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
  	private static WebElement editLayoutokBtn;  

    @FindBy(xpath="//a[contains(text(),'Body')]")
  	private static WebElement  editLayoutBodyTab; 

    @FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
	private static WebElement  masters1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
	private static WebElement  position1;
	
    @FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
	private static WebElement  masters2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
	private static WebElement  position2;
	
    @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
    private static WebElement editScreenLoadFieldsBtn;  
     
    @FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
    private static WebElement editScreenLoadFieldsDropdown;  
     
    @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[1]")
    private static WebElement editScreenselectAllBtn;

    @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
  	private static WebElement editLayoutLoadFieldsBtn;  
      
    @FindBy(xpath="//div[@id='editScreen_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
	private static WebElement editScreenokBtn; 
  
	@FindBy(xpath="//a[contains(text(),'Header')]")
    private static WebElement  editLayoutHeaderTab;
   
    @FindBy(xpath="//td[@id='editLayout_bodyrow_1 _1']//span[@id='editIcon']")
  	private static WebElement  editLayoutBody1stRowEditBtn; 

    
	public boolean 	checkVATvouchersCreation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
	try
	
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersBtn));
		purchaseVouchersBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 973, 6));
		Thread.sleep(2000);
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		Select masterDropDownSelect=new Select(masterDropDown);
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 974, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		Select positionDropdownSelect=new Select(positionDropdown);
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 975, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 976, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 977, 6));
	
	   Thread.sleep(3000);
		
	   
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
		editScreenBodyTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		Select editScreenLoadFieldsDropdownSelect =new Select(editScreenLoadFieldsDropdown);
		editScreenLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 978, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFields3rdChkBox));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBody2ndRowEditBtn));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
		editScreenFooterTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 979, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		Select editLayoutLoadFieldsDropdownSelect =new Select(editLayoutLoadFieldsDropdown);
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 980, 6));
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 981, 6));
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
	
		Thread.sleep(3000);
		

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String  pvVATmessage =excelReader.getCellData(xlSheetName, 982, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 982, 8, pvVATmessage);
		
		
		boolean actSaveAccountMessage = checkValidationMessageboolean(pvVATmessage);
		boolean expSaveAccountMessage = true;
		
		Thread.sleep(5000);
		
		
		
		// Purchase Returns VAT Voucher
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsBtn));
		purchaseReturnsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 983, 6));
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 984, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 985, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 986, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();

		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 987, 6));
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
		editScreenTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBodyTab));
		editScreenBodyTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 988, 6));
		
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenFooterTab));
		editScreenFooterTab.click();
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsBtn));
		editScreenLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsDropdown));
		editScreenLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 989, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenselectAllBtn));
		editScreenselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenokBtn));
		editScreenokBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutHeaderTab));
		editLayoutHeaderTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 990, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
		editLayoutTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
		editLayoutBodyTab.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsBtn));
		editLayoutLoadFieldsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsDropdown));
		editLayoutLoadFieldsDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 991, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutselectAllBtn));
		editLayoutselectAllBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutokBtn));
		editLayoutokBtn.click();
		
		Thread.sleep(3000);
		
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String PRVATmessage =excelReader.getCellData(xlSheetName, 992, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 992, 8, PRVATmessage);
		
		boolean actPRVATmessage = checkValidationMessageboolean(PRVATmessage);
		boolean expPRVATmessage = true;
		
		Thread.sleep(5000);
		
		
		
		// Sales Invoice VAT
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceBtn));
		salesInvoiceBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 993, 6));
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 994, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 995, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 996, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();

		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 997, 6));
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String siVATmessage =excelReader.getCellData(xlSheetName, 998, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 998, 8, siVATmessage);
		
		boolean actsiVATmessage = checkValidationMessageboolean(siVATmessage);
		boolean expsiVATmessage = true;
		
		Thread.sleep(5000);
		
		
		// Sales Returns VAT
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsBtn));
		salesReturnsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 999, 6));
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1000, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1001, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
		masters2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1002, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
		position2.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();

		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1003, 6));
		
		
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String srVATmessage =excelReader.getCellData(xlSheetName, 1004, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 1004, 8, srVATmessage);
		
		boolean actsrVATmessage = checkValidationMessageboolean(srVATmessage);
		boolean expsrVATmessage = true;
		
		Thread.sleep(5000);
		
		// Receipts Voucher VAT
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptsBtn));
		receiptsBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 1005, 6));
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1006, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1007, 6));
		
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String recVATmessage =excelReader.getCellData(xlSheetName, 1008, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 1008, 8, recVATmessage);
		
		boolean actRecVATmessage = checkValidationMessageboolean(recVATmessage);
		boolean expRecVATmessage = true;
		
		Thread.sleep(4000);
		
		// Payments VAT
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsBtn));
		paymentsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 1009, 6));
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1010, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1011, 6));
		
		
	
		Thread.sleep(2000);	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String pVATmessage =excelReader.getCellData(xlSheetName, 1012, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 1012, 8, pVATmessage);
		
		
		boolean actpVATmessage = checkValidationMessageboolean(pVATmessage);
		boolean exppVATmessage = true;
		
		
		Thread.sleep(5000);
		
		// PettyCash Voucher VAT
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBtn));
		pettyCashBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 1013, 6));
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1014, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1015, 6));
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String pettycashVATmessage =excelReader.getCellData(xlSheetName, 1016, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 1016, 8, pettycashVATmessage);
		
		boolean actpettycashmessage = checkValidationMessageboolean(pettycashVATmessage);
		boolean exppettycashmessage = true;
		
		
	   Thread.sleep(3000);
		
		
		// JV VAT
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesBtn));
		journalEntriesBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 1017, 6));
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1018, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1019, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String jvVATmessage =excelReader.getCellData(xlSheetName, 1020, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 1020, 8, jvVATmessage);
		
		boolean actJVVATmessage = checkValidationMessageboolean(jvVATmessage);
		boolean expJVVATmessage = true;
		
		Thread.sleep(2000);
		
		// Non JV VAT
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nonStandardjournalEntriesBtn));
		nonStandardjournalEntriesBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 1021, 6));
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1022, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1023, 6));
		
		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String njvVATmessage =excelReader.getCellData(xlSheetName, 1024, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 1024, 8, njvVATmessage);
		
		boolean actnjvVATmessage = checkValidationMessageboolean(njvVATmessage);
		boolean expnjvVATmessage = true;
		
		// Debit Notes VAT

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitNotesBtn));
		debitNotesBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 1025, 6));
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1026, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1027, 6));
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String debitVATmessage =excelReader.getCellData(xlSheetName, 1028, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 1028, 8, debitVATmessage);
		
		boolean actDebitVATmessage = checkValidationMessageboolean(debitVATmessage);
		boolean expDebitVATmessage = true;
		
		
		
	    Thread.sleep(5000);
	    
		// Credit Notes VAT
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotesBtn));
		creditNotesBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createVoucherBtn));
		createVoucherBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
		titleTxt.click();
		titleTxt.clear();
		titleTxt.sendKeys(excelReader.getCellData(xlSheetName, 1029, 6));
		titleTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
		masters1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
		masterDropDown.click();
		
		masterDropDownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1030, 6));
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
		position1.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(positionDropdown));
		positionDropdown.click();
		
		positionDropdownSelect.selectByVisibleText(excelReader.getCellData(xlSheetName, 1031, 6));
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		String creditVATmessage =excelReader.getCellData(xlSheetName, 1032, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 1032, 8, creditVATmessage);
		
		
		boolean actcreditVATmessage = checkValidationMessageboolean(creditVATmessage);
		boolean expcreditVATmessage = true;
		
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDocumentCustmization));
		closeBtnInDocumentCustmization.click();
		
		
		System.out.println("******************************************checkVATvouchersCreation*****************************************");
		
		System.out.println("PVVATmessage        : " + actSaveAccountMessage  + " Value Expected : " + expSaveAccountMessage);
		System.out.println("PRVATmessage        : " + actPRVATmessage        + " Value Expected : " + expPRVATmessage);
		System.out.println("SIVATmessage        : " + actsiVATmessage        + " Value Expected : " + expsiVATmessage);
		System.out.println("SRVATmessage        : " + actsrVATmessage        + " Value Expected : " + expsrVATmessage);
		System.out.println("RECVATmessage       : " + actRecVATmessage       + " Value Expected : " + expRecVATmessage);
		System.out.println("PAYVATmessage       : " + actpVATmessage         + " Value Expected : " + exppVATmessage);
		System.out.println("PettycashVATmessage : " + actpettycashmessage    + " Value Expected : " + exppettycashmessage);
		System.out.println("JVVATmessage        : " + actJVVATmessage        + " Value Expected : " + expJVVATmessage);
		System.out.println("NJVVATmessage       : " + actnjvVATmessage       + " Value Expected : " + expnjvVATmessage);
		System.out.println("DebitVATmessage     : " + actDebitVATmessage     + " Value Expected : " + expDebitVATmessage);
		System.out.println("CreditVATmessage    : " + actcreditVATmessage    + " Value Expected : " + expcreditVATmessage);
		
		
		if(actSaveAccountMessage==expSaveAccountMessage && actPRVATmessage==expPRVATmessage && actsiVATmessage==expsiVATmessage
				&& actpVATmessage==exppVATmessage && actRecVATmessage==expRecVATmessage
				&& actsrVATmessage==expsrVATmessage && actpettycashmessage==exppettycashmessage
				&& actJVVATmessage==expJVVATmessage && actnjvVATmessage==expnjvVATmessage
				&& actDebitVATmessage==expDebitVATmessage && actcreditVATmessage==expcreditVATmessage)
		{
			excelReader.setCellData(xlfile, xlSheetName, 972, 9, resPass);
			System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 972, 9, resFail);
			System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
			return false;
			
		}
	}

			catch (Exception e) 
			  {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, xlSheetName, 972, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
				  return false;
			  }
	}
	

	
	
	 @FindBy(xpath="//*[@id='0']")
	 private static WebElement generalInSettingwizard;
	
	 @FindBy(xpath="//*[@id='1']")
	 private static WebElement vatInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[2]/a")
	 private static WebElement posInSettingwizard;
		 
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[3]/a")
	 private static WebElement inventoryInSettingwizard;
	 
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[4]/a")
	 private static WebElement financialInSettingwizard;
 
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[5]/a")
	 private static WebElement tdsInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[6]/a")
	 private static WebElement wmsInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[7]/a")
	 private static WebElement gstInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[8]/a")
	 private static WebElement mrpOneInSettingwizard;
	
	 @FindBy(xpath="//*[@id='SettingWizardUL']/li[9]/a")
	 private static WebElement mrpTwoInSettingwizard;
	

	 @FindBy(xpath="//*[@id='SettingWizardUL']/li")
	 private static List<WebElement> settingWizardULList;
	 
	
	 
 public boolean checkOpenSettingWizardPageIsOpen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("********************* checkOpenSettingWizardPageIsOpen Method Executes.............   *****************************");
	
	try
	{		
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsSettingsWizard));
		settingsSettingsWizard.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mrpTwoInSettingwizard));
		
		boolean actGeneralOption                    = generalInSettingwizard.isDisplayed();
		boolean actVatOption                        = vatInSettingwizard.isDisplayed();
        boolean actPosOption                        = posInSettingwizard.isDisplayed();
        boolean actInventoryOption                  = inventoryInSettingwizard.isDisplayed();
        boolean actFinancialOption                  = financialInSettingwizard.isDisplayed();
        boolean actTdsOption                        = tdsInSettingwizard.isDisplayed();       
        boolean actwmsOption                        = wmsInSettingwizard.isDisplayed();       
        boolean actgstOption                        = gstInSettingwizard.isDisplayed();       
        boolean actmrpOneOption                     = mrpOneInSettingwizard.isDisplayed();
        boolean actmrpTwoOption                     = mrpTwoInSettingwizard.isDisplayed();       
       
		boolean expGeneralOption                    = true;
		boolean expVatOption                        = true;
        boolean expPosOption                        = true;
        boolean expInventoryOption                  = true;
        boolean expFinancialOption                  = true;
        boolean expTdsOption                        = true;       
        boolean expwmsOption                        = true;       
        boolean expgstOption                        = true;       
        boolean expmrpOneOption                     = true;
        boolean expmrpTwoOption                     = true;;      
        
        System.out.println("General Value Actual                  : " + actGeneralOption +      " Value Expected : " + expGeneralOption);
        System.out.println("VAT Value Actual                      : " + actVatOption +          " Value Expected : " + expVatOption);
        System.out.println("POS Value Actual                      : " + actPosOption +          " Value Expected : " + expPosOption);
        System.out.println("Inventory Value Actual                : " + actInventoryOption +    " Value Expected : " + expInventoryOption);
        System.out.println("Financial Value Actual                : " + actFinancialOption +    " Value Expected : " + expFinancialOption);
        System.out.println("TDS Value Actual                      : " + actTdsOption +          " Value Expected : " + expTdsOption);     
        System.out.println("WMS Value Actual                      : " + actwmsOption +          " Value Expected : " + expwmsOption);
        System.out.println("GST Value Actual                      : " + actgstOption +          " Value Expected : " + expgstOption);
        System.out.println("MRP One Value Actual                  : " + actmrpOneOption +       " Value Expected : " + expmrpOneOption);
        System.out.println("MRP Two Value Actual                  : " + actmrpTwoOption +       " Value Expected : " + expmrpTwoOption);
        
        
        
        ArrayList<String>actsettingWizardULList=new ArrayList<String>();
		
		int settingWizardULListCount=settingWizardULList.size();
			
		System.out.println(" settingWizardULListCount  :  "+settingWizardULListCount);
			
		for (int i = 0; i < settingWizardULListCount; i++)
		{
			String data=documentCustomizationList.get(i).getText();
			actsettingWizardULList.add(data);
		}
			
		String actsettingWizardUL=actsettingWizardULList.toString();
		String expsettingWizardUL=excelReader.getCellData(xlSheetName, 1034, 7);
			
		System.err.println("  Actual settingWizardULList : "+actsettingWizardUL);
		System.err.println("  Expected  settingWizardULList : "+expsettingWizardUL);
			
		excelReader.setCellData(xlfile, xlSheetName, 1034, 8, actsettingWizardUL);
        
        
		if(actGeneralOption==expGeneralOption && actVatOption==expVatOption 
	
				&& actPosOption==expPosOption && actInventoryOption==expInventoryOption 
				&& actFinancialOption==expFinancialOption && actTdsOption==expTdsOption
				&& actwmsOption==expwmsOption && actgstOption==expgstOption 
				&& expgstOption==expmrpOneOption && actmrpTwoOption==expmrpTwoOption && 
				
				actsettingWizardUL.endsWith(expsettingWizardUL)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 1033, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 1033, 9, resFail);
			return false;
		}
    }
	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1033, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	
  }


@FindBy(xpath="//div[@id='dvSettingWizard']//li[1]/a")
private static WebElement  settingsWizardGeneralBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[2]/a")
private static WebElement  settingsWizardVATBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[3]/a")
private static WebElement  settingsWizardPOSBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[4]/a")
private static WebElement  settingsWizardInventoryBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[5]/a")
private static WebElement  settingsWizardFinancialBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[6]/a")
private static WebElement  settingsWizardTDSBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[7]/a")
private static WebElement  settingsWizardWMSBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[8]/a")
private static WebElement  settingsWizardGSTBtn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[9]/a")
private static WebElement  settingsWizardMRP1Btn;

@FindBy(xpath="//div[@id='dvSettingWizard']//li[10]/a")
private static WebElement  settingsWizardMRP2Btn;

@FindBy(xpath="//div[@class='Fcheckbox col-xs-12 col-sm-8']//label[1]/input")
private static WebElement  settingsWizardVATActivateVATChkbox;

@FindBy(xpath="//div[@id='dvRightSettingWizard']/div[2]/div[1]/div/div/label")
private static List<WebElement> settingsWizardVATVouchersList;

@FindBy(xpath="//div[@id='dvRightSettingWizard']/div[2]/div[1]/div/div/label/input")
private static List<WebElement> settingsWizardVATVoucherChkboxList;

@FindBy(xpath="//div[@id='dvSelectedVouchers']/div/label")
private static List<WebElement> settingsWizardVATSelectedVouchersList;

@FindBy(xpath="//label[contains(text(),'Gross')]/input")
private static WebElement settingsWizardVATGrossChkbox;

@FindBy(xpath="//label[contains(text(),'RD')]/input")
private static WebElement settingsWizardVATRDChkbox;

@FindBy(xpath="//label[(text()='Avg Rate')]/input")
private static WebElement settingsWizardVATAvgRateChkbox;

@FindBy(xpath="//label[(text()='Avg Rate(O)')]/input")
private static WebElement settingsWizardVATAvgRateOChkbox;

@FindBy(xpath="//label[(text()='AQ')]/input")
private static WebElement settingsWizardVATAQChkbox;

@FindBy(xpath="//label[(text()='FQ')]/input")
private static WebElement settingsWizardVATFQChkbox;

@FindBy(xpath="//label[(text()='VAT')]/input")
private static WebElement settingsWizardVATChkbox;

@FindBy(xpath="//label[(text()='Taxable')]/input")
private static WebElement settingsWizardTaxableChkbox;

@FindBy(xpath="//span[@class='icon-update icon-font6']")
private static WebElement settingsWizardUpdateBtn;

@FindBy(xpath="//*[@id='myNavbarVATAuditFile']/ul/li/div[2]/div[1]/span")
private static WebElement settingsWizardVAtCloseBtn;

@FindBy(xpath="//input[@id='chkVATInclusive']")
private static WebElement settingsWizardVATInclusiveChkbox;







 public boolean checkSaveVatOptionsInSettingsWizard() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	 
  excelReader=new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
  try
  {
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVATBtn));
	settingsWizardVATBtn.click();
	
	Thread.sleep(3000);
	
	int actVouchersCount		=settingsWizardVATVouchersList.size();
	int expVouchersCount		=64;
	
	for (int i = 0; i < actVouchersCount; i++) 
	{
		String data=settingsWizardVATVouchersList.get(i).getText();
		
		int sl=i+1;
		
		System.out.println("VAT Activation Voucher "+sl+": "+data);
		
		if (data.contains("VAT")) 
		{
			settingsWizardVATVouchersList.get(i).click();
		}
	}
	
	
	int actVoucherChkboxList			=settingsWizardVATVoucherChkboxList.size();
	
	int selectedVouchersCount			=0;
	
	for (int i = 0; i < actVoucherChkboxList; i++) 
	{
		boolean selected=settingsWizardVATVoucherChkboxList.get(i).isSelected();
		
		if (selected) 
		{
			selectedVouchersCount=selectedVouchersCount+1;
		}
	}
	
	int actSelectedVouchersCount		=selectedVouchersCount;
	int expSelectedVouchersCount		=settingsWizardVATSelectedVouchersList.size();
	
	boolean actVouchersSelected=true;
	boolean expVouchersSelected=true;

	if (actSelectedVouchersCount==expSelectedVouchersCount) 
	{
		Set<String> expSelectedVouchersList= new HashSet<String>();
		  
		expSelectedVouchersList.add("Purchases Voucher VAT");
		expSelectedVouchersList.add("Purchases Returns VAT");
		expSelectedVouchersList.add("Sales Invoices VAT");
		expSelectedVouchersList.add("Sales Returns VAT");
		expSelectedVouchersList.add("Receipts VAT");
		expSelectedVouchersList.add("Payments VAT");
		expSelectedVouchersList.add("PettyCash VAT");
		expSelectedVouchersList.add("JV VAT");
		expSelectedVouchersList.add("Non JV VAT");
		expSelectedVouchersList.add("Debit Notes VAT");
		expSelectedVouchersList.add("Credit Notes VAT");
		  
	  Set<String> actSelectedVouchersList=new HashSet<String>();
	  
	  for (int i = 0; i < expSelectedVouchersCount; i++) 
	  {
		  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
		  
		  actSelectedVouchersList.add(voucher);
	  }
	  
	  System.out.println(actSelectedVouchersList);
	  System.out.println(expSelectedVouchersList);
	  
	  actVouchersSelected=actSelectedVouchersList.equals(expSelectedVouchersList);
	}
	
	
	

	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1036, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actPurchasesVoucherVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	boolean actPurchasesVoucherVATRD				=settingsWizardVATRDChkbox.isDisplayed();
	boolean actPurchasesVoucherVATAvgRate			=settingsWizardVATAvgRateChkbox.isDisplayed();
	boolean actPurchasesVoucherVATAvgRateO			=settingsWizardVATAvgRateOChkbox.isDisplayed();
	
	boolean expPurchasesVoucherVATGross				=true;
	boolean expPurchasesVoucherVATRD				=true;
	boolean expPurchasesVoucherVATAvgRate			=true;
	boolean expPurchasesVoucherVATAvgRateO			=true;
	
	settingsWizardVATGrossChkbox.click();
	settingsWizardVATRDChkbox.click();
	settingsWizardVATAvgRateChkbox.click();
	settingsWizardVATAvgRateOChkbox.click();
	
	
	
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1037, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actPurchasesReturnsVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	boolean actPurchasesReturnsVATRD				=settingsWizardVATRDChkbox.isDisplayed();
	boolean actPurchasesReturnsVATAvgRateO			=settingsWizardVATAvgRateOChkbox.isDisplayed();
	
	boolean expPurchasesReturnsVATGross				=true;
	boolean expPurchasesReturnsVATRD				=true;
	boolean expPurchasesReturnsVATAvgRateO			=true;
	
	settingsWizardVATGrossChkbox.click();
	settingsWizardVATRDChkbox.click();
	settingsWizardVATAvgRateOChkbox.click();
	
	
	
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1038, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actSalesInvoiceVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	boolean actSalesInvoiceVATRD				=settingsWizardVATRDChkbox.isDisplayed();
	boolean actSalesInvoiceVATAQ				=settingsWizardVATAQChkbox.isDisplayed();
	boolean actSalesInvoiceVATFQ				=settingsWizardVATFQChkbox.isDisplayed();
	boolean actSalesInvoiceVATAvgRate			=settingsWizardVATAvgRateChkbox.isDisplayed();
	boolean actSalesInvoiceVATAvgRateO			=settingsWizardVATAvgRateOChkbox.isDisplayed();
	/*boolean actSalesInvoiceVAT					=settingsWizardVATChkbox.isDisplayed();
	boolean actSalesInvoiceTaxable				=settingsWizardTaxableChkbox.isDisplayed();*/
	
	boolean expSalesInvoiceVATGross				=true;
	boolean expSalesInvoiceVATRD				=true;
	boolean expSalesInvoiceVATAQ				=true;
	boolean expSalesInvoiceVATFQ				=true;
	boolean expSalesInvoiceVATAvgRate			=true;
	boolean expSalesInvoiceVATAvgRateO			=true;
	/*boolean expSalesInvoiceVAT					=true;
	boolean expSalesInvoiceTaxable				=true;*/
	
	settingsWizardVATGrossChkbox.click();
	settingsWizardVATRDChkbox.click();
	settingsWizardVATAQChkbox.click();
	settingsWizardVATFQChkbox.click();
	settingsWizardVATAvgRateChkbox.click();
	settingsWizardVATAvgRateOChkbox.click();
	/*settingsWizardVATChkbox.click();
	settingsWizardTaxableChkbox.click();*/
	settingsWizardVATInclusiveChkbox.click();

	
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1039, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actSalesReturnsVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	boolean actSalesReturnsVATAvgRateO			=settingsWizardVATAvgRateOChkbox.isDisplayed();
	
	boolean expSalesReturnsVATGross				=true;
	boolean expSalesReturnsVATAvgRateO			=true;
	
	settingsWizardVATGrossChkbox.click();
	settingsWizardVATAvgRateOChkbox.click();
	
	
	
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1040, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actReceiptsVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expReceiptsVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1041, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actPaymentsVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expPaymentsVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1042, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actPettyCashVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expPettyCashVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1043, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actJVVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expJVVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1044, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actNonJVVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expNonJVVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1045, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actDebitNotesVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expDebitNotesVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
    {
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1046, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	 }
	
	boolean actCreditNotesVATGross				=settingsWizardVATGrossChkbox.isDisplayed();
	
	boolean expCreditNotesVATGross				=true;
	
	settingsWizardVATGrossChkbox.click();
	
	Thread.sleep(2000);
	
	
	for (int i = 0; i < expSelectedVouchersCount; i++) 
	{
	  String voucher=settingsWizardVATSelectedVouchersList.get(i).getText();
	  
	  if (voucher.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1047, 6))) 
	  {
		  settingsWizardVATSelectedVouchersList.get(i).click();
		  break;
	  }
	}
	
	boolean actSalesInvoiceGrossIsSelected					=settingsWizardVATGrossChkbox.isSelected();
	boolean actSalesInvoiceRDIsSelected						=settingsWizardVATRDChkbox.isSelected();
	boolean actSalesInvoiceAQIsSelected						=settingsWizardVATAQChkbox.isSelected();
	boolean actSalesInvoiceFQIsSelected						=settingsWizardVATFQChkbox.isSelected();
	boolean actSalesInvoiceAvgRateIsSelected				=settingsWizardVATAvgRateChkbox.isSelected();
	boolean actSalesInvoiceAvgRateOIsSelected				=settingsWizardVATAvgRateOChkbox.isSelected();
	boolean actSalesInvoiceVATInclusiveIsSelected			=settingsWizardVATInclusiveChkbox.isSelected();
	
	boolean expSalesInvoiceGrossIsSelected					=true;
	boolean expSalesInvoiceRDIsSelected						=true;
	boolean expSalesInvoiceAQIsSelected						=true;
	boolean expSalesInvoiceFQIsSelected						=true;
	boolean expSalesInvoiceAvgRateIsSelected				=true;
	boolean expSalesInvoiceAvgRateOIsSelected				=true;
	boolean expSalesInvoiceVATInclusiveIsSelected			=true;

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardUpdateBtn));
	settingsWizardUpdateBtn.click();
	
	String expMessage=excelReader.getCellData(xlSheetName, 1048, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 1048, 8, expMessage);
	
	boolean actSaveSettingWizardVATmessage = checkValidationMessageboolean(expMessage);
	boolean expSaveSettingWizardVATmessage = true;
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsWizardVAtCloseBtn));
	settingsWizardVAtCloseBtn.click();
	
	System.out.println("****************************************************checkSettingsWizard****************************************************");
 	
	System.out.println("settingsWizardVATVouchersListCount    : " + actVouchersCount                         + "  value expected  " + expVouchersCount);
	System.out.println("SelectedVouchersCount                 : " + actSelectedVouchersCount                 + "  value expected  " + expSelectedVouchersCount);
	System.out.println("VouchersSelected                      : " + actVouchersSelected                      + "  value expected  " + expVouchersSelected);
	System.out.println("PurchasesVoucherVATGross              : " + actPurchasesVoucherVATGross              + "  value expected  " + expPurchasesVoucherVATGross);
	System.out.println("PurchasesVoucherVATRD                 : " + actPurchasesVoucherVATRD                 + "  value expected  " + expPurchasesVoucherVATRD);
	System.out.println("PurchasesVoucherVATAvgRate            : " + actPurchasesVoucherVATAvgRate            + "  value expected  " + expPurchasesVoucherVATAvgRate);
	System.out.println("PurchasesVoucherVATAvgRateO           : " + actPurchasesVoucherVATAvgRateO           + "  value expected  " + expPurchasesVoucherVATAvgRateO);
	System.out.println("PurchasesReturnsVATGross              : " + actPurchasesReturnsVATGross              + "  value expected  " + expPurchasesReturnsVATGross);
	System.out.println("PurchasesReturnsVATRD                 : " + actPurchasesReturnsVATRD                 + "  value expected  " + expPurchasesReturnsVATRD);
	System.out.println("PurchasesReturnsVATAvgRateO           : " + actPurchasesReturnsVATAvgRateO           + "  value expected  " + expPurchasesReturnsVATAvgRateO);
	System.out.println("SalesInvoiceVATGross                  : " + actSalesInvoiceVATGross                  + "  value expected  " + expSalesInvoiceVATGross);
	System.out.println("SalesInvoiceVATRD                     : " + actSalesInvoiceVATRD                     + "  value expected  " + expSalesInvoiceVATRD);
	System.out.println("SalesInvoiceVATAQ                     : " + actSalesInvoiceVATAQ                     + "  value expected  " + expSalesInvoiceVATAQ);
	System.out.println("SalesInvoiceVATFQ                     : " + actSalesInvoiceVATFQ                     + "  value expected  " + expSalesInvoiceVATFQ);
	System.out.println("SalesInvoiceVATAvgRate                : " + actSalesInvoiceVATAvgRate                + "  value expected  " + expSalesInvoiceVATAvgRate);
	System.out.println("SalesInvoiceVATAvgRateO               : " + actSalesInvoiceVATAvgRateO               + "  value expected  " + expSalesInvoiceVATAvgRateO);
	System.out.println("SalesReturnsVATGross                  : " + actSalesReturnsVATGross                  + "  value expected  " + expSalesReturnsVATGross);
	System.out.println("SalesReturnsVATAvgRateO               : " + actSalesReturnsVATAvgRateO               + "  value expected  " + expSalesReturnsVATAvgRateO);
	System.out.println("ReceiptsVATGross                      : " + actReceiptsVATGross                      + "  value expected  " + expReceiptsVATGross);
	System.out.println("PaymentsVATGross                      : " + actPaymentsVATGross                      + "  value expected  " + expPaymentsVATGross);
	System.out.println("PettyCashVATGross                     : " + actPettyCashVATGross                     + "  value expected  " + expPettyCashVATGross);
	System.out.println("JVVATGross                            : " + actJVVATGross                            + "  value expected  " + expJVVATGross);
	System.out.println("NonJVVATGross                         : " + actNonJVVATGross                         + "  value expected  " + expNonJVVATGross);
	System.out.println("DebitNotesVATGross                    : " + actDebitNotesVATGross                    + "  value expected  " + expDebitNotesVATGross);
	System.out.println("CreditNotesVATGross                   : " + actCreditNotesVATGross                   + "  value expected  " + expCreditNotesVATGross);
	System.out.println("SalesInvoiceGrossIsSelected           : " + actSalesInvoiceGrossIsSelected           + "  value expected  " + expSalesInvoiceGrossIsSelected);
	System.out.println("SalesInvoiceRDIsSelected              : " + actSalesInvoiceRDIsSelected              + "  value expected  " + expSalesInvoiceRDIsSelected);
	System.out.println("SalesInvoiceAQIsSelected              : " + actSalesInvoiceAQIsSelected              + "  value expected  " + expSalesInvoiceAQIsSelected);
	System.out.println("SalesInvoiceFQIsSelected              : " + actSalesInvoiceFQIsSelected              + "  value expected  " + expSalesInvoiceFQIsSelected);
	System.out.println("SalesInvoiceAvgRateIsSelected         : " + actSalesInvoiceAvgRateIsSelected         + "  value expected  " + expSalesInvoiceAvgRateIsSelected);
	System.out.println("SalesInvoiceAvgRateOIsSelected        : " + actSalesInvoiceAvgRateOIsSelected        + "  value expected  " + expSalesInvoiceAvgRateOIsSelected);
	System.out.println("SalesInvoiceVATInclusiveIsSelected    : " + actSalesInvoiceVATInclusiveIsSelected    + "  value expected  " + expSalesInvoiceVATInclusiveIsSelected);
	System.out.println("Error Message                         : " + actSaveSettingWizardVATmessage           + "  value expected  " + expSaveSettingWizardVATmessage);
	
	
	boolean displayResult=actVouchersCount==expVouchersCount && actSelectedVouchersCount==expSelectedVouchersCount && actVouchersSelected==expVouchersSelected &&
			 actPurchasesVoucherVATGross==expPurchasesVoucherVATGross && actPurchasesVoucherVATRD==expPurchasesVoucherVATRD && 
			 actPurchasesVoucherVATAvgRate==expPurchasesVoucherVATAvgRate && actPurchasesVoucherVATAvgRateO==expPurchasesVoucherVATAvgRateO &&
			 actPurchasesReturnsVATGross==expPurchasesReturnsVATGross && actPurchasesReturnsVATRD==expPurchasesReturnsVATRD &&
			 actPurchasesReturnsVATAvgRateO==expPurchasesReturnsVATAvgRateO && actSalesInvoiceVATGross==expSalesInvoiceVATGross &&
			 actSalesInvoiceVATRD==expSalesInvoiceVATRD && actSalesInvoiceVATAQ==expSalesInvoiceVATAQ && actSalesInvoiceVATFQ==expSalesInvoiceVATFQ &&
			 actSalesInvoiceVATAvgRate==expSalesInvoiceVATAvgRate && actSalesInvoiceVATAvgRateO==expSalesInvoiceVATAvgRateO && 
			 actSalesReturnsVATGross==expSalesReturnsVATGross && actSalesReturnsVATAvgRateO==expSalesReturnsVATAvgRateO && actReceiptsVATGross==expReceiptsVATGross &&
			 actPaymentsVATGross==expPaymentsVATGross && actPettyCashVATGross==expPettyCashVATGross && actJVVATGross==expJVVATGross && actNonJVVATGross==expNonJVVATGross &&
			 actDebitNotesVATGross==expDebitNotesVATGross && actCreditNotesVATGross==expCreditNotesVATGross && actSalesInvoiceGrossIsSelected==expSalesInvoiceGrossIsSelected &&
			 actSalesInvoiceRDIsSelected==expSalesInvoiceRDIsSelected && actSalesInvoiceAQIsSelected==expSalesInvoiceAQIsSelected && 
			 actSalesInvoiceFQIsSelected==expSalesInvoiceFQIsSelected && actSalesInvoiceAvgRateIsSelected==expSalesInvoiceAvgRateIsSelected && 
			 actSalesInvoiceAvgRateOIsSelected==expSalesInvoiceAvgRateOIsSelected && actSalesInvoiceVATInclusiveIsSelected==expSalesInvoiceVATInclusiveIsSelected &&
			 actSaveSettingWizardVATmessage==expSaveSettingWizardVATmessage;
	
	
	String actDisplayResult=Boolean.toString(displayResult);
	String expDisplayResult=excelReader.getCellData(xlSheetName, 1049, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 1049, 8, actDisplayResult);
	
	
	if (actDisplayResult.equalsIgnoreCase(expDisplayResult)) 
	{
		
		excelReader.setCellData(xlfile, xlSheetName, 1035, 9, resPass);
		return true;
	} 
	else 
	{
		excelReader.setCellData(xlfile, xlSheetName, 1035, 9, resFail);
		return false;
	}
  }
  catch (Exception e) 
  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1035, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
  }	
 }
 
 
 //CHECKING TAXCODE PLACE OF SUPPLY AND JURISDICTION MASTERS ON UPDATING ABOVE SETTINGSIN VAT
 
 @FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[10]")
 private static List<WebElement> nameList;

 @FindBy(xpath="//span[contains(text(),'Place of supply')]")
 private static WebElement placeOfSupply;
 
 @FindBy(xpath="//a[@id='1178']//span[contains(text(),'Jurisdiction')]")
 private static WebElement jurisdiction;
 
 @FindBy(xpath ="//*[@id='LandingGridBody']/tr/td[10]")
 public static List<WebElement> masterTaxCodeList;
 
 public boolean checkVATMastersTaxCode() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
 {
   excelReader = new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 
   System.out.println("******************** checkVATMastersTaxCode Method Executes.............   *****************************");

   try
   {
	   
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
   	homeMenu.click();
	   
  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu)); 
  	mastersMenu.click();
		
  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(taxCode));
 	taxCode.click();
 	
 	Thread.sleep(2000);
 	
 	
 	ArrayList<String> actmasterTaxCodeList=new ArrayList<String>();
	
	int masterTaxCodeListCount =masterTaxCodeList.size();
	
	System.err.println("masterTaxCodeListCount   :  "+masterTaxCodeListCount);
	
	for (int i = 0; i < masterTaxCodeListCount; i++) 
	{
		String data=masterTaxCodeList.get(i).getText();
		actmasterTaxCodeList.add(data);
	}
	

	String actmasterTaxCode=actmasterTaxCodeList.toString();
	String expmasterTaxCode=excelReader.getCellData(xlSheetName, 1051, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 1051, 8, actmasterTaxCode);
 	
 	
 	
 	Thread.sleep(2000);
 	
 	int actTaxCodeNameListCount					=nameList.size();
 	int expTaxCodeNameListCount					=19;
 	
 	/*Set<String> expNameList = new HashSet<String>();
 	expNameList.add("Std Rate");
 	expNameList.add("Zero Rate");
 	expNameList.add("Exempted");
 	expNameList.add("Intra GCC");
 	expNameList.add("Amendments to output tax");
 	expNameList.add("Amendments to input tax");
 	expNameList.add("NA");
 	expNameList.add("Reverse charge");
 	expNameList.add("Import VAT");
 	expNameList.add("Reverse charge for expenses");
 	expNameList.add("Correction or prev Qtr");
 	expNameList.add("Tourist Tax");
 	expNameList.add("Import Tax");
 	expNameList.add("Amendments");
 	expNameList.add("Exports");
 	expNameList.add("Out of scope - Sales");
 	expNameList.add("RCM Sales");
 	expNameList.add("Standard Rated Purchase - Recoverable");
 	expNameList.add("Standard Rated Purchase - Non-Recoverable");
 	
 	Set<String> actNameList = new HashSet<String>();
 	
 	for (int i = 0; i < actTaxCodeNameListCount; i++) 
 	{
 		String data = nameList.get(i).getText();
 		
 		actNameList.add(data);
	}
 	
 	System.out.println("*************************************checkVATMastersTaxCode***************************************");
 	
 	System.out.println("TaxCodeNameListCount : "+actTaxCodeNameListCount+"  value expected  "+expTaxCodeNameListCount);
 	System.out.println(actNameList);
 	System.out.println(expNameList);*/
 	
 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cancelIcon));
 	cancelIcon.click();
 	
 	if (actmasterTaxCode.equalsIgnoreCase(expmasterTaxCode) && actmasterTaxCode==expmasterTaxCode)
 	{
 		excelReader.setCellData(xlfile, xlSheetName, 1050, 9, resPass);
 		return true;
 	}
 	else
 	{
 		
 		excelReader.setCellData(xlfile, xlSheetName, 1050, 9, resFail);
 		return false;
 	}
  }
   catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1050, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
 }
 
 //STANDARD RATE

 @FindBy (xpath="//*[@id='21']/span")  
 private static WebElement calendar;

  @FindBy (xpath="//*[@id='153']/span")
  private static WebElement currentlyOpenReports;

  @FindBy (xpath="//*[@id='22']/span")
  private static WebElement reportDesigner;

  @FindBy (xpath="//*[@id='143']/span")
  private static WebElement batchReportPrinting;

  @FindBy (xpath="//*[@id='23']/span")
  private static WebElement scheduleReport;

  @FindBy (xpath="//*[@id='112']/span")
  private static WebElement renumberVouchers;

  @FindBy (xpath="//*[@id='114']/span")
  private static WebElement repostVouchers;

  @FindBy (xpath="//*[@id='122']/span")
  private static WebElement adjustForeginExchange;

  @FindBy (xpath="//*[@id='128']/span")
  private static WebElement transactionImport;

  @FindBy (xpath="//*[@id='106']/span")
  private static WebElement dataStatistics;
		
  @FindBy (xpath="//*[@id='149']/span")
  private static WebElement ediGeneration;

  @FindBy (xpath="//*[@id='160']/span")
  private static WebElement standardRate;

  @FindBy (xpath="//*[@id='250']/span")
  private static WebElement taskManager;

  @FindBy (xpath="//*[@id='647']/span")
  private static WebElement authorizationDetails;

  @FindBy (xpath="//*[@id='37']/span")
  private static WebElement autoAdjust;

  @FindBy (xpath="//*[@id='259']/span")
  private static WebElement regroup;

  @FindBy (xpath="//*[@id='3316']/span")
  private static WebElement manualAdjustment;
 
  @FindBy (xpath="//*[@id='3319']/span")
  private static WebElement releaseReveration;

  @FindBy (xpath="//*[@id='3323']/span")
  private static WebElement authorizationAuditReport;

  @FindBy (xpath="//*[@id='3326']/span")
  private static WebElement integrations;

  @FindBy (xpath="//*[@id='LandingGridBody']/tr/td[10]")
  private static List<WebElement> placeOfSupplyList;
  

  
  public static boolean checkVATMastersPlaceOfSupply() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
 	
	
 	try
 	{
 	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	 	homeMenu.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
	 	mastersMenu.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOfSupply));
	 	placeOfSupply.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	int actPlaceOfSupplyNameListCount					=nameList.size();
	 	int expPlaceOfSupplyNameListCount					=6;
	 	
	 	
	 	ArrayList<String> actplaceOfSupplyList=new ArrayList<String>();
		
		int placeOfSupplyListCount =placeOfSupplyList.size();
		
		System.err.println("placeOfSupplyListCount   :  "+placeOfSupplyListCount);
		
		for (int i = 0; i < placeOfSupplyListCount; i++) 
		{
			String data=placeOfSupplyList.get(i).getText();
			actplaceOfSupplyList.add(data);
		}
		

		String actplaceOfSupply=actplaceOfSupplyList.toString();
		String expplaceOfSupply=excelReader.getCellData(xlSheetName, 1053, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 1053, 8, actplaceOfSupply);
	 	
	 	
	 	
	 /*	
	 	Set<String> expNameList = new HashSet<String>();
	 	expNameList.add("UAE");
	 	expNameList.add("GCC Group");
	 	expNameList.add("Others");
	 	expNameList.add("GCC");
	 	expNameList.add("Freezone");
	 	expNameList.add("Inter company");
	 	
	 	Set<String> actNameList = new HashSet<String>();
	 	
	 	for (int i = 0; i < actPlaceOfSupplyNameListCount; i++) 
	 	{
	 		String data = nameList.get(i).getText();
	 		
	 		actNameList.add(data);
		}
	 	
	 	System.out.println("*************************************checkVATMastersPlaceOfSupply***************************************");
	 	
	 	System.out.println("PlaceOfSupplyNameListCount : "+actPlaceOfSupplyNameListCount+"  value expected  "+expPlaceOfSupplyNameListCount);
	 	System.out.println(actNameList);
	 	System.out.println(expNameList);*/
	 	
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cancelIcon));
	 	cancelIcon.click();
	 	
	 	if (actPlaceOfSupplyNameListCount==expPlaceOfSupplyNameListCount && 
	 			actplaceOfSupply.equalsIgnoreCase(expplaceOfSupply))
	 	{
	 		
	 		excelReader.setCellData(xlfile, xlSheetName, 1052, 9, resPass);
	 		return true;
	 	}
	 	else
	 	{
	 		excelReader.setCellData(xlfile, xlSheetName, 1052, 9, resFail);
	 		return false;
	 	}
 	  }
 	catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1052, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	 }	

  
 /* @FindBy (xpath="//*[@id='LandingGridBody']/tr/td[10]")
  private static List<WebElement> jurisdictionList;*/

  
  public static boolean checkVATMastersJurisdiction() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 
 	try
 	{
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	 	homeMenu.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
	 	mastersMenu.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdiction));
	 	jurisdiction.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	int actJurisdictionNameListCount					=nameList.size();
	 	int expJurisdictionNameListCount					=6;
	 	
        ArrayList<String> actplaceOfSupplyList=new ArrayList<String>();
		
		int placeOfSupplyListCount =placeOfSupplyList.size();
		
		System.err.println("placeOfSupplyListCount   :  "+placeOfSupplyListCount);
		
		for (int i = 0; i < placeOfSupplyListCount; i++) 
		{
			String data=placeOfSupplyList.get(i).getText();
			actplaceOfSupplyList.add(data);
		}
		

		String actplaceOfSupply=actplaceOfSupplyList.toString();
		String expplaceOfSupply=excelReader.getCellData(xlSheetName, 1055, 7);
		
		excelReader.setCellData(xlfile, xlSheetName, 1055, 8, actplaceOfSupply);
	 	
	 	/*
	 	Set<String> expNameList = new HashSet<String>();
	 	expNameList.add("UAE");
	 	expNameList.add("GCC Group");
	 	expNameList.add("Others");
	 	expNameList.add("GCC");
	 	expNameList.add("Freezone");
	 	expNameList.add("Inter company");
	 	
	 	Set<String> actNameList = new HashSet<String>();
	 	
	 	for (int i = 0; i < actJurisdictionNameListCount; i++) 
	 	{
	 		String data = nameList.get(i).getText();
	 		
	 		actNameList.add(data);
		}
	 	
	 	System.out.println("*************************************checkVatMastersJurisdiction***************************************");
	 	
	 	System.out.println("PlaceOfSupplyNameListCount : "+actJurisdictionNameListCount+"  value expected  "+expJurisdictionNameListCount);
	 	System.out.println(actNameList);
	 	System.out.println(expNameList);*/
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cancelIcon));
	 	cancelIcon.click();
	 	
	 	if (actJurisdictionNameListCount==expJurisdictionNameListCount && 
	 			actplaceOfSupply.equalsIgnoreCase(expplaceOfSupply))
	 	{
	 		excelReader.setCellData(xlfile, xlSheetName, 1054, 9, resPass);
	 		return true;
	 	}
	 	else
	 	{
	 		
	 		excelReader.setCellData(xlfile, xlSheetName, 1054, 9, resFail);
	 		return false;
	 	}
	 	
 	  }
 	   catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1054, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	 	
	 }	
  
  
  
  @FindBy (xpath="//*[@id='navigation_menu']/li[1]/ul/li[5]/ul/li")
  private static List<WebElement> utilitesList;
  

  
 //STANDARD RATE DEFINE
   
 public static boolean checkUtilitiesSubMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	
  excelReader=new ExcelReader(POJOUtility.getExcelPath());
  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
  try
  {
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	homeMenu.click();
	 
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(utilities));
	utilities.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(releaseReveration));
	
	/*boolean actcalendar                    = calendar.isDisplayed();
	boolean actcurrentlyOpenedReport       = currentlyOpenReports.isDisplayed();
	boolean actreportDesigner              = reportDesigner.isDisplayed();
	boolean actbatchReportPrinting         = batchReportPrinting.isDisplayed();
	boolean actscheduleReport              = scheduleReport.isDisplayed();
	boolean actrenumberVouchers            = renumberVouchers.isDisplayed();
	boolean actadjustForeginExchange       = adjustForeginExchange.isDisplayed();
	boolean actrepostVouchers              = repostVouchers.isDisplayed();
	boolean acttransactionImport           = transactionImport.isDisplayed();
	boolean actdataStatistics              = dataStatistics.isDisplayed();
	boolean actediGeneration               = ediGeneration.isDisplayed();
	boolean actstandardRate                = standardRate.isDisplayed();
	boolean acttaskManager                 = taskManager.isDisplayed();
	boolean actauthorizationDetails        = authorizationDetails.isDisplayed();
	boolean actAutoAdjust                  = autoAdjust.isDisplayed();
	boolean actregroup                     = regroup.isDisplayed();
	boolean actmanualAdjustment            = manualAdjustment.isDisplayed();
	boolean actreleaseReveration           = releaseReveration.isDisplayed();
	boolean actauthorizationAuditReport    = authorizationAuditReport.isDisplayed();
	boolean actIntegration                 = integrations.isDisplayed();
	
	boolean expcalendar                    = true;
	boolean expcurrentlyOpenedReport       = true;
	boolean expreportDesigner              = true;
	boolean expbatchReportPrinting         = true;
	boolean expscheduleReport              = true;
	boolean exprenumberVouchers            = true;
	boolean expadjustForeginExchange       = true;
	boolean exprepostVouchers              = true;
	boolean exptransactionImport           = true;
	boolean expdataStatistics              = true;
	boolean expediGeneration               = true;
	boolean expstandardRate                = true;
	boolean exptaskManager                 = true;
	boolean expauthorizationDetails        = true;
	boolean expAutoAdjust                  = true;
	boolean expregroup                     = true;
	boolean expmanualAdjustment            = true;
	boolean expreleaseReveration           = true;
	boolean expauthorizationAuditReport    = true;
	boolean expIntegration                 = true;
	
	System.out.println("**********************   checkUtilitiesSubMenu Method Executes    ***************************************");
	 
	System.out.println("calendar                   : " + actcalendar                 + " Value Expected : " + expcalendar);
	System.out.println("currentlyOpenedReport      : " + actcurrentlyOpenedReport    + " Value Expected : " + expcurrentlyOpenedReport);
	System.out.println("reportDesigner             : " + actreportDesigner           + " Value Expected : " + expreportDesigner);
	System.out.println("scheduleReport             : " + actscheduleReport           + " Value Expected : " + expscheduleReport);
	System.out.println("renumberVouchers           : " + actrenumberVouchers         + " Value Expected : " + exprenumberVouchers);
	System.out.println("adjustForeginExchange      : " + actadjustForeginExchange    +  "Value Expected : " + expadjustForeginExchange);
	System.out.println("repostVouchers             : " + actrepostVouchers           + " Value Expected : " + exprepostVouchers);
	System.out.println("transactionImport          : " + acttransactionImport        + " Value Expected : " + exptransactionImport);
	System.out.println("dataStatistics             : " + actdataStatistics           + " Value Expected : " + expdataStatistics);
	System.out.println("ediGeneration              : " + actediGeneration            + " Value Expected : " + expediGeneration);
	System.out.println("standardRate               : " + actstandardRate             + " Value Expected : " + expstandardRate);
	System.out.println("taskmanager                : " + exptaskManager              + " Value Expected : " + exptaskManager);
	System.out.println("authorizationDetails       : " + actauthorizationDetails     + " Value Expected : " + expauthorizationDetails);
	System.out.println("regroup                    : " + actregroup                  + " Value Expected : " + expregroup);
	System.out.println("autoAdjust                 : " + actAutoAdjust               + " Value Expected : " + expAutoAdjust);
	System.out.println("manualAdjustment           : " + actmanualAdjustment         + " Value Expected : " + expmanualAdjustment);
	System.out.println("releaseReveration          : " + actreleaseReveration        + " Value Expected : " + expreleaseReveration);
	System.out.println("manualAdjustment           : " + actauthorizationAuditReport + " Value Expected : " + expauthorizationAuditReport);
	System.out.println("releaseReveration          : " + actIntegration              + " Value Expected : " + expIntegration);
*/
	
	ArrayList<String> actutilitesList=new ArrayList<String>();
	
	int utilitesListCount =utilitesList.size();
	
	System.err.println("utilitesListCount   :  "+utilitesListCount);
	
	for (int i = 0; i < utilitesListCount; i++) 
	{
		String data=utilitesList.get(i).getText();
		actutilitesList.add(data);
	}
	

	String actutilites=utilitesList.toString();
	String exputilites=excelReader.getCellData(xlSheetName, 1057, 7);
	
	excelReader.setCellData(xlfile, xlSheetName, 1057, 8, actutilites);

	
	
	/*
	if(actcalendar==expcalendar && actcurrentlyOpenedReport==expcurrentlyOpenedReport && actreportDesigner==expreportDesigner 
			&& actscheduleReport==expscheduleReport && actrenumberVouchers==exprenumberVouchers
			&& actadjustForeginExchange==expadjustForeginExchange && actrepostVouchers==exprepostVouchers && acttransactionImport==exptransactionImport 
			&& actdataStatistics==expdataStatistics && acttaskManager==exptaskManager && actauthorizationDetails==expauthorizationDetails
			&& actediGeneration==expediGeneration && actstandardRate==expstandardRate && actregroup==expregroup && actdataStatistics==expdataStatistics
			&& actreleaseReveration==expreleaseReveration && actAutoAdjust==expAutoAdjust && actmanualAdjustment==expmanualAdjustment
			&& actauthorizationAuditReport==expauthorizationAuditReport && actIntegration==expIntegration)*/
	
	if(actutilites.equalsIgnoreCase(exputilites))
	{
		excelReader.setCellData(xlfile, xlSheetName, 1056, 9, resPass);
		return true;
	}
	else
	{
		excelReader.setCellData(xlfile, xlSheetName, 1056, 9, resFail);
		return false;
	}
  }
  catch (Exception e) 
  {
	  String exception =e.getMessage();
	  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1056, 10, exception);
	  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
	  return false;
  }
	
 }


 
    @FindBy(xpath="//div[@id='myNavbar']/ul/li/span/i")
	public static WebElement closeBtnInStandardRate;
	
	@FindBy(xpath="//tbody[@id='OptProductId_table_data_body']/tr/td")
	public static List<WebElement> standardRateItemComboList;
	
	@FindBy(xpath="//input[@id='OptProductId']")
	public static WebElement standardRateItemCombo;
	
	@FindBy(xpath="//input[@id='txtEffectiveDate']")
	public static WebElement standardRateEffectiveDateTxt;
	
	@FindBy(xpath="//input[@id='txtrate']")
	public static WebElement standardRateRateTxt;
	
	@FindBy(xpath="//span[@id='id_EdtAdd']/i")
	public static WebElement standardRateAddBtn;
	
	@FindBy(xpath="//td[@id='id_StandardRate_col_1-2']")
	public static WebElement standardRateTableRow1EffectiveDate;
	
	@FindBy(xpath="//td[@id='id_StandardRate_col_1-3']")
	public static WebElement standardRateTableRow1Rate;
	
	@FindBy(xpath="//td[@id='id_StandardRate_col_2-2']")
	public static WebElement standardRateTableRow2EffectiveDate;
	
	@FindBy(xpath="//td[@id='id_StandardRate_col_2-3']")
	public static WebElement standardRateTableRow2Rate;
	

	
	
	public static boolean checkOpenStandardRatePageSaveRate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	 	excelReader=new ExcelReader(POJOUtility.getExcelPath());
 	    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	 	
 	try
 	{
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	 	homeMenu.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(utilities));
	 	utilities.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(standardRate));
	 	standardRate.click();
	 	
	 	Thread.sleep(3000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(standardRateItemCombo));
	 	standardRateItemCombo.click();
	 	standardRateItemCombo.sendKeys(Keys.SPACE);
	 	
	 	int count=standardRateItemComboList.size();
	 	
	 	for (int i = 0; i < count; i++) 
	 	{
	 		String data = standardRateItemComboList.get(i).getText();
	 		
	 		if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1060, 6))) 
	 		{
	 			standardRateItemComboList.get(i).click();
	 			standardRateItemCombo.sendKeys(Keys.TAB);
	 			break;
			}
		}
	 	
	 	Calendar cal=Calendar.getInstance();
		SimpleDateFormat formatOfVoucherDate = new SimpleDateFormat("dd/MM/yyyy");
		String presentDate = formatOfVoucherDate.format(cal.getTime());
	 	
	 	standardRateEffectiveDateTxt.click();
	 	standardRateEffectiveDateTxt.sendKeys(Keys.HOME,presentDate);
	 	standardRateEffectiveDateTxt.sendKeys(Keys.TAB);
	 	
	 	standardRateRateTxt.sendKeys(Keys.END);
	 	standardRateRateTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	 	standardRateRateTxt.sendKeys(excelReader.getCellData(xlSheetName, 1061, 6));
	 	standardRateRateTxt.sendKeys(Keys.TAB);
	 	
	 	standardRateAddBtn.click();
	 	
	 	String actstandardRateItemCombo					 = standardRateItemCombo.getAttribute("value");
	 	
	 	excelReader.setCellData(xlfile, xlSheetName, 1062, 8, actstandardRateItemCombo);
	 	
	 	String actstandardRateEffectiveDateTxt			 = standardRateEffectiveDateTxt.getAttribute("value");
	 	excelReader.setCellData(xlfile, xlSheetName, 1063, 8, actstandardRateEffectiveDateTxt);
	 	
	 	String actstandardRateTableRow1EffectiveDate	 = standardRateTableRow1EffectiveDate.getText();
	 	excelReader.setCellData(xlfile, xlSheetName, 1064, 8, actstandardRateTableRow1EffectiveDate);
	 	
	 	String actstandardRateTableRow1Rate				 = standardRateTableRow1Rate.getText();
	 	excelReader.setCellData(xlfile, xlSheetName, 1065, 8, actstandardRateTableRow1Rate);
	 	
	 	String expstandardRateItemCombo					 = excelReader.getCellData(xlSheetName, 1062, 7);
	 	String expstandardRateEffectiveDateTxt			 = excelReader.getCellData(xlSheetName, 1063, 7);
	 	String expstandardRateTableRow1EffectiveDate	 = excelReader.getCellData(xlSheetName, 1064, 7);
	 	String expstandardRateTableRow1Rate				 = excelReader.getCellData(xlSheetName, 1065, 7);
	 	
	 	System.out.println("*************************************checkStandardRate***************************************");
	 	
	 	System.out.println("StandardRateItemComboTxt             : "+actstandardRateItemCombo               +"  value expected  "+expstandardRateItemCombo);
	 	System.out.println("StandardRateEffectiveDateTxt         : "+actstandardRateEffectiveDateTxt        +"  value expected  "+expstandardRateEffectiveDateTxt);
	 	System.out.println("StandardRateTableRow1EffectiveDate   : "+actstandardRateTableRow1EffectiveDate  +"  value expected  "+expstandardRateTableRow1EffectiveDate);
	 	System.out.println("StandardRateTableRow1Rate            : "+actstandardRateTableRow1Rate           +"  value expected  "+expstandardRateTableRow1Rate);
	 	
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInStandardRate));
	 	closeBtnInStandardRate.click();
	 	
	 	if (actstandardRateItemCombo.equalsIgnoreCase(expstandardRateItemCombo) && actstandardRateEffectiveDateTxt.equalsIgnoreCase(expstandardRateEffectiveDateTxt) &&
			  actstandardRateTableRow1EffectiveDate.equalsIgnoreCase(expstandardRateTableRow1EffectiveDate) && actstandardRateTableRow1Rate.equalsIgnoreCase(expstandardRateTableRow1Rate))
	 	{
	 		
	 		excelReader.setCellData(xlfile, xlSheetName, 1059, 9, resPass);
	 		return true;
	 	}
	 	else
	 	{
	 		
	 		excelReader.setCellData(xlfile, xlSheetName, 1059, 9, resFail);
	 		return false;
	 	}
	 }
	 catch (Exception e) 
	  {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, xlSheetName, 1059, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
		  return false;
	  }
	 }
	
 
	
  public boolean checkUserCreatedVoucherDisplayWithDocumentTabInDocumentCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("**************  checkUserCreatedVoucherDisplayInDocumentCustomization Method Executes.............  *****************");
	
	try
	{
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersNewVoucherBtn));
	  purchaseVouchersNewVoucherBtn.click();
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(titleTxt));
	  titleTxt.click();
	
	  String actTitleTxt=titleTxt.getAttribute("value");
	  String expTitleTxt="Purchase Vouchers N";
	
	  String actBaseDocumentName=baseDocumentTxtInDocCust.getAttribute("value");
	  String expBaseDocumentName="Purchases Vouchers 301";

	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR1C1)); 
	  mastersR1C1.click();
	
	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
	  masterDropDown.click();
	
	  Select getValuesOfMasterC1=new Select(masterDropDown);
	  String actMastersR1C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
	  String expMastersR1C1="Department";

	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersPositionR1C2));
	  mastersPositionR1C2.click();
	
	  positionDropdown.click();
	  Select getValueOfPostionC1=new Select(positionDropdown);
	  String actPositionR1C1=getValueOfPostionC1.getFirstSelectedOption().getText();
	  String expPositionR1C1="Header";	
	
	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersR2C1)); 
	  mastersR2C1.click();
	
	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDropDown));
	  masterDropDown.click();
	
	  Select getValuesOfMasterC2=new Select(masterDropDown);
	  String actMastersR2C1=getValuesOfMasterC1.getFirstSelectedOption().getText();
	  String expMastersR2C1="Warehouse";

	  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersPositionR2C2));
	  mastersPositionR2C2.click();
	
	  positionDropdown.click();
	  Select getValueOfPostionC2=new Select(positionDropdown);
	  String actPositionR2C2=getValueOfPostionC2.getFirstSelectedOption().getText();
	  String expPositionR2C2="Header";	

	  System.out.println("TitleTxt               : " + actTitleTxt             + "  value expected  " + expTitleTxt);
	  System.out.println("Base Doucment          : " + actBaseDocumentName     + "  value expected  " + expBaseDocumentName);
	  System.out.println("Row One Master         : " + actMastersR1C1          + "  value expected  " + expMastersR1C1);
	  System.out.println("Row One Position       : " + actPositionR1C1         + "  value expected  " + expPositionR1C1);
	  System.out.println("Row Two Master         : " + actMastersR2C1          + "  value expected  " + expMastersR2C1);
      System.out.println("Row Tow Position       : " + actPositionR2C2         + "  value expected  " + expPositionR2C2);
	
	  boolean actdocumentsTab        = documentsTab.isDisplayed();
	  boolean actmiscellaneousTab    = miscellaneousTab.isDisplayed();
	  boolean acteditScreenTab       = editScreenTab.isDisplayed();
	  boolean actinventoryoptionsTab = inventoryoptionsTab.isDisplayed();
	  boolean acteditLayoutTab       = editLayoutTab.isDisplayed();
	  boolean acttoogleExpandBtn     = toogleExpandBtn.isDisplayed();
	
	  boolean expdocumentsTab        = true;
	  boolean expmiscellaneousTab    = true;
      boolean expeditScreenTab       = true;
	  boolean expinventoryoptionsTab = true;
	  boolean expeditLayoutTab       = true;
	  boolean exptoogleExpandBtn     = true;


	  System.out.println("DocumentsTab           : " + actdocumentsTab         + "  value expected  " + expdocumentsTab);
	  System.out.println("MiscellaneousTab       : " + actmiscellaneousTab     + "  value expected  " + expmiscellaneousTab);
	  System.out.println("EditScreenTab          : " + acteditScreenTab        + "  value expected  " + expeditScreenTab);
	  System.out.println("InventoryoptionsTab    : " + actinventoryoptionsTab  + "  value expected  " + expinventoryoptionsTab);
	  System.out.println("EditLayoutTab          : " + acteditLayoutTab        + "  value expected  " + expeditLayoutTab);
	  System.out.println("ToogleExpandBtn        : " + acttoogleExpandBtn      + "  value expected  " + exptoogleExpandBtn);
	

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toogleExpandBtn));
	  toogleExpandBtn.click();

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsBtn));

	  boolean actviewsBtn             = viewsBtn.isDisplayed();
	  boolean actexternalFunctionsBtn = externalFunctionsBtn.isDisplayed();
	  boolean actschemesBtn           = schemesBtn.isDisplayed();
	  boolean actexportFieldsBtn      = exportFieldsBtn.isDisplayed();
	  boolean acttriggersBtn          = triggersBtn.isDisplayed();
	  boolean actdocumentNumberingBtn = documentNumberingBtn.isDisplayed();
	  boolean acthirePurchaseBtn      = hirePurchaseBtn.isDisplayed();
	  boolean actrulesBtn             = rulesBtn.isDisplayed();
	  boolean actreportsBtn           = reportsBtn.isDisplayed();
	
	  boolean expviewsBtn             = true;
	  boolean expexternalFunctionsBtn = true;
	  boolean expschemesBtn           = true;
	  boolean expexportFieldsBtn      = true;
	  boolean exptriggersBtn          = true;
	  boolean expdocumentNumberingBtn = true;
	  boolean exphirePurchaseBtn      = true;
	  boolean exprulesBtn             = true;
	  boolean expreportsBtn           = true;		

	  System.out.println("ViewsBtn               : " + actviewsBtn                 + "  value expected  " + expviewsBtn);
  	  System.out.println("ExternalFunctionsBtn   : " + actexternalFunctionsBtn     + "  value expected  " + expexternalFunctionsBtn);
	  System.out.println("SchemesBtn             : " + actschemesBtn               + "  value expected  " + expschemesBtn);
	  System.out.println("ExportFieldsBtn        : " + actexportFieldsBtn          + "  value expected  " + expexportFieldsBtn);
	  System.out.println("TriggersBtn            : " + acttriggersBtn              + "  value expected  " + exptriggersBtn);
	  System.out.println("DocumentNumberingBtn   : " + actdocumentNumberingBtn     + "  value expected  " + expdocumentNumberingBtn);
      System.out.println("HirePurchaseBtn        : " + acthirePurchaseBtn          + "  value expected  " + exphirePurchaseBtn);
	  System.out.println("RulesBtn               : " + actrulesBtn                 + "  value expected  " + exprulesBtn);
	  System.out.println("ReportsBtn             : " + actreportsBtn               + "  value expected  " + expreportsBtn);
	
	   if(actTitleTxt.equalsIgnoreCase(expTitleTxt) && actBaseDocumentName.equalsIgnoreCase(expBaseDocumentName) && actMastersR1C1.equalsIgnoreCase(expMastersR1C1)
			&& actPositionR1C1.equalsIgnoreCase(expPositionR1C1) && actMastersR2C1.equalsIgnoreCase(expMastersR2C1)
			&& actPositionR2C2.equalsIgnoreCase(expPositionR2C2) && actdocumentsTab==expdocumentsTab 
			&& actmiscellaneousTab==expmiscellaneousTab && acteditScreenTab==expeditScreenTab && actinventoryoptionsTab==expinventoryoptionsTab 
			&& acteditLayoutTab==expeditLayoutTab && acttoogleExpandBtn==exptoogleExpandBtn
					
		    && actviewsBtn==expviewsBtn && actexternalFunctionsBtn==expexternalFunctionsBtn && actschemesBtn==expschemesBtn 
		    && actexportFieldsBtn==expexportFieldsBtn && acttriggersBtn==exptriggersBtn && actdocumentNumberingBtn==expdocumentNumberingBtn 
		    && acthirePurchaseBtn==exphirePurchaseBtn && actrulesBtn==exprulesBtn && actreportsBtn==expreportsBtn)
	  {
		System.out.println("Test Pass : Toogle Options in Sales Orders As Expected");
		excelReader.setCellData(xlfile, "Sheet2", 105, 9, resPass);
		return true;
	  }
	  else
	  {
		System.out.println("Test Fail : Toogle Options in Sales Orders As Expected");
		excelReader.setCellData(xlfile, "Sheet2", 105, 9, resFail);
		return false;
	  }

    }
    catch (NoSuchElementException nse)
    {
	  	System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :   " + nse.getMessage());
	 	return false;
    }
    catch(TimeoutException te)
    {
	 	System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :   " + te.getMessage());
	 	return false;
    }
 }		
	
  
  @FindBy(xpath="//input[@id='misc_chkdntPostCogs']")
  private static WebElement  dontpostCOGS;

  @FindBy(xpath="//input[@id='misc_PostingSelectAccInLine']")
  private static WebElement selectAccountInEveryLineChkBox;

  @FindBy(xpath="//input[@id='misc_currencyInputLocalExchangeRate']")
  private static WebElement inputLocalExchangeRateChkBox;

  @FindBy(xpath="//input[@id='misc_currencyPostExgRateDiff']")
  private static WebElement postExchangeRateDifferrenceChkBox;
	
  @FindBy(xpath="//select[@id='misc_CurrencyAddCurrencyIn']")
  private static WebElement addCurrencyInDropdown;
	
  @FindBy(xpath="//input[@id='misc_currencyInputExchangeRate']")
  private static WebElement inputExchangeRateChkBox;
	
  @FindBy(xpath="//input[@id='misc_currencyPostExgRateDiff']")
  private static WebElement postExchangeRateChkDifferrenceBox;
	
  @FindBy(xpath="//input[@id='misc_currencyPostExchgRateBasedOnStd']")
  private static WebElement postExchangeRateDifferenceBasedOnStandardRuleChkBox;
	
  @FindBy(xpath="//select[@id='misc_arapDueDate']")
  private static WebElement dueDateDropdown;
	
  @FindBy(xpath="//select[@id='misc_arapARAPOptions']")
  private static WebElement arapOptionsDropdown;
	
  @FindBy(xpath="//select[@id='misc_arapOptions']")
  private static WebElement optionsdDropdown;
	
  @FindBy(xpath="//input[@id='misc_arapchkSelectbillsbeforeamt']")
  private static WebElement selectbillsbeforeAmountChkBox;
	
  @FindBy(xpath="//input[@id='misc_arapchkPostdiscountbasedoncrdays']")
  private static WebElement postDiscountBasedOnCrediDaysChkBox;
	
  @FindBy(xpath="//input[@id='misc_arapchkInputPaymentTerms']")
  private static WebElement inputPaymenttermsChkBox;
	
  @FindBy(xpath="//select[@id='misc_arapNarration']")
  private static WebElement narrationDropdown;
  
  public boolean checkCreatedVoucherMiscellaneousTabInDocumentCustoimization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("**************  checkCreatedVoucherMiscellaneousTabInDocumentCustoimization Method Executes.............  *****************");
	
	try
	{
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
	  miscellaneousTab.click();
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abbreviationTxt));
	  abbreviationTxt.click();
		
	  String actAbbreviationTxt=abbreviationTxt.getAttribute("value");
	  String expAbbreviationTxt="NDT45";
		
	  boolean actabbreviationTxt                                     = abbreviationTxt.isDisplayed();
	  boolean actdefaultAccount1Txt                                  = defaultAccount1Txt.isDisplayed();
	  boolean actdefaultAccount2Txt                                  = defaultAccount2Txt.isDisplayed();
	  boolean actchangeTransactionDateWhenAuthorizedChkBox           = changeTransactionDateWhenAuthorizedChkBox.isDisplayed();
	  boolean actdateCannotBePriortoPrevdateChkBox                   = dateCannotBePriortoPrevdateChkBox.isDisplayed();
	  boolean actdetailedDisplayInSummaryBarChkBox                   = detailedDisplayInSummaryBarChkBox.isDisplayed();
	  boolean actdontAllowEditThisDocChkBox                          = dontAllowEditThisDocChkBox.isDisplayed();
	  boolean actdontAllowInputDateChkBox                            = dontAllowInputDateChkBox.isDisplayed();
	  boolean actdontRestrictAccount1TypeChkBox                      = dontRestrictAccount1TypeChkBox.isDisplayed();
	  boolean actdontRestrictAccount2TypeChkBox                      = dontRestrictAccount2TypeChkBox.isDisplayed();
	  boolean actdontRestrictOnLoginAccountChkBox                    = dontRestrictOnLoginAccountChkBox.isDisplayed();
	  boolean actdontRestrictOnLoginTagChkBox                        = dontRestrictOnLoginTagChkBox.isDisplayed();
	  boolean actenableVersionChkBox                                 = enableVersionChkBox.isDisplayed();
	  boolean actprintUsingDefaultPrinterAndFormatChkBox             = printUsingDefaultPrinterAndFormatChkBox.isDisplayed();
	  boolean actcheckbudgetDropdown                                 = checkbudgetDropdown.isDisplayed();
	  boolean actpickEmailFromDropdown                               = pickEmailFromDropdown.isDisplayed();
	  boolean actstopRadio                                           = stopRadio.isDisplayed();
	  boolean actwarnAndAllowRadio                                   = warnAndAllowRadio.isDisplayed();
	  boolean actentryRestrictConditionTxt                           = entryRestrictConditionTxt.isDisplayed();
  	  boolean actentryRestrictMessageTxt                             = entryRestrictMessageTxt.isDisplayed();
	  boolean actdontpostCOGS                                        = dontpostCOGS.isDisplayed();
	  boolean actupdateFAChkBox                                      = updateFAChkBox.isDisplayed();
	  boolean actselectAccountInEveryLineChkBox                      = selectAccountInEveryLineChkBox.isDisplayed();
	  boolean actdetailedPostingChkbox                               = detailedPostingChkbox.isDisplayed();
	  boolean actupdateStockChkBox                                   = updateStockChkBox.isDisplayed();
	  boolean actallowChangingUpdateStock                            = allowChangingUpdateStock.isDisplayed();
	  boolean actpostServicetaxChkBox                                = postServicetaxChkBox.isDisplayed();
	  boolean actpostTDSchkBox                                       = postTDSchkBox.isDisplayed();
	  boolean actpostVATchkBox                                       = postVATchkBox.isDisplayed();
	  boolean actlinkToLetterOfCreditChkBox                          = linkToLetterOfCreditChkBox.isDisplayed();
	  boolean actdontcheckcreditlimitChkBox                          = dontcheckcreditlimitChkBox.isDisplayed();
	  boolean actaddCurrencyInDropdown                               = addCurrencyInDropdown.isDisplayed();
	  boolean actinputExchangeRateChkBox                             = inputExchangeRateChkBox.isDisplayed();
	  boolean actinputLocalExchangeRateChkBox                        = inputLocalExchangeRateChkBox.isDisplayed();
	  boolean actpostExchangeRateDifferrenceChkBox                   = postExchangeRateDifferrenceChkBox.isDisplayed();
	  boolean actpostExchangeRateDifferenceBasedOnStandardRuleChkBox = postExchangeRateDifferenceBasedOnStandardRuleChkBox.isDisplayed();
	  boolean actdueDateDropdown                                     = dueDateDropdown.isDisplayed();
	  boolean actarapOptionsDropdown                                 = arapOptionsDropdown.isDisplayed();
	  boolean actoptionsdDropdown                                    = optionsdDropdown.isDisplayed();
	  //boolean actselectbillsbeforeAmountChkBox                       = selectbillsbeforeAmountChkBox.isDisplayed();
	  boolean actpostDiscountBasedOnCrediDaysChkBox                  = postDiscountBasedOnCrediDaysChkBox.isDisplayed();
	  boolean actinputPaymenttermsChkBox                             = inputPaymenttermsChkBox.isDisplayed();
	  boolean actnarrationDropdown                                   = narrationDropdown.isDisplayed();
	  boolean actapplyRulesOnExternalModuleChkbox                    = applyRulesOnExternalModuleChkbox.isDisplayed();
	  boolean actapplyRulesOnLinkChkBox                              = applyRulesOnLinkChkBox.isDisplayed();
	  boolean actapplyRulesOnSetItemsChkBox                          = applyRulesOnSetItemsChkBox.isDisplayed();
	  boolean actapplyDependencyOnExternalModuleChkbox               = applyDependencyOnExternalModuleChkbox.isDisplayed();
	  boolean actapplyDependencyOnLinkChkBox                         = applyDependencyOnLinkChkBox.isDisplayed();
	  boolean actapplyDependencyOnSetItemsChkBox                     = applyDependencyOnSetItemsChkBox.isDisplayed(); 
		
	  boolean expabbreviationTxt                                     = true;
	  boolean expdefaultAccount1Txt                                  = true;
	  boolean expdefaultAccount2Txt                                  = true;
	  boolean expchangeTransactionDateWhenAuthorizedChkBox           = true;
	  boolean expdateCannotBePriortoPrevdateChkBox                   = true;
	  boolean expdetailedDisplayInSummaryBarChkBox                   = true;
	  boolean expdontAllowEditThisDocChkBox                          = true;
	  boolean expdontAllowInputDateChkBox                            = true;
	  boolean expdontRestrictAccount1TypeChkBox                      = true;
	  boolean expdontRestrictAccount2TypeChkBox                      = true;
	  boolean expdontRestrictOnLoginAccountChkBox                    = true;
	  boolean expdontRestrictOnLoginTagChkBox                        = true;
	  boolean expenableVersionChkBox                                 = true;
	  boolean expprintUsingDefaultPrinterAndFormatChkBox             = true;
	  boolean expcheckbudgetDropdown                                 = true;
	  boolean exppickEmailFromDropdown                               = true;
	  boolean expstopRadio                                           = true;
	  boolean expwarnAndAllowRadio                                   = true;
	  boolean expentryRestrictConditionTxt                           = true;
	  boolean expentryRestrictMessageTxt                             = true;
	  boolean expdontpostCOGS                                        = true;
	  boolean expupdateFAChkBox                                      = true;
	  boolean expselectAccountInEveryLineChkBox                      = true;
	  boolean expdetailedPostingChkbox                               = true;
	  boolean expupdateStockChkBox                                   = true;
	  boolean expallowChangingUpdateStock                            = true;
	  boolean exppostServicetaxChkBox                                = true;
	  boolean exppostTDSchkBox                                       = true;
	  boolean exppostVATchkBox                                       = true;
	  boolean explinkToLetterOfCreditChkBox                          = true;
	  boolean expdontcheckcreditlimitChkBox                          = true;
	  boolean expaddCurrencyInDropdown                               = true;
	  boolean expinputExchangeRateChkBox                             = true;
	  boolean expinputLocalExchangeRateChkBox                        = true;
	  boolean exppostExchangeRateDifferrenceChkBox                   = true;
	  boolean exppostExchangeRateDifferenceBasedOnStandardRuleChkBox = true;
	  boolean expdueDateDropdown                                     = true;
	  boolean exparapOptionsDropdown                                 = true;
	  boolean expoptionsdDropdown                                    = true;
	  //boolean expselectbillsbeforeAmountChkBox                       = true;
	  boolean exppostDiscountBasedOnCrediDaysChkBox                  = true;
	  boolean expinputPaymenttermsChkBox                             = true;
	  boolean expnarrationDropdown                                   = true;
	  boolean expapplyRulesOnExternalModuleChkbox                    = true;
	  boolean expapplyRulesOnLinkChkBox                              = true;
	  boolean expapplyRulesOnSetItemsChkBox                          = true;
	  boolean expapplyDependencyOnExternalModuleChkbox               = true;
	  boolean expapplyDependencyOnLinkChkBox                         = true;
	  boolean expapplyDependencyOnSetItemsChkBox                     = true; 
	 
		
	  System.out.println("AbbreviationTxt isDisplaying                         : " + actabbreviationTxt                                      + "  value expected  " + expabbreviationTxt);
	  System.out.println("DefaultAccount1Txt                                   : " + actdefaultAccount1Txt                                   + "  value expected  " + expdefaultAccount1Txt);
	  System.out.println("DefaultAccount2Txt                                   : " + actdefaultAccount2Txt                                   + "  value expected  " + expdefaultAccount2Txt);
      System.out.println("ChangeTransactionDateWhenAuthorizedChkBox            : " + actchangeTransactionDateWhenAuthorizedChkBox            + "  value expected  " + expchangeTransactionDateWhenAuthorizedChkBox);
	  System.out.println("DateCannotBePriortoPrevdateChkBox                    : " + actdateCannotBePriortoPrevdateChkBox                    + "  value expected  " + expdateCannotBePriortoPrevdateChkBox);
	  System.out.println("DetailedDisplayInSummaryBarChkBox                    : " + actdetailedDisplayInSummaryBarChkBox                    + "  value expected  " + expdetailedDisplayInSummaryBarChkBox);
	  System.out.println("DontAllowEditThisDocChkBox                           : " + actdontAllowEditThisDocChkBox                           + "  value expected  " + expdontAllowEditThisDocChkBox);
	  System.out.println("DontAllowInputDateChkBox                             : " + actdontAllowInputDateChkBox                             + "  value expected  " + expdontAllowInputDateChkBox);
	  System.out.println("DontRestrictAccount1TypeChkBox                       : " + actdontRestrictAccount1TypeChkBox                       + "  value expected  " + expdontRestrictAccount1TypeChkBox);
	  System.out.println("DontRestrictAccount2TypeChkBox                       : " + actdontRestrictAccount2TypeChkBox                       + "  value expected  " + expdontRestrictAccount2TypeChkBox);
	  System.out.println("DontRestrictOnLoginAccountChkBox                     : " + actdontRestrictOnLoginAccountChkBox                     + "  value expected  " + expdontRestrictOnLoginAccountChkBox);
	  System.out.println("DontRestrictOnLoginTagChkBox                         : " + actdontRestrictOnLoginTagChkBox                         + "  value expected  " + expdontRestrictOnLoginTagChkBox);
	  System.out.println("EnableVersionChkBox                                  : " + actenableVersionChkBox                                  + "  value expected  " + expenableVersionChkBox);
	  System.out.println("PrintUsingDefaultPrinterAndFormatChkBox              : " + actprintUsingDefaultPrinterAndFormatChkBox              + "  value expected  " + expprintUsingDefaultPrinterAndFormatChkBox);
	  System.out.println("CheckbudgetDropdown                                  : " + actcheckbudgetDropdown                                  + "  value expected  " + expcheckbudgetDropdown);
	  System.out.println("PickEmailFromDropdown                                : " + actpickEmailFromDropdown                                + "  value expected  " + exppickEmailFromDropdown);
	  System.out.println("StopRadio                                            : " + actstopRadio                                            + "  value expected  " + expstopRadio);
	  System.out.println("WarnAndAllowRadio                                    : " + actwarnAndAllowRadio                                    + "  value expected  " + expwarnAndAllowRadio);
	  System.out.println("EntryRestrictConditionTxt                            : " + actentryRestrictConditionTxt                            + "  value expected  " + expentryRestrictConditionTxt);
      System.out.println("EntryRestrictMessageTxt                              : " + actentryRestrictMessageTxt                              + "  value expected  " + expentryRestrictMessageTxt);
      System.out.println("DontpostCOGS                                         : " + actdontpostCOGS                                         + "  value expected  " + expdontpostCOGS);
      System.out.println("UpdateFAChkBox                                       : " + actupdateFAChkBox                                       + "  value expected  " + expupdateFAChkBox);
      System.out.println("SelectAccountInEveryLineChkBox                       : " + actselectAccountInEveryLineChkBox                       + "  value expected  " + expselectAccountInEveryLineChkBox);
      System.out.println("DetailedPostingChkbox                                : " + actdetailedPostingChkbox                                + "  value expected  " + expdetailedPostingChkbox);
      System.out.println("UpdateStockChkBox                                    : " + actupdateStockChkBox                                    + "  value expected  " + expupdateStockChkBox);
      System.out.println("AllowChangingUpdateStock                             : " + actallowChangingUpdateStock                             + "  value expected  " + expallowChangingUpdateStock);
      System.out.println("PostServicetaxChkBox                                 : " + actpostServicetaxChkBox                                 + "  value expected  " + exppostServicetaxChkBox);
      System.out.println("PostTDSchkBox                                        : " + actpostTDSchkBox                                        + "  value expected  " + exppostTDSchkBox);
      System.out.println("PostVATchkBox                                        : " + actpostVATchkBox                                        + "  value expected  " + exppostVATchkBox);
      System.out.println("LinkToLetterOfCreditChkBox                           : " + actlinkToLetterOfCreditChkBox                           + "  value expected  " + explinkToLetterOfCreditChkBox);
      System.out.println("DontcheckcreditlimitChkBox                           : " + actdontcheckcreditlimitChkBox                           + "  value expected  " + expdontcheckcreditlimitChkBox);
  	  System.out.println("AddCurrencyInDropdown                                : " + actaddCurrencyInDropdown                                + "  value expected  " + expaddCurrencyInDropdown);
	  System.out.println("InputExchangeRateChkBox                              : " + actinputExchangeRateChkBox                              + "  value expected  " + expinputExchangeRateChkBox);
	  System.out.println("InputLocalExchangeRateChkBox                         : " + actinputLocalExchangeRateChkBox                         + "  value expected  " + expinputLocalExchangeRateChkBox);
	  System.out.println("PostExchangeRateDifferrenceChkBox                    : " + actpostExchangeRateDifferrenceChkBox                    + "  value expected  " + exppostExchangeRateDifferrenceChkBox);
	  System.out.println("PostExchangeRateDifferenceBasedOnStandardRuleChkBox  : " + actpostExchangeRateDifferenceBasedOnStandardRuleChkBox  + "  value expected  " + exppostExchangeRateDifferenceBasedOnStandardRuleChkBox);
	  System.out.println("DueDateDropdown                                      : " + actdueDateDropdown                                      + "  value expected  " + expdueDateDropdown);
	  System.out.println("ArapOptionsDropdown                                  : " + actarapOptionsDropdown                                  + "  value expected  " + exparapOptionsDropdown);
	  System.out.println("OptionsdDropdown                                     : " + actoptionsdDropdown                                     + "  value expected  " + expoptionsdDropdown);
	 // System.out.println("selectbillsbeforeAmountChkBox                        : " + actselectbillsbeforeAmountChkBox                        + "  value expected  " + expselectbillsbeforeAmountChkBox);
	  System.out.println("PostDiscountBasedOnCrediDaysChkBox                   : " + actpostDiscountBasedOnCrediDaysChkBox                   + "  value expected  " + exppostDiscountBasedOnCrediDaysChkBox);
	  System.out.println("InputPaymenttermsChkBox                              : " + actinputPaymenttermsChkBox                              + "  value expected  " + expinputPaymenttermsChkBox);
	  System.out.println("NarrationDropdown                                    : " + actnarrationDropdown                                    + "  value expected  " + expnarrationDropdown);
	  System.out.println("ApplyRulesOnExternalModuleChkbox                     : " + actapplyRulesOnExternalModuleChkbox                     + "  value expected  " + expapplyRulesOnExternalModuleChkbox);
	  System.out.println("ApplyRulesOnLinkChkBox                               : " + actapplyRulesOnLinkChkBox                               + "  value expected  " + expapplyRulesOnLinkChkBox);
	  System.out.println("ApplyRulesOnSetItemsChkBox                           : " + actapplyRulesOnSetItemsChkBox                           + "  value expected  " + expapplyRulesOnSetItemsChkBox);
	  System.out.println("ApplyDependencyOnExternalModuleChkbox                : " + actapplyDependencyOnExternalModuleChkbox                + "  value expected  " + expapplyDependencyOnExternalModuleChkbox);
	  System.out.println("ApplyDependencyOnLinkChkBox                          : " + actapplyDependencyOnLinkChkBox                          + "  value expected  " + expapplyDependencyOnLinkChkBox);
	  System.out.println("ApplyDependencyOnSetItemsChkBox                      : " + actapplyDependencyOnSetItemsChkBox                      + "  value expected  " + expapplyDependencyOnSetItemsChkBox);

	  boolean actupdateFAChkBoxIsSelect                                    = updateFAChkBox.isSelected();
      boolean actupdateStockChkBoxIsSelect                                 = updateStockChkBox.isSelected();
      
      Select currencyIsSelectValue                                         = new Select(addCurrencyInDropdown);
      String actAddCurrencyDropdownSelectValue                             = currencyIsSelectValue.getFirstSelectedOption().getText();
      
	  boolean actinputExchangeRateChkBoxIsSelect                           = inputExchangeRateChkBox.isDisplayed();
	  boolean actinputLocalExchangeRateChkBoxIsSelect                      = inputLocalExchangeRateChkBox.isDisplayed();
	  
	  Select dueDateValue                                                  = new Select(dueDateDropdown);
	  String actValueOfDueDate                                             = dueDateValue.getFirstSelectedOption().getText();
	      
	  Select arapDropdownValue                                             = new Select(arapOptionsDropdown);
	  String actARAPDropdownValue                                          = arapDropdownValue.getFirstSelectedOption().getText();
	 
	  boolean expupdateFAChkBoxIsSelect                                    = true;
      boolean expupdateStockChkBoxIsSelect                                 = true;
     
      String expAddCurrencyDropdownSelectValue                             = "Header";      
	  boolean expinputExchangeRateChkBoxIsSelect                           = true;
	  boolean expinputLocalExchangeRateChkBoxIsSelect                      = true;

	  String expValueOfDueDate                                             = "Header";
	  String expARAPDropdownValue                                          = "Set manually";
	  	  
	  System.out.println("Update FA is Displaying            : " + actupdateFAChkBoxIsSelect                + "  value expected  " + actupdateFAChkBoxIsSelect);
	  System.out.println("Update Stocks is Displaying        : " + actupdateStockChkBoxIsSelect             + "  value expected  " + actupdateStockChkBoxIsSelect);
	  System.out.println("Currency Dropdown Value            : " + actAddCurrencyDropdownSelectValue        + "  value expected  " + actAddCurrencyDropdownSelectValue);
      System.out.println("Exchange Rate Is Displaying        : " + actinputExchangeRateChkBoxIsSelect       + "  value expected  " + actinputExchangeRateChkBoxIsSelect);
	  System.out.println("Local Exchange Rate Is Displaying  : " + actinputLocalExchangeRateChkBoxIsSelect  + "  value expected  " + actinputLocalExchangeRateChkBoxIsSelect);
	  System.out.println("Due Date Value is Displaying       : " + actValueOfDueDate                        + "  value expected  " + actValueOfDueDate);
	  System.out.println("ARAP Dropdown Value                : " + actARAPDropdownValue                     + "  value expected  " + actARAPDropdownValue);
	    
	  if(actabbreviationTxt==expabbreviationTxt && actdefaultAccount1Txt==expdefaultAccount1Txt &&
			actdefaultAccount2Txt==expdefaultAccount2Txt && actchangeTransactionDateWhenAuthorizedChkBox==expchangeTransactionDateWhenAuthorizedChkBox &&
			actdateCannotBePriortoPrevdateChkBox==expdateCannotBePriortoPrevdateChkBox && actdetailedDisplayInSummaryBarChkBox==expdetailedDisplayInSummaryBarChkBox &&
			actdontAllowEditThisDocChkBox==expdontAllowEditThisDocChkBox && actdontAllowInputDateChkBox==expdontAllowInputDateChkBox &&
			actdontRestrictAccount1TypeChkBox==expdontRestrictAccount1TypeChkBox && actdontRestrictAccount2TypeChkBox==expdontRestrictAccount2TypeChkBox &&
			actdontRestrictOnLoginAccountChkBox==expdontRestrictOnLoginAccountChkBox && actdontRestrictOnLoginTagChkBox==expdontRestrictOnLoginTagChkBox &&
			actenableVersionChkBox==expenableVersionChkBox && actprintUsingDefaultPrinterAndFormatChkBox==expprintUsingDefaultPrinterAndFormatChkBox &&
			actcheckbudgetDropdown==expcheckbudgetDropdown && actpickEmailFromDropdown==exppickEmailFromDropdown && actstopRadio==expstopRadio &&
			actwarnAndAllowRadio==expwarnAndAllowRadio && actentryRestrictConditionTxt==expentryRestrictConditionTxt && actentryRestrictMessageTxt==expentryRestrictMessageTxt &&
			actdontpostCOGS==expdontpostCOGS && actupdateFAChkBox==expupdateFAChkBox && actselectAccountInEveryLineChkBox==expselectAccountInEveryLineChkBox &&
			actdetailedPostingChkbox==expdetailedPostingChkbox && actupdateStockChkBox==expupdateStockChkBox && actallowChangingUpdateStock==expallowChangingUpdateStock &&
			actpostServicetaxChkBox==exppostServicetaxChkBox && actpostTDSchkBox==exppostTDSchkBox && actpostVATchkBox==exppostVATchkBox &&
			actlinkToLetterOfCreditChkBox==explinkToLetterOfCreditChkBox && actdontcheckcreditlimitChkBox==expdontcheckcreditlimitChkBox && 
			actaddCurrencyInDropdown==expaddCurrencyInDropdown && actinputExchangeRateChkBox==expinputExchangeRateChkBox && actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox &&
			actpostExchangeRateDifferrenceChkBox==exppostExchangeRateDifferrenceChkBox && actpostExchangeRateDifferenceBasedOnStandardRuleChkBox==exppostExchangeRateDifferenceBasedOnStandardRuleChkBox &&
			actdueDateDropdown==expdueDateDropdown && actarapOptionsDropdown==exparapOptionsDropdown && actoptionsdDropdown==expoptionsdDropdown
			/*actselectbillsbeforeAmountChkBox==expselectbillsbeforeAmountChkBox*/ && actpostDiscountBasedOnCrediDaysChkBox==exppostDiscountBasedOnCrediDaysChkBox &&
			actinputPaymenttermsChkBox==expinputPaymenttermsChkBox && actnarrationDropdown==expnarrationDropdown && actapplyRulesOnExternalModuleChkbox==expapplyRulesOnExternalModuleChkbox &&
			actapplyRulesOnLinkChkBox==expapplyRulesOnLinkChkBox && actapplyRulesOnSetItemsChkBox==expapplyRulesOnSetItemsChkBox &&
			actapplyDependencyOnExternalModuleChkbox==expapplyDependencyOnExternalModuleChkbox && actapplyDependencyOnLinkChkBox==expapplyDependencyOnLinkChkBox &&
			actapplyDependencyOnSetItemsChkBox==expapplyDependencyOnSetItemsChkBox
			
			&& actupdateFAChkBoxIsSelect == expupdateFAChkBoxIsSelect && actupdateStockChkBoxIsSelect==actupdateStockChkBoxIsSelect
			&& actAddCurrencyDropdownSelectValue.equalsIgnoreCase(expAddCurrencyDropdownSelectValue) && actinputExchangeRateChkBoxIsSelect==expinputExchangeRateChkBoxIsSelect
			&& actinputLocalExchangeRateChkBoxIsSelect==actinputLocalExchangeRateChkBoxIsSelect && actValueOfDueDate.equalsIgnoreCase(expValueOfDueDate)
			&& actARAPDropdownValue.equalsIgnoreCase(expARAPDropdownValue))
		{
			System.out.println("Test Pass : Abbreviation Contain CasSal As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 142, 9, resPass);
			return true;
		}
	    else
		{
			System.out.println("Test Fail : Abbreviation Does NotContain CasSal As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 142, 9, resFail);
			return false;
		}
    }
    catch (NoSuchElementException nse)
    {
	  	System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :   " + nse.getMessage());
	 	return false;
    }
    catch(TimeoutException te)
    {
	 	System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :   " + te.getMessage());
	 	return false;
    }
 }		
	
  
  
  
  //Edit Screen Body Tab 
  
  @FindBy(xpath="//a[contains(text(),'Body')]")
  private static WebElement  editScreenBodyTab; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='editIcon']")
  private static WebElement  editScreenBody1stRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenBody1stRowDeleteBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='editIcon']")
  private static WebElement  editScreenBody2ndRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenBody2ndRowDeleteBtn; 
  
  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-up-arrow Fbutton']")
  private static WebElement  editScreenBodyUpArrowBtn; 

  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-down-arrow Fbutton']")
  private static WebElement  editScreenBodyDownArrowBtn;
				
  // Footer Tab
  
  @FindBy(xpath="//a[contains(text(),'Footer')]")
  private static WebElement  editScreenFooterTab;  
  
  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='editIcon']")
  private static WebElement  editScreenFooter1stRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenFooter1stRowDeleteBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='editIcon']")
  private static WebElement  editScreenFooter2ndRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenFooter2ndRowDeleteBtn; 
  
  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-up-arrow Fbutton']")
  private static WebElement  editScreenFooterUpArrowBtn; 

  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-down-arrow Fbutton']")
  private static WebElement  editScreenFooterDownArrowBtn; 

  @FindBy(xpath="//label[contains(text(),'Quantity preloaded')]")
  private static WebElement qtyPreloadedLabel;
	
  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
  private static WebElement qtyPreloadedTxt;
	
  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
  private static WebElement qtyPreloadedformulaTxt;
	 
  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
  private static WebElement qtyPreloadedFormulaSearchTxt;
	
  @FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
  private static WebElement qtyPreloadedFormulaokBtn;
	
  @FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
  private static WebElement qtyPreloadedFormulacancelBtn;

  @FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[1]/label/span")
  private static WebElement editScreenLoadFields1stChkBox;
	
  @FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[2]/label/span")
  private static WebElement editScreenLoadFields2ndChkBox;
	
  @FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[3]/label/span")
  private static WebElement editScreenLoadFields3rdChkBox;
	
  @FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[4]/label/span")
  private static WebElement editScreenLoadFields4thChkBox;
	
  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_formulaText']")
  private static WebElement  preloadformulaTxt;
	
  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_availableVariables']")
  private static WebElement  preloadFormulaSearchTxt;
	
  @FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
  private static WebElement  preloadFormulaokBtn;
		
  @FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Cancel']")
  private static WebElement  preloadFormulacancelBtn;
  
  
  
  
  public boolean checkCreatedVoucherEditScreenTabInDocumentCustoimization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	System.out.println("**************  checkCreatedVoucherMiscellaneousTabInDocumentCustoimization Method Executes.............  *****************");
	
	try
	{
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
	  miscellaneousTab.click();
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abbreviationTxt));
	  abbreviationTxt.click();
		
	  String actAbbreviationTxt=abbreviationTxt.getAttribute("value");
	  String expAbbreviationTxt="NDT45";
		
	  boolean actabbreviationTxt                                     = abbreviationTxt.isDisplayed();
	  boolean actdefaultAccount1Txt                                  = defaultAccount1Txt.isDisplayed();
	  boolean actdefaultAccount2Txt                                  = defaultAccount2Txt.isDisplayed();
	  boolean actchangeTransactionDateWhenAuthorizedChkBox           = changeTransactionDateWhenAuthorizedChkBox.isDisplayed();
	  boolean actdateCannotBePriortoPrevdateChkBox                   = dateCannotBePriortoPrevdateChkBox.isDisplayed();
	  boolean actdetailedDisplayInSummaryBarChkBox                   = detailedDisplayInSummaryBarChkBox.isDisplayed();
	  boolean actdontAllowEditThisDocChkBox                          = dontAllowEditThisDocChkBox.isDisplayed();
	  boolean actdontAllowInputDateChkBox                            = dontAllowInputDateChkBox.isDisplayed();
	  boolean actdontRestrictAccount1TypeChkBox                      = dontRestrictAccount1TypeChkBox.isDisplayed();
	  boolean actdontRestrictAccount2TypeChkBox                      = dontRestrictAccount2TypeChkBox.isDisplayed();
	  boolean actdontRestrictOnLoginAccountChkBox                    = dontRestrictOnLoginAccountChkBox.isDisplayed();
	  boolean actdontRestrictOnLoginTagChkBox                        = dontRestrictOnLoginTagChkBox.isDisplayed();
	  boolean actenableVersionChkBox                                 = enableVersionChkBox.isDisplayed();
	  boolean actprintUsingDefaultPrinterAndFormatChkBox             = printUsingDefaultPrinterAndFormatChkBox.isDisplayed();
	  boolean actcheckbudgetDropdown                                 = checkbudgetDropdown.isDisplayed();
	  boolean actpickEmailFromDropdown                               = pickEmailFromDropdown.isDisplayed();
	  boolean actstopRadio                                           = stopRadio.isDisplayed();
	  boolean actwarnAndAllowRadio                                   = warnAndAllowRadio.isDisplayed();
	  boolean actentryRestrictConditionTxt                           = entryRestrictConditionTxt.isDisplayed();
  	  boolean actentryRestrictMessageTxt                             = entryRestrictMessageTxt.isDisplayed();
	  boolean actdontpostCOGS                                        = dontpostCOGS.isDisplayed();
	  boolean actupdateFAChkBox                                      = updateFAChkBox.isDisplayed();
	  boolean actselectAccountInEveryLineChkBox                      = selectAccountInEveryLineChkBox.isDisplayed();
	  boolean actdetailedPostingChkbox                               = detailedPostingChkbox.isDisplayed();
	  boolean actupdateStockChkBox                                   = updateStockChkBox.isDisplayed();
	  boolean actallowChangingUpdateStock                            = allowChangingUpdateStock.isDisplayed();
	  boolean actpostServicetaxChkBox                                = postServicetaxChkBox.isDisplayed();
	  boolean actpostTDSchkBox                                       = postTDSchkBox.isDisplayed();
	  boolean actpostVATchkBox                                       = postVATchkBox.isDisplayed();
	  boolean actlinkToLetterOfCreditChkBox                          = linkToLetterOfCreditChkBox.isDisplayed();
	  boolean actdontcheckcreditlimitChkBox                          = dontcheckcreditlimitChkBox.isDisplayed();
	  boolean actaddCurrencyInDropdown                               = addCurrencyInDropdown.isDisplayed();
	  boolean actinputExchangeRateChkBox                             = inputExchangeRateChkBox.isDisplayed();
	  boolean actinputLocalExchangeRateChkBox                        = inputLocalExchangeRateChkBox.isDisplayed();
	  boolean actpostExchangeRateDifferrenceChkBox                   = postExchangeRateDifferrenceChkBox.isDisplayed();
	  boolean actpostExchangeRateDifferenceBasedOnStandardRuleChkBox = postExchangeRateDifferenceBasedOnStandardRuleChkBox.isDisplayed();
	  boolean actdueDateDropdown                                     = dueDateDropdown.isDisplayed();
	  boolean actarapOptionsDropdown                                 = arapOptionsDropdown.isDisplayed();
	  boolean actoptionsdDropdown                                    = optionsdDropdown.isDisplayed();
	  //boolean actselectbillsbeforeAmountChkBox                       = selectbillsbeforeAmountChkBox.isDisplayed();
	  boolean actpostDiscountBasedOnCrediDaysChkBox                  = postDiscountBasedOnCrediDaysChkBox.isDisplayed();
	  boolean actinputPaymenttermsChkBox                             = inputPaymenttermsChkBox.isDisplayed();
	  boolean actnarrationDropdown                                   = narrationDropdown.isDisplayed();
	  boolean actapplyRulesOnExternalModuleChkbox                    = applyRulesOnExternalModuleChkbox.isDisplayed();
	  boolean actapplyRulesOnLinkChkBox                              = applyRulesOnLinkChkBox.isDisplayed();
	  boolean actapplyRulesOnSetItemsChkBox                          = applyRulesOnSetItemsChkBox.isDisplayed();
	  boolean actapplyDependencyOnExternalModuleChkbox               = applyDependencyOnExternalModuleChkbox.isDisplayed();
	  boolean actapplyDependencyOnLinkChkBox                         = applyDependencyOnLinkChkBox.isDisplayed();
	  boolean actapplyDependencyOnSetItemsChkBox                     = applyDependencyOnSetItemsChkBox.isDisplayed(); 
		
	  boolean expabbreviationTxt                                     = true;
	  boolean expdefaultAccount1Txt                                  = true;
	  boolean expdefaultAccount2Txt                                  = true;
	  boolean expchangeTransactionDateWhenAuthorizedChkBox           = true;
	  boolean expdateCannotBePriortoPrevdateChkBox                   = true;
	  boolean expdetailedDisplayInSummaryBarChkBox                   = true;
	  boolean expdontAllowEditThisDocChkBox                          = true;
	  boolean expdontAllowInputDateChkBox                            = true;
	  boolean expdontRestrictAccount1TypeChkBox                      = true;
	  boolean expdontRestrictAccount2TypeChkBox                      = true;
	  boolean expdontRestrictOnLoginAccountChkBox                    = true;
	  boolean expdontRestrictOnLoginTagChkBox                        = true;
	  boolean expenableVersionChkBox                                 = true;
	  boolean expprintUsingDefaultPrinterAndFormatChkBox             = true;
	  boolean expcheckbudgetDropdown                                 = true;
	  boolean exppickEmailFromDropdown                               = true;
	  boolean expstopRadio                                           = true;
	  boolean expwarnAndAllowRadio                                   = true;
	  boolean expentryRestrictConditionTxt                           = true;
	  boolean expentryRestrictMessageTxt                             = true;
	  boolean expdontpostCOGS                                        = true;
	  boolean expupdateFAChkBox                                      = true;
	  boolean expselectAccountInEveryLineChkBox                      = true;
	  boolean expdetailedPostingChkbox                               = true;
	  boolean expupdateStockChkBox                                   = true;
	  boolean expallowChangingUpdateStock                            = true;
	  boolean exppostServicetaxChkBox                                = true;
	  boolean exppostTDSchkBox                                       = true;
	  boolean exppostVATchkBox                                       = true;
	  boolean explinkToLetterOfCreditChkBox                          = true;
	  boolean expdontcheckcreditlimitChkBox                          = true;
	  boolean expaddCurrencyInDropdown                               = true;
	  boolean expinputExchangeRateChkBox                             = true;
	  boolean expinputLocalExchangeRateChkBox                        = true;
	  boolean exppostExchangeRateDifferrenceChkBox                   = true;
	  boolean exppostExchangeRateDifferenceBasedOnStandardRuleChkBox = true;
	  boolean expdueDateDropdown                                     = true;
	  boolean exparapOptionsDropdown                                 = true;
	  boolean expoptionsdDropdown                                    = true;
	  //boolean expselectbillsbeforeAmountChkBox                       = true;
	  boolean exppostDiscountBasedOnCrediDaysChkBox                  = true;
	  boolean expinputPaymenttermsChkBox                             = true;
	  boolean expnarrationDropdown                                   = true;
	  boolean expapplyRulesOnExternalModuleChkbox                    = true;
	  boolean expapplyRulesOnLinkChkBox                              = true;
	  boolean expapplyRulesOnSetItemsChkBox                          = true;
	  boolean expapplyDependencyOnExternalModuleChkbox               = true;
	  boolean expapplyDependencyOnLinkChkBox                         = true;
	  boolean expapplyDependencyOnSetItemsChkBox                     = true; 
	 
		
	  System.out.println("AbbreviationTxt isDisplaying                         : " + actabbreviationTxt                                      + "  value expected  " + expabbreviationTxt);
	  System.out.println("DefaultAccount1Txt                                   : " + actdefaultAccount1Txt                                   + "  value expected  " + expdefaultAccount1Txt);
	  System.out.println("DefaultAccount2Txt                                   : " + actdefaultAccount2Txt                                   + "  value expected  " + expdefaultAccount2Txt);
      System.out.println("ChangeTransactionDateWhenAuthorizedChkBox            : " + actchangeTransactionDateWhenAuthorizedChkBox            + "  value expected  " + expchangeTransactionDateWhenAuthorizedChkBox);
	  System.out.println("DateCannotBePriortoPrevdateChkBox                    : " + actdateCannotBePriortoPrevdateChkBox                    + "  value expected  " + expdateCannotBePriortoPrevdateChkBox);
	  System.out.println("DetailedDisplayInSummaryBarChkBox                    : " + actdetailedDisplayInSummaryBarChkBox                    + "  value expected  " + expdetailedDisplayInSummaryBarChkBox);
	  System.out.println("DontAllowEditThisDocChkBox                           : " + actdontAllowEditThisDocChkBox                           + "  value expected  " + expdontAllowEditThisDocChkBox);
	  System.out.println("DontAllowInputDateChkBox                             : " + actdontAllowInputDateChkBox                             + "  value expected  " + expdontAllowInputDateChkBox);
	  System.out.println("DontRestrictAccount1TypeChkBox                       : " + actdontRestrictAccount1TypeChkBox                       + "  value expected  " + expdontRestrictAccount1TypeChkBox);
	  System.out.println("DontRestrictAccount2TypeChkBox                       : " + actdontRestrictAccount2TypeChkBox                       + "  value expected  " + expdontRestrictAccount2TypeChkBox);
	  System.out.println("DontRestrictOnLoginAccountChkBox                     : " + actdontRestrictOnLoginAccountChkBox                     + "  value expected  " + expdontRestrictOnLoginAccountChkBox);
	  System.out.println("DontRestrictOnLoginTagChkBox                         : " + actdontRestrictOnLoginTagChkBox                         + "  value expected  " + expdontRestrictOnLoginTagChkBox);
	  System.out.println("EnableVersionChkBox                                  : " + actenableVersionChkBox                                  + "  value expected  " + expenableVersionChkBox);
	  System.out.println("PrintUsingDefaultPrinterAndFormatChkBox              : " + actprintUsingDefaultPrinterAndFormatChkBox              + "  value expected  " + expprintUsingDefaultPrinterAndFormatChkBox);
	  System.out.println("CheckbudgetDropdown                                  : " + actcheckbudgetDropdown                                  + "  value expected  " + expcheckbudgetDropdown);
	  System.out.println("PickEmailFromDropdown                                : " + actpickEmailFromDropdown                                + "  value expected  " + exppickEmailFromDropdown);
	  System.out.println("StopRadio                                            : " + actstopRadio                                            + "  value expected  " + expstopRadio);
	  System.out.println("WarnAndAllowRadio                                    : " + actwarnAndAllowRadio                                    + "  value expected  " + expwarnAndAllowRadio);
	  System.out.println("EntryRestrictConditionTxt                            : " + actentryRestrictConditionTxt                            + "  value expected  " + expentryRestrictConditionTxt);
      System.out.println("EntryRestrictMessageTxt                              : " + actentryRestrictMessageTxt                              + "  value expected  " + expentryRestrictMessageTxt);
      System.out.println("DontpostCOGS                                         : " + actdontpostCOGS                                         + "  value expected  " + expdontpostCOGS);
      System.out.println("UpdateFAChkBox                                       : " + actupdateFAChkBox                                       + "  value expected  " + expupdateFAChkBox);
      System.out.println("SelectAccountInEveryLineChkBox                       : " + actselectAccountInEveryLineChkBox                       + "  value expected  " + expselectAccountInEveryLineChkBox);
      System.out.println("DetailedPostingChkbox                                : " + actdetailedPostingChkbox                                + "  value expected  " + expdetailedPostingChkbox);
      System.out.println("UpdateStockChkBox                                    : " + actupdateStockChkBox                                    + "  value expected  " + expupdateStockChkBox);
      System.out.println("AllowChangingUpdateStock                             : " + actallowChangingUpdateStock                             + "  value expected  " + expallowChangingUpdateStock);
      System.out.println("PostServicetaxChkBox                                 : " + actpostServicetaxChkBox                                 + "  value expected  " + exppostServicetaxChkBox);
      System.out.println("PostTDSchkBox                                        : " + actpostTDSchkBox                                        + "  value expected  " + exppostTDSchkBox);
      System.out.println("PostVATchkBox                                        : " + actpostVATchkBox                                        + "  value expected  " + exppostVATchkBox);
      System.out.println("LinkToLetterOfCreditChkBox                           : " + actlinkToLetterOfCreditChkBox                           + "  value expected  " + explinkToLetterOfCreditChkBox);
      System.out.println("DontcheckcreditlimitChkBox                           : " + actdontcheckcreditlimitChkBox                           + "  value expected  " + expdontcheckcreditlimitChkBox);
  	  System.out.println("AddCurrencyInDropdown                                : " + actaddCurrencyInDropdown                                + "  value expected  " + expaddCurrencyInDropdown);
	  System.out.println("InputExchangeRateChkBox                              : " + actinputExchangeRateChkBox                              + "  value expected  " + expinputExchangeRateChkBox);
	  System.out.println("InputLocalExchangeRateChkBox                         : " + actinputLocalExchangeRateChkBox                         + "  value expected  " + expinputLocalExchangeRateChkBox);
	  System.out.println("PostExchangeRateDifferrenceChkBox                    : " + actpostExchangeRateDifferrenceChkBox                    + "  value expected  " + exppostExchangeRateDifferrenceChkBox);
	  System.out.println("PostExchangeRateDifferenceBasedOnStandardRuleChkBox  : " + actpostExchangeRateDifferenceBasedOnStandardRuleChkBox  + "  value expected  " + exppostExchangeRateDifferenceBasedOnStandardRuleChkBox);
	  System.out.println("DueDateDropdown                                      : " + actdueDateDropdown                                      + "  value expected  " + expdueDateDropdown);
	  System.out.println("ArapOptionsDropdown                                  : " + actarapOptionsDropdown                                  + "  value expected  " + exparapOptionsDropdown);
	  System.out.println("OptionsdDropdown                                     : " + actoptionsdDropdown                                     + "  value expected  " + expoptionsdDropdown);
	 // System.out.println("selectbillsbeforeAmountChkBox                        : " + actselectbillsbeforeAmountChkBox                        + "  value expected  " + expselectbillsbeforeAmountChkBox);
	  System.out.println("PostDiscountBasedOnCrediDaysChkBox                   : " + actpostDiscountBasedOnCrediDaysChkBox                   + "  value expected  " + exppostDiscountBasedOnCrediDaysChkBox);
	  System.out.println("InputPaymenttermsChkBox                              : " + actinputPaymenttermsChkBox                              + "  value expected  " + expinputPaymenttermsChkBox);
	  System.out.println("NarrationDropdown                                    : " + actnarrationDropdown                                    + "  value expected  " + expnarrationDropdown);
	  System.out.println("ApplyRulesOnExternalModuleChkbox                     : " + actapplyRulesOnExternalModuleChkbox                     + "  value expected  " + expapplyRulesOnExternalModuleChkbox);
	  System.out.println("ApplyRulesOnLinkChkBox                               : " + actapplyRulesOnLinkChkBox                               + "  value expected  " + expapplyRulesOnLinkChkBox);
	  System.out.println("ApplyRulesOnSetItemsChkBox                           : " + actapplyRulesOnSetItemsChkBox                           + "  value expected  " + expapplyRulesOnSetItemsChkBox);
	  System.out.println("ApplyDependencyOnExternalModuleChkbox                : " + actapplyDependencyOnExternalModuleChkbox                + "  value expected  " + expapplyDependencyOnExternalModuleChkbox);
	  System.out.println("ApplyDependencyOnLinkChkBox                          : " + actapplyDependencyOnLinkChkBox                          + "  value expected  " + expapplyDependencyOnLinkChkBox);
	  System.out.println("ApplyDependencyOnSetItemsChkBox                      : " + actapplyDependencyOnSetItemsChkBox                      + "  value expected  " + expapplyDependencyOnSetItemsChkBox);

	  boolean actupdateFAChkBoxIsSelect                                    = updateFAChkBox.isSelected();
      boolean actupdateStockChkBoxIsSelect                                 = updateStockChkBox.isSelected();
      
      Select currencyIsSelectValue                                         = new Select(addCurrencyInDropdown);
      String actAddCurrencyDropdownSelectValue                             = currencyIsSelectValue.getFirstSelectedOption().getText();
      
	  boolean actinputExchangeRateChkBoxIsSelect                           = inputExchangeRateChkBox.isDisplayed();
	  boolean actinputLocalExchangeRateChkBoxIsSelect                      = inputLocalExchangeRateChkBox.isDisplayed();
	  
	  Select dueDateValue                                                  = new Select(dueDateDropdown);
	  String actValueOfDueDate                                             = dueDateValue.getFirstSelectedOption().getText();
	      
	  Select arapDropdownValue                                             = new Select(arapOptionsDropdown);
	  String actARAPDropdownValue                                          = arapDropdownValue.getFirstSelectedOption().getText();
	 
	  boolean expupdateFAChkBoxIsSelect                                    = true;
      boolean expupdateStockChkBoxIsSelect                                 = true;
     
      String expAddCurrencyDropdownSelectValue                             = "Header";      
	  boolean expinputExchangeRateChkBoxIsSelect                           = true;
	  boolean expinputLocalExchangeRateChkBoxIsSelect                      = true;

	  String expValueOfDueDate                                             = "Header";
	  String expARAPDropdownValue                                          = "Set manually";
	  	  
	  System.out.println("Update FA is Displaying            : " + actupdateFAChkBoxIsSelect                + "  value expected  " + actupdateFAChkBoxIsSelect);
	  System.out.println("Update Stocks is Displaying        : " + actupdateStockChkBoxIsSelect             + "  value expected  " + actupdateStockChkBoxIsSelect);
	  System.out.println("Currency Dropdown Value            : " + actAddCurrencyDropdownSelectValue        + "  value expected  " + actAddCurrencyDropdownSelectValue);
      System.out.println("Exchange Rate Is Displaying        : " + actinputExchangeRateChkBoxIsSelect       + "  value expected  " + actinputExchangeRateChkBoxIsSelect);
	  System.out.println("Local Exchange Rate Is Displaying  : " + actinputLocalExchangeRateChkBoxIsSelect  + "  value expected  " + actinputLocalExchangeRateChkBoxIsSelect);
	  System.out.println("Due Date Value is Displaying       : " + actValueOfDueDate                        + "  value expected  " + actValueOfDueDate);
	  System.out.println("ARAP Dropdown Value                : " + actARAPDropdownValue                     + "  value expected  " + actARAPDropdownValue);
	    
	  if(actabbreviationTxt==expabbreviationTxt && actdefaultAccount1Txt==expdefaultAccount1Txt &&
			actdefaultAccount2Txt==expdefaultAccount2Txt && actchangeTransactionDateWhenAuthorizedChkBox==expchangeTransactionDateWhenAuthorizedChkBox &&
			actdateCannotBePriortoPrevdateChkBox==expdateCannotBePriortoPrevdateChkBox && actdetailedDisplayInSummaryBarChkBox==expdetailedDisplayInSummaryBarChkBox &&
			actdontAllowEditThisDocChkBox==expdontAllowEditThisDocChkBox && actdontAllowInputDateChkBox==expdontAllowInputDateChkBox &&
			actdontRestrictAccount1TypeChkBox==expdontRestrictAccount1TypeChkBox && actdontRestrictAccount2TypeChkBox==expdontRestrictAccount2TypeChkBox &&
			actdontRestrictOnLoginAccountChkBox==expdontRestrictOnLoginAccountChkBox && actdontRestrictOnLoginTagChkBox==expdontRestrictOnLoginTagChkBox &&
			actenableVersionChkBox==expenableVersionChkBox && actprintUsingDefaultPrinterAndFormatChkBox==expprintUsingDefaultPrinterAndFormatChkBox &&
			actcheckbudgetDropdown==expcheckbudgetDropdown && actpickEmailFromDropdown==exppickEmailFromDropdown && actstopRadio==expstopRadio &&
			actwarnAndAllowRadio==expwarnAndAllowRadio && actentryRestrictConditionTxt==expentryRestrictConditionTxt && actentryRestrictMessageTxt==expentryRestrictMessageTxt &&
			actdontpostCOGS==expdontpostCOGS && actupdateFAChkBox==expupdateFAChkBox && actselectAccountInEveryLineChkBox==expselectAccountInEveryLineChkBox &&
			actdetailedPostingChkbox==expdetailedPostingChkbox && actupdateStockChkBox==expupdateStockChkBox && actallowChangingUpdateStock==expallowChangingUpdateStock &&
			actpostServicetaxChkBox==exppostServicetaxChkBox && actpostTDSchkBox==exppostTDSchkBox && actpostVATchkBox==exppostVATchkBox &&
			actlinkToLetterOfCreditChkBox==explinkToLetterOfCreditChkBox && actdontcheckcreditlimitChkBox==expdontcheckcreditlimitChkBox && 
			actaddCurrencyInDropdown==expaddCurrencyInDropdown && actinputExchangeRateChkBox==expinputExchangeRateChkBox && actinputLocalExchangeRateChkBox==expinputLocalExchangeRateChkBox &&
			actpostExchangeRateDifferrenceChkBox==exppostExchangeRateDifferrenceChkBox && actpostExchangeRateDifferenceBasedOnStandardRuleChkBox==exppostExchangeRateDifferenceBasedOnStandardRuleChkBox &&
			actdueDateDropdown==expdueDateDropdown && actarapOptionsDropdown==exparapOptionsDropdown && actoptionsdDropdown==expoptionsdDropdown
			/*actselectbillsbeforeAmountChkBox==expselectbillsbeforeAmountChkBox*/ && actpostDiscountBasedOnCrediDaysChkBox==exppostDiscountBasedOnCrediDaysChkBox &&
			actinputPaymenttermsChkBox==expinputPaymenttermsChkBox && actnarrationDropdown==expnarrationDropdown && actapplyRulesOnExternalModuleChkbox==expapplyRulesOnExternalModuleChkbox &&
			actapplyRulesOnLinkChkBox==expapplyRulesOnLinkChkBox && actapplyRulesOnSetItemsChkBox==expapplyRulesOnSetItemsChkBox &&
			actapplyDependencyOnExternalModuleChkbox==expapplyDependencyOnExternalModuleChkbox && actapplyDependencyOnLinkChkBox==expapplyDependencyOnLinkChkBox &&
			actapplyDependencyOnSetItemsChkBox==expapplyDependencyOnSetItemsChkBox
			
			&& actupdateFAChkBoxIsSelect == expupdateFAChkBoxIsSelect && actupdateStockChkBoxIsSelect==actupdateStockChkBoxIsSelect
			&& actAddCurrencyDropdownSelectValue.equalsIgnoreCase(expAddCurrencyDropdownSelectValue) && actinputExchangeRateChkBoxIsSelect==expinputExchangeRateChkBoxIsSelect
			&& actinputLocalExchangeRateChkBoxIsSelect==actinputLocalExchangeRateChkBoxIsSelect && actValueOfDueDate.equalsIgnoreCase(expValueOfDueDate)
			&& actARAPDropdownValue.equalsIgnoreCase(expARAPDropdownValue))
		{
			System.out.println("Test Pass : Abbreviation Contain CasSal As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 142, 9, resPass);
			return true;
		}
	    else
		{
			System.out.println("Test Fail : Abbreviation Does NotContain CasSal As Expected");
			excelReader.setCellData(xlfile, "Sheet2", 142, 9, resFail);
			return false;
		}
    }
    catch (NoSuchElementException nse)
    {
	  	System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :   " + nse.getMessage());
	 	return false;
    }
    catch(TimeoutException te)
    {
	 	System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :   " + te.getMessage());
	 	return false;
    }
 }		
  
    //	Inventory Options
 	
	@FindBy(xpath="//span[@class='icon-inventory']")
	private static WebElement  inventoryoptionsTab;
	
	@FindBy(xpath="//input[@id='InventoryOpt_costOfIssueAcc']")
	private static WebElement  costOfIssueAccountTxt;
	
	@FindBy(xpath="//*[@id='InventoryOpt_costOfIssueAcc_input_image']/span")
	private static WebElement  costOfIssueAccountDropdown;
	
	@FindBy(xpath="//*[@id='InventoryOpt_costOfIssueAcc_input_settings']/span")
	private static WebElement  costOfIssueAccountSettingBtn;
	
	@FindBy(xpath="//div[@id='InventoryOpt_costOfIssueAcc_customize_popup_container']")
	private static WebElement  costOfIssueAccountContainerTxt;
	
	@FindBy(xpath="//div[@id='InventoryOpt_costOfIssueAcc_customize_popup_footer']//input[1]")
	private static WebElement  costOfIssueAccountStandardfieldsBtn;
	
		@FindBy(xpath="//select[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_list']")
		private static WebElement  costOfIssueAccountFieldsDropdown;
		
		@FindBy(xpath="//input[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_header']")
		private static WebElement  costOfIssueAccountHeaderTxt;
		
		@FindBy(xpath="//select[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_alignment']")
		private static WebElement  costOfIssueAccountAllignmentDropdown;
		
		@FindBy(xpath="//input[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_width']")
		private static WebElement  costOfIssueAccountWidthTxt;
		
		@FindBy(xpath="//section[@id='page_Content']//input[3]")
		private static WebElement  costOfIssueAccountStandardFieldsokBtn;
		
		@FindBy(xpath="//section[@id='page_Content']//input[4]")
		private static WebElement  costOfIssueAccountStandardFieldscancelBtn;
	
	@FindBy(xpath="//div[@id='InventoryOpt_costOfIssueAcc_search_container']//input[2]")
	private static WebElement  costOfIssueAccountDeleteColumnBtn;
	
	@FindBy(xpath="//section[@id='page_Content']//input[3]")
	private static WebElement  costOfIssueAccountokBtn;
	
	@FindBy(xpath="//section[@id='page_Content']//input[4]")
	private static WebElement  costOfIssueAccountcancelBtn;
	
	@FindBy(xpath="//input[@id='InventoryOpt_salesPurchaseACC']")
	private static WebElement  salesPurchaseACTxt;
	
	@FindBy(xpath="//*[@id='InventoryOpt_salesPurchaseACC_input_image']/span")
	private static WebElement  salesPurchaseACDropdown;

	@FindBy(xpath="//*[@id='InventoryOpt_salesPurchaseACC_input_settings']/span")
	private static WebElement  salesPurchaseACSettingBtn;
	
	@FindBy(xpath="//div[@id='InventoryOpt_salesPurchaseACC_customize_popup_container']")
	private static WebElement  salesPurchaseACContainerTxt;
	
	@FindBy(xpath="//div[@id='InventoryOpt_salesPurchaseACC_customize_popup_container']")
	private static WebElement  salesPurchaseACStandardfieldsBtn;
	
		@FindBy(xpath="//select[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_list']")
		private static WebElement  salesPurchaseACFieldsDropdown;
		
		@FindBy(xpath="//input[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_header']")
		private static WebElement  salesPurchaseACHeaderTxt;
		
		@FindBy(xpath="//select[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_alignment']")
		private static WebElement  salesPurchaseACAllignmentDropdown;
		
		@FindBy(xpath="//input[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_width']")
		private static WebElement  salesPurchaseACWidthTxt;
		
		@FindBy(xpath="//section[@id='page_Content']//input[3]")
		private static WebElement  salesPurchaseACStandardFieldsokBtn;
		
		@FindBy(xpath="//section[@id='page_Content']//input[4]")
		private static WebElement  salesPurchaseACStandardFieldscancelBtn;
	
	@FindBy(xpath="//div[@id='InventoryOpt_salesPurchaseACC_search_container']//input[2]")
	private static WebElement  salesPurchaseACDeleteColumnBtn;
	
	@FindBy(xpath="//section[@id='page_Content']//input[3]")
	private static WebElement  salesPurchaseACokBtn;
	
	@FindBy(xpath="//section[@id='page_Content']//input[4]")
	private static WebElement  salesPurchaseACcancelBtn;
	
	@FindBy(xpath="//select[@id='inventoryOpt_ProductRate']")
	private static WebElement itemRateDropdown;
	
	@FindBy(xpath="//select[@id='inventoryOpt_ReservationType']")
	private static WebElement reservationTypeDropdown;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkApplyRateSchemes']")
	private static WebElement applyrateSchemesChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkPickFreeSchemesQntyAfterLn']")
	private static WebElement pickFreeSchemesQtyAfterEveryLineChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkDisplayUnitNameBforeQnty']")
	private static WebElement displayUnitNamebeforeEveryQtyChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkDontInputProducts']")
	private static WebElement dontInputItemsChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkDontInputQntyRate']")
	private static WebElement dontInputQtyAndRateChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkDontPopupBinSelAfterQnty']")
	private static WebElement dontPopupBinSelectionAfterQuantityChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkHideRateAndGross']")
	private static WebElement hideRateAndGrossChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkHideRateAndGrossForNormalUsers']")
	private static WebElement hideRateAndGrossfromNormalUsersChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkHirePurchaseBehavior']")
	private static WebElement hirePurchaseBehaviourChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkInputCounterBill']")
	private static WebElement inputAsCounterBillChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkInputBinLocation']")
	private static WebElement inputBinLocationChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkInputQntyBreakup']")
	private static WebElement inputItemByAttributeChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkQCRequiredForThisDoc']")
	private static WebElement qcrequiredforThisDocChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkRecalculateRateInReceiptFromProd']")
	private static WebElement recalculateTheRateInReceiptFromProductionOnSavingChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkRestrictItmFromRepeatedEntry']")
	private static WebElement restricttheitemFromBeingRepeatedInEntryChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkShowvendorassignproducts']")
	private static WebElement showVendorAssignedItemsChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkInputBarcode']")
	private static WebElement inputBarcodeChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkShowHeldStock']")
	private static WebElement showHeldStockChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkCrossDoc']")
	private static WebElement crossDocChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkConsumeOrAllocateStock']")
	private static WebElement allocateStockChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkEnableRFID']")
	private static WebElement enableRFIDChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkEnableQC']")
	private static WebElement enableQCChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkRateZero']")
	private static WebElement dontmakeThertaeZeroWhenItemisChangedChkBox;
	
    // Batch	
	
	@FindBy(xpath="//select[@id='inventoryOpt_BatchPick']")
	private static WebElement batchPickDropdown;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkAllowExpiredBatchesToBeSelected']")
	private static WebElement allowExpiredbatchesToBeSelectedChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkLoadBatchesBforeQnty']")
	private static WebElement loadbatchesbeforeQuantityChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkSelectBatchesEvenIfStksNotUpdated']")
	private static WebElement reserveStockByBatchesChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_chkInputBatchEvenIfStockIsNotUpdated']")
	private static WebElement inputBatchEvenIfStockIsnotUpdatedChkBox;
	
// Barcode	
	
	@FindBy(xpath="//input[@id='inventoryOpt_rdbNotApplicable']")
	private static WebElement notApplicbleChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_rdbFromTemplate']")
	private static WebElement fromTemplateChkBox;
	
	@FindBy(xpath="//input[@id='inventoryOpt_rdbFromField']")
	private static WebElement fromFieldChkBox;

  @FindBy(xpath="//input[@id='inventoryOpt_chkIncludeUnits']")
  private static WebElement includeUnitsChkBox;
	
  @FindBy(xpath="//input[@id='inventoryOpt_chkIncludeBatchNumber']")
  private static WebElement includeBatchNoChkBox;
	
  // Bin
  @FindBy(xpath="//select[@id='inventoryOpt_BinsPick']")
  private static WebElement binsPickDropDown;

  public boolean checkCreatedVoucherInventoryTabInDocumentCustoimization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
   excelReader=new ExcelReader(POJOUtility.getExcelPath());
   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
   System.out.println("**************  checkCreatedVoucherInventoryTabInDocumentCustoimization Method Executes.............  *****************");
	
   try
   {
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryoptionsTab));
	inventoryoptionsTab.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(costOfIssueAccountTxt));
		
	boolean actcostOfIssueAccountTxt									=costOfIssueAccountTxt.isDisplayed();
	boolean actsalesPurchaseACTxt 										=salesPurchaseACTxt.isDisplayed();
	boolean actitemRateDropdown 										=itemRateDropdown.isDisplayed();
	boolean actreservationTypeDropdown 									=reservationTypeDropdown.isDisplayed();
	boolean actapplyrateSchemesChkBox 									=applyrateSchemesChkBox.isDisplayed();
	boolean actpickFreeSchemesQtyAfterEveryLineChkBox 					=pickFreeSchemesQtyAfterEveryLineChkBox.isDisplayed();
	boolean actdisplayUnitNamebeforeEveryQtyChkBox 						=displayUnitNamebeforeEveryQtyChkBox.isDisplayed();
	boolean actdontInputItemsChkBox 									=dontInputItemsChkBox.isDisplayed();
	boolean actdontInputQtyAndRateChkBox 								=dontInputQtyAndRateChkBox.isDisplayed();
	boolean actdontPopupBinSelectionAfterQuantityChkBox 				=dontPopupBinSelectionAfterQuantityChkBox.isDisplayed();
	boolean acthideRateAndGrossChkBox 									=hideRateAndGrossChkBox.isDisplayed();
	boolean acthideRateAndGrossfromNormalUsersChkBox 					=hideRateAndGrossfromNormalUsersChkBox.isDisplayed();
	boolean acthirePurchaseBehaviourChkBox 								=hirePurchaseBehaviourChkBox.isDisplayed();
	boolean actinputAsCounterBillChkBox 								=inputAsCounterBillChkBox.isDisplayed();
	boolean actinputBinLocationChkBox 									=inputBinLocationChkBox.isDisplayed();
	boolean actinputItemByAttributeChkBox 								=inputItemByAttributeChkBox.isDisplayed();
	boolean actqcrequiredforThisDocChkBox 								=qcrequiredforThisDocChkBox.isDisplayed();
	boolean actrecalculateTheRateInReceiptFromProductionOnSavingChkBox 	=recalculateTheRateInReceiptFromProductionOnSavingChkBox.isDisplayed();
	boolean actrestricttheitemFromBeingRepeatedInEntryChkBox 			=restricttheitemFromBeingRepeatedInEntryChkBox.isDisplayed();
	boolean actshowVendorAssignedItemsChkBox 							=showVendorAssignedItemsChkBox.isDisplayed();
	boolean actinputBarcodeChkBox 										=inputBarcodeChkBox.isDisplayed();
	boolean actshowHeldStockChkBox 										=showHeldStockChkBox.isDisplayed();
	boolean actcrossDocChkBox 											=crossDocChkBox.isDisplayed();
	boolean actallocateStockChkBox 										=allocateStockChkBox.isDisplayed();
	boolean actenableRFIDChkBox 										=enableRFIDChkBox.isDisplayed();
	boolean actenableQCChkBox 											=enableQCChkBox.isDisplayed();
	boolean actdontmakeThertaeZeroWhenItemisChangedChkBox 				=dontmakeThertaeZeroWhenItemisChangedChkBox.isDisplayed();
	boolean actbatchPickDropdown 										=batchPickDropdown.isDisplayed();
	boolean actallowExpiredbatchesToBeSelectedChkBox 					=allowExpiredbatchesToBeSelectedChkBox.isDisplayed();
	boolean actloadbatchesbeforeQuantityChkBox 							=loadbatchesbeforeQuantityChkBox.isDisplayed();
	boolean actreserveStockByBatchesChkBox 								=reserveStockByBatchesChkBox.isDisplayed();
	boolean actinputBatchEvenIfStockIsnotUpdatedChkBox 					=inputBatchEvenIfStockIsnotUpdatedChkBox.isDisplayed();
	boolean actnotApplicbleChkBox 										=notApplicbleChkBox.isDisplayed();
	boolean actfromTemplateChkBox 										=fromTemplateChkBox.isDisplayed();
	boolean actfromFieldChkBox 											=fromFieldChkBox.isDisplayed();
	boolean actbinsPickDropDown 										=binsPickDropDown.isDisplayed();
	
	boolean expcostOfIssueAccountTxt									=true;
	boolean expsalesPurchaseACTxt 										=true;
	boolean expitemRateDropdown 										=true;
	boolean expreservationTypeDropdown 									=true;
	boolean expapplyrateSchemesChkBox 									=true;
	boolean exppickFreeSchemesQtyAfterEveryLineChkBox 					=true;
	boolean expdisplayUnitNamebeforeEveryQtyChkBox 						=true;
	boolean expdontInputItemsChkBox 									=true;
	boolean expdontInputQtyAndRateChkBox 								=true;
	boolean expdontPopupBinSelectionAfterQuantityChkBox 				=true;
	boolean exphideRateAndGrossChkBox 									=true;
	boolean exphideRateAndGrossfromNormalUsersChkBox 					=true;
	boolean exphirePurchaseBehaviourChkBox 								=true;
	boolean expinputAsCounterBillChkBox 								=true;
	boolean expinputBinLocationChkBox 									=true;
	boolean expinputItemByAttributeChkBox 								=true;
	boolean expqcrequiredforThisDocChkBox 								=true;
	boolean exprecalculateTheRateInReceiptFromProductionOnSavingChkBox 	=true;
	boolean exprestricttheitemFromBeingRepeatedInEntryChkBox 			=true;
	boolean expshowVendorAssignedItemsChkBox 							=true;
	boolean expinputBarcodeChkBox 										=true;
	boolean expshowHeldStockChkBox 										=true;
	boolean expcrossDocChkBox 											=true;
	boolean expallocateStockChkBox 										=true;
	boolean expenableRFIDChkBox 										=true;
	boolean expenableQCChkBox 											=true;
	boolean expdontmakeThertaeZeroWhenItemisChangedChkBox 				=true;
	boolean expbatchPickDropdown 										=true;
	boolean expallowExpiredbatchesToBeSelectedChkBox 					=true;
	boolean exploadbatchesbeforeQuantityChkBox 							=true;
	boolean expreserveStockByBatchesChkBox 								=true;
	boolean expinputBatchEvenIfStockIsnotUpdatedChkBox 					=true;
	boolean expnotApplicbleChkBox 										=true;
	boolean expfromTemplateChkBox 										=true;
	boolean expfromFieldChkBox 											=true;
	boolean expbinsPickDropDown 										=true;
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemRateDropdown));
	
	ArrayList<String> actitemRateDropdownList = new ArrayList<String>(); 
	
	Select itemSelect=new Select(itemRateDropdown);
	
	int itemCount=itemSelect.getOptions().size();
	
	for(int i=0;i<itemCount;i++)
	{
		String options=itemSelect.getOptions().get(i).getText();
		actitemRateDropdownList.add(options);
	}
	
	ArrayList<String>  expitemRateDropdownList= new ArrayList<String>(); 
	expitemRateDropdownList.add("Cannot be below Cost");
	expitemRateDropdownList.add("Cannot be changed");
	expitemRateDropdownList.add("Editable");

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickDropdown));
	
	ArrayList<String>  actbatchDropdownList= new ArrayList<String>(); 
	
	Select batchSelect=new Select(batchPickDropdown);
	
	int batchCount=batchSelect.getOptions().size();
	
	for(int i=0;i<batchCount;i++)
	{
		String options=batchSelect.getOptions().get(i).getText();
		actbatchDropdownList.add(options);
	}
	
	ArrayList<String>  expbatchDropdownList= new ArrayList<String>(); 
	
	expbatchDropdownList.add("Manual");
	expbatchDropdownList.add("FIFO on Manufacturing date");
	expbatchDropdownList.add("FIFO on Expiry date");
	expbatchDropdownList.add("FIFO on Batch Rate");
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsPickDropDown));
	
	ArrayList<String>  actbinDropdownList= new ArrayList<String>();
	
	Select binSelect=new Select(binsPickDropDown);
	
	int binCount=binSelect.getOptions().size();
	
	for(int i=0;i<binCount;i++)
	{
		String options=binSelect.getOptions().get(i).getText();
		actbinDropdownList.add(options);
	}
	
	ArrayList<String>  expbinDropdownList= new ArrayList<String>(); 
	
	expbinDropdownList.add("Manual");
	expbinDropdownList.add("Auto");
		
	
	System.out.println("CostOfIssueAccountTxt                                   : "+actcostOfIssueAccountTxt                                   +" Value Expected : "+expcostOfIssueAccountTxt);
	System.out.println("SalesPurchaseACTxt                                      : "+actsalesPurchaseACTxt                                      +" Value Expected : "+expsalesPurchaseACTxt);
	System.out.println("ItemRateDropdown                                        : "+actitemRateDropdown                                        +" Value Expected : "+expitemRateDropdown);
	//System.out.println("ReservationTypeDropdown                                 : "+actreservationTypeDropdown                                 +" Value Expected : "+expreservationTypeDropdown);
	System.out.println("ApplyrateSchemesChkBox                                  : "+actapplyrateSchemesChkBox                                  +" Value Expected : "+expapplyrateSchemesChkBox);
	System.out.println("PickFreeSchemesQtyAfterEveryLineChkBox                  : "+actpickFreeSchemesQtyAfterEveryLineChkBox                  +" Value Expected : "+exppickFreeSchemesQtyAfterEveryLineChkBox);
	System.out.println("DisplayUnitNamebeforeEveryQtyChkBox                     : "+actdisplayUnitNamebeforeEveryQtyChkBox                     +" Value Expected : "+expdisplayUnitNamebeforeEveryQtyChkBox);
	System.out.println("DontInputItemsChkBox                                    : "+actdontInputItemsChkBox                                    +" Value Expected : "+expdontInputItemsChkBox);
	System.out.println("DontInputQtyAndRateChkBox                               : "+actdontInputQtyAndRateChkBox                               +" Value Expected : "+expdontInputQtyAndRateChkBox);
	System.out.println("DontPopupBinSelectionAfterQuantityChkBox                : "+actdontPopupBinSelectionAfterQuantityChkBox                +" Value Expected : "+expdontPopupBinSelectionAfterQuantityChkBox);
	System.out.println("HideRateAndGrossChkBox                                  : "+acthideRateAndGrossChkBox                                  +" Value Expected : "+exphideRateAndGrossChkBox);
	System.out.println("HideRateAndGrossfromNormalUsersChkBox                   : "+acthideRateAndGrossfromNormalUsersChkBox                   +" Value Expected : "+exphideRateAndGrossfromNormalUsersChkBox);
	System.out.println("HirePurchaseBehaviourChkBox                             : "+acthirePurchaseBehaviourChkBox                             +" Value Expected : "+exphirePurchaseBehaviourChkBox);
	System.out.println("InputAsCounterBillChkBox                                : "+actinputAsCounterBillChkBox                                +" Value Expected : "+expinputAsCounterBillChkBox);
	System.out.println("InputBinLocationChkBox                                  : "+actinputBinLocationChkBox                                  +" Value Expected : "+expinputBinLocationChkBox);
	System.out.println("InputItemByAttributeChkBox                              : "+actinputItemByAttributeChkBox                              +" Value Expected : "+expinputItemByAttributeChkBox);
	System.out.println("QcrequiredforThisDocChkBox                              : "+actqcrequiredforThisDocChkBox                              +" Value Expected : "+expqcrequiredforThisDocChkBox);
	System.out.println("RecalculateTheRateInReceiptFromProductionOnSavingChkBox : "+actrecalculateTheRateInReceiptFromProductionOnSavingChkBox +" Value Expected : "+exprecalculateTheRateInReceiptFromProductionOnSavingChkBox);
	System.out.println("RestricttheitemFromBeingRepeatedInEntryChkBox           : "+actrestricttheitemFromBeingRepeatedInEntryChkBox           +" Value Expected : "+exprestricttheitemFromBeingRepeatedInEntryChkBox);
	System.out.println("ShowVendorAssignedItemsChkBox                           : "+actshowVendorAssignedItemsChkBox                           +" Value Expected : "+expshowVendorAssignedItemsChkBox);
	System.out.println("InputBarcodeChkBox                                      : "+actinputBarcodeChkBox                                      +" Value Expected : "+expinputBarcodeChkBox);
	System.out.println("ShowHeldStockChkBox                                     : "+actshowHeldStockChkBox                                     +" Value Expected : "+expshowHeldStockChkBox);
	System.out.println("CrossDocChkBox                                          : "+actcrossDocChkBox                                          +" Value Expected : "+expcrossDocChkBox);
	System.out.println("AllocateStockChkBox                                     : "+actallocateStockChkBox                                     +" Value Expected : "+expallocateStockChkBox);
	System.out.println("EnableRFIDChkBox                                        : "+actenableRFIDChkBox                                        +" Value Expected : "+expenableRFIDChkBox);
	System.out.println("EnableQCChkBox                                          : "+actenableQCChkBox                                          +" Value Expected : "+expenableQCChkBox);
	System.out.println("DontmakeThertaeZeroWhenItemisChangedChkBox              : "+actdontmakeThertaeZeroWhenItemisChangedChkBox              +" Value Expected : "+expdontmakeThertaeZeroWhenItemisChangedChkBox);
	System.out.println("BatchPickDropdown                                       : "+actbatchPickDropdown                                       +" Value Expected : "+expbatchPickDropdown);
	System.out.println("AllowExpiredbatchesToBeSelectedChkBox                   : "+actallowExpiredbatchesToBeSelectedChkBox                   +" Value Expected : "+expallowExpiredbatchesToBeSelectedChkBox);
	System.out.println("LoadbatchesbeforeQuantityChkBox                         : "+actloadbatchesbeforeQuantityChkBox                         +" Value Expected : "+exploadbatchesbeforeQuantityChkBox);
	System.out.println("ReserveStockByBatchesChkBox                             : "+actreserveStockByBatchesChkBox                             +" Value Expected : "+expreserveStockByBatchesChkBox);
	System.out.println("InputBatchEvenIfStockIsnotUpdatedChkBox                 : "+actinputBatchEvenIfStockIsnotUpdatedChkBox                 +" Value Expected : "+expinputBatchEvenIfStockIsnotUpdatedChkBox);
	System.out.println("NotApplicbleChkBox                                      : "+actnotApplicbleChkBox                                      +" Value Expected : "+expnotApplicbleChkBox);
	System.out.println("FromTemplateChkBox                                      : "+actfromTemplateChkBox                                      +" Value Expected : "+expfromTemplateChkBox);
	System.out.println("FromFieldChkBox                                         : "+actfromFieldChkBox                                         +" Value Expected : "+expfromFieldChkBox);
	System.out.println("BinsPickDropDown                                        : "+actbinsPickDropDown                                        +" Value Expected : "+expbinsPickDropDown);
	
	System.out.println("ItemRateDropdownList                                    : "+actitemRateDropdownList                                    +" Value Expected : "+expitemRateDropdownList);
	System.out.println("BatchDropdownList                                       : "+actbatchDropdownList                                       +" Value Expected : "+expbatchDropdownList);
	System.out.println("BinDropdownList                                         : "+actbinDropdownList                                         +" Value Expected : "+expbinDropdownList);
	
	/*System.err.println("ItemRateDropdownList    : "+actitemRateDropdownList.equals(expitemRateDropdownList));
	System.err.println("BatchDropdownList       : "+actbatchDropdownList.equals(expbatchDropdownList));
	System.err.println("BinDropdownList         : "+actbinDropdownList.equals(expbinDropdownList));*/
	
		
	   	
	if(actcostOfIssueAccountTxt==expcostOfIssueAccountTxt && actsalesPurchaseACTxt==expsalesPurchaseACTxt && actitemRateDropdown==expitemRateDropdown
        && actapplyrateSchemesChkBox==expapplyrateSchemesChkBox
		&& actpickFreeSchemesQtyAfterEveryLineChkBox==exppickFreeSchemesQtyAfterEveryLineChkBox && actdisplayUnitNamebeforeEveryQtyChkBox==expdisplayUnitNamebeforeEveryQtyChkBox
		&& actdontInputItemsChkBox==expdontInputItemsChkBox && actdontInputQtyAndRateChkBox==expdontInputQtyAndRateChkBox 
		&& actdontPopupBinSelectionAfterQuantityChkBox==expdontPopupBinSelectionAfterQuantityChkBox && acthideRateAndGrossChkBox==exphideRateAndGrossChkBox
		&& acthideRateAndGrossfromNormalUsersChkBox==exphideRateAndGrossfromNormalUsersChkBox && acthirePurchaseBehaviourChkBox==exphirePurchaseBehaviourChkBox
		&& actinputAsCounterBillChkBox==expinputAsCounterBillChkBox && actinputBinLocationChkBox==expinputBinLocationChkBox
		&& actinputItemByAttributeChkBox==expinputItemByAttributeChkBox && actqcrequiredforThisDocChkBox==expqcrequiredforThisDocChkBox
		&& actrecalculateTheRateInReceiptFromProductionOnSavingChkBox==exprecalculateTheRateInReceiptFromProductionOnSavingChkBox
		&& actrestricttheitemFromBeingRepeatedInEntryChkBox==exprestricttheitemFromBeingRepeatedInEntryChkBox && actshowVendorAssignedItemsChkBox==expshowVendorAssignedItemsChkBox
		&& actinputBarcodeChkBox==expinputBarcodeChkBox && actshowHeldStockChkBox==expshowHeldStockChkBox && actcrossDocChkBox==expcrossDocChkBox
		&& actallocateStockChkBox==expallocateStockChkBox && actenableRFIDChkBox==expenableRFIDChkBox && actenableQCChkBox==expenableQCChkBox
		&& actdontmakeThertaeZeroWhenItemisChangedChkBox==expdontmakeThertaeZeroWhenItemisChangedChkBox && actbatchPickDropdown==expbatchPickDropdown
		&& actallowExpiredbatchesToBeSelectedChkBox==expallowExpiredbatchesToBeSelectedChkBox && actloadbatchesbeforeQuantityChkBox==exploadbatchesbeforeQuantityChkBox
		&& actreserveStockByBatchesChkBox==expreserveStockByBatchesChkBox && actinputBatchEvenIfStockIsnotUpdatedChkBox==expinputBatchEvenIfStockIsnotUpdatedChkBox
		&& actnotApplicbleChkBox==expnotApplicbleChkBox && actfromTemplateChkBox==expfromTemplateChkBox && actfromFieldChkBox==expfromFieldChkBox
		&& actbinsPickDropDown==expbinsPickDropDown
		
        && actitemRateDropdownList.equals(expitemRateDropdownList) && actbatchDropdownList.equals(expbatchDropdownList) 
        && actbinDropdownList.equals(expbinDropdownList))
	{
		excelReader.setCellData(xlfile, "Sheet2", 282, 9, resPass);
		System.out.println("Test Pass : AvgRate(O) is Displayed In Body Field");
		return true;
	}
	else
	{
		excelReader.setCellData(xlfile, "Sheet2", 282, 9, resFail);
		System.out.println("Test Fail : AvgRate(O) is Not Displayed In Body Field");
		return false;
		
	}
    }
    catch (NoSuchElementException nse)
    {
	  	System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY    :   " + nse.getMessage());
	 	return false;
    }
    catch(TimeoutException te)
    {
	 	System.err.println("CATCH BLOCK : TIME OUT EXECPTION MESSAGE IS DISPLAY :   " + te.getMessage());
	 	return false;
    }
 }		
  
  @FindBy(xpath="//*[@id='btnProperties']")
  private static WebElement itemPropertiesBtn;

      @FindBy(xpath="//*[@id='viewheading']/div/span[2]")
      private static WebElement ItemPropertiesLabel;

	     @FindBy(xpath=" //*[@id='btnPropOk']/i")
	     private static WebElement ItemPropertiesOkBtn;
	     
	     @FindBy(xpath="//*[@id='divMasterProperty']/ul/li/span[2]")
	     private static WebElement ItemPropertiesCloseBtn;
	     
	     @FindBy(xpath="//*[@id='chkDontMaintainStockbyBatch']")
	     private static WebElement PropertiesDontMaintainStockbyBatchChekbox;
	     
	     @FindBy(xpath="//*[@id='chkDontinputBin']")
	     private static WebElement ItemPropertiesDontinputBinChekbox;
	     
	     @FindBy(xpath="//*[@id='chkDontMaintainStocksByRMA']")
	     private static WebElement ItemPropertiesDontMaintainStocksByRMAChekbox;
	     
	     @FindBy(xpath="//*[@id='chkInputBreakupofQuantitiesForEachCategories']")
	     private static WebElement ItemPropertiesInputBreakupofQuantitiesForEachCategoriesChekbox;
	     
	     @FindBy(xpath="//*[@id='chkDonotPrintBill']")
	     private static WebElement ItemPropertiesDonotPrintBillIfRateIsZeroChekbox;
	     
	     @FindBy(xpath="//*[@id='chkNotAllowedforHomeDelivery']")
	     private static WebElement ItemPropertiesNotAllowedforHomeDeliveryChekbox;
	     
	     @FindBy(xpath="//*[@id='chkStarProduct']")
	     private static WebElement ItemPropertiesStarProductChekbox;
	     
	     @FindBy(xpath="//*[@id='chkDonotUpdateStock']")
	     private static WebElement ItemPropertiesDonotUpdateStockChekbox;
	     
	     @FindBy(xpath="//*[@id='chkIgnoreExpiryforthisItem']")
	     private static WebElement ItemPropertiesIgnoreExpiryforthisItemChekbox;
	     
	     @FindBy(xpath="//*[@id='chkIgnoreFractionInQty']")
	     private static WebElement ItemPropertiesIgnoreFractionInQtyChekbox;
	     
	     @FindBy(xpath="//*[@id='rbnNone']")
	     private static WebElement ItemPropertiesNoneRadioBtn;
	     
	     @FindBy(xpath="//*[@id='rbnQualities']")
	     private static WebElement ItemPropertiesQualitesRadioBtn;
	     
	     @FindBy(xpath="//*[@id='rbnReserveBy']")
	     private static WebElement ItemPropertiesReserverByRadioBtn;
	     
	     @FindBy(xpath="//*[@id='chkBatch']")
	     private static WebElement ItemPropertiesBatchChekbox;
	     
	     @FindBy(xpath="//input[@id='chkBin']")
	     private static WebElement ItemPropertiesBinChekbox;
	     
	     @FindBy(xpath="//input[@id='chkRMA']")
	     private static WebElement ItemPropertiesRMAChekbox;
	     
	     @FindBy(xpath="//*[@id='ddlInventoryAllocation']")
	     private static WebElement ItemPropertiesInventoryAllocationDropdown;
	     
	     @FindBy(xpath="//*[@id='ddlStatus']")
	     private static WebElement ItemPropertiesActiveAndInactiveDropdown;
	
	     @FindBy(xpath="//*[@id='chkDoNotRestrictSelectionEvenIfRightsNotAllotted'] ")
	     private static WebElement ItemPropertiesDoNotRestrictSelectionEvenIfRightsNotAllottedChekbox;
	     
	     @FindBy(xpath="//*[@id='chkAllowOtherCompaniesToViewRecords']")
	     private static WebElement ItemPropertiesAllowOtherCompaniesToViewRecordsChekbox;
	     
	     @FindBy(xpath="//span[contains(text(),'Item Properties')]")
	 	 public static WebElement itemPropertiesLabel;

	 	 @FindBy(xpath="//input[@id='chkDontMaintainStockbyBatch']")
	 	 public static WebElement dontMaintainStockbyBatchCheckbox ;
	 	
	 	 @FindBy(xpath="//input[@id='chkDontinputBin']")
	 	 public static WebElement  dontinputBinCheckbox;
	 	
	 	 @FindBy(xpath="//input[@id='chkDontMaintainStocksByRMA']")
	 	 public static WebElement dontMaintainStocksByRMACheckbox ;
	 	
	 	 @FindBy(xpath="//input[@id='chkInputBreakupofQuantitiesForEachCategories']")
	 	 public static WebElement  inputBreakupofQuantitiesForEachCategoriesCheckbox;
	 	
	 	 @FindBy(xpath="//input[@id='chkDonotPrintBill']")
	 	 public static WebElement   doNotPrintInBillIfRateIszeroCheckbox;
	 	
	 	 @FindBy(xpath="//input[@id='chkNotAllowedforHomeDelivery']")
	 	 public static WebElement notAllowedforHomeDeliveryCheckbox ;
	 	
	 	 @FindBy(xpath="//input[@id='chkStarProduct']")
	 	 public static WebElement starProductCheckbox ;
	 	
	 	 @FindBy(xpath="//input[@id='chkDonotUpdateStock']")
	 	 public static WebElement  donotUpdateStockCheckbox;
	 	
	 	 @FindBy(xpath="//input[@id='chkIgnoreExpiryforthisItem']")
	 	 public static WebElement  ignoreExpiryforthisItemCheckBox;
	 	
	 	 @FindBy(xpath="//input[@id='chkIgnoreFractionInQty']")
	 	 public static WebElement  ignoreFractionInQtyCheckbox;
	 	
	 	 @FindBy(xpath="//input[@id='rbnDefault']")
	 	 public static WebElement  defaultRadioBtn;

	 	 @FindBy(xpath="//label[@id='lblNone']")
	 	 public static WebElement reservationNone;
	 	
	 	 @FindBy(xpath="//input[@id='rbnQualities']")
	 	 public static WebElement  qualitiesRadioBtn;
	 	
	 	 @FindBy(xpath="//input[@id='rbnReserveBy']")
	 	 public static WebElement  reserveByRadioBtn;
	 	
	 	 @FindBy(xpath="//input[@id='chkBatch']")
	 	 public static WebElement batchCheckbox ;
	 	
	 	 @FindBy(xpath="//input[@id='chkBin']")
	 	 public static WebElement binCheckbox ;
	 	
	 	 @FindBy(xpath="//input[@id='chkRMA']")
	 	 public static WebElement  RMACheckbox;
	 	
	 	 @FindBy(xpath="//select[@id='ddlInventoryAllocation']")
	 	 public static WebElement inventoryAllocationDropdown ;
	 	
	     @FindBy(xpath="//select[@id='ddlStatus']")
	 	 private static WebElement miscelliniousDropdown;   ///Active or Inactive
	 	
	 	 @FindBy(xpath="//input[@id='chkDoNotRestrictSelectionEvenIfRightsNotAllotted']")
	 	 private static WebElement  DonotrestricttheselectionevenifrightsarenotallottedChkbox;
	 	
	 	 @FindBy(xpath="//input[@id='chkAllowOtherCompaniesToViewRecords']")
	 	 private static WebElement  AllowOtherCompaniesToViewRecordChkbox;
	 	
	 	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[8]/div[1]/label[1]/input[1]")
		public static WebElement selectSecondRow;
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[3]/td[8]/div[1]/label[1]/input[1]")
		public static WebElement selectThirdRow;
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[4]/td[8]/div[1]/label[1]/input[1]")
		public static WebElement selectFourthRow;
		
	     

  
  
  
  
  /*//CUSTOMIZE MATER OPTIONS IN ACCOUNTS MASTER PAGE
  public static boolean checkCustomizeMasterIsDisplayOnClickCustomizeMasterOptionInAccountsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
  {

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			  		 
		 System.out.println("********************************************************** checkCustomizeMasterOption ****************************************************");
		 Thread.sleep(2000);
			
			try
			{
			    getWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizeMasterBtn));
				masterCustamizeMasterBtn.click();
				Thread.sleep(3000);

				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(minusBtn));
				minusBtn.click();
				Thread.sleep(2000);

				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(plusBtn));
				plusBtn.click();
				Thread.sleep(3000);

				// General Tab in Accounts Master Customization
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTab));

				boolean actAccCustomizeGeneralTab             = generalTab.isDisplayed();
				boolean actAccCustomizeSettingsTab            = settingOption.isDisplayed();
				boolean actAccCustomizeDetailsTab             = accountMasterFieldDetailsOption.isDisplayed();
				boolean actAccCustomizePrintLayoutTab         = accountMasterFieldPrintLayoutOption.isDisplayed();
				boolean actAccCustomizeTreeTabUpdateTab       = customizeTabWithTreeTabUpdate.isDisplayed();
				boolean actAccCustomizeDocumentTab            = customizeTabWithDocumentTab.isDisplayed();
				boolean actAccCustomizeCreateTab              = customizeTabWithCreateTreeTab.isDisplayed();
				boolean actAccCustomizeUniqueConstraint       = accountMasterFieldsUniqueConstraintsOption.isDisplayed();
				boolean actAccCustomizeRules                  = RulesOption.isDisplayed();
				boolean actAccCustomizeExternalModules        = rules_ExternalModules.isDisplayed();
				boolean actAccCustomizeInfoPanelCustomization = itemInfoPanelCustomizationTab.isDisplayed();
				boolean actAccCustomizeReports                = accountReportsTab.isDisplayed();
				// Customize Masters > Tabs > MasterFields Count
				int actCustomizeMasterFieldsTab               = customizeMasterFieldsTab.size() - 1;

				boolean expAccCustomizeGeneralTab             = true;
				boolean expAccCustomizeSettingsTab            = true;
				boolean expAccCustomizeDetailsTab             = true;
				boolean expAccCustomizePrintLayoutTab         = true;
				boolean expAccCustomizeTreeTabUpdateTab       = true;
				boolean expAccCustomizeDocumentTab            = true;
				boolean expAccCustomizeCreateTab              = true;
				boolean expAccCustomizeUniqueConstraint       = true;
				boolean expAccCustomizeRules                  = true;
				boolean expAccCustomizeExternalModules        = true;
				boolean expAccCustomizeInfoPanelCustomization = true;
				boolean expAccCustomizeReports                = true;
				int expCustomizeMasterFieldsTab               = 12;

				System.out.println("General Tab Value Actual                        : " + actAccCustomizeGeneralTab+             " Value Expected : " + expAccCustomizeGeneralTab);
				System.out.println("Settings Tab Display Value Actual               : " + actAccCustomizeSettingsTab+            " Value Expected : " + expAccCustomizeSettingsTab);
				System.out.println("Details Tab Display Value Actual                : " + actAccCustomizeDetailsTab+             " Value Expected : " + expAccCustomizeDetailsTab);
				System.out.println("Print Layout Tab Display Value Actual           : " + actAccCustomizePrintLayoutTab+         " Value Expected : " + expAccCustomizePrintLayoutTab);
				System.out.println("Tree Tab Display Value Actual                   : " + actAccCustomizeTreeTabUpdateTab+       " Value Expected : " + expAccCustomizeTreeTabUpdateTab);
				System.out.println("Document Tab Display Value Actual               : " + actAccCustomizeDocumentTab+            " Value Expected : " + expAccCustomizeDocumentTab);
				System.out.println("Create Tab Display Value Actual                 : " + actAccCustomizeCreateTab+              " Value Expected : " + expAccCustomizeCreateTab);
				System.out.println("Unique Constraint Display Value Actual          : " + actAccCustomizeUniqueConstraint+       " Value Expected : " + expAccCustomizeUniqueConstraint);
				System.out.println("Rules Display Value Actual                      : " + actAccCustomizeRules+                  " Value Expected : " + expAccCustomizeRules);
				System.out.println("External Modules Display Value Actual           : " + actAccCustomizeExternalModules+        " Value Expected : " + expAccCustomizeExternalModules);
				System.out.println("Info Pannel Customization Display Value Actual  : " + actAccCustomizeInfoPanelCustomization+ " Value Expected : " + expAccCustomizeInfoPanelCustomization);
				System.out.println("Reports Display Value Actual                    : " + actAccCustomizeReports+                " Value Expected : " + expAccCustomizeReports);
				System.out.println("Count Of Tabs Value Actual                      : " + actCustomizeMasterFieldsTab+           " Value Expected : " + expCustomizeMasterFieldsTab);

   }
  
  */

// #Extra Not Related to Smoke 
		
			@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
			private static WebElement  invTransactionsMenu; 
			
			
			@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
			private static WebElement  invTransStocksMenu; 
	
			
			@FindBy(xpath="//span[contains(text(),'Opening Stocks New')]")
			private static WebElement  openingStocksNew;
			
			@FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
			private static WebElement  openingStocksCustomizeBtn;
			
			@FindBy(xpath="//*[@id='fields_tab']/input")
			private static WebElement  custFieldTab;
			
			@FindBy(xpath="//*[@id='id_rc_search_inputbox']")
			private static WebElement  custSearchTxt;
			
			@FindBy(xpath="//*[@id='id_rc_searchnumeric']/i")
			private static WebElement  custSearchNumericButton;
			
			@FindBy(xpath="//*[@id='id_rc_searchtext']/input")
			private static WebElement  custSearchStringItem;
			
			@FindBy(xpath="//div[contains(text(),'Formatting by Row')]")
			private static WebElement  custFormattingbyRowBtn;
			
			@FindBy(xpath="//div[contains(text(),'Delete layout')]")
			private static WebElement  custDeleteLayoutBtn;
			
			@FindBy(xpath="//div[contains(text(),'Import')]")
			private static WebElement  custImportBtn;
			
			@FindBy(xpath="//div[@class='col-sm-12 toolbar_button_text font-6'][contains(text(),'Export')]")
			private static WebElement  custExportBtn;
			
			@FindBy(xpath="//div[@class='col-sm-12 toolbar_button_text font-6'][contains(text(),'Save')]")
			private static WebElement  custSaveBtn;
			
			@FindBy(xpath="//*[@id='btnCustomizeClose']/div[1]/span")
			private static WebElement  custCancelBtn;
			
			@FindBy(xpath="//input[@id='layoutName']")
			private static WebElement  custLayoutNameTxt;
			
			@FindBy(xpath="//input[@id='chkDefault']")
			private static WebElement  custDefaultChkBox;
			
			@FindBy(xpath="//input[@id='totalWidth']")
			private static WebElement  custTotalWidthTxt;
			
			@FindBy(xpath="//input[@id='chkLandscape']")
			private static WebElement  custLandscapeChkBox;
			
			
			@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th")
			private static List<WebElement>  custBodyHeaderList;
			
			
	 public boolean checkNavigateToOpenigStocksCustomizeOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {		
		 
		 Thread.sleep(2000);
		 inventoryMenu.click();
		 
		 Thread.sleep(2000);
		 invTransactionsMenu.click();
		 
		 Thread.sleep(2000);
		 invTransStocksMenu.click();
		 
		 Thread.sleep(2000);
		 openingStocksNew.click();
		 
		 Thread.sleep(2000);
		 openingStocksCustomizeBtn.click();
		 
		 boolean actcustFieldTab                   = custFieldTab.isDisplayed();
		 boolean actcustSearchTxt                  = custSearchTxt.isDisplayed();
		 boolean actcustSearchNumericButton        = custSearchNumericButton.isDisplayed();
		 boolean actcustSearchStringItem           = custSearchStringItem.isDisplayed();
		 boolean actcustFormattingbyRowBtn         = custFormattingbyRowBtn.isDisplayed();
		 boolean actcustDeleteLayoutBtn            = custDeleteLayoutBtn.isDisplayed();
		 boolean actcustImportBtn                  = custImportBtn.isDisplayed();
		 boolean actcustSaveBtn                    = custSaveBtn.isDisplayed();
		 boolean actcustCancelBtn                  = custCancelBtn.isDisplayed();
		 boolean actcustLayoutNameTxt              = custLayoutNameTxt.isDisplayed();
		 boolean actcustDefaultChkBox              = custDefaultChkBox.isDisplayed();
		 boolean actcustTotalWidthTxt              = custTotalWidthTxt.isDisplayed();
		 boolean actcustLandscapeChkBox            = custLandscapeChkBox.isDisplayed();
		 
		 boolean  expcustFieldTab                  = true;
		 boolean expcustSearchTxt                  = true;
		 boolean expcustSearchNumericButton        = true;
		 boolean expcustSearchStringItem		   = true;
		 boolean expcustFormattingbyRowBtn		   = true;
		 boolean expcustDeleteLayoutBtn            = true;
		 boolean expcustImportBtn				   = true;
		 boolean expcustSaveBtn 				   = true;
		 boolean expcustCancelBtn				   = true;
		 boolean expcustLayoutNameTxt			   = true;
		 boolean expcustDefaultChkBox			   = true;
		 boolean expcustTotalWidthTxt			   = true;
		 boolean expcustLandscapeChkBox			   = true;
		 
		 System.out.println("*************************checkNavigateToOpenigStocksCustomizeOption*****");
		 
		 System.out.println("custFieldTab              : "+actcustFieldTab            +" "+expcustFieldTab);
		 System.out.println("custSearchTxt             : "+actcustSearchTxt           +" "+expcustSearchTxt);
		 System.out.println("custSearchNumericButton   : "+actcustSearchNumericButton +" "+expcustSearchNumericButton);
		 System.out.println("custSearchStringItem      : "+actcustSearchStringItem    +" "+expcustSearchStringItem);
		 System.out.println("custFormattingbyRowBtn    : "+actcustFormattingbyRowBtn  +" "+expcustFormattingbyRowBtn);
		 System.out.println("custDeleteLayoutBtn       : "+actcustDeleteLayoutBtn     +" "+expcustDeleteLayoutBtn);
		 System.out.println("custImportBtn             : "+actcustImportBtn           +" "+expcustImportBtn);
		 System.out.println("custSaveBtn               : "+actcustSaveBtn             +" "+expcustSaveBtn);
		 System.out.println("custCancelBtn             : "+actcustCancelBtn           +" "+expcustCancelBtn);
		 System.out.println("custLayoutNameTxt         : "+actcustLayoutNameTxt       +" "+expcustLayoutNameTxt);
		 System.out.println("custDefaultChkBox         : "+actcustDefaultChkBox       +" "+expcustDefaultChkBox);
		 System.out.println("custTotalWidthTxt         : "+actcustTotalWidthTxt       +" "+expcustTotalWidthTxt);
		 System.out.println("custLandscapeChkBox       : "+actcustLandscapeChkBox     +" "+expcustLandscapeChkBox);
		 
		 

	       ArrayList<String>actcustBodyHeaderList=new ArrayList<String>();
			
			int actcustBodyHeaderListCount=custBodyHeaderList.size();
			int expCustBodyHeaderListCount=11;
			
			System.out.println(" custBodyHeaderListCount  :  "+actcustBodyHeaderListCount);
			
			for (int i = 0; i < actcustBodyHeaderListCount; i++)
			{
				String data=custBodyHeaderList.get(i).getText();
				actcustBodyHeaderList.add(data);
			}
			
			String actcustBodyHeader=actcustBodyHeaderList.toString();
			String expcustBodyHeader="[Date, Voucher Number, Created by, Modified By, Created Date, Modified Date, Created time, Modified Time, Suspended, Authorization Status, Balance link value]";
			
			System.err.println("  Actual custBodyHeaderList : "+actcustBodyHeader);
			System.err.println("  Expected  custBodyHeaderList : "+expcustBodyHeader);
			
		 
		 if (actcustFieldTab==expcustFieldTab && actcustSearchTxt==expcustSearchTxt && 
				 actcustSearchNumericButton==expcustSearchNumericButton && actcustSearchStringItem==expcustSearchStringItem && 
				 actcustFormattingbyRowBtn==expcustFormattingbyRowBtn &&actcustDeleteLayoutBtn==expcustDeleteLayoutBtn && 
				 actcustImportBtn==expcustImportBtn && actcustSaveBtn==expcustSaveBtn && actcustCancelBtn==expcustCancelBtn&& 
				 actcustLayoutNameTxt==expcustLayoutNameTxt && actcustDefaultChkBox==expcustDefaultChkBox && 
				 actcustTotalWidthTxt==expcustTotalWidthTxt &&actcustLandscapeChkBox==expcustLandscapeChkBox && 
				 actcustBodyHeader.equalsIgnoreCase(expcustBodyHeader)&& actcustBodyHeaderListCount==expCustBodyHeaderListCount) 
		 {
			
			 return true;
		 }
		 else 
		 {
               return false;
 		 }
		 
		 
	  }
	 
	 @FindBy(xpath="//*[@id='id_rc_complete_tree_container']/div/ul/li")
	 private static List<WebElement>  custLeftPannelList;
	 
	
		public boolean checkCustomizeLeftPannel()
		{
			
            ArrayList<String>actcustLeftPannelList=new ArrayList<String>();
			
			int actCustLeftPannelListCount=custLeftPannelList.size();
			int expCustBodyHeaderListCount=3;
			
			System.out.println(" custLeftPannelListCount  :  "+actCustLeftPannelListCount);
			
			for (int i = 0; i < actCustLeftPannelListCount; i++)
			{
				String data=custLeftPannelList.get(i).getText();
				actcustLeftPannelList.add(data);
			}
			
			String actcustLeftPannel =  actcustLeftPannelList.toString();
			String expcustLeftPannel = "[   Transaction,     Default Fields,    Programmable Field]";
			
			System.out.println("*******************checkCustomizeLeftPannel****************************");
			
			System.err.println("  Actual custLeftPannelList    : "+actcustLeftPannel);
			System.err.println("  Expected  custLeftPannelList : "+expcustLeftPannel);
			
			
			if (actcustLeftPannel.equalsIgnoreCase(expcustLeftPannel) && 
					actCustLeftPannelListCount==expCustBodyHeaderListCount)
			{
				return true;
			}
			else
			{
				return false;

			}
			
		}
		
		
	 @FindBy(xpath="//*[@id='id_Default_spanPlus']")
	 private static WebElement  custLeftPannelDefaultExpandBtn;
	 
	 @FindBy(xpath="//*[@id='id_prog_spanPlus']")
	 private static WebElement  custLeftPannelProgExpandBtn;
		
	 @FindBy(xpath="//*[@id='id_Trans_spanPlus']")
	 private static WebElement  custLeftPannelTransExpandBtn;
		
	 @FindBy(xpath="//*[@id='id_rc_complete_tree_container']/div[1]/ul/li/ul/li/ul/li/span")
	 private static List<WebElement>  custLeftPannelInnerFieldList;
	
	 @FindBy(xpath="//*[@id='ReportSpecific']/li")
	 private static List<WebElement>  custLeftPannelDefaultFieldInnerFieldList;	
	 
	
	 @FindBy(xpath="//*[@id='ProgFileds']/li")
	 private static List<WebElement>  custLeftPannelProgFiledsInnerFieldList;	
	 
	
	 
	 
	 
	public boolean checkCustomizeLeftPannelInnerFields() throws InterruptedException
	{
		
		
		
			ArrayList<String>custLeftPannelTransInnerFieldList=new ArrayList<String>();
			
			ArrayList<String>custLeftPannelDefaultInnerFieldList=new ArrayList<String>();
			
			ArrayList<String>custLeftPannelProgInnerFieldList=new ArrayList<String>();
			
				
			int actCustLeftPannelListCount=custLeftPannelList.size();
			int expCustLeftPannelListCount=3;
				
			System.out.println("********************************checkCustomizeLeftPannelInnerFields*****************************");
			
			System.out.println(" custLeftPannelListCount  :  "+actCustLeftPannelListCount);
			
				
				
			for (int i = 0; i < actCustLeftPannelListCount; i++)
			{
				String data=custLeftPannelList.get(i).getText();
					
				System.err.println("Left Pannel Fileds : "+data);
					
				if (data.equalsIgnoreCase("   Transaction")) 
				{
					custLeftPannelTransExpandBtn.click();
						
					int actcustLeftPannelInnerFieldListCount=custLeftPannelInnerFieldList.size();
					int expcustLeftPannelInnerFieldListCount=2;
						
					
						
					System.out.println("Transactions Inner Fields Count :  "+actcustLeftPannelInnerFieldListCount+" "+expcustLeftPannelInnerFieldListCount);
						
					for (int j = 0; j < actcustLeftPannelInnerFieldListCount; j++) 
					{
						String InnerFields=custLeftPannelInnerFieldList.get(j).getText();
							
						System.out.println("Transaction InnerFields "+InnerFields);
							
						custLeftPannelTransInnerFieldList.add(InnerFields);
							
					}
						
					
				}
					
					
				if (data.contains("Default Fields")) 
				{
					custLeftPannelDefaultExpandBtn.click();
					
					int actcustLeftPannelDefaultFieldInnerFieldList=custLeftPannelDefaultFieldInnerFieldList.size();
					int expcustLeftPannelDefaultFieldInnerFieldList=11;
						
					
						
					System.out.println("DefaultFields Inner Fields Count :  "+actcustLeftPannelDefaultFieldInnerFieldList+" "+expcustLeftPannelDefaultFieldInnerFieldList);
					
					for (int k = 0; k < actcustLeftPannelDefaultFieldInnerFieldList; k++) 
					{
						String InnerFields=custLeftPannelDefaultFieldInnerFieldList.get(k).getText();
							
						System.out.println("DefaultFields InnerFields "+InnerFields);
							
						custLeftPannelDefaultInnerFieldList.add(InnerFields);
							
					}
					
				}
					
					
				if (data.contains("Programmable Field")) 
				{
					custLeftPannelProgExpandBtn.click();
						
					int actcustLeftPannelProgFiledsInnerFieldList=custLeftPannelProgFiledsInnerFieldList.size();
					int expcustLeftPannelProgFiledsInnerFieldList=1;
								
					
						
					System.out.println("Programmable Field Inner Fields Count :  "+actcustLeftPannelProgFiledsInnerFieldList+" "+expcustLeftPannelProgFiledsInnerFieldList);
						
					for (int m = 0; m < actcustLeftPannelProgFiledsInnerFieldList; m++) 
					{
						String InnerFields=custLeftPannelProgFiledsInnerFieldList.get(m).getText();
							
						System.out.println("Programmable Field InnerFields "+InnerFields);
							
						custLeftPannelProgInnerFieldList.add(InnerFields);
							
					}
					
				}
			}
				
			System.err.println("custLeftPannelTransInnerFieldList :"+custLeftPannelTransInnerFieldList);
			System.err.println("custLeftPannelDefaultInnerFieldList :"+custLeftPannelDefaultInnerFieldList);
			System.err.println("custLeftPannelProgInnerFieldList :"+custLeftPannelProgInnerFieldList);
				
			String actcustLeftPannelTransInnerFieldList=custLeftPannelTransInnerFieldList.toString();
			String actcustLeftPannelDefaultInnerFieldList=custLeftPannelDefaultInnerFieldList.toString();
			String actcustLeftPannelProgInnerFieldList=custLeftPannelProgInnerFieldList.toString();
				
			String expcustLeftPannelTransInnerFieldList="[Transaction Fields, Extra Fields]";
			String expcustLeftPannelDefaultInnerFieldList="[  Date,   Voucher Number,   Created by,   Modified By,   Created Date,   Modified Date,   Created time,   Modified Time,   Suspended,   Authorization Status,   Balance link value]";
			String expcustLeftPannelProgInnerFieldList="[  Programmable Field]";
				
			if (actcustLeftPannelTransInnerFieldList.equalsIgnoreCase(expcustLeftPannelTransInnerFieldList) && 
					actcustLeftPannelDefaultInnerFieldList.equalsIgnoreCase(expcustLeftPannelDefaultInnerFieldList) && 
					actcustLeftPannelProgInnerFieldList.equalsIgnoreCase(expcustLeftPannelProgInnerFieldList) && 
					actCustLeftPannelListCount==expCustLeftPannelListCount ) 
			{
				
				return true;
			}
			else 
			{
			
                return false;
			}
		}
		
		
		
	
	 @FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th[4]")
	 private static WebElement  modifiedHeaderTab;
	
	 @FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th[13]")
	 private static WebElement  warehouseCodeHeaderTxt;
	 
	 
	 @FindBy(xpath="//input[@id='HidethisColumn']")
	 private static WebElement  hideThisColumnChkbox;	
	 
	 @FindBy(xpath="//*[@id='tblHeadTransRender']/tr/th")
	 private static List<WebElement>  homePageBodyHeaderList;	
	 
	
	 
		
		public boolean checkHidingFieldCustomization() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
		{
			
			
		
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custCancelBtn));
			custCancelBtn.click();
			
			
			Thread.sleep(2000);
			
			int acthomePageBodyHeaderListCountBeforeHide=homePageBodyHeaderList.size();
			int exphomePageBodyHeaderListCountBeforeHide=13;
				
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksCustomizeBtn));
			openingStocksCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(modifiedHeaderTab));
			modifiedHeaderTab.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideThisColumnChkbox));
			hideThisColumnChkbox.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideThisColumnChkbox));
			boolean  actHideThisColumnChkbox=hideThisColumnChkbox.isSelected();
			boolean  expHideThisColumnChkbox=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
			custSaveBtn.click();
			
			String expMessage = "Data saved successfully";
			boolean actSaveMessage = checkValidationMessageboolean(expMessage);
			boolean expSaveMessage = true;
			
			Thread.sleep(2000);
			
			int acthomePageBodyHeaderListCountAfterHiding=homePageBodyHeaderList.size();
			int exphomePageBodyHeaderListCountAfterHiding=12;
			
			System.out.println("*****************************************checkHidingFieldCustomization************************************");
			
			System.out.println(" homePageBodyHeaderListCountBeforeHide :  "+acthomePageBodyHeaderListCountBeforeHide+" Value Expected : "+exphomePageBodyHeaderListCountBeforeHide);
			System.out.println(" homePageBodyHeaderListCountAfterHide  :  "+acthomePageBodyHeaderListCountAfterHiding+" Value Expected : "+exphomePageBodyHeaderListCountAfterHiding);
			System.out.println(" Save Message                          :  "+actSaveMessage                           +" Value Expected : "+expSaveMessage);
			
			if (acthomePageBodyHeaderListCountBeforeHide==exphomePageBodyHeaderListCountBeforeHide && 
					acthomePageBodyHeaderListCountAfterHiding==exphomePageBodyHeaderListCountAfterHiding && 
					actSaveMessage==expSaveMessage)
			{
				
				System.out.println(" Test Pass :  Hiding column " );
				return true;
			}
			else
			{
				System.out.println(" Test Fail :  Hiding column " );
                return false;
			}
			
		}
		
		
		 @FindBy(xpath="//span[contains(text(),'Extra Fields')]")
		 private static WebElement  custTransExtraFieldExpandBtn;
		
		 @FindBy(xpath="//li[@id='rd_customization_tree3258']//span[contains(text(),'Warehouse')]")
		 private static WebElement  warehouseExpandBtn;
		
		 @FindBy(xpath="//*[@id='rd_customization_tree3259']")
		 private static WebElement  warehouseName;
		
		 @FindBy(xpath="//li[@id='rd_customization_tree3260']")
		 private static WebElement  warehouseCode;
		
		 @FindBy(xpath="//input[@id='ColumnHeading']")
		 private static WebElement  columnHeadingTxt;
		
		
		public boolean checkAddingExtraFieldInCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
	        Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksCustomizeBtn));
			openingStocksCustomizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custLeftPannelTransExpandBtn));
			custLeftPannelTransExpandBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custTransExtraFieldExpandBtn));
			custTransExtraFieldExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseExpandBtn));
			warehouseExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseName));
			
			getAction().doubleClick(warehouseName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(columnHeadingTxt));
			String actcolumnHeadingNameTxt=columnHeadingTxt.getAttribute("value");
			String expcolumnHeadingNameTxt="Warehouse Name";
				
			getAction().doubleClick(warehouseCode).build().perform();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(columnHeadingTxt));
			String actcolumnHeadingCodeTxt=columnHeadingTxt.getAttribute("value");
			String expcolumnHeadingCodeTxt="Warehouse Code";
				
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
			custSaveBtn.click();
			
			String expMessage = "Data saved successfully";
			boolean actSaveMessage = checkValidationMessageboolean(expMessage);
			boolean expSaveMessage = true;
			
			Thread.sleep(2000);
			
			int acthomePageBodyHeaderListCount=homePageBodyHeaderList.size();
			int exphomePageBodyHeaderListCount=14;
			
			System.out.println("***********************************checkAddingExtraFieldInCustomization********************************");
			
			System.out.println(" homePageBodyHeaderListCountAfterHide  :  "+acthomePageBodyHeaderListCount+" Value Expected : "+exphomePageBodyHeaderListCount);
			System.out.println(" ColumnHeadingTxt                      :  "+actcolumnHeadingNameTxt       +" Value Expected : "+expcolumnHeadingNameTxt);
			System.out.println(" ColumnHeadingTxt                      :  "+actcolumnHeadingCodeTxt       +" Value Expected : "+expcolumnHeadingCodeTxt);
			System.out.println(" Save Message                          :  "+actSaveMessage                +" Value Expected : "+expSaveMessage);
			
			if (actcolumnHeadingNameTxt.equalsIgnoreCase(expcolumnHeadingNameTxt) && actcolumnHeadingCodeTxt.equalsIgnoreCase(expcolumnHeadingCodeTxt) && 
					actSaveMessage==expSaveMessage && acthomePageBodyHeaderListCount==exphomePageBodyHeaderListCount) 
			{
				System.out.println(" Test Pass:  Extra Filed Added Successfully ");
				return true;
				
			}
			else 
			{
				System.out.println(" Test Pass:  Extra Filed Not Added Successfully ");
                 return false;
			}
		}
		
		 @FindBy(xpath="//a[contains(text(),'Remove Column')]")
		 private static WebElement  custExtraFieldRemoveBtn;
		
		
		
		public boolean checkDeleteExtraFieldFromHomePageBodyHeader() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
           Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksCustomizeBtn));
			openingStocksCustomizeBtn.click();
			
			

	       ArrayList<String>actcustBodyHeaderList=new ArrayList<String>();
			
			int actcustBodyHeaderListCount=custBodyHeaderList.size();
		
			
			
			for (int i = 0; i < actcustBodyHeaderListCount; i++)
			{
				String data=custBodyHeaderList.get(i).getText();
				
				if (data.contains("Warehouse Code")) 
				{
					custBodyHeaderList.get(i).click();
					
				}
			}
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custExtraFieldRemoveBtn));
			custExtraFieldRemoveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
			custSaveBtn.click();
			
			String expMessage = "Data saved successfully";
			boolean actSaveMessage = checkValidationMessageboolean(expMessage);
			boolean expSaveMessage = true;
			
			Thread.sleep(2000);
			
			int acthomePageBodyHeaderListCount=homePageBodyHeaderList.size();
			int exphomePageBodyHeaderListCount=13;
			
			
	        System.out.println("*********************************checkDeleteExtraFieldFromHomePageBodyHeader***********************");
			System.out.println(" HomePageBodyHeaderList  :  "+acthomePageBodyHeaderListCount+" Value Expected : "+exphomePageBodyHeaderListCount);
			System.out.println(" Save Message                          :  "+actSaveMessage  +" Value Expected : "+expSaveMessage);
			
			if (actSaveMessage==expSaveMessage && acthomePageBodyHeaderListCount==exphomePageBodyHeaderListCount) 
			{
				
				System.out.println(" Test Pass:    Extra Field Removed Successfully"   );
				return true;
			}
			else 
			{
				System.out.println(" Test Fail:    Extra Field Removed Successfully"   );
				return false;
			}
			
			
			
		}
		
		
		
	// Configure Master
		

		  public static String checkValidationMessagebooleanString(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(validationUpdatingConfirmationMessage));
				String actErrorMessage=validationUpdatingConfirmationMessage.getText();
				String expErrorMessage=ExpMessage;
				
				try
				{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newErrorMessageCloseBtn));
					newErrorMessageCloseBtn.click();
					
					System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
					
					return actErrorMessage;
				}
				catch(Exception ee)
				{
					
					System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
					
					return actErrorMessage;
				}
			}
			catch(Exception e)
			{
				System.err.println("Error Message NOT Found or NOT Clickable");
				System.err.println(e.getMessage());
		                
				String Exception=e.getMessage();
				
				return Exception;	
			} 
		  }	
		
		
	@FindBy(xpath="//*[@id='btn_common_header']/div/div[2]")
	private static List<WebElement> configMastersRibbonControl;
	
	@FindBy(xpath="//*[@id='MasterTabs']/ul/li/a/span")
	private static List<WebElement> configMastersHeaderList;
	
	@FindBy(xpath="//span[@class='font-5 padding-left10'][contains(text(),'Definition')]")
	private static WebElement definitionTab;
	
	@FindBy(xpath="//div[@id='MasterTabs']//li[2]//a[1]")
	private static WebElement customizationTab;
	
	@FindBy(xpath="//span[contains(text(),'Views')]")
	private static WebElement viewsTab;
	
	@FindBy(xpath="//span[contains(text(),'Tree Customization')]")
	private static WebElement treeCustomizationTab;
	
	
	
	@FindBy(xpath="//select[@id='ddlModule']")
	private static WebElement moduleDropdown;
	
	@FindBy(xpath="//input[@id='txtMasterName']")
	private static WebElement nameComboBox;
	
	@FindBy(xpath="//tbody[@id='txtMasterName_table_data_body']/tr/td")
	private static List<WebElement> nameComboBoxList;
	
	@FindBy(xpath="//input[@id='txtMasterCaption']")
	private static WebElement captionTxt;
	
	@FindBy(xpath="//input[@id='rdoSearchByName_master']")
	private static WebElement searchByNameRadioBtn;
	
	@FindBy(xpath="//input[@id='rdoSearchByCode_master']")
	private static WebElement searchByCodeRadioBtn;
	
	@FindBy(xpath="//input[@id='chkAllowRivisions']")
	private static WebElement allowReservationChkBox;
	
	@FindBy(xpath="//label[contains(text(),'Default')]")
	private static WebElement defaultChkBox;
	
	@FindBy(xpath="//input[@id='chkGroupMandatory']")
	private static WebElement groupMandatoryChkBox;
	
	@FindBy(xpath="//input[@id='chkPickCode']")
	private static WebElement pickCodeChkBox;
	
	
	@FindBy(xpath="//*[@id='divDependency_Master']/table/thead/tr/td")
	private static List<WebElement> showDependencyHeader;
	
	@FindBy(xpath="//a[contains(text(),'Dependent')]")
	private static WebElement dependentTab;
	
	@FindBy(xpath="//a[contains(text(),'Used')]")
	private static WebElement usedTab;
	
	
	
	
	@FindBy(xpath="//div[@class='msTreeMenuContainer']//div//span[@class='icon-left-and-right-panel-icon icon-font3 clsMenus pull-right']")
	private static WebElement menuMinimizeBtn;
	
	@FindBy(xpath="//span[@id='altMenu_Icon']")
	private static WebElement menuExpansionBtn;
	
	@FindBy(xpath="//div[@id='masterTreeMenu']//ul//li//a//span")
	private static List<WebElement> menuList;
	
	@FindBy(xpath="//div[@id='masterTreeMenu']/ul//li/a/i")
	private static List<WebElement> menuPlus;
	
		
		
	public boolean checkconfigureMasters() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
			settingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsConfigureMasters));
			settingsConfigureMasters.click();
			
			
			int configMastersRibbonControlCount = configMastersRibbonControl.size();
			
			ArrayList<String> configMastersRibbonControlArray = new ArrayList<String>();
			
			for(int i=0;i<configMastersRibbonControlCount;i++)
			{
				String data = configMastersRibbonControl.get(i).getText();
				configMastersRibbonControlArray.add(data);
			}
		    		
			String actconfigMastersRibbonControl = configMastersRibbonControlArray.toString();
			
			String expconfigMastersRibbonControl = "[Save, Delete, Export, Import, Close]";
			
			System.out.println("configMastersRibbonControl Actual   : " + actconfigMastersRibbonControl);
			System.out.println("configMastersRibbonControl Expected : " + expconfigMastersRibbonControl);
			
			int configMastersHeaderListCount = configMastersHeaderList.size();
			
			ArrayList<String> configMastersHeaderListArray = new ArrayList<String>();
			
			for(int i=0;i<configMastersHeaderListCount;i++)
			{
				String data = configMastersHeaderList.get(i).getText();
				configMastersHeaderListArray.add(data);
			}
		    		
			String actconfigMastersHeaderList = configMastersHeaderListArray.toString();
			
			String expconfigMastersHeaderList	 = "[Definition, Customization, Views, Tree Customization]";
			
			System.out.println("configMastersHeaderList Actual   : " + actconfigMastersHeaderList);
			System.out.println("configMastersHeaderList Expected : " + expconfigMastersHeaderList);
			
			
			boolean actmoduleDropdown       	= moduleDropdown.isDisplayed();
			boolean actnameComboBox         	= nameComboBox.isDisplayed();
			boolean actcaptionTxt 				= captionTxt.isDisplayed();
			boolean actsearchByNameRadioBtn 	= searchByNameRadioBtn.isDisplayed();
			boolean actsearchByCodeRadioBtn 	= searchByCodeRadioBtn.isDisplayed();
			boolean actallowReservationChkBox 	= allowReservationChkBox.isDisplayed();
			boolean actdefaultChkBox 			= defaultChkBox.isDisplayed()==false;
			boolean actgroupMandatoryChkBox 	= groupMandatoryChkBox.isDisplayed();
			boolean actpickCodeChkBox 			= pickCodeChkBox.isDisplayed();
			boolean actdependentTab 			= dependentTab.isDisplayed();
			boolean actusedTab 					= usedTab.isDisplayed();
			boolean actmenuMinimizeBtn 			= menuMinimizeBtn.isDisplayed();
			
			boolean expmoduleDropdown       	= true;
			boolean expnameComboBox         	= true;
			boolean expcaptionTxt 				= true;
			boolean expsearchByNameRadioBtn 	= true;
			boolean expsearchByCodeRadioBtn 	= true;
			boolean expallowReservationChkBox 	= true;
			boolean expdefaultChkBox 			= true;
			boolean expgroupMandatoryChkBox 	= true;
			boolean exppickCodeChkBox 			= true;
			boolean expdependentTab 			= true;
			boolean expusedTab 					= true;
			boolean expmenuMinimizeBtn 			= true;
			boolean expmenuExpansionBtn 		= true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(menuMinimizeBtn));
			menuMinimizeBtn.click();
			
			boolean actmenuExpansionBtn 		= menuExpansionBtn.isDisplayed();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(menuExpansionBtn));
			menuExpansionBtn.click();
			
			
			int showDependencyHeaderCount = showDependencyHeader.size();
			
			ArrayList<String> showDependencyHeaderArray = new ArrayList<String>();
			
			for(int i=0;i<showDependencyHeaderCount;i++)
			{
				String data = showDependencyHeader.get(i).getText();
				showDependencyHeaderArray.add(data);
			}
		    		
			String actshowDependencyHeader = showDependencyHeaderArray.toString();
			
			String expshowDependencyHeader = "[Master Name, Tab Caption, Field Caption, Field Type]";
			
			System.out.println("showDependencyHeader Actual   : " + actshowDependencyHeader);
			System.out.println("showDependencyHeader Expected : " + expshowDependencyHeader);
			
			int menuPlusCount = menuPlus.size();
			int menuListCount = menuList.size();
			
			System.err.println("menuPlusCount : " + menuPlusCount);
			
			ArrayList<String> menuListArray = new ArrayList<String>();
			
			for(int i=0;i<menuPlusCount;i++)
			{
				if(menuPlus.get(i).getAttribute("class").contains("icon-expand"))
				{
					menuPlus.get(i).click();
				}
				String data = menuList.get(i).getText();
				menuListArray.add(data);
			}
		    		
			String actmenuList = menuListArray.toString();
			
			String expmenuList = "[Home, Company, Open Company, New Company, Create Company, Create Duplicate Company, Create Company Template, Edit Company, Delete Company, Year End Process, Close Company, Update Next Year Accounts, Transfer Balances to Profit and Loss Account, Transfer Balances to P&L, Update COGS, Inter Company Transactions, Inter Company Settings, Mapping, Inbox/Outbox, Offline Import, Synchronization, Organization Registration, Synchronization Definition, Schedule Import, Sync Export/Import Settings, Erase Sync Files, Sync Rejected Data, Import Settings-Pull Process, Sales Performance by Outlet, Offline Import, Sync Export/Import Report, Sync Missing Master Records, Re Sync Missing Vouchers, Revert To Previous Sync, Server to Outlet Sync Report, Server Settings, Security, User license allocation, Network Policy, Password policy, Create Profile, Create Role, Create User, Change Password, Update Personal Info, Usage Log, Currently Logged Users, User rights report, Enable Fingerprint, Role rights report, Profile rights report, Fingerprint Setting, Masters, Account, Currency, Currency Master, Exchange Rate, Exchange Rate History, Item, Item, Units, Unit Conversion, Seller Price Book, Buyer Price Book, Barcode Definition, Schemes, Schemes, Free Items, Scheme Sets, Discount Definition, Payment Discount, Member Discount, Employee Discount, Schemes Mapping to Customers, MRP, Plant, Supply Area, Maintenance Parameter, Safety Instructions, Capacity, Work Center, Holiday, Process, QC, Qc failure reason, QC Parameters, Warehouse Management System, Point of Sale, Member, Member Card Series Registration, Member Points Definition, Member Points Opening Balance, Member Type, Member, Member Card Definition, Gift Voucher, Gift Voucher Registration, Gift Voucher Definition, Discount Voucher, Discount Voucher Registration, Discount Voucher Definition, Table Management, Floor, Section, Table, Guest, Void Remarks, Kitting, Dekitting, Outlet, Counter, Category, Bank Card Type, Return Remarks, Employee Discount Definition, Kitchen Display System, Delivery Time Interval, E- Payment, Order Type, Maintainance, Break down standard reason, Payroll, Employee, Designation, Position, Qualification, Specialization, Nationality, Skill Type, Skill, SourceType, Source, RoundType, Grade, Scale, Course Type, Course, Trainer, Airline Sector, Venue, Request Types, Expense Claims, Employee Bank, Travel Agent, Job Grade, TDS Annexure, Department, Warehouse, Cost Center, Location, Region, Country, State, City, Bins, Insurance, Fixed Assets, Tax Code, Place of supply, Jurisdiction, Settings, Configure Transactions, Transaction Authorization, Schedule Manager, Pricebook Authorization, Authorization, Configure Masters, Master Authorization, Dashboard, Credit Limit Authorization, Design Workflow, Settings Wizard, Export/Import Settings, Batch Code Generation, Map Credit Limit, VAT Tax Code, Customer Portal Admin, Budget Authorization, Payment Gateway Integration, AI Setup, Fixed Asset Authorization, Data Management, Reindex, Backup, Restore, Maintain Database, Erase All, Archive, UnArchive, Lock/Unlock Database, Audit Log Delete Manual, Resave Vouchers, Utilities, Calendar, Currently open reports, External Reports, Report Designer, Batch Report Printing, Schedule Report, Renumber Vouchers, Repost Vouchers, Adjust Foreign Exchange, Transaction Import, App Menus Customization, Data Statistics, Resource Manager, Electronic data interchange, EDI Generation, Standard Rate, Task Manager, Authorization Details, Auto Adjust, Check References, ReGroup, Manual Adjustment, Release Reservation, Authorization Audit Report, Transaction Authorization Audit Report, Budget Authorization Audit Report, Integrations, Convert Database, Financials, Transactions, Cash and Bank, Receipts, Payments, Petty Cash, Post-Dated Receipts, Post-Dated Payments, Receipts FIFO, Receipts ARAP, Receipts VAT, Payments VAT, PettyCash VAT, Define Cheque Series, Cheque book register report, Cancel Cheque, Purchases, Purchases Vouchers, Purchases Returns, Purchases Voucher VAT, Purchases Returns VAT, Purchase Vouchers N, Sales, Sales Invoices, Sales Returns, Auto Sales Invoice, Sales Invoice N, Sales Invoices VAT, Sales Returns VAT, Cash Sales, Hire-Purchase Sales, Journals, Journal Entries, Forex JV, Inter-Departmental JV, Non-Standard Journal Entries, Debit Notes, Debit Notes (Linewise), JV VAT, Non JV VAT, Debit Notes VAT, Credit Notes VAT, Credit Notes, Credit Notes (Linewise)/Payroll, Opening Balances, Fixed Asset Depreciation Voucher, Manufacturing, Auto Postings, Recurring Journal, Post Recurring Journal, Recurring Journal Template, Post Interest, Convert Matured PDCs, Assign PDC Limit, Stock Replenishment, Credit Management, Payment Terms, Finance Terms, Reminder Terms, Send Reminder, Delinquency, Questionnaire, Delinquency Mgmt, Credit Approval, Reports, Ledger, Ledger detail, Sub Ledger, Cash and Bank Books, Cash Book, Bank Book, Petty Cash Book, Day Book, Bank Reconciliation, Bank Reconciliation Import, Customer Vendor Reconciliation, Bank Reconciliation Statement, Cheque Discounting, Sales Report, Sales Register, Sales Return Register, Summary Sales Book, Monthly Sales Book, Top Customers List, Purchase Report, Purchase Register, Purchase Return Register, Summary Purchase Book, VAT, Purchase Account Report, VAT detailed report, Sales Account Report, Sales by Customer Report, VAT summary report, VAT audit file, VAT return report, Monthly CST Return Report, Sales advance VAT report, Registers, Opening Balance Register, Journal Entries Register, Credit Note Register, Debit Note Register, Receipt Register, Payment Register, PDC Receipts Register, PDC Payments Register, Entry Journal Register, Entry journal detail report, Sales and Purchases Analysis, Sales Grouped by Customer, Sales Grouped by Product, Sales Grouped by Department, Purchases Grouped by Vendor, Purchases Grouped by Product, Purchases Grouped by Department, Miscellaneous Analysis, Peak and Low Balances, Comprative Analysis, Transactions Type Analysis, ABC Analysis, Interest Calculation, Master Informations, Master Info, Product Label, Unit Conversion, Skid Definition, Audit Trail, Audit Trail transactions, Audit Trail logins, Account Query, Transaction authorization report, Fixed Asset, Final Accounts, Trial Balance, Profit and Loss, Trading Account, Trading and Profit and Loss, Balance Sheet, Final Account Schedules, Fund Flow, Cash Flow, Cash flow calendar, Cash Flow Analysis, Advance Cash Flow, Budget Report, Budget Planning, Income Expense Trends, Receivable Payable report, Receivable and Payable Analysis, Customer Detail, Customer Listing of Outstanding Bills, Customer Statements, Customer Due Date Analysis, Customer Ageing Details, Customer Detail Ageing by Due Date, Customer Overdue Analysis, Customer Summary, Customer Ageing Summary, Customer Summary Ageing by Due Date, Customer Overdue Summary, Customer bill-wise summary, Vendor Detail, Vendor Listing of Outstanding Bills, Vendor Statements, Vendor Due Date Analysis, Vendor Ageing Details, Vendor Detail Ageing by Due Date, Vendor Overdue Analysis, Vendor Summary, Vendor Ageing Summary, Vendor Summary Ageing by Due Date, Vendor Overdue Summary, Vendor bill-wise summary, Letter of Credit, Release Letter of Credit, Budget, Define Budget, Confirm Budget, Revise Budget, Append Budget, Add / Reduce Budget, Transfer Budget, Approve Budget, Rejected Budges, Update SpillOver, Budget Reports, Advanced Budget Report, Revised Budget Report, Online Payments, Online Bank Registration, Issue Payment to Bank, Reconcile Payments, Online Bank Reconcilation, Bank Statement, Inventory, Transactions, Purchases, Request for Quote, Purchases Quotations, Purchases Orders, Material Receipt Notes, Sales, Sales Quotations, Delivery Notes, POS Sales, Production Orders, Sales Orders, Auto Sales Order, Stocks, Shortages in Stock, Excesses in Stocks, Stock Transfers, Opening Stocks, Material Requisition, Stock Transfer New, Opening Stocks New, Stock adjustment, Hold/Unhold Stock, Stock Reconciliation, Stock Allocation, Reports, Item Query, Stock Ledger, Opening Stocks Register, Stock Statement, Stock movement, Multi Level Stock Movement, Virtual Stock Analysis, Stock Valuation, Stock report by Tag, ABC Analysis, Stock Analysis by Batch, Stock Analysis by RMA, Bins Report, Stock Details by Bins, Stock Balances by Bins, Stock Balances by Item by Bins, Expired Stock by Bins, Stock balance by warehouse, Stock ageing analysis, Ageing Analysis, Ageing analysis by batch, Ageing analysis by RMA, Ageing Stock by Bins, Ageing by Item by bins, Reorder Report, Fast Moving Item, Slow Moving Item, Peak/Low Balances, Best Selling Item, Raise Indent Item with Low Stock, Stock transfer report, Raise request for quote, Stock reservation report, Transaction type-wise stock report, Actual consumption report, General ledger and Inventory mismatch report, Negitive Batch List, Order Management, Analysis of Linked/Unlinked Documents, Listing of Documents, Listing of Documents by Due Date, Ageing of Pending Documents, Ageing of Pending Documents by Due Date, Link chain analysis, Pending voucher report, Quotation Analysis, Purchases Quotation, Sales Quotation, Lowest Quotation, Purchases Orders, Sales Orders, Pending Link Status, Fixed Asset, Transactions, Asset Usage, Add Asset Value, Reduce Asset Value, Disposal Of Asset, Post Depreciation Entries, Capitalization of Asset, Multiple Asset Usage, Add Depreciation Years, Transfer Of Asset Request, Transfer Of Asset, Reports, Transfer of asset, Assets Usage, Component Added, Add Assets value, Component Reduced, Reduce asset value, Disposal of Asset, Fixed Asset Report, Depreciation Schedule, Disposal Of Asset Request, Authorize Fixed Assets, Production, Transactions, Bill of Material, Issues to Production, Job Order, Receipts from Production, Planned Independent Requirement, Production Process, Pending production order, Job Work Issues, Production Orders, Job Work Receipts, Returns from Shop Floor, Refresh Rates, Reports, Consumption Register, Production Register, BOM Detail Report, Consumption Summary, Production Summary, Replenishment Report, Work in Process Report, Work in Process Summary, Item-wise Work in Process, Standard Production Cost, Production Analysis by Production Batch, Production Costing and Variance Analysis, Production Forecasting Plan, Production order status Report, MRP Settings, Production Order Series, Point of Sale, Main Screen, Point of Sale, Point of Sale Customization, Main Screen, Main Screen Customization, POS Reports, Retail Sales Reports, Retail Sales Analysis, Retail Sales by Outlet, Retail Sales by Counter, Retail Sales by Item, Retail Sales Transaction Analysis, Summary Sales Report, Sales by Date, Sales by Outlet, Sales by Item, Sales by Quantity, Sales by Amount, Sales by Quantity by Amount, Sales Walkin/Preorder by Sales, Payment by Mode Sales, Payment by Mode Summary, Preorder Reports, Sales Detail Reports, Sales Detail by Order, Refund Order Report, Sales Summary Report by Quantity, Sales Summary Report by Amount, Preorder Payment Reports, Payment Collection Report, Payment Collection by Payment Mode, Payment Collection by Payment No, Member Reports, Membership Recruitment, Membership Recruitment by Date, Member Frequency Visit, Member Birthday Report, Sales Info by Member, Member Points Reports, Points Report, Points Expiry Report, Maximum Points Report, Minimum Points Report, Item Reports, Fast Moving Items, Slow Moving Items, Non Moving Items, Fast Moving Items by Outlet, Slow Moving Items by Outlet, Non Moving Items by Outlet, Cash Reports, Cash Collections, Cash Discrepancy, Stock Reports, Stock In and Out, Stock Status by Uutlet, Periodic Sales Reports, Hourly Sales by Outlet, Daily Sales by Outlet, Daily Sales by Bank by Outlet, Monthly Sales by Outlet, Last Year Comparison Reports, Sales Info by Quantity, Sales Info by Amount, Sales Info by Quantity and Amount, Best Outlets Performance, Worst Outlets Performance, Miscellaneous Reports, X-Reading, Outlet Status, EOD Summary Report, Restaurant Reports, Daily Sales, Sales by Menu Category, Discount by Waiter, Clerk-Wise Sales, Table Management, Table Layout, Table Reservation, Cancel Reservation, Move Reservation, Kitchen Display System Configuration, Utilities, Preferences, Gift Voucher Sale, Gift Voucher Transfer, Discount Voucher Transfer, Credit Note, Message Broadcasting, Item Restrictions In Bill, Bill Printing Format, Printer Config, Day End, Reprint Day End, Re Sync Missing Member Points, BBQ Conversion, Products Mapping, BBQ Conversion, Member Prepaid Topup, Quality Control, Transactions, Test Definition, Map Test To Products, Requisition, Sample Check, Total Check, Quantity Breakup, Break Down, Modify Test Result, Reports, Test Definition Report, Test Item Mapping, QC Requisition, QC Sample Testing]";
			
			System.out.println("menuList Actual   : " + actmenuList);
			System.out.println("menuList Expected : " + expmenuList);
			
			System.out.println("moduleDropdown Actual         : " + actmoduleDropdown);
			System.out.println("nameComboBox Actual           : " + actnameComboBox);
			System.out.println("captionTxt Actual             : " + actcaptionTxt);
			System.out.println("searchByNameRadioBtn Actual   : " + actsearchByNameRadioBtn);
			System.out.println("searchByCodeRadioBtn Actual   : " + actsearchByCodeRadioBtn);
			System.out.println("allowReservationChkBox Actual : " + actallowReservationChkBox);
			System.out.println("defaultChkBox Actual          : " + actdefaultChkBox);
			System.out.println("groupMandatoryChkBox Actual   : " + actgroupMandatoryChkBox);
			System.out.println("pickCodeChkBox Actual         : " + actpickCodeChkBox);
			System.out.println("dependentTab Actual           : " + actdependentTab);
			System.out.println("usedTab Actual                : " + actusedTab);
			System.out.println("menuMinimizeBtn Actual        : " + actmenuMinimizeBtn);
			System.out.println("menuExpansionBtn Actual       : " + actmenuExpansionBtn);
			
			boolean actMethod = actmoduleDropdown==expmoduleDropdown && actnameComboBox==expnameComboBox && actcaptionTxt==expcaptionTxt
								&& actsearchByNameRadioBtn==expsearchByNameRadioBtn && actsearchByCodeRadioBtn==expsearchByCodeRadioBtn
								&& actallowReservationChkBox==expallowReservationChkBox && actdefaultChkBox==expdefaultChkBox
								&& actgroupMandatoryChkBox==expgroupMandatoryChkBox && actpickCodeChkBox==exppickCodeChkBox
								&& actdependentTab==expdependentTab && actusedTab==expusedTab && actmenuExpansionBtn==expmenuExpansionBtn;
				
			String actResult = Boolean.toString(actMethod);
			
			System.out.println("ActMethod : " + actMethod);
			
			if(actMethod==true && actconfigMastersRibbonControl.equalsIgnoreCase(expconfigMastersRibbonControl)
					&& actconfigMastersHeaderList.equalsIgnoreCase(expconfigMastersHeaderList) 
					&& actshowDependencyHeader.equalsIgnoreCase(expshowDependencyHeader)
					&& actmenuList.equalsIgnoreCase(expmenuList))
			{	
				System.out.println("Test Pass : Bin Popup Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 90, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}	
	}
	
	
	@FindBy(xpath="//div[contains(text(),'Save')]")
	private static WebElement cmSaveBtn;
	
	public boolean checkMandatoryandSavingAMaster() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizationTab));
			customizationTab.click();
			
			String expMessageOnClickingCustomizeTab = "Enter Master Name Or Create new Master";
			
			String actMessageOnClickingCustomizeTab = checkValidationMessagebooleanString(expMessageOnClickingCustomizeTab);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmSaveBtn));
			cmSaveBtn.click();
			
			String expMessageOnSaveEmpty = "Select menu";
			
			String actMessageOnSaveEmpty = checkValidationMessagebooleanString(expMessageOnSaveEmpty);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameComboBox));
			nameComboBox.click();
			nameComboBox.sendKeys("Test");
			nameComboBox.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmSaveBtn));
			cmSaveBtn.click();
			
			String expMessageOnSaveNameInput = "Select menu";
			
			String actMessageOnSaveNameInput = checkValidationMessagebooleanString(expMessageOnSaveNameInput);
			
			int menuListCount = menuList.size();
			
			ArrayList<String> menuListArray = new ArrayList<String>();
			
			for(int i=0;i<menuListCount;i++)
			{
				String data = menuList.get(i).getText();
				
				if(data.equalsIgnoreCase("Masters"))
				{
					menuList.get(i).click();
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameComboBox));
			nameComboBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(captionTxt));
			captionTxt.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmSaveBtn));
			cmSaveBtn.click();
			
			String expMessageOnSave = "Master Saved Successfully";
			
			String actMessageOnSave = checkValidationMessagebooleanString(expMessageOnSave);
			
			if(actMessageOnClickingCustomizeTab .equalsIgnoreCase(expMessageOnClickingCustomizeTab ) && actMessageOnSaveEmpty.equalsIgnoreCase(expMessageOnSaveEmpty) 
					&& actMessageOnSaveNameInput.equalsIgnoreCase(expMessageOnSaveNameInput) && actMessageOnSave.equalsIgnoreCase(expMessageOnSave))
			{	
				System.out.println("Test Pass : Bin Popup Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 90, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}	
	}
	
	@FindBy(xpath="//a[contains(@class,'menu-selected theme_color-inverse')]//span[@class='Flabel'][contains(text(),'Masters')]")
	private static WebElement cmMastermenu;
	
	@FindBy(xpath="//span[contains(text(),'Header Details')]")
	private static WebElement cmHeaderDetailsTab;
	
	@FindBy(xpath="//div[@id='btnAdd_Field_MasterCust']//span[@class='icon-new icon-font7']")
	private static WebElement cmAddBtn;
	
	@FindBy(xpath="//span[@class='icon-ok icon-font8']")
	private static WebElement cmCustomizeOkBtn;
	
	@FindBy(xpath="//span[@class='icon-close icon-font8']")
	private static WebElement cmCustomizeloseBtn;
	
	@FindBy(xpath="//input[@id='txtMasterViewName']")
	private static WebElement viewComboBox;
	
	@FindBy(xpath="//*[@id='ul_details_TreeCust']/li/div/label")
	private static List<WebElement> treecustomizationlist;
	
	public boolean checkSavedMasterAndUpdatingTheMaster() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameComboBox));
			nameComboBox.click();
			nameComboBox.sendKeys(Keys.END);
			nameComboBox.sendKeys(Keys.SHIFT,Keys.HOME);
			nameComboBox.sendKeys(Keys.BACK_SPACE);
			nameComboBox.sendKeys(Keys.SPACE);
			
			int nameComboBoxListCount = nameComboBoxList.size();
			
			System.err.println("nameComboBoxListCount : "+nameComboBoxListCount);
			
			ArrayList<String> nameComboBoxListArray = new ArrayList<String>();
			
			for(int i=0;i<nameComboBoxListCount;i++)
			{
				String data = nameComboBoxList.get(i).getText();
				
				System.err.println("Data : " + data);
				
				if(data.equalsIgnoreCase("Test"))
				{
					nameComboBoxList.get(i).click();
					break;
				}
			}
			
			nameComboBox.sendKeys(Keys.TAB);
			
			
			String actnameComboBox = nameComboBox.getAttribute("value");
			String expnameComboBox = "Test";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(captionTxt));
			
			String actcaptionTxt = captionTxt.getAttribute("value");
			String expcaptionTxt = "Test";
			
			boolean actcmMastermenu = cmMastermenu.isDisplayed();
			boolean expcmMastermenu = true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(captionTxt));
			captionTxt.click();
			captionTxt.clear();
			captionTxt.sendKeys("TestUpdate");
			captionTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizationTab));
			customizationTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmHeaderDetailsTab));
			cmHeaderDetailsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmAddBtn));
			cmAddBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
			extraFields_FieldDetailsCaption.click();
			extraFields_FieldDetailsCaption.sendKeys("Test");
			extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmCustomizeOkBtn));
			cmCustomizeOkBtn.click();
			
			String expMessageOnAddingField = "Field Added Successfully.";
			
			String actMessageOnAddingField = checkValidationMessagebooleanString(expMessageOnAddingField);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewsTab));
			viewsTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewComboBox));
			boolean actviewComboBox = viewComboBox.isDisplayed();
			boolean expviewComboBox = true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeCustomizationTab));
			treeCustomizationTab.click();
			
			int treecustomizationlistCount = treecustomizationlist.size();
			
			ArrayList<String> treecustomizationlistArray = new ArrayList<String>();
			
			for(int i=0;i<treecustomizationlistCount;i++)
			{
				String data=treecustomizationlist.get(i).getText();
				treecustomizationlistArray.add(data);
			}
			
			String acttreecustomizationlist = treecustomizationlistArray.toString();
			
			String exptreecustomizationlist = "[MasterId, Name, Code, , , , , , CreatedBy, Modified By, Created Date, Modified Date, Allow Other Companies To View Record, Sync Received Date, Editing Location, Test, Auth Status]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionTab));
			definitionTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmSaveBtn));
			cmSaveBtn.click();
			
			String expMessageOnSaveUpdate = "Master updated successfully";
			
			String actMessageOnSaveUpdate = checkValidationMessagebooleanString(expMessageOnSaveUpdate);
			
			System.out.println("nameComboBox Actual            : " + actnameComboBox          + " Value Expected : "+expnameComboBox);
			System.out.println("captionTxt Actual              : " + actcaptionTxt            + " Value Expected : "+expcaptionTxt);
			System.out.println("cmMastermenu Actual            : " + actcmMastermenu          + " Value Expected : "+expcmMastermenu);
			System.out.println("MessageOnAddingField Actual    : " + actMessageOnAddingField  + " Value Expected : "+expMessageOnAddingField);
			System.out.println("viewComboBox Actual            : " + actviewComboBox          + " Value Expected : "+expviewComboBox);
			System.out.println("MessageOnSaveUpdate Actual     : " + actMessageOnSaveUpdate   + " Value Expected : "+expMessageOnSaveUpdate);
			System.out.println("treecustomizationlist Actual   : " + acttreecustomizationlist);
			System.out.println("treecustomizationlist Expected : " + exptreecustomizationlist);
			
			
			if(actnameComboBox.equalsIgnoreCase(expnameComboBox) && actcaptionTxt.equalsIgnoreCase(expcaptionTxt) && actcmMastermenu==expcmMastermenu
					&& actMessageOnAddingField.equalsIgnoreCase(expMessageOnAddingField) && actviewComboBox==expviewComboBox
					&& actMessageOnSaveUpdate.equalsIgnoreCase(expMessageOnSaveUpdate) && acttreecustomizationlist.equalsIgnoreCase(exptreecustomizationlist))
			{	
				System.out.println("Test Pass : Bin Popup Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 90, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}	
	}
			
	@FindBy(xpath="//span[@class='icon-export icon-font7']")
	private static WebElement cmExportBtn;
	
	@FindBy(xpath="//*[@id='AllExportImportMasters']/div/label")
	private static List<WebElement> cmExportList;
	
	@FindBy(xpath="//span[@class='icon-export icon-font6']")
	private static WebElement cmFooterExportBtn;
	
	public boolean checkUpdatedMasterAndExportingTheMaster() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			
			/*getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplay.click();
			  
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
		
			LoginPage lp=new LoginPage(getDriver()); 
			
			String unamelt="su";
			
			String pawslt="su";
			
			lp.enterUserName(unamelt);
			
			lp.enterPassword(pawslt);
			
			lp.clickOnSignInBtn();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
			settingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsConfigureMasters));
			settingsConfigureMasters.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionTab));
			definitionTab.click();*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameComboBox));
			nameComboBox.click();
			nameComboBox.sendKeys(Keys.END);
			nameComboBox.sendKeys(Keys.SHIFT,Keys.HOME);
			nameComboBox.sendKeys(Keys.BACK_SPACE);
			nameComboBox.sendKeys(Keys.SPACE);
			
			int nameComboBoxListCount = nameComboBoxList.size();
			
			System.err.println("nameComboBoxListCount : "+nameComboBoxListCount);
			
			ArrayList<String> nameComboBoxListArray = new ArrayList<String>();
			
			for(int i=0;i<nameComboBoxListCount;i++)
			{
				String data = nameComboBoxList.get(i).getText();
				
				System.err.println("Data : " + data);
				
				if(data.equalsIgnoreCase("Test"))
				{
					nameComboBoxList.get(i).click();
					break;
				}
			}
			
			nameComboBox.sendKeys(Keys.TAB);
			
			
			String actnameComboBox = nameComboBox.getAttribute("value");
			String expnameComboBox = "Test";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(captionTxt));
			
			String actcaptionTxt = captionTxt.getAttribute("value");
			String expcaptionTxt = "TestUpdate";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmExportBtn));
			cmExportBtn.click();
			
			int cmExportListCount = cmExportList.size();
			
			ArrayList<String> cmExportListArray = new ArrayList<String>();
			
			for(int i=0;i<cmExportListCount;i++)
			{
				String data=cmExportList.get(i).getText();
				if(data.equalsIgnoreCase("TestUpdate"))
				{
					cmExportList.get(i).click();
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmFooterExportBtn));
			cmFooterExportBtn.click();
			

			
				
			getWaitForAlert();
			
			String actAlertMessage = getAlert().getText();
			
			String expAlertMessage = "Export successfully";
			
			getAlert().accept();
			
			Thread.sleep(2000);
			
		  	Robot robot = new Robot();                          
			robot.keyPress(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_J);
			robot.keyRelease(KeyEvent.VK_CONTROL); 
			robot.keyRelease(KeyEvent.VK_J);
			
			Thread.sleep(2000);
			
			robot.keyPress(KeyEvent.VK_CONTROL); 
			robot.keyPress(KeyEvent.VK_W); 
			robot.keyRelease(KeyEvent.VK_CONTROL); 
			robot.keyRelease(KeyEvent.VK_W);
			
			Thread.sleep(2000);
			
			System.out.println("nameComboBox Actual : "+actnameComboBox + " Value Exepcted : " + expnameComboBox);
			System.out.println("nameComboBox Actual : "+actcaptionTxt   + " Value Exepcted : " + expcaptionTxt);
			System.out.println("AlertMessage Actual : "+actAlertMessage + " Value Exepcted : " + expAlertMessage);
			
			if(actnameComboBox.equalsIgnoreCase(expnameComboBox) && actcaptionTxt.equalsIgnoreCase(expcaptionTxt) && actAlertMessage.equalsIgnoreCase(expAlertMessage))
			{	
				System.out.println("Test Pass : Bin Popup Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 90, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			return false;
		}	
	}
		
	
	@FindBy(xpath="//div[@class='col-sm-12 btnMain_header_img']//span[@class='icon-delete icon-font7']")
	private static WebElement cmDeleteBtn;
	
	
	@FindBy(xpath="//label[@id='lblMessage_Modal']")
	private static WebElement cmGetMgsonDelete;

	@FindBy(xpath="//button[@id='btnDeleteMaster_Ok']")
	private static WebElement cmclickOnOkInDelete;
	
	public boolean checkDeletingMastersInConfigurwMasters() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmDeleteBtn));
			cmDeleteBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmGetMgsonDelete));

			String actMessageOnClickOnDeleteButton = cmGetMgsonDelete.getText();
			
			String expMessageOnClickOnDeleteButton = "Are you sure that you want to delete Master?";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmclickOnOkInDelete));
			cmclickOnOkInDelete.click();
			
			
			String expMessageOnClickingOkInDelete = "Master delete successfully";
			
			String actMessageOnClickingOkInDelete = checkValidationMessagebooleanString(expMessageOnClickingOkInDelete);
			
			
			System.out.println("MessageOnClickOnDeleteButton Actual : " + actMessageOnClickOnDeleteButton + " Value Expected : " + expMessageOnClickOnDeleteButton);
			System.out.println("MessageOnClickingOkInDelete  Actual : " + actMessageOnClickingOkInDelete  + " Value Expected : " + expMessageOnClickingOkInDelete);
			
			
			if(actMessageOnClickOnDeleteButton.equalsIgnoreCase(expMessageOnClickOnDeleteButton)
					&& actMessageOnClickingOkInDelete.equalsIgnoreCase(expMessageOnClickingOkInDelete))
			{	
				System.out.println("Test Pass : Bin Popup Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 90, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}	
	}
	
	
	@FindBy(xpath="//div[contains(text(),'Import')]")
	private static WebElement cmImportBtn;
	
	public boolean checkImportingMastersInConfigurwMasters() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmImportBtn));
			cmImportBtn.click();
			
			Thread.sleep(2000);
			Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\configureMastersImport.exe");
			Thread.sleep(2000);
			
			
			String expMessageOnImporting = "Masters Imported Successfully";
			
			String actMessageOnImporting = checkValidationMessage(expMessageOnImporting);
			
			
			System.out.println("MessageOnImporting Actual : " + actMessageOnImporting + " Value Expected : " + expMessageOnImporting);
			
			
			if(actMessageOnImporting.equalsIgnoreCase(expMessageOnImporting))
			{	
				System.out.println("Test Pass : Bin Popup Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 90, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}	
	}
		
		
	
	


	public boolean checkImportedMasterOnLogoutAndLogin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplay.click();
			  
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
		
			LoginPage lp=new LoginPage(getDriver()); 
			
			String unamelt="su";
			
			String pawslt="su";
			
			lp.enterUserName(unamelt);
			
			lp.enterPassword(pawslt);
			
			lp.clickOnSignInBtn();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
			settingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsConfigureMasters));
			settingsConfigureMasters.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameComboBox));
			nameComboBox.click();
			nameComboBox.sendKeys(Keys.END);
			nameComboBox.sendKeys(Keys.SHIFT,Keys.HOME);
			nameComboBox.sendKeys(Keys.BACK_SPACE);
			nameComboBox.sendKeys(Keys.SPACE);
			
			int nameComboBoxListCount = nameComboBoxList.size();
			
			System.err.println("nameComboBoxListCount : "+nameComboBoxListCount);
			
			ArrayList<String> nameComboBoxListArray = new ArrayList<String>();
			
			for(int i=0;i<nameComboBoxListCount;i++)
			{
				String data = nameComboBoxList.get(i).getText();
				
				System.err.println("Data : " + data);
				
				if(data.equalsIgnoreCase("ImportedMaster"))
				{
					nameComboBoxList.get(i).click();
					break;
				}
			}
			
			nameComboBox.sendKeys(Keys.TAB);
			
			
			String actnameComboBox = nameComboBox.getAttribute("value");
			String expnameComboBox = "ImportedMaster";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(captionTxt));
			
			String actcaptionTxt = captionTxt.getAttribute("value");
			String expcaptionTxt = "Imported Master";
			
			captionTxt.sendKeys(Keys.TAB);
			
			System.out.println("nameComboBox  Actual   :  " + actnameComboBox + " Value Expected : " + expnameComboBox);
			System.out.println("captionTxt    Actual   :  " + actcaptionTxt   + " Value Expected : " + expcaptionTxt);
			
			
			if(actnameComboBox.equalsIgnoreCase(expnameComboBox) && actcaptionTxt.equalsIgnoreCase(expcaptionTxt))
			{	
				System.out.println("Test Pass : Bin Popup Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 90, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}	
	}
		
		
	@FindBy(xpath="//div[@class='col-sm-12 btnMain_header_txt font-6'][contains(text(),'Close')]")
	private static WebElement cmCloseBtn;
	
	public boolean checkCloseOptionInConfigureMasters() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cmCloseBtn));
			cmCloseBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			
			boolean actlabelDashboard                  =labelDashboard.isDisplayed();
			boolean actselectDashboard                 =selectDashboard.isDisplayed();
			boolean actnewAddDashBoard                 =newAddDashBoard.isDisplayed();
			boolean actdashboardCustomizationSettings  =dashboardCustomizationSettings.isDisplayed();
			
			boolean explabelDashboard                  =true;
			boolean expselectDashboard                 =true;
			boolean expnewAddDashBoard                 =true;
			boolean expdashboardCustomizationSettings  =true;
			
			
			
			System.out.println("******************************checkCloseOptionInConfigureMasters************************");
			
			System.out.println("labelDashboard                  : "+actlabelDashboard                 +" Value Expected : "+explabelDashboard);
			System.out.println("selectDashboard                 : "+actselectDashboard                +" Value Expected : "+expselectDashboard);
			System.out.println("newAddDashBoard                 : "+actnewAddDashBoard                +" Value Expected : "+expnewAddDashBoard);
			System.out.println("dashboardCustomizationSettings  : "+actdashboardCustomizationSettings +" Value Expected : "+expdashboardCustomizationSettings);
			
			if(labelDashboard.isDisplayed() && selectDashboard.isDisplayed() && newAddDashBoard.isDisplayed() && dashboardCustomizationSettings.isDisplayed())
			{	
				System.out.println("Test Pass : Bin Popup Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Bin Popup NOT Displayed");
				excelReader.setCellData(xlfile, xlSheetName, 90, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 50);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 90, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}	
	}
		

	
  public SmokeMastersPage(WebDriver driver)
  {
	PageFactory.initElements(driver, this);
  }

}
