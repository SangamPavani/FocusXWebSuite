package com.focus.Pages;

import java.awt.AWTException;
import java.io.IOException;
import java.sql.Array;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.text.ParseException;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.xerces.impl.dv.ValidatedInfo;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.server.handler.SendKeys;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;

public class BillWisePage extends BaseEngine 
{
	
	@FindBy(xpath="//span[@class='hidden-xs']")
private static WebElement userNameDisplay;

@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
private static WebElement companyName;

@FindBy(xpath="//*[@id='companyLogo']")
private static WebElement companyLogo;

@FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
	private static WebElement noIn;
   
    @FindBy(xpath="//input[@id='donotshow']")
private static WebElement doNotShowCheckbox;

@FindBy(xpath="//span[@class='pull-right']")
	private static WebElement closeBtnInDemoPopupScreen;
   

	@FindBy(xpath="//*[@id='dashName']")
private static WebElement dashboard;

	@FindBy(xpath = "//i[@class='icon-font7 icon-import-from-excel']")
	private static WebElement importFromExcelIcon;
	
@FindBy(id="ddlCompany")
private static WebElement companyDropDownList;

@FindBy(xpath="//*[@id='107']") 
private static WebElement editCompanyMenu;

@FindBy(xpath="//input[@id='CreatedDate']")
private static WebElement accountingDate;
			
@FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_default']/div[1]/section[1]/form[1]/div[1]/div[1]/nav[1]/div[1]/div[2]/div[1]/div[3]/div[1]/span[1]")
private static WebElement okButtonInCreateCompany;

//Company Menu
@FindBy (xpath="//*[@id='2']/span")
private static WebElement companyMenu;


//Masters Menu	
		@FindBy (xpath="//*[@id='1000']/span")
	    private static WebElement mastersMenu;

		//Currency Menu
		@FindBy(xpath="//a[@id='220']//span[contains(text(),'Currency')]")
		private static WebElement currencyMenu;
		
		@FindBy(xpath="//span[contains(text(),'Currency Master')]")
		private static WebElement currencyMasterMenu;
		
		@FindBy(xpath="//a[@id='71']//span[contains(text(),'Exchange Rate')]")
		private static WebElement exchangeRateMenu;
		
	    @FindBy(xpath = "//input[@id='uploadFile']")
	    private static WebElement importFilePathTxt;

	    // input[@id='uploadBtn']
	    @FindBy(xpath = "//*[@id='formLoadDataExcel']/div/div/span/span")
	    private static WebElement importFileBtn;

	    @FindBy(xpath = "//div[contains(text(),'Exchange Rate Fields')]")
	    private static WebElement importFileExchangeRateColumnName;

	    @FindBy(xpath = "//div[contains(text(),'External Fields')]")
	    private static WebElement importFileExternalFieldsColumnName;

	    @FindBy(xpath = "//td[@id='ImportTable_col_1-1']")
	    private static WebElement importFileBaseCurrencyName;

	    @FindBy(xpath = "//td[@id='ImportTable_col_1-2']")
	    private static WebElement importFileBaseCurrencyValue;

	    @FindBy(xpath = "//td[@id='ImportTable_col_2-1']")
	    private static WebElement importFileEffectiveDateName;

	    @FindBy(xpath = "//td[@id='ImportTable_col_2-2']")
	    private static WebElement importFileEffectiveDateValue;

	    @FindBy(xpath = "//td[@id='ImportTable_col_3-1']")
	    private static WebElement importFileDefinedCurrencyName;

	    @FindBy(xpath = "//td[@id='ImportTable_col_3-2']")
	    private static WebElement importFileDefinedCurrencyValue;

	    @FindBy(xpath = "//td[@id='ImportTable_col_4-1']")
	    private static WebElement importFileRateName;

	    @FindBy(xpath = "//td[@id='ImportTable_col_4-2']")
	    private static WebElement importFileRateValue;

	    @FindBy(xpath = "//td[@id='ImportTable_col_5-1']")
	    private static WebElement importFileSelectedCurrencyName;
	  	
	    @FindBy(xpath = "//td[@id='ImportTable_col_5-2']")
	    private static WebElement importFileSelectedCurrencyValue;
	  	
	    @FindBy(xpath = "//button[@id='btnImportData']")
	    private static WebElement importDataBtn;
	  	
	    @FindBy(xpath = "//button[@id='btnCloseImport']")
	    private static WebElement closeImportBtn;
	  	
	    @FindBy(xpath = "//span[contains(text(),'Select Sheet')]")
	    private static WebElement selectSheetName;
	  	
	    @FindBy(xpath = "//select[@id='ImportTable_ExternalField']")
	    private static WebElement selectTextFromComboBox;
	  	
	    @FindBy(xpath = "//div[@id='popUpdataSheetName']")
	    private static WebElement sheetNamesDisplayArea;
	  	
	    @FindBy(xpath = "//li[@class='clsSheetName']")
	    private static WebElement SmokeMasters;
	  	
	    @FindBy(xpath = "//button[@id='btnSheetOk']")
	    private static WebElement sheetOkBtn;
	  	
	    @FindBy(xpath = "//button[@id='btnSheetClose']")
	    private static WebElement sheetCloseBtn;

public boolean checkLogin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
 getDriver().navigate().refresh();
 Thread.sleep(1999);
 
 getDriver().navigate().refresh();
 Thread.sleep(1999);

LoginPage lp=new LoginPage(getDriver()); 

String unamelt="su";
		      
String pawslt="su";
		      
lp.enterUserName(unamelt);

Thread.sleep(2000);
		
lp.enterPassword(pawslt);

String compname="BillWise";

 Select oSelect = new Select(companyDropDownList);
 
 List <WebElement> elementCount = oSelect.getOptions();

 int cqSize = elementCount.size();
 
 System.out.println("CompanyDropdownList Count :"+cqSize);

    int i;
  
	for(i=0; i<elementCount.size(); i++) 
	{
	
	  elementCount.get(i).getText();
      String optionName = elementCount.get(i).getText();
     if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
     {
	  System.out.println("q"+elementCount.get(i).getText());
		  elementCount.get(i).click();
	     }
 
       }
	
		
        Thread.sleep(2000);
		
		lp.clickOnSignInBtn();
		
		//checkRefershPopOnlogin();
	        
//checkPopUpWindow();

Thread.sleep(2000);
		           	
String userInfo=userNameDisplay.getText();
		    	
System.out.println("User Info : "+userInfo);
		    	
System.out.println("User Info Capture Text :"+userNameDisplay.getText());
		    	
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		    	
companyLogo.click();
		    	
if(userInfo.equalsIgnoreCase("SU"))
{

	System.out.println("Test Pass :Logined to Billwise Company");
	return true;
	
}
else
{
	System.out.println("Test Fail :Logined to Billwise Company");
		return false;

	}
}

@FindBy(xpath="//*[@id='id_header_268435459_table_body']/tr/td[2]")
private static List<WebElement> openingBalDepartmentList;

@FindBy(xpath="//*[@id='id_transactionentry_save']")
private static WebElement openingBalancesSaveBtn;



@FindBy(xpath="//*[@id='2028']/span")
private static WebElement  openingBalancesVoucher;

@FindBy(xpath="//*[@id='2023']/span")
private static WebElement  financialsTransactionsJournalsMenu;


public boolean checkSavingOpeningBalanceWithCreditAmount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	System.err.println(" Entered   ************************");
	
	Thread.sleep(2000);

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsJournalsMenu));
	financialsTransactionsJournalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancesVoucher));
	openingBalancesVoucher.click();
	
	Thread.sleep(2000);
	checkDeleteLinkStatus();
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
	checkValidationMessage("Screen opened");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	 
	String docno=documentNumberTxt.getAttribute("value");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	voucherHeaderCurrency.click();
	
	voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
	
	voucherHeaderCurrency.sendKeys(Keys.SPACE);
	
	int currencycount=currencyListCount.size();
	
	System.err.println(currencycount);
		
	for(int i=0 ; i < currencycount ;i++)
	{
		String data=currencyListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("INR"))
		{
			currencyListCount.get(i).click();
			
			break;
		}
	}
		
	voucherHeaderCurrency.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	departmentTxt.click();
	departmentTxt.sendKeys(Keys.SPACE);
	 
	int OpeningBalDepartmentListCount=openingBalDepartmentList.size();
	
	for (int i = 0; i < OpeningBalDepartmentListCount; i++) 
	{
		String data=openingBalDepartmentList.get(i).getText();
		
		if (data.equalsIgnoreCase("Dubai"))
		{
			openingBalDepartmentList.get(i).click();
			
			break;
		}
 	 }
   
	 departmentTxt.sendKeys(Keys.TAB);
	 
	 
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	 select1stRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Customer");
	 
	 int accountCount=openingBalAccountListInGrid.size();
		
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=openingBalAccountListInGrid.get(i).getText();
		
		if(data.equalsIgnoreCase("Customer New Reference"))
		{
			openingBalAccountListInGrid.get(i).click();
			
			break;
		}
	}
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	enter_CreditTxt.sendKeys("100");
	enter_CreditTxt.sendKeys(Keys.TAB);
	
	
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
	 select2ndRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Customer Semi");
	 
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=openingBalAccountListInGrid.get(i).getText();
		
		if(data.equalsIgnoreCase("Customer Semi Adjustment"))
		{
			openingBalAccountListInGrid.get(i).click();
			
			break;
		}
	}
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	enter_CreditTxt.sendKeys("100");
	enter_CreditTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
	select3rdRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Customer Full");
	 
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=openingBalAccountListInGrid.get(i).getText();
		
		if(data.equalsIgnoreCase("Customer Full Adjustment"))
		{
			openingBalAccountListInGrid.get(i).click();
			
			break;
		}
	}
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	enter_CreditTxt.sendKeys("100");
	enter_CreditTxt.sendKeys(Keys.TAB);
	
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
	select4thRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Vendor New");
	 
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=openingBalAccountListInGrid.get(i).getText();
		
		if(data.equalsIgnoreCase("Vendor New Reference"))
		{
			openingBalAccountListInGrid.get(i).click();
			
			break;
		}
	}
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	enter_CreditTxt.sendKeys("100");
	enter_CreditTxt.sendKeys(Keys.TAB);
	
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
	select5thRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Vendor Full");
	 
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=openingBalAccountListInGrid.get(i).getText();
		
		if(data.equalsIgnoreCase("Vendor Full Adjustment"))
		{
			openingBalAccountListInGrid.get(i).click();
			
			break;
		}
	}
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	enter_CreditTxt.sendKeys("100");
	enter_CreditTxt.sendKeys(Keys.TAB);
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_1stColumn));
	select6thRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Vendor Semi");
	 Thread.sleep(2000);
	
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	enter_CreditTxt.sendKeys("100");
	enter_CreditTxt.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancesSaveBtn));
	openingBalancesSaveBtn.click();
	
	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow1));
	billRefGridVendorRow1.click();
	getAction().doubleClick(billRefGridVendorRow1).build().perform();
	
	String actPartyName1 = billRefPartyName.getText();
	String expPartyName1 = "Customer New Reference (Customer New Reference)";
	
	System.out.println(" Row1 : "+actPartyName1+" Value "+expPartyName1);
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	billRefNewReferenceTxt.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow2));
	billRefGridVendorRow2.click();
	getAction().doubleClick(billRefGridVendorRow2).build().perform();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	String actPartyName2 = billRefPartyName.getText();
	String expPartyName2 = "Customer Semi Adjustment (Customer Semi Adjustment)";
	
	System.out.println(" Row2 : "+actPartyName2+" Value "+expPartyName2);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	billRefNewReferenceTxt.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	
	
	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow3));
	billRefGridVendorRow3.click();
	getAction().doubleClick(billRefGridVendorRow3).build().perform();
	
	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	String actPartyName3 = billRefPartyName.getText();
	String expPartyName3 = "Customer Full Adjustment (Customer Full Adjustment)";
	
	System.out.println(" Row3 : "+actPartyName3+" Value "+expPartyName3);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	billRefNewReferenceTxt.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow4));
	billRefGridVendorRow4.click();
	getAction().doubleClick(billRefGridVendorRow4).build().perform();
	
	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	String actPartyName4 = billRefPartyName.getText();
	String expPartyName4 = "Vendor New Reference (Vendor New Reference)";
	
	System.out.println(" Row4 : "+actPartyName4+" Value "+expPartyName4);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	billRefNewReferenceTxt.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow5));
	billRefGridVendorRow5.click();
	getAction().doubleClick(billRefGridVendorRow5).build().perform();
	
	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	String actPartyName5 = billRefPartyName.getText();
	String expPartyName5 = "Vendor Full Adjustment (Vendor Full Adjustment)";
	
	System.out.println(" Row5 : "+actPartyName5+" Value "+expPartyName5);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	billRefNewReferenceTxt.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow6));
	billRefGridVendorRow6.click();
	
	getAction().doubleClick(billRefGridVendorRow6).build().perform();
	Thread.sleep(3000);
	
	String actPartyName6 = billRefPartyName.getText();
	String expPartyName6 = "Vendor Semi Adjustment (Vendor Semi Adjustment)";
	
	System.out.println(" Row6 : "+actPartyName6+" Value "+expPartyName6);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	billRefNewReferenceTxt.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
      billRefOkBtn.click();
      
      boolean savingVoucher=checkVoucherSavingMessage(docno);
	if (savingVoucher==true && 
			actPartyName1.equalsIgnoreCase(expPartyName1) && 
			actPartyName2.equalsIgnoreCase(expPartyName2) && 
			actPartyName3.equalsIgnoreCase(expPartyName3) && 
			actPartyName4.equalsIgnoreCase(expPartyName4) && 
			actPartyName5.equalsIgnoreCase(expPartyName5) && 
			actPartyName6.equalsIgnoreCase(expPartyName6) ) 
	{
		System.out.println(" Test Pass: Voucher Saved With all Credit Amounts ");
		return true;
		
	} 
	else
	{
		System.out.println(" Test Fail: Voucher Saved With all Credit Amounts ");
          return false;
	}
}


public boolean checkSavingOpeningBalanceWithDebitAmount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	System.err.println(" Entered   ************************");
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	voucherHeaderCurrency.click();
	
	voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
	
	voucherHeaderCurrency.sendKeys(Keys.SPACE);
	
	int currencycount=currencyListCount.size();
	
	System.err.println(currencycount);
		
	for(int i=0 ; i < currencycount ;i++)
	{
		String data=currencyListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("INR"))
		{
			currencyListCount.get(i).click();
			
			break;
		}
	}
		
	voucherHeaderCurrency.sendKeys(Keys.TAB);
	
	String docno=documentNumberTxt.getAttribute("value");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	departmentTxt.click();
	departmentTxt.sendKeys(Keys.SPACE);
	 
	int OpeningBalDepartmentListCount=openingBalDepartmentList.size();
	
	for (int i = 0; i < OpeningBalDepartmentListCount; i++) 
	{
		String data=openingBalDepartmentList.get(i).getText();
		
		if (data.equalsIgnoreCase("Dubai"))
		{
			openingBalDepartmentList.get(i).click();
			
			break;
		}
 	 }
   
	 departmentTxt.sendKeys(Keys.TAB);
	 
	 
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	 select1stRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Customer");
	 
	 int accountCount=openingBalAccountListInGrid.size();
		
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=openingBalAccountListInGrid.get(i).getText();
		
		if(data.equalsIgnoreCase("Customer New Reference"))
		{
			openingBalAccountListInGrid.get(i).click();
			
			break;
		}
	}
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys("20");
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	enter_CreditTxt.sendKeys(Keys.TAB);
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
	 select2ndRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Customer Semi");
	 
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=openingBalAccountListInGrid.get(i).getText();
		
		if(data.equalsIgnoreCase("Customer Semi Adjustment"))
		{
			openingBalAccountListInGrid.get(i).click();
			
			break;
		}
	}
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys("20");
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	enter_CreditTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
	select3rdRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Customer Full");
	 
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=openingBalAccountListInGrid.get(i).getText();
		
		if(data.equalsIgnoreCase("Customer Full Adjustment"))
		{
			openingBalAccountListInGrid.get(i).click();
			
			break;
		}
	}
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys("20");
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	enter_CreditTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
	select4thRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Vendor New");
	 
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=openingBalAccountListInGrid.get(i).getText();
		
		if(data.equalsIgnoreCase("Vendor New Reference"))
		{
			openingBalAccountListInGrid.get(i).click();
			
			break;
		}
	}
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys("20");
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	enter_CreditTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
	select5thRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Vendor Full");
	 
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=openingBalAccountListInGrid.get(i).getText();
		
		if(data.equalsIgnoreCase("Vendor Full Adjustment"))
		{
			openingBalAccountListInGrid.get(i).click();
			
			break;
		}
	}
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys("20");
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	
	enter_CreditTxt.sendKeys(Keys.TAB);
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_1stColumn));
	select6thRow_1stColumn.click();
	
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	 enter_AccountTxt.click();
	 enter_AccountTxt.sendKeys("Vendor Semi");
	 Thread.sleep(2000);
	
	
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_DebitTxt));
	enter_DebitTxt.sendKeys("20");
	enter_DebitTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditTxt));
	
	enter_CreditTxt.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancesSaveBtn));
	openingBalancesSaveBtn.click();
	
	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow1));
	billRefGridVendorRow1.click();
	
	getAction().doubleClick(billRefGridVendorRow1).build().perform();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	String actPartyName1 = billRefPartyName.getText();
	String expPartyName1 = "Customer New Reference (Customer New Reference)";
	
	System.out.println(" Row1 : "+actPartyName1+" Value "+expPartyName1);
	
	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(conversationRateBaseCurrencyRate));
	String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
	String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
	
	String expconversationRateBaseCurrencyRatePick  = "1";
	String expconversationRateLocalCurrencyRatePick = "0.11";

	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
	billrefAdjuBills1stChkbox.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
	String actgridOrginalAmtRow11     = gridOrginalAmtRow1.getText();
	String actgridBalanceAmtRow11     = gridBalanceAmtRow1.getText();
	String actgridAdjustmentAmtRow11  = gridAdjustmentAmtRow1.getText();
	String actgridAdjustmentBillsRow1DocNo1  = billRefAdjustBillsRow1DocNo.getText();

	String expgridOrginalAmtRow11      ="100.00";
	String expgridBalanceAmtRow11      ="100.00";
	String expgridAdjustmentAmtRow11   ="20.00";
	String expgridAdjustmentBillsRow1DocNo1  = "OpeBal:1";

	System.out.println("actgridOrginalAmtRow11    :" +actgridOrginalAmtRow11 +"       " +"expgridOrginalAmtRow11 :" +expgridOrginalAmtRow11);
	System.out.println("actgridBalanceAmtRow11    :" +actgridBalanceAmtRow11 +"       " +"expgridBalanceAmtRow11 :" +expgridBalanceAmtRow11);
	System.out.println("actgridAdjustmentAmtRow11:" +actgridAdjustmentAmtRow11 +"    " +"expgridAdjustmentAmtRow11:" +expgridAdjustmentAmtRow11);
	System.out.println("actgridAdjustmentBillsRow1DocNo1    :" +actgridAdjustmentBillsRow1DocNo1 +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo1);

	
	
	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow2));
	billRefGridVendorRow2.click();
	getAction().doubleClick(billRefGridVendorRow2).build().perform();
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	String actPartyName2 = billRefPartyName.getText();
	String expPartyName2 = "Customer Semi Adjustment (Customer Semi Adjustment)";
	
	System.out.println(" Row2 : "+actPartyName2+" Value "+expPartyName2);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
	billrefAdjuBills1stChkbox.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	
	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow3));
	billRefGridVendorRow3.click();
	getAction().doubleClick(billRefGridVendorRow3).build().perform();
	
	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	String actPartyName3 = billRefPartyName.getText();
	String expPartyName3 = "Customer Full Adjustment (Customer Full Adjustment)";
	
	System.out.println(" Row3 : "+actPartyName3+" Value "+expPartyName3);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
	billrefAdjuBills1stChkbox.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow4));
	billRefGridVendorRow4.click();
	getAction().doubleClick(billRefGridVendorRow4).build().perform();
	
	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	String actPartyName4 = billRefPartyName.getText();
	String expPartyName4 = "Vendor New Reference (Vendor New Reference)";
	
	System.out.println(" Row4 : "+actPartyName4+" Value "+expPartyName4);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
	billrefAdjuBills1stChkbox.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow5));
	billRefGridVendorRow5.click();
	
	getAction().doubleClick(billRefGridVendorRow5).build().perform();
	
	Thread.sleep(3000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	String actPartyName5 = billRefPartyName.getText();
	String expPartyName5 = "Vendor Full Adjustment (Vendor Full Adjustment)";
	
	System.out.println(" Row5 : "+actPartyName5+" Value "+expPartyName5);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
	billrefAdjuBills1stChkbox.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow6));
	billRefGridVendorRow6.click();
	getAction().doubleClick(billRefGridVendorRow6).build().perform();
	
	Thread.sleep(3000);
	
	String actPartyName6 = billRefPartyName.getText();
	String expPartyName6 = "Vendor Semi Adjustment (Vendor Semi Adjustment)";
	
	System.out.println(" Row6 : "+actPartyName6+" Value "+expPartyName6);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
	billrefAdjuBills1stChkbox.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
      billRefOkBtn.click();
      
      boolean savingVoucher=checkVoucherSavingMessage(docno);
	if (savingVoucher==true && 
			actPartyName1.equalsIgnoreCase(expPartyName1) && 
			actPartyName2.equalsIgnoreCase(expPartyName2) && 
			actPartyName3.equalsIgnoreCase(expPartyName3) && 
			actPartyName4.equalsIgnoreCase(expPartyName4) && 
			actPartyName5.equalsIgnoreCase(expPartyName5) && 
			actPartyName6.equalsIgnoreCase(expPartyName6) && 
			actgridAdjustmentBillsRow1DocNo1.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo1) && 
			actgridAdjustmentAmtRow11.equalsIgnoreCase(expgridAdjustmentAmtRow11) && 
			actgridOrginalAmtRow11.equalsIgnoreCase(expgridOrginalAmtRow11) && 
			actgridBalanceAmtRow11.equalsIgnoreCase(expgridBalanceAmtRow11)) 
	{
		System.out.println(" Test Pass: Voucher Saved With all Credit Amounts ");
		return true;
		
	} 
	else
	{
		System.out.println(" Test Fail: Voucher Saved With all Credit Amounts ");
          return false;
	}
}

@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_18']")
private static WebElement vocFooterdebitAmount;

@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_19']")
private static WebElement vocFooterCreditAmount;


public boolean checkPreviousButtonInOpeningBalanceSavedVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	    Thread.sleep(2000);

	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
	    previousBtn.click();
	    
        boolean loading=checkLoadingMessage();
  		
  		System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
    	
  		String actDocno               = documentNumberTxt.getAttribute("value");
        String actCurrency            = voucherHeaderCurrency.getAttribute("value");
		String actDepartment          = departmentTxt.getAttribute("value");
        String actExchangeRate        = voucherHeaderExchangeRate.getAttribute("value");
        String actLocExchangeRate     = voucherHeaderLocalExchangeRate.getAttribute("value");
		
		String actR1Account           = select1stRow_1stColumn.getText();
		String actR2Account           = select2ndRow_1stColumn.getText();
		String actR3Account           = select3rdRow_1stColumn.getText();
		String actR4Account           = select4thRow_1stColumn.getText();
		String actR5Account           = select5thRow_1stColumn.getText();
		
		String actR1Debit             = select1stRow_2ndColumn.getText();
		String actR2Debit             = select2ndRow_2ndColumn.getText();
		String actR3Debit             = select3rdRow_2ndColumn.getText();
		String actR4Debit             = select4thRow_2ndColumn.getText();
		String actR5Debit            = select5thRow_2ndColumn.getText();
        String actR5Ref               = select5thRow_4thColumn.getText();
        
    	String actFooterCreditAmt    =vocFooterCreditAmount.getText();
    	String actVoucherDebitAmt   = vocFooterdebitAmount.getText();
  	
		String expDocno               = "2";
	    String expCurrency            = "inr";
		String expDepartment          = "dubai";
        String expExchangeRate        = "1.0000000000";
        String expLocExchangeRate     = "0.1100000000";

		String expR1Account           = "Customer New Reference";
		String expR1Debit             = "20.00";
		
		String expR2Account           = "Customer Semi Adjustment";
		String expR2Debit             = "20.00";
		
		String expR3Account           = "Customer Full Adjustment";
		String expR3Debit             = "20.00";
		
		String expR4Account           = "Vendor New Reference";
		String expR4Debit            = "20.00";
		
		String expR5Account          = "Vendor Full Adjustment";
		String expR5Debit            = "20.00";
		
		String expFooterCreditAmt     = "0.00";
        String expVoucherDebitAmt     = "120.00";

        System.out.println("*******************************checkPreviousButtonInOpeningBalanceSavedVoucher**************************");

		System.out.println("Entry Page Document Number    "+actDocno           +"  value Expected  "+expDocno);
		System.out.println("Entry Page Currency           "+actCurrency        +"  value Expected  "+expCurrency);
		System.out.println("Entry Page Department         "+actDepartment      +"  value Expected  "+expDepartment);
		System.out.println("Entry Page Exchange Rate      "+actExchangeRate    +"  value Expected  "+expExchangeRate);
		System.out.println("Entry Page Department         "+actLocExchangeRate +"  value Expected  "+expLocExchangeRate);

		System.out.println("Entry Page R1Account          "+actR1Account       +"  value Expected  "+expR1Account);
		System.out.println("Entry Page R2Account          "+actR2Account       +"  value Expected  "+expR2Account);
		System.out.println("Entry Page R3Account          "+actR3Account       +"  value Expected  "+expR3Account);
		System.out.println("Entry Page R4Account          "+actR4Account       +"  value Expected  "+expR4Account);
		System.out.println("Entry Page R5Account          "+actR5Account       +"  value Expected  "+expR5Account);
		System.out.println("Entry Page R1Debit            "+actR1Debit         +"  value Expected  "+expR1Debit);
		System.out.println("Entry Page R2Debit            "+actR2Debit         +"  value Expected  "+expR2Debit);
		System.out.println("Entry Page R3Debit            "+actR3Debit         +"  value Expected  "+expR3Debit);
		System.out.println("Entry Page R4Debit            "+actR4Debit         +"  value Expected  "+expR4Debit);
		System.out.println("Entry Page R5Credit           "+actR5Debit        +"  value Expected  "+expR5Debit);
		
		System.out.println("Entry Page Debit Amount       "+actVoucherDebitAmt +"  value Expected  "+expVoucherDebitAmt);
		System.out.println("Entry Page Credit Amount      "+actFooterCreditAmt +"  value Expected  "+expFooterCreditAmt);
		
		
		
		if (actDocno.equalsIgnoreCase(expDocno) && actCurrency.equalsIgnoreCase(expCurrency) &&actDepartment.equalsIgnoreCase(expDepartment) && 
				
				actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) && 
				
				actR1Account.equalsIgnoreCase(expR1Account) && actR1Debit.equalsIgnoreCase(expR1Debit) && 
				
				actR2Account.equalsIgnoreCase(expR2Account) && actR2Debit.equalsIgnoreCase(expR2Debit) && 
				actR3Account.equalsIgnoreCase(expR3Account) && actR3Debit.equalsIgnoreCase(expR3Debit) && 
				actR4Account.equalsIgnoreCase(expR4Account) && actR4Debit.equalsIgnoreCase(expR4Debit) && 
				
				actR5Account.equalsIgnoreCase(expR5Account) && actR5Debit.equalsIgnoreCase(expR5Debit) && 
				actVoucherDebitAmt.equalsIgnoreCase(expVoucherDebitAmt))
		{
			
			System.out.println(" Test Pass: Data Saved Successfully ");
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Data  not Saved Successfully ");
			return false;
		}
	}
	

@FindBy(xpath="//td[@id='AccountAmount_col_5-1']")
private static WebElement  billRefGridVendorRow5;	

@FindBy(xpath="//td[@id='AccountAmount_col_6-1']")
private static WebElement  billRefGridVendorRow6;

@FindBy(xpath="//*[@id='61']/span")
private static WebElement  financialsTransactionMenu;


@FindBy(xpath="//a[@id='2001']//span[contains(text(),'Cash and Bank')]")
private static WebElement  cashAndBankMenu; 

@FindBy(xpath="//a[@id='2002']//span[contains(text(),'Receipts')]")
private static WebElement  receiptsVoucher;
	
@FindBy(xpath="//a[@id='2003']//span[contains(text(),'Payments')]")
private static WebElement  paymentsVoucher;


@FindBy(xpath="//span[contains(text(),'Payments VAT')]")
private static WebElement  paymentsVATVoucher;

@FindBy(xpath="//span[contains(text(),'Receipts VAT')]")
private static WebElement  recepitsVATVoucher;

@FindBy(xpath="//span[contains(text(),'JV VAT View')]")
private static WebElement  JVVATViewVoucher;



   @FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
private static WebElement  pendingBillsBtn;

@FindBy(xpath="//tr[@id='trRender_1']//td//input")
private static WebElement  pendingBillsGridRow1Chkbox;

@FindBy(xpath="//tr[@id='trRender_2']//td//input")
private static WebElement  pendingBillsGridRow2Chkbox;

@FindBy(xpath="//tr[@id='trRender_3']//td//input")
	private static WebElement  pendingBillsGridRow3Chkbox;	
   
 
	

	
   
   @FindBy(xpath="//li[@id='navigationtab2']//span[contains(text(),'Miscellaneous')]")
   private static WebElement settingMiscellaneousTab;
                  
   @FindBy(xpath="//select[@id='misc_CurrencyAddCurrencyIn']")
   private static WebElement miscAddCurrencyDropdown;

   @FindBy(xpath="//input[@id='misc_currencyInputExchangeRate']")
   private static WebElement miscInputExchangeRateChkbox;

   @FindBy(xpath="//input[@id='misc_currencyInputLocalExchangeRate']")
   private static WebElement miscInputLocalExchangeRateChkbox;

   @FindBy(xpath="//select[@id='misc_arapDueDate']")
   private static WebElement miscDueDateDropdown;

   
   
   @FindBy(xpath="//span[@id='updateButton']")
   private static WebElement settingUpdateIcon;

   @FindBy(xpath="//i[@class='icon-close icon-font6']")
   private static WebElement settingCloseIcon;


   @FindBy(xpath="//label[contains(text(),'Copy Document')]")
   private static WebElement CopyDocumentBtn;
   
   @FindBy(xpath="//label[contains(text(),'Copy to Clipboard')]")
   private static WebElement copytoClipboardBtn;
   
   @FindBy(xpath="//label[contains(text(),'Paste from Clipboard')]")
   private static WebElement pastefromClipboardBtn;
   
   @FindBy(xpath="//label[contains(text(),'Raise a Cheque Return')]")
   private static WebElement raiseaChequeReturnBtn;
   
   @FindBy(xpath="//label[contains(text(),'Add To Stock')]")
   private static WebElement addToStockBtn;
   
   @FindBy(xpath="//label[contains(text(),'Posting details')]")
   private static WebElement postingDetailsBtn;
   
   @FindBy(xpath="//label[contains(text(),'Reverse Entry')]")
   private static WebElement reversEntryBtn;
   
   @FindBy(xpath="//label[contains(text(),'Export to XML')]")
   private static WebElement exporttoXMLBtn;
   
   @FindBy(xpath="//label[contains(text(),'Setting')]")
   private static WebElement settingBtn;
   
   @FindBy(xpath="//label[contains(text(),'Calculator')]")
   private static WebElement calculatorBtn;
   
   @FindBy(xpath="//label[contains(text(),'Auto Load')]")
   private static WebElement autoLoadBtn;

   

	//Vouchers Home Page Ribbon Control
@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
private static WebElement  newBtn;

@FindBy(xpath="//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
private static WebElement  editBtn;

@FindBy(xpath="//span[@class='icon-print icon-font6']")
private static WebElement  printBtn;

@FindBy(xpath="//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
private static WebElement  deleteBtn;

@FindBy(xpath="//span[@class='icon-authorize icon-font6']")
private static WebElement  authorizeBtn;

@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
private static WebElement  suspendBtn;

@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
private static WebElement  rejectBtn;

@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
private static WebElement  chequeReturnBtn;

@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
private static WebElement  printBarCodeBtn;

@FindBy(xpath="//span[@class='icon-convert icon-font6']")
private static WebElement  convertBtn;

@FindBy(xpath="//span[@class='icon-export icon-font6']")
private static WebElement  exportToXMLBtn;  
	
@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
private static WebElement  settingsBtn;

@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
private static WebElement  homeCloseBtn;
		
//Vouchers Home Page Options
@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
private static WebElement  allVouchersOption;

@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
private static WebElement  pendingBillsOption;

@FindBy(xpath="//input[@id='SelectDefaultView']")
private static WebElement  selectDefaultViewChkBox;
	
@FindBy(xpath="//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
	private static WebElement  sortingBtn;
	
   @FindBy(xpath="//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
   private static WebElement  createViewBtn;

   @FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
   private static WebElement  customizeBtn;
  
   @FindBy(xpath="//span[@class='icon-filter icon-font6']")
   private static WebElement  filterBtn;
  
  /* @FindBy(xpath="//span[@id='reportRefresh']")
   private static WebElement  refreshBtn;*/
  
   
   @FindBy(xpath="//span[@id='transhomeRefresh']")
   private static WebElement  refreshBtn;
  
   
   
 
   
   
   @FindBy(xpath="//i[@class='icon-font6 icon-export']")
   private static WebElement  exportBtn;
  

	// Options Button  (Display Option)	
   @FindBy(xpath="//span[@id='transOptions']")
   private static WebElement  optionsBtn;
  
   @FindBy(xpath="//a[contains(text(),'Auto Adjust Width')]")
   private static WebElement  autoAdjustWidthBtn;
  
   @FindBy(xpath="//a[contains(text(),'Fit To Screen')]")
   private static WebElement  fitToScreenBtn;
  
   @FindBy(xpath="//a[contains(text(),'Normal')]")
   private static WebElement  normalBtn;
  
				
	//Voucher Home Page Grid Header Columns
@FindBy(xpath="//input[@id='HeaderChkBox']")
private static WebElement  grid_HeaderChkBox;	

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[3]")
private static WebElement  grid_Header_Date;

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[4]")
private static WebElement  grid_Header_VoucherNumber;

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[5]")
private static WebElement  grid_Header_CreatedBy;

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[6]")
private static WebElement  grid_Header_ModifiedBy;

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[7]")
private static WebElement  grid_Header_CreatedDate;

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[8]")
private static WebElement  grid_Header_ModifiedDate;

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[9]")
private static WebElement  grid_Header_CreatedTime;

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[10]")
private static WebElement  grid_Header_ModifiedTime;

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[11]")
private static WebElement  grid_Header_Suspended;

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[12]")
private static WebElement  grid_Header_Cancelled;

@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[13]")
private static WebElement  grid_Header_AuthorizationStatus;


//Grid Voucher DetailsBtn
@FindBy(xpath="//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
private static WebElement  grid_VoucherDetailsBtn1;

@FindBy(xpath="//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
private static WebElement  grid_VoucherDetailsBtn2;


//Grid CheckBox 1 And 2

@FindBy(xpath="//tr[@id='trRender_1']//td//input")
private static WebElement  grid_ChkBox1;

@FindBy(xpath="//tr[@id='trRender_2']//td//input")
private static WebElement  grid_ChkBox2;

@FindBy(xpath="//tr[@id='trRender_3']//td//input")
private static WebElement  grid_ChkBox3;

@FindBy(xpath="//tr[@id='trRender_4']//td//input")
private static WebElement  grid_ChkBox4;


// Vouchers Home Page Footer
@FindBy(xpath="//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
private static WebElement  searchField;
						
@FindBy(xpath="//button[@id='frstPage']")
private static WebElement  firstPageBtn;

@FindBy(xpath="//button[@id='id_previousPage']")
private static WebElement  previousPageBtn;

@FindBy(xpath="//button[@id='id_pagenumber']")
private static WebElement  currentPageNo;

@FindBy(xpath="//button[@id='id_nextPage']")
private static WebElement  nextPageBtn;

@FindBy(xpath="//button[@id='lstPage']")
private static WebElement  lastPageBtn;



//Vouchers Entry Page Ribbon Control Options
@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
private static WebElement  freeFlowBtn;

@FindBy(xpath="//span[@class='icon-header icon-font6']")
private static WebElement  jumpToHeaderSectionBtn;

@FindBy(xpath="//span[@class='icon-panel icon-font6']")
private static WebElement  jumpToBodySectionBtn;

@FindBy(xpath="//span[@class='icon-footer icon-font6']")
private static WebElement  jumpToFooterBtn;

@FindBy(xpath="//*[@id='id_transactionentry_new']")
private static WebElement  new_newBtn;

@FindBy(xpath="//*[@id='id_transactionentry_save']/div[2]")
private static WebElement  saveBtn;

@FindBy(xpath="//*[@id='id_transactionentry_previous']")
private static WebElement  previousBtn;

@FindBy(xpath="//*[@id='id_transactionentry_next']")
private static WebElement  nextBtn;

@FindBy(xpath="//*[@id='id_transactionentry_print']")
private static WebElement  new_PrintBtn;

@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
private static WebElement  new_SuspendBtn;

@FindBy(xpath="//*[@id='id_transactionentry_close']")
private static WebElement  new_CloseBtn;

@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
private static WebElement  new_DeleteBtn;

@FindBy(xpath="//span[@class='icon-menu icon-font4']")
private static WebElement  toggleBtn;

@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
private static WebElement  copyDocumentOption;

@FindBy(xpath="//*[@id='id_transactionentry_copytoclipboard']")
private static WebElement  copyToClipBoardOption;

@FindBy(xpath="//*[@id='id_transactionentry_pastefromclipboard']")
private static WebElement  pasteFromClipBoardOption;

@FindBy(xpath="//*[@id='id_transactionentry_raisechequereturn']")
private static WebElement  raiseCheckReturnOption;

@FindBy(xpath="//*[@id='id_transactionentry_addtostock']")
private static WebElement  addToStockOption;

@FindBy(xpath="//*[@id='id_transactionentry_markconvert']")
private static WebElement  markConvertedOption;

@FindBy(xpath="//*[@id='id_transactionentry_bominput']")
private static WebElement  bOMinputOption;

@FindBy(xpath="//*[@id='id_transactionentry_autoallocate']")
private static WebElement  autoAllocateOption;

@FindBy(xpath="//*[@id='id_transactionentry_reverseentry']")
private static WebElement  reverseEntryOption;

@FindBy(xpath="//*[@id='id_transactionentry_printbarcode']")
private static WebElement  printBarCodeOption;

@FindBy(xpath="//*[@id='id_transactionentry_postingdetails']")
private static WebElement  postingDetailsOption;

@FindBy(xpath="//*[@id='id_transactionentry_exporttoxml']")
private static WebElement  exportToXMLOption;

@FindBy(xpath="//*[@id='id_transactionentry_settings']")
private static WebElement  settingsOption;



//Voucher Entry Page Header Fields
@FindBy(xpath="//input[@id='id_header_1']")
private static WebElement  documentNumberTxt;

@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
private static WebElement  documentNumberdropdown_ExpansionBtn;

@FindBy(xpath="//input[@id='id_header_2']")
private static WebElement  dateTxt;

@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
private static WebElement  dateTxt_CalenderBtn;

@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
private static WebElement  calender_TodayBtn;

@FindBy(xpath="//input[@id='id_header_4']")
private static WebElement  caskBankAccountTxt;

@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
private static WebElement  caskBankAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
private static WebElement  cashBankAccount_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
private static WebElement  cashBankAccount_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
private static WebElement  cashBankAccount_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
			private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
			private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
			private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
			private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;
						
						
@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
private static WebElement  cashBankAccount_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[@class='panel']//input[3]")
private static WebElement  cashBankAccount_Settings_OkBtn;
				
@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  cashBankAccount_Settings_CancelBtn;
		
@FindBy(xpath="//input[@id='id_header_268435459']")
private static WebElement  departmentTxt;

@FindBy(xpath="//input[@id='id_header_268435470']")
private static WebElement  PDRVATPlaceOfSupplyTXt;



@FindBy(xpath="//*[@id='id_header_268435459_input_image']/span")
private static WebElement  department_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_268435459_input_settings']/span")
private static WebElement  department_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_container']")
private static WebElement  department_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
private static WebElement  department_Settings_StandardFieldsBtn;
				
	@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_list']")
	private static WebElement  department_Settings_StandardFieldsBtn_Fielddropdown;
										
	@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_header']")
	private static WebElement  department_Settings_StandardFieldsBtn_HeaderTxt;
									
	@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
	private static WebElement  department_Settings_StandardFieldsBtn_Alignmentdropdown;
										
	@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_width']")
	private static WebElement  department_Settings_StandardFieldsBtn_WidthTxt;
										
	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  department_Settings_StandardFieldsBtn_OkBtn;
										
	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  department_Settings_StandardFieldsBtn_CancelBtn;
				
						
@FindBy(xpath="//div[@id='id_header_268435459_search_container']//input[2]")
private static WebElement  department_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[@class='panel']//input[3]")
private static WebElement  department_Settings_OkBtn;
				
@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  department_Settings_CancelBtn;

@FindBy(xpath="//*[@id='id_header_6']")
private static WebElement  maturityDateTxt;

@FindBy(xpath="//*[@id='id_header_6_input_image']/span']")
private static WebElement  maturityDateTxt_CalenderBtn;

@FindBy(xpath="//input[@id='id_header_3']")
private static WebElement  purchaseAccountTxt;

@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
private static WebElement  purchaseAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
private static WebElement  purchaseAccount_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
private static WebElement  purchaseAccount_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
private static WebElement  purchaseAccount_Settings_StandardFieldsBtn;
				
	@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;
										
	@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;
									
	@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
										
	@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;
										
	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_OkBtn;
										
	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;
						
						
@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
private static WebElement  purchaseAccount_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[@class='panel']//input[3]")
private static WebElement  purchaseAccount_Settings_OkBtn;
				
@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  purchaseAccount_Settings_CancelBtn;


@FindBy(xpath="//input[@id='id_header_4']")
private static WebElement  vendorAccountTxt;

@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
private static WebElement  vendorAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
private static WebElement  vendorAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
private static WebElement  vendorAccount_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
private static WebElement  vendorAccount_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
			private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
			private static WebElement  vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
			private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
			private static WebElement  vendorAccount_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  vendorAccount_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  vendorAccount_Settings_StandardFieldsBtn_CancelBtn;
						
						
@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
private static WebElement  vendorAccount_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[@class='panel']//input[3]")
private static WebElement  vendorAccount_Settings_OkBtn;
				
@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  vendorAccount_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_header_3']")
private static WebElement  salesAccountTxt;

@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
private static WebElement  salesAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
private static WebElement  salesAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
private static WebElement  salesAccount_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
private static WebElement  salesAccount_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
			private static WebElement  salesAccount_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
			private static WebElement  salesAccount_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
			private static WebElement  salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
			private static WebElement  salesAccount_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  salesAccount_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  salesAccount_Settings_StandardFieldsBtn_CancelBtn;
						
						
@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
private static WebElement  salesAccount_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[@class='panel']//input[3]")
private static WebElement  salesAccount_Settings_OkBtn;
				
@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  salesAccount_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_header_4']")
private static WebElement  customerAccountTxt;

@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
private static WebElement  customerAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
private static WebElement  customerAccount_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
private static WebElement  customerAccount_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
private static WebElement  customerAccount_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
			private static WebElement  customerAccount_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
			private static WebElement  customerAccount_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
			private static WebElement  customerAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
			private static WebElement  customerAccount_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  customerAccount_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  customerAccount_Settings_StandardFieldsBtn_CancelBtn;
						
						
@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
private static WebElement  customerAccount_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[@class='panel']//input[3]")
private static WebElement  customerAccount_Settings_OkBtn;
				
@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  customerAccount_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_header_12']")
private static WebElement  accountTxt;

@FindBy(xpath="//*[@id='id_header_12_input_image']/span")
private static WebElement  account_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
private static WebElement  account_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
private static WebElement  account_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
private static WebElement  account_Settings_StandardFieldsBtn;
						
	@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
	private static WebElement  account_Settings_StandardFieldsBtn_Fielddropdown;
										
	@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
	private static WebElement  account_Settings_StandardFieldsBtn_HeaderTxt;
									
	@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
	private static WebElement  account_Settings_StandardFieldsBtn_Alignmentdropdown;
										
	@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
	private static WebElement  account_Settings_StandardFieldsBtn_WidthTxt;
										
	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  account_Settings_StandardFieldsBtn_OkBtn;
										
	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  account_Settings_StandardFieldsBtn_CancelBtn;
						
						
@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
private static WebElement  account_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[@class='panel']//input[3]")
private static WebElement  account_Settings_OkBtn;
				
@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  account_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_header_31']")
private static WebElement  issuesReceiptsTxt;

@FindBy(xpath="//input[@id='id_header_268435460']")
private static WebElement  wareHouseTxt;

@FindBy(xpath="//*[@id='id_header_268435460_input_image']/span")
private static WebElement  wareHouse_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_268435460_input_settings']/span")
private static WebElement  wareHouse_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_container']")
private static WebElement  wareHouse_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
private static WebElement  wareHouse_Settings_StandardFieldsBtn;
						
	@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_list']")
	private static WebElement  wareHouse_Settings_StandardFieldsBtn_Fielddropdown;
										
	@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_header']")
	private static WebElement  wareHouse_Settings_StandardFieldsBtn_HeaderTxt;
									
	@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
	private static WebElement  wareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
										
	@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_width']")
	private static WebElement  wareHouse_Settings_StandardFieldsBtn_WidthTxt;
										
	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  wareHouse_Settings_StandardFieldsBtn_OkBtn;
										
	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  wareHouse_Settings_StandardFieldsBtn_CancelBtn;
						
@FindBy(xpath="//div[@id='id_header_268435460_search_container']//input[2]")
private static WebElement  wareHouse_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[@class='panel']//input[3]")
private static WebElement  wareHouse_Settings_OkBtn;
				
@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  wareHouse_Settings_CancelBtn;

@FindBy(xpath="//span[contains(text(),'sName')]")
private static WebElement  customize_sName;

@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Code')]")
private static WebElement  customize_sCode;

@FindBy(xpath="//span[contains(text(),'Alias')]")
private static WebElement  customize_Alias;

@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Group')]")
private static WebElement  customize_bGroup;

@FindBy(xpath="//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
private static WebElement  customize_Balance;

@FindBy(xpath="//input[@id='id_header_67108920']")
private static WebElement  appropriateBasedOndropdown;

@FindBy(xpath="//input[@id='id_header_67108921']")
private static WebElement  additionalValueTxt;

@FindBy(xpath="//input[@id='id_header_21']")
private static WebElement  raiseReceiptsChkBox;

@FindBy(xpath="//input[@id='id_header_67108865']")
private static WebElement  receipts_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108868']")
private static WebElement  payments_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108927']")
private static WebElement  paymentsVAT_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108947']")
private static WebElement  recepitsVAT_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108948']")
private static WebElement  recepitsVAT_ChequeNoTxt;

@FindBy(xpath="//input[@id='id_header_67108956']")
private static WebElement  JVVAT_NarrationTxt;


@FindBy(xpath="//input[@id='id_header_67108871']")
private static WebElement  pettyCash_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108874']")
private static WebElement  postDatedReceipts_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108968']")
private static WebElement  PDRVAT_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108965']")
private static WebElement  PDPVAT_NarrationTxt;


@FindBy(xpath="//input[@id='id_header_268435470']")
private static WebElement  PDPVAT_JuridictionTxt;

@FindBy(xpath="//input[@id='id_header_268435471']")
private static WebElement  PDRVAT_JuridictionTxt;




@FindBy(xpath="//input[@id='id_header_67108865']")
private static WebElement  postDatedPayments_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108880']")
private static WebElement  purchaseVouchers_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108881']")
private static WebElement  purchaseReturns_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108884']")
private static WebElement  salesInvoice_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108886']")
private static WebElement  salesOrder_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108928']")
private static WebElement  salesInvoiceNewNarrationTxt;


@FindBy(xpath="//input[@id='id_header_67108885']")
private static WebElement  salesReturns_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108913']")
private static WebElement  cashSales_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108914']")
private static WebElement  hirePurchaseSales_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108890']")
private static WebElement  journalEntries_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108916']")
private static WebElement  forexJV_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108910']")
private static WebElement  interDepartmentalJV_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108888']")
private static WebElement  nonStandardJournalEntries_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108960']")
private static WebElement  debitNotes_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108911']")
private static WebElement  debitNotesLineWise_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108893']")
private static WebElement  creditNotes_NarrationTxt;


@FindBy(xpath="//input[@id='id_header_67108962']")
private static WebElement creditNotesVatNarrationTxt;


@FindBy(xpath="//input[@id='id_header_67108912']")
private static WebElement  creditNotesLineWisePayroll_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108894']")
private static WebElement  openingBalance_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108891']")
private static WebElement  fixedAssetDepreciationVoucher_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108909']")
private static WebElement  requestForQuote_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108903']")
private static WebElement  purchasesQuotations_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108882']")
private static WebElement  purchasesOrders_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108882']")
private static WebElement  materialReceiptsNotes_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108904']")
private static WebElement  salesQuotationss_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108887']")
private static WebElement  deliveryNotes_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108917']")
private static WebElement  posSales_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108918']")
private static WebElement  productionOrder_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108886']")
private static WebElement  salesOrders_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108895']")
private static WebElement  shortagesinStock_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108896']")
private static WebElement  excessesinStocks_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108897']")
private static WebElement  stockTransfers_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108898']")
private static WebElement  openingStocks_NarrationTxt;

@FindBy(xpath="//*[@id='id_header_67108923']")
private static WebElement  openingStocksNEW_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108908']")
private static WebElement  materialRequisition_NarrationTxt;

@FindBy(xpath="//input[@id='id_header_67108866']")
private static WebElement  receipts_ChequeNoTxt;

@FindBy(xpath="//input[@id='id_header_67108869']")
private static WebElement  payments_ChequeNoTxt;


@FindBy(xpath="//input[@id='id_header_67108928']")
private static WebElement  paymentsVAT_ChequeNoTxt;





@FindBy(xpath="//input[@id='id_header_67108872']")
private static WebElement  pettyCash_ChequeNoTxt;

@FindBy(xpath="//input[@id='id_header_67108875']")
private static WebElement  postDatedReceipts_ChequeNoTxt;

@FindBy(xpath="//input[@id='id_header_67108878']")
private static WebElement  postDatedPayments_ChequeNoTxt;



//Voucher Entry Page Body Fields

@FindBy(xpath="//input[@id='id_body_536870916']")
private static WebElement  pvWareHouseTxt;

@FindBy(xpath="//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
private static WebElement  pvWareHouse_ExpansionBtn;

@FindBy(xpath="//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
private static WebElement  pvWareHouse_SettingsBtn;

	@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_container']")
private static WebElement  pvWareHouse_Settings_Container;
						
@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
private static WebElement  pvWareHouse_Settings_StandardFieldsBtn;
						
	@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_list']")
	private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Fielddropdown;
										
	@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_header']")
	private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_HeaderTxt;
									
	@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
	private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
										
	@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_width']")
	private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_WidthTxt;
										
	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_OkBtn;
										
	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_CancelBtn;
						
@FindBy(xpath="//div[@id='id_body_536870916_search_container']//input[2]")
private static WebElement  pvWareHouse_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[@class='panel']//input[3]")
private static WebElement  pvWareHouse_Settings_OkBtn;
				
@FindBy(xpath="//div[@class='panel']//input[4]")
private static WebElement  pvWareHouse_Settings_CancelBtn;

// Grid Elements
@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
private static WebElement  grid_Header_Account;

@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
private static WebElement  grid_Header_Item;

@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
private static WebElement  grid_Header_DebitAC;

@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_2']")
private static WebElement  grid_Header_CreditAC;



@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
private static WebElement  firstRowIndex;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
private static WebElement  secondRowIndex;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
private static WebElement  thirdRowIndex;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[1]")
private static WebElement  fourthRowIndex;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[1]")
private static WebElement  fifthRowIndex;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[1]")
private static WebElement  sixthRowIndex;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[1]")
private static WebElement  seventhRowIndex;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[1]")
private static WebElement  eigthRowIndex;

@FindBy(xpath="//span[@class='icon-delete icon-font8']")
private static WebElement  deleteRowBtn;

@FindBy(xpath="//span[@class='icon-insertrow icon-font8']")
private static WebElement  insertRowBtn;

@FindBy(xpath="//span[@class='icon-selectall icon-font8']")
private static WebElement  selectRowBtn;

@FindBy(xpath="//span[@class='icon-unselectall1 icon-font8']")
private static WebElement  unSelectRowBtn;

@FindBy(xpath="//span[@class='icon-clone icon-font8']")
private static WebElement  duplicateRowBtn;



@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
private static WebElement  select1stRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
private static WebElement  select1stRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
private static WebElement  select1stRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
private static WebElement  select1stRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
private static WebElement  select1stRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
private static WebElement  select1stRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
private static WebElement  select1stRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
private static WebElement  select1stRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
private static WebElement  select1stRow_9thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
private static WebElement  select1stRow_10thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
private static WebElement  select1stRow_11thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
private static WebElement  select1stRow_12thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
private static WebElement  select1stRow_13thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
private static WebElement  select1stRow_14thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
private static WebElement  select1stRow_15thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
private static WebElement  select1stRow_16thColumn;





@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
private static WebElement  select2ndRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
private static WebElement  select2ndRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
private static WebElement  select2ndRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
private static WebElement  select2ndRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
private static WebElement  select2ndRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
private static WebElement  select2ndRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
private static WebElement  select2ndRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
private static WebElement  select2ndRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
private static WebElement  select2ndRow_9thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
private static WebElement  select2ndRow_11thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
private static WebElement  select2ndRow_12thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
private static WebElement  select2ndRow_10thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
private static WebElement  select2ndRow_14thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
private static WebElement  select2ndRow_15thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
private static WebElement  select2ndRow_16thColumn;




@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
private static WebElement  select3rdRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
private static WebElement  select3rdRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
private static WebElement  select3rdRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
private static WebElement  select3rdRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
private static WebElement  select3rdRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
private static WebElement  select3rdRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
private static WebElement  select3rdRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
private static WebElement  select3rdRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
private static WebElement  select3rdRow_9thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
	private static WebElement  select3rdRow_10thColumn;

   @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
private static WebElement  select3rdRow_11thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
private static WebElement  select3rdRow_12thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
private static WebElement  select3rdRow_13thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
private static WebElement  select3rdRow_14thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
private static WebElement  select3rdRow_15thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
private static WebElement  select3rdRow_16thColumn;




@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
private static WebElement  select4thRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
private static WebElement  select4thRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
private static WebElement  select4thRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
private static WebElement  select4thRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
private static WebElement  select4thRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
private static WebElement  select4thRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
private static WebElement  select4thRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
private static WebElement  select4thRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
private static WebElement  select4thRow_9thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
private static WebElement  select4thRow_10thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
private static WebElement  select4thRow_11thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
private static WebElement  select4thRow_12thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
private static WebElement  select4thRow_13thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
private static WebElement  select4thRow_14thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
private static WebElement  select4thRow_15thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
private static WebElement  select4thRow_16thColumn;



@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
private static WebElement  select5thRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
private static WebElement  select5thRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
private static WebElement  select5thRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
private static WebElement  select5thRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
private static WebElement  select5thRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
private static WebElement  select5thRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
private static WebElement  select5thRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
private static WebElement  select5thRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
private static WebElement  select5thRow_9thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[11]")
private static WebElement  select5thRow_10thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[12]")
private static WebElement  select5thRow_11thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[13]")
private static WebElement  select5thRow_12thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[14]")
private static WebElement  select5thRow_13thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[15]")
private static WebElement  select5thRow_14thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[16]")
private static WebElement  select5thRow_15thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[17]")
private static WebElement  select5thRow_16thColumn;




@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
private static WebElement  select6thRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
private static WebElement  select6thRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
private static WebElement  select6thRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
private static WebElement  select6thRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
private static WebElement  select6thRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
private static WebElement  select6thRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
private static WebElement  select6thRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
private static WebElement  select6thRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
private static WebElement  select6thRow_9thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[11]")
private static WebElement  select6thRow_10thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[12]")
private static WebElement  select6thRow_11thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[13]")
private static WebElement  select6thRow_12thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[14]")
private static WebElement  select6thRow_13thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[15]")
private static WebElement  select6thRow_14thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[16]")
private static WebElement  select6thRow_15thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[17]")
private static WebElement  select6thRow_16thColumn;



@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
private static WebElement  select7thRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
private static WebElement  select7thRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
private static WebElement  select7thRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
private static WebElement  select7thRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
private static WebElement  select7thRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
private static WebElement  select7thRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
private static WebElement  select7thRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
private static WebElement  select7thRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
private static WebElement  select7thRow_9thColumn;




@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
private static WebElement  select8thRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
private static WebElement  select8thRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
private static WebElement  select8thRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
private static WebElement  select8thRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
private static WebElement  select8thRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
private static WebElement  select8thRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
private static WebElement  select8thRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
private static WebElement  select8thRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
private static WebElement  select8thRow_9thColumn;



@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
private static WebElement  select9thRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
private static WebElement  select9thRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
private static WebElement  select9thRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
private static WebElement  select9thRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
private static WebElement  select9thRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
private static WebElement  select9thRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
private static WebElement  select9thRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
private static WebElement  select9thRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
private static WebElement  select9thRow_9thColumn;




@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
private static WebElement  select10thRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
private static WebElement  select10thRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
private static WebElement  select10thRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
private static WebElement  select10thRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
private static WebElement  select10thRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
private static WebElement  select10thRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
private static WebElement  select10thRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
private static WebElement  select10thRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
private static WebElement  select10thRow_9thColumn;



@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
private static WebElement  select11thRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
private static WebElement  select11thRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
private static WebElement  select11thRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
private static WebElement  select11thRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
private static WebElement  select11thRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
private static WebElement  select11thRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
private static WebElement  select11thRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
private static WebElement  select11thRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
private static WebElement  select11thRow_9thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
private static WebElement  select12thRow_1stColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
private static WebElement  select12thRow_2ndColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
private static WebElement  select12thRow_3rdColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
private static WebElement  select12thRow_4thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
private static WebElement  select12thRow_5thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
private static WebElement  select12thRow_6thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
private static WebElement  select12thRow_7thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
private static WebElement  select12thRow_8thColumn;

@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
private static WebElement  select12thRow_9thColumn;

@FindBy(xpath="//input[@id='id_body_12']")
private static WebElement  enter_AccountTxt;

@FindBy(xpath="//input[@id='id_body_16777332']")
private static WebElement  enterpayVATTaxCode;

/*@FindBy(xpath="//input[@id='id_body_16777306']")
private static WebElement  enterpayVATTaxCode;*/

/*@FindBy(xpath="//input[@id='id_body_16777330']")
private static WebElement  enterReceiptsVATTaxCode;*/

@FindBy(xpath="//input[@id='id_body_16777336']")
private static WebElement  enterJVVATTaxCode;

@FindBy(xpath="//input[@id='id_body_16777340']")
private static WebElement  enterDebitVATTaxCode;
               
@FindBy(xpath="//input[@id='id_body_16777342']")
private static WebElement  enterCreditVATTaxCode;


@FindBy(xpath="//input[@id='id_body_16777346']")
private static WebElement  enterTaxcode;

@FindBy(xpath="//input[@id='id_body_16777344']")
private static WebElement  enterPVPVATTaxcode;



@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
private static WebElement  enter_Account_ExpansionBtn;

@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
private static WebElement  enter_Account_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
private static WebElement  enter_Account_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
private static WebElement  enter_Account_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
			private static WebElement  enter_Account_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
			private static WebElement  enter_Account_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
			private static WebElement  enter_Account_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
			private static WebElement  enter_Account_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_Account_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_Account_Settings_StandardFieldsBtn_CancelBtn;
						
@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
private static WebElement  enter_Account_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
private static WebElement  enter_Account_Settings_OkBtn;
				
@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_Account_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_body_16']")
private static WebElement  enter_Amount;

@FindBy(xpath="//textarea[@id='id_body_16777219']")
private static WebElement  enter_Receipts_Remarks;

@FindBy(xpath="//textarea[@id='id_body_16777222']")
private static WebElement  enter_Payments_Remarks;

@FindBy(xpath="//textarea[@id='id_body_16777225']")
private static WebElement  enter_PettyCash_Remarks;

@FindBy(xpath="//textarea[@id='id_body_16777228']")
private static WebElement  enter_PostDatedReceipts_Remarks;

@FindBy(xpath="//textarea[@id='id_body_16777231']")
private static WebElement  enter_PostDatedPaymentss_Remarks;

@FindBy(xpath="//input[@id='id_body_23']")
private static WebElement  enter_ItemTxt;

@FindBy(xpath="//*[@id='id_body_23_input_image']/span")
private static WebElement  item_ExpansionBtn;

@FindBy(xpath="//*[@id='id_body_23_input_settings']/span")
private static WebElement  item_SettingsBtn;

	@FindBy(xpath="//div[@id='id_body_23_customize_popup_container']")
private static WebElement  item_Settings_Container;
						
@FindBy(xpath="//div[@id='id_body_23_customize_popup_footer']//input[1]")
private static WebElement  item_Settings_StandardFieldsBtn;
						
	@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_list']")
	private static WebElement  item_Settings_StandardFieldsBtn_Fielddropdown;
										
	@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_header']")
	private static WebElement  item_Settings_StandardFieldsBtn_HeaderTxt;
									
	@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_alignment']")
	private static WebElement  item_Settings_StandardFieldsBtn_Alignmentdropdown;
										
	@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_width']")
	private static WebElement  item_Settings_StandardFieldsBtn_WidthTxt;
										
	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  item_Settings_StandardFieldsBtn_OkBtn;
										
	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  item_Settings_StandardFieldsBtn_CancelBtn;
						
@FindBy(xpath="//div[@id='id_body_23_search_container']//input[2]")
private static WebElement  item_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
private static WebElement  item_Settings_OkBtn;
				
@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  item_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_body_24']")
private static WebElement  enter_UnitTxt;

@FindBy(xpath="//*[@id='id_body_24_input_image']/span")
private static WebElement  unit_ExpansionBtn;

@FindBy(xpath="//*[@id='id_body_24_input_settings']/span")
private static WebElement  unit_SettingsBtn;

	@FindBy(xpath="//div[@id='id_body_24_customize_popup_container']")
private static WebElement  unit_Settings_Container;
						
@FindBy(xpath="//div[@id='id_body_24_customize_popup_footer']//input[1]")
private static WebElement  unit_Settings_StandardFieldsBtn;
						
	@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_list']")
	private static WebElement  unit_Settings_StandardFieldsBtn_Fielddropdown;
										
	@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_header']")
	private static WebElement  unit_Settings_StandardFieldsBtn_HeaderTxt;
									
	@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_alignment']")
	private static WebElement  unit_Settings_StandardFieldsBtn_Alignmentdropdown;
										
	@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_width']")
	private static WebElement  unit_Settings_StandardFieldsBtn_WidthTxt;
										
	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  unit_Settings_StandardFieldsBtn_OkBtn;
										
	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  unit_Settings_StandardFieldsBtn_CancelBtn;
						
@FindBy(xpath="//div[@id='id_body_24_search_container']//input[2]")
private static WebElement  unit_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
private static WebElement  unit_Settings_OkBtn;
				
@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  unit_Settings_CancelBtn;

		
@FindBy(xpath="//input[@id='id_body_26']")
private static WebElement  enter_Quantity;

@FindBy(xpath="//input[@id='id_body_27']")
private static WebElement  enter_Rate;

@FindBy(xpath="//*[@id='id_body_28']")
private static WebElement  enter_Gross;

@FindBy(xpath="//input[@id='id_body_13']")
private static WebElement  enter_Batch;

@FindBy(xpath="//input[@id='id_body_12']")
private static WebElement  enter_DebitACTxt;

@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
private static WebElement  enter_DebitAC_ExpansionBtn;

@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
private static WebElement  enter_DebitAC_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
private static WebElement  enter_DebitAC_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn;
						
	@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Fielddropdown;
										
	@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;
									
	@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Alignmentdropdown;
										
	@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;
										
	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;
										
	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;
						
@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
private static WebElement  enter_DebitAC_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
private static WebElement  enter_DebitAC_Settings_OkBtn;
				
@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_DebitAC_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_body_39']")
private static WebElement  enter_CreditACTxt;

@FindBy(xpath="//*[@id='id_body_39_input_image']/span")
private static WebElement  enter_CreditAC_ExpansionBtn;

@FindBy(xpath="//*[@id='id_body_39_input_settings']/span")
private static WebElement  enter_CreditAC_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_39_customize_popup_container']")
private static WebElement  enter_CreditAC_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_39_customize_popup_footer']//input[1]")
private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn;
						
	@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_list']")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;
										
	@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_header']")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;
									
	@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_alignment']")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;
										
	@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_width']")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;
										
	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;
										
	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;
						
@FindBy(xpath="//div[@id='id_header_39_search_container']//input[2]")
private static WebElement  enter_CreditAC_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
private static WebElement  enter_CreditAC_Settings_OkBtn;
				
@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_CreditAC_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_body_18']")
private static WebElement  enter_DebitTxt;

@FindBy(xpath="//input[@id='id_body_19']")
private static WebElement  enter_CreditTxt;

@FindBy(xpath="//textarea[@id='id_body_16777241']")
private static WebElement  enter_NonStandardJournalEntries_RemarksTxt;

@FindBy(xpath="//input[@id='id_body_87']")
private static WebElement  enter_Warehouse2Txt;

@FindBy(xpath="//*[@id='id_body_87_input_image']/span")
private static WebElement  enter_Warehouse2_ExpansionBtn;

@FindBy(xpath="//*[@id='id_body_87_input_settings']/span")
private static WebElement  enter_Warehouse2_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_87_customize_popup_container']")
private static WebElement  enter_WareHouse2_Settings_Container;
						
@FindBy(xpath="//div[@id='id_header_87_customize_popup_footer']//input[1]")
private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn;
						
	@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_list']")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;
										
	@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_header']")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;
									
	@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_alignment']")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;
										
	@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_width']")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;
										
	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;
										
	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;
						
@FindBy(xpath="//div[@id='id_header_87_search_container']//input[2]")
private static WebElement  enter_WareHouse2_Settings_DeleteColumnBtn;
						
@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
private static WebElement  enter_WareHouse2_Settings_OkBtn;
				
@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
private static WebElement  enter_WareHouse2_Settings_CancelBtn;


// Right Panel InfoSide Bar	
@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
private static WebElement  infoSideBarCustomizeBtn;
	

@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[3]/span")
private static WebElement  infoSideBarMinimizeExpandBtn;
	
	@FindBy(xpath="//li[@id='Trans_Dash_Save']//span[text()='Save']")
private static WebElement  customizeSaveBtn;

@FindBy(xpath="//span[@class='noWrap clsBlueColor'][contains(text(),'Cancel')]")
private static WebElement  customizeCancelBtn;

@FindBy(xpath="//input[@id='searchBoxTrans']")
private static WebElement  customizeSearchTxt;
			
@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@class='icon-search searchicon']")
private static WebElement  customizeSearchBtn;
			
@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='g']")
private static WebElement  graphBtn;
			
	@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='Newgraph']")
	private static WebElement  newGraphOption;
		
@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='r']")
private static WebElement  reportBtn;
	
	@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewReport']")
	private static WebElement  newReportOption;
			
@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='i']")
private static WebElement  infoPanelBtn;
			
	@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewInfopanel']")
	private static WebElement  newInfoPanelOption;
	
	
	
	@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='w']")
	private static WebElement  workFlowBtn;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewWorkflow']")
			private static WebElement  newWorkFlowOption;
					
	@FindBy(xpath="//a[@id='DocumentInfoOption']")
	private static WebElement  otherDashlets;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
		private static WebElement  documentInfo;
	
	
/*@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='w']")
		private static WebElement  workFlowBtn;
		                   
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//a[contains(text(),'New Workflow')]")
			private static WebElement  newWorkFlowOption;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='d']")
		private static WebElement  otherDashlets;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='id_Dashlet4']//a")
			private static WebElement  documentInfo;
*/
/*@FindBy(xpath="//span[contains(@class,'icon-left-and-right-panel-icon icon-font6 no_padding_left_right')]")
private static WebElement  infoSideBarMinimizeExpandBtn;	*/	
		
@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[3]/span")
private static WebElement  infoSideBarExpandBtn;


// Footer Section
@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
private static WebElement  netLabel;

@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
private static WebElement  netAmount;

@FindBy(xpath="//*[@id='id_transactionentry_summary_static']/div/div[1]")
private static WebElement  footerAmtLabel;

@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_16']")
private static WebElement  footerAmount;




//Navigation of Voucher Menus

// Financial Menu and Sub Menus
@FindBy(xpath="//span[@class='icon-financial icon-font1']")
private static WebElement  finacinalsMenu;

	@FindBy(xpath="//a[@id='61']//span[contains(text(),'Transactions')]")
private static WebElement  transactionsExpandBtn;
	
	@FindBy(xpath="//a[@id='2007']//span[contains(text(),'Purchases')]")
	private static WebElement  purchasesExpandBtn;
	
	@FindBy(xpath="//span[contains(text(),'Purchases Vouchers')]")
			private static WebElement  purchaseVouchersBtn;
			
   //Inventory Menu and Sub Menus		
@FindBy(xpath="//div[contains(text(),'Inventory')]")
private static WebElement  inventoryMenu; 

	@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
private static WebElement  inventoryTransactionsMenu; 
	
	@FindBy(xpath="//*[@id='139']/span")
	private static WebElement  inventoryTransactionsPurchasesMenu; 

		@FindBy(xpath="//*[@id='2010']/span")
		private static WebElement  requestForQuoteVoucher;
		
		@FindBy(xpath="//*[@id='2011']/span")
		private static WebElement  purchasesQuotationsVoucher;
			
		@FindBy(xpath="//*[@id='2012']/span")
		private static WebElement  purchasesOrdersVoucher;
	
		@FindBy(xpath="//*[@id='2013']/span")
		private static WebElement  materialReceiptNotesVoucher;
			
	@FindBy(xpath="//*[@id='140']/span")
	private static WebElement  inventoyTransactionsSalesMenu; 
		
		@FindBy(xpath="//*[@id='2018']/span")
		private static WebElement  salesQuotationsVoucher;
		
		@FindBy(xpath="//*[@id='2019']/span")
		private static WebElement  deliveryNotesVoucher;
		
		@FindBy(xpath="//*[@id='2022']/span")
		private static WebElement  posSalesVoucher;
		
		@FindBy(xpath="//*[@id='2045']/span")
		private static WebElement  productionOrdersVoucher;
		
		@FindBy(xpath="//*[@id='2017']/span")
		private static WebElement  salesOrdersVoucher;
					
	@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
	private static WebElement  inventoryTransactionsStocksMenu; 
		
		@FindBy(xpath="//*[@id='2034']/span")
		private static WebElement  shortagesInStockVoucher;
		
		@FindBy(xpath="//*[@id='2035']/span")
		private static WebElement  excessesInStocksVoucher;
			
		@FindBy(xpath="//*[@id='2036']/span")
		private static WebElement  stockTransfersVoucher;
		
		@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
		private static WebElement  openingStocksVoucher;
		
		@FindBy(xpath="//a[@id='2049']//span[contains(text(),'Opening Stocks New')]")
		private static WebElement  openingStocksNewVoucher;
		
		@FindBy(xpath="//*[@id='2038']/span")
		private static WebElement  materialRequisitionVoucher;
				
		@FindBy(xpath="//*[@id='2049']/span")
		private static WebElement  stockAdjustmentVoucher;
			
	@FindBy(xpath="//*[@id='164']/span")
	private static WebElement  holdAndUnholdStockVoucher;
	
	@FindBy(xpath="//*[@id='93']/span")
	private static WebElement  stockReconciliation;
	
	@FindBy(xpath="//*[@id='99']/span")
			private static WebElement  stockAllocation;
		
			
   //Validation and Confirmation messages
@FindBy(xpath="//div[@class='theme_color font-6']")
public static WebElement errorMessage;
 
@FindBy(xpath="//span[@class='icon-reject2 theme_color']")
public static WebElement errorMessageCloseBtn;

//Dash board Page
@FindBy(xpath="//*[@id='dashName']")
   private static WebElement labelDashboard ;
	
	@FindBy(xpath="//*[@id='Select_dash']")
private static WebElement selectDashboard ;
	
@FindBy(xpath="//*[@id='Dashboard_AddDash']")
   private static WebElement newAddDashBoard;
	 
   @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
   private static WebElement dashboardCustomizationSettings;
			
		   
		    
   //Vouchers Settings Options
@FindBy(xpath="//span[@id='updateButton']")
private static WebElement  updateBtn;

@FindBy(xpath="//i[@class='icon-close icon-font6']")
private static WebElement  settings_closeBtn;
				
	//Documents Tab
@FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
private static WebElement  documentsTab;

@FindBy(xpath="//li[@id='navigationtab1']")
private static WebElement  documentsTabForMaterialReceiptNotes;

@FindBy(xpath="//span[@id='DocumentLoadMasterPopupBtn']")
private static WebElement  loadMastersBtn;
	
	@FindBy(xpath="//select[@id='doc_voucherDropDown']")
	private static WebElement  loadmasterDropDown;
	
	@FindBy(xpath="//button[@id='btnSelectDependMaster']")
	private static WebElement  selectAllBtn;
	
	@FindBy(xpath="//button[contains(text(),'Reset')]")
	private static WebElement  resetBtn;
	
	@FindBy(xpath="//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
	private static WebElement  okBtn;
	
	@FindBy(xpath="//*[@id='editScreen_CustomizeButtons']/span[1]")
	private static WebElement  deleteTagBtn;
	
	@FindBy(xpath="//span[@id='DocumentAddGroupPopupBtn']")
	private static WebElement  addGroupBtn;
	
		@FindBy(xpath="//input[@id='doc_GroupName']")
		private static WebElement  groupNameTXt;
		
		@FindBy(xpath="//button[contains(text(),'Add')]")
		private static WebElement  addBtn;
		
		@FindBy(xpath="//div[@class='col-xs-12 form-group']//button[@id='btnCancel']")
		private static WebElement  cancelBtn;

	@FindBy(xpath="//div[@id='voucherTabContent']//span[2]")
	private static WebElement  deletegroupBtn;
	
	@FindBy(xpath="//input[@id='doc_title']")
	private static WebElement  titleTxt;
	
	@FindBy(xpath="//input[@id='doc_baseDocument']")
	private static WebElement  baseDocumentTxt;
	
	@FindBy(xpath="//input[@id='txtbox_doc_Accountdepandency']")
	private static WebElement  accountDependencyTxt;
	
		@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentGainAC')]")
		private static WebElement  iExchangeAdjustmentGainACChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentLossAC')]")
		private static WebElement  iExchangeAdjustmentLossACChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iPrimaryAccount')]")
		private static WebElement  iPrimaryAccountChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iCity')]")
		private static WebElement  iCityChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iDeliveryCity')]")
		private static WebElement  iDeliverycityChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iBankAc')]")
		private static WebElement  iBankACChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iPDCDiscountedAC')]")
		private static WebElement  iPDCDiscountedACChkBox;
				
	@FindBy(xpath="//input[@id='txtbox_doc_Productdepandency']")
	private static WebElement  itemDependencyTxt;
	
		@FindBy(xpath="//span[contains(text(),'Outlet__')]")
		private static WebElement  outletChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iCostofShortageStockAC')]")
		private static WebElement  iCostofShortageStockACChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iCostofExcessStockAC')]")
		private static WebElement  iCostofExcessStockACChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iCostofSaleReturnAC')]")
		private static WebElement  iCostofSaleReturnACChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iPurchaseVarianceAC')]")
		private static WebElement  iPurchaseVarianceACChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iDefaultBaseUnit')]")
		private static WebElement  iDefaultBaseUnitChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iDefaultSalesUnit')]")
		private static WebElement  iDefaultSalesUnitChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iDefaultPurchaseUnit')]")
		private static WebElement  iDefaultPurchaseUnitChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iCostOfIssueAccount')]")
		private static WebElement  iCostOfIssueAccountChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iStocksAccount')]")
		private static WebElement  iStocksAccountChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iSalesAccount')]")
		private static WebElement  iSalesAccountChkBox;
		
		@FindBy(xpath="//li[12]//div[1]//label[1]//span[1]")
		private static WebElement  otherdetails1Box;
		
		@FindBy(xpath="//li[13]//div[1]//label[1]//span[1]")
		private static WebElement  replenishment1ChkBox;
		
		@FindBy(xpath="//span[contains(text(),'Reorder__')]")
		private static WebElement  reorderChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iCategory')]")
		private static WebElement  iCategoryChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iWIPAccount')]")
		private static WebElement  iWIPAccountChkBox;
		
		@FindBy(xpath="//span[contains(text(),'Classification__')]")
		private static WebElement  classificationChkBox;
		
		@FindBy(xpath="//li[18]//div[1]//label[1]//span[1]")
		private static WebElement  repelenishment2ChkBox;
		
		@FindBy(xpath="//li[19]//div[1]//label[1]//span[1]")
		private static WebElement  otherDetails2ChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iBin')]")
		private static WebElement  iBinChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iAlternateCategory')]")
		private static WebElement  iAlternateCategoryChkBox;
		
		@FindBy(xpath="//span[contains(text(),'iTaxCode')]")
		private static WebElement  iTaxCodeChkBox;
	
	@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
	private static WebElement  accountfilterDropdown;
	
	@FindBy(xpath="//select[@id='doc_Itemdepandency_Filter']")
	private static WebElement  itemfilterDropdown;
	
	
	// Documents Tab Grid Elements
	
    // first row 
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-0']")
	private static WebElement  firstrow;
	
	@FindBy(xpath="//div[contains(text(),'Delete Row')]")
	private static WebElement  doc_deleterowBtn;
	
	@FindBy(xpath="//div[contains(text(),'Insert Row')]")
	private static WebElement  doc_insertRowBtn;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
	private static WebElement  masters1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
	private static WebElement  position1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-3']")
	private static WebElement  showDependency1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-4']")
	private static WebElement  group1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-5']")
	private static WebElement  filter1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-6']")
	private static WebElement  mandatory1;
	
	
	// Second Row // Delete and Insert row are same
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-0']")
	private static WebElement  secondRow;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
	private static WebElement  masters2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
	private static WebElement  position2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-3']")
	private static WebElement  showDependency2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-4']")
	private static WebElement  group2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-5']")
	private static WebElement  filter2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-6']")
	private static WebElement  mandatory2;
	
	// After clicking // Properties Changes which are same for all rows
	
	@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
	private static WebElement  masterDropDown;
	
	@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
	private static WebElement  positionDropdown;
	
	@FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
	private static WebElement  showDependencyDropdown;
	
	@FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
	private static WebElement  groupTxt;
	
	@FindBy(xpath="//select[@id='docFilter']")
	private static WebElement  filterDropdown;
	
	@FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
		private static WebElement  mandatoryDropDown;
		
	    

		
 //Views Tab
@FindBy(xpath="//span[@class='icon-views'")
private static WebElement  viewsTab;
	
//Export Fields 
@FindBy(xpath="//span[contains(text(),'Export Fields')]")
private static WebElement exportFieldsTab;
	
//Triggers
@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
private static WebElement  triggersTab;	
	
//Document Numbering
@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
private static WebElement  documentNumberingTab;
	
//Hire Purchase	
@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
private static WebElement hirePurchasetab;
	
//Reports Tab	
@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
private static WebElement  reportsTab;	

//Schemes
@FindBy(xpath="//span[contains(text(),'Schemes')]")
private static WebElement schemestab;	


// Bin Inward Elements

@FindBy (xpath="//input[@id='id_bins_totalquantity']")
private static WebElement binTotalQty;

@FindBy (xpath="//div[@class='modal-body']//div[4]")
private static WebElement binBaseUOM;

@FindBy (xpath="//input[@id='srch_bin']")
private static WebElement binSearchTxt;

@FindBy (xpath="//i[@class='icon-search']")
private static WebElement binSearchBtn; 

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
private static WebElement  binselect1stRow_1stColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
private static WebElement  binselect1stRow_2ndColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
private static WebElement  binselect1stRow_3rdColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
private static WebElement  binselect1stRow_4thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
private static WebElement  binselect1stRow_5thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
private static WebElement  binselect1stRow_6thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
private static WebElement  binselect1stRow_7thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
private static WebElement  binselect1stRow_8thColumn;


@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
private static WebElement  binselect2ndRow_1stColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
private static WebElement  binselect2ndRow_2ndColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
private static WebElement  binselect2ndRow_3rdColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
private static WebElement  binselect2ndRow_4thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
private static WebElement  binselect2ndRow_5thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
private static WebElement  binselect2ndRow_6thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
private static WebElement  binselect2ndRow_7thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
private static WebElement  binselect2ndRow_8thColumn;


@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
private static WebElement  binselect3rdRow_1stColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
private static WebElement  binselect3rdRow_2ndColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
private static WebElement  binselect3rdRow_3rdColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
private static WebElement  binselect3rdRow_4thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
private static WebElement  binselect3rdRow_5thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
private static WebElement  binselect3rdRow_6thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
private static WebElement  binselect3rdRow_7thColumn;

@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
private static WebElement  binselect3rdRow_8thColumn;


@FindBy(xpath="//span[@class='icon-sum']")
private static WebElement  binRowSum;

@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[2]")
private static WebElement  binRowSum_2ndColumn;

@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[4]")
private static WebElement  binSelect4htRow_3rdColumn;

@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[6]")
private static WebElement  binRowSum_4thColumn;

@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[7]")
private static WebElement  binRowSum_5thColumn;

@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[8]")
private static WebElement  binRowSum_6thColumn;

@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[9]")
private static WebElement  binRowSum_7thColumn;

@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[12]")
private static WebElement  binRowSum_8thColumn;


@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
private static WebElement  binSumInward;



@FindBy (xpath="//input[@id='id_bins_balance']")
private static WebElement binBalanceTxt;

@FindBy (xpath="//div[@id='id_btnalternatecategorycheck']//div[@class='toolbar_button_image']")
private static WebElement binAlternateCategoryCheckBtn;

@FindBy (xpath="//div[@id='id_btnautoallocate']//div[@class='toolbar_button_image']")
private static WebElement binAutoAllocateBtn;

@FindBy (xpath="//span[@class='icon-pick icon-font4']")
private static WebElement binPickBtn; 

@FindBy (xpath="//div[@id='id_btnautoallocategroup']//div[@class='toolbar_button_image']")
private static WebElement binAutoAllocateWithinGroupBtn;

@FindBy (xpath="//div[@id='id_bins_ok']//span[@class='icon-ok icon-font6']")
private static WebElement binOkBtn;

@FindBy (xpath="//div[@class='col-xs-9 pull-right']//span[@class='icon-close icon-font6']")
private static WebElement binCancelBtn;


// RMA POpup Window
@FindBy (xpath="//div[@id='Modal_Header']/div[1]")
private static WebElement rmaScreenTitle;

@FindBy (xpath="//input[@id='txtSerialNo']")
private static WebElement rmaSerialNumberTxtField;

@FindBy (xpath="//input[@id='txtQuantity']")
private static WebElement rmaQuantityTxtField;

@FindBy (xpath="//div[@id='img_add']/span")
private static WebElement rmaAddBtn;
	
@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
private static WebElement rmaNumberofItemsLabel;

@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
private static WebElement rmaTableHeadingRMA;

@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
private static WebElement rmaTableHeadingDocumentNo;

@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
private static WebElement rmaTableHeadingDocumentDate;

@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
private static WebElement rmaClearBtn;

@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
private static WebElement rmaOkBtn;

@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
private static WebElement rmaCancelBtn;

@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
private static WebElement rmaCloseBtn;

@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
private static WebElement rmaTableRow1Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
private static WebElement rmaTableRow2Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
private static WebElement rmaTableRow3Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
private static WebElement rmaTableRow4Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
private static WebElement rmaTableRow5Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
private static WebElement rmaTableRow6Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
private static WebElement rmaTableRow7Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
private static WebElement rmaTableRow8Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
private static WebElement rmaTableRow9Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
private static WebElement rmaTableRow10Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
private static WebElement rmaTableRow11Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
private static WebElement rmaTableRow12Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
private static WebElement rmaTableRow13Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
private static WebElement rmaTableRow14Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
private static WebElement rmaTableRow15Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
private static WebElement rmaTableRow16Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
private static WebElement rmaTableRow17Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
private static WebElement rmaTableRow18Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
private static WebElement rmaTableRow19Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
private static WebElement rmaTableRow20Column1;

@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
private static WebElement rmaTableRow1Column2;

@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
private static WebElement rmaTableRow1Column3;

@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
private static WebElement rmaExpansionBtn;


//----------------------------------------------------------------------------------------------------------    
// Edit Screen Tab     
		    
@FindBy(xpath="//span[contains(text(),'Edit Screen')]")
private static WebElement  editScreenTab; 

@FindBy(xpath="//i[@class='icon-add icon-font7']")
private static WebElement editScreenaddBtn;

@FindBy(xpath="//a[contains(text(),'Field Details')]")
	private static WebElement editScreenFieldDetailsTab;
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Caption']")
private static WebElement  editScreenCaptionTxt;

@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_DataType']")
private static WebElement  editScreenCaptionDataTypeDropdown;

@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_DefaultValue']")
	private static WebElement editScreenDefaultValueTxt;
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_noofDecimals']")
	private static WebElement editScreenNoOfDecimalsDropdown;
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_toolTip']")
	private static WebElement editScreenToolTipTxt;
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_bannerText']")
	private static WebElement editScreenBannerTextTxt;
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MinValue']")
	private static WebElement editScreenMinimunValueTxt;
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MaxValue']")
	private static WebElement editScreenMaximunValueTxt;
   
	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_behaviour']")
private static WebElement editScreenAddFieldsBehaviourDropdown;

@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_textbox']")
private static WebElement  editScreenAddBehaviourformulaTxt;

@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_Ok']")
	private static WebElement  editScreenAddBehaviourFormulaokBtn;
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
	private static WebElement editScreenPreloadTxt;
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
	private static WebElement editScreenRestrictformulaTxt;
   
	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_RoundOff']")
	private static WebElement editScreenRoundOffsDropdown;
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RoundOffTo']")
	private static WebElement editScreenRoundOffToTxt;
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RestrictMsg']")
	private static WebElement editScreenRestrictMessageTxt;
   
	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToNet']")
	private static WebElement editScreenAddToNetDropdown;
   
	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToStock']")
private static WebElement editScreenAddToStockDropDown;

@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_Position']")
	private static WebElement editScreenpositionDropdown;  
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Columnwidth']")
	private static WebElement editScreenColumnWidthTxt;  
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
	private static WebElement editScreenValueInBaseCurrencyChkBox;  
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
	private static WebElement editScreenHideFromSummaryChkBox;  
   
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkPostToAcc']")
	private static WebElement editScreenPostToAccountChkBox;  
 
	@FindBy(xpath="//input[@id='acc1-1']")
private static WebElement editScreenAccount1Radio;  
		   
@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1']")
	private static WebElement editScreenAccount1Txt;  
   
	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_image']/span")
	private static WebElement editScreenAccount1ExpandBtn;  
   
	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_settings']/span")
private static WebElement editScreenAccount1SettingsBtn;  
		   
    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_container']")
	private static WebElement editScreenAccount1Container;  
    
    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_footer']//input[1]")
	private static WebElement editScreenAccount1StandardFiledsBtn;  
					    
	    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_list']")
		private static WebElement editScreenAccount1StandardFiledsDropdown;  
	    
	    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_header']")
		private static WebElement editScreenAccount1StandardFiledsHeaderTxt;  
	    
	    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_alignment']")
		private static WebElement editScreenAccount1StandardFiledsAllignmentDropdown; 
	    
	    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_width']")
		private static WebElement editScreenAccount1StandardFiledsWidthTxt;  
	    
	    @FindBy(xpath="//section[@id='page_Content']//input[3]")
		private static WebElement editScreenAccount1StandardFiledsokBtn;  
	    
	    @FindBy(xpath="//section[@id='page_Content']//input[4]")
		private static WebElement editScreenAccount1StandardFiledscancelBtn;  
					    
    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_search_container']//input[2]")
	private static WebElement editScreenAccount1deleteColumnBtn;
    
    @FindBy(xpath="//section[@id='page_Content']//input[3]")
   	private static WebElement editScreenAccount1okBtn;  
       
    @FindBy(xpath="//section[@id='page_Content']//input[4]")
   	private static WebElement editScreenAccount1cancelBtn;
		
@FindBy(xpath="//input[@id='acc2-2']")
private static WebElement editScreenAccount2Radio;  
    
@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2']")
private static WebElement editScreenAccount2Txt;  
    
@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_image']/span")
	private static WebElement editScreenAccount2ExpandBtn;
  
    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_settings']/span")
private static WebElement editScreenAccount2SettingsBtn;  
		      
    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_container']")
	private static WebElement editScreenAccount2Container;  
    
    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_footer']//input[1]")
	private static WebElement editScreenAccount2StandardFiledsBtn;  
		  			    
	    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_list']")
		private static WebElement editScreenAccount2StandardFiledsDropdown;  
	    
	    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_header']")
		private static WebElement editScreenAccount2StandardFiledsHeaderTxt;  
	    
	    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_alignment']")
		private static WebElement editScreenAccount2StandardFiledsAllignmentDropdown; 
	    
	    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_width']")
		private static WebElement editScreenAccount2StandardFiledsWidthTxt;  
	    
	    @FindBy(xpath="//section[@id='page_Content']//input[3]")
		private static WebElement editScreenAccount2StandardFiledsokBtn;  
	    
	    @FindBy(xpath="//section[@id='page_Content']//input[4]")
		private static WebElement editScreenAccount2StandardFiledscancelBtn;  
		  			    
    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_search_container']//input[2]")
	private static WebElement editScreenAccount2deleteColumnBtn;
    
    @FindBy(xpath="//section[@id='page_Content']//input[3]")
   	private static WebElement editScreenAccount2okBtn;  
       
    @FindBy(xpath="//section[@id='page_Content']//input[4]")
	   	private static WebElement editScreenAccount2cancelBtn;
   
   @FindBy(xpath="//input[@id='acc1-3']")
   private static WebElement editScreenAccount1VariableRadio; 
  
   @FindBy(xpath="//input[@id='Account_1Var']")
   private static WebElement editScreenAccount1VariableTxt;
   
   @FindBy(xpath="//input[@id='acc2-4']")
   private static WebElement editScreenAccount2VariableRadio; 
  
   @FindBy(xpath="//input[@id='Account_2Var']")
   private static WebElement editScreenAccount2VariableTxt;
   
   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RegularExpr']")
   private static WebElement editScreenRegularExpTxt; 
   
   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_ErrorMsg']")
   private static WebElement editScreenerrorMessageTxt; 

 // properties  
   
  @FindBy(xpath="//a[contains(text(),'Properties')]")
  private static WebElement editScreenPropertiesTab;  
     
  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkAuditTrail']")
  private static WebElement editScreenauditTrailChkBox;  
     
  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantExprt']")
  private static WebElement editScreencantExportChkBox;  
  
  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantImprt']")
  private static WebElement editScreencantImportChkbox; 
     
  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkHidden']")
  private static WebElement editScreenhiddenChkbox;  
  
  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkMandatory']")
  private static WebElement editScreenmandatorychkBox; 
     
  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkNotAvailForReports']")
  private static WebElement editScreennotAvailableForReportsChkBox;  
     
  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkReadOnly']")
  private static WebElement editScreenreadOnlyChkBox;  
 
     
  @FindBy(xpath="//span[contains(text(),'Apply')]")
  private static WebElement editScreenApplyBtn;  
     
  @FindBy(xpath="//span[@id='editScreen_FieldsCustomization_Close']")
  private static WebElement editScreencloseBtn;  
  

 
  @FindBy(xpath="//a[@href='#editScreen_FieldsCustomization_ExternalModules']")
  private static WebElement editScreenExternalModulesTab; 
			
	// External Module Tab is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
// External Functions(External Fields) Changes From Screen to Screen

// Formatting Tab
		  
@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_tabs']/li[3]/a")
private static WebElement editScreenformattingTab;

@FindBy(xpath="//*[@id='fontFamily_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement editScreenFontFamilyDropdown;

@FindBy(xpath="//*[@id='fontStyle_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement editScreenFontStyleDropdown;

@FindBy(xpath="//*[@id='fontWeight_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement editScreenFontWeightDropdown;

@FindBy(xpath="//*[@id='fontSizes_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement editScreenFontSizeDropdown;

@FindBy(xpath="//*[@id='fontForeColor_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement editScreenForeColourDropdown;

@FindBy(xpath="//*[@id='fontBackColor_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement editScreenBackColourDropdown;

@FindBy(xpath="//*[@id='chkBaseline_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement editScreenBaseLineCheckbox;

@FindBy(xpath="//*[@id='chkOverLine_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement editScreenOverLineCheckbox;

@FindBy(xpath="//*[@id='chkStrikeThrough_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement EditScreenStrikeThroughCheckbox;

@FindBy(xpath="//*[@id='chkUnderline_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement editScreenUnderlineCheckbox;

@FindBy(xpath="//*[@id='previewfont_editScreen_FieldsCustomization_FontCtrl']")
private static WebElement editScreenFontPreviewTxt;

@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Formatting_chkenableFont']")
private static WebElement editScreenenableFontChkbox;
		
  @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
  private static WebElement editScreenLoadFieldsBtn;  
     
  @FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
  private static WebElement editScreenLoadFieldsDropdown;  
     
  @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[1]")
  private static WebElement editScreenselectAllBtn;  
  
  @FindBy(xpath="//div[@id='editScreen_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
  private static WebElement editScreenokBtn;  
     
  @FindBy(xpath="//input[@id='searchlayout2']")
  private static WebElement editScreenSearchTxt;  
     
  @FindBy(xpath="//button[@id='btnEditScreenPrev']")
  private static WebElement editScreenPreviousBtn;  
     
  @FindBy(xpath="//button[@id='btnEditScreenNext']")
  private static WebElement editScreenNextBtn;  
  
  @FindBy(xpath="//*[@id='editScreen_tabContent']/label")
	private static WebElement editScreenRatePreloadLabel;
  
  @FindBy(xpath="//select[@id='cmbBehaviour']")
  private static WebElement editScreenBehaviourDropdown;
  
  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
  private static WebElement editScreenQuantityPreloadedTxt;
  	  
  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
  private static WebElement  formulaTxt;
	
  @FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_expandedFormula']")
  private static WebElement  expandeFormula;
			
 // Grid Elements 
@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_1-2']//span[@class='icon-collepse icon-font8']")
private static WebElement  editScreenTransactionExpandBtn;
		
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-2']")
	private static WebElement  editScreenQuantity;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-3']")
	private static WebElement  editScreenqty;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-2']")
	private static WebElement  editScreenRate;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-3']")
	private static WebElement  editScreenrt;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-2']")
	private static WebElement  editScreenAlternateQty;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-3']")
	private static WebElement  editScreenqtya;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-2']")
	private static WebElement  editScreengrossAmount;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-3']")
	private static WebElement  editScreengr;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-2']")
	private static WebElement  editScreenStockValue;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-3']")
	private static WebElement  editScreenstkv;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-2']")
	private static WebElement  editScreenAccount;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-3']")
	private static WebElement  EditScreenacc;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-2']")
	private static WebElement  editScreenAccount2;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-3']")
	private static WebElement  editScreenacc2;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-2']")
	private static WebElement  editScreenExchangeRate;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-3']")
	private static WebElement  editScreenexrt;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-2']")
	private static WebElement  editScreenqtyinBaseUnit;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-3']")
	private static WebElement  editScreenqtyb;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-2']")
	private static WebElement  editScreenCurrency;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-3']")
	private static WebElement  editScreencrn;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-2']")
	private static WebElement  editScreenValueOfThetagMasterIDofTheTag;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-3']")
	private static WebElement  editScreentgval;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-2']")
	private static WebElement  editScreenNetAmount;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-3']")
	private static WebElement  EditScreennet;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-2']")
	private static WebElement  editScreenNetAmountInOriginalCurrency;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-3']")
	private static WebElement  editScreenneto;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-2']")
	private static WebElement  editScreenTotalQuantity;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-3']")
	private static WebElement  editScreentqty;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-2']")
	private static WebElement  editScreenTotalGross;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-3']")
	private static WebElement  editScreentgr;
					
@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_17-2']//span[@class='icon-expand icon-font8']")
private static WebElement  screenFiledExpandBtn;
		
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-2']")
	private static WebElement  mrnQtyInput;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-3']")
	private static WebElement  sb1;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-2']")
	private static WebElement  mrnQtyCalculatedValue;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-3']")
	private static WebElement  sbo1;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-2']")
	private static WebElement  qtyBalancedInput;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-3']")
	private static WebElement  sb2;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-2']")
	private static WebElement  qtyCalculatedValue;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-3']")
	private static WebElement  sbO2;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-2']")
	private static WebElement  averagerateInput;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-3']")
	private static WebElement  sb3;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-2']")
	private static WebElement  avreageRateCalculatedValue;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-3']")
	private static WebElement  sbO3;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-2']")
	private static WebElement  addValueInput;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-3']")
	private static WebElement  sb4;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-2']")
	private static WebElement  addValueInputCalculatedValue;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-3']")
	private static WebElement  sbO4;
		
@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_26-2']//span[@class='icon-collepse icon-font8']")
private static WebElement  layoutFieldExpandBtn;

	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-2']")
	private static WebElement  appropriateBasedOnInput;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-3']")
	private static WebElement  lh0;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-2']")
	private static WebElement  additionalValueInput;
	
	@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-3']")
	private static WebElement  lh1;
					
//Grid Completed

@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
private static WebElement  editScreenqtyFormulaSearchTxt;

@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_PlusOpt']")
private static WebElement  editScreenqtyPlusBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'-')]")
private static WebElement  editScreenqtyMinusBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[3]")
private static WebElement  editScreenqtyDivideBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'*')]")
private static WebElement  editScreenqtyMultiplyBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[5]")
private static WebElement  editScreenqtyBrackets1Btn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[6]")
private static WebElement  editScreenqtyBrackets2Btn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'~')]")
private static WebElement  editScreenqtyTildeBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'&')]")
private static WebElement  editScreenqtyAndBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'%')]")
private static WebElement  editScreenqtyPercentBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//div[@id='operationButtons']//button[@class='btn btn-link'][contains(text(),']')]")
private static WebElement  editScreenqtySquarebracketBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'|')]")
private static WebElement  editScreenqtyVerticalBarBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'\')]")
private static WebElement  editScreenqtyBackSlashBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'<')]")
private static WebElement  editScreenqtyLessThanbtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'>')]")
private static WebElement  editScreenqtyGreaterThanBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
private static WebElement  editScreenqtyExclamationBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
private static WebElement  editScreenqtyEqualBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'?:')]")
private static WebElement  editScreenqtyQuestionBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'^')]")
private static WebElement  editScreenqtyCaretBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'DateDiff()')]")
private static WebElement  editScreenqtyDateDiffBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Cond()')]")
private static WebElement  editScreenqtyCondBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Min()')]")
private static WebElement  editScreenqtyMinBtn;

@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Max()')]")
private static WebElement  editScreenqtyMaxBtn;

@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
private static WebElement  editScreenqtyConditionokBtn;

@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
private static WebElement  editScreenqtyConditioncancelBtn;
		
		
@FindBy(xpath="//*[@id='editScreen_qtyFormula_textbox']")
private static WebElement  editScreenformulaTxt;


// CustomizeGrid

@FindBy(xpath="//i[@class='icon-custamize icon-font7']")
private static WebElement editScreencustomizeGridBtn;  
  
@FindBy(xpath="//span[contains(text(),'Apportion')")
private static WebElement editScreenApportionBtn;
     
@FindBy(xpath="//span[contains(text(),'Audit Trial')]")
private static WebElement editScreenAuditTrialBtn;  
    
@FindBy(xpath="//span[contains(text(),'Back color')]")
private static WebElement editScreenbackColorBtn;  
     
@FindBy(xpath="//span[contains(text(),'Banner text')]")
private static WebElement editScreenbannerTextBtn;  
 
  @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
  private static WebElement editScreencannotBeExportedBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
  private static WebElement editScreencannotBeImportedBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Column Span')]")
  private static WebElement editScreencolumnSpanBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
  private static WebElement editScreencopyFromParentBtn;  
     
  @FindBy(xpath="//span[contains(text(),'DataType')]")
  private static WebElement editScreendataTypeBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Default Value')]")
  private static WebElement editScreenDefaultValueBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Error message')]")
  private static WebElement editScreenerrorMessageBtn;  
 
  @FindBy(xpath="//span[contains(text(),'External module attached')]")
  private static WebElement editScreenExternalModuleAttachedBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Field Order')]")
  private static WebElement editScreenFilterOrderBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Font')]")
  private static WebElement editScreenFontBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Group Name')]")
  private static WebElement editScreengroupNameBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
  private static WebElement editScreenHideLeftPanelBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Information Field')]")
  private static WebElement editScreenInformationFieldBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Mandatory')]")
  private static WebElement editScreenMandatoryBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Mass Update')]")
  private static WebElement editScreenMassupdateBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
  private static WebElement editScreenMaximumValueBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Merge Field')]")
  private static WebElement editScreenMergerFieldBtn;  
  
  @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
  private static WebElement editScreenMinimumValueBtn;  
     
  @FindBy(xpath="//span[contains(text(),'No Of Decimals')]")
  private static WebElement editScreenNoOfDecimalsBtn;  
  
  @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
  private static WebElement editScreenNotAvailableForReportsBtn; 
     
  @FindBy(xpath="//span[contains(text(),'Read Only')]")
  private static WebElement editScreenReadOnlyBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Regular expression')]")
  private static WebElement editScreenRegularExpressionBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Restrict formula')]")
  private static WebElement editScreenRestrictFormulaBtn;  
  
  @FindBy(xpath="//span[contains(text(),'Restrict Message')]")
  private static WebElement editScreenRestrictMessageBtn;  
  
  @FindBy(xpath="//span[contains(text(),'Round Offs')]")
  private static WebElement editScreenRoundsOffsBtn;  

  @FindBy(xpath="//span[contains(text(),'Row Span')]")
  private static WebElement editScreenRowSpanBtn; 
     
  @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
  private static WebElement editScreenRuleAttachedBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Tooltip')]")
  private static WebElement editScreenToolTipBtn;  
     
  @FindBy(xpath="//span[contains(text(),'Variable name')]")
  private static WebElement editScreenVariableNameBtn;  
 
  
  
  

 // Body Tab 
  
  @FindBy(xpath="//a[contains(text(),'Body')]")
  private static WebElement  editScreenBodyTab; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='editIcon']")
  private static WebElement  editScreenBody1stRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenBody1stRowDeleteBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='editIcon']")
  private static WebElement  editScreenBody2ndRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenBody2ndRowDeleteBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='editIcon']")
  private static WebElement  editScreenBody3rdRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenBody3rdRowDeleteBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='editIcon']")
  private static WebElement  editScreenBody4thRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenBody4thRowDeleteBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='editIcon']")
  private static WebElement  editScreenBody5thRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenBody5thRowDeleteBtn;
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='editIcon']")
  private static WebElement  editScreenBody6thRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenBody6thRowDeleteBtn;
  
  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-up-arrow Fbutton']")
  private static WebElement  editScreenBodyUpArrowBtn; 

  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-down-arrow Fbutton']")
  private static WebElement  editScreenBodyDownArrowBtn;
				
  // Footer Tab
  
  @FindBy(xpath="//a[contains(text(),'Footer')]")
  private static WebElement  editScreenFooterTab;  
  
  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='editIcon']")
  private static WebElement  editScreenFooter1stRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenFooter1stRowDeleteBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='editIcon']")
  private static WebElement  editScreenFooter2ndRowEditBtn; 
  
  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='deleteIcon']")
  private static WebElement  editScreenFooter2ndRowDeleteBtn; 
  
  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-up-arrow Fbutton']")
  private static WebElement  editScreenFooterUpArrowBtn; 

  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-down-arrow Fbutton']")
  private static WebElement  editScreenFooterDownArrowBtn; 
  
  	@FindBy(xpath="//label[contains(text(),'Quantity preloaded')]")
	private static WebElement qtyPreloadedLabel;
	
	@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
	private static WebElement qtyPreloadedTxt;
	
	@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
	private static WebElement qtyPreloadedformulaTxt;
	
	@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
	private static WebElement qtyPreloadedFormulaSearchTxt;
	
	@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
	private static WebElement qtyPreloadedFormulaokBtn;
	
	@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
	private static WebElement qtyPreloadedFormulacancelBtn;


	@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[1]/label/span")
	private static WebElement editScreenLoadFields1stChkBox;
	
	@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[2]/label/span")
	private static WebElement editScreenLoadFields2ndChkBox;
	
	@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[3]/label/span")
	private static WebElement editScreenLoadFields3rdChkBox;
	
	@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[4]/label/span")
	private static WebElement editScreenLoadFields4thChkBox;
	
	@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[5]/label/span")
	private static WebElement editScreenLoadFields5hChkBox;
	
	@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[6]/label/span")
	private static WebElement editScreenLoadFields6thChkBox;
	
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_formulaText']")
	private static WebElement  preloadformulaTxt;
	
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_availableVariables']")
	private static WebElement  preloadFormulaSearchTxt;
	
	@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
	private static WebElement  preloadFormulaokBtn;
		
	@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Cancel']")
	private static WebElement  preloadFormulacancelBtn;
	
	
	@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
	private static WebElement  editScreenFooter1stRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
	private static WebElement  editScreenFooter2ndRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _3']")
	private static WebElement  editScreenbody1stRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _3']")
	private static WebElement  editScreenbody2ndRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _3']")
	private static WebElement  editScreenbody3rdRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _3']")
	private static WebElement  editScreenbody4thRowCaption;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _3']")
	private static WebElement  editScreenbody5thRowCaption;
	
	
	
	// Add To Stock Status
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _14']")
	private static WebElement  editScreenbody1stRowAddtoStock;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _14']")
	private static WebElement  editScreenbody2ndRowAddtoStock;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _14']")
	private static WebElement  editScreenbody3rdRowAddtoStock;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _14']")
	private static WebElement  editScreenbody4thRowAddtoStock;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _14']")
	private static WebElement  editScreenbody5thRowAddtoStock;			
	
// Suspend Status Of Entry Page
@FindBy(xpath="//tr[1]//td[11]")
		private static WebElement suspendStatusRow1;
	


   
   // Inentory Menu 
   
   @FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
   private static WebElement  invTransactionsMenu; 
   
   @FindBy(xpath="//a[@id='139']//span[contains(text(),'Purchases')]")
   private static WebElement  invTransPurchasesMenu; 
   
   @FindBy(xpath="//a[@id='140']//span[contains(text(),'Sales')]")
   private static WebElement  invTransSalesMenu; 
   
   @FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
   private static WebElement  invTransStocksMenu; 
   
   @FindBy(xpath="//a[@id='200']//span[contains(text(),'Reports')]")
	private static WebElement  inventoryReportsMenu; 
   
	@FindBy(xpath="//span[contains(text(),'Order Management')]")
private static WebElement  orderManagementMenu; 

// Home Menu
@FindBy(xpath = "//*[@id='1']/div/span")
public static WebElement homeMenu;

//Financial Menu
@FindBy (xpath="//span[@class='icon-financial icon-font1']")
private static WebElement financialMenu;

//Fixed Assets Menu
@FindBy (xpath="//span[@class='icon-assets icon-font1']")
private static WebElement fixedAssetsMenu;

//Production Menu
@FindBy (xpath="//span[@class='icon-production icon-font1']")
private static WebElement productionMenu;

//Point Of Sale Menu
@FindBy (xpath="//div[contains(text(),'Point of Sale')]")
private static WebElement pointOfSaleMenu;

//Quality Of Control Menu
@FindBy (xpath="//span[@class='icon-quotationanalysis icon-font1']")
private static WebElement qualityControlMenu;

//Settings Menu
@FindBy (xpath="//span[@class='icon-settings icon-font1']")
private static WebElement SettingsMenu;


// Login Page
@FindBy(xpath = "//*[@id='txtUsername']")
private static WebElement username;


	
private static String xlfile;
private static String resPass="Pass";
private static String resFail="Fail";
private static ExcelReader excelReader;

/*private static String xlSheetName = "SmokeVouchers";*/
	
	private static boolean Status;

	private String expOsVoucherGrossR4;
	
	

 public boolean checkLoadingMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		String actVoucherLoadingMessage=errorMessage.getText();
		String expVoucherLoadingMessage="Voucher loaded successfully";

System.out.println("VoucherLoadingMessage  : " + actVoucherLoadingMessage + " Value Expected : " + expVoucherLoadingMessage);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
	errorMessageCloseBtn.click();

	if(actVoucherLoadingMessage.startsWith(expVoucherLoadingMessage))
	{
		return true;
	}
	else
	{
		return false;
	}
}
catch(Exception e)
{
	System.err.println("UNABLE TO COMPARE");
		return false;
	}
 }
	
	
	
	
 public boolean checkVoucherSavingMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		String expErrorMessage="Voucher saved successfully";
String expErrorMessage1=": "+docno;

System.out.println("SavingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage+" "+expErrorMessage1);
	
	if(actErrorMessage.startsWith(expErrorMessage) && actErrorMessage.endsWith(expErrorMessage1))
	{
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			return  true;
		}
		catch(Exception ee)
		{
			return true;
		}	
	}
	else
	{
		return false;
	}	
}
catch(Exception e)
{
	System.err.println("UNABLE TO COMPARE");
		return false;
	}
 }
	
	
	
 public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		String expErrorMessage=ExpMessage;
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
	
	return actErrorMessage;
}
catch(Exception ee)
{
	
	System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
		
		return actErrorMessage;
	}
}
catch(Exception e)
{
	System.err.println("Error Message NOT Found or NOT Clickable");
		System.err.println(e.getMessage());
               
		String Exception=e.getMessage();
		
		return Exception;	
	} 
 }	
		

 public static void checkUserFriendlyMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		
		System.out.println("Open Page then Message Display  :  " + actErrorMessage);
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
errorMessageCloseBtn.click();

/*try
{	
	System.out.println("In Try Block Validation Message  :  " + actErrorMessage);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
	errorMessageCloseBtn.click();
}
catch(Exception ee)
{
	System.out.println("In Catch Block Validation Message  :  " + actErrorMessage);	
}*/
}
catch(Exception e)
{
	System.err.println("Error Message NOT Found or NOT Clickable");
		System.err.println(e.getMessage());
		
		String Exception=e.getMessage();
	}
 }
	
	
	
	
 public boolean checkEntryPageDeleteMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
 {
	getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
	String actErrorMessage=errorMessage.getText();
	String expErrorMessage="Voucher deleted Successfully";

System.out.println("DeletingMessage  :  " + actErrorMessage + " Value Expected : " + expErrorMessage);
	
	if(actErrorMessage.equalsIgnoreCase(expErrorMessage))
	{
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			return  true;
		}
		catch(Exception ee)
		{
			return true;
		}
	}
	else
	{
		return false;
	}
 }

	
	
	
		 
	public static void checkPopUpWindow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 //Thread.sleep(2000);
  
 try 
 {
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
	 doNotShowCheckbox.click();
	 
	 //Thread.sleep(2000);
	 
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDemoPopupScreen));
	 closeBtnInDemoPopupScreen.click(); 
	 
	 System.err.println("POP UP DISPLAYED AND CLOSED SUCCESSFULLY");	 
 } 
 catch (Exception e)
 {
	 System.err.println("NO POP UP DISPLAYED");
	 }	

	 Thread.sleep(4000);
}
		 


@FindBy(xpath="//button[contains(text(),'Ok')]")
private static WebElement loginRefreshOkBtn;

public static void checkRefreshPopOnlogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	try 
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginRefreshOkBtn));
		loginRefreshOkBtn.click();
	} 
	catch (Exception e)
	{
		System.err.println("Exception : "+e.getMessage());
	System.err.println("NO ALERT POP UP DISPLAYED");
	}
	
	Thread.sleep(4000);
}


@FindBy(xpath = "//ul[@id='navigation_menu']/li/a/div/div")
private static List<WebElement> menusList;

@FindBy(xpath = "//ul[@id='navigation_menu']/li[3]/ul/li/a/span")
private static List<WebElement> inventoryMenusList;

@FindBy(xpath = "//ul[@id='navigation_menu']/li[3]/ul/li[1]/ul/li/a/span")
private static List<WebElement> inventoryTransactionsMenusList;

@FindBy(xpath = "//ul[@id='navigation_menu']/li[3]/ul/li[1]/ul/li[3]/ul/li/a/span")
private static List<WebElement> inventoryTransactionsStocksMenusList;

@FindBy(xpath = "//*[@id='dv_TranHomeHeading']/nav/div[2]/div/div/div[2]")
private static List<WebElement> openingStocksNewToolBarButtons;

@FindBy(xpath = "//ul[@id='navigation_menu']/li[2]/ul/li/a/span")
private static List<WebElement> financialsMenusList;

@FindBy(xpath="//*[@id='62']/span")
private static WebElement  financialsCreditManagementMenu; 

@FindBy(xpath="//*[@id='81']/span")
private static WebElement  financialsReportsMenu; 

@FindBy(xpath="//*[@id='60']/div")
private static WebElement  financialsMenu; 

@FindBy(xpath="//*[@id='530']/span")
private static WebElement  financialsFinalAccountsMenu; 
 
@FindBy(xpath="//*[@id='558']/span")
private static WebElement  financialsReceivableAndPayableAnalysisMenu;
    
@FindBy(xpath="//*[@id='3301']/span")
private static WebElement  financialsBudgetMenu;

@FindBy(xpath="//*[@id='3311']/span")
private static WebElement  financialsOnlinePaymentsMenu;


private static int cSize; 

 @FindBy(xpath="//table[@id='id_rc_columnheadertable']/thead/tr/th/div/p")
private static List<WebElement>  custBodyHeaderList;

@FindBy(xpath="//*[@id='plnCustomizecolumn']/div/span[4]/a")
private static WebElement  custRemoveBtn;

@FindBy(xpath="//div[@class='col-sm-12 toolbar_button_text font-6'][contains(text(),'Save')]")
private static WebElement  custSaveBtn;

@FindBy(xpath="//*[@id='btnCustomizeClose']/div[1]/span")
private static WebElement  custCancelBtn;

public static void checkDeleteLinkStatus() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeBtn));
	customizeBtn.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(custSaveBtn));
	
	int custBodyHeaderListCount = custBodyHeaderList.size();
	
	for (int i = 0; i < custBodyHeaderListCount; i++)
	{
		String data = custBodyHeaderList.get(i).getText();
		
		System.out.println(i+" "+data);
		
		/*int temp=i+1;
		
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();",custBodyHeaderList.get(temp));*/
		
		if (data.equalsIgnoreCase("Link status")) 
		{
			custBodyHeaderList.get(i).click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custRemoveBtn));
			custRemoveBtn.click();
			
			Thread.sleep(1000);
			
			break;
		}
	}
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
	custSaveBtn.click();
	
	String expMessage  = "Data saved successfully";
	String actSaveMessage = checkValidationMessage(expMessage);
			
}




@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
private static List<WebElement> departmentListCount;


@FindBy(xpath="//tbody[@id='id_header_10_table_body']/tr/td[2]")
private static List<WebElement> currencyListCount;	 

public static boolean checkPaymentsVATPendingBills() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
		
System.err.println(" Entered   ************************");

Thread.sleep(3000);

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
financialsMenu.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
financialsTransactionMenu.click();

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
cashAndBankMenu.click();
	
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsVoucher));
paymentsVATVoucher.click();
	
Thread.sleep(2000);
checkDeleteLinkStatus();
Thread.sleep(2000);

 Thread.sleep(2000);

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingBillsBtn));
pendingBillsBtn.click();

Thread.sleep(2000);

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingBillsGridRow1Chkbox));

int actvoucherBodyGridRow=voucherBodyGridRowCountList.size();


String actvoucherBodyGridRowCount=Integer.toString(actvoucherBodyGridRow);
String  expvoucherBodyGridRowCount="3";

System.err.println("actvoucherBodyGridRowCount  : "+actvoucherBodyGridRowCount);


getWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingBillsGridRow1Chkbox));

boolean actMethod=pendingBillsGridRow1Chkbox.isDisplayed() && pendingBillsGridRow2Chkbox.isDisplayed() ;

String actResult=Boolean.toString(actMethod);
String expResult="true";

if (actResult.equalsIgnoreCase(expResult) && actvoucherBodyGridRowCount.equalsIgnoreCase(expvoucherBodyGridRowCount)) 

{
return true;	
} 
else
{
return false;
}


}
@FindBy(xpath="//*[@id='tblBodyTransRender']/tr")
private static List<WebElement>  voucherBodyGridRowCountList;

	

public boolean checkSavingVoucherPaymentsVATWithVendorNewRefrence() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{


getWebDriverWait().until(ExpectedConditions.elementToBeClickable(allVouchersOption));
allVouchersOption.click();
		
Thread.sleep(2000);
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
newBtn.click();

Thread.sleep(2000);
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
newCashBankAccountTxt.click();

newCashBankAccountTxt.sendKeys(Keys.SPACE);


int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
  
System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
{
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("bank"))
	{
		cashAndBAnkAccountList.get(i).click();
		
		break;
	}
}

newCashBankAccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.click();;
voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);

voucherHeaderCurrency.sendKeys(Keys.SPACE);

int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

Thread.sleep(2000);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
PDRVATPlaceOfSupplyTXt.click();

PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

Thread.sleep(2000);
PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
departmentTxt.sendKeys(Keys.SPACE);

   
WebElement options=departmentTxt;

int departmentListCountCount=departmentListCount.size();

 for (int i = 0; i < departmentListCountCount; i++) 
 {
	String data=departmentListCount.get(i).getText();
	
	if (data.equalsIgnoreCase("Dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
 }

 departmentTxt.sendKeys(Keys.TAB);

 
//First Row

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Vendor New Reference");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Vendor New Reference"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}



enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterpayVATTaxCode));	
/*enterpayVATTaxCode.sendKeys("std rate");*/
Thread.sleep(1999);
enterpayVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
enter_Amount.sendKeys("100");
Thread.sleep(1999);
enter_Amount.sendKeys(Keys.TAB);

Thread.sleep(2000);

String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
saveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Vendor New Reference (VendorNewReference)";

 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="1";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "100.00";
String expBillBaseCurrency                      = "100.00";
String expBillLocalCurrency                     = "7.00";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "100.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
billRefNewReferenceTxt.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="80.00";
String expgridAdjustmentAmtRow1   ="0.00";
String expgridAdjustmentBillsRow1DocNo  = "OpeBal:1";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);



String expBillNewReferencePick                          = "100.00";
String expBillTransactionCurrencyPick                   = "100.00";
String expBillBaseCurrencyPick                          = "100.00"; 
String expBillLocalCurrencyPick                         = "7.00";
String expBillBalanceNewRefAmountPick                   = "100.00";
String expbillRefAdjustAmountInTransCurencyPick         = "100.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
 


boolean savingVoucher=checkVoucherSavingMessage(docno);


    
    if (    actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			
			 actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo))
	        
		{
			System.err.println(" Payemnst VAT Saved With New Reference ");
			return true;
		}
		else
		{
			System.err.println("Payemnst VAT Saved With New Reference ");
			return false;
		}
}


public boolean checkSavingVoucherWithVendorSemiAdjustment() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{


Thread.sleep(2000);
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
newCashBankAccountTxt.click();

newCashBankAccountTxt.sendKeys(Keys.SPACE);


int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
  
System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
{
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("bank"))
	{
		cashAndBAnkAccountList.get(i).click();
		
		break;
	}
}

newCashBankAccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.click();;
voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);

voucherHeaderCurrency.sendKeys(Keys.SPACE);

int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

Thread.sleep(2000);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
PDRVATPlaceOfSupplyTXt.click();

PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

Thread.sleep(2000);
PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
departmentTxt.sendKeys(Keys.SPACE);

   
WebElement options=departmentTxt;

int departmentListCountCount=departmentListCount.size();

 for (int i = 0; i < departmentListCountCount; i++) 
 {
	String data=departmentListCount.get(i).getText();
	
	if (data.equalsIgnoreCase("Dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
 }

 departmentTxt.sendKeys(Keys.TAB);

 
//First Row

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Vendor Semi Adjustment");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Vendor Semi Adjustment"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterpayVATTaxCode));	
/*enterpayVATTaxCode.sendKeys("std rate");*/
Thread.sleep(1999);
enterpayVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
enter_Amount.sendKeys("10");
Thread.sleep(1999);
enter_Amount.sendKeys(Keys.TAB);

Thread.sleep(2000);

String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
saveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Vendor Semi Adjustment (Vendor Semi Adjustment)";

 
System.out.println("Bill wise Screen Cutomer Name :"+ actPartyName + ":Value Expected  :" + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="1";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "10.00";
String expBillBaseCurrency                      = "10.00";
String expBillLocalCurrency                     = "0.70";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "10.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
billrefAdjuBills1stChkbox.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="80.00";
String expgridAdjustmentAmtRow1   ="10.00";
String expgridAdjustmentBillsRow1DocNo  = "OpeBal:1:1";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);




String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "10";
String expBillBaseCurrencyPick                          = "10"; 
String expBillLocalCurrencyPick                         = "0.70";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "10.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrencyPick+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrencyPick);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
boolean savingVoucher=checkVoucherSavingMessage(docno);



if (    actAdjustbills.equalsIgnoreCase(expAdjustbills) && savingVoucher==true  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
		actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
		actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
	     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
		actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
        
		
        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
		actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
		actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
		actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
		actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
		actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
		
		 actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) )
	        
		{
			System.err.println(" Test Pass: Payemnst VAT Saved With Adjustment Amount ");
			return true;
		}
		else
		{
			System.err.println("Test FAIl: Payemnst VAT Saved With Adjustment Amount ");
			return false;
		}

}

	


public boolean checkSavingVoucherInPaymentsVATWithVendorFullAdjustment() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
newCashBankAccountTxt.click();

newCashBankAccountTxt.sendKeys(Keys.SPACE);


int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
  
System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
{
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("bank"))
	{
		cashAndBAnkAccountList.get(i).click();
		
		break;
	}
}

newCashBankAccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.click();;
voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);

voucherHeaderCurrency.sendKeys(Keys.SPACE);

int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

Thread.sleep(2000);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
PDRVATPlaceOfSupplyTXt.click();

PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

Thread.sleep(2000);
PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
departmentTxt.sendKeys(Keys.SPACE);

   
WebElement options=departmentTxt;

int departmentListCountCount=departmentListCount.size();

 for (int i = 0; i < departmentListCountCount; i++) 
 {
	String data=departmentListCount.get(i).getText();
	
	if (data.equalsIgnoreCase("Dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
 }

 departmentTxt.sendKeys(Keys.TAB);

 
//First Row

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Vendor Full Adjustment");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Vendor Full Adjustment"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterpayVATTaxCode));	
/*enterpayVATTaxCode.sendKeys("std rate");*/
Thread.sleep(1999);
enterpayVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
enter_Amount.sendKeys("80");
Thread.sleep(1999);
enter_Amount.sendKeys(Keys.TAB);

Thread.sleep(2000);

String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
saveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Vendor Full Adjustment (VendorFullAdjustment";

 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="1";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "80.00";
String expBillBaseCurrency                      = "80.00";
String expBillLocalCurrency                     = "5.60";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "80.00";

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
billrefAdjuBills1stChkbox.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="80.00";
String expgridAdjustmentAmtRow1   ="80.00";
String expgridAdjustmentBillsRow1DocNo  = "OpeBal:1";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);


String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "80";
String expBillBaseCurrencyPick                          = "80"; 
String expBillLocalCurrencyPick                         = "5.60";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "80.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
 


boolean savingVoucher=checkVoucherSavingMessage(docno);


    
    if (    actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			
    		
			actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo))
	        
		{
			System.err.println(" Test Pass: Payemnst VAT Saved With Full Adjustment");
			return true;
		}
		else
		{
			System.err.println("Test Fail: Payemnst VAT Saved With Full Adjustment");
			return false;
		}


}


public boolean checkSavingVoucherInPaymentsVATWithCustomerSemiAdjustment() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{


getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
newCashBankAccountTxt.click();

newCashBankAccountTxt.sendKeys(Keys.SPACE);


int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
  
System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
{
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("bank"))
	{
		cashAndBAnkAccountList.get(i).click();
		
		break;
	}
}

newCashBankAccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.click();;
voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);

voucherHeaderCurrency.sendKeys(Keys.SPACE);

int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

Thread.sleep(2000);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
PDRVATPlaceOfSupplyTXt.click();

PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

Thread.sleep(2000);
PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
departmentTxt.sendKeys(Keys.SPACE);

   
WebElement options=departmentTxt;

int departmentListCountCount=departmentListCount.size();

 for (int i = 0; i < departmentListCountCount; i++) 
 {
	String data=departmentListCount.get(i).getText();
	
	if (data.equalsIgnoreCase("Dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
 }

 departmentTxt.sendKeys(Keys.TAB);

 
//First Row

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Customer Semi Adjustment");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Customer Semi Adjustment"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterpayVATTaxCode));	
/*enterpayVATTaxCode.sendKeys("std rate");*/
Thread.sleep(1999);
enterpayVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
enter_Amount.sendKeys("10");
Thread.sleep(1999);
enter_Amount.sendKeys(Keys.TAB);

Thread.sleep(2000);

String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
saveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Customer Semi Adjustment (Customer Semi Adjustment)";

 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="1";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "10.00";
String expBillBaseCurrency                      = "10.00";
String expBillLocalCurrency                     = "0.70";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "10.00";

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
billrefAdjuBills1stChkbox.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="80.00";
String expgridAdjustmentAmtRow1   ="10.00";
String expgridAdjustmentBillsRow1DocNo  = "OpeBal:1";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);


String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "10";
String expBillBaseCurrencyPick                          = "10"; 
String expBillLocalCurrencyPick                         = "0.70";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "10.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);


    
    if (    actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			
    		
			actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo))
	        
		{
			System.err.println(" Test Pass: Payemnst VAT Saved With Full Adjustment");
			return true;
		}
		else
		{
			System.err.println("Test Fail: Payemnst VAT Saved With Full Adjustment");
			return false;
		}



}


 
  @FindBy(xpath="//*[@id='id_header_4_table_body']/tr")
  private static List<WebElement>  cashAndBAnkAccountList;
 
   @FindBy(xpath="//input[@id='id_header_4']")
   private static WebElement newCashBankAccountTxt;
	
   @FindBy(xpath="//input[@id='id_header_6']")
   private static WebElement  voucherHeaderDueDate;

   @FindBy(xpath="//input[@id='id_header_10']")
   private static WebElement  voucherHeaderCurrency;

   @FindBy(xpath="//input[@id='id_header_145']")
   private static WebElement  voucherHeaderLocalExchangeRate;	
	  
   @FindBy(xpath="//table[@id='id_TranTable']/tbody")//table[@id='id_TranTable']/tbody
   private static WebElement  voucherBodyGridRowCount;
	
	@FindBy(xpath="//*[@id='id_body_12_table_body']/tr")
private static List<WebElement> bodyAccountListInGrid;

               
@FindBy(xpath="//*[@id='id_body_39_table_body']/tr")
private static List<WebElement> bodyCreditAccountListInGrid;

		
		
		 //Bill Reference Screen 	
		

@FindBy(xpath="//input[@id='txtNewReference']")
private static WebElement  billRefNewReferenceTxt;

@FindBy(xpath="//input[@id='txtOnAccount']")
private static WebElement  billRefTxtOnAccount;		
	
@FindBy(xpath="//input[@id='Searchtxt']")
private static WebElement  billRefSearchTxt;		

@FindBy(xpath="//select[@id='cbmShowBillForAdjustment']")
private static WebElement  billRefNewReferenceDropdown;		

@FindBy(xpath="//select[@id='cbmShowBills']")
private static WebElement  billRefShowBillsDropdown;		

@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_11']//div[contains(text(),'Due Date')]")
private static WebElement  billRefGridHeaderDueDate;		

@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_16']//div[contains(text(),'Currency')]")
private static WebElement  billRefGridHeaderCurrency;		

@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_21']//div[contains(text(),'Original Amt')]")
private static WebElement  billRefGridHeaderOrginalAmt;		

@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_23']//div[contains(text(),'Balance Amount')]")
private static WebElement  billRefGridHeaderBalanceAmt;		

@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_33']//div[contains(text(),'Adjustment Amount')]")
private static WebElement  billRefGridHeaderAdjustmentAmt;		

@FindBy(xpath="//div[contains(text(),'Native Currency')]")
private static WebElement  billRefGridHeaderNativeCurrency;		

@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_41']//div[contains(text(),'Narration')]")
private static WebElement  billRefGridHeaderNarration;		

@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_50']//div[contains(text(),'Previous Adjustment Amount')]")
private static WebElement  billRefGridHeaderPreviosAdjustmentAmt;		

@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-0']")
private static WebElement  billRefGridFirstRow;	

@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-1']//input")
private static WebElement  billRefGridFirstRowChkbox;		

@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-1']//input")
private static WebElement  billRefGridSecondRowChkbox;		

@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-1']//input")
private static WebElement  billRefGridThirdRowChkbox;		

/*@FindBy(xpath="//tbody[@id='id_Adjustment_Grid_body']//td[13]")
private static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
*/             
@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[2]/div[2]/div[1]/div[3]/div[1]/div[1]/div[4]/div[1]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[13]")
private static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		

@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[2]/div[2]/div[1]/div[3]/div[1]/div[1]/div[4]/div[1]/div[2]/div[1]/table[1]/tbody[1]/tr[2]/td[13]")
private static WebElement  billRefGridSecondRowAdjustmentAmtTxt;		

@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
private static WebElement  billRefGridThirdRowAdjustmentAmtTxt;		

@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-41']")
private static WebElement  billRefGridFirstNarrationTxt;		

@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-41']")
private static WebElement  billRefGridSecondNarrationTxt;		

@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-41']")
private static WebElement  billRefGridThirdNarrationTxt;		

@FindBy(xpath="//input[@id='id_Narration']")
private static WebElement  narrationToWrite;		

@FindBy(xpath="//input[@id='id_limit']")
private static WebElement  adjustAmtToWrite;		

@FindBy(xpath="//div[@class='col-xs-6 navbar-header']//div[@class='navText']")
private static WebElement  billRefPaymentsBillReferenceLabel;		

@FindBy(xpath="//div[@class='col-sm-12 col-md-3']//input[@class='Fbutton']")
private static WebElement  billRefAdjustOnFIFOBtn;		

@FindBy(xpath="//span[@id='btnPick']")
private static WebElement  billRefPickIcon;		

@FindBy(xpath="//span[@id='btnOk']")
private static WebElement  billRefOkBtn;		

@FindBy(xpath="//span[@id='btnCancel']")
private static WebElement  billRefcancel;		

@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
private static WebElement  billRefSummatyValueNet;		

@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
private static WebElement  billRefGridVendorRow1;	

@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
private static WebElement  billRefGridVendorAmtRow1;	

@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
private static WebElement  billRefGridVendorRow2;	

@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
private static WebElement  billRefGridVendorAmtRow2;	

@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
private static WebElement  billRefGridVendorRow3;


@FindBy(xpath="//td[@id='AccountAmount_col_4-1']")
private static WebElement  billRefGridVendorRow4;





@FindBy(xpath="//label[@id='tbNewRefAmountAdjValue']")
private static WebElement amtAdjustedAgainstNewREfinOtherVouchers;
		
@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
private static WebElement transactionCurency;

@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
private static WebElement baseCurrency;

@FindBy(xpath="//label[@id='tbAmountToAdjustInLocalCurrencyValue']")
private static WebElement localCurrencyDhs;

@FindBy(xpath="//label[@id='tbNewRefBalAmountValue']")
private static WebElement balanceNewReferenceAmt;

@FindBy(xpath="//li[@id='id_li_Adjustment_Tab_BreakUpByTag']//span[@class='font-5'][contains(text(),'Break Up by Tag')]")
private static WebElement breakUpByTagTab;

@FindBy(xpath="//span[@class='font-5'][contains(text(),'Adjustment')]")
private static WebElement adjustmentTab;

@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-9']")
private static WebElement breakUpByTagDueDate;

@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-10']")
private static WebElement breakUpByTagDepartment;

@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-18']")
private static WebElement breakUpByTagBaseCurrency;

@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-17']")
private static WebElement breakUpByTagBillCurrency;

@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-20']")
private static WebElement breakUpByTagBaseConversionRate;
	
@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-21']")
private static WebElement breakUpByTagBaseLocalCurrency;

@FindBy(xpath="//label[@id='txtblkAmountadjusted']")
private static WebElement  billRefAdjustAmountInTransCurency;

@FindBy(xpath="//label[@id='txtblkAmounttobeadjust']")
private static WebElement  billRefBalanceAmountAdjustInTrnasCurrency;

@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
private static WebElement  billRefInfoBarLocalCurrencyRate;


@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
private static WebElement billRefTransactionCurency;

@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
private static WebElement billRefBaseCurrency;


@FindBy(xpath="//label[@id='id_BillWise_IP_AccountName']")
private static WebElement breakUpDetailsAccount;

@FindBy(xpath="//label[@id='id_BillWise_IP_ProductName']")
private static WebElement breakUpDetailsItem;

@FindBy(xpath="//label[@id='id_BillWise_IP_TagName']")
private static WebElement breakUpDetailsDepartment;

@FindBy(xpath="//label[@id='id_BillWise_IP_BaseCurrencyValue']")
private static WebElement conversationRateBaseCurrencyRate;

@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
private static WebElement conversationRateLocalCurrencyRate;

@FindBy(xpath="//label[@id='id_infoPanel_lblAEDTranAmountValue']")
private static WebElement asOnEntryDateTransAmt;

@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseConversionValue']")
private static WebElement asOnEntryDateBaseConcersationRate;

@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseAmountValue']")
private static WebElement asOnEntryDateBaseAmount;

@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalConversionValue']")
private static WebElement asOnEntryDateLocConversationRate;

@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalAmountValue']")
private static WebElement asOnEntryDateAmt;

@FindBy(xpath="//label[@id='id_infoPanel_lblAADTranAmountValue']")
private static WebElement balOnAdjstDateTransAmt;

@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseConversionValue']")
private static WebElement  balOnAdjstDateBasrConversionRate;

@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseAmountValue']")
private static WebElement  balOnAdjstDateBaseAmount;

@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalConversionValue']")
private static WebElement  balOnAdjstDateLocalConversionRate;

@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalAmountValue']")
private static WebElement  balOnAdjstDateAmt;

@FindBy(xpath="//label[@id='id_infoPanel_lblAdjTranAmountValue']")
private static WebElement adjustmentsAmount1;

@FindBy(xpath="//label[@id='id_infoPanel_lblAdjBaseAmountValue']")
private static WebElement adjustmentsAmount2;

@FindBy(xpath="//label[@id='id_infoPanel_lblAdjLocalAmountValue']")
private static WebElement adjustmentsAmount3;

@FindBy(xpath="//label[@id='id_infoPanel_lblNativeCurrencyValue']")
private static WebElement adjustmentsAmount4;

@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffTranAmountValue']")
private static WebElement exchangeGainLossForBaseCurrency;

@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffLocalAmountValue']")
private static WebElement exchangeGainLossForLocalCurrency;



@FindBy(xpath="//input[@id='id_limit']")
private static WebElement gridEnterAdjustAmtRow1;

//Billreference Body Grid Elements



@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[8]")
private static WebElement gridOrginalAmtRow1;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[8]")
private static WebElement gridOrginalAmtRow2;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[8]")
private static WebElement gridOrginalAmtRow3;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[8]")
private static WebElement gridOrginalAmtRow4;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[8]")
private static WebElement gridOrginalAmtRow5;




@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[10]")
private static WebElement gridBalanceAmtRow1;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[10]")
private static WebElement gridBalanceAmtRow2;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[10]")
private static WebElement gridBalanceAmtRow3;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[10]")
private static WebElement gridBalanceAmtRow4;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[10]")
private static WebElement gridBalanceAmtRow5;



@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[13]")
private static WebElement gridAdjustmentAmtRow1;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[13]")
private static WebElement gridAdjustmentAmtRow2;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[13]")
private static WebElement gridAdjustmentAmtRow3;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[13]")
private static WebElement gridAdjustmentAmtRow4;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[13]")
private static WebElement gridAdjustmentAmtRow5;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']r")
private static WebElement billRefAdjustBills;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr")
private static List<WebElement> billRefAdjustBillsGrid;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[3]")
private static WebElement billRefAdjustBillsRow1DocNo;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[3]")
private static WebElement billRefAdjustBillsRow2DocNo;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[3]")
private static WebElement billRefAdjustBillsRow3DocNo;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[3]")
private static WebElement billRefAdjustBillsRow4DocNo;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[3]")
private static WebElement billRefAdjustBillsRow5DocNo;


	
@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr/td[2]")
private static WebElement InfoSideBarDocRow1;

@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr/td[3]")
private static WebElement InfoSideBarAmtRow1;

@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//td[4]")
private static WebElement InfoSideBarBaseAmtRow1;

// Row 2

@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[2]/td[2]")
private static WebElement InfoSideBarDocRow2;

@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[2]/td[3]")
private static WebElement InfoSideBarAmtRow2;

@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[2]//td[4]")
private static WebElement InfoSideBarBaseAmtRow2;

// Row 3

@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[3]/td[2]")
private static WebElement InfoSideBarDocRow3;

@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[3]/td[3]")
private static WebElement InfoSideBarAmtRow3;

@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[3]//td[4]")
private static WebElement InfoSideBarBaseAmtRow3;
  

// Row 4 

@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[4]/td[2]")
private static WebElement InfoSideBarDocRow4;

@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[4]/td[3]")
private static WebElement InfoSideBarAmtRow4;

@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[4]//td[4]")
private static WebElement InfoSideBarBaseAmtRow4;

// row 5

@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[5]/td[2]")
private static WebElement InfoSideBarDocRow5;

@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[5]/td[3]")
private static WebElement InfoSideBarAmtRow5;

@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[5]//td[4]")
private static WebElement InfoSideBarBaseAmtRow5;


@FindBy(xpath="//*[@id='id_body_12_table_body']/tr")
private static List<WebElement> openingBalAccountListInGrid;

@FindBy(xpath="//input[@id='id_body_19']")
private static WebElement  enter_OBCreditACTxt;

@FindBy(xpath="//*[@id='lblAccount']")//*[@id="lblAccount"]
private static WebElement  billRefPartyName;




//Purchase Voucher VAT 
@FindBy(xpath="//*[@id='2007']/span")
private static WebElement  financialsTransactionsPurchaseMenu; 


@FindBy(xpath="//*[@id='2057']/span")
private static WebElement  purchaseVouchersVat;
		
public boolean checkPendingBillsInPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	
	
	
System.err.println(" Entered   ************************");

Thread.sleep(3000);

Thread.sleep(3000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
financialsMenu.click();
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
financialsTransactionMenu.click();
	
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
financialsTransactionsPurchaseMenu.click();

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
purchaseVouchersVat.click();
	
Thread.sleep(2000);
checkDeleteLinkStatus();
Thread.sleep(2000);

 Thread.sleep(2000);

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingBillsBtn));
pendingBillsBtn.click();

Thread.sleep(2000);

boolean actvoucherBodyGridRow=voucherBodyGridRowCount.getText().isEmpty();
boolean  expvoucherBodyGridRowCount=true;

System.out.println(" Pending Bills Count : "+actvoucherBodyGridRow +" Value Expected  : "+expvoucherBodyGridRowCount);

if (actvoucherBodyGridRow==expvoucherBodyGridRowCount)
{
return true;	
} 
else
{
return false;
}
	
}


@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
private static List<WebElement> vendorAccountListCount; 		


@FindBy(xpath="//input[@id='id_body_536870916']")
private static WebElement enter_WarehouseTxt;

@FindBy(xpath="//*[@id='id_body_536870916_table_body']/tr")
private static List<WebElement> pvvGridWarehouseList;

@FindBy(xpath="//*[@id='id_body_23_table_body']/tr")
private static List<WebElement> pvvGridItemList;


@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
private static List<WebElement> warehouseBodyComboList;

@FindBy(xpath="//tbody[@id='id_header_86_table_body']/tr/td[2]")
private static List<WebElement> st_warehouse1HeaderComboList;

@FindBy(xpath="//tbody[@id='id_body_87_table_body']/tr/td[2]")
private static List<WebElement> st_warehouse2BodyComboList;


@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
private static List<WebElement> purchaseAccountListCount; 


public boolean checkSavingVoucherInPaymentsVATWithNewRefrence() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(allVouchersOption));
allVouchersOption.click();
		
Thread.sleep(2000);

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
newBtn.click();

//checkUserFriendlyMessage();

Thread.sleep(2000);
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();
	

Thread.sleep(2000);
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
vendorAccountTxt.click();
vendorAccountTxt.sendKeys("Vendor");
vendorAccountTxt.sendKeys(Keys.SPACE);

int vendorcount=vendorAccountListCount.size();

System.err.println(vendorcount);

for(int i=0 ; i < vendorcount ;i++)
{
	String data=vendorAccountListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("Vendor New Reference"))
	{
		vendorAccountListCount.get(i).click();
		
		break;
	}
}

vendorAccountTxt.sendKeys(Keys.TAB);
raiseReceiptsChkBox.sendKeys(Keys.TAB);
voucherHeaderDueDate.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.sendKeys(Keys.SPACE);


int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

voucherHeaderExchangeRate.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));

departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
departmentTxt.sendKeys(Keys.SPACE);
Thread.sleep(2000);
int departmentcount=departmentListCount.size();

System.err.println(departmentcount);
	
for(int i=0 ; i < departmentcount ;i++)
{
	String data=departmentListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
}
	
Thread.sleep(1000);

departmentTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
placeOFSupplyTxt.click();
placeOFSupplyTxt.sendKeys("DUBAI");
Thread.sleep(2000);
placeOFSupplyTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
jurisdictionTxt.click();
jurisdictionTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
jurisdictionTxt.sendKeys("Abu Dhabi");
Thread.sleep(2000);
jurisdictionTxt.sendKeys(Keys.TAB);

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
enter_WarehouseTxt.click();

enter_WarehouseTxt.sendKeys(Keys.SPACE);

int warehousecount=warehouseBodyComboList.size();

for(int i=0 ; i < warehousecount ;i++)
{
	String data=warehouseBodyComboList.get(i).getText();
	
	if (data.equalsIgnoreCase("HYDERABAD")) 
	{
		warehouseBodyComboList.get(i).click();
		break;
	}
}

enter_WarehouseTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
enter_ItemTxt.click();
enter_ItemTxt.sendKeys(Keys.SPACE);
int pvvGridItemListCount=pvvGridItemList.size();
for (int i = 0; i < pvvGridItemListCount; i++) 
{
	String Item=pvvGridItemList.get(i).getText();
	if (Item.equalsIgnoreCase("STD RATE COGS ITEM")) 
	{
		pvvGridItemList.get(i).click();
		break;
	}
}
enter_ItemTxt.sendKeys(Keys.TAB);	

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
enter_TaxCode.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PurchaseAccountTxt));
enter_PurchaseAccountTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
select1stRow_9thColumn.click();
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
enter_Quantity.click();
enter_Quantity.clear();
enter_Quantity.sendKeys("10");


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
select1stRow_11thColumn.click();
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
enter_Rate.click();
enter_Rate.clear();
enter_Rate.sendKeys("10");
enter_Rate.sendKeys(Keys.TAB);
				
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
enter_Gross.click();
enter_Gross.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
select1stRow_14thColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
enter_PvVat.click();

enter_PvVat.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
enter_PvTaxable.click();
enter_PvTaxable.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
voucherSaveBtn.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Vendor New Reference (VendorNewReference)";

 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="1";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "105.00";
String expBillBaseCurrency                      = "105.00";
String expBillLocalCurrency                     = "7.35";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "105.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
billRefNewReferenceTxt.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


String expBillNewReferencePick                          = "105.00";
String expBillTransactionCurrencyPick                   = "105.00";
String expBillBaseCurrencyPick                          = "105.00"; 
String expBillLocalCurrencyPick                         = "7.35";
String expBillBalanceNewRefAmountPick                   = "105.00";
String expbillRefAdjustAmountInTransCurencyPick         = "105.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="100.00";
String expgridAdjustmentAmtRow1   ="0.00";
String expgridAdjustmentBillsRow1DocNo  = "NDT58:1";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

String expMessage1="Voucher saved successfully";
String expMessage2="SU/DUB/TEXT1";

String actMessage=checkValidationMessage(expMessage1);

    
    if (    actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			
			 actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo))
	        
		{
			System.err.println(" Purchase VAT Saved With New Reference ");
			return true;
		}
		else
		{
			System.err.println("Purchase VAT Saved With New Reference ");
			return false;
		}

}





public boolean checkSavingVoucherWithSemiVendorTypeInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{




Thread.sleep(2000);
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();
	

Thread.sleep(2000);
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
vendorAccountTxt.click();
vendorAccountTxt.sendKeys("Vendor");
vendorAccountTxt.sendKeys(Keys.SPACE);

int vendorcount=vendorAccountListCount.size();

System.err.println(vendorcount);

for(int i=0 ; i < vendorcount ;i++)
{
	String data=vendorAccountListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("Vendor Semi Adjustment"))
	{
		vendorAccountListCount.get(i).click();
		
		break;
	}
}

vendorAccountTxt.sendKeys(Keys.TAB);
raiseReceiptsChkBox.sendKeys(Keys.TAB);
voucherHeaderDueDate.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.sendKeys(Keys.SPACE);


int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

voucherHeaderExchangeRate.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));

departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
departmentTxt.sendKeys(Keys.SPACE);
Thread.sleep(2000);
int departmentcount=departmentListCount.size();

System.err.println(departmentcount);
	
for(int i=0 ; i < departmentcount ;i++)
{
	String data=departmentListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
}
	
Thread.sleep(1000);

departmentTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
placeOFSupplyTxt.click();
placeOFSupplyTxt.sendKeys("DUBAI");
Thread.sleep(2000);
placeOFSupplyTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
jurisdictionTxt.click();
jurisdictionTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
jurisdictionTxt.sendKeys("Abu Dhabi");
Thread.sleep(2000);
jurisdictionTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
enter_WarehouseTxt.click();

enter_WarehouseTxt.sendKeys(Keys.SPACE);

int warehousecount=warehouseBodyComboList.size();

for(int i=0 ; i < warehousecount ;i++)
{
	String data=warehouseBodyComboList.get(i).getText();
	
	if (data.equalsIgnoreCase("HYDERABAD")) 
	{
		warehouseBodyComboList.get(i).click();
		break;
	}
}

enter_WarehouseTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
enter_ItemTxt.click();
enter_ItemTxt.sendKeys(Keys.SPACE);
int pvvGridItemListCount=pvvGridItemList.size();
for (int i = 0; i < pvvGridItemListCount; i++) 
{
	String Item=pvvGridItemList.get(i).getText();
	if (Item.equalsIgnoreCase("STD RATE COGS ITEM")) 
	{
		pvvGridItemList.get(i).click();
		break;
	}
}
enter_ItemTxt.sendKeys(Keys.TAB);	

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
enter_TaxCode.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PurchaseAccountTxt));
enter_PurchaseAccountTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
select1stRow_9thColumn.click();
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
enter_Quantity.click();
enter_Quantity.clear();
enter_Quantity.sendKeys("5");


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
select1stRow_11thColumn.click();
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
enter_Rate.click();
enter_Rate.clear();
enter_Rate.sendKeys("10");
enter_Rate.sendKeys(Keys.TAB);
				
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
enter_Gross.click();
enter_Gross.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
select1stRow_14thColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
enter_PvVat.click();

enter_PvVat.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
enter_PvTaxable.click();
enter_PvTaxable.sendKeys(Keys.TAB);

String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
voucherSaveBtn.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Vendor Semi Adjustment (Vendor Semi Adjustment)";

 
System.out.println("Bill wise Screen Cutomer Name :"  + actPartyName + "  Value Expected  " + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="0";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "52.50";
String expBillBaseCurrency                      = "52.50";
String expBillLocalCurrency                     = "3.68";
String expBillBalanceNewRefAmount              = "0.00";


String expbillRefBalanceAmountAdjustInTrnasCurrency = "52.50";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
billRefNewReferenceTxt.click();
	
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();
	


String expBillNewReferencePick                          = "52.50";
String expBillTransactionCurrencyPick                   = "52.50";
String expBillBaseCurrencyPick                          = "52.50"; 
String expBillLocalCurrencyPick                         = "3.68";
String expBillBalanceNewRefAmountPick                   = "52.50";
String expbillRefAdjustAmountInTransCurencyPick         = "52.5";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);


/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="100.00";
String expgridAdjustmentAmtRow1   ="52.50";
String expgridAdjustmentBillsRow1DocNo  = "NDT45:2";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);


String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

	
String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
	
String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

String expbreakUpDetailsAccountPick             ="121-001";
String expbreakUpDetailsDepartmentPick          ="DUBAI";
	
String expasOnEntryDateTransAmtPick             ="100.00";
String expasOnEntryDateBaseConcersationRatePick ="1";
String expasOnEntryDateBaseAmountPick           ="100.00";
String expasOnEntryDateLocConversationRatePick  ="0.07";
String expasOnEntryDateAmtPick                  ="7.00";
	
String expbalOnAdjstDateTransAmtPick            ="100.00";
String expbalOnAdjstDateBasrConversionRatePick  ="1";
String expbalOnAdjstDateBaseAmountPick          ="100.00";
String expbalOnAdjstDateLocalConversionRatePick ="0.07";
String expbalOnAdjstDateAmtPick                 ="7.00";

String expadjustmentsAmount1Pick                ="52.50";
String expadjustmentsAmount2Pick                ="52.50";
String expadjustmentsAmount3Pick                ="3.68";
String expadjustmentsAmount4Pick                ="52.50";
	
String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
String expexchangeGainLossForLocalCurrencyPick  ="0.00";


System.out.println(" Right SIde Elements *****************************************************************************");

System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);

*/
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);

    
    if (   savingVoucher==true && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && 
    		actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
    		actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) /*&& 
			
			actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo) && 
	        
    		
		     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
				actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
				actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
				actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
				actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
				actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
				actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
				actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
				actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
				actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick)*/)
	        
		{
			System.err.println(" Test Pass: Voucher Saved  ");
			return true;
		}
		else
		{
			System.err.println(" Test FAIl: Voucher Saved  ");
			return false;
		}


}

public boolean checkSavingVoucherWithFullAdjustmentVendorTypeInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{

Thread.sleep(2000);
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();
	

Thread.sleep(2000);
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
vendorAccountTxt.click();
vendorAccountTxt.sendKeys("Vendor");
vendorAccountTxt.sendKeys(Keys.SPACE);

int vendorcount=vendorAccountListCount.size();

System.err.println(vendorcount);

for(int i=0 ; i < vendorcount ;i++)
{
	String data=vendorAccountListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("Vendor Full Adjustment"))
	{
		vendorAccountListCount.get(i).click();
		
		break;
	}
}

vendorAccountTxt.sendKeys(Keys.TAB);
raiseReceiptsChkBox.sendKeys(Keys.TAB);
voucherHeaderDueDate.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.sendKeys(Keys.SPACE);


int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

voucherHeaderExchangeRate.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));

departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
departmentTxt.sendKeys(Keys.SPACE);
Thread.sleep(2000);
int departmentcount=departmentListCount.size();

System.err.println(departmentcount);
	
for(int i=0 ; i < departmentcount ;i++)
{
	String data=departmentListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
}
	
Thread.sleep(1000);

departmentTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
placeOFSupplyTxt.click();
placeOFSupplyTxt.sendKeys("DUBAI");
Thread.sleep(2000);
placeOFSupplyTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
jurisdictionTxt.click();
jurisdictionTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
jurisdictionTxt.sendKeys("Abu Dhabi");
Thread.sleep(2000);
jurisdictionTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
enter_WarehouseTxt.click();

enter_WarehouseTxt.sendKeys(Keys.SPACE);

int warehousecount=warehouseBodyComboList.size();

for(int i=0 ; i < warehousecount ;i++)
{
	String data=warehouseBodyComboList.get(i).getText();
	
	if (data.equalsIgnoreCase("HYDERABAD")) 
	{
		warehouseBodyComboList.get(i).click();
		break;
	}
}

enter_WarehouseTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
enter_ItemTxt.click();
enter_ItemTxt.sendKeys(Keys.SPACE);
int pvvGridItemListCount=pvvGridItemList.size();
for (int i = 0; i < pvvGridItemListCount; i++) 
{
	String Item=pvvGridItemList.get(i).getText();
	if (Item.equalsIgnoreCase("STD RATE COGS ITEM")) 
	{
		pvvGridItemList.get(i).click();
		break;
	}
}
enter_ItemTxt.sendKeys(Keys.TAB);	

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
enter_TaxCode.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PurchaseAccountTxt));
enter_PurchaseAccountTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
select1stRow_9thColumn.click();
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
enter_Quantity.click();
enter_Quantity.clear();
enter_Quantity.sendKeys("1");


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
select1stRow_11thColumn.click();
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
enter_Rate.click();
enter_Rate.clear();
enter_Rate.sendKeys("95.25");
enter_Rate.sendKeys(Keys.TAB);
				
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
enter_Gross.click();
enter_Gross.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
select1stRow_14thColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
enter_PvVat.click();

enter_PvVat.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
enter_PvTaxable.click();
enter_PvTaxable.sendKeys(Keys.TAB);

String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
voucherSaveBtn.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Vendor Full Adjustment (Vendor Full Adjustment)";

 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="0";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "100.01";
String expBillBaseCurrency                      = "100.01";
String expBillLocalCurrency                     = "7.00";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "100.01";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";



	
//To update in Adjsut Amount in Right side Pannel
	
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
billRefNewReferenceTxt.click();
	
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();

//To Adjustment



String expBillNewReferencePick                          = "100.01";
String expBillTransactionCurrencyPick                   = "100.01";
String expBillBaseCurrencyPick                          = "100.01"; 
String expBillLocalCurrencyPick                         = "7.00";
String expBillBalanceNewRefAmountPick                   = "100.01";
String expbillRefAdjustAmountInTransCurencyPick         = "100.01";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

/*
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="100.00";
String expgridAdjustmentAmtRow1   ="100.00";
String expgridAdjustmentBillsRow1DocNo  = "NDT45:3";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);


String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

	
String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
	
String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

String expbreakUpDetailsAccountPick             ="121-001";
String expbreakUpDetailsDepartmentPick          ="DUBAI";
	
String expasOnEntryDateTransAmtPick             ="100.00";
String expasOnEntryDateBaseConcersationRatePick ="1";
String expasOnEntryDateBaseAmountPick           ="100.00";
String expasOnEntryDateLocConversationRatePick  ="0.07";
String expasOnEntryDateAmtPick                  ="7.00";
	
String expbalOnAdjstDateTransAmtPick            ="100.00";
String expbalOnAdjstDateBasrConversionRatePick  ="1";
String expbalOnAdjstDateBaseAmountPick          ="100.00";
String expbalOnAdjstDateLocalConversionRatePick ="0.07";
String expbalOnAdjstDateAmtPick                 ="7.00";

String expadjustmentsAmount1Pick                ="100.00";
String expadjustmentsAmount2Pick                ="100.00";
String expadjustmentsAmount3Pick                ="7.00";
String expadjustmentsAmount4Pick                ="100.00";
	
String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
String expexchangeGainLossForLocalCurrencyPick  ="0.00";

System.out.println(" Right SIde Elements *****************************************************************************");

System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);

*/
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);

    
    if (   savingVoucher==true && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && 
    		actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
    		actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.startsWith(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) /*&& 
			
			actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo)
	         && 
		     
    		
		     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
				actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
				actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
				actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
				actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
				actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
				actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
				actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
				actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
				actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick)*/)
	        
		{
			System.err.println(" Purchase VAT Saved With Adjustment Amount ");
			return true;
		}
		else
		{
			System.err.println("Purchase VAT Saved With Adjustment Amount ");
			return false;
		}



}




@FindBy(xpath="//*[@id='id_transactionentry_save']")
private static WebElement  voucherSaveBtn;

@FindBy(xpath="//div[@id='dvHomeTransClose']")  
private static WebElement  voucherhomeCloseBtn;



@FindBy(xpath="//input[@id='id_body_33554522']")
private static WebElement enter_PvTaxable;

@FindBy(xpath="//input[@id='id_body_12']")
private static WebElement  enter_PurchaseAccountTxt;

@FindBy(xpath="//input[@id='id_body_33554521']")
private static WebElement enter_PvVat;

@FindBy(xpath="//input[@id='id_body_16777323']")
private static WebElement  enter_TaxCode;


@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
private static List<WebElement> grid_CheckBoxList;

@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[4]")
private static List<WebElement> grid_VoucherNoList;


@FindBy(xpath="//input[@id='id_header_11']")
private static WebElement  voucherHeaderExchangeRate;

@FindBy(xpath="//input[@id='id_header_268435470']")
private static WebElement  placeOFSupplyTxt;

@FindBy(xpath="//input[@id='id_header_268435471']")
private static WebElement  jurisdictionTxt;


//Sales Invoice VAT 

@FindBy(xpath="//a[@id='2014']//span[contains(text(),'Sales')]")
private static WebElement  financialTransactionSalesMenu;

@FindBy(xpath="//span[contains(text(),'Sales invoice VAT')]")
private static WebElement  salesInvoiceVATVoucher;

public boolean checkPendingBillsInSalesINvoiceVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

System.err.println(" Entered   ************************");

Thread.sleep(3000);

Thread.sleep(3000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
finacinalsMenu.click();
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
financialsTransactionMenu.click();
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
financialTransactionSalesMenu.click();
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
salesInvoiceVATVoucher.click();

Thread.sleep(2000);;
checkDeleteLinkStatus();
Thread.sleep(2000);

Thread.sleep(2000);

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingBillsBtn));
pendingBillsBtn.click();

Thread.sleep(2000);

boolean actvoucherBodyGridRow=voucherBodyGridRowCount.getText().isEmpty();
boolean  expvoucherBodyGridRowCount=true;

System.out.println(" Pending Bills Count : "+actvoucherBodyGridRow +" Value Expected  : "+expvoucherBodyGridRowCount);

if (actvoucherBodyGridRow==expvoucherBodyGridRowCount)
{
return true;	
} 
else
{
return false;
}

}



@FindBy(xpath="//input[@id='id_header_268435470']")
private static WebElement  salesInvoiceVATPlaceOFSupply;

@FindBy(xpath="//tbody[@id='id_header_268435470_table_body']/tr/td[2]")
private static List<WebElement> placeOFSupplyList;

@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
private static List<WebElement> customerAccountListCount; 

@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
private static List<WebElement> cnAccountListCount; 

@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
private static List<WebElement> pvwareHouseListCount;

@FindBy(xpath="//input[@id='id_body_33554502']")
private static WebElement so_enter_AQTxt;

@FindBy(xpath="//input[@id='id_body_33554503']")
private static WebElement so_enter_FQTxt;

@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
private static List<WebElement> itemListCount;
 

@FindBy(xpath="//input[@id='id_body_16777328']")
private static WebElement enterSalesTaxcode;




public boolean checkSavingSalesINvoiceVoucherWithCustomrNewRefrence() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(allVouchersOption));
	allVouchersOption.click();
			
	Thread.sleep(2000);
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();

	//checkUserFriendlyMessage();

	Thread.sleep(2000);
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	documentNumberTxt.click();

	
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	customerAccountTxt.click();
	customerAccountTxt.sendKeys(Keys.END);
	customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	customerAccountTxt.sendKeys("customer new");
	customerAccountTxt.sendKeys(Keys.SPACE);
	 
  	int customercount=customerAccountListCount.size();
  	
  	System.err.println(customercount);
  	
  	for(int i=0 ; i < customercount ;i++)
  	{
  		String data=customerAccountListCount.get(i).getText();
  		
  		if(data.equalsIgnoreCase("Customer New Reference"))
  		{
  			customerAccountListCount.get(i).click();
  			
  			break;
  		}
  	}
			
  	customerAccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	departmentTxt.click();
	departmentTxt.sendKeys(Keys.END);
	departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	departmentTxt.sendKeys(Keys.SPACE);
		
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			departmentListCount.get(i).click();
			
			Thread.sleep(1000);
			
			break;
		}
	}
		
	departmentTxt.sendKeys(Keys.TAB);	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
	salesInvoiceVATPlaceOFSupply.click();
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);
	
	
	int placeOFSupplyListCount=placeOFSupplyList.size();
	
	System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);
		
	for(int i=0 ; i < placeOFSupplyListCount ;i++)
	{
		String data=placeOFSupplyList.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			placeOFSupplyList.get(i).click();
			
			break;
		}
	}
		
	
	Thread.sleep(2000);
	
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	jurisdictionTxt.click();
	jurisdictionTxt.sendKeys(Keys.END);
	jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	jurisdictionTxt.sendKeys("Abu Dhabi");
	Thread.sleep(2000);
	jurisdictionTxt.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
	pvWareHouseTxt.click();
	pvWareHouseTxt.sendKeys(Keys.SPACE);
		
	int warehousecount=pvwareHouseListCount.size();
  	
  	System.err.println(warehousecount);
  	
  	for(int i=0 ; i < warehousecount ;i++)
  	{
  		String data=pvwareHouseListCount.get(i).getText();
  		
  		if(data.equalsIgnoreCase("HYDERABAD"))
  		{
  			pvwareHouseListCount.get(i).click();
  			
  			break;
  		}	
  	}
			
  	pvWareHouseTxt.sendKeys(Keys.TAB);
	
  	
  	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
  	enter_ItemTxt.sendKeys(Keys.END);
  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
  	enter_ItemTxt.sendKeys(Keys.SPACE);
  	enter_ItemTxt.sendKeys("std");
  	
  /*	int itemcount1=itemListCount.size();
  	
  	System.err.println(itemcount1);
  	
  	for(int i=0 ; i < itemcount1 ;i++)
  	{
  		String data=itemListCount.get(i).getText();
  		
  		if(data.equalsIgnoreCase("Std"))
  		{
  			itemListCount.get(i).click();
  			
  			break;
  		}
  	}
	*/		
  	
  	Thread.sleep(1999);
  	enter_ItemTxt.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
	select1stRow_5thColumn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
	select1stRow_8thColumn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
	enter_AQTxt.sendKeys("10");
	enter_AQTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
	enter_FQTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
	select1stRow_11thColumn.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
	select1stRow_14thColumn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	enter_Rate.click();
	enter_Rate.clear();
	enter_Rate.sendKeys("10");
	enter_Rate.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
	enter_Gross.click();
	enter_Gross.sendKeys(Keys.TAB);
	
	String docno=documentNumberTxt.getAttribute("value");
	
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
	voucherSaveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Customer New Reference (Customer New Reference)";

 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="1";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "100.00";
String expBillBaseCurrency                      = "100.00";
String expBillLocalCurrency                     = "7.00";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "100.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="80.00";
String expgridAdjustmentAmtRow1   ="0.00";
String expgridAdjustmentBillsRow1DocNo  = "OpeBal:1";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);




getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
billRefNewReferenceTxt.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


String expBillNewReferencePick                          = "100.00";
String expBillTransactionCurrencyPick                   = "100.00";
String expBillBaseCurrencyPick                          = "100.00"; 
String expBillLocalCurrencyPick                         = "7.00";
String expBillBalanceNewRefAmountPick                   = "100.00";
String expbillRefAdjustAmountInTransCurencyPick         = "100.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

boolean savingVoucher=checkVoucherSavingMessage(docno);


    
    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick))
	        
		{
    	System.err.println(" Test Pass:Sales Voucher With New Ref Customer ");
			return true;
		}
		else
		{
			System.err.println(" Test FaIL : Sales Voucher with New refe Customer");
			return false;
		}
}

	
public boolean checkSavingSalesINvoiceVoucherWithCustomerSemiAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	

	Thread.sleep(2000);
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	documentNumberTxt.click();

	
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	customerAccountTxt.click();
	customerAccountTxt.sendKeys(Keys.END);
	customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	customerAccountTxt.sendKeys("Customer Semi");
	customerAccountTxt.sendKeys(Keys.SPACE);
	 
  	int customercount=customerAccountListCount.size();
  	
  	System.err.println(customercount);
  	
  	for(int i=0 ; i < customercount ;i++)
  	{
  		String data=customerAccountListCount.get(i).getText();
  		
  		if(data.equalsIgnoreCase("Customer Semi Adjustment"))
  		{
  			customerAccountListCount.get(i).click();
  			
  			break;
  		}
  	}
			
  	customerAccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	departmentTxt.click();
	departmentTxt.sendKeys(Keys.END);
	departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	departmentTxt.sendKeys(Keys.SPACE);
		
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			departmentListCount.get(i).click();
			
			Thread.sleep(1000);
			
			break;
		}
	}
		
	departmentTxt.sendKeys(Keys.TAB);	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
	salesInvoiceVATPlaceOFSupply.click();
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);
	
	
	int placeOFSupplyListCount=placeOFSupplyList.size();
	
	System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);
		
	for(int i=0 ; i < placeOFSupplyListCount ;i++)
	{
		String data=placeOFSupplyList.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			placeOFSupplyList.get(i).click();
			
			break;
		}
	}
		
	
	Thread.sleep(2000);
	
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	jurisdictionTxt.click();
	jurisdictionTxt.sendKeys(Keys.END);
	jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	jurisdictionTxt.sendKeys("Abu Dhabi");
	Thread.sleep(2000);
	jurisdictionTxt.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
	pvWareHouseTxt.click();
	pvWareHouseTxt.sendKeys(Keys.SPACE);
		
	int warehousecount=pvwareHouseListCount.size();
  	
  	System.err.println(warehousecount);
  	
  	for(int i=0 ; i < warehousecount ;i++)
  	{
  		String data=pvwareHouseListCount.get(i).getText();
  		
  		if(data.equalsIgnoreCase("HYDERABAD"))
  		{
  			pvwareHouseListCount.get(i).click();
  			
  			break;
  		}	
  	}
			
  	pvWareHouseTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
  	enter_ItemTxt.sendKeys(Keys.END);
  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
  	enter_ItemTxt.sendKeys(Keys.SPACE);
  	enter_ItemTxt.sendKeys("std");
  	
  /*	int itemcount1=itemListCount.size();
  	
  	System.err.println(itemcount1);
  	
  	for(int i=0 ; i < itemcount1 ;i++)
  	{
  		String data=itemListCount.get(i).getText();
  		
  		if(data.equalsIgnoreCase("Std"))
  		{
  			itemListCount.get(i).click();
  			
  			break;
  		}
  	}
	*/		
  	
  	Thread.sleep(1999);
  	enter_ItemTxt.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
	select1stRow_5thColumn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
	select1stRow_8thColumn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
	enter_AQTxt.sendKeys("5");
	enter_AQTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
	enter_FQTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
	select1stRow_11thColumn.click();
	
	

     Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
	select1stRow_14thColumn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	enter_Rate.click();
	enter_Rate.clear();
	enter_Rate.sendKeys("10");
	enter_Rate.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
	enter_Gross.click();
	enter_Gross.sendKeys(Keys.TAB);
	
	String docno=documentNumberTxt.getAttribute("value");
	
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
	voucherSaveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Customer Semi Adjustment (Customer Semi Adjustment)";

 
System.out.println("Bill wise Screen Cutomer ActName "  + actPartyName+":");
System.out.println("Bill wise Screen Cutomer ExpName "  + expPartyName+":");
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="1";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "50.00";
String expBillBaseCurrency                      = "50.00";
String expBillLocalCurrency                     = "3.50";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "50.00";

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
billrefAdjuBills1stChkbox.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "50";
String expBillBaseCurrencyPick                          = "50"; 
String expBillLocalCurrencyPick                         = "3.50";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "50.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="70.00";
String expgridAdjustmentAmtRow1   ="50.00";
String expgridAdjustmentBillsRow1DocNo  = "OpeBal:1";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);


String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

	
String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
	
String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

String expbreakUpDetailsAccountPick             ="OBC";
String expbreakUpDetailsDepartmentPick          ="DUBAI";
	
String expasOnEntryDateTransAmtPick             ="100.00";
String expasOnEntryDateBaseConcersationRatePick ="1";
String expasOnEntryDateBaseAmountPick           ="100.00";
String expasOnEntryDateLocConversationRatePick  ="0.11";
String expasOnEntryDateAmtPick                  ="11.00";
	
String expbalOnAdjstDateTransAmtPick            ="70.00";
String expbalOnAdjstDateBasrConversionRatePick  ="1";
String expbalOnAdjstDateBaseAmountPick          ="70.00";
String expbalOnAdjstDateLocalConversionRatePick ="0.07";
String expbalOnAdjstDateAmtPick                 ="4.90";

String expadjustmentsAmount1Pick                ="50.00";
String expadjustmentsAmount2Pick                ="50.00";
String expadjustmentsAmount3Pick                ="3.50";
String expadjustmentsAmount4Pick                ="50.00";
	
String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
String expexchangeGainLossForLocalCurrencyPick  ="2.00";


System.out.println(" Right SIde Elements *****************************************************************************");

System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);

    
    if (   savingVoucher==true && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && 
    		actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
    		actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			
			actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo) && 
	        
    		
		     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
				actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
				actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
				actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
				actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
				actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
				actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
				actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
				actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
				actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick))
	        
		{
			System.err.println(" Test Pass: Voucher Saved  ");
			return true;
		}
		else
		{
			System.err.println(" Test FAIl: Voucher Saved  ");
			return false;
		}


}

	

@FindBy(xpath="//input[@id='id_body_33554511']")
private static WebElement enter_AQTxt;

@FindBy(xpath="//input[@id='id_body_33554512']")
private static WebElement enter_FQTxt;

public boolean checkSavingSalesINvoiceVoucherWithCustomrFullAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	Thread.sleep(2000);
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	documentNumberTxt.click();

	
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	customerAccountTxt.click();
	customerAccountTxt.sendKeys(Keys.END);
	customerAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	customerAccountTxt.sendKeys("customer Full");
	customerAccountTxt.sendKeys(Keys.SPACE);
	 
  	int customercount=customerAccountListCount.size();
  	
  	System.err.println(customercount);
  	
  	for(int i=0 ; i < customercount ;i++)
  	{
  		String data=customerAccountListCount.get(i).getText();
  		
  		if(data.equalsIgnoreCase("Customer Full Adjustment"))
  		{
  			customerAccountListCount.get(i).click();
  			
  			break;
  		}
  	}
			
  	customerAccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	departmentTxt.click();
	departmentTxt.sendKeys(Keys.END);
	departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	departmentTxt.sendKeys(Keys.SPACE);
		
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			departmentListCount.get(i).click();
			
			Thread.sleep(1000);
			
			break;
		}
	}
		
	departmentTxt.sendKeys(Keys.TAB);	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
	salesInvoiceVATPlaceOFSupply.click();
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);
	
	
	int placeOFSupplyListCount=placeOFSupplyList.size();
	
	System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);
		
	for(int i=0 ; i < placeOFSupplyListCount ;i++)
	{
		String data=placeOFSupplyList.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			placeOFSupplyList.get(i).click();
			
			break;
		}
	}
		
	
	Thread.sleep(2000);
	
	salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	jurisdictionTxt.click();
	jurisdictionTxt.sendKeys(Keys.END);
	jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	jurisdictionTxt.sendKeys("Abu Dhabi");
	Thread.sleep(2000);
	jurisdictionTxt.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
	pvWareHouseTxt.click();
	pvWareHouseTxt.sendKeys(Keys.SPACE);
		
	int warehousecount=pvwareHouseListCount.size();
  	
  	System.err.println(warehousecount);
  	
  	for(int i=0 ; i < warehousecount ;i++)
  	{
  		String data=pvwareHouseListCount.get(i).getText();
  		
  		if(data.equalsIgnoreCase("HYDERABAD"))
  		{
  			pvwareHouseListCount.get(i).click();
  			
  			break;
  		}	
  	}
			
  	pvWareHouseTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
  	enter_ItemTxt.sendKeys(Keys.END);
  	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
  	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
  	enter_ItemTxt.sendKeys(Keys.SPACE);
  	enter_ItemTxt.sendKeys("std");
  	
  /*	int itemcount1=itemListCount.size();
  	
  	System.err.println(itemcount1);
  	
  	for(int i=0 ; i < itemcount1 ;i++)
  	{
  		String data=itemListCount.get(i).getText();
  		
  		if(data.equalsIgnoreCase("Std"))
  		{
  			itemListCount.get(i).click();
  			
  			break;
  		}
  	}
	*/		
  	
  	Thread.sleep(1999);
  	enter_ItemTxt.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
	select1stRow_5thColumn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
	select1stRow_8thColumn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
	enter_AQTxt.sendKeys("1");
	enter_AQTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
	enter_FQTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
	select1stRow_11thColumn.click();
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
	select1stRow_14thColumn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	enter_Rate.click();
	enter_Rate.clear();
	enter_Rate.sendKeys("100");
	enter_Rate.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
	enter_Gross.click();
	enter_Gross.sendKeys(Keys.TAB);
	
	String docno=documentNumberTxt.getAttribute("value");
	
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
	voucherSaveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Customer Full Adjustment (Customer Full Adjustment)";

 
System.out.println("Bill wise Screen Party Name  "  + actPartyName + "  Value Expected  " + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="1";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "100.00";
String expBillBaseCurrency                      = "100.00";
String expBillLocalCurrency                     = "7.00";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "100.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
billRefNewReferenceTxt.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


String expBillNewReferencePick                          = "100.00";
String expBillTransactionCurrencyPick                   = "100.00";
String expBillBaseCurrencyPick                          = "100.00"; 
String expBillLocalCurrencyPick                         = "7.00";
String expBillBalanceNewRefAmountPick                   = "100.00";
String expbillRefAdjustAmountInTransCurencyPick         = "100.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

boolean savingVoucher=checkVoucherSavingMessage(docno);


    
    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick))
	        
		{
			System.err.println(" Payemnst VAT Saved With Full Adjustment ");
			return true;
		}
		else
		{
			System.err.println("Payemnst VAT Saved With Full Adjustment ");
			return false;
		}
}



//Recepits 

@FindBy(xpath="//input[@id='id_body_16777330']")
private static WebElement  enterReceiptsVATTaxCode;

@FindBy(xpath="//input[@id='id_header_268435470']")
private static WebElement  placeofSupplyTxt;

@FindBy(xpath="//tbody[@id='id_header_268435470_table_body']/tr/td[2]")
private static List<WebElement>  placeofSupplyList;


@FindBy(xpath="//tbody[@id='id_header_268435471_table_body']/tr/td[2]")
private static List<WebElement>  jurisdictionList;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr/td[3]")
private static List<WebElement>  billwiseAdjustBillsDocList;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr/td[13]")
private static List<WebElement>  billwiseAdjustBillsAdjustColumn;
	
@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr/td[2]/input")
private static List<WebElement>  billwiseAdjustBillsChkBoxList;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[2]/input")
private static WebElement  billrefAdjuBills1stChkbox;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[2]/input")
private static WebElement  billrefAdjuBills2ndChkbox;

@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[2]/input")
private static WebElement  billrefAdjuBills3rdChkbox;

public boolean checkSavingRecepitsVATVocherWithCustomerNewReference() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
    finacinalsMenu.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(recepitsVATVoucher));
	recepitsVATVoucher.click();
	
	Thread.sleep(2000);
	
	checkDeleteLinkStatus();
	
	Thread.sleep(2000);
			
	
	Thread.sleep(2000);

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingBillsBtn));
	pendingBillsBtn.click();

	Thread.sleep(2000);

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingBillsGridRow1Chkbox));

	int actvoucherBodyGridRow=voucherBodyGridRowCountList.size();


	String actvoucherBodyGridRowCount=Integer.toString(actvoucherBodyGridRow);
	String  expvoucherBodyGridRowCount="4";

	System.err.println("actvoucherBodyGridRowCount  : "+actvoucherBodyGridRowCount);

	Thread.sleep(2000);

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(allVouchersOption));
	allVouchersOption.click();
	Thread.sleep(2000);
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
	
	checkUserFriendlyMessage();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
   newCashBankAccountTxt.click();
	
	newCashBankAccountTxt.sendKeys(Keys.SPACE);
	
	
   int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();

   System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);
   
for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
{
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("Bank"))
		{
		cashAndBAnkAccountList.get(i).click();
			
			break;
		}
	}

newCashBankAccountTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	
	departmentTxt.click();
	departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
	departmentTxt.sendKeys(Keys.SPACE);
	Thread.sleep(2000);
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			departmentListCount.get(i).click();
			break;
		}
	}
		
	Thread.sleep(1000);
	
	departmentTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
	placeofSupplyTxt.click();
	placeofSupplyTxt.sendKeys(Keys.SPACE);
	
   int placeOfSupplyListCount=placeofSupplyList.size();
	
	System.err.println(placeOfSupplyListCount);
		
	for(int i=0 ; i < placeOfSupplyListCount ;i++)
	{
		String data=placeofSupplyList.get(i).getText();
		
		if(data.equalsIgnoreCase("Abu Dhabi"))
		{
			placeofSupplyList.get(i).click();
			
			break;
		}
	}
		
	placeofSupplyTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	jurisdictionTxt.click();
	jurisdictionTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	jurisdictionTxt.sendKeys(Keys.SPACE);
	
   int jurisdictionListCount=jurisdictionList.size();
	
	System.err.println(jurisdictionListCount);
		
	for(int i=0 ; i < jurisdictionListCount ;i++)
	{
		String data=jurisdictionList.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
	{
		jurisdictionList.get(i).click();
		
		break;
	}
}
	
jurisdictionTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Customer New");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Customer New Reference"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterReceiptsVATTaxCode));	
enterReceiptsVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys("100");
enter_Amount.sendKeys(Keys.TAB);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));	
voucherSaveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));

String actPartyName = billRefPartyName.getText();
String expPartyName = "Customer New Reference (Customer New Reference)";
 
 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
  
int Adjustbills=billRefAdjustBillsGridList.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="1";
 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);
		
    
     

System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "100.00";
String expBillBaseCurrency                      = "100.00";
String expBillLocalCurrency                     = "7.00";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "100.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
billRefNewReferenceTxt.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


String expBillNewReferencePick                          = "100.00";
String expBillTransactionCurrencyPick                   = "100.00";
String expBillBaseCurrencyPick                          = "100.00"; 
String expBillLocalCurrencyPick                         = "7.00";
String expBillBalanceNewRefAmountPick                   = "100.00";
String expbillRefAdjustAmountInTransCurencyPick         = "100.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="100.00";
String expgridAdjustmentAmtRow1   ="0.00";
String expgridAdjustmentBillsRow1DocNo  = "NDT55:1";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

boolean savingVoucher=checkVoucherSavingMessage(docno);


    
    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo))
	        
	        
		{
			System.err.println("Recepits VAT Voucher Saved With New Reference  ");
			return true;
		}
		else
		{
			System.err.println("Recepits VAT Voucher Saved With New Reference  ");
			return false;
		}
}



public boolean checkSavingRecepitsVATVocherWithCustomerSemiAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
    
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
    newCashBankAccountTxt.click();
	newCashBankAccountTxt.sendKeys(Keys.SPACE);
	
   int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();

   System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);
   
  for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
  {
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("Bank"))
		{
		cashAndBAnkAccountList.get(i).click();
			
			break;
		}
	}

   newCashBankAccountTxt.sendKeys(Keys.TAB);

   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
   departmentTxt.click();
   departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
	departmentTxt.sendKeys(Keys.SPACE);
	Thread.sleep(2000);
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			departmentListCount.get(i).click();
			break;
		}
	}
		
	Thread.sleep(1000);
	
	departmentTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
	placeofSupplyTxt.click();
	placeofSupplyTxt.sendKeys(Keys.SPACE);
	
   int placeOfSupplyListCount=placeofSupplyList.size();
	
	System.err.println(placeOfSupplyListCount);
		
	for(int i=0 ; i < placeOfSupplyListCount ;i++)
	{
		String data=placeofSupplyList.get(i).getText();
		
		if(data.equalsIgnoreCase("Abu Dhabi"))
		{
			placeofSupplyList.get(i).click();
			
			break;
		}
	}
		
	placeofSupplyTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	jurisdictionTxt.click();
	jurisdictionTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	jurisdictionTxt.sendKeys(Keys.SPACE);
	
   int jurisdictionListCount=jurisdictionList.size();
	
	System.err.println(jurisdictionListCount);
		
	for(int i=0 ; i < jurisdictionListCount ;i++)
	{
		String data=jurisdictionList.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
	{
		jurisdictionList.get(i).click();
		
		break;
	}
}
	
jurisdictionTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Customer semi");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Customer Semi Adjustment"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}

enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterReceiptsVATTaxCode));	
enterReceiptsVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys("50");
enter_Amount.sendKeys(Keys.TAB);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));	
voucherSaveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));

String actPartyName = billRefPartyName.getText();
String expPartyName = "Customer Semi Adjustment (Customer Semi Adjustment)";
 
 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
  
int Adjustbills=billRefAdjustBillsGridList.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="0";
 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);
		
 
String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "50.00";
String expBillBaseCurrency                      = "50.00";
String expBillLocalCurrency                     = "3.50";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "50.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
billRefNewReferenceTxt.click();
	
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();



String expBillNewReferencePick                          = "50.00";
String expBillTransactionCurrencyPick                   = "50.00";
String expBillBaseCurrencyPick                          = "50.00"; 
String expBillLocalCurrencyPick                         = "3.50";
String expBillBalanceNewRefAmountPick                   = "50.00";
String expbillRefAdjustAmountInTransCurencyPick         = "50.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

boolean savingVoucher=checkVoucherSavingMessage(docno);


    
    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) )
	        
		{
			System.err.println("Recepits VAT Voucher Saved With Semi Adjustment  ");
			return true;
		}
		else
		{
			System.err.println("Recepits VAT Voucher Saved With Semi Adjustment ");
			return false;
		}
}

	
@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr")
private static List<WebElement> billRefAdjustBillsGridList;

	

public boolean checkSavingRecepitsVATVocherWithCustomerFullAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
    
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
    newCashBankAccountTxt.click();
	newCashBankAccountTxt.sendKeys(Keys.SPACE);
	
   int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();

   System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);
   
  for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
  {
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("Bank"))
		{
		cashAndBAnkAccountList.get(i).click();
			
			break;
		}
	}

   newCashBankAccountTxt.sendKeys(Keys.TAB);

   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
   departmentTxt.click();
   departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
	departmentTxt.sendKeys(Keys.SPACE);
	Thread.sleep(2000);
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			departmentListCount.get(i).click();
			break;
		}
	}
		
	Thread.sleep(1000);
	
	departmentTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
	placeofSupplyTxt.click();
	placeofSupplyTxt.sendKeys(Keys.SPACE);
	
   int placeOfSupplyListCount=placeofSupplyList.size();
	
	System.err.println(placeOfSupplyListCount);
		
	for(int i=0 ; i < placeOfSupplyListCount ;i++)
	{
		String data=placeofSupplyList.get(i).getText();
		
		if(data.equalsIgnoreCase("Abu Dhabi"))
		{
			placeofSupplyList.get(i).click();
			
			break;
		}
	}
		
	placeofSupplyTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	jurisdictionTxt.click();
	jurisdictionTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	jurisdictionTxt.sendKeys(Keys.SPACE);
	
   int jurisdictionListCount=jurisdictionList.size();
	
	System.err.println(jurisdictionListCount);
		
	for(int i=0 ; i < jurisdictionListCount ;i++)
	{
		String data=jurisdictionList.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
	{
		jurisdictionList.get(i).click();
		
		break;
	}
}
	
jurisdictionTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Customer Full");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Customer Full Adjustment"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterReceiptsVATTaxCode));	
enterReceiptsVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys("100");
enter_Amount.sendKeys(Keys.TAB);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));	
voucherSaveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));

String actPartyName = billRefPartyName.getText();
String expPartyName = "Customer Full Adjustment (Customer Full Adjustment)";
 
 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
  
int Adjustbills=billRefAdjustBillsGridList.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="1";
 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);
		
    

System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "100.00";
String expBillBaseCurrency                      = "100.00";
String expBillLocalCurrency                     = "7.00";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "100.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridFirstRowAdjustmentAmtTxt));
billRefGridFirstRowAdjustmentAmtTxt.click();
	
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridFirstRowAdjustmentAmtTxt));
billRefGridFirstRowAdjustmentAmtTxt.click();
	
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "100";
String expBillBaseCurrencyPick                          = "100"; 
String expBillLocalCurrencyPick                         = "7.00";
String expBillBalanceNewRefAmountPick                   = "0.00";

String expbillRefAdjustAmountInTransCurencyPick         = "100.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();

String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="100.00";
String expgridAdjustmentAmtRow1   ="100.00";
String expgridAdjustmentBillsRow1DocNo  = "NDT55:3";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);



String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

	
String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
	
String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

String expbreakUpDetailsAccountPick             ="071-001";
String expbreakUpDetailsItemPick                ="STD RATE COGS ITEM";     
String expbreakUpDetailsDepartmentPick          ="DUBAI";
	
String expasOnEntryDateTransAmtPick             ="100.00";
String expasOnEntryDateBaseConcersationRatePick ="1";
String expasOnEntryDateBaseAmountPick           ="100.00";
String expasOnEntryDateLocConversationRatePick  ="0.07";
String expasOnEntryDateAmtPick                  ="7.00";
	
String expbalOnAdjstDateTransAmtPick            ="100.00";
String expbalOnAdjstDateBasrConversionRatePick  ="1";
String expbalOnAdjstDateBaseAmountPick          ="100.00";
String expbalOnAdjstDateLocalConversionRatePick ="0.07";
String expbalOnAdjstDateAmtPick                 ="7.00";

String expadjustmentsAmount1Pick                ="100.00";
String expadjustmentsAmount2Pick                ="100.00";
String expadjustmentsAmount3Pick                ="7.00";
String expadjustmentsAmount4Pick                ="100.00";
	
String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
String expexchangeGainLossForLocalCurrencyPick  ="0.00";


System.out.println(" Right SIde Elements *****************************************************************************");

System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

boolean savingVoucher=checkVoucherSavingMessage(docno);


    
    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo)&& 
		     
		     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
				actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
				actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
				actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
				actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
				actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
				actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
				actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
				actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
				actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick))
	        
		{
			System.err.println("Recepits VAT Voucher Saved With Semi Adjustment  ");
			return true;
		}
		else
		{
			System.err.println("Recepits VAT Voucher Saved With Semi Adjustment ");
			return false;
		}
}




public boolean checkBillWsieScreenAfterTotalConsumeInRecepitsVAT() throws InterruptedException
{
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
    newCashBankAccountTxt.click();
	newCashBankAccountTxt.sendKeys(Keys.SPACE);
	
    int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();

    System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);
   
    for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
    {
	   String data		  = cashAndBAnkAccountList.get(i).getText();
	
	   if(data.equalsIgnoreCase("Bank"))
		{
		   cashAndBAnkAccountList.get(i).click();
			
			break;
		}
	}

   newCashBankAccountTxt.sendKeys(Keys.TAB);

   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
   departmentTxt.click();
   departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
	departmentTxt.sendKeys(Keys.SPACE);
	Thread.sleep(2000);
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			departmentListCount.get(i).click();
			break;
		}
	}
		
	Thread.sleep(1000);
	
	departmentTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
	placeofSupplyTxt.click();
	placeofSupplyTxt.sendKeys(Keys.SPACE);
	
   int placeOfSupplyListCount=placeofSupplyList.size();
	
	System.err.println(placeOfSupplyListCount);
		
	for(int i=0 ; i < placeOfSupplyListCount ;i++)
	{
		String data=placeofSupplyList.get(i).getText();
		
		if(data.equalsIgnoreCase("Abu Dhabi"))
		{
			placeofSupplyList.get(i).click();
			
			break;
		}
	}
		
	placeofSupplyTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	jurisdictionTxt.click();
	jurisdictionTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	jurisdictionTxt.sendKeys(Keys.SPACE);
	
   int jurisdictionListCount=jurisdictionList.size();
	
	System.err.println(jurisdictionListCount);
		
	for(int i=0 ; i < jurisdictionListCount ;i++)
	{
		String data=jurisdictionList.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
	{
		jurisdictionList.get(i).click();
		
		break;
	}
}
	
jurisdictionTxt.sendKeys(Keys.TAB);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Customer Full");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Customer Full Adjustment"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterReceiptsVATTaxCode));	
enterReceiptsVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys("100");
enter_Amount.sendKeys(Keys.TAB);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));	
voucherSaveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));

String actPartyName = billRefPartyName.getText();
String expPartyName = "Customer Full Adjustment (Customer Full Adjustment)";
 
 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
  
int Adjustbills=billRefAdjustBillsGridList.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="0";
 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);
		
	

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefcancel));
billRefcancel.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
new_CloseBtn.click();


getWaitForAlert();

getAlert().accept();

if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills)) 
{
return true;	
} 
else
{
return false;
}
	
}



public boolean checkSavedVoucherInRecepitsVAT()throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	
    Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
    newBtn.click();
	

    checkUserFriendlyMessage();
    
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
    previousBtn.click();
	
    boolean loading=checkLoadingMessage();
    
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String actDocno             = documentNumberTxt.getAttribute("value");
	String actVouDate           = dateTxt.getAttribute("value");
	String actDepartment        = departmentTxt.getAttribute("value");
	String actPlaceOfSupply     = placeofSupplyTxt.getAttribute("value");
	String actChequeNo          = jurisdictionTxt.getAttribute("value");
	
	String actCashAndBankAccount=newCashBankAccountTxt.getAttribute("value");
			
			
	DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    Date date=new Date();
    String expadjustBills=df.format(date);
    
    System.out.println("expadjustBills   :"+expadjustBills);
	
     
	
	String expDocno              = "3";
    String expDepartment         = "Dubai";
	String expPlaceOfSupply      = "Abu Dhabi";
	String expChequeNo           = "Dubai";
	String expCashAndBankAccount = "Bank";
	
	
	
	
	String actAccountR1           = select1stRow_1stColumn.getText();
	String actTaxcodeR1           = select1stRow_2ndColumn.getText();
	String actAmountR1            = select1stRow_3rdColumn.getText();
	String actrefR1               = select1stRow_4thColumn.getText();
	
   
	String expAccountR1          = "Customer Full Adjustment";
	String expTaxcodeR1          = "Std Rate";
	String expAmountR1           = "100.00";
	String exprefR1              = "NDT55:3 ";
	 

	
	String actFooterAmt   =recepitsFooterAmt.getText();
	String expFooterAmt   ="100.00";

	
	System.out.println("Entry Page Document Number    "+actDocno       +"  value Expected  "+expDocno);
	System.out.println("Entry Page Voucher Date       "+actVouDate     +"  value Expected  "+expadjustBills);
	System.out.println("Entry Page ChequeNoTxt        "+actChequeNo    +"  value Expected  "+expChequeNo);
	System.out.println("Entry Page Department         "+actDepartment  +"  value Expected  "+expDepartment);
	System.out.println("Entry Page CashAndBankAccount "+actCashAndBankAccount  +"  value Expected  "+expCashAndBankAccount);
	
	
	System.out.println("Entry Page Account            "+actAccountR1     +"  value Expected  "+expAccountR1);
	System.out.println("Entry Page Taxcode            "+actTaxcodeR1     +"  value Expected  "+expTaxcodeR1);
	System.out.println("Entry Page Amount             "+actAmountR1      +"  value Expected  "+expAmountR1);
	System.out.println("Entry Page Reference          "+actrefR1         +"  value Expected  "+exprefR1);
	
	
	
	System.out.println("Entry Page Place Of Supply    "+actPlaceOfSupply  +"  value Expected  "+expPlaceOfSupply);
	System.out.println("Entry Page Footer  Amount     "+actFooterAmt   +"  Value Expected  "+expFooterAmt);
	
	
	if ( actDocno.equalsIgnoreCase(expDocno) && actVouDate.equalsIgnoreCase(expadjustBills) &&actDepartment.equalsIgnoreCase(expDepartment) && 
			 actChequeNo.equalsIgnoreCase(expChequeNo) && 
			 actCashAndBankAccount.equalsIgnoreCase(expCashAndBankAccount) && 
			 
			actAccountR1.equalsIgnoreCase(expAccountR1) && actAmountR1.equalsIgnoreCase(expAmountR1) && actTaxcodeR1.equalsIgnoreCase(expTaxcodeR1) && 
			actrefR1.startsWith(exprefR1)&& 
			
			actFooterAmt.equalsIgnoreCase(expFooterAmt) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply))
	
	{
		System.out.println(" Test Pass: Data Displayed As Exepcted  ");
		return true;
	}
	else
	{
		System.err.println(" Test Fail: Data Displayed As Exepcted ");
		return false;
	}
}


@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
private static WebElement recepitsFooterAmt;



@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
private static List<WebElement> voucherGridIndexChkBox;

@FindBy(xpath="//a[contains(text(),'Pending Sales Orders')]")
private static WebElement  homepagePendingSalesOrders;

@FindBy(xpath="//span[contains(text(),'Sales Returns')]")
private static WebElement  salesReturnsVoucher;

@FindBy(xpath="//ul[@id='id_transaction_viewcontainer']//li[2]")
private static WebElement  pendingSalesInvoicesView;


@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[4]")
private static List<WebElement> voucherGridDocNo;

public boolean checkSalesRetunsBillWiseScreenWithCovertingOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
		
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
		
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
	financialTransactionSalesMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
	salesReturnsVoucher.click();
	
	Thread.sleep(2000);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingSalesInvoicesView));
	pendingSalesInvoicesView.click();
	
	int voucherGridDocNoCount = voucherGridDocNo.size();
	
	for(int i=0;i<voucherGridDocNoCount;i++)
	{
		String data ="1";
		if(voucherGridDocNo.get(i).getText().equalsIgnoreCase(data))
		{
			voucherGridIndexChkBox.get(i).click();
			break;
		}
	}
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertBtn));
	convertBtn.click();
	
	checkUserFriendlyMessage();
	
	Thread.sleep(3000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String docno=documentNumberTxt.getAttribute("value");
    	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
	voucherSaveBtn.click();
	 
	
	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));

	String actPartyName = billRefPartyName.getText();
	String expPartyName = "Customer New Reference (Customer New Reference)";
	 
	 
	System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
	  
	int Adjustbills=billRefAdjustBillsGridList.size();

	String actAdjustbills=Integer.toString(Adjustbills);

	String expAdjustbills="1";
	 
	System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
	String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
	String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
	String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
	String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();
	
	String expgridOrginalAmtRow1      ="100.00";
	String expgridBalanceAmtRow1      ="100.00";
	String expgridAdjustmentAmtRow1   ="0.00";
	String expgridAdjustmentBillsRow1DocNo  = "NDT55:1";
	
	System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
	System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
	System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
	System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);

	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefcancel));
	billRefcancel.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
	new_CloseBtn.click();
	
	getWaitForAlert();
	getAlert().accept();
	
	
	if(actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo) && 
		     actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills))
        
	{
		System.out.println(" Test Pass : billwise screen is displayed with expected Adjustment Bills ");
		return true;
	}
	else
	{
		System.out.println(" Test Fail : billwise screen is displayed with expected Adjustment Bills ");
		return false;
	}
}
@FindBy(xpath="//*[@id='2023']/span")
private static WebElement  finTransJournalsMenu;
	
@FindBy(xpath="//input[@id='id_body_16777336']")
private static WebElement  jvvatTaxcode;


@FindBy(xpath="//*[@id='id_header_6_input_image']/span")
private static WebElement  dueDateCalenderIcon;

@FindBy(xpath="//*[@id='id_header_6_day_today']/td/span[1]")
private static WebElement  todaysDatePicker;




public boolean checkSavingVoucherInJVVATViewWithVendorNewReference() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	 System.err.println(" Entered   ************************");
		
		Thread.sleep(4000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finTransJournalsMenu));
		finTransJournalsMenu.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(JVVATViewVoucher));
		JVVATViewVoucher.click();
		
		Thread.sleep(2999);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		voucherHeaderCurrency.click();;
		voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
		
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
		
		int currencycount=currencyListCount.size();
		
		System.err.println(currencycount);
			
		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("INR"))
				
			{
				currencyListCount.get(i).click();
				
				break;
			}
		}
			
		voucherHeaderCurrency.sendKeys(Keys.TAB);
		
		 Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateCalenderIcon));
		dueDateCalenderIcon.click();
		
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(todaysDatePicker));
		todaysDatePicker.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
		departmentTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}
			
		Thread.sleep(1000);
		
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
		PDRVATPlaceOfSupplyTXt.click();

		PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

		Thread.sleep(2000);
		PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Bank");
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		int accountCount=bodyAccountListInGrid.size();
		
		System.err.println(accountCount);
			
		for(int i=0 ; i < accountCount ;i++)
		{
			String data=bodyAccountListInGrid.get(i).getText();
			
			
			if(data.equalsIgnoreCase("bank"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
				bodyAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		enter_AccountTxt.sendKeys(Keys.TAB);

		
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();
		
		enter_CreditACTxt.sendKeys("Vendor New");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
		int account1Count=bodyCreditAccountListInGrid.size();
		
		System.err.println(account1Count);
			
		for(int i=0 ; i < account1Count ;i++)
		{
			String data=bodyCreditAccountListInGrid.get(i).getText();
			
			System.err.println("DATA  : "+data);
			if(data.equalsIgnoreCase("Vendor New Reference"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
				bodyCreditAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));	
		enter_CreditACTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jvvatTaxcode));	
		jvvatTaxcode.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		jvvatTaxcode.sendKeys("STD");
		Thread.sleep(1000);
		jvvatTaxcode.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		Thread.sleep(1000);
		enter_Amount.sendKeys("100");
		Thread.sleep(1000);
		enter_Amount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
		
		String actPartyName = billRefPartyName.getText();
		String expPartyName = "Vendor New Reference (Vendor New Reference)";
		 
		 
		System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
       
		int Adjustbills=billRefAdjustBillsGrid.size();
		
		String actAdjustbills=Integer.toString(Adjustbills);
		
		String expAdjustbills="1";
		

		String expBillNewReference                      = "0.00";
		String expBillTransactionCurrency               = "100.00";
		String expBillBaseCurrency                      = "100.00";
		String expBillLocalCurrency                     = "7.00";
		String expBillBalanceNewRefAmount              = "0.00";

		String expbillRefAdjustAmountInTransCurency         = "0.00";
		String expbillRefBalanceAmountAdjustInTrnasCurrency = "100.00";



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
		String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
		String actBillBaseCurrency                           = billRefBaseCurrency.getText();
		String actBillLocalCurrency                          = localCurrencyDhs.getText();
		String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
		String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
		String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


		String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
		String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


		String expconversationRateBaseCurrencyRatePick  = "1";
		String expconversationRateLocalCurrencyRatePick = "0.07";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridFirstRowAdjustmentAmtTxt));
		billRefGridFirstRowAdjustmentAmtTxt.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridFirstRowAdjustmentAmtTxt));
		billRefGridFirstRowAdjustmentAmtTxt.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();


		String expBillNewReferencePick                          = "0.00";
		String expBillTransactionCurrencyPick                   = "100";
		String expBillBaseCurrencyPick                          = "100"; 
		String expBillLocalCurrencyPick                         = "7.00";
		String expBillBalanceNewRefAmountPick                   = "0.00";

		String expbillRefAdjustAmountInTransCurencyPick         = "100.00";
		String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		      
		String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
		String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
		String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
		String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
		String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
		String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
		String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


		   
		System.out.println("*********************************************************************************************************");

		System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
		System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
		System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
		System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
		System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
		System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
		   
		System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
		System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

		   
		   //////Pick

		System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
		System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
		System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
		System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
		System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
		System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
		System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

		System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
		System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
		String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
		String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
		String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
		String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();

		String expgridOrginalAmtRow1      ="100.00";
		String expgridBalanceAmtRow1      ="100.00";
		String expgridAdjustmentAmtRow1   ="100.00";
		String expgridAdjustmentBillsRow1DocNo  = "NDT58:1";

		System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
		System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
		System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
		System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);



		String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
		String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
		String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

			
		String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
		String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
		String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
		String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
		String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

		String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
		String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
		String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
		String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
		String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
			
		String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
		String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
		String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
		String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

		String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
		String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

		String expbreakUpDetailsAccountPick             ="121-001";
		String expbreakUpDetailsDepartmentPick          ="DUBAI";
			
		String expasOnEntryDateTransAmtPick             ="100.00";
		String expasOnEntryDateBaseConcersationRatePick ="1";
		String expasOnEntryDateBaseAmountPick           ="100.00";
		String expasOnEntryDateLocConversationRatePick  ="0.07";
		String expasOnEntryDateAmtPick                  ="7.00";
			
		String expbalOnAdjstDateTransAmtPick            ="100.00";
		String expbalOnAdjstDateBasrConversionRatePick  ="1";
		String expbalOnAdjstDateBaseAmountPick          ="100.00";
		String expbalOnAdjstDateLocalConversionRatePick ="0.07";
		String expbalOnAdjstDateAmtPick                 ="7.00";

		String expadjustmentsAmount1Pick                ="100.00";
		String expadjustmentsAmount2Pick                ="100.00";
		String expadjustmentsAmount3Pick                ="7.00";
		String expadjustmentsAmount4Pick                ="100.00";
			
		String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
		String expexchangeGainLossForLocalCurrencyPick  ="0.00";


		System.out.println(" Right SIde Elements *****************************************************************************");

		System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
		System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
		System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
		System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
		System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
		System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
		System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
		System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
		System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

		System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
		System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
		System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
		System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
		System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

		System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
		System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
		System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
		System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

		System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
		System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		boolean savingVoucher=checkVoucherSavingMessage(docno);


		    
		    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
					actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
					actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
				     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
					actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
			        
		    		
			        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
					actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
					actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
					actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
					actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
					actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
					actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
				     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo)&& 
				     
				     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
						actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
						actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
						actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
						actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
						actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
						actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
						actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
						actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
						actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
						actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
						actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick))
			        
				{
					System.err.println("Recepits VAT Voucher Saved With Semi Adjustment  ");
					return true;
				}
				else
				{
					System.err.println("Recepits VAT Voucher Saved With Semi Adjustment ");
					return false;
				}
		}



public boolean checkSavingVoucherInJVVATViewWithVendorSemiAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	 System.err.println(" Entered   ************************");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		voucherHeaderCurrency.click();;
		voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
		
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
		
		int currencycount=currencyListCount.size();
		
		System.err.println(currencycount);
			
		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("INR"))
				
			{
				currencyListCount.get(i).click();
				
				break;
			}
		}
			
		voucherHeaderCurrency.sendKeys(Keys.TAB);
		
		 Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateCalenderIcon));
		dueDateCalenderIcon.click();
		
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(todaysDatePicker));
		todaysDatePicker.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
		departmentTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}
			
		Thread.sleep(1000);
		
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
		PDRVATPlaceOfSupplyTXt.click();

		PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

		Thread.sleep(2000);
		PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Bank");
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		int accountCount=bodyAccountListInGrid.size();
		
		System.err.println(accountCount);
			
		for(int i=0 ; i < accountCount ;i++)
		{
			String data=bodyAccountListInGrid.get(i).getText();
			
			
			if(data.equalsIgnoreCase("bank"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
				bodyAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		enter_AccountTxt.sendKeys(Keys.TAB);

		
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();
		
		enter_CreditACTxt.sendKeys("Vendor Semi");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
		int account1Count=bodyCreditAccountListInGrid.size();
		
		System.err.println(account1Count);
			
		for(int i=0 ; i < account1Count ;i++)
		{
			String data=bodyCreditAccountListInGrid.get(i).getText();
			
			System.err.println("DATA  : "+data);
			if(data.equalsIgnoreCase("Vendor Semi Adjustment"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
				bodyCreditAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));	
		enter_CreditACTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jvvatTaxcode));
		jvvatTaxcode.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		jvvatTaxcode.sendKeys("STD");
		Thread.sleep(1000);
		jvvatTaxcode.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		Thread.sleep(1000);
		enter_Amount.sendKeys("10");
		Thread.sleep(1000);
		enter_Amount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
		
		String actPartyName = billRefPartyName.getText();
		String expPartyName = "Vendor Semi Adjustment (Vendor Semi Adjustment)";
		 
		 
		System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
       
		int Adjustbills=billRefAdjustBillsGrid.size();
		
		String actAdjustbills=Integer.toString(Adjustbills);
		
		String expAdjustbills="0";
		

		String expBillNewReference                      = "0.00";
		String expBillTransactionCurrency               = "10.00";
		String expBillBaseCurrency                      = "10.00";
		String expBillLocalCurrency                     = "0.70";
		String expBillBalanceNewRefAmount              = "0.00";

		String expbillRefAdjustAmountInTransCurency         = "0.00";
		String expbillRefBalanceAmountAdjustInTrnasCurrency = "10.00";



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
		String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
		String actBillBaseCurrency                           = billRefBaseCurrency.getText();
		String actBillLocalCurrency                          = localCurrencyDhs.getText();
		String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
		String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
		String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


		String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
		String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


		String expconversationRateBaseCurrencyRatePick  = "1";
		String expconversationRateLocalCurrencyRatePick = "0.07";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();


		String expBillNewReferencePick                          = "10.00";
		String expBillTransactionCurrencyPick                   = "10.00";
		String expBillBaseCurrencyPick                          = "10.00"; 
		String expBillLocalCurrencyPick                         = "0.70";
		String expBillBalanceNewRefAmountPick                   = "10.00";

		String expbillRefAdjustAmountInTransCurencyPick         = "10.00";
		String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		      
		String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
		String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
		String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
		String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
		String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
		String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
		String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


		   
		System.out.println("*********************************************************************************************************");

		System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
		System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
		System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
		System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
		System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
		System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
		   
		System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
		System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

		   
		   //////Pick

		System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
		System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
		System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
		System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
		System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
		System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
		System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

		System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
		System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		boolean savingVoucher=checkVoucherSavingMessage(docno);


		    
		    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
					actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
					actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
				     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
					actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
			        
		    		
			        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
					actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
					actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
					actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
					actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
					actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick))
			        
				{
					System.err.println("Recepits VAT Voucher Saved With Semi Adjustment  ");
					return true;
				}
				else
				{
					System.err.println("Recepits VAT Voucher Saved With Semi Adjustment ");
					return false;
				}
		}




public boolean checkSavingVoucherInJVVATViewWithVendorFullAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	 System.err.println(" Entered   ************************");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		voucherHeaderCurrency.click();;
		voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
		
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
		
		int currencycount=currencyListCount.size();
		
		System.err.println(currencycount);
			
		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("INR"))
				
			{
				currencyListCount.get(i).click();
				
				break;
			}
		}
			
		voucherHeaderCurrency.sendKeys(Keys.TAB);
		
		 Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateCalenderIcon));
		dueDateCalenderIcon.click();
		
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(todaysDatePicker));
		todaysDatePicker.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
		departmentTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}
			
		Thread.sleep(1000);
		
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
		PDRVATPlaceOfSupplyTXt.click();

		PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

		Thread.sleep(2000);
		PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Bank");
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		int accountCount=bodyAccountListInGrid.size();
		
		System.err.println(accountCount);
			
		for(int i=0 ; i < accountCount ;i++)
		{
			String data=bodyAccountListInGrid.get(i).getText();
			
			
			if(data.equalsIgnoreCase("bank"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
				bodyAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		enter_AccountTxt.sendKeys(Keys.TAB);

		
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();
		
		enter_CreditACTxt.sendKeys("Vendor Full");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
		int account1Count=bodyCreditAccountListInGrid.size();
		
		System.err.println(account1Count);
			
		for(int i=0 ; i < account1Count ;i++)
		{
			String data=bodyCreditAccountListInGrid.get(i).getText();
			
			System.err.println("DATA  : "+data);
			if(data.equalsIgnoreCase("Vendor Full Adjustment"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
				bodyCreditAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));	
		enter_CreditACTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jvvatTaxcode));	
		jvvatTaxcode.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		jvvatTaxcode.sendKeys("STD");
		Thread.sleep(1000);
		jvvatTaxcode.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		Thread.sleep(1000);
		enter_Amount.sendKeys("100");
		Thread.sleep(1000);
		enter_Amount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
		
		String actPartyName = billRefPartyName.getText();
		String expPartyName = "Vendor Full Adjustment (Vendor Full Adjustment)";
		 
		 
		System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
       
		int Adjustbills=billRefAdjustBillsGrid.size();
		
		String actAdjustbills=Integer.toString(Adjustbills);
		
		String expAdjustbills="0";
		

		String expBillNewReference                      = "0.00";
		String expBillTransactionCurrency               = "100.00";
		String expBillBaseCurrency                      = "100.00";
		String expBillLocalCurrency                     = "7.00";
		String expBillBalanceNewRefAmount              = "0.00";

		String expbillRefAdjustAmountInTransCurency         = "0.00";
		String expbillRefBalanceAmountAdjustInTrnasCurrency = "100.00";



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
		String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
		String actBillBaseCurrency                           = billRefBaseCurrency.getText();
		String actBillLocalCurrency                          = localCurrencyDhs.getText();
		String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
		String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
		String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


		String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
		String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


		String expconversationRateBaseCurrencyRatePick  = "1";
		String expconversationRateLocalCurrencyRatePick = "0.07";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		
		String expBillNewReferencePick                          = "100.00";
		String expBillTransactionCurrencyPick                   = "100.00";
		String expBillBaseCurrencyPick                          = "100.00"; 
		String expBillLocalCurrencyPick                         = "7.00";
		String expBillBalanceNewRefAmountPick                   = "100.00";

		String expbillRefAdjustAmountInTransCurencyPick         = "100.00";
		String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		      
		String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
		String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
		String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
		String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
		String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
		String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
		String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
		   
		System.out.println("*********************************************************************************************************");

		System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
		System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
		System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
		System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
		System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
		System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
		   
		System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
		System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

		   
		   //////Pick

		System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
		System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
		System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
		System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
		System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
		System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
		System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

		System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
		System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		boolean savingVoucher=checkVoucherSavingMessage(docno);


	    
	    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
		        
	    		
		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
				actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
				actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) )
		        
			{
				System.err.println("Recepits VAT Voucher Saved With Semi Adjustment  ");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				return true;
			}
			else
			{
				System.err.println("Recepits VAT Voucher Saved With Semi Adjustment ");
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				return false;
			}
		}



public boolean checkSavingJVVATViewVoucherWithCustomersInOneVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{

	Thread.sleep(3000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finTransJournalsMenu));
	finTransJournalsMenu.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(JVVATViewVoucher));
	JVVATViewVoucher.click();
	
	 System.err.println(" Entered   ************************");
		
	 Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		voucherHeaderCurrency.click();;
		voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
		
		voucherHeaderCurrency.sendKeys(Keys.SPACE);
		
		int currencycount=currencyListCount.size();
		
		System.err.println(currencycount);
			
		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("INR"))
				
			{
				currencyListCount.get(i).click();
				
				break;
			}
		}
			
		voucherHeaderCurrency.sendKeys(Keys.TAB);
		
		 Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dueDateCalenderIcon));
		dueDateCalenderIcon.click();
		
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(todaysDatePicker));
		todaysDatePicker.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
		departmentTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
			
		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();
			
			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}
			
		Thread.sleep(1000);
		
		departmentTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
		PDRVATPlaceOfSupplyTXt.click();

		PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

		Thread.sleep(2000);
		PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVAT_JuridictionTxt));
		PDRVAT_JuridictionTxt.click();

		/*PDRVAT_JuridictionTxt.sendKeys("Abu Dhabi");

		Thread.sleep(2000);*/
		PDRVAT_JuridictionTxt.sendKeys(Keys.TAB);

		
		
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Customer New");
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		int accountCount=bodyAccountListInGrid.size();
		
		System.err.println(accountCount);
			
		for(int i=0 ; i < accountCount ;i++)
		{
			String data=bodyAccountListInGrid.get(i).getText();
			
			
			if(data.equalsIgnoreCase("Customer New Reference"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
				bodyAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		enter_AccountTxt.sendKeys(Keys.TAB);

		
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();
		
		enter_CreditACTxt.sendKeys("Bank");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
		int account1Count=bodyCreditAccountListInGrid.size();
		
		System.err.println(account1Count);
			
		for(int i=0 ; i < account1Count ;i++)
		{
			String data=bodyCreditAccountListInGrid.get(i).getText();
			
			System.err.println("DATA  : "+data);
			if(data.equalsIgnoreCase("Bank"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
				bodyCreditAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		enter_CreditACTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jvvatTaxcode));	
		jvvatTaxcode.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		Thread.sleep(1000);
		enter_Amount.sendKeys("10");
		Thread.sleep(1000);
		enter_Amount.sendKeys(Keys.TAB);

		
		
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Customer Semi");
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		
		System.err.println(accountCount);
			
		for(int i=0 ; i < accountCount ;i++)
		{
			String data=bodyAccountListInGrid.get(i).getText();
			
			
			if(data.equalsIgnoreCase("Customer Semi Adjustment"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
				bodyAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		enter_AccountTxt.sendKeys(Keys.TAB);

		
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();
		
		enter_CreditACTxt.sendKeys("Bank");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
		
		System.err.println(account1Count);
			
		for(int i=0 ; i < account1Count ;i++)
		{
			String data=bodyCreditAccountListInGrid.get(i).getText();
			
			System.err.println("DATA  : "+data);
			if(data.equalsIgnoreCase("Bank"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
				bodyCreditAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		enter_CreditACTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jvvatTaxcode));	
		jvvatTaxcode.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		Thread.sleep(1000);
		enter_Amount.sendKeys("100");
		Thread.sleep(1000);
		enter_Amount.sendKeys(Keys.TAB);
	
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Customer Full");
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		
		System.err.println(accountCount);
			
		for(int i=0 ; i < accountCount ;i++)
		{
			String data=bodyAccountListInGrid.get(i).getText();
			
			
			if(data.equalsIgnoreCase("Customer Full Adjustment"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
				bodyAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		enter_AccountTxt.sendKeys(Keys.TAB);

		
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CreditACTxt));
		enter_CreditACTxt.click();
		
		enter_CreditACTxt.sendKeys("Bank");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
		
		System.err.println(account1Count);
			
		for(int i=0 ; i < account1Count ;i++)
		{
			String data=bodyCreditAccountListInGrid.get(i).getText();
			
			System.err.println("DATA  : "+data);
			if(data.equalsIgnoreCase("Bank"))
			{
				getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyCreditAccountListInGrid));
				bodyCreditAccountListInGrid.get(i).click();
				
				break;
			}
		}
		
		enter_CreditACTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jvvatTaxcode));	
		jvvatTaxcode.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		Thread.sleep(1000);
		enter_Amount.sendKeys("100");
		Thread.sleep(1000);
		enter_Amount.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow1));
		billRefGridVendorRow1.click();
		getAction().doubleClick(billRefGridVendorRow1).build().perform();
		
		Thread.sleep(4000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
		String actPartyNamCustomerNewReference = billRefPartyName.getText();
		String expPartyNameCustomerNewReference = "Customer New Reference (Customer New Reference)";
		 
		Thread.sleep(2000);
		System.out.println("Bill wise Screen Cutomer Name "  + actPartyNamCustomerNewReference + "  Value Expected  " + expPartyNameCustomerNewReference);
		int Adjustbills=billRefAdjustBillsGrid.size();
		String actAdjustbills=Integer.toString(Adjustbills);
		String expAdjustbills="2";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
		String actgridOrginalAmtRowr1     = gridOrginalAmtRow1.getText();
		String actgridBalanceAmtRowr1     = gridBalanceAmtRow1.getText();
		String actgridAdjustmentAmtRowr1  = gridAdjustmentAmtRow1.getText();
		String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();

		String expgridOrginalAmtRowr1      ="100.00";
		String expgridBalanceAmtRowr1      ="80.00";
		String expgridAdjustmentAmtRowr1   ="0.00";
		String expgridAdjustmentBillsRow1DocNo  = "OpeBal:1";

		System.out.println("actgridOrginalAmtRowr1    :" +actgridOrginalAmtRowr1 +"       " +"expgridOrginalAmtRowr1 :" +expgridOrginalAmtRowr1);
		System.out.println("actgridBalanceAmtRowr1    :" +actgridBalanceAmtRowr1 +"       " +"expgridBalanceAmtRowr1 :" +expgridBalanceAmtRowr1);
		System.out.println("actgridAdjustmentAmtRowr1 :" +actgridAdjustmentAmtRowr1 +"    " +"expgridAdjustmentAmtRowr1:" +expgridAdjustmentAmtRowr1);
		System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRowr1 :" +expgridAdjustmentBillsRow1DocNo);


		int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();
        
        HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();
		
		for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
		{
			String data		                              = billwiseAdjustBillsDocList.get(i).getText();
			actbillwiseAdjustBillsDocList.add(data);
		}
		
		String actDocumentNumberTextRow1=actbillwiseAdjustBillsDocList.toString();
		
		String expDocumentNumberTextRow1="[OpeBal:1, NDT57:1]";
		
		
        System.out.println("actDocumentNumberText Row1   : "+actDocumentNumberTextRow1);
        System.out.println("expDocumentNumberText  Row1  : "+expDocumentNumberTextRow1);
		

        Thread.sleep(4000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow2));
		billRefGridVendorRow2.click();
		getAction().doubleClick(billRefGridVendorRow2).build().perform();
		
		 Thread.sleep(5000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
		String actPartyNamCustomerSemi = billRefPartyName.getText();
		String expPartyNameCustomerSemi = "Customer Semi Adjustment (Customer Semi Adjustment)";
		 
		 
		System.out.println("Bill wise Screen CustomerSemi "  + actPartyNamCustomerSemi + "  Value Expected  " + expPartyNameCustomerSemi);
		int Adjustbills1=billRefAdjustBillsGrid.size();
		String actAdjustbills1=Integer.toString(Adjustbills1);
		String expAdjustbills1="3";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		
		for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
		{
			String data		                              = billwiseAdjustBillsDocList.get(i).getText();
			actbillwiseAdjustBillsDocList.add(data);
		}
		
		String actDocumentNumberTextRow2=actbillwiseAdjustBillsDocList.toString();
		
		String expDocumentNumberTextRow2="[NDT57:2, OpeBal:1, NDT57:1]";
		
		
        System.out.println("actDocumentNumberText Row2   : "+actDocumentNumberTextRow2);
        System.out.println("expDocumentNumberText  Row2  : "+expDocumentNumberTextRow2);
		
		
        Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridVendorRow3));
		billRefGridVendorRow3.click();
		getAction().doubleClick(billRefGridVendorRow3).build().perform();
		
		 Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
		String actPartyNamCustomerFull = billRefPartyName.getText();
		String expPartyNameCustomerFull = "Customer Full Adjustment (Customer Full Adjustment)";
		 
		 
		System.out.println("Bill wise Screen CustomerSemi "  + actPartyNamCustomerFull + "  Value Expected  " + expPartyNameCustomerFull);
		int Adjustbills2=billRefAdjustBillsGrid.size();
		String actAdjustbills2=Integer.toString(Adjustbills2);
		String expAdjustbills2="1";
		
		
		String actgridAdjustmentBillsRow1DocNo1  = billRefAdjustBillsRow1DocNo.getText();
		String expgridAdjustmentBillsRow1DocNo1  ="OpeBal:1";
		
		System.out.println("gridAdjustmentBillsRow1DocNo1  : "+actgridAdjustmentBillsRow1DocNo1);
		System.out.println(" exp gridAdjustmentBillsRow1DocNo1 : "+expgridAdjustmentBillsRow1DocNo1);;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		billRefNewReferenceTxt.click();
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		

		boolean savingVoucher=checkVoucherSavingMessage(docno);


		    
		    if ( actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo)&& 
		    		actDocumentNumberTextRow1.equalsIgnoreCase(expDocumentNumberTextRow1) && 
		    		actDocumentNumberTextRow2.equalsIgnoreCase(expDocumentNumberTextRow2) && 
		    		actgridAdjustmentBillsRow1DocNo1.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo1))
			        
				{
					System.err.println("Recepits VAT Voucher Saved With Semi Adjustment  ");
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
					new_CloseBtn.click();
					return true;
				}
				else
				{
					System.err.println("Recepits VAT Voucher Saved With Semi Adjustment ");
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
					new_CloseBtn.click();
					return false;
				}
		
}


@FindBy(xpath="//span[contains(text(),'Credit Notes VAT')]")
private static WebElement  creditNotesVATMenu; 

@FindBy(xpath="//span[contains(text(),'Debit Notes VAT')]")
private static WebElement  debitNotesVatMenu;

@FindBy(xpath="//*[@id='id_body_12_table_body']/tr/td[2]")
private static List<WebElement> accountListCount;


public boolean checkSavingPaymentsAfterSavingJVVATView() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{
	
	System.err.println(" Entered   ************************");

	Thread.sleep(3000);

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();


	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
		
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsVoucher));
	paymentsVATVoucher.click();
		
	Thread.sleep(2000);
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
		
	Thread.sleep(2000);
	
Thread.sleep(2000);
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
newCashBankAccountTxt.click();

newCashBankAccountTxt.sendKeys(Keys.SPACE);


int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
  
System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
{
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("bank"))
	{
		cashAndBAnkAccountList.get(i).click();
		
		break;
	}
}

newCashBankAccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.click();;
voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);

voucherHeaderCurrency.sendKeys(Keys.SPACE);

int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

Thread.sleep(2000);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
PDRVATPlaceOfSupplyTXt.click();

PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

Thread.sleep(2000);
PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
departmentTxt.sendKeys(Keys.SPACE);

   
WebElement options=departmentTxt;

int departmentListCountCount=departmentListCount.size();

 for (int i = 0; i < departmentListCountCount; i++) 
 {
	String data=departmentListCount.get(i).getText();
	
	if (data.equalsIgnoreCase("Dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
 }

 departmentTxt.sendKeys(Keys.TAB);

 
//First Row

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Vendor Semi Adjustment");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Vendor Semi Adjustment"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterpayVATTaxCode));	
Thread.sleep(1999);
enterpayVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
enter_Amount.sendKeys("10");
Thread.sleep(1999);
enter_Amount.sendKeys(Keys.TAB);

Thread.sleep(2000);

String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
saveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Vendor Semi Adjustment (Vendor Semi Adjustment)";

 
System.out.println("Bill wise Screen Cutomer Name :"+ actPartyName + ":Value Expected  :" + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="3";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "10.00";
String expBillBaseCurrency                      = "10.00";
String expBillLocalCurrency                     = "0.70";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "10.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills3rdChkbox));
billrefAdjuBills3rdChkbox.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow3.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow3.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow3.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow3DocNo.getText();



String expgridOrginalAmtRow1      ="10.00";
String expgridBalanceAmtRow1      ="10.00";
String expgridAdjustmentAmtRow1   ="10.00";
String expgridAdjustmentBillsRow1DocNo  = "NDT60:2";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);




String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "10";
String expBillBaseCurrencyPick                          = "10"; 
String expBillLocalCurrencyPick                         = "0.70";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "10.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrencyPick+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrencyPick);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
boolean savingVoucher=checkVoucherSavingMessage(docno);



if (    actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
		actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
		actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
	     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
		actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
        
		
        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
		actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
		actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
		actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
		actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
		actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
		
		 actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
	     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo))
	        
		{
			System.err.println(" Test Pass: Payemnst VAT Saved With Adjustment Amount ");
			return true;
		}
		else
		{
			System.err.println("Test FAIl: Payemnst VAT Saved With Adjustment Amount ");
			return false;
		}

	
}


public boolean checkSavingPaymentsAfterSavingJVVATViewWithVendorSemi() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{
	
	
		
Thread.sleep(2000);
	
Thread.sleep(2000);
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
newCashBankAccountTxt.click();

newCashBankAccountTxt.sendKeys(Keys.SPACE);


int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
  
System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
{
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("bank"))
	{
		cashAndBAnkAccountList.get(i).click();
		
		break;
	}
}

newCashBankAccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.click();;
voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);

voucherHeaderCurrency.sendKeys(Keys.SPACE);

int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

Thread.sleep(2000);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
PDRVATPlaceOfSupplyTXt.click();

PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

Thread.sleep(2000);
PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
departmentTxt.sendKeys(Keys.SPACE);

   
WebElement options=departmentTxt;

int departmentListCountCount=departmentListCount.size();

 for (int i = 0; i < departmentListCountCount; i++) 
 {
	String data=departmentListCount.get(i).getText();
	
	if (data.equalsIgnoreCase("Dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
 }

 departmentTxt.sendKeys(Keys.TAB);

 
//First Row

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Vendor Full Adjustment");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Vendor Full Adjustment"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterpayVATTaxCode));	
Thread.sleep(1999);
enterpayVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
enter_Amount.sendKeys("10");
Thread.sleep(1999);
enter_Amount.sendKeys(Keys.TAB);

Thread.sleep(2000);

String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
saveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Vendor Full Adjustment (Vendor Full Adjustment)";

 
System.out.println("Bill wise Screen Cutomer Name :"+ actPartyName + ":Value Expected  :" + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="2";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "10.00";
String expBillBaseCurrency                      = "10.00";
String expBillLocalCurrency                     = "0.70";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "10.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills2ndChkbox));
billrefAdjuBills2ndChkbox.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow2));
String actgridOrginalAmtRow1     = gridOrginalAmtRow2.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow2.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow2.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow2DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="100.00";
String expgridAdjustmentAmtRow1   ="10.00";
String expgridAdjustmentBillsRow1DocNo  = "NDT60:3";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);




String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "10";
String expBillBaseCurrencyPick                          = "10"; 
String expBillLocalCurrencyPick                         = "0.70";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "10.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrencyPick+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrencyPick);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);



if (    actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
		actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
		actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
	     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
		actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
        
		
        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
		actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
		actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
		actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
		actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
		actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
		
		 actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
	     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo))
	        
		{
			System.err.println(" Test Pass: Payemnst VAT Saved With Adjustment Amount ");
			return true;
		}
		else
		{
			System.err.println("Test FAIl: Payemnst VAT Saved With Adjustment Amount ");
			return false;
		}

	
}


public boolean checkSavingPaymentsAfterSavingJVVATViewWithCustomerSemi() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{
	
	System.err.println(" Entered   ************************");

	
		
Thread.sleep(2000);
	
Thread.sleep(2000);
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
newCashBankAccountTxt.click();

newCashBankAccountTxt.sendKeys(Keys.SPACE);


int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
  
System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
{
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("bank"))
	{
		cashAndBAnkAccountList.get(i).click();
		
		break;
	}
}

newCashBankAccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.click();;
voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);

voucherHeaderCurrency.sendKeys(Keys.SPACE);

int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

Thread.sleep(2000);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
PDRVATPlaceOfSupplyTXt.click();

PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

Thread.sleep(2000);
PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
departmentTxt.sendKeys(Keys.SPACE);

   
WebElement options=departmentTxt;

int departmentListCountCount=departmentListCount.size();

 for (int i = 0; i < departmentListCountCount; i++) 
 {
	String data=departmentListCount.get(i).getText();
	
	if (data.equalsIgnoreCase("Dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
 }

 departmentTxt.sendKeys(Keys.TAB);

 
//First Row

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Customer Semi Adjustment");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Customer Semi Adjustment"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterpayVATTaxCode));	
Thread.sleep(1999);
enterpayVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
enter_Amount.sendKeys("10");
Thread.sleep(1999);
enter_Amount.sendKeys(Keys.TAB);

Thread.sleep(2000);

String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
saveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Customer Semi Adjustment (Customer Semi Adjustment)";

 
System.out.println("Bill wise Screen Cutomer Name :"+ actPartyName + ":Value Expected  :" + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="2";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "10.00";
String expBillBaseCurrency                      = "10.00";
String expBillLocalCurrency                     = "0.70";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "10.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills2ndChkbox));
billrefAdjuBills2ndChkbox.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow2));
String actgridOrginalAmtRow1     = gridOrginalAmtRow2.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow2.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow2.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow2DocNo.getText();



String expgridOrginalAmtRow1      ="50.00";
String expgridBalanceAmtRow1      ="50.00";
String expgridAdjustmentAmtRow1   ="10.00";
String expgridAdjustmentBillsRow1DocNo  = "NDT57:2";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);




String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "10";
String expBillBaseCurrencyPick                          = "10"; 
String expBillLocalCurrencyPick                         = "0.70";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "10.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrencyPick+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrencyPick);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);



if (    actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
		actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
		actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
	     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
		actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
        
		
        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
		actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
		actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
		actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
		actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
		actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
		
		 actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
	     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo))
	        
		{
			System.err.println(" Test Pass: Payemnst VAT Saved With Adjustment Amount ");
			return true;
		}
		else
		{
			System.err.println("Test FAIl: Payemnst VAT Saved With Adjustment Amount ");
			return false;
		}

	
}


















public boolean checkSavingVoucherInCreditVATWithCustomerFullAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finTransJournalsMenu));
	finTransJournalsMenu.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotesVATMenu));
	creditNotesVATMenu.click();
	
	Thread.sleep(2000);
	
	checkDeleteLinkStatus();
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
	
	checkUserFriendlyMessage();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys("bank");
		
		Thread.sleep(3000);

		customerAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
		
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
		
		for(int i=0 ; i < departmentcount ;i++)
		{
			String depdata=departmentListCount.get(i).getText();
			
			if(depdata.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}	
			
		departmentTxt.sendKeys(Keys.TAB);
		
	
		PDRVATPlaceOfSupplyTXt.click();
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
	PDRVATPlaceOfSupplyTXt.click();
	
	PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");
	
	Thread.sleep(2000);
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);
		
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVAT_JuridictionTxt));
	PDRVAT_JuridictionTxt.click();
	
	/*PDRVAT_JuridictionTxt.sendKeys("Abu Dhabi");*/
	
	Thread.sleep(2000);
	PDRVAT_JuridictionTxt.sendKeys(Keys.TAB);
		

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	enter_AccountTxt.click();
	enter_AccountTxt.sendKeys(Keys.END);
	enter_AccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	enter_AccountTxt.sendKeys("Customer New");
	enter_AccountTxt.sendKeys(Keys.SPACE);
	
	Thread.sleep(1000);
		
	int dbaccountCount1=accountListCount.size();
	
	System.err.println(dbaccountCount1);
	
	for(int i=0 ; i < dbaccountCount1 ;i++)
	{
		String data=accountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Customer New Reference"))
		{
			accountListCount.get(i).click();
				
			break;
		}
	}
		
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterCreditVATTaxCode));
    enterCreditVATTaxCode.sendKeys(Keys.TAB);
    
    
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
    enter_Amount.sendKeys("50");
	enter_Amount.sendKeys(Keys.TAB);
	
	String docno=documentNumberTxt.getAttribute("value");
	
	Thread.sleep(1999);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MRsaveBtn));
	MRsaveBtn.click();
    
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	
	String actPartyName = billRefPartyName.getText();
	String expPartyName = "Customer New Reference (Customer New Reference)";
	 
	 
	System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
   
	int Adjustbills=billRefAdjustBillsGridList.size();
	
	String actAdjustbills=Integer.toString(Adjustbills);
	
	String expAdjustbills="2";
	 
	
	
	System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);
	
	 
	String expBillNewReference                      = "0.00";
	String expBillTransactionCurrency               = "50.00";
	String expBillBaseCurrency                      = "50.00";
	String expBillLocalCurrency                     = "3.50";
	String expBillBalanceNewRefAmount              = "0.00";

	String expbillRefAdjustAmountInTransCurency         = "0.00";
	String expbillRefBalanceAmountAdjustInTrnasCurrency = "50.00";



	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
	String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
	String actBillBaseCurrency                           = billRefBaseCurrency.getText();
	String actBillLocalCurrency                          = localCurrencyDhs.getText();
	String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
	String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
	String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


	String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
	String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


	String expconversationRateBaseCurrencyRatePick  = "1";
	String expconversationRateLocalCurrencyRatePick = "0.07";



	int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();
    
    HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();
    
	for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
	{
		String data		                              = billwiseAdjustBillsDocList.get(i).getText();
		actbillwiseAdjustBillsDocList.add(data);
	}
	
	String actDocumentNumberTextRow2=actbillwiseAdjustBillsDocList.toString();
	
	String expDocumentNumberTextRow2="[OpeBal:1, NDT57:1]";
	
	
    System.out.println("actDocumentNumberText Row2   : "+actDocumentNumberTextRow2);
    System.out.println("expDocumentNumberText  Row2  : "+expDocumentNumberTextRow2);
	
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridSecondRowAdjustmentAmtTxt));
	billRefGridSecondRowAdjustmentAmtTxt.click();
		
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();

	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridSecondRowAdjustmentAmtTxt));
	billRefGridSecondRowAdjustmentAmtTxt.click();
		
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();


	String expBillNewReferencePick                          = "0.00";
	String expBillTransactionCurrencyPick                   = "50";
	String expBillBaseCurrencyPick                          = "50"; 
	String expBillLocalCurrencyPick                         = "3.50";
	String expBillBalanceNewRefAmountPick                   = "0.00";
	String expbillRefAdjustAmountInTransCurencyPick         = "50.00";
	String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
	 
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	      
	String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
	String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
	String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
	String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
	String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
	String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
	String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


	   
	System.out.println("*********************************************************************************************************");

	System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
	System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
	System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
	System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
	System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
	System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
	   
	System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
	System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

	   
	   //////Pick

	System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
	System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
	System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
	System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
	System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
	System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
	System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

	System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
	System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);


	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
	String actgridOrginalAmtRow1     = gridOrginalAmtRow2.getText();
	String actgridBalanceAmtRow1     = gridBalanceAmtRow2.getText();
	String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow2.getText();
	String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow2DocNo.getText();

	String expgridOrginalAmtRow1      ="100.00";
	String expgridBalanceAmtRow1      ="100.00";
	String expgridAdjustmentAmtRow1   ="50.00";
	String expgridAdjustmentBillsRow1DocNo  = "NDT57:1";

	System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
	System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
	System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
	System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);



	String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
	String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
	String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

		
	String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
	String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
	String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
	String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
	String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

	String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
	String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
	String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
	String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
	String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
		
	String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
	String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
	String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
	String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

	String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
	String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

	String expbreakUpDetailsAccountPick             ="121-001";
	String expbreakUpDetailsDepartmentPick          ="DUBAI";
		
	String expasOnEntryDateTransAmtPick             ="100.00";
	String expasOnEntryDateBaseConcersationRatePick ="1";
	String expasOnEntryDateBaseAmountPick           ="100.00";
	String expasOnEntryDateLocConversationRatePick  ="0.07";
	String expasOnEntryDateAmtPick                  ="7.00";
		
	String expbalOnAdjstDateTransAmtPick            ="100.00";
	String expbalOnAdjstDateBasrConversionRatePick  ="1";
	String expbalOnAdjstDateBaseAmountPick          ="100.00";
	String expbalOnAdjstDateLocalConversionRatePick ="0.07";
	String expbalOnAdjstDateAmtPick                 ="7.00";

	String expadjustmentsAmount1Pick                ="50.00";
	String expadjustmentsAmount2Pick                ="50.00";
	String expadjustmentsAmount3Pick                ="3.50";
	String expadjustmentsAmount4Pick                ="50.00";
		
	String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
	String expexchangeGainLossForLocalCurrencyPick  ="0.00";


	System.out.println(" Right SIde Elements *****************************************************************************");

	System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
	System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
	System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
	System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
	System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
	System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
	System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
	System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
	System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

	System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
	System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
	System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
	System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
	System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

	System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
	System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
	System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
	System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

	System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
	System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);



	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
	billRefOkBtn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

	boolean savingVoucher=checkVoucherSavingMessage(docno);


	    
	    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
		        
	    		
		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
				actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
				actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
				actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
			     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo)&& 
			     
			     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
					actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
					actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
					actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
					actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
					actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
					actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
					actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
					actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
					actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
					actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
					actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick))
		        
			{
				System.err.println("Recepits VAT Voucher Saved With Semi Adjustment  ");
				return true;
			}
			else
			{
				System.err.println("Recepits VAT Voucher Saved With Semi Adjustment ");
				return false;
			}
	}

	




public boolean checkSavingVoucherInCreditVATWithCustomerSemiAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys("Bank");
		
		Thread.sleep(3000);

		customerAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
		
		int departmentcount=departmentListCount.size();
		
		System.err.println(departmentcount);
		
		for(int i=0 ; i < departmentcount ;i++)
		{
			String depdata=departmentListCount.get(i).getText();
			
			if(depdata.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}	
			
		departmentTxt.sendKeys(Keys.TAB);
		
	
		PDRVATPlaceOfSupplyTXt.click();
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
	PDRVATPlaceOfSupplyTXt.click();
	
	PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");
	
	Thread.sleep(2000);
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);
		
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVAT_JuridictionTxt));
	PDRVAT_JuridictionTxt.click();
	
	/*PDRVAT_JuridictionTxt.sendKeys("Abu Dhabi");*/
	
	Thread.sleep(2000);
	PDRVAT_JuridictionTxt.sendKeys(Keys.TAB);
		

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	enter_AccountTxt.click();
	enter_AccountTxt.sendKeys(Keys.END);
	enter_AccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	enter_AccountTxt.sendKeys("Customer Semi");
	enter_AccountTxt.sendKeys(Keys.SPACE);
	
	Thread.sleep(1000);
		
	int dbaccountCount1=accountListCount.size();
	
	System.err.println(dbaccountCount1);
	
	for(int i=0 ; i < dbaccountCount1 ;i++)
	{
		String data=accountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Customer Semi Adjustment"))
		{
			accountListCount.get(i).click();
				
			break;
		}
	}
		
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterCreditVATTaxCode));
    enterCreditVATTaxCode.sendKeys(Keys.TAB);
    
    
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
    enter_Amount.sendKeys("40");
	enter_Amount.sendKeys(Keys.TAB);
	
	String docno=documentNumberTxt.getAttribute("value");
	
	Thread.sleep(1999);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MRsaveBtn));
	MRsaveBtn.click();
    
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	
	String actPartyName = billRefPartyName.getText();
	String expPartyName = "Customer Semi Adjustment (Customer Semi Adjustment)";
	 
	 
	System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
   
	int Adjustbills=billRefAdjustBillsGridList.size();
	
	String actAdjustbills=Integer.toString(Adjustbills);
	
	String expAdjustbills="2";
	 
	
	
	System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);
	
	 
	String expBillNewReference                      = "0.00";
	String expBillTransactionCurrency               = "40.00";
	String expBillBaseCurrency                      = "40.00";
	String expBillLocalCurrency                     = "2.80";
	String expBillBalanceNewRefAmount              = "0.00";

	String expbillRefAdjustAmountInTransCurency         = "0.00";
	String expbillRefBalanceAmountAdjustInTrnasCurrency = "40.00";



	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
	String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
	String actBillBaseCurrency                           = billRefBaseCurrency.getText();
	String actBillLocalCurrency                          = localCurrencyDhs.getText();
	String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
	String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
	String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


	String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
	String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


	String expconversationRateBaseCurrencyRatePick  = "1";
	String expconversationRateLocalCurrencyRatePick = "0.07";


     int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();
    
    HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();
    
	for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
	{
		String data		                              = billwiseAdjustBillsDocList.get(i).getText();
		actbillwiseAdjustBillsDocList.add(data);
		
		if (data.equalsIgnoreCase("NDT57:2")) 
		{
			billwiseAdjustBillsChkBoxList.get(i).click();
		}
	}
	
	String actDocumentNumberTextRow2=actbillwiseAdjustBillsDocList.toString();
	
	String expDocumentNumberTextRow2="[NDT57:2, OpeBal:1]";
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
    System.out.println("actDocumentNumberText Row2   : "+actDocumentNumberTextRow2);
    System.out.println("expDocumentNumberText  Row2  : "+expDocumentNumberTextRow2);
	
	
	

	String expBillNewReferencePick                          = "0.00";
	String expBillTransactionCurrencyPick                   = "40";
	String expBillBaseCurrencyPick                          = "40"; 
	String expBillLocalCurrencyPick                         = "2.80";
	String expBillBalanceNewRefAmountPick                   = "0.00";
	String expbillRefAdjustAmountInTransCurencyPick         = "40.00";
	String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
	 
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	      
	String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
	String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
	String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
	String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
	String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
	String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
	String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


	   
	System.out.println("*********************************************************************************************************");

	System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
	System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
	System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
	System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
	System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
	System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
	   
	System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
	System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

	   
	   //////Pick

	System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
	System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
	System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
	System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
	System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
	System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
	System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

	System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
	System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);


	


	String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
	String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
	String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

		
	String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
	String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
	String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
	String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
	String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

	String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
	String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
	String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
	String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
	String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
		
	String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
	String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
	String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
	String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

	String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
	String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

	String expbreakUpDetailsAccountPick             ="121-001";
	String expbreakUpDetailsDepartmentPick          ="DUBAI";
		
	String expasOnEntryDateTransAmtPick             ="50.00";
	String expasOnEntryDateBaseConcersationRatePick ="1";
	String expasOnEntryDateBaseAmountPick           ="50.00";
	String expasOnEntryDateLocConversationRatePick  ="0.07";
	String expasOnEntryDateAmtPick                  ="3.50";
		
	String expbalOnAdjstDateTransAmtPick            ="40.00";
	String expbalOnAdjstDateBasrConversionRatePick  ="1";
	String expbalOnAdjstDateBaseAmountPick          ="40.00";
	String expbalOnAdjstDateLocalConversionRatePick ="0.07";
	String expbalOnAdjstDateAmtPick                 ="2.80";

	String expadjustmentsAmount1Pick                ="40.00";
	String expadjustmentsAmount2Pick                ="40.00";
	String expadjustmentsAmount3Pick                ="2.80";
	String expadjustmentsAmount4Pick                ="40.00";
		
	String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
	String expexchangeGainLossForLocalCurrencyPick  ="0.00";

	int baseAmtListCount=baseAmtList.size();
	
	ArrayList<String >baseAmtListArray=new ArrayList<>();
	for (int i = 0; i < baseAmtListCount; i++) 
	{
		String data=baseAmtList.get(i).getText();
		baseAmtListArray.add(data);
	}
	
	String actbaseAmtList=baseAmtListArray.toString();
	String expbaseAmtList="[, NDT58:7 (Y0), 10, 10]";
	
	System.out.println(" baseAmtList Actual : "+actbaseAmtList);
	System.out.println(" baseAmtList Exp    : "+expbaseAmtList);

	System.out.println(" Right SIde Elements *****************************************************************************");

	System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
	System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
	System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
	System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
	System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
	System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
	System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
	System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
	System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

	System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
	System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
	System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
	System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
	System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

	System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
	System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
	System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
	System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

	System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
	System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);



	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
	billRefOkBtn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

	boolean savingVoucher=checkVoucherSavingMessage(docno);


	    
	    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
		        
	    		
		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
				actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
				actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
				 
			     
			     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
					actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
					actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
					actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
					actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
					actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
					actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
					actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
					actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
					actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
					actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
					actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick))
		        
			{
				System.err.println("Test Pass: Voucher  Saved Successfully  ");
				return true;
			}
			else
			{
				System.err.println("Test Fail: Voucher Saved Successfully");
				return false;
			}
	}

@FindBy(xpath="//*[@id='id_transactionentry_save']/div[2]")
private static WebElement  MRsaveBtn;

@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr/td")
private static List<WebElement>  baseAmtList;


public boolean checkSavingVoucherInCreditVATWithCustomerNewRefernce() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{

	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	customerAccountTxt.click();
	customerAccountTxt.sendKeys("bank");
	
	Thread.sleep(3000);

	customerAccountTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	departmentTxt.click();
	departmentTxt.sendKeys(Keys.SPACE);
	
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
	
	for(int i=0 ; i < departmentcount ;i++)
	{
		String depdata=departmentListCount.get(i).getText();
		
		if(depdata.equalsIgnoreCase("Dubai"))
		{
			departmentListCount.get(i).click();
			break;
		}
	}	
		
	departmentTxt.sendKeys(Keys.TAB);
	

	PDRVATPlaceOfSupplyTXt.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
PDRVATPlaceOfSupplyTXt.click();

PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

Thread.sleep(2000);
PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);
	

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVAT_JuridictionTxt));
PDRVAT_JuridictionTxt.click();

/*PDRVAT_JuridictionTxt.sendKeys("Abu Dhabi");*/

Thread.sleep(2000);
PDRVAT_JuridictionTxt.sendKeys(Keys.TAB);
	

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys(Keys.END);
enter_AccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
enter_AccountTxt.sendKeys("Customer New");
enter_AccountTxt.sendKeys(Keys.SPACE);

Thread.sleep(1000);
	
int dbaccountCount1=accountListCount.size();

System.err.println(dbaccountCount1);

for(int i=0 ; i < dbaccountCount1 ;i++)
{
	String data=accountListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("Customer New Reference"))
	{
		accountListCount.get(i).click();
			
		break;
	}
}
	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterCreditVATTaxCode));
enterCreditVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys("50");
enter_Amount.sendKeys(Keys.TAB);

String docno=documentNumberTxt.getAttribute("value");

Thread.sleep(1999);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MRsaveBtn));
MRsaveBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));

String actPartyName = billRefPartyName.getText();
String expPartyName = "Customer New Reference (Customer New Reference)";
 
 
System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);

int Adjustbills=billRefAdjustBillsGridList.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="2";
 


System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

 
String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "50.00";
String expBillBaseCurrency                      = "50.00";
String expBillLocalCurrency                     = "3.50";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "50.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";




int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();

HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();

for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
{
	String data		                              = billwiseAdjustBillsDocList.get(i).getText();
	actbillwiseAdjustBillsDocList.add(data);
	
	if (data.equalsIgnoreCase("OpeBal:1")) 
	{
		billwiseAdjustBillsChkBoxList.get(i).click();
	}
}

String actDocumentNumberTextRow2=actbillwiseAdjustBillsDocList.toString();

String expDocumentNumberTextRow2="[NDT57:1, OpeBal:1]";

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();

System.out.println("actDocumentNumberText Row2   : "+actDocumentNumberTextRow2);
System.out.println("expDocumentNumberText  Row2  : "+expDocumentNumberTextRow2);


	
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();



String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "50";
String expBillBaseCurrencyPick                          = "50"; 
String expBillLocalCurrencyPick                         = "3.50";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "50.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();
String actgridAdjustmentBillsRow2DocNo  = billRefAdjustBillsRow2DocNo.getText();

String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="80.00";
String expgridAdjustmentAmtRow1   ="50.00";
String expgridAdjustmentBillsRow1DocNo  = "OpeBal:1";
String expgridAdjustmentBillsRow2DocNo  = "NDT57:1";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);
System.out.println("actgridAdjustmentBillsRow2DocNo    :" +actgridAdjustmentBillsRow2DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow2DocNo);


String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

	
String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
	
String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

String expbreakUpDetailsAccountPick             ="OBC";
String expbreakUpDetailsDepartmentPick          ="DUBAI";
	
String expasOnEntryDateTransAmtPick             ="100.00";
String expasOnEntryDateBaseConcersationRatePick ="1";
String expasOnEntryDateBaseAmountPick           ="100.00";
String expasOnEntryDateLocConversationRatePick  ="0.11";
String expasOnEntryDateAmtPick                  ="11.00";
	
String expbalOnAdjstDateTransAmtPick            ="80.00";
String expbalOnAdjstDateBasrConversionRatePick  ="1";
String expbalOnAdjstDateBaseAmountPick          ="80.00";
String expbalOnAdjstDateLocalConversionRatePick ="0.07";
String expbalOnAdjstDateAmtPick                 ="5.60";

String expadjustmentsAmount1Pick                ="50.00";
String expadjustmentsAmount2Pick                ="50.00";
String expadjustmentsAmount3Pick                ="3.50";
String expadjustmentsAmount4Pick                ="50.00";
	
String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
String expexchangeGainLossForLocalCurrencyPick  ="2.00";

int baseAmtListCount=baseAmtList.size();
ArrayList<String >baseAmtListArray=new ArrayList<>();
for (int i = 0; i < baseAmtListCount; i++) 
{
	String data=baseAmtList.get(i).getText();
	baseAmtListArray.add(data);
}

String actbaseAmtList=baseAmtListArray.toString();
String expbaseAmtList="[, OpeBal:2 (Y0), 20, 20]";

System.out.println(" baseAmtList Actual : "+actbaseAmtList);
System.out.println(" baseAmtList Exp    : "+expbaseAmtList);

System.out.println(" Right SIde Elements *****************************************************************************");

System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

boolean savingVoucher=checkVoucherSavingMessage(docno);


    
    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
		     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo)&& 
		     
		     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
				actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
				actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
				actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
				actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
				actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
				actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
				actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
				actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
				actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick))
	        
		{
			System.err.println("Recepits VAT Voucher Saved With Semi Adjustment  ");
			return true;
		}
		else
		{
			System.err.println("Recepits VAT Voucher Saved With Semi Adjustment ");
			return false;
		}

}






//Debit Notes VAT 

public boolean checkSavingVoucherInDebitNotesVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException

{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finTransJournalsMenu));
	finTransJournalsMenu.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitNotesVatMenu));
	debitNotesVatMenu.click();
	
	Thread.sleep(2000);
	
	checkDeleteLinkStatus();
	
	Thread.sleep(2000);
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
	
	checkUserFriendlyMessage();
	
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
	toggleBtn.click();
	
	Thread.sleep(1000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingBtn));
	settingBtn.click();

	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingMiscellaneousTab));
	settingMiscellaneousTab.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscAddCurrencyDropdown));
    Select Currency=new Select(miscAddCurrencyDropdown);
    Currency.selectByVisibleText("Header");
    
    if(miscInputExchangeRateChkbox.isSelected()==false && miscInputLocalExchangeRateChkbox.isSelected()==false)
    {
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscInputExchangeRateChkbox));
        miscInputExchangeRateChkbox.click();
        
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscInputLocalExchangeRateChkbox));
	    miscInputLocalExchangeRateChkbox.click();
    }
   
	Thread.sleep(2000);
    
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingUpdateIcon));
    settingUpdateIcon.click();
    
   
    String actUpdateMessage = checkValidationMessage("Data saved successfully");
    
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingCloseIcon));
	settingCloseIcon.click();

	Thread.sleep(2000);
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
	
	checkUserFriendlyMessage();
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	customerAccountTxt.click();
	customerAccountTxt.sendKeys("Vendor New Reference");
	
	Thread.sleep(3000);
	customerAccountTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	departmentTxt.click();
	departmentTxt.sendKeys(Keys.SPACE);
	
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
	
	for(int i=0 ; i < departmentcount ;i++)
	{
		String depdata=departmentListCount.get(i).getText();
		
		if(depdata.equalsIgnoreCase("Dubai"))
		{
			departmentListCount.get(i).click();
			
			break;
		}
	}	
		
	departmentTxt.sendKeys(Keys.TAB);
	

  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
  PDRVATPlaceOfSupplyTXt.click();

  PDRVATPlaceOfSupplyTXt.sendKeys("Abu Dhabi");
  
  Thread.sleep(2000);
  PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVAT_JuridictionTxt));
  PDRVAT_JuridictionTxt.click();

 /* PDRVAT_JuridictionTxt.sendKeys("Dubai");*/

  Thread.sleep(2000);
  PDRVAT_JuridictionTxt.sendKeys(Keys.TAB);
 
  Thread.sleep(2000);
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	enter_AccountTxt.click();
	enter_AccountTxt.sendKeys(Keys.END);
	enter_AccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	enter_AccountTxt.sendKeys(Keys.SPACE);
	
	Thread.sleep(2000);
		
	int dbaccountCount1=accountListCount.size();
	
	System.err.println(dbaccountCount1);
	
	for(int i=0 ; i < dbaccountCount1 ;i++)
	{
		String data=accountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Bank"))
		{
			accountListCount.get(i).click();
				
			break;
		}
	}
		
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	if (select1stRow_1stColumn.getText().equalsIgnoreCase("Bank")==false) 
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys(Keys.END);
		Thread.sleep(1000);
		enter_AccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(1000);
		enter_AccountTxt.sendKeys("Bank");
		Thread.sleep(3000);
		enter_AccountTxt.sendKeys(Keys.TAB);
	}

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterDebitVATTaxCode));
	
	enterDebitVATTaxCode.sendKeys(Keys.TAB);
  
  
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
    enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
    enter_Amount.sendKeys("10");
	enter_Amount.sendKeys(Keys.TAB);
	
	
	String docno=documentNumberTxt.getAttribute("value");
	
	Thread.sleep(1999);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MRsaveBtn));
	MRsaveBtn.click();
  
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	
	String actPartyName = billRefPartyName.getText();
	String expPartyName = "Vendor New Reference (Vendor New Reference)";

	
	System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
	   
	int Adjustbills=billRefAdjustBillsGrid.size();

	String actAdjustbills=Integer.toString(Adjustbills);

	String expAdjustbills="2";


System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "10.00";
String expBillBaseCurrency                      = "10.00";
String expBillLocalCurrency                     = "0.70";
String expBillBalanceNewRefAmount               = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "10.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();

HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();

for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
{
	String data		                              = billwiseAdjustBillsDocList.get(i).getText();
	actbillwiseAdjustBillsDocList.add(data);
	
	if (data.equalsIgnoreCase("NDT52:1")) 
	{
		billwiseAdjustBillsChkBoxList.get(i).click();
	}
}

String actDocumentNumberTextRow2=actbillwiseAdjustBillsDocList.toString();

String expDocumentNumberTextRow2="[OpeBal:1, NDT52:1]";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefPickIcon.click();


String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "10";
String expBillBaseCurrencyPick                          = "10"; 
String expBillLocalCurrencyPick                         = "0.70";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "10.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);



String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

	
String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
	
String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

String expbreakUpDetailsAccountPick             ="STD RATE COGS ACC INV";
String expbreakUpDetailsItemPick                ="STD RATE COGS ITEM";
String expbreakUpDetailsDepartmentPick          ="DUBAI";
	
String expasOnEntryDateTransAmtPick             ="105.00";
String expasOnEntryDateBaseConcersationRatePick ="1";
String expasOnEntryDateBaseAmountPick           ="105.00";
String expasOnEntryDateLocConversationRatePick  ="0.07";
String expasOnEntryDateAmtPick                  ="7.35";
	
String expbalOnAdjstDateTransAmtPick            ="105.00";
String expbalOnAdjstDateBasrConversionRatePick  ="1";
String expbalOnAdjstDateBaseAmountPick          ="105.00";
String expbalOnAdjstDateLocalConversionRatePick ="0.07";
String expbalOnAdjstDateAmtPick                 ="7.35";

String expadjustmentsAmount1Pick                ="10.00";
String expadjustmentsAmount2Pick                ="10.00";
String expadjustmentsAmount3Pick                ="0.70";
String expadjustmentsAmount4Pick                ="10.00";
	
String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
String expexchangeGainLossForLocalCurrencyPick  ="0.00";

System.out.println(" Right SIde Elements *****************************************************************************");

System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);


    if (   savingVoucher==true  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && 
    		actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
    		actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			
			
    		
		     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
				actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
				actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
				actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
				actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
				actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
				actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
				actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
				actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
				actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick))
	        
		{
			System.err.println("Test Pass: Voucher Saved in debit notes VAT ");
			return true;
		}
		else
		{
			System.err.println("Test FAIL: Voucher Saved in debit notes VAT ");
			return false;
		}

	
}


public boolean checkSavingVoucherInDebitNotesVATWithVendorSemiAdjustment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException

{
	
	System.out.println("*********************checkSavingVoucherInDebitNotesVATWithVendorSemiAdjustment****************");
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	customerAccountTxt.click();
	customerAccountTxt.sendKeys("Vendor Semi Adjustment");
	
	Thread.sleep(3000);
	customerAccountTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	departmentTxt.click();
	departmentTxt.sendKeys(Keys.SPACE);
	
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
	
	for(int i=0 ; i < departmentcount ;i++)
	{
		String depdata=departmentListCount.get(i).getText();
		
		if(depdata.equalsIgnoreCase("Dubai"))
		{
			departmentListCount.get(i).click();
			
			break;
		}
	}	
		
  departmentTxt.sendKeys(Keys.TAB);
	

  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
  PDRVATPlaceOfSupplyTXt.click();

  PDRVATPlaceOfSupplyTXt.sendKeys("Abu Dhabi");
  
  Thread.sleep(2000);
  PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVAT_JuridictionTxt));
  PDRVAT_JuridictionTxt.click();

 /* PDRVAT_JuridictionTxt.sendKeys("Dubai");*/

  Thread.sleep(2000);
  PDRVAT_JuridictionTxt.sendKeys(Keys.TAB);
 
  Thread.sleep(2000);
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	enter_AccountTxt.click();
	enter_AccountTxt.sendKeys(Keys.END);
	enter_AccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	enter_AccountTxt.sendKeys(Keys.SPACE);
	
	Thread.sleep(2000);
		
	int dbaccountCount1=accountListCount.size();
	
	System.err.println(dbaccountCount1);
	
	for(int i=0 ; i < dbaccountCount1 ;i++)
	{
		String data=accountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Bank"))
		{
			accountListCount.get(i).click();
				
			break;
		}
	}
		
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	if (select1stRow_1stColumn.getText().equalsIgnoreCase("Bank")==false) 
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys(Keys.END);
		Thread.sleep(1000);
		enter_AccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(1000);
		enter_AccountTxt.sendKeys("Bank");
		Thread.sleep(3000);
		enter_AccountTxt.sendKeys(Keys.TAB);
	}

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterDebitVATTaxCode));
	
	enterDebitVATTaxCode.sendKeys(Keys.TAB);
  
  
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
    enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
    enter_Amount.sendKeys("50");
	enter_Amount.sendKeys(Keys.TAB);
	
	
	String docno=documentNumberTxt.getAttribute("value");
	
	Thread.sleep(1999);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MRsaveBtn));
	MRsaveBtn.click();
  
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	
	String actPartyName = billRefPartyName.getText();
	String expPartyName = "Vendor Semi Adjustment (VendorSemiAdjustment";

	 
	System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
	   
	int Adjustbills=billRefAdjustBillsGrid.size();

	String actAdjustbills=Integer.toString(Adjustbills);

	String expAdjustbills="2";

	 
	System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

	String expBillNewReference                      = "0.00";
	String expBillTransactionCurrency               = "50.00";
	String expBillBaseCurrency                      = "50.00";
	String expBillLocalCurrency                     = "3.50";
	String expBillBalanceNewRefAmount              = "0.00";

	String expbillRefAdjustAmountInTransCurency         = "0.00";
	String expbillRefBalanceAmountAdjustInTrnasCurrency = "50.00";



	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
	String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
	String actBillBaseCurrency                           = billRefBaseCurrency.getText();
	String actBillLocalCurrency                          = localCurrencyDhs.getText();
	String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
	String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
	String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


	String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
	String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


	String expconversationRateBaseCurrencyRatePick  = "1";
	String expconversationRateLocalCurrencyRatePick = "0.07";

	int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();

	HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();

	for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
	{
		String data		                              = billwiseAdjustBillsDocList.get(i).getText();
		actbillwiseAdjustBillsDocList.add(data);
		
		if (data.equalsIgnoreCase("NDT52:2")) 
		{
			billwiseAdjustBillsChkBoxList.get(i).click();
		}
	}

	String actDocumentNumberTextRow2=actbillwiseAdjustBillsDocList.toString();

	String expDocumentNumberTextRow2="[OpeBal:1, NDT52:2]";


	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
	billRefPickIcon.click();



	String expBillNewReferencePick                          = "0.00";
	String expBillTransactionCurrencyPick                   = "50";
	String expBillBaseCurrencyPick                          = "50"; 
	String expBillLocalCurrencyPick                         = "3.50";
	String expBillBalanceNewRefAmountPick                   = "0.00";
	String expbillRefAdjustAmountInTransCurencyPick         = "50.00";
	String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
	 
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	      
	String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
	String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
	String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
	String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
	String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
	String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
	String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


	   
	System.out.println("*********************************************************************************************************");

	System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
	System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
	System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
	System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
	System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
	System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
	   
	System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
	System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

	   
	   //////Pick

	System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
	System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
	System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
	System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
	System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
	System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
	System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

	System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
	System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
	billRefOkBtn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	 


	boolean savingVoucher=checkVoucherSavingMessage(docno);


	    
	    if (    actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
		        
	    		
		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
				actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
				actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick))
		        
			{
				System.err.println(" Test Pass:  Debit Notes With New Reference ");
				return true;
			}
			else
			{
				System.err.println(" Test Fail:  Debit Notes With New Reference ");
				return false;
			}

	}



public boolean checkSavingVoucherInDebitNotesVATWithCustomerNewReference() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException

{
	
	Thread.sleep(1999);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	customerAccountTxt.click();
	customerAccountTxt.sendKeys("Customer New Reference");
	
	Thread.sleep(3000);
	customerAccountTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	departmentTxt.click();
	departmentTxt.sendKeys(Keys.SPACE);
	
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
	
	for(int i=0 ; i < departmentcount ;i++)
	{
		String depdata=departmentListCount.get(i).getText();
		
		if(depdata.equalsIgnoreCase("Dubai"))
		{
			departmentListCount.get(i).click();
			
			break;
		}
	}	
		
	departmentTxt.sendKeys(Keys.TAB);
	

  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
  PDRVATPlaceOfSupplyTXt.click();

  PDRVATPlaceOfSupplyTXt.sendKeys("Abu Dhabi");
  
  Thread.sleep(2000);
  PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVAT_JuridictionTxt));
  PDRVAT_JuridictionTxt.click();

  /*PDRVAT_JuridictionTxt.sendKeys("Dubai");*/

  Thread.sleep(2000);
  PDRVAT_JuridictionTxt.sendKeys(Keys.TAB);
 
  Thread.sleep(2000);
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	enter_AccountTxt.click();
	enter_AccountTxt.sendKeys(Keys.END);
	enter_AccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	enter_AccountTxt.sendKeys(Keys.SPACE);
	
	Thread.sleep(2000);
		
	int dbaccountCount1=accountListCount.size();
	
	System.err.println(dbaccountCount1);
	
	for(int i=0 ; i < dbaccountCount1 ;i++)
	{
		String data=accountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Bank"))
		{
			accountListCount.get(i).click();
				
			break;
		}
	}
		
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	if (select1stRow_1stColumn.getText().equalsIgnoreCase("Bank")==false) 
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys(Keys.END);
		Thread.sleep(1000);
		enter_AccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(1000);
		enter_AccountTxt.sendKeys("Bank");
		Thread.sleep(3000);
		enter_AccountTxt.sendKeys(Keys.TAB);
	}

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterDebitVATTaxCode));
	
	enterDebitVATTaxCode.sendKeys(Keys.TAB);
  
  
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
    enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
    enter_Amount.sendKeys("10");
	enter_Amount.sendKeys(Keys.TAB);
	
	
	String docno=documentNumberTxt.getAttribute("value");
	
	Thread.sleep(1999);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(MRsaveBtn));
	MRsaveBtn.click();
	Thread.sleep(2999);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	
	String actPartyName = billRefPartyName.getText();
	String expPartyName = "Customer New Reference (Customer New Reference)";

	
	System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
	   
	int Adjustbills=billRefAdjustBillsGrid.size();

	String actAdjustbills=Integer.toString(Adjustbills);

	String expAdjustbills="2";


System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "10.00";
String expBillBaseCurrency                      = "10.00";
String expBillLocalCurrency                     = "0.70";
String expBillBalanceNewRefAmount               = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "10.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";

 
int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();

HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();

for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
{
	String data		                              = billwiseAdjustBillsDocList.get(i).getText();
	actbillwiseAdjustBillsDocList.add(data);
	
	if (data.equalsIgnoreCase("OpeBal:1")) 
	{
		billwiseAdjustBillsChkBoxList.get(i).click();
	}
}

String actDocumentNumberTextRow2=actbillwiseAdjustBillsDocList.toString();

String expDocumentNumberTextRow2="[OpeBal:1, NDT57:1]";

System.out.println("actDocumentNumberTextRow2   : "+actDocumentNumberTextRow2);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefPickIcon.click();
Thread.sleep(2000);
String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "10";
String expBillBaseCurrencyPick                          = "10"; 
String expBillLocalCurrencyPick                         = "0.70";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "10.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);



String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

	
String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
	
String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

String expbreakUpDetailsAccountPick              ="OBC";
String expbreakUpDetailsDepartmentPick           ="DUBAI";
	
String expasOnEntryDateTransAmtPick             ="100.00";
String expasOnEntryDateBaseConcersationRatePick ="1";
String expasOnEntryDateBaseAmountPick           ="100.00";
String expasOnEntryDateLocConversationRatePick  ="0.11";
String expasOnEntryDateAmtPick                  ="11.00";
	
String expbalOnAdjstDateTransAmtPick            ="30.00";
String expbalOnAdjstDateBasrConversionRatePick  ="1";
String expbalOnAdjstDateBaseAmountPick          ="30.00";
String expbalOnAdjstDateLocalConversionRatePick ="0.07";
String expbalOnAdjstDateAmtPick                 ="2.10";

String expadjustmentsAmount1Pick                ="10.00";
String expadjustmentsAmount2Pick                ="10.00";
String expadjustmentsAmount3Pick                ="0.70";
String expadjustmentsAmount4Pick                ="10.00";
	
String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
String expexchangeGainLossForLocalCurrencyPick  ="0.40";

int baseAmtListCount=baseAmtList.size();

ArrayList<String >baseAmtListArray=new ArrayList<>();
for (int i = 0; i < baseAmtListCount; i++) 
{
	String data=baseAmtList.get(i).getText();
	baseAmtListArray.add(data);
}

String actbaseAmtList=baseAmtListArray.toString();
String expbaseAmtList="[, NDT58:7 (Y0), 10, 10]";

System.out.println(" baseAmtList Actual : "+actbaseAmtList);
System.out.println(" baseAmtList Exp    : "+expbaseAmtList);

System.out.println(" Right SIde Elements *****************************************************************************");

System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);


    if (   savingVoucher==true && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && 
    		actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
    		actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			
			
    		
		     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
				actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
				actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
				actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
				actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
				actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
				actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
				actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
				actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
				actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick))
	        
		{
			System.err.println("Test Pass: Voucher Saved in debit notes VAT With Customer New Referece ");
			return true;
		}
		else
		{
			System.err.println("Test FAIL: Voucher Saved in debit notes VAT With Customer New Referece");
			return false;
		}

	
}




public boolean checkSavingPaymentsAfterSavingCreditNotes() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{
	Thread.sleep(3000);
	getDriver().navigate().refresh();
	
	System.err.println(" Entered   ************************");

	Thread.sleep(3000);

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();


	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();

	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
		
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsVoucher));
	paymentsVATVoucher.click();
		
	Thread.sleep(2000);
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
		
	Thread.sleep(2000);
		
Thread.sleep(2000);
	
Thread.sleep(2000);
getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
documentNumberTxt.click();

getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
newCashBankAccountTxt.click();

newCashBankAccountTxt.sendKeys(Keys.SPACE);


int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
  
System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
{
	String data		  = cashAndBAnkAccountList.get(i).getText();
	
	if(data.equalsIgnoreCase("bank"))
	{
		cashAndBAnkAccountList.get(i).click();
		
		break;
	}
}

newCashBankAccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
voucherHeaderCurrency.click();;
voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);

voucherHeaderCurrency.sendKeys(Keys.SPACE);

int currencycount=currencyListCount.size();

System.err.println(currencycount);
	
for(int i=0 ; i < currencycount ;i++)
{
	String data=currencyListCount.get(i).getText();
	
	if(data.equalsIgnoreCase("INR"))
	{
		currencyListCount.get(i).click();
		
		break;
	}
}
	
voucherHeaderCurrency.sendKeys(Keys.TAB);

Thread.sleep(2000);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
PDRVATPlaceOfSupplyTXt.click();

PDRVATPlaceOfSupplyTXt.sendKeys("Dubai");

Thread.sleep(2000);
PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);



Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
departmentTxt.click();
departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
departmentTxt.sendKeys(Keys.SPACE);

   
WebElement options=departmentTxt;

int departmentListCountCount=departmentListCount.size();

 for (int i = 0; i < departmentListCountCount; i++) 
 {
	String data=departmentListCount.get(i).getText();
	
	if (data.equalsIgnoreCase("Dubai"))
	{
		departmentListCount.get(i).click();
		break;
	}
 }

 departmentTxt.sendKeys(Keys.TAB);

 
//First Row

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
select1stRow_1stColumn.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
enter_AccountTxt.click();
enter_AccountTxt.sendKeys("Vendor Full Adjustment");


getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
int accountCount=bodyAccountListInGrid.size();

System.err.println(accountCount);
	
for(int i=0 ; i < accountCount ;i++)
{
	String data=bodyAccountListInGrid.get(i).getText();
	
	
	if(data.equalsIgnoreCase("Vendor Full Adjustment"))
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOfAllElements(bodyAccountListInGrid));
		bodyAccountListInGrid.get(i).click();
		
		break;
	}
}



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));	
enter_AccountTxt.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterpayVATTaxCode));	
Thread.sleep(1999);
enterpayVATTaxCode.sendKeys(Keys.TAB);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
enter_Amount.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
enter_Amount.sendKeys("10");
Thread.sleep(1999);
enter_Amount.sendKeys(Keys.TAB);

Thread.sleep(2000);

String docno=documentNumberTxt.getAttribute("value");

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
saveBtn.click();

Thread.sleep(2000);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
String actPartyName = billRefPartyName.getText();
String expPartyName = "Vendor Full Adjustment (Vendor Full Adjustment)";

 
System.out.println("Bill wise Screen Cutomer Name :"+ actPartyName + ":Value Expected  :" + expPartyName);
   
int Adjustbills=billRefAdjustBillsGrid.size();

String actAdjustbills=Integer.toString(Adjustbills);

String expAdjustbills="2";

 
System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "10.00";
String expBillBaseCurrency                      = "10.00";
String expBillLocalCurrency                     = "0.70";
String expBillBalanceNewRefAmount              = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "10.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills2ndChkbox));
billrefAdjuBills2ndChkbox.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
billRefPickIcon.click();


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow2));
String actgridOrginalAmtRow1     = gridOrginalAmtRow2.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow2.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow2.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow2DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="90.00";
String expgridAdjustmentAmtRow1   ="10.00";
String expgridAdjustmentBillsRow1DocNo  = "NDT60:3";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);




String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "10";
String expBillBaseCurrencyPick                          = "10"; 
String expBillLocalCurrencyPick                         = "0.70";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "10.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrencyPick+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrencyPick);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);



if (    actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
		actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
		actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
	     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
		actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
        
		
        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
		actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
		actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
		actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
		actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
		actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
		
		 actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) &&  actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
	     actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1) && actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo))
	        
		{
			System.err.println(" Test Pass: Payemnst VAT Saved With Adjustment Amount ");
			return true;
		}
		else
		{
			System.err.println("Test FAIl: Payemnst VAT Saved With Adjustment Amount ");
			return false;
		}

	
}



//PDC VOUCHERS 


@FindBy(xpath="//*[@id='16']/div/div")
private static WebElement  settingsMenu;  


@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
private static WebElement  settingsConfigureTransactions;

@FindBy(xpath="//a[@id='5']")
private static WebElement  PDCMenu;

@FindBy(xpath="//input[@id='chkPostDatedCheques']")
private static WebElement pdcPostDatedChequeChkbox;

@FindBy(xpath="//input[@id='chkAutoCheckMaturedPDC']")
private static WebElement pdcAutoCheckforMaturedChkbox ;

@FindBy(xpath="//input[@id='gphDisplayInLedger']")
private static WebElement pdcDisplayinLedgerChkbox;

@FindBy(xpath="//input[@id='chkReverseACPostPDCConversion']")
private static WebElement pdcReseverseAccountpostingOnPDCConversionChkbox;

@FindBy(xpath="//input[@id='PDCDiscountedAccount']")
private static WebElement pdcCheckDiscountingTxt;

@FindBy(xpath="//input[@id='PDCDiscountedVoucherType']")
private static WebElement pdcChequeDiscountingVoucherType;

;

@FindBy(xpath="//a[@id='5']")
private static WebElement  PDCBtn;

@FindBy(xpath = "//input[@id='gphDisplayInLedger']")
public static WebElement displayLedgerAndBalanceChkbox;
	

@FindBy(xpath = "//input[@id='chkPostDatedCheques']")
public static WebElement postDatedChequeChkbox;



public boolean checkPDCOptionsUnderSettings() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{
	 
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
	 settingsMenu.click();
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsConfigureTransactions));
	 settingsConfigureTransactions.click();
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCBtn));
	 PDCBtn.click();
	 
	 
	 if (postDatedChequeChkbox.isSelected()==false)
	 {
		 postDatedChequeChkbox.click();
		
	 }
	 
	 
	 if (displayLedgerAndBalanceChkbox.isSelected()==true)
	 {
		
		 displayLedgerAndBalanceChkbox.click();
	 }
	 
	 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
	 updateBtn.click();
	 
	
	getWaitForAlert();
	
	getAlert().accept();
		
    String expValidationMessage="Data saved successfully";
		
	String actValidationMessage=checkValidationMessage(expValidationMessage);
					

	if (actValidationMessage.equalsIgnoreCase(expValidationMessage)) 
	{
		return true;
	}
	else 
	{

		return false;
	}
}






 @FindBy(xpath="//span[contains(text(),'Edit Layout')]")
	private static WebElement editLayoutTab;	
	
	@FindBy(xpath="//i[@class='icon-add icon-font7']")
	private static WebElement editLayoutAddFieldsBtn;
	
	@FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Caption']")
	private static WebElement  editLayoutCaptionTxt;
	
	@FindBy(xpath="//span[contains(text(),'Apply')]")
	private static WebElement editLayoutApplyBtn;  
	   
	
	@FindBy(xpath="//input[@id='id_header_67108998']")
	private static WebElement voucherHeaderPDCNOTxt; 
	
	@FindBy(xpath="//input[@id='id_header_67109001']")
	private static WebElement voucherPaymentsHeaderPDCNOTxt; 
	
	
	
	
	@FindBy(xpath="//*[@id='90']/span")
	private static WebElement  convertMaturedPDCs;
	
	@FindBy(xpath="//div[@class='navText']//span[contains(text(),'Convert Matured PDCs')]")
	private static WebElement  convertMaturedPDCsLabel;
	
	
	@FindBy(xpath="//span[contains(text(),'Auto Postings')]")
	private static WebElement  autoPostingMenu;
	
	@FindBy(xpath="//*[@id='90']//span[contains(text(),'Convert Matured PDCs')]")
	private static WebElement  convertMaturedPDCSMenu;
	
	@FindBy(xpath="//input[@id='start_date']")
	private static WebElement asOnDateTxt;
	
	@FindBy(xpath="//input[@id='chkReassign']")
	private static WebElement reassignChkbox;
	
	@FindBy(xpath="//input[@id='chkPostOnDate']")
	private static WebElement postOnDateChkbox;
	
	@FindBy(xpath="//input[@id='post_date']")
	private static WebElement postOnDateTxt;
	
	@FindBy(xpath="//input[@id='chkSelectAll']")
	private static WebElement gridSelectAllOption;
	
	@FindBy(xpath="//input[@id='chkColumn']")
	private static WebElement gridSelectAllCOl;
	
	
	
	@FindBy(xpath="//input[@id='chkSelect1']")
	private static WebElement gridSelectRow1Chkbox;
	
	@FindBy(xpath="//input[@id='chkSelect3']")
	private static WebElement gridSelectRow3Chkbox;
	
	
	@FindBy(xpath="//input[@id='chkSelect2']")
	private static WebElement gridSelectRow2Chkbox;
	
	@FindBy(xpath="//input[@id='vNo1']")
	private static WebElement gridVoucherNoRow1Chkbox;
	
	@FindBy(xpath="//input[@id='vNo2']")
	private static WebElement gridVoucherNoRow2Chkbox;
	
	@FindBy(xpath="//input[@id='DateNo1']")
	private static WebElement gridVoucherDateRow1Chkbox;
	
	@FindBy(xpath="//input[@id='DateNo2']")
	private static WebElement gridVoucherDateRow2Chkbox;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-clear']")
	private static WebElement convertMaturedPDCsClearIcon;
	              
	@FindBy(xpath="//i[@class='icon-font6 icon-ok']")
	private static WebElement convertMaturedPDCsOkIcon;
	
	@FindBy(xpath="//span[@id='btnReportcancel']//i[@class='icon-cancel icon-font6']")
	private static WebElement convertMaturedPDCsCancelIcon;
	
	@FindBy(xpath="//div[contains(text(),'PDC Doc')]")
	private static WebElement gridPDCTxt;
	
	@FindBy(xpath="//div[contains(text(),'Converted Document')]")
	private static WebElement gridConvertedDocumentTxt;
	
	@FindBy(xpath="//div[contains(text(),'Bank')]")
	private static WebElement gridBankTxt;
	
	@FindBy(xpath="//th[@id='mytable_control_heading_7']//div[contains(text(),'Voucher No')]")
	private static WebElement gridVoucherNoTxt;
	
	@FindBy(xpath="//div[contains(text(),'Voucher Date')]")
	private static WebElement gridVoucherBodyTxt;
	
	@FindBy(xpath="//div[contains(text(),'Prefix')]")
	private static WebElement gridPrefixTxt;
	
	
	@FindBy(xpath="//input[@id='DepositingBank']")
	private static WebElement pdcVoucherDepositingBankDropdown;
	
	@FindBy(xpath="//input[@id='btnDepositingBank']")
	private static WebElement pdcVoucherApplyIcon;
	
	@FindBy(xpath="//i[@class='icon-custamize icon-font6']")
	private static WebElement pdcCustamizeIcon;
	
	@FindBy(xpath="//span[@id='btnOkToConvert']//i[@class='icon-font6 icon-ok']")
	private static WebElement pdcVoucherOkIcon;
	
	@FindBy(xpath="//span[@id='btnReportcancel']//i[@class='icon-close icon-font6']")
	private static WebElement pdcVoucherCancelIcon;
	
	@FindBy(xpath="//div[contains(text(),'Number')]")
	private static WebElement gridNumberTxt;
	
	@FindBy(xpath="//div[contains(text(),'Maturity Date')]")
	private static WebElement gridMatureDateTXt;
	
	@FindBy(xpath="//div[contains(text(),'Name')]")
	private static WebElement gridNameTxt;
	
	@FindBy(xpath="//div[contains(text(),'Applied Bank')]")
	private static WebElement gridAppliedBankTxt;
	
	@FindBy(xpath="//div[contains(text(),'Amount')]")
	private static WebElement gridAmountTxt;
	
	@FindBy(xpath="//div[contains(text(),'Reassigned V No')]")
	private static WebElement gridReassignesVoucherNoTxt;
	
	
	
	public boolean checkConvertedMaturePDCScreenWithNoPDCExists() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
	   	Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoPostingMenu));
		autoPostingMenu.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCSMenu));
		convertMaturedPDCSMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridSelectAllOption));
		gridSelectAllOption.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCsOkIcon));
		convertMaturedPDCsOkIcon.click();
		

       String expValidationMessage="No PDC's exists";
		
		String actValidationMessage=checkValidationMessage(expValidationMessage);
					
       if( actValidationMessage.equalsIgnoreCase(expValidationMessage) )
		
		{
			System.out.println(" **********Pass: Displayed PDC Vouchers Home Page");
			System.out.println(" **********As No Post Dated  Receipt Voucher Is Not Created ");
			pdcVoucherCancelIcon.click();
			return true;
		}
		else
		{
			System.err.println("---------------------- Fail:  Not Displayed PDC Vouchers Home Page");
			pdcVoucherCancelIcon.click();
			return false;
		}
	 }
	


	//Post Dated Recepits 

		@FindBy(xpath="//*[@id='chkColumn_1']")
		private static WebElement pdcGridRow1Chkbox;
		
		@FindBy(xpath="//td[@id='mainTable_col_1-3']")
		private static WebElement pdcGridRow1Col3;
		
		@FindBy(xpath="//td[@id='mainTable_col_1-4']")
		private static WebElement pdcGridRow1Col4;
		
		@FindBy(xpath="//td[@id='mainTable_col_1-5']")
		private static WebElement pdcGridRow1Col5;
		
		@FindBy(xpath="//td[@id='mainTable_col_1-6']")
		private static WebElement pdcGridRow1Col6;
		
		@FindBy(xpath="//td[@id='mainTable_col_1-7']")
		private static WebElement pdcGridRow1Col7;
		
		@FindBy(xpath="//td[@id='mainTable_col_1-8']")
		private static WebElement pdcGridRow1Col8 ;
		
		@FindBy(xpath="//td[@id='mainTable_col_1-10']")
		private static WebElement pdcGridRow1Col9 ;
		
		
		
		
		@FindBy(xpath="//input[@id='chkColumn_2']")
		private static WebElement pdcGridRow2Chkbox;
		
		@FindBy(xpath="//td[@id='mainTable_col_2-3']")
		private static WebElement pdcGridRow2Col3;
		
		@FindBy(xpath="//td[@id='mainTable_col_2-4']")
		private static WebElement pdcGridRow2Col4;
		
		@FindBy(xpath="//td[@id='mainTable_col_2-5']")
		private static WebElement pdcGridRow2Col5;
		
		@FindBy(xpath="//td[@id='mainTable_col_2-6']")
		private static WebElement pdcGridRow2Col6;
		
		@FindBy(xpath="//td[@id='mainTable_col_2-7']")
		private static WebElement pdcGridRow2Col7;
		
		@FindBy(xpath="//td[@id='mainTable_col_2-8']")
		private static WebElement pdcGridRow2Col8 ;
		
		@FindBy(xpath="//td[@id='mainTable_col_2-10']")
		private static WebElement pdcGridRow2Col9 ;
		
		
		@FindBy(xpath="//input[@id='chkColumn_3']")
		private static WebElement pdcGridRow3Chkbox;
		
		@FindBy(xpath="//td[@id='mainTable_col_3-3']")
		private static WebElement pdcGridRow3Col3;
		
		@FindBy(xpath="//td[@id='mainTable_col_3-4']")
		private static WebElement pdcGridRow3Col4;
		
		@FindBy(xpath="//td[@id='mainTable_col_3-5']")
		private static WebElement pdcGridRow3Col5;
		
		@FindBy(xpath="//td[@id='mainTable_col_3-6']")
		private static WebElement pdcGridRow3Col6;
		
		@FindBy(xpath="//td[@id='mainTable_col_3-7']")
		private static WebElement pdcGridRow3Col7;
		
		@FindBy(xpath="//td[@id='mainTable_col_3-8']")
		private static WebElement pdcGridRow3Col8 ;
		
		@FindBy(xpath="//td[@id='mainTable_col_3-10']")
		private static WebElement pdcGridRow3Col9 ;
		
		
		@FindBy(xpath="//input[@id='chkColumn_4']")
		private static WebElement pdcGridRow4Chkbox;
		
		@FindBy(xpath="//td[@id='mainTable_col_4-3']")
		private static WebElement pdcGridRow4Col3;
		
		@FindBy(xpath="//td[@id='mainTable_col_4-4']")
		private static WebElement pdcGridRow4Col4;
		
		@FindBy(xpath="//td[@id='mainTable_col_4-5']")
		private static WebElement pdcGridRow4Col5;
		
		@FindBy(xpath="//td[@id='mainTable_col_4-6']")
		private static WebElement pdcGridRow4Col6;
		
		@FindBy(xpath="//td[@id='mainTable_col_4-7']")
		private static WebElement pdcGridRow4Col7;
		
		@FindBy(xpath="//td[@id='mainTable_col_4-8']")
		private static WebElement pdcGridRow4Col8 ;
		
		@FindBy(xpath="//td[@id='mainTable_col_4-10']")
		private static WebElement pdcGridRow4Col9 ;

		@FindBy(xpath="//span[contains(text(),'PDR VAT')]")
		private static WebElement PDRVAT ;

		
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_5']//div[contains(text(),'Exchange Diff')]")
	private static WebElement  gridExchangeDiffTxt;
	
	@FindBy(xpath="//div[contains(text(),'Local Exchange Diff')]")
	private static WebElement  gridLocalExchangeDiff;
	
	@FindBy(xpath="//div[contains(text(),'Account')]")
	private static WebElement gridAccTxt;
	
	@FindBy(xpath="//div[contains(text(),'Amount')]")
	private static WebElement gridAmtTxt;
	
	
	@FindBy(xpath="//div[contains(text(),'Reference')]")
	private static WebElement gridReferenceTxt;
	
	@FindBy(xpath="//div[contains(text(),'Remarks')]")
	private static WebElement vocbodyRemarksTxt;
	
	@FindBy(xpath="//div[contains(text(),'Tax Code')]")
	private static WebElement vocbodyTaxCodeTxt;
	
	
	@FindBy(xpath="//div[contains(text(),'VAT')]")
	private static WebElement vocbodyVATTxt;
	
   @FindBy(xpath="//div[contains(text(),'Amount')]")
   private static WebElement vocBodyAmountTxt;

   @FindBy(xpath="//div[contains(text(),'Remarks')]")
   private static WebElement vocBodyRemarksTxt;
   
	@FindBy(xpath="//div[contains(text(),'Account')]")
	private static WebElement vocBodyAccTxt;
	
	@FindBy(xpath="//div[contains(text(),'Debit')]")
	private static WebElement vocBodyDebitTxt;
	
	@FindBy(xpath="//div[contains(text(),'Credit')]")
	private static WebElement vocBodyCreditTxt;

	@FindBy(xpath="//div[contains(text(),'Reference')]")
	private static WebElement vocBodyReferenceTxt; 	
		
	@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
	private static List<WebElement> wareHouseListCount;
		
	
	
	@FindBy(xpath="//*[@id='id_header_268435470_table_body']/tr/td[2]")
    private static List<WebElement> placeOfSupplyList;
	

	@FindBy(xpath="//*[@id='id_header_268435471_table_body']/tr/td[2]")
    private static List<WebElement> jurdictionList;
	

	//PostDatedReceipts
	
			
public boolean checkSavingVoucherToPostDatedReceipts() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		
     Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVAT));
	PDRVAT.click();
		
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
	
	checkUserFriendlyMessage();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
    documentNumberTxt.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
    newCashBankAccountTxt.click();
	
	newCashBankAccountTxt.sendKeys(Keys.SPACE);
	
    int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
	
	for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
	{
		String data		  = cashAndBAnkAccountList.get(i).getText();
		
		if(data.equalsIgnoreCase("Bank"))
		{
			cashAndBAnkAccountList.get(i).click();
			
			break;
		}
	}
	
	newCashBankAccountTxt.sendKeys(Keys.TAB);
	

    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	
	departmentTxt.sendKeys(Keys.SPACE);

	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			departmentListCount.get(i).click();
			
			break;
		}
	}
		
	departmentTxt.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
	PDRVATPlaceOfSupplyTXt.click();
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.END);
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.SHIFT,Keys.HOME);
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.SPACE);
	
	int placeOfSupplyListCount=placeOfSupplyList.size();
	
	for (int j = 0; j < placeOfSupplyListCount; j++) 
	{
		String data=placeOfSupplyList.get(j).getText();
		
		if (data.equalsIgnoreCase("Abu Dhabi"))
		{
			placeOfSupplyList.get(j).click();
			
		}
		
	}
	
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);
	
	PDRVAT_JuridictionTxt.sendKeys(Keys.END);
	PDRVAT_JuridictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	
	PDRVAT_JuridictionTxt.sendKeys(Keys.SPACE);
	
    int jurdictionListCount=jurdictionList.size();
	
	for (int k = 0; k < jurdictionListCount; k++) 
	{
		String data=jurdictionList.get(k).getText();
		
		if (data.equalsIgnoreCase("Abu Dhabi"))
		{
			jurdictionList.get(k).click();
			
		}
		
	}
	PDRVAT_JuridictionTxt.sendKeys(Keys.TAB);

		
		
    Thread.sleep(2000);
    
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	enter_AccountTxt.click();
	enter_AccountTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	enter_AccountTxt.sendKeys(Keys.SPACE);
	enter_AccountTxt.sendKeys("Customer New");
	Thread.sleep(2000);
	/*int accountCount=accountListCount.size();
	
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=accountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Customer New Reference"))
		{
			accountListCount.get(i).click();
			
			break;
		}
	}
		*/
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	enterTaxcode.click();
	enterTaxcode.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	enterTaxcode.sendKeys("STD");
	Thread.sleep(2000);
		
	enterTaxcode.sendKeys(Keys.TAB);
	
	enter_Amount.click();
	enter_Amount.clear();
	enter_Amount.sendKeys("50");
	enter_Amount.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
    String docno=documentNumberTxt.getAttribute("value");
    
    Thread.sleep(2000);
    
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	saveBtn.click();
	
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
    String actPartyName = billRefPartyName.getText();
    String expPartyName = "Customer New Reference (Customer New Reference)";
    
	System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
	
	
	
	int Adjustbills=billRefAdjustBillsGrid.size();

	String actAdjustbills=Integer.toString(Adjustbills);

	String expAdjustbills="2";


System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "50.00";
String expBillBaseCurrency                      = "50.00";
String expBillLocalCurrency                     = "3.50";
String expBillBalanceNewRefAmount               = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "50.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";

 
int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();

HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();

for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
{
	String data		                              = billwiseAdjustBillsDocList.get(i).getText();
	actbillwiseAdjustBillsDocList.add(data);
	
	if (data.equalsIgnoreCase("NDT55:1")) 
	{
		billwiseAdjustBillsChkBoxList.get(i).click();
	}
}

String actDocumentNumberTextRow2=actbillwiseAdjustBillsDocList.toString();

String expDocumentNumberTextRow2="[NDT60:4, NDT55:1]";

System.out.println("actDocumentNumberTextRow2   : "+actDocumentNumberTextRow2);
System.out.println("expDocumentNumberTextRow2   : "+expDocumentNumberTextRow2);

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefPickIcon.click();
Thread.sleep(2000);
String expBillNewReferencePick                          = "0.00";
String expBillTransactionCurrencyPick                   = "50";
String expBillBaseCurrencyPick                          = "50"; 
String expBillLocalCurrencyPick                         = "3.50";
String expBillBalanceNewRefAmountPick                   = "0.00";
String expbillRefAdjustAmountInTransCurencyPick         = "50.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrencyPick);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);



String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

	
String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
	
String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

String expbreakUpDetailsAccountPick              ="071-001";
String expbreakUpDetailsItemPick                 ="STD RATE COGS ITEM";
String expbreakUpDetailsDepartmentPick           ="DUBAI";
	
String expasOnEntryDateTransAmtPick             ="100.00";
String expasOnEntryDateBaseConcersationRatePick ="1";
String expasOnEntryDateBaseAmountPick           ="100.00";
String expasOnEntryDateLocConversationRatePick  ="0.07";
String expasOnEntryDateAmtPick                  ="7.00";
	
String expbalOnAdjstDateTransAmtPick            ="100.00";
String expbalOnAdjstDateBasrConversionRatePick  ="1";
String expbalOnAdjstDateBaseAmountPick          ="100.00";
String expbalOnAdjstDateLocalConversionRatePick ="0.07";
String expbalOnAdjstDateAmtPick                 ="7.00";

String expadjustmentsAmount1Pick                ="50.00";
String expadjustmentsAmount2Pick                ="50.00";
String expadjustmentsAmount3Pick                ="3.50";
String expadjustmentsAmount4Pick                ="50.00";
	
String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
String expexchangeGainLossForLocalCurrencyPick  ="0.00";

System.out.println(" Right SIde Elements *****************************************************************************");

System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);


getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);


    if (   savingVoucher==true && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && 
    		actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
    		actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
			
			
    		
		     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
				actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
				actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
				actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
				actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
				actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
				actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
				actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
				actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
				actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick))
	        
		{
			System.err.println("Test Pass: Voucher Saved in Adjustment AMT from Recepits  ");
			return true;
		}
		else
		{
			System.err.println("Test Pass: Voucher Saved in Adjustment AMT from Recepits  ");
			return false;
		}
	
}

public boolean checkSavingVoucherToPostDatedReceiptsWithNewRefrence() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	
	System.out.println("***********************checkSavingVoucherToPostDatedReceiptsWithNewRefrence**********************************");
	
		
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
    documentNumberTxt.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
    newCashBankAccountTxt.click();
	
	newCashBankAccountTxt.sendKeys(Keys.SPACE);
	
    int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
	
	for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
	{
		String data		  = cashAndBAnkAccountList.get(i).getText();
		
		if(data.equalsIgnoreCase("Bank"))
		{
			cashAndBAnkAccountList.get(i).click();
			
			break;
		}
	}
	
	newCashBankAccountTxt.sendKeys(Keys.TAB);
	

    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	
	departmentTxt.sendKeys(Keys.SPACE);

	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("DUBAI"))
		{
			departmentListCount.get(i).click();
			
			break;
		}
	}
		
	departmentTxt.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVATPlaceOfSupplyTXt));
	PDRVATPlaceOfSupplyTXt.click();
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.END);
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.SHIFT,Keys.HOME);
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.SPACE);
	
	int placeOfSupplyListCount=placeOfSupplyList.size();
	
	for (int j = 0; j < placeOfSupplyListCount; j++) 
	{
		String data=placeOfSupplyList.get(j).getText();
		
		if (data.equalsIgnoreCase("Abu Dhabi"))
		{
			placeOfSupplyList.get(j).click();
			
		}
		
	}
	
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);
	
	PDRVAT_JuridictionTxt.sendKeys(Keys.END);
	PDRVAT_JuridictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	
	PDRVAT_JuridictionTxt.sendKeys(Keys.SPACE);
	
    int jurdictionListCount=jurdictionList.size();
	
	for (int k = 0; k < jurdictionListCount; k++) 
	{
		String data=jurdictionList.get(k).getText();
		
		if (data.equalsIgnoreCase("Abu Dhabi"))
		{
			jurdictionList.get(k).click();
			
		}
		
	}
	PDRVAT_JuridictionTxt.sendKeys(Keys.TAB);

		
		
    Thread.sleep(2000);
    
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	enter_AccountTxt.click();
	enter_AccountTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	enter_AccountTxt.sendKeys(Keys.SPACE);
	enter_AccountTxt.sendKeys("Vendor New");
	Thread.sleep(2000);
	/*int accountCount=accountListCount.size();
	
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=accountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Vendor New Reference"))
		{
			accountListCount.get(i).click();
			
			break;
		}
	}
		*/
	enter_AccountTxt.sendKeys(Keys.TAB);
	
	
	enterTaxcode.click();
	enterTaxcode.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	enterTaxcode.sendKeys("STD");
	Thread.sleep(2000);
		
	enterTaxcode.sendKeys(Keys.TAB);
	
	enter_Amount.click();
	enter_Amount.clear();
	enter_Amount.sendKeys("50");
	enter_Amount.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
    String docno=documentNumberTxt.getAttribute("value");
    
    Thread.sleep(2000);
    
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	saveBtn.click();
	
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
    String actPartyName = billRefPartyName.getText();
    String expPartyName = "Vendor New Reference (Vendor New Reference)";
    
	System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
	
	
	
	int Adjustbills=billRefAdjustBillsGrid.size();

	String actAdjustbills=Integer.toString(Adjustbills);

	String expAdjustbills="0";


System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);

String expBillNewReference                      = "0.00";
String expBillTransactionCurrency               = "50.00";
String expBillBaseCurrency                      = "50.00";
String expBillLocalCurrency                     = "3.50";
String expBillBalanceNewRefAmount               = "0.00";

String expbillRefAdjustAmountInTransCurency         = "0.00";
String expbillRefBalanceAmountAdjustInTrnasCurrency = "50.00";



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
String actBillBaseCurrency                           = billRefBaseCurrency.getText();
String actBillLocalCurrency                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();


String expconversationRateBaseCurrencyRatePick  = "1";
String expconversationRateLocalCurrencyRatePick = "0.07";

 

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
billRefNewReferenceTxt.click();

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefPickIcon.click();

Thread.sleep(2000);
String expBillNewReferencePick                          = "50.00";
String expBillTransactionCurrencyPick                   = "50.00";
String expBillBaseCurrencyPick                          = "50.00"; 
String expBillLocalCurrencyPick                         = "3.50";
String expBillBalanceNewRefAmountPick                   = "50.00";
String expbillRefAdjustAmountInTransCurencyPick         = "50.00";
String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
      
String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


   
System.out.println("*********************************************************************************************************");

System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
   
System.out.println("actbillRefAdjustAmountInTransCurency         :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);

   
   //////Pick

System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrency+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrencyPick);
System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);



getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);


    if (   savingVoucher==true && actAdjustbills.equalsIgnoreCase(expAdjustbills)  && 
    		actBillNewReference.equalsIgnoreCase(expBillNewReference) &&
    		actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
			actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
			actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
		     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
			actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   
	        
    		
	        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
			actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
			actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
			actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
			actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
			actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick)  && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick))
	        
		{
			System.err.println("Test Pass: Voucher Saved in New RefAMT from Recepits  ");
			return true;
		}
		else
		{
			System.err.println("Test Pass: Voucher Saved in New RefAMT from Recepits  ");
			return false;
		}
	
}





@FindBy(xpath="//*[@id='mytable_body']/tr/td[3]")
private static List<WebElement> pdcCheckBoxlist;

@FindBy(xpath="//*[@id='mytable_body']/tr/td[4]")
private static List<WebElement> pdcDOClist;

@FindBy(xpath="//*[@id='mytable_body']/tr/td[6]")
private static List<WebElement> pdcBanklist;





	public boolean checkSavedVouchersInPDCVoucherScreenWithOutPostOnDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
	
	    Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoPostingMenu));
		autoPostingMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCSMenu));
		convertMaturedPDCSMenu.click();
		
		int pdcDOClistCount=pdcDOClist.size();
		
		for (int i = 0; i < pdcDOClistCount; i++) 
		{
			
			String data=pdcDOClist.get(i).getText();
			if (data.equalsIgnoreCase("PDR VAT"))
			{
				pdcCheckBoxlist.get(i).click();
				
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCsOkIcon));
		convertMaturedPDCsOkIcon.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Chkbox));
		pdcGridRow1Chkbox.click();
		
		Thread.sleep(2000);
		String actNumber=pdcGridRow1Col3.getText();
		String expNumber="2";
		
		
		
		String actMaturityDate=pdcGridRow1Col4.getText();
		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
	    Date date=new Date();
	    String CurrentDate=df.format(date);
		String expMaturityDate=CurrentDate;
		
		
		
		String actName=pdcGridRow1Col5.getText();
		String expName="Bank";
		
		
		String actAmount=pdcGridRow1Col7.getText();
		String expAmount="50.00";

		String actReassignedVouNo=pdcGridRow1Col8.getText();
		String expReassignedVouNo="2";
		
		

		String actMaturityDate2=pdcGridRow2Col4.getText();
		DateFormat df2 = new SimpleDateFormat("dd-MM-yyyy");
	    Date date2=new Date();
	    String CurrentDate2=df2.format(date2);
		String expMaturityDate2=CurrentDate2;
		
		
		String actNumber2=pdcGridRow2Col3.getText();
		String expNumber2="1";
		
	
		String actName2=pdcGridRow2Col5.getText();
		String expName2="Bank";
		
		
		String actAmount2=pdcGridRow2Col7.getText();
		String expAmount2="50.00";

		String actReassignedVouNo2=pdcGridRow2Col8.getText();
		String expReassignedVouNo2="1";
		
		
		System.out.println("******************checkSavedVouchersInPDCVoucherScreenWithOUTPostOnDate********************************");
		System.out.println(" Number         : "+actNumber           +" Value Expected  : "+expNumber);
		System.out.println("Name            : "+actName             +" Value Expected  : "+expName);
		System.out.println("Amount          : "+actAmount           +" Value Expected  : "+expAmount);
		System.out.println("ReassignedVouNo : " +actReassignedVouNo +" Value Expected  : "+expReassignedVouNo);
		
		
		System.out.println(" Number         : "+actNumber2           +" Value Expected  : "+expNumber2);
		System.out.println("Name            : "+actName2             +" Value Expected  : "+expName2);
		System.out.println("Amount          : "+actAmount2           +" Value Expected  : "+expAmount2);
		System.out.println("ReassignedVouNo : " +actReassignedVouNo2 +" Value Expected  : "+expReassignedVouNo2);
		
		
	
		if (actNumber.equalsIgnoreCase(expNumber) && actMaturityDate.equalsIgnoreCase(expMaturityDate)&&
				actName.equalsIgnoreCase(expName) &&actAmount.equalsIgnoreCase(expAmount) &&  actReassignedVouNo.equalsIgnoreCase(expReassignedVouNo) &&
				
				
				actNumber2.equalsIgnoreCase(expNumber2) && actMaturityDate2.equalsIgnoreCase(expMaturityDate2)&&
				actName2.equalsIgnoreCase(expName2) &&actAmount2.equalsIgnoreCase(expAmount2) &&  actReassignedVouNo2.equalsIgnoreCase(expReassignedVouNo2) )
		{
			System.out.println("***********Test Pass :  Only one Row is Displayed ");
			return true;
	
		} 
		else 
		{
			System.err.println("--------Test Fail : Not displayed  one Row ");
			return false;
		}
		
	}

	
	
	public boolean checkConvertingVouchersInPDCVoucherScreenWithOutPostOnDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcVoucherOkIcon));
		pdcVoucherOkIcon.click();
		
		
		String expValidationMessage="Voucher converted successfully";
			
		String actValidationMessage=checkValidationMessage(expValidationMessage);
				
		
		if (actValidationMessage.equalsIgnoreCase(expValidationMessage) )
		{
			System.out.println("***********Test Pass :  Message Display As Expected ");
			return true;
	
		} 
		else 
		{
			System.err.println("--------Test Fail : Message Display As Expected ");
			return false;
		}
		
	}


	
	@FindBy(xpath="//tbody//input[@placeholder='Value']")
	private static WebElement pdcVoucherFilterDateTxt;
	
	@FindBy(xpath="//input[@id='advancefilter_date_90_0']")
	private static WebElement enter_PDCFilterDate;
	
	@FindBy(xpath="//button[@id='btnFilterPDCDetails']")
	private static WebElement pdcVoucherFilterBtn;
	
	@FindBy(xpath="//*[@id='id_transaction_homescreen_edit']")
	private static WebElement enrtyPageEditBtn;
	
	
	@FindBy(xpath="//*[@id='tblBodyTransRender']/tr/td[4]")
	private static List<WebElement> homePageVoucherNumList;
	
	@FindBy(xpath="//*[@id='tblBodyTransRender']/tr/td[2]")
	private static List<WebElement> homePageChkboxList;
				
public boolean checkConvertedPDCVoucherInReceipts() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	  	
	   	Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
		cashAndBankMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptsVoucher));
		receiptsVoucher.click();
		
		Thread.sleep(2000);
		
		
		int homePageVoucherNumListCount=homePageVoucherNumList.size();
		
		for (int i = 0; i < homePageVoucherNumListCount; i++)
		{
			String data=homePageVoucherNumList.get(i).getText();
			if (data.equalsIgnoreCase("2"))
			{
				homePageChkboxList.get(i).click();
			}
		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enrtyPageEditBtn));
		enrtyPageEditBtn.click();
        
		boolean loading=checkLoadingMessage();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocno             = documentNumberTxt.getAttribute("value");
		String actVouDate           = dateTxt.getAttribute("value");
		String actDepartment        = departmentTxt.getAttribute("value");
		String actChequeNo          = receipts_ChequeNoTxt.getAttribute("value");
		String actPDCNo             = voucherHeaderPDCNOTxt.getAttribute("value");
		String actAccount           = select1stRow_1stColumn.getText();
		String actAmount            = select1stRow_2ndColumn.getText();
		String actref               = select1stRow_3rdColumn.getText();
		
	    String expDocno              = "2";
		String expCurrency           ="INR";
		String expDepartment         ="Dubai";
		String expPDCNo              ="2";
	    
		String expAccount            ="Vendor New Reference";
		String expAmount             ="50.00";
		String expref                ="New Reference";
		
		String actFooterAmt   =recepitsFooterAmt.getText();
		String expFooterAmt   ="50.00";
		
		System.out.println("Entry Page Document Number    "+actDocno       +"  value Expected  "+expDocno);
		System.out.println("Entry Page Department         "+actDepartment  +"  value Expected  "+expDepartment);
		System.out.println("Entry Page Account            "+actAccount     +"  value Expected  "+expAccount);
		System.out.println("Entry Page Amount             "+actAmount      +"  value Expected  "+expAmount);
		System.out.println("Entry Page Reference          "+actref         +"  value Expected  "+expref);
		System.out.println("Entry Page  PDC Number        "+actPDCNo       +"  value Expected  "+expPDCNo);
		System.out.println("Entry Page Footer  Amount     "+actFooterAmt   +"  Value Expected  "+expFooterAmt);
		
		
		if (loading==true && actDocno.equalsIgnoreCase(expDocno) && actDepartment.equalsIgnoreCase(expDepartment) && 
				actAccount.equalsIgnoreCase(expAccount)&& actref.startsWith(expref) && actAmount.equalsIgnoreCase(expAmount) && 
				actFooterAmt.equalsIgnoreCase(expFooterAmt) && actPDCNo.equalsIgnoreCase(expPDCNo) )
		
		{
			System.out.println(" Test Pass: The Converted  PDC Voucher is Displayed in Receipts Screen ");
			return true;
		}
		else
		{
			System.err.println(" Test Fail: The Converted PDC Voucher is Displayed in Receipts Screen ");
			return false;
		}
	}
				
			
public boolean checkSavingVoucherInPDRWithFutureMaturityDate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
		
     Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVAT));
	PDRVAT.click();
	
	Thread.sleep(2000);
	
	
	int homePageVoucherNumListCount=homePageVoucherNumList.size();
	
	for (int i = 0; i < homePageVoucherNumListCount; i++)
	{
		String data=homePageVoucherNumList.get(i).getText();
		if (data.equalsIgnoreCase("1"))
		{
			homePageChkboxList.get(i).click();
		}
	}
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enrtyPageEditBtn));
	enrtyPageEditBtn.click();
    
	boolean loading=checkLoadingMessage();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
    documentNumberTxt.click();
	
    
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
	
	dateTxt.click();
	dateTxt.click();
	
	dateTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	dateTxt.sendKeys(Keys.BACK_SPACE);
		
	Thread.sleep(2000);
	
	DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	Date date=new Date();
	    
	String docdate = df.format(date);  
	Calendar c = Calendar.getInstance();
	c.add(Calendar.DAY_OF_MONTH, 21);  
	
	String FilterDate = df.format(c.getTime());  
	
	System.out.println("FilterDate  : "+FilterDate);
	
	dateTxt.sendKeys(FilterDate);
	
	Thread.sleep(2000);
	
    dateTxt.sendKeys(Keys.TAB);
    
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
    newCashBankAccountTxt.click();
	


	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
    String docno=documentNumberTxt.getAttribute("value");
    
    Thread.sleep(2000);
    
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	saveBtn.click();
	
 
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
billRefOkBtn.click();

boolean savingVoucher=checkVoucherSavingMessage(docno);


    if (   savingVoucher==true)
	        
		{
			System.err.println("Test Pass: Voucher Saved With Future Maturity Date   ");
			return true;
		}
		else
		{
			System.err.println("Test Fail: Voucher Saved With Future Maturity Date   ");
			return false;
		}
}

	
public boolean checkConvertingPDRVoucherWithFutureMaturityDate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	 Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoPostingMenu));
		autoPostingMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCSMenu));
		convertMaturedPDCSMenu.click();
		
		
		int pdcDOClistCount=pdcDOClist.size();
		
		for (int i = 0; i < pdcDOClistCount; i++) 
		{
			
			String data=pdcDOClist.get(i).getText();
			if (data.equalsIgnoreCase("PDR VAT"))
			{
				pdcCheckBoxlist.get(i).click();
				
			}
		}
		
		
		 Thread.sleep(2000);
			
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postOnDateChkbox));
		postOnDateChkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postOnDateTxt));
		postOnDateTxt.click();
		
		Thread.sleep(2000);
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	    Date date=new Date();
	    System.out.println(df.format(date));
	    
	    String actDate=postOnDateTxt.getAttribute("value");
		String expDate=df.format(date);
		
	      
	    String docdate = df.format(date);  
		Calendar c = Calendar.getInstance();
	    c.add(Calendar.DAY_OF_MONTH, 21);  
	    String postOnDate = df.format(c.getTime());  
	
		
		postOnDateTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		postOnDateTxt.sendKeys(postOnDate);
		
		
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCsOkIcon));
		convertMaturedPDCsOkIcon.click();
	
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcVoucherFilterDateTxt));
		pdcVoucherFilterDateTxt.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PDCFilterDate));
		enter_PDCFilterDate.click();
		
	    Thread.sleep(2000);
		DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");
	    Date date1=new Date();
	    String Currentdate1=df1.format(date1);
	    
	    String actDate1=enter_PDCFilterDate.getAttribute("value");
		String expDate1=Currentdate1;
		
	      
	    String docdate1 = df1.format(date1);  
		Calendar c1 = Calendar.getInstance();
	    c1.add(Calendar.DAY_OF_MONTH, 21);  
	    String PDCFilterDate = df1.format(c1.getTime());  
	
		
	    enter_PDCFilterDate.sendKeys(Keys.SHIFT,Keys.HOME);
	    Thread.sleep(2000);
	    enter_PDCFilterDate.sendKeys(PDCFilterDate);
		Thread.sleep(2000);
		enter_PDCFilterDate.sendKeys(Keys.TAB);
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcVoucherFilterBtn));
		pdcVoucherFilterBtn.click();
		
		
		Thread.sleep(5000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Col3));
		String actRow1Number=pdcGridRow1Col3.getText();
		String expRow1Number="1";
		
		String actRow1MaturityDate=pdcGridRow1Col4.getText();
		
		
		Thread.sleep(2000);
		DateFormat df2 = new SimpleDateFormat("dd-MM-yyyy");
	    Date date2=new Date();
	    String Currentdate2=df2.format(date2);
	    
	      
	    String docdate2 = df2.format(date1);
	    Calendar c2 = Calendar.getInstance();
		c2.add(Calendar.DAY_OF_MONTH, 21);  
		
	    String expRow1MaturityDate = df2.format(c2.getTime()); 
	  
	    System.out.println("actRow1MaturityDate  : "+actRow1MaturityDate);
	    System.out.println("expRow1MaturityDate  : "+expRow1MaturityDate);
	    
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Col5));
		String actRow1Name=pdcGridRow1Col5.getText();
		String expRow1Name="Bank";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Col7));
		String actRow1Amount=pdcGridRow1Col7.getText();
		String expRow1Amount="50.00";
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Col8));
		String actRow1ReassignedVouNo=pdcGridRow1Col8.getText();
		String expRow1ReassignedVouNo="1";
	
		System.out.println("Date                   "+actDate             +"       "+expDate);
		System.out.println("Row1Number             "+actRow1Number       +"       "+expRow1Number);
		System.out.println("Row1MaturityDate       "+actRow1MaturityDate +"       "+expRow1MaturityDate);
		System.out.println("Row1Name               "+actRow1Name         +"       "+expRow1Name);
		System.out.println("Row1Amount             "+actRow1Amount       +"       "+expRow1Amount);
		System.out.println("Row1ReassignedVouNo    "+actRow1ReassignedVouNo+"      "+expRow1ReassignedVouNo);
		
		
		
		boolean actDisplay=pdcGridRow1Chkbox.isDisplayed();
		boolean expDisplay=true;

		System.out.println(" Display OF Chkbox : "+actDisplay +" Value "+expDisplay);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Chkbox));
		pdcGridRow1Chkbox.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcVoucherOkIcon));
		pdcVoucherOkIcon.click();
		
		
		String expValidationMessage="Voucher converted successfully";
			
		String actValidationMessage=checkValidationMessage(expValidationMessage);
				
		
		if (actRow1Number.equalsIgnoreCase(expRow1Number) && actRow1MaturityDate.equalsIgnoreCase(expRow1MaturityDate) && actRow1Name.equalsIgnoreCase(expRow1Name) &&
				actRow1Amount.equalsIgnoreCase(expRow1Amount) && actRow1ReassignedVouNo.equalsIgnoreCase(expRow1ReassignedVouNo) && 
				actDisplay==expDisplay && actValidationMessage.equalsIgnoreCase(expValidationMessage) ) 
		{
			System.out.println(" ********Test Pass:  Filter Option in PDC Voucher Screen  ");
			return true;
		}
		else 
		{
			System.err.println(" ********Test Fail:   Filter Option in PDC Voucher Screen  ");
			return false;
		}
	 }


public boolean checkConvertedPDCVoucherInReceiptsWithFutureMaturityDate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
  	
   	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptsVoucher));
	receiptsVoucher.click();
	
	Thread.sleep(2000);
	
	
	int homePageVoucherNumListCount=homePageVoucherNumList.size();
	
	for (int i = 0; i < homePageVoucherNumListCount; i++)
	{
		String data=homePageVoucherNumList.get(i).getText();
		if (data.equalsIgnoreCase("1"))
		{
			homePageChkboxList.get(i).click();
		}
	}
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enrtyPageEditBtn));
	enrtyPageEditBtn.click();
    
	boolean loading=checkLoadingMessage();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String actDocno             = documentNumberTxt.getAttribute("value");
	String actVouDate           = dateTxt.getAttribute("value");
	String actDepartment        = departmentTxt.getAttribute("value");
	String actChequeNo          = receipts_ChequeNoTxt.getAttribute("value");
	String actPDCNo             = voucherHeaderPDCNOTxt.getAttribute("value");
	String actAccount           = select1stRow_1stColumn.getText();
	String actAmount            = select1stRow_2ndColumn.getText();
	//String actref               = select1stRow_3rdColumn.getText();
	
    String expDocno              = "1";
	String expCurrency           ="INR";
	String expDepartment         ="Dubai";
	String expPDCNo              ="1";
    
	String expAccount            ="Customer New Reference";
	String expAmount             ="50.00";
	//String expref                ="NDT55:1";

	String actFooterAmt   =recepitsFooterAmt.getText();
	String expFooterAmt   ="50.00";
	
	System.out.println("Entry Page Document Number    "+actDocno       +"  value Expected  "+expDocno);
	System.out.println("Entry Page Department         "+actDepartment  +"  value Expected  "+expDepartment);
	System.out.println("Entry Page Account            "+actAccount     +"  value Expected  "+expAccount);
	System.out.println("Entry Page Amount             "+actAmount      +"  value Expected  "+expAmount);
	//System.out.println("Entry Page Reference          "+actref         +"  value Expected  "+expref);
	System.out.println("Entry Page  PDC Number        "+actPDCNo       +"  value Expected  "+expPDCNo);
	System.out.println("Entry Page Footer  Amount     "+actFooterAmt   +"  Value Expected  "+expFooterAmt);
	
	
	if (loading==true && actDocno.equalsIgnoreCase(expDocno) && actDepartment.equalsIgnoreCase(expDepartment) && 
			actAccount.equalsIgnoreCase(expAccount) && actAmount.equalsIgnoreCase(expAmount) && 
			actFooterAmt.equalsIgnoreCase(expFooterAmt) && actPDCNo.equalsIgnoreCase(expPDCNo) )
	
	{
		System.out.println(" Test Pass: The Converted  PDC Voucher is Displayed in Receipts Screen ");
		return true;
	}
	else
	{
		System.err.println(" Test Fail: The Converted PDC Voucher is Displayed in Receipts Screen ");
		return false;
	}
}

//reverse Posting In PDR 



public boolean checkUpdateinPDCUnderSettingMenuForEnableReversePostingInRecepits() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
	settingsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsConfigureTransactions));
	settingsConfigureTransactions.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCMenu));
	PDCMenu.click();
	
	Thread.sleep(2000);
	
	if (pdcDisplayinLedgerChkbox.isEnabled()==true) 
	{
		pdcDisplayinLedgerChkbox.click();
	}
	
	
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcReseverseAccountpostingOnPDCConversionChkbox));
	pdcReseverseAccountpostingOnPDCConversionChkbox.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
	updateBtn.click();
	
	Thread.sleep(2000);
	
	getWaitForAlert();
	
	String actAlert = getAlert().getText();
	String expAlert= "Do you want to save the changes?";
	
	getAlert().accept();
	
    String expValidationMessage="Data saved Successfully";
	
	String actValidationMessage=checkValidationMessage(expValidationMessage);
				
	
    System.out.println(" Alert Present     :  "+actAlert          +" Value Expected  :  "+expAlert);
    
    
    boolean actpdcPostDatedChequeChkbox                         = pdcPostDatedChequeChkbox.isSelected();
    boolean actpdcReseverseAccountpostingOnPDCConversionChkbox  = pdcReseverseAccountpostingOnPDCConversionChkbox.isSelected();
    boolean actpdcAutoCheckforMaturedChkbox                     = pdcAutoCheckforMaturedChkbox.isDisplayed();
    boolean actpdcDisplayinLedgerChkbox                         = pdcDisplayinLedgerChkbox.isDisplayed();
    boolean actpdcCheckDiscountingTxt                           = pdcCheckDiscountingTxt.isDisplayed();
    boolean actpdcChequeDiscountingVoucherType                  = pdcChequeDiscountingVoucherType.isDisplayed();
    
    boolean exppdcPostDatedChequeChkbox                         = true;
    boolean exppdcReseverseAccountpostingOnPDCConversionChkbox  = true;
    boolean exppdcAutoCheckforMaturedChkbox                     = true;
    boolean exppdcDisplayinLedgerChkbox                         = true;
    boolean exppdcCheckDiscountingTxt                           = true;
    boolean exppdcChequeDiscountingVoucherType                  = true;
    
    
	if (actpdcPostDatedChequeChkbox==exppdcPostDatedChequeChkbox && actpdcReseverseAccountpostingOnPDCConversionChkbox==exppdcReseverseAccountpostingOnPDCConversionChkbox &&
			actpdcAutoCheckforMaturedChkbox==exppdcAutoCheckforMaturedChkbox && actpdcDisplayinLedgerChkbox==exppdcDisplayinLedgerChkbox && actpdcCheckDiscountingTxt==exppdcCheckDiscountingTxt &&
			actpdcChequeDiscountingVoucherType==exppdcChequeDiscountingVoucherType && actValidationMessage.equalsIgnoreCase(expValidationMessage) && actAlert.equalsIgnoreCase(expAlert)) 
	{
		System.out.println(" Test Pass: Displayed PDC Screen Under Setting Menu and Updated Successfully ");
		excelReader.setCellData(xlfile, "SmokePostDatedReceipts", 117, 9, resPass);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
		settings_closeBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();
			  
		System.out.println("*********Logout Successfully********************************8");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
	    return true;
	} 
	else
	{
		System.err.println(" Test Fail: Not  Displayed PDC Screen Under Setting Menu ");
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();
			  
		System.out.println("*********Logout Successfully********************************8");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		excelReader.setCellData(xlfile, "SmokePostDatedReceipts", 117, 9, resFail);
		return false;
	}
}




@FindBy(xpath="//input[@id='id_header_67108969']")
private static WebElement  PDRVATChequeNoTxt;

public boolean checkSavingVoucherInPostDatedReceiptsWithCashANdBankAccountHDFC() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	
	
	LoginPage lp=new LoginPage(getDriver()); 
	
	String unamelt="su";
			      
	String pawslt="su";
			      
	lp.enterUserName(unamelt);
	
	Thread.sleep(2000);
			
	lp.enterPassword(pawslt);
	
	
    Thread.sleep(2000);
	
	lp.clickOnSignInBtn();
	
	
	 Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDRVAT));
	PDRVAT.click();
	
	
	Thread.sleep(4000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
	
	
	checkUserFriendlyMessage();
	
    Thread.sleep(2000);
    
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
    newCashBankAccountTxt.click();
	
	newCashBankAccountTxt.sendKeys(Keys.SPACE);
	
	
    int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
	
    System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);
    
	for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
	{
		String data		  = cashAndBAnkAccountList.get(i).getText();
		
		if(data.equalsIgnoreCase("HDFC"))
			
		{
			cashAndBAnkAccountList.get(i).click();
			
			break;
		}
	}
	
	newCashBankAccountTxt.sendKeys(Keys.TAB);
		
	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		
		departmentTxt.sendKeys(Keys.SPACE);
			
		int departmentcount=departmentListCount.size();
			
		System.err.println(departmentcount);
				
		for(int i=0 ; i < departmentcount ;i++)
		{
		    String data=departmentListCount.get(i).getText();
			if(data.equalsIgnoreCase("Dubai"))
			{
					departmentListCount.get(i).click();
					break;
			}
		}
				
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);
	
	
	PDRVATPlaceOfSupplyTXt.click();
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.END);
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.SHIFT,Keys.HOME);
	
	PDRVATPlaceOfSupplyTXt.sendKeys("Abu Dhabi");
	
	Thread.sleep(2000);
	
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);
	
	PDRVAT_JuridictionTxt.sendKeys(Keys.END);
	PDRVAT_JuridictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	
	PDRVAT_JuridictionTxt.sendKeys("Abu Dhabi");
	Thread.sleep(2000);
	
	
	PDRVAT_JuridictionTxt.sendKeys(Keys.TAB);
	
	
	Thread.sleep(2000);
	
	PDRVATChequeNoTxt.click();
	
	PDRVATChequeNoTxt.sendKeys("PDRHDFC01");
	
		
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	enter_AccountTxt.click();
	enter_AccountTxt.sendKeys(Keys.SPACE);
	
	int accountCount=accountListCount.size();
	
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=accountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Customer Semi Adjustment"))
		{
			accountListCount.get(i).click();
			
			break;
		}
	}
		
	enter_AccountTxt.sendKeys(Keys.TAB);
	
		
	enterTaxcode.click();
	enterTaxcode.sendKeys(Keys.SHIFT,Keys.HOME);
	enterTaxcode.sendKeys(Keys.SPACE);
	enterTaxcode.sendKeys("std");
		
	Thread.sleep(3000);
   		
	enterTaxcode.sendKeys(Keys.TAB);
	
	
	enter_Amount.click();
	enter_Amount.clear();
	enter_Amount.sendKeys("50");
	enter_Amount.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
    String docno=documentNumberTxt.getAttribute("value");
	
    
    
    Thread.sleep(2000);
    
    
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	saveBtn.click();
	
	Thread.sleep(2000);
	
    String expPartyName = "Customer Semi Adjustment (Customer Semi Adjustment)";

    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
    String actPartyName = billRefPartyName.getText();
	
	excelReader.setCellData(xlfile, "SmokePostDatedReceipts", 132, 8, actPartyName);
	 
	System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
	
	Thread.sleep(2000);
	
	int Adjustbills=billRefAdjustBillsGrid.size();
	
	String actAdjustbills=Integer.toString(Adjustbills);
	
	String expAdjustbills="1";
	
	

getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridOrginalAmtRow1));
String actgridOrginalAmtRow1     = gridOrginalAmtRow1.getText();
String actgridBalanceAmtRow1     = gridBalanceAmtRow1.getText();
String actgridAdjustmentAmtRow1  = gridAdjustmentAmtRow1.getText();
String actgridAdjustmentBillsRow1DocNo  = billRefAdjustBillsRow1DocNo.getText();



String expgridOrginalAmtRow1      ="100.00";
String expgridBalanceAmtRow1      ="100.00";
String expgridAdjustmentAmtRow1   ="0.00";
String expgridAdjustmentBillsRow1DocNo  = "NDT60:4";

System.out.println("actgridOrginalAmtRow1    :" +actgridOrginalAmtRow1 +"       " +"expgridOrginalAmtRow1 :" +expgridOrginalAmtRow1);
System.out.println("actgridBalanceAmtRow1    :" +actgridBalanceAmtRow1 +"       " +"expgridBalanceAmtRow1 :" +expgridBalanceAmtRow1);
System.out.println("actgridAdjustmentAmtRow1 :" +actgridAdjustmentAmtRow1 +"    " +"expgridAdjustmentAmtRow1:" +expgridAdjustmentAmtRow1);
System.out.println("actgridAdjustmentBillsRow1DocNo    :" +actgridAdjustmentBillsRow1DocNo +"       " +"expgridOrginalAmtRow1 :" +expgridAdjustmentBillsRow1DocNo);

	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	billRefNewReferenceTxt.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
	billRefPickIcon.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
	billRefOkBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	 
    boolean savingVoucher=checkVoucherSavingMessage(docno);
         
   
	if(actAdjustbills.equalsIgnoreCase(expAdjustbills) && savingVoucher==true && 
			actgridAdjustmentBillsRow1DocNo.equalsIgnoreCase(expgridAdjustmentBillsRow1DocNo) && 
			actgridAdjustmentAmtRow1.equalsIgnoreCase(expgridAdjustmentAmtRow1) && 
			actgridOrginalAmtRow1.equalsIgnoreCase(expgridOrginalAmtRow1) && 
			actgridBalanceAmtRow1.equalsIgnoreCase(expgridBalanceAmtRow1))
	{
		System.out.println("Test Pass : Voucher Saving in PDRVAT with HDFC");
		return true;
	}
	else
	{
		System.out.println("Test Fail : Voucher Saving in PDRVAT With HDFC");
		return false;
	}
}

@FindBy(xpath="//*[@id='90_0_AdvanceFilter_']/table/tbody/tr/td[1]/select")
private static WebElement pdcFilterConjuctionDropdown;
              
@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
private static WebElement pdcFilterStartdateField;
                          
@FindBy(xpath="//*[@id='90_0_AdvanceFilter_']/table/tbody/tr/td[3]/select")
private static WebElement pdcFilterOperatorDropdown;

@FindBy(xpath="//*[@id='90_0_AdvanceFilter_']/table/tbody/tr/td[4]/select")
private static WebElement pdcFilterCompareWithDropdown;;

@FindBy(xpath="//td[@id='mytable_col_1-5']")
private static WebElement gridRow1SelectBankCol;

@FindBy(xpath="//td[@id='mytable_col_3-5']")
private static WebElement gridRow3SelectBankCol;

@FindBy(xpath="//td[@id='mytable_col_4-5']")
private static WebElement gridRow4SelectBankCol;



@FindBy(xpath="//td[@id='mytable_col_2-5']")
private static WebElement gridRow2SelectBankCol;

@FindBy(xpath="//input[@id='mytableoptReversePosting']")
private static WebElement gridEnterBank;
			
			

public boolean checkReversingPoistingInPDCWithPDRVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoPostingMenu));
	autoPostingMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCSMenu));
	convertMaturedPDCSMenu.click();
	
	
	Thread.sleep(3000);
	int pdcDOClistCount=pdcDOClist.size();
	
	for (int i = 0; i < pdcDOClistCount; i++) 
	{
		
		String data=pdcDOClist.get(i).getText();
		if (data.equalsIgnoreCase("PDR VAT"))
		{
			pdcCheckBoxlist.get(i).click();
			
		}
	}
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCsOkIcon));
	convertMaturedPDCsOkIcon.click();
	
	String expValidationMessage="";
		
	String actValidationMessage=checkValidationMessage(expValidationMessage);

	

    int pdcDOClistCount3=pdcDOClist.size();
		
		for (int i = 0; i < pdcDOClistCount3; i++) 
		{
			
			String data=pdcDOClist.get(i).getText();
			if (data.equalsIgnoreCase("PDR VAT"))
			{
				pdcCheckBoxlist.get(i).click();
				
			}
		}
		
		
		
		int pdcDOClistCount1=pdcDOClist.size();
		
		for (int i = 0; i < pdcDOClistCount1; i++) 
		{
			
			String data=pdcDOClist.get(i).getText();
			if (data.equalsIgnoreCase("PDR VAT"))
			{
				pdcCheckBoxlist.get(i).click();
				Thread.sleep(2000);
				pdcBanklist.get(i).click();

				Thread.sleep(2000);
				gridEnterBank.click();
				
				Thread.sleep(2000);
				gridEnterBank.sendKeys("BANK");
				
				
				
			}
		}
		
		Thread.sleep(2000);
		gridEnterBank.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCsOkIcon));
		convertMaturedPDCsOkIcon.click();

		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Col3));
		
		
		String actRow1Number          = pdcGridRow1Col3.getText();
		String actMaturityRow1Date    = pdcGridRow1Col4.getText();
		String actRow1Name            = pdcGridRow1Col5.getText();
		String actRow1Amount          = pdcGridRow1Col7.getText();
		String actRow1ReassignedVouNo = pdcGridRow1Col8.getText();
		String actRow1ChequeNo        = pdcGridRow1Col9.getText();
		
		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
	    Date date=new Date();
	    System.out.println(df.format(date));
	
        String expRow1Number            ="3";
		String expMaturityRow1Date     =df.format(date);
		String expRow1Name             ="HDFC";
		String expRow1Amount            ="50.00";
		String expRow1ReassignedVouNo   ="3";
		String expRow1ChequeNo          ="PDRHDFC01";
	

		System.out.println(  "Row1Number----------->" +actRow1Number           +"Value Expected :"+expRow1Number);
		System.out.println(  "MaturityRow1Date----->" +actMaturityRow1Date     +"Value Expected :"+expMaturityRow1Date);
		System.out.println(  "Row1Name------------->" + actRow1Name            +"Value Expected :"+expRow1Name);
		System.out.println(  "Row1Amount----------->" +actRow1Amount           +"Value Expected :"+expRow1Amount);
		System.out.println(  "Row1ReassignedVouNo-->" + actRow1ReassignedVouNo +"Value Expected :"+expRow1ReassignedVouNo);
		System.out.println(  "Row1ChequeNo--------->" + actRow1ChequeNo        +"Value Expected :"+expRow1ChequeNo);
		
		

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Chkbox));
		pdcGridRow1Chkbox.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcVoucherOkIcon));
		pdcVoucherOkIcon.click();
		
		
		String expValidationMessage1="Voucher converted successfully";
			
		String actValidationMessage1=checkValidationMessage(expValidationMessage);
				
		
		if (  actRow1Number.equalsIgnoreCase(expRow1Number) && actMaturityRow1Date.equalsIgnoreCase(expMaturityRow1Date) && actRow1Name.equalsIgnoreCase(expRow1Name) &&
				actRow1Amount.equalsIgnoreCase(expRow1Amount) && actRow1ReassignedVouNo.equalsIgnoreCase(expRow1ReassignedVouNo) && 
				actRow1ChequeNo.equalsIgnoreCase(expRow1ChequeNo) && actValidationMessage1.equalsIgnoreCase(expValidationMessage1))
				
		{
			System.out.println(" Test Pass:  Revserve Posting In PDR VAT ");
			return true;
		}
		else
		{
			System.out.println(" Test FAIL:  Revserve Posting In PDR VAT ");
			return false;
		}
	}



public boolean checkConvertedPDCVoucherInReceiptsReversePosting() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
   	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptsVoucher));
	receiptsVoucher.click();
	
	Thread.sleep(2000);
	
	
	int homePageVoucherNumListCount=homePageVoucherNumList.size();
	
	for (int i = 0; i < homePageVoucherNumListCount; i++)
	{
		String data=homePageVoucherNumList.get(i).getText();
		if (data.equalsIgnoreCase("3"))
		{
			homePageChkboxList.get(i).click();
		}
	}
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enrtyPageEditBtn));
	enrtyPageEditBtn.click();
    
	Thread.sleep(3000);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String actDocno             = documentNumberTxt.getAttribute("value");
	String actVouDate           = dateTxt.getAttribute("value");
	String actDepartment        = departmentTxt.getAttribute("value");
	String actChequeNo          = receipts_ChequeNoTxt.getAttribute("value");
	String actPDCNo             = voucherHeaderPDCNOTxt.getAttribute("value");
	String actAccount           = select1stRow_1stColumn.getText();
	String actAmount            = select1stRow_2ndColumn.getText();
	
    String expDocno              = "3";
	String expCurrency           ="INR";
	String expDepartment         ="Dubai";
	String expPDCNo              ="3";
    String expChequeNo           ="PDRHDFC01";
	String expAccount            ="HDFC";
	String expAmount             ="50.00";
	
	String actFooterAmt   =recepitsFooterAmt.getText();
	String expFooterAmt   ="50.00";
	
	System.out.println("Entry Page Document Number    "+actDocno       +"  value Expected  "+expDocno);
	System.out.println("Entry Page Department         "+actDepartment  +"  value Expected  "+expDepartment);
	System.out.println("Entry Page Account            "+actAccount     +"  value Expected  "+expAccount);
	System.out.println("Entry Page Amount             "+actAmount      +"  value Expected  "+expAmount);
	System.out.println("Entry Page  PDC Number        "+actPDCNo       +"  value Expected  "+expPDCNo);
	System.out.println("Entry Page  CHque Number        "+actChequeNo       +"  value Expected  "+expChequeNo);
	System.out.println("Entry Page Footer  Amount     "+actFooterAmt   +"  Value Expected  "+expFooterAmt);
	
	
	if (actDocno.equalsIgnoreCase(expDocno) && actDepartment.equalsIgnoreCase(expDepartment) && 
			actAccount.equalsIgnoreCase(expAccount) && actAmount.equalsIgnoreCase(expAmount) && 
			actFooterAmt.equalsIgnoreCase(expFooterAmt) && actPDCNo.equalsIgnoreCase(expPDCNo) && 
			actChequeNo.equalsIgnoreCase(expChequeNo))
	
	{
		System.out.println(" Test Pass: The Converted  PDC Voucher is Displayed in Receipts Screen ");
		return true;
	}
	else
	{
		System.err.println(" Test Fail: The Converted PDC Voucher is Displayed in Receipts Screen ");
		return false;
	}
}



//PDP 

// To Do Reverse Posting  in Post Dated PAyments,here uncheck the Reverse Posting in  Recepits  



public boolean checkUpdateinPDCUnderSettingMenuForDisableEnableReversePostingInRecepits() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
	settingsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsConfigureTransactions));
	settingsConfigureTransactions.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCMenu));
	PDCMenu.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcPostDatedChequeChkbox));
	pdcPostDatedChequeChkbox.click();
	
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
	updateBtn.click();
	
	Thread.sleep(2000);
	getWaitForAlert();
	

	String actAlert = getAlert().getText();
	String expAlert= "Do you want to save the changes?";
	
	getAlert().accept();
	
    String expValidationMessage="Data saved Successfully";
	
	String actValidationMessage=checkValidationMessage(expValidationMessage);
				
	
    System.out.println(" Alert Present     :  "+actAlert          +" Value Expected  :  "+expAlert);
    
	
	if (actValidationMessage.equalsIgnoreCase(expValidationMessage) && actAlert.equalsIgnoreCase(expAlert)) 
	{
		System.out.println(" Test Pass: Displayed PDC Screen Under Setting Menu and Updated Successfully ");
		settings_closeBtn.click();
	    return true;
	} 
	else
	{
		System.err.println(" Test Fail: Not  Displayed PDC Screen Under Setting Menu ");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
		settings_closeBtn.click();
		return false;
	}
	
}

@FindBy(xpath="//span[contains(text(),'PDP VAT')]")
private static WebElement PDPVAT ;



public boolean checkSavingVoucherINPDPVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	excelReader=new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
   	Thread.sleep(2000);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDPVAT));
	PDPVAT.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
		
		
	checkUserFriendlyMessage();
	
    
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
    newCashBankAccountTxt.click();
	
	newCashBankAccountTxt.sendKeys(Keys.SPACE);
	
    int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
	
    System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);
    
	for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
	{
		String data		  = cashAndBAnkAccountList.get(i).getText();
		
		if(data.equalsIgnoreCase("Bank"))
		{
			cashAndBAnkAccountList.get(i).click();
			
			break;
		}
	}
	
	newCashBankAccountTxt.sendKeys(Keys.TAB);
	
	

	
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	
	departmentTxt.sendKeys(Keys.SPACE);
	
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Dubai"))
		{
			departmentListCount.get(i).click();
			
			break;
		}
	}
		
	 Thread.sleep(2000);
	departmentTxt.sendKeys(Keys.TAB);
	
	
	
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.END);
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.SHIFT,Keys.HOME);
	
	PDRVATPlaceOfSupplyTXt.sendKeys("Abu Dhabi");
	
	Thread.sleep(2000);
	
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);
	

    Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	enter_AccountTxt.click();
	enter_AccountTxt.sendKeys(Keys.SPACE);
	enter_AccountTxt.sendKeys("Vendor New");
	Thread.sleep(2000);
	int accountCount=accountListCount.size();
	
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=accountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Vendor New Reference"))
		{
			accountListCount.get(i).click();
			
			break;
		}
	}
	Thread.sleep(2000);
	enter_AccountTxt.sendKeys(Keys.TAB);
		
		
		enterPVPVATTaxcode.click();
		enterPVPVATTaxcode.sendKeys(Keys.SHIFT,Keys.HOME);
		enterPVPVATTaxcode.sendKeys(Keys.SPACE);
		enterPVPVATTaxcode.sendKeys("std");
		Thread.sleep(2000);
		enterPVPVATTaxcode.sendKeys(Keys.TAB);
		
		enter_Amount.click();
		enter_Amount.clear();
		enter_Amount.sendKeys("50");
		enter_Amount.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
	    Thread.sleep(2000);
	    
	    
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
	
	    String expPartyName = "Vendor New Reference (Vendor New Reference)";
	
	
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	    String actPartyName = billRefPartyName.getText();
		
		 
		System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
		
		Thread.sleep(2000);
		
		int Adjustbills=billRefAdjustBillsGrid.size();
		
		String actAdjustbills=Integer.toString(Adjustbills);
		
		String expAdjustbills="3";
		
		
        int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();
        
        HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();
		
        for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
    	{
    		String data		                              = billwiseAdjustBillsDocList.get(i).getText();
    		actbillwiseAdjustBillsDocList.add(data);
    		
    		if (data.equalsIgnoreCase("NDT52:1")) 
    		{
    			billwiseAdjustBillsChkBoxList.get(i).click();
    		}
    	}
    	
    	String actDocumentNumberTextRow2=actbillwiseAdjustBillsDocList.toString();
    	
    	String expDocumentNumberTextRow2="[Rct:2, NDT52:1, OpeBal:1]";
    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
    	billRefPickIcon.click();
    	
        System.out.println("actDocumentNumberText Row2   : "+actDocumentNumberTextRow2);
        System.out.println("expDocumentNumberText  Row2  : "+expDocumentNumberTextRow2);
    	
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		 
	    boolean savingVoucher=checkVoucherSavingMessage(docno);
	         
	    
		if(actPartyName.equalsIgnoreCase(expPartyName) && 
				actDocumentNumberTextRow2.equalsIgnoreCase(expDocumentNumberTextRow2) && 
				actAdjustbills.equalsIgnoreCase(expAdjustbills))
		{
			System.out.println("Test Pass : Voucher Saving in PDPVAT");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Saving in PDPVAT");
			return false;
		}

}


public boolean checkSavedVouchersInPDPVoucherScreenWithOutPostOnDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoPostingMenu));
	autoPostingMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCSMenu));
	convertMaturedPDCSMenu.click();


	Thread.sleep(3000);
	int pdcDOClistCount=pdcDOClist.size();
	
	for (int i = 0; i < pdcDOClistCount; i++) 
	{
		
		String data=pdcDOClist.get(i).getText();
		if (data.equalsIgnoreCase("PDP VAT"))
		{
			pdcCheckBoxlist.get(i).click();
			
		}
	}
	
	Thread.sleep(2000);

	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCsOkIcon));
	convertMaturedPDCsOkIcon.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Chkbox));
	pdcGridRow1Chkbox.click();
	
	Thread.sleep(2000);
	String actNumber=pdcGridRow1Col3.getText();
	String expNumber="1";
	
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Col4));
	String actMaturityDate=pdcGridRow1Col4.getText();
	DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
    Date date=new Date();
    String CurrentDate=df.format(date);
	String expMaturityDate=CurrentDate;
	
	
	System.out.println("CurrentDate      : "+CurrentDate);
	System.out.println("Maturity Date    : "+expMaturityDate);
	
	
	String actName=pdcGridRow1Col5.getText();
	String expName="bank";
	
	
	String actAmount=pdcGridRow1Col7.getText();
	String expAmount="50.00";

	
	String actReassignedVouNo=pdcGridRow1Col8.getText();
	String expReassignedVouNo="1";
	
	
	System.out.println("******************checkSavedVouchersInPDCVoucherScreenWithOUTPostOnDate********************************");
	System.out.println(" Number         : "+actNumber           +" Value Expected  : "+expNumber);
	System.out.println("Name            : "+actName             +" Value Expected  : "+expName);
	System.out.println("Amount          : "+actAmount           +" Value Expected  : "+expAmount);
	System.out.println("ReassignedVouNo : " +actReassignedVouNo +" Value Expected  : "+expReassignedVouNo);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcVoucherOkIcon));
	pdcVoucherOkIcon.click();
	
	
	String expValidationMessage="Create PDCNo Field in Header Of Pmt Voucher";
		
	String actValidationMessage=checkValidationMessage(expValidationMessage);
			
	
	if (actNumber.equalsIgnoreCase(expNumber) && actMaturityDate.equalsIgnoreCase(expMaturityDate)&&actValidationMessage.equalsIgnoreCase(expValidationMessage) && 
			actName.equalsIgnoreCase(expName) &&actAmount.equalsIgnoreCase(expAmount) &&  actReassignedVouNo.equalsIgnoreCase(expReassignedVouNo))
	{
		System.out.println("***********Test Pass :  Only one Row is Displayed ");
		return true;

	} 
	else 
	{
		System.err.println("--------Test Fail : Not displayed  one Row ");
		return false;
	}
	
}

	
	
//Payments

public boolean checkAddExtraFieldPDCInHeaderFieldOFPayments() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	
	Thread.sleep(2000);
		
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsVoucher));
	paymentsVoucher.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
	settingsBtn.click();
	
    Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
	editLayoutTab.click();

	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutAddFieldsBtn));
	editLayoutAddFieldsBtn.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutCaptionTxt));
	editLayoutCaptionTxt.click();
	editLayoutCaptionTxt.sendKeys("PDCNO");
	editLayoutCaptionTxt.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutApplyBtn));
	editLayoutApplyBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
	errorMessageCloseBtn.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingUpdateIcon));
	settingUpdateIcon.click();
	
	String expValidationMessage="Data saved successfully";
	
	String actValidationMessage=checkValidationMessage(expValidationMessage);
			
		  
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
	settings_closeBtn.click();

	if (actValidationMessage.equalsIgnoreCase(expValidationMessage) )
	{
		System.out.println(" **********Test Pass: PDC Extra Filed is Added In Receipts Header Filed ");
		return true;
	}
	else
	{
		System.err.println(" Test Fail: PDC Extra Filed is Added In Receipts ");
		return false;
	}
	
}




public boolean checkCovertingVoucherInPDCAfetrCreatingExtraField() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoPostingMenu));
	autoPostingMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCSMenu));
	convertMaturedPDCSMenu.click();


	Thread.sleep(3000);
	int pdcDOClistCount=pdcDOClist.size();
	
	for (int i = 0; i < pdcDOClistCount; i++) 
	{
		
		String data=pdcDOClist.get(i).getText();
		if (data.equalsIgnoreCase("PDP VAT"))
		{
			pdcCheckBoxlist.get(i).click();
			
		}
	}
	
	Thread.sleep(2000);

	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCsOkIcon));
	convertMaturedPDCsOkIcon.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Chkbox));
	pdcGridRow1Chkbox.click();
	
	Thread.sleep(2000);
	String actNumber=pdcGridRow1Col3.getText();
	String expNumber="1";
	
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Col4));
	String actMaturityDate=pdcGridRow1Col4.getText();
	DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
    Date date=new Date();
    String CurrentDate=df.format(date);
	String expMaturityDate=CurrentDate;
	
	
	System.out.println("CurrentDate      : "+CurrentDate);
	System.out.println("Maturity Date    : "+expMaturityDate);
	
	
	String actName=pdcGridRow1Col5.getText();
	String expName="bank";
	
	
	String actAmount=pdcGridRow1Col7.getText();
	String expAmount="50.00";

	
	String actReassignedVouNo=pdcGridRow1Col8.getText();
	String expReassignedVouNo="1";
	
	
	System.out.println("******************checkSavedVouchersInPDCVoucherScreenWithOUTPostOnDate********************************");
	System.out.println(" Number         : "+actNumber           +" Value Expected  : "+expNumber);
	System.out.println("Name            : "+actName             +" Value Expected  : "+expName);
	System.out.println("Amount          : "+actAmount           +" Value Expected  : "+expAmount);
	System.out.println("ReassignedVouNo : " +actReassignedVouNo +" Value Expected  : "+expReassignedVouNo);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcVoucherOkIcon));
	pdcVoucherOkIcon.click();
	
	
	String expValidationMessage="Voucher Converted Successfully";
		
	String actValidationMessage=checkValidationMessage(expValidationMessage);
			
	
	if (actNumber.equalsIgnoreCase(expNumber) && actMaturityDate.equalsIgnoreCase(expMaturityDate)&&actValidationMessage.equalsIgnoreCase(expValidationMessage) && 
			actName.equalsIgnoreCase(expName) &&actAmount.equalsIgnoreCase(expAmount) &&  actReassignedVouNo.equalsIgnoreCase(expReassignedVouNo))
	{
		System.out.println("***********Test Pass :  Only one Row is Displayed ");
		return true;

	} 
	else 
	{
		System.err.println("--------Test Fail : Not displayed  one Row ");
		return false;
	}
	
}


public boolean checkConvertedVoucherINPayments() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{

   	Thread.sleep(4000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsVoucher));
	paymentsVoucher.click();
	
	Thread.sleep(2000);
	
	Thread.sleep(2000);
	
	
	int homePageVoucherNumListCount=homePageVoucherNumList.size();
	
	for (int i = 0; i < homePageVoucherNumListCount; i++)
	{
		String data=homePageVoucherNumList.get(i).getText();
		if (data.equalsIgnoreCase("1"))
		{
			homePageChkboxList.get(i).click();
			break;
		}
	}
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enrtyPageEditBtn));
	enrtyPageEditBtn.click();
    
	boolean loading=checkLoadingMessage();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String actDocno             = documentNumberTxt.getAttribute("value");
	String actVouDate           = dateTxt.getAttribute("value");
	String actDepartment        = departmentTxt.getAttribute("value");
	String actChequeNo          = payments_ChequeNoTxt.getAttribute("value");
	String actPDCNo             = voucherPaymentsHeaderPDCNOTxt.getAttribute("value");
	String actAccount           = select1stRow_1stColumn.getText();
	String actAmount            = select1stRow_2ndColumn.getText();
	String actref               = select1stRow_3rdColumn.getText();

	
    String expDocno               = "1";
	String expDepartment          = "DUBAI";
	String expPDCNo               = "1";
   
	String expChequeNo            = "";
	String expAccount             = "Vendor New Reference";
	String expAmount              = "50.00";
	
	String actFooterAmt   =recepitsFooterAmt.getText();
	String expFooterAmt   ="50.00";

	
	System.out.println("Entry Page Document Number    "+actDocno       +"  value Expected  "+expDocno);
	//System.out.println("Entry Page ChequeNoTxt        "+actChequeNo    +"  value Expected  "+expChequeNo);
	System.out.println("Entry Page Department         "+actDepartment  +"  value Expected  "+expDepartment);
	System.out.println("Entry Page Account            "+actAccount     +"  value Expected  "+expAccount);
	System.out.println("Entry Page Amount             "+actAmount      +"  value Expected  "+expAmount);
	System.out.println("Entry Page  PDC Number        "+actPDCNo       +"  value Expected  "+expPDCNo);
	System.out.println("Entry Page Footer  Amount     "+actFooterAmt   +"  Value Expected  "+expFooterAmt);
	
	
	if (loading==true && actDocno.equalsIgnoreCase(expDocno) &&actDepartment.equalsIgnoreCase(expDepartment) && 
			actAccount.equalsIgnoreCase(expAccount) && actChequeNo.equalsIgnoreCase(expChequeNo) && actAmount.equalsIgnoreCase(expAmount) && 
			actFooterAmt.equalsIgnoreCase(expFooterAmt) )
	
	{
		System.out.println(" Test Pass: The Converted  PDC Voucher is Displayed in Receipts Screen ");
		
		return true;
	}
	else
	{
		System.err.println(" Test Fail: The Converted PDC Voucher is Displayed in Receipts Screen ");
		return false;
	}
	
}

public boolean checkSavingVoucherInPDPVatWithHDFCAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	Thread.sleep(2000);
	

	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
	settingsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsConfigureTransactions));
	settingsConfigureTransactions.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCMenu));
	PDCMenu.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcPostDatedChequeChkbox));
	
	 if (postDatedChequeChkbox.isSelected()==false)
	 {
		 postDatedChequeChkbox.click();
		
	 }
	 
	 if (pdcReseverseAccountpostingOnPDCConversionChkbox.isSelected()==false)
	 {
		 pdcReseverseAccountpostingOnPDCConversionChkbox.click();
		
	 }
	 
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
	updateBtn.click();
	
	Thread.sleep(2000);
	getWaitForAlert();
	

	String actAlert = getAlert().getText();
	String expAlert= "Do you want to save the changes?";
	
	getAlert().accept();
	
    String expValidationMessage="Data saved Successfully";
	
	String actValidationMessage=checkValidationMessage(expValidationMessage);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
	userNameDisplay.click();
		  
	System.out.println("*********Logout Successfully********************************8");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	logoutOption.click();
	
	
	Thread.sleep(2000);
	LoginPage lp=new LoginPage(getDriver()); 
	
	String unamelt="su";
			      
	String pawslt="su";
			      
	lp.enterUserName(unamelt);
	
	Thread.sleep(2000);
			
	lp.enterPassword(pawslt);
	
	
    Thread.sleep(2000);
	
	lp.clickOnSignInBtn();
	
	
	 Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDPVAT));
	PDPVAT.click();
	
	
	Thread.sleep(4000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();
	
	
	checkUserFriendlyMessage();
	
    Thread.sleep(2000);
    

	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
    newCashBankAccountTxt.click();
	
	newCashBankAccountTxt.sendKeys(Keys.SPACE);
	
    int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();
	
    System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);
    
	for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
	{
		String data		  = cashAndBAnkAccountList.get(i).getText();
		
		if(data.equalsIgnoreCase("HDFC"))
		{
			cashAndBAnkAccountList.get(i).click();
			
			break;
		}
	}
	
	newCashBankAccountTxt.sendKeys(Keys.TAB);
	
	
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	
	departmentTxt.sendKeys(Keys.SPACE);
	
	int departmentcount=departmentListCount.size();
	
	System.err.println(departmentcount);
		
	for(int i=0 ; i < departmentcount ;i++)
	{
		String data=departmentListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Dubai"))
		{
			departmentListCount.get(i).click();
			
			break;
		}
	}
		
	 Thread.sleep(2000);
	departmentTxt.sendKeys(Keys.TAB);
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	voucherHeaderCurrency.click();
	
	voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
	
	voucherHeaderCurrency.sendKeys(Keys.SPACE);
	
	int currencycount=currencyListCount.size();
	
	System.err.println(currencycount);
		
	for(int i=0 ; i < currencycount ;i++)
	{
		String data=currencyListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("AED"))
		{
			currencyListCount.get(i).click();
			
			break;
		}
	}
		
	voucherHeaderCurrency.sendKeys(Keys.TAB);
	
	
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.END);
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.SHIFT,Keys.HOME);
	
	PDRVATPlaceOfSupplyTXt.sendKeys("Abu Dhabi");
	
	Thread.sleep(2000);
	
	PDRVATPlaceOfSupplyTXt.sendKeys(Keys.TAB);
	

    Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();
	enter_AccountTxt.click();
	enter_AccountTxt.sendKeys(Keys.SPACE);
	enter_AccountTxt.sendKeys("Vendor Semi");
	Thread.sleep(2000);
	int accountCount=accountListCount.size();
	
	System.err.println(accountCount);
		
	for(int i=0 ; i < accountCount ;i++)
	{
		String data=accountListCount.get(i).getText();
		
		if(data.equalsIgnoreCase("Vendor Semi Reference"))
		{
			accountListCount.get(i).click();
			
			break;
		}
	}
	Thread.sleep(2000);
	enter_AccountTxt.sendKeys(Keys.TAB);
		
		
		enterPVPVATTaxcode.click();
		enterPVPVATTaxcode.sendKeys(Keys.SHIFT,Keys.HOME);
		enterPVPVATTaxcode.sendKeys(Keys.SPACE);
		enterPVPVATTaxcode.sendKeys("std");
		Thread.sleep(2000);
		enterPVPVATTaxcode.sendKeys(Keys.TAB);
		
		enter_Amount.click();
		enter_Amount.clear();
		enter_Amount.sendKeys("5");
		enter_Amount.sendKeys(Keys.TAB);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	    String docno=documentNumberTxt.getAttribute("value");
		
	    Thread.sleep(2000);
	    
	    
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
	
	    String expPartyName = "Vendor Semi Adjustment (Vendor Semi Adjustment)";
	
	
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
	    String actPartyName = billRefPartyName.getText();
		
		 
		System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
		
		Thread.sleep(2000);
		
		int Adjustbills=billRefAdjustBillsGrid.size();
		
		String actAdjustbills=Integer.toString(Adjustbills);
		
		String expAdjustbills="2";
		
		
        int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();
        
        HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();
		
        for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
    	{
    		String data		                              = billwiseAdjustBillsDocList.get(i).getText();
    		actbillwiseAdjustBillsDocList.add(data);
    		
    		if (data.equalsIgnoreCase("OpeBal:1")) 
    		{
    			billwiseAdjustBillsChkBoxList.get(i).click();
    		}
    	}
    	
    	String actDocumentNumberTextRow2=actbillwiseAdjustBillsDocList.toString();
    	
    	String expDocumentNumberTextRow2="[OpeBal:1, NDT52:2]";
    	
       System.out.println(" Bills  : "+actDocumentNumberTextRow2 +" Value Expected  : "+expDocumentNumberTextRow2);
    	
    	String expBillNewReferencePick                          = "0.00";
    	String expBillTransactionCurrencyPick                   = "5.00";
    	String expBillBaseCurrencyPick                          = "70.00"; 
    	String expBillLocalCurrencyPick                         = "5.00";
    	String expBillBalanceNewRefAmountPick                   = "0.00";
    	String expbillRefAdjustAmountInTransCurencyPick         = "5.00";
    	String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";
    	 
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
    	      
    	String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
    	String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
    	String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
    	String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
    	String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
    	String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
    	String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();


    	   
    	System.out.println("*********************************************************************************************************");

    	System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expadjustBills :"+expAdjustbills);
    	
    	
    	
    	
    	Thread.sleep(3000);
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(conversationRateBaseCurrencyRate));
    	String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
    	String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
    	
    	String expactconversationRateBaseCurrencyRatePick  = "14";
    	String expconversationRateLocalCurrencyRatePick = "1";
    	
    	
    	System.out.println("actconversationRateBaseCurrencyRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expactconversationRateBaseCurrencyRatePick);
    	System.out.println("actconversationRateLocalCurrencyRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);

    	   //////Pick

    	System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
    	System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
    	System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
    	System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrencyPick+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrencyPick);
    	System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);

    	System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
    	System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);



    	String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
    	String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
    	String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();

    
    	String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
    	String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
    	String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
    	String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
    	String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

    	String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
    	String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
    	String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
    	String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
    	String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();
    		
    	String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
    	String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
    	String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
    	String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

    	String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
    	String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();

    	String expbreakUpDetailsAccountPick             ="OBC";
    	String expbreakUpDetailsDepartmentPick          ="DUBAI";
    		
    	String expasOnEntryDateTransAmtPick             ="100.00";
    	String expasOnEntryDateBaseConcersationRatePick ="1";
    	String expasOnEntryDateBaseAmountPick           ="100.00";
    	String expasOnEntryDateLocConversationRatePick  ="0.11";
    	String expasOnEntryDateAmtPick                  ="11.00";
    		
    	String expbalOnAdjstDateTransAmtPick            ="70.00";
    	String expbalOnAdjstDateBasrConversionRatePick  ="1";
    	String expbalOnAdjstDateBaseAmountPick          ="70.00";
    	String expbalOnAdjstDateLocalConversionRatePick ="1";
    	String expbalOnAdjstDateAmtPick                 ="70.00";

    	String expadjustmentsAmount1Pick                ="70.00";
    	String expadjustmentsAmount2Pick                ="70.00";
    	String expadjustmentsAmount3Pick                ="70.00";
    	String expadjustmentsAmount4Pick                ="5.00";
    		
    	String expexchangeGainLossForBaseCurrencyPick   ="0.00";	
    	String expexchangeGainLossForLocalCurrencyPick  ="-62.30";

    	
    	int baseAmtListCount=baseAmtList.size();
    	
    	ArrayList<String >baseAmtListArray=new ArrayList<>();
    	for (int i = 0; i < baseAmtListCount; i++) 
    	{
    		String data=baseAmtList.get(i).getText();
    		baseAmtListArray.add(data);
    	}
    	
    	String actbaseAmtList=baseAmtListArray.toString();
    	String expbaseAmtList="[, OpeBal:2 (Y0), 20, 20, , NDT58:2 (Y0), 10, 10]";
    	
    	System.out.println(" baseAmtList Actual : "+actbaseAmtList);
    	System.out.println(" baseAmtList Exp    : "+expbaseAmtList);

    	System.out.println(" Right SIde Elements *****************************************************************************");

    	System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick             +" Value Expected  : "+"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
    	System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick          +" Value Expected  :" +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
    	System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick  +" Value Expected  :" +"expconversationRateBaseCurrencyRatePick :"+expactconversationRateBaseCurrencyRatePick);
    	System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick +" Value Expected  :" + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
    	System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick             +" Value Expected  :" + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
    	System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick+" Value Expected  :" +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
    	System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick           +" Value Expected  :" +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
    	System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick  +" Value Expected  :" +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
    	System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick                  +" Value Expected  :" + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

    	System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick            +" Value Expected  :" +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
    	System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick +" Value Expected  :" +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
    	System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick         +" Value Expected  :" +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
    	System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick+" Value Expected  :" +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
    	System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick               +" Value Expected  :" +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

    	System.out.println("actadjustmentsAmount1Pick :             "+ actadjustmentsAmount1Pick   +" Value Expected  :" +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
    	System.out.println("actadjustmentsAmount2Pick               :"+ actadjustmentsAmount2Pick  +" Value Expected  :" +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
    	System.out.println("actadjustmentsAmount3Pick               :"+ actadjustmentsAmount3Pick  +" Value Expected  :" + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
    	System.out.println("actadjustmentsAmount4Pick               :"+ actadjustmentsAmount4Pick  +" Value Expected  :" +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

    	System.out.println("actexchangeGainLossForBaseCurrencyPick  : "+ actexchangeGainLossForBaseCurrencyPick +" Value Expected  :" +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
    	System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick +" Value Expected  :" +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);



    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
    	billRefOkBtn.click();

    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

    	boolean savingVoucher=checkVoucherSavingMessage(docno);


    	    
    	    if (   actPartyName.equalsIgnoreCase(expPartyName)  && actAdjustbills.equalsIgnoreCase(expAdjustbills)  &&  
    				actbaseAmtList.equalsIgnoreCase(expbaseAmtList)  &&   
    		        
    	    		
    		        actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
    				actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
    				actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  && 
    				actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
    				actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
    				actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick) && 
    				 
    			     
    			     actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
    					actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
    					actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
    					actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
    					actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
    					actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
    					actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick)&&
    					actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
    					actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
    					actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
    					actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
    					actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick))
    		        
    			{
    				System.err.println("Test Pass: Voucher  Saved Successfully  ");
    				return true;
    			}
    			else
    			{
    				System.err.println("Test Fail: Voucher Saved Successfully");
    				return false;
    			}
    	}




public boolean checkReversingPositingInPDCWithPDPVoucher() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
{
	

	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(autoPostingMenu));
	autoPostingMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCSMenu));
	convertMaturedPDCSMenu.click();

	Thread.sleep(3000);
	
	int pdcDOClistCount1=pdcDOClist.size();
	
	for (int i = 0; i < pdcDOClistCount1; i++) 
	{
		
		String data=pdcDOClist.get(i).getText();
		if (data.equalsIgnoreCase("PDP VAT"))
		{
			pdcCheckBoxlist.get(i).click();
			Thread.sleep(2000);
			pdcBanklist.get(i).click();

			Thread.sleep(2000);
			gridEnterBank.click();
			
			Thread.sleep(2000);
			gridEnterBank.sendKeys("BANK");
			
		}
	}
	
	Thread.sleep(2000);
	gridEnterBank.sendKeys(Keys.TAB);

	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertMaturedPDCsOkIcon));
	convertMaturedPDCsOkIcon.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Chkbox));
	pdcGridRow1Chkbox.click();
	
	Thread.sleep(2000);
	String actNumber=pdcGridRow1Col3.getText();
	String expNumber="2";
	
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcGridRow1Col4));
	String actMaturityDate=pdcGridRow1Col4.getText();
	DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
    Date date=new Date();
    String CurrentDate=df.format(date);
	String expMaturityDate=CurrentDate;
	
	
	System.out.println("CurrentDate      : "+CurrentDate);
	System.out.println("Maturity Date    : "+expMaturityDate);
	
	
	String actName=pdcGridRow1Col5.getText();
	String expName="HDFC";
	
	
	String actAmount=pdcGridRow1Col7.getText();
	String expAmount="5.00";

	
	String actReassignedVouNo=pdcGridRow1Col8.getText();
	String expReassignedVouNo="2";
	
	
	System.out.println("******************checkSavedVouchersInPDCVoucherScreenWithOUTPostOnDate********************************");
	System.out.println(" Number         : "+actNumber           +" Value Expected  : "+expNumber);
	System.out.println("Name            : "+actName             +" Value Expected  : "+expName);
	System.out.println("Amount          : "+actAmount           +" Value Expected  : "+expAmount);
	System.out.println("ReassignedVouNo : " +actReassignedVouNo +" Value Expected  : "+expReassignedVouNo);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcVoucherOkIcon));
	pdcVoucherOkIcon.click();
	
	
	String expValidationMessage="Voucher Converted Successfully";
		
	String actValidationMessage=checkValidationMessage(expValidationMessage);
			
	
	if (actNumber.equalsIgnoreCase(expNumber) && actMaturityDate.equalsIgnoreCase(expMaturityDate)&&actValidationMessage.equalsIgnoreCase(expValidationMessage) && 
			actName.equalsIgnoreCase(expName) &&actAmount.equalsIgnoreCase(expAmount) &&  actReassignedVouNo.equalsIgnoreCase(expReassignedVouNo))
	{
		System.out.println("***********Test Pass :  Only one Row is Displayed ");
		return true;

	} 
	else 
	{
		System.err.println("--------Test Fail : Not displayed  one Row ");
		return false;
	}
	
}


public boolean checkPostedVoucherInPaymentsWithReversePosting() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{

   	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
	finacinalsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
	financialsTransactionMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
	cashAndBankMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentsVoucher));
	paymentsVoucher.click();
	
	Thread.sleep(2000);
	
	Thread.sleep(2000);
	
	
	int homePageVoucherNumListCount=homePageVoucherNumList.size();
	
	for (int i = 0; i < homePageVoucherNumListCount; i++)
	{
		String data=homePageVoucherNumList.get(i).getText();
		if (data.equalsIgnoreCase("2"))
		{
			homePageChkboxList.get(i).click();
			break;
		}
	}
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enrtyPageEditBtn));
	enrtyPageEditBtn.click();
    
	boolean loading=checkLoadingMessage();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String actDocno             = documentNumberTxt.getAttribute("value");
	String actVouDate           = dateTxt.getAttribute("value");
	String actDepartment        = departmentTxt.getAttribute("value");
	String actHeaderAcc         = newCashBankAccountTxt.getAttribute("value");
	String actPDCNo             = voucherPaymentsHeaderPDCNOTxt.getAttribute("value");
	String actAccount           = select1stRow_1stColumn.getText();
	String actAmount            = select1stRow_2ndColumn.getText();
	String actref               = select1stRow_3rdColumn.getText();

	
    String expDocno               = "2";
	String expDepartment          = "DUBAI";
	String expHederAcc            ="Bank";
	String expPDCNo               = "2";
	String expAccount             = "HDFC";
	String expAmount              = "5.00";
	
	String actFooterAmt   =recepitsFooterAmt.getText();
	String expFooterAmt   ="5.00";

	
	System.out.println("Entry Page Document Number    "+actDocno       +"  value Expected  "+expDocno);
	System.out.println("Entry Page actHeaderAcc        "+actHeaderAcc    +"  value Expected  "+expHederAcc);
	System.out.println("Entry Page Department         "+actDepartment  +"  value Expected  "+expDepartment);
	System.out.println("Entry Page Account            "+actAccount     +"  value Expected  "+expAccount);
	System.out.println("Entry Page Amount             "+actAmount      +"  value Expected  "+expAmount);
	System.out.println("Entry Page  PDC Number        "+actPDCNo       +"  value Expected  "+expPDCNo);
	System.out.println("Entry Page Footer  Amount     "+actFooterAmt   +"  Value Expected  "+expFooterAmt);
	
	
	if (loading==true && actDocno.equalsIgnoreCase(expDocno) &&actDepartment.equalsIgnoreCase(expDepartment) && 
			actAccount.equalsIgnoreCase(expAccount) && actHeaderAcc.equalsIgnoreCase(expHederAcc) && actAmount.equalsIgnoreCase(expAmount) && 
			actFooterAmt.equalsIgnoreCase(expFooterAmt) )
	
	{
		System.out.println(" Test Pass: The Converted  PDC Voucher is Displayed in Receipts Screen ");
		
		return true;
	}
	else
	{
		System.err.println(" Test Fail: The Converted PDC Voucher is Displayed in Receipts Screen ");
		return false;
	}
	

	
}

//reports 


// FA REPORTS


 
	    
	@FindBy(xpath="//*[@id='500']/span")
	private static WebElement  ledger;
	
	@FindBy(xpath="//*[@id='658']/span")
	private static WebElement  ledgerDetail;
				
	@FindBy(xpath="//*[@id='501']/span")
	private static WebElement  subLedger;
	
	@FindBy(xpath="//*[@id='82']/span")
	private static WebElement  cashAndBankBooksMenu;
	
	@FindBy(xpath="//*[@id='510']/span")
	private static WebElement  cashBookReport;
	
	@FindBy(xpath="//*[@id='511']/span")
	private static WebElement  bankBookReport;
	
	@FindBy(xpath="//*[@id='512']/span")
	private static WebElement  pettyCashBokReport;
	
	@FindBy(xpath="//*[@id='513']/span")
	private static WebElement  dayBookReport;
	
	@FindBy(xpath="//*[@id='83']/span")
	private static WebElement  bankReconciliationReport;
	
	@FindBy(xpath="//*[@id='84']/span")
	private static WebElement  bankReconciliationImport;
	
	@FindBy(xpath="//*[@id='85']/span")
	private static WebElement  customerVendorReconciliation;

	@FindBy(xpath="//*[@id='537']/span")
	private static WebElement  bankReconciliationStatement;
		
	@FindBy(xpath="//*[@id='162']/span")
	private static WebElement chequeDiscountingMenu;
			
	@FindBy(xpath="//*[@id='502']/span")
	private static WebElement  salesReportsMenu;
	
	@FindBy(xpath="//*[@id='503']/span")
	private static WebElement  salesRegisterReport;

	@FindBy(xpath="//*[@id='504']/span")
	private static WebElement  salesReturnRegisterReport;
	
	@FindBy(xpath="//*[@id='505']/span")
	private static WebElement summarySalesBookReport;
	
	@FindBy(xpath="//*[@id='628']/span")
	private static WebElement monthlySalesBookReport;
	
	@FindBy(xpath="//*[@id='629']/span")
	private static WebElement  topCustomersListReport;
			
	@FindBy(xpath="//*[@id='506']/span")
	private static WebElement  purchaseReportsMenu;
			
	@FindBy(xpath="//*[@id='507']/span")
	private static WebElement  purchaseRegisterReport;
	
	@FindBy(xpath="//*[@id='508']/span")
	private static WebElement  purchaseReturnRegisteReport;
	
	@FindBy(xpath="//*[@id='509']/span")
	private static WebElement  summaryPurchaseBookReport;
						
	@FindBy(xpath="//*[@id='514']/span")
	private static WebElement  registersReportMenu;
			
	@FindBy(xpath="//*[@id='516']/span")
	private static WebElement  openingBalanceRegisterReport;
	
	@FindBy(xpath="//*[@id='515']/span")
	private static WebElement journalEntriesRegisterReport;
	
	@FindBy(xpath="//span[contains(text(),'Credit Note Register')]")
	private static WebElement creditNoteRegisterReport;
	
	@FindBy(xpath="//*[@id='610']/span")
	private static WebElement  debitNoteRegisterReport;
	
	@FindBy(xpath="//*[@id='598']/span")
	private static WebElement  receiptsRegisterReport;
	
	@FindBy(xpath="//*[@id='599']/span")
	private static WebElement  paymentRegisterReport;
	
	@FindBy(xpath="//*[@id='518']/span")
	private static WebElement  pdcReceiptsRegisterReport;
	
	@FindBy(xpath="//*[@id='519']/span")
	private static WebElement pdcPaymentsRegisterReport;
	
	@FindBy(xpath="//*[@id='517']/span")
	private static WebElement  entryJournalRegisterReport;
	
	@FindBy(xpath="//span[contains(text(),'Entry journal detail report')]")
	private static WebElement  entryJournalDetailReport;
	
						
	@FindBy(xpath="//*[@id='523']/span")
	private static WebElement  salesAndPurchasesReportMenu;
			
	@FindBy(xpath="//*[@id='524']/span")
	private static WebElement  salesGroupedByCustomerReport;
	
	@FindBy(xpath="//*[@id='525']/span")
	private static WebElement  salesGroupedByProductReport;
	
	@FindBy(xpath="//*[@id='526']/span")
	private static WebElement  salesGroupedByDepartmentReport;
	
	@FindBy(xpath="//*[@id='527']/span")
	private static WebElement  purchasesGroupedByVendorReport;
	
	@FindBy(xpath="//*[@id='528']/span")
	private static WebElement  purchasesGroupedByProductReport;
	
	@FindBy(xpath="//*[@id='529']/span")
	private static WebElement  purchasesGroupedByDepartmentReport;		
			
	@FindBy(xpath="//*[@id='568']/span")
	private static WebElement  MiscellaneousAnalysisReportMenu;
			
	@FindBy(xpath="//*[@id='569']/span")
	private static WebElement  peakAndLowBalancesReport;
	
	@FindBy(xpath="//*[@id='570']/span")
	private static WebElement  comprativeAnalysisReport;
	
	@FindBy(xpath="//*[@id='571']/span")
	private static WebElement  transactionsTypeAnalysisReport;
	
	@FindBy(xpath="//*[@id='572']/span")
	private static WebElement  abcAnalysisReport;
	
	@FindBy(xpath="//*[@id='597']/span")
	private static WebElement  interestCalculationReport;

	@FindBy(xpath="//*[@id='536']/span")
	private static WebElement  mastersInformationMenu;
			
 	@FindBy(xpath="//*[@id='538']/span")
	private static WebElement  masterInfoMenu;
	
	@FindBy(xpath="//*[@id='144']/span")
	private static WebElement  productLabelMenu;
	
	@FindBy(xpath="//*[@id='573']/span")
	private static WebElement  unitConversionMenu;
		
	@FindBy(xpath="//*[@id='147']/span")
	private static WebElement  skidDefinitionMenu;
								
	@FindBy(xpath="//*[@id='520']/span")
	private static WebElement  auditTrailMenu;
			
	@FindBy(xpath="//*[@id='521']/span")
	private static WebElement  auditTrailtransactionsReport;
	
	@FindBy(xpath="//*[@id='522']/span")
	private static WebElement  aAuditTrailloginsReport;
			
	@FindBy(xpath="//*[@id='204']/span")
	private static WebElement  accountQuery;
	
	@FindBy(xpath="//span[contains(text(),'Transaction authorization report')]")
	private static WebElement  transactionAuthorizationReport;
	
	
	
	
	@FindBy(xpath="//*[@id='711']//span[contains(text(),'Master authorization report')]")
	private static WebElement  masterAuthorizationReport;
	
	
	
	
	@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeId']")
	private static WebElement sl_Dropdown1;
	
	@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeViewId']")
	private static WebElement sl_Dropdown2;
	
	@FindBy(xpath="//label[@id='oncheckaccorderan']")
	private static WebElement sl_oncheckBtn;
	
	@FindBy(xpath="//input[@id='txtsrch-term']")
	private static WebElement sl_SearhItemTxt;
	
	@FindBy(xpath="//i[contains(@class,'icon-search theme_color-inverse')]")
	private static WebElement sl_SearchBtn;
	
	@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
	private static WebElement sl_MasterTypeTxt;
	
	@FindBy(xpath="//span[contains(@class,'icon-font6 icon-external-module theme_icon-color')]")
	private static WebElement sl_AutoAdjustColumnsBtn;
	
	@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
	private static WebElement sl_ItemGroupsBtn;
	
	@FindBy(xpath="//input[@id='liSelectAllMasters']")
	private static WebElement sl_HeaderSelectChkBox;
	
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-schedule')]")
	private static WebElement sl_ScheduleBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-custamize')]")
	private static WebElement sl_CustomizeBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-filter')]")
	private static WebElement sl_FilterBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-ok')]")
	private static WebElement sl_OkBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-close')]")
	private static WebElement sl_CloseBtn;
	
	@FindBy(xpath="//select[@id='DateOptions_']")
	private static WebElement sl_DateOptionDropdown;
	
	@FindBy(xpath="//input[@id='id_starting_date_']")
	private static WebElement sl_StartDateTxt;
	
	@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
	private static WebElement sl_StartDateCalanderBtn;
	
	@FindBy(xpath="//input[@id='id_ending_date_']")
	private static WebElement sl_EndDateTxt;
	
	@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
	private static WebElement sl_EndDateCalanderBtn;
	
	@FindBy(xpath="//input[@id='RITCheckbox__3']")
	private static WebElement sl_IncludeServiceTypeItemChkBox;
	
	@FindBy(xpath="//select[@id='RITLayout_']")
	private static WebElement sl_LayoutDropdown;
	
	@FindBy(xpath="//select[@id='RITOutput_']")
	private static WebElement sl_OutputDropdown;
	
	@FindBy(xpath="//input[@id='selectAllMasters_']")
	private static WebElement sl_SelectAllItemsChkBox;
	
	@FindBy(xpath="//div[contains(@class,'first')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_FirstBtn;
	
	@FindBy(xpath="//div[contains(@class,'prev')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_PreviousBtn;
	
	@FindBy(xpath="//input[@id='btn1']")
	private static WebElement sl_PageBtn;
	
	@FindBy(xpath="//div[contains(@class,'next')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_NextBtn;
	
	@FindBy(xpath="//div[contains(@class,'End')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_EndBtn;
	
	@FindBy(xpath="//tr[1]//td[8]//div[1]//label[1]")
	private static WebElement sl_1stRowChkBox;
	
	@FindBy(xpath="//tr[2]//td[8]//div[1]//label[1]")
	private static WebElement sl_2ndRowChkBox;
	
	////////

	@FindBy(xpath="//span[@id='reportSort']")
	private static WebElement report_sortingBtn;
			
	@FindBy(xpath="//span[@id='reportRefresh']")
	private static WebElement report_RefreshBtn;
			
	@FindBy(xpath="//span[@id='print_report_']")
	private static WebElement report_PrintBtn;
			
	@FindBy(xpath="//*[@id='reportRenderControls']/ul/li/span[4]")
	private static WebElement report_ExportBtn;
	
	/*@FindBy(xpath="//i[contains(@class,'theme_button_color dropdown-toggle')]")
	private static WebElement report_sortingBtn;
			
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-refresh')]")
	private static WebElement report_RefreshBtn;
			
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-print')]")
	private static WebElement report_PrintBtn;
			
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-export')]")
	private static WebElement report_ExportBtn;*/
			
	/*@FindBy(xpath="//i[contains(@class,'icon-font6 icon-graph ImagesinArabic')]")
	private static WebElement report_GraphBtn;*/
	
	@FindBy(xpath="//span[@id='GraphIcon']")
	private static WebElement report_GraphBtn;
			
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-backtrack')]")
	private static WebElement report_BackTrackBtn;
			
	/*@FindBy(xpath="//span[@id='reportCustomize_']//i[contains(@class,'icon-font6 icon-custamize')]")
	private static WebElement report_ReportCustomizeBtn;*/
	
	@FindBy(xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[7]")
	private static WebElement report_ReportCustomizeBtn;
	
	/*@FindBy(xpath="//span[@id='filterIcon_']//i[contains(@class,'icon-font6 icon-filter')]")
	private static WebElement report_FilterBtn;*/
	
	@FindBy(xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[8]")
	private static WebElement report_FilterBtn;
	
	@FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
	private static WebElement  report_FilterCustomizeBtn;
	
	@FindBy(xpath="//span[@id='a']")
	private static WebElement  report_Filter_FilterBtn;
	
	@FindBy(xpath="//*[@id='551_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
	private static WebElement  reportsAdvanced_WhereDropDown;
	
	@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
	private static WebElement  reportsAdvanced_SelectFielddropdown;
	
	@FindBy(xpath="//table/tbody/tr/td[3]/select")
	private static WebElement  reportsAdvanced_SelectOperatorDropDown;
	
	@FindBy(xpath="//table/tbody/tr/td[4]/select")
	private static WebElement  reportsAdvanced_ComparewithDropDown;
	
	@FindBy(xpath="//table/tbody/tr/td[5]/input")
	private static WebElement  reportsAdvanced_ValueTxt;
	
	@FindBy(xpath="//input[@id='advancefilter_master_551_0']")
	private static WebElement  reportsAdvanced_EnterValue;
	
	@FindBy(xpath="//table/tbody/tr/td[7]/span")
	private static WebElement  reportsAdvanced_AddIconBtn;
	
	@FindBy(xpath="//table/tbody/tr/td[6]/span")
	private static WebElement  reportsAdvanced_DeleteIcon1Btn;
	
	@FindBy(xpath="//table/tbody/tr[2]/td[6]/span")
	private static WebElement  reportsAdvanced__DeleteIcon2Btn;
	
	@FindBy(xpath="//div[@id='filterTree_551_0_AdvanceFilter']//a[@id='536870916']")
	private static WebElement  reports_AdvancedFilter_SelectField_WH_ExpandBtn;
	
	@FindBy(xpath="//div[@id='filterTree_551_0_AdvanceFilter']//a[@id='5058']")
	private static WebElement  reports_AdvancedFilter_SelectField_WH_NameBtn;
	
	@FindBy(xpath="//input[@id='chkSaveFilter']")
	private static WebElement  report_FilterSaveFilterPermanentlyChkBox;
	
	@FindBy(xpath="//span[@id='filterRefresh']")
	private static WebElement  report_Filter_RefreshBtn;
	
	@FindBy(xpath="//tbody/tr[1]/td[6]/span[1]")
	private static WebElement  report_Filter_RefreshConditionBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon icon-ok')]")
	private static WebElement  report_FilterOkBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
	private static WebElement  report_FilterCancelBtn;
			
	@FindBy(xpath="//div[@id='dvfilter_']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
	private static WebElement report_FilterDownBtn;
			
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-analyze')]")
	private static WebElement report_AnalyzeBtn;
			
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-cross-reference')]")
	private static WebElement report_CrossReferenceBtn;
			
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-options')]")
	private static WebElement report_OptionsBtn;
			
	@FindBy(xpath="//div[@id='dvoptions_']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
	private static WebElement report_OptionsDownBtn;
			
	/*@FindBy(xpath="//span[@id='reportClose_']//i[contains(@class,'icon-font6 icon-close')]")
	private static WebElement report_CloseBtn;
			
	@FindBy(xpath="//button[@id='frstPage_']")
	private static WebElement report_FirstBtn;
			
	@FindBy(xpath="//button[@id='prvPage_']")
	private static WebElement report_PreviousBtn;
			
	@FindBy(xpath="//button[@id='pgnumber_']")
	private static WebElement report_PageNoBtn;
			
	@FindBy(xpath="/html/body/section/div[2]/div/section[1]/section[2]/div[1]/div[3]/div[2]/button[4]")
	private static WebElement report_NextBtn;
			
	@FindBy(xpath="//button[@id='lstPage_']")
	private static WebElement report_LastBtn;*/
	
	@FindBy(xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[12]")
	private static WebElement report_CloseBtn;
	
	@FindBy (xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[13]")
	private static WebElement reportWithLevel_CloseBtn;
			
	@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[1]")
	private static WebElement report_FirstBtn;
			
	@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[2]")
	private static WebElement report_PreviousBtn;
			
	@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[3]")
	private static WebElement report_PageNoBtn;
			
	@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[4]")
	private static WebElement report_NextBtn;
			
	@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[5]")
	private static WebElement report_LastBtn;
	
	@FindBy(xpath="//input[@id='txtSearchReport']")
	private static WebElement report_SearchTxt;
	
	
	
	@FindBy(xpath="//*[@id='trRender_0']/td[1]")
	private static WebElement sl_1stRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_0']/td[2]")
	private static WebElement sl_1stRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[3]")
	private static WebElement sl_1stRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[4]")
	private static WebElement sl_1stRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[5]")
	private static WebElement sl_1stRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[6]")
	private static WebElement sl_1stRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[7]")
	private static WebElement sl_1stRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[8]")
	private static WebElement sl_1stRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[9]")
	private static WebElement sl_1stRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[10]")
	private static WebElement sl_1stRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[11]")
	private static WebElement sl_1stRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[12]")
	private static WebElement sl_1stRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[13]")
	private static WebElement sl_1stRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[14]")
	private static WebElement sl_1stRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[15]")
	private static WebElement sl_1stRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[16]")
	private static WebElement sl_1stRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[17]")
	private static WebElement sl_1stRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[18]")
	private static WebElement sl_1stRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[19]")
	private static WebElement sl_1stRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[20]")
	private static WebElement sl_1stRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[21]")
	private static WebElement sl_1stRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[22]")
	private static WebElement sl_1stRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[23]")
	private static WebElement sl_1stRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[24]")
	private static WebElement sl_1stRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[25]")
	private static WebElement sl_1stRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[26]")
	private static WebElement sl_1stRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[27]")
	private static WebElement sl_1stRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[28]")
	private static WebElement sl_1stRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[29]")
	private static WebElement sl_1stRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[30]")
	private static WebElement sl_1stRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[31]")
	private static WebElement sl_1stRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[32]")
	private static WebElement sl_1stRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[33]")
	private static WebElement sl_1stRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[34]")
	private static WebElement sl_1stRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[35]")
	private static WebElement sl_1stRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[36]")
	private static WebElement sl_1stRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[37]")
	private static WebElement sl_1stRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[38]")
	private static WebElement sl_1stRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[39]")
	private static WebElement sl_1stRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[40]")
	private static WebElement sl_1stRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[41]")
	private static WebElement sl_1stRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[42]")
	private static WebElement sl_1stRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[43]")
	private static WebElement sl_1stRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[44]")
	private static WebElement sl_1stRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[45]")
	private static WebElement sl_1stRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[46]")
	private static WebElement sl_1stRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[47]")
	private static WebElement sl_1stRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[48]")
	private static WebElement sl_1stRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[49]")
	private static WebElement sl_1stRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_0']/td[50]")
	private static WebElement sl_1stRow50thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_1']/td[1]")
	private static WebElement sl_2ndRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_1']/td[2]")
	private static WebElement sl_2ndRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[3]")
	private static WebElement sl_2ndRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[4]")
	private static WebElement sl_2ndRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[5]")
	private static WebElement sl_2ndRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[6]")
	private static WebElement sl_2ndRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[7]")
	private static WebElement sl_2ndRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[8]")
	private static WebElement sl_2ndRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[9]")
	private static WebElement sl_2ndRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[10]")
	private static WebElement sl_2ndRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[11]")
	private static WebElement sl_2ndRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[12]")
	private static WebElement sl_2ndRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[13]")
	private static WebElement sl_2ndRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[14]")
	private static WebElement sl_2ndRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[15]")
	private static WebElement sl_2ndRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[16]")
	private static WebElement sl_2ndRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[17]")
	private static WebElement sl_2ndRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[18]")
	private static WebElement sl_2ndRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[19]")
	private static WebElement sl_2ndRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[20]")
	private static WebElement sl_2ndRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[21]")
	private static WebElement sl_2ndRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[22]")
	private static WebElement sl_2ndRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[23]")
	private static WebElement sl_2ndRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[24]")
	private static WebElement sl_2ndRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[25]")
	private static WebElement sl_2ndRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[26]")
	private static WebElement sl_2ndRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[27]")
	private static WebElement sl_2ndRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[28]")
	private static WebElement sl_2ndRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[29]")
	private static WebElement sl_2ndRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[30]")
	private static WebElement sl_2ndRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[31]")
	private static WebElement sl_2ndRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[32]")
	private static WebElement sl_2ndRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[33]")
	private static WebElement sl_2ndRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[34]")
	private static WebElement sl_2ndRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[35]")
	private static WebElement sl_2ndRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[36]")
	private static WebElement sl_2ndRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[37]")
	private static WebElement sl_2ndRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[38]")
	private static WebElement sl_2ndRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[39]")
	private static WebElement sl_2ndRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[40]")
	private static WebElement sl_2ndRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[41]")
	private static WebElement sl_2ndRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[42]")
	private static WebElement sl_2ndRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[43]")
	private static WebElement sl_2ndRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[44]")
	private static WebElement sl_2ndRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[45]")
	private static WebElement sl_2ndRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[46]")
	private static WebElement sl_2ndRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[47]")
	private static WebElement sl_2ndRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[48]")
	private static WebElement sl_2ndRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[49]")
	private static WebElement sl_2ndRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[50]")
	private static WebElement sl_2ndRow50thCol;
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_2']/td[1]")
	private static WebElement sl_3rdRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_2']/td[2]")
	private static WebElement sl_3rdRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[3]")
	private static WebElement sl_3rdRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[4]")
	private static WebElement sl_3rdRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[5]")
	private static WebElement sl_3rdRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[6]")
	private static WebElement sl_3rdRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[7]")
	private static WebElement sl_3rdRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[8]")
	private static WebElement sl_3rdRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[9]")
	private static WebElement sl_3rdRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[10]")
	private static WebElement sl_3rdRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[11]")
	private static WebElement sl_3rdRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[12]")
	private static WebElement sl_3rdRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[13]")
	private static WebElement sl_3rdRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[14]")
	private static WebElement sl_3rdRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[15]")
	private static WebElement sl_3rdRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[16]")
	private static WebElement sl_3rdRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[17]")
	private static WebElement sl_3rdRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[18]")
	private static WebElement sl_3rdRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[19]")
	private static WebElement sl_3rdRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[20]")
	private static WebElement sl_3rdRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[21]")
	private static WebElement sl_3rdRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[22]")
	private static WebElement sl_3rdRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[23]")
	private static WebElement sl_3rdRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[24]")
	private static WebElement sl_3rdRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[25]")
	private static WebElement sl_3rdRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[26]")
	private static WebElement sl_3rdRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[27]")
	private static WebElement sl_3rdRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[28]")
	private static WebElement sl_3rdRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[29]")
	private static WebElement sl_3rdRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[30]")
	private static WebElement sl_3rdRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[31]")
	private static WebElement sl_3rdRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[32]")
	private static WebElement sl_3rdRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[33]")
	private static WebElement sl_3rdRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[34]")
	private static WebElement sl_3rdRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[35]")
	private static WebElement sl_3rdRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[36]")
	private static WebElement sl_3rdRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[37]")
	private static WebElement sl_3rdRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[38]")
	private static WebElement sl_3rdRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[39]")
	private static WebElement sl_3rdRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[40]")
	private static WebElement sl_3rdRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[41]")
	private static WebElement sl_3rdRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[42]")
	private static WebElement sl_3rdRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[43]")
	private static WebElement sl_3rdRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[44]")
	private static WebElement sl_3rdRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[45]")
	private static WebElement sl_3rdRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[46]")
	private static WebElement sl_3rdRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[47]")
	private static WebElement sl_3rdRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[48]")
	private static WebElement sl_3rdRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[49]")
	private static WebElement sl_3rdRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[50]")
	private static WebElement sl_3rdRow50thCol;
	
	
	
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_3']/td[1]")
	private static WebElement sl_4thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_3']/td[2]")
	private static WebElement sl_4thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[3]")
	private static WebElement sl_4thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[4]")
	private static WebElement sl_4thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[5]")
	private static WebElement sl_4thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[6]")
	private static WebElement sl_4thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[7]")
	private static WebElement sl_4thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[8]")
	private static WebElement sl_4thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[9]")
	private static WebElement sl_4thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[10]")
	private static WebElement sl_4thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[11]")
	private static WebElement sl_4thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[12]")
	private static WebElement sl_4thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[13]")
	private static WebElement sl_4thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[14]")
	private static WebElement sl_4thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[15]")
	private static WebElement sl_4thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[16]")
	private static WebElement sl_4thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[17]")
	private static WebElement sl_4thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[18]")
	private static WebElement sl_4thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[19]")
	private static WebElement sl_4thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[20]")
	private static WebElement sl_4thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_3']/td[21]")
	private static WebElement sl_4thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[22]")
	private static WebElement sl_4thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[23]")
	private static WebElement sl_4thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[24]")
	private static WebElement sl_4thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[25]")
	private static WebElement sl_4thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[26]")
	private static WebElement sl_4thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[27]")
	private static WebElement sl_4thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[28]")
	private static WebElement sl_4thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[29]")
	private static WebElement sl_4thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[30]")
	private static WebElement sl_4thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[31]")
	private static WebElement sl_4thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[32]")
	private static WebElement sl_4thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[33]")
	private static WebElement sl_4thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[34]")
	private static WebElement sl_4thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[35]")
	private static WebElement sl_4thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[36]")
	private static WebElement sl_4thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[37]")
	private static WebElement sl_4thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[38]")
	private static WebElement sl_4thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[39]")
	private static WebElement sl_4thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[40]")
	private static WebElement sl_4thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[41]")
	private static WebElement sl_4thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[42]")
	private static WebElement sl_4thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[43]")
	private static WebElement sl_4thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[44]")
	private static WebElement sl_4thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[45]")
	private static WebElement sl_4thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[46]")
	private static WebElement sl_4thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[47]")
	private static WebElement sl_4thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[48]")
	private static WebElement sl_4thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[49]")
	private static WebElement sl_4thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[50]")
	private static WebElement sl_4thRow50thCol;
	
	

	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_4']/td[1]")
	private static WebElement sl_5thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_4']/td[2]")
	private static WebElement sl_5thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[3]")
	private static WebElement sl_5thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[4]")
	private static WebElement sl_5thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[5]")
	private static WebElement sl_5thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[6]")
	private static WebElement sl_5thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[7]")
	private static WebElement sl_5thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[8]")
	private static WebElement sl_5thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[9]")
	private static WebElement sl_5thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[10]")
	private static WebElement sl_5thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[11]")
	private static WebElement sl_5thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[12]")
	private static WebElement sl_5thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[13]")
	private static WebElement sl_5thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[14]")
	private static WebElement sl_5thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[15]")
	private static WebElement sl_5thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[16]")
	private static WebElement sl_5thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[17]")
	private static WebElement sl_5thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[18]")
	private static WebElement sl_5thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[19]")
	private static WebElement sl_5thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[20]")
	private static WebElement sl_5thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_4']/td[21]")
	private static WebElement sl_5thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[22]")
	private static WebElement sl_5thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[23]")
	private static WebElement sl_5thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[24]")
	private static WebElement sl_5thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[25]")
	private static WebElement sl_5thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[26]")
	private static WebElement sl_5thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[27]")
	private static WebElement sl_5thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[28]")
	private static WebElement sl_5thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[29]")
	private static WebElement sl_5thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[30]")
	private static WebElement sl_5thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[31]")
	private static WebElement sl_5thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[32]")
	private static WebElement sl_5thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[33]")
	private static WebElement sl_5thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[34]")
	private static WebElement sl_5thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[35]")
	private static WebElement sl_5thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[36]")
	private static WebElement sl_5thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[37]")
	private static WebElement sl_5thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[38]")
	private static WebElement sl_5thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[39]")
	private static WebElement sl_5thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[40]")
	private static WebElement sl_5thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[41]")
	private static WebElement sl_5thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[42]")
	private static WebElement sl_5thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[43]")
	private static WebElement sl_5thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[44]")
	private static WebElement sl_5thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[45]")
	private static WebElement sl_5thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[46]")
	private static WebElement sl_5thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[47]")
	private static WebElement sl_5thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[48]")
	private static WebElement sl_5thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[49]")
	private static WebElement sl_5thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[50]")
	private static WebElement sl_5thRow50thCol;
	
	
	
	

	
	@FindBy(xpath="//*[@id='trRender_5']/td[1]")
	private static WebElement sl_6thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_5']/td[2]")
	private static WebElement sl_6thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[3]")
	private static WebElement sl_6thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[4]")
	private static WebElement sl_6thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[5]")
	private static WebElement sl_6thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[6]")
	private static WebElement sl_6thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[7]")
	private static WebElement sl_6thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[8]")
	private static WebElement sl_6thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[9]")
	private static WebElement sl_6thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[10]")
	private static WebElement sl_6thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[11]")
	private static WebElement sl_6thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[12]")
	private static WebElement sl_6thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[13]")
	private static WebElement sl_6thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[14]")
	private static WebElement sl_6thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[15]")
	private static WebElement sl_6thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[16]")
	private static WebElement sl_6thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[17]")
	private static WebElement sl_6thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[18]")
	private static WebElement sl_6thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[19]")
	private static WebElement sl_6thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[20]")
	private static WebElement sl_6thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_5']/td[21]")
	private static WebElement sl_6thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[22]")
	private static WebElement sl_6thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[23]")
	private static WebElement sl_6thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[24]")
	private static WebElement sl_6thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[25]")
	private static WebElement sl_6thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[26]")
	private static WebElement sl_6thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[27]")
	private static WebElement sl_6thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[28]")
	private static WebElement sl_6thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[29]")
	private static WebElement sl_6thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[30]")
	private static WebElement sl_6thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[31]")
	private static WebElement sl_6thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[32]")
	private static WebElement sl_6thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[33]")
	private static WebElement sl_6thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[34]")
	private static WebElement sl_6thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[35]")
	private static WebElement sl_6thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[36]")
	private static WebElement sl_6thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[37]")
	private static WebElement sl_6thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[38]")
	private static WebElement sl_6thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[39]")
	private static WebElement sl_6thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[40]")
	private static WebElement sl_6thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[41]")
	private static WebElement sl_6thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[42]")
	private static WebElement sl_6thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[43]")
	private static WebElement sl_6thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[44]")
	private static WebElement sl_6thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[45]")
	private static WebElement sl_6thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[46]")
	private static WebElement sl_6thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[47]")
	private static WebElement sl_6thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[48]")
	private static WebElement sl_6thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[49]")
	private static WebElement sl_6thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[50]")
	private static WebElement sl_6thRow50thCol;
	
	
	
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_6']/td[1]")
	private static WebElement sl_7thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_6']/td[2]")
	private static WebElement sl_7thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[3]")
	private static WebElement sl_7thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[4]")
	private static WebElement sl_7thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[5]")
	private static WebElement sl_7thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[6]")
	private static WebElement sl_7thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[7]")
	private static WebElement sl_7thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[8]")
	private static WebElement sl_7thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[9]")
	private static WebElement sl_7thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[10]")
	private static WebElement sl_7thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[11]")
	private static WebElement sl_7thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[12]")
	private static WebElement sl_7thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[13]")
	private static WebElement sl_7thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[14]")
	private static WebElement sl_7thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[15]")
	private static WebElement sl_7thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[16]")
	private static WebElement sl_7thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[17]")
	private static WebElement sl_7thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[18]")
	private static WebElement sl_7thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[19]")
	private static WebElement sl_7thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[20]")
	private static WebElement sl_7thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_7']/td[1]")
	private static WebElement sl_8thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_7']/td[2]")
	private static WebElement sl_8thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[3]")
	private static WebElement sl_8thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[4]")
	private static WebElement sl_8thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[5]")
	private static WebElement sl_8thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[6]")
	private static WebElement sl_8thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[7]")
	private static WebElement sl_8thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[8]")
	private static WebElement sl_8thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[9]")
	private static WebElement sl_8thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[10]")
	private static WebElement sl_8thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[11]")
	private static WebElement sl_8thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[12]")
	private static WebElement sl_8thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[13]")
	private static WebElement sl_8thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[14]")
	private static WebElement sl_8thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[15]")
	private static WebElement sl_8thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[16]")
	private static WebElement sl_8thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[17]")
	private static WebElement sl_8thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[18]")
	private static WebElement sl_8thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[19]")
	private static WebElement sl_8thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[20]")
	private static WebElement sl_8thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_8']/td[1]")
	private static WebElement sl_9thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_8']/td[2]")
	private static WebElement sl_9thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[3]")
	private static WebElement sl_9thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[4]")
	private static WebElement sl_9thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[5]")
	private static WebElement sl_9thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[6]")
	private static WebElement sl_9thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[7]")
	private static WebElement sl_9thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[8]")
	private static WebElement sl_9thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[9]")
	private static WebElement sl_9thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[10]")
	private static WebElement sl_9thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[11]")
	private static WebElement sl_9thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[12]")
	private static WebElement sl_9thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[13]")
	private static WebElement sl_9thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[14]")
	private static WebElement sl_9thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[15]")
	private static WebElement sl_9thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[16]")
	private static WebElement sl_9thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[17]")
	private static WebElement sl_9thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[18]")
	private static WebElement sl_9thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[19]")
	private static WebElement sl_9thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[20]")
	private static WebElement sl_9thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_9']/td[1]")
	private static WebElement sl_10thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_9']/td[2]")
	private static WebElement sl_10thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[3]")
	private static WebElement sl_10thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[4]")
	private static WebElement sl_10thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[5]")
	private static WebElement sl_10thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[6]")
	private static WebElement sl_10thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[7]")
	private static WebElement sl_10thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[8]")
	private static WebElement sl_10thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[9]")
	private static WebElement sl_10thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[10]")
	private static WebElement sl_10thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[11]")
	private static WebElement sl_10thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[12]")
	private static WebElement sl_10thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[13]")
	private static WebElement sl_10thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[14]")
	private static WebElement sl_10thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[15]")
	private static WebElement sl_10thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[16]")
	private static WebElement sl_10thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[17]")
	private static WebElement sl_10thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[18]")
	private static WebElement sl_10thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[19]")
	private static WebElement sl_10thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[20]")
	private static WebElement sl_10thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_10']/td[1]")
	private static WebElement sl_11thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_10']/td[2]")
	private static WebElement sl_11thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[3]")
	private static WebElement sl_11thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[4]")
	private static WebElement sl_11thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[5]")
	private static WebElement sl_11thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[6]")
	private static WebElement sl_11thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[7]")
	private static WebElement sl_11thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[8]")
	private static WebElement sl_11thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[9]")
	private static WebElement sl_11thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[10]")
	private static WebElement sl_11thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[11]")
	private static WebElement sl_11thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[12]")
	private static WebElement sl_11thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[13]")
	private static WebElement sl_11thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[14]")
	private static WebElement sl_11thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[15]")
	private static WebElement sl_11thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[16]")
	private static WebElement sl_11thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[17]")
	private static WebElement sl_11thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[18]")
	private static WebElement sl_11thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[19]")
	private static WebElement sl_11thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[20]")
	private static WebElement sl_11thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_11']/td[1]")
	private static WebElement sl_12thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_11']/td[2]")
	private static WebElement sl_12thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[3]")
	private static WebElement sl_12thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[4]")
	private static WebElement sl_12thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[5]")
	private static WebElement sl_12thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[6]")
	private static WebElement sl_12thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[7]")
	private static WebElement sl_12thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[8]")
	private static WebElement sl_12thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[9]")
	private static WebElement sl_12thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[10]")
	private static WebElement sl_12thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[11]")
	private static WebElement sl_12thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[12]")
	private static WebElement sl_12thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[13]")
	private static WebElement sl_12thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[14]")
	private static WebElement sl_12thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[15]")
	private static WebElement sl_12thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[16]")
	private static WebElement sl_12thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[17]")
	private static WebElement sl_12thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[18]")
	private static WebElement sl_12thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[19]")
	private static WebElement sl_12thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[20]")
	private static WebElement sl_12thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_12']/td[1]")
	private static WebElement sl_13thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_12']/td[2]")
	private static WebElement sl_13thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[3]")
	private static WebElement sl_13thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[4]")
	private static WebElement sl_13thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[5]")
	private static WebElement sl_13thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[6]")
	private static WebElement sl_13thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[7]")
	private static WebElement sl_13thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[8]")
	private static WebElement sl_13thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[9]")
	private static WebElement sl_13thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[10]")
	private static WebElement sl_13thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[11]")
	private static WebElement sl_13thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[12]")
	private static WebElement sl_13thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[13]")
	private static WebElement sl_13thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[14]")
	private static WebElement sl_13thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[15]")
	private static WebElement sl_13thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[16]")
	private static WebElement sl_13thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[17]")
	private static WebElement sl_13thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[18]")
	private static WebElement sl_13thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[19]")
	private static WebElement sl_13thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[20]")
	private static WebElement sl_13thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_13']/td[1]")
	private static WebElement sl_14thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_13']/td[2]")
	private static WebElement sl_14thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[3]")
	private static WebElement sl_14thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[4]")
	private static WebElement sl_14thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[5]")
	private static WebElement sl_14thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[6]")
	private static WebElement sl_14thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[7]")
	private static WebElement sl_14thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[8]")
	private static WebElement sl_14thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[9]")
	private static WebElement sl_14thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[10]")
	private static WebElement sl_14thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[11]")
	private static WebElement sl_14thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[12]")
	private static WebElement sl_14thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[13]")
	private static WebElement sl_14thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[14]")
	private static WebElement sl_14thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[15]")
	private static WebElement sl_14thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[16]")
	private static WebElement sl_14thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[17]")
	private static WebElement sl_14thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[18]")
	private static WebElement sl_14thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[19]")
	private static WebElement sl_14thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[20]")
	private static WebElement sl_14thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_14']/td[1]")
	private static WebElement sl_15thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_14']/td[2]")
	private static WebElement sl_15thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[3]")
	private static WebElement sl_15thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[4]")
	private static WebElement sl_15thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[5]")
	private static WebElement sl_15thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[6]")
	private static WebElement sl_15thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[7]")
	private static WebElement sl_15thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[8]")
	private static WebElement sl_15thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[9]")
	private static WebElement sl_15thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[10]")
	private static WebElement sl_15thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[11]")
	private static WebElement sl_15thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[12]")
	private static WebElement sl_15thRow12thCol;
	

	private static String xlSheetName = "SmokeFAReports";
	private int bankRecRow1ListCount;



	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[3]/ul/li/a/span")
	private static List<WebElement> financialReportList;

	
@FindBy(xpath="//div[@id='idGlobalError']")
public static WebElement validationConfirmationMessage;

@FindBy(xpath="//tbody[@id='LandingGridBody']/tr")
private static List<WebElement> stockLedgerHometableRowCount;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr/td[3]")
private static List<WebElement> reportVocGridList;


@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr")
private static List<WebElement> reportRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[1]/td")
private static List<WebElement> report1stRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[2]/td")
private static List<WebElement> report2ndRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[3]/td")
private static List<WebElement> report3rdRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[4]/td")
private static List<WebElement> report4thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[5]/td")
private static List<WebElement> report5thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[6]/td")
private static List<WebElement> report6thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[7]/td")
private static List<WebElement> report7thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[8]/td")
private static List<WebElement> report8thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[9]/td")
private static List<WebElement> report9thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[10]/td")
private static List<WebElement> report10thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[11]/td")
private static List<WebElement> report11thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[12]/td")
private static List<WebElement> report12thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[13]/td")
private static List<WebElement> report13thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[14]/td")
private static List<WebElement> report14thRowList;

@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[15]/td")
private static List<WebElement> report15thRowList;



@FindBy(xpath="//*[@id='userprofile']/li/span[2]")
private static WebElement logoutOption;	 


	public boolean checkFinanacialLedgerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		
       Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		
	    LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
		Thread.sleep(1000);
		lp.enterPassword(pawslt);
		
       
		Thread.sleep(2000);
		lp.clickOnSignInBtn();
		
		
		
		Thread.sleep(4999);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();
		
		Thread.sleep(15000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		Thread.sleep(2000);
	
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Vendor Full Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
	
		Thread.sleep(1500);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor Full Adjustment Vendor Full Adjustment]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=2;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[, Opening Balance, , 80.00, 80.00, , 8.80, 8.80, , 80.00, 80.00, ]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=2;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[NDT58 : 3, Bank, 80.00, , , 5.60, , 3.20, 80.00, , , Indian Rupees]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=2;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[NDT52 : 3, STD RATE COGS ACC INV, , 100.01, 100.01, , 7.00, 10.20, , 100.01, 100.01, Indian Rupees]";

		int report5thRowListCount = report5thRowList.size();
		ArrayList<String> report5thRowListArray = new ArrayList<String>();
		for(int i=2;i<report5thRowListCount;i++)
		{
			String data = report5thRowList.get(i).getText();
			report5thRowListArray.add(data);
		}
		String actRow5List = report5thRowListArray.toString();
		String expRow5List = "[NDT60 : 3, Bank, , 100.00, 200.01, , 7.00, 17.20, , 100.00, 200.01, Indian Rupees]";

		int report6thRowListCount = report6thRowList.size();
		ArrayList<String> report6thRowListArray = new ArrayList<String>();
		for(int i=2;i<report6thRowListCount;i++)
		{
			String data = report6thRowList.get(i).getText();
			report6thRowListArray.add(data);
		}
		String actRow6List = report6thRowListArray.toString();
		String expRow6List = "[NDT58 : 6, Bank, 10.00, , 190.01, 0.70, , 16.50, 10.00, , 190.01, Indian Rupees]";
		
		int report7thRowListCount = report7thRowList.size();
		ArrayList<String> report7thRowListArray = new ArrayList<String>();
		for(int i=0;i<report7thRowListCount;i++)
		{
			String data = report7thRowList.get(i).getText();
			report7thRowListArray.add(data);
		}
		String actRow7List = report7thRowListArray.toString();
		String expRow7List = "[7, Total, , , 90.00, 280.01, 190.01, 6.30, 22.80, 16.50, 90.00, 280.01, 190.01, ]";
		
		System.out.println("************************************checkLedgerReport********************************************");
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow5List  : "+actRow5List);
		System.out.println("expRow5List  : "+expRow5List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow6List  : "+actRow6List);
		System.out.println("expRow6List  : "+expRow6List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow7List  : "+actRow7List);
		System.out.println("expRow7List  : "+expRow7List);
		System.out.println("*********************************************************************");
				
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actRow5List.equalsIgnoreCase(expRow5List) &&
				actRow6List.equalsIgnoreCase(expRow6List) &&
				actRow7List.equalsIgnoreCase(expRow7List))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}
	

	 
	 
	 @FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr/td")
	 private static List<WebElement> reportBodyList;
	
	@FindBy(xpath="//input[@id='RITCheckbox__2']")
	private static WebElement movedAccOnlyChkBox;
	
	@FindBy(xpath="//input[@id='RITCheckbox__2']")
	private static WebElement showallConsildateAmtChkbox;
	
	@FindBy(xpath="//input[@id='RITCheckbox__2']")
	private static WebElement includePurchaseReturnChkbox;
	
	
	@FindBy(xpath="//input[@id='RITCheckbox__3']")
	private static WebElement printAccIndexChkbox;
	
	@FindBy(xpath="//input[@id='RITCheckbox__9']")
	private static WebElement freshPageAccChkbox;
	
	@FindBy(xpath="//input[@id='RITCheckbox__11']")
	private static WebElement printAsStatementAccChkbox;
	
	@FindBy(xpath="//input[@id='RITCheckbox__6']")
	private static WebElement displayUnReliziedchkbox;
	
	@FindBy(xpath="//input[@id='RITCheckbox__4']")
	private static WebElement ignoreConvertedPDCChkbox;
	
	@FindBy(xpath="//input[@id='RITCheckbox__7']")
	private static WebElement displayedMaturedPDCChkbox;


	public boolean checkLedgerDetailsreport() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	 {
		Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerDetail));
			ledgerDetail.click();
			
			
			Thread.sleep(4000);
			
			boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
			String expvalidationConfirmationMessage = "true";
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
		
	        int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("Customer Full Adjustment") )
				{
					
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}

			}
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			
			int reportBodyListCount = reportBodyList.size();
			HashSet<String> actreportBodyListArray = new HashSet<String>();
			for(int i=1;i<reportBodyListCount;i++)
			{
				if (i!=3 && i!=16 && i!=29 && i!=42 && i!=55 && i!=68) 
				{
					String data = reportBodyList.get(i).getText();
					actreportBodyListArray.add(data);
					System.out.println(i+". "+data);
				}
			}
			
			
			/*Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			String currentDate = df.format(cal.getTime());*/
			
			
			String actString = actreportBodyListArray.toString();
			
			String expString = "[, 14.00, 1.80, Bank, Sales - Computers, 100.00, Customer Full Adjustment Customer Full Adjustment, 20.00, NDT60 : 4, 15.80, NDT55 : 3, 180.00, 7.00, NDT57 : 3, 200.00, 2, 3, 8.80, 4, 5, 6, Opening Balance, 80.00]";
			
			System.out.println(actString);
			System.out.println(expString);
			
			/*int reportsRow1ListCount = report1stRowList.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ACC INV FIFO COGS ACC INV, , , , , , , , , , , ]";
			
			
			int report2ndRowListCount = report2ndRowList.size();
			ArrayList<String> report2ndRowListArray = new ArrayList<String>();
			for(int i=2;i<report2ndRowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndRowListArray.add(data);
			}
			String actRow2List = report2ndRowListArray.toString();
			String expRow2List = "[ExeStk : 2, EXCESS COGS POSTING ACC, 6.67, , 6.67, 6.67, , 6.67, 6.67, , 6.67]";
			
			
			int report3rdRowListCount = report3rdRowList.size();
			ArrayList<String> report3rdRowListArray = new ArrayList<String>();
			for(int i=2;i<report3rdRowListCount;i++)
			{
				String data = report3rdRowList.get(i).getText();
				report3rdRowListArray.add(data);
			}
			String actRow3List = report3rdRowListArray.toString();
			String expRow3List = "[NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 16.67, 0.70, , 7.37, 10.00, , 16.67]";
			
			
			int report4thRowListCount = report4thRowList.size();
			ArrayList<String> report4thRowListArray = new ArrayList<String>();
			for(int i=2;i<report4thRowListCount;i++)
			{
				String data = report4thRowList.get(i).getText();
				report4thRowListArray.add(data);
			}
			String actRow4List = report4thRowListArray.toString();
			String expRow4List = "[NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 26.67, 0.70, , 8.07, 10.00, , 26.67]";

			int report5thRowListCount = report5thRowList.size();
			ArrayList<String> report5thRowListArray = new ArrayList<String>();
			for(int i=2;i<report5thRowListCount;i++)
			{
				String data = report5thRowList.get(i).getText();
				report5thRowListArray.add(data);
			}
			String actRow5List = report5thRowListArray.toString();
			String expRow5List = "[NDT57 : SU/IND/TEXT4, Vendor B, 10.00, , 36.67, 0.70, , 8.77, 10.00, , 36.67]";

			int report6thRowListCount = report6thRowList.size();
			ArrayList<String> report6thRowListArray = new ArrayList<String>();
			for(int i=2;i<report6thRowListCount;i++)
			{
				String data = report6thRowList.get(i).getText();
				report6thRowListArray.add(data);
			}
			String actRow6List = report6thRowListArray.toString();
			String expRow6List = "[NDT50 : 4, COGS POSTING ACC, , 3.33, 33.34, , 0.23, 8.54, , 3.33, 33.34]";
			
			int report7thRowListCount = report7thRowList.size();
			ArrayList<String> report7thRowListArray = new ArrayList<String>();
			for(int i=2;i<report7thRowListCount;i++)
			{
				String data = report7thRowList.get(i).getText();
				report7thRowListArray.add(data);
			}
			String actRow7List = report7thRowListArray.toString();
			String expRow7List = "[NDT50 : 7, COGS POSTING ACC, , 5.00, 28.34, , 0.35, 8.19, , 5.00, 28.34]";
			
			
			int report8thRowListCount = report8thRowList.size();
			ArrayList<String> report8thRowListArray = new ArrayList<String>();
			for(int i=2;i<report8thRowListCount;i++)
			{
				String data = report8thRowList.get(i).getText();
				report8thRowListArray.add(data);
			}
			String actRow8List = report8thRowListArray.toString();
			String expRow8List = "[, , 36.67, 8.33, 28.34, 8.77, 0.58, 8.19, 36.67, 8.33, 28.34]";*/
			
			/*
			int report9thRowListCount = report9thRowList.size();
			ArrayList<String> report9thRowListArray = new ArrayList<String>();
			for(int i=2;i<report9thRowListCount;i++)
			{
				String data = report9thRowList.get(i).getText();
				report9thRowListArray.add(data);
			}
			String actRow9List = report9thRowListArray.toString();
			String expRow9List = "[, , 41.71, 8.33, 33.38, 9.12, 0.58, 8.54, 41.71, 8.33, 33.38]";
			*/
			
			/*System.out.println("actRow1List  : "+actRow1List);
			System.out.println("expRow1List  : "+expRow1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow2List  : "+actRow2List);
			System.out.println("expRow2List  : "+expRow2List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow3List  : "+actRow3List);
			System.out.println("expRow3List  : "+expRow3List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow4List  : "+actRow4List);
			System.out.println("expRow4List  : "+expRow4List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow5List  : "+actRow5List);
			System.out.println("expRow5List  : "+expRow5List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow6List  : "+actRow6List);
			System.out.println("expRow6List  : "+expRow6List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow7List  : "+actRow7List);
			System.out.println("expRow7List  : "+expRow7List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow8List  : "+actRow8List);
			System.out.println("expRow8List  : "+expRow8List);
			System.out.println("*********************************************************************");*/
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			
			if(/*actRow1List.equalsIgnoreCase(expRow1List) &&
					actRow2List.equalsIgnoreCase(expRow2List) &&
					actRow3List.equalsIgnoreCase(expRow3List) &&
					actRow4List.equalsIgnoreCase(expRow4List) &&
					actRow5List.equalsIgnoreCase(expRow5List) &&
					actRow6List.equalsIgnoreCase(expRow6List) &&
					actRow7List.equalsIgnoreCase(expRow7List) &&
					actRow8List.equalsIgnoreCase(expRow8List) */   actString.equalsIgnoreCase(expString))
			{
				System.out.println("Test Pass : Reports Are as Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Report Are NOT as Expected ");
				return false;
			}
		
		}

	
	@FindBy(xpath="//a[@id='207']//span[contains(text(),'VAT')]")
	private static WebElement vatReportMenu;
	
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[3]/ul/li[7]/ul/li/a/span")
	private static List<WebElement> vatReportList;
	

	@FindBy(xpath="//span[contains(text(),'Purchase Account Report')]")
	private static WebElement purchaseAccountReport;
	
	@FindBy(xpath="//span[contains(text(),'VAT detailed report')]")
	private static WebElement vatDetailedReport;
	
	@FindBy(xpath="//span[contains(text(),'Sales Account Report')]")
	private static WebElement salesAccountReport;
	
	@FindBy(xpath="//span[contains(text(),'Sales by Customer Report')]")
	private static WebElement salesByCustomerReport;
	
	@FindBy(xpath="//span[contains(text(),'VAT summary report')]")
	private static WebElement vatSummaryReport;
	
	@FindBy(xpath="//span[contains(text(),'VAT audit file')]")
	private static WebElement vatAuditFileReport;
	
	@FindBy(xpath="//span[contains(text(),'VAT return report')]")
	private static WebElement vatReturnReport;
	
	@FindBy(xpath="//span[contains(text(),'Sales advance VAT report')]")
	private static WebElement salesAdvanceVatReport;
	
	
	@FindBy(xpath="//select[@id='RITCombobox__1']")
	private static WebElement transactionTypeDropDown;
	
	public boolean checkVatPurchaseAccountReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatReportMenu));
		vatReportMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountReport));
		purchaseAccountReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includePurchaseReturnChkbox));
		includePurchaseReturnChkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
        boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[NDT52:1, , 100.00, 5.00, , , , , , , , , ]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=2;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[NDT52:2, , 50.00, 2.50, , , , , , , , , ]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=2;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[NDT52:3, , 95.25, 4.76, , , , , , , , , ]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=0;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[4, Grand Total, , , 245.25, 12.26, , , , , , , , , ]";

		System.out.println("*********************************************************************");
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
				
		
		
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			return true;
		}
		else
		{
			
			return false;
		}
	}
   
	public boolean checkSalesAccountReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatReportMenu));
		vatReportMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountReport));
		salesAccountReport.click();
		
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includePurchaseReturnChkbox));
		includePurchaseReturnChkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
		Thread.sleep(2000);
		
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[NDT55:1, 100.00, , , , , , , , , , , ]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=2;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[NDT55:2, 50.00, , , , , , , , , , , ]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=2;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[NDT55:3, 100.00, , , , , , , , , , , ]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[Grand Total, , 250.00, , , , , , , , , , , ]";

				
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
				
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				 
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}

	
	// Sales By Customer Report
	
		@FindBy(xpath="//select[@id='RITCombobox__2']")
		private static WebElement voucherTypeDropDown;
		
		@FindBy(xpath="//select[@id='RITCombobox__3']")
		private static WebElement selectDealersDropDown;

		public boolean checkSalesByCustomerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatReportMenu));
			vatReportMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerReport));
			salesByCustomerReport.click();
			
			boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
			String expvalidationConfirmationMessage1 ="true";
			
			System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
			String expvalidationConfirmationMessage = "true";
			
			System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = report1stRowList.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Sales - Computers, 3, , , 3, , , 3, , , 3, , 3, , , 3, , , 3, ]";
			
			
			int report2ndRowListCount = report2ndRowList.size();
			ArrayList<String> report2ndRowListArray = new ArrayList<String>();
			for(int i=1;i<report2ndRowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndRowListArray.add(data);
			}
			String actRow2List = report2ndRowListArray.toString();
			String expRow2List = "[Grand Total, 3, , , 3, , , 3, , , 3, , 3, , , 3, , , 3, ]";
			

			System.out.println("actRow1List  : "+actRow1List);
			System.out.println("expRow1List  : "+expRow1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow2List  : "+actRow2List);
			System.out.println("expRow2List  : "+expRow2List);
			System.out.println("*********************************************************************");
			
			if(actRow1List.equalsIgnoreCase(expRow1List) &&
					actRow2List.equalsIgnoreCase(expRow2List)  && 
					actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
					actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
public boolean checkBankBookReport() throws InterruptedException
{
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
		cashAndBankBooksMenu.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBookReport));
		bankBookReport.click();
		
		Thread.sleep(2000);
		
         boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportaccountTxt));
		reportaccountTxt.click();
		reportaccountTxt.sendKeys(Keys.SPACE);
		
		int reportaccountTxtListCount = reportaccountTxtList.size();
		
		for(int i=0;i<reportaccountTxtListCount;i++)
		{
			String data = reportaccountTxtList.get(i).getText();
			
			if(data.equalsIgnoreCase("HDFC"))
			{
				reportaccountTxtList.get(i).click();
			}
		}
		
		reportaccountTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(showallConsildateAmtChkbox));
		showallConsildateAmtChkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Pmt : 2, Bank, 70.00, , 70.00, 5.00, , 5.00, 5.00, , 5.00]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=2;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Rct : 3, Bank, , 50.00, 20.00, , 50.00, 45.00, , 50.00, 45.00]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=2;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[NDT65 : 2, Vendor Semi Adjustment, , 70.00, 50.00, , 5.00, 50.00, , 5.00, 50.00]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=2;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[NDT66 : 3, Customer Semi Adjustment, 52.38, , 2.38, 52.38, , 2.38, 3.67, , 46.33]";

		int report5thRowListCount = report5thRowList.size();
		ArrayList<String> report5thRowListArray = new ArrayList<String>();
		for(int i=2;i<report5thRowListCount;i++)
		{
			String data = report5thRowList.get(i).getText();
			report5thRowListArray.add(data);
		}
		String actRow5List = report5thRowListArray.toString();
		String expRow5List = "[Total, , 122.38, 120.00, , 57.38, 55.00, , 8.67, 55.00, ]";
		
		int report6thRowListCount = report6thRowList.size();
		ArrayList<String> report6thRowListArray = new ArrayList<String>();
		for(int i=2;i<report5thRowListCount;i++)
		{
			String data = report6thRowList.get(i).getText();
			report6thRowListArray.add(data);
		}
		String actRow6List = report6thRowListArray.toString();
		String expRow6List = "[Closing balance, , 2.38, , , 2.38, , , , 46.33, ]";
		
		
		
		System.out.println("************************************checkBankBookReport********************************************");
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow5List  : "+actRow5List);
		System.out.println("expRow5List  : "+expRow5List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow6List  : "+actRow6List);
		System.out.println("expRow6List  : "+expRow6List);
		System.out.println("*********************************************************************");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actRow5List.equalsIgnoreCase(expRow5List) && 
				actRow6List.equalsIgnoreCase(expRow6List) && 
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}




@FindBy(xpath="//input[@id='RITCheckbox__1']")
private static WebElement clubCashSalesForTheDayChkBox;



public boolean checkDayBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
	cashAndBankBooksMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBookReport));
	dayBookReport.click();
	
	
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";

	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clubCashSalesForTheDayChkBox));
	clubCashSalesForTheDayChkBox.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	
	boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 ="true";
	
	System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
	Thread.sleep(2000);
	
	
	int report1stRowListCount = report1stRowList.size();
	ArrayList<String> report1stRowListArray = new ArrayList<String>();
	for(int i=1;i<report1stRowListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		report1stRowListArray.add(data);
	}
	String actRow1List = report1stRowListArray.toString();
	String expRow1List = "";
	
	System.out.println(" Actual : "+actRow1List);
	System.out.println("expec : "+expRow1List);
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=1;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[Sub Total, , , , , , , 480.00, , 480.00, , 480.00, , 52.80]";
	
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=11;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[]";
	
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=1;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[OpeBal : 1, Opening Balances Control A/C, , , , , 600.00, , , 600.00, , 600.00, , 66.00]";

	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=1;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[OpeBal : 2, Opening Balances Control A/C, , , , , , 120.00, 120.00, , 120.00, , 13.20, ]";

	int report6thRowListCount = report6thRowList.size();
	ArrayList<String> report6thRowListArray = new ArrayList<String>();
	for(int i=1;i<report6thRowListCount;i++)
	{
		String data = report6thRowList.get(i).getText();
		report6thRowListArray.add(data);
	}
	String actRow6List = report6thRowListArray.toString();
	String expRow6List = "[Sub Total, , , , , , 600.00, 120.00, 120.00, 600.00, 120.00, 600.00, 13.20, 66.00]";
	
	Thread.sleep(3000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
	report_LastBtn.click();
	
	Thread.sleep(4000);
	
	
	
	int report7thRowListCount = report1stRowList.size();
	ArrayList<String> report7thRowListArray = new ArrayList<String>();
	for(int i=1;i<report7thRowListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		report7thRowListArray.add(data);
	}
	String actRow7List = report7thRowListArray.toString();
	String expRow7List = "[Sub Total, , 1,674.75, , 682.38, 900.00, 1,462.27, 2,919.40, 3,819.40, 3,819.40, 3,689.40, 3,689.40, 407.06, 407.06]";
	
	
	int report8thRowListCount = report2ndRowList.size();
	ArrayList<String> report8thRowListArray = new ArrayList<String>();
	for(int i=1;i<report8thRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		report8thRowListArray.add(data);
	}
	String actRow8List = report8thRowListArray.toString();
	String expRow8List = "[Grand Total, , 1,674.75, , 682.38, 900.00, 2,062.27, 2,559.40, 3,939.40, 4,899.40, 3,809.40, 4,769.40, 420.26, 525.86]";
	
	
	
	
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow6List  : "+actRow6List);
	System.out.println("expRow6List  : "+expRow6List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow7List  : "+actRow7List);
	System.out.println("expRow7List  : "+expRow7List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow8List  : "+actRow8List);
	System.out.println("expRow8List  : "+expRow8List);
	System.out.println("*********************************************************************");
	
	
	System.out.println("*********************************************************************");

	/*			
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
	report_CloseBtn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
	sl_CloseBtn.click();*/
	
	if(actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			actRow5List.equalsIgnoreCase(expRow5List) &&
			actRow6List.equalsIgnoreCase(expRow6List) &&
			actRow7List.equalsIgnoreCase(expRow7List) &&
			actRow8List.equalsIgnoreCase(expRow8List) )
	{
		System.out.println("Test Pass : Reports Are as Expected ");
		
		return true;
	}
	else
	{
		System.out.println("Test Fail : Report Are NOT as Expected ");
		
		return false;
	}
}


@FindBy(xpath="//*[@id='722']/span")
private static WebElement virtualBankReport;

public boolean checkVirtualBankLedgerReport() throws InterruptedException
{
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
	cashAndBankBooksMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualBankReport));
	virtualBankReport.click();
	
	
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";

	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	int rowcount=stockLedgerHometableRowCount.size();
	
	System.out.println(rowcount);
	
	for (int i = 1; i <= rowcount; i++) 
	{
		WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
		
		String actname=name.getText();
		
		System.out.println(actname);
		
		if(actname.equalsIgnoreCase("HDFC") )
		{
			
			WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
			index.click();
			
			break;
		}

	}
	
	
	Thread.sleep(2000);
	
	printAccIndexChkbox.click();
	
	freshPageAccChkbox.click();
	
	printAsStatementAccChkbox.click();

	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
	sl_SelectAllItemsChkBox.click();
	
	
	
	Thread.sleep(2000);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	
	boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 ="true";
	
	System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
	
	
	
	Thread.sleep(2000);
	int report1stRowListCount = report1stRowList.size();
	ArrayList<String> report1stRowListArray = new ArrayList<String>();
	for(int i=2;i<report1stRowListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		report1stRowListArray.add(data);
	}
	String actRow1List = report1stRowListArray.toString();
	String expRow1List = "[Bank 121-001]";
	
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[560.00, 780.00, 220.00, 2.38, , 2.38, 560.00, 715.00, 155.00, 2.38, , 2.38, 132.20, 101.20, 31.00, 0.17, , 0.17]";
	
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=2;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[, , 220.00, 50.00, , 52.38, , , 155.00, 50.00, , 52.38, , , 31.00, 3.50, , 3.67]";
	
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=2;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[560.00, 780.00, 440.00, 52.38, , 54.76, 560.00, 715.00, 310.00, 52.38, , 54.76, 132.20, 101.20, 62.00, 3.67, , 3.83]";

	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=2;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[]";

	int report6thRowListCount = report6thRowList.size();
	ArrayList<String> report6thRowListArray = new ArrayList<String>();
	for(int i=2;i<report6thRowListCount;i++)
	{
		String data = report6thRowList.get(i).getText();
		report6thRowListArray.add(data);
	}
	String actRow6List = report6thRowListArray.toString();
	String expRow6List = "[70.00, 50.00, 20.00, 52.38, 70.00, 17.62, 5.00, 50.00, 45.00, 52.38, 5.00, 47.38, 5.00, 50.00, 45.00, 3.67, 5.00, 1.33]";
	
	
	
	int report7thRowListCount = report7thRowList.size();
	ArrayList<String> report7thRowListArray = new ArrayList<String>();
	for(int i=1;i<report7thRowListCount;i++)
	{
		String data = report7thRowList.get(i).getText();
		report7thRowListArray.add(data);
	}
	String actRow7List = report7thRowListArray.toString();
	String expRow7List = "[Sub Total, 70.00, 50.00, 20.00, 52.38, 70.00, 17.62, 5.00, 50.00, 45.00, 52.38, 5.00, 47.38, 5.00, 50.00, 45.00, 3.67, 5.00, 1.33]";
	
	
	int report8thRowListCount = report8thRowList.size();
	ArrayList<String> report8thRowListArray = new ArrayList<String>();
	for(int i=1;i<report8thRowListCount;i++)
	{
		String data = report8thRowList.get(i).getText();
		report8thRowListArray.add(data);
	}
	String actRow8List = report8thRowListArray.toString();
	String expRow8List = "[Grand Total, 630.00, 830.00, 420.00, 104.76, 70.00, 37.14, 565.00, 765.00, 355.00, 104.76, 5.00, 102.14, 137.20, 151.20, 17.00, 7.33, 5.00, 2.50]";
	
	
	
	System.out.println("*********************************************************************");
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow6List  : "+actRow6List);
	System.out.println("expRow6List  : "+expRow6List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow7List  : "+actRow7List);
	System.out.println("expRow7List  : "+expRow7List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow8List  : "+actRow8List);
	System.out.println("expRow8List  : "+expRow8List);
	System.out.println("*********************************************************************");
	
	
	/*			
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
	report_CloseBtn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
	sl_CloseBtn.click();*/
	
	if(actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			actRow5List.equalsIgnoreCase(expRow5List) &&
			actRow6List.equalsIgnoreCase(expRow6List) &&
			actRow7List.equalsIgnoreCase(expRow7List) &&
			actRow8List.equalsIgnoreCase(expRow8List))
	{
		System.out.println("Test Pass : Reports Are as Expected ");
		
		return true;
	}
	else
	{
		System.out.println("Test Fail : Report Are NOT as Expected ");
		
		return false;
	}
}



// Bank Reconciliation



@FindBy(xpath="//li[@id='btnSaveDisableImmediate']//div[@class='toolbar_button_image']")
private static WebElement BRsaveBtn;

@FindBy(xpath="//div[contains(text(),'Backtrack')]")
private static WebElement backTrackBtn;

@FindBy(xpath="//div[contains(text(),'Customize')]")
private static WebElement BRcustomizeBtn;

@FindBy(xpath="//div[contains(text(),'Cancel')]")
private static WebElement BRcancelBtn;

@FindBy(xpath="//input[@id='OptCtrlBank']")
private static WebElement reportbankTxt;

@FindBy(xpath="//*[@id='OptCtrlBank_table_body']/tr/td[2]")
private static List<WebElement> reportbankList;




@FindBy(xpath="//select[@id='sortOrder']")
private static WebElement sortOrderDropDown;

@FindBy(xpath="//select[@id='selectStatus']")
private static WebElement selectStatusDropDown;

@FindBy(xpath="//select[@id='DatePeriod']")
private static WebElement datePeriodDropDown;

@FindBy(xpath="//input[@id='chkShow']")
private static WebElement showConsolidatedAmountsForBankDeposits;

@FindBy(xpath="//select[@id='SelectDebit']")
private static WebElement selectDrCrDropDown;

@FindBy(xpath="//div[@id='btnAdvFilterText']")
private static WebElement advanceFilterBtn;

@FindBy(xpath="//span[@id='btnClear']")
private static WebElement clearBtn;

@FindBy(xpath="//span[@id='btnLoad']")
private static WebElement LoadBtn;

@FindBy(xpath="//button[@id='btnPendingBills']")
private static WebElement BRpendingBillsBtn;

@FindBy(xpath="//button[@id='btnRaiseReceipt']")
private static WebElement raiseReceiptsBtn;

@FindBy(xpath="//button[@id='btnRaisePayment']")
private static WebElement raisePaymentsBtn;


@FindBy(xpath="//thead[@id='BRTable_head']/tr/th/div")
private static List<WebElement> reporttableHeadeList;


@FindBy(xpath="//*[@id='BRTable_body']/tr[1]/td")
private static List<WebElement> bankRecRow1List  ; 

@FindBy(xpath="//*[@id='BRTable_body']/tr[2]/td")
private static List<WebElement> bankRecRow2List  ; 

@FindBy(xpath="//*[@id='BRTable_body']/tr[3]/td")
private static List<WebElement> bankRecRow3List  ; 

@FindBy(xpath="//*[@id='BRTable_body']/tr[4]/td")
private static List<WebElement> bankRecRow4List  ; 

@FindBy(xpath="//*[@id='BRTable_body']/tr[5]/td")
private static List<WebElement> bankRecRow5List  ; 

@FindBy(xpath="//*[@id='BRTable_body']/tr/td[7]")
private static List<WebElement> bankRecRow6List  ; 

@FindBy(xpath="//*[@id='BRTable_body']/tr/td[8]")
private static List<WebElement> bankRecRow7List  ; 

@FindBy(xpath="//*[@id='BRTable_body']/tr/td[9]")
private static List<WebElement> bankRecRow8List  ; 

@FindBy(xpath="//label[@id='bookBal']")
private static WebElement  bankRecBookBal; 

@FindBy(xpath="//label[@id='outDebits']")
private static WebElement  bankRecOutDebits; 

@FindBy(xpath="//label[@id='outCredits']")
private static WebElement  bankRecOutCredits; 

@FindBy(xpath="//label[@id='clearedBal']")
private static WebElement  bankRecClearedBal; 

@FindBy(xpath="//label[@id='OpeningBalance']")
private static WebElement  bankRecOpenBal; 

@FindBy(xpath="//label[@id='debitCounts']")
private static WebElement  bankRecDebitCounts; 

@FindBy(xpath="//label[@id='creditCounts']")
private static WebElement  bankRecCreditCounts; 

@FindBy(xpath="//input[@id='bankBal']")
private static WebElement  bankRecBankBal; 

@FindBy(xpath="//label[@id='diff']")
private static WebElement  bankRecDif; 

@FindBy(xpath="//*[@id='OptCtrlBank_table_body']/tr/td[2]")
private static List<WebElement>  bankList; 





public boolean checkBankReconciliationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
	cashAndBankBooksMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankReconciliationReport));
	bankReconciliationReport.click();
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);

    Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportbankTxt));
	reportbankTxt.click();
	reportbankTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
	reportbankTxt.sendKeys(Keys.SPACE);
	
	int bankListCount=bankList.size();
	for (int i = 0; i < bankListCount; i++)
	{
	
		String data=bankList.get(i).getText();
		if (data.equalsIgnoreCase("HDFC")) 
		{
			bankList.get(i).click();
		}
	}
	Thread.sleep(2000);
	reportbankTxt.sendKeys(Keys.TAB);

	Thread.sleep(1500);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(LoadBtn));
	LoadBtn.click();
	
	Thread.sleep(5000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankRecBookBal));
    int bankRecRow1ListCount = bankRecRow1List.size();
	
	ArrayList<String> bankRecRow1ListArray = new ArrayList<String>();
	
	for(int i=0;i<bankRecRow1ListCount;i++)
	{
		String data = bankRecRow1List.get(i).getText();
		if (i==2)
		{
			data="Date Field";
		}
		if (i==4)
		{
			data="Date Field";
		}
		bankRecRow1ListArray.add(data);
		
	}
	
	String actbankRecRow1List = bankRecRow1ListArray.toString();
	String expbankRecRow1List = "[1, Pending, Date Field, Pmt:2, Date Field, 70.00, 0.00, , Payments, , , ]";
	
	System.out.println("actbankRecRow1List : "+actbankRecRow1List);
	System.out.println("expbankRecRow1List : "+expbankRecRow1List);
	
    int bankRecRow2ListCount = bankRecRow2List.size();
	
	ArrayList<String> bankRecRow2ListArray = new ArrayList<String>();
	
	for(int i=0;i<bankRecRow2ListCount;i++)
	{
		String data = bankRecRow2List.get(i).getText();
		if (i==2)
		{
			data="Date Field";
		}
		if (i==4)
		{
			data="Date Field";
		}
		bankRecRow2ListArray.add(data);
		
	}
	
	String actbankRecRow2List = bankRecRow2ListArray.toString();
	String expbankRecRow2List = "[2, Pending, Date Field, NDT66:3, Date Field, 50.00, 0.00, PDRHDFC01, PDR VAT, , , ]";
	
	System.out.println("actbankRecRow2List : "+actbankRecRow2List);
	System.out.println("expbankRecRow2List : "+expbankRecRow2List);
	
    String actBookBal=bankRecBookBal.getText();
    String expBookBal="2.38 Dr";

	String actbankRecOutDebits=bankRecOutDebits.getText();
    String expbankRecOutDebits="122.38 Dr";

	String actbankRecOutCredits=bankRecOutCredits.getText();
    String expbankRecOutCredits="120.00 Cr";

	String actbankRecClearedBal=bankRecClearedBal.getText();
    String expbankRecClearedBal="0.00";

	String actbankRecOpenBal=bankRecOpenBal.getText();
    String expbankRecOpenBal="0.00";
	

	String actbankRecDebitCounts=bankRecDebitCounts.getText();
    String expbankRecDebitCounts="3";
	
	String actbankRecCreditCounts=bankRecCreditCounts.getText();
    String expbankRecCreditCounts="0";
    
	String actbankRecBankBal=bankRecBankBal.getAttribute("value");
    String expbankRecBankBal="0.0000";
	
	
	System.out.println("**********************************checkBankReconciliationReport*****************************************");
	   System.out.println("BookBal             : "+actBookBal             +" Value Expected  : "+expBookBal);
   System.out.println("bankRecOutDebits    : "+actbankRecOutDebits    +" Value Expected  : "+expbankRecOutDebits);
   System.out.println("bankRecOutCredits   : "+actbankRecOutCredits   +" Value Expected  : "+expbankRecOutCredits);
   System.out.println("bankRecClearedBal   : "+actbankRecClearedBal   +" Value Expected  : "+expbankRecClearedBal);
   System.out.println("Opening Bal         : "+actbankRecOpenBal      +" Value Expected  : "+expbankRecOpenBal);
   System.out.println("bankRecDebitCounts  : "+actbankRecDebitCounts  +" Value Expected  : "+expbankRecDebitCounts);
   System.out.println("bankRecCreditCounts : "+actbankRecCreditCounts +" Value Expected  : "+expbankRecCreditCounts);
   System.out.println("bankRecBankBal      : "+actbankRecBankBal      +" Value Expected  : "+expbankRecBankBal);
    
   
 
	
	if (actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actbankRecRow1List.equalsIgnoreCase(expbankRecRow1List) &&
			actbankRecRow2List.equalsIgnoreCase(expbankRecRow2List) &&  
			actBookBal.equalsIgnoreCase(expBookBal) && 
			actbankRecOutDebits.equalsIgnoreCase(expbankRecOutDebits) && actbankRecOutCredits.equalsIgnoreCase(expbankRecOutCredits) && 
			actbankRecClearedBal.equalsIgnoreCase(expbankRecClearedBal) && actbankRecDebitCounts.equalsIgnoreCase(expbankRecDebitCounts) && 
			actbankRecCreditCounts.equalsIgnoreCase(expbankRecCreditCounts) && actbankRecBankBal.equalsIgnoreCase(expbankRecBankBal)) 
	{
		System.out.println(" Test Pass: Value are Expected ");
		
		return true;
		
	} 
	else 
	{
		System.out.println(" Test Fail: Value are Expected ");
		
		return false;
	}
	
}


//CustomerVendorReconciliation


		public boolean checkCustomerVendorReconciliationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerVendorReconciliation));
			customerVendorReconciliation.click();
			
			//Thread.sleep(2000);
			
			boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
			String expvalidationConfirmationMessage = "true";


			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportbankTxt));
			reportbankTxt.click();
			reportbankTxt.sendKeys(Keys.SPACE);
			reportbankTxt.sendKeys("Vendor New");
			Thread.sleep(2000);
			int reportbankListCount=reportbankList.size();
			for (int i = 0; i < reportbankListCount; i++) 
			{
			String data=reportbankList.get(i).getText();
			
				if (data.equalsIgnoreCase("Vendor New Reference")) 
				{
					reportbankList.get(i).click();
				}
			}
			reportbankTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(LoadBtn));
			LoadBtn.click();
			
			Thread.sleep(5000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankRecBookBal));
            int bankRecRow1ListCount = bankRecRow1List.size();
			
			ArrayList<String> bankRecRow1ListArray = new ArrayList<String>();
			
			for(int i=0;i<bankRecRow1ListCount;i++)
			{
				String data = bankRecRow1List.get(i).getText();
				if (i==2)
				{
					data="Date Field";
				}
				if (i==4)
				{
					data="Date Field";
				}
				bankRecRow1ListArray.add(data);
				
			}
			
			String actbankRecRow1List = bankRecRow1ListArray.toString();
			String expbankRecRow1List = "[1, Pending, Date Field, NDT62:1, Date Field, 10.00, 0.00, , Debit Notes VAT, , , ]";
			
			System.out.println("actbankRecRow1List : "+actbankRecRow1List);
			System.out.println("expbankRecRow1List : "+expbankRecRow1List);
			
           int bankRecRow2ListCount = bankRecRow2List.size();
			
			ArrayList<String> bankRecRow2ListArray = new ArrayList<String>();
			
			for(int i=0;i<bankRecRow2ListCount;i++)
			{
				String data = bankRecRow2List.get(i).getText();
				if (i==2)
				{
					data="Date Field";
				}
				if (i==4)
				{
					data="Date Field";
				}
				bankRecRow2ListArray.add(data);
			}
			String actbankRecRow2List = bankRecRow2ListArray.toString();
			String expbankRecRow2List = "[2, Pending, Date Field, Pmt:1, Date Field, 50.00, 0.00, , Payments, , , ]";
			
			System.out.println("actbankRecRow2List : "+actbankRecRow2List);
			System.out.println("expbankRecRow2List : "+expbankRecRow2List);
			
			
	           int bankRecRow3ListCount = bankRecRow3List.size();
				
				ArrayList<String> bankRecRow3ListArray = new ArrayList<String>();
				
				for(int i=0;i<bankRecRow3ListCount;i++)
				{
					String data = bankRecRow3List.get(i).getText();
					if (i==2)
					{
						data="Date Field";
					}
					if (i==4)
					{
						data="Date Field";
					}
					bankRecRow3ListArray.add(data);
				}
				String actbankRecRow3List = bankRecRow3ListArray.toString();
				String expbankRecRow3List = "[3, Pending, Date Field, NDT58:1, Date Field, 100.00, 0.00, , Payments VAT, , , ]";
				
				System.out.println("actbankRecRow3List : "+actbankRecRow3List);
				System.out.println("expbankRecRow3List : "+expbankRecRow3List);
			

			if (actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
					actbankRecRow1List.equalsIgnoreCase(expbankRecRow1List) && 
					actbankRecRow2List.equalsIgnoreCase(expbankRecRow2List) &&
					actbankRecRow3List.equalsIgnoreCase(expbankRecRow3List))
			{
				System.out.println(" Test Pass: Values as Expected ");

				return true;
				
			} 
			else 
			{
				System.out.println(" Test Fail: Values as Expected ");
				
				return false;
			}
		}
		
		
		
//Bank reconciliation statement

		@FindBy(xpath="//input[@id='RITCheckbox__1']")
		private static WebElement brsshowConsolidatedAmountsChkBox;
		
		@FindBy(xpath="//input[@id='RITCheckbox__2']")
		private static WebElement brsIncludePdcChkBox;
		
		@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr/td[2]")
		private static List<WebElement> report1stColList;
		
		@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr/td[3]")
		private static List<WebElement> report2ndColList;
		
		@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr/td[4]")
		private static List<WebElement> report3rdColList;
		
		@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr/td[5]")
		private static List<WebElement> report4thColList;
		
		@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr/td[6]")
		private static List<WebElement> report5thColList;
		
		
		public boolean checkBankReconciliationStatementReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankReconciliationStatement));
			bankReconciliationStatement.click();
			
			
			boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
			String expvalidationConfirmationMessage = "true";
			
			System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportaccountTxt));
			reportaccountTxt.click();
			reportaccountTxt.sendKeys(Keys.SPACE);
			
			int reportaccountTxtListCount = reportaccountTxtList.size();
			
			for(int i=0;i<reportaccountTxtListCount;i++)
			{
				String data = reportaccountTxtList.get(i).getText();
				
				if(data.equalsIgnoreCase("Bank"))
				{
					reportaccountTxtList.get(i).click();
				}
			}
			
			reportaccountTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(brsIncludePdcChkBox));
			brsIncludePdcChkBox.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(brsshowConsolidatedAmountsChkBox));
			brsshowConsolidatedAmountsChkBox.click();
			
			
			
			sl_IncludeServiceTypeItemChkBox.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
         boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
			String expvalidationConfirmationMessage1 = "true";
			
			System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = report1stRowList.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[, Balance as per Books, , 155.00, , , , 220.00, , , 31.00, , , ]";
			
			
			int report2ndRowListCount = report2ndRowList.size();
			ArrayList<String> report2ndRowListArray = new ArrayList<String>();
			for(int i=2;i<report2ndRowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndRowListArray.add(data);
			}
			String actRow2List = report2ndRowListArray.toString();
			String expRow2List = "[NDT58 : 1, , , 100.00, 100.00, 55.00, , 100.00, 100.00, 120.00, , 7.00, 7.00, 38.00]";
			
			
			int report3rdRowListCount = report3rdRowList.size();
			ArrayList<String> report3rdRowListArray = new ArrayList<String>();
			for(int i=2;i<report3rdRowListCount;i++)
			{
				String data = report3rdRowList.get(i).getText();
				report3rdRowListArray.add(data);
			}
			String actRow3List = report3rdRowListArray.toString();
			String expRow3List = "[NDT58 : 2, , , 10.00, 110.00, 45.00, , 10.00, 110.00, 110.00, , 0.70, 7.70, 38.70]";
			
			
			int report4thRowListCount = report4thRowList.size();
			ArrayList<String> report4thRowListArray = new ArrayList<String>();
			for(int i=2;i<report4thRowListCount;i++)
			{
				String data = report4thRowList.get(i).getText();
				report4thRowListArray.add(data);
			}
			String actRow4List = report4thRowListArray.toString();
			String expRow4List = "[NDT58 : 3, , , 80.00, 190.00, 35.00, , 80.00, 190.00, 30.00, , 5.60, 13.30, 44.30]";

			int report5thRowListCount = report5thRowList.size();
			ArrayList<String> report5thRowListArray = new ArrayList<String>();
			for(int i=2;i<report5thRowListCount;i++)
			{
				String data = report5thRowList.get(i).getText();
				report5thRowListArray.add(data);
			}
			String actRow5List = report5thRowListArray.toString();
			String expRow5List = "[NDT58 : 4, , , 10.00, 200.00, 45.00, , 10.00, 200.00, 20.00, , 0.70, 14.00, 45.00]";

			int report6thRowListCount = report6thRowList.size();
			ArrayList<String> report6thRowListArray = new ArrayList<String>();
			for(int i=2;i<report6thRowListCount;i++)
			{
				String data = report6thRowList.get(i).getText();
				report6thRowListArray.add(data);
			}
			String actRow6List = report6thRowListArray.toString();
			String expRow6List = "[NDT57 : 1, , 100.00, , 100.00, 55.00, 100.00, , 100.00, 120.00, 7.00, , 7.00, 38.00]";
			
			int report7thRowListCount = report7thRowList.size();
			ArrayList<String> report7thRowListArray = new ArrayList<String>();
			for(int i=2;i<report7thRowListCount;i++)
			{
				String data = report7thRowList.get(i).getText();
				report7thRowListArray.add(data);
			}
			String actRow7List = report7thRowListArray.toString();
			String expRow7List = "[NDT57 : 2, , 50.00, , 50.00, 105.00, 50.00, , 50.00, 170.00, 3.50, , 3.50, 34.50]";
			
			
			int report8thRowListCount = report8thRowList.size();
			ArrayList<String> report8thRowListArray = new ArrayList<String>();
			for(int i=2;i<report8thRowListCount;i++)
			{
				String data = report8thRowList.get(i).getText();
				report8thRowListArray.add(data);
			}
			String actRow8List = report8thRowListArray.toString();
			String expRow8List = "[NDT57 : 3, , 100.00, , 50.00, 205.00, 100.00, , 50.00, 270.00, 7.00, , 3.50, 27.50]";
			
			
			int report9thRowListCount = report9thRowList.size();
			ArrayList<String> report9thRowListArray = new ArrayList<String>();
			for(int i=2;i<report9thRowListCount;i++)
			{
				String data = report9thRowList.get(i).getText();
				report9thRowListArray.add(data);
			}
			String actRow9List = report9thRowListArray.toString();
			String expRow9List = "[NDT60 : 1, , 100.00, , 150.00, 305.00, 100.00, , 150.00, 370.00, 7.00, , 10.50, 20.50]";
			
			int report10thRowListCount = report10thRowList.size();
			ArrayList<String> report10thRowListArray = new ArrayList<String>();
			for(int i=2;i<report10thRowListCount;i++)
			{
				String data = report10thRowList.get(i).getText();
				report10thRowListArray.add(data);
			}
			String actRow10List = report10thRowListArray.toString();
			String expRow10List = "[NDT60 : 2, , 10.00, , 160.00, 315.00, 10.00, , 160.00, 380.00, 0.70, , 11.20, 19.80]";
			
			
			int report11thRowListCount = report11thRowList.size();
			ArrayList<String> report11thRowListArray = new ArrayList<String>();
			for(int i=2;i<report11thRowListCount;i++)
			{
				String data = report11thRowList.get(i).getText();
				report11thRowListArray.add(data);
			}
			String actRow11List = report11thRowListArray.toString();
			String expRow11List = "[NDT60 : 3, , 100.00, , 260.00, 415.00, 100.00, , 260.00, 480.00, 7.00, , 18.20, 12.80]";
			
			int report12thRowListCount = report12thRowList.size();
			ArrayList<String> report12thRowListArray = new ArrayList<String>();
			for(int i=2;i<report12thRowListCount;i++)
			{
				String data = report12thRowList.get(i).getText();
				report12thRowListArray.add(data);
			}
			String actRow12List = report12thRowListArray.toString();
			String expRow12List = "[NDT60 : 4, , , 210.00, 50.00, 205.00, , 210.00, 50.00, 270.00, , 14.70, 3.50, 27.50]";
			
			int report13thRowListCount = report13thRowList.size();
			ArrayList<String> report13thRowListArray = new ArrayList<String>();
			for(int i=2;i<report13thRowListCount;i++)
			{
				String data = report13thRowList.get(i).getText();
				report13thRowListArray.add(data);
			}
			String actRow13List = report13thRowListArray.toString();
			String expRow13List = "[NDT58 : 5, , , 10.00, 40.00, 195.00, , 10.00, 40.00, 260.00, , 0.70, 2.80, 28.20]";
			
			int report14thRowListCount = report14thRowList.size();
			ArrayList<String> report14thRowListArray = new ArrayList<String>();
			for(int i=2;i<report14thRowListCount;i++)
			{
				String data = report14thRowList.get(i).getText();
				report14thRowListArray.add(data);
			}
			String actRow14List = report14thRowListArray.toString();
			String expRow14List = "[NDT58 : 6, , , 10.00, 30.00, 185.00, , 10.00, 30.00, 250.00, , 0.70, 2.10, 28.90]";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			Thread.sleep(2500);
			
			int reportsP2Row1ListCount = report1stRowList.size();
			ArrayList<String> reportsP2Row1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsP2Row1ListArray.add(data);
			}
			String actP2Row1List = reportsP2Row1ListArray.toString();
			String expP2Row1List = "[NDT62 : 2, , , 50.00, 180.00, 25.00, , 50.00, 180.00, 40.00, , 3.50, 12.60, 43.60]";
			
			
			int report2ndP2RowListCount = report2ndRowList.size();
			ArrayList<String> report2ndP2RowListArray = new ArrayList<String>();
			for(int i=2;i<report2ndP2RowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndP2RowListArray.add(data);
			}
			String actP2Row2List = report2ndP2RowListArray.toString();
			String expP2Row2List = "[NDT62 : 3, , , 10.00, 190.00, 35.00, , 10.00, 190.00, 30.00, , 0.70, 13.30, 44.30]";
			
			
			int report3rdP2RowListCount = report3rdRowList.size();
			ArrayList<String> report3rdP2RowListArray = new ArrayList<String>();
			for(int i=2;i<report3rdP2RowListCount;i++)
			{
				String data = report3rdRowList.get(i).getText();
				report3rdP2RowListArray.add(data);
			}
			String actP2Row3List = report3rdP2RowListArray.toString();
			String expP2Row3List = "[NDT58 : 8, , , 10.00, 200.00, 45.00, , 10.00, 200.00, 20.00, , 0.70, 14.00, 45.00]";
			
			
			int report4thP2RowListCount = report4thRowList.size();
			ArrayList<String> report4thP2RowListArray = new ArrayList<String>();
			for(int i=2;i<report4thP2RowListCount;i++)
			{
				String data = report4thRowList.get(i).getText();
				report4thP2RowListArray.add(data);
			}
			String actP2Row4List = report4thP2RowListArray.toString();
			String expP2Row4List = "[NDT66 : 2, , 2.38, , 197.62, 42.62, 2.38, , 197.62, 22.38, 0.17, , 13.83, 44.83]";
			
			

			int Count1 = report5thRowList.size();
			ArrayList<String> Count1Array = new ArrayList<String>();
			for(int i=2;i<Count1;i++)
			{
				String data = report5thRowList.get(i).getText();
				Count1Array.add(data);
			}
			String actP2Row5List = Count1Array.toString();
			String expP2Row5List = "[Rct : 2, , 50.00, , 147.62, 7.38, 50.00, , 147.62, 72.38, 50.00, , 36.17, 5.17]";
			
			

			int Count2 = report6thRowList.size();
			ArrayList<String> Count2Array = new ArrayList<String>();
			for(int i=2;i<Count2;i++)
			{
				String data = report6thRowList.get(i).getText();
				Count2Array.add(data);
			}
			String actP2Row6List = Count2Array.toString();
			String expP2Row6List = "[Rct : 3, , 50.00, , 97.62, 57.38, 50.00, , 97.62, 122.38, 50.00, , 86.17, 55.17]";
			
			

			int Count3 = report7thRowList.size();
			ArrayList<String> Count3Array = new ArrayList<String>();
			for(int i=2;i<Count3;i++)
			{
				String data = report7thRowList.get(i).getText();
				Count3Array.add(data);
			}
			String actP2Row7List = Count3Array.toString();
			String expP2Row7List = "[Pmt : 1, , , 50.00, 147.62, 7.38, , 50.00, 147.62, 72.38, , 50.00, 36.17, 5.17]";
			
			int Count4 = report8thRowList.size();
			ArrayList<String> Count4Array = new ArrayList<String>();
			for(int i=2;i<Count4;i++)
			{
				String data = report8thRowList.get(i).getText();
				Count4Array.add(data);
			}
			String actP2Row8List = Count4Array.toString();
			String expP2Row8List = "[Pmt : 2, , , 5.00, 152.62, 2.38, , 70.00, 217.62, 2.38, , 5.00, 31.17, 0.17]";
			
			
			int Count5 = report9thRowList.size();
			ArrayList<String> Count5Array = new ArrayList<String>();
			for(int i=2;i<Count5;i++)
			{
				String data = report9thRowList.get(i).getText();
				Count5Array.add(data);
			}
			String actP2Row9List = Count5Array.toString();
			String expP2Row9List = "[, Balance as per Bank, , 2.38, , , , 2.38, , , , 0.17, , ]";
			

			int Count6 = report10thRowList.size();
			ArrayList<String> Count6Array = new ArrayList<String>();
			for(int i=2;i<Count6;i++)
			{
				String data = report10thRowList.get(i).getText();
				Count6Array.add(data);
			}
			String actP2Row10List = Count6Array.toString();
			String expP2Row10List = "[, , 562.38, 715.00, 1,653.10, 2,376.90, 562.38, 780.00, 1,718.10, 4,001.90, 132.37, 101.20, 112.13, 693.87]";
			
			
						
			System.out.println("actRow1List  : "+actRow1List);
			System.out.println("expRow1List  : "+expRow1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow2List  : "+actRow2List);
			System.out.println("expRow2List  : "+expRow2List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow3List  : "+actRow3List);
			System.out.println("expRow3List  : "+expRow3List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow4List  : "+actRow4List);
			System.out.println("expRow4List  : "+expRow4List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow5List  : "+actRow5List);
			System.out.println("expRow5List  : "+expRow5List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow6List  : "+actRow6List);
			System.out.println("expRow6List  : "+expRow6List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow7List  : "+actRow7List);
			System.out.println("expRow7List  : "+expRow7List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow8List  : "+actRow8List);
			System.out.println("expRow8List  : "+expRow8List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow9List  : "+actRow9List);
			System.out.println("expRow9List  : "+expRow9List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow10List  : "+actRow10List);
			System.out.println("expRow10List  : "+expRow10List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow11List  : "+actRow11List);
			System.out.println("expRow11List  : "+expRow11List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow12List  : "+actRow12List);
			System.out.println("expRow12List  : "+expRow12List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow13List  : "+actRow13List);
			System.out.println("expRow13List  : "+expRow13List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow14List  : "+actRow14List);
			System.out.println("expRow14List  : "+expRow14List);
			System.out.println("*********************************************************************");
			
			
			System.out.println("actP2Row1List  : "+actP2Row1List);
			System.out.println("expP2Row1List  : "+expP2Row1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actP2Row2List  : "+actP2Row2List);
			System.out.println("expP2Row2List  : "+expP2Row2List);
			System.out.println("*********************************************************************");
					
			System.out.println("actP2Row3List  : "+actP2Row3List);
			System.out.println("expP2Row3List  : "+expP2Row3List);
			System.out.println("*********************************************************************");
			
			System.out.println("actP2Row4List  : "+actP2Row4List);
			System.out.println("expP2Row4List  : "+expP2Row4List);
			System.out.println("*********************************************************************");
			
			System.out.println("actP2Row5List  : "+actP2Row5List);
			System.out.println("expP2Row5List  : "+expP2Row5List);
			System.out.println("*********************************************************************");
					
			System.out.println("actP2Row6List  : "+actP2Row6List);
			System.out.println("expP2Row6List  : "+expP2Row6List);
			System.out.println("*********************************************************************");
			
			System.out.println("actP2Row7List  : "+actP2Row7List);
			System.out.println("expP2Row7List  : "+expP2Row7List);
			System.out.println("*********************************************************************");
			

			System.out.println("actP2Row8List  : "+actP2Row8List);
			System.out.println("expP2Row8List  : "+expP2Row8List);
			System.out.println("*********************************************************************");
			
			System.out.println("actP2Row9List  : "+actP2Row9List);
			System.out.println("expP2Row9List  : "+expP2Row9List);
			System.out.println("*********************************************************************");
					
			System.out.println("actP2Row10List  : "+actP2Row10List);
			System.out.println("expP2Row10ist   : "+expP2Row10List);
			System.out.println("*********************************************************************");
			
		
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) &&
					actRow2List.equalsIgnoreCase(expRow2List) &&
					actRow3List.equalsIgnoreCase(expRow3List) &&
					actRow4List.equalsIgnoreCase(expRow4List) &&
					actRow5List.equalsIgnoreCase(expRow5List) &&
					actRow6List.equalsIgnoreCase(expRow6List) &&
					actRow7List.equalsIgnoreCase(expRow7List) &&
					actRow8List.equalsIgnoreCase(expRow8List) && 
					actRow9List.equalsIgnoreCase(expRow9List) &&
					actRow10List.equalsIgnoreCase(expRow10List) &&
					actRow11List.equalsIgnoreCase(expRow11List) &&
					actRow12List.equalsIgnoreCase(expRow12List) &&
					actRow13List.equalsIgnoreCase(expRow13List) &&
					actRow14List.equalsIgnoreCase(expRow14List) &&
					actP2Row1List.equalsIgnoreCase(expP2Row1List) && 
					actP2Row2List.equalsIgnoreCase(expP2Row2List) &&
					actP2Row3List.equalsIgnoreCase(expP2Row3List) &&
					actP2Row4List.equalsIgnoreCase(expP2Row4List) &&
					
					actP2Row5List.equalsIgnoreCase(expP2Row5List) &&
					actP2Row6List.equalsIgnoreCase(expP2Row6List) &&
					actP2Row7List.equalsIgnoreCase(expP2Row7List) &&
					
					

					actP2Row8List.equalsIgnoreCase(expP2Row8List) &&
					actP2Row9List.equalsIgnoreCase(expP2Row9List) &&
					actP2Row10List.equalsIgnoreCase(expP2Row10List) &&
					
					actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
					actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
			{
				System.out.println("Test Pass : Reports Are as Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Report Are NOT as Expected ");
				return false;
			}
		}
		
		public boolean checkBankReconciliationStatementReportWithOutPDC() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankReconciliationStatement));
			bankReconciliationStatement.click();
			
			
			boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
			String expvalidationConfirmationMessage = "true";
			
			System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportaccountTxt));
			reportaccountTxt.click();
			reportaccountTxt.sendKeys(Keys.SPACE);
			
			int reportaccountTxtListCount = reportaccountTxtList.size();
			
			for(int i=0;i<reportaccountTxtListCount;i++)
			{
				String data = reportaccountTxtList.get(i).getText();
				
				if(data.equalsIgnoreCase("Bank"))
				{
					reportaccountTxtList.get(i).click();
				}
			}
			
			reportaccountTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
         boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
			String expvalidationConfirmationMessage1 = "true";
			
			System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = report1stRowList.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[, Balance as per Books, , 155.00, , , , 220.00, , , 31.00, , , ]";
			
			
			int report2ndRowListCount = report2ndRowList.size();
			ArrayList<String> report2ndRowListArray = new ArrayList<String>();
			for(int i=2;i<report2ndRowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndRowListArray.add(data);
			}
			String actRow2List = report2ndRowListArray.toString();
			String expRow2List = "[NDT58 : 1, Vendor New Reference, , 100.00, 100.00, 55.00, , 100.00, 100.00, 120.00, , 7.00, 7.00, 38.00]";
			
			
			int report3rdRowListCount = report3rdRowList.size();
			ArrayList<String> report3rdRowListArray = new ArrayList<String>();
			for(int i=2;i<report3rdRowListCount;i++)
			{
				String data = report3rdRowList.get(i).getText();
				report3rdRowListArray.add(data);
			}
			String actRow3List = report3rdRowListArray.toString();
			String expRow3List = "[NDT58 : 2, Vendor Semi Adjustment, , 10.00, 110.00, 45.00, , 10.00, 110.00, 110.00, , 0.70, 7.70, 38.70]";
			
			
			int report4thRowListCount = report4thRowList.size();
			ArrayList<String> report4thRowListArray = new ArrayList<String>();
			for(int i=2;i<report4thRowListCount;i++)
			{
				String data = report4thRowList.get(i).getText();
				report4thRowListArray.add(data);
			}
			String actRow4List = report4thRowListArray.toString();
			String expRow4List = "[NDT58 : 3, Vendor Full Adjustment, , 80.00, 190.00, 35.00, , 80.00, 190.00, 30.00, , 5.60, 13.30, 44.30]";

			int report5thRowListCount = report5thRowList.size();
			ArrayList<String> report5thRowListArray = new ArrayList<String>();
			for(int i=2;i<report5thRowListCount;i++)
			{
				String data = report5thRowList.get(i).getText();
				report5thRowListArray.add(data);
			}
			String actRow5List = report5thRowListArray.toString();
			String expRow5List = "[NDT58 : 4, Customer Semi Adjustment, , 10.00, 200.00, 45.00, , 10.00, 200.00, 20.00, , 0.70, 14.00, 45.00]";

			int report6thRowListCount = report6thRowList.size();
			ArrayList<String> report6thRowListArray = new ArrayList<String>();
			for(int i=2;i<report6thRowListCount;i++)
			{
				String data = report6thRowList.get(i).getText();
				report6thRowListArray.add(data);
			}
			String actRow6List = report6thRowListArray.toString();
			String expRow6List = "[NDT57 : 1, Customer New Reference, 100.00, , 100.00, 55.00, 100.00, , 100.00, 120.00, 7.00, , 7.00, 38.00]";
			
			int report7thRowListCount = report7thRowList.size();
			ArrayList<String> report7thRowListArray = new ArrayList<String>();
			for(int i=2;i<report7thRowListCount;i++)
			{
				String data = report7thRowList.get(i).getText();
				report7thRowListArray.add(data);
			}
			String actRow7List = report7thRowListArray.toString();
			String expRow7List = "[NDT57 : 2, Customer Semi Adjustment, 50.00, , 50.00, 105.00, 50.00, , 50.00, 170.00, 3.50, , 3.50, 34.50]";
			
			
			int report8thRowListCount = report8thRowList.size();
			ArrayList<String> report8thRowListArray = new ArrayList<String>();
			for(int i=2;i<report8thRowListCount;i++)
			{
				String data = report8thRowList.get(i).getText();
				report8thRowListArray.add(data);
			}
			String actRow8List = report8thRowListArray.toString();
			String expRow8List = "[NDT57 : 3, Customer Full Adjustment, 100.00, , 50.00, 205.00, 100.00, , 50.00, 270.00, 7.00, , 3.50, 27.50]";
			
			
			int report9thRowListCount = report9thRowList.size();
			ArrayList<String> report9thRowListArray = new ArrayList<String>();
			for(int i=2;i<report9thRowListCount;i++)
			{
				String data = report9thRowList.get(i).getText();
				report9thRowListArray.add(data);
			}
			String actRow9List = report9thRowListArray.toString();
			String expRow9List = "[NDT60 : 1, Vendor New Reference, 100.00, , 150.00, 305.00, 100.00, , 150.00, 370.00, 7.00, , 10.50, 20.50]";
			
			int report10thRowListCount = report10thRowList.size();
			ArrayList<String> report10thRowListArray = new ArrayList<String>();
			for(int i=2;i<report10thRowListCount;i++)
			{
				String data = report10thRowList.get(i).getText();
				report10thRowListArray.add(data);
			}
			String actRow10List = report10thRowListArray.toString();
			String expRow10List = "[NDT60 : 2, Vendor Semi Adjustment, 10.00, , 160.00, 315.00, 10.00, , 160.00, 380.00, 0.70, , 11.20, 19.80]";
			
			
			int report11thRowListCount = report11thRowList.size();
			ArrayList<String> report11thRowListArray = new ArrayList<String>();
			for(int i=2;i<report11thRowListCount;i++)
			{
				String data = report11thRowList.get(i).getText();
				report11thRowListArray.add(data);
			}
			String actRow11List = report11thRowListArray.toString();
			String expRow11List = "[NDT60 : 3, Vendor Full Adjustment, 100.00, , 260.00, 415.00, 100.00, , 260.00, 480.00, 7.00, , 18.20, 12.80]";
			
			int report12thRowListCount = report12thRowList.size();
			ArrayList<String> report12thRowListArray = new ArrayList<String>();
			for(int i=2;i<report12thRowListCount;i++)
			{
				String data = report12thRowList.get(i).getText();
				report12thRowListArray.add(data);
			}
			String actRow12List = report12thRowListArray.toString();
			String expRow12List = "[NDT60 : 4, Customer New Reference, , 10.00, 250.00, 405.00, , 10.00, 250.00, 470.00, , 0.70, 17.50, 13.50]";
			
			int report13thRowListCount = report13thRowList.size();
			ArrayList<String> report13thRowListArray = new ArrayList<String>();
			for(int i=2;i<report13thRowListCount;i++)
			{
				String data = report13thRowList.get(i).getText();
				report13thRowListArray.add(data);
			}
			String actRow13List = report13thRowListArray.toString();
			String expRow13List = "[NDT60 : 4, Customer Semi Adjustment, , 100.00, 150.00, 305.00, , 100.00, 150.00, 370.00, , 7.00, 10.50, 20.50]";
			
			int report14thRowListCount = report14thRowList.size();
			ArrayList<String> report14thRowListArray = new ArrayList<String>();
			for(int i=2;i<report14thRowListCount;i++)
			{
				String data = report14thRowList.get(i).getText();
				report14thRowListArray.add(data);
			}
			String actRow14List = report14thRowListArray.toString();
			String expRow14List = "[NDT60 : 4, Customer Full Adjustment, , 100.00, 50.00, 205.00, , 100.00, 50.00, 270.00, , 7.00, 3.50, 27.50]";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			Thread.sleep(2500);
			
			int reportsP2Row1ListCount = report1stRowList.size();
			ArrayList<String> reportsP2Row1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsP2Row1ListArray.add(data);
			}
			String actP2Row1List = reportsP2Row1ListArray.toString();
			String expP2Row1List = "[NDT63 : 3, Customer New Reference, , 50.00, 120.00, 35.00, , 50.00, 120.00, 100.00, , 3.50, 8.40, 39.40]";
			
			
			int report2ndP2RowListCount = report2ndRowList.size();
			ArrayList<String> report2ndP2RowListArray = new ArrayList<String>();
			for(int i=2;i<report2ndP2RowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndP2RowListArray.add(data);
			}
			String actP2Row2List = report2ndP2RowListArray.toString();
			String expP2Row2List = "[NDT62 : 1, Vendor New Reference, , 10.00, 130.00, 25.00, , 10.00, 130.00, 90.00, , 0.70, 9.10, 40.10]";
			
			
			int report3rdP2RowListCount = report3rdRowList.size();
			ArrayList<String> report3rdP2RowListArray = new ArrayList<String>();
			for(int i=2;i<report3rdP2RowListCount;i++)
			{
				String data = report3rdRowList.get(i).getText();
				report3rdP2RowListArray.add(data);
			}
			String actP2Row3List = report3rdP2RowListArray.toString();
			String expP2Row3List = "[NDT62 : 2, Vendor Semi Adjustment, , 50.00, 180.00, 25.00, , 50.00, 180.00, 40.00, , 3.50, 12.60, 43.60]";
			
			
			int report4thP2RowListCount = report4thRowList.size();
			ArrayList<String> report4thP2RowListArray = new ArrayList<String>();
			for(int i=2;i<report4thP2RowListCount;i++)
			{
				String data = report4thRowList.get(i).getText();
				report4thP2RowListArray.add(data);
			}
			String actP2Row4List = report4thP2RowListArray.toString();
			String expP2Row4List = "[NDT62 : 3, Customer New Reference, , 10.00, 190.00, 35.00, , 10.00, 190.00, 30.00, , 0.70, 13.30, 44.30]";
			
			

			int Count1 = report5thRowList.size();
			ArrayList<String> Count1Array = new ArrayList<String>();
			for(int i=2;i<Count1;i++)
			{
				String data = report5thRowList.get(i).getText();
				Count1Array.add(data);
			}
			String actP2Row5List = Count1Array.toString();
			String expP2Row5List = "[NDT58 : 8, Vendor Full Adjustment, , 10.00, 200.00, 45.00, , 10.00, 200.00, 20.00, , 0.70, 14.00, 45.00]";
			
			

			int Count2 = report6thRowList.size();
			ArrayList<String> Count2Array = new ArrayList<String>();
			for(int i=2;i<Count2;i++)
			{
				String data = report6thRowList.get(i).getText();
				Count2Array.add(data);
			}
			String actP2Row6List = Count2Array.toString();
			String expP2Row6List = "[Rct : 2, Vendor New Reference, 50.00, , 150.00, 5.00, 50.00, , 150.00, 70.00, 50.00, , 36.00, 5.00]";
			
			

			int Count3 = report7thRowList.size();
			ArrayList<String> Count3Array = new ArrayList<String>();
			for(int i=2;i<Count3;i++)
			{
				String data = report7thRowList.get(i).getText();
				Count3Array.add(data);
			}
			String actP2Row7List = Count3Array.toString();
			String expP2Row7List = "[Rct : 3, HDFC, 50.00, , 100.00, 55.00, 50.00, , 100.00, 120.00, 50.00, , 86.00, 55.00]";
			
			int Count4 = report8thRowList.size();
			ArrayList<String> Count4Array = new ArrayList<String>();
			for(int i=2;i<Count4;i++)
			{
				String data = report8thRowList.get(i).getText();
				Count4Array.add(data);
			}
			String actP2Row8List = Count4Array.toString();
			String expP2Row8List = "[Pmt : 1, Vendor New Reference, , 50.00, 150.00, 5.00, , 50.00, 150.00, 70.00, , 50.00, 36.00, 5.00]";
			
			
			int Count5 = report9thRowList.size();
			ArrayList<String> Count5Array = new ArrayList<String>();
			for(int i=2;i<Count5;i++)
			{
				String data = report9thRowList.get(i).getText();
				Count5Array.add(data);
			}
			String actP2Row9List = Count5Array.toString();
			String expP2Row9List = "[Pmt : 2, HDFC, , 5.00, 155.00, , , 70.00, 220.00, , , 5.00, 31.00, ]";
			

			int Count6 = report10thRowList.size();
			ArrayList<String> Count6Array = new ArrayList<String>();
			for(int i=2;i<Count6;i++)
			{
				String data = report10thRowList.get(i).getText();
				Count6Array.add(data);
			}
			String actP2Row10List = Count6Array.toString();
			String expP2Row10List = "[, , 560.00, 715.00, 1,065.00, 3,120.00, 560.00, 780.00, 1,130.00, 4,810.00, 132.20, 101.20, 153.30, 683.70]";
			
			
						
			System.out.println("actRow1List  : "+actRow1List);
			System.out.println("expRow1List  : "+expRow1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow2List  : "+actRow2List);
			System.out.println("expRow2List  : "+expRow2List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow3List  : "+actRow3List);
			System.out.println("expRow3List  : "+expRow3List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow4List  : "+actRow4List);
			System.out.println("expRow4List  : "+expRow4List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow5List  : "+actRow5List);
			System.out.println("expRow5List  : "+expRow5List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow6List  : "+actRow6List);
			System.out.println("expRow6List  : "+expRow6List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow7List  : "+actRow7List);
			System.out.println("expRow7List  : "+expRow7List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow8List  : "+actRow8List);
			System.out.println("expRow8List  : "+expRow8List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow9List  : "+actRow9List);
			System.out.println("expRow9List  : "+expRow9List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow10List  : "+actRow10List);
			System.out.println("expRow10List  : "+expRow10List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow11List  : "+actRow11List);
			System.out.println("expRow11List  : "+expRow11List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow12List  : "+actRow12List);
			System.out.println("expRow12List  : "+expRow12List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow13List  : "+actRow13List);
			System.out.println("expRow13List  : "+expRow13List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow14List  : "+actRow14List);
			System.out.println("expRow14List  : "+expRow14List);
			System.out.println("*********************************************************************");
			
			
			System.out.println("actP2Row1List  : "+actP2Row1List);
			System.out.println("expP2Row1List  : "+expP2Row1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actP2Row2List  : "+actP2Row2List);
			System.out.println("expP2Row2List  : "+expP2Row2List);
			System.out.println("*********************************************************************");
					
			System.out.println("actP2Row3List  : "+actP2Row3List);
			System.out.println("expP2Row3List  : "+expP2Row3List);
			System.out.println("*********************************************************************");
			
			System.out.println("actP2Row4List  : "+actP2Row4List);
			System.out.println("expP2Row4List  : "+expP2Row4List);
			System.out.println("*********************************************************************");
			
			System.out.println("actP2Row5List  : "+actP2Row5List);
			System.out.println("expP2Row5List  : "+expP2Row5List);
			System.out.println("*********************************************************************");
					
			System.out.println("actP2Row6List  : "+actP2Row6List);
			System.out.println("expP2Row6List  : "+expP2Row6List);
			System.out.println("*********************************************************************");
			
			System.out.println("actP2Row7List  : "+actP2Row7List);
			System.out.println("expP2Row7List  : "+expP2Row7List);
			System.out.println("*********************************************************************");
			

			System.out.println("actP2Row8List  : "+actP2Row8List);
			System.out.println("expP2Row8List  : "+expP2Row8List);
			System.out.println("*********************************************************************");
			
			System.out.println("actP2Row9List  : "+actP2Row9List);
			System.out.println("expP2Row9List  : "+expP2Row9List);
			System.out.println("*********************************************************************");
					
			System.out.println("actP2Row10List  : "+actP2Row10List);
			System.out.println("expP2Row10ist  : "+expP2Row10List);
			System.out.println("*********************************************************************");
			
		
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) &&
					actRow2List.equalsIgnoreCase(expRow2List) &&
					actRow3List.equalsIgnoreCase(expRow3List) &&
					actRow4List.equalsIgnoreCase(expRow4List) &&
					actRow5List.equalsIgnoreCase(expRow5List) &&
					actRow6List.equalsIgnoreCase(expRow6List) &&
					actRow7List.equalsIgnoreCase(expRow7List) &&
					actRow8List.equalsIgnoreCase(expRow8List) && 
					actRow9List.equalsIgnoreCase(expRow9List) &&
					actRow10List.equalsIgnoreCase(expRow10List) &&
					actRow11List.equalsIgnoreCase(expRow11List) &&
					actRow12List.equalsIgnoreCase(expRow12List) &&
					actRow13List.equalsIgnoreCase(expRow13List) &&
					actRow14List.equalsIgnoreCase(expRow14List) &&
					actP2Row1List.equalsIgnoreCase(expP2Row1List) && 
					actP2Row2List.equalsIgnoreCase(expP2Row2List) &&
					actP2Row3List.equalsIgnoreCase(expP2Row3List) &&
					actP2Row4List.equalsIgnoreCase(expP2Row4List) &&
					
					actP2Row5List.equalsIgnoreCase(expP2Row5List) &&
					actP2Row6List.equalsIgnoreCase(expP2Row6List) &&
					actP2Row7List.equalsIgnoreCase(expP2Row7List) &&
					
					

					actP2Row8List.equalsIgnoreCase(expP2Row8List) &&
					actP2Row9List.equalsIgnoreCase(expP2Row9List) &&
					actP2Row10List.equalsIgnoreCase(expP2Row10List) &&
					
					actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
					actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
			{
				System.out.println("Test Pass : Reports Are as Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Report Are NOT as Expected ");
				return false;
			}
		}
			
		
		// Cheque Discounting
		
		
		

				@FindBy(xpath="//input[@id='optnCtrlCheqDisBank']")
				private static WebElement bankAccountTxt;
				
				@FindBy(xpath="//input[@id='optctrlCheqDisCustomer']")
				private static WebElement CD_customerAccountTxt;
				
				@FindBy(xpath="//input[@id='DepositingBank']")
				private static WebElement discountingBankTxt;
				
				@FindBy(xpath="//i[@class='icon-reset icon-font6']")
				private static WebElement cd_LoadBtn;
				
				@FindBy(xpath="//input[@id='txtMarginPercentageId']")
				private static WebElement cd_MarginTxt;
				
				@FindBy(xpath="//input[@id='btnDepositingBank']")
				private static WebElement cd_ApplyBtn;
				
				@FindBy(xpath="//i[@class='icon-clear icon-font6']")
				private static WebElement cd_clearBtn;
				
				@FindBy(xpath="//span[@id='btnSave']//i[@class='icon-save icon-font6']")
				private static WebElement cd_saveBtn;
				
				@FindBy(xpath="//span[@id='btnClose']")
				private static WebElement cd_CloseBtn;
				
				
				@FindBy(xpath="//thead[@id='ChequeDiscountingTable_head']/tr/th/div")
				private static List<WebElement> cd_tableHeadeList;
				
				


				@FindBy(xpath="//td[@id='ChequeDiscountingTable_col_1-2']")
				private static WebElement  disCustomerRow1; 
				
				@FindBy(xpath="//td[@id='ChequeDiscountingTable_col_1-3']")
				private static WebElement  disVoucherRow1; 
				
				@FindBy(xpath="//td[@id='ChequeDiscountingTable_col_1-4']")
				private static WebElement  disMaturityDateRow1; 
				
				@FindBy(xpath="//td[@id='ChequeDiscountingTable_col_1-5']")
				private static WebElement  disChequeNumberRow1; 
				
				@FindBy(xpath="//td[@id='ChequeDiscountingTable_col_1-6']")
				private static WebElement  disAmountRow1; 
				
				@FindBy(xpath="//td[@id='ChequeDiscountingTable_col_1-7']")
				private static WebElement  disDiscountlimitRow1; 
				
				@FindBy(xpath="//td[@id='ChequeDiscountingTable_col_1-8']")
				private static WebElement  disDiscountAmtRow1; 
				
				@FindBy(xpath="//td[@id='ChequeDiscountingTable_col_1-9']")
				private static WebElement  disBankRow1; 
				
				@FindBy(xpath="//td[@id='ChequeDiscountingTable_col_1-10']")
				private static WebElement  disMarginRow1; 
				
				@FindBy(xpath="//td[@id='ChequeDiscountingTable_col_1-11']")
				private static WebElement  disPostOnDateRow1; 
			
				
				@FindBy(xpath="//*[@id='optnCtrlCheqDisBank_table_body']/tr/td[2]")
				private static List<WebElement>  chequeDisList; 
				
				@FindBy(xpath="//*[@id='ChequeDiscountingTable_body']/tr[1]/td")
				private static List<WebElement>  chequeDisBodyGridList; 
				
				@FindBy(xpath="//*[@id='ChequeDiscountingTable_body']")
				private static WebElement  chequeDisBodyGrid; 
				
				
public boolean checkChequeDiscountingReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
	cashAndBankBooksMenu.click();
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeDiscountingMenu));
	chequeDiscountingMenu.click();
	
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";

	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
    Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankAccountTxt));
	bankAccountTxt.click();
	bankAccountTxt.sendKeys(Keys.SPACE);
	int chequeDisListCount=chequeDisList.size();
	
	for (int i = 0; i < chequeDisListCount; i++) 
	{
	
		String data=chequeDisList.get(i).getText();
		if (data.equalsIgnoreCase("HDFC"))
		{
		
			chequeDisList.get(i).click();
		}
		
	}
	bankAccountTxt.sendKeys(Keys.TAB);
	
	Thread.sleep(2000);
		
		
	int chequeDisBodyGridListCount=chequeDisBodyGridList.size();
	
	ArrayList<String >chequeDisBodyGridListArray=new ArrayList<String>();
	
	for (int i = 0; i < chequeDisBodyGridListCount; i++) 
	{
	
		String data=chequeDisBodyGridList.get(i).getText();
		
		if (i==4) 
		{
		data="DateField";	
		}
		if (i==11) 
		{
		data="DateField";	
		}
		
		chequeDisBodyGridListArray.add(data);
		
	}
	
	String actchequeDisBodyGridList=chequeDisBodyGridListArray.toString();
	String expchequeDisBodyGridList="[, , VAT INPUT, 3, DateField, PDRHDFC01, 2.38, 0.00, 0.00, HDFC, 0, DateField, ]";
	
	System.out.println(" Actual chequeDisBodyGridList : "+actchequeDisBodyGridList);
	System.out.println(" Exp chequeDisBodyGridList    : "+expchequeDisBodyGridList);

	if (actchequeDisBodyGridList.equalsIgnoreCase(expchequeDisBodyGridList) && 
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage))
	{
		System.out.println(" Test Pass: Displayed AS EXPECTED ");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_CloseBtn));
		cd_CloseBtn.click();
		return true;
		
	}
	else
	{
		System.out.println(" Test Fail: Displayed AS EXPECTED ");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_CloseBtn));
		cd_CloseBtn.click();
		return false;
	}
}
			
			
				
//Registers


@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[3]/ul/li[8]/ul/li/a/span")
private static List<WebElement> registerList;

public boolean checkOpeningBalanceRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalanceRegisterReport));
	openingBalanceRegisterReport.click();
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
	
	Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
	int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=2;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[OpeBal : 1, Customer Semi Adjustment, , 100.00, , 100.00, , 11.00]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[OpeBal : 1, Customer Full Adjustment, , 100.00, , 100.00, , 11.00]";
	
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=2;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[OpeBal : 1, Customer New Reference, , 100.00, , 100.00, , 11.00]";
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=2;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[OpeBal : 1, Vendor Full Adjustment, , 100.00, , 100.00, , 11.00]";
	
	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=2;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[OpeBal : 1, Vendor Semi Adjustment, , 100.00, , 100.00, , 11.00]";
	
	int report6thRowListCount = report6thRowList.size();
	ArrayList<String> report6thRowListArray = new ArrayList<String>();
	for(int i=2;i<report6thRowListCount;i++)
	{
		String data = report6thRowList.get(i).getText();
		report6thRowListArray.add(data);
	}
	String actRow6List = report6thRowListArray.toString();
	String expRow6List = "[OpeBal : 1, Vendor New Reference, , 100.00, , 100.00, , 11.00]";
	
	int report7thRowListCount = report7thRowList.size();
	ArrayList<String> report7thRowListArray = new ArrayList<String>();
	for(int i=2;i<report7thRowListCount;i++)
	{
		String data = report7thRowList.get(i).getText();
		report7thRowListArray.add(data);
	}
	String actRow7List = report7thRowListArray.toString();
	String expRow7List = "[OpeBal : 2, Customer Semi Adjustment, 20.00, , 20.00, , 2.20, ]";
	
	int report8thRowListCount = report8thRowList.size();
	ArrayList<String> report8thRowListArray = new ArrayList<String>();
	for(int i=2;i<report8thRowListCount;i++)
	{
		String data = report8thRowList.get(i).getText();
		report8thRowListArray.add(data);
	}
	String actRow8List = report8thRowListArray.toString();
	String expRow8List = "[OpeBal : 2, Customer Full Adjustment, 20.00, , 20.00, , 2.20, ]";
	
	int report9thRowListCount = report9thRowList.size();
	ArrayList<String> report9thRowListArray = new ArrayList<String>();
	for(int i=2;i<report9thRowListCount;i++)
	{
		String data = report9thRowList.get(i).getText();
		report9thRowListArray.add(data);
	}
	String actRow9List = report9thRowListArray.toString();
	String expRow9List = "[OpeBal : 2, Customer New Reference, 20.00, , 20.00, , 2.20, ]";
	
	int report10thRowListCount = report10thRowList.size();
	ArrayList<String> report10thRowListArray = new ArrayList<String>();
	for(int i=2;i<report10thRowListCount;i++)
	{
		String data = report10thRowList.get(i).getText();
		report10thRowListArray.add(data);
	}
	String actRow10List = report10thRowListArray.toString();
	String expRow10List = "[OpeBal : 2, Vendor Full Adjustment, 20.00, , 20.00, , 2.20, ]";
	
	int report11thRowListCount = report11thRowList.size();
	ArrayList<String> report11thRowListArray = new ArrayList<String>();
	for(int i=2;i<report11thRowListCount;i++)
	{
		String data = report11thRowList.get(i).getText();
		report11thRowListArray.add(data);
	}
	String actRow11List = report11thRowListArray.toString();
	String expRow11List = "[OpeBal : 2, Vendor Semi Adjustment, 20.00, , 20.00, , 2.20, ]";
	
	int report12thRowListCount = report12thRowList.size();
	ArrayList<String> report12thRowListArray = new ArrayList<String>();
	for(int i=2;i<report12thRowListCount;i++)
	{
		String data = report12thRowList.get(i).getText();
		report12thRowListArray.add(data);
	}
	String actRow12List = report12thRowListArray.toString();
	String expRow12List = "[OpeBal : 2, Vendor New Reference, 20.00, , 20.00, , 2.20, ]";
	
	int report13thRowListCount = report13thRowList.size();
	ArrayList<String> report13thRowListArray = new ArrayList<String>();
	for(int i=1;i<report13thRowListCount;i++)
	{
		String data = report13thRowList.get(i).getText();
		report13thRowListArray.add(data);
	}
	String actRow13List = report13thRowListArray.toString();
	String expRow13List = "[Grand Total, , , 120.00, 600.00, 120.00, 600.00, 13.20, 66.00]";
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow6List  : "+actRow6List);
	System.out.println("expRow6List  : "+expRow6List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow7List  : "+actRow7List);
	System.out.println("expRow7List  : "+expRow7List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow8List  : "+actRow8List);
	System.out.println("expRow8List  : "+expRow8List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow9List  : "+actRow9List);
	System.out.println("expRow9ist  : "+expRow9List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow10List  : "+actRow10List);
	System.out.println("expRow10List  : "+expRow10List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow11List  : "+actRow11List);
	System.out.println("expRow11List  : "+expRow11List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow12List  : "+actRow12List);
	System.out.println("expRow12List  : "+expRow12List);
	System.out.println("*********************************************************************");
	
	
	System.out.println("actRow13List  : "+actRow13List);
	System.out.println("expRow13List  : "+expRow13List);
	System.out.println("*********************************************************************");
	
	
	if(actRow1List.equalsIgnoreCase(expRow1List) &&
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			actRow5List.equalsIgnoreCase(expRow5List) &&
			actRow6List.equalsIgnoreCase(expRow6List) &&
			actRow7List.equalsIgnoreCase(expRow7List) &&
			
			actRow8List.equalsIgnoreCase(expRow8List) &&
			actRow9List.equalsIgnoreCase(expRow9List) &&
			actRow10List.equalsIgnoreCase(expRow10List) &&
			actRow11List.equalsIgnoreCase(expRow11List) &&
			actRow12List.equalsIgnoreCase(expRow12List) &&
			actRow13List.equalsIgnoreCase(expRow13List) &&
			
			
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(actvalidationConfirmationMessage1))
	{
		
		return true;
	}
	else
	{
		
		return false;
	}
}



public boolean checkJournalEntriesRegisterOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesRegisterReport));
	journalEntriesRegisterReport.click();
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
    boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);


	Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
	int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=2;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[NDT60 : 1, Bank, , 100.00, , 100.00, , 7.00]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[NDT60 : 2, Bank, , 10.00, , 10.00, , 0.70]";
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=2;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[NDT60 : 3, Bank, , 100.00, , 100.00, , 7.00]";
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=2;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[NDT60 : 4, Customer Semi Adjustment, , 100.00, , 100.00, , 7.00]";
	
	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=2;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[NDT60 : 4, Customer Full Adjustment, , 100.00, , 100.00, , 7.00]";
	
	int report6thRowListCount = report6thRowList.size();
	ArrayList<String> report6thRowListArray = new ArrayList<String>();
	for(int i=2;i<report6thRowListCount;i++)
	{
		String data = report6thRowList.get(i).getText();
		report6thRowListArray.add(data);
	}
	String actRow6List = report6thRowListArray.toString();
	String expRow6List = "[NDT60 : 4, Customer New Reference, , 10.00, , 10.00, , 0.70]";
	
	int report7thRowListCount = report7thRowList.size();
	ArrayList<String> report7thRowListArray = new ArrayList<String>();
	for(int i=1;i<report7thRowListCount;i++)
	{
		String data = report7thRowList.get(i).getText();
		report7thRowListArray.add(data);
	}
	String actRow7List = report7thRowListArray.toString();
	String expRow7List = "[Grand Total, , , , 420.00, , 420.00, , 29.40]";
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow6List  : "+actRow6List);
	System.out.println("expRow6List  : "+expRow6List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow7List  : "+actRow7List);
	System.out.println("expRow7List  : "+expRow7List);
	System.out.println("*********************************************************************");
	
	if(actRow1List.equalsIgnoreCase(expRow1List) &&
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			
			actRow5List.equalsIgnoreCase(expRow5List) &&
			actRow6List.equalsIgnoreCase(expRow6List) &&
			actRow7List.equalsIgnoreCase(expRow7List) &&
			
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(actvalidationConfirmationMessage1))
	{
		
		return true;
	}
	else
	{
		
		return false;
	}
}


public boolean checkCreditNoteRegisterOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNoteRegisterReport));
	creditNoteRegisterReport.click();
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
    boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
	
	Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
    int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=2;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[NDT63 : 1, Customer New Reference, 50.00]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[NDT63 : 2, Customer Semi Adjustment, 40.00]";
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=2;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[NDT63 : 3, Customer New Reference, 50.00]";
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=1;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[Grand Total, , , 140.00]";
	
	
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
			
	
	if(actRow1List.equalsIgnoreCase(expRow1List) &&
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(actvalidationConfirmationMessage1))
	{
		
		return true;
	}
	else
	{
		
		return false;
	}
	}

				
public boolean checkDebitNoteRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitNoteRegisterReport));
	debitNoteRegisterReport.click();
	
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	
    boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
	
	Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
	
	int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=2;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[NDT62 : 1, Bank, 10.00]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[NDT62 : 1, VAT INPUT, 0.48]";
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=2;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[NDT62 : 2, Bank, 50.00]";
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=2;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[NDT62 : 2, VAT INPUT, 2.38]";
	
	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=2;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[NDT62 : 3, Bank, 10.00]";
	
	int report6thRowListCount = report6thRowList.size();
	ArrayList<String> report6thRowListArray = new ArrayList<String>();
	for(int i=1;i<report6thRowListCount;i++)
	{
		String data = report6thRowList.get(i).getText();
		report6thRowListArray.add(data);
	}
	String actRow6List = report6thRowListArray.toString();
	String expRow6List = "[Grand Total, , , 67.14]";
	
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow6List  : "+actRow6List);
	System.out.println("expRow6List  : "+expRow6List);
	System.out.println("*********************************************************************");
	
	
	
	if(actRow1List.equalsIgnoreCase(expRow1List) &&
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			
			actRow5List.equalsIgnoreCase(expRow5List) &&
			actRow6List.equalsIgnoreCase(expRow6List) &&
			
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(actvalidationConfirmationMessage1))
	{
		
		return true;
	}
	else
	{
		
		return false;
	}	
	}


public boolean checkReceiptRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptsRegisterReport));
	receiptsRegisterReport.click();
	
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	
    boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
	
	
	Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
	int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=2;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[NDT57 : 1, Customer New Reference, 100.00, , 100.00, , 7.00, ]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[NDT57 : 1, VAT OUTPUT, 4.76, , 4.76, , 0.33, ]";
	
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=2;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[NDT57 : 2, VAT OUTPUT, 2.38, , 2.38, , 0.17, ]";
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=2;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[NDT57 : 2, Customer Semi Adjustment, 50.00, , 50.00, , 3.50, ]";
	
	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=2;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[NDT57 : 3, Customer Full Adjustment, 100.00, , 100.00, , 7.00, ]";
	
	int report6thRowListCount = report6thRowList.size();
	ArrayList<String> report6thRowListArray = new ArrayList<String>();
	for(int i=2;i<report6thRowListCount;i++)
	{
		String data = report6thRowList.get(i).getText();
		report6thRowListArray.add(data);
	}
	String actRow6List = report6thRowListArray.toString();
	String expRow6List = "[Rct : 2, Vendor New Reference, 50.00, , 50.00, , 50.00, ]";
	
	int report7thRowListCount = report7thRowList.size();
	ArrayList<String> report7thRowListArray = new ArrayList<String>();
	for(int i=2;i<report7thRowListCount;i++)
	{
		String data = report7thRowList.get(i).getText();
		report7thRowListArray.add(data);
	}
	String actRow7List = report7thRowListArray.toString();
	String expRow7List = "[Rct : 3, HDFC, 50.00, , 50.00, , 50.00, ]";
	
	int report8thRowListCount = report8thRowList.size();
	ArrayList<String> report8thRowListArray = new ArrayList<String>();
	for(int i=2;i<report8thRowListCount;i++)
	{
		String data = report8thRowList.get(i).getText();
		report8thRowListArray.add(data);
	}
	String actRow8List = report8thRowListArray.toString();
	String expRow8List = "[, , 357.14, , 357.14, , 118.00, ]";
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow6List  : "+actRow6List);
	System.out.println("expRow6List  : "+expRow6List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow7List  : "+actRow7List);
	System.out.println("expRow7List  : "+expRow7List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow8List  : "+actRow8List);
	System.out.println("expRow8List  : "+expRow8List);
	System.out.println("*********************************************************************");
	
	
	if(actRow1List.equalsIgnoreCase(expRow1List) &&
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			actRow5List.equalsIgnoreCase(expRow5List) &&
			actRow6List.equalsIgnoreCase(expRow6List) &&
			actRow7List.equalsIgnoreCase(expRow7List) &&

			actRow8List.equalsIgnoreCase(expRow8List) &&
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(actvalidationConfirmationMessage1))
	{
		
		
		return true;
	}
	else
	{
		
		return false;
	}
}


public boolean checkPaymentRegisterOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentRegisterReport));
	paymentRegisterReport.click();
	
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);

	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
	
	Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
	int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=2;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[NDT58 : 1, VAT INPUT, , 4.76, , 4.76, , 0.33]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[NDT58 : 1, Vendor New Reference, , 100.00, , 100.00, , 7.00]";
	
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=2;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[NDT58 : 2, Vendor Semi Adjustment, , 10.00, , 10.00, , 0.70]";
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=2;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[NDT58 : 3, Vendor Full Adjustment, , 80.00, , 80.00, , 5.60]";
	
	
	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=2;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[NDT58 : 4, Customer Semi Adjustment, , 10.00, , 10.00, , 0.70]";
	
	int report6thRowListCount = report6thRowList.size();
	ArrayList<String> report6thRowListArray = new ArrayList<String>();
	for(int i=2;i<report6thRowListCount;i++)
	{
		String data = report6thRowList.get(i).getText();
		report6thRowListArray.add(data);
	}
	String actRow6List = report6thRowListArray.toString();
	String expRow6List = "[NDT58 : 5, Vendor Semi Adjustment, , 10.00, , 10.00, , 0.70]";
	
	
	int report7thRowListCount = report7thRowList.size();
	ArrayList<String> report7thRowListArray = new ArrayList<String>();
	for(int i=2;i<report7thRowListCount;i++)
	{
		String data = report7thRowList.get(i).getText();
		report7thRowListArray.add(data);
	}
	String actRow7List = report7thRowListArray.toString();
	String expRow7List = "[NDT58 : 6, Vendor Full Adjustment, , 10.00, , 10.00, , 0.70]";
	
	int report8thRowListCount = report8thRowList.size();
	ArrayList<String> report8thRowListArray = new ArrayList<String>();
	for(int i=2;i<report8thRowListCount;i++)
	{
		String data = report8thRowList.get(i).getText();
		report8thRowListArray.add(data);
	}
	String actRow8List = report8thRowListArray.toString();
	String expRow8List = "[NDT58 : 7, Customer Semi Adjustment, , 10.00, , 10.00, , 0.70]";
	
	int report9thRowListCount = report9thRowList.size();
	ArrayList<String> report9thRowListArray = new ArrayList<String>();
	for(int i=2;i<report9thRowListCount;i++)
	{
		String data = report9thRowList.get(i).getText();
		report9thRowListArray.add(data);
	}
	String actRow9List = report9thRowListArray.toString();
	String expRow9List = "[NDT58 : 8, Vendor Full Adjustment, , 10.00, , 10.00, , 0.70]";
	
	
	int report10thRowListCount = report10thRowList.size();
	ArrayList<String> report10thRowListArray = new ArrayList<String>();
	for(int i=2;i<report10thRowListCount;i++)
	{
		String data = report10thRowList.get(i).getText();
		
		report10thRowListArray.add(data);
	}
	String actRow10List = report10thRowListArray.toString();
	String expRow10List = "[Pmt : 1, Vendor New Reference, , 50.00, , 50.00, , 50.00]";
	
	
	int report11thRowListCount = report11thRowList.size();
	ArrayList<String> report11thRowListArray = new ArrayList<String>();
	for(int i=2;i<report11thRowListCount;i++)
	{
		String data = report11thRowList.get(i).getText();
		
		report11thRowListArray.add(data);
	}
	String actRow11List = report11thRowListArray.toString();
	String expRow11List = "[Pmt : 2, HDFC, , 70.00, , 5.00, , 5.00]";
	
	int report12thRowListCount = report12thRowList.size();
	ArrayList<String> report12thRowListArray = new ArrayList<String>();
	for(int i=1;i<report12thRowListCount;i++)
	{
		String data = report12thRowList.get(i).getText();
		
		report12thRowListArray.add(data);
	}
	String actRow12List = report12thRowListArray.toString();
	String expRow12List = "[Grand Total, , , , 364.76, , 299.76, , 72.13]";
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow6List  : "+actRow6List);
	System.out.println("expRow6List  : "+expRow6List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow7List  : "+actRow7List);
	System.out.println("expRow7List  : "+expRow7List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow8List  : "+actRow8List);
	System.out.println("expRow8List  : "+expRow8List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow9List  : "+actRow9List);
	System.out.println("expRow9List  : "+expRow9List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow10List  : "+actRow10List);
	System.out.println("expRow10List  : "+expRow10List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow11List  : "+actRow11List);
	System.out.println("expRow11List  : "+expRow11List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow12List  : "+actRow12List);
	System.out.println("expRow12List  : "+expRow12List);
	System.out.println("*********************************************************************");
	
	
	if(actRow1List.equalsIgnoreCase(expRow1List) &&
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			actRow5List.equalsIgnoreCase(expRow5List) &&
			actRow6List.equalsIgnoreCase(expRow6List) &&
			actRow7List.equalsIgnoreCase(expRow7List) &&
			actRow8List.equalsIgnoreCase(expRow8List) &&
			actRow9List.equalsIgnoreCase(expRow9List) &&
			actRow10List.equalsIgnoreCase(expRow10List) &&
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(actvalidationConfirmationMessage1))
	{
		
		return true;
	}
	else
	{
		
		return false;
	}
	
}

@FindBy(xpath="//select[@id='RITCombobox__3']")
private static WebElement considerDatesBasedOnDropDown;

public boolean checkPdcReceiptsRegisterReportWithConsolidatedAmountsOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	//Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcReceiptsRegisterReport));
	pdcReceiptsRegisterReport.click();
	
	Thread.sleep(2000);
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(brsIncludePdcChkBox));
	brsIncludePdcChkBox.click();
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	
	boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
	Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
	int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=2;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		if (i==6)
		{
		   data="date Field";	
		}
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[NDT66 : 2, Bank, Vendor New Reference, 50.00, date Field]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		
		if (i==6)
		{
		   data="date Field";	
		}
		
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[NDT66 : 3, HDFC, Customer Semi Adjustment, 50.00, date Field]";
	
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=2;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		if (i==6)
		{
		   data="date Field";	
		}
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[NDT66 : 3, HDFC, VAT INPUT, 2.38, date Field]";
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=2;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		if (i==6)
		{
		   data="date Field";	
		}
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[NDT66 : 2, Bank, VAT INPUT, 2.38, date Field]";
	
	
	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=1;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[Grand Total, , , , 104.76, ]";
	
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
	
	
	
	if(/*actRow1List.equalsIgnoreCase(expRow1List) &&
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&*/
			actRow5List.equalsIgnoreCase(expRow5List) &&
			
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(actvalidationConfirmationMessage1))
	{
		return true;
	}
	else
	{
		
		return false;
	}
	
}

public boolean checkPdcReceiptsRegisterReportWithOutConsolidatedAmountsOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	//Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcReceiptsRegisterReport));
	pdcReceiptsRegisterReport.click();
	
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	
	boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
	Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
	int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=2;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		if (i==6)
		{
		   data="date Field";	
		}
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[NDT66 : 2, Bank, Vendor New Reference, 50.00, date Field]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		
		if (i==6)
		{
		   data="date Field";	
		}
		
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[NDT66 : 2, Bank, VAT INPUT, 2.38, date Field]";
	
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=2;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		if (i==6)
		{
		   data="date Field";	
		}
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[NDT66 : 3, HDFC, Customer Semi Adjustment, 50.00, date Field]";
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=2;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		if (i==6)
		{
		   data="date Field";	
		}
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[NDT66 : 3, HDFC, VAT INPUT, 2.38, date Field]";
	
	
	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=1;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[Grand Total, , , , 104.76, ]";
	
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
	
	
	
	if(actRow1List.equalsIgnoreCase(expRow1List) &&
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			actRow5List.equalsIgnoreCase(expRow5List) &&
			
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(actvalidationConfirmationMessage1))
	{
		return true;
	}
	else
	{
		
		return false;
	}
	
}


public boolean checkPdcPaymentsRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	//Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	//Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	//Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	
	//Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcPaymentsRegisterReport));
	pdcPaymentsRegisterReport.click();
	
	//Thread.sleep(2000);
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(brsIncludePdcChkBox));
	brsIncludePdcChkBox.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	
	boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	
	Thread.sleep(2000);
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

    int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=2;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		if (i==6)
		{
		   data="date Field";	
		}
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[NDT65 : 1, Bank, Vendor New Reference, 50.00, date Field]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		
		if (i==6)
		{
		   data="date Field";	
		}
		
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[NDT65 : 2, HDFC, Vendor Semi Adjustment, 70.00, date Field]";
	
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=1;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[Grand Total, , , , 120.00, ]";
	
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
	
	
	if(actRow1List.equalsIgnoreCase(expRow1List) &&
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List)&&
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(actvalidationConfirmationMessage1))
	{
		
		return true;
	}
	else
	{
		
		return false;
	}
}


@FindBy(xpath="//input[@id='FOption_517_0_DefaultFilter_0']")
private static WebElement  enterJEDefaultItemTxt;

@FindBy(xpath="//a[contains(text(),'Item')]//i[@class='icon-expand icon-font7']")
private static WebElement filteRITEMExpandBtn;

@FindBy(xpath="//*[@id='FilterFields_209_0']/li[3]/a")
private static WebElement filterSalesItemExpandBtn;

@FindBy(xpath="//input[@id='5021']")
private static WebElement  filterItemNameChkbox;

@FindBy(xpath="//*[@id='dvReportDetails']/div/table/tbody/tr/td[2]")
private static List<WebElement>  reportDateList;



public boolean checkEntryJournalRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryJournalRegisterReport));
	entryJournalRegisterReport.click();
	Thread.sleep(2000);
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	
	boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);

	
     Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
	
	report_LastBtn.click();
	
	
	Thread.sleep(6000);
	
	
	int reportDateListCount=reportDateList.size();
	
	
	ArrayList<String >reportGrandTotalList=new ArrayList<>();
	
	for (int i = 0; i < reportDateListCount; i++) 
	{
		String data=reportDateList.get(i).getText();
		
		if (data.equalsIgnoreCase("Grand Total")) 
		{
			int rowcount = reportRowList.size();
			
			for (int j = 0; j < rowcount; j++)
			{
				String data1 = reportRowList.get(i).getText();
				reportGrandTotalList.add(data1);
				break;
			}
			
		} 
		
	}
	
	String actGrandTotalList = reportGrandTotalList.toString();
	String expGrandTotalList ="[119 Grand Total 4,539.40 4,539.40 2,680.32 4,409.40 4,409.40 2,680.32 486.26 486.26 306.32]";
	
	
	System.out.println("actGrandTotalList : "+actGrandTotalList);
	System.out.println("expGrandTotalList : "+expGrandTotalList);
	
	Thread.sleep(3000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
	report_FilterBtn.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
	report_FilterCustomizeBtn.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filteRITEMExpandBtn));
	filteRITEMExpandBtn.click();
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterItemNameChkbox));
	if (filterItemNameChkbox.isSelected()==false)
	{
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterItemNameChkbox));
		filterItemNameChkbox.click();
		
	}
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filter_FilterOkButton));
	filter_FilterOkButton.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterJEDefaultItemTxt));
	enterJEDefaultItemTxt.click();
	enterJEDefaultItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	enterJEDefaultItemTxt.sendKeys(Keys.SPACE);
	enterJEDefaultItemTxt.sendKeys("STD RATE COGS ITEM");
	
	Thread.sleep(2000);
	
	enterJEDefaultItemTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterOkButton));
	filterOkButton.click();

	Thread.sleep(3000);
	
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
	int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=2;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[NDT52 : 1, STD RATE COGS ACC INV, 1,200.00, , 1,200.00, STD RATE COGS ACC INV, 1,200.00, , 1,200.00, 84.00, , 84.00]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=2;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[NDT52 : 1, Vendor New Reference, , 105.00, 1,095.00, Vendor New Reference, , 105.00, 1,095.00, , 7.35, 76.65]";
	
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=2;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[NDT52 : 2, Vendor Semi Adjustment, , 52.50, 1,042.50, Vendor Semi Adjustment, , 52.50, 1,042.50, , 3.68, 72.98]";
	
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=2;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[NDT52 : 2, STD RATE COGS ACC INV, 600.00, , 1,642.50, STD RATE COGS ACC INV, 600.00, , 1,642.50, 42.00, , 114.98]";

	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=2;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[NDT52 : 3, Vendor Full Adjustment, , 100.01, 1,542.49, Vendor Full Adjustment, , 100.01, 1,542.49, , 7.00, 107.97]";

	int report6thRowListCount = report6thRowList.size();
	ArrayList<String> report6thRowListArray = new ArrayList<String>();
	for(int i=2;i<report6thRowListCount;i++)
	{
		String data = report6thRowList.get(i).getText();
		report6thRowListArray.add(data);
	}
	String actRow6List = report6thRowListArray.toString();
	String expRow6List = "[NDT52 : 3, STD RATE COGS ACC INV, 120.00, , 1,662.49, STD RATE COGS ACC INV, 120.00, , 1,662.49, 8.40, , 116.37]";
	
	int report7thRowListCount = report7thRowList.size();
	ArrayList<String> report7thRowListArray = new ArrayList<String>();
	for(int i=2;i<report7thRowListCount;i++)
	{
		String data = report7thRowList.get(i).getText();
		report7thRowListArray.add(data);
	}
	String actRow7List = report7thRowListArray.toString();
	String expRow7List = "[NDT55 : 1, Customer New Reference, 100.00, , 1,762.49, Customer New Reference, 100.00, , 1,762.49, 7.00, , 123.37]";
	
	
	int report8thRowListCount = report8thRowList.size();
	ArrayList<String> report8thRowListArray = new ArrayList<String>();
	for(int i=2;i<report8thRowListCount;i++)
	{
		String data = report8thRowList.get(i).getText();
		report8thRowListArray.add(data);
	}
	String actRow8List = report8thRowListArray.toString();
	String expRow8List = "[NDT55 : 1, Sales - Computers, , 100.00, 1,662.49, 071-001, , 100.00, 1,662.49, , 7.00, 116.37]";
	
	
	int report9thRowListCount = report9thRowList.size();
	ArrayList<String> report9thRowListArray = new ArrayList<String>();
	for(int i=2;i<report9thRowListCount;i++)
	{
		String data = report9thRowList.get(i).getText();
		report9thRowListArray.add(data);
	}
	String actRow9List = report9thRowListArray.toString();
	String expRow9List = "[NDT55 : 2, Customer Semi Adjustment, 50.00, , 1,712.49, Customer Semi Adjustment, 50.00, , 1,712.49, 3.50, , 119.87]";
	
	int report10thRowListCount = report10thRowList.size();
	ArrayList<String> report10thRowListArray = new ArrayList<String>();
	for(int i=2;i<report10thRowListCount;i++)
	{
		String data = report10thRowList.get(i).getText();
		report10thRowListArray.add(data);
	}
	String actRow10List = report10thRowListArray.toString();
	String expRow10List = "[NDT55 : 2, Sales - Computers, , 50.00, 1,662.49, 071-001, , 50.00, 1,662.49, , 3.50, 116.37]";
	
	
	int report11thRowListCount = report11thRowList.size();
	ArrayList<String> report11thRowListArray = new ArrayList<String>();
	for(int i=2;i<report11thRowListCount;i++)
	{
		String data = report11thRowList.get(i).getText();
		report11thRowListArray.add(data);
	}
	String actRow11List = report11thRowListArray.toString();
	String expRow11List = "[NDT55 : 3, Customer Full Adjustment, 100.00, , 1,762.49, Customer Full Adjustment, 100.00, , 1,762.49, 7.00, , 123.37]";
	
	int report12thRowListCount = report12thRowList.size();
	ArrayList<String> report12thRowListArray = new ArrayList<String>();
	for(int i=2;i<report12thRowListCount;i++)
	{
		String data = report12thRowList.get(i).getText();
		report12thRowListArray.add(data);
	}
	String actRow12List = report12thRowListArray.toString();
	String expRow12List = "[NDT55 : 3, Sales - Computers, , 100.00, 1,662.49, 071-001, , 100.00, 1,662.49, , 7.00, 116.37]";
	
	int report13thRowListCount = report13thRowList.size();
	ArrayList<String> report13thRowListArray = new ArrayList<String>();
	for(int i=1;i<report13thRowListCount;i++)
	{
		String data = report13thRowList.get(i).getText();
		report13thRowListArray.add(data);
	}
	String actRow13List = report13thRowListArray.toString();
	String expRow13List = "[Grand Total, , , 2,170.00, 507.51, 18,409.92, , 2,170.00, 507.51, 18,409.92, 151.90, 35.53, 1,288.69]";
	
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow6List  : "+actRow6List);
	System.out.println("expRow6List  : "+expRow6List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow7List  : "+actRow7List);
	System.out.println("expRow7List  : "+expRow7List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow8List  : "+actRow8List);
	System.out.println("expRow8List  : "+expRow8List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow9List  : "+actRow9List);
	System.out.println("expRow9List  : "+expRow9List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow10List  : "+actRow10List);
	System.out.println("expRow10List  : "+expRow10List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow11List  : "+actRow11List);
	System.out.println("expRow11List  : "+expRow11List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow12List  : "+actRow12List);
	System.out.println("expRow12List  : "+expRow12List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow13List  : "+actRow13List);
	System.out.println("expRow13List  : "+expRow13List);
	System.out.println("*********************************************************************");
	
	
	if(actRow1List.equalsIgnoreCase(expRow1List) && actGrandTotalList.equalsIgnoreCase(expRow13List) && 
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			actRow5List.equalsIgnoreCase(expRow5List) &&
			actRow6List.equalsIgnoreCase(expRow6List) &&
			actRow7List.equalsIgnoreCase(expRow7List) &&
			actRow8List.equalsIgnoreCase(expRow8List) &&
			actRow9List.equalsIgnoreCase(expRow9List) && 
			actRow10List.equalsIgnoreCase(expRow10List) &&
			actRow11List.equalsIgnoreCase(expRow11List) &&
			actRow12List.equalsIgnoreCase(expRow12List) &&
			actRow13List.equalsIgnoreCase(expRow13List) &&
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		//Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();
		return true;
	}
	else
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		//Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();
		return false;
	}
}


@FindBy(xpath="//input[@id='FOption_674_0_DefaultFilter_0']")
private static WebElement  enterJEDefaultAccTxt;

public boolean checkEntryJournalDetailReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
	financialsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
	financialsReportsMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersReportMenu));
	registersReportMenu.click();
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryJournalDetailReport));
	entryJournalDetailReport.click();
	
	
	boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
	String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
	String expvalidationConfirmationMessage = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
	sl_DateOptionDropdown.click();
	Select s=new Select(sl_DateOptionDropdown);
	s.selectByValue("1");
	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
	sl_OkBtn.click();
	
	
	boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
	
	String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
	String expvalidationConfirmationMessage1 = "true";
	
	System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);

	
    Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
	
	report_LastBtn.click();
	
	
	Thread.sleep(6000);
	
	
	int reportDateListCount=reportDateList.size();
	
	
ArrayList<String >reportGrandTotalList=new ArrayList<>();
	
	for (int i = 0; i < reportDateListCount; i++) 
	{
		String data=reportDateList.get(i).getText();
		
		if (data.equalsIgnoreCase("Grand Total")) 
		{
			int rowcount = reportRowList.size();
			
			for (int j = 0; j < rowcount; j++)
			{
				String data1 = reportRowList.get(i).getText();
				reportGrandTotalList.add(data1);
				break;
			}
			
		} 
		
	}
	
	String actGrandTotalList = reportGrandTotalList.toString();
	String expGrandTotalList ="[119 Grand Total, , , ]";
	
	
	System.out.println("actGrandTotalList : "+actGrandTotalList);
	System.out.println("expGrandTotalList : "+expGrandTotalList);
	
	
	
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
	report_FilterBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
	report_FilterCustomizeBtn.click();
	
	Thread.sleep(1000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccountExpandBtn));
	filterAccountExpandBtn.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccNameChkbox));
	if (filterAccNameChkbox.isSelected()==false)
	{
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccNameChkbox));
		filterAccNameChkbox.click();
		
	}
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filter_FilterOkButton));
	filter_FilterOkButton.click();
	
	Thread.sleep(2000);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enterJEDefaultAccTxt));
	enterJEDefaultAccTxt.click();
	enterJEDefaultAccTxt.sendKeys("Vendor New Reference");
	
	Thread.sleep(2000);
	
	enterJEDefaultAccTxt.sendKeys(Keys.TAB);
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterOkButton));
	filterOkButton.click();

	Thread.sleep(2000);
	
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
	int reportsRow1ListCount = report1stRowList.size();
	ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
	for(int i=1;i<reportsRow1ListCount;i++)
	{
		String data = report1stRowList.get(i).getText();
		if(i==2)
		{
			data= "Date Field";
		}
		reportsRow1ListArray.add(data);
	}
	String actRow1List = reportsRow1ListArray.toString();
	String expRow1List = "[OpeBal : 1, Date Field, , Vendor New Reference, 100.00]";
	
	
	int report2ndRowListCount = report2ndRowList.size();
	ArrayList<String> report2ndRowListArray = new ArrayList<String>();
	for(int i=1;i<report2ndRowListCount;i++)
	{
		String data = report2ndRowList.get(i).getText();
		if(i==2)
		{
			data= "Date Field";
		}
		report2ndRowListArray.add(data);
	}
	String actRow2List = report2ndRowListArray.toString();
	String expRow2List = "[OpeBal : 2, Date Field, Vendor New Reference, , 20.00]";
	
	int report3rdRowListCount = report3rdRowList.size();
	ArrayList<String> report3rdRowListArray = new ArrayList<String>();
	for(int i=1;i<report3rdRowListCount;i++)
	{
		String data = report3rdRowList.get(i).getText();
		if(i==2)
		{
			data= "Date Field";
		}
		report3rdRowListArray.add(data);
	}
	String actRow3List = report3rdRowListArray.toString();
	String expRow3List = "[NDT58 : 1, Date Field, Vendor New Reference, , 100.00]";
	
	int report4thRowListCount = report4thRowList.size();
	ArrayList<String> report4thRowListArray = new ArrayList<String>();
	for(int i=1;i<report4thRowListCount;i++)
	{
		String data = report4thRowList.get(i).getText();
		if(i==2)
		{
			data= "Date Field";
		}
		report4thRowListArray.add(data);
	}
	String actRow4List = report4thRowListArray.toString();
	String expRow4List = "[NDT52 : 1, Date Field, , Vendor New Reference, 105.00]";
	
	int report5thRowListCount = report5thRowList.size();
	ArrayList<String> report5thRowListArray = new ArrayList<String>();
	for(int i=1;i<report5thRowListCount;i++)
	{
		String data = report5thRowList.get(i).getText();
		if(i==2)
		{
			data= "Date Field";
		}
		report5thRowListArray.add(data);
	}
	String actRow5List = report5thRowListArray.toString();
	String expRow5List = "[NDT60 : 1, Date Field, , Vendor New Reference, 100.00]";
	
	int report6thRowListCount = report6thRowList.size();
	ArrayList<String> report6thRowListArray = new ArrayList<String>();
	for(int i=1;i<report6thRowListCount;i++)
	{
		String data = report6thRowList.get(i).getText();
		if(i==2)
		{
			data= "Date Field";
		}
		report6thRowListArray.add(data);
	}
	String actRow6List = report6thRowListArray.toString();
	String expRow6List = "[NDT62 : 1, Date Field, Vendor New Reference, , 10.00]";
	
	int report7thRowListCount = report7thRowList.size();
	ArrayList<String> report7thRowListArray = new ArrayList<String>();
	for(int i=1;i<report7thRowListCount;i++)
	{
		String data = report7thRowList.get(i).getText();
		if(i==2)
		{
			data= "Date Field";
		}
		report7thRowListArray.add(data);
	}
	String actRow7List = report7thRowListArray.toString();
	String expRow7List = "[Rct : 2, Date Field, , Vendor New Reference, 50.00]";
	
	int report8thRowListCount = report8thRowList.size();
	ArrayList<String> report8thRowListArray = new ArrayList<String>();
	for(int i=1;i<report8thRowListCount;i++)
	{
		String data = report8thRowList.get(i).getText();
		if(i==2)
		{
			data= "Date Field";
		}
		report8thRowListArray.add(data);
	}
	String actRow8List = report8thRowListArray.toString();
	String expRow8List = "[Pmt : 1, Date Field, Vendor New Reference, , 50.00]";
	
	int report9thRowListCount = report9thRowList.size();
	ArrayList<String> report9thRowListArray = new ArrayList<String>();
	for(int i=1;i<report9thRowListCount;i++)
	{
		String data = report9thRowList.get(i).getText();
		report9thRowListArray.add(data);
	}
	String actRow9List = report9thRowListArray.toString();
	String expRow9List = "[Grand Total, , , , 175.00]";
	
	
	System.out.println("actRow1List  : "+actRow1List);
	System.out.println("expRow1List  : "+expRow1List);
	System.out.println("*********************************************************************");
			
	System.out.println("actRow2List  : "+actRow2List);
	System.out.println("expRow2List  : "+expRow2List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow3List  : "+actRow3List);
	System.out.println("expRow3List  : "+expRow3List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow4List  : "+actRow4List);
	System.out.println("expRow4List  : "+expRow4List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow5List  : "+actRow5List);
	System.out.println("expRow5List  : "+expRow5List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow6List  : "+actRow6List);
	System.out.println("expRow6List  : "+expRow6List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow7List  : "+actRow7List);
	System.out.println("expRow7List  : "+expRow7List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow8List  : "+actRow8List);
	System.out.println("expRow8List  : "+expRow8List);
	System.out.println("*********************************************************************");
	
	System.out.println("actRow9List  : "+actRow9List);
	System.out.println("expRow9List  : "+expRow9List);
	System.out.println("*********************************************************************");
			
	
	if(actRow1List.equalsIgnoreCase(expRow1List) &&actGrandTotalList.equalsIgnoreCase(expGrandTotalList) && 
			actRow2List.equalsIgnoreCase(expRow2List) &&
			actRow3List.equalsIgnoreCase(expRow3List) &&
			actRow4List.equalsIgnoreCase(expRow4List) &&
			actRow5List.equalsIgnoreCase(expRow5List) &&
			actRow6List.equalsIgnoreCase(expRow6List) &&
			actRow7List.equalsIgnoreCase(expRow7List) &&
			actRow8List.equalsIgnoreCase(expRow8List) &&
			actRow9List.equalsIgnoreCase(expRow9List) &&
			actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
			actvalidationConfirmationMessage1.equalsIgnoreCase(actvalidationConfirmationMessage1))
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();
		return true;
	}
	else
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();
		return false;
	}
}

		



@FindBy(xpath="//input[@id='MasterGroup__101']")
private static WebElement reportaccountTxt;

@FindBy(xpath="//*[@id='MasterGroup__101_table_body']/tr/td[2]")
private static List<WebElement> reportaccountTxtList;

@FindBy(xpath="//select[@id='RITCombobox__1']")
private static WebElement includePdcDropDown;

@FindBy(xpath="//select[@id='RITCombobox__5']")
private static WebElement sortingDropDown;

@FindBy(xpath="//select[@id='RITCombobox__10']")
private static WebElement includeNonAuthorizedDataDropDown;

@FindBy(xpath="//input[@id='RITCheckbox__6']")
private static WebElement displayUnRealizedLossorGainChkBox;

@FindBy(xpath="//input[@id='RITCheckbox__4']")
private static WebElement ignoreConvertedPdcChkBox;



		@FindBy(xpath="//input[@id='FOption_531_0_DefaultFilter_0']")
		private static WebElement trailBalFilterAccTxt;
		
		
		@FindBy(xpath="//a[contains(text(),'Account')]//i[@class='icon-expand icon-font7']")
		private static WebElement filterAccountExpandBtn;
		
		@FindBy(xpath="//input[@id='5002']")
		private static WebElement  filterAccNameChkbox;
		
		@FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Ok')]")
		private static WebElement  filter_FilterOkButton;
		                  
		@FindBy(xpath="//*[@id='FOption_513_0_DefaultFilter_0']")
		private static WebElement  enterDefaultAccTxt;
		
		
		@FindBy(xpath="//input[@id='FOption_659_0_DefaultFilter_0']")
		private static WebElement  enterVATDefaultAccTxt;
		
		
		@FindBy(xpath="//i[@class='icon icon-ok']")
		private static WebElement  filterOkButton;
		
		@FindBy(xpath="//*[@id='531']/span")
		private static WebElement trialBalanceReport;
		
		public boolean checkTrailBalanceReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsFinalAccountsMenu));
			financialsFinalAccountsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(trialBalanceReport));
			trialBalanceReport.click();
		
			
	        boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
			String expvalidationConfirmationMessage = "true";
			
			System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
			
			Thread.sleep(1500);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			
	        boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
			String expvalidationConfirmationMessage1 = "true";
			
			System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
			
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
			
			report_LastBtn.click();
			
			
			Thread.sleep(6000);
			
			
			int reportDateListCount=reportDateList.size();
			
			
		ArrayList<String >reportGrandTotalList=new ArrayList<>();
			
			for (int i = 0; i < reportDateListCount; i++) 
			{
				String data=reportDateList.get(i).getText();
				
				if (data.equalsIgnoreCase("Grand Total")) 
				{
					int rowcount = reportRowList.size();
					
					for (int j = 0; j < rowcount; j++)
					{
						String data1 = reportRowList.get(i).getText();
						reportGrandTotalList.add(data1);
						break;
					}
					
				} 
				
			}
			
			String actGrandTotalList = reportGrandTotalList.toString();
			String expGrandTotalList ="";
			
			
			System.out.println("actGrandTotalList : "+actGrandTotalList);
			System.out.println("expGrandTotalList : "+expGrandTotalList);
			
			
			
			
			
	        Thread.sleep(1500);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccountExpandBtn));
			filterAccountExpandBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccNameChkbox));
			if (filterAccNameChkbox.isSelected()==false)
			{
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccNameChkbox));
				filterAccNameChkbox.click();
				
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filter_FilterOkButton));
			filter_FilterOkButton.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(trailBalFilterAccTxt));
			trailBalFilterAccTxt.click();
			trailBalFilterAccTxt.sendKeys("Customer Semi Adjustment");
			
			Thread.sleep(2000);
			
			trailBalFilterAccTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterOkButton));
			filterOkButton.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = report1stRowList.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Customer Semi Adjustment, Customer Semi Adjustment, Customer Semi Adjustment, 110.00, , , 80.00, 30.00, , 210.00, 100.00, 110.00, , , 80.00, 30.00, , 210.00, 100.00, 7.70, , , 8.80, , 1.10, 14.70, 7.00, 100.00, 100.00, 100.00]";
			
			
			int report2ndRowListCount = report2ndRowList.size();
			ArrayList<String> report2ndRowListArray = new ArrayList<String>();
			for(int i=1;i<report2ndRowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndRowListArray.add(data);
			}
			String actRow2List = report2ndRowListArray.toString();
			String expRow2List = "[Grand Total, , , 110.00, , , 80.00, 30.00, , 210.00, 100.00, 110.00, , , 80.00, 30.00, , 210.00, 100.00, 7.70, , , 8.80, , 1.10, 14.70, 7.00, , , ]";
			

			System.out.println("actRow1List  : "+actRow1List);
			System.out.println("expRow1List  : "+expRow1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow2List  : "+actRow2List);
			System.out.println("expRow2List  : "+expRow2List);
			System.out.println("*********************************************************************");
			
			if(actRow1List.equalsIgnoreCase(expRow1List) &&
					actRow2List.equalsIgnoreCase(expRow2List) && 
					actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
					actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		
			{
				return true;
			}
			else
			{
				
				return false;
			}
		}
		
		@FindBy(xpath="//*[@id='532']/span")
		private static WebElement profitandLossReport;
		
		@FindBy(xpath="//*[@id='533']/span")
		private static WebElement  tradingAccountReport;
		
		@FindBy(xpath="//*[@id='534']/span")
		private static WebElement  tradingandProfitAndLossReport;
		
		@FindBy(xpath="//*[@id='535']/span")
		private static WebElement  balanceSheetReport;				
		
		@FindBy(xpath="//*[@id='592']/span")
		private static WebElement  finalAccountSchedulesReport;
		
		@FindBy(xpath="//*[@id='593']/span")
		private static WebElement  fundFlowReport;
		
		@FindBy(xpath="//*[@id='594']/span")
		private static WebElement  cashFlowReport;
		
		@FindBy(xpath="//*[@id='252']/span")
		private static WebElement  cashFlowCalendarReport;
		
		@FindBy(xpath="//*[@id='595']/span")
		private static WebElement  cashFlowAnalysisReport;
		
		@FindBy(xpath="//*[@id='632']/span")
		private static WebElement  advanceCashFlowReport;
		
		@FindBy(xpath="//*[@id='630']/span")
		private static WebElement  incomeExpenseTrendsReport;
		
		@FindBy(xpath="//*[@id='655']/span")
		private static WebElement  receivablePayableReport;
		
		@FindBy(xpath="//input[@id='RITCheckbox__5']")
		private static WebElement  report5chkbox;
		
		@FindBy(xpath="//input[@id='RITCheckbox__9']")
		private static WebElement  report9chkbox;
		
		@FindBy(xpath="//input[@id='RITCheckbox__10']")
		private static WebElement  report10chkbox;
		
		
		
		@FindBy(xpath="//input[@id='RITCheckbox__11']")
		private static WebElement  report11chkbox;
		
		@FindBy(xpath="//input[@id='RITCheckbox__8']")
		private static WebElement  report8chkbox;
		
		
		@FindBy(xpath="//input[@id='FOption_533_0_DefaultFilter_0']")
		private static WebElement tradingAccFilterAccTxt;
		
		@FindBy(xpath="//input[@id='FOption_534_0_DefaultFilter_0']")
		private static WebElement tradingAccProfitAndLossCusAccTxt;
		
		@FindBy(xpath="//input[@id='FOption_535_0_DefaultFilter_0']")
		private static WebElement balSheetCusAccTxt;
		
		

		
		public boolean checkProfitAndLossReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsFinalAccountsMenu));
			financialsFinalAccountsMenu.click();
			
			//Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(profitandLossReport));
			profitandLossReport.click();
		
	        boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
			String expvalidationConfirmationMessage = "true";
			
			System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
			
			Thread.sleep(1500);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");

			
			
			//Ignore transfer balance to profit & loss
			freshPageAccChkbox.click();
			
			//Include zero balance account
			report5chkbox.click();
			
			//Display total at end of the group
			report10chkbox.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
			
			report_LastBtn.click();
			
			
			Thread.sleep(6000);
			
			
			int reportDateListCount=reportDateList.size();
			
			
		ArrayList<String >reportGrandTotalList=new ArrayList<>();
			
			for (int i = 0; i < reportDateListCount; i++) 
			{
				String data=reportDateList.get(i).getText();
				
				if (data.equalsIgnoreCase("Grand Total")) 
				{
					int rowcount = reportRowList.size();
					
					for (int j = 0; j < rowcount; j++)
					{
						String data1 = reportRowList.get(i).getText();
						reportGrandTotalList.add(data1);
						break;
					}
					
				} 
				
			}
			
			String actGrandTotalList = reportGrandTotalList.toString();
			String expGrandTotalList ="[41 Grand Total 250.00 250.00 250.00 250.00 250.00 250.00 250.00 250.00 250.00 250.00 250.00 250.00 17.50 17.50 17.50 17.50 17.50 17.50]";
			
			
			System.out.println("actGrandTotalList : "+actGrandTotalList);
			System.out.println("expGrandTotalList : "+expGrandTotalList);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();

			Thread.sleep(3000);
			//Ignore transfer balance to profit & loss
			freshPageAccChkbox.click();
			
			//Include zero balance account
			report5chkbox.click();
			
			//Display total at end of the group
			report10chkbox.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			boolean novalidationConfirmationMessage2 =validationConfirmationMessage.getText().isEmpty();
				
			String actvalidationConfirmationMessage2 = Boolean.toString(novalidationConfirmationMessage2);
			String expvalidationConfirmationMessage2 = "true";
			
			System.out.println("validationConfirmationMessage2 : "+actvalidationConfirmationMessage2+" Value Expected : "+expvalidationConfirmationMessage2);
				
			Thread.sleep(2000);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = report1stRowList.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[REVENUE, 007, REVENUE, , 250.00, , , , 250.00, , 250.00, , 250.00, , , , 250.00, , 250.00, , 17.50, , , , 17.50, , 17.50, , 100.00, 100.00, 100.00]";
			
			
			int report2ndRowListCount = report2ndRowList.size();
			ArrayList<String> report2ndRowListArray = new ArrayList<String>();
			for(int i=2;i<report2ndRowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndRowListArray.add(data);
			}
			String actRow2List = report2ndRowListArray.toString();
			String expRow2List = "[071, SALES, , 250.00, , , , 250.00, , 250.00, , 250.00, , , , 250.00, , 250.00, , 17.50, , , , 17.50, , 17.50, , 100.00, 100.00, 100.00]";
			
			
			int report3rdRowListCount = report3rdRowList.size();
			ArrayList<String> report3rdRowListArray = new ArrayList<String>();
			for(int i=2;i<report3rdRowListCount;i++)
			{
				String data = report3rdRowList.get(i).getText();
				report3rdRowListArray.add(data);
			}
			String actRow3List = report3rdRowListArray.toString();
			String expRow3List = "[071-001, Sales - Computers, , 250.00, , , , 250.00, , 250.00, , 250.00, , , , 250.00, , 250.00, , 17.50, , , , 17.50, , 17.50, , 100.00, 100.00, 100.00]";
			
			
			int report4thRowListCount = report4thRowList.size();
			ArrayList<String> report4thRowListArray = new ArrayList<String>();
			for(int i=2;i<report4thRowListCount;i++)
			{
				String data = report4thRowList.get(i).getText();
				report4thRowListArray.add(data);
			}
			String actRow4List = report4thRowListArray.toString();
			String expRow4List = "[COGS POSTING ACC, COGS POSTING ACC, 160.00, , , , 160.00, , 160.00, , 160.00, , , , 160.00, , 160.00, , 11.20, , , , 11.20, , 11.20, , , 100.00, 100.00, 100.00]";

			int report5thRowListCount = report5thRowList.size();
			ArrayList<String> report5thRowListArray = new ArrayList<String>();
			for(int i=2;i<report5thRowListCount;i++)
			{
				String data = report5thRowList.get(i).getText();
				report5thRowListArray.add(data);
			}
			String actRow5List = report5thRowListArray.toString();
			String expRow5List = "[, , 90.00, , , , 90.00, , 90.00, , 90.00, , , , 90.00, , 90.00, , 6.30, , , , 6.30, , 6.30, , , , , ]";

			int report6thRowListCount = report6thRowList.size();
			ArrayList<String> report6thRowListArray = new ArrayList<String>();
			for(int i=1;i<report6thRowListCount;i++)
			{
				String data = report6thRowList.get(i).getText();
				report6thRowListArray.add(data);
			}
			String actRow6List = report6thRowListArray.toString();
			String expRow6List = "[Grand Total, , , 250.00, 250.00, , , 250.00, 250.00, 250.00, 250.00, 250.00, 250.00, , , 250.00, 250.00, 250.00, 250.00, 17.50, 17.50, , , 17.50, 17.50, 17.50, 17.50, , , , ]";
			
			
			System.out.println("actRow1List  : "+actRow1List);
			System.out.println("expRow1List  : "+expRow1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow2List  : "+actRow2List);
			System.out.println("expRow2List  : "+expRow2List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow3List  : "+actRow3List);
			System.out.println("expRow3List  : "+expRow3List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow4List  : "+actRow4List);
			System.out.println("expRow4List  : "+expRow4List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow5List  : "+actRow5List);
			System.out.println("expRow5List  : "+expRow5List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow6List  : "+actRow6List);
			System.out.println("expRow6List  : "+expRow6List);
			System.out.println("*********************************************************************");
					
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) &&
					actRow2List.equalsIgnoreCase(expRow2List) &&
					actRow3List.equalsIgnoreCase(expRow3List) &&
					actRow4List.equalsIgnoreCase(expRow4List) &&
					actRow5List.equalsIgnoreCase(expRow5List) &&
					actRow6List.equalsIgnoreCase(expRow6List) &&
					
					actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage)  )
			{
				return true;
			}
			else
			{
				return false;
			}
		}


	
		
		
		
		

		

		
		public boolean checkTradingAccountOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsFinalAccountsMenu));
			financialsFinalAccountsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tradingAccountReport));
			tradingAccountReport.click();
		
			
	       boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
			String expvalidationConfirmationMessage = "true";
			
			System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
			
			Thread.sleep(3500);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_HeaderSelectChkBox));
			sl_HeaderSelectChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report9chkbox));
			report9chkbox.click();
			
			
		
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
					
			boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
			String expvalidationConfirmationMessage1 = "true";
			
			System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
			
		    Thread.sleep(2000);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = report1stRowList.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[COGS POSTING ACC, COGS POSTING ACC, COGS POSTING ACC, 160.00, , , , 160.00, , 160.00, , 160.00, , , , 160.00, , 160.00, , 11.20, , , , 11.20, , 11.20, , 100.00, 100.00, 100.00]";
			
			
			int report2ndRowListCount = report2ndRowList.size();
			ArrayList<String> report2ndRowListArray = new ArrayList<String>();
			for(int i=2;i<report2ndRowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndRowListArray.add(data);
			}
			String actRow2List = report2ndRowListArray.toString();
			String expRow2List = "[SR COGS POSTING ACC, SR COGS POSTING ACC, , , , , , , , , , , , , , , , , , , , , , , , , , , ]";
			
			
			int report3rdRowListCount = report3rdRowList.size();
			ArrayList<String> report3rdRowListArray = new ArrayList<String>();
			for(int i=2;i<report3rdRowListCount;i++)
			{
				String data = report3rdRowList.get(i).getText();
				report3rdRowListArray.add(data);
			}
			String actRow3List = report3rdRowListArray.toString();
			String expRow3List = "[SHORTAGE COGS POSTING ACC, SHORTAGE COGS POSTING ACC, , , , , , , , , , , , , , , , , , , , , , , , , , , ]";
			
			
			int report4thRowListCount = report4thRowList.size();
			ArrayList<String> report4thRowListArray = new ArrayList<String>();
			for(int i=2;i<report4thRowListCount;i++)
			{
				String data = report4thRowList.get(i).getText();
				report4thRowListArray.add(data);
			}
			String actRow4List = report4thRowListArray.toString();
			String expRow4List = "[EXCESS COGS POSTING ACC, EXCESS COGS POSTING ACC, , , , , , , , , , , , , , , , , , , , , , , , , , , ]";

			int report5thRowListCount = report5thRowList.size();
			ArrayList<String> report5thRowListArray = new ArrayList<String>();
			for(int i=2;i<report5thRowListCount;i++)
			{
				String data = report5thRowList.get(i).getText();
				report5thRowListArray.add(data);
			}
			String actRow5List = report5thRowListArray.toString();
			String expRow5List = "[, , , (160), , , , (160), , (160), , (160), , , , (160), , (160), , (11.2), , , , (11.2), , (11.2), , , ]";

			int report6thRowListCount = report6thRowList.size();
			ArrayList<String> report6thRowListArray = new ArrayList<String>();
			for(int i=2;i<report6thRowListCount;i++)
			{
				String data = report6thRowList.get(i).getText();
				report6thRowListArray.add(data);
			}
			String actRow6List = report6thRowListArray.toString();
			String expRow6List = "[, , 160.00, 160.00, , , 160.00, 160.00, 160.00, 160.00, 160.00, 160.00, , , 160.00, 160.00, 160.00, 160.00, 11.20, 11.20, , , 11.20, 11.20, 11.20, 11.20, , , ]";
			
			
			System.out.println("actRow1List  : "+actRow1List);
			System.out.println("expRow1List  : "+expRow1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow2List  : "+actRow2List);
			System.out.println("expRow2List  : "+expRow2List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow3List  : "+actRow3List);
			System.out.println("expRow3List  : "+expRow3List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow4List  : "+actRow4List);
			System.out.println("expRow4List  : "+expRow4List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow5List  : "+actRow5List);
			System.out.println("expRow5List  : "+expRow5List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow6List  : "+actRow6List);
			System.out.println("expRow6List  : "+expRow6List);
			System.out.println("*********************************************************************");
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) &&
					actRow2List.equalsIgnoreCase(expRow2List) &&
					actRow3List.equalsIgnoreCase(expRow3List) &&
					actRow4List.equalsIgnoreCase(expRow4List) &&
					actRow5List.equalsIgnoreCase(expRow5List) &&
					actRow6List.equalsIgnoreCase(expRow6List) && 
					actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) &&
					actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}

			
		
		
		
		
		
		public boolean checkTradingAndProfitAndLossReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsFinalAccountsMenu));
			financialsFinalAccountsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tradingandProfitAndLossReport));
			tradingandProfitAndLossReport.click();
			

	       boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
			
			String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
			String expvalidationConfirmationMessage = "true";
			
			System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
			
		    Thread.sleep(1500);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report5chkbox));
			report5chkbox.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report9chkbox));
			report9chkbox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report10chkbox));
			report10chkbox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
				
			String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
			String expvalidationConfirmationMessage1 = "true";
			
			System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
				
			Thread.sleep(1500);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccountExpandBtn));
			filterAccountExpandBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccNameChkbox));
			if (filterAccNameChkbox.isSelected()==false)
			{
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccNameChkbox));
				filterAccNameChkbox.click();
				
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filter_FilterOkButton));
			filter_FilterOkButton.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tradingAccProfitAndLossCusAccTxt));
			tradingAccProfitAndLossCusAccTxt.click();
			tradingAccProfitAndLossCusAccTxt.sendKeys("COGS POSTING ACC");
			
			Thread.sleep(2000);
			
			tradingAccProfitAndLossCusAccTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterOkButton));
			filterOkButton.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = report1stRowList.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[COGS POSTING ACC, COGS POSTING ACC, COGS POSTING ACC, 160.00, , , , 160.00, , 160.00, , 160.00, , , , 160.00, , 160.00, , 11.20, , , , 11.20, , 11.20, , , 100.00, 100.00, 100.00]";
			
			
			int report2ndRowListCount = report2ndRowList.size();
			ArrayList<String> report2ndRowListArray = new ArrayList<String>();
			for(int i=1;i<report2ndRowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndRowListArray.add(data);
			}
			String actRow2List = report2ndRowListArray.toString();
			String expRow2List = "[Loss for the period, , , , (160), , , , (160), , (160), , (160), , , , (160), , (160), , (11.2), , , , (11.2), , (11.2), , , , ]";
			
			int report3rdRowListCount = report3rdRowList.size();
			ArrayList<String> report3rdRowListArray = new ArrayList<String>();
			for(int i=1;i<report3rdRowListCount;i++)
			{
				String data = report3rdRowList.get(i).getText();
				report3rdRowListArray.add(data);
			}
			String actRow3List = report3rdRowListArray.toString();
			String expRow3List = "[Grand Total, , , 160.00, 160.00, , , 160.00, 160.00, 160.00, 160.00, 160.00, 160.00, , , 160.00, 160.00, 160.00, 160.00, 11.20, 11.20, , , 11.20, 11.20, 11.20, 11.20, , , , ]";
			

			System.out.println("actRow1List  : "+actRow1List);
			System.out.println("expRow1List  : "+expRow1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow2List  : "+actRow2List);
			System.out.println("expRow2List  : "+expRow2List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow3List  : "+actRow3List);
			System.out.println("expRow3List  : "+expRow3List);
			System.out.println("*********************************************************************");
			
			if(actRow1List.equalsIgnoreCase(expRow1List) &&
					actRow2List.equalsIgnoreCase(expRow2List) &&
					actRow3List.equalsIgnoreCase(expRow3List) &&
					actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
					actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		
			{
				return true;
			}
			else
			{
				System.out.println(" Entered Else Block ");
				return false;
					}
			}
		

			
			
		
		
		


		
		
		public boolean checkBalanceSheetOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsFinalAccountsMenu));
			financialsFinalAccountsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(balanceSheetReport));
			balanceSheetReport.click();
		
			 boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
				
			String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
			String expvalidationConfirmationMessage = "true";
			
			System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
			
			Thread.sleep(1500);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report5chkbox));
			report5chkbox.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report9chkbox));
			report9chkbox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report10chkbox));
			report10chkbox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
				
			String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
			String expvalidationConfirmationMessage1 = "true";
			
			System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
			
	        Thread.sleep(1500);
			
	        
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
	    	
	    	report_LastBtn.click();
	    	
	    	
	    	Thread.sleep(6000);
	    	
	    	
	    	int reportDateListCount=reportDateList.size();
	    	
	    	
	    ArrayList<String >reportGrandTotalList=new ArrayList<>();
	    	
	    	for (int i = 0; i < reportDateListCount; i++) 
	    	{
	    		String data=reportDateList.get(i).getText();
	    		
	    		if (data.equalsIgnoreCase("Grand Total")) 
	    		{
	    			int rowcount = reportRowList.size();
	    			
	    			for (int j = 0; j < rowcount; j++)
	    			{
	    				String data1 = reportRowList.get(i).getText();
	    				reportGrandTotalList.add(data1);
	    				break;
	    			}
	    			
	    		} 
	    		
	    	}
	    	
	    	String actGrandTotalList = reportGrandTotalList.toString();
	    	String expGrandTotalList ="";
	    	
	    	
	    	System.err.println("actGrandTotalList : "+actGrandTotalList);
	    	System.err.println("expGrandTotalList : "+expGrandTotalList);
	    	
	    	Thread.sleep(2000);
	        
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccountExpandBtn));
			filterAccountExpandBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccNameChkbox));
			if (filterAccNameChkbox.isSelected()==false)
			{
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccNameChkbox));
				filterAccNameChkbox.click();
				
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filter_FilterOkButton));
			filter_FilterOkButton.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(balSheetCusAccTxt));
			balSheetCusAccTxt.click();
			balSheetCusAccTxt.sendKeys("Vendor New Reference");
			
			Thread.sleep(2000);
			
			balSheetCusAccTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterOkButton));
			filterOkButton.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = report1stRowList.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = report1stRowList.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Vendor New Reference, Vendor New Reference, Vendor New Reference, , 95.00, , 80.00, , 175.00, 160.00, 255.00, , 95.00, , 80.00, , 175.00, 160.00, 255.00, , 6.65, , 8.80, , 15.45, 57.70, 64.35, , 100.00, 100.00, 100.00]";
			
			
			int report2ndRowListCount = report2ndRowList.size();
			ArrayList<String> report2ndRowListArray = new ArrayList<String>();
			for(int i=1;i<report2ndRowListCount;i++)
			{
				String data = report2ndRowList.get(i).getText();
				report2ndRowListArray.add(data);
			}
			String actRow2List = report2ndRowListArray.toString();
			String expRow2List = "[Loss for the period, , , (-95), , (-80), , (-175), , (-95), , (-95), , , , (-175), , (-95), , (-6.65), , (-8.8), , (-15.45), , (-6.65), , , , , ]";
			
			
			
			int report3rdRowListCount = report3rdRowList.size();
			ArrayList<String> report3rdRowListArray = new ArrayList<String>();
			for(int i=1;i<report3rdRowListCount;i++)
			{
				String data = report3rdRowList.get(i).getText();
				report3rdRowListArray.add(data);
			}
			String actRow3List = report3rdRowListArray.toString();
			String expRow3List = "[Grand Total, , , 95.00, 95.00, 80.00, 80.00, 175.00, 175.00, 255.00, 255.00, 95.00, 95.00, 80.00, 80.00, 175.00, 175.00, 255.00, 255.00, 6.65, 6.65, 8.80, 8.80, 15.45, 15.45, 64.35, 64.35, , , , ]";
			


			System.out.println("actRow1List  : "+actRow1List);
			System.out.println("expRow1List  : "+expRow1List);
			System.out.println("*********************************************************************");
					
			System.out.println("actRow2List  : "+actRow2List);
			System.out.println("expRow2List  : "+expRow2List);
			System.out.println("*********************************************************************");
			
			System.out.println("actRow3List  : "+actRow3List);
			System.out.println("expRow3List  : "+expRow3List);
			System.out.println("*********************************************************************");
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) &&
					actRow2List.equalsIgnoreCase(expRow2List) &&
					actRow3List.equalsIgnoreCase(expRow3List) &&
					actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
					actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		
			{
				return true;
			}
			else
			{
				
				return false;
			}
		}


		@FindBy(xpath="//*[@id='id_rc_complete_tree_container']/div[2]/ul/li/span")
		private static WebElement defaultExpandBtn;
		
		@FindBy(xpath="//span[contains(text(),'Particulars')]")
		private static WebElement cusParticularBtn;
		
		@FindBy(xpath="//*[@id='TCol1']/span")
		private static WebElement cusAccField;
		
		
		
		
		
		@FindBy (xpath="//div[@id='id_focus_msgbox_main']")
		private static WebElement ServerErrorPopup;
		
		@FindBy (xpath="//div[@id='id_focus_msgbox_title']/div[2]/span")
		private static WebElement ServerErrorPopupCloseBtn;
		
		@FindBy (xpath="//*[@id='id_focus_msgbox_detail']/span/h2/i")
		private static WebElement ServerErrorPopupTxt;
		
		
		
		public boolean checkFinalAccountsSchedulesReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsFinalAccountsMenu));
			financialsFinalAccountsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finalAccountSchedulesReport));
			finalAccountSchedulesReport.click();
			
			Thread.sleep(2000);
		
		 boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		
		
		sl_SelectAllItemsChkBox.click();
		

		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s1=new Select(sl_DateOptionDropdown);
		s1.selectByValue("1");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report5chkbox));
		report5chkbox.click();

		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		Thread.sleep(2000);
		
		

    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
    	
    	report_LastBtn.click();
    	
    	
    	Thread.sleep(6000);
    	
    	
    	int reportDateListCount=reportDateList.size();
    	
    	
    ArrayList<String >reportGrandTotalList=new ArrayList<>();
    	
    	for (int i = 0; i < reportDateListCount; i++) 
    	{
    		String data=reportDateList.get(i).getText();
    		
    		if (data.equalsIgnoreCase("Grand Total")) 
    		{
    			int rowcount = reportRowList.size();
    			
    			for (int j = 0; j < rowcount; j++)
    			{
    				String data1 = reportRowList.get(i).getText();
    				reportGrandTotalList.add(data1);
    				break;
    			}
    			
    		} 
    		
    	}
    	
    	String actGrandTotalList = reportGrandTotalList.toString();
    	String expGrandTotalList ="";
    	
    	
    	System.err.println("actGrandTotalList : "+actGrandTotalList);
    	System.err.println("expGrandTotalList : "+expGrandTotalList);
    	
    	Thread.sleep(2000);
        
        
		report_CloseBtn.click();
    	
		
		Thread.sleep(1500);
		
		
		sl_SelectAllItemsChkBox.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		Thread.sleep(1500);
		
		if (report5chkbox.isSelected()==true) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report5chkbox));
			report5chkbox.click();

		}
		
		
		Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer Semi Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}

		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		Thread.sleep(2000);
		
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    		Thread.sleep(2000);

		int count = report1stRowList.size();
		ArrayList<String> actRow1Array = new ArrayList<String>();
		for(int i=0;i<count;i++)
		{
			String data = report1stRowList.get(i).getText();
			actRow1Array.add(data);
		}
		String actRow1List = actRow1Array.toString();
		String expRow1List = "[1, Customer Semi Adjustment, Customer Semi Adjustment, Customer Semi Adjustment, 110.00, , , 80.00, 30.00, , 210.00, 100.00, 110.00, , , 80.00, 30.00, , 210.00, 100.00, 7.70, , , 8.80, , 1.10, 14.70, 7.00, 100.00, 100.00, 100.00]";
	    
	    System.out.println("Actual Report Row 1 List    : "+actRow1List);
	    System.out.println("Expected Report Row 1 List  : "+expRow1List);
		
	    
	    
		ArrayList<String> actRow2Array = new ArrayList<String>();
		for(int i=0;i<count;i++)
		{
			String data = report2ndRowList.get(i).getText();
			actRow2Array.add(data);
		}
		String actRow2List = actRow2Array.toString();
		String expRow2List = "[2, Grand Total, , , 110.00, , , 80.00, 30.00, , 210.00, 100.00, 110.00, , , 80.00, 30.00, , 210.00, 100.00, 7.70, , , 8.80, , 1.10, 14.70, 7.00, , , ]";
	    
	    System.out.println("Actual Report Row 2 List    : "+actRow2List);
	    System.out.println("Expected Report Row 2 List  : "+expRow2List);
	    
	    
	    System.out.println("*********************************************************************");
		
		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && 
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}


		
	@FindBy(xpath="//input[@id='FOption_592_0_DefaultFilter_0']")
	private static WebElement finalaAccScheduleAccTxt;
		


	
	





	public boolean checkFundFlowReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsFinalAccountsMenu));
		financialsFinalAccountsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fundFlowReport));
		fundFlowReport.click();

		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report5chkbox));
		report5chkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report9chkbox));
		report9chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report10chkbox));
		report10chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
		
		
		

    	
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
    	
    	report_LastBtn.click();
    	
    	
    	Thread.sleep(6000);
    	
    	
    	int reportDateListCount=reportDateList.size();
    	
    	
    ArrayList<String >reportGrandTotalList=new ArrayList<>();
    	
    	for (int i = 0; i < reportDateListCount; i++) 
    	{
    		String data=reportDateList.get(i).getText();
    		
    		if (data.equalsIgnoreCase("Grand Total")) 
    		{
    			int rowcount = reportRowList.size();
    			
    			for (int j = 0; j < rowcount; j++)
    			{
    				String data1 = reportRowList.get(i).getText();
    				reportGrandTotalList.add(data1);
    				break;
    			}
    			
    		} 
    		
    	}
    	
    	String actGrandTotalList = reportGrandTotalList.toString();
    	String expGrandTotalList ="";
    	
    	
    	System.err.println("actGrandTotalList : "+actGrandTotalList);
    	System.err.println("expGrandTotalList : "+expGrandTotalList);
    	
    	Thread.sleep(2000);
        
        
		
		
	    Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
		report_FilterBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
		report_FilterCustomizeBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccountExpandBtn));
		filterAccountExpandBtn.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccNameChkbox));
		if (filterAccNameChkbox.isSelected()==false)
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccNameChkbox));
			filterAccNameChkbox.click();
			
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filter_FilterOkButton));
		filter_FilterOkButton.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fundFlowCUsAccTxt));
		fundFlowCUsAccTxt.click();
		fundFlowCUsAccTxt.sendKeys("Customer Semi Adjustment");
		
		Thread.sleep(2000);
		
		fundFlowCUsAccTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterOkButton));
		filterOkButton.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Customer Semi Adjustment, Customer Semi Adjustment, Customer Semi Adjustment, 110.00, , , 80.00, 30.00, , 210.00, 100.00, 110.00, , , 80.00, 30.00, , 210.00, 100.00, 7.70, , , 8.80, , 1.10, 14.70, 7.00, 100.00, 100.00, 100.00]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Profit for the period, , , , 110.00, 80.00, , , 30.00, , 110.00, , 110.00, , , , 30.00, , 110.00, , 7.70, 8.80, , 1.10, , , 7.70, , , ]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Grand Total, , , 110.00, 110.00, 80.00, 80.00, 30.00, 30.00, 210.00, 210.00, 110.00, 110.00, 80.00, 80.00, 30.00, 30.00, 210.00, 210.00, 7.70, 7.70, 8.80, 8.80, 1.10, 1.10, 14.70, 14.70, , , ]";
		

		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))

		{
			return true;
		}
		else
		{
			return false;
		}
	}



	@FindBy(xpath="//input[@id='FOption_593_0_DefaultFilter_0']")
	private static WebElement fundFlowCUsAccTxt;
	    
	@FindBy(xpath="//input[@id='FOption_594_0_DefaultFilter_0']")
	private static WebElement cashFlowCusAccTxt;
	
	@FindBy(xpath="//input[@id='FOption_595_0_DefaultFilter_0']")
	private static WebElement cashFlowAnalysisCusAccTxt;
		
	@FindBy(xpath="//a[@id='33']")
	private static WebElement budgetPlanningReport;

	@FindBy(xpath="//input[@id='FOption_655_0_DefaultFilter_0']")
	private static WebElement recAndPayCusAccTxt;






	
	// Receivable and Payable Analysis Reports Starts from Here
		

	@FindBy(xpath="//a[@id='558']//span[contains(text(),'Receivable and Payable Analysis')]")
	private static WebElement  receivableAndPayableAnalysisMenu;

	@FindBy(xpath="//a[@id='605']//span[contains(text(),'Customer Detail')]")
	private static WebElement  customerDetailMenu;

	@FindBy(xpath="//span[contains(text(),'Customer Summary')]")
	private static WebElement  customerSummaryMenu;

	@FindBy(xpath="//a[@id='606']//span[contains(text(),'Vendor Detail')]")
	private static WebElement  vendorDetailMenu;

	@FindBy(xpath="//a[@id='608']//span[contains(text(),'Vendor Summary')]")
	private static WebElement  vendorSummaryMenu;

	@FindBy(xpath="//a[@id='75']//span[contains(text(),'Letter of Credit')]")
	private static WebElement  letterOfCreditReport;

	@FindBy(xpath="//span[contains(text(),'Release Letter of Credit')]")
	private static WebElement  releaseLetterOfCreditReport;



	@FindBy(xpath="//span[contains(text(),'Customer Listing of Outstanding Bills')]")
	private static WebElement  customerDetailsCustomerListingOfOutstandingBillsReport;

	@FindBy(xpath="//span[contains(text(),'Customer Statements')]")
	private static WebElement  customerDetailsCustomerStatementsReport;

	@FindBy(xpath="//span[contains(text(),'Customer Due Date Analysis')]")
	private static WebElement  customerDetailsCustomerDueDateAnalysisReport;

	@FindBy(xpath="//a[@id='563']//span[contains(text(),'Ageing Details')]")
	private static WebElement  customerDetailsCustomerAgeingDetailsReport;

	@FindBy(xpath="//span[contains(text(),'Customer Detail Ageing by Due Date')]")
	private static WebElement  customerDetailsCustomerDetailAgeingByDueDateReport;

	@FindBy(xpath="//a[@id='566']//span[contains(text(),'Overdue Analysis')]")
	private static WebElement  customerDetailsCustomerOverdueAnalysisReport;



	@FindBy(xpath="//span[contains(text(),'Customer Ageing Summary')]")
	private static WebElement  customerSummaryCustomerAgeingSummaryReport;

	@FindBy(xpath="//a[@id='565']//span[contains(text(),'Summary Ageing by Due Date')]")
	private static WebElement  customerSummaryAgeingByDueDateReport;

	@FindBy(xpath="//a[@id='567']//span[contains(text(),'Overdue Summary')]")
	private static WebElement  customerSummaryCustomerOverDueSummeryReport;

	@FindBy(xpath="//span[contains(text(),'Customer bill-wise summary')]")
	private static WebElement  customerSummaryCustomerBillWiseSummeryReport;



	@FindBy(xpath="//span[contains(text(),'Vendor Listing of Outstanding Bills')]")
	private static WebElement  vendorDetailsVendorListingOfOutstandingBillsReport;

	@FindBy(xpath="//span[contains(text(),'Vendor Statements')]")
	private static WebElement  vendorDetailsVendorStatementsReport;

	@FindBy(xpath="//span[contains(text(),'Vendor Due Date Analysis')]")
	private static WebElement  vendorDetailsVendorDueDateAnalysisReport;

	@FindBy(xpath="//span[contains(text(),'Vendor Ageing Details')]")
	private static WebElement  vendorDetailsVendorAgeingDetailsReport;

	@FindBy(xpath="//span[contains(text(),'Vendor Detail Ageing by Due Date')]")
	private static WebElement  vendorDetailsVendorDetailsAgeingByDueDateReport;

	@FindBy(xpath="//span[contains(text(),'Vendor Overdue Analysis')]")
	private static WebElement  vendorDetailsVendorOverdueAnalysisReport;



	@FindBy(xpath="//span[contains(text(),'Vendor Ageing Summary')]")
	private static WebElement  vendorSummeryVendorAgeingSummaryReport;

	@FindBy(xpath="//span[contains(text(),'Vendor Summary Ageing by Due Date')]")
	private static WebElement  vendorSummeryVendorSummaryAgeingByDueDateReport;

	@FindBy(xpath="//span[contains(text(),'Vendor Overdue Summary')]")
	private static WebElement  vendorSummeryVendorOverdueSummaryReport;

	@FindBy(xpath="//span[contains(text(),'Vendor bill-wise summary')]")
	private static WebElement  vendorSummeryVendorBillWiseSummaryReport;



		
	public boolean checkCustomerListingOfOutstandingBillsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerListingOfOutstandingBillsReport));
		customerDetailsCustomerListingOfOutstandingBillsReport.click();
		
		
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		
		Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer Full Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report21chkbox));
		report21chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    Thread.sleep(1500);
		
	    
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==7) 
			{
			data="DateField";	
			}
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[OpeBal:1, DateField, Customer Full Adjustment, 100.00, 80.00, 80.00, DateField, 80.00, 100.00, 80.00, 80.00, 11.00, 8.80, 8.80, Customer Full Adjustment]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==7) 
			{
			data="DateField";	
			}
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[NDT60:4, DateField, Customer Full Adjustment, 100.00, 100.00, 20.00, DateField, 100.00, 100.00, 100.00, 20.00, 7.00, 7.00, 1.80, Customer Full Adjustment]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Grand Total, , , , 20.00, , , 20.00, , 20.00, 60.00, 4.00, 1.80, 10.60, ]";
		
		
		
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
				
		
				
		if (actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	

		@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody")
		private static WebElement reportsTable;
		
		@FindBy (xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[6]")
		private static WebElement sl_BackTrackBtn;
		
		@FindBy (xpath="//div[@id='dvReportDetails']/div/table/tbody/tr/td[3]")
		private static List<WebElement> reportTableColumn2RowsList;
		
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[1]/div[1]/div[2]/table/tbody/tr/td")
		private static List<WebElement> backTrackItemDetailsMonthsTableList;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[1]/div[1]/div[2]/table")
		private static WebElement backTrackItemDetailsMonthsTable;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[1]/div[1]/div[2]/table/tbody/tr[1]/td[1]")
		private static WebElement backTrackItemDetailsMonths1stRow1stCol;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[1]/div[1]/div[2]/table/tbody/tr[2]/td[1]")
		private static WebElement backTrackItemDetailsMonths2ndRow1stCol;
		
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[2]/div[1]/div[2]/table/tbody/tr/td")
		private static List<WebElement> backTrackItemDetailsDaysTableList;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[2]/div[1]/div[2]/table")
		private static WebElement backTrackItemDetailsDaysTable;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[2]/div[1]/div[2]/table/tbody/tr[1]/td[1]")
		private static WebElement backTrackItemDetailsDays1stRow1stCol;
		
		
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[3]/div[1]/div[2]/table/tbody/tr/td")
		private static List<WebElement> backTrackItemDetailsVouchersTableList;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[3]/div[1]/div[2]/table")
		private static WebElement backTrackItemDetailsVouchersTable;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[3]/div[1]/div[2]/table/tbody/tr[1]/td[1]")
		private static WebElement backTrackItemDetailsVouchers1stRow1stCol;
		
		
		
		//Voucher Entry Page Header Fields
				
				
				
				@FindBy(xpath="//input[@id='id_header_4']")
				private static WebElement  vcustomerAccountTxt;
				 
				@FindBy(xpath="//input[@id='id_header_268435460']")
				private static WebElement  warehouseTxt;
				
				@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
				private static List<WebElement> warehouseHeaderComboList;
				
				@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
				private static List<WebElement> itemComboList;
				
			
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
				private static WebElement  select1stRow_17thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
				private static WebElement  select1stRow_18thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[20]")
				private static WebElement  select1stRow_19thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[21]")
				private static WebElement  select1stRow_20thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[22]")
				private static WebElement  select1stRow_21stColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[23]")
				private static WebElement  select1stRow_22ndColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[24]")
				private static WebElement  select1stRow_23rdColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[25]")
				private static WebElement  select1stRow_24thColumn;
				
				
				
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[14]")
				private static WebElement  select2ndRow_13thColumn;
				
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
				private static WebElement  select2ndRow_17thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
				private static WebElement  select2ndRow_18thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
				private static WebElement  select2ndRow_19thColumn;
				
				
				
			
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[18]")
				private static WebElement  select3rdRow_17thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[19]")
				private static WebElement  select3rdRow_18thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[20]")
				private static WebElement  select3rdRow_19thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[21]")
				private static WebElement  select3rdRow_20thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[22]")
				private static WebElement  select3rdRow_21stColumn;
		
		
		

		
		
		

	@FindBy(xpath="//input[@id='FOption_559_0_DefaultFilter_0']")
	private static WebElement  cusOutStandingBillsCusAccTxt;


	@FindBy(xpath="//input[@id='FOption_560_0_DefaultFilter_0']")
	private static WebElement  cusStatementCusAccTxt;

	@FindBy(xpath="//input[@id='FOption_561_0_DefaultFilter_0']")
	private static WebElement  custDuDateAnalysisCusAccTxt;

	@FindBy(xpath="//input[@id='FOption_563_0_DefaultFilter_0']")
	private static WebElement  custAgeingDetailsAnalysisCusAccTxt;

	@FindBy(xpath="//input[@id='FOption_564_0_DefaultFilter_0']")
	private static WebElement  custAgeingDetailsDueDateCusAccTxt;

	@FindBy(xpath="//input[@id='FOption_566_0_DefaultFilter_0']")
	private static WebElement  custOverDueDateCusAccTxt;


	@FindBy(xpath="//input[@id='FOption_541_0_DefaultFilter_0']")
	private static WebElement  venListingOutstandBillCusAccTxt;


	@FindBy(xpath="//input[@id='FOption_542_0_DefaultFilter_0']")
	private static WebElement  vendorStatementCusAccTxt;


	@FindBy(xpath="//input[@id='FOption_543_0_DefaultFilter_0']")
	private static WebElement  vendorDueDateCusAccTxt;

	@FindBy(xpath="//input[@id='FOption_545_0_DefaultFilter_0']")
	private static WebElement  vendorAgeingDetailAnalysisCusAccTxt;


	@FindBy(xpath="//input[@id='FOption_546_0_DefaultFilter_0']")
	private static WebElement  vendorAgeingDetailByDueDateCusAccTxt;

	@FindBy(xpath="//input[@id='FOption_548_0_DefaultFilter_0']")
	private static WebElement  vendorOverDueCusAccTxt;

	@FindBy(xpath="//input[@id='FOption_544_0_DefaultFilter_0']")
	private static WebElement  vendorAheingSummaryAnalysisCusAccTxt;

	@FindBy(xpath="//input[@id='FOption_547_0_DefaultFilter_0']")
	private static WebElement  vendorAgeingSummaryByDueDateCusAccTxt;

	@FindBy(xpath="//input[@id='FOption_549_0_DefaultFilter_0']")
	private static WebElement  vendorSummeryOverDueCusAccTxt;

	@FindBy(xpath="//input[@id='FOption_634_0_DefaultFilter_0']")
	private static WebElement  vendorSummeryBillwiseCusAccTxt;






	@FindBy(xpath="//input[@id='RITCheckbox__7']")
	private static WebElement  report7chkbox;

	@FindBy(xpath="//input[@id='RITCheckbox__15']")
	private static WebElement  report15chkbox;

	@FindBy(xpath="//input[@id='RITCheckbox__16']")
	private static WebElement  report16chkbox;

	@FindBy(xpath="//input[@id='RITCheckbox__21']")
	private static WebElement  report21chkbox;

	@FindBy(xpath="//input[@id='RITCheckbox__17']")
	private static WebElement  report17chkbox;

	@FindBy(xpath="//input[@id='RITCheckbox__18']")
	private static WebElement  report18chkbox;



	public boolean checkCustomerStatementReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerStatementsReport));
		customerDetailsCustomerStatementsReport.click();
		
		Thread.sleep(2000);
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
	   Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer New Reference") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    Thread.sleep(1500);
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Customer New Reference Customer New Reference]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			
			if (i==15) 
			{
			data="DateField";	
			}
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[OpeBal:1, DateField, Customer New Reference, 100.00, , , 20.00, 20.00, 100.00, , , 20.00, DelayInPayment, Indian Rupees, DateField, Customer New Reference]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[OpeBal:2, DateField, Customer New Reference, , 20.00, , , 20.00, , 20.00, , , DelayInPayment, Indian Rupees, DateField, Customer New Reference]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[NDT63:3, DateField, Customer New Reference, , 50.00, , , 20.00, , 50.00, , , DelayInPayment, Indian Rupees, DateField, Customer New Reference]";

		int report5thRowListCount = report5thRowList.size();
		ArrayList<String> report5thRowListArray = new ArrayList<String>();
		for(int i=1;i<report5thRowListCount;i++)
		{
			String data = report5thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report5thRowListArray.add(data);
		}
		String actRow5List = report5thRowListArray.toString();
		String expRow5List = "[NDT62:3, DateField, Customer New Reference, , 10.00, , , 20.00, , 10.00, , , DelayInPayment, Indian Rupees, DateField, Customer New Reference]";

		int report6thRowListCount = report6thRowList.size();
		ArrayList<String> report6thRowListArray = new ArrayList<String>();
		for(int i=1;i<report6thRowListCount;i++)
		{
			String data = report6thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report6thRowListArray.add(data);
		}
		String actRow6List = report6thRowListArray.toString();
		String expRow6List = "[NDT55:1, DateField, Customer New Reference, 100.00, , , 100.00, 80.00, 100.00, , , 100.00, DelayInPayment, Indian Rupees, DateField, Customer New Reference]";
		
		int report7thRowListCount = report7thRowList.size();
		ArrayList<String> report7thRowListArray = new ArrayList<String>();
		for(int i=1;i<report7thRowListCount;i++)
		{
			String data = report7thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report7thRowListArray.add(data);
		}
		String actRow7List = report7thRowListArray.toString();
		String expRow7List = "[NDT57:1, DateField, Customer New Reference, 100.00, , , 50.00, 30.00, 100.00, , , 50.00, DelayInPayment, Indian Rupees, DateField, Customer New Reference]";
		
		
		int report8thRowListCount = report8thRowList.size();
		ArrayList<String> report8thRowListArray = new ArrayList<String>();
		for(int i=1;i<report8thRowListCount;i++)
		{
			String data = report8thRowList.get(i).getText();
			
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report8thRowListArray.add(data);
		}
		String actRow8List = report8thRowListArray.toString();
		String expRow8List = "[NDT63:1, DateField, Customer New Reference, , 50.00, , , 30.00, , 50.00, , , DelayInPayment, Indian Rupees, DateField, Customer New Reference]";
		
		
		int report9thRowListCount = report9thRowList.size();
		ArrayList<String> report9thRowListArray = new ArrayList<String>();
		for(int i=1;i<report9thRowListCount;i++)
		{
			String data = report9thRowList.get(i).getText();
			
			if (i==2) 
			{
			data="DateField";	
			}
			/*if (i==13) 
			{
			data="DelayInPayment";	
			}*/
			if (i==15) 
			{
			data="DateField";	
			}
			report9thRowListArray.add(data);
		}
		String actRow9List = report9thRowListArray.toString();
		String expRow9List = "[NDT60:4, DateField, Customer New Reference, 10.00, , , 10.00, 40.00, 10.00, , , 10.00, 0, Indian Rupees, DateField, Customer New Reference]";
		
		int report10thRowListCount = report10thRowList.size();
		ArrayList<String> report10thRowListArray = new ArrayList<String>();
		for(int i=1;i<13;i++)
		{
			String data = report10thRowList.get(i).getText();
			
			report10thRowListArray.add(data);
		}
		String actRow10List = report10thRowListArray.toString();
		String expRow10List = "[Total, , , 90.00, 130.00, , 40.00, 100.00, 90.00, 130.00, , 40.00]";
		
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow5List  : "+actRow5List);
		System.out.println("expRow5List  : "+expRow5List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow6List  : "+actRow6List);
		System.out.println("expRow6List  : "+expRow6List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow7List  : "+actRow7List);
		System.out.println("expRow7List  : "+expRow7List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow8List  : "+actRow8List);
		System.out.println("expRow8List  : "+expRow8List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow9List  : "+actRow9List);
		System.out.println("expRow9List  : "+expRow9List);
        System.out.println("*********************************************************************");
		
		System.out.println("actRow10List  : "+actRow10List);
		System.out.println("expRow10List  : "+expRow10List);
		
		
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actRow5List.equalsIgnoreCase(expRow5List) &&
				actRow6List.equalsIgnoreCase(expRow6List) &&
				actRow7List.equalsIgnoreCase(expRow7List) &&
				actRow8List.equalsIgnoreCase(expRow8List) &&
				actRow9List.equalsIgnoreCase(expRow9List) &&
				actRow10List.equalsIgnoreCase(expRow10List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}


	
	public boolean checkCustomerDueDateAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerDueDateAnalysisReport));
		customerDetailsCustomerDueDateAnalysisReport.click();
		
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
        Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer Semi Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		//Incliude PDC CHkbox 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayedMaturedPDCChkbox));
		displayedMaturedPDCChkbox.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    Thread.sleep(1500);
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Customer Semi Adjustment Customer Semi Adjustment]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[OpeBal:1, DateField, Customer Semi Adjustment, 100.00, , , 20.00, 20.00, 100.00, , , 20.00, DelayInPayment, Indian Rupees, DateField, Customer Semi Adjustment]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[OpeBal:2, DateField, Customer Semi Adjustment, , 20.00, , , 20.00, , 20.00, , , DelayInPayment, Indian Rupees, DateField, Customer Semi Adjustment]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[NDT58:4, DateField, Customer Semi Adjustment, , 10.00, , , 20.00, , 10.00, , , DelayInPayment, Indian Rupees, DateField, Customer Semi Adjustment]";

		int report5thRowListCount = report5thRowList.size();
		ArrayList<String> report5thRowListArray = new ArrayList<String>();
		for(int i=1;i<report5thRowListCount;i++)
		{
			String data = report5thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==13) 
			{
			data="DelayInPayment";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report5thRowListArray.add(data);
		}
		String actRow5List = report5thRowListArray.toString();
		String expRow5List = "[NDT55:2, DateField, Customer Semi Adjustment, , 50.00, , , 20.00, , 50.00, , , DelayInPayment, Indian Rupees, DateField, Customer Semi Adjustment]";

		int report6thRowListCount = report6thRowList.size();
		ArrayList<String> report6thRowListArray = new ArrayList<String>();
		for(int i=1;i<report6thRowListCount;i++)
		{
			String data = report6thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report6thRowListArray.add(data);
		}
		String actRow6List = report6thRowListArray.toString();
		String expRow6List = "[NDT57:2, DateField, Customer Semi Adjustment, 50.00, , , , 20.00, 50.00, , , , 0, Indian Rupees, DateField, Customer Semi Adjustment]";
		
		int report7thRowListCount = report7thRowList.size();
		ArrayList<String> report7thRowListArray = new ArrayList<String>();
		for(int i=1;i<report7thRowListCount;i++)
		{
			String data = report7thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report7thRowListArray.add(data);
		}
		String actRow7List = report7thRowListArray.toString();
		String expRow7List = "[NDT58:7, DateField, Customer Semi Adjustment, , 10.00, , , 20.00, , 10.00, , , 0, Indian Rupees, DateField, Customer Semi Adjustment]";

		int report8thRowListCount = report8thRowList.size();
		ArrayList<String> report8thRowListArray = new ArrayList<String>();
		for(int i=1;i<report8thRowListCount;i++)
		{
			String data = report8thRowList.get(i).getText();
			
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report8thRowListArray.add(data);
		}
		String actRow8List = report8thRowListArray.toString();
		String expRow8List = "[NDT63:2, DateField, Customer Semi Adjustment, , 40.00, , , 20.00, , 40.00, , , 0, Indian Rupees, DateField, Customer Semi Adjustment]";
		
		
		int report9thRowListCount = report9thRowList.size();
		ArrayList<String> report9thRowListArray = new ArrayList<String>();
		for(int i=1;i<report9thRowListCount;i++)
		{
			String data = report9thRowList.get(i).getText();
			
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			report9thRowListArray.add(data);
		}
		String actRow9List = report9thRowListArray.toString();
		String expRow9List = "[NDT60:4, DateField, Customer Semi Adjustment, 100.00, , , 100.00, 80.00, 100.00, , , 100.00, 0, Indian Rupees, DateField, Customer Semi Adjustment]";
		
		int report10thRowListCount = report10thRowList.size();
		ArrayList<String> report10thRowListArray = new ArrayList<String>();
		for(int i=1;i<13;i++)
		{
			String data = report10thRowList.get(i).getText();
			

			if (i==2) 
			{
			data="DateField";	
			}
			if (i==15) 
			{
			data="DateField";	
			}
			
			report10thRowListArray.add(data);
		}
		String actRow10List = report10thRowListArray.toString();
		String expRow10List = "[NDT66:3, DateField, Customer Semi Adjustment, 50.00, , , 50.00, 30.00, 50.00, , , 50.00]";
		
		
		int report11thRowListCount = report11thRowList.size();
		ArrayList<String> report11thRowListArray = new ArrayList<String>();
		for(int i=1;i<13;i++)
		{
			String data = report11thRowList.get(i).getText();
			
			report11thRowListArray.add(data);
		}
		String actRow11List = report11thRowListArray.toString();
		String expRow11List = "[Total, , , 100.00, 130.00, , 30.00, 30.00, 100.00, 130.00, , 30.00]";
		
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow5List  : "+actRow5List);
		System.out.println("expRow5List  : "+expRow5List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow6List  : "+actRow6List);
		System.out.println("expRow6List  : "+expRow6List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow7List  : "+actRow7List);
		System.out.println("expRow7List  : "+expRow7List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow8List  : "+actRow8List);
		System.out.println("expRow8List  : "+expRow8List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow9List  : "+actRow9List);
		System.out.println("expRow9List  : "+expRow9List);
        System.out.println("*********************************************************************");
		
		System.out.println("actRow10List  : "+actRow10List);
		System.out.println("expRow10List  : "+expRow10List);
		
		System.out.println("*********************************************************************");
			
		System.out.println("actRow11List  : "+actRow11List);
		System.out.println("expRow11List  : "+expRow11List);
			
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actRow5List.equalsIgnoreCase(expRow5List) &&
				actRow6List.equalsIgnoreCase(expRow6List) &&
				actRow7List.equalsIgnoreCase(expRow7List) &&
				actRow8List.equalsIgnoreCase(expRow8List) &&
				actRow9List.equalsIgnoreCase(expRow9List) &&
				actRow10List.equalsIgnoreCase(expRow10List) &&
				actRow11List.equalsIgnoreCase(expRow11List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}






	public boolean checkCustomerAgeingDetailsAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerAgeingDetailsReport));
		customerDetailsCustomerAgeingDetailsReport.click();
		
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		
        Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer New Reference") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		//Include PDC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		//Montly Ageing 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report15chkbox));
		report15chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	   
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Customer New Reference Customer New Reference]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==7) 
			{
			data="DelayInPayment";	
			}
			if (i==37) 
			{
			data="DateField";	
			}
			if (i==52) 
			{
			data="DateField";	
			}
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[OpeBal:1, DateField, Customer New Reference, 100.00, 20.00, 20.00, DelayInPayment, 100.00, 20.00, , , , , , , , , , , , , 20.00, , , , , , , , , , , , , 20.00, , DateField, , , , , , , , , , , 4.60, 20.00, 20.00, 4.60, DateField, Customer New Reference]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==37) 
			{
			data="DateField";	
			}
			if (i==52) 
			{
			data="DateField";	
			}
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[NDT55:1, DateField, Customer New Reference, 100.00, 100.00, 80.00, 0, 100.00, 100.00, , , , , , , , , , , , 100.00, 100.00, , , , , , , , , , , , 100.00, 100.00, , DateField, , , , , , , , , , 7.00, 7.00, , , , DateField, Customer New Reference]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==37) 
			{
			data="DateField";	
			}
			if (i==52) 
			{
			data="DateField";	
			}
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[NDT57:1, DateField, Customer New Reference, 100.00, 50.00, 30.00, 0, 100.00, 50.00, , , , , , , , , , , , 50.00, 50.00, , , , , , , , , , , , 50.00, 50.00, , DateField, , , , , , , , , , 3.50, 3.50, , , , DateField, Customer New Reference]";

		int report5thRowListCount = report5thRowList.size();
		ArrayList<String> report5thRowListArray = new ArrayList<String>();
		for(int i=1;i<report5thRowListCount;i++)
		{
			String data = report5thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==37) 
			{
			data="DateField";	
			}
			if (i==52) 
			{
			data="DateField";	
			}
			report5thRowListArray.add(data);
		}
		String actRow5List = report5thRowListArray.toString();
		String expRow5List = "[NDT60:4, DateField, Customer New Reference, 10.00, 10.00, 40.00, 0, 10.00, 10.00, , , , , , , , , , , , 10.00, 10.00, , , , , , , , , , , , 10.00, 10.00, , DateField, , , , , , , , , , 0.70, 0.70, , , , DateField, Customer New Reference]";

		int report6thRowListCount = report6thRowList.size();
		ArrayList<String> report6thRowListArray = new ArrayList<String>();
		for(int i=1;i<report6thRowListCount;i++)
		{
			String data = report6thRowList.get(i).getText();
			if (i==7) 
			{
			data="DelayInPayment";	
			}
			report6thRowListArray.add(data);
		}
		String actRow6List = report6thRowListArray.toString();
		String expRow6List = "[Total, , , 90.00, 40.00, 130.00, DelayInPayment, 90.00, 40.00, , , , , , , , , , , , 60.00, 40.00, , , , , , , , , , , , 60.00, 40.00, , , , , , , , , , , , 4.20, 0.40, 20.00, 20.00, 4.60, , ]";
		
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow5List  : "+actRow5List);
		System.out.println("expRow5List  : "+expRow5List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow6List  : "+actRow6List);
		System.out.println("expRow6List  : "+expRow6List);
		System.out.println("*********************************************************************");
				
	
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actRow5List.equalsIgnoreCase(expRow5List) &&
				actRow6List.equalsIgnoreCase(expRow6List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}

	





	public boolean checkCustomerAgeingDetailsByDueDateReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerDetailAgeingByDueDateReport));
		customerDetailsCustomerDetailAgeingByDueDateReport.click();
		
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		
       Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer Semi Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		
		//Include PDC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		//Montly Ageing 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report15chkbox));
		report15chkbox.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    Thread.sleep(2500);
	    	
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Customer Semi Adjustment Customer Semi Adjustment]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==7) 
			{
			data="DelayInPayments";	
			}
			if (i==37) 
			{
			data="DateField";	
			}
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[OpeBal:1, DateField, Customer Semi Adjustment, 100.00, 20.00, 20.00, DelayInPayments, 100.00, 20.00, , 20.00, , , , , , , , , , , , , , , , , 20.00, , , , , , , , , DateField, 0.0000000000]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==37) 
			{
			data="DateField";	
			}
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[NDT60:4, DateField, Customer Semi Adjustment, 100.00, 100.00, 80.00, 3, 100.00, 100.00, , 100.00, , , , 100.00, , , , , , , , , , , , , 100.00, , , , 7.00, , , , , DateField, 0.0000000000]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			if (i==37) 
			{
			data="DateField";	
			}
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[NDT66:3, DateField, Customer Semi Adjustment, 50.00, 50.00, 30.00, 3, 50.00, 50.00, , 50.00, , , , 50.00, , , , , , , , , , , , , 50.00, , , , 3.50, , , , , DateField, 0.0000000000]";

		int report5thRowListCount = report5thRowList.size();
		ArrayList<String> report5thRowListArray = new ArrayList<String>();
		for(int i=1;i<report5thRowListCount;i++)
		{
			String data = report5thRowList.get(i).getText();
			if (i==7) 
			{
			data="DelayInPayment";	
			}
			report5thRowListArray.add(data);
		}
		String actRow5List = report5thRowListArray.toString();
		String expRow5List = "[Total, , , 50.00, 30.00, 90.00, DelayInPayment, 50.00, 30.00, , 30.00, , , , 50.00, , , , , , , , , , , , , 30.00, , , , 3.50, , , , , , 0]";

		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow5List  : "+actRow5List);
		System.out.println("expRow5List  : "+expRow5List);
		System.out.println("*********************************************************************");
				
				
		
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actRow5List.equalsIgnoreCase(expRow5List) &&
				
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}



	





	public boolean checkCustomerOverDueAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerOverdueAnalysisReport));
		customerDetailsCustomerOverdueAnalysisReport.click();
		
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
       Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer Full Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		//Include PDC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    Thread.sleep(2500);
	    	
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Customer Full Adjustment Customer Full Adjustment]";
		
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[OpeBal:1, DateField, Customer Full Adjustment, 100.00, 80.00, 0, 80.00, , , , , , , , , 80.00, 80.00, Customer Full Adjustment]";
		
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			if (i==2) 
			{
			data="DateField";	
			}
			
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[NDT60:4, DateField, Customer Full Adjustment, 100.00, 100.00, 0, 20.00, 100.00, , , , , , , , , 100.00, Customer Full Adjustment]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[Total, , , , 20.00, 0, 60.00, 100.00, , , , , , , , 80.00, 20.00, ]";

		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
				
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
				
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}







	public boolean checkcustomerSummaryCustomerAgeingSummaryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerSummaryMenu));
		customerSummaryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerSummaryCustomerAgeingSummaryReport));
		customerSummaryCustomerAgeingSummaryReport.click();
		
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		
        Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer Full Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report15chkbox));
		report15chkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    Thread.sleep(1500);
	    	
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Customer Full Adjustment, 20.00, 20.00, , 100.00, 20.00, , , , , , , , , , , , 100.00, 20.00, , , , , , , , , , , , 100.00, 20.00, , , , , , , , , , , , 7.00, 4.00, , , , 80.00, 80.00, 11.00, 20.00, 20.00, , 100.00, 20.00, 4.00, 4.00, , 7.00, 4.00, , , , , Customer Full Adjustment]";
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		int reportsRow2ListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow2ListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Grand Total, 20.00, 20.00, , 100.00, 20.00, , , , , , , , , , , , 100.00, 20.00, , , , , , , , , , , , 100.00, 20.00, , , , , , , , , , , , 7.00, 4.00, , , , 80.00, 80.00, 11.00, 20.00, 20.00, , 100.00, 20.00, 4.00, 4.00, , 7.00, 4.00, , , , , ]";
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
		
			
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}

	


	

	public boolean checkcustomerSummaryAgeingByDueDateReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerSummaryMenu));
		customerSummaryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerSummaryAgeingByDueDateReport));
		customerSummaryAgeingByDueDateReport.click();
		
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
      Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer Full Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report15chkbox));
		report15chkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    Thread.sleep(1500);
	    	
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Customer Full Adjustment, 20.00, 20.00, , 100.00, 20.00, , , , , , , , , , , , 100.00, 20.00, , , , , , , , , , , , 100.00, 20.00, , , , , , , , , , , , 7.00, 4.00, , , , 80.00, 80.00, 11.00, 20.00, 20.00, , 100.00, 20.00, 4.00, 4.00, , 7.00, 4.00, , , , , Customer Full Adjustment]";
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		int reportsRow2ListCount = report2ndRowList.size();
		ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow2ListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			reportsRow2ListArray.add(data);
		}
		String actRow2List = reportsRow2ListArray.toString();
		String expRow2List = "[Grand Total, 20.00, 20.00, , 100.00, 20.00, , , , , , , , , , , , 100.00, 20.00, , , , , , , , , , , , 100.00, 20.00, , , , , , , , , , , , 7.00, 4.00, , , , 80.00, 80.00, 11.00, 20.00, 20.00, , 100.00, 20.00, 4.00, 4.00, , 7.00, 4.00, , , , , ]";
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
		Calendar cal=Calendar.getInstance();
		DateFormat df = new SimpleDateFormat("MMM");
		String CurMon = df.format(cal.getTime());
		
		cal.add(Calendar.MONTH, 1);
		
		String nxtMon = df.format(cal.getTime());
		
		System.err.println(CurMon);
		System.err.println(nxtMon);
			
		if(actRow1List.equalsIgnoreCase(expRow1List) &&
				actRow2List.equalsIgnoreCase(expRow2List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}




	


	public boolean checkcustomerSummaryCustomerOverDueSummeryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerSummaryMenu));
		customerSummaryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerSummaryCustomerOverDueSummeryReport));
		customerSummaryCustomerOverDueSummeryReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
        Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer Full Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    Thread.sleep(2500);
	    	
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Customer Full Adjustment, , 20.00, 100.00, , , , , , , , 80.00, , 20.00, , 100.00, 100.00, Customer Full Adjustment]";
		
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			
			
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Grand Total, , 20.00, 100.00, , , , , , , , 80.00, , 20.00, , 100.00, 100.00, ]";
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
			
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}

	
	public boolean checkcustomerSummaryCustomerBillWiseSummeryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerSummaryMenu));
		customerSummaryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerSummaryCustomerBillWiseSummeryReport));
		customerSummaryCustomerBillWiseSummeryReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
        Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Customer Full Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report21chkbox));
		report21chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    Thread.sleep(1500);
	    	
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Customer Full Adjustment, 100.00, 80.00, Customer Full Adjustment]";
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Grand Total, 100.00, 80.00, ]";
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
			
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}

	

	




	@FindBy(xpath="//select[@id='RITCombobox__2']")
	private static WebElement osr_includeBillsDropdown;



	public boolean checkVendorListingOfOutstandingBillsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailMenu));
		vendorDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailsVendorListingOfOutstandingBillsReport));
		vendorDetailsVendorListingOfOutstandingBillsReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		
      Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Vendor Semi Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report21chkbox));
		report21chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		

		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    Thread.sleep(1500);
		
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			if (i==7) 
			{
			data="dateField";	
			}
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[NDT52:2, dateField, Vendor Semi Adjustment, 52.50, 2.50, 2.50, dateField, 2.50, 52.50, 2.50, 2.50, 3.68, 0.18, 0.18, Vendor Semi Adjustment]";
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			if (i==7) 
			{
			data="dateField";	
			}
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Grand Total, dateField, , 52.50, 2.50, , dateField, 2.50, 52.50, 2.50, 2.50, 3.68, 0.18, 0.18, ]";
		
		/*int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Grand Total, , , 152.50, 72.50, , , 72.50, 152.50, 72.50, 142.50, 14.68, 8.28, 16.38, ]";
		*/

		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
		/*System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
			*/
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				/*actRow3List.equalsIgnoreCase(expRow3List) &&*/
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}

	


	public boolean checkvendorDetailsVendorStatementsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, ParseException
	{
		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailMenu));
		vendorDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailsVendorStatementsReport));
		vendorDetailsVendorStatementsReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		
        Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Vendor Full Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	   
		Thread.sleep(2000);

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor Full Adjustment Vendor Full Adjustment]";
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report2ndRowListArray.add(data);
		}
		
		    String s1 = sl_2ndRow3rdCol.getText(); 
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
		    String s2 = f.format(cal.getTime());
		    
		    System.out.println("AccountingDate String : "+s1);
		    System.out.println("CurrentDate String : "+s2);
		    
		    Date AccountingDate = f.parse(s1); 
		    Date PresentDate = f.parse(s2);


		    Calendar day1 = Calendar.getInstance();
		    Calendar day2 = Calendar.getInstance(); 
		    day1.setTime(AccountingDate);
		    day2.setTime(PresentDate);

		    int daysBetween = day2.get(Calendar.DAY_OF_YEAR) - day1.get(Calendar.DAY_OF_YEAR);      


		System.err.println(daysBetween);
		
		
		
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[OpeBal:1, dateField, Vendor Full Adjustment, 100.00, , , , , 100.00, , ]";

		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report3rdRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[OpeBal:2, dateField, Vendor Full Adjustment, , 20.00, , , , , 20.00, ]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report4thRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[NDT58:3, dateField, Vendor Full Adjustment, , 80.00, , , , , 80.00, ]";
		
		
		int report5thRowListCount = report5thRowList.size();
		ArrayList<String> report5thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report5thRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report5thRowListArray.add(data);
		}
		String actRow5List = report5thRowListArray.toString();
		String expRow5List = "[NDT52:3, dateField, Vendor Full Adjustment, 100.01, , , 100.01, 100.01, 100.01, , ]";
		
		
		int report6thRowListCount = report6thRowList.size();
		ArrayList<String> report6thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report6thRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report6thRowListArray.add(data);
		}
		String actRow6List = report6thRowListArray.toString();
		String expRow6List = "[NDT60:3, dateField, Vendor Full Adjustment, 100.00, , , 90.00, 190.01, 100.00, , ]";
		
		

		int report7thRowListCount = report7thRowList.size();
		ArrayList<String> report7thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report7thRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report7thRowListArray.add(data);
		}
		String actRow7List = report7thRowListArray.toString();
		String expRow7List = "[NDT58:6, dateField, Vendor Full Adjustment, , 10.00, , , 190.01, , 10.00, ]";
		

		int report8thRowListCount = report8thRowList.size();
		ArrayList<String> report8thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report8thRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			report8thRowListArray.add(data);
		}
		String actRow8List = report8thRowListArray.toString();
		String expRow8List = "[NDT58:6, dateField, Vendor Full Adjustment, , 10.00, , , 180.01, , 10.00, ]";
		
		
		int report9thRowListCount = report9thRowList.size();
		ArrayList<String> report9thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report9thRowList.get(i).getText();
			
			report9thRowListArray.add(data);
		}
		String actRow9List = report9thRowListArray.toString();
		String expRow9List = "[Total, , , 300.01, 120.00, , 180.01, 640.04, 300.01, 120.00, ]";
		
		
		
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow5List  : "+actRow5List);
		System.out.println("expRow5List  : "+expRow5List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow6List  : "+actRow6List);
		System.out.println("expRow6List  : "+expRow6List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow7List  : "+actRow7List);
		System.out.println("expRow7List  : "+expRow7List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow8List  : "+actRow8List);
		System.out.println("expRow8List  : "+expRow8List);
		System.out.println("*********************************************************************");
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actRow5List.equalsIgnoreCase(expRow5List) &&
				actRow6List.equalsIgnoreCase(expRow6List) &&
				actRow7List.equalsIgnoreCase(expRow7List) &&
				actRow8List.equalsIgnoreCase(expRow8List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}






	public boolean checkvendorDetailsVendorDueDateAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, ParseException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailMenu));
		vendorDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailsVendorDueDateAnalysisReport));
		vendorDetailsVendorDueDateAnalysisReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		
       Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Vendor New Reference") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report21chkbox));
		report21chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	    
		Thread.sleep(2000);

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor New Reference Vendor New Reference]";
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report2ndRowListArray.add(data);
		}
		
		    String s1 = sl_2ndRow3rdCol.getText(); 
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
		    String s2 = f.format(cal.getTime());
		    
		    System.out.println("AccountingDate String : "+s1);
		    System.out.println("CurrentDate String : "+s2);
		    
		    Date AccountingDate = f.parse(s1); 
		    Date PresentDate = f.parse(s2);


		    Calendar day1 = Calendar.getInstance();
		    Calendar day2 = Calendar.getInstance(); 
		    day1.setTime(AccountingDate);
		    day2.setTime(PresentDate);

		    int daysBetween = day2.get(Calendar.DAY_OF_YEAR) - day1.get(Calendar.DAY_OF_YEAR);      


		System.err.println(daysBetween);
		
		
		
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[OpeBal:1, dateField, Vendor New Reference, 100.00, , , 80.00, 80.00, 100.00, , ]";

		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report3rdRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[OpeBal:2, dateField, Vendor New Reference, , 20.00, , , 80.00, , 20.00, ]";
		
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report4thRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[NDT58:1, dateField, Vendor New Reference, 100.00, , , , 80.00, 100.00, , ]";
		
		
		int report5thRowListCount = report5thRowList.size();
		ArrayList<String> report5thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report5thRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report5thRowListArray.add(data);
		}
		String actRow5List = report5thRowListArray.toString();
		String expRow5List = "[NDT60:1, dateField, Vendor New Reference, , 100.00, , , 80.00, , 100.00, ]";
		
		
		int report6thRowListCount = report6thRowList.size();
		ArrayList<String> report6thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report6thRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report6thRowListArray.add(data);
		}
		String actRow6List = report6thRowListArray.toString();
		String expRow6List = "[NDT52:1, dateField, Vendor New Reference, 105.00, , , 95.00, 175.00, 105.00, , ]";
		
		

		int report7thRowListCount = report7thRowList.size();
		ArrayList<String> report7thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report7thRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report7thRowListArray.add(data);
		}
		String actRow7List = report7thRowListArray.toString();
		String expRow7List = "[NDT62:1, dateField, Vendor New Reference, , 10.00, , , 175.00, , 10.00, ]";
		

		int report8thRowListCount = report8thRowList.size();
		ArrayList<String> report8thRowListArray = new ArrayList<String>();
		for(int i=1;i<12;i++)
		{
			String data = report8thRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			report8thRowListArray.add(data);
		}
		String actRow8List = report8thRowListArray.toString();
		String expRow8List = "[Pmt:1, dateField, Vendor New Reference, , 50.00, , , 125.00, , 50.00, ]";
		
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow5List  : "+actRow5List);
		System.out.println("expRow5List  : "+expRow5List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow6List  : "+actRow6List);
		System.out.println("expRow6List  : "+expRow6List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow7List  : "+actRow7List);
		System.out.println("expRow7List  : "+expRow7List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow8List  : "+actRow8List);
		System.out.println("expRow8List  : "+expRow8List);
		System.out.println("*********************************************************************");
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actRow5List.equalsIgnoreCase(expRow5List) &&
				actRow6List.equalsIgnoreCase(expRow6List) &&
				actRow7List.equalsIgnoreCase(expRow7List) &&
				actRow8List.equalsIgnoreCase(expRow8List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}




	public boolean checkVendorDetailsVendorAgeingDetailsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, ParseException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailMenu));
		vendorDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailsVendorAgeingDetailsReport));
		vendorDetailsVendorAgeingDetailsReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		
      Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Vendor Semi Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		//Include PDC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
		
		Thread.sleep(2000);

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor Semi Adjustment Vendor Semi Adjustment]";
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<6;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			
			report2ndRowListArray.add(data);
		}
		
		String s1 = sl_2ndRow3rdCol.getText(); 
		Calendar cal=Calendar.getInstance();
		SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
	    String s2 = f.format(cal.getTime());
	    
	    System.out.println("AccountingDate String : "+s1);
	    System.out.println("CurrentDate String : "+s2);
	    
	    Date AccountingDate = f.parse(s1); 
	    Date PresentDate = f.parse(s2);


	    Calendar day1 = Calendar.getInstance();
	    Calendar day2 = Calendar.getInstance(); 
	    day1.setTime(AccountingDate);
	    day2.setTime(PresentDate);

	    int daysBetween = day2.get(Calendar.DAY_OF_YEAR) - day1.get(Calendar.DAY_OF_YEAR);      


	    System.err.println(daysBetween);
		
		
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[NDT52:2, dateField, Vendor Semi Adjustment, 52.50, 2.50]";

		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<7;i++)
		{
			String data = report3rdRowList.get(i).getText();
			/*if (i==2) 
			{
			data="dateField";	
			}*/
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Total, , , 52.50, 2.50, 2.50]";
		
		
		/*int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<7;i++)
		{
			String data = report4thRowList.get(i).getText();
			
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[Total, , , 52.50, 2.50, 2.50]";*/
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
		
		/*System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
		*/
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
			/*	actRow4List.equalsIgnoreCase(expRow4List) &&*/
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}

	

	
	public boolean checkVendorDetailsVendorDetailsAgeingByDueDateReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, ParseException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailMenu));
		vendorDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailsVendorDetailsAgeingByDueDateReport));
		vendorDetailsVendorDetailsAgeingByDueDateReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		
       Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Vendor New Reference") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		//Include PDC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
		
		Thread.sleep(2000);

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor New Reference Vendor New Reference]";
		
		String s1 = sl_2ndRow3rdCol.getText(); 
		Calendar cal=Calendar.getInstance();
		SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
	    String s2 = f.format(cal.getTime());
	    
	    System.out.println("AccountingDate String : "+s1);
	    System.out.println("CurrentDate String : "+s2);
	    
	    Date AccountingDate = f.parse(s1); 
	    Date PresentDate = f.parse(s2);


	    Calendar day1 = Calendar.getInstance();
	    Calendar day2 = Calendar.getInstance(); 
	    day1.setTime(AccountingDate);
	    day2.setTime(PresentDate);

	    int daysBetween = day2.get(Calendar.DAY_OF_YEAR) - day1.get(Calendar.DAY_OF_YEAR);      

	    System.err.println(daysBetween);
		
		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
				data="dateField";	
			}
			if (i==7) 
			{
				data="DelayInPayment";	
			}
			if (i==37) 
			{
				data="dateField";	
			}
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[OpeBal:1, dateField, Vendor New Reference, 100.00, 80.00, 80.00, DelayInPayment, 100.00, 80.00, , , , , , , , 80.00, 80.00, , , , , , , , 80.00, 80.00, , , , , , , , 8.80, 8.80, dateField, Vendor New Reference]";

		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=2;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			if (i==2) 
			{
				data="dateField";	
			}
			if (i==7) 
			{
				data="DelayInPayment";	
			}
			if (i==37) 
			{
				data="dateField";	
			}
			report3rdRowListArray.add(data);
		}
		
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[dateField, Vendor New Reference, 105.00, 45.00, 125.00, DelayInPayment, 105.00, 45.00, 45.00, , , , , , , , 45.00, 45.00, , , , , , , , 45.00, 3.15, , , , , , , , 3.15, dateField, Vendor New Reference]";
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=2;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			if (i==2) 
			{
				data="dateField";	
			}
			if (i==7) 
			{
				data="DelayInPayment";	
			}
			if (i==37) 
			{
				data="dateField";	
			}
			report4thRowListArray.add(data);
		}
		
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[dateField, Vendor New Reference, 50.00, 50.00, 175.00, DelayInPayment, 50.00, 50.00, 50.00, , , , , , , , 50.00, 50.00, , , , , , , , 50.00, 3.50, , , , , , , , 3.50, dateField, Vendor New Reference]";
		
		int report5thRowListCount = report5thRowList.size();
		ArrayList<String> report5thRowListArray = new ArrayList<String>();
		for(int i=2;i<report5thRowListCount;i++)
		{
			String data = report5thRowList.get(i).getText();
			
			if (i==7) 
			{
				data="DelayInPayment";	
			}
			
			report5thRowListArray.add(data);
		}
		
		String actRow5List = report5thRowListArray.toString();
		String expRow5List = "[, , 255.00, 175.00, 380.00, DelayInPayment, 255.00, 175.00, 95.00, , , , , , , 80.00, 175.00, 95.00, , , , , , , 80.00, 175.00, 6.65, , , , , , , 8.80, 15.45, , ]";
		
		
		
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow5List  : "+actRow5List);
		System.out.println("expRow5List  : "+expRow5List);
		System.out.println("*********************************************************************");
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actRow5List.equalsIgnoreCase(expRow5List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}


	public boolean checkVendorDetailsVendorOverdueAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, ParseException
	{
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailMenu));
		vendorDetailMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorDetailsVendorOverdueAnalysisReport));
		vendorDetailsVendorOverdueAnalysisReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
        Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Vendor Full Adjustment") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
		Thread.sleep(2000);

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor Full Adjustment Vendor Full Adjustment]";
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			if (i==6) 
			{
			data="dateField";	
			}
			report2ndRowListArray.add(data);
		
		}
		
		String s1 = sl_2ndRow3rdCol.getText(); 
		Calendar cal=Calendar.getInstance();
		SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
	    String s2 = f.format(cal.getTime());
	    
	    System.out.println("AccountingDate String : "+s1);
	    System.out.println("CurrentDate String : "+s2);
	    
	    Date AccountingDate = f.parse(s1); 
	    Date PresentDate = f.parse(s2);


	    Calendar day1 = Calendar.getInstance();
	    Calendar day2 = Calendar.getInstance(); 
	    day1.setTime(AccountingDate);
	    day2.setTime(PresentDate);

	    int daysBetween = day2.get(Calendar.DAY_OF_YEAR) - day1.get(Calendar.DAY_OF_YEAR);      


	    System.err.println(daysBetween);
		
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[NDT52:3, dateField, Vendor Full Adjustment, 100.01, 100.01, dateField, 100.01, , 100.01, , , , , , , , 100.01, Vendor Full Adjustment]";

		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=2;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			if (i==2) 
			{
			data="dateField";	
			}
			if (i==6) 
			{
			data="dateField";	
			}
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[dateField, Vendor Full Adjustment, 100.00, 80.00, dateField, 180.01, 80.00, , , , , , , , , 80.00, Vendor Full Adjustment]";
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=2;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			
			if (i==6) 
			{
			data="dateField";	
			}
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[, , 200.01, 180.01, dateField, 280.02, 180.01, , , , , , , , , 180.01, ]";
		
		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}

	

	
	//Vendor Summary  

	public boolean checkVendorSummeryVendorAgeingSummaryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSummaryMenu));
		vendorSummaryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSummeryVendorAgeingSummaryReport));
		vendorSummeryVendorAgeingSummaryReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
Thread.sleep(2000);
		
        int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
			
			String actname=name.getText();
			
			System.out.println(actname);
			
			if(actname.equalsIgnoreCase("Vendor New Reference") )
			{
				
				WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
				index.click();
				
				break;
			}

		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report15chkbox));
		report15chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
	
		Thread.sleep(2000);

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<6;i++)
		{
			String data = report1stRowList.get(i).getText();
			
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor New Reference, 175.00, 175.00, , 50.00]";
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<6;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Grand Total, 175.00, 175.00, , 50.00]";

		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}

	

	public boolean checkVendorSummeryVendorSummaryAgeingByDueDateReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSummaryMenu));
		vendorSummaryMenu.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSummeryVendorSummaryAgeingByDueDateReport));
		vendorSummeryVendorSummaryAgeingByDueDateReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_HeaderSelectChkBox));
		sl_HeaderSelectChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report15chkbox));
		report15chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
		
		Thread.sleep(3000);

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<6;i++)
		{
			String data = report1stRowList.get(i).getText();
			
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor Full Adjustment, 180.01, 180.01, , 100.01]";
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<6;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Vendor Semi Adjustment, 2.50, 2.50, , ]";
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<6;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Vendor New Reference, 175.00, 175.00, , 50.00]";
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<6;i++)
		{
			String data = report4thRowList.get(i).getText();
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[Grand Total, 357.51, 357.51, , 150.01]";
		

		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");

		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");

		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}







	public boolean checkVendorSummeryVendorOverdueSummaryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSummaryMenu));
		vendorSummaryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSummeryVendorOverdueSummaryReport));
		vendorSummeryVendorOverdueSummaryReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_HeaderSelectChkBox));
		sl_HeaderSelectChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report7chkbox));
		report7chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report16chkbox));
		report16chkbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
		
		Thread.sleep(3000);

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor Full Adjustment, 200.01, 180.01, 180.01, , , , , , , , , , 180.01, , 100.01, 100.01, Vendor Full Adjustment]";
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Vendor Semi Adjustment, 52.50, 2.50, 2.50, , , , , , , , , , 2.50, , , , Vendor Semi Adjustment]";
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Vendor New Reference, 255.00, 175.00, 95.00, , , , , , , , 80.00, , 175.00, , 50.00, 50.00, Vendor New Reference]";
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[Grand Total, 507.51, 357.51, 277.51, , , , , , , , 80.00, , 357.51, , 150.01, 150.01, ]";
		

		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");

		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");

		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			return false;
		}
	}


	public boolean checkVendorSummeryVendorBillWiseSummaryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSummaryMenu));
		vendorSummaryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorSummeryVendorBillWiseSummaryReport));
		vendorSummeryVendorBillWiseSummaryReport.click();
		
		boolean novalidationConfirmationMessage =validationConfirmationMessage.getText().isEmpty();
		
		String actvalidationConfirmationMessage = Boolean.toString(novalidationConfirmationMessage);
		String expvalidationConfirmationMessage = "true";
		
		System.out.println("validationConfirmationMessage : "+actvalidationConfirmationMessage+" Value Expected : "+expvalidationConfirmationMessage);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_HeaderSelectChkBox));
		sl_HeaderSelectChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report21chkbox));
		report21chkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		boolean novalidationConfirmationMessage1 =validationConfirmationMessage.getText().isEmpty();
			
		String actvalidationConfirmationMessage1 = Boolean.toString(novalidationConfirmationMessage1);
		String expvalidationConfirmationMessage1 = "true";
		
		System.out.println("validationConfirmationMessage1 : "+actvalidationConfirmationMessage1+" Value Expected : "+expvalidationConfirmationMessage1);
		
		Thread.sleep(3000);

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor Full Adjustment, , 180.01, Vendor Full Adjustment]";
		

		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Vendor Semi Adjustment, , 2.50, Vendor Semi Adjustment]";
		
		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Vendor New Reference, , 175.00, Vendor New Reference]";
		
		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[Grand Total, , 357.51, ]";
		

		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");
		
		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");

		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");

		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) &&
				actRow3List.equalsIgnoreCase(expRow3List) &&
				actRow4List.equalsIgnoreCase(expRow4List) &&
				actvalidationConfirmationMessage.equalsIgnoreCase(expvalidationConfirmationMessage) && 
				actvalidationConfirmationMessage1.equalsIgnoreCase(expvalidationConfirmationMessage1))
		{
			System.out.println("Test Pass : Reports Are as Expected ");
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplay.click();
				  
			System.out.println("*********Logout Successfully********************************8");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			return true;
		}
		else
		{
			System.out.println("Test Fail : Report Are NOT as Expected ");
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplay.click();
				  
			System.out.println("*********Logout Successfully********************************8");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			return false;
		}
	}



	public BillWisePage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);
	}
	

}
