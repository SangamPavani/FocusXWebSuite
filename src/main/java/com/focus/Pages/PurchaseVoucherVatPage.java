package com.focus.Pages;

import java.awt.RenderingHints.Key;
import java.io.IOException;
import java.io.ObjectInputStream.GetField;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.sound.midi.SysexMessage;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ddf.EscherColorRef.SysIndexProcedure;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.testng.Assert;
import org.testng.SkipException;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;
import com.sun.tools.xjc.model.SymbolSpace;

public class PurchaseVoucherVatPage extends BaseEngine
{
	//Vouchers Home Page Ribbon Control
	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
	private static WebElement  newBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
	private static WebElement  editBtn;

	@FindBy(xpath="//span[@class='icon-print icon-font6']")
	private static WebElement  printBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
	private static WebElement  deleteBtn;
	
	@FindBy(xpath="//span[@class='icon-authorize icon-font6']")
	private static WebElement  authorizeBtn;
	
	@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
	private static WebElement  suspendBtn;
	
	@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
	private static WebElement  rejectBtn;
	
	@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
	private static WebElement  chequeReturnBtn;
	
	@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
	private static WebElement  printBarCodeBtn;
	
	@FindBy(xpath="//span[@class='icon-convert icon-font6']")
	private static WebElement  convertBtn;
	
	@FindBy(xpath="//span[@class='icon-export icon-font6']")
	private static WebElement  exportToXMLBtn;  
		
	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
	private static WebElement  settingsBtn;
	
	@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
	private static WebElement  homeCloseBtn;
			
	//Vouchers Home Page Options
	@FindBy(xpath="//a[@class='transaction_viewname_anchor theme_color-inverse font-5']")
	private static WebElement  allVouchersOption;
	
	@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
	private static WebElement  pendingBillsOption;
	
	@FindBy(xpath="//input[@id='SelectDefaultView']")
	private static WebElement  selectDefaultViewChkBox;
		
	@FindBy(xpath="//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
	private static WebElement  sortingBtn;
	
    @FindBy(xpath="//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
    private static WebElement  createViewBtn;

    @FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
    private static WebElement  customizeBtn;
   
    @FindBy(xpath="//span[@class='icon-filter icon-font6']")
    private static WebElement  filterBtn;
   
    @FindBy(xpath="//*[@id='transhomeRefresh']")
    private static WebElement  refreshBtn;
   
    @FindBy(xpath="//*[@id='transhomeRefresh']")
    private static WebElement  refreshBtnInPVVAT;
    
    @FindBy(xpath="//i[@class='icon-font6 icon-export']")
    private static WebElement  exportBtn;
   
	// Options Button  (Display Option)	
    @FindBy(xpath="//span[@id='transOptions']")
    private static WebElement  optionsBtn;
   
    @FindBy(xpath="//a[contains(text(),'Auto Adjust Width')]")
    private static WebElement  autoAdjustWidthBtn;
   
    @FindBy(xpath="//a[contains(text(),'Fit To Screen')]")
    private static WebElement  fitToScreenBtn;
   
    @FindBy(xpath="//a[contains(text(),'Normal')]")
    private static WebElement  normalBtn;
   
				
	//Voucher Home Page Grid Header Columns
	@FindBy(xpath="//input[@id='HeaderChkBox']")
	private static WebElement  grid_HeaderChkBox;	
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[3]")
	private static WebElement  grid_Header_Date;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[4]")
	private static WebElement  grid_Header_VoucherNumber;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[5]")
	private static WebElement  grid_Header_CreatedBy;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[6]")
	private static WebElement  grid_Header_ModifiedBy;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[7]")
	private static WebElement  grid_Header_CreatedDate;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[8]")
	private static WebElement  grid_Header_ModifiedDate;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[9]")
	private static WebElement  grid_Header_CreatedTime;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[10]")
	private static WebElement  grid_Header_ModifiedTime;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[11]")
	private static WebElement  grid_Header_Suspended;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[12]")
	private static WebElement  grid_Header_Cancelled;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[13]")
	private static WebElement  grid_Header_AuthorizationStatus;
	
	
	//Grid Voucher DetailsBtn
	@FindBy(xpath="//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
	private static WebElement  grid_VoucherDetailsBtn1;
	
	@FindBy(xpath="//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
	private static WebElement  grid_VoucherDetailsBtn2;
	
	
	//Grid CheckBox 1 And 2
	
	@FindBy(xpath="//tr[@id='trRender_1']//td//input")
	private static WebElement  grid_ChkBox1;
	
	@FindBy(xpath="//tr[@id='trRender_2']//td//input")
	private static WebElement  grid_ChkBox2;
	
	@FindBy(xpath="//tr[@id='trRender_3']//td//input")
	private static WebElement  grid_ChkBox3;
	
	@FindBy(xpath="//tr[@id='trRender_4']//td//input")
	private static WebElement  grid_ChkBox4;
	
	
	// Vouchers Home Page Footer
	@FindBy(xpath="//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
	private static WebElement  searchField;
							
	@FindBy(xpath="//button[@id='frstPage']")
	private static WebElement  firstPageBtn;

	@FindBy(xpath="//button[@id='id_previousPage']")
	private static WebElement  previousPageBtn;

	@FindBy(xpath="//button[@id='id_pagenumber']")
	private static WebElement  currentPageNo;

	@FindBy(xpath="//button[@id='id_nextPage']")
	private static WebElement  nextPageBtn;

	@FindBy(xpath="//button[@id='lstPage']")
	private static WebElement  lastPageBtn;
	
	
	
	//Vouchers Entry Page Ribbon Control Options
	@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
	private static WebElement  freeFlowBtn;
	
	@FindBy(xpath="//span[@class='icon-header icon-font6']")
	private static WebElement  jumpToHeaderSectionBtn;
	
	@FindBy(xpath="//span[@class='icon-panel icon-font6']")
	private static WebElement  jumpToBodySectionBtn;
	
	@FindBy(xpath="//span[@class='icon-footer icon-font6']")
	private static WebElement  jumpToFooterBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_new']")
	private static WebElement  new_newBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_save']/div[2]")
	private static WebElement  saveBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_previous']")
	private static WebElement  previousBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_next']")
	private static WebElement  nextBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_print']")
	private static WebElement  new_PrintBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
	private static WebElement  new_SuspendBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_close']")
	private static WebElement  new_CloseBtn;
	
	@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
	private static WebElement  new_DeleteBtn;
	
	@FindBy(xpath="//span[@class='icon-menu icon-font4']")
	private static WebElement  toggleBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
	private static WebElement  copyDocumentOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_copytoclipboard']")
	private static WebElement  copyToClipBoardOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_pastefromclipboard']")
	private static WebElement  pasteFromClipBoardOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_raisechequereturn']")
	private static WebElement  raiseCheckReturnOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_addtostock']")
	private static WebElement  addToStockOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_markconvert']")
	private static WebElement  markConvertedOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_bominput']")
	private static WebElement  bOMinputOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_autoallocate']")
	private static WebElement  autoAllocateOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_reverseentry']")
	private static WebElement  reverseEntryOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_printbarcode']")
	private static WebElement  printBarCodeOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_postingdetails']")
	private static WebElement  postingDetailsOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_exporttoxml']")
	private static WebElement  exportToXMLOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_settings']")
	private static WebElement  settingsOption;
	
	
	
	//Voucher Entry Page Header Fields
	@FindBy(xpath="//input[@id='id_header_1']")
	private static WebElement  documentNumberTxt;
	
	@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
	private static WebElement  documentNumberdropdown_ExpansionBtn;
	
	@FindBy(xpath="//input[@id='id_header_2']")
	private static WebElement  dateTxt;
	
	@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement  dateTxt_CalenderBtn;
	
	@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
	private static WebElement  calender_TodayBtn;
	
	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  caskBankAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  caskBankAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  cashBankAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  cashBankAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  cashBankAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  cashBankAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  cashBankAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  cashBankAccount_Settings_CancelBtn;
			
	@FindBy(xpath="//input[@id='id_header_268435459']")
	private static WebElement  departmentTxt;
	
	@FindBy(xpath="//*[@id='id_header_268435459_input_image']/span")
	private static WebElement  department_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_268435459_input_settings']/span")
	private static WebElement  department_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_container']")
		private static WebElement  department_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
		private static WebElement  department_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_list']")
			private static WebElement  department_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_header']")
			private static WebElement  department_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
			private static WebElement  department_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_width']")
			private static WebElement  department_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  department_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  department_Settings_StandardFieldsBtn_CancelBtn;
						
								
		@FindBy(xpath="//div[@id='id_header_268435459_search_container']//input[2]")
		private static WebElement  department_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  department_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  department_Settings_CancelBtn;

	@FindBy(xpath="//*[@id='id_header_6']")
	private static WebElement  maturityDateTxt;
	
	@FindBy(xpath="//*[@id='id_header_6_input_image']/span']")
	private static WebElement  maturityDateTxt_CalenderBtn;
	
	@FindBy(xpath="//input[@id='id_header_3']")
	private static WebElement  purchaseAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
	private static WebElement  purchaseAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
	private static WebElement  purchaseAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
		private static WebElement  purchaseAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
		private static WebElement  purchaseAccount_Settings_StandardFieldsBtn;
						
			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;
															
		@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
		private static WebElement  purchaseAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  purchaseAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  purchaseAccount_Settings_CancelBtn;


@FindBy(xpath="//input[@id='id_header_4']")
private static WebElement  vendorAccountTxt;

@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
private static WebElement  vendorAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
private static WebElement  vendorAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  vendorAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  vendorAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  vendorAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  vendorAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  vendorAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  vendorAccount_Settings_CancelBtn;

@FindBy(xpath="//input[@id='id_header_3']")
private static WebElement  salesAccountTxt;

@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
private static WebElement  salesAccount_ExpansionBtn;

@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
private static WebElement  salesAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
		private static WebElement  salesAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
		private static WebElement  salesAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  salesAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
		private static WebElement  salesAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  salesAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  salesAccount_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  customerAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  customerAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  customerAccount_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  customerAccount_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  customerAccount_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[@class='panel']//input[3]")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[@class='panel']//input[4]")
					private static WebElement  customerAccount_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  customerAccount_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  customerAccount_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  customerAccount_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_header_12']")
	private static WebElement  accountTxt;
	
	@FindBy(xpath="//*[@id='id_header_12_input_image']/span")
	private static WebElement  account_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  account_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
		private static WebElement  account_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
		private static WebElement  account_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
			private static WebElement  account_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
			private static WebElement  account_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
			private static WebElement  account_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
			private static WebElement  account_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  account_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  account_Settings_StandardFieldsBtn_CancelBtn;
								
								
		@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
		private static WebElement  account_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  account_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  account_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_header_31']")
	private static WebElement  issuesReceiptsTxt;
	
	@FindBy(xpath="//input[@id='id_header_268435460']")
	private static WebElement  wareHouseTxt;
	
	@FindBy(xpath="//*[@id='id_header_268435460_input_image']/span")
	private static WebElement  wareHouse_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_268435460_input_settings']/span")
	private static WebElement  wareHouse_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_container']")
		private static WebElement  wareHouse_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
		private static WebElement  wareHouse_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_list']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_header']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_width']")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  wareHouse_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_268435460_search_container']//input[2]")
		private static WebElement  wareHouse_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  wareHouse_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  wareHouse_Settings_CancelBtn;
	
	@FindBy(xpath="//span[contains(text(),'sName')]")
	private static WebElement  customize_sName;
	
	@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Code')]")
	private static WebElement  customize_sCode;
	
	@FindBy(xpath="//span[contains(text(),'Alias')]")
	private static WebElement  customize_Alias;
	
	@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Group')]")
	private static WebElement  customize_bGroup;
	
	@FindBy(xpath="//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
	private static WebElement  customize_Balance;
	
	@FindBy(xpath="//input[@id='id_header_67108920']")
	private static WebElement  appropriateBasedOndropdown;
	
	@FindBy(xpath="//input[@id='id_header_67108921']")
	private static WebElement  additionalValueTxt;
	
	@FindBy(xpath="//input[@id='id_header_21']")
	private static WebElement  raiseReceiptsChkBox;
	
	@FindBy(xpath="//input[@id='id_header_67108865']")
	private static WebElement  receipts_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108868']")
	private static WebElement  payments_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108871']")
	private static WebElement  pettyCash_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108874']")
	private static WebElement  postDatedReceipts_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108865']")
	private static WebElement  postDatedPayments_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108880']")
	private static WebElement  purchaseVouchers_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108881']")
	private static WebElement  purchaseReturns_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108884']")
	private static WebElement  salesInvoice_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108886']")
	private static WebElement  salesOrder_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108928']")
	private static WebElement  salesInvoiceNewNarrationTxt;
	
	
	@FindBy(xpath="//input[@id='id_header_67108885']")
	private static WebElement  salesReturns_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108913']")
	private static WebElement  cashSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108914']")
	private static WebElement  hirePurchaseSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108890']")
	private static WebElement  journalEntries_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108916']")
	private static WebElement  forexJV_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108910']")
	private static WebElement  interDepartmentalJV_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108888']")
	private static WebElement  nonStandardJournalEntries_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108892']")
	private static WebElement  debitNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108911']")
	private static WebElement  debitNotesLineWise_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108893']")
	private static WebElement  creditNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108912']")
	private static WebElement  creditNotesLineWisePayroll_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108894']")
	private static WebElement  openingBalance_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108891']")
	private static WebElement  fixedAssetDepreciationVoucher_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108909']")
	private static WebElement  requestForQuote_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108903']")
	private static WebElement  purchasesQuotations_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement  purchasesOrders_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement  materialReceiptsNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108904']")
	private static WebElement  salesQuotationss_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108887']")
	private static WebElement  deliveryNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108917']")
	private static WebElement  posSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108918']")
	private static WebElement  productionOrder_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108886']")
	private static WebElement  salesOrders_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108895']")
	private static WebElement  shortagesinStock_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108896']")
	private static WebElement  excessesinStocks_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108897']")
	private static WebElement  stockTransfers_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108898']")
	private static WebElement  openingStocks_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108941']")
	private static WebElement  openingStocksNEW_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108908']")
	private static WebElement  materialRequisition_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108866']")
	private static WebElement  receipts_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108869']")
	private static WebElement  payments_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108872']")
	private static WebElement  pettyCash_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108875']")
	private static WebElement  postDatedReceipts_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108878']")
	private static WebElement  postDatedPayments_ChequeNoTxt;



	//Voucher Entry Page Body Fields
	
	@FindBy(xpath="//input[@id='id_body_536870916']")
	private static WebElement  pvWareHouseTxt;
	
	@FindBy(xpath="//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
	private static WebElement  pvWareHouse_ExpansionBtn;
	
	@FindBy(xpath="//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement  pvWareHouse_SettingsBtn;

		@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_container']")
		private static WebElement  pvWareHouse_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
		private static WebElement  pvWareHouse_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_list']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_header']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_width']")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[@class='panel']//input[3]")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[@class='panel']//input[4]")
			private static WebElement  pvWareHouse_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_body_536870916_search_container']//input[2]")
		private static WebElement  pvWareHouse_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[@class='panel']//input[3]")
		private static WebElement  pvWareHouse_Settings_OkBtn;
						
		@FindBy(xpath="//div[@class='panel']//input[4]")
		private static WebElement  pvWareHouse_Settings_CancelBtn;
	
	// Grid Elements
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_Account;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_Item;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_DebitAC;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_2']")
	private static WebElement  grid_Header_CreditAC;



	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
	private static WebElement  firstRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
	private static WebElement  secondRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
	private static WebElement  thirdRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[1]")
	private static WebElement  fourthRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[1]")
	private static WebElement  fifthRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[1]")
	private static WebElement  sixthRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[1]")
	private static WebElement  seventhRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[1]")
	private static WebElement  eigthRowIndex;
	
	@FindBy(xpath="//span[@class='icon-delete icon-font8']")
	private static WebElement  deleteRowBtn;
	
	@FindBy(xpath="//span[@class='icon-insertrow icon-font8']")
	private static WebElement  insertRowBtn;
	
	@FindBy(xpath="//span[@class='icon-selectall icon-font8']")
	private static WebElement  selectRowBtn;
	
	@FindBy(xpath="//span[@class='icon-unselectall1 icon-font8']")
	private static WebElement  unSelectRowBtn;
	
	@FindBy(xpath="//span[@class='icon-clone icon-font8']")
	private static WebElement  duplicateRowBtn;

	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
	private static WebElement  select1stRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
	private static WebElement  select1stRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
	private static WebElement  select1stRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
	private static WebElement  select1stRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
	private static WebElement  select1stRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
	private static WebElement  select1stRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
	private static WebElement  select1stRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
	private static WebElement  select1stRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
	private static WebElement  select1stRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
	private static WebElement  select1stRow_10thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
	private static WebElement  select1stRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
	private static WebElement  select1stRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
	private static WebElement  select1stRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
	private static WebElement  select1stRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
	private static WebElement  select1stRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
	private static WebElement  select1stRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
	private static WebElement  select1stRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
	private static WebElement  select1stRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
	private static WebElement  select2ndRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
	private static WebElement  select2ndRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
	private static WebElement  select2ndRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
	private static WebElement  select2ndRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
	private static WebElement  select2ndRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
	private static WebElement  select2ndRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
	private static WebElement  select2ndRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
	private static WebElement  select2ndRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
	private static WebElement  select2ndRow_9thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
	private static WebElement  select2ndRow_11thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
	private static WebElement  select2ndRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
	private static WebElement  select2ndRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
	private static WebElement  select2ndRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
	private static WebElement  select2ndRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
	private static WebElement  select2ndRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
	private static WebElement  select2ndRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
	private static WebElement  select2ndRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
	private static WebElement  select2ndRow_19thColumn;

	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
	private static WebElement  select3rdRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
	private static WebElement  select3rdRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
	private static WebElement  select3rdRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
	private static WebElement  select3rdRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
	private static WebElement  select3rdRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
	private static WebElement  select3rdRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
	private static WebElement  select3rdRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
	private static WebElement  select3rdRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
	private static WebElement  select3rdRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
	private static WebElement  select3rdRow_10thColumn;

    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
	private static WebElement  select3rdRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
	private static WebElement  select3rdRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
	private static WebElement  select3rdRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
	private static WebElement  select3rdRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
	private static WebElement  select3rdRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
	private static WebElement  select3rdRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[18]")
	private static WebElement  select3rdRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[19]")
	private static WebElement  select3rdRow_18thColumn;




	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
	private static WebElement  select4thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
	private static WebElement  select4thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
	private static WebElement  select4thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
	private static WebElement  select4thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
	private static WebElement  select4thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
	private static WebElement  select4thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
	private static WebElement  select4thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
	private static WebElement  select4thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
	private static WebElement  select4thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
	private static WebElement  select4thRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
	private static WebElement  select4thRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
	private static WebElement  select4thRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
	private static WebElement  select4thRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
	private static WebElement  select4thRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
	private static WebElement  select4thRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
	private static WebElement  select4thRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[18]")
	private static WebElement  select4thRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[19]")
	private static WebElement  select4thRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[20]")
	private static WebElement  select4thRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[21]")
	private static WebElement  select4thRow_20thColumn;



	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
	private static WebElement  select5thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
	private static WebElement  select5thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
	private static WebElement  select5thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
	private static WebElement  select5thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
	private static WebElement  select5thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
	private static WebElement  select5thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
	private static WebElement  select5thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
	private static WebElement  select5thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
	private static WebElement  select5thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[11]")
	private static WebElement  select5thRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[12]")
	private static WebElement  select5thRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[13]")
	private static WebElement  select5thRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[14]")
	private static WebElement  select5thRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[15]")
	private static WebElement  select5thRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[16]")
	private static WebElement  select5thRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[17]")
	private static WebElement  select5thRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[18]")
	private static WebElement  select5thRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[19]")
	private static WebElement  select5thRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[20]")
	private static WebElement  select5thRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[21]")
	private static WebElement  select5thRow_20thColumn;




	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
	private static WebElement  select6thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
	private static WebElement  select6thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
	private static WebElement  select6thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
	private static WebElement  select6thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
	private static WebElement  select6thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
	private static WebElement  select6thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
	private static WebElement  select6thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
	private static WebElement  select6thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
	private static WebElement  select6thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[11]")
	private static WebElement  select6thRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[12]")
	private static WebElement  select6thRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[13]")
	private static WebElement  select6thRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[14]")
	private static WebElement  select6thRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[15]")
	private static WebElement  select6thRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[16]")
	private static WebElement  select6thRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[17]")
	private static WebElement  select6thRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[18]")
	private static WebElement  select6thRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[19]")
	private static WebElement  select6thRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[20]")
	private static WebElement  select6thRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[21]")
	private static WebElement  select6thRow_20thColumn;


	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
	private static WebElement  select7thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
	private static WebElement  select7thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
	private static WebElement  select7thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
	private static WebElement  select7thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
	private static WebElement  select7thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
	private static WebElement  select7thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
	private static WebElement  select7thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
	private static WebElement  select7thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
	private static WebElement  select7thRow_9thColumn;



	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
	private static WebElement  select8thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
	private static WebElement  select8thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
	private static WebElement  select8thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
	private static WebElement  select8thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
	private static WebElement  select8thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
	private static WebElement  select8thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
	private static WebElement  select8thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
	private static WebElement  select8thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
	private static WebElement  select8thRow_9thColumn;


	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
	private static WebElement  select9thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
	private static WebElement  select9thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
	private static WebElement  select9thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
	private static WebElement  select9thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
	private static WebElement  select9thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
	private static WebElement  select9thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
	private static WebElement  select9thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
	private static WebElement  select9thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
	private static WebElement  select9thRow_9thColumn;



	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
	private static WebElement  select10thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
	private static WebElement  select10thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
	private static WebElement  select10thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
	private static WebElement  select10thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
	private static WebElement  select10thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
	private static WebElement  select10thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
	private static WebElement  select10thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
	private static WebElement  select10thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
	private static WebElement  select10thRow_9thColumn;


	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
	private static WebElement  select11thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
	private static WebElement  select11thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
	private static WebElement  select11thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
	private static WebElement  select11thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
	private static WebElement  select11thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
	private static WebElement  select11thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
	private static WebElement  select11thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
	private static WebElement  select11thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
	private static WebElement  select11thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
	private static WebElement  select12thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
	private static WebElement  select12thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
	private static WebElement  select12thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
	private static WebElement  select12thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
	private static WebElement  select12thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
	private static WebElement  select12thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
	private static WebElement  select12thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
	private static WebElement  select12thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
	private static WebElement  select12thRow_9thColumn;

	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_AccountTxt;
	
	@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
	private static WebElement  enter_Account_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
	private static WebElement  enter_Account_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
		private static WebElement  enter_Account_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
		private static WebElement  enter_Account_Settings_StandardFieldsBtn;
								
					@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_Fielddropdown;
														
					@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_HeaderTxt;
													
					@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_Alignmentdropdown;
														
					@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_WidthTxt;
														
					@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_OkBtn;
														
					@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
					private static WebElement  enter_Account_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
		private static WebElement  enter_Account_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_Account_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_Account_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_16']")
	private static WebElement  enter_Amount;
	
	@FindBy(xpath="//textarea[@id='id_body_16777219']")
	private static WebElement  enter_Receipts_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777222']")
	private static WebElement  enter_Payments_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777225']")
	private static WebElement  enter_PettyCash_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777228']")
	private static WebElement  enter_PostDatedReceipts_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777231']")
	private static WebElement  enter_PostDatedPaymentss_Remarks;
	
	@FindBy(xpath="//input[@id='id_body_23']")
	private static WebElement  enter_ItemTxt;
	
	@FindBy(xpath="//*[@id='id_body_23_input_image']/span")
	private static WebElement  item_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_23_input_settings']/span")
	private static WebElement  item_SettingsBtn;

		@FindBy(xpath="//div[@id='id_body_23_customize_popup_container']")
		private static WebElement  item_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_body_23_customize_popup_footer']//input[1]")
		private static WebElement  item_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_list']")
			private static WebElement  item_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_header']")
			private static WebElement  item_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_alignment']")
			private static WebElement  item_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_width']")
			private static WebElement  item_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  item_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  item_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_body_23_search_container']//input[2]")
		private static WebElement  item_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  item_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  item_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_24']")
	private static WebElement  enter_UnitTxt;
	
	@FindBy(xpath="//*[@id='id_body_24_input_image']/span")
	private static WebElement  unit_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_24_input_settings']/span")
	private static WebElement  unit_SettingsBtn;

		@FindBy(xpath="//div[@id='id_body_24_customize_popup_container']")
		private static WebElement  unit_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_body_24_customize_popup_footer']//input[1]")
		private static WebElement  unit_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_list']")
			private static WebElement  unit_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_header']")
			private static WebElement  unit_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_alignment']")
			private static WebElement  unit_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_width']")
			private static WebElement  unit_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  unit_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  unit_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_body_24_search_container']//input[2]")
		private static WebElement  unit_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  unit_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  unit_Settings_CancelBtn;

			
	@FindBy(xpath="//input[@id='id_body_26']")
	private static WebElement  enter_Quantity;
	
	@FindBy(xpath="//input[@id='id_body_27']")
	private static WebElement  enter_Rate;
	
	@FindBy(xpath="//*[@id='id_body_28']")
	private static WebElement  enter_Gross;
	
	@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[2]/div[1]/div/div[2]/div[1]/div[1]/div[1]/div[3]/div[4]/div/table/tbody/tr[1]/td[14]/input")
	private static WebElement  enter_Discount;
	
	@FindBy(xpath="//input[@id='id_body_13']")
	private static WebElement  enter_Batch;
	
	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_DebitACTxt;
	
	@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
	private static WebElement  enter_DebitAC_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
	private static WebElement  enter_DebitAC_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
		private static WebElement  enter_DebitAC_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
		private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
		private static WebElement  enter_DebitAC_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_DebitAC_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_DebitAC_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_39']")
	private static WebElement  enter_CreditACTxt;
	
	@FindBy(xpath="//*[@id='id_body_39_input_image']/span")
	private static WebElement  enter_CreditAC_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_39_input_settings']/span")
	private static WebElement  enter_CreditAC_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_39_customize_popup_container']")
		private static WebElement  enter_CreditAC_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_39_customize_popup_footer']//input[1]")
		private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_list']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_header']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_alignment']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_width']")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_39_search_container']//input[2]")
		private static WebElement  enter_CreditAC_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_CreditAC_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_CreditAC_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_18']")
	private static WebElement  enter_DebitTxt;
	
	@FindBy(xpath="//input[@id='id_body_19']")
	private static WebElement  enter_CreditTxt;
	
	@FindBy(xpath="//textarea[@id='id_body_16777241']")
	private static WebElement  enter_NonStandardJournalEntries_RemarksTxt;
	
	@FindBy(xpath="//input[@id='id_body_87']")
	private static WebElement  enter_Warehouse2Txt;
	
	@FindBy(xpath="//*[@id='id_body_87_input_image']/span")
	private static WebElement  enter_Warehouse2_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_87_input_settings']/span")
	private static WebElement  enter_Warehouse2_SettingsBtn;

		@FindBy(xpath="//div[@id='id_header_87_customize_popup_container']")
		private static WebElement  enter_WareHouse2_Settings_Container;
								
		@FindBy(xpath="//div[@id='id_header_87_customize_popup_footer']//input[1]")
		private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn;
								
			@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_list']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;
												
			@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_header']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;
											
			@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_alignment']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;
												
			@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_width']")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;
												
			@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
			private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;
								
		@FindBy(xpath="//div[@id='id_header_87_search_container']//input[2]")
		private static WebElement  enter_WareHouse2_Settings_DeleteColumnBtn;
								
		@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
		private static WebElement  enter_WareHouse2_Settings_OkBtn;
						
		@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
		private static WebElement  enter_WareHouse2_Settings_CancelBtn;


	// Right Panel InfoSide Bar	
	@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
	private static WebElement  infoSideBarCustomizeBtn;


	@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[3]/span")
	private static WebElement  infoSideBarMinimizeExpandBtn;
		
		@FindBy(xpath="//li[@id='Trans_Dash_Save']//span[text()='Save']")
		private static WebElement  customizeSaveBtn;
		
		@FindBy(xpath="//span[@class='noWrap clsBlueColor'][contains(text(),'Cancel')]")
		private static WebElement  customizeCancelBtn;
		
		@FindBy(xpath="//input[@id='searchBoxTrans']")
		private static WebElement  customizeSearchTxt;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@class='icon-search searchicon']")
		private static WebElement  customizeSearchBtn;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='g']")
		private static WebElement  graphBtn;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='Newgraph']")
			private static WebElement  newGraphOption;
				
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='r']")
		private static WebElement  reportBtn;
			
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewReport']")
			private static WebElement  newReportOption;
					
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='i']")
		private static WebElement  infoPanelBtn;
					
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewInfopanel']")
			private static WebElement  newInfoPanelOption;
			
		@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//i[@id='w']")
		private static WebElement  workFlowBtn;
						
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewWorkflow']")
				private static WebElement  newWorkFlowOption;
						
		@FindBy(xpath="//a[@id='DocumentInfoOption']")
		private static WebElement  otherDashlets;
						
			@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
			private static WebElement  documentInfo;

	/*@FindBy(xpath="//span[contains(@class,'icon-left-and-right-panel-icon icon-font6 no_padding_left_right')]")
	private static WebElement  infoSideBarMinimizeExpandBtn;	*/	
			
	@FindBy(xpath="//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
	private static WebElement  infoSideBarExpandBtn;


	// Footer Section
	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
	private static WebElement  netLabel;
	
	@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
	private static WebElement  netAmount;


	
	//Navigation of Voucher Menus
	
	// Financial Menu and Sub Menus
	@FindBy(xpath="//span[@class='icon-financial icon-font1']")
	private static WebElement  finacinalsMenu;
	
		@FindBy(xpath="//a[@id='61']//span[contains(text(),'Transactions')]")
		private static WebElement  transactionsExpandBtn;
			
			@FindBy(xpath="//a[@id='2007']//span[contains(text(),'Purchases')]")
			private static WebElement  purchasesExpandBtn;
			
			@FindBy(xpath="//span[contains(text(),'Purchases Vouchers')]")
			private static WebElement  purchaseVouchersBtn;
			
    //Inventory Menu and Sub Menus		
	@FindBy(xpath="//div[contains(text(),'Inventory')]")
	private static WebElement  inventoryMenu; 
	
		@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
		private static WebElement  inventoryTransactionsMenu; 
			
			@FindBy(xpath="//*[@id='139']/span")
			private static WebElement  inventoryTransactionsPurchasesMenu; 
		
				@FindBy(xpath="//*[@id='2010']/span")
				private static WebElement  requestForQuoteVoucher;
				
				@FindBy(xpath="//*[@id='2011']/span")
				private static WebElement  purchasesQuotationsVoucher;
					
				@FindBy(xpath="//a[@id='2012']//span[contains(text(),'Purchases Orders')]")
				private static WebElement  purchasesOrdersVoucher;
			
				@FindBy(xpath="//*[@id='2013']/span")
				private static WebElement  materialReceiptNotesVoucher;
					
			@FindBy(xpath="//*[@id='140']/span")
			private static WebElement  inventoyTransactionsSalesMenu; 
				
				@FindBy(xpath="//*[@id='2018']/span")
				private static WebElement  salesQuotationsVoucher;
				
				@FindBy(xpath="//*[@id='2019']/span")
				private static WebElement  deliveryNotesVoucher;
				
				@FindBy(xpath="//*[@id='2022']/span")
				private static WebElement  posSalesVoucher;
				
				@FindBy(xpath="//*[@id='2045']/span")
				private static WebElement  productionOrdersVoucher;
				
				@FindBy(xpath="//*[@id='2017']/span")
				private static WebElement  salesOrdersVoucher;
							
			@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
			private static WebElement  inventoryTransactionsStocksMenu; 
				
				@FindBy(xpath="//*[@id='2034']/span")
				private static WebElement  shortagesInStockVoucher;
				
				@FindBy(xpath="//*[@id='2035']/span")
				private static WebElement  excessesInStocksVoucher;
					
				@FindBy(xpath="//*[@id='2036']/span")
				private static WebElement  stockTransfersVoucher;
				
				@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
				private static WebElement  openingStocksVoucher;
				
				@FindBy(xpath="//a[@id='2061']//span[contains(text(),'Opening Stock New')]")
				private static WebElement  openingStocksNewVoucher;
				
				@FindBy(xpath="//*[@id='2038']/span")
				private static WebElement  materialRequisitionVoucher;
						
				@FindBy(xpath="//*[@id='2049']/span")
				private static WebElement  stockAdjustmentVoucher;
					
			@FindBy(xpath="//*[@id='164']/span")
			private static WebElement  holdAndUnholdStockVoucher;
			
			@FindBy(xpath="//*[@id='93']/span")
			private static WebElement  stockReconciliation;
			
			@FindBy(xpath="//*[@id='99']/span")
			private static WebElement  stockAllocation;
		
			
    //Validation and Confirmation messages
	@FindBy(xpath="//div[@class='theme_color font-6']")
	public static WebElement errorMessage;
	 
	@FindBy(xpath="//span[@class='icon-reject2 theme_color']")
	public static WebElement errorMessageCloseBtn;
	
	//Dash board Page
	@FindBy(xpath="//*[@id='dashName']")
    private static WebElement labelDashboard ;
	
	@FindBy(xpath="//*[@id='Select_dash']")
	private static WebElement selectDashboard ;
		
	@FindBy(xpath="//*[@id='Dashboard_AddDash']")
    private static WebElement newAddDashBoard;
	 
    @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
    private static WebElement dashboardCustomizationSettings;
			
		   
		    
    //Vouchers Settings Options
	@FindBy(xpath="//span[@id='updateButton']")
	private static WebElement  updateBtn;
	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  settings_closeBtn;
					
		//Documents Tab
		@FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
		private static WebElement  documentsTab;
		
		@FindBy(xpath="//li[@id='navigationtab1']")
		private static WebElement  documentsTabForMaterialReceiptNotes;
		
		@FindBy(xpath="//span[@id='DocumentLoadMasterPopupBtn']")
		private static WebElement  loadMastersBtn;
			
			@FindBy(xpath="//select[@id='doc_voucherDropDown']")
			private static WebElement  loadmasterDropDown;
			
			@FindBy(xpath="//button[@id='btnSelectDependMaster']")
			private static WebElement  selectAllBtn;
			
			@FindBy(xpath="//button[contains(text(),'Reset')]")
			private static WebElement  resetBtn;
			
			@FindBy(xpath="//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
			private static WebElement  okBtn;
			
			@FindBy(xpath="//*[@id='editScreen_CustomizeButtons']/span[1]")
			private static WebElement  deleteTagBtn;
			
			@FindBy(xpath="//span[@id='DocumentAddGroupPopupBtn']")
			private static WebElement  addGroupBtn;
			
				@FindBy(xpath="//input[@id='doc_GroupName']")
				private static WebElement  groupNameTXt;
				
				@FindBy(xpath="//button[contains(text(),'Add')]")
				private static WebElement  addBtn;
				
				@FindBy(xpath="//div[@class='col-xs-12 form-group']//button[@id='btnCancel']")
				private static WebElement  cancelBtn;

			@FindBy(xpath="//div[@id='voucherTabContent']//span[2]")
			private static WebElement  deletegroupBtn;
			
			@FindBy(xpath="//input[@id='doc_title']")
			private static WebElement  titleTxt;
			
			@FindBy(xpath="//input[@id='doc_baseDocument']")
			private static WebElement  baseDocumentTxt;
			
			@FindBy(xpath="//input[@id='txtbox_doc_Accountdepandency']")
			private static WebElement  accountDependencyTxt;
			
				@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentGainAC')]")
				private static WebElement  iExchangeAdjustmentGainACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentLossAC')]")
				private static WebElement  iExchangeAdjustmentLossACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPrimaryAccount')]")
				private static WebElement  iPrimaryAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCity')]")
				private static WebElement  iCityChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDeliveryCity')]")
				private static WebElement  iDeliverycityChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iBankAc')]")
				private static WebElement  iBankACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPDCDiscountedAC')]")
				private static WebElement  iPDCDiscountedACChkBox;
						
			@FindBy(xpath="//input[@id='txtbox_doc_Productdepandency']")
			private static WebElement  itemDependencyTxt;
			
				@FindBy(xpath="//span[contains(text(),'Outlet__')]")
				private static WebElement  outletChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofShortageStockAC')]")
				private static WebElement  iCostofShortageStockACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofExcessStockAC')]")
				private static WebElement  iCostofExcessStockACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofSaleReturnAC')]")
				private static WebElement  iCostofSaleReturnACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPurchaseVarianceAC')]")
				private static WebElement  iPurchaseVarianceACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultBaseUnit')]")
				private static WebElement  iDefaultBaseUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultSalesUnit')]")
				private static WebElement  iDefaultSalesUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultPurchaseUnit')]")
				private static WebElement  iDefaultPurchaseUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostOfIssueAccount')]")
				private static WebElement  iCostOfIssueAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iStocksAccount')]")
				private static WebElement  iStocksAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iSalesAccount')]")
				private static WebElement  iSalesAccountChkBox;
				
				@FindBy(xpath="//li[12]//div[1]//label[1]//span[1]")
				private static WebElement  otherdetails1Box;
				
				@FindBy(xpath="//li[13]//div[1]//label[1]//span[1]")
				private static WebElement  replenishment1ChkBox;
				
				@FindBy(xpath="//span[contains(text(),'Reorder__')]")
				private static WebElement  reorderChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCategory')]")
				private static WebElement  iCategoryChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iWIPAccount')]")
				private static WebElement  iWIPAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'Classification__')]")
				private static WebElement  classificationChkBox;
				
				@FindBy(xpath="//li[18]//div[1]//label[1]//span[1]")
				private static WebElement  repelenishment2ChkBox;
				
				@FindBy(xpath="//li[19]//div[1]//label[1]//span[1]")
				private static WebElement  otherDetails2ChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iBin')]")
				private static WebElement  iBinChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iAlternateCategory')]")
				private static WebElement  iAlternateCategoryChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iTaxCode')]")
				private static WebElement  iTaxCodeChkBox;
			
			@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
			private static WebElement  accountfilterDropdown;
			
			@FindBy(xpath="//select[@id='doc_Itemdepandency_Filter']")
			private static WebElement  itemfilterDropdown;
			
			
			// Documents Tab Grid Elements
			
		    // first row 
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-0']")
			private static WebElement  firstrow;
			
			@FindBy(xpath="//div[contains(text(),'Delete Row')]")
			private static WebElement  doc_deleterowBtn;
			
			@FindBy(xpath="//div[contains(text(),'Insert Row')]")
			private static WebElement  doc_insertRowBtn;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
			private static WebElement  masters1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
			private static WebElement  position1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-3']")
			private static WebElement  showDependency1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-4']")
			private static WebElement  group1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-5']")
			private static WebElement  filter1;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_1-6']")
			private static WebElement  mandatory1;
			
			
			// Second Row // Delete and Insert row are same
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-0']")
			private static WebElement  secondRow;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
			private static WebElement  masters2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
			private static WebElement  position2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-3']")
			private static WebElement  showDependency2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-4']")
			private static WebElement  group2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-5']")
			private static WebElement  filter2;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_2-6']")
			private static WebElement  mandatory2;
			
			// After clicking // Properties Changes which are same for all rows
			
			@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
			private static WebElement  masterDropDown;
			
			@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
			private static WebElement  positionDropdown;
			
			@FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
			private static WebElement  showDependencyDropdown;
			
			@FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
			private static WebElement  groupTxt;
			
			@FindBy(xpath="//select[@id='docFilter']")
			private static WebElement  filterDropdown;
			
			@FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
			private static WebElement  mandatoryDropDown;
			
		    
	
			
	 //Views Tab
	@FindBy(xpath="//span[@class='icon-views'")
	private static WebElement  viewsTab;
		
	//Export Fields 
	@FindBy(xpath="//span[contains(text(),'Export Fields')]")
	private static WebElement exportFieldsTab;
		
	//Triggers
	@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
	private static WebElement  triggersTab;	
		
	//Document Numbering
	@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
	private static WebElement  documentNumberingTab;
		
	//Hire Purchase	
	@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
	private static WebElement hirePurchasetab;
		
	//Reports Tab	
	@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
	private static WebElement  reportsTab;	
	
	//Schemes
	@FindBy(xpath="//span[contains(text(),'Schemes')]")
	private static WebElement schemestab;	
	
	
	// Bin Inward Elements
	
		@FindBy (xpath="//input[@id='id_bins_totalquantity']")
		private static WebElement binTotalQty;
		
		@FindBy (xpath="//div[@class='modal-body']//div[4]")
		private static WebElement binBaseUOM;
		
		@FindBy (xpath="//input[@id='srch_bin']")
		private static WebElement binSearchTxt;
		
		@FindBy (xpath="//button[contains(text(),'Search')]")
		private static WebElement binSearchBtn; 
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
		private static WebElement  binselect1stRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
		private static WebElement  binselect1stRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
		private static WebElement  binselect1stRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
		private static WebElement  binselect1stRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
		private static WebElement  binselect1stRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
		private static WebElement  binselect1stRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
		private static WebElement  binselect1stRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
		private static WebElement  binselect1stRow_8thColumn;
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
		private static WebElement  binselect2ndRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
		private static WebElement  binselect2ndRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
		private static WebElement  binselect2ndRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
		private static WebElement  binselect2ndRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
		private static WebElement  binselect2ndRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
		private static WebElement  binselect2ndRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
		private static WebElement  binselect2ndRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
		private static WebElement  binselect2ndRow_8thColumn;
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
		private static WebElement  binselect3rdRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
		private static WebElement  binselect3rdRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
		private static WebElement  binselect3rdRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
		private static WebElement  binselect3rdRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
		private static WebElement  binselect3rdRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
		private static WebElement  binselect3rdRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
		private static WebElement  binselect3rdRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
		private static WebElement  binselect3rdRow_8thColumn;
		
		
		@FindBy(xpath="//span[@class='icon-sum']")
		private static WebElement  binRowSum;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[2]")
		private static WebElement  binRowSum_2ndColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[4]")
		private static WebElement  binSelect4htRow_3rdColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[6]")
		private static WebElement  binRowSum_4thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[7]")
		private static WebElement  binRowSum_5thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[8]")
		private static WebElement  binRowSum_6thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[9]")
		private static WebElement  binRowSum_7thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[12]")
		private static WebElement  binRowSum_8thColumn;
		
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
		private static WebElement  binSumInward;
		
		
		
		@FindBy (xpath="//input[@id='id_bins_balance']")
		private static WebElement binBalanceTxt;
		
		@FindBy (xpath="//div[@id='id_btnalternatecategorycheck']//div[@class='toolbar_button_image']")
		private static WebElement binAlternateCategoryCheckBtn;
		
		@FindBy (xpath="//div[@id='id_btnautoallocate']//div[@class='toolbar_button_image']")
		private static WebElement binAutoAllocateBtn;
		
		@FindBy (xpath="//span[@class='icon-pick icon-font4']")
		private static WebElement binPickBtn; 
		
		@FindBy (xpath="//div[@id='id_btnautoallocategroup']//div[@class='toolbar_button_image']")
		private static WebElement binAutoAllocateWithinGroupBtn;
		
		@FindBy (xpath="//div[@id='id_bins_ok']//span[@class='icon-ok icon-font6']")
		private static WebElement binOkBtn;
		
		@FindBy (xpath="//div[@class='col-xs-9 pull-right']//span[@class='icon-close icon-font6']")
		private static WebElement binCancelBtn;

		
		// RMA POpup Window
		@FindBy (xpath="//div[@id='Modal_Header']/div[1]")
		private static WebElement rmaScreenTitle;
		
		@FindBy (xpath="//input[@id='txtSerialNo']")
		private static WebElement rmaSerialNumberTxtField;

		@FindBy (xpath="//input[@id='txtQuantity']")
		private static WebElement rmaQuantityTxtField;
		
		@FindBy (xpath="//div[@id='img_add']//span")
		private static WebElement rmaAddBtn;
			
		@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
		private static WebElement rmaNumberofItemsLabel;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
		private static WebElement rmaTableHeadingRMA;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
		private static WebElement rmaTableHeadingDocumentNo;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
		private static WebElement rmaTableHeadingDocumentDate;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
		private static WebElement rmaClearBtn;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
		private static WebElement rmaOkBtn;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
		private static WebElement rmaCancelBtn;
		
		@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
		private static WebElement rmaCloseBtn;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
		private static WebElement rmaTableRow1Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
		private static WebElement rmaTableRow2Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
		private static WebElement rmaTableRow3Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
		private static WebElement rmaTableRow4Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
		private static WebElement rmaTableRow5Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
		private static WebElement rmaTableRow6Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
		private static WebElement rmaTableRow7Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
		private static WebElement rmaTableRow8Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
		private static WebElement rmaTableRow9Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
		private static WebElement rmaTableRow10Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
		private static WebElement rmaTableRow11Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
		private static WebElement rmaTableRow12Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
		private static WebElement rmaTableRow13Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
		private static WebElement rmaTableRow14Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
		private static WebElement rmaTableRow15Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
		private static WebElement rmaTableRow16Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
		private static WebElement rmaTableRow17Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
		private static WebElement rmaTableRow18Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
		private static WebElement rmaTableRow19Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
		private static WebElement rmaTableRow20Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
		private static WebElement rmaTableRow1Column2;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
		private static WebElement rmaTableRow1Column3;
		
		@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
		private static WebElement rmaExpansionBtn;
		
		
		//----------------------------------------------------------------------------------------------------------    
	    // Edit Screen Tab     
				    
	    @FindBy(xpath="//span[contains(text(),'Edit Screen')]")
	   	private static WebElement  editScreenTab; 
		
		@FindBy(xpath="//i[@class='icon-add icon-font7']")
		private static WebElement editScreenaddBtn;

		@FindBy(xpath="//a[contains(text(),'Field Details')]")
		private static WebElement editScreenFieldDetailsTab;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Caption']")
		private static WebElement  editScreenCaptionTxt;

		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_DataType']")
		private static WebElement  editScreenCaptionDataTypeDropdown;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_DefaultValue']")
		private static WebElement editScreenDefaultValueTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_noofDecimals']")
		private static WebElement editScreenNoOfDecimalsDropdown;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_toolTip']")
		private static WebElement editScreenToolTipTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_bannerText']")
		private static WebElement editScreenBannerTextTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MinValue']")
		private static WebElement editScreenMinimunValueTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MaxValue']")
		private static WebElement editScreenMaximunValueTxt;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_behaviour']")
		private static WebElement editScreenAddFieldsBehaviourDropdown;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_textbox']")
		private static WebElement  editScreenAddBehaviourformulaTxt;
		
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_Ok']")
		private static WebElement  editScreenAddBehaviourFormulaokBtn;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
		private static WebElement editScreenPreloadTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
		private static WebElement editScreenRestrictformulaTxt;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_RoundOff']")
		private static WebElement editScreenRoundOffsDropdown;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RoundOffTo']")
		private static WebElement editScreenRoundOffToTxt;
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RestrictMsg']")
		private static WebElement editScreenRestrictMessageTxt;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToNet']")
		private static WebElement editScreenAddToNetDropdown;
	   
		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToStock']")
		private static WebElement editScreenAddToStockDropDown;

		@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_Position']")
		private static WebElement editScreenpositionDropdown;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Columnwidth']")
		private static WebElement editScreenColumnWidthTxt;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
		private static WebElement editScreenValueInBaseCurrencyChkBox;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
		private static WebElement editScreenHideFromSummaryChkBox;  
	   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkPostToAcc']")
		private static WebElement editScreenPostToAccountChkBox;  
	 
		@FindBy(xpath="//input[@id='acc1-1']")
		private static WebElement editScreenAccount1Radio;  
				   
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1']")
		private static WebElement editScreenAccount1Txt;  
	   
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_image']/span")
		private static WebElement editScreenAccount1ExpandBtn;  
	   
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_settings']/span")
		private static WebElement editScreenAccount1SettingsBtn;  
				   
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_container']")
			private static WebElement editScreenAccount1Container;  
		    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_footer']//input[1]")
			private static WebElement editScreenAccount1StandardFiledsBtn;  
							    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_list']")
				private static WebElement editScreenAccount1StandardFiledsDropdown;  
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_header']")
				private static WebElement editScreenAccount1StandardFiledsHeaderTxt;  
			    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_alignment']")
				private static WebElement editScreenAccount1StandardFiledsAllignmentDropdown; 
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_width']")
				private static WebElement editScreenAccount1StandardFiledsWidthTxt;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
				private static WebElement editScreenAccount1StandardFiledsokBtn;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[4]")
				private static WebElement editScreenAccount1StandardFiledscancelBtn;  
							    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_search_container']//input[2]")
			private static WebElement editScreenAccount1deleteColumnBtn;
		    
		    @FindBy(xpath="//section[@id='page_Content']//input[3]")
		   	private static WebElement editScreenAccount1okBtn;  
		       
		    @FindBy(xpath="//section[@id='page_Content']//input[4]")
		   	private static WebElement editScreenAccount1cancelBtn;
				
		@FindBy(xpath="//input[@id='acc2-2']")
		private static WebElement editScreenAccount2Radio;  
		    
		@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2']")
		private static WebElement editScreenAccount2Txt;  
		    
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_image']/span")
		private static WebElement editScreenAccount2ExpandBtn;
	  
	    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_settings']/span")
	  	private static WebElement editScreenAccount2SettingsBtn;  
				      
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_container']")
			private static WebElement editScreenAccount2Container;  
		    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_footer']//input[1]")
			private static WebElement editScreenAccount2StandardFiledsBtn;  
				  			    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_list']")
				private static WebElement editScreenAccount2StandardFiledsDropdown;  
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_header']")
				private static WebElement editScreenAccount2StandardFiledsHeaderTxt;  
			    
			    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_alignment']")
				private static WebElement editScreenAccount2StandardFiledsAllignmentDropdown; 
			    
			    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_width']")
				private static WebElement editScreenAccount2StandardFiledsWidthTxt;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
				private static WebElement editScreenAccount2StandardFiledsokBtn;  
			    
			    @FindBy(xpath="//section[@id='page_Content']//input[4]")
				private static WebElement editScreenAccount2StandardFiledscancelBtn;  
				  			    
		    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_search_container']//input[2]")
			private static WebElement editScreenAccount2deleteColumnBtn;
		    
		    @FindBy(xpath="//section[@id='page_Content']//input[3]")
		   	private static WebElement editScreenAccount2okBtn;  
		       
		       @FindBy(xpath="//section[@id='page_Content']//input[4]")
		   	private static WebElement editScreenAccount2cancelBtn;
	   
	   @FindBy(xpath="//input[@id='acc1-3']")
	   private static WebElement editScreenAccount1VariableRadio; 
	  
	   @FindBy(xpath="//input[@id='Account_1Var']")
	   private static WebElement editScreenAccount1VariableTxt;
	   
	   @FindBy(xpath="//input[@id='acc2-4']")
	   private static WebElement editScreenAccount2VariableRadio; 
	  
	   @FindBy(xpath="//input[@id='Account_2Var']")
	   private static WebElement editScreenAccount2VariableTxt;
	   
	   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RegularExpr']")
	   private static WebElement editScreenRegularExpTxt; 
	   
	   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_ErrorMsg']")
	   private static WebElement editScreenerrorMessageTxt; 

	 // properties  
	   
	  @FindBy(xpath="//a[contains(text(),'Properties')]")
	  private static WebElement editScreenPropertiesTab;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkAuditTrail']")
	  private static WebElement editScreenauditTrailChkBox;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantExprt']")
	  private static WebElement editScreencantExportChkBox;  
	  
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantImprt']")
	  private static WebElement editScreencantImportChkbox; 
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkHidden']")
	  private static WebElement editScreenhiddenChkbox;  
	  
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkMandatory']")
	  private static WebElement editScreenmandatorychkBox; 
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkNotAvailForReports']")
	  private static WebElement editScreennotAvailableForReportsChkBox;  
	     
	  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkReadOnly']")
	  private static WebElement editScreenreadOnlyChkBox;  
	 
	     
	  @FindBy(xpath="//span[contains(text(),'Apply')]")
	  private static WebElement editScreenApplyBtn;  
	     
	  @FindBy(xpath="//span[@id='editScreen_FieldsCustomization_Close']")
	  private static WebElement editScreencloseBtn;  
	  

	 
	  @FindBy(xpath="//a[@href='#editScreen_FieldsCustomization_ExternalModules']")
	  private static WebElement editScreenExternalModulesTab; 
				
		// External Module Tab is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
	    // External Functions(External Fields) Changes From Screen to Screen
	
		// Formatting Tab
				  
	    @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_tabs']/li[3]/a")
	    private static WebElement editScreenformattingTab;

		@FindBy(xpath="//*[@id='fontFamily_editScreen_FieldsCustomization_FontCtrl']")
	    private static WebElement editScreenFontFamilyDropdown;
		
	    @FindBy(xpath="//*[@id='fontStyle_editScreen_FieldsCustomization_FontCtrl']")
	    private static WebElement editScreenFontStyleDropdown;

	    @FindBy(xpath="//*[@id='fontWeight_editScreen_FieldsCustomization_FontCtrl']")
	    private static WebElement editScreenFontWeightDropdown;

		@FindBy(xpath="//*[@id='fontSizes_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenFontSizeDropdown;
		
		@FindBy(xpath="//*[@id='fontForeColor_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenForeColourDropdown;
		
		@FindBy(xpath="//*[@id='fontBackColor_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenBackColourDropdown;
		
		@FindBy(xpath="//*[@id='chkBaseline_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenBaseLineCheckbox;
		
		@FindBy(xpath="//*[@id='chkOverLine_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenOverLineCheckbox;
		
		@FindBy(xpath="//*[@id='chkStrikeThrough_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement EditScreenStrikeThroughCheckbox;
		
		@FindBy(xpath="//*[@id='chkUnderline_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenUnderlineCheckbox;
		
		@FindBy(xpath="//*[@id='previewfont_editScreen_FieldsCustomization_FontCtrl']")
		private static WebElement editScreenFontPreviewTxt;
		
		@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Formatting_chkenableFont']")
		private static WebElement editScreenenableFontChkbox;
				
		  @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
		  private static WebElement editScreenLoadFieldsBtn;  
		     
		  @FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
		  private static WebElement editScreenLoadFieldsDropdown;  
		     
		  @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[1]")
		  private static WebElement editScreenselectAllBtn;  
		  
		  @FindBy(xpath="//div[@id='editScreen_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
		  private static WebElement editScreenokBtn;  
		     
		  @FindBy(xpath="//input[@id='searchlayout2']")
		  private static WebElement editScreenSearchTxt;  
		     
		  @FindBy(xpath="//button[@id='btnEditScreenPrev']")
		  private static WebElement editScreenPreviousBtn;  
		     
		  @FindBy(xpath="//button[@id='btnEditScreenNext']")
		  private static WebElement editScreenNextBtn;  
		  
		  @FindBy(xpath="//*[@id='editScreen_tabContent']/label")
			private static WebElement editScreenRatePreloadLabel;
		  
		  @FindBy(xpath="//select[@id='cmbBehaviour']")
		  private static WebElement editScreenBehaviourDropdown;
		  
		  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
		  private static WebElement editScreenQuantityPreloadedTxt;
		  	  
		  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
		  private static WebElement  formulaTxt;
			
		  @FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_expandedFormula']")
		  private static WebElement  expandeFormula;
					
	     // Grid Elements 
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_1-2']//span[@class='icon-collepse icon-font8']")
		private static WebElement  editScreenTransactionExpandBtn;
				
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-2']")
			private static WebElement  editScreenQuantity;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-3']")
			private static WebElement  editScreenqty;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-2']")
			private static WebElement  editScreenRate;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-3']")
			private static WebElement  editScreenrt;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-2']")
			private static WebElement  editScreenAlternateQty;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-3']")
			private static WebElement  editScreenqtya;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-2']")
			private static WebElement  editScreengrossAmount;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-3']")
			private static WebElement  editScreengr;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-2']")
			private static WebElement  editScreenStockValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-3']")
			private static WebElement  editScreenstkv;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-2']")
			private static WebElement  editScreenAccount;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-3']")
			private static WebElement  EditScreenacc;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-2']")
			private static WebElement  editScreenAccount2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-3']")
			private static WebElement  editScreenacc2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-2']")
			private static WebElement  editScreenExchangeRate;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-3']")
			private static WebElement  editScreenexrt;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-2']")
			private static WebElement  editScreenqtyinBaseUnit;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-3']")
			private static WebElement  editScreenqtyb;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-2']")
			private static WebElement  editScreenCurrency;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-3']")
			private static WebElement  editScreencrn;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-2']")
			private static WebElement  editScreenValueOfThetagMasterIDofTheTag;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-3']")
			private static WebElement  editScreentgval;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-2']")
			private static WebElement  editScreenNetAmount;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-3']")
			private static WebElement  EditScreennet;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-2']")
			private static WebElement  editScreenNetAmountInOriginalCurrency;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-3']")
			private static WebElement  editScreenneto;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-2']")
			private static WebElement  editScreenTotalQuantity;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-3']")
			private static WebElement  editScreentqty;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-2']")
			private static WebElement  editScreenTotalGross;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-3']")
			private static WebElement  editScreentgr;
							
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_17-2']//span[@class='icon-expand icon-font8']")
		private static WebElement  screenFiledExpandBtn;
				
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-2']")
			private static WebElement  mrnQtyInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-3']")
			private static WebElement  sb1;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-2']")
			private static WebElement  mrnQtyCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-3']")
			private static WebElement  sbo1;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-2']")
			private static WebElement  qtyBalancedInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-3']")
			private static WebElement  sb2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-2']")
			private static WebElement  qtyCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-3']")
			private static WebElement  sbO2;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-2']")
			private static WebElement  averagerateInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-3']")
			private static WebElement  sb3;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-2']")
			private static WebElement  avreageRateCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-3']")
			private static WebElement  sbO3;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-2']")
			private static WebElement  addValueInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-3']")
			private static WebElement  sb4;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-2']")
			private static WebElement  addValueInputCalculatedValue;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-3']")
			private static WebElement  sbO4;
				
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_26-2']//span[@class='icon-collepse icon-font8']")
		private static WebElement  layoutFieldExpandBtn;
		
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-2']")
			private static WebElement  appropriateBasedOnInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-3']")
			private static WebElement  lh0;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-2']")
			private static WebElement  additionalValueInput;
			
			@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-3']")
			private static WebElement  lh1;
							
	    //Grid Completed
		
		@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
		private static WebElement  editScreenqtyFormulaSearchTxt;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_PlusOpt']")
		private static WebElement  editScreenqtyPlusBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'-')]")
		private static WebElement  editScreenqtyMinusBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[3]")
		private static WebElement  editScreenqtyDivideBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'*')]")
		private static WebElement  editScreenqtyMultiplyBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[5]")
		private static WebElement  editScreenqtyBrackets1Btn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[6]")
		private static WebElement  editScreenqtyBrackets2Btn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'~')]")
		private static WebElement  editScreenqtyTildeBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'&')]")
		private static WebElement  editScreenqtyAndBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'%')]")
		private static WebElement  editScreenqtyPercentBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//div[@id='operationButtons']//button[@class='btn btn-link'][contains(text(),']')]")
		private static WebElement  editScreenqtySquarebracketBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'|')]")
		private static WebElement  editScreenqtyVerticalBarBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'\')]")
		private static WebElement  editScreenqtyBackSlashBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'<')]")
		private static WebElement  editScreenqtyLessThanbtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'>')]")
		private static WebElement  editScreenqtyGreaterThanBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
		private static WebElement  editScreenqtyExclamationBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
		private static WebElement  editScreenqtyEqualBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'?:')]")
		private static WebElement  editScreenqtyQuestionBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'^')]")
		private static WebElement  editScreenqtyCaretBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'DateDiff()')]")
		private static WebElement  editScreenqtyDateDiffBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Cond()')]")
		private static WebElement  editScreenqtyCondBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Min()')]")
		private static WebElement  editScreenqtyMinBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Max()')]")
		private static WebElement  editScreenqtyMaxBtn;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
		private static WebElement  editScreenqtyConditionokBtn;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
		private static WebElement  editScreenqtyConditioncancelBtn;
				
				
		@FindBy(xpath="//*[@id='editScreen_qtyFormula_textbox']")
		private static WebElement  editScreenformulaTxt;
		
		
		// CustomizeGrid
		
		@FindBy(xpath="//i[@class='icon-custamize icon-font7']")
		private static WebElement editScreencustomizeGridBtn;  
		  
		@FindBy(xpath="//span[contains(text(),'Apportion')")
		private static WebElement editScreenApportionBtn;
		     
		@FindBy(xpath="//span[contains(text(),'Audit Trial')]")
		private static WebElement editScreenAuditTrialBtn;  
		    
		@FindBy(xpath="//span[contains(text(),'Back color')]")
		private static WebElement editScreenbackColorBtn;  
		     
		@FindBy(xpath="//span[contains(text(),'Banner text')]")
		private static WebElement editScreenbannerTextBtn;  
		 
		  @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
		  private static WebElement editScreencannotBeExportedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
		  private static WebElement editScreencannotBeImportedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Column Span')]")
		  private static WebElement editScreencolumnSpanBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
		  private static WebElement editScreencopyFromParentBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'DataType')]")
		  private static WebElement editScreendataTypeBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Default Value')]")
		  private static WebElement editScreenDefaultValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Error message')]")
		  private static WebElement editScreenerrorMessageBtn;  
		 
		  @FindBy(xpath="//span[contains(text(),'External module attached')]")
		  private static WebElement editScreenExternalModuleAttachedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Field Order')]")
		  private static WebElement editScreenFilterOrderBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Font')]")
		  private static WebElement editScreenFontBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Group Name')]")
		  private static WebElement editScreengroupNameBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
		  private static WebElement editScreenHideLeftPanelBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Information Field')]")
		  private static WebElement editScreenInformationFieldBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Mandatory')]")
		  private static WebElement editScreenMandatoryBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Mass Update')]")
		  private static WebElement editScreenMassupdateBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
		  private static WebElement editScreenMaximumValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Merge Field')]")
		  private static WebElement editScreenMergerFieldBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
		  private static WebElement editScreenMinimumValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'No Of Decimals')]")
		  private static WebElement editScreenNoOfDecimalsBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
		  private static WebElement editScreenNotAvailableForReportsBtn; 
		     
		  @FindBy(xpath="//span[contains(text(),'Read Only')]")
		  private static WebElement editScreenReadOnlyBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Regular expression')]")
		  private static WebElement editScreenRegularExpressionBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Restrict formula')]")
		  private static WebElement editScreenRestrictFormulaBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Restrict Message')]")
		  private static WebElement editScreenRestrictMessageBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Round Offs')]")
		  private static WebElement editScreenRoundsOffsBtn;  
		
		  @FindBy(xpath="//span[contains(text(),'Row Span')]")
		  private static WebElement editScreenRowSpanBtn; 
		     
		  @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
		  private static WebElement editScreenRuleAttachedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Tooltip')]")
		  private static WebElement editScreenToolTipBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Variable name')]")
		  private static WebElement editScreenVariableNameBtn;  
		 
		  
		  
		  
		
		 // Body Tab 
		  
		  @FindBy(xpath="//a[contains(text(),'Body')]")
		  private static WebElement  editScreenBodyTab; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody1stRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody1stRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody2ndRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody2ndRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody3rdRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody3rdRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody4thRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody4thRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody5thRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody5thRowDeleteBtn;
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenBody6thRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_6 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenBody6thRowDeleteBtn;
		  
		  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-up-arrow Fbutton']")
		  private static WebElement  editScreenBodyUpArrowBtn; 
		
		  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-down-arrow Fbutton']")
		  private static WebElement  editScreenBodyDownArrowBtn;
						
		  // Footer Tab
		  
		  @FindBy(xpath="//a[contains(text(),'Footer')]")
		  private static WebElement  editScreenFooterTab;  
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenFooter1stRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenFooter1stRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='editIcon']")
		  private static WebElement  editScreenFooter2ndRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='deleteIcon']")
		  private static WebElement  editScreenFooter2ndRowDeleteBtn; 
		  
		  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-up-arrow Fbutton']")
		  private static WebElement  editScreenFooterUpArrowBtn; 
		
		  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-down-arrow Fbutton']")
		  private static WebElement  editScreenFooterDownArrowBtn; 
		  
		  	@FindBy(xpath="//label[contains(text(),'Quantity preloaded')]")
			private static WebElement qtyPreloadedLabel;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
			private static WebElement qtyPreloadedTxt;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
			private static WebElement qtyPreloadedformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
			private static WebElement qtyPreloadedFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
			private static WebElement qtyPreloadedFormulaokBtn;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
			private static WebElement qtyPreloadedFormulacancelBtn;


			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[1]/label/span")
			private static WebElement editScreenLoadFields1stChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[2]/label/span")
			private static WebElement editScreenLoadFields2ndChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[3]/label/span")
			private static WebElement editScreenLoadFields3rdChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[4]/label/span")
			private static WebElement editScreenLoadFields4thChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[5]/label/span")
			private static WebElement editScreenLoadFields5hChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[6]/label/span")
			private static WebElement editScreenLoadFields6thChkBox;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_formulaText']")
			private static WebElement  preloadformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_availableVariables']")
			private static WebElement  preloadFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
			private static WebElement  preloadFormulaokBtn;
				
			@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Cancel']")
			private static WebElement  preloadFormulacancelBtn;
			
			
			@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
			private static WebElement  editScreenFooter1stRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
			private static WebElement  editScreenFooter2ndRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _3']")
			private static WebElement  editScreenbody1stRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _3']")
			private static WebElement  editScreenbody2ndRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _3']")
			private static WebElement  editScreenbody3rdRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _3']")
			private static WebElement  editScreenbody4thRowCaption;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _3']")
			private static WebElement  editScreenbody5thRowCaption;
			
			
			
			// Add To Stock Status
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_1 _14']")
			private static WebElement  editScreenbody1stRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_2 _14']")
			private static WebElement  editScreenbody2ndRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _14']")
			private static WebElement  editScreenbody3rdRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _14']")
			private static WebElement  editScreenbody4thRowAddtoStock;
			
			@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _14']")
			private static WebElement  editScreenbody5thRowAddtoStock;			
			
		// Suspend Status Of Entry Page
		@FindBy(xpath="//tr[1]//td[11]")
		private static WebElement suspendStatusRow1;
	
	//User Name Display
	@FindBy(xpath="//span[@class='hidden-xs']")
	private static WebElement userNameDisplay;

    
   /* @FindBy(xpath="//*[@id='mainHeader_MainLayout']/nav/div/ul/li[7]/a/span")
	private static WebElement userNameDisplay;*/

	@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
	private static WebElement companyName;

	@FindBy(xpath="//*[@id='companyLogo']")
	private static WebElement companyLogo;

    @FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
	private static WebElement noIn;
    
    @FindBy(xpath="//input[@id='donotshow']")
	private static WebElement doNotShowCheckbox;
    
    @FindBy(xpath="//span[@class='pull-right']")
	private static WebElement closeBtnInDemoPopupScreen;
    
    
    // Inentory Menu 
    
    @FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
    private static WebElement  invTransactionsMenu; 
    
    @FindBy(xpath="//a[@id='139']//span[contains(text(),'Purchases')]")
    private static WebElement  invTransPurchasesMenu; 
    
    @FindBy(xpath="//a[@id='140']//span[contains(text(),'Sales')]")
    private static WebElement  invTransSalesMenu; 
    
    @FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
    private static WebElement  invTransStocksMenu; 
    
    @FindBy(xpath="//a[@id='200']//span[contains(text(),'Reports')]")
	private static WebElement  inventoryReportsMenu; 
    
	@FindBy(xpath="//span[contains(text(),'Order Management')]")
	private static WebElement  orderManagementMenu; 
	
	// Home Menu
	@FindBy(xpath = "//*[@id='1']/div/span")
	public static WebElement homeMenu;

	//Financial Menu
	@FindBy (xpath="//span[@class='icon-financial icon-font1']")
	private static WebElement financialMenu;
	
	//Fixed Assets Menu
	@FindBy (xpath="//span[@class='icon-assets icon-font1']")
	private static WebElement fixedAssetsMenu;
	
	//Production Menu
	@FindBy (xpath="//span[@class='icon-production icon-font1']")
	private static WebElement productionMenu;
	
	@FindBy(xpath="//*[@id='3001']/span")
	private static WebElement  productionTransactionsMenu; 

		@FindBy(xpath="//*[@id='206']/span")
		private static WebElement  billofMaterial; 
	
		@FindBy(xpath="//*[@id='2040']/span")
		private static WebElement  issuestoProduction; 
		
		@FindBy(xpath="//*[@id='2047']/span")
		private static WebElement  jobOrder; 
	
	//Point Of Sale Menu
	@FindBy (xpath="//div[contains(text(),'Point of Sale')]")
	private static WebElement pointOfSaleMenu;
	
	//Quality Of Control Menu
	@FindBy (xpath="//span[@class='icon-quotationanalysis icon-font1']")
	private static WebElement qualityControlMenu;
	
	//Settings Menu
	@FindBy (xpath="//span[@class='icon-settings icon-font1']")
	private static WebElement SettingsMenu;
	
	
	// Login Page
	@FindBy(xpath = "//*[@id='txtUsername']")
	private static WebElement username;
	

		
	private static String xlfile;
	private static String resPass="Pass";
	private static String resFail="Fail";
	private static ExcelReader excelReader;
	
	private static String xlSheetName = "SmokeVouchers";
	
	private static boolean Status;

	private String expOsVoucherGrossR4;
	
	

  public boolean checkLoadingMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
		String actVoucherLoadingMessage=errorMessage.getText();
		String expVoucherLoadingMessage="Voucher loaded successfully";
	
			
		System.out.println("VoucherLoadingMessage  : " + actVoucherLoadingMessage + " Value Expected : " + expVoucherLoadingMessage);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();

		if(actVoucherLoadingMessage.contains(expVoucherLoadingMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	catch(Exception e)
	{
		System.err.println("UNABLE TO COMPARE");
		return false;
	}
  }
	
	
	
	
  public boolean checkVoucherSavingMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		String expErrorMessage="Voucher saved successfully";
		String expErrorMessage1=": "+docno;
		
		System.out.println("SavingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage+" "+expErrorMessage1);
		
		if(actErrorMessage.startsWith(expErrorMessage) && actErrorMessage.endsWith(expErrorMessage1))
		{
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				
				return  true;
			}
			catch(Exception ee)
			{
				return true;
			}	
		}
		else
		{
			return false;
		}	
	}
	catch(Exception e)
	{
		System.err.println("UNABLE TO COMPARE");
		return false;
	}
  }
	
	
	
  public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		String expErrorMessage=ExpMessage;
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
			
			return actErrorMessage;
		}
		catch(Exception ee)
		{
			
			System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
			
			return actErrorMessage;
		}
	}
	catch(Exception e)
	{
		System.err.println("Error Message NOT Found or NOT Clickable");
		System.err.println(e.getMessage());
                
		String Exception=e.getMessage();
		
		return Exception;	
	} 
  }	
		

  public static void checkUserFriendlyMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		
		System.out.println("Open Page then Message Display  :  " + actErrorMessage);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();
		
		/*try
		{	
			System.out.println("In Try Block Validation Message  :  " + actErrorMessage);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
		}
		catch(Exception ee)
		{
			System.out.println("In Catch Block Validation Message  :  " + actErrorMessage);	
		}*/
	}
	catch(Exception e)
	{
		System.err.println("Error Message NOT Found or NOT Clickable");
		System.err.println(e.getMessage());
		
		String Exception=e.getMessage();
	}
  }
	
	
	
	
  public boolean checkEntryPageDeleteMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
  {
	getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
	String actErrorMessage=errorMessage.getText();
	String expErrorMessage="Voucher deleted Successfully";
	
	System.out.println("DeletingMessage  :  " + actErrorMessage + " Value Expected : " + expErrorMessage);
	
	if(actErrorMessage.equalsIgnoreCase(expErrorMessage))
	{
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			return  true;
		}
		catch(Exception ee)
		{
			return true;
		}
	}
	else
	{
		return false;
	}
  }

	
	
	
		 
	public static void checkPopUpWindow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 //Thread.sleep(5000);
	      
		 try 
		 {
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
			 doNotShowCheckbox.click();
			 
			 //Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDemoPopupScreen));
			 closeBtnInDemoPopupScreen.click(); 
			 
			 System.err.println("POP UP DISPLAYED AND CLOSED SUCCESSFULLY");	 
		 } 
		 catch (Exception e)
		 {
			 System.err.println("NO POP UP DISPLAYED");
		 }	
	
		 Thread.sleep(4000);
	}
			 


	@FindBy(xpath="//button[contains(text(),'Ok')]")
	private static WebElement loginRefreshOkBtn;
	
	public static void checkRefreshPopOnlogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		try 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginRefreshOkBtn));
			loginRefreshOkBtn.click();
		} 
		catch (Exception e)
		{
			System.err.println("Exception : "+e.getMessage());
			System.err.println("NO ALERT POP UP DISPLAYED");
		}
		
		Thread.sleep(4000);
	}

	
	@FindBy(xpath = "//ul[@id='navigation_menu']/li/a/div/div")
	private static List<WebElement> menusList;
	
	@FindBy(xpath = "//ul[@id='navigation_menu']/li[3]/ul/li/a/span")
	private static List<WebElement> inventoryMenusList;
	
	@FindBy(xpath = "//ul[@id='navigation_menu']/li[3]/ul/li[1]/ul/li/a/span")
	private static List<WebElement> inventoryTransactionsMenusList;
	
	@FindBy(xpath = "//ul[@id='navigation_menu']/li[3]/ul/li[1]/ul/li[3]/ul/li/a/span")
	private static List<WebElement> inventoryTransactionsStocksMenusList;
	
	@FindBy(xpath = "//*[@id='dv_TranHomeHeading']/nav/div[2]/div/div/div[2]")
	private static List<WebElement> openingStocksNewToolBarButtons;
	
	private static int cSize; 
	
	
  public boolean checkSignInDemoPopupPageOnClickDoNotShowAndCloseToDisplayMenusAndHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
  {
	excelReader = new ExcelReader(POJOUtility.getExcelPath());
	xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	   
	try
	{  
		
		 getDriver().navigate().refresh();
 		 Thread.sleep(1999);
 		 
 		 getDriver().navigate().refresh();
 		 Thread.sleep(1999);
 		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
    	 
		LoginPage lp                          = new LoginPage(getDriver());
      
        String unamelt                        = excelReader.getCellData(xlSheetName, 7, 6);
        String pawslt                         = excelReader.getCellData(xlSheetName, 8, 6);
		
		LoginPage.enterUserName(unamelt);
		LoginPage.enterPassword(pawslt);
		
		String compname="Automation Company";
	 	
		 Select oSelect = new Select(companyDropDownList);
		 
		 List <WebElement> elementCount = oSelect.getOptions();
		
		 int cqSize = elementCount.size();
		 
		 int zqSize=cSize+1;
		 
		 System.out.println("CompanyDropdownList Count :"+cqSize);
		 
		 System.out.println("Company dropdown is :"+ zqSize);
	 
	 
	 //Select dropdown= new Select(lp.companyDropDownList);
	  int i;
	  
	  //List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
		
		  elementCount.get(i).getText();
	  String optionName = elementCount.get(i).getText();
	  if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
	  {
		  System.out.println("q"+elementCount.get(i).getText());
		  elementCount.get(i).click();
		  
	  }
  
  }
		
		LoginPage.clickOnSignInBtn();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		
		boolean actHomeMenuIsDisplay           = homeMenu.isDisplayed();
		boolean actFinancialMenuIsDisplay      = financialMenu.isDisplayed();
		boolean actInventoryMenuIsDisplay      = inventoryMenu.isDisplayed();
		boolean actFixedAssetsMenuIsDisplay    = fixedAssetsMenu.isDisplayed();
		boolean actProductionMenuIsDisplay     = productionMenu.isDisplayed();
		boolean actPointOfSaleMenuIsDisplay    = pointOfSaleMenu.isDisplayed();
		boolean actQualityControlMenuIsDisplay = qualityControlMenu.isDisplayed();
		boolean actSettingsMenuIsDisplay       = SettingsMenu.isDisplayed();
		
		boolean expHomeMenuIsDisplay           = true;
		boolean expFinancialMenuIsDisplay      = true;
		boolean expInventoryMenuIsDisplay      = true;
		boolean expFixedAssetsMenuIsDisplay    = true;
		boolean expProductionMenuIsDisplay     = true;
		boolean expPointOfSaleMenuIsDisplay    = true;
		boolean expQualityControlMenuIsDisplay = true;
		boolean expSettingsMenuIsDisplay       = true;
		
		System.out.println("Home Menu Display Value Actual            : " + actHomeMenuIsDisplay +           " Value Expected : " + expHomeMenuIsDisplay);
		System.out.println("Financial Menu Display Value Actual       : " + actFinancialMenuIsDisplay +      " Value Expected : " + expFinancialMenuIsDisplay);
		System.out.println("Inventory Menu Display Value Actual       : " + actInventoryMenuIsDisplay +      " Value Expected : " + expInventoryMenuIsDisplay);
		System.out.println("Fixed Assets Menu Display Value Actual    : " + actFixedAssetsMenuIsDisplay +    " Value Expected : " + expFixedAssetsMenuIsDisplay);
		System.out.println("Production Menu Display Value Actual      : " + actProductionMenuIsDisplay +     " Value Expected : " + expProductionMenuIsDisplay);
		System.out.println("Point Of Sale Menu Display Value Actual   : " + actPointOfSaleMenuIsDisplay +    " Value Expected : " + expPointOfSaleMenuIsDisplay);
		System.out.println("Quality Control Menu Display Value Actual : " + actQualityControlMenuIsDisplay + " Value Expected : " + expQualityControlMenuIsDisplay);
		System.out.println("Settings Menu Display Value Actual        : " + actSettingsMenuIsDisplay +       " Value Expected : " + expSettingsMenuIsDisplay);
	
		boolean actMethod = actHomeMenuIsDisplay==actHomeMenuIsDisplay && actFinancialMenuIsDisplay==actFinancialMenuIsDisplay
				&& actInventoryMenuIsDisplay==actInventoryMenuIsDisplay && actFixedAssetsMenuIsDisplay==actFixedAssetsMenuIsDisplay
				&& actProductionMenuIsDisplay==actProductionMenuIsDisplay && actPointOfSaleMenuIsDisplay==actPointOfSaleMenuIsDisplay
				&& actQualityControlMenuIsDisplay==actQualityControlMenuIsDisplay && actSettingsMenuIsDisplay==actSettingsMenuIsDisplay;

		String actDisplayingResult =Boolean.toString(actMethod);
		String elementsIsDisplay = actDisplayingResult.toUpperCase();
		excelReader.setCellData(xlfile, xlSheetName, 7, 8, elementsIsDisplay);
		
		int actCount					         = menusList.size();
		ArrayList<String> actMenusArray          = new ArrayList<String>();
		
		for (int j = 0; j < actCount; j++) 
		{
			String data                          = menusList.get(j).getText();
			actMenusArray.add(data);
		}

		String actMenus 					     = actMenusArray.toString();
		String expMenus					         = excelReader.getCellData(xlSheetName, 8, 7);
		
		System.out.println("Menu Names Text Display Value Actual             : " + actMenus);
		System.out.println("Menus Names Text Display Value Expected          : " + expMenus);
		excelReader.setCellData(xlfile, xlSheetName, 8, 8, actMenus);
			
		Thread.sleep(4000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		String actUserInfo                      = userNameDisplay.getText();
		String expUserInfo                      = excelReader.getCellData(xlSheetName, 9, 7);	
		excelReader.setCellData(xlfile, xlSheetName, 9, 8, actUserInfo);
		
		System.out.println("User Name Display Value Actual                   : " + actUserInfo +             " Value Expected : " + expUserInfo);
		
		
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyName));
		String actGetLoginCompanyNameInformation = companyName.getText();
		String actGetLoginCompanyName            = actGetLoginCompanyNameInformation.substring(0, 19);
		String expGetLoginCompanyName            = excelReader.getCellData(xlSheetName, 10, 7);
		excelReader.setCellData(xlfile, xlSheetName, 10, 8, actGetLoginCompanyName);
		companyLogo.click();
		
		System.out.println("Company Name Display Value Actual                : " + actGetLoginCompanyName +  " Value Expected : " + expGetLoginCompanyName);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		String actDashboardLabel                = labelDashboard.getText();
		String expDashboardLabel                = excelReader.getCellData(xlSheetName, 11, 7);	
		
		System.out.println("Dashboard Label Value Actual                     : " + actDashboardLabel +      " Value Expected : " + expDashboardLabel);
		
		excelReader.setCellData(xlfile, xlSheetName, 11, 8, actDashboardLabel);
		
		if (actUserInfo.equalsIgnoreCase(expUserInfo) && actGetLoginCompanyName.equalsIgnoreCase(expGetLoginCompanyName)
				&& actDashboardLabel.equalsIgnoreCase(expDashboardLabel)
				
				&& actDisplayingResult.equalsIgnoreCase("true")
				&& actMenus.equalsIgnoreCase(expMenus)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 7, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 7, 9, resFail);
			return false;
		}
	}
	catch (Exception e) 
    {
		 String exception =e.getMessage().substring(0, 50);
        excelReader.setExceptionInExcel(xlfile, xlSheetName, 7, 10, e.getMessage());
        System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
        return false;
    }
 }
	

		
				
	   
	  
		    //Purchase Voucher New 
		   //To Check Master and Transaction Authorization
			
			  
			@FindBy(xpath="//input[@id='id_header_20']")
			private static WebElement  voucherUpdateStocksCheckBox;
			
			@FindBy(xpath="//input[@id='id_header_21']")
			private static WebElement  voucherRaiseReceiptCheckBox;
			
			@FindBy(xpath="//input[@id='id_header_6']")
			private static WebElement  voucherHeaderDueDate;
		
		    @FindBy(xpath="//input[@id='id_header_67108942']")
			private static WebElement  purchaseVoucherVATNewNarration;
			
			/*@FindBy(xpath="//input[@id='id_header_67108941']")
			private static WebElement  purchaseVoucherVATNewNarration;*/
			
			/*@FindBy(xpath="//input[@id='id_header_67108932']")
			private static WebElement  purchaseVoucherNewNarration;*/

			/*@FindBy(xpath="//input[@id='id_header_67108931']")
			private static WebElement  purchaseVoucherNewTest;*/
			
			@FindBy(xpath="//ul[@id='searchedLiTrans']//label[contains(@class,'theme_icon-color')][contains(text(),'Document Info')]")
			private static WebElement  searchDocumentInfo;
			
			@FindBy(xpath="//div[@id='dashlate0']")
			private static WebElement  addCreateDashlet;
			
			@FindBy(xpath="//div[@id='DBdashlate0']")
			private static WebElement  dashletI;
			
			@FindBy(xpath="//input[@id='id_footer_134217745']")
			private static WebElement  footerRDField;
			
			
			  @FindBy(xpath="//input[@id='id_header_10']")
			  private static WebElement  voucherHeaderCurrency;

			  @FindBy(xpath="//input[@id='id_header_145']")
			  private static WebElement  voucherHeaderLocalExchangeRate;	
			  

				@FindBy(xpath="//div[contains(text(),'Account')]")
				private static WebElement vocBodyAccTxt;
				
				@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_18']")
				private static WebElement vocBodyDebitTxt;
				
				@FindBy(xpath="//div[contains(text(),'Credit')]")
				private static WebElement vocBodyCreditTxt;

				@FindBy(xpath="//div[contains(text(),'Reference')]")
				private static WebElement vocBodyReferenceTxt; 	
				
				@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_18']")
				private static WebElement vocFooterdebitAmount;
				
				@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_19']")
				private static WebElement vocFooterCreditAmount;
				
				@FindBy(xpath="//input[@id='id_header_11']")
				private static WebElement  voucherHeaderExchangeRate;
	  
			
			
			
			@FindBy(xpath="//div[contains(text(),'Warehouse')]")
			private static WebElement voucherBodyWareHouseName;
			
			@FindBy(xpath="//div[contains(text(),'Item')]")
			private static WebElement voucherBodyItemName;
			
			@FindBy(xpath="//div[contains(text(),'Units')]")
			private static WebElement voucherBodyUnitsName;
			
			@FindBy(xpath="//div[contains(text(),'RD')]")
			private static WebElement  voucherBodyRDName;
			
			@FindBy(xpath="//div[contains(text(),'Avg Rate(O)')]")
			private static WebElement  voucherBodyAvgRateName;
			               
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_9']/div[1]")
			private static WebElement  voucherBodyQtyName;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_10']/div[1]")
			private static WebElement  voucherBodyLPOName;
			
			@FindBy(xpath="//div[contains(text(),'Rate')]")
			private static WebElement  povoucherBodyRateName;
			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_7']/div[1]")
			private static WebElement  voucherBodyRateName;
			
			@FindBy(xpath="//div[contains(text(),'Gross')]")
			private static WebElement voucherBodyGrossName;
			
			@FindBy(xpath="//div[contains(text(),'Batch')]")
			private static WebElement voucherBodyBatchName;
			
			@FindBy(xpath="//div[contains(text(),'Bins')]")
			private static WebElement voucherBodyBinsName;
			
			@FindBy(xpath="//div[contains(text(),'Expiry Date')]")
			private static WebElement voucherBodyExpirytDateName;
			
			@FindBy(xpath="//div[contains(text(),'RMA')]")
			private static WebElement voucherBodyRMAName;
			
			@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_table_body']")
			private static WebElement voucherBody;
			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_head']")
			private static WebElement bodyTable;
			
		    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_row_heading']/th[1]")
			private static WebElement voucherBodyHeaderIndex;
			
		    
		    //Starting Of PurchaseVoucher 
		    
			@FindBy(xpath="//span[contains(text(),'Purchase Voucher N')]")
			private static WebElement  purchaseVoucherNew;

			
			@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
			private static WebElement  homePageAllVouchersView;
			
			@FindBy(xpath="//a[contains(text(),'*Pending Authorization Purchase')]")
			private static WebElement  homePagePendingAuthorizationView;
			
			@FindBy(xpath="//a[contains(text(),'Pending Purchases Orders')]")
			private static WebElement  homePagePendingOrdersLinks;
			
			
			/*@FindBy(xpath="//*[@id='2053']/span")
			private static WebElement  purchaseVoucherVATView;*/

			@FindBy(xpath="//span[contains(text(),'Purchase Voucher VAT')]")
			private static WebElement  purchaseVouchersVat;
					
			@FindBy(xpath="//span[contains(text(),'Purchases Returns VAT')]")
			private static WebElement  purchaseReturnsVouchersVat;
			
			/*@FindBy(xpath="//*[@id='2060']/span")
			private static WebElement  purchaseReturnsVouchersVat;
			
			
			*/
			

			
        	//Financials Menu // Opening Balance Voucher Page
	   
			@FindBy(xpath="//*[@id='60']/div")
			private static WebElement  financialsMenu; 
			
				@FindBy(xpath="//*[@id='61']/span")
				private static WebElement  financialsTransactionMenu; 		

					@FindBy(xpath="//*[@id='2001']/span")
					private static WebElement  cashAndBankMenu; 
					
			     		@FindBy(xpath="//*[@id='2002']/span")
						private static WebElement  receiptsVoucher;
						
						@FindBy(xpath="//*[@id='2003']/span")
						private static WebElement  paymentsVoucher;
						
						@FindBy(xpath="//*[@id='2004']/span")
						private static WebElement  pettyVoucher;
						
						@FindBy(xpath="//*[@id='2005']/span")
						private static WebElement  postDatedReceiptsVoucher;
									
						@FindBy(xpath="//*[@id='2006']/span")
						private static WebElement  postDatedPaymentsVoucher;
						
						@FindBy(xpath="//*[@id='108']/span")
						private static WebElement  defineChequeSeries;
						
						@FindBy(xpath="//*[@id='109']/span")
						private static WebElement  cancelCheque;				
		
					@FindBy(xpath="//*[@id='2007']/span")
					private static WebElement  financialsTransactionsPurchaseMenu; 
					
						@FindBy(xpath="//*[@id='2008']/span")
						private static WebElement  purchaseVoucher;
						
						@FindBy(xpath="//*[@id='2009']/span")
						private static WebElement  purchaseReturnsVoucher;
												
					@FindBy(xpath="//*[@id='2014']/span")
					private static WebElement  financialsTransactionsSalesMenu;
						
						@FindBy(xpath="//*[@id='2015']/span")
						private static WebElement  salesInvoicesVoucher;
						
						@FindBy(xpath="//*[@id='2016']/span")
						private static WebElement  salesReturnsVoucher;
						
						@FindBy(xpath="//*[@id='2020']/span")
						private static WebElement  cashSales;
								
						@FindBy(xpath="//*[@id='2021']/span")
						private static WebElement  hirePurchaseSales;
					
					@FindBy(xpath="//*[@id='2023']/span")
					private static WebElement  financialsTransactionsJournalsMenu;
					
					    @FindBy(xpath="//*[@id='2032']/span")
						private static WebElement  journalsEntriesVoucher;
						
						@FindBy(xpath="//*[@id='2025']/span")
						private static WebElement  forexJVVoucher;
						
						@FindBy(xpath="//*[@id='2029']/span")
						private static WebElement  interdepartmentaljvVoucher;
						
						@FindBy(xpath="//*[@id='2024']/span")
						private static WebElement  oldJouranlEntriesVoucher;
						
						@FindBy(xpath="//*[@id='2026']/span")
						private static WebElement  debitNotesVoucher;
						
						@FindBy(xpath="//*[@id='2030']/span")
						private static WebElement  debitNotesLinewiseVoucher;
						
						@FindBy(xpath="//*[@id='2027']/span")
						private static WebElement  creditNotesVoucher;
						
						@FindBy(xpath="//*[@id='2031']/span")
						private static WebElement  creditNotesLinewiseVoucher;
						
						@FindBy(xpath="//*[@id='2028']/span")
						private static WebElement  openingBalancesVoucher;
						
						@FindBy(xpath="//*[@id='2046']/span")
						private static WebElement  fixedAssetsDepreciationVoucher;
					
					@FindBy(xpath="//*[@id='219']/span")
					private static WebElement  financialsTransactionsAutoPostingsMenu;
					
						@FindBy(xpath="//*[@id='77']/span")
						private static WebElement  recurringJournalVoucher;
						
						@FindBy(xpath="//*[@id='79']/span")
						private static WebElement  postRecurringJournal;
						
						@FindBy(xpath="//*[@id='92']/span")
						private static WebElement  recurringJournalTemplate;
						
						@FindBy(xpath="//*[@id='91']/span")
						private static WebElement  postInterest;
						
						@FindBy(xpath="//*[@id='90']/span")
						private static WebElement  convertMaturedPDCs;
						
						@FindBy(xpath="//*[@id='161']/span")
						private static WebElement assignPDCLimit;
						
						@FindBy(xpath="//*[@id='166']/span")
						private static WebElement  stockReplenishment;

				@FindBy(xpath="//*[@id='62']/span")
				private static WebElement  financialsCreditManagementMenu; 
				
					@FindBy(xpath="//*[@id='63']/span")
					private static WebElement  paymentTerms;
					
					@FindBy(xpath="//*[@id='64']/span")
					private static WebElement  financeTerms;
					
					@FindBy(xpath="//*[@id='65']/span")
					private static WebElement  reminderTerms;		
					
					@FindBy(xpath="//*[@id='89']/span")
					private static WebElement  sendReminder;
					
					@FindBy(xpath="//*[@id='217']/span")
					private static WebElement  delinquency;
					
						@FindBy(xpath="//*[@id='73']/span")
						private static WebElement  questionnarie;
						
						@FindBy(xpath="//*[@id='218']/span")
						private static WebElement  delinquencyMgmt;
						
					@FindBy(xpath="//*[@id='35']/span")
					private static WebElement  creidtApproval;
					
			    @FindBy(xpath="//*[@id='81']/span")
			    private static WebElement  financialsReportsMenu; 
			    
				    @FindBy(xpath="//*[@id='500']/span")
					private static WebElement  ledger;
		
					@FindBy(xpath="//*[@id='658']/span")
					private static WebElement  ledgerDetail;
		
					@FindBy(xpath="//*[@id='501']/span")
					private static WebElement  subLedger;
					
					@FindBy(xpath="//*[@id='82']/span")
					private static WebElement  cashAndBankBooksMenu;
					
						@FindBy(xpath="//*[@id='510']/span")
						private static WebElement  cashBookReport;
						
						@FindBy(xpath="//*[@id='511']/span")
						private static WebElement  bankBookReport;
						
						@FindBy(xpath="//*[@id='512']/span")
						private static WebElement  pettyCashBokReport;
						
						@FindBy(xpath="//*[@id='513']/span")
						private static WebElement  dayBookReport;
						
						@FindBy(xpath="//*[@id='83']/span")
						private static WebElement  bankReconciliationReport;
						
						@FindBy(xpath="//*[@id='84']/span")
						private static WebElement  bankReconciliationImport;
						
						@FindBy(xpath="//*[@id='85']/span")
						private static WebElement  customerVendorReconciliation;
					
						@FindBy(xpath="//*[@id='537']/span")
						private static WebElement  bankReconciliationStatement;
							
						@FindBy(xpath="//*[@id='162']/span")
						private static WebElement chequeDiscountingMenu;
					
					@FindBy(xpath="//*[@id='502']/span")
					private static WebElement  salesReportsMenu;
					
						@FindBy(xpath="//*[@id='503']/span")
						private static WebElement  salesRegisterReport;
		
						@FindBy(xpath="//*[@id='504']/span")
						private static WebElement  salesReturnRegisterReport;
						
						@FindBy(xpath="//*[@id='505']/span")
						private static WebElement summarySalesBookReport;
						
						@FindBy(xpath="//*[@id='628']/span")
						private static WebElement monthlySalesBookReport;
						
						@FindBy(xpath="//*[@id='629']/span")
						private static WebElement  topCustomersListReport;
					
					@FindBy(xpath="//*[@id='506']/span")
					private static WebElement  purchaseReportsMenu;
					
						@FindBy(xpath="//*[@id='507']/span")
						private static WebElement  purchaseRegisterReport;
						
						@FindBy(xpath="//*[@id='508']/span")
						private static WebElement  purchaseReturnRegisteReport;
						
						@FindBy(xpath="//*[@id='509']/span")
						private static WebElement  summaryPurchaseBookReport;
								
					@FindBy(xpath="//*[@id='514']/span")
					private static WebElement  registersReportMenu;
					
						@FindBy(xpath="//*[@id='516']/span")
						private static WebElement  openingBalanceRegisterReport;
						
						@FindBy(xpath="//*[@id='515']/span")
						private static WebElement journalEntriesRegisterReport;
						
						@FindBy(xpath="//span[contains(text(),'Credit Note Register')]")
						private static WebElement creditNoteRegisterReport;
						
						@FindBy(xpath="//*[@id='610']/span")
						private static WebElement  debitNoteRegisterReport;
						
						@FindBy(xpath="//*[@id='598']/span")
						private static WebElement  receiptsRegisterReport;
						
						@FindBy(xpath="//*[@id='599']/span")
						private static WebElement  paymentRegisterReport;
						
						@FindBy(xpath="//*[@id='518']/span")
						private static WebElement  pdcReceiptsRegisterReport;
						
						@FindBy(xpath="//*[@id='519']/span")
						private static WebElement pdcPaymentsRegisterReport;
						
						@FindBy(xpath="//*[@id='517']/span")
						private static WebElement  entryJournalRegisterMenu;
								
					@FindBy(xpath="//*[@id='523']/span")
					private static WebElement  salesAndPurchasesReportMenu;
					
						@FindBy(xpath="//*[@id='524']/span")
						private static WebElement  salesGroupedByCustomerReport;
						
						@FindBy(xpath="//*[@id='525']/span")
						private static WebElement  salesGroupedByProductReport;
						
						@FindBy(xpath="//*[@id='526']/span")
						private static WebElement  salesGroupedByDepartmentReport;
						
						@FindBy(xpath="//*[@id='527']/span")
						private static WebElement  purchasesGroupedByVendorReport;
						
						@FindBy(xpath="//*[@id='528']/span")
						private static WebElement  purchasesGroupedByProductReport;
						
						@FindBy(xpath="//*[@id='529']/span")
						private static WebElement  purchasesGroupedByDepartmentReport;		
					
					@FindBy(xpath="//*[@id='568']/span")
					private static WebElement  MiscellaneousAnalysisReportMenu;
					
						@FindBy(xpath="//*[@id='569']/span")
						private static WebElement  peakAndLowBalancesReport;
						
						@FindBy(xpath="//*[@id='570']/span")
						private static WebElement  comprativeAnalysisReport;
						
						@FindBy(xpath="//*[@id='571']/span")
						private static WebElement  transactionsTypeAnalysisReport;
						
						@FindBy(xpath="//*[@id='572']/span")
						private static WebElement  abcAnalysisReport;
						
						@FindBy(xpath="//*[@id='597']/span")
						private static WebElement  interestCalculationReport;
		
					@FindBy(xpath="//*[@id='536']/span")
					private static WebElement  mastersInformationMenu;
					
				     	@FindBy(xpath="//*[@id='538']/span")
						private static WebElement  masterInfoMenu;
						
						@FindBy(xpath="//*[@id='144']/span")
						private static WebElement  productLabelMenu;
						
						@FindBy(xpath="//*[@id='573']/span")
						private static WebElement  unitConversionMenu;
							
						@FindBy(xpath="//*[@id='147']/span")
						private static WebElement  skidDefinitionMenu;
										
					@FindBy(xpath="//*[@id='520']/span")
					private static WebElement  auditTrailMenu;
					
						@FindBy(xpath="//*[@id='521']/span")
						private static WebElement  auditTrailtransactionsReport;
						
						@FindBy(xpath="//*[@id='522']/span")
						private static WebElement  aAuditTrailloginsReport;
					
					@FindBy(xpath="//*[@id='204']/span")
					private static WebElement  accountQuery;
					
			    @FindBy(xpath="//*[@id='530']/span")
			    private static WebElement  financialsFinalAccountsMenu; 
			    
				    @FindBy(xpath="//*[@id='531']/span")
					private static WebElement trialBalanceReport;
							
					@FindBy(xpath="//*[@id='532']/span")
					private static WebElement profitandLossReport;
					
					@FindBy(xpath="//*[@id='533']/span")
					private static WebElement  tradingAccountReport;
					
					@FindBy(xpath="//*[@id='534']/span")
					private static WebElement  tradingandProfitAndLossReport;
					
					@FindBy(xpath="//*[@id='535']/span")
					private static WebElement  balanceSheetReport;				
					
					@FindBy(xpath="//*[@id='592']/span")
					private static WebElement  finalAccountSchedulesReport;
					
					@FindBy(xpath="//*[@id='593']/span")
					private static WebElement  fundFlowReport;
					
					@FindBy(xpath="//*[@id='594']/span")
					private static WebElement  cashFlowReport;
					
					@FindBy(xpath="//*[@id='252']/span")
					private static WebElement  cashFlowCalendarReport;
					
					@FindBy(xpath="//*[@id='595']/span")
					private static WebElement  cashFlowAnalysisReport;
					
					@FindBy(xpath="//*[@id='632']/span")
					private static WebElement  advanceCashFlowReport;
					
					@FindBy(xpath="//*[@id='630']/span")
					private static WebElement  incomeExpenseTrendsReport;
					
					@FindBy(xpath="//*[@id='655']/span")
					private static WebElement  receivablePayableReport;
				
				@FindBy(xpath="//*[@id='558']/span")
				private static WebElement  financialsReceivableAndPayableAnalysisMenu; 
				
					@FindBy(xpath="//*[@id='605']/span")
					private static WebElement customerDetailMenu;
					
						@FindBy(xpath="//*[@id='559']/span")
						private static WebElement  customerListingOfOutstandingBillsReport;
						
						@FindBy(xpath="//*[@id='560']/span")
						private static WebElement  customerStatementsReport;
						
						@FindBy(xpath="//*[@id='560']/span")
						private static WebElement  customerDueDateAnalysisReport;
						
						@FindBy(xpath="//*[@id='563']/span")
						private static WebElement  customerAgeingDetailsReport;
						
						@FindBy(xpath="//*[@id='564']/span")
						private static WebElement  customerDetailAgeingbyDueDateReport;
						
						@FindBy(xpath="//*[@id='566']/span")
						private static WebElement  customerOverdueAnalysisReport;
					
					@FindBy(xpath="//*[@id='607']/span")
					private static WebElement  customerSummaryMenu;
							
						@FindBy(xpath="//*[@id='562']/span")
						private static WebElement  customerAgeingSummaryMenu;
						
						@FindBy(xpath="//*[@id='565']/span")
						private static WebElement  customerSummaryAgeingByDueDateMenu;
						
						@FindBy(xpath="//*[@id='567']/span")
						private static WebElement  customerOverdueSummaryMenu;
						
						@FindBy(xpath="//*[@id='539']/span")
						private static WebElement  customerbillwiseSummaryMenu;	
					
					@FindBy(xpath="//*[@id='606']/span")
					private static WebElement  vendorDetailMenu;
					
						@FindBy(xpath="//*[@id='541']/span")
						private static WebElement  vendorListingoFOutstandingBillsReport;
							
						@FindBy(xpath="//*[@id='542']/span")
						private static WebElement  vendorStatementsReport;
						
						@FindBy(xpath="//*[@id='543']/span")
						private static WebElement  vendorDueDateAnalysisReport;
						
						@FindBy(xpath="//*[@id='545']/span")
						private static WebElement  vendorAgeingDetailsReport;
							
						@FindBy(xpath="//*[@id='546']/span")
						private static WebElement  vendorDetailVendorDetailAgeingByDueDateMenu;
					
						@FindBy(xpath="//*[@id='548']/span")
						private static WebElement  vendorOverdueAnalysisMenu;
						
					@FindBy(xpath="//*[@id='608']/span")
					private static WebElement  vendorSummaryMenu;
					
						@FindBy(xpath="//*[@id='544']/span")
						private static WebElement  vendorAgeingSummaryReport;
						
						@FindBy(xpath="//*[@id='547']/span")
						private static WebElement  vendorSummaryAgeingByDueDateReport;
						
						@FindBy(xpath="//*[@id='549']/span")
						private static WebElement  vendorOverdueSummaryReport;
						
						@FindBy(xpath="//*[@id='634']/span")
						private static WebElement  vendorbillWiseSummaryReport;
					
					@FindBy(xpath="//*[@id='75']/span")
					private static WebElement  letterofCredit;
					
					@FindBy(xpath="//*[@id='165']/span")
					private static WebElement  releaseLetterofCredit;
			
				@FindBy(xpath="//*[@id='3301']/span")
				private static WebElement  financialsBudgetMenu; 
				
					@FindBy(xpath="//*[@id='3302']/span")
					private static WebElement  defineBudgetReport;
					
					@FindBy(xpath="//*[@id='3303']/span")
					private static WebElement  confirmBudgetReport;
					
					@FindBy(xpath="//*[@id='3304']/span")
					private static WebElement  reviseBudgetMenu;
					
						@FindBy(xpath="//*[@id='3305']/span")
						private static WebElement  appendBudget;
						
						@FindBy(xpath="//*[@id='3306']/span")
						private static WebElement  addORReduceBudget;
						
						@FindBy(xpath="//*[@id='3307']/span")
						private static WebElement  transferBudget;
					
					@FindBy(xpath="//*[@id='3309']/span")
					private static WebElement  approveBudgetReport;
					
					@FindBy(xpath="//*[@id='3310']/span")
					private static WebElement  rejectedBudgetReport;
					
					@FindBy(xpath="//*[@id='3321']/span")
					private static WebElement  budgetReportsMenu;
					
						@FindBy(xpath="//*[@id='666']/span")
						private static WebElement  advancedBudgetReportMenu;
						
						@FindBy(xpath="//*[@id='669']/span")
						private static WebElement  revisedBudgetReportMenu;
				
						
				@FindBy(xpath="//*[@id='3311']/span")
				private static WebElement  financialsOnlinePaymentsMenu;   
				
					@FindBy(xpath="//*[@id='3312']/span")
					private static WebElement  onlineBankRegistrationMenu;
					
					@FindBy(xpath="/html/body/section/div[2]/aside/section/ul/li[2]/ul/li[7]/ul/li[2]/a/span")
					private static WebElement  issuePaymentToBankMenu;
					
					@FindBy(xpath="/html/body/section/div[2]/aside/section/ul/li[2]/ul/li[7]/ul/li[3]/a/span")
					private static WebElement  reconcilePaymentsMenu;
					
					@FindBy(xpath="//*[@id='3315']/span")
					private static WebElement  onlineBankReconcilationMenu;
					
					@FindBy(xpath="//*[@id='3317']/span")
					private static WebElement  bankStatementMenu;	
				    
					@FindBy(xpath="//*[@id='dashName']")
					private static WebElement dashboard;
				
					@FindBy(xpath = "//ul[@id='navigation_menu']/li[2]/ul/li/a/span")
					private static List<WebElement> financialsMenusList;
			
			public static boolean checkFinancialsMenuTransactionsMenuPurchasesMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					Thread.sleep(3000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
					financialsMenu.click();
							
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
					financialsTransactionMenu.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
					financialsTransactionsPurchaseMenu.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucher));
						
					boolean actFinancialPurchaseIsDisplay              = purchaseVoucher.isDisplayed();
			    	boolean actFinancialPurchaseReturnsIsDisplay       = purchaseReturnsVoucher.isDisplayed(); 	
			    	
			    	boolean actFinancialPurchaseVouchersVatIsDisplay   = purchaseVouchersVat.isDisplayed();
			    	
			    	
			    	boolean expFinancialPurchaseIsDisplay              = true;
			    	boolean expFinancialPurchaseReturnsIsDisplay       = true; 	
			    	boolean expFinancialPurchaseVoucherNewIsDisplay    = true;
			    	boolean expFinancialPurchaseVouchersVatIsDisplay   = true;
			    	boolean expFinancialPurchaseReturnsVatIsDisplay    = true;
			    	
			    	
			    	System.out.println("FinancialPurchaseIsDisplay              : " + actFinancialPurchaseIsDisplay   +                "  Value Expected  " + expFinancialPurchaseIsDisplay);	
			    	System.out.println("FinancialPurchaseReturnsIsDisplay       : " + actFinancialPurchaseReturnsIsDisplay  +          "  Value Expected  " + expFinancialPurchaseReturnsIsDisplay); 	
			    		   
			     	System.out.println("FinancialPurchaseVouchersVatIsDisplay   : " + actFinancialPurchaseVouchersVatIsDisplay  +      "  Value Expected  " + expFinancialPurchaseVouchersVatIsDisplay); 	
			    				
					
			    	
			    	
			    	boolean actMethod=actFinancialPurchaseIsDisplay==expFinancialPurchaseIsDisplay && actFinancialPurchaseReturnsIsDisplay==expFinancialPurchaseReturnsIsDisplay
							    && actFinancialPurchaseVouchersVatIsDisplay==expFinancialPurchaseVouchersVatIsDisplay ;
			    	
			    	String actResult=Boolean.toString(actMethod);
			    	String expResult=excelReader.getCellData("PurchaseVoucherN", 10, 7);
					
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 10, 8, actResult.toUpperCase());
		            
					if (actMethod==true) 
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 9, 9, resPass);
						return true;
					}
					else 
					{
						
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 9, 9, resFail);
						return false;
					}
		            }
		            catch (Exception e) 
				    {    
		  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 9, 10, e.getMessage());
		  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  			  return false;
		  		    }
			 }
			
			 
			
			 @FindBy(xpath="//table[@id='id_rc_columnheadertable']/thead/tr/th/div/p")
				private static List<WebElement>  custBodyHeaderList;
			    
			    @FindBy(xpath="//*[@id='plnCustomizecolumn']/div/span[4]/a")
				private static WebElement  custRemoveBtn;
			    
			    @FindBy(xpath="//div[@class='col-sm-12 toolbar_button_text font-6'][contains(text(),'Save')]")
				private static WebElement  custSaveBtn;
				
				@FindBy(xpath="//*[@id='btnCustomizeClose']/div[1]/span")
				private static WebElement  custCancelBtn;
				
				public static void checkDeleteLinkStatus() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeBtn));
					customizeBtn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(custSaveBtn));
					
					int custBodyHeaderListCount = custBodyHeaderList.size();
					
					for (int i = 0; i < custBodyHeaderListCount; i++)
					{
						String data = custBodyHeaderList.get(i).getText();
						
						System.out.println(i+" "+data);
						
						/*int temp=i+1;
						
						JavascriptExecutor js = (JavascriptExecutor) getDriver();
						js.executeScript("arguments[0].scrollIntoView();",custBodyHeaderList.get(temp));*/
						
						if (data.equalsIgnoreCase("Link status")) 
						{
							custBodyHeaderList.get(i).click();
							
							Thread.sleep(2000);
							
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custRemoveBtn));
							custRemoveBtn.click();
							
							Thread.sleep(1000);
							
							break;
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custSaveBtn));
					custSaveBtn.click();
					
					String expMessage  = "Data saved successfully";
					String actSaveMessage = checkValidationMessage(expMessage);
				}
			
			
			public boolean checkPurchaseVoucherNewHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		    {
					
				    excelReader=new ExcelReader(POJOUtility.getExcelPath());
				    xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			       try
			       {
				
				    
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
					purchaseVouchersVat.click();
					
					Thread.sleep(2000);
					checkDeleteLinkStatus();
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
					
					boolean actHomePageNewBtn                     = newBtn.isDisplayed();
					boolean actHomePageEditBtn                    = editBtn.isDisplayed();
					boolean actHomePagePrintBtn                   = printBtn.isDisplayed();
					boolean actHomePageDeleteBtn                  = deleteBtn.isDisplayed();
					boolean actHomePageAuthorizeBtn               = authorizeBtn.isDisplayed();
					boolean actHomePageSuspendBtn                 = suspendBtn.isDisplayed();
					boolean actHomePageRejectBtn                  = rejectBtn.isDisplayed();
					boolean actHomePagePrintBarcodeBtn            = printBarCodeBtn.isDisplayed();
					boolean actHomePageExportXMLBtn               = exportToXMLBtn.isDisplayed();
					boolean actHomePageSettingsBtn                = settingsBtn.isDisplayed();
					boolean actHomePageCloseBtn                   = homeCloseBtn.isDisplayed();
					boolean actHomePageGridCheckBox               = grid_HeaderChkBox.isDisplayed();
					boolean actHomePageSortingBtn                 = sortingBtn.isDisplayed();
					boolean actHomePageCreateViewBn               = createViewBtn.isDisplayed();
					boolean actHomePageCustomizeBtn   		      = customizeBtn.isDisplayed();
					boolean actHomePageFilterBtn     		      = filterBtn.isDisplayed();
					boolean actHomePageRefreshBtn    		      = refreshBtn.isDisplayed();
					boolean actHomePageOptionsBtn     		      = optionsBtn.isDisplayed();
					boolean actHomePageExportBtn                  = exportBtn.isDisplayed();
					
					boolean actHomePageAllVouchersView            = homePageAllVouchersView.isDisplayed();
					boolean actHomePagePendingAuthorizationView   = homePagePendingAuthorizationView.isDisplayed();
					boolean actHomePagePendingOrdersLinks         = homePagePendingOrdersLinks.isDisplayed();
					
					
					boolean expHomePageNewBtn                     = true;
					boolean expHomePageEditBtn                    = true;
					boolean expHomePagePrintBtn                   = true;
					boolean expHomePageDeleteBtn                  = true;
					boolean expHomePageAuthorizeBtn               = true;
					boolean expHomePageSuspendBtn                 = true;
					boolean expHomePageRejectBtn                  = true;
					boolean expHomePagePrintBarcodeBtn            = true;
					boolean expHomePageExportXMLBtn               = true;
					boolean expHomePageSettingsBtn                = true;
					boolean expHomePageCloseBtn                   = true;
					boolean expHomePageGridCheckBox               = true;
					boolean expHomePageSortingBtn                 = true;
					boolean expHomePageCreateViewBn               = true;
					boolean expHomePageCustomizeBtn               = true;
					boolean expHomePageFilterBtn                  = true;
					boolean expHomePageRefreshBtn                 = true;
					boolean expHomePageOptionsBtn                 = true;
					boolean expHomePageExportBtn                  = true;
					
					boolean expHomePageAllVouchersView            = true;
					boolean expHomePagePendingAuthorizationView   = true;
					boolean expHomePagePendingOrdersLinks         = true;
					
					
					System.out.println("************************************ checkPurchaseVoucherNewHomePage  *****************************************************");
					System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn                   +"    Value Expected : "+expHomePageNewBtn);
					System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn                  +"    Value Expected : "+expHomePageEditBtn);
					System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn                 +"	 Value Expected : "+expHomePagePrintBtn);
					System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn                +"	 Value Expected : "+expHomePageDeleteBtn);
					System.out.println("Home Page Authorize Btn Value Actual     :"+actHomePageAuthorizeBtn             +"	 Value Expected : "+expHomePageAuthorizeBtn);
					System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn               +"	 Value Expected : "+expHomePageSuspendBtn);
					System.out.println("Home Page Reject Btn Value Actual        :"+actHomePageRejectBtn                +"	 Value Expected : "+expHomePageRejectBtn);
					System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn          +"	 Value Expected : "+expHomePagePrintBarcodeBtn);
					System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn             +"	 Value Expected : "+expHomePageExportXMLBtn);
					System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn              +"	 Value Expected : "+expHomePageSettingsBtn);
					System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn                 +"	 Value Expected : "+expHomePageCloseBtn);
					System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox             +"	 Value Expected : "+expHomePageGridCheckBox);
					System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn               +"	 Value Expected : "+expHomePageSortingBtn);
					System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn             +"	 Value Expected : "+expHomePageCreateViewBn);
					System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn             +"	 Value Expected : "+expHomePageCustomizeBtn);
					System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn                +"	 Value Expected : "+expHomePageFilterBtn);
					System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn               +"	 Value Expected : "+expHomePageRefreshBtn);
					System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn               +"	 Value Expected : "+expHomePageOptionsBtn);
					System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn                +"	 Value Expected : "+expHomePageExportBtn);
					System.out.println("Home Page All Voucher View Value Actual  :"+actHomePageAllVouchersView          +"	 Value Expected : "+expHomePageAllVouchersView);
					System.out.println("Home Page Pending Auth Value Actual      :"+actHomePagePendingAuthorizationView +"	 Value Expected : "+actHomePagePendingAuthorizationView);
					System.out.println("Home Page Pending Orders Value Actual    :"+actHomePagePendingOrdersLinks       +"	 Value Expected : "+actHomePagePendingOrdersLinks);
								
					
					
					boolean actMethod=actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
							&& actHomePageDeleteBtn==expHomePageDeleteBtn && actHomePageAuthorizeBtn==expHomePageAuthorizeBtn && actHomePageSuspendBtn==expHomePageSuspendBtn 
							&& actHomePageRejectBtn==expHomePageRejectBtn && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
							&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
							&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
							&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
							&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllVouchersView==expHomePageAllVouchersView
							&& actHomePagePendingAuthorizationView==expHomePagePendingAuthorizationView && actHomePagePendingOrdersLinks==expHomePagePendingOrdersLinks;
					
					
					String actResult=Boolean.toString(actMethod);
					String expResult=excelReader.getCellData("PurchaseVoucherN", 12, 7);
					
		            excelReader.setCellData(xlfile, "PurchaseVoucherN", 12, 8, actResult.toUpperCase());
					
					
					
					if(actMethod==true)
					{
						System.out.println("Test Pass : HomeScreen Options Are Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherN",  11, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 11, 9, resFail);
						return false;
					}
		        }
		     	catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 11, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			   }
				}
				
			
			
			
			
	    @FindBy(xpath="//*[@id='id_transactionentry_toggle']/div")
		private static List<WebElement> transEntryPageHeaderOptionsList;
				    
	    @FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
		private static WebElement voucherAll;
		  
		@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[2]/a")
		private static WebElement pendingAuthorizationProcess;
		  
		@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[3]/a")
		private static WebElement pendingMaterialRequistion;
			
		public boolean checkPurchaseVoucherNewEntryPageHeaderToggleOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
				newBtn.click();
				
				checkUserFriendlyMessage();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
				
				 int transEntryPageHeaderOptionsListCount=transEntryPageHeaderOptionsList.size();
				 
				 ArrayList<String> actEntryPageHeader          = new ArrayList<String>();
					
				 for (int i = 0; i < transEntryPageHeaderOptionsListCount; i++) 
			 	 {
					String data=transEntryPageHeaderOptionsList.get(i).getText();
					actEntryPageHeader.add(data);
					
			 	 }
		        
				String actEntryPageHeaderList=actEntryPageHeader.toString();
				String expEntryPageHeaderList=excelReader.getCellData("PurchaseVoucherN", 14, 7);
					
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 14, 8, actEntryPageHeaderList);
				 
				boolean actEntryPageJumpToHeaderSectionBtn= jumpToHeaderSectionBtn.isDisplayed();
				boolean actEntryPageJumpToBodySectionBtn  = jumpToBodySectionBtn.isDisplayed();
				boolean actEntryPageJumpToFooterBtn       = jumpToFooterBtn.isDisplayed();
				boolean actEntryPageNewBtn                = new_newBtn.isDisplayed();
				boolean actEntryPageSaveBtn               = saveBtn.isDisplayed();
				boolean actEntryPagePreviousBtn           = previousBtn.isDisplayed();
				boolean actEntryPageNextBtn               = nextBtn.isDisplayed();
				boolean actEntryPagePrintBtn              = new_PrintBtn.isDisplayed();
				boolean actEntryPageSuspendBtn            = new_SuspendBtn.isDisplayed();
				boolean actEntryPageCloseBtn              = new_CloseBtn.isDisplayed();
				boolean actEntryPageToggleBtn             = toggleBtn.isDisplayed();

				
				boolean expEntryPageJumpToHeaderSectionBtn= true;
				boolean expEntryPageJumpToBodySectionBtn  = true;
				boolean expEntryPageJumpToFooterBtn       = true;
				boolean expEntryPageNewBtn	              = true;
				boolean expEntryPageSaveBtn               = true;
				boolean expEntryPagePreviousBtn           = true;
				boolean expEntryPageNextBtn               = true;
				boolean expEntryPagePrintBtn              = true;
				boolean expEntryPageSuspendBtn            = true;
				boolean expEntryPageCloseBtn              = true;
				boolean expEntryPageToggleBtn             = true;

				
				
				System.out.println("************************************* checkPurchaseVoucherNewEntryPageHeaderToggleOptions  ********************************************");
				System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn +"    Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
				System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn   +"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
				System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn        +"    Value Expected : "+expEntryPageJumpToFooterBtn);
				System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn                 +"    Value Expected : "+expEntryPageNewBtn);
				System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn                +"    Value Expected : "+expEntryPageSaveBtn);
				System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn            +"    Value Expected : "+expEntryPagePreviousBtn);
				System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn                +"    Value Expected : "+expEntryPageNextBtn);
				System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn               +"    Value Expected : "+expEntryPagePrintBtn);
				System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn             +"    Value Expected : "+expEntryPageSuspendBtn);
				System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn               +"    Value Expected : "+expEntryPageCloseBtn);
				System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn              +"    Value Expected : "+expEntryPageToggleBtn);
				
				boolean actVoucherAllAuthorizationAndLinks =voucherAll.isDisplayed() && pendingAuthorizationProcess.isDisplayed()
                                                                && pendingMaterialRequistion.isDisplayed();

			    boolean expVoucherAllAuthorizationAndLinks = true;
					
				System.out.println("Home page All Pending Authorization And Links Value Actual : " + actVoucherAllAuthorizationAndLinks  +   " Value Expected :  " + expVoucherAllAuthorizationAndLinks);



			    boolean actMethod=actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
						&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
						&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
						&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
						&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn && 
						actEntryPageHeaderList.equalsIgnoreCase(expEntryPageHeaderList) && actVoucherAllAuthorizationAndLinks==expVoucherAllAuthorizationAndLinks;
			    
			    
			    String actResult=Boolean.toString(actMethod);
			    String expResult=excelReader.getCellData("PurchaseVoucherN", 15, 7);
					
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 15, 8, actResult.toUpperCase());
				
				
				if(actMethod==true)		
				{
					System.out.println("Test Pass : entry Page Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resFail);
					return false;
				}
			 }
		   catch (Exception e) 
  		   {
  			  String exception =e.getMessage();
  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 13, 10, e.getMessage());
  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
  			  return false;
  		   }
		}
			
		 @FindBy(xpath="//*[@id='tblHeadTransRender']/tr/th")
		  private static List<WebElement> headerTxtList;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[4]")
		 private static WebElement openingStocksNewHomeRow1VoucherNo;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[5]")
		 private static WebElement openingStocksNewHomeRow1CreatedBy;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[6]")
		 private static WebElement openingStocksNewHomeRow1ModifiedBy;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[11]")
		 private static WebElement openingStocksNewHomeRow1SuspendStatus;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[12]")
		 private static WebElement openingStocksNewHomeRow1AuthorizationStatus;
		
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr")
		 private static List<WebElement> openingStocksNewHomePageTableRowsCount;
		
		// UPDATES DONE
		
		  public boolean checkPurchasesVoucherPendingLinksOptionsInHomePageOnAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		  {	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{		
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingMaterialRequistion));
				pendingMaterialRequistion.click();
				
				Thread.sleep(2000);
				
				//Home Page Column Headings
				
		        int headerTxtCount		= headerTxtList.size();
				
				ArrayList<String> headerTxt = new ArrayList<String>();
				
				for (int i = 2; i < headerTxtCount; i++) 
				{
					String data=headerTxtList.get(i).getText();
					headerTxt.add(data);
				}
				
				String actHeaderTxt = headerTxt.toString();
				String expHeaderTxt = excelReader.getCellData(xlSheetName, 433, 7);
				excelReader.setCellData(xlfile, xlSheetName, 433, 8, actHeaderTxt);
				
				System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
				System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
				
				System.out.println("Count Of Header Columns in Home Page Value Actual    :  " + actHeaderTxt );
				System.out.println("Count Of Header Columns in Home Page Value Expected  :  " + expHeaderTxt );
						
				String actHomePageVoucherNo     = openingStocksNewHomeRow1VoucherNo.getText();
				String actHomePageCreatedBy     = openingStocksNewHomeRow1CreatedBy.getText();
				String actHomePageModifiedBy    = openingStocksNewHomeRow1ModifiedBy.getText();
				String actHomePageSuspendBy     = openingStocksNewHomeRow1SuspendStatus.getText();
				String actHomePageAuthorizedBy  = openingStocksNewHomeRow1AuthorizationStatus.getText();
				
				String expHomePageVoucherNo     = "1";
				String expHomePageCreatedBy     = "SU";
				String expHomePageModifiedBy    = "SU";
				String expHomePageSuspendBy     = "False";
				String expHomePageAuthorizeBy   = "Authorized";
				
				
				System.out.println("Voucher No in Home Page Value Actual   :  " + actHomePageVoucherNo+    " Value Expected : " + expHomePageVoucherNo);
				System.out.println("Created By in Home Page Value Actual   :  " + actHomePageCreatedBy+    " Value Expected : " + expHomePageCreatedBy);
				System.out.println("Modified By in Home Page Value Actual  :  " + actHomePageModifiedBy+   " Value Expected : " + expHomePageModifiedBy);
				System.out.println("Suspend By in Home Page Value Actual   :  " + actHomePageSuspendBy+    " Value Expected : " + expHomePageSuspendBy);
				System.out.println("Authorize By in Home Page Value Actual :  " + actHomePageAuthorizedBy+ " Value Expected : " + expHomePageAuthorizeBy);
						
				if(actHomePageVoucherNo.equalsIgnoreCase(expHomePageVoucherNo) && actHomePageCreatedBy.equalsIgnoreCase(expHomePageCreatedBy)
						&& actHomePageModifiedBy.equalsIgnoreCase(expHomePageModifiedBy) && actHomePageSuspendBy.equalsIgnoreCase(expHomePageSuspendBy)
						&& actHomePageAuthorizedBy.equalsIgnoreCase(expHomePageAuthorizeBy))		
				{
					System.out.println("Test Pass : entry Page Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resFail);
					return false;
				}
			 }
			catch (Exception e) 
		    {
		  		String exception =e.getMessage().substring(0, 50);
		          excelReader.setExceptionInExcel(xlfile, xlSheetName, 12, 10, e.getMessage());
		          System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		          return false;
		    }
		  }	
		
		  
	 		  
	  public boolean checkPurchasesVoucherOpenEntryByConvertOpyionInHomePageOnLinksView() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {	
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow2ndCol));
			sl_1stRow2ndCol.click();
			
			//Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(convertBtn));
			convertBtn.click();
	
			//Thread.sleep(2000);
		
			
			
			
			//Messages 
			
			String actRuleMessage       = errorMessageOne.getText();
			String actLinkLoadMessage   = errorMessageTwo.getText(); 
			
			System.out.println("Error Message"+actRuleMessage);
			System.out.println("Error Message"+actLinkLoadMessage);
			
			String expRuleMessage       = "SNarration Test Rule";
			boolean getStringLinkLoadMessage   = actLinkLoadMessage.contains(actLinkLoadMessage);
			
			System.out.println("Rule Message Value Actual         :  " + actRuleMessage           + " Value Expected : " + expRuleMessage);
			System.out.println("Link Loading Message Value Actual :  " + getStringLinkLoadMessage + " Value Expected : " + "True");
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			String actEntryPageHeaderFieldsDocNumber      = documentNumberTxt.getAttribute("value");				
			String actEntryPageHeaderFieldsVendorAc       = vendorAccountTxt.getAttribute("value");
			
			String actEntryPageHeaderFieldsCurrency       = voucherHeaderCurrency.getAttribute("value");
		    String actEntryPageHeaderFieldsExchRate       = voucherHeaderExchangeRate.getAttribute("value");
		    String actEntryPageHeaderFieldsNarration      = purchaseVoucherVATNewNarration.getAttribute("value");
		    
		    String expEntryPageHeaderFieldsDocNumber      = "SU//TEXT1";				
			String expEntryPageHeaderFieldsVendorAc       = "Vendor A";
			
			String expEntryPageHeaderFieldsCurrency       = "INR";
		    String expEntryPageHeaderFieldsExchRate       = "1.0000000000";
		    String expEntryPageHeaderFieldsNarration      = "FOCUS";
		    		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyItemColTxt));
			String actBodyGridFirstCol                    = bodyItemColTxt.getText();
			String expBodyGridFirstCol                    = "FCaption";
	
			System.out.println("BodyGridFirstCol             :  " + actBodyGridFirstCol + " Value Expected : " + expBodyGridFirstCol);
		    		
		    System.out.println("Document No Value Actual     :  " + actEntryPageHeaderFieldsDocNumber+  " Value Expected : " + expEntryPageHeaderFieldsDocNumber);
			System.out.println("Vendor Account Value Actual  :  " + actEntryPageHeaderFieldsVendorAc+   " Value Expected : " + expEntryPageHeaderFieldsVendorAc);
			System.out.println("Currency Value Actual        :  " + actEntryPageHeaderFieldsCurrency+   " Value Expected : " + expEntryPageHeaderFieldsCurrency);
			
			System.out.println("Exchange Rate Value Actual   :  " + actEntryPageHeaderFieldsExchRate+   " Value Expected : " + expEntryPageHeaderFieldsExchRate);
			System.out.println("Narration Value Actual       :  " + actEntryPageHeaderFieldsNarration+  " Value Expected : " + expEntryPageHeaderFieldsNarration);
										
			
			//String actR1C1Item          = select1stRow_1stColumn.getText();
			String actR1C2Item            = select1stRow_2ndColumn.getText();
			//String actR1C5Qty           = select1stRow_3rdColumn.getText();
			String actR1C4PurchaseAccount = select1stRow_4thColumn.getText();
			String actR1C5Units           = select1stRow_5thColumn.getText();
			String actR1C6RD              = select1stRow_6thColumn.getText();
			String actR1C7AvgRate         = select1stRow_7thColumn.getText();
			String actR1C8AvgRateO        = select1stRow_8thColumn.getText();
			String actR1C9Qty             = select1stRow_9thColumn.getText();
			String actR1C10Link           = select1stRow_10thColumn.getText();
			String actR1C11Rate           = select1stRow_11thColumn.getText();	
			String actR1C12Gross          = select1stRow_12thColumn.getText();
			
			//String expR1C1Item          = select1stRow_1stColumn.getText();
			String expR1C2Item            = "STD RATE COGS ITEM";
			//String expR1C5Qty           = select1stRow_3rdColumn.getText();
			String expR1C4PurchaseAccount = "STD RATE COGS ACC INV";
			String expR1C5Units           = "Dozs";
			String expR1C6RD              = "0"; //0.00
			String expR1C7AvgRate         = "10.00";
			String expR1C8AvgRateO        = "10.00";
			String expR1C9Qty             = "2.00";
			String expR1C10Link           = "PurOrd:1";
			String expR1C11Rate           = "20.00";	
			String expR1C12Gross          = "40.00";
				
			System.out.println("Entry Page Save with Vendor Item Value Actual   : " + actR1C2Item             + " Value Expected : " + expR1C2Item);	
			System.out.println("Entry Page Save with Vendor Units Value Actual  : " + actR1C4PurchaseAccount  + " Value Expected : " + expR1C4PurchaseAccount);
			System.out.println("Entry Page Save with Vendor QTY Value Actual    : " + actR1C5Units            + " Value Expected : " + expR1C5Units);
			System.out.println("Entry Page Save with Vendor RATE Value Actual   : " + actR1C6RD               + " Value Expected : " + expR1C6RD);
			System.out.println("Entry Page Save with Vendor Gross Value Actual  : " + actR1C7AvgRate          + " Value Expected : " + expR1C7AvgRate);			
			System.out.println("Entry Page Save with Vendor Gross Value Actual  : " + actR1C8AvgRateO         + " Value Expected : " + expR1C8AvgRateO);
			
			System.out.println("Entry Page Save with Vendor Item Value Actual   : " + actR1C9Qty              + " Value Expected : " + expR1C9Qty);	
			System.out.println("Entry Page Save with Vendor Units Value Actual  : " + actR1C10Link            + " Value Expected : " + expR1C10Link);
			System.out.println("Entry Page Save with Vendor QTY Value Actual    : " + actR1C11Rate            + " Value Expected : " + expR1C11Rate);
			System.out.println("Entry Page Save with Vendor RATE Value Actual   : " + actR1C12Gross           + " Value Expected : " + expR1C12Gross);
			
			
			
			if(errorMessageCloseBtn.isDisplayed())
			{
				errorMessageCloseBtn.click();
			}
			
			
			if(actRuleMessage.equalsIgnoreCase(expRuleMessage) && getStringLinkLoadMessage==true
					&& actR1C2Item.equalsIgnoreCase(expR1C2Item) && actR1C4PurchaseAccount.equalsIgnoreCase(expR1C4PurchaseAccount)
					&& actR1C5Units.equalsIgnoreCase(expR1C5Units) && actR1C6RD.equalsIgnoreCase(expR1C6RD)
					&& actR1C7AvgRate.equalsIgnoreCase(expR1C7AvgRate) && actR1C8AvgRateO.equalsIgnoreCase(expR1C8AvgRateO)
					&& actR1C9Qty.equalsIgnoreCase(expR1C9Qty) && actR1C10Link.equalsIgnoreCase(expR1C10Link)
					&& actR1C11Rate.equalsIgnoreCase(expR1C11Rate) && actR1C12Gross.equalsIgnoreCase(expR1C12Gross))	
			{
				System.out.println("Test Pass : entry Page Options Are Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resFail);
				return false;
			}
		 }
		catch (Exception e) 
	    {
	  		  String exception =e.getMessage().substring(0, 50);
	          excelReader.setExceptionInExcel(xlfile, xlSheetName, 12, 10, e.getMessage());
	          System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	          return false;
	    }
	  }	
	  
	  
	  
	  // EDITING THE VENDOR ACCOUNT TO UPDATE VAT ACCOUNT 
	  
	  public boolean checkEditVendorAccountToUpdate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
				
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					  
		try
		{					
			 
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.CONTROL+"e");
				
				//Checking the Close Button
				String actnameTxtName = nameTxt.getAttribute("value");
				String expnameTxtName = "Vendor A";
				
				System.out.println("account Name       : " + actnameTxtName		+ " Value Expected : " + expnameTxtName);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_CloseBtn));
				
				boolean actaccount_GeneralTab     = account_GeneralTab.isDisplayed();
				boolean actaccount_SettingsTab    = account_SettingsTab.isDisplayed();
				boolean actaccount_DetailsTab     = account_DetailsTab.isDisplayed();
				boolean actaccount_PrintLayout    = account_PrintLayout.isDisplayed();
				boolean actaccount_CreateTab      = account_CreateTab.isDisplayed();
				boolean actaccount_VatSettingsTab = account_VatSettingTab.isDisplayed();
				
				boolean actnameTxt   			  = nameTxt.isDisplayed();
				boolean actcodeTxt			      = codeTxt.isDisplayed();
				boolean actaccountTypeDropdown    = accountTypeDropdown.isDisplayed();
				boolean actaccount_groupTxt       = account_groupTxt.isDisplayed();
				boolean actcreditdaysTxt          = creditdaysTxt.isDisplayed();
				boolean actcreditLimitTxt         = creditLimitTxt.isDisplayed();
				boolean actchequeDiscountLimitTxt = chequeDiscountLimitTxt.isDisplayed();
				boolean actrateofinterestTxt      = rateofinterestTxt.isDisplayed();
				boolean actbankAccountTxt         = bankAccountTxt.isDisplayed();
				boolean actaccount_saveBtn        = account_saveBtn.isDisplayed();
				boolean actaccount_CloseBtn       = account_CloseBtn.isDisplayed();
				
				boolean expaccount_GeneralTab       = true;
				boolean expaccount_SettingsTab      = true;
				boolean expaccount_DetailsTab       = true;
				boolean expaccount_PrintLayout      = true;
				boolean expaccount_CreateTab        = true;
				boolean expaccount_VatSettingsTab   = true;
				boolean expnameTxt                  = true;
				boolean expcodeTxt                  = true;
				boolean expaccountTypeDropdown      = true;
				boolean expaccount_groupTxt         = true;
				boolean expcreditdaysTxt            = true;
				boolean expcreditLimitTxt           = true;
				boolean expchequeDiscountLimitTxt   = true;
				boolean exprateofinterestTxt        = true;
				boolean expbankAccountTxt      		= true;
				boolean expaccount_saveBtn          = true;
				boolean expaccount_CloseBtn         = true;
			 	
				
				System.out.println("****************************** checkVendorAccountLabelInVoucher  ********************************************");
				
				System.out.println("account_GeneralTab       :"+actaccount_GeneralTab		+" Value Expected : "+expaccount_GeneralTab);
				System.out.println("account_SettingsTab      :"+actaccount_SettingsTab		+" Value Expected : "+expaccount_SettingsTab);
				System.out.println("account_DetailsTab       :"+actaccount_DetailsTab		+" Value Expected : "+expaccount_DetailsTab);
				System.out.println("account_PrintLayout      :"+actaccount_PrintLayout		+" Value Expected : "+expaccount_PrintLayout);
				

				System.out.println("account_CreateTab        :"+actaccount_CreateTab		+" Value Expected : "+expaccount_CreateTab);
				System.out.println("account_TreeTabUpdate    :"+actaccount_VatSettingsTab	+" Value Expected : "+expaccount_VatSettingsTab);
				System.out.println("nameTxt                  :"+actnameTxt					+" Value Expected : "+expnameTxt);
				System.out.println("codeTxt    				 :"+actcodeTxt					+" Value Expected : "+expcodeTxt);
				System.out.println("accountTypeDropdown      :"+actaccountTypeDropdown		+" Value Expected : "+expaccountTypeDropdown);
				System.out.println("account_groupTxt         :"+actaccount_groupTxt			+" Value Expected : "+expaccount_groupTxt);
				System.out.println("creditdaysTxt        	 :"+actcreditdaysTxt			+" Value Expected : "+expcreditdaysTxt);
				System.out.println("creditLimitTxt      	 :"+actcreditLimitTxt			+" Value Expected : "+expcreditLimitTxt);
				System.out.println("chequeDiscountLimitTxt   :"+actchequeDiscountLimitTxt	+" Value Expected : "+expchequeDiscountLimitTxt);
				System.out.println("rateofinterestTxt   	 :"+actrateofinterestTxt		+" Value Expected : "+exprateofinterestTxt);
				System.out.println("bankAccountTxt   		 :"+actbankAccountTxt			+" Value Expected : "+expbankAccountTxt);
				System.out.println("account_saveBtn  	     :"+actaccount_saveBtn			+" Value Expected : "+expaccount_saveBtn);
				System.out.println("account_CloseBtn      	 :"+actaccount_CloseBtn			+" Value Expected : "+expaccount_CloseBtn);
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_VatSettingTab));
				account_VatSettingTab.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOfSupply));
				placeOfSupply.click();
				Thread.sleep(2000);
				placeOfSupply.sendKeys(Keys.HOME);
				placeOfSupply.sendKeys(Keys.SHIFT,Keys.END);
				placeOfSupply.sendKeys("Abu Dhabi");
				Thread.sleep(2000);
				placeOfSupply.sendKeys(Keys.TAB);
				
				
				/*if(errorMessageCloseBtn.isDisplayed())
				{
					errorMessageCloseBtn.click();
				}*/
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
				account_saveBtn.click();
											
				boolean actMethod=actnameTxtName.equalsIgnoreCase(expnameTxtName) 
						&& actaccount_GeneralTab==expaccount_GeneralTab && actaccount_SettingsTab==expaccount_SettingsTab
						&& actaccount_DetailsTab==expaccount_DetailsTab && actaccount_PrintLayout==expaccount_PrintLayout  
						&& actaccount_CreateTab==expaccount_CreateTab && actaccount_VatSettingsTab==expaccount_VatSettingsTab 
						&& actnameTxt==expnameTxt && actcodeTxt==expcodeTxt 
						&& actaccountTypeDropdown==expaccountTypeDropdown && actaccount_groupTxt==expaccount_groupTxt && actcreditdaysTxt==expcreditdaysTxt
						&& actcreditLimitTxt==expcreditLimitTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
						&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt 
						&& actaccount_saveBtn==expaccount_saveBtn && actaccount_CloseBtn==expaccount_CloseBtn;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 34, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 34, 8, actResult);
				
				if(actMethod==true && actnameTxtName.equalsIgnoreCase(expnameTxtName) )
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 32, 9, resPass);
					System.out.println("Test Pass : Account Screen Displayed");
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 32, 9, resFail);
					System.out.println("Test Fail : Account Screen NOT Displayed");
					return false;
				}
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 32, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			   }
		   }
	  
	  
	  
	  // CREATE ACCOUNT FOR MASTER AUTHORIZATION
	  public boolean checkCreateVendorAccountMasterAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	  {
				
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					  
		try
		{					
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.END);
				vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				vendorAccountTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 33, 6));
				Thread.sleep(2000);
				vendorAccountTxt.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				getAlert().accept();
				
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.CONTROL+"e");*/
				
				//Checking the Close Button
				String actnameTxtName = nameTxt.getAttribute("value");
				String expnameTxtName = "Test Master";
				
				System.out.println("account Name       : " + actnameTxtName		+ " Value Expected : " + expnameTxtName);
			
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
				accountTypeDropdown.sendKeys("Vendor");
				accountTypeDropdown.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_CloseBtn));
				
				boolean actaccount_GeneralTab     =account_GeneralTab.isDisplayed();
				boolean actaccount_SettingsTab    =account_SettingsTab.isDisplayed();
				boolean actaccount_DetailsTab     =account_DetailsTab.isDisplayed();
				boolean actaccount_PrintLayout    =account_PrintLayout.isDisplayed();
				boolean actaccount_CreateTab      =account_CreateTab.isDisplayed();
				boolean actaccount_VatSettingsTab =account_VatSettingTab.isDisplayed();
				
				boolean actnameTxt   			  =nameTxt.isDisplayed();
				boolean actcodeTxt			      =codeTxt.isDisplayed();
				boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
				boolean actaccount_groupTxt       =account_groupTxt.isDisplayed();
				boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
				boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
				boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
				boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
				boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();
				boolean actaccount_saveBtn        =account_saveBtn.isDisplayed();
				boolean actaccount_CloseBtn       =account_CloseBtn.isDisplayed();
				
				boolean expaccount_GeneralTab       =true;
				boolean expaccount_SettingsTab      =true;
				boolean expaccount_DetailsTab       =true;
				boolean expaccount_PrintLayout      =true;
				boolean expaccount_CreateTab        =true;
				boolean expaccount_VatSettingsTab   =true;
				boolean expnameTxt                  =true;
				boolean expcodeTxt                  =true;
				boolean expaccountTypeDropdown      =true;
				boolean expaccount_groupTxt         =true;
				boolean expcreditdaysTxt            =true;
				boolean expcreditLimitTxt           =true;
				boolean expchequeDiscountLimitTxt   =true;
				boolean exprateofinterestTxt        =true;
				boolean expbankAccountTxt      		=true;
				boolean expaccount_saveBtn          =true;
				boolean expaccount_CloseBtn         =true;
				
				
				System.out.println("****************************** checkVendorAccountLabelInVoucher  ********************************************");
				
				System.out.println("account_GeneralTab       :"+actaccount_GeneralTab		+" Value Expected : "+expaccount_GeneralTab);
				System.out.println("account_SettingsTab      :"+actaccount_SettingsTab		+" Value Expected : "+expaccount_SettingsTab);
				System.out.println("account_DetailsTab       :"+actaccount_DetailsTab		+" Value Expected : "+expaccount_DetailsTab);
				System.out.println("account_PrintLayout      :"+actaccount_PrintLayout		+" Value Expected : "+expaccount_PrintLayout);
				

				System.out.println("account_CreateTab        :"+actaccount_CreateTab		+" Value Expected : "+expaccount_CreateTab);
				System.out.println("account_TreeTabUpdate    :"+actaccount_VatSettingsTab	+" Value Expected : "+expaccount_VatSettingsTab);
				System.out.println("nameTxt                  :"+actnameTxt					+" Value Expected : "+expnameTxt);
				System.out.println("codeTxt    				 :"+actcodeTxt					+" Value Expected : "+expcodeTxt);
				System.out.println("accountTypeDropdown      :"+actaccountTypeDropdown		+" Value Expected : "+expaccountTypeDropdown);
				System.out.println("account_groupTxt         :"+actaccount_groupTxt			+" Value Expected : "+expaccount_groupTxt);
				System.out.println("creditdaysTxt        	 :"+actcreditdaysTxt			+" Value Expected : "+expcreditdaysTxt);
				System.out.println("creditLimitTxt      	 :"+actcreditLimitTxt			+" Value Expected : "+expcreditLimitTxt);
				System.out.println("chequeDiscountLimitTxt   :"+actchequeDiscountLimitTxt	+" Value Expected : "+expchequeDiscountLimitTxt);
				System.out.println("rateofinterestTxt   	 :"+actrateofinterestTxt		+" Value Expected : "+exprateofinterestTxt);
				System.out.println("bankAccountTxt   		 :"+actbankAccountTxt			+" Value Expected : "+expbankAccountTxt);
				System.out.println("account_saveBtn  	     :"+actaccount_saveBtn			+" Value Expected : "+expaccount_saveBtn);
				System.out.println("account_CloseBtn      	 :"+actaccount_CloseBtn			+" Value Expected : "+expaccount_CloseBtn);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_VatSettingTab));
				account_VatSettingTab.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOfSupply));
				placeOfSupply.click();
				placeOfSupply.sendKeys("Abu Dhabi");
				
				/*if(errorMessageCloseBtn.isDisplayed())
				{
					errorMessageCloseBtn.click();
				}
				
				*/
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
				account_saveBtn.click();
				
								
				boolean actMethod=actnameTxtName.equalsIgnoreCase(expnameTxtName) 
						&& actaccount_GeneralTab==expaccount_GeneralTab && actaccount_SettingsTab==expaccount_SettingsTab
						&& actaccount_DetailsTab==expaccount_DetailsTab && actaccount_PrintLayout==expaccount_PrintLayout  
						&& actaccount_CreateTab==expaccount_CreateTab && actaccount_VatSettingsTab==expaccount_VatSettingsTab 
						&& actnameTxt==expnameTxt && actcodeTxt==expcodeTxt 
						&& actaccountTypeDropdown==expaccountTypeDropdown && actaccount_groupTxt==expaccount_groupTxt && actcreditdaysTxt==expcreditdaysTxt
						&& actcreditLimitTxt==expcreditLimitTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
						&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt 
						&& actaccount_saveBtn==expaccount_saveBtn && actaccount_CloseBtn==expaccount_CloseBtn;				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 34, 7);
				
		        excelReader.setCellData(xlfile, "PurchaseVoucherN", 34, 8, actResult);
				
				if(actMethod==true && actnameTxtName.equalsIgnoreCase(expnameTxtName) )
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 32, 9, resPass);
					System.out.println("Test Pass : Account Screen Displayed");
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 32, 9, resFail);
					System.out.println("Test Fail : Account Screen NOT Displayed");
					return false;
				}
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 32, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			   }
		   }
	  
	  
		
	  
	  public  boolean checkSaveBtnInAccountsMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
      {

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		 try
		 {
	   	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_GeneralTab));			 
			 account_GeneralTab.click();
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
			 
			 account_saveBtn.click();
			 
			 String expErrorMessage =excelReader.getCellData("PurchaseVoucherN", 27, 7);
			 
			 String validationMessage=checkValidationMessage(expErrorMessage);
			 
			 excelReader.setCellData(xlfile, "PurchaseVoucherN", 27, 8, validationMessage);
			 
			  
			 System.out.println("************************************* checkSaveButtonWithoutInputNameMandatoryFields  *********************************");
			 
			 System.out.println("error Message  :  "+validationMessage +" Value Expected : "+"TRUE");
			
			 if (validationMessage.equalsIgnoreCase(expErrorMessage))
			 {
				 excelReader.setCellData(xlfile, "PurchaseVoucherN", 26, 9, resPass);			 
				 return true;
			 }
			 else
			 {
				 excelReader.setCellData(xlfile, "PurchaseVoucherN", 26, 9, resFail);
				 return false;
			 }
		 }
		 catch (Exception e) 
	     {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 26, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  return false;
	    }
      }
	

	 
	public boolean checkSavingAccountInVoucherEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    {		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
			nameTxt.click();
			nameTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 29, 6));
			nameTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
			codeTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 30, 6));
			codeTxt.sendKeys(Keys.TAB);
			
			
			String actnameTxt=nameTxt.getAttribute("value");
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 29, 8, actnameTxt);
			
			String actcodeTxt=codeTxt.getAttribute("value");
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 30, 8, actcodeTxt);
			
			String expnameTxt=excelReader.getCellData("PurchaseVoucherN", 29, 7);
			String expcodeTxt=excelReader.getCellData("PurchaseVoucherN", 30, 7);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_groupTxt));
			account_groupTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 31, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_groupTxt));
			account_groupTxt.sendKeys(Keys.TAB);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
			account_saveBtn.click();

			
			System.out.println("************************************* checkSavingVendorAccount  *********************************");
			System.out.println("nameTxt 		  :  "+actnameTxt  		   +" Value Expected : "+expnameTxt);
			System.out.println("codeTxt  		  :  "+actcodeTxt 		   +" Value Expected : "+expcodeTxt);

			if(actnameTxt.equalsIgnoreCase(expnameTxt) && actcodeTxt.equalsIgnoreCase(expcodeTxt))
			{
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 28, 9, resPass);
				System.out.println("Test pass : Vendor C Saved Succesfully");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 28, 9, resFail);
				System.out.println("Test Fail : Vendor C NOT Saved Succesfully");
				return false;
			}
		   }
		   catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 28, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
		}
		 
		
	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
	private static List<WebElement> vendorAccountListCount; 		
	
	public boolean checkCloseBtnInAccountCreationPageInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					  
		try
		{					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys(Keys.END);
			vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			vendorAccountTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 33, 6));
			Thread.sleep(2000);
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys(Keys.CONTROL+"e");*/
			
			//Checking the Close Button
			String actnameTxtName = nameTxt.getAttribute("value");
			String expnameTxtName = excelReader.getCellData("PurchaseVoucherN", 33, 7);
			
			System.out.println("account Name       : " + actnameTxtName		+ " Value Expected : " + expnameTxtName);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_CloseBtn));
			
			boolean actaccount_GeneralTab     =account_GeneralTab.isDisplayed();
			boolean actaccount_SettingsTab    =account_SettingsTab.isDisplayed();
			boolean actaccount_DetailsTab     =account_DetailsTab.isDisplayed();
			boolean actaccount_PrintLayout    =account_PrintLayout.isDisplayed();
			/*boolean actaccount_TreeTabUpdate  =account_TreeTabUpdate.isDisplayed();
			boolean actaccount_DocumentTab    =account_DocumentTab.isDisplayed();
			boolean actaccount_CreateTab      =account_CreateTab.isDisplayed();*/
			boolean actnameTxt   			  =nameTxt.isDisplayed();
			boolean actcodeTxt			      =codeTxt.isDisplayed();
			boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
			boolean actaccount_groupTxt       =account_groupTxt.isDisplayed();
			boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
			boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
			boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
			boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
			boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();
			boolean actaccount_saveBtn        =account_saveBtn.isDisplayed();
			boolean actaccount_CloseBtn       =account_CloseBtn.isDisplayed();
			
			boolean expaccount_GeneralTab       =true;
			boolean expaccount_SettingsTab      =true;
			boolean expaccount_DetailsTab       =true;
			boolean expaccount_PrintLayout      =true;
			boolean expaccount_TreeTabUpdate    =true;
			boolean expaccount_DocumentTab      =true;
			boolean expaccount_CreateTab        =true;
			boolean expnameTxt                  =true;
			boolean expcodeTxt                  =true;
			boolean expaccountTypeDropdown      =true;
			boolean expaccount_groupTxt         =true;
			boolean expcreditdaysTxt            =true;
			boolean expcreditLimitTxt           =true;
			boolean expchequeDiscountLimitTxt   =true;
			boolean exprateofinterestTxt        =true;
			boolean expbankAccountTxt      		=true;
			boolean expaccount_saveBtn          =true;
			boolean expaccount_CloseBtn         =true;
			
			
			System.out.println("****************************** checkVendorAccountLabelInVoucher  ********************************************");
			
			System.out.println("account_GeneralTab       :"+actaccount_GeneralTab		+" Value Expected : "+expaccount_GeneralTab);
			System.out.println("account_SettingsTab      :"+actaccount_SettingsTab		+" Value Expected : "+expaccount_SettingsTab);
			System.out.println("account_DetailsTab       :"+actaccount_DetailsTab		+" Value Expected : "+expaccount_DetailsTab);
			System.out.println("account_PrintLayout      :"+actaccount_PrintLayout		+" Value Expected : "+expaccount_PrintLayout);
			/*System.out.println("account_TreeTabUpdate    :"+actaccount_TreeTabUpdate	+" Value Expected : "+expaccount_TreeTabUpdate);
			System.out.println("account_DocumentTab      :"+actaccount_DocumentTab		+" Value Expected : "+expaccount_DocumentTab);
			System.out.println("account_CreateTab        :"+actaccount_CreateTab		+" Value Expected : "+expaccount_CreateTab);*/
			System.out.println("nameTxt                  :"+actnameTxt					+" Value Expected : "+expnameTxt);
			System.out.println("codeTxt    				 :"+actcodeTxt					+" Value Expected : "+expcodeTxt);
			System.out.println("accountTypeDropdown      :"+actaccountTypeDropdown		+" Value Expected : "+expaccountTypeDropdown);
			System.out.println("account_groupTxt         :"+actaccount_groupTxt			+" Value Expected : "+expaccount_groupTxt);
			System.out.println("creditdaysTxt        	 :"+actcreditdaysTxt			+" Value Expected : "+expcreditdaysTxt);
			System.out.println("creditLimitTxt      	 :"+actcreditLimitTxt			+" Value Expected : "+expcreditLimitTxt);
			System.out.println("chequeDiscountLimitTxt   :"+actchequeDiscountLimitTxt	+" Value Expected : "+expchequeDiscountLimitTxt);
			System.out.println("rateofinterestTxt   	 :"+actrateofinterestTxt		+" Value Expected : "+exprateofinterestTxt);
			System.out.println("bankAccountTxt   		 :"+actbankAccountTxt			+" Value Expected : "+expbankAccountTxt);
			System.out.println("account_saveBtn  	     :"+actaccount_saveBtn			+" Value Expected : "+expaccount_saveBtn);
			System.out.println("account_CloseBtn      	 :"+actaccount_CloseBtn			+" Value Expected : "+expaccount_CloseBtn);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_CloseBtn));
			account_CloseBtn.click();
					
			
			boolean actMethod=actnameTxtName.equalsIgnoreCase(expnameTxtName) 
					&& actaccount_GeneralTab==expaccount_GeneralTab && actaccount_SettingsTab==expaccount_SettingsTab
					&& actaccount_DetailsTab==expaccount_DetailsTab && actaccount_PrintLayout==expaccount_PrintLayout 
					/*&& actaccount_TreeTabUpdate==expaccount_TreeTabUpdate && actaccount_DocumentTab==expaccount_DocumentTab 
					&& actaccount_CreateTab==expaccount_CreateTab */&& actnameTxt==expnameTxt && actcodeTxt==expcodeTxt 
					&& actaccountTypeDropdown==expaccountTypeDropdown && actaccount_groupTxt==expaccount_groupTxt && actcreditdaysTxt==expcreditdaysTxt
					&& actcreditLimitTxt==expcreditLimitTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
					&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt 
					&& actaccount_saveBtn==expaccount_saveBtn && actaccount_CloseBtn==expaccount_CloseBtn;
			
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherN", 34, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 34, 8, actResult);
			
			if(actMethod==true && actnameTxtName.equalsIgnoreCase(expnameTxtName) )
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 32, 9, resPass);
				System.out.println("Test Pass : Account Screen Displayed");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 32, 9, resFail);
				System.out.println("Test Fail : Account Screen NOT Displayed");
				return false;
			}
		}
		 catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 32, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
	   }
		
	  
		
		// THIS IS PREVIOUS CODE
		@FindBy(xpath="//*[@id='id_transactionentry_header_tabdetail_container']//div/label")
		private static List<WebElement>  transEntryPageHeaderFieldsList;
		 
		public boolean checkPurchaseVoucherNewEntryPageHeaderFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
			try
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
	         int transEntryPageHeaderFieldsListCount=transEntryPageHeaderFieldsList.size();
			 
			 ArrayList<String> acttransEntryPageHeaderFieldsList          = new ArrayList<String>();
				
			 for (int i = 0; i < transEntryPageHeaderFieldsListCount; i++) 
		 	 {
				String data=transEntryPageHeaderFieldsList.get(i).getText();
				acttransEntryPageHeaderFieldsList.add(data);
				
		 	 }
	        
			String acttransEntryPageHeaderFields=acttransEntryPageHeaderFieldsList.toString();
			String exptransEntryPageHeaderFields=excelReader.getCellData("PurchaseVoucherN", 17, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 17, 8, acttransEntryPageHeaderFields);
			
			
			boolean actEntryPageHeaderFieldsDocNumber     =documentNumberTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsDate          =dateTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsNarration     =purchaseVoucherVATNewNarration.isDisplayed();
			//boolean actEntryPageHeaderFieldsPurchaseAc    =purchaseAccountTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsVendorAc      =vendorAccountTxt.isDisplayed();
			boolean actEntryPageHeaderFieldRaiseReceipt   =voucherRaiseReceiptCheckBox.isDisplayed();
			boolean actEntryPageHeaderFieldsDepartment    =departmentTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsDueDate       =voucherHeaderDueDate.isDisplayed();                                         
			boolean actEntryPageHeaderFieldsLocalExchRate =voucherHeaderLocalExchangeRate.isDisplayed();
			boolean actEntryPageHeaderFieldsCurrency      =voucherHeaderCurrency.isDisplayed();
			boolean actEntryPageHeaderFieldsExchRate      =voucherHeaderExchangeRate.isDisplayed();
			boolean actEntryPageHeaderFieldsWarehouse     =voucherHeaderCurrency.isDisplayed();
			//boolean actEntryPageHeaderFieldsTest          =purchaseVoucherNewTest.isDisplayed();	
			
			boolean expEntryPageHeaderFieldsDocNumber     =true;
			boolean expEntryPageHeaderFieldsDate          =true;
			boolean expEntryPageHeaderFieldsNarration     =true;
			boolean expEntryPageHeaderFieldsPurchaseAc    =true;
			boolean expEntryPageHeaderFieldsVendorAc      =true;
			boolean expEntryPageHeaderFieldRaiseReceipt   =true;
			boolean expEntryPageHeaderFieldsDepartment    =true;
			boolean expEntryPageHeaderFieldsDueDate       =true;                                         
			boolean expEntryPageHeaderFieldsLocalExchRate =true;
			boolean expEntryPageHeaderFieldsCurrency      =true;
			boolean expEntryPageHeaderFieldsExchRate      =true;
			boolean expEntryPageHeaderFieldsWarehouse     =true;
			boolean expEntryPageHeaderFieldsTest          =true;
			

			
			System.out.println("************************************* checkPurchaseVoucherNewEntryPageHeaderFields  *******************************************************");
			System.out.println("Entry Page Header Doc No Value Actual         :"+actEntryPageHeaderFieldsDocNumber    +"  Value Expected : "+expEntryPageHeaderFieldsDocNumber);
			System.out.println("Entry Page Header Date  Value Actual          :"+actEntryPageHeaderFieldsDate         +"  Value Expected : "+expEntryPageHeaderFieldsDate);
			System.out.println("Entry Page Header Narration Value Actual      :"+actEntryPageHeaderFieldsNarration    +"  Value Expected : "+expEntryPageHeaderFieldsNarration);
			//System.out.println("Entry Page Header Purchase Value Actual       :"+actEntryPageHeaderFieldsPurchaseAc   +"  Value Expected : "+expEntryPageHeaderFieldsPurchaseAc);	
			System.out.println("Entry Page Header Vendor Value Actual         :"+actEntryPageHeaderFieldsVendorAc     +"  Value Expected : "+expEntryPageHeaderFieldsVendorAc);
			System.out.println("Entry Page Header Raise Receipt Value Actual  :"+actEntryPageHeaderFieldRaiseReceipt  +"  Value Expected : "+expEntryPageHeaderFieldRaiseReceipt);
			System.out.println("Entry Page Header Department Value Actual     :"+actEntryPageHeaderFieldsDepartment   +"  Value Expected : "+expEntryPageHeaderFieldsDepartment);
			System.out.println("Entry Page Header Due Date Value Actual       :"+actEntryPageHeaderFieldsDueDate      +"  Value Expected : "+expEntryPageHeaderFieldsDueDate);	
			System.out.println("Entry Page Header Local Exch Rate Value Actual:"+actEntryPageHeaderFieldsLocalExchRate+"  Value Expected : "+expEntryPageHeaderFieldsLocalExchRate);
			System.out.println("Entry Page Header Currency Value Actual       :"+actEntryPageHeaderFieldsCurrency     +"  Value Expected : "+expEntryPageHeaderFieldsCurrency);
			System.out.println("Entry Page Header Exch Rate Value Actual      :"+actEntryPageHeaderFieldsExchRate     +"  Value Expected : "+expEntryPageHeaderFieldsExchRate);
			System.out.println("Entry Page Header Warehouse Value Actual      :"+actEntryPageHeaderFieldsWarehouse    +"  Value Expected : "+expEntryPageHeaderFieldsWarehouse);	
			//System.out.println("Entry Page Header Test Value Actual           :"+actEntryPageHeaderFieldsTest         +"  Value Expected : "+expEntryPageHeaderFieldsTest);
			
			
			boolean actMethod=actEntryPageHeaderFieldsDocNumber==expEntryPageHeaderFieldsDocNumber && actEntryPageHeaderFieldsDate==expEntryPageHeaderFieldsDate 
					&& actEntryPageHeaderFieldsNarration==expEntryPageHeaderFieldsNarration /*&& actEntryPageHeaderFieldsPurchaseAc==expEntryPageHeaderFieldsPurchaseAc*/
					&& actEntryPageHeaderFieldsVendorAc==expEntryPageHeaderFieldsVendorAc && actEntryPageHeaderFieldRaiseReceipt==expEntryPageHeaderFieldRaiseReceipt
					&& actEntryPageHeaderFieldsDepartment==expEntryPageHeaderFieldsDepartment && actEntryPageHeaderFieldsDueDate==expEntryPageHeaderFieldsDueDate
					&& actEntryPageHeaderFieldsLocalExchRate==expEntryPageHeaderFieldsLocalExchRate && actEntryPageHeaderFieldsCurrency==expEntryPageHeaderFieldsCurrency
					&& actEntryPageHeaderFieldsWarehouse==expEntryPageHeaderFieldsWarehouse /*&& actEntryPageHeaderFieldsTest==expEntryPageHeaderFieldsTest*/
					&& actEntryPageHeaderFieldsExchRate==expEntryPageHeaderFieldsExchRate;
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherN", 18, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 18, 8, actResult.toUpperCase());
			
	        if(actMethod==true)
	        	
			{
				System.out.println("Test Pass : entry Page Options Are Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 16, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 16, 9, resFail);
				return false;
			}
		   }
				 catch (Exception e) 
		  		   {
		  			  String exception =e.getMessage();
		  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 16, 10, exception);
		  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  			  return false;
		  		   }
			}
		
		
		
		
		/*@FindBy(xpath="//div[contains(text(),'Warehouse')]")
		private static WebElement voucherBodyWareHouseName;
		
		@FindBy(xpath="//div[contains(text(),'Item')]")
		private static WebElement voucherBodyItemName;
		
		@FindBy(xpath="//div[contains(text(),'Units')]")
		private static WebElement voucherBodyUnitsName;
		
		@FindBy(xpath="//div[contains(text(),'RD')]")
		private static WebElement  voucherBodyRDName;
		
		@FindBy(xpath="//div[contains(text(),'Avg Rate(O)')]")
		private static WebElement  voucherBodyAvgRateName;
		               
		@FindBy(xpath="//div[contains(text(),'Quantity')]")
		private static WebElement  voucherBodyQtyName;

		@FindBy(xpath="//div[contains(text(),'L-Purchases Orders')]")
		private static WebElement  voucherBodyLPOName;
		
		@FindBy(xpath="//div[contains(text(),'Rate')]")
		private static WebElement  povoucherBodyRateName;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_7']/div[1]")
		private static WebElement  voucherBodyRateName;
		
		@FindBy(xpath="//div[contains(text(),'Gross')]")
		private static WebElement voucherBodyGrossName;
		
		@FindBy(xpath="//div[contains(text(),'Batch')]")
		private static WebElement voucherBodyBatchName;
		
		@FindBy(xpath="//div[contains(text(),'Bins')]")
		private static WebElement voucherBodyBinsName;
		
		@FindBy(xpath="//div[contains(text(),'Expiry Date')]")
		private static WebElement voucherBodyExpirytDateName;
		
		@FindBy(xpath="//div[contains(text(),'RMA')]")
		private static WebElement voucherBodyRMAName;
		
		@FindBy(xpath="//tbody[@id='id_transaction_entry_detail_table_body']")
		private static WebElement voucherBody;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_head']")
		private static WebElement bodyTable;
		
	    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_row_heading']/th[1]")
		private static WebElement voucherBodyHeaderIndex;
*/			
		public boolean checkPurchaseVoucherNewEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyItemColTxt));
			
			boolean actBodyItemName     =bodyItemColTxt.isDisplayed();
			boolean actBodyUnitName     =voucherBodyUnitsName.isDisplayed();
			boolean actBodyRDName       =voucherBodyRDName.isDisplayed();
			
			JavascriptExecutor js = (JavascriptExecutor) getDriver();
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyGrossName);
			
			//boolean actBodyAvgRateName  =voucherBodyAvgRateName.isDisplayed();
			boolean actBodyQtyName      =voucherBodyQtyName.isDisplayed();
			boolean actBodyLPOName      =voucherBodyLPOName.isDisplayed();
			
			/*JavascriptExecutor js = (JavascriptExecutor) getDriver();
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyGrossName);
			*/
			
			boolean actBodyRateName      =voucherBodyRateName.isDisplayed();
			boolean actBodyGrossName     =voucherBodyGrossName.isDisplayed();
			/*boolean actBodyBatchName     =voucherBodyBatchName.isDisplayed();
			boolean actBodyBinsName      =voucherBodyBinsName.isDisplayed();
			boolean actBodyRMAName       =voucherBodyRMAName.isDisplayed();
			boolean actBodyExpiryDateName=voucherBodyExpirytDateName.isDisplayed();*/
			
		   
			boolean actBodyR1C1         =select1stRow_1stColumn.isDisplayed();
			boolean actBodyR1C2         =select1stRow_2ndColumn.isDisplayed();
			boolean actBodyR1C3         =select1stRow_3rdColumn.isDisplayed();
			boolean actBodyR1C4         =select1stRow_4thColumn.isDisplayed();
			boolean actBodyR1C5         =select1stRow_5thColumn.isDisplayed();

			
			
			
			boolean expBodyItemName     =true;
			boolean expBodyUnitName     =true;
			boolean expBodyRDName       =true;
			boolean expBodyAvgRateName  =true;
			boolean expBodyQtyName      =true;
			boolean expBodyLPOName      =true;
			
			
			boolean expBodyRateName      =true;
			boolean expBodyGrossName     =true;
			boolean expBodyBatchName     =true;
			boolean expBodyBinsName      =true;
			boolean expBodyRMAName       =true;
			boolean expBodyExpiryDateName=true;
			
		   
			boolean expBodyR1C1         =true;
			boolean expBodyR1C2         =true;
			boolean expBodyR1C3         =true;
			boolean expBodyR1C4         =true;
			boolean expBodyR1C5         =true;
			
			System.out.println("*************************** checkPurchaseVoucherNewEntryPageBodyFields  **********************************");
			
			
			System.out.println("PV Body Item Value Actual                :  " + actBodyItemName       +"  Value Expected : " + expBodyItemName);
			System.out.println("PV Body Unit Value Actual                :  " + actBodyUnitName       +"  Value Expected : " + expBodyUnitName);
			System.out.println("PV Body RD Value Actual                  :  " + actBodyRDName         +"  Value Expected : " + expBodyAvgRateName);
			//System.out.println("PV Body Avg Rate Value Actual            :  " + actBodyAvgRateName    +"  Value Expected : " + expBodyAvgRateName);
			System.out.println("PV Body Qty Value Actual                 :  " + actBodyQtyName        +"  Value Expected : " + expBodyQtyName);
			System.out.println("PV Body LPO Value Actual                 :  " + actBodyLPOName        +"  Value Expected : " + expBodyLPOName);

			System.out.println("PV Body Rate Value Actual                :  " + actBodyRateName       +"  Value Expected : " + expBodyRateName);
			System.out.println("PV Body Gross Value Actual               :  " + actBodyGrossName      +"  Value Expected : " + expBodyGrossName);
			/*System.out.println("PV Body Batch Value Actual               :  " + actBodyBatchName      +"  Value Expected : " + expBodyBatchName);
			
			System.out.println("PV Body Expiry Value Actual              :  " + actBodyExpiryDateName +"  Value Expected : " + expBodyExpiryDateName);
			
			System.out.println("PV Body RMA Value Actual                 :  " + actBodyRMAName        +"  Value Expected : " + expBodyRMAName);
			System.out.println("PV Body Bins Value Actual                :  " + actBodyBinsName       +"  Value Expected : " + expBodyBinsName);*/
			System.out.println("PV Body R1C1 Value Actual                :  " + actBodyR1C1           +"  Value Expected : " + expBodyR1C1);
			System.out.println("PV Body R1C2 Value Actual                :  " + actBodyR1C2           +"  Value Expected : " + expBodyR1C2);
			System.out.println("PV Body R2C3 Value Actual                :  " + actBodyR1C3           +"  Value Expected : " + expBodyR1C3);
			System.out.println("PV Body R3C4 Value Actual                :  " + actBodyR1C4           +"  Value Expected : " + expBodyR1C4);
			System.out.println("PV Body R4C4 Value Actual                :  " + actBodyR1C5           +"  Value Expected : " + expBodyR1C5);
			
			
			Boolean actMethod=actBodyItemName==expBodyItemName && actBodyUnitName==expBodyUnitName &&
					  actBodyRDName==expBodyRDName /*&& actBodyAvgRateName==expBodyAvgRateName*/ &&
				      actBodyQtyName==expBodyQtyName && actBodyLPOName==expBodyLPOName && 
					
						 actBodyR1C1==expBodyR1C1 && actBodyR1C2==expBodyR1C2 &&
						 actBodyR1C3==expBodyR1C3 && actBodyR1C4==expBodyR1C4 && expBodyR1C5==actBodyR1C5 &&
				
		                actBodyRateName==expBodyRateName  && actBodyGrossName==expBodyGrossName/* &&
						actBodyBatchName==expBodyBatchName && actBodyExpiryDateName==expBodyExpiryDateName && 
						actBodyRMAName==expBodyRMAName && actBodyBinsName==expBodyBinsName*/;
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherN", 20, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 20, 8, actResult.toUpperCase());
		  			
			if(actMethod==true) 
				{
					System.out.println(" Test Pass: entry Page Body Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 19, 9, resPass);
					
					js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
					
					return true;
				}
				else
				{
					System.out.println(" Test Fail: entry Page Body Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 19, 9, resFail);
					
					js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
					
					return false;
				}
		    }
		     catch (Exception e) 
		     {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 19, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		    }
		}
		
		
		
	public boolean checkPurchaseVoucherNewEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
			
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
			jumpToFooterBtn.click();
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
			
			boolean actEntryPageFooterFieldsNetLabel  = netLabel.isDisplayed();
			boolean actEntryPageFooterFieldsNetAmount = netAmount.isDisplayed();

			boolean expEntryPageFooterFieldsNetLabel  = true;
			boolean expEntryPageFooterFieldsNetAmount = true;	
			
			System.out.println("***************************************** checkOpeningStocksNewEntryPageFooterFields  ***************************************************");

			System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+   " Value Expected : "+expEntryPageFooterFieldsNetLabel);
			System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+  " Value Expected : "+expEntryPageFooterFieldsNetAmount);

			
			boolean actMethod=actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherN", 22, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 22, 8, actResult.toUpperCase());
					
			if(actMethod==true)
			{
				System.out.println("Test Pass : entry Page Footer Options Are Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 21, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 21, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 21, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
		}
		
		
		
		

		public boolean checkPurchaseVoucherNewEntryPageDocumentNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
			jumpToHeaderSectionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actDocumentNumber  =documentNumberTxt.getAttribute("value");
			String expDocumentNumber  ="SU/DUB/TEXT1";
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 23, 8, actDocumentNumber);

			System.out.println("***************************************** checkPurchaseVoucherNewEntryPageDocumentNumber  ***************************************************");
			System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actDocumentNumber   +" Value Expected : "+expDocumentNumber);
			
			
			if(actDocumentNumber.equalsIgnoreCase(expDocumentNumber))
			{
				System.out.println("Test Pass : Document No is 1");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 23, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 23, 9, resFail);
				return false;
			}
			}
			 catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 23, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			   }
		}
		
		

		public boolean checkAccountPageOnClickOnAccountsInVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VendorAccountLabel));
			VendorAccountLabel.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_CloseBtn));
			
			boolean actaccount_GeneralTab     =account_GeneralTab.isDisplayed();
			boolean actaccount_SettingsTab    =account_SettingsTab.isDisplayed();
			boolean actaccount_DetailsTab     =account_DetailsTab.isDisplayed();
			boolean actaccount_PrintLayout    =account_PrintLayout.isDisplayed();
			/*boolean actaccount_TreeTabUpdate  =account_TreeTabUpdate.isDisplayed();
			boolean actaccount_DocumentTab    =account_DocumentTab.isDisplayed();
			boolean actaccount_CreateTab      =account_CreateTab.isDisplayed();
			boolean actaccount_VatSettingTab  =account_VatSettingsTab.isDisplayed();*/
			boolean actnameTxt   			  =nameTxt.isDisplayed();
			boolean actcodeTxt			      =codeTxt.isDisplayed();
			boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
			boolean actaccount_groupTxt       =account_groupTxt.isDisplayed();
			boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
			boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
			boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
			boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
			boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();
			boolean actaccount_saveBtn        =account_saveBtn.isDisplayed();
			boolean actaccount_CloseBtn       =account_CloseBtn.isDisplayed();
			
			boolean expaccount_GeneralTab       =true;
			boolean expaccount_SettingsTab      =true;
			boolean expaccount_DetailsTab       =true;
			boolean expaccount_PrintLayout      =true;
			boolean expaccount_TreeTabUpdate    =true;
			boolean expaccount_DocumentTab      =true;
			boolean expaccount_CreateTab        =true;
			boolean expaccount_VatSettingTab    =true;
			boolean expnameTxt                  =true;
			boolean expcodeTxt                  =true;
			boolean expaccountTypeDropdown      =true;
			boolean expaccount_groupTxt         =true;
			boolean expcreditdaysTxt            =true;
			boolean expcreditLimitTxt           =true;
			boolean expchequeDiscountLimitTxt   =true;
			boolean exprateofinterestTxt        =true;
			boolean expbankAccountTxt      		=true;
			boolean expaccount_saveBtn          =true;
			boolean expaccount_CloseBtn         =true;
			
			
			System.out.println("****************************** checkVendorAccountLabelInVoucher  ********************************************");
			
			System.out.println("account_GeneralTab       :"+actaccount_GeneralTab		+" Value Expected : "+expaccount_GeneralTab);
			System.out.println("account_SettingsTab      :"+actaccount_SettingsTab		+" Value Expected : "+expaccount_SettingsTab);
			System.out.println("account_DetailsTab       :"+actaccount_DetailsTab		+" Value Expected : "+expaccount_DetailsTab);
			System.out.println("account_PrintLayout      :"+actaccount_PrintLayout		+" Value Expected : "+expaccount_PrintLayout);
			/*System.out.println("account_TreeTabUpdate    :"+actaccount_TreeTabUpdate	+" Value Expected : "+expaccount_TreeTabUpdate);
			System.out.println("account_DocumentTab      :"+actaccount_DocumentTab		+" Value Expected : "+expaccount_DocumentTab);
			System.out.println("account_CreateTab        :"+actaccount_CreateTab		+" Value Expected : "+expaccount_CreateTab);
			System.out.println("account_VatSettingsTab   :"+actaccount_VatSettingTab    +" Value Expected : "+expaccount_VatSettingTab);*/
			System.out.println("nameTxt 				 :"+actnameTxt					+" Value Expected : "+expnameTxt);
			System.out.println("codeTxt    				 :"+actcodeTxt					+" Value Expected : "+expcodeTxt);
			System.out.println("accountTypeDropdown      :"+actaccountTypeDropdown		+" Value Expected : "+expaccountTypeDropdown);
			System.out.println("account_groupTxt         :"+actaccount_groupTxt			+" Value Expected : "+expaccount_groupTxt);
			System.out.println("creditdaysTxt        	 :"+actcreditdaysTxt			+" Value Expected : "+expcreditdaysTxt);
			System.out.println("creditLimitTxt      	 :"+actcreditLimitTxt			+" Value Expected : "+expcreditLimitTxt);
			System.out.println("chequeDiscountLimitTxt   :"+actchequeDiscountLimitTxt	+" Value Expected : "+expchequeDiscountLimitTxt);
			System.out.println("rateofinterestTxt   	 :"+actrateofinterestTxt		+" Value Expected : "+exprateofinterestTxt);
			System.out.println("bankAccountTxt   		 :"+actbankAccountTxt			+" Value Expected : "+expbankAccountTxt);
			System.out.println("account_saveBtn  	     :"+actaccount_saveBtn			+" Value Expected : "+expaccount_saveBtn);
			System.out.println("account_CloseBtn      	 :"+actaccount_CloseBtn			+" Value Expected : "+expaccount_CloseBtn);
			
			
			boolean actMethod=actaccount_GeneralTab==expaccount_GeneralTab && actaccount_SettingsTab==expaccount_SettingsTab && actaccount_DetailsTab==expaccount_DetailsTab
					&& actaccount_PrintLayout==expaccount_PrintLayout /*&& actaccount_TreeTabUpdate==expaccount_TreeTabUpdate
					&& actaccount_DocumentTab==expaccount_DocumentTab && actaccount_CreateTab==expaccount_CreateTab */
					&& actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown
					&& actaccount_groupTxt==expaccount_groupTxt && actcreditdaysTxt==expcreditdaysTxt
					&& actcreditLimitTxt==expcreditLimitTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
					&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt 
					&& actaccount_saveBtn==expaccount_saveBtn && actaccount_CloseBtn==expaccount_CloseBtn;
			
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherN", 25, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 25, 8, actResult.toUpperCase());

			
			
			if(actMethod==true)
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 24, 9, resPass);
				System.out.println("Test Pass : Account Screen Displayed");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 24, 9, resFail);
				
				return false;
			}
		   }
		   catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 24, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
	    }
		 
		
		

		
		
		
		
		

		public boolean checkPurchaseVoucherNewSaveWithoutMandatoryFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			
			
            String expSaveValidationMessageOnSaveWithoutInptData=excelReader.getCellData("PurchaseVoucherN", 35, 7);
			
			String actMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithoutInptData);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 35, 8, actMessage);

			
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			String actdata=errorMessage.getText();
					
			String expdata1="Controls marked with arrow mark, require Values";
			String expdata2="Main -> PurchaseAC";
			String expdata3="Main -> VendorAC";
			String expdata4="Main -> Department";
			String expdata5="Main -> Warehouse";
			
			System.out.println(actdata);
			
			
			String actSaveMandatoryWithNoInputValidationMessage       =errorMessage.getText();
			
			 excelReader.setCellData(xlfile, xlSheetName, 1527, 8, actSaveMandatoryWithNoInputValidationMessage);
			
			String expSaveMandatoryWithNoInputValidationMessageOne    ="Controls marked with arrow mark, require Values";
			String expSaveMandatoryWithNoInputValidationMessageTwo    ="Main -> PurchaseAC";
			String expSaveMandatoryWithNoInputValidationMessageThree  ="Main -> VendorAC";
			String expSaveMandatoryWithNoInputValidationMessageFour   ="Main -> Department";
			String expSaveMandatoryWithNoInputValidationMessageFive   ="Main -> Warehouse";
			*/
			
			System.out.println("*********************************************** checkPurchaseVoucherNewSaveWithoutMandatoryFields  ********************************************");
			System.out.println("Entry Page Save with No Mandatory Input Value Actual  : "+actMessage  +" Value Expected : "+expSaveValidationMessageOnSaveWithoutInptData);	
			
			if(actMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithoutInptData))
			{
				System.out.println("Test Pass : Error Message Displayed");
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 35, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 35, 9, resFail);
				
				return false;
			}
		}
		
		catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 35, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
		}
		
		
		
		@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
		private static List<WebElement> purchaseAccountListCount; 
		
		
		
	public boolean checkPurchaseVoucherNewPurchaseOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
	
	 try
	 {		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		purchaseAccountTxt.click();
		
		purchaseAccountTxt.sendKeys(Keys.SPACE);
		
		ArrayList<String>  actPVPurchaseAccount= new ArrayList<String>(); 
						
		int count=purchaseAccountListCount.size();
		
		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=purchaseAccountListCount.get(i).getText();
			System.err.println("IN FOR LOOP : "+data);
			actPVPurchaseAccount.add(data);
			
		}
			
		System.err.println(actPVPurchaseAccount);
		
		String actPVPurchaseAccountValue=actPVPurchaseAccount.toString();
	    String expPVPurchaseAccountValue=excelReader.getCellData("PurchaseVoucherN", 37, 7);
		
        excelReader.setCellData(xlfile, "PurchaseVoucherN", 37, 8, actPVPurchaseAccountValue);
		
		System.out.println("Entry Page Purchase Options Value Actual  : "+actPVPurchaseAccountValue+"  Value Expected : "+expPVPurchaseAccountValue);
	    	    	
	   if(actPVPurchaseAccountValue.equalsIgnoreCase(expPVPurchaseAccountValue))
		{
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 36, 9, resPass);
			return true;
		}
		else
		{
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 36, 9, resFail);
			return false;
		}
	  }
	 catch (Exception e) 
	   {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 36, 10, exception);
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  return false;
	   }
	}
		
		
		
		
		public boolean checkPurchaseVoucherNewSaveWithPurchaseInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try 
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
		
            String expSaveValidationMessageOnSaveWithPurchaseInptData=excelReader.getCellData("PurchaseVoucherN", 38, 7);
			
			String actMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithPurchaseInptData);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 38, 8, actMessage);		
			
			System.out.println("*********************************************** checkPurchaseVoucherNewSaveWithPurchaseInput  ********************************************");
			System.out.println("Entry Page Save with Purchase Input Value Actual  : "+actMessage  +" Value Expected : "+expSaveValidationMessageOnSaveWithPurchaseInptData);	
			
		
		    	
			if(actMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithPurchaseInptData)) 
					
			{
				System.out.println("Test Pass : Error Message Displayed");
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 38, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :Error Message is Not Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 38, 9, resFail);
				
				return false;
			}
		}
		 catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 38, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
		}
		
		
		public boolean checkPurchaseVoucherNewVendorOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			
			vendorAccountTxt.sendKeys(Keys.SPACE);	
			
			ArrayList<String>  actVendorAccountList= new ArrayList<String>(); 
		
			
			int count=vendorAccountListCount.size();

			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=vendorAccountListCount.get(i).getText();
				System.err.println("IN FOR LOOP : "+data);
				actVendorAccountList.add(data);
				
			}
			
			System.err.println(actVendorAccountList);
			
			String actVendorAccountValue=actVendorAccountList.toString();
			
			String expVendorAccountValue=excelReader.getCellData("PurchaseVoucherN", 40, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 40, 8, actVendorAccountValue);

			

		    System.out.println("********************************************* checkPurchaseVoucherNewPurchaseOptions  ********************************************************");
			System.out.println("Entry Page Warehouse Masters Value Actual  : "+actVendorAccountValue+"      Value Expected : "+expVendorAccountValue);
		    
			
		   if(actVendorAccountValue.equalsIgnoreCase(expVendorAccountValue))
			{
				
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 39, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 39, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 39, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
			
		}
		
		
		public boolean checkPurchaseVoucherNewSaveWithVendorInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			 saveBtn.click();
			
			
			String expSaveValidationMessageOnSaveWithPurchaseANdVendorInptData=excelReader.getCellData("PurchaseVoucherN", 41, 7);
				
			String actMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithPurchaseANdVendorInptData);
				
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 41, 8, actMessage);

			 
			 
			 
			/* getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			 String actSaveWithInputVendorAccountValidationMessage=errorMessage.getText();
			
			 excelReader.setCellData(xlfile, xlSheetName, 1533, 8, actSaveWithInputVendorAccountValidationMessage);
			
			 String expSaveWithInputVendorAccountValidationMsg     ="Controls marked with arrow mark, require Values";
			 String expSaveWithInputVendorAccountValidationMsgOne  ="Main -> Department";
			 String expSaveWithInputVendorAccountValidationMsgTwo  ="Main -> Warehouse";
			*/
				
			 System.out.println("*********************************************** checkPurchaseVoucherNewSaveWithVendorInput  ********************************************");
			 System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actMessage  +" Value Expected : "+expSaveValidationMessageOnSaveWithPurchaseANdVendorInptData);	
				
			    	
			if(actMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithPurchaseANdVendorInptData))
			{
				
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 41, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 41, 9, resFail);
				return false;
			}
				
		}
		 catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 41, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
		}
		
		
		
		
		
		

		
		public boolean checkPurchaseVoucherNewDueDateOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		  excelReader=new ExcelReader(POJOUtility.getExcelPath());
		  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		  try
		  {
				
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys(Keys.END);
			vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			vendorAccountTxt.sendKeys("Vendor A");
			Thread.sleep(2000);
			vendorAccountTxt.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			if(getIsAlertPresent())
			{
			
				getAlert().accept();
			}
			
			
					
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
			voucherHeaderDueDate.click();

			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			
	        String actCurrentDateInSimpleFormat=dateTxt.getAttribute("value");
	    	String expCurrentdate=dateFormat.format(date);
	        
	    	
	    	excelReader.setCellData(xlfile, "PurchaseVoucherN", 42, 7, actCurrentDateInSimpleFormat);
	    	
	    	
	        String actVoucherHeaderDueDate=voucherHeaderDueDate.getAttribute("value");
	        String expVoucherHeaderDueDate=dateFormat.format(date);
	        
	        
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 42, 8, actVoucherHeaderDueDate);
	        
	        
			System.out.println("*********************************************** checkPurchaseVoucherNewDueDateOption  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actCurrentDateInSimpleFormat  +" Value Expected : "+expCurrentdate);	

			if(actCurrentDateInSimpleFormat.equalsIgnoreCase(expCurrentdate) && 
					actVoucherHeaderDueDate.equalsIgnoreCase(expVoucherHeaderDueDate))
			{
				System.out.println("Test Pass : Date Displayed as Current Date ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 42, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Date Displayed as Current Date");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 42, 9, resFail);
				return false;
			}
		}
		 catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 42, 10, e.getMessage());
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
		}
		
		
		
		
		public boolean checkPurchaseVoucherNewCurrencyHasNotDefinedOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
			WebElement options=voucherHeaderCurrency;
			
			ArrayList<String>  actVoucherHeaderCurrency= new ArrayList<String>(); 
		
			actVoucherHeaderCurrency.add("INR");
		    
			actVoucherHeaderCurrency.add("USD");
		    
			actVoucherHeaderCurrency.add("AED");
		      		    
			ArrayList<String> 
			
	        expVoucherHeaderCurrency = new ArrayList<String>(); 
			
			
			int count=currencyListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=currencyListCount.get(i).getText();
				System.err.println("IN FOR LOOP : "+data);
				expVoucherHeaderCurrency.add(data);
				
			}
			
			System.err.println(expVoucherHeaderCurrency);
			
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			
			getAlert().accept();
			
			System.out.println("actVoucherHeaderCurrency"+actVoucherHeaderCurrency);
			
			System.out.println("expVoucherHeaderCurrency"+expVoucherHeaderCurrency);
			
			boolean VoucherHeaderCurrencyValue=actVoucherHeaderCurrency.equals(expVoucherHeaderCurrency);
			
			String actVoucherHeaderCurrencyValue=Boolean.toString(VoucherHeaderCurrencyValue);
			
			String  expVoucherHeaderCurrencyValue = excelReader.getCellData("PurchaseVoucherN", 43, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 43, 8, actVoucherHeaderCurrencyValue.toUpperCase());
			
			
			System.out.println("********************************************* checkPurchaseVoucherNewCurrencyHasNotDefinedOptions  ********************************************************");
			System.out.println("Entry Page Currency Has Not Define Value Actual  : "+actVoucherHeaderCurrency+       " Value Expected : "+expVoucherHeaderCurrency);
			System.out.println("Entry Page Currency Has Not Define Value Actual  : "+actVoucherHeaderCurrencyValue+  " Value Expected : "+expVoucherHeaderCurrencyValue);
			
		   
		   if(actVoucherHeaderCurrencyValue.equalsIgnoreCase(expVoucherHeaderCurrencyValue))
			{
				
			   excelReader.setCellData(xlfile, "PurchaseVoucherN", 43, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 43, 9, resFail);
				return false;
			}	
		}
		 catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 43, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
		}
		
		
		@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
	    private static List<WebElement> departmentListCount;
		
		public boolean checkPurchaseVoucherNewDepartment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			departmentTxt.sendKeys(Keys.SPACE);			
			
			departmentTxt.sendKeys(Keys.TAB);
			WebElement options=departmentTxt;
			
			ArrayList<String> actDepartmentList= new ArrayList<String>(); 
		
			int count=departmentListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=departmentListCount.get(i).getText();
				System.err.println("IN FOR LOOP : "+data);
				actDepartmentList.add(data);
				
			}
			
			System.err.println(actDepartmentList);
			
			
			System.out.println("actDepartmentList"+actDepartmentList);
			
			
			String actDepartmentValue=actDepartmentList.toString();
			String expDepartmentValue=excelReader.getCellData("PurchaseVoucherN", 45, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 45, 8, actDepartmentValue);
			
			System.out.println("********************************************* checkPurchaseVoucherNewDepartment  ********************************************************");
			System.out.println("Entry Page Department Masters Value Actual  : "+actDepartmentValue     +"     Value Expected : "+expDepartmentValue);
		   
		   if(actDepartmentValue.equalsIgnoreCase(expDepartmentValue))
			{	
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 44, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 44, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
	   {
		  String exception =e.getMessage();
		  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 44, 10, e.getMessage());
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  return false;
	   }
	}
		
		
		
		
		public boolean checkPurchaseVoucherNewSaveWithDepartmentInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				departmentTxt.click();
				departmentTxt.sendKeys("Dubai");
				Thread.sleep(2000);
				departmentTxt.sendKeys(Keys.CONTROL+"e");
				
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
             
			String expSaveValidationMessageOnSaveWithDepartmentInpt=excelReader.getCellData("PurchaseVoucherN", 46, 7);
			
			String actMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithDepartmentInpt);
				
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 46, 8, actMessage);

			/*
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessage));
			String actSaveMessageWithInputDepartment=errorMessage.getText();
			
			excelReader.setCellData(xlfile, xlSheetName, 1538, 8, actSaveMessageWithInputDepartment);
			
			String expSaveMessageWithInputDepartment="Controls marked with arrow mark, require Values";
			String expSaveMessageWithInputDepartments="Main -> Warehouse";*/
			
			System.out.println("*********************************************** checkPurchaseVoucherNewSaveWithDepartmentInput  ********************************************");
			System.out.println("Entry Page Save Department Input Value Actual  : "+actMessage  +" Value Expected : "+expSaveValidationMessageOnSaveWithDepartmentInpt);	
			
			
			if(actMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithDepartmentInpt))
			{
				System.out.println("Test Pass : Error Message Displayed");
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 46, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Error Message Not Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 46, 9, resFail);
				return false;
			}
		}
		 catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 46, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
		}
			
		
		
		 @FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
		  private static List<WebElement> wareHouseListCount;
		
		public boolean checkPurchaseVoucherNewWarehouse() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			
			wareHouseTxt.sendKeys(Keys.SPACE);
			
			WebElement options=wareHouseTxt;
			
			ArrayList<String>  actWarehouseList= new ArrayList<String>(); 
			
		
			actWarehouseList.add("HYDERABAD");
		    
			actWarehouseList.add("MUMBAI");
		    
			actWarehouseList.add("SECUNDERABAD");
		   
			actWarehouseList.add("STWH");   	
			
			actWarehouseList.add("WH1");  
			
		    
		    
			ArrayList<String> expWarehouseList = new ArrayList<String>(); 
			
			int count=wareHouseListCount.size();
			
			String actWarehouseCount=Integer.toString(count);
			String expWarehouseCount= excelReader.getCellData("PurchaseVoucherN", 48, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 48, 8, actWarehouseCount);
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=wareHouseListCount.get(i).getText();
				System.err.println("IN FOR LOOP : "+data);
				expWarehouseList.add(data);
				
			}
			
			System.err.println(expWarehouseList);
			
			
			System.out.println("actWarehouseList"+actWarehouseList);
			
			System.out.println("expWarehouseList"+expWarehouseList);
			
			boolean WarhouseValue=actWarehouseList.equals(expWarehouseList);
			
			String actWarhouseValue=Boolean.toString(WarhouseValue);
			String expWarhouseValue=excelReader.getCellData("PurchaseVoucherN", 49, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 49, 8, actWarhouseValue.toUpperCase());
		
			System.out.println("*********************************************** checkPurchaseVoucherNewWarehouse  ********************************************");
			System.out.println("Entry Page Warehouse Value Actual  : "+actWarehouseList  +" Value Expected : "+expWarehouseList);	
			System.out.println("Entry Page Warehouse Value Actual  : "+actWarhouseValue  +" Value Expected : "+expWarhouseValue);
		   
		   if(actWarhouseValue.equalsIgnoreCase(expWarhouseValue) )
			{
				
			   excelReader.setCellData(xlfile, "PurchaseVoucherN", 47, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 47, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 47, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
			
		
		}
		
		public boolean checkPurchaseVoucherNewSaveWithWarehouseInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expSaveValidationMessageOnSaveWithoutBodyRows=excelReader.getCellData("PurchaseVoucherN", 50, 7);
			
			String emptyRowsMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithoutBodyRows);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 50, 8, emptyRowsMessage);

			System.out.println("*********************************************** checkPurchaseVoucherNewSaveWithWarehouseInput  ********************************************");
			
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+emptyRowsMessage+" Value Expected : "+"TRUE");	
			
			
			if (emptyRowsMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithoutBodyRows))
			{
				System.out.println("Test Pass : Error Message Displayed");
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 50, 9, resPass);;
				return true;
			}
			else
			{
				System.out.println("Test Pass : Error MEssage is Not Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 50, 9, resFail);
				return false;
			}
		}
		 catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 50, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
		}
			
		
		
		
		public boolean checkPurchaseVoucherNewVouchersEntryPageNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			documentNumberTxt.clear();
			documentNumberTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 52, 6));
			documentNumberTxt.sendKeys(Keys.TAB);
			
			//getDriver().switchTo().alert().accept();
			
			String actGetDocumentNumberInputs=documentNumberTxt.getAttribute("value");
			String expGetDocumentNumberInputs=excelReader.getCellData("PurchaseVoucherN", 52, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 52, 8, actGetDocumentNumberInputs);
			
			System.out.println("Test Pass : Entered 2 in DOC NO");
				
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();
			
			boolean res = getIsAlertPresent();
			
			if(res==true)
			{
				
				getWaitForAlert();
					
				getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
					
				String actAlertMessageOnClickOnNewBtn=getDriver().switchTo().alert().getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 53, 8, actAlertMessageOnClickOnNewBtn);
				
				String expAlertMessageOnClickOnNewBtn="The contents of the voucher are changed.";
				String expAlertMessageOnClickOnNewBtnn="Are you sure that you want to ignore the changes?";
					
			   getDriver().switchTo().alert().accept();
			}
			
			
			
				
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actGetDocumentNumberInputAfterClickOnNewBtn=documentNumberTxt.getAttribute("value");
			String expGetDocumentNumberInputAfterClickOnNewBtn="SU//TEXT1";
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 54, 8, actGetDocumentNumberInputAfterClickOnNewBtn);
				
			System.out.println("*********************************************** checkPurchaseVoucherNewVouchersEntryPageNew  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actGetDocumentNumberInputs                 +" Value Expected : "+expGetDocumentNumberInputs);	
			//System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actAlertMessageOnClickOnNewBtn             +" Value Expected : "+expAlertMessageOnClickOnNewBtn+expAlertMessageOnClickOnNewBtnn);
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actGetDocumentNumberInputAfterClickOnNewBtn+" Value Expected : "+expGetDocumentNumberInputAfterClickOnNewBtn);
			
				
			if(actGetDocumentNumberInputs.equalsIgnoreCase(expGetDocumentNumberInputs)/* && actAlertMessageOnClickOnNewBtn.startsWith(expAlertMessageOnClickOnNewBtn) && actAlertMessageOnClickOnNewBtn.endsWith(expAlertMessageOnClickOnNewBtnn)*/ 
					&& actGetDocumentNumberInputAfterClickOnNewBtn.equalsIgnoreCase(expGetDocumentNumberInputAfterClickOnNewBtn))
			{
				System.out.println("Test Pass : DOC NO is 1");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 51, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Customize Pop Up NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 51, 9, resFail);
				return false;
			}
		}
		 catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 51, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
		}
		
		
		
		public boolean checkPurchaseVoucherNewWithCurrencyInputAndExcgRate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try 
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys(Keys.SPACE);
			
			int count=purchaseAccountListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=purchaseAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 56, 6)))
				{
					purchaseAccountListCount.get(i).click();
					
					break;
				}
			}
			
			purchaseAccountTxt.sendKeys(Keys.TAB);

	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys(Keys.SPACE);
			
			int vendorcount=vendorAccountListCount.size();
			
			System.err.println(vendorcount);
			
			for(int i=0 ; i < vendorcount ;i++)
			{
				String data=vendorAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 57, 6)))
				{
					vendorAccountListCount.get(i).click();
					
					break;
				}
			}
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			raiseReceiptsChkBox.sendKeys(Keys.TAB);
			voucherHeaderDueDate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
			
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 58, 6)))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			voucherHeaderExchangeRate.click();
			
			String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 59, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 59, 8, actExchangeRate);

			System.out.println("*********************************************** checkPurchaseVoucherNewWithCurrencyInputAndExcgRate  ********************************************");
			System.out.println("Entry Page Exchange Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
			
			
			if (actExchangeRate.equalsIgnoreCase(expExchangeRate))
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 55, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 55, 9, resFail);
				return false;
			}	
		}
		 catch (Exception e) 
		   {
			  String exception =e.getMessage();
			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 55, 10, exception);
			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			  return false;
		   }
			
		}
		
			
		public boolean checkCurrencyWithAED() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 61, 6)))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			voucherHeaderExchangeRate.click();
						
			String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 62, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 62, 8, actExchangeRate);
			
			
			System.out.println("*********************************************** checkCurrencyWithAED  ********************************************");
			System.out.println("Entry Page Exchange Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
					
			if (actExchangeRate.equalsIgnoreCase(expExchangeRate) )
		    {
				System.out.println("Test Pass : Exchange Rate Is Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 60, 9, resPass);
				return true;
			 }
			 else
			 {
				System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 60, 9, resFail);
				return false;
			 }	
		 }
		 catch (Exception e) 
	     {
		   String exception =e.getMessage();
		   excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 60, 10, exception);
		   System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   return false;
	    }
	}
		
		
		

		public boolean checkCurrencyWithUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			Thread.sleep(5000);
			System.out.println("QQQ1");
				
			voucherHeaderDueDate.click();
			System.out.println("QQQ2");
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			System.out.println("QQQ3");
            
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();
			Thread.sleep(2000);
			System.out.println("QQQ4");
			
			 
			voucherHeaderCurrency.sendKeys(Keys.END);
			Thread.sleep(2000);
			voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
			Thread.sleep(2000);
			voucherHeaderCurrency.sendKeys("USD");
			
			Thread.sleep(2000);
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			System.out.println("QQQ7");
			voucherHeaderExchangeRate.click();
			System.out.println("QQQ8");
			
			
			
						
			String actCurrencyUSDExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expCurrencyUSDExchangeRate=excelReader.getCellData("PurchaseVoucherN", 65, 7);
			
	        excelReader.setCellData(xlfile, "PurchaseVoucherN", 65, 8, actCurrencyUSDExchangeRate);
			
			System.out.println("*********************************************** checkCurrencyWithUSD  ********************************************");
			System.out.println("Entry Page Exchange Rate Value Actual  : "+actCurrencyUSDExchangeRate  +" Value Expected : "+expCurrencyUSDExchangeRate);	
		
					
			if (actCurrencyUSDExchangeRate.equalsIgnoreCase(expCurrencyUSDExchangeRate) )
			   {
					System.out.println("Test Pass : Exchange Rate Is Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 63, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 63, 9, resFail);
					return false;
		 		}
		 }
		catch (Exception e) 
	     {
		 
		  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 63, 10, e.getMessage());
		  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		  return false;
	   }
	}
		
		
		@FindBy(xpath="/html/body/section/div[8]/div[1]/div/div/div/div/div[1]/div/div[2]/div[2]/div[2]/div/ul/li[2]/button[2]/i")
		private static WebElement saveBtnInDepartmentmaster;

		

	 public boolean checkDepartmentEditExchangeRateAndLocalExchangeReateWithCurrencyAEDInPV() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
     {        
       excelReader=new ExcelReader(POJOUtility.getExcelPath());
       xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
        
       try
       {
            
    	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
    	  departmentTxt.click();
    	  departmentTxt.sendKeys(Keys.END);
    	  departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
    	  Thread.sleep(2000);
    	  departmentTxt.sendKeys("DUBAI");
    	  Thread.sleep(2000);
    	  departmentTxt.sendKeys(Keys.TAB);
    	  
    	  if(getIsAlertPresent())
		  {
			 getWaitForAlert();
				
			 getAlert().accept();
		   }
    	  
    	  Thread.sleep(2000);
    	  departmentTxt.click();
    	  Thread.sleep(2000);
		  departmentTxt.sendKeys(Keys.CONTROL+"e");
			
    	  
			Thread.sleep(3000);
            
			jurisdiction.click();
			jurisdiction.sendKeys(Keys.END);
			jurisdiction.sendKeys(Keys.SHIFT,Keys.HOME);
			jurisdiction.sendKeys(Keys.BACK_SPACE);
			Thread.sleep(2000);
			jurisdiction.sendKeys("Dubai");
				
				Thread.sleep(2000);
				
				jurisdiction.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				 
				saveBtnInDepartmentmaster.click();
				 
				Thread.sleep(2000);
				
				
	            /*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	            voucherHeaderCurrency.click();
	            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
	            voucherHeaderCurrency.sendKeys(Keys.SPACE);
	            
	            if(getIsAlertPresent())
				 {
					 getWaitForAlert();
						
					 getAlert().accept();
				 }
				
			
			     int openingBalCurrencyListCount=openingBalCurrencyList.size();
				
				 for (int i = 0; i < openingBalCurrencyListCount; i++) 
			 	 {
					String data=openingBalCurrencyList.get(i).getText();
					
					if (data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 70, 6)))
					{
						openingBalCurrencyList.get(i).click();
						break;
					}
			 	 }
	            
	            voucherHeaderCurrency.sendKeys(Keys.TAB);
	            
	            if(getIsAlertPresent())
				 {
					 getWaitForAlert();
						
					 getAlert().accept();
				 }
				
	                 */
	           /* String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
	            String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 71, 7);
		 		
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 71, 8, actExchangeRate);
	            
	            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
	            String expLocExchangeRate=excelReader.getCellData("PurchaseVoucherN", 72, 7);
		 		
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 72, 8, expLocExchangeRate);
	          
	            System.out.println("voucherHeaderExchangeRate      : " + actExchangeRate    + " Value Expected : " + expExchangeRate);
	            System.out.println("voucherHeaderLocalExchangeRate : " + actLocExchangeRate + " Value Expected : " + expLocExchangeRate);
	            
	            
	            
	            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )*/
				String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
				String expExchangeRate="70.0000000000";
				String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
				String expLocExchangeRate="4.2800000000";
				System.out.println("voucherHeaderExchangeRate      : " + actExchangeRate    + " Value Expected : " + actLocExchangeRate);
				
				if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
				{
                    System.out.println("Test Pass : Exchange Rate Is Updated ");
                    excelReader.setCellData(xlfile, "PurchaseVoucherN", 66, 9, resPass);
                    return true;
                }
                else
                {
                    System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
                    excelReader.setCellData(xlfile, "PurchaseVoucherN", 66, 9, resFail);
                    return false;
                } 
            }
            catch (Exception e) 
  		    {
  			  String exception =e.getMessage();
  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 66, 10, exception);
  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
  			  return false;
  		    }
  		 }
		 
	 
	 @FindBy(xpath="//*[@id='id_header_10_table_body']/tr")
	 private static List<WebElement> openingBalCurrencyList;
	 
		 public boolean checkExchangeRateAndLocalExchangeReateWithCurrencyUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
            excelReader=new ExcelReader(POJOUtility.getExcelPath());
            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
            
            try 
            {
	            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	            voucherHeaderCurrency.click();
	            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
	            voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
			    int openingBalCurrencyListCount=openingBalCurrencyList.size();
				
				 for (int i = 0; i < openingBalCurrencyListCount; i++) 
			 	 {
					String data=openingBalCurrencyList.get(i).getText();
					
					if (data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 74, 6)))
					{
						openingBalCurrencyList.get(i).click();
						break;
					}
			 	 }
	            
	            voucherHeaderCurrency.sendKeys(Keys.TAB);
	            
	            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
	            String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 75, 7);
	            
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 75, 8, actExchangeRate);
	            
	            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
	            String expLocExchangeRate=excelReader.getCellData("PurchaseVoucherN", 76, 7);
	           
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 76, 8, actLocExchangeRate);
	            
	            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
	            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);
	            
	           if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) )
               {
                        System.out.println("Test Pass : Exchange Rate Is Updated ");
                        excelReader.setCellData(xlfile, "PurchaseVoucherN", 73, 9, resPass);
                        return true;
                }
                else
                {
                        System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
                        excelReader.setCellData(xlfile, "PurchaseVoucherN", 73, 9, resFail);
                        return false;
                }    
	          }
	          catch (Exception e) 
	  		  {
	  			  String exception =e.getMessage();
	  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 73, 10, e.getMessage());
	  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	  			  return false;
	  		  }
	  		}
	            
	    

		 
		 public boolean checkJursidicationValueOnChangeDepartmentAndLocalExchangeRateWithCurrencyINR() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
            excelReader=new ExcelReader(POJOUtility.getExcelPath());
            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
            
            try
            {
            	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.END);
				vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				vendorAccountTxt.sendKeys("Vendor A");
				Thread.sleep(2000);
				vendorAccountTxt.sendKeys(Keys.TAB);	
				
				if(getIsAlertPresent())
				  {
					 getWaitForAlert();
						
					 getAlert().accept();
				   }
	            		    	
	            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	            voucherHeaderCurrency.click();
	            Thread.sleep(2000);
	            
	            voucherHeaderCurrency.sendKeys(Keys.HOME);
	            voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.END);
	            voucherHeaderCurrency.sendKeys("INR");
	
				Thread.sleep(2000);
	            
				voucherHeaderCurrency.sendKeys(Keys.TAB);
				
				//Thread.sleep(10990);
				
				if(getIsAlertPresent())
				  {
					 getWaitForAlert();
						
					 getAlert().accept();
				   }
	            
	            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	            departmentTxt.click();
	            departmentTxt.sendKeys(Keys.HOME);
	            departmentTxt.sendKeys(Keys.SHIFT,Keys.END);
	            departmentTxt.sendKeys(Keys.SPACE);
	            Thread.sleep(2000);
	            departmentTxt.sendKeys("INDIA");
	            Thread.sleep(2000);
	            departmentTxt.sendKeys(Keys.TAB);
	            
	            if(getIsAlertPresent())
				  {
					 getWaitForAlert();
						
					 getAlert().accept();
				   }
	            
	           // jurisdictionTxt.click();
	            
	            departmentTxt.click();
	            departmentTxt.sendKeys(Keys.HOME);
	            departmentTxt.sendKeys(Keys.SHIFT,Keys.END);
	            departmentTxt.sendKeys("DUBAI");
	            Thread.sleep(2000);
	            departmentTxt.sendKeys(Keys.TAB);
	            
	            if(getIsAlertPresent())
				  {
					 getWaitForAlert();
						
					 getAlert().accept();
				   }
	            
	           	           
	            Thread.sleep(2000);
	            
	            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
	            String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 79, 7);
	            
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 79, 8, actExchangeRate);
	            
	            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
	            String expLocExchangeRate=excelReader.getCellData("PurchaseVoucherN", 80, 7);
	           
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 80, 8, actLocExchangeRate);
	            
	            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
	            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);   
	            	            
	            String actJurisdicationValue = jurisdictionTxt.getAttribute("value");
	            String expJurisdicationValue = "Dubai";
            
	            String actPlaceOfSupplyValue = placeofSupplyTxt.getAttribute("value");
	            String expPlaceOfSupplyValue = "Abu Dhabi";
	            
	            System.out.println("voucherHeaderJurisdication   : "+actJurisdicationValue+" Value Expected : "+expJurisdicationValue);
	            System.out.println("voucherHeaderPlaceOfSupply   : "+actPlaceOfSupplyValue+" Value Expected : "+expPlaceOfSupplyValue);   
	            	                   
	            if (actExchangeRate.equalsIgnoreCase(expExchangeRate) && actLocExchangeRate.equalsIgnoreCase(expLocExchangeRate) 
	            		&& actJurisdicationValue.equalsIgnoreCase(expJurisdicationValue) && actPlaceOfSupplyValue.equalsIgnoreCase(expPlaceOfSupplyValue))
	            {
	                    System.out.println("Test Pass : Exchange Rate Is Updated ");
	                    excelReader.setCellData(xlfile, "PurchaseVoucherN", 77, 9, resPass);
	                    return true;
	             }
	             else
	             {
	            	 if(placeofSupplyTxt.getAttribute("value").isEmpty())
	            	 {
	            		 placeofSupplyTxt.click();
	            		 placeofSupplyTxt.sendKeys("Abu Dhabi");
	            	 }
	            	 
	                    System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
	                    excelReader.setCellData(xlfile, "PurchaseVoucherN", 77, 9, resFail);
	                    return false;
	             }  
	            }
	            catch (Exception e) 
	  		  {
	  			  String exception =e.getMessage();
	  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 77, 10, exception);
	  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	  			  return false;
	  		  }
	  		   
	    }
		  
		 
		 
		 
				
			public boolean checkSavingPurchaseVoucherNewWithEmptyRows() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

			try
			{
								
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expSaveValidationMessageOnSaveWithoutBodyRows=excelReader.getCellData("PurchaseVoucherN", 81, 7);
				
				String emptyRowsMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithoutBodyRows);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 81, 8, emptyRowsMessage);
				
				System.out.println("*********************************************** checkSavingPurchaseVoucherNewWithEmptyRows  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+emptyRowsMessage+" Value Expected : "+"TRUE");	
				
				
				if (emptyRowsMessage.equalsIgnoreCase(expSaveValidationMessageOnSaveWithoutBodyRows))
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 81, 9, resPass);
					return true;
				} 
				else 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 81, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			   {
				  String exception =e.getMessage();
				  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 81, 10, exception);
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
			   }
			
			}

				
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			
		
		
		
		
		
		public boolean checkLocalExchangeRateWithDepartmentAmericaCurrencyUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderExchangeRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("AMERICA"))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			voucherHeaderLocalExchangeRate.click();
			
			
			String actLocalExchangeRateWithDepartmentAsAmerica=voucherHeaderLocalExchangeRate.getAttribute("value");
		    String expLocalExchangeRateWithDepartmentAsAmerica="4.2800000000";	
			

			System.out.println("*********************************************** checkLocalExchangeRateWithDepartmentAmericaCurrencyUSD  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchangeRateWithDepartmentAsAmerica  +" Value Expected : "+expLocalExchangeRateWithDepartmentAsAmerica);	
			
			
			if (actLocalExchangeRateWithDepartmentAsAmerica.equalsIgnoreCase(expLocalExchangeRateWithDepartmentAsAmerica) )
			   {
					System.out.println("Test Pass : Exchange Rate Is Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 119, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 119, 9, resFail);
					return false;
				}	
		}
		
		
		
		
		

		public boolean checkLocalExchangeRateWithDepartmentDUBAI() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderExchangeRate.click();
			voucherHeaderExchangeRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("DUBAI"))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);
			
			
			voucherHeaderLocalExchangeRate.click();
			
			
			String actLocalExchangeRateWithDepartmentAsDubai=voucherHeaderLocalExchangeRate.getAttribute("value");
			String expLocalExchangeRateWithDepartmentAsDubai="4.2800000000";
			

			System.out.println("*********************************************** checkLocalExchangeRateWithDepartmentDUBAI  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchangeRateWithDepartmentAsDubai  +" Value Expected : "+expLocalExchangeRateWithDepartmentAsDubai);	
			
			
					
			if (actLocalExchangeRateWithDepartmentAsDubai.equalsIgnoreCase(expLocalExchangeRateWithDepartmentAsDubai) )
		   {
					System.out.println("Test Pass : Exchange Rate Is Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 120, 9, resPass);
					return true;
		   }
		   else
		   {
					System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 120, 9, resFail);
					return false;
		   }	
		}
		
		
		

		public boolean checkLocalExchangeRateWithDepartmentINDIA() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderExchangeRate.click();
			voucherHeaderExchangeRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("INDIA"))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);
			
			
			//voucherHeaderLocalExchangeRate.click();
			
			
			String actLocalExchangeRateBySelectingDepartmentAsIndia=voucherHeaderLocalExchangeRate.getAttribute("value");
			String expLocalExchangeRateBySelectingDepartmentAsIndia="4.2800000000";
			

			System.out.println("*********************************************** checkLocalExchangeRateWithDepartmentINDIA  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchangeRateBySelectingDepartmentAsIndia  +" Value Expected : "+expLocalExchangeRateBySelectingDepartmentAsIndia);	
			
					
			if (actLocalExchangeRateBySelectingDepartmentAsIndia.equalsIgnoreCase(expLocalExchangeRateBySelectingDepartmentAsIndia) )
			   {
					System.out.println("Test Pass : Exchange Rate Is Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 121, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 121, 9, resFail);
					return false;
				}	
		}
		
		
		

		public boolean checkLocalExchangeRateWithDepartmentWALES()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderExchangeRate.click();
			voucherHeaderExchangeRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("WALES"))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
						
			String actLocalExchangeRateOnSelectingDepartmentAsWales=voucherHeaderLocalExchangeRate.getAttribute("value");
			String expLocalExchangeRateOnSelectingDepartmentAsWales="4.2800000000";
			
			System.out.println("*********************************************** checkLocalExchangeRateWithDepartmentWALES  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchangeRateOnSelectingDepartmentAsWales  +" Value Expected : "+expLocalExchangeRateOnSelectingDepartmentAsWales);	
									
		    if (actLocalExchangeRateOnSelectingDepartmentAsWales.equalsIgnoreCase(expLocalExchangeRateOnSelectingDepartmentAsWales) )
		     {
				System.out.println("Test Pass : Exchange Rate Is Updated ");
				excelReader.setCellData(xlfile, "Sheet6", 122, 9, resPass);
				return true;
			 }
			 else
			 {
				System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
				excelReader.setCellData(xlfile, "Sheet6", 122, 9, resFail);
				return false;
			 }	
		}
		

		
		public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyAED() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
				
				if(data.equalsIgnoreCase("AED"))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			String actExchangeRateOnChangeOfCurrencyToAED=voucherHeaderExchangeRate.getAttribute("value");
		    String actLocalExchangeRateOnChangeOfCurrencyToAED=voucherHeaderLocalExchangeRate.getAttribute("value");
			
			String expExchangeRateOnChangeOfCurrencyToAED="14.0000000000";
			String expLocalExchangeRateOnChangeOfCurrencyToAED="1.0000000000";
			

			System.out.println("*********************************************** checkExchangeRateAndLocalExchangeReatewithCurrencyAED  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actExchangeRateOnChangeOfCurrencyToAED       +" Value Expected : "+expExchangeRateOnChangeOfCurrencyToAED);	
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchangeRateOnChangeOfCurrencyToAED  +" Value Expected : "+expLocalExchangeRateOnChangeOfCurrencyToAED);
		
			if (actExchangeRateOnChangeOfCurrencyToAED.equalsIgnoreCase(expExchangeRateOnChangeOfCurrencyToAED) 
					&& actLocalExchangeRateOnChangeOfCurrencyToAED.equalsIgnoreCase(expLocalExchangeRateOnChangeOfCurrencyToAED) )
			   {
					System.out.println("Test Pass : Exchange Rate Is Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 123, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 123, 9, resFail);
					return false;
				}	
		}
		

		public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyUSD() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getAttribute("data-scurrencycode");
				
				if(data.equalsIgnoreCase("USD"))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			String actExchangeRateOnChangeOfCurrencyToUSD=voucherHeaderExchangeRate.getAttribute("value");
			String expExchangeRateOnChangeOfCurrencyToUSD="60.0000000000";
			
			String actLocalExchangeRateOnChnageOfCurrencyToUSD=voucherHeaderLocalExchangeRate.getAttribute("value");
			String expLocalExchangeRateOnChnageOfCurrencyToUSD="4.2800000000";
			
			System.out.println("*********************************************** checkExchangeRateAndLocalExchangeReatewithCurrencyUSD  ********************************************");
			System.out.println("ExchangeRateOnChangeOfCurrencyToUSD      : "+actExchangeRateOnChangeOfCurrencyToUSD       +" Value Expected : "+expExchangeRateOnChangeOfCurrencyToUSD);	
			System.out.println("LocalExchangeRateOnChnageOfCurrencyToUSD : "+actLocalExchangeRateOnChnageOfCurrencyToUSD  +" Value Expected : "+expLocalExchangeRateOnChnageOfCurrencyToUSD);
		
			
			if (actExchangeRateOnChangeOfCurrencyToUSD.equalsIgnoreCase(expExchangeRateOnChangeOfCurrencyToUSD)
					&& actLocalExchangeRateOnChnageOfCurrencyToUSD.equalsIgnoreCase(expLocalExchangeRateOnChnageOfCurrencyToUSD) )
			   {
					System.out.println("Test Pass : Exchange Rate Is Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 124, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 124, 9, resFail);
					return false;
				}	
		}
		

		public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyINR()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys(Keys.SPACE);
			
			int count=purchaseAccountListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=purchaseAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("Purchase"))
				{
					purchaseAccountListCount.get(i).click();
					
					break;
				}
			}
			
			purchaseAccountTxt.sendKeys(Keys.TAB);

	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys(Keys.SPACE);
			
			int vendorcount=vendorAccountListCount.size();
			
			System.err.println(vendorcount);
			
			for(int i=0 ; i < vendorcount ;i++)
			{
				String data=vendorAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("Vendor a"))
				{
					vendorAccountListCount.get(i).click();
					
					break;
				}
			}
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			
			raiseReceiptsChkBox.sendKeys(Keys.TAB);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
				
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("INR"))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
			
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			voucherHeaderExchangeRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			
			departmentTxt.sendKeys(Keys.SPACE);
				
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("INDIA"))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
			
		
			voucherHeaderLocalExchangeRate.click();
			voucherHeaderLocalExchangeRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			
			wareHouseTxt.sendKeys(Keys.SPACE);
				
			int warehousecount=wareHouseListCount.size();
			
			System.err.println(warehousecount);
				
			for(int i=0 ; i < warehousecount ;i++)
			{
				String data=wareHouseListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("HYDERABAD"))
				{
					wareHouseListCount.get(i).click();
					
					break;
				}
			}
				
			wareHouseTxt.sendKeys(Keys.TAB);
			
			String actExchnageRateOnChangingCurrencyToINR=voucherHeaderExchangeRate.getAttribute("value");
			String expExchnageRateOnChangingCurrencyToINR="1.0000000000";
			
			String actLocalExchnageRateOnChangingCurrencyToINR=voucherHeaderLocalExchangeRate.getAttribute("value");
			String expLocalExchnageRateOnChangingCurrencyToINR="0.0700000000";
			
			
			
			System.out.println("*********************************************** checkExchangeRateAndLocalExchangeReatewithCurrencyINR  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actExchnageRateOnChangingCurrencyToINR       +" Value Expected : "+expExchnageRateOnChangingCurrencyToINR);	
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actLocalExchnageRateOnChangingCurrencyToINR  +" Value Expected : "+expLocalExchnageRateOnChangingCurrencyToINR);
		
			
			
			
			
			if (actExchnageRateOnChangingCurrencyToINR.equalsIgnoreCase(expExchnageRateOnChangingCurrencyToINR) 
					&& actLocalExchnageRateOnChangingCurrencyToINR.equalsIgnoreCase(expLocalExchnageRateOnChangingCurrencyToINR) )
			   {
					System.out.println("Test Pass : Exchange Rate Is Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 125, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
					excelReader.setCellData(xlfile, "Sheet6", 125, 9, resFail);
					return false;
				}	
		}

		
		
		public boolean checkCloseBtnInEntryPageAndCheckLinksDisplayInHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{	
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{		
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
								
				if(getIsAlertPresent())
				{
					getAlert().accept();
				}
			
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
				homePageAllVouchersView.click();
				
				Thread.sleep(2000);
			
							
				//Home Page Column Headings
				
		        int headerTxtCount		= headerTxtList.size();
				
				ArrayList<String> headerTxt = new ArrayList<String>();
				
				for (int i = 2; i < headerTxtCount; i++) 
				{
					String data=headerTxtList.get(i).getText();
					headerTxt.add(data);
				}
				
				String actHeaderTxt = headerTxt.toString();
				String expHeaderTxt = excelReader.getCellData(xlSheetName, 433, 7);
				excelReader.setCellData(xlfile, xlSheetName, 433, 8, actHeaderTxt);
				
				System.out.println("actopeningStocksNewHomePageColumnsButtons  : " + actHeaderTxt);
				System.out.println("expopeningStocksNewHomePageColumnsButtons  : " + expHeaderTxt);
				
				System.out.println("Count Of Header Columns in Home Page Value Actual    :  " + actHeaderTxt );
				System.out.println("Count Of Header Columns in Home Page Value Expected  :  " + expHeaderTxt );
						
				String actHomePageVoucherNo     = openingStocksNewHomeRow1VoucherNo.getText();
				String actHomePageCreatedBy     = openingStocksNewHomeRow1CreatedBy.getText();
				String actHomePageModifiedBy    = openingStocksNewHomeRow1ModifiedBy.getText();
				String actHomePageSuspendBy     = openingStocksNewHomeRow1SuspendStatus.getText();
				String actHomePageAuthorizedBy  = openingStocksNewHomeRow1AuthorizationStatus.getText();
				
				String expHomePageVoucherNo     = "SU/DUB/TEXT1";
				String expHomePageCreatedBy     = "SU";
				String expHomePageModifiedBy    = "SU";
				String expHomePageSuspendBy     = "False";
				String expHomePageAuthorizeBy   = "Authorized";
				
				
				System.out.println("Voucher No in Home Page Value Actual   :  " + actHomePageVoucherNo+    " Value Expected : " + expHomePageVoucherNo);
				System.out.println("Created By in Home Page Value Actual   :  " + actHomePageCreatedBy+    " Value Expected : " + expHomePageCreatedBy);
				System.out.println("Modified By in Home Page Value Actual  :  " + actHomePageModifiedBy+   " Value Expected : " + expHomePageModifiedBy);
				System.out.println("Suspend By in Home Page Value Actual   :  " + actHomePageSuspendBy+    " Value Expected : " + expHomePageSuspendBy);
				System.out.println("Authorize By in Home Page Value Actual :  " + actHomePageAuthorizedBy+ " Value Expected : " + expHomePageAuthorizeBy);
						

				Thread.sleep(2000);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingMaterialRequistion));
				pendingMaterialRequistion.click();
				
				Thread.sleep(2000);
				
				//Home Page Column Headings
				
		        int actHeaderTxtCounts		= headerTxtList.size();
		        int expHeaderTxtCounts      = 0;
		        
		        
		        System.out.println("Home Page Count"+actHeaderTxtCounts);
				
				/*ArrayList<String> headerTxts = new ArrayList<String>();
				
				for (int i = 2; i < headerTxtCounts; i++) 
				{
					String data=headerTxtList.get(i).getText();
					headerTxts.add(data);
				}
				
				String actHeaderTxts = headerTxt.toString();
				String expHeaderTxts = excelReader.getCellData(xlSheetName, 433, 7);
				excelReader.setCellData(xlfile, xlSheetName, 433, 8, actHeaderTxt);*/
				
				System.out.println("actopeningStocksNewHomePageColumnsButtonsInLinkview  : " + actHeaderTxtCounts);
				System.out.println("expopeningStocksNewHomePageColumnsButtonsInLinkview  : " + expHeaderTxtCounts);
				
				/*System.out.println("Count Of Header Columns in Home Page Value Actual    :  " + actHeaderTxts );
				System.out.println("Count Of Header Columns in Home Page Value Expected  :  " + expHeaderTxts );*/
		
				
				
				if(actHomePageVoucherNo.equalsIgnoreCase(expHomePageVoucherNo) && actHomePageCreatedBy.equalsIgnoreCase(expHomePageCreatedBy)
						&& actHomePageModifiedBy.equalsIgnoreCase(expHomePageModifiedBy) && actHomePageSuspendBy.equalsIgnoreCase(expHomePageSuspendBy)
						&& actHomePageAuthorizedBy.equalsIgnoreCase(expHomePageAuthorizeBy))		
				{
					System.out.println("Test Pass : entry Page Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resFail);
					return false;
				}
			 }
			catch (Exception e) 
		    {
		  		String exception =e.getMessage().substring(0, 50);
		          excelReader.setExceptionInExcel(xlfile, xlSheetName, 12, 10, e.getMessage());
		          System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		          return false;
		    }
		  }	
		
		
		
		
		
		
		
		

		 
		 public boolean checkJurisdictionAndPlaceOfSupplyValuesCloseAndOpen() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	     {
            excelReader=new ExcelReader(POJOUtility.getExcelPath());
            xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
            
            try
            {
            	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.TAB);					
	            		    	             
	            departmentTxt.click();
	            //departmentTxt.sendKeys(Keys.HOME);
	            //departmentTxt.sendKeys(Keys.SHIFT,Keys.END);
	            departmentTxt.sendKeys("DUBAI");
	            Thread.sleep(2000);
	            departmentTxt.sendKeys(Keys.TAB);
	            

				if(getIsAlertPresent())
				{
					getAlert().accept();
				}
	           	           
	            Thread.sleep(2000);
	            
	            String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
	            String expExchangeRate=excelReader.getCellData("PurchaseVoucherN", 79, 7);
	            
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 79, 8, actExchangeRate);
	            
	            String actLocExchangeRate=voucherHeaderLocalExchangeRate.getAttribute("value");
	            String expLocExchangeRate=excelReader.getCellData("PurchaseVoucherN", 80, 7);
	           
	            excelReader.setCellData(xlfile, "PurchaseVoucherN", 80, 8, actLocExchangeRate);
	            
	            System.out.println("voucherHeaderExchangeRate      : "+actExchangeRate+" Value Expected : "+expExchangeRate);
	            System.out.println("voucherHeaderLocalExchangeRate : "+actLocExchangeRate+" Value Expected : "+expLocExchangeRate);   
	            	            
	            String actJurisdicationValue = jurisdictionTxt.getAttribute("value");
	            String expJurisdicationValue = "Dubai";
	                    		            
	            String actPlaceOfSupplyValue = placeofSupplyTxt.getAttribute("value");
	            String expPlaceOfSupplyValue = "Abu Dhabi";
	            
	            System.out.println("voucherHeaderExchangeRate      : "+actJurisdicationValue+" Value Expected : "+expJurisdicationValue);
	            System.out.println("voucherHeaderLocalExchangeRate : "+actPlaceOfSupplyValue+" Value Expected : "+expPlaceOfSupplyValue);   
	            	                   
	            if ( actJurisdicationValue.equalsIgnoreCase(expJurisdicationValue) && actPlaceOfSupplyValue.equalsIgnoreCase(expPlaceOfSupplyValue))
	            {
                    System.out.println("Test Pass : Exchange Rate Is Updated ");
                    excelReader.setCellData(xlfile, "PurchaseVoucherN", 77, 9, resPass);
                    return true;
	             }
	             else
	             {
	            	 System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
	                 excelReader.setCellData(xlfile, "PurchaseVoucherN", 77, 9, resFail);
	                 
	                 
	                 placeofSupplyTxt.click();
	            	 Thread.sleep(2000);
	            	 placeofSupplyTxt.sendKeys(Keys.HOME);
	            	 placeofSupplyTxt.sendKeys(Keys.SHIFT,Keys.END);
	            	 placeofSupplyTxt.sendKeys("Abu Dhabi");
	            	 Thread.sleep(2000);
	            	 placeofSupplyTxt.sendKeys(Keys.TAB);
	            	 
	            	 jurisdictionTxt.click();
	            	 Thread.sleep(2000);
	            	 jurisdictionTxt.sendKeys(Keys.HOME);
	            	 jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.END);
	            	 jurisdictionTxt.sendKeys("Dubai");
	            	 Thread.sleep(2000);
	            	 jurisdictionTxt.sendKeys(Keys.TAB);
	            	 Thread.sleep(2000);
	            	 
	                 return false;
	             }  
	            }
	            catch (Exception e) 
	  		  {
	  			  String exception =e.getMessage();
	  			  excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 77, 10, exception);
	  			  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	  			  return false;
	  		  }
	  		   
	    }
		  
		
		 @FindBy(xpath="//input[@id='id_body_33554496']")
		 private static WebElement  enter_VAT;
			
		 @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[2]/div[1]/div/div[2]/div[1]/div[1]/div[1]/div[3]/div[4]/div/table/tbody/tr[1]/td[15]/input")
		 private static WebElement  enter_VATTab;
		 
		 @FindBy(xpath="//input[@id='id_body_33554497']")
		 private static WebElement  enter_Taxable;
		 
		 @FindBy(xpath="//input[@id='id_body_33554476']")
		 private static WebElement enter_AQTxt;
		 
		 @FindBy(xpath="//input[@id='id_body_33554477']")
		 private static WebElement enter_FQTxt;
		 
		 @FindBy(xpath="//input[@id='id_body_33554444']")
		 private static WebElement enter_RDTxt;
		 
		 @FindBy(xpath="//input[@id='id_body_33554479']")
		 private static WebElement enter_AvgRate;
		 
		 @FindBy(xpath="//input[@id='id_body_33554480']")
		 private static WebElement enter_AvgRateo;
		 
		 @FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
		 private static List<WebElement> pvwareHouseListCount;
		 
		 
	//Purchase Voucher New Body

		

		public boolean checkINVTagTaxCodeBySelectingStandardRateItemInPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		  /*try
		  {*/
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarExpandBtn));
			infoSideBarExpandBtn.click();*/
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();	
			enter_WarehouseTxt.sendKeys(Keys.END);
			enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
						
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 55, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
			
			if(getIsAlertPresent())
			{
				getAlert().accept();
			}
			
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
	        				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));			
			enter_ItemTxt.click();
			
			enter_ItemTxt.sendKeys(Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.END);
			Thread.sleep(2000);
		    enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		    Thread.sleep(3000);
		    enter_ItemTxt.sendKeys(Keys.TAB);
	    
					
	        /*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
	        select1stRow_3rdColumn.click();*/
	        			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
	        select1stRow_3rdColumn.click();
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			
			String actWarehouse=select1stRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 55, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 55, 8, actWarehouse);	
			
			String actItem=select1stRow_2ndColumn.getText();
			String expItem="STD RATE COGS ITEM";
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 56, 8, actItem);
						
			String actTaxCode=select1stRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 57, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 57, 8, actTaxCode);
			
			String actPurchaseAccount=select1stRow_4thColumn.getText();
			String expPurchaseAccount="STD RATE COGS ACC INV";
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 54, 8, actPurchaseAccount);
					
			String actUnits=select1stRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 58, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 58, 8, actUnits);
			
			System.out.println("************************************checkTaxCodeBySelectingStandardRateItemInPurchaseVoucherBody*************");
			
			System.out.println("WAREHOUSE       : " + actWarehouse		+ " Value Expected : " + expWarehouse);
			System.out.println("ITEM            : " + actItem		    + " Value Expected : " + expItem);
			System.out.println("Tax Code        : " + actTaxCode		+ " Value Expected : " + expTaxCode);
			System.out.println("UNITS           : " + actUnits		    + " Value Expected : " + expUnits);
			System.out.println("PurchaseAccount : " + actPurchaseAccount+ " Value Expected : " + expPurchaseAccount);
		
			
			JavascriptExecutor js = (JavascriptExecutor) getDriver();
			js.executeScript("arguments[0].scrollIntoView();", select1stRow_15thColumn);
			
			
			String actLinkColumn=select1stRow_10thColumn.getText();
			String expLinkColumn="PurOrd:1";
			
			System.out.println("Link Column       : " + actLinkColumn		+ " Value Expected : " + expLinkColumn);
			
			
			//id_body_33554494
			
			
			
			String actRateColumn=select1stRow_11thColumn.getText();
			String expRateColumn="20.00";
			
			System.out.println("Rate Column     : " + actRateColumn		+ " Value Expected : " + expRateColumn);
					
				select1stRow_11thColumn.click();
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys("200");
				enter_Rate.sendKeys(Keys.TAB);
				
				
				
				String expSaveValidationMessageOnSaveWithPurchaseInptData="This row is making budget negative.";
				
				String actMessage=checkValidationMessage(expSaveValidationMessageOnSaveWithPurchaseInptData);
				
				String actGetSaveMessage = new String(actMessage);
							
				String actSaveMessage = actGetSaveMessage.substring(0,35);
	      
				System.out.println("actSaveMessage"+actSaveMessage);
				
				System.out.println("Entry Page Save with Purchase Input Value Actual  : "+actMessage  +" Value Expected : "+expSaveValidationMessageOnSaveWithPurchaseInptData);			
				
				select1stRow_11thColumn.click();
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys("20");
				enter_Rate.sendKeys(Keys.TAB);
				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				//enter_Gross.clear();
				enter_Gross.sendKeys(Keys.TAB);
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
				enter_Discount.click();
				//enter_Gross.clear();
				enter_Discount.sendKeys(Keys.TAB);					
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_VAT));
				enter_VAT.click();
				//enter_VAT.clear();
				enter_VAT.sendKeys(Keys.TAB);
			
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Taxable));
				enter_Taxable.click();
				enter_Taxable.sendKeys(Keys.TAB);
				//enter_Taxable.clear();
				//enter_Taxable.sendKeys(Keys.TAB);
				
				
	

			String actGrossColumn=select1stRow_12thColumn.getText();
			String expGrossColumn="40.00";
			
			System.out.println("Gross Column       : " + actGrossColumn		+ " Value Expected : " + expGrossColumn);
			
						
			String actVatColumn=select1stRow_14thColumn.getText();
			String expVatColumn="5.00";
			
			System.out.println("VAT Column       : " + actVatColumn		+ " Value Expected : " + expVatColumn);
			
			
			String actTaxableColumn=select1stRow_15thColumn.getText();
			String expTaxableColumn="38.00";
			
			System.out.println("Taxable Column       : " + actTaxableColumn		+ " Value Expected : " + expTaxableColumn);
			
		
			
			if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
					actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) 
					&& actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount) && actRateColumn.equalsIgnoreCase(expRateColumn)
					&& actGrossColumn.equalsIgnoreCase(expGrossColumn) && actVatColumn.equalsIgnoreCase(expVatColumn)
					&& actTaxableColumn.equalsIgnoreCase(expTaxableColumn))
			{
				System.out.println("Test Pass : Data Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 54, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 54, 9, resFail);
				return false;
			}
		}
		/*catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 54, 10, e.getMessage());
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}*/
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_2']/div[1]")
		  private static WebElement bodyItemColTxt;
		  
		  @FindBy(xpath="//*[@id='idGlobalError']/div[1]/table/tbody/tr/td[2]/div[2]")
		  private static WebElement errorMessageOne;
		  
		  @FindBy(xpath="//*[@id='idGlobalError']/div[2]/table/tbody/tr/td[2]/div[2]")
		  private static WebElement errorMessageTwo;


		
		public boolean checkVendorAccountBlankNarrationToDisplayCaptionItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		
			
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{		
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					
					String actEntryPageHeaderFieldsDocNumber      = documentNumberTxt.getAttribute("value");				
					boolean actEntryPageHeaderFieldsVendorAc       = vendorAccountTxt.getAttribute("value").isEmpty();
					
					/*String actEntryPageHeaderFieldsCurrency       = voucherHeaderCurrency.getAttribute("value");
				    String actEntryPageHeaderFieldsExchRate       = voucherHeaderExchangeRate.getAttribute("value");*/
				    String actEntryPageHeaderFieldsNarration      = purchaseVoucherVATNewNarration.getAttribute("value");
				    
				    String expEntryPageHeaderFieldsDocNumber      = "SU//TEXT1";				
					boolean expEntryPageHeaderFieldsVendorAc       = true;
					
					//String expEntryPageHeaderFieldsCurrency       = "INR";
				    //String expEntryPageHeaderFieldsExchRate       = "1.0000000000";
				    String expEntryPageHeaderFieldsNarration      = "Test";
				    		    
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyItemColTxt));
					String actBodyGridFirstCol                    = bodyItemColTxt.getText();
					String expBodyGridFirstCol                    = "Item";
			
					System.out.println("BodyGridFirstCol             :  " + actBodyGridFirstCol + " Value Expected : " + expBodyGridFirstCol);
				    		
				    System.out.println("Document No Value Actual     :  " + actEntryPageHeaderFieldsDocNumber+  " Value Expected : " + expEntryPageHeaderFieldsDocNumber);
					System.out.println("Vendor Account Value Actual  :  " + actEntryPageHeaderFieldsVendorAc+   " Value Expected : " + expEntryPageHeaderFieldsVendorAc);
					//System.out.println("Currency Value Actual        :  " + actEntryPageHeaderFieldsCurrency+   " Value Expected : " + expEntryPageHeaderFieldsCurrency);
					
					//System.out.println("Exchange Rate Value Actual   :  " + actEntryPageHeaderFieldsExchRate+   " Value Expected : " + expEntryPageHeaderFieldsExchRate);
					System.out.println("Narration Value Actual       :  " + actEntryPageHeaderFieldsNarration+  " Value Expected : " + expEntryPageHeaderFieldsNarration);
												
					
					/*//String actR1C1Item          = select1stRow_1stColumn.getText();
					String actR1C2Item            = select1stRow_2ndColumn.getText();
					//String actR1C5Qty           = select1stRow_3rdColumn.getText();
					String actR1C4PurchaseAccount = select1stRow_4thColumn.getText();
					String actR1C5Units           = select1stRow_5thColumn.getText();
					String actR1C6RD              = select1stRow_6thColumn.getText();
					String actR1C7AvgRate         = select1stRow_7thColumn.getText();
					String actR1C8AvgRateO        = select1stRow_8thColumn.getText();
					String actR1C9Qty             = select1stRow_9thColumn.getText();
					String actR1C10Link           = select1stRow_10thColumn.getText();
					String actR1C11Rate           = select1stRow_11thColumn.getText();	
					String actR1C12Gross          = select1stRow_12thColumn.getText();
					
					//String expR1C1Item          = select1stRow_1stColumn.getText();
					String expR1C2Item            = "STD RATE COGS ITEM";
					//String expR1C5Qty           = select1stRow_3rdColumn.getText();
					String expR1C4PurchaseAccount = "STD RATE COGS ACC INV";
					String expR1C5Units           = "Dozs";
					String expR1C6RD              = "0.00";
					String expR1C7AvgRate         = "10.00";
					String expR1C8AvgRateO        = "10.00";
					String expR1C9Qty             = "2.00";
					String expR1C10Link           = "PurOrd:1";
					String expR1C11Rate           = "20.00";	
					String expR1C12Gross          = "40.00";
						
					System.out.println("Entry Page Save with Vendor Item Value Actual   : " + actR1C2Item             + " Value Expected : " + expR1C2Item);	
					System.out.println("Entry Page Save with Vendor Units Value Actual  : " + actR1C4PurchaseAccount  + " Value Expected : " + expR1C4PurchaseAccount);
					System.out.println("Entry Page Save with Vendor QTY Value Actual    : " + actR1C5Units            + " Value Expected : " + expR1C5Units);
					System.out.println("Entry Page Save with Vendor RATE Value Actual   : " + actR1C6RD               + " Value Expected : " + expR1C6RD);
					System.out.println("Entry Page Save with Vendor Gross Value Actual  : " + actR1C7AvgRate          + " Value Expected : " + expR1C7AvgRate);			
					System.out.println("Entry Page Save with Vendor Gross Value Actual  : " + actR1C8AvgRateO         + " Value Expected : " + expR1C8AvgRateO);
					
					System.out.println("Entry Page Save with Vendor Item Value Actual   : " + actR1C9Qty              + " Value Expected : " + expR1C9Qty);	
					System.out.println("Entry Page Save with Vendor Units Value Actual  : " + actR1C10Link            + " Value Expected : " + expR1C10Link);
					System.out.println("Entry Page Save with Vendor QTY Value Actual    : " + actR1C11Rate            + " Value Expected : " + expR1C11Rate);
					System.out.println("Entry Page Save with Vendor RATE Value Actual   : " + actR1C12Gross           + " Value Expected : " + expR1C12Gross);
					*/
					
					
					if(validationConfirmationMessage.getText().isEmpty()==false)
					{
						errorMessageCloseBtn.click();
					}
					
					
					if(actEntryPageHeaderFieldsDocNumber.equalsIgnoreCase(expEntryPageHeaderFieldsDocNumber)
							&& actEntryPageHeaderFieldsVendorAc==expEntryPageHeaderFieldsVendorAc
							&& actEntryPageHeaderFieldsNarration.equalsIgnoreCase(expEntryPageHeaderFieldsNarration)
							&& actBodyGridFirstCol.equalsIgnoreCase(expBodyGridFirstCol))	
					{
						System.out.println("Test Pass : entry Page Options Are Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : entry Page NOT Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 13, 9, resFail);
						return false;
					}
				 }
				catch (Exception e) 
			    {
			  		  String exception =e.getMessage();
			          excelReader.setExceptionInExcel(xlfile, xlSheetName, 12, 10, e.getMessage());
			          System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			          return false;
			    }
			  }	
		
		
		
			
			
			
			
			
			public boolean checkSavingVoucherWithoutExpiryDatePurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
					vendorAccountTxt.click();
					Thread.sleep(2000);
					vendorAccountTxt.sendKeys("Vendor B");
					Thread.sleep(2000);
					vendorAccountTxt.sendKeys(Keys.TAB);					
		            		    	             
		            departmentTxt.click();
		            departmentTxt.sendKeys("DUBAI");
		            Thread.sleep(2000);
		            departmentTxt.sendKeys(Keys.TAB);
		            

                   Thread.sleep(2000);
                   
		            	 placeofSupplyTxt.sendKeys(Keys.HOME);
		            	 placeofSupplyTxt.sendKeys(Keys.SHIFT,Keys.END);
		            	 placeofSupplyTxt.sendKeys("Abu Dhabi");
		            	 Thread.sleep(2000);
		            	 placeofSupplyTxt.sendKeys(Keys.TAB);
		            	 
		            	 jurisdictionTxt.click();
		            	 Thread.sleep(2000);
		            	 jurisdictionTxt.sendKeys(Keys.HOME);
		            	 jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.END);
		            	 jurisdictionTxt.sendKeys("Dubai");
		            	 Thread.sleep(2000);
		            	 jurisdictionTxt.sendKeys(Keys.TAB);
		            	 Thread.sleep(2000);
		            	 
		            	/* getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarExpandBtn));
		 				infoSideBarExpandBtn.click();
		 						
		 				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 				select1stRow_1stColumn.click();
		 				
		 				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		 				enter_WarehouseTxt.click();			
		 				enter_WarehouseTxt.sendKeys(Keys.SPACE);
		 							
		 				int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
		 				
		 				for (int i = 0; i < pvvGridWarehouseListCount; i++) 
		 				{
		 					String warehouse=pvvGridWarehouseList.get(i).getText();
		 					if (warehouse.equalsIgnoreCase("Hyderabad")) 
		 					{
		 						pvvGridWarehouseList.get(i).click();
		 						break;
		 					}
		 				}
		 				
		 		        enter_WarehouseTxt.sendKeys(Keys.TAB);
		 		        				
		 				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));			
		 				enter_ItemTxt.click();
		 				Thread.sleep(2000);
		 				enter_ItemTxt.sendKeys(Keys.HOME);
		 				enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.END);
		 				Thread.sleep(2000);
		 			    enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
				select1stRow_10thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
				enter_Batch.click();
				enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherN", 112, 6));
				
				*/
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expSaveMessageValidationWithoutBatchExpiry=excelReader.getCellData("PurchaseVoucherN", 113, 7);
				
				String validationMessage=checkValidationMessage(expSaveMessageValidationWithoutBatchExpiry);
				

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 113, 8, validationMessage);

				System.out.println("*********************************************** checkSavingVoucherWithoutExpiryDatePurchaseVoucher  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+validationMessage+" Value Expected : "+"TRUE");	
				
				
				
				if(validationMessage.equalsIgnoreCase(expSaveMessageValidationWithoutBatchExpiry))
				{
					System.out.println("Test Pass : Error Message Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 111, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test fail : Error Message NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 111, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 111, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		
			}
			
			@FindBy(xpath="//input[@id='id_body_37']")
			  private static WebElement enter_Expirydate;
	  
			public boolean checkInputExpiryDateOfBatchInPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				try
				{
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
				select1stRow_10thColumn.click();
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
				enter_Batch.click();
				enter_Batch.sendKeys(Keys.TAB);
				
				Calendar calendar = Calendar.getInstance();
				
			    calendar.add(Calendar.DATE, 2);
			
			    Date date = calendar.getTime();
			
			    DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
			    
			    System.out.println(dfr.format(date).toString());
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
				enter_Expirydate.click();
				enter_Expirydate.sendKeys(Keys.END);
				enter_Expirydate.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_Expirydate.sendKeys(dfr.format(date).toString());
				enter_Expirydate.sendKeys(Keys.TAB);	
				
				DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
				//Date date=new Date();
				System.out.println(df.format(date));
				
				//Actdata is current date
				
				String actBatchExpiryColumnAfterInput=select1stRow_12thColumn.getText();
				
				String expBatchExpiryColumnAfterInput=df.format(date);
				

				System.out.println("*********************************************** checkExpiryDateOfBatchPurchaseVoucher  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actBatchExpiryColumnAfterInput  +" Value Expected : "+expBatchExpiryColumnAfterInput);	

				if(actBatchExpiryColumnAfterInput.equalsIgnoreCase(expBatchExpiryColumnAfterInput))
				{
					System.out.println("Test Pass : Expiry date is Correct");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 114, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Expiry date is NOt Correct");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 114, 9, resFail);
					
					return false;
				}
			}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 114, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			
			 @FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
			  private static List<WebElement> itemListCount;
			
			public boolean checkEnteringDataInSecondRowOfPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{

			    getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount=itemListCount.size();
				
				System.err.println(itemcount);
					
				for(int i=0 ; i < itemcount ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 116, 6)))
					{
						itemListCount.get(i).click();
						
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
				select2ndRow_5thColumn.click();
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherN", 117, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherN", 118, 6));
				enter_Rate.sendKeys(Keys.TAB);
				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);
				
				
				Thread.sleep(2000);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
				binSearchBtn.click();
				
				Thread.sleep(2000);
				
				boolean actBinSearchTxt      =binSearchTxt.isDisplayed();
				boolean actBinSearchBtn      =binSearchBtn.isDisplayed();
				boolean actBinAutoAllocateBtn=binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn        =binPickBtn.isDisplayed();
				boolean actBinCancelBtn      =binCancelBtn.isDisplayed();

				boolean expBinSearchTxt      =true;
				boolean expBinSearchBtn      =true;
				boolean expBinAutoAllocateBtn=true;
				boolean expBinPickBtn        =true;
				boolean expBinCancelBtn      =true;
				

				System.out.println("*********************************************** checkEnteringDataInSecondRowOfPurchaseVoucher  ********************************************");
				System.out.println(" BinSearch Input Value Actual          : "+actBinSearchTxt        +" Value Expected : "+expBinSearchTxt);	
				System.out.println(" BinSearchBtn Input Value Actual       : "+actBinSearchBtn        +" Value Expected : "+expBinSearchBtn);
				System.out.println(" BinAutoAllocateBtn Input Value Actual : "+actBinAutoAllocateBtn  +" Value Expected : "+expBinAutoAllocateBtn);
				System.out.println(" BinPickBtn Input Value Actual         : "+actBinPickBtn          +" Value Expected : "+expBinPickBtn);
				System.out.println(" BinCancelBtn Input Value Actual       : "+actBinCancelBtn        +" Value Expected : "+expBinCancelBtn);
				
				
		       getWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect1stRow_2ndColumn));
				
		        String actBinGroupNameR1=binselect1stRow_2ndColumn.getText();
				
				String actBinNameR2=binselect2ndRow_2ndColumn.getText();
				String actBinStockR2=binselect2ndRow_3rdColumn.getText();
				String actBinCapacityR2=binselect2ndRow_4thColumn.getText();
				String actBinLoadR2=binselect2ndRow_5thColumn.getText();
				String actBinFreeSpaceR2=binselect2ndRow_6thColumn.getText();
				String actBinFreeQtyR2=binselect2ndRow_7thColumn.getText();
				String actBinToBeAllocatedR2=binselect2ndRow_8thColumn.getText();
					
				
				String actBinNameR3=binselect3rdRow_2ndColumn.getText();
				String actBinStockR3=binselect3rdRow_3rdColumn.getText();
				String actBinCapacityR3=binselect3rdRow_4thColumn.getText();
				String actBinLoadR3=binselect3rdRow_5thColumn.getText();
				String actBinFreeSpaceR3=binselect3rdRow_6thColumn.getText();
				String actBinFreeQtyR3=binselect3rdRow_7thColumn.getText();
				String actBinToBeAllocatedR3=binselect3rdRow_8thColumn.getText();
				
				String actBinTotalQty=binTotalQty.getAttribute("value");
				String actBinBaseUom=binBaseUOM.getText();
				//String actBinBalanceQty=binBalanceTxt.getAttribute("value");

			   
				//String actBinSum=binSumInward.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 119, 8, actBinGroupNameR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 120, 8, actBinNameR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 121, 8, actBinStockR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 122, 8, actBinCapacityR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 123, 8, actBinLoadR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 124, 8, actBinFreeSpaceR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 125, 8, actBinFreeQtyR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 126, 8, actBinToBeAllocatedR2);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 127, 8, actBinNameR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 128, 8, actBinStockR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 129, 8, actBinCapacityR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 130, 8, actBinLoadR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 131, 8, actBinFreeSpaceR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 132, 8, actBinFreeQtyR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 133, 8, actBinToBeAllocatedR3);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 134, 8, actBinTotalQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 135, 8, actBinBaseUom);
				//excelReader.setCellData(xlfile, "PurchaseVoucherN", 136, 8, actBinBalanceQty);
				
				
				
				String expBinGroupNameR1=excelReader.getCellData("PurchaseVoucherN", 119, 7);
		
				String expBinNameR2=excelReader.getCellData("PurchaseVoucherN", 120, 7);
				String expBinStockR2=excelReader.getCellData("PurchaseVoucherN", 121, 7);
				String expBinCapacityR2=excelReader.getCellData("PurchaseVoucherN", 122, 7);
				String expBinLoadR2=excelReader.getCellData("PurchaseVoucherN", 123, 7);
				String expBinFreeSpaceR2=excelReader.getCellData("PurchaseVoucherN", 124, 7);
				String expBinFreeQtyR2=excelReader.getCellData("PurchaseVoucherN", 125, 7);
				String expBinToBeAllocatedR2=excelReader.getCellData("PurchaseVoucherN", 126, 7);
					
				String expBinNameR3=excelReader.getCellData("PurchaseVoucherN", 127, 7);
				String expBinStockR3=excelReader.getCellData("PurchaseVoucherN", 128, 7);
				String expBinCapacityR3=excelReader.getCellData("PurchaseVoucherN", 129, 7);
				String expBinLoadR3=excelReader.getCellData("PurchaseVoucherN", 130, 7);
				String expBinFreeSpaceR3=excelReader.getCellData("PurchaseVoucherN", 131, 7);
				String expBinFreeQtyR3=excelReader.getCellData("PurchaseVoucherN", 132, 7);
				String expBinToBeAllocatedR3=excelReader.getCellData("PurchaseVoucherN", 133, 7);
				
				
				String expBinTotalQty=excelReader.getCellData("PurchaseVoucherN", 134, 7);
				String expBinBaseUom=excelReader.getCellData("PurchaseVoucherN", 135, 7);
				String expBinBalanceQty=excelReader.getCellData("PurchaseVoucherN", 136, 7);
				
				//String expBinSum="12.00";
						
				
		        System.out.println("First Row Group Name Value Actual       :  " + actBinGroupNameR1       +"  Value Expected : " + expBinGroupNameR1);
				
				System.out.println("Second Row Bin Name Value Actual        :  " + actBinNameR2            +"  Value Expected : " + expBinNameR2);
				System.out.println("Second Row Stock Value Actual           :  " + actBinStockR2           +"  Value Expected : " + expBinStockR2);
				System.out.println("Second Row Capacity Value Actual        :  " + actBinCapacityR2        +"  Value Expected : " + expBinCapacityR2);
				System.out.println("Second Row Load Value Actual            :  " + actBinLoadR2            +"  Value Expected : " + expBinLoadR2);
				System.out.println("Second Row Free Space Value Actual      :  " + actBinFreeSpaceR2       +"  Value Expected : " + expBinFreeSpaceR2);
				System.out.println("Second Row Free Qty Value Actual        :  " + actBinFreeQtyR2         +"  Value Expected : " + expBinFreeQtyR2);
				System.out.println("Second Row To Be Allocated Value Actual :  " + actBinToBeAllocatedR2   +"  Value Expected : " + expBinToBeAllocatedR2);
					
				System.out.println("Third Row Bin Name Value Actual         :  " + actBinNameR3            +"  Value Expected : " + expBinNameR3);
				System.out.println("Third Row Stock Value Actual            :  " + actBinStockR3           +"  Value Expected : " + expBinStockR3);
				System.out.println("Third Row Capacity Value Actual         :  " + actBinCapacityR3        +"  Value Expected : " + expBinCapacityR3);
				System.out.println("Third Row Load Value Actual             :  " + actBinLoadR3            +"  Value Expected : " + expBinLoadR3);
				System.out.println("Third Row Free Space Value Actual       :  " + actBinFreeSpaceR3       +"  Value Expected : " + expBinFreeSpaceR3);
				System.out.println("Third Row Free Qty Value Actual         :  " + actBinFreeQtyR3         +"  Value Expected : " + expBinFreeQtyR3);
				System.out.println("Third Row To Be Allocated Value Actual  :  " + actBinToBeAllocatedR3   +"  Value Expected : " + expBinToBeAllocatedR3);
				
				System.out.println("Bin Total Qty Value Actual              :  " +actBinTotalQty           +"  Value Expected : " +expBinTotalQty);
				System.out.println("Bin Base Uom Value Actual               :  " +actBinBaseUom            +"  Value Expected : " +expBinBaseUom);
				//System.out.println("Bin Balance Txt Value Actual            :  " +actBinBalanceQty         +"  Value Expected : " +expBinBalanceQty);
			
				
				if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn 
					&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
					
					&& actBinGroupNameR1.equalsIgnoreCase(expBinGroupNameR1)
					
					&& actBinNameR2.equalsIgnoreCase(expBinNameR2) && actBinStockR2.equalsIgnoreCase(expBinStockR2) 
					&& actBinCapacityR2.equalsIgnoreCase(expBinCapacityR2) && actBinLoadR2.equalsIgnoreCase(expBinLoadR2)
					&& actBinFreeSpaceR2.equalsIgnoreCase(expBinFreeSpaceR2) && actBinFreeQtyR2.equalsIgnoreCase(expBinFreeQtyR2)
					&& actBinToBeAllocatedR2.equalsIgnoreCase(expBinToBeAllocatedR2)
					
					&& actBinNameR3.equalsIgnoreCase(expBinNameR3) && actBinStockR3.equalsIgnoreCase(expBinStockR3) 
					&& actBinCapacityR3.equalsIgnoreCase(expBinCapacityR3) && actBinLoadR3.equalsIgnoreCase(expBinLoadR3)
					&& actBinFreeSpaceR3.equalsIgnoreCase(expBinFreeSpaceR3) && actBinFreeQtyR3.equalsIgnoreCase(expBinFreeQtyR3)
					&& actBinToBeAllocatedR3.equalsIgnoreCase(expBinToBeAllocatedR3)
					
					&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
					/*&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)*/)
					
				{
					System.out.println("Test Pass : Bin Pop Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 115, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Bin Pop NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 115, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 115, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			
			
			public boolean checkPurchaseVoucherNewSelectingBin4ThroughDoubleClick() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_1stColumn));
				getAction().doubleClick(binselect2ndRow_1stColumn).build().perform();
						
				boolean BinOkButtonIsEnable=binOkBtn.isEnabled();
				
				String actBinOkButtonIsEnable=Boolean.toString(BinOkButtonIsEnable);
				String expBinOkButtonIsEnable=excelReader.getCellData("PurchaseVoucherN", 138, 7);
				
			    excelReader.setCellData(xlfile, "PurchaseVoucherN", 138, 8, actBinOkButtonIsEnable.toUpperCase());
				
				String actBinScreenToBeAllocatedColumnR2C8=binselect2ndRow_8thColumn.getText();
				String expBinScreenToBeAllocatedColumnR2C8=excelReader.getCellData("PurchaseVoucherN", 139, 7);
				
			    excelReader.setCellData(xlfile, "PurchaseVoucherN", 139, 8, actBinScreenToBeAllocatedColumnR2C8);
				
							
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
				binOkBtn.click();
				
				String actVoucherBinColumnR2C10=select2ndRow_10thColumn.getText();
				String expVoucherBinColumnR2C10=excelReader.getCellData("PurchaseVoucherN", 140, 7);
				
			    excelReader.setCellData(xlfile, "PurchaseVoucherN", 140, 8, actVoucherBinColumnR2C10);
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_10thColumn));
				

				System.out.println("*********************************************** checkPurchaseVoucherNewSelectingBin5ThroughDoubleClick  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actBinOkButtonIsEnable                 +" Value Expected : "+expBinOkButtonIsEnable);	
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actBinScreenToBeAllocatedColumnR2C8    +" Value Expected : "+expBinScreenToBeAllocatedColumnR2C8);
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actVoucherBinColumnR2C10               +" Value Expected : "+expVoucherBinColumnR2C10);
			
				if(actBinOkButtonIsEnable.equalsIgnoreCase(expBinOkButtonIsEnable) && actBinScreenToBeAllocatedColumnR2C8.equalsIgnoreCase(expBinScreenToBeAllocatedColumnR2C8)
						&& actVoucherBinColumnR2C10.equalsIgnoreCase(expVoucherBinColumnR2C10))
				{

					System.out.println("test pass : Bin 5 Displayed in Voucher");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 137, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("test fail : Bin 5 NOT Displayed in Voucher");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 137, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 137, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			
			
			
			
			
			public boolean checkEnteringDatainThirdRowAndSaveForRmaValidation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
				select3rdRow_1stColumn.click();
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.LEFT_SHIFT,Keys.HOME);
				enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemcount=itemListCount.size();
				
				System.err.println(itemcount);
					
				for(int i=0 ; i < itemcount ;i++)
				{
					String data=itemListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 142, 6)))
					{
						itemListCount.get(i).click();	
						break;
					}
				}
					
				enter_ItemTxt.sendKeys(Keys.TAB);	
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expErrorMessage=excelReader.getCellData("PurchaseVoucherN", 143, 7);

				String validationMessage=checkValidationMessage(expErrorMessage);
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 143, 8, validationMessage);
				
				System.out.println("************************************* checkEnteringDatainThirdRowAndSaveForRmaValidation  *********************************");
				
				System.out.println("Message On Rma Mandatory       :  " + validationMessage+" Value Expected : " +"TRUE");
				
				if(validationMessage.equalsIgnoreCase(expErrorMessage))
				{
					System.out.println("Test Pass : error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 141, 9, resPass);
					
					return true;
				}
				else
				{
					System.out.println("Test Fail : error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 141, 9, resFail);
								
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 141, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			
			
			
			
			
			public boolean checkPurchaseVoucherEnteringDataRmaWithZeroQuantity() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_12thColumn));
				select3rdRow_12thColumn.click();
				
				String expErrorMessage=excelReader.getCellData("PurchaseVoucherN", 145, 7);
				
				String validationMessage=checkValidationMessage(expErrorMessage);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 145, 8, validationMessage);
				
				
				System.out.println("************************************* checkEnteringDataRmaWithZeroQuantity  *********************************");
				
				System.out.println("Message On Rma With Zero Qty     :  " +validationMessage +" Value Expected : " +"TRUE");
					
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaCancelBtn));
				rmaCancelBtn.click();
				
				
				if(validationMessage.equalsIgnoreCase(expErrorMessage))
				{
					System.out.println("Test Pass : error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 144, 9, resPass);
					
					return true;
				}
				else
				{
					System.out.println("Test Fail : error Message Displayed");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 144, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 144, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			
			
			
		
			public boolean checkPurchaseVoucherNewRMAPopupScreen() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{	
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
				select3rdRow_5thColumn.click();
				
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherN", 147, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(1000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherN", 148, 6));
				enter_Rate.sendKeys(Keys.TAB);
				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_12thColumn));
				select3rdRow_12thColumn.click();
				
				getWebDriverWait().until(ExpectedConditions.visibilityOf(rmaScreenTitle));
				
				// Actual
				boolean actRmaSerialNumberTxtField=rmaSerialNumberTxtField.isDisplayed();
				boolean actRmaQuantityTxtField=rmaQuantityTxtField.isDisplayed();
				boolean actRmaAddBtn=rmaAddBtn.isDisplayed();
				boolean actRmaNumberofItemsLabel=rmaNumberofItemsLabel.isDisplayed();
				boolean actRmaTableHeadingRMA=rmaTableHeadingRMA.isDisplayed();
				boolean actRmaTableHeadingDocumentNo=rmaTableHeadingDocumentNo.isDisplayed();
				boolean actRmaTableHeadingDocumentDate=rmaTableHeadingDocumentDate.isDisplayed();
				boolean actRmaClearBtn=rmaClearBtn.isDisplayed();
				boolean actRmaOkBtn=rmaOkBtn.isDisplayed();
				boolean actRmaCancelBtn=rmaCancelBtn.isDisplayed();
				boolean actRmaCloseBtn=rmaCloseBtn.isDisplayed();
				
				// Expected
				boolean exprmaSerialNumberTxtField=true;
				boolean exprmaQuantityTxtField=true;
				boolean exprmaAddBtn=true;
				boolean exprmaNumberofItemsLabel=true;
				boolean exprmaTableHeadingRMA=true;
				boolean exprmaTableHeadingDocumentNo=true;
				boolean exprmaTableHeadingDocumentDate=true;
				boolean exprmaClearBtn=true;
				boolean exprmaOkBtn=true;
				boolean exprmaCancelBtn=true;
				boolean exprmaCloseBtn=true;
				
				
				System.out.println("************************************* checkRMAPopupScreen  *********************************");
				
				System.out.println("Rma Serial Number Text Field 	   : "+actRmaSerialNumberTxtField	   +"  Value Expected : "+exprmaSerialNumberTxtField);
				System.out.println("Rma Qty Field              	 	   : "+actRmaQuantityTxtField		   +"  Value Expected : "+exprmaQuantityTxtField);
				System.out.println("Rma Add Button 					   : "+actRmaAddBtn					   +"  Value Expected : "+exprmaAddBtn);
				System.out.println("Rma Number Of Items 			   : "+actRmaNumberofItemsLabel		   +"  Value Expected : "+exprmaNumberofItemsLabel);
				System.out.println("Rma Table heading Rma  			   : "+actRmaTableHeadingRMA		   +"  Value Expected : "+exprmaTableHeadingRMA);
				System.out.println("Rma Table Heading Document Number  : "+actRmaTableHeadingDocumentNo    +"  Value Expected : "+exprmaTableHeadingDocumentNo);
				System.out.println("Rma Table Heading Document Date    : "+actRmaTableHeadingDocumentDate  +"  Value Expected : "+exprmaTableHeadingDocumentDate);
				System.out.println("Rma Clear Button                   : "+actRmaClearBtn				   +"  Value Expected : "+exprmaClearBtn);
				System.out.println("Rma Ok Button                      : "+actRmaOkBtn					   +"  Value Expected : "+exprmaOkBtn);
				System.out.println("Rma Cancel Button                  : "+actRmaCancelBtn				   +"  Value Expected : "+exprmaCancelBtn);
				System.out.println("Rma Close Button  				   : "+actRmaCloseBtn				   +"  Value Expected : "+exprmaCloseBtn);
				
				if(actRmaSerialNumberTxtField==exprmaSerialNumberTxtField && actRmaQuantityTxtField==exprmaQuantityTxtField  && actRmaAddBtn==exprmaAddBtn
						&& actRmaNumberofItemsLabel==exprmaNumberofItemsLabel && actRmaNumberofItemsLabel==exprmaTableHeadingRMA
						&& actRmaTableHeadingDocumentNo==exprmaTableHeadingDocumentNo && actRmaTableHeadingDocumentDate==exprmaTableHeadingDocumentDate
						&& actRmaClearBtn==exprmaClearBtn && actRmaOkBtn==exprmaOkBtn && actRmaCancelBtn==exprmaCancelBtn && actRmaCloseBtn==exprmaCloseBtn)
				{
					System.out.println("***Test Pass: RMA Popup Screen Appeared with all the Options***");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 146, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("***Test Fail: RMA Popup Screen NOT Appeared with all the Options***");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 146, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 146, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			
			@FindBy(xpath="//input[@id='id_body_38']")
			private static WebElement  enter_RMA;
			
		    @FindBy (xpath="//input[@id='RM_RMANO']")
			private static WebElement rma_EnterRMA;

		    @FindBy (xpath="//td[@id='RMA_Table_col_1-4']//i[@class='icon-clear icon-font']")
		    private static WebElement rmaTableRow1ClearBtn;
		    
		    @FindBy(xpath="//*[@id='RMA_Table_body']/tr/td[2]")
		    private static List<WebElement> rmapopupBodyGrid;

			public boolean checkPurchaseVoucherNewInputingSerialNumbers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				
				try
				{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
				rmaSerialNumberTxtField.click();
				rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherN", 150, 6));
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
				rmaAddBtn.click();
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow1Column1));
				String actRmavalueR1=rma_EnterRMA.getAttribute("value");
				String expRmavalueR1=excelReader.getCellData("PurchaseVoucherN", 151, 7);
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow2Column1));
				String actRmavalueR2=rmaTableRow2Column1.getText();
				String expRmavalueR2=excelReader.getCellData("PurchaseVoucherN", 152, 7);
				
					
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow3Column1));
				String actRmavalueR3=rmaTableRow3Column1.getText();
				String expRmavalueR3=excelReader.getCellData("PurchaseVoucherN", 153, 7);
				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow4Column1));
				String actRmavalueR4=rmaTableRow4Column1.getText();
				String expRmavalueR4=excelReader.getCellData("PurchaseVoucherN", 154, 7);
				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow5Column1));
				String actRmavalueR5=rmaTableRow5Column1.getText();
				String expRmavalueR5=excelReader.getCellData("PurchaseVoucherN", 155, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 151, 8, actRmavalueR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 152, 8, actRmavalueR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 153, 8, actRmavalueR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 154, 8, actRmavalueR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 155, 8, actRmavalueR5);
				
				
				System.out.println("************************************* checkInputingSerialNumbers  *********************************");
				System.out.println("Rma value Row 1 In Rma Pop Up  : "+actRmavalueR1+"  Value Expected : "+expRmavalueR1);
				System.out.println("Rma value Row 2 In Rma Pop Up  : "+actRmavalueR2+"  Value Expected : "+expRmavalueR2);
				System.out.println("Rma value Row 3 In Rma Pop Up  : "+actRmavalueR3+"  Value Expected : "+expRmavalueR3);
				System.out.println("Rma value Row 4 In Rma Pop Up  : "+actRmavalueR4+"  Value Expected : "+expRmavalueR4);
				System.out.println("Rma value Row 5 In Rma Pop Up  : "+actRmavalueR5+"  Value Expected : "+expRmavalueR5);
				
				if(actRmavalueR1.equalsIgnoreCase(expRmavalueR1) && actRmavalueR2.equalsIgnoreCase(expRmavalueR2)
						&& actRmavalueR3.equalsIgnoreCase(expRmavalueR3) && actRmavalueR4.equalsIgnoreCase(expRmavalueR4)
						&& actRmavalueR5.equalsIgnoreCase(expRmavalueR5))
				{
					System.out.println("Test Pass : Allowing Different Serial numbers");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 149, 9, resPass);
					
					getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
					enter_RMA.sendKeys(Keys.TAB);
					
					return true;
				}
				else
				{
					System.out.println("Test Fail : NOT Allowing Different Serial numbers");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 149, 9, resFail);
					
					getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
					enter_RMA.sendKeys(Keys.TAB);
					
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 149, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				enter_RMA.sendKeys(Keys.TAB);
		   	 	return false;
			}
			}

			
			
			 public boolean checkPurchaseVoucherNewAddingStockItemInFourthRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			 {
					
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
					
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					enter_ItemTxt.sendKeys(Keys.SPACE);
					
					int itemcount=itemListCount.size();
					
					System.err.println(itemcount);
						
					for(int i=0 ; i < itemcount ;i++)
					{
						String data=itemListCount.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherN", 157, 6)))
						{
							itemListCount.get(i).click();
							
							break;
						}
					}
						
					enter_ItemTxt.sendKeys(Keys.TAB);	
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
					enter_UnitTxt.sendKeys(Keys.TAB);
					
					String actdata            = select4thRow_2ndColumn.getText();
					String expdata            = excelReader.getCellData("PurchaseVoucherN", 158, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 158, 8, actdata);
					

					System.out.println("Rma value Row 1 In Rma Pop Up  : "+actdata+"  Value Expected : "+expdata);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
					select4thRow_5thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherN", 159, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherN", 160, 6));
					enter_Rate.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.sendKeys(Keys.TAB);

					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
					String act1                = select4thRow_5thColumn.getText();
					String act2                = select4thRow_7thColumn.getText();
					String actGross            = select4thRow_8thColumn.getText();
				
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 161, 8, actGross);
					String exp1,exp2,expGross,exp4;
					
					exp1                        = "5.00";
					exp2                        = "9.00";
					expGross                    = excelReader.getCellData("PurchaseVoucherN", 161, 7);
									
					System.out.println("Rma value Row 2 In Rma Pop Up  : "+act1+"  Value Expected : "+exp1);
					System.out.println("Rma value Row 3 In Rma Pop Up  : "+act2+"  Value Expected : "+exp2);
					System.out.println("Rma value Row 4 In Rma Pop Up  : "+actGross+"  Value Expected : "+expGross);
									
					if(actdata.equalsIgnoreCase(expdata) && act1.equalsIgnoreCase(exp1) && act2.equalsIgnoreCase(exp2)
							&& actGross.equalsIgnoreCase(expGross))
					{
						System.out.println("Test Pass : Data Entered in Fourth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 156, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Data NOT Entered in Fourth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 156, 9, resFail);
						return false;
					}		
				  }
				catch (Exception e) 
			    {
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 156, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
			    }	

				}
				
				

			 
			 //Bill Reference Screen 	
				

				@FindBy(xpath="//input[@id='txtNewReference']")
				private static WebElement  billRefNewReferenceTxt;
				
				@FindBy(xpath="//input[@id='txtOnAccount']")
				private static WebElement  billRefTxtOnAccount;		
					
				@FindBy(xpath="//input[@id='Searchtxt']")
				private static WebElement  billRefSearchTxt;		
				
				@FindBy(xpath="//select[@id='cbmShowBillForAdjustment']")
				private static WebElement  billRefNewReferenceDropdown;		
				
				@FindBy(xpath="//select[@id='cbmShowBills']")
				private static WebElement  billRefShowBillsDropdown;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_11']//div[contains(text(),'Due Date')]")
				private static WebElement  billRefGridHeaderDueDate;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_16']//div[contains(text(),'Currency')]")
				private static WebElement  billRefGridHeaderCurrency;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_21']//div[contains(text(),'Original Amt')]")
				private static WebElement  billRefGridHeaderOrginalAmt;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_23']//div[contains(text(),'Balance Amount')]")
				private static WebElement  billRefGridHeaderBalanceAmt;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_33']//div[contains(text(),'Adjustment Amount')]")
				private static WebElement  billRefGridHeaderAdjustmentAmt;		
				
				@FindBy(xpath="//div[contains(text(),'Native Currency')]")
				private static WebElement  billRefGridHeaderNativeCurrency;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_41']//div[contains(text(),'Narration')]")
				private static WebElement  billRefGridHeaderNarration;		
				
				@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_50']//div[contains(text(),'Previous Adjustment Amount')]")
				private static WebElement  billRefGridHeaderPreviosAdjustmentAmt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-0']")
				private static WebElement  billRefGridFirstRow;	
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-1']//input")
				private static WebElement  billRefGridFirstRowChkbox;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-1']//input")
				private static WebElement  billRefGridSecondRowChkbox;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-1']//input")
				private static WebElement  billRefGridThirdRowChkbox;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-33']")
				private static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-33']")
				private static WebElement  billRefGridSecondRowAdjustmentAmtTxt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
				private static WebElement  billRefGridThirdRowAdjustmentAmtTxt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-41']")
				private static WebElement  billRefGridFirstNarrationTxt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-41']")
				private static WebElement  billRefGridSecondNarrationTxt;		
				
				@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-41']")
				private static WebElement  billRefGridThirdNarrationTxt;		
				
				@FindBy(xpath="//input[@id='id_Narration']")
				private static WebElement  narrationToWrite;		
				
				@FindBy(xpath="//input[@id='id_limit']")
				private static WebElement  adjustAmtToWrite;		
				
				@FindBy(xpath="//div[@class='col-xs-6 navbar-header']//div[@class='navText']")
				private static WebElement  billRefPaymentsBillReferenceLabel;		
				
				@FindBy(xpath="//div[@class='col-sm-12 col-md-3']//input[@class='Fbutton']")
				private static WebElement  billRefAdjustOnFIFOBtn;		
				
				@FindBy(xpath="//span[@id='btnPick']")
				private static WebElement  billRefPickIcon;		
				
				@FindBy(xpath="//span[@id='btnOk']")
				private static WebElement  billRefOkBtn;		
				
				@FindBy(xpath="//span[@id='btnCancel']")
				private static WebElement  billRefcancel;		
				
				@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
				private static WebElement  billRefSummatyValueNet;		
				
				@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
				private static WebElement  billRefGridVendorRow1;	
				
				@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
				private static WebElement  billRefGridVendorAmtRow1;	
				
				@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
				private static WebElement  billRefGridVendorRow2;	
				
				@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
				private static WebElement  billRefGridVendorAmtRow2;	
				
				@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
				private static WebElement  billRefGridVendorRow3;
				
				@FindBy(xpath="//label[@id='tbNewRefAmountAdjValue']")
				private static WebElement amtAdjustedAgainstNewREfinOtherVouchers;
						
				@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
				private static WebElement transactionCurency;
				
				@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
				private static WebElement baseCurrency;
				
				@FindBy(xpath="//label[@id='tbAmountToAdjustInLocalCurrencyValue']")
				private static WebElement localCurrencyDhs;
				
				@FindBy(xpath="//label[@id='tbNewRefBalAmountValue']")
				private static WebElement balanceNewReferenceAmt;
				
				@FindBy(xpath="//li[@id='id_li_Adjustment_Tab_BreakUpByTag']//span[@class='font-5'][contains(text(),'Break Up by Tag')]")
				private static WebElement breakUpByTagTab;
				
				@FindBy(xpath="//span[@class='font-5'][contains(text(),'Adjustment')]")
				private static WebElement adjustmentTab;
				
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-9']")
				private static WebElement breakUpByTagDueDate;
				
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-10']")
				private static WebElement breakUpByTagDepartment;
				
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-18']")
				private static WebElement breakUpByTagBaseCurrency;
				
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-17']")
				private static WebElement breakUpByTagBillCurrency;
				
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-20']")
				private static WebElement breakUpByTagBaseConversionRate;
					
				@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-21']")
				private static WebElement breakUpByTagBaseLocalCurrency;
				
				@FindBy(xpath="//label[@id='txtblkAmountadjusted']")
				private static WebElement  billRefAdjustAmountInTransCurency;
				
				@FindBy(xpath="//label[@id='txtblkAmounttobeadjust']")
				private static WebElement  billRefBalanceAmountAdjustInTrnasCurrency;
				
				@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
				private static WebElement  billRefInfoBarLocalCurrencyRate;
				
				
				@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
				private static WebElement billRefTransactionCurency;
				
				@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
				private static WebElement billRefBaseCurrency;
				

				@FindBy(xpath="//label[@id='id_BillWise_IP_AccountName']")
				private static WebElement breakUpDetailsAccount;
				
				@FindBy(xpath="//label[@id='id_BillWise_IP_ProductName']")
				private static WebElement breakUpDetailsItem;
				
				@FindBy(xpath="//label[@id='id_BillWise_IP_TagName']")
				private static WebElement breakUpDetailsDepartment;
				
				@FindBy(xpath="//label[@id='id_BillWise_IP_BaseCurrencyValue']")
				private static WebElement conversationRateBaseCurrencyRate;
				
				@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
				private static WebElement conversationRateLocalCurrencyRate;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAEDTranAmountValue']")
				private static WebElement asOnEntryDateTransAmt;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseConversionValue']")
				private static WebElement asOnEntryDateBaseConcersationRate;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseAmountValue']")
				private static WebElement asOnEntryDateBaseAmount;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalConversionValue']")
				private static WebElement asOnEntryDateLocConversationRate;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalAmountValue']")
				private static WebElement asOnEntryDateAmt;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAADTranAmountValue']")
				private static WebElement balOnAdjstDateTransAmt;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseConversionValue']")
				private static WebElement  balOnAdjstDateBasrConversionRate;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseAmountValue']")
				private static WebElement  balOnAdjstDateBaseAmount;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalConversionValue']")
				private static WebElement  balOnAdjstDateLocalConversionRate;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalAmountValue']")
				private static WebElement  balOnAdjstDateAmt;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAdjTranAmountValue']")
				private static WebElement adjustmentsAmount1;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAdjBaseAmountValue']")
				private static WebElement adjustmentsAmount2;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblAdjLocalAmountValue']")
				private static WebElement adjustmentsAmount3;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblNativeCurrencyValue']")
				private static WebElement adjustmentsAmount4;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffTranAmountValue']")
				private static WebElement exchangeGainLossForBaseCurrency;
				
				@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffLocalAmountValue']")
				private static WebElement exchangeGainLossForLocalCurrency;
				
				
				
				@FindBy(xpath="//input[@id='id_limit']")
				private static WebElement gridEnterAdjustAmtRow1;
				
				//Billreference Body Grid Elements
				
	            
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[8]")
				private static WebElement gridOrginalAmtRow1;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[8]")
				private static WebElement gridOrginalAmtRow2;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[8]")
				private static WebElement gridOrginalAmtRow3;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[8]")
				private static WebElement gridOrginalAmtRow4;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[8]")
				private static WebElement gridOrginalAmtRow5;
				
				
				
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[10]")
				private static WebElement gridBalanceAmtRow1;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[10]")
				private static WebElement gridBalanceAmtRow2;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[10]")
				private static WebElement gridBalanceAmtRow3;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[10]")
				private static WebElement gridBalanceAmtRow4;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[10]")
				private static WebElement gridBalanceAmtRow5;
				
				
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[13]")
				private static WebElement gridAdjustmentAmtRow1;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[13]")
				private static WebElement gridAdjustmentAmtRow2;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[13]")
				private static WebElement gridAdjustmentAmtRow3;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[13]")
				private static WebElement gridAdjustmentAmtRow4;

				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[13]")
				private static WebElement gridAdjustmentAmtRow5;
				
				
				
				@FindBy(xpath="//table[@id='id_Adjustment_Grid']")
				private static WebElement billRefAdjustBillsGrid;
					
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[3]")
				private static WebElement billRefAdjustBillsRow1DocNo;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[2]/td[3]")
				private static WebElement billRefAdjustBillsRow2DocNo;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[3]/td[3]")
				private static WebElement billRefAdjustBillsRow3DocNo;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[4]/td[3]")
				private static WebElement billRefAdjustBillsRow4DocNo;
				
				@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[5]/td[3]")
				private static WebElement billRefAdjustBillsRow5DocNo;
				
				
					
				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr/td[2]")
				private static WebElement InfoSideBarDocRow1;

				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr/td[3]")
				private static WebElement InfoSideBarAmtRow1;

				@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//td[4]")
				private static WebElement InfoSideBarBaseAmtRow1;

				// Row 2
				
				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[2]/td[2]")
				private static WebElement InfoSideBarDocRow2;

				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[2]/td[3]")
				private static WebElement InfoSideBarAmtRow2;

				@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[2]//td[4]")
				private static WebElement InfoSideBarBaseAmtRow2;

				// Row 3
				
				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[3]/td[2]")
				private static WebElement InfoSideBarDocRow3;

				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[3]/td[3]")
				private static WebElement InfoSideBarAmtRow3;

				@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[3]//td[4]")
				private static WebElement InfoSideBarBaseAmtRow3;
				  
				
				// Row 4 
				
				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[4]/td[2]")
				private static WebElement InfoSideBarDocRow4;

				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[4]/td[3]")
				private static WebElement InfoSideBarAmtRow4;

				@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[4]//td[4]")
				private static WebElement InfoSideBarBaseAmtRow4;
				
				// row 5
				
				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[5]/td[2]")
				private static WebElement InfoSideBarDocRow5;

				@FindBy(xpath="//*[@id='InfPnlAdjGrd_body']/tr[5]/td[3]")
				private static WebElement InfoSideBarAmtRow5;

				@FindBy(xpath="//tbody[@id='InfPnlAdjGrd_body']//tr[5]//td[4]")
				private static WebElement InfoSideBarBaseAmtRow5;
				
				

			
				  
				@FindBy(xpath="//*[@id='id_body_12_table_body']/tr")
				private static List<WebElement> openingBalAccountListInGrid;
				
				@FindBy(xpath="//input[@id='id_body_19']")
				private static WebElement  enter_OBCreditACTxt;

				@FindBy(xpath="//*[@id='lblAccount']")
				private static WebElement  billRefPartyName;
				
				public boolean checkPurchaseVoucherNewBillwise() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
				  excelReader=new ExcelReader(POJOUtility.getExcelPath());
				  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
					
						
				  try 
				  {
						getWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
						saveBtn.click();
						
						getWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPaymentsBillReferenceLabel));
						
						// Actual
						boolean actbillRefPaymentsBillReferenceLabel=billRefPaymentsBillReferenceLabel.isDisplayed();
						boolean actbillRefNewReferenceTxt=billRefNewReferenceTxt.isDisplayed();
						boolean actbillRefTxtOnAccount=billRefTxtOnAccount.isDisplayed();
						boolean actbillRefSearchTxt=billRefSearchTxt.isDisplayed();
						boolean actbillRefNewReferenceDropdown=billRefNewReferenceDropdown.isDisplayed();
						boolean actbillRefShowBillsDropdown=billRefShowBillsDropdown.isDisplayed();
						boolean actbillRefAdjustOnFIFOBtn=billRefAdjustOnFIFOBtn.isDisplayed();
						boolean actbillRefPickIcon=billRefPickIcon.isDisplayed();
						boolean actbillRefOkBtn=billRefOkBtn.isDisplayed();
						boolean actbillRefcancel=billRefcancel.isDisplayed();
						
						// Expected
						boolean expbillRefPaymentsBillReferenceLabel=true;
						boolean expbillRefNewReferenceTxt=true;
						boolean expbillRefTxtOnAccount=true;
						boolean expbillRefSearchTxt=true;
						boolean expbillRefNewReferenceDropdown=true;
						boolean expbillRefShowBillsDropdown=true;
						boolean expbillRefAdjustOnFIFOBtn=true;
						boolean expbillRefPickIcon=true;
						boolean expbillRefOkBtn=true;
						boolean expbillRefcancel=true;
						
						System.out.println("************************************* checkBillReferenceScreen  *********************************");
						System.out.println("Bill Reference Screen Lable : "+actbillRefPaymentsBillReferenceLabel +"  Value Expected : "+expbillRefPaymentsBillReferenceLabel);
						System.out.println("New refernce Text Filed 	: "+actbillRefNewReferenceTxt			 +"  Value Expected : "+expbillRefNewReferenceTxt);
						System.out.println("On Account Text Filed 		: "+actbillRefTxtOnAccount				 +"  Value Expected : "+expbillRefTxtOnAccount);
						System.out.println("Search Text Filed 			: "+actbillRefSearchTxt					 +"  Value Expected : "+expbillRefSearchTxt);
						System.out.println("Adjust Bills Drop Down		: "+actbillRefNewReferenceDropdown		 +"  Value Expected : "+expbillRefNewReferenceDropdown);
						System.out.println("Show Bills Drop Down 		: "+actbillRefShowBillsDropdown			 +"  Value Expected : "+expbillRefShowBillsDropdown);
						System.out.println("Adjsut On FIFO 				: "+actbillRefAdjustOnFIFOBtn			 +"  Value Expected : "+expbillRefAdjustOnFIFOBtn);
						System.out.println("Pick Option 				: "+actbillRefPickIcon					 +"  Value Expected : "+expbillRefPickIcon);
						System.out.println("Ok Button 					: "+actbillRefOkBtn						 +"  Value Expected : "+expbillRefOkBtn);
						System.out.println("Cancel Button 				: "+actbillRefcancel					 +"  Value Expected : "+expbillRefcancel);
					
				
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));
						
						String actPartyName = billRefPartyName.getText();
						String expPartyName = excelReader.getCellData("PurchaseVoucherN", 163, 7);
						  
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 163, 8, actPartyName);
						
						System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);
						
					    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
							
						String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
						String expAdjustbills="0";						
						
						String expBillNewReference                      ="0.00";
						String expBillTransactionCurrency               ="42.00";
						String expBillBaseCurrency                      ="42.00";
						String expBillLocalCurrency                     ="2.94";
						String expBillBalanceNewRefAmount               ="0.00";
						
				        String expbillRefAdjustAmountInTransCurency         ="0.00";
				        String expbillRefBalanceAmountAdjustInTrnasCurrency ="42.00";
				        			        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
				        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
						String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
						String actBillBaseCurrency                           = billRefBaseCurrency.getText();
						String actBillLocalCurrency                          = localCurrencyDhs.getText();
						String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
						

				        String actbillRefAdjustAmountInTransCurency         = billRefAdjustAmountInTransCurency.getText();
				        String actbillRefBalanceAmountAdjustInTrnasCurrency = billRefBalanceAmountAdjustInTrnasCurrency.getText();
				        	
				        
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 165, 8, actBillNewReference);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 166, 8, actBillTransactionCurrency);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 167, 8, actBillBaseCurrency);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 168, 8, actBillLocalCurrency);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 169, 8, actBillBalanceNewRefAmount);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 170, 8, actbillRefAdjustAmountInTransCurency);
				        excelReader.setCellData(xlfile, "PurchaseVoucherN", 171, 8, actbillRefBalanceAmountAdjustInTrnasCurrency);

				        
				        System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "Adjustment Bills :"+expAdjustbills);
				        System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
				        System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
				        System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
				        System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
				        System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
				        	       
				        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
				        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);
	        
				        
				        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
				 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
				 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
				 			     actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
				 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency)
				 				
				        		&& actbillRefPaymentsBillReferenceLabel==expbillRefPaymentsBillReferenceLabel && actbillRefNewReferenceTxt==expbillRefNewReferenceTxt
								&& actbillRefTxtOnAccount==expbillRefTxtOnAccount && actbillRefSearchTxt==expbillRefSearchTxt
								&& actbillRefNewReferenceDropdown==expbillRefNewReferenceDropdown && actbillRefShowBillsDropdown==expbillRefShowBillsDropdown
								&& actbillRefAdjustOnFIFOBtn==expbillRefAdjustOnFIFOBtn && actbillRefPickIcon==expbillRefPickIcon
								&& actbillRefOkBtn==expbillRefOkBtn && actbillRefcancel==expbillRefcancel)
				     
					{
						System.out.println("Test Pass  deleted row Working  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 162, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Not Deleted Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 162, 9, resPass);
						return false;
					}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 162, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
				}
				

				
				public boolean checkPurchaseVoucherNewBillwiseScreenClickOnPick() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
				  excelReader=new ExcelReader(POJOUtility.getExcelPath());
				  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			
				  try
				  {
				  
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			 	    billRefNewReferenceTxt.click();
		         
			 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			 		billRefPickIcon.click();
						       
			        String expBillNewReferencePick                  = "42.00";
			 		String expBillTransactionCurrencyPick           = "42.00";
			 		String expBillBaseCurrencyPick                  = "42.00";
			 		String expBillLocalCurrencyPick                 = "2.94";
			 		String expBillBalanceNewRefAmountPick           = "42.00";
			 
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
			      
			        String actBillNewReferencePick                   = billRefNewReferenceTxt.getAttribute("value");
			 		String actBillTransactionCurrencyPick            = billRefTransactionCurency.getText();
			 		String actBillBaseCurrencyPick                   = billRefBaseCurrency.getText();
			 		String actBillLocalCurrencyPick                  = localCurrencyDhs.getText();
			 		String actBillBalanceNewRefAmountPick            = balanceNewReferenceAmt.getText();
			 		
			 	    String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
			        String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();
			 					    	
			        String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
			        String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();
			      
			        String expbillRefAdjustAmountInTransCurencyPick          = "42";
			        String expbillRefBalanceAmountAdjustInTrnasCurrencyPick  = "0.00";
			        
			        String expconversationRateBaseCurrencyRatePick  ="1";
			        String expconversationRateLocalCurrencyRatePick ="0.07";
			        
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 173, 8, actBillNewReferencePick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 174, 8, actBillTransactionCurrencyPick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 175, 8, actBillBaseCurrencyPick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 176, 8, actBillLocalCurrencyPick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 177, 8, actBillBalanceNewRefAmountPick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 178, 8, actbillRefAdjustAmountInTransCurencyPick);
			        excelReader.setCellData(xlfile, "PurchaseVoucherN", 178, 8, actbillRefBalanceAmountAdjustInTrnasCurrencyPick);
			        
				        
			        System.out.println("Bill reference Adjustment Bills  :"+ actBillNewReferencePick+"                          "+ "expDate :"+expBillNewReferencePick);
			        System.out.println("actBillNewReference :             "+ actBillTransactionCurrencyPick +"                    "+ "expBillNewReference :"+expBillTransactionCurrencyPick);
			        System.out.println("actBillTransactionCurrency       :"+ actBillBaseCurrencyPick + "            " + "expBillTransactionCurrency :"+expBillBaseCurrencyPick);
			        System.out.println("actBillBaseCurrency :             "+ actBillLocalCurrencyPick + "                   " +"expBillBaseCurrency :"+expBillLocalCurrencyPick);
			        System.out.println("actBillLocalCurrency :            "+ actBillBalanceNewRefAmountPick+ "                   " +"expBillLocalCurrency :"+expBillBalanceNewRefAmountPick);
			        System.out.println("actBillBalanceNewRefAmount :      "+ actconversationRateBaseCurrencyRatePick + "            " + "expBillBalanceNewRefAmount :"+expconversationRateBaseCurrencyRatePick);
			       
			        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actconversationRateLocalCurrencyRatePick+ "       " +"expbillRefAdjustAmountInTransCurency :"+expconversationRateLocalCurrencyRatePick);
			        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefAdjustAmountInTransCurencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefAdjustAmountInTransCurencyPick);
			        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);
			        
			        
			        if (actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick)
			        		&& actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick)
			        		&& actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick) && actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) 
			        		&& actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) 
			        		&& actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick))
			     
					{
						System.out.println("Test Pass  deleted row Working  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 172, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Not Deleted Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherN", 172, 9, resPass);
						return false;
					}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 172, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
	 
				}
			
			
				
						
				
				
				@FindBy(xpath="//span[@id='btnOk']")
				private static WebElement Bill_OkBtn;
				
				
				public boolean checkSavingOfPurchaseVoucherNewOnClickOkButtonInBillwisePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
						
				   getWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
				   Bill_OkBtn.click();
				  
				   
				   boolean savingMessage=checkVoucherSavingMessage("SU/DUB/TEXT1");
				   
				   
				   String actSavingMessage=Boolean.toString(savingMessage);
				   String expSavingMessage=excelReader.getCellData("PurchaseVoucherN", 180, 7);
				   
				   excelReader.setCellData(xlfile, "PurchaseVoucherN", 180, 8, actSavingMessage.toUpperCase());
				   
				   System.out.println("************************************* checkSavingOfPurchaseVoucherNew  *********************************");
				   
				   System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
				   System.out.println(" Saving Message Status: "+actSavingMessage+ " Value Expected : "+expSavingMessage);
				   
				   if (savingMessage==true)
				   {
					   System.out.println("Test Pass : Error Message is Displayed ");
					   excelReader.setCellData(xlfile, "PurchaseVoucherN", 180, 9, resPass);
					   
					   return true;
				   }
				   else
				   {
					   System.out.println("Test Fail :  Error Message is  not Displayed ");
					   excelReader.setCellData(xlfile, "PurchaseVoucherN", 180, 9, resFail);
					   return false;
				   }
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 180, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
				
				@FindBy(xpath="//label[contains(text(),'Copy Document')]")
				private static WebElement CopyDocumentBtn;
				
				@FindBy(xpath="//label[contains(text(),'Copy to Clipboard')]")
				private static WebElement copytoClipboardBtn;
				
				@FindBy(xpath="//label[contains(text(),'Paste from Clipboard')]")
				private static WebElement pastefromClipboardBtn;
				
				@FindBy(xpath="//label[contains(text(),'Posting details')]")
				private static WebElement postingDetailsBtn;
				
				@FindBy(xpath="//label[contains(text(),'Export to XML')]")
				private static WebElement exporttoXMLBtn;
				
				@FindBy(xpath="//label[contains(text(),'Setting')]")
				private static WebElement settingBtn;
				
				@FindBy(xpath="//label[contains(text(),'Calculator')]")
				private static WebElement calculatorBtn;
				
				@FindBy(xpath="//label[contains(text(),'Auto Load')]")
				private static WebElement autoLoadBtn;
				
			//Checking Standard Rate 
			public boolean checkStandardRateOptionByVoucherEdit() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
						
				 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				 documentNumberTxt.click();
				 documentNumberTxt.sendKeys(Keys.HOME);
				 documentNumberTxt.sendKeys(Keys.SHIFT,Keys.END);
				 documentNumberTxt.sendKeys("SU/DUB/TEXT1");
			     Thread.sleep(2000);
			     documentNumberTxt.sendKeys(Keys.TAB);
			     
				 checkUserFriendlyMessage();
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));	
					toggleBtn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsBtn));	
					postingDetailsBtn.click();
					
					Thread.sleep(3000);
					
					int postingDetailsDebitListCount = postingDetailsDebitList.size();
					
					 ArrayList<String> postingDetailsDebitListArray = new ArrayList<String>();
					
					for (int i=0;i<postingDetailsDebitListCount;i++)
					{
						String data = postingDetailsDebitList.get(i).getText();
						postingDetailsDebitListArray.add(data);
						
					}
					
					String actpostingDetailsDebitList = postingDetailsDebitListArray.toString();
					
					String exppostingDetailsDebitList ="[STD RATE COGS ACC INV, 240.00, VAT INPUT, 2.00]";
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 449, 8, actpostingDetailsDebitList);
					
					System.out.println("actpostingDetailsDebitList : "+actpostingDetailsDebitList);
					System.out.println("exppostingDetailsDebitList : "+exppostingDetailsDebitList);
					
					int postingDetailsCreditListCount = postingDetailsCreditList.size();
					
					ArrayList<String> postingDetailsCreditListArray = new ArrayList<String>();
					
					for (int i=0;i<postingDetailsCreditListCount;i++)
					{
						String data = postingDetailsCreditList.get(i).getText();
						postingDetailsCreditListArray.add(data);
						
					}
					
					String actpostingDetailsCreditList = postingDetailsCreditListArray.toString();
					
					String exppostingDetailsCreditList ="[Vendor A, 42.00, PURCHASE VARIANCE, 200.00]";
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 450, 8, actpostingDetailsCreditList);
					
					System.out.println("actpostingDetailsCreditList : "+actpostingDetailsCreditList);
					System.out.println("exppostingDetailsCreditList : "+exppostingDetailsCreditList);
				   
				    String actpostingDetailsDebitSum = postingDetailsDebitSum.getText();
				    String exppostingDetailsDebitSum = "242.00";
					
				    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 451, 8, actpostingDetailsDebitSum);
					
				    String actpostingDetailsCreditSum = postingDetailsCreditSum.getText();
				    String exppostingDetailsCreditSum = "242.00";
						
				    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 452, 8, actpostingDetailsCreditSum);
				   
				    System.out.println("postingDetailsDebitSum : "+actpostingDetailsDebitSum  +" Value Expected : "+exppostingDetailsDebitSum);
				    System.out.println("postingDetailsCreditSum : "+actpostingDetailsCreditSum+" Value Expected : "+exppostingDetailsCreditSum);
				   
				   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsCloseBtn));
				   postingDetailsCloseBtn.click();	
				   
				   if (actpostingDetailsDebitList.equalsIgnoreCase(exppostingDetailsDebitList)
						   && actpostingDetailsCreditList.equalsIgnoreCase(exppostingDetailsCreditList)
						   
						   && actpostingDetailsDebitSum.equalsIgnoreCase(exppostingDetailsDebitSum) 
						   && actpostingDetailsCreditSum.equalsIgnoreCase(exppostingDetailsCreditSum))
				   {
						System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 447, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 447, 9, resFail);
						return false;
					}
				}
				
				
			
			@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
			private static WebElement  voucherhomeCloseBtn;
			
			
			
			public boolean checkCloseOptionInPurchaseVoucherNewHomeAndEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

			  try
			  {
										 
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			    new_CloseBtn.click();
				
			    Thread.sleep(2000);
				
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
			    voucherhomeCloseBtn.click();
					
				boolean labeldashboard=labelDashboard.isDisplayed();
				
				String actlabelDashboard=Boolean.toString(labeldashboard);
				String explabelDashboard=excelReader.getCellData("PurchaseVoucherN", 248, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 248, 8, actlabelDashboard);
				
				System.out.println("labelDashboard  : "+actlabelDashboard+" Value Expected : "+explabelDashboard);
				
				if(actlabelDashboard.equalsIgnoreCase(explabelDashboard))
				{
					System.out.println("Test Pass : Home Close Working");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 247, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Home Close NOT Working");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 247, 9, resPass);
					return false;
				}
			}
			catch (Exception e) 
			{
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 247, 10, e.getMessage());
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
				
				
				

			//Create Info Panel
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBar() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  try
			  {
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
				financialsMenu.click();
				
				Thread.sleep(2000);
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
				financialsTransactionMenu.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
				financialsTransactionsPurchaseMenu.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
				purchaseVouchersVat.click();

				Thread.sleep(2000);
				
                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
                newBtn.click();
                
                checkUserFriendlyMessage();
                
                Thread.sleep(5000);
					
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarMinimizeExpandBtn));		
				infoSideBarMinimizeExpandBtn.click();
				
				Thread.sleep(2000);*/
				
				boolean actInforSideBarCustomization             = infoSideBarCustomizeBtn.isDisplayed();
				boolean actInforSideBarCustomizationExpandButton = infoSideBarMinimizeExpandBtn.isDisplayed();
				boolean expInforSideBarCustomization             = true;
				boolean expInforSideBarCustomizationExpandButton = true;
				
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageDocumentNumber  ***************************************************");
				System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomization               +" Value Expected : "+expInforSideBarCustomization);
				System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actInforSideBarCustomizationExpandButton   +" Value Expected : "+expInforSideBarCustomizationExpandButton);
				
				boolean actDisplay=actInforSideBarCustomization==expInforSideBarCustomization && actInforSideBarCustomizationExpandButton==expInforSideBarCustomizationExpandButton;
				
				String actResult=Boolean.toString(actDisplay);
				String expResult = excelReader.getCellData("PurchaseVoucherN", 182, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 182, 8, actResult.toUpperCase());
			
				if(actDisplay==true)
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 181, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 181, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 181, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			
		 @FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
		 private static WebElement  customizeCloseBtn;
			
		 public boolean checkPurchaseVoucherNewEntryPageInfoSideBarCustomizeBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
				
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarCustomizeBtn));			
				infoSideBarCustomizeBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));

				boolean actInfoCustomizationSearchTxt        = customizeSearchTxt.isDisplayed();
				boolean actInfoCustomizationSearchBtn        = customizeSearchBtn.isDisplayed();
				boolean actInfoCustomizationCloseBtn         = customizeCloseBtn.isDisplayed();
				boolean actInfoCustomizationSaveBtn          = customizeSaveBtn.isDisplayed();
				boolean actInfoCustomizationCancelBtn        = customizeCancelBtn.isDisplayed();
				boolean actInfoCustomizationGraphBtn         = graphBtn.isDisplayed();
				boolean actInfoCustomizationReportBtn        = reportBtn.isDisplayed();
				boolean actInfoCustomizationInfopanelBtn     = infoPanelBtn.isDisplayed();
				boolean actInfoCustomizationWorkFlowBtn      = workFlowBtn.isDisplayed();
				boolean actInfoCustomizationOtherDashletsBtn = otherDashlets.isDisplayed();

				boolean expInfoCustomizationSearchTxt        = true;
				boolean expInfoCustomizationSearchBtn        = true;
				boolean expInfoCustomizationCloseBtn         = true;
				boolean expInfoCustomizationSaveBtn          = true;
				boolean expInfoCustomizationCancelBtn        = true;
				boolean expInfoCustomizationGraphBtn         = true;
				boolean expInfoCustomizationReportBtn        = true;
				boolean expInfoCustomizationInfopanelBtn     = true;
				boolean expInfoCustomizationWorkFlowBtn      = true;
				boolean expInfoCustomizationOtherDashletsBtn = true;

				
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarCustomizeBtn  ***************************************************");
				
				System.out.println("Entry Page Info Panel Search Txt Value Actual : "+actInfoCustomizationSearchTxt        +" Value Expected : "+expInfoCustomizationSearchTxt);
				System.out.println("Entry Page Info Panel Search Btn Value Actual : "+actInfoCustomizationSearchBtn        +" Value Expected : "+expInfoCustomizationSearchBtn);
				System.out.println("Entry Page Info Panel Close Btn Value Actual  : "+actInfoCustomizationCloseBtn         +" Value Expected : "+expInfoCustomizationCloseBtn);
				System.out.println("Entry Page Info Panel Save Btn Value Actual   : "+actInfoCustomizationSaveBtn          +" Value Expected : "+expInfoCustomizationSaveBtn);
				System.out.println("Entry Page Info Panel Cancel Value Actual     : "+actInfoCustomizationCancelBtn        +" Value Expected : "+expInfoCustomizationCancelBtn);
				System.out.println("Entry Page Info Panel Graph Value Actual      : "+actInfoCustomizationGraphBtn         +" Value Expected : "+expInfoCustomizationGraphBtn);
				System.out.println("Entry Page Info Panel Report Value Actual     : "+actInfoCustomizationReportBtn        +" Value Expected : "+expInfoCustomizationReportBtn);
				System.out.println("Entry Page Info Panel Value Actual            : "+actInfoCustomizationInfopanelBtn     +" Value Expected : "+expInfoCustomizationInfopanelBtn);
				System.out.println("Entry Page Info Panel WorkFlow Btn Actual     : "+actInfoCustomizationWorkFlowBtn      +" Value Expected : "+expInfoCustomizationWorkFlowBtn);
				System.out.println("Entry Page Info Panel Dashlet Btn Actual      : "+actInfoCustomizationOtherDashletsBtn +" Value Expected : "+expInfoCustomizationOtherDashletsBtn);
				
				
				boolean actDisplay=actInfoCustomizationSearchTxt==expInfoCustomizationSearchTxt && actInfoCustomizationSearchBtn==expInfoCustomizationSearchBtn && actInfoCustomizationCloseBtn==expInfoCustomizationCloseBtn 
						&& actInfoCustomizationSaveBtn==expInfoCustomizationSaveBtn && actInfoCustomizationGraphBtn==expInfoCustomizationGraphBtn
						&& actInfoCustomizationReportBtn==expInfoCustomizationReportBtn && actInfoCustomizationInfopanelBtn==expInfoCustomizationInfopanelBtn  
						&& actInfoCustomizationWorkFlowBtn==expInfoCustomizationWorkFlowBtn && actInfoCustomizationOtherDashletsBtn==expInfoCustomizationOtherDashletsBtn;
				
				String actResult=Boolean.toString(actDisplay);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 183, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 183, 8, actResult);
				
				if(actDisplay==true)
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 183, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 183, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 183, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarGraphOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(graphBtn));
				
				graphBtn.click();
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newGraphOption));
			
				boolean actGraphOption       =newGraphOption.isDisplayed();
				
				String actNewGraphOption=Boolean.toString(actGraphOption);
				String expNewGraphOptions=excelReader.getCellData("PurchaseVoucherN", 185, 7);
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 185, 8, actNewGraphOption.toUpperCase());
				
				
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarGraphOption  *****************************************");
				System.out.println("Entry Page Open Info Side Graph Value Actual  : "+actNewGraphOption               +" Value Expected : "+expNewGraphOptions);
				
				if(actNewGraphOption.equalsIgnoreCase(expNewGraphOptions))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 184, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 184, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 184, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarReportOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportBtn));
				
				reportBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReportOption));
				
				boolean NewReportOption       =newReportOption.isDisplayed();
				
				String actNewReportOption=Boolean.toString(NewReportOption);
				String expNewReportOption=excelReader.getCellData("PurchaseVoucherN", 187, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 187, 8, actNewReportOption.toUpperCase());
				
	
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarReportOption  *****************************************");
				System.out.println("Entry Page Open Info Side Report Value Actual  : " + actNewReportOption               +" Value Expected : "+expNewReportOption);
				
				
				if(actNewReportOption.equalsIgnoreCase(expNewReportOption))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 186, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 186, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 186, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarInfoPanelOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelBtn));
				
				infoPanelBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newInfoPanelOption));
				
				boolean NewInfoPanelOption       =newInfoPanelOption.isDisplayed();
				
				String actNewInfoPanelOption=Boolean.toString(NewInfoPanelOption);
				String expNewInfoPanelOption=excelReader.getCellData("PurchaseVoucherN", 189, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 189, 8, actNewInfoPanelOption.toUpperCase());
				
			
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarInfoPanelOption  *****************************************");
				System.out.println("Entry Page Open Info Side Info Panel Value Actual  : "+actNewInfoPanelOption               +" Value Expected : "+expNewInfoPanelOption);
				
				
				
				if(actNewInfoPanelOption.equalsIgnoreCase(expNewInfoPanelOption))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 188, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 188, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 188, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
				
			}
			
			
			
		public boolean checkPurchaseVoucherNewEntryPageInfoSideBarWorkFlowOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowBtn));
				
				workFlowBtn.click();
				
				Thread.sleep(2000);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newWorkFlowOption));
				
				boolean NewWorkFlowOption       =newWorkFlowOption.isDisplayed();
				
				String actNewWorkFlowOption=Boolean.toString(NewWorkFlowOption);
				String expNewWorkFlowOption=excelReader.getCellData("PurchaseVoucherN", 191, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 191, 8, actNewWorkFlowOption.toUpperCase());
				
			
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarWorkFlowOption  *****************************************");
				System.out.println("Entry Page Open Info Side Workflow Value Actual  : "+actNewWorkFlowOption               +" Value Expected : "+expNewWorkFlowOption);
				
				
				if(actNewWorkFlowOption.equalsIgnoreCase(expNewWorkFlowOption))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 190, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 190, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 190, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			

			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarOtherDashletsOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(otherDashlets));
				
				otherDashlets.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentInfo));
				
				boolean DocumentInfoInOtherDashletsOption       =documentInfo.isDisplayed();
				
				String actDocumentInfoInOtherDashletsOption=Boolean.toString(DocumentInfoInOtherDashletsOption);
				String expDocumentInfoInOtherDashletsOption=excelReader.getCellData("PurchaseVoucherN", 193, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 193, 8, actDocumentInfoInOtherDashletsOption);
			
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarOtherDashletsOption  *****************************************");
				System.out.println("Entry Page Open Info Side Other Dashlets Value Actual  : "+actDocumentInfoInOtherDashletsOption               +" Value Expected : "+expDocumentInfoInOtherDashletsOption);

				

				if(actDocumentInfoInOtherDashletsOption.equalsIgnoreCase(expDocumentInfoInOtherDashletsOption))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 192, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 192, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 192, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			public boolean checkPurchaseVoucherNewEntryPageInfoSideBarSearch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSearchTxt));
				
				customizeSearchTxt.click();
				
			    customizeSearchTxt.sendKeys(excelReader.getCellData("PurchaseVoucherN", 195, 6));
			  
			    customizeSearchTxt.sendKeys(Keys.TAB);
			   
			    Thread.sleep(2000);
			     
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(searchDocumentInfo));
				
				boolean SearchDocumentInfo       =searchDocumentInfo.isDisplayed();
				
				String actSearchDocumentInfo=Boolean.toString(SearchDocumentInfo);
				String expSearchDocumentInfo=excelReader.getCellData("PurchaseVoucherN", 196, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 196, 8, actSearchDocumentInfo.toUpperCase());
				
			
				System.out.println("***************************************** checkPurchaseVoucherNewEntryPageInfoSideBarSearch  *****************************************");
				System.out.println("Entry Page Open Info Side Search Info Value Actual  : "+actSearchDocumentInfo               +" Value Expected : "+expSearchDocumentInfo);

				
				if(actSearchDocumentInfo.equalsIgnoreCase(expSearchDocumentInfo))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 194, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 194, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 194, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			
			
			public boolean checkPurchaseVoucherNewInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\infoPanels.exe");
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addCreateDashlet));
				
				boolean AddCreateDashlet       =addCreateDashlet.isDisplayed();
				
				String actAddCreateDashlet=Boolean.toString(AddCreateDashlet);
				String expAddCreateDashlet=excelReader.getCellData("PurchaseVoucherN", 197, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 197, 8, actAddCreateDashlet.toUpperCase());
				
			
				System.out.println("***************************************** checkPurchaseVoucherNewInfoPanelDashlet  *****************************************");
				System.out.println("Entry Page Open Info Side Add Create Dashlet Value Actual  : "+actAddCreateDashlet               +" Value Expected : "+expAddCreateDashlet);
		
				if(actAddCreateDashlet.equalsIgnoreCase(expAddCreateDashlet))
				{
					System.out.println("Test Pass : entry Page Footer Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 197, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : entry Page NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 197, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 197, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
		
			
			public boolean checkPurchaseVoucherNewSaveInfoPanelDashlet() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeSaveBtn));
				customizeSaveBtn.click();
					
				String expSaveInfoPanelMessage       =excelReader.getCellData("PurchaseVoucherN", 199, 7);
				
				String dashBoradSaveMessage=checkValidationMessage(expSaveInfoPanelMessage);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 199, 8, expSaveInfoPanelMessage);
				
				System.out.println("***************************************** checkPurchaseVoucherNewSaveInfoPanelDashlet  *****************************************");
				System.out.println("Entry Page Open Info Side New Save Value Actual  : "+dashBoradSaveMessage+" Value Expected : "+"TRUE");	
				
				if(dashBoradSaveMessage.equalsIgnoreCase(expSaveInfoPanelMessage))
				{
					System.out.println("Test Pass : Error Message Is As Expected");
					
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 198, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Error Message Is NOT As Expected");
					
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 198, 9, resFail);
					return false;
				}	
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 198, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			


			
			
			//Click on Previous and Check the voucher information and status of the voucher
			public boolean checkVoucherStatusInInfoPanelOnClickPreviousButton() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

				try
				{
			    getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(previousBtn));
			    previousBtn.click();			    
			   
			    
			    boolean loading=checkLoadingMessage();
				
				System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			    
			    
				Thread.sleep(2000);
				
			    
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				documentNumberTxt.click();
				
				String actdocNumber,expdocNumber;
				
				actdocNumber=documentNumberTxt.getAttribute("value");
				expdocNumber=excelReader.getCellData("PurchaseVoucherN", 201, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 201, 8, actdocNumber);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
				dateTxt.click();
				
				DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			    Date date=new Date();
			    System.out.println(df.format(date));
			   
				String actVoucherDate,expVoucherDate;
				
				actVoucherDate=dateTxt.getAttribute("value");
				expVoucherDate=df.format(date);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
				purchaseAccountTxt.click();
			
				String actpurchaseAccountTxt=purchaseAccountTxt.getAttribute("value");
				String exppurchaseAccountTxt=excelReader.getCellData("PurchaseVoucherN", 202, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 202, 8, actpurchaseAccountTxt);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
			
				String actvendorAccountTxt=vendorAccountTxt.getAttribute("value");
				String expvendorAccountTxt=excelReader.getCellData("PurchaseVoucherN", 203, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 203, 8, actvendorAccountTxt);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				voucherHeaderCurrency.click();
			
				String actvoucherHeaderCurrency=voucherHeaderCurrency.getAttribute("value");
				String expvoucherHeaderCurrency=excelReader.getCellData("PurchaseVoucherN", 204, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 204, 8, actvoucherHeaderCurrency);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				departmentTxt.click();
			
				String actdepartmentTxt=departmentTxt.getAttribute("value");
				String expdepartmentTxt=excelReader.getCellData("PurchaseVoucherN", 205, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 205, 8, actdepartmentTxt);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
				wareHouseTxt.click();
			
				String actwareHouseTxt=wareHouseTxt.getAttribute("value");
				String expwareHouseTxt=excelReader.getCellData("PurchaseVoucherN", 206, 7);

				excelReader.setCellData(xlfile, "PurchaseVoucherN", 206, 8, actwareHouseTxt);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
				new_footerExpandBtn.click();
							
				String actPvVoucherItemR1,actPvVoucherUnitsR1,actPvVoucherQtyR1,actPvVoucherRateR1,actPvVoucherGrossR1,actPvVoucherBatchR1;
				String actPvVoucherItemR2,actPvVoucherUnitsR2,actPvVoucherQtyR2,actPvVoucherRateR2,actPvVoucherGrossR2,actPvVoucherBinR2;
				String actPvVoucherItemR3,actPvVoucherUnitsR3,actPvVoucherQtyR3,actPvVoucherRateR3,actPvVoucherGrossR3,actPvVoucherRMAR3;
				String actPvVoucherItemR4,actPvVoucherUnitsR4,actPvVoucherQtyR4,actPvVoucherRateR4,actPvVoucherGrossR4,actPvVoucherBatchR4;
				
				String actPvVoucherFooterQty,actPvVoucherFooterGross,actPvVoucherFooterNet,actPvVoucherFooterAvgRateO;
							
				String actinfoPanelStatus,actinfoPanelCreatedBY,actinfoPanelEditedBy,actinfoPanelNextToAuth,actinfoPanelBillStatus;

				String expPvVoucherItemR1,expPvVoucherUnitsR1,expPvVoucherQtyR1,expPvVoucherRateR1,expPvVoucherGrossR1,expPvVoucherBatchR1;
				String expPvVoucherItemR2,expPvVoucherUnitsR2,expPvVoucherQtyR2,expPvVoucherRateR2,expPvVoucherGrossR2,expPvVoucherBinR2;
				String expPvVoucherItemR3,expPvVoucherUnitsR3,expPvVoucherQtyR3,expPvVoucherRateR3,expPvVoucherGrossR3,expPvVoucherRMAR3;
				String expPvVoucherItemR4,expPvVoucherUnitsR4,expPvVoucherQtyR4,expPvVoucherRateR4,expPvVoucherGrossR4,expPvVoucherBatchR4;
				
				String expPvVoucherFooterQty,expPvVoucherFooterGross,expPvVoucherFooterNet,expPvVoucherFooterAvgRateO;
				
				String expinfoPanelStatus,expinfoPanelCreatedBY,expinfoPanelEditedBy,expinfoPanelNextToAuth,expinfoPanelBillStatus;
									
				expPvVoucherItemR1=excelReader.getCellData("PurchaseVoucherN", 207, 7);
				expPvVoucherUnitsR1=excelReader.getCellData("PurchaseVoucherN", 208, 7);
				expPvVoucherQtyR1=excelReader.getCellData("PurchaseVoucherN", 209, 7);
				expPvVoucherRateR1=excelReader.getCellData("PurchaseVoucherN", 210, 7);
				expPvVoucherGrossR1=excelReader.getCellData("PurchaseVoucherN", 211, 7);
				expPvVoucherBatchR1=excelReader.getCellData("PurchaseVoucherN", 212, 7);
				
				/*expPvVoucherItemR2=excelReader.getCellData("PurchaseVoucherN", 213, 7);
				expPvVoucherUnitsR2=excelReader.getCellData("PurchaseVoucherN", 214, 7);;
				expPvVoucherQtyR2=excelReader.getCellData("PurchaseVoucherN", 215, 7);
				expPvVoucherRateR2=excelReader.getCellData("PurchaseVoucherN", 216, 7);
				expPvVoucherGrossR2=excelReader.getCellData("PurchaseVoucherN", 217, 7);			
				expPvVoucherBinR2=excelReader.getCellData("PurchaseVoucherN", 218, 7);
				
				expPvVoucherItemR3=excelReader.getCellData("PurchaseVoucherN", 219, 7);
				expPvVoucherUnitsR3=excelReader.getCellData("PurchaseVoucherN", 220, 7);
				expPvVoucherQtyR3=excelReader.getCellData("PurchaseVoucherN", 221, 7);
				expPvVoucherRateR3=excelReader.getCellData("PurchaseVoucherN", 222, 7);
				expPvVoucherGrossR3=excelReader.getCellData("PurchaseVoucherN", 223, 7);
				expPvVoucherRMAR3=excelReader.getCellData("PurchaseVoucherN", 224, 7);
				
				expPvVoucherItemR4=excelReader.getCellData("PurchaseVoucherN", 225, 7);
				expPvVoucherUnitsR4=excelReader.getCellData("PurchaseVoucherN", 226, 7);
				expPvVoucherQtyR4=excelReader.getCellData("PurchaseVoucherN", 227, 7);
				expPvVoucherRateR4=excelReader.getCellData("PurchaseVoucherN", 228, 7);
				expPvVoucherGrossR4=excelReader.getCellData("PurchaseVoucherN", 229, 7);
				expPvVoucherBatchR4=excelReader.getCellData("PurchaseVoucherN", 230, 7);*/
				
				expPvVoucherFooterNet=excelReader.getCellData("PurchaseVoucherN", 231, 7);
				expPvVoucherFooterQty=excelReader.getCellData("PurchaseVoucherN", 232, 7);
				expPvVoucherFooterGross=excelReader.getCellData("PurchaseVoucherN", 233, 7);
				//expPvVoucherFooterAvgRateO=excelReader.getCellData("PurchaseVoucherN", 234, 7); //11.66
				
				expinfoPanelStatus=excelReader.getCellData("PurchaseVoucherN", 235, 7);
				expinfoPanelCreatedBY=excelReader.getCellData("PurchaseVoucherN", 236, 7);
				expinfoPanelEditedBy=excelReader.getCellData("PurchaseVoucherN", 237, 7);
				expinfoPanelNextToAuth=excelReader.getCellData("PurchaseVoucherN", 238, 7);
				expinfoPanelBillStatus=excelReader.getCellData("PurchaseVoucherN", 239, 7);
				
				System.out.println(netAmount.getText());
				System.out.println(QtyAmount.getText());
				System.out.println(GrossAmount.getText());
				System.out.println(PVNFooterAvgRateO.getText());
								
				actPvVoucherItemR1=select1stRow_1stColumn.getText();
				actPvVoucherUnitsR1=select1stRow_2ndColumn.getText();
				actPvVoucherQtyR1=select1stRow_5thColumn.getText();
				actPvVoucherRateR1=select1stRow_7thColumn.getText();
				actPvVoucherGrossR1=select1stRow_8thColumn.getText();
				//actPvVoucherBatchR1=select1stRow_10thColumn.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 207, 8, actPvVoucherItemR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 208, 8, actPvVoucherUnitsR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 209, 8, actPvVoucherQtyR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 210, 8, actPvVoucherRateR1);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 211, 8, actPvVoucherGrossR1);
				//excelReader.setCellData(xlfile, "PurchaseVoucherN", 212, 8, actPvVoucherBatchR1);
				
				/*actPvVoucherItemR2=select2ndRow_1stColumn.getText();
				actPvVoucherUnitsR2=select2ndRow_2ndColumn.getText();
				actPvVoucherQtyR2=select2ndRow_5thColumn.getText();
				actPvVoucherRateR2=select2ndRow_7thColumn.getText();
				actPvVoucherGrossR2=select2ndRow_8thColumn.getText();
				actPvVoucherBinR2=select2ndRow_10thColumn.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 213, 8, actPvVoucherItemR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 214, 8, actPvVoucherUnitsR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 215, 8, actPvVoucherQtyR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 216, 8, actPvVoucherRateR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 217, 8, actPvVoucherGrossR2);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 218, 8, actPvVoucherBinR2);
				
				actPvVoucherItemR3=select3rdRow_1stColumn.getText();
				actPvVoucherUnitsR3=select3rdRow_2ndColumn.getText();
				actPvVoucherQtyR3=select3rdRow_5thColumn.getText();
				actPvVoucherRateR3=select3rdRow_7thColumn.getText();
				actPvVoucherGrossR3=select3rdRow_8thColumn.getText();
				actPvVoucherRMAR3=select3rdRow_12thColumn.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 219, 8, actPvVoucherItemR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 220, 8, actPvVoucherUnitsR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 221, 8, actPvVoucherQtyR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 222, 8, actPvVoucherRateR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 223, 8, actPvVoucherGrossR3);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 224, 8, actPvVoucherRMAR3);
				
				actPvVoucherItemR4=select4thRow_1stColumn.getText();
				actPvVoucherUnitsR4=select4thRow_2ndColumn.getText();
				actPvVoucherQtyR4=select4thRow_5thColumn.getText();
				actPvVoucherRateR4=select4thRow_7thColumn.getText();
				actPvVoucherGrossR4=select4thRow_8thColumn.getText();
				actPvVoucherBatchR4=select4thRow_9thColumn.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 225, 8, actPvVoucherItemR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 226, 8, actPvVoucherUnitsR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 227, 8, actPvVoucherQtyR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 228, 8, actPvVoucherRateR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 229, 8, actPvVoucherGrossR4);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 230, 8, actPvVoucherBatchR4);*/
				
				
				actPvVoucherFooterNet=netAmount.getText();
				actPvVoucherFooterQty=QtyAmount.getText();
				actPvVoucherFooterGross=GrossAmount.getText();
				actPvVoucherFooterAvgRateO=PVNFooterAvgRateO.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 231, 8, actPvVoucherFooterNet);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 232, 8, actPvVoucherFooterQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 233, 8, actPvVoucherFooterGross);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 234, 8, actPvVoucherFooterAvgRateO);
				
				
				actinfoPanelStatus=infoPanelStatus.getText();
				actinfoPanelCreatedBY=infoPanelCreatedBY.getText();
				actinfoPanelEditedBy=infoPanelEditedBy.getText();
				actinfoPanelNextToAuth=infoPanelNextToAuth.getText();
				actinfoPanelBillStatus=infoPanelBillStatus.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 235, 8, actinfoPanelStatus);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 236, 8, actinfoPanelCreatedBY);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 237, 8, actinfoPanelEditedBy);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 238, 8, actinfoPanelNextToAuth);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 239, 8, actinfoPanelBillStatus);
				
				 
				System.out.println("************************************* checkClickOnDocumentNumberAlertsInAuthorizeUser  *********************************");

				System.out.println("PvdocNumber                 :  " + actdocNumber 			 +" Value Expected : " + expdocNumber);
		        System.out.println("PvVoucherDate               :  " + actVoucherDate 			 +" Value Expected : " + expVoucherDate);
		        
		        System.out.println("PvVoucherpurchaseAccountTxt :  " + actpurchaseAccountTxt 	 +" Value Expected : " + exppurchaseAccountTxt);
		        System.out.println("PvVouchervendorAccountTxt   :  " + actvendorAccountTxt 		 +" Value Expected : " + expvendorAccountTxt);
		        System.out.println("PvVoucherHeaderCurrency     :  " + actvoucherHeaderCurrency  +" Value Expected : " + expvoucherHeaderCurrency);
		        System.out.println("PvVoucherdepartmentTxt      :  " + actdepartmentTxt 		 +" Value Expected : " + expdepartmentTxt);
		        System.out.println("PvVoucherWarehouse          :  " + actwareHouseTxt 			 +" Value Expected : " + expwareHouseTxt);
		        
		        System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet 	 +" Value Expected : " + expPvVoucherFooterNet);
		        System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty  	 +" Value Expected : " + expPvVoucherFooterQty);
		        System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross	 +" Value Expected : " + expPvVoucherFooterGross);
		        //System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO+" Value Expected : " + expPvVoucherFooterAvgRateO);
		        
		        System.out.println("First Row Item Name         :  " + actPvVoucherItemR1  		 +" Value Expected : " + expPvVoucherItemR1);
		        System.out.println("First Row Units Name        :  " + actPvVoucherUnitsR1 		 +" Value Expected : " + expPvVoucherUnitsR1);
		        System.out.println("First Row Qty Name          :  " + actPvVoucherQtyR1		 +" Value Expected : " + expPvVoucherQtyR1);
		        System.out.println("First Row Rate Name         :  " + actPvVoucherRateR1 		 +" Value Expected : " + expPvVoucherRateR1);
		        System.out.println("First Row Gross Name        :  " + actPvVoucherGrossR1 	     +" Value Expected : " + expPvVoucherGrossR1);
		        //System.out.println("First Row Batch Name        :  " + actPvVoucherBatchR1 		 +" Value Expected : " + expPvVoucherBatchR1);
		        
		        /*System.out.println("Second Row Item Name        :  " + actPvVoucherItemR2  		 +" Value Expected : " + expPvVoucherItemR2);
		        System.out.println("Second Row Units Name       :  " + actPvVoucherUnitsR2 		 +" Value Expected : " + expPvVoucherUnitsR2);
		        System.out.println("Second Row Qty Name         :  " + actPvVoucherQtyR2 		 +" Value Expected : " + expPvVoucherQtyR2);
		        System.out.println("Second Row Rate Name        :  " + actPvVoucherRateR2  		 +" Value Expected : " + expPvVoucherRateR2);
		        System.out.println("Second Row Gross Name       :  " + actPvVoucherGrossR2 		 +" Value Expected : " + expPvVoucherGrossR2);
		        System.out.println("Second Row Bin Name         :  " + actPvVoucherBinR2 		 +" Value Expected : " + expPvVoucherBinR2);*/
		        
		        System.out.println("infoPanelStatus             :  ." + actinfoPanelStatus 		 +". Value Expected : " + expinfoPanelStatus);
		        System.out.println("infoPanelCreatedBY          :  ." + actinfoPanelCreatedBY 	 +". Value Expected : " + expinfoPanelCreatedBY);
		        System.out.println("infoPanelEditedBy           :  ." + actinfoPanelEditedBy 	 +". Value Expected : " + expinfoPanelEditedBy);
		        System.out.println("infoPanelNextToAuth         :  ." + actinfoPanelNextToAuth 	 +". Value Expected : " + expinfoPanelNextToAuth);
		        System.out.println("infoPanelBillStatus         :  ." + actinfoPanelBillStatus	 +". Value Expected : " + expinfoPanelBillStatus);
		        				
				if(actdocNumber.equalsIgnoreCase(expdocNumber) && actVoucherDate.equalsIgnoreCase(expVoucherDate) 
						&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt) && actpurchaseAccountTxt.equalsIgnoreCase(exppurchaseAccountTxt)
						&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt) && actvoucherHeaderCurrency.equalsIgnoreCase(expvoucherHeaderCurrency)
						
						&& actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty) && actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross) 
						&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet) /*&& actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)*/
						
						&& actPvVoucherItemR1.equalsIgnoreCase(expPvVoucherItemR1) && actPvVoucherUnitsR1.equalsIgnoreCase(expPvVoucherUnitsR1)
						&& actPvVoucherQtyR1.equalsIgnoreCase(expPvVoucherQtyR1) && actPvVoucherRateR1.equalsIgnoreCase(expPvVoucherRateR1)
						&& actPvVoucherGrossR1.equalsIgnoreCase(expPvVoucherGrossR1)  /*&& actPvVoucherBatchR1.equalsIgnoreCase(expPvVoucherBatchR1)*/
						
						/*&& actPvVoucherItemR2.equalsIgnoreCase(expPvVoucherItemR2) && actPvVoucherUnitsR2.equalsIgnoreCase(expPvVoucherUnitsR2)
						&& actPvVoucherQtyR2.equalsIgnoreCase(expPvVoucherQtyR2) && actPvVoucherRateR2.equalsIgnoreCase(expPvVoucherRateR2)
						&& actPvVoucherGrossR2.equalsIgnoreCase(expPvVoucherGrossR2)  && actPvVoucherBinR2.equalsIgnoreCase(expPvVoucherBinR2)
						
						&& actPvVoucherItemR3.equalsIgnoreCase(expPvVoucherItemR3) && actPvVoucherUnitsR3.equalsIgnoreCase(expPvVoucherUnitsR3)
						&& actPvVoucherQtyR3.equalsIgnoreCase(expPvVoucherQtyR3) && actPvVoucherRateR3.equalsIgnoreCase(expPvVoucherRateR3)
						&& actPvVoucherGrossR3.equalsIgnoreCase(expPvVoucherGrossR3)  && actPvVoucherRMAR3.equalsIgnoreCase(expPvVoucherRMAR3)
						
						&& actPvVoucherItemR4.equalsIgnoreCase(expPvVoucherItemR4) && actPvVoucherUnitsR4.equalsIgnoreCase(expPvVoucherUnitsR4)
						&& actPvVoucherQtyR4.equalsIgnoreCase(expPvVoucherQtyR4) && actPvVoucherRateR4.equalsIgnoreCase(expPvVoucherRateR4)
						&& actPvVoucherGrossR4.equalsIgnoreCase(expPvVoucherGrossR4)  && actPvVoucherBatchR4.equalsIgnoreCase(expPvVoucherBatchR4)*/
						
						&& actinfoPanelStatus.equalsIgnoreCase(expinfoPanelStatus) && actinfoPanelCreatedBY.equalsIgnoreCase(expinfoPanelCreatedBY)
						&& actinfoPanelEditedBy.equalsIgnoreCase(expinfoPanelEditedBy) && actinfoPanelNextToAuth.equalsIgnoreCase(expinfoPanelNextToAuth)
						&& actinfoPanelBillStatus.equalsIgnoreCase(expinfoPanelBillStatus))
				{
					System.out.println("Test Pass : Saved Data is As Expected");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 200, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Saved Data is NOT As Expected");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 200, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 200, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			
			
			
			
		/*	@FindBy(xpath="//td[contains(text(),'Authorized')]")
			private static WebElement homePageAuthStatusAuthorizeRowOne;
			
			@FindBy(xpath="//div[contains(text(),'Authorized by')]")
			private static WebElement infoPanelAuthorizeBy;*/
			
			
			@FindBy(xpath="//td[contains(text(),'Pending')]")
			private static WebElement homePageAuthStatusPendingRowOne;
			 
			
			public boolean checkPurchaseVoucherNewAuthorizationStatusInHomePageInAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

				try
				{
			   /* getWebDriverWait().until(ExpectedConditions.visibilityOf(authorizeBtn));
			    authorizeBtn.click();*/

			    getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(new_CloseBtn));
			    new_CloseBtn.click();
			    Thread.sleep(2000);
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendStatusRow1));
			    
				String actStatus=suspendStatusRow1.getText();
				String expStatus=excelReader.getCellData("PurchaseVoucherN", 241, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 241, 8, actStatus);
			   
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAuthStatusPendingRowOne));
				String acthomePageAuthStatusPendingRowOne= homePageAuthStatusPendingRowOne.getText();
				String exphomePageAuthStatusPendingRowOne=excelReader.getCellData("PurchaseVoucherN", 242, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 242, 8, acthomePageAuthStatusPendingRowOne);
				
				System.out.println("************************************* checkVoucherSuspendAuthorizeStatusInAuthorizeUser  *********************************");
				System.out.println("Suspend Status In home Page 	 :  "+actStatus 						+" Value Expected : "+expStatus);
				System.out.println("homePageAuthStatusPendingRowOne  :  "+acthomePageAuthStatusPendingRowOne+" Value Expected : "+exphomePageAuthStatusPendingRowOne);
				
				if (actStatus.equalsIgnoreCase(expStatus) && acthomePageAuthStatusPendingRowOne.equalsIgnoreCase(exphomePageAuthStatusPendingRowOne))
				{
					System.out.println("Test Pass : Entry Page Close Button");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 240, 9, resPass);
					return true;
				}
				
				else
				{
					System.out.println("Test Fail :  Entry Page Close Button");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 240, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 240, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			

			//Click on Pending Authorization Purchase link in the Purchase Voucher New
			
			@FindBy(xpath="//body/section/div/div/section/div/div/div/div/div/table/tbody/tr")
			private static WebElement homePagePendingAuthRows;
			
			@FindBy(xpath="//*[@id='tblBodyTransRender']/tr")
			private static List<WebElement>  voucherBodyGridRowCount;
				
			@FindBy(xpath="//*[@id='tblBodyTransRender']")
			private static WebElement  voucherBodyGrid;
			
			public boolean checkPendingAuthorizationPurchaseInHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

				try
				{
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingAuthorizationView));	
				homePagePendingAuthorizationView.click();
				
				Thread.sleep(3000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherBodyGrid));
				
				boolean voucherbodyGrid=voucherBodyGrid.getText().isEmpty();
				
				String actvoucherBodyGrid=Boolean.toString(voucherbodyGrid);
				String expvoucherBodyGrid=excelReader.getCellData("PurchaseVoucherN", 244, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 244, 8, actvoucherBodyGrid.toUpperCase());
				
				System.out.println("************************************* checkPendingAuthorizationPurchaseInHomePage  *********************************");
				
				System.out.println("Row Count in Voucher Body : "+actvoucherBodyGrid+" Value Expected : "+expvoucherBodyGrid);
				
				if(actvoucherBodyGrid.equalsIgnoreCase(expvoucherBodyGrid))
				{
					System.out.println("Test Pass :No Vouchers are Displayed ");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 243, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Vouchers are Displayed ");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 243, 9, resFail);
					return false;
				}
				}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 243, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			
			}

			
			//Click on Pending Purchase Orders link in the Purchase Voucher New
			public boolean checkPendingPurchaseOrdersInHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				try
				{
				
					
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingOrdersLinks));	
				homePagePendingOrdersLinks.click();
				
				boolean voucherbodyGrid=voucherBodyGrid.getText().isEmpty();
				
				String actvoucherbodyGrid=Boolean.toString(voucherbodyGrid);
				String expvoucherbodyGrid= excelReader.getCellData("PurchaseVoucherN", 246, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 246, 8, actvoucherbodyGrid.toUpperCase());
				
				
				System.out.println("************************************* checkPendingPurchaseOrdersInHomePage  *********************************");
				
				System.out.println("Row Count in Voucher Body : "+actvoucherbodyGrid+" Value Expected : "+expvoucherbodyGrid);
				
				if(actvoucherbodyGrid.equalsIgnoreCase(expvoucherbodyGrid))
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 245, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 245, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 245, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}

			
		

		
	@FindBy(xpath="//*[@id='userprofile']/li/span[2]")
	private static WebElement logoutOption;

	/*@FindBy(xpath="//*[@id='txtUsername']")
	private static WebElement username;*/

	@FindBy(id="txtPassword")
	private static WebElement password;

	@FindBy(id="ddlCompany")
	private static WebElement companyDropDownList;

	@FindBy(id="btnSignin")
	private static WebElement signIn;

	

	    //Logout and Login as Authorize Voucher To Login Authorize User
		public boolean checkSignOutBeforeVoucherAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			    getWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			    userNameDisplay.click();
			
			    getWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			    logoutOption.click();
			 
				boolean verifyFiledsStatus=true;
				
				getWebDriverWait().until(ExpectedConditions.visibilityOf(username));
				
				
				boolean actusername              = username.isDisplayed();
				boolean actpassword              = password.isDisplayed();
				boolean actcompanyDropDownList   = companyDropDownList.isDisplayed();
				boolean actsignIn                = signIn.isDisplayed();
				
				// Expected
				boolean expusername              = true;
				boolean exppassword              = true;
				boolean expcompanyDropDownList   = true;
				boolean expsignIn                = true;
				
				System.out.println("************************************* checkSignOut  *********************************");
				System.out.println("username             : "+actusername             +" Value Expected : "+expusername);
				System.out.println("password             : "+actpassword             +" Value Expected : "+exppassword);
				System.out.println("companyDropDownList  : "+actcompanyDropDownList  +" Value Expected : "+expcompanyDropDownList);
				System.out.println("signIn               : "+actsignIn               +" Value Expected : "+expsignIn);
				
				boolean actMethod=actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList
						&& actsignIn==expsignIn;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 250, 7);
		
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 250, 8, actResult.toUpperCase());
				
				
				if(actMethod==true)
				{
			
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 249, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 249, 9, resFail);
					return false;
			    }
			      }
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 249, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				return false;
			}
	    }


	      public boolean checkAlertsInWrapperLayoutAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			{
				
			getWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			username.click();
			 
			 username.sendKeys(excelReader.getCellData("PurchaseVoucherN", 252, 6));
			 getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
			 
			 getWebDriverWait().until(ExpectedConditions.visibilityOf(password));
			 password.sendKeys(excelReader.getCellData("PurchaseVoucherN", 253, 6));
			 
			 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
			  
			 getWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
			 signIn.click();
			 
			 //checkRefreshPopOnlogin();
			 
			//checkPopUpWindow();
			
			Thread.sleep(5000);
			 
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			String actUserInfo=userNameDisplay.getText();
			
			System.out.println("User Info : "+actUserInfo);
			
			System.out.println("User Info Capture Text :"+userNameDisplay.getText());
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
			
			companyLogo.click();
			
			String actCompanyTxt=companyName.getText();
			String actLoginCompanyName=actCompanyTxt.substring(0, 19);
			System.out.println("company name :"+ actLoginCompanyName);
			companyLogo.click();
						    	
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			String getDashboard=labelDashboard.getText();
				
			boolean getnoOfAlertsDisplay=noOfAlertsDisplay.isDisplayed();
					
			// Expected
			String expuserInfo="UserAllOptionsST";
			String expLoginCompanyName="Automation Company ";
			String expDashboard="Dashboard";
			boolean expnoOfAlertsDisplay=true;
			
			System.out.println("************************************* checkAlertsToSignIAsAuthorizeUser  *********************************");
			System.out.println("userNameDisplay    : "+actUserInfo              +" Value Expected : "+expuserInfo);
			System.out.println("LoginCompanyName   : "+actLoginCompanyName      +" Value Expected : "+expLoginCompanyName);
			System.out.println("labelDashboard     : "+getDashboard             +" Value Expected : "+expDashboard);
			System.out.println("noOfAlertsDisplay  : "+getnoOfAlertsDisplay     +" Value Expected : "+expnoOfAlertsDisplay);
			
			
			boolean actMethod=actUserInfo.equalsIgnoreCase(expuserInfo) && actLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)
					&& getDashboard.equalsIgnoreCase(expDashboard) && getnoOfAlertsDisplay==expnoOfAlertsDisplay;
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherN", 254, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 254, 8, actResult);
			
			
			if(actMethod==true)
			{
				System.out.println("Test Pass : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 251, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 251, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 251, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				return false;
			}
	}



	@FindBy(xpath="//span[@id='noofalerts']")
	private static WebElement noOfAlertsDisplay;

	@FindBy(xpath="//li[@class='header']")
	private static WebElement alertsMainHeader;

	@FindBy(xpath="//li[@class='treeview-menu']//a[@id='1']")
	private static WebElement alertTransactionsTreeView;

	@FindBy(xpath="//a[@id='769']//span[1]")
	private static WebElement alertPurchaseVoucher;

	@FindBy(xpath="//li[@id='masterChild_769']//a")
	private static WebElement alertPurchaseVoucherNeedsAuthorization;


		public boolean checkClickOnAlertsInWrapperLayoutAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getWebDriverWait().until(ExpectedConditions.visibilityOf(noOfAlertsDisplay));
			noOfAlertsDisplay.click();
			
			Thread.sleep(2000);
			
			// Actual
			String  actAlertsMainHeader=alertsMainHeader.getText();
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 256, 8, actAlertsMainHeader);
			
			boolean actNoOfAlertsDisplay=alertsMainHeader.isDisplayed();
			
			String actAlertTransactionsTreeView=alertTransactionsTreeView.getText();
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 257, 8, actAlertTransactionsTreeView);
			
			boolean actNoOfAlertsTransaction=alertTransactionsTreeView.isDisplayed();
			
			// Expected
			String  expAlertsMainHeader = excelReader.getCellData("PurchaseVoucherN", 256, 7);
			boolean expNoOfAlertsDisplay=true;
			
			String  expAlertTransactionsTreeView=excelReader.getCellData("PurchaseVoucherN", 257, 7);
			boolean expNoOfAlertsTransaction=true;
			
			System.out.println("************************************* checkClickOnAlertsInAuthorizeUser  *********************************");
			System.out.println("noOfAlertsDisplay         : "+actNoOfAlertsDisplay+" Value Expected          : "+expNoOfAlertsDisplay);
			System.out.println("alertsMainHeader          : "+actAlertsMainHeader+" Value Expected           : "+expAlertsMainHeader);
			System.out.println("noOfalertsTransaction     : "+actNoOfAlertsTransaction+" Value Expected      : "+expNoOfAlertsTransaction);
			System.out.println("alertTransactionsTreeView : "+actAlertTransactionsTreeView+" Value Expected  : "+expAlertTransactionsTreeView);
			
			if(actNoOfAlertsDisplay==expNoOfAlertsDisplay && actAlertsMainHeader.equalsIgnoreCase(expAlertsMainHeader)
					&& actNoOfAlertsTransaction==expNoOfAlertsTransaction && actAlertTransactionsTreeView.equalsIgnoreCase(expAlertTransactionsTreeView))
			{
			
				System.out.println("Test Pass : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 255, 9, resPass);
				return true;
				
			}
			else
			{
				System.out.println("Test Fail : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 255, 9, resFail);
				return false;
			
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 255, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	}


		public boolean checkClickOnTransactionAlertsInAlertsPopUpAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getWebDriverWait().until(ExpectedConditions.visibilityOf(alertTransactionsTreeView));
			alertTransactionsTreeView.click();
			
			Thread.sleep(2000);
			
			// Actual
			String actAlertPurchaseVoucher=alertPurchaseVoucher.getText();
			boolean actNoOfAlertPurchaseVoucher=alertPurchaseVoucher.isDisplayed();
			
			// Expected
			String expAlertPurchaseVoucher=excelReader.getCellData("PurchaseVoucherN", 259, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 259, 8, actAlertPurchaseVoucher);
			
			boolean expNoOfAlertPurchaseVoucher=true;
			
			System.out.println("************************************* checkClickOnTransactionAlertsInAuthorizeUser  *********************************");
			System.out.println("No Of alertPurchaseVoucher  : "+actNoOfAlertPurchaseVoucher +" Value Expected : "+expNoOfAlertPurchaseVoucher);
			System.out.println("alertPurchaseVoucher        : ."+actAlertPurchaseVoucher		+". Value Expected : "+expAlertPurchaseVoucher);
			
			if(actNoOfAlertPurchaseVoucher==expNoOfAlertPurchaseVoucher && actAlertPurchaseVoucher.equalsIgnoreCase(expAlertPurchaseVoucher))
			{
			
				System.out.println("Test Pass : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 258, 9, resPass);
				return true;
				
			}
			else
			{
				System.out.println("Test Fail : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 258, 9, resFail);
				return false;
			
			}
			}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 258, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
	}



	     public boolean checkClickOnVoucherAlertsFromTransactionsOfAlertPopupAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			getWebDriverWait().until(ExpectedConditions.visibilityOf(alertPurchaseVoucher));
			alertPurchaseVoucher.click();
			
			Thread.sleep(2000);
			
			// Actual
			String actAlertPurchaseVoucherNeedsAuthorization=alertPurchaseVoucherNeedsAuthorization.getText();
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 261, 8, actAlertPurchaseVoucherNeedsAuthorization);
			
			boolean actNoOfAlertPurchaseVoucherNeedsAuthorization=alertPurchaseVoucherNeedsAuthorization.isDisplayed();
			
			// Expected
			String expAlertPurchaseVoucherNeedsAuthorization=excelReader.getCellData("PurchaseVoucherN", 261, 7);
			
			boolean expNoOfAlertPurchaseVoucherNeedsAuthorization=true;
			
			System.out.println("************************************* checkClickOnVoucherAlertsInAuthorizeUser  *********************************");
			System.out.println("No Of alertPurchaseVoucherNeedsAuthorization  : "+actNoOfAlertPurchaseVoucherNeedsAuthorization +" Value Expected : "+expNoOfAlertPurchaseVoucherNeedsAuthorization);
			System.out.println("alertPurchaseVoucherNeedsAuthorization        : ."+actAlertPurchaseVoucherNeedsAuthorization		+". Value Expected : "+expAlertPurchaseVoucherNeedsAuthorization);
			
			if(actNoOfAlertPurchaseVoucherNeedsAuthorization==expNoOfAlertPurchaseVoucherNeedsAuthorization
					&& actAlertPurchaseVoucherNeedsAuthorization.startsWith(expAlertPurchaseVoucherNeedsAuthorization))
			{
			
				System.out.println("Test Pass : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 260, 9, resPass);
				return true;
				
			}
			else
			{
				System.out.println("Test Fail : Transaction Authorization is Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 260, 9, resFail);
				return false;
			
			}
				  
			}
	     catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 260, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	}




	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[1]//div[2]")
	private static WebElement infoPanelStatus;

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[2]//div[2]")
	private static WebElement infoPanelCreatedBY;

	/*@FindBy(xpath="//div[@id='DBdashlate1']//div[2]//div[2]")
	private static WebElement infoPanelCreatedBY;*/

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[4]//div[2]")
	private static WebElement infoPanelEditedBy;

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[6]//div[2]")
	private static WebElement infoPanelNextToAuth;

	@FindBy(xpath="//div[@id='id_transactionentry_infopanel_data_container']//div[7]//div[2]")
	private static WebElement infoPanelBillStatus;


		public boolean checkClickOnDocumentNumberAlertsInAlertsPopUpAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try 
			{
			getWebDriverWait().until(ExpectedConditions.visibilityOf(alertPurchaseVoucherNeedsAuthorization));
			alertPurchaseVoucherNeedsAuthorization.click();
			
			Thread.sleep(5000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actdocNumber,expdocNumber;
			
			actdocNumber=documentNumberTxt.getAttribute("value");
			expdocNumber=excelReader.getCellData("PurchaseVoucherN", 263, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 263, 8, actdocNumber);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.click();
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			System.out.println(df.format(date));
			
			String actVoucherDate,expVoucherDate;
			
			actVoucherDate=dateTxt.getAttribute("value");
			expVoucherDate=df.format(date);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			
			String actpurchaseAccountTxt=purchaseAccountTxt.getAttribute("value");
			String exppurchaseAccountTxt=excelReader.getCellData("PurchaseVoucherN", 264, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 264, 8, actpurchaseAccountTxt);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			
			String actvendorAccountTxt=vendorAccountTxt.getAttribute("value");
			String expvendorAccountTxt=excelReader.getCellData("PurchaseVoucherN", 265, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 265, 8, actvendorAccountTxt);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();
			
			String actvoucherHeaderCurrency=voucherHeaderCurrency.getAttribute("value");
			String expvoucherHeaderCurrency=excelReader.getCellData("PurchaseVoucherN", 266, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 266, 8, actvoucherHeaderCurrency);
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			String actdepartmentTxt=departmentTxt.getAttribute("value");
			String expdepartmentTxt=excelReader.getCellData("PurchaseVoucherN", 267, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 267, 8, actdepartmentTxt);
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			
			String actwareHouseTxt=wareHouseTxt.getAttribute("value");
			String expwareHouseTxt=excelReader.getCellData("PurchaseVoucherN", 268, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 268, 8, actwareHouseTxt);
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
			new_footerExpandBtn.click();
			
			
			String actPvVoucherItemR1,actPvVoucherUnitsR1,actPvVoucherQtyR1,actPvVoucherRateR1,actPvVoucherGrossR1,actPvVoucherBatchR1;
			String actPvVoucherItemR2,actPvVoucherUnitsR2,actPvVoucherQtyR2,actPvVoucherRateR2,actPvVoucherGrossR2,actPvVoucherBinR2;
			String actPvVoucherItemR3,actPvVoucherUnitsR3,actPvVoucherQtyR3,actPvVoucherRateR3,actPvVoucherGrossR3,actPvVoucherRMAR3;
			String actPvVoucherItemR4,actPvVoucherUnitsR4,actPvVoucherQtyR4,actPvVoucherRateR4,actPvVoucherGrossR4,actPvVoucherBatchR4;
			
			String actPvVoucherFooterQty,actPvVoucherFooterGross,actPvVoucherFooterNet,actPvVoucherFooterAvgRateO;
			
			
			String actinfoPanelStatus,actinfoPanelCreatedBY,actinfoPanelEditedBy,actinfoPanelNextToAuth,actinfoPanelBillStatus;
			
			String expPvVoucherItemR1,expPvVoucherUnitsR1,expPvVoucherQtyR1,expPvVoucherRateR1,expPvVoucherGrossR1,expPvVoucherBatchR1;
			String expPvVoucherItemR2,expPvVoucherUnitsR2,expPvVoucherQtyR2,expPvVoucherRateR2,expPvVoucherGrossR2,expPvVoucherBinR2;
			String expPvVoucherItemR3,expPvVoucherUnitsR3,expPvVoucherQtyR3,expPvVoucherRateR3,expPvVoucherGrossR3,expPvVoucherRMAR3;
			String expPvVoucherItemR4,expPvVoucherUnitsR4,expPvVoucherQtyR4,expPvVoucherRateR4,expPvVoucherGrossR4,expPvVoucherBatchR4;
			
			String expPvVoucherFooterQty,expPvVoucherFooterGross,expPvVoucherFooterNet,expPvVoucherFooterAvgRateO;
			
			
			String expinfoPanelStatus,expinfoPanelCreatedBY,expinfoPanelEditedBy,expinfoPanelNextToAuth,expinfoPanelBillStatus;
			
			expPvVoucherItemR1=excelReader.getCellData("PurchaseVoucherN", 269, 7);
			expPvVoucherUnitsR1=excelReader.getCellData("PurchaseVoucherN", 270, 7);
			expPvVoucherQtyR1=excelReader.getCellData("PurchaseVoucherN", 271, 7);
			expPvVoucherRateR1=excelReader.getCellData("PurchaseVoucherN", 272, 7);
			expPvVoucherGrossR1=excelReader.getCellData("PurchaseVoucherN", 273, 7);
			expPvVoucherBatchR1=excelReader.getCellData("PurchaseVoucherN", 274, 7);
			
			/*expPvVoucherItemR2=excelReader.getCellData("PurchaseVoucherN", 275, 7);
			expPvVoucherUnitsR2=excelReader.getCellData("PurchaseVoucherN", 276, 7);;
			expPvVoucherQtyR2=excelReader.getCellData("PurchaseVoucherN", 277, 7);
			expPvVoucherRateR2=excelReader.getCellData("PurchaseVoucherN", 278, 7);
			expPvVoucherGrossR2=excelReader.getCellData("PurchaseVoucherN", 279, 7);			
			expPvVoucherBinR2=excelReader.getCellData("PurchaseVoucherN", 280, 7);
			
			expPvVoucherItemR3=excelReader.getCellData("PurchaseVoucherN", 281, 7);
			expPvVoucherUnitsR3=excelReader.getCellData("PurchaseVoucherN", 282, 7);
			expPvVoucherQtyR3=excelReader.getCellData("PurchaseVoucherN", 283, 7);
			expPvVoucherRateR3=excelReader.getCellData("PurchaseVoucherN", 284, 7);
			expPvVoucherGrossR3=excelReader.getCellData("PurchaseVoucherN", 285, 7);
			expPvVoucherRMAR3=excelReader.getCellData("PurchaseVoucherN", 286, 7);
			
			expPvVoucherItemR4=excelReader.getCellData("PurchaseVoucherN", 287, 7);
			expPvVoucherUnitsR4=excelReader.getCellData("PurchaseVoucherN", 288, 7);
			expPvVoucherQtyR4=excelReader.getCellData("PurchaseVoucherN", 289, 7);
			expPvVoucherRateR4=excelReader.getCellData("PurchaseVoucherN", 290, 7);
			expPvVoucherGrossR4=excelReader.getCellData("PurchaseVoucherN", 291, 7);
			expPvVoucherBatchR4=excelReader.getCellData("PurchaseVoucherN", 292, 7);*/
			
			expPvVoucherFooterNet=excelReader.getCellData("PurchaseVoucherN", 293, 7);
			expPvVoucherFooterQty=excelReader.getCellData("PurchaseVoucherN", 294, 7);
			expPvVoucherFooterGross=excelReader.getCellData("PurchaseVoucherN", 295, 7);
			//expPvVoucherFooterAvgRateO=excelReader.getCellData("PurchaseVoucherN", 296, 7); //11.66
			
			expinfoPanelStatus=excelReader.getCellData("PurchaseVoucherN", 297, 7);
			expinfoPanelCreatedBY=excelReader.getCellData("PurchaseVoucherN", 298, 7);
			expinfoPanelEditedBy=excelReader.getCellData("PurchaseVoucherN", 299, 7);
			expinfoPanelNextToAuth=excelReader.getCellData("PurchaseVoucherN", 300, 7);
			expinfoPanelBillStatus=excelReader.getCellData("PurchaseVoucherN", 301, 7);
			
			System.out.println(netAmount.getText());
			System.out.println(QtyAmount.getText());
			System.out.println(GrossAmount.getText());
			System.out.println(PVNFooterAvgRateO.getText());
						
			actPvVoucherItemR1=select1stRow_1stColumn.getText();
			actPvVoucherUnitsR1=select1stRow_2ndColumn.getText();
			actPvVoucherQtyR1=select1stRow_5thColumn.getText();
			actPvVoucherRateR1=select1stRow_7thColumn.getText();
			actPvVoucherGrossR1=select1stRow_8thColumn.getText();
			//actPvVoucherBatchR1=select1stRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 269, 8, actPvVoucherItemR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 270, 8, actPvVoucherUnitsR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 271, 8, actPvVoucherQtyR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 272, 8, actPvVoucherRateR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 273, 8, actPvVoucherGrossR1);
			//excelReader.setCellData(xlfile, "PurchaseVoucherN", 274, 8, actPvVoucherBatchR1);
			
			/*actPvVoucherItemR2=select2ndRow_1stColumn.getText();
			actPvVoucherUnitsR2=select2ndRow_2ndColumn.getText();
			actPvVoucherQtyR2=select2ndRow_5thColumn.getText();
			actPvVoucherRateR2=select2ndRow_7thColumn.getText();
			actPvVoucherGrossR2=select2ndRow_8thColumn.getText();
			actPvVoucherBinR2=select2ndRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 275, 8, actPvVoucherItemR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 276, 8, actPvVoucherUnitsR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 277, 8, actPvVoucherQtyR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 278, 8, actPvVoucherRateR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 279, 8, actPvVoucherGrossR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 280, 8, actPvVoucherBinR2);
			
			actPvVoucherItemR3=select3rdRow_1stColumn.getText();
			actPvVoucherUnitsR3=select3rdRow_2ndColumn.getText();
			actPvVoucherQtyR3=select3rdRow_5thColumn.getText();
			actPvVoucherRateR3=select3rdRow_7thColumn.getText();
			actPvVoucherGrossR3=select3rdRow_8thColumn.getText();
			actPvVoucherRMAR3=select3rdRow_12thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 281, 8, actPvVoucherItemR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 282, 8, actPvVoucherUnitsR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 283, 8, actPvVoucherQtyR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 284, 8, actPvVoucherRateR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 285, 8, actPvVoucherGrossR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 286, 8, actPvVoucherRMAR3);
			
			actPvVoucherItemR4=select4thRow_1stColumn.getText();
			actPvVoucherUnitsR4=select4thRow_2ndColumn.getText();
			actPvVoucherQtyR4=select4thRow_5thColumn.getText();
			actPvVoucherRateR4=select4thRow_7thColumn.getText();
			actPvVoucherGrossR4=select4thRow_8thColumn.getText();
			actPvVoucherBatchR4=select4thRow_9thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 287, 8, actPvVoucherItemR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 288, 8, actPvVoucherUnitsR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 289, 8, actPvVoucherQtyR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 290, 8, actPvVoucherRateR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 291, 8, actPvVoucherGrossR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 292, 8, actPvVoucherBatchR4);*/
			
			
			actPvVoucherFooterNet=netAmount.getText();
			actPvVoucherFooterQty=QtyAmount.getText();
			actPvVoucherFooterGross=GrossAmount.getText();
			actPvVoucherFooterAvgRateO=PVNFooterAvgRateO.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 293, 8, actPvVoucherFooterNet);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 294, 8, actPvVoucherFooterQty);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 295, 8, actPvVoucherFooterGross);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 296, 8, actPvVoucherFooterAvgRateO);
			
			
			actinfoPanelStatus=infoPanelStatus.getText();
			actinfoPanelCreatedBY=infoPanelCreatedBY.getText();
			actinfoPanelEditedBy=infoPanelEditedBy.getText();
			actinfoPanelNextToAuth=infoPanelNextToAuth.getText();
			actinfoPanelBillStatus=infoPanelBillStatus.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 297, 8, actinfoPanelStatus);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 298, 8, actinfoPanelCreatedBY);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 299, 8, actinfoPanelEditedBy);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 300, 8, actinfoPanelNextToAuth);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 301, 8, actinfoPanelBillStatus);
			

			System.out.println("************************************* checkClickOnDocumentNumberAlertsInAuthorizeUser  *********************************");
			
			System.out.println("PvdocNumber                 :  " + actdocNumber 			 +" Value Expected : " + expdocNumber);
			System.out.println("PvVoucherDate               :  " + actVoucherDate 			 +" Value Expected : " + expVoucherDate);
			
			System.out.println("PvVoucherpurchaseAccountTxt :  " + actpurchaseAccountTxt 	 +" Value Expected : " + exppurchaseAccountTxt);
			System.out.println("PvVouchervendorAccountTxt   :  " + actvendorAccountTxt 		 +" Value Expected : " + expvendorAccountTxt);
			System.out.println("PvVoucherHeaderCurrency     :  " + actvoucherHeaderCurrency  +" Value Expected : " + expvoucherHeaderCurrency);
			System.out.println("PvVoucherdepartmentTxt      :  " + actdepartmentTxt 		 +" Value Expected : " + expdepartmentTxt);
			System.out.println("PvVoucherWarehouse          :  " + actwareHouseTxt 			 +" Value Expected : " + expwareHouseTxt);
			
			System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet 	 +" Value Expected : " + expPvVoucherFooterNet);
			System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty  	 +" Value Expected : " + expPvVoucherFooterQty);
			System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross	 +" Value Expected : " + expPvVoucherFooterGross);
			//System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO+" Value Expected : " + expPvVoucherFooterAvgRateO);
			
			System.out.println("First Row Item Name         :  " + actPvVoucherItemR1  		 +" Value Expected : " + expPvVoucherItemR1);
			System.out.println("First Row Units Name        :  " + actPvVoucherUnitsR1 		 +" Value Expected : " + expPvVoucherUnitsR1);
			System.out.println("First Row Qty Name          :  " + actPvVoucherQtyR1		 +" Value Expected : " + expPvVoucherQtyR1);
			System.out.println("First Row Rate Name         :  " + actPvVoucherRateR1 		 +" Value Expected : " + expPvVoucherRateR1);
			System.out.println("First Row Gross Name        :  " + actPvVoucherGrossR1 	     +" Value Expected : " + expPvVoucherGrossR1);
			//System.out.println("First Row Batch Name        :  " + actPvVoucherBatchR1 		 +" Value Expected : " + expPvVoucherBatchR1);
			
			/*System.out.println("Second Row Item Name        :  " + actPvVoucherItemR2  		 +" Value Expected : " + expPvVoucherItemR2);
			System.out.println("Second Row Units Name       :  " + actPvVoucherUnitsR2 		 +" Value Expected : " + expPvVoucherUnitsR2);
			System.out.println("Second Row Qty Name         :  " + actPvVoucherQtyR2 		 +" Value Expected : " + expPvVoucherQtyR2);
			System.out.println("Second Row Rate Name        :  " + actPvVoucherRateR2  		 +" Value Expected : " + expPvVoucherRateR2);
			System.out.println("Second Row Gross Name       :  " + actPvVoucherGrossR2 		 +" Value Expected : " + expPvVoucherGrossR2);
			System.out.println("Second Row Bin Name         :  " + actPvVoucherBinR2 		 +" Value Expected : " + expPvVoucherBinR2);*/
			
			System.out.println("infoPanelStatus             :  " + actinfoPanelStatus 		 +" Value Expected : " + expinfoPanelStatus);
			System.out.println("infoPanelCreatedBY          :  " + actinfoPanelCreatedBY 	 +" Value Expected : " + expinfoPanelCreatedBY);
			System.out.println("infoPanelEditedBy           :  " + actinfoPanelEditedBy 	 +" Value Expected : " + expinfoPanelEditedBy);
			System.out.println("infoPanelNextToAuth         :  " + actinfoPanelNextToAuth 	 +" Value Expected : " + expinfoPanelNextToAuth);
			System.out.println("infoPanelBillStatus         :  " + actinfoPanelBillStatus	 +" Value Expected : " + expinfoPanelBillStatus);
			
			
			
			if(actdocNumber.equalsIgnoreCase(expdocNumber) && actVoucherDate.equalsIgnoreCase(expVoucherDate) 
					&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt) && actpurchaseAccountTxt.equalsIgnoreCase(exppurchaseAccountTxt)
					&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt) && actvoucherHeaderCurrency.equalsIgnoreCase(expvoucherHeaderCurrency)
					
					&& actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty) && actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross) 
					&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet) /*&& actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)*/
					
					&& actPvVoucherItemR1.equalsIgnoreCase(expPvVoucherItemR1) && actPvVoucherUnitsR1.equalsIgnoreCase(expPvVoucherUnitsR1)
					&& actPvVoucherQtyR1.equalsIgnoreCase(expPvVoucherQtyR1) && actPvVoucherRateR1.equalsIgnoreCase(expPvVoucherRateR1)
					&& actPvVoucherGrossR1.equalsIgnoreCase(expPvVoucherGrossR1) /* && actPvVoucherBatchR1.equalsIgnoreCase(expPvVoucherBatchR1)*/
					
					/*&& actPvVoucherItemR2.equalsIgnoreCase(expPvVoucherItemR2) && actPvVoucherUnitsR2.equalsIgnoreCase(expPvVoucherUnitsR2)
					&& actPvVoucherQtyR2.equalsIgnoreCase(expPvVoucherQtyR2) && actPvVoucherRateR2.equalsIgnoreCase(expPvVoucherRateR2)
					&& actPvVoucherGrossR2.equalsIgnoreCase(expPvVoucherGrossR2)  && actPvVoucherBinR2.equalsIgnoreCase(expPvVoucherBinR2)
					
					&& actPvVoucherItemR3.equalsIgnoreCase(expPvVoucherItemR3) && actPvVoucherUnitsR3.equalsIgnoreCase(expPvVoucherUnitsR3)
					&& actPvVoucherQtyR3.equalsIgnoreCase(expPvVoucherQtyR3) && actPvVoucherRateR3.equalsIgnoreCase(expPvVoucherRateR3)
					&& actPvVoucherGrossR3.equalsIgnoreCase(expPvVoucherGrossR3)  && actPvVoucherRMAR3.equalsIgnoreCase(expPvVoucherRMAR3)
					
					&& actPvVoucherItemR4.equalsIgnoreCase(expPvVoucherItemR4) && actPvVoucherUnitsR4.equalsIgnoreCase(expPvVoucherUnitsR4)
					&& actPvVoucherQtyR4.equalsIgnoreCase(expPvVoucherQtyR4) && actPvVoucherRateR4.equalsIgnoreCase(expPvVoucherRateR4)
					&& actPvVoucherGrossR4.equalsIgnoreCase(expPvVoucherGrossR4)  && actPvVoucherBatchR4.equalsIgnoreCase(expPvVoucherBatchR4)*/
					
					&& actinfoPanelStatus.equalsIgnoreCase(expinfoPanelStatus) && actinfoPanelCreatedBY.equalsIgnoreCase(expinfoPanelCreatedBY)
					&& actinfoPanelEditedBy.equalsIgnoreCase(expinfoPanelEditedBy) && actinfoPanelNextToAuth.equalsIgnoreCase(expinfoPanelNextToAuth)
					&& actinfoPanelBillStatus.equalsIgnoreCase(expinfoPanelBillStatus))
			{
				System.out.println("Test Pass : Saved Data is As Expected");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Saved Data is NOT As Expected");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 262, 9, resFail);
				return false;
			}
			}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 262, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
	   }




	@FindBy(xpath="//td[contains(text(),'Authorized')]")
	private static WebElement homePageAuthStatusAuthorizeRowOne;

	@FindBy(xpath="//div[contains(text(),'Authorized by')]")
	private static WebElement infoPanelAuthorizeBy;
	

	
	@FindBy(xpath="//textarea[@id='id_transactionentry_authorization_remark']")
	private static WebElement  remarksOfAuthorizeRemarks;
	
	
	@FindBy(xpath="//input[@id='id_transactionentry_authorization_remark_popup_ok']")
	private static WebElement  remarksOfAuthorizeRemarksOkButton;


	  public boolean checkAuthorizeOptionAndAuthorizationStatusInHomePageInAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getWebDriverWait().until(ExpectedConditions.visibilityOf(authorizeBtn));
			authorizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(remarksOfAuthorizeRemarks));
		    remarksOfAuthorizeRemarks.click();
		    remarksOfAuthorizeRemarks.sendKeys("Test Smoke");
		    
		    
		    getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(remarksOfAuthorizeRemarksOkButton));
		    remarksOfAuthorizeRemarksOkButton.click();
			
			getWebDriverWait().until(ExpectedConditions.visibilityOf(new_CloseBtn));
			new_CloseBtn.click();
			
			String acthomePageAuthStatusAuthorizeRowOne=homePageAuthStatusAuthorizeRowOne.getText();
			String exphomePageAuthStatusAuthorizeRowOne=excelReader.getCellData("PurchaseVoucherN", 303, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 303, 8, acthomePageAuthStatusAuthorizeRowOne);
			
			System.out.println("************************************* checkAuthorizeOptionAndAuthorizationStatusInHomePageInAuthorizeUser  *********************************");
			System.out.println("homePageAuthStatusAuthorizeRowOne  : "+acthomePageAuthStatusAuthorizeRowOne+" Value Expected : "+exphomePageAuthStatusAuthorizeRowOne);
			
			if (acthomePageAuthStatusAuthorizeRowOne.equalsIgnoreCase(exphomePageAuthStatusAuthorizeRowOne))
			{
				System.out.println("Test Pass : No Vouchers is played ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 302, 9, resPass);
				return true;
			}
			
			else
			{
				System.out.println("Test Fail : Vouchers are Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 302, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 302, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	}







	     public boolean checkVoucherInformationAfterAuthorizationInAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			 
			getWebDriverWait().until(ExpectedConditions.visibilityOf(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
			Thread.sleep(5000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actdocNumber,expdocNumber;
			
			actdocNumber=documentNumberTxt.getAttribute("value");
			expdocNumber=excelReader.getCellData("PurchaseVoucherN", 305, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 305, 8, actdocNumber);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.click();
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			System.out.println(df.format(date));
			
			String actVoucherDate,expVoucherDate;
			
			actVoucherDate=dateTxt.getAttribute("value");
			expVoucherDate=df.format(date);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			
			String actpurchaseAccountTxt=purchaseAccountTxt.getAttribute("value");
			String exppurchaseAccountTxt=excelReader.getCellData("PurchaseVoucherN", 306, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 306, 8, actpurchaseAccountTxt);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			
			String actvendorAccountTxt=vendorAccountTxt.getAttribute("value");
			String expvendorAccountTxt=excelReader.getCellData("PurchaseVoucherN", 307, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 307, 8, actvendorAccountTxt);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();
			
			String actvoucherHeaderCurrency=voucherHeaderCurrency.getAttribute("value");
			String expvoucherHeaderCurrency=excelReader.getCellData("PurchaseVoucherN", 308, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 308, 8, actvoucherHeaderCurrency);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			String actdepartmentTxt=departmentTxt.getAttribute("value");
			String expdepartmentTxt=excelReader.getCellData("PurchaseVoucherN", 309, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 309, 8, actdepartmentTxt);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			
			String actwareHouseTxt=wareHouseTxt.getAttribute("value");
			String expwareHouseTxt=excelReader.getCellData("PurchaseVoucherN", 310, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 310, 8, actwareHouseTxt);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
			new_footerExpandBtn.click();
			
			
			String actPvVoucherItemR1,actPvVoucherUnitsR1,actPvVoucherQtyR1,actPvVoucherRateR1,actPvVoucherGrossR1,actPvVoucherBatchR1;
			String actPvVoucherItemR2,actPvVoucherUnitsR2,actPvVoucherQtyR2,actPvVoucherRateR2,actPvVoucherGrossR2,actPvVoucherBinR2;
			String actPvVoucherItemR3,actPvVoucherUnitsR3,actPvVoucherQtyR3,actPvVoucherRateR3,actPvVoucherGrossR3,actPvVoucherRMAR3;
			String actPvVoucherItemR4,actPvVoucherUnitsR4,actPvVoucherQtyR4,actPvVoucherRateR4,actPvVoucherGrossR4,actPvVoucherBatchR4;
			
			String actPvVoucherFooterQty,actPvVoucherFooterGross,actPvVoucherFooterNet,actPvVoucherFooterAvgRateO;
			
			
			String actinfoPanelStatus,actinfoPanelCreatedBY,actinfoPanelEditedBy,actinfoPanelNextToAuth,actinfoPanelBillStatus;
			
			String expPvVoucherItemR1,expPvVoucherUnitsR1,expPvVoucherQtyR1,expPvVoucherRateR1,expPvVoucherGrossR1,expPvVoucherBatchR1;
			String expPvVoucherItemR2,expPvVoucherUnitsR2,expPvVoucherQtyR2,expPvVoucherRateR2,expPvVoucherGrossR2,expPvVoucherBinR2;
			String expPvVoucherItemR3,expPvVoucherUnitsR3,expPvVoucherQtyR3,expPvVoucherRateR3,expPvVoucherGrossR3,expPvVoucherRMAR3;
			String expPvVoucherItemR4,expPvVoucherUnitsR4,expPvVoucherQtyR4,expPvVoucherRateR4,expPvVoucherGrossR4,expPvVoucherBatchR4;
			
			String expPvVoucherFooterQty,expPvVoucherFooterGross,expPvVoucherFooterNet,expPvVoucherFooterAvgRateO;
			String expinfoPanelStatus,expinfoPanelCreatedBY,expinfoPanelEditedBy,expinfoPanelNextToAuth,expinfoPanelBillStatus;
			
			expPvVoucherItemR1=excelReader.getCellData("PurchaseVoucherN", 311, 7);
			expPvVoucherUnitsR1=excelReader.getCellData("PurchaseVoucherN", 312, 7);
			expPvVoucherQtyR1=excelReader.getCellData("PurchaseVoucherN", 313, 7);
			expPvVoucherRateR1=excelReader.getCellData("PurchaseVoucherN", 314, 7);
			expPvVoucherGrossR1=excelReader.getCellData("PurchaseVoucherN", 315, 7);
			expPvVoucherBatchR1=excelReader.getCellData("PurchaseVoucherN", 316, 7);
			
			/*expPvVoucherItemR2=excelReader.getCellData("PurchaseVoucherN", 317, 7);
			expPvVoucherUnitsR2=excelReader.getCellData("PurchaseVoucherN", 318, 7);
			expPvVoucherQtyR2=excelReader.getCellData("PurchaseVoucherN", 319, 7);
			expPvVoucherRateR2=excelReader.getCellData("PurchaseVoucherN", 320, 7);
			expPvVoucherGrossR2=excelReader.getCellData("PurchaseVoucherN", 321, 7);			
			expPvVoucherBinR2=excelReader.getCellData("PurchaseVoucherN", 322, 7);
			
			expPvVoucherItemR3=excelReader.getCellData("PurchaseVoucherN", 323, 7);
			expPvVoucherUnitsR3=excelReader.getCellData("PurchaseVoucherN", 324, 7);
			expPvVoucherQtyR3=excelReader.getCellData("PurchaseVoucherN", 325, 7);
			expPvVoucherRateR3=excelReader.getCellData("PurchaseVoucherN", 326, 7);
			expPvVoucherGrossR3=excelReader.getCellData("PurchaseVoucherN", 327, 7);
			expPvVoucherRMAR3=excelReader.getCellData("PurchaseVoucherN", 328, 7);
			
			expPvVoucherItemR4=excelReader.getCellData("PurchaseVoucherN", 329, 7);
			expPvVoucherUnitsR4=excelReader.getCellData("PurchaseVoucherN", 330, 7);
			expPvVoucherQtyR4=excelReader.getCellData("PurchaseVoucherN", 331, 7);
			expPvVoucherRateR4=excelReader.getCellData("PurchaseVoucherN", 332, 7);
			expPvVoucherGrossR4=excelReader.getCellData("PurchaseVoucherN", 333, 7);
			expPvVoucherBatchR4=excelReader.getCellData("PurchaseVoucherN", 334, 7);*/
		
			expPvVoucherFooterNet=excelReader.getCellData("PurchaseVoucherN", 335, 7);
			expPvVoucherFooterQty=excelReader.getCellData("PurchaseVoucherN", 336, 7);
			expPvVoucherFooterGross=excelReader.getCellData("PurchaseVoucherN", 337, 7);
			//expPvVoucherFooterAvgRateO=excelReader.getCellData("PurchaseVoucherN", 338, 7); //11.66
			
			expinfoPanelStatus=excelReader.getCellData("PurchaseVoucherN", 339, 7);
			expinfoPanelCreatedBY=excelReader.getCellData("PurchaseVoucherN", 340, 7);
			expinfoPanelEditedBy=excelReader.getCellData("PurchaseVoucherN", 341, 7);
			expinfoPanelNextToAuth=excelReader.getCellData("PurchaseVoucherN", 342, 7);
			expinfoPanelBillStatus=excelReader.getCellData("PurchaseVoucherN", 343, 7);
			
			System.out.println(netAmount.getText());
			System.out.println(QtyAmount.getText());
			System.out.println(GrossAmount.getText());
			System.out.println(PVNFooterAvgRateO.getText());
						
			actPvVoucherItemR1=select1stRow_1stColumn.getText();
			actPvVoucherUnitsR1=select1stRow_2ndColumn.getText();
			actPvVoucherQtyR1=select1stRow_5thColumn.getText();
			actPvVoucherRateR1=select1stRow_7thColumn.getText();
			actPvVoucherGrossR1=select1stRow_8thColumn.getText();
			//actPvVoucherBatchR1=select1stRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 311, 8, actPvVoucherItemR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 312, 8, actPvVoucherUnitsR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 313, 8, actPvVoucherQtyR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 314, 8, actPvVoucherRateR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 315, 8, actPvVoucherGrossR1);
			//excelReader.setCellData(xlfile, "PurchaseVoucherN", 316, 8, actPvVoucherBatchR1);
			/*
			actPvVoucherItemR2=select2ndRow_1stColumn.getText();
			actPvVoucherUnitsR2=select2ndRow_2ndColumn.getText();
			actPvVoucherQtyR2=select2ndRow_5thColumn.getText();
			actPvVoucherRateR2=select2ndRow_7thColumn.getText();
			actPvVoucherGrossR2=select2ndRow_8thColumn.getText();
			actPvVoucherBinR2=select2ndRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 317, 8, actPvVoucherItemR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 318, 8, actPvVoucherUnitsR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 319, 8, actPvVoucherQtyR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 320, 8, actPvVoucherRateR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 321, 8, actPvVoucherGrossR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 322, 8, actPvVoucherBinR2);
			
			actPvVoucherItemR3=select3rdRow_1stColumn.getText();
			actPvVoucherUnitsR3=select3rdRow_2ndColumn.getText();
			actPvVoucherQtyR3=select3rdRow_5thColumn.getText();
			actPvVoucherRateR3=select3rdRow_7thColumn.getText();
			actPvVoucherGrossR3=select3rdRow_8thColumn.getText();
			actPvVoucherRMAR3=select3rdRow_12thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 323, 8, actPvVoucherItemR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 324, 8, actPvVoucherUnitsR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 325, 8, actPvVoucherQtyR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 326, 8, actPvVoucherRateR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 327, 8, actPvVoucherGrossR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 328, 8, actPvVoucherRMAR3);
			
			actPvVoucherItemR4=select4thRow_1stColumn.getText();
			actPvVoucherUnitsR4=select4thRow_2ndColumn.getText();
			actPvVoucherQtyR4=select4thRow_5thColumn.getText();
			actPvVoucherRateR4=select4thRow_7thColumn.getText();
			actPvVoucherGrossR4=select4thRow_8thColumn.getText();
			actPvVoucherBatchR4=select4thRow_9thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 329, 8, actPvVoucherItemR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 330, 8, actPvVoucherUnitsR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 331, 8, actPvVoucherQtyR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 332, 8, actPvVoucherRateR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 333, 8, actPvVoucherGrossR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 334, 8, actPvVoucherBatchR4);*/
			
			
			actPvVoucherFooterNet=netAmount.getText();
			actPvVoucherFooterQty=QtyAmount.getText();
			actPvVoucherFooterGross=GrossAmount.getText();
			actPvVoucherFooterAvgRateO=PVNFooterAvgRateO.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 335, 8, actPvVoucherFooterNet);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 336, 8, actPvVoucherFooterQty);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 337, 8, actPvVoucherFooterGross);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 338, 8, actPvVoucherFooterAvgRateO);
			
			
			actinfoPanelStatus=infoPanelStatus.getText();
			actinfoPanelCreatedBY=infoPanelCreatedBY.getText();
			actinfoPanelEditedBy=infoPanelEditedBy.getText();
			actinfoPanelNextToAuth=infoPanelNextToAuth.getText();
			actinfoPanelBillStatus=infoPanelBillStatus.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 339, 8, actinfoPanelStatus);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 340, 8, actinfoPanelCreatedBY);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 341, 8, actinfoPanelEditedBy);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 342, 8, actinfoPanelNextToAuth);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 343, 8, actinfoPanelBillStatus);
			
		
			 
			System.out.println("************************************* checkVoucherInformationAfterAuthorizationInAuthorizeUser  *********************************");
			
			System.out.println("PvdocNumber                 :  " + actdocNumber 			 +" Value Expected : " + expdocNumber);
			System.out.println("PvVoucherDate               :  " + actVoucherDate 			 +" Value Expected : " + expVoucherDate);
			
			System.out.println("PvVoucherpurchaseAccountTxt :  " + actpurchaseAccountTxt 	 +" Value Expected : " + exppurchaseAccountTxt);
			System.out.println("PvVouchervendorAccountTxt   :  " + actvendorAccountTxt 		 +" Value Expected : " + expvendorAccountTxt);
			System.out.println("PvVoucherHeaderCurrency     :  " + actvoucherHeaderCurrency  +" Value Expected : " + expvoucherHeaderCurrency);
			System.out.println("PvVoucherdepartmentTxt      :  " + actdepartmentTxt 		 +" Value Expected : " + expdepartmentTxt);
			System.out.println("PvVoucherWarehouse          :  " + actwareHouseTxt 			 +" Value Expected : " + expwareHouseTxt);
			
			System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet 	 +" Value Expected : " + expPvVoucherFooterNet);
			System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty  	 +" Value Expected : " + expPvVoucherFooterQty);
			System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross	 +" Value Expected : " + expPvVoucherFooterGross);
			//System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO+" Value Expected : " + expPvVoucherFooterAvgRateO);
			
			System.out.println("First Row Item Name         :  " + actPvVoucherItemR1  		 +" Value Expected : " + expPvVoucherItemR1);
			System.out.println("First Row Units Name        :  " + actPvVoucherUnitsR1 		 +" Value Expected : " + expPvVoucherUnitsR1);
			System.out.println("First Row Qty Name          :  " + actPvVoucherQtyR1		 +" Value Expected : " + expPvVoucherQtyR1);
			System.out.println("First Row Rate Name         :  " + actPvVoucherRateR1 		 +" Value Expected : " + expPvVoucherRateR1);
			System.out.println("First Row Gross Name        :  " + actPvVoucherGrossR1 	     +" Value Expected : " + expPvVoucherGrossR1);
			//System.out.println("First Row Batch Name        :  " + actPvVoucherBatchR1 		 +" Value Expected : " + expPvVoucherBatchR1);
			
			/*System.out.println("Second Row Item Name        :  " + actPvVoucherItemR2  		 +" Value Expected : " + expPvVoucherItemR2);
			System.out.println("Second Row Units Name       :  " + actPvVoucherUnitsR2 		 +" Value Expected : " + expPvVoucherUnitsR2);
			System.out.println("Second Row Qty Name         :  " + actPvVoucherQtyR2 		 +" Value Expected : " + expPvVoucherQtyR2);
			System.out.println("Second Row Rate Name        :  " + actPvVoucherRateR2  		 +" Value Expected : " + expPvVoucherRateR2);
			System.out.println("Second Row Gross Name       :  " + actPvVoucherGrossR2 		 +" Value Expected : " + expPvVoucherGrossR2);
			System.out.println("Second Row Bin Name         :  " + actPvVoucherBinR2 		 +" Value Expected : " + expPvVoucherBinR2);
			
			System.out.println("Third Row Item Name         :  " + actPvVoucherItemR3  		 +" Value Expected : " + expPvVoucherItemR3);
			System.out.println("Third Row Units Name        :  " + actPvVoucherUnitsR3 		 +" Value Expected : " + expPvVoucherUnitsR3);
			System.out.println("Third Row Qty Name          :  " + actPvVoucherQtyR3 		 +" Value Expected : " + expPvVoucherQtyR3);
			System.out.println("Third Row Rate Name         :  " + actPvVoucherRateR3  		 +" Value Expected : " + expPvVoucherRateR3);
			System.out.println("Third Row Gross Name        :  " + actPvVoucherGrossR3 		 +" Value Expected : " + expPvVoucherGrossR3);
			System.out.println("Third Row RMA Name          :  " + actPvVoucherRMAR3		 +" Value Expected : " + expPvVoucherRMAR3);
			
			System.out.println("Fourth Row Item Name        :  " + actPvVoucherItemR4  		 +" Value Expected : " + expPvVoucherItemR4);
			System.out.println("Fourth Row Units Name       :  " + actPvVoucherUnitsR4 		 +" Value Expected : " + expPvVoucherUnitsR4);
			System.out.println("Fourth Row Qty Name         :  " + actPvVoucherQtyR4 		 +" Value Expected : " + expPvVoucherQtyR4);
			System.out.println("Fourth Row Rate Name        :  " + actPvVoucherRateR4  		 +" Value Expected : " + expPvVoucherRateR4);
			System.out.println("Fourth Row Gross Name       :  " + actPvVoucherGrossR4 		 +" Value Expected : " + expPvVoucherGrossR4);
			System.out.println("Fourth Row Batch Name       :  " + actPvVoucherBatchR4 		 +" Value Expected : " + expPvVoucherBatchR4);*/
			
			System.out.println("infoPanelStatus             :  " + actinfoPanelStatus 		 +" Value Expected : " + expinfoPanelStatus);
			System.out.println("infoPanelCreatedBY          :  " + actinfoPanelCreatedBY 	 +" Value Expected : " + expinfoPanelCreatedBY);
			System.out.println("infoPanelEditedBy           :  " + actinfoPanelEditedBy 	 +" Value Expected : " + expinfoPanelEditedBy);
			System.out.println("infoPanelNextToAuth         :  " + actinfoPanelNextToAuth 	 +" Value Expected : " + expinfoPanelNextToAuth);
			System.out.println("infoPanelBillStatus         :  " + actinfoPanelBillStatus	 +" Value Expected : " + expinfoPanelBillStatus);
			
			
			if(actdocNumber.equalsIgnoreCase(expdocNumber) && actVoucherDate.equalsIgnoreCase(expVoucherDate) 
					&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt) && actpurchaseAccountTxt.equalsIgnoreCase(exppurchaseAccountTxt)
					&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt) && actvoucherHeaderCurrency.equalsIgnoreCase(expvoucherHeaderCurrency)
					
					&& actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty) && actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross) 
					&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet) /*&& actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)*/
					
					&& actPvVoucherItemR1.equalsIgnoreCase(expPvVoucherItemR1) && actPvVoucherUnitsR1.equalsIgnoreCase(expPvVoucherUnitsR1)
					&& actPvVoucherQtyR1.equalsIgnoreCase(expPvVoucherQtyR1) && actPvVoucherRateR1.equalsIgnoreCase(expPvVoucherRateR1)
					&& actPvVoucherGrossR1.equalsIgnoreCase(expPvVoucherGrossR1)  /*&& actPvVoucherBatchR1.equalsIgnoreCase(expPvVoucherBatchR1)*/
					
					/*&& actPvVoucherItemR2.equalsIgnoreCase(expPvVoucherItemR2) && actPvVoucherUnitsR2.equalsIgnoreCase(expPvVoucherUnitsR2)
					&& actPvVoucherQtyR2.equalsIgnoreCase(expPvVoucherQtyR2) && actPvVoucherRateR2.equalsIgnoreCase(expPvVoucherRateR2)
					&& actPvVoucherGrossR2.equalsIgnoreCase(expPvVoucherGrossR2)  && actPvVoucherBinR2.equalsIgnoreCase(expPvVoucherBinR2)
					
					&& actPvVoucherItemR3.equalsIgnoreCase(expPvVoucherItemR3) && actPvVoucherUnitsR3.equalsIgnoreCase(expPvVoucherUnitsR3)
					&& actPvVoucherQtyR3.equalsIgnoreCase(expPvVoucherQtyR3) && actPvVoucherRateR3.equalsIgnoreCase(expPvVoucherRateR3)
					&& actPvVoucherGrossR3.equalsIgnoreCase(expPvVoucherGrossR3)  && actPvVoucherRMAR3.equalsIgnoreCase(expPvVoucherRMAR3)
					
					&& actPvVoucherItemR4.equalsIgnoreCase(expPvVoucherItemR4) && actPvVoucherUnitsR4.equalsIgnoreCase(expPvVoucherUnitsR4)
					&& actPvVoucherQtyR4.equalsIgnoreCase(expPvVoucherQtyR4) && actPvVoucherRateR4.equalsIgnoreCase(expPvVoucherRateR4)
					&& actPvVoucherGrossR4.equalsIgnoreCase(expPvVoucherGrossR4) */
					
					&& actinfoPanelStatus.equalsIgnoreCase(expinfoPanelStatus) && actinfoPanelCreatedBY.equalsIgnoreCase(expinfoPanelCreatedBY)
					&& actinfoPanelEditedBy.equalsIgnoreCase(expinfoPanelEditedBy) && actinfoPanelNextToAuth.equalsIgnoreCase(expinfoPanelNextToAuth)
					&& actinfoPanelBillStatus.equalsIgnoreCase(expinfoPanelBillStatus))
			{
					System.out.println("Test Pass : Saved Data is As Expected");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 304, 9, resPass);
					return true;
			}
			else
			{
					System.out.println("Test Fail : Saved Data is NOT As Expected");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 304, 9, resFail);
					return false;
			}  
		}
	     catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 304, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		


	//-------------------------------------------------------------------------------------------------




	     public boolean checkPendingAuthorizationsInAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
			new_CloseBtn.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingAuthorizationView));	
			homePagePendingAuthorizationView.click();
			
			Thread.sleep(3000);
			
			boolean voucherbodyGrid=voucherBodyGrid.getText().isEmpty();
			
			String actvoucherBodyGrid=Boolean.toString(voucherbodyGrid);
			String expvoucherBodyGrid=excelReader.getCellData("PurchaseVoucherN", 345, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 345, 8, actvoucherBodyGrid.toUpperCase());
			
			
			System.out.println("************************************* checkPendingAuthorizationsInAuthorizeUser  *********************************");
			
			System.out.println("Row Count in Voucher Body : "+actvoucherBodyGrid+" Value Expected : "+expvoucherBodyGrid);
			
			if(actvoucherBodyGrid.equalsIgnoreCase(expvoucherBodyGrid))
			{
				System.out.println("Test Pass : Error Message is Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 344, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Error Message is  not Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 344, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 344, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			
	   }





	//Click on Pending Purchase Orders link in the Purchase Voucher New 
	     public boolean checkPendingPurchaseOrdersInHomePageAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePagePendingOrdersLinks));	
			homePagePendingOrdersLinks.click();
			
			Thread.sleep(3000);
			
			boolean voucherbodyGrid=voucherBodyGrid.getText().isEmpty();
			
			String actvoucherBodyGrid=Boolean.toString(voucherbodyGrid);
			String expvoucherBodyGrid=excelReader.getCellData("PurchaseVoucherN", 347, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 347, 8, actvoucherBodyGrid);
			
			System.out.println("************************************* checkPendingPurchaseOrdersInHomePageAuthorizeUser  *********************************");
			
			System.out.println("Row Count in Voucher Body : "+actvoucherBodyGrid+" Value Expected : "+expvoucherBodyGrid);
			
			if(actvoucherBodyGrid.equalsIgnoreCase(expvoucherBodyGrid))
			{
				System.out.println("Test Pass : Vouchers EMPTY ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 344, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Vouchers are Displayed  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 344, 9, resFail);
				return false;
			}
			}
	     catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 344, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	 }



	     public boolean checkCloseOptionInPurchaseVoucherNewHomePageAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
				voucherhomeCloseBtn.click();
				
				Thread.sleep(1000);
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
				
				boolean LabelDashboard=labelDashboard.isDisplayed();
				
				String actlabelDashboard=Boolean.toString(LabelDashboard);
				String explabelDashboard=excelReader.getCellData("PurchaseVoucherN", 349, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 349, 8, actlabelDashboard);
				
				
				System.out.println("************************************* checkCloseOptionInPurchaseVoucherNewHomePageAuthorizeUser  *********************************");
				System.out.println("labelDashboard  : "+actlabelDashboard+" Value Expected : "+explabelDashboard);
				
				if(actlabelDashboard.equalsIgnoreCase(explabelDashboard))
				{
					System.out.println("Test Pass : Home Close Working");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 348, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Home Close NOT Working");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 348, 9, resPass);
					return false;
				}
				}
		      catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 348, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
	  }




	//Logout and Login as Su User
	     public boolean checkSignOutInAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplay.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
			boolean verifyFiledsStatus=true;
			
			getWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			boolean actusername             = username.isDisplayed();
			boolean actpassword             = password.isDisplayed();
			boolean actcompanyDropDownList  = companyDropDownList.isDisplayed();
			boolean actsignIn               = signIn.isDisplayed();
			
			// Expected
			boolean expusername             = true;
			boolean exppassword             = true;
			boolean expcompanyDropDownList  = true;
			boolean expsignIn               = true;
			
			System.out.println("************************************* checkSignOutInAuthorizeUser  *********************************");
			System.out.println("username  : "+actusername+" Value Expected : "+expusername);
			System.out.println("password  : "+actpassword+" Value Expected : "+exppassword);
			System.out.println("companyDropDownList  : "+actcompanyDropDownList+" Value Expected : "+expcompanyDropDownList);
			System.out.println("signIn  : "+actsignIn+" Value Expected : "+expsignIn);
			
			
			boolean actMethod=actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList
					&& actsignIn==expsignIn;
			
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherN", 351, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 351, 8, actResult);
			
			if(actMethod==true)
			{
			
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 350, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 350, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 350, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			} 
	      }


	        public boolean checkSignInForSU() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getWebDriverWait().until(ExpectedConditions.visibilityOf(username));
				username.click();
				 
				 username.sendKeys(excelReader.getCellData("PurchaseVoucherN", 353, 6));
				 getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
				 
				 getWebDriverWait().until(ExpectedConditions.visibilityOf(password));
				 password.sendKeys(excelReader.getCellData("PurchaseVoucherN", 354, 6));
				 
				 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
				  
				 getWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
				 signIn.click();
				 
				 
				 //checkRefreshPopOnlogin();
				 
				 Thread.sleep(5000);
					    
				//checkPopUpWindow();
				
				Thread.sleep(6000);
				 
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
				String actUserInfo=userNameDisplay.getText();
				
				System.out.println("User Info : "+actUserInfo);
				
				System.out.println("User Info Capture Text :"+userNameDisplay.getText());
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
				
				companyLogo.click();
				
				String actCompanyTxt=companyName.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 355, 8, actCompanyTxt);
				
				String actLoginCompanyName=actCompanyTxt.substring(0, 19);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 356, 8, actLoginCompanyName);
				
				System.out.println("company name :"+ actLoginCompanyName);
				companyLogo.click();
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
				
				String actDashboard=labelDashboard.getText();
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 357, 8, actDashboard);
				
				
				// Expected
				String expUserInfo=excelReader.getCellData("PurchaseVoucherN", 355, 7);
				String expLoginCompanyName=excelReader.getCellData("PurchaseVoucherN", 356, 7);
				String expDashboard=excelReader.getCellData("PurchaseVoucherN", 357, 7);
				
				System.out.println("************************************* checkSignInForSU  *********************************");
				
				System.out.println("userNameDisplay  : "+actUserInfo+          " Value Expected          : "+expUserInfo);
				System.out.println("LoginCompanyName : "+actLoginCompanyName+  " Value Expected          : "+expLoginCompanyName);
				System.out.println("labelDashboard   : "+actDashboard+         " Value Expected          : "+expDashboard);
				
				if(actUserInfo.equalsIgnoreCase(expUserInfo) && actLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)
						&& actDashboard.equalsIgnoreCase(expDashboard))
				{	
					
					System.out.println("Test Pass : Transaction Authorization is Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 352, 9, resPass);
					return true;
						
				}
				else
				{
					System.out.println("Test Fail : Transaction Authorization is Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 352, 9, resFail);
					return false;
						
				}
				}
	        catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 352, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	}




	//-----------------------------------------------------------------------------------------------------


	     public boolean checkAuthorizationStatusInPurchaseVoucherNewSULogin() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
			try
			{
				
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
			finacinalsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAuthStatusAuthorizeRowOne));
			String acthomePageAuthStatusAuthorizeRowOne=homePageAuthStatusAuthorizeRowOne.getText();
			String exphomePageAuthStatusAuthorizeRowOne=excelReader.getCellData("PurchaseVoucherN", 359, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 359, 8, acthomePageAuthStatusAuthorizeRowOne);
			
			System.out.println("************************************* checkAuthorizationStatusInPurchaseVoucherNewSULogin  *********************************");
			System.out.println("homePageAuthStatusAuthorizeRowOne  : "+acthomePageAuthStatusAuthorizeRowOne+" Value Expected : "+exphomePageAuthStatusAuthorizeRowOne);
			
			if (acthomePageAuthStatusAuthorizeRowOne.equalsIgnoreCase(exphomePageAuthStatusAuthorizeRowOne))
			{
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 358, 9, resPass);
				return true;
			}
			
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 358, 9, resFail);
				return false;
			}
			}
	     catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 358, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	   }

		
		@FindBy(xpath="//div[@id='id_transactionentry_summary']//div[2]//div[2]")
		private static WebElement PVNFooterAvgRateO;

	  public boolean checkAuthorizeVoucherInPurchaseVoucherNewEditOptionFromHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
			finacinalsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			boolean loading=checkLoadingMessage();
			
			System.out.println("VoucherLoadingMessage  : "+loading+" Value Expected : "+"TRUE");
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actdocNumber,expdocNumber;
			
			actdocNumber=documentNumberTxt.getAttribute("value");
			expdocNumber=excelReader.getCellData("PurchaseVoucherN", 361, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 361, 8, actdocNumber);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.click();
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			System.out.println(df.format(date));
			
			String actVoucherDate,expVoucherDate;
			
			actVoucherDate=dateTxt.getAttribute("value");
			expVoucherDate=df.format(date);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
			purchaseAccountTxt.click();
			
			String actpurchaseAccountTxt=purchaseAccountTxt.getAttribute("value");
			String exppurchaseAccountTxt=excelReader.getCellData("PurchaseVoucherN", 362, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 362, 8, actpurchaseAccountTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			
			String actvendorAccountTxt=vendorAccountTxt.getAttribute("value");
			String expvendorAccountTxt=excelReader.getCellData("PurchaseVoucherN", 363, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 363, 8, actvendorAccountTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();
			
			String actvoucherHeaderCurrency=voucherHeaderCurrency.getAttribute("value");
			String expvoucherHeaderCurrency=excelReader.getCellData("PurchaseVoucherN", 364, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 364, 8, actvoucherHeaderCurrency);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			String actdepartmentTxt=departmentTxt.getAttribute("value");
			String expdepartmentTxt=excelReader.getCellData("PurchaseVoucherN", 365, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 365, 8, actdepartmentTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wareHouseTxt));
			wareHouseTxt.click();
			
			String actwareHouseTxt=wareHouseTxt.getAttribute("value");
			String expwareHouseTxt=excelReader.getCellData("PurchaseVoucherN", 366, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 366, 8, actwareHouseTxt);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_footerExpandBtn));
			new_footerExpandBtn.click();
						
			String actPvVoucherItemR1,actPvVoucherUnitsR1,actPvVoucherQtyR1,actPvVoucherRateR1,actPvVoucherGrossR1,actPvVoucherBatchR1;
			String actPvVoucherItemR2,actPvVoucherUnitsR2,actPvVoucherQtyR2,actPvVoucherRateR2,actPvVoucherGrossR2,actPvVoucherBinR2;
			String actPvVoucherItemR3,actPvVoucherUnitsR3,actPvVoucherQtyR3,actPvVoucherRateR3,actPvVoucherGrossR3,actPvVoucherRMAR3;
			String actPvVoucherItemR4,actPvVoucherUnitsR4,actPvVoucherQtyR4,actPvVoucherRateR4,actPvVoucherGrossR4,actPvVoucherBatchR4;
			
			String actPvVoucherFooterQty,actPvVoucherFooterGross,actPvVoucherFooterNet,actPvVoucherFooterAvgRateO;
						
			String actinfoPanelStatus,actinfoPanelCreatedBY,actinfoPanelEditedBy,actinfoPanelNextToAuth,actinfoPanelBillStatus;
			
			String expPvVoucherItemR1,expPvVoucherUnitsR1,expPvVoucherQtyR1,expPvVoucherRateR1,expPvVoucherGrossR1,expPvVoucherBatchR1;
			String expPvVoucherItemR2,expPvVoucherUnitsR2,expPvVoucherQtyR2,expPvVoucherRateR2,expPvVoucherGrossR2,expPvVoucherBinR2;
			String expPvVoucherItemR3,expPvVoucherUnitsR3,expPvVoucherQtyR3,expPvVoucherRateR3,expPvVoucherGrossR3,expPvVoucherRMAR3;
			String expPvVoucherItemR4,expPvVoucherUnitsR4,expPvVoucherQtyR4,expPvVoucherRateR4,expPvVoucherGrossR4,expPvVoucherBatchR4;
			
			String expPvVoucherFooterQty,expPvVoucherFooterGross,expPvVoucherFooterNet,expPvVoucherFooterAvgRateO;
			
			String expinfoPanelStatus,expinfoPanelCreatedBY,expinfoPanelEditedBy,expinfoPanelNextToAuth,expinfoPanelBillStatus;

			expPvVoucherItemR1=excelReader.getCellData("PurchaseVoucherN", 367, 7);
			expPvVoucherUnitsR1=excelReader.getCellData("PurchaseVoucherN", 368, 7);
			expPvVoucherQtyR1=excelReader.getCellData("PurchaseVoucherN", 369, 7);
			expPvVoucherRateR1=excelReader.getCellData("PurchaseVoucherN", 370, 7);
			expPvVoucherGrossR1=excelReader.getCellData("PurchaseVoucherN", 371, 7);
			expPvVoucherBatchR1=excelReader.getCellData("PurchaseVoucherN", 372, 7);
			
			/*expPvVoucherItemR2=excelReader.getCellData("PurchaseVoucherN", 373, 7);
			expPvVoucherUnitsR2=excelReader.getCellData("PurchaseVoucherN", 374, 7);;
			expPvVoucherQtyR2=excelReader.getCellData("PurchaseVoucherN", 375, 7);
			expPvVoucherRateR2=excelReader.getCellData("PurchaseVoucherN", 376, 7);
			expPvVoucherGrossR2=excelReader.getCellData("PurchaseVoucherN", 377, 7);			
			expPvVoucherBinR2=excelReader.getCellData("PurchaseVoucherN", 378, 7);
			
			expPvVoucherItemR3=excelReader.getCellData("PurchaseVoucherN", 379, 7);
			expPvVoucherUnitsR3=excelReader.getCellData("PurchaseVoucherN", 380, 7);
			expPvVoucherQtyR3=excelReader.getCellData("PurchaseVoucherN", 381, 7);
			expPvVoucherRateR3=excelReader.getCellData("PurchaseVoucherN", 382, 7);
			expPvVoucherGrossR3=excelReader.getCellData("PurchaseVoucherN", 383, 7);
			expPvVoucherRMAR3=excelReader.getCellData("PurchaseVoucherN", 384, 7);
			
			expPvVoucherItemR4=excelReader.getCellData("PurchaseVoucherN", 385, 7);
			expPvVoucherUnitsR4=excelReader.getCellData("PurchaseVoucherN", 386, 7);
			expPvVoucherQtyR4=excelReader.getCellData("PurchaseVoucherN", 387, 7);
			expPvVoucherRateR4=excelReader.getCellData("PurchaseVoucherN", 388, 7);
			expPvVoucherGrossR4=excelReader.getCellData("PurchaseVoucherN", 389, 7);
			expPvVoucherBatchR4=excelReader.getCellData("PurchaseVoucherN", 390, 7);*/
		
			expPvVoucherFooterNet=excelReader.getCellData("PurchaseVoucherN", 391, 7);
			expPvVoucherFooterQty=excelReader.getCellData("PurchaseVoucherN", 392, 7);
			expPvVoucherFooterGross=excelReader.getCellData("PurchaseVoucherN", 393, 7);
			//expPvVoucherFooterAvgRateO=excelReader.getCellData("PurchaseVoucherN", 394, 7); //11.66
			
			expinfoPanelStatus=excelReader.getCellData("PurchaseVoucherN", 395, 7);
			expinfoPanelCreatedBY=excelReader.getCellData("PurchaseVoucherN", 396, 7);
			expinfoPanelEditedBy=excelReader.getCellData("PurchaseVoucherN", 397, 7);
			expinfoPanelNextToAuth=excelReader.getCellData("PurchaseVoucherN", 398, 7);
			expinfoPanelBillStatus=excelReader.getCellData("PurchaseVoucherN", 399, 7);
			
			System.out.println(netAmount.getText());
			System.out.println(QtyAmount.getText());
			System.out.println(GrossAmount.getText());
			System.out.println(PVNFooterAvgRateO.getText());
						
			actPvVoucherItemR1=select1stRow_1stColumn.getText();
			actPvVoucherUnitsR1=select1stRow_2ndColumn.getText();
			actPvVoucherQtyR1=select1stRow_5thColumn.getText();
			actPvVoucherRateR1=select1stRow_7thColumn.getText();
			actPvVoucherGrossR1=select1stRow_8thColumn.getText();
			//actPvVoucherBatchR1=select1stRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 367, 8, actPvVoucherItemR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 368, 8, actPvVoucherUnitsR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 369, 8, actPvVoucherQtyR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 370, 8, actPvVoucherRateR1);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 371, 8, actPvVoucherGrossR1);
			//excelReader.setCellData(xlfile, "PurchaseVoucherN", 372, 8, actPvVoucherBatchR1);
			
			/*actPvVoucherItemR2=select2ndRow_1stColumn.getText();
			actPvVoucherUnitsR2=select2ndRow_2ndColumn.getText();
			actPvVoucherQtyR2=select2ndRow_5thColumn.getText();
			actPvVoucherRateR2=select2ndRow_7thColumn.getText();
			actPvVoucherGrossR2=select2ndRow_8thColumn.getText();
			actPvVoucherBinR2=select2ndRow_10thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 373, 8, actPvVoucherItemR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 374, 8, actPvVoucherUnitsR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 375, 8, actPvVoucherQtyR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 376, 8, actPvVoucherRateR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 377, 8, actPvVoucherGrossR2);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 378, 8, actPvVoucherBinR2);
			
			actPvVoucherItemR3=select3rdRow_1stColumn.getText();
			actPvVoucherUnitsR3=select3rdRow_2ndColumn.getText();
			actPvVoucherQtyR3=select3rdRow_5thColumn.getText();
			actPvVoucherRateR3=select3rdRow_7thColumn.getText();
			actPvVoucherGrossR3=select3rdRow_8thColumn.getText();
			actPvVoucherRMAR3=select3rdRow_12thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 379, 8, actPvVoucherItemR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 380, 8, actPvVoucherUnitsR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 381, 8, actPvVoucherQtyR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 382, 8, actPvVoucherRateR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 383, 8, actPvVoucherGrossR3);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 384, 8, actPvVoucherRMAR3);
			
			actPvVoucherItemR4=select4thRow_1stColumn.getText();
			actPvVoucherUnitsR4=select4thRow_2ndColumn.getText();
			actPvVoucherQtyR4=select4thRow_5thColumn.getText();
			actPvVoucherRateR4=select4thRow_7thColumn.getText();
			actPvVoucherGrossR4=select4thRow_8thColumn.getText();
			actPvVoucherBatchR4=select4thRow_9thColumn.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 385, 8, actPvVoucherItemR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 386, 8, actPvVoucherUnitsR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 387, 8, actPvVoucherQtyR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 388, 8, actPvVoucherRateR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 389, 8, actPvVoucherGrossR4);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 390, 8, actPvVoucherBatchR4);*/
			
			
			actPvVoucherFooterNet=netAmount.getText();
			actPvVoucherFooterQty=QtyAmount.getText();
			actPvVoucherFooterGross=GrossAmount.getText();
			actPvVoucherFooterAvgRateO=PVNFooterAvgRateO.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 391, 8, actPvVoucherFooterNet);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 392, 8, actPvVoucherFooterQty);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 393, 8, actPvVoucherFooterGross);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 394, 8, actPvVoucherFooterAvgRateO);
			
			
			actinfoPanelStatus=infoPanelStatus.getText();
			actinfoPanelCreatedBY=infoPanelCreatedBY.getText();
			actinfoPanelEditedBy=infoPanelEditedBy.getText();
			actinfoPanelNextToAuth=infoPanelNextToAuth.getText();
			actinfoPanelBillStatus=infoPanelBillStatus.getText();
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 395, 8, actinfoPanelStatus);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 396, 8, actinfoPanelCreatedBY);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 397, 8, actinfoPanelEditedBy);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 398, 8, actinfoPanelNextToAuth);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 399, 8, actinfoPanelBillStatus);
			
		
			 
			System.out.println("************************************* checkClickOnDocumentNumberAlertsInAuthorizeUser  *********************************");
			
			System.out.println("PvdocNumber                 :  " + actdocNumber 			 +" Value Expected : " + expdocNumber);
			System.out.println("PvVoucherDate               :  " + actVoucherDate 			 +" Value Expected : " + expVoucherDate);
			
			System.out.println("PvVoucherpurchaseAccountTxt :  " + actpurchaseAccountTxt 	 +" Value Expected : " + exppurchaseAccountTxt);
			System.out.println("PvVouchervendorAccountTxt   :  " + actvendorAccountTxt 		 +" Value Expected : " + expvendorAccountTxt);
			System.out.println("PvVoucherHeaderCurrency     :  " + actvoucherHeaderCurrency  +" Value Expected : " + expvoucherHeaderCurrency);
			System.out.println("PvVoucherdepartmentTxt      :  " + actdepartmentTxt 		 +" Value Expected : " + expdepartmentTxt);
			System.out.println("PvVoucherWarehouse          :  " + actwareHouseTxt 			 +" Value Expected : " + expwareHouseTxt);
			
			System.out.println("PvVoucherFooterNet          :  " + actPvVoucherFooterNet 	 +" Value Expected : " + expPvVoucherFooterNet);
			System.out.println("PvVoucherFooterQty          :  " + actPvVoucherFooterQty  	 +" Value Expected : " + expPvVoucherFooterQty);
			System.out.println("PvVoucherFooterGross        :  " + actPvVoucherFooterGross	 +" Value Expected : " + expPvVoucherFooterGross);
			//System.out.println("PvVoucherFooterAvgRateO     :  " + actPvVoucherFooterAvgRateO+" Value Expected : " + expPvVoucherFooterAvgRateO);
			
			System.out.println("First Row Item Name         :  " + actPvVoucherItemR1  		 +" Value Expected : " + expPvVoucherItemR1);
			System.out.println("First Row Units Name        :  " + actPvVoucherUnitsR1 		 +" Value Expected : " + expPvVoucherUnitsR1);
			System.out.println("First Row Qty Name          :  " + actPvVoucherQtyR1		 +" Value Expected : " + expPvVoucherQtyR1);
			System.out.println("First Row Rate Name         :  " + actPvVoucherRateR1 		 +" Value Expected : " + expPvVoucherRateR1);
			System.out.println("First Row Gross Name        :  " + actPvVoucherGrossR1 	     +" Value Expected : " + expPvVoucherGrossR1);
			//stem.out.println("First Row Batch Name        :  " + actPvVoucherBatchR1 		 +" Value Expected : " + expPvVoucherBatchR1);
			
			/*System.out.println("Second Row Item Name        :  " + actPvVoucherItemR2  		 +" Value Expected : " + expPvVoucherItemR2);
			System.out.println("Second Row Units Name       :  " + actPvVoucherUnitsR2 		 +" Value Expected : " + expPvVoucherUnitsR2);
			System.out.println("Second Row Qty Name         :  " + actPvVoucherQtyR2 		 +" Value Expected : " + expPvVoucherQtyR2);
			System.out.println("Second Row Rate Name        :  " + actPvVoucherRateR2  		 +" Value Expected : " + expPvVoucherRateR2);
			System.out.println("Second Row Gross Name       :  " + actPvVoucherGrossR2 		 +" Value Expected : " + expPvVoucherGrossR2);
			System.out.println("Second Row Bin Name         :  " + actPvVoucherBinR2 		 +" Value Expected : " + expPvVoucherBinR2);*/
			
			System.out.println("infoPanelStatus             :  " + actinfoPanelStatus 		 +" Value Expected : " + expinfoPanelStatus);
			System.out.println("infoPanelCreatedBY          :  " + actinfoPanelCreatedBY 	 +" Value Expected : " + expinfoPanelCreatedBY);
			System.out.println("infoPanelEditedBy           :  " + actinfoPanelEditedBy 	 +" Value Expected : " + expinfoPanelEditedBy);
			System.out.println("infoPanelNextToAuth         :  " + actinfoPanelNextToAuth 	 +" Value Expected : " + expinfoPanelNextToAuth);
			System.out.println("infoPanelBillStatus         :  " + actinfoPanelBillStatus	 +" Value Expected : " + expinfoPanelBillStatus);
							
			
			if(actdocNumber.equalsIgnoreCase(expdocNumber) && actVoucherDate.equalsIgnoreCase(expVoucherDate) 
					&& actwareHouseTxt.equalsIgnoreCase(expwareHouseTxt) && actpurchaseAccountTxt.equalsIgnoreCase(exppurchaseAccountTxt)
					&& actvendorAccountTxt.equalsIgnoreCase(expvendorAccountTxt) && actvoucherHeaderCurrency.equalsIgnoreCase(expvoucherHeaderCurrency)
					
					&& actPvVoucherFooterQty.equalsIgnoreCase(expPvVoucherFooterQty) && actPvVoucherFooterGross.equalsIgnoreCase(expPvVoucherFooterGross) 
					&& actPvVoucherFooterNet.equalsIgnoreCase(expPvVoucherFooterNet) /*&& actPvVoucherFooterAvgRateO.equalsIgnoreCase(expPvVoucherFooterAvgRateO)*/
					
					&& actPvVoucherItemR1.equalsIgnoreCase(expPvVoucherItemR1) && actPvVoucherUnitsR1.equalsIgnoreCase(expPvVoucherUnitsR1)
					&& actPvVoucherQtyR1.equalsIgnoreCase(expPvVoucherQtyR1) && actPvVoucherRateR1.equalsIgnoreCase(expPvVoucherRateR1)
					&& actPvVoucherGrossR1.equalsIgnoreCase(expPvVoucherGrossR1)  /*&& actPvVoucherBatchR1.equalsIgnoreCase(expPvVoucherBatchR1)*/
					
					/*&& actPvVoucherItemR2.equalsIgnoreCase(expPvVoucherItemR2) && actPvVoucherUnitsR2.equalsIgnoreCase(expPvVoucherUnitsR2)
					&& actPvVoucherQtyR2.equalsIgnoreCase(expPvVoucherQtyR2) && actPvVoucherRateR2.equalsIgnoreCase(expPvVoucherRateR2)
					&& actPvVoucherGrossR2.equalsIgnoreCase(expPvVoucherGrossR2)  && actPvVoucherBinR2.equalsIgnoreCase(expPvVoucherBinR2)
					
					&& actPvVoucherItemR3.equalsIgnoreCase(expPvVoucherItemR3) && actPvVoucherUnitsR3.equalsIgnoreCase(expPvVoucherUnitsR3)
					&& actPvVoucherQtyR3.equalsIgnoreCase(expPvVoucherQtyR3) && actPvVoucherRateR3.equalsIgnoreCase(expPvVoucherRateR3)
					&& actPvVoucherGrossR3.equalsIgnoreCase(expPvVoucherGrossR3)  && actPvVoucherRMAR3.equalsIgnoreCase(expPvVoucherRMAR3)
					
					&& actPvVoucherItemR4.equalsIgnoreCase(expPvVoucherItemR4) && actPvVoucherUnitsR4.equalsIgnoreCase(expPvVoucherUnitsR4)
					&& actPvVoucherQtyR4.equalsIgnoreCase(expPvVoucherQtyR4) && actPvVoucherRateR4.equalsIgnoreCase(expPvVoucherRateR4)
					&& actPvVoucherGrossR4.equalsIgnoreCase(expPvVoucherGrossR4)  && actPvVoucherBatchR4.equalsIgnoreCase(expPvVoucherBatchR4)*/
					
					&& actinfoPanelStatus.equalsIgnoreCase(expinfoPanelStatus) && actinfoPanelCreatedBY.equalsIgnoreCase(expinfoPanelCreatedBY)
					&& actinfoPanelEditedBy.equalsIgnoreCase(expinfoPanelEditedBy) && actinfoPanelNextToAuth.equalsIgnoreCase(expinfoPanelNextToAuth)
					&& actinfoPanelBillStatus.equalsIgnoreCase(expinfoPanelBillStatus))
			{
				System.out.println("Test Pass : Saved Data is As Expected");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 360, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Saved Data is NOT As Expected");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 360, 9, resFail);
				return false;
			}
		}
	  
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 360, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	   }







		// Master Authorization Page 
		
		//Masters Menu	
		@FindBy (xpath="//*[@id='1000']/span")
		public static WebElement mastersMenu;
		
		//Accounts 
		@FindBy (xpath="//a[@id='1104']//span[contains(text(),'Account')]")
		public static WebElement accounts;

		//Accounts Title
		@FindBy (xpath="//span[@id='spnHeaderText']")
		public static WebElement accountsTitle;
		
		@FindBy(xpath = "//span[@class='icon-reject2 theme_color']")
		public static WebElement newErrorMessageCloseBtn;
		
		@FindBy(xpath = "//div[@id='idGlobalError']")
		public static WebElement validationConfirmationMessage;
		
		
		 public static boolean checkErrorMessageIsDisplayingOrNotDisplaying() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
		   {     
			   
			 System.out.println("************************   checkErrorMessageIsDisplayingOrNotDisplaying Method Executes.............    ******************************");
			   
			 try 
			 { 
				boolean actValidationMessageIsEmptyDisplay                  = validationConfirmationMessage.getText().isEmpty();
		        boolean expValidationMessageIsEmptyDisplay                  = true;   
				
		        System.out.println("Error Message Is Displaying Or Not Displaying Value Actual : " + actValidationMessageIsEmptyDisplay + " Value Expected : " + expValidationMessageIsEmptyDisplay);
		        
				if (actValidationMessageIsEmptyDisplay == expValidationMessageIsEmptyDisplay)
				{
					//System.out.println("No Error Message Is Displaying On Opening Page,Click On Add, Edit, Delete Etc...... In Method : " + validationConfirmationMessage.getText());
					return true;
				} 
				else 
				{
					//System.err.println("Error Message Is Displaying On Opening Page, Click, Add, Edit, Delete Etc..... In Method : " + validationConfirmationMessage.getText());
					newErrorMessageCloseBtn.click();
					return false;
				}
				
			 } 
			 catch (NoSuchElementException nse)
			 {
				System.err.println("CATCH BLOCK : NO SUCH ELEMENT MESSAGE IS DISPLAY  :   "+ nse.getMessage());
				return false;
			 }
		  }

	    public boolean checkAccountsMastersPageOnClickOnAccountsMenuFromMastersMenu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
	    	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  	     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			 System.out.println("********************* checkAccountsMastersPageOnClickOnAccountsMenuFromMastersMenu Method Executes.............   *****************************");
			
			 try
			 {
			   
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
				homeMenu.click();
			
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu)); 
				mastersMenu.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
				accounts.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));
			
				boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
				boolean expSummaryErrorMessage  = true;
				String actAccountsTitle         = accountsTitle.getText();
				String expAccountsTitle         = excelReader.getCellData("PurchaseVoucherN", 401, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 401, 8, actAccountsTitle);
				
				System.out.println("Opening Accounts Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
			  	System.out.println("Accounts Masters Title Display Value Actual        : " + actAccountsTitle       + " Value Expected : " + expAccountsTitle);
			
				if (actAccountsTitle.equalsIgnoreCase(expAccountsTitle) && actSummaryErrorMessage==expSummaryErrorMessage) 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 400, 9, resPass);
					return true;
				} 
			    else 
			    {
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 400, 9, resFail);
					return false;
				}
			}
			 catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 400 , 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
	   }


		@FindBy(xpath = "//label[@class='msgInfo']")
		public static WebElement clickOnEmptyGroup;

		@FindBy(xpath = "//span[@class='icon-font6 icon-missmatched-entries theme_icon-color']")
		public static WebElement masterShowAllUnauthorisedRecords;

	    public static boolean checkShowAllUnAuthorizeOptionInAccountsMasterPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{
			excelReader = new ExcelReader(POJOUtility.getExcelPath());
			
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			System.out.println("************************************************** checkBlankOnDoubleClickTheCreateAccountGroup ************************************************");
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterShowAllUnauthorisedRecords)); 
				masterShowAllUnauthorisedRecords.click();	
			
				Thread.sleep(1000);
				
				String actAccountGroupEmptyRecords = clickOnEmptyGroup.getText();
				
			    String expAccountGroupEmptyRecords = excelReader.getCellData("PurchaseVoucherN", 403, 7);
			    
			    excelReader.setCellData(xlfile, "PurchaseVoucherN", 403, 8, actAccountGroupEmptyRecords);
			
				System.out.println("Empty Records Display Value Actual                 : " + actAccountGroupEmptyRecords + "  Value Expected : " + expAccountGroupEmptyRecords);
			
				if (actAccountGroupEmptyRecords.equalsIgnoreCase(expAccountGroupEmptyRecords)) 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 402, 9, resPass);
					return true;
				} 
				else 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 402, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 402 , 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	   }


		@FindBy(xpath = "//i[@class='icon-font6 icon-close']")
		public static WebElement masterCloseBtn;

	   public boolean checkClickOnCloseButtonInAccountMasterInSuLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
			{
		   
		      excelReader=new ExcelReader(POJOUtility.getExcelPath());
		      xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		   
			System.out.println("************************************************** checkClickOnCloseButtonInAccountMaster  ********************************************");
			
			
			try
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
				masterCloseBtn.click();
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			
				String actDashboardLabel = labelDashboard.getText();
				String expDashboardLabel = excelReader.getCellData("PurchaseVoucherN", 405, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 405, 8, actDashboardLabel);
			
				System.out.println("Click Close button In Accounts Master Value Actual  : " + actDashboardLabel+ "      Value Expected : " + expDashboardLabel);
			
				if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 404, 9, resPass);
					System.out.println(" Test Pass: Close Button is working");
					return true;
				} 
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 404, 9, resFail);
					System.out.println(" Test Fail: Close Button is not working");
					return false;
				}	
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 404 , 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	    }




	//Logout and Login as Authorize Master To Login Authorize User
		public boolean checkSignOutBeforeMasterAuthorization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		   excelReader=new ExcelReader(POJOUtility.getExcelPath());
		   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
		  getWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		  userNameDisplay.click();

		  getWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		  logoutOption.click();
		 
			boolean verifyFiledsStatus=true;
			
			getWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			
			
			boolean actusername               = username.isDisplayed();
			boolean actpassword               = password.isDisplayed();
			boolean actcompanyDropDownList    = companyDropDownList.isDisplayed();
			boolean actsignIn                 = signIn.isDisplayed();
			
			// Expected
			boolean expusername              = true;
			boolean exppassword              = true;
			boolean expcompanyDropDownList   = true;
			boolean expsignIn                = true;
			
			System.out.println("************************************* checkSignOut  *********************************");
			System.out.println("username              : "+actusername+" Value Expected : "+expusername);
			System.out.println("password              : "+actpassword+" Value Expected : "+exppassword);
			System.out.println("companyDropDownList   : "+actcompanyDropDownList+" Value Expected : "+expcompanyDropDownList);
			System.out.println("signIn                : "+actsignIn+" Value Expected : "+expsignIn);
			
			boolean actMethod=actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList
					&& actsignIn==expsignIn;
			
			String actResult=Boolean.toString(actMethod);
			String expResult= excelReader.getCellData("PurchaseVoucherN", 407, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 407, 8, actResult);
			
			
			if(actMethod==true)
			{
	           System.out.println(" Test Pass: Login Screen Display");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 406, 9, resPass);
				return true;
			}
			else
			{
				System.out.println(" Test Fail: Not Diplay Login Screen ");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 406, 9, resFail);
				return false;
			}
		    }
		
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 406, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
	  }


		public boolean checkMasterAuthoizationToLoginAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
				try
				{
			    getWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			    username.click();
			     
			     username.sendKeys(excelReader.getCellData("PurchaseVoucherN", 409, 6));
			     getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
				 
			     getWebDriverWait().until(ExpectedConditions.visibilityOf(password));
				 password.sendKeys(excelReader.getCellData("PurchaseVoucherN", 410, 6));
				 
				 getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
				  
				 getWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
				 signIn.click();
				 
				 //checkRefreshPopOnlogin();
				 
				//checkPopUpWindow();
			
				Thread.sleep(5000);
				 
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
				String actUserInfo=userNameDisplay.getText();
				
				System.out.println("User Info : "+actUserInfo);
				
				System.out.println("User Info Capture Text :"+userNameDisplay.getText());
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
				
				companyLogo.click();
				
	            String actCompanyTxt=companyName.getText();
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 411, 8, actCompanyTxt);
				
				String actLoginCompanyName=actCompanyTxt.substring(0, 19);
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 412, 8, actLoginCompanyName);
				
				System.out.println("company name :"+ actLoginCompanyName);
				companyLogo.click();
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
				
				String actDashboard=labelDashboard.getText();
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 413, 8, actDashboard);
				
				
				// Expected
				String expUserInfo=excelReader.getCellData("PurchaseVoucherN", 411, 7);
				String expLoginCompanyName=excelReader.getCellData("PurchaseVoucherN", 412, 7);
				String expDashboard=excelReader.getCellData("PurchaseVoucherN", 413, 7);
				
				System.out.println("************************************* checkSignInForSU  *********************************");
				
				System.out.println("userNameDisplay  : "+actUserInfo+          " Value Expected          : "+expUserInfo);
				System.out.println("LoginCompanyName : "+actLoginCompanyName+  " Value Expected          : "+expLoginCompanyName);
				System.out.println("labelDashboard   : "+actDashboard+         " Value Expected          : "+expDashboard);
				
				if(actUserInfo.equalsIgnoreCase(expUserInfo) && actLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)
						&& actDashboard.equalsIgnoreCase(expDashboard))
				{	
					
					System.out.println("Test Pass : Transaction Authorization is Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 408, 9, resPass);
					return true;
						
				}
				else
				{
					System.out.println("Test Fail : Transaction Authorization is Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 408, 9, resFail);
					return false;
						
				}
				}
	        catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 408, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	   }


	   public boolean checkOpenAccountsMastersPageFromAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		   excelReader = new ExcelReader(POJOUtility.getExcelPath());
		   xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		   System.out.println("********************* checkAccountsMastersPageOnClickOnAccountsMenuFromMastersMenu Method Executes.............   *****************************");
		
		   try
		   {
			   
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		    	homeMenu.click();
		
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu)); 
		    	mastersMenu.click();
		    	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
				accounts.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));
		
				boolean actSummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
				boolean expSummaryErrorMessage  = true;
				String actAccountsTitle         = accountsTitle.getText();
				String expAccountsTitle         = excelReader.getCellData("PurchaseVoucherN", 415, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 415, 8, actAccountsTitle);
				
				System.out.println("Opening Accounts Is Any Error Message Value Actual : " + actSummaryErrorMessage + " Value Expected : " + expSummaryErrorMessage);
			  	System.out.println("Accounts Masters Title Display Value Actual        : " + actAccountsTitle       + " Value Expected : " + expAccountsTitle);
		
				if (actAccountsTitle.equalsIgnoreCase(expAccountsTitle) && actSummaryErrorMessage==expSummaryErrorMessage) 
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 414, 9, resPass);
					return true;
				} 
			    else 
			    {
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 414, 9, resFail);
					return false;
				}
		    }
		   catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 414, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	   }
		
		@FindBy(xpath = "//*[@id='LandingGridBody']/tr[1]/td[11]")
		public static WebElement masterCreationNameOfLane1;

		
		
		//Check ONce Flow And Conform And Here The Purchase Voucher Ending Take Place 
	  public static boolean checkShowAllUnAuthorizeOptionInAccountsMasterPageFromAuthorizeUser() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	  {
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("************************************************** checkBlankOnDoubleClickTheCreateAccountGroup ************************************************");

		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterShowAllUnauthorisedRecords)); 
			masterShowAllUnauthorisedRecords.click();	
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCreationNameOfLane1)); 			
			 
			String actFirstRowName  = masterCreationNameOfLane1.getText();
			
		    String expFirstRowName = excelReader.getCellData("PurchaseVoucherN", 417, 7);
		    
		    excelReader.setCellData(xlfile, "PurchaseVoucherN", 417, 8, actFirstRowName);
		
			System.out.println("Empty Records Display Value Actual                 : " + actFirstRowName + "  Value Expected : " + expFirstRowName);

			if (actFirstRowName.equalsIgnoreCase(expFirstRowName)) 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 416, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 416, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 416, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
	   }

	  
	 
	  
	@FindBy(xpath = "//input[@id='liSelectAllMasters']")
	public static WebElement masterGridHeader_SelectAllRowsCheckBox;

	@FindBy(xpath = "//*[@id='btnAuthorize']")
	public static WebElement masterAccountAuthorizeButton;



	public static boolean checkSelectNonAuthorizeAndClickOnAuthorizeButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("************************************************** checkBlankOnDoubleClickTheCreateAccountGroup ************************************************");

		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGridHeader_SelectAllRowsCheckBox));
			boolean actAccountMasterGridSelectTxt = masterGridHeader_SelectAllRowsCheckBox.isDisplayed();
			masterGridHeader_SelectAllRowsCheckBox.click();

			boolean SummaryErrorMessage  = checkErrorMessageIsDisplayingOrNotDisplaying();
			
			String actSummaryErrorMessage =Boolean.toString(SummaryErrorMessage);
			
			String expSummaryErrorMessage=excelReader.getCellData("PurchaseVoucherN", 419, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 419, 8, actSummaryErrorMessage.toUpperCase());
			
			
			System.out.println("Empty Records Display Value Actual                 : " + actSummaryErrorMessage + "  Value Expected : " + expSummaryErrorMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAccountAuthorizeButton));
			masterAccountAuthorizeButton.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAuthName));
			
			boolean actAuthName=masterAuthName.isDisplayed();
			boolean actAuthSaveBtn=masterAuthSaveBtn.isDisplayed();
			boolean actAuthCancelBtn=masterAuthCancelBtn.isDisplayed();
		
			
			boolean expAuthName=true;
			boolean expAuthSaveBtn=true;
			boolean expAuthCancelBtn=true;
			
			System.out.println("***********************checkSelectNonAuthorizeAndClickOnAuthorizeButton*********************************************");
			
			System.out.println("Empty Records Display Value Actual                 : " + actAuthName + "  Value Expected : " + expAuthName);
			System.out.println("Empty Records Display Value Actual                 : " + actAuthSaveBtn + "  Value Expected : " + expAuthSaveBtn);
			System.out.println("Empty Records Display Value Actual                 : " + actAuthCancelBtn + "  Value Expected : " + expAuthCancelBtn);
			
			if (actSummaryErrorMessage.equalsIgnoreCase(expSummaryErrorMessage) && actAuthName==expAuthName && actAuthSaveBtn==expAuthSaveBtn 
					&& actAuthCancelBtn==expAuthCancelBtn) 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 418, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 418, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 418, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
	 }



	@FindBy(xpath = "//*[@id='txt_authMessage']")
	public static WebElement masterAuthName;

	@FindBy(xpath = "//*[@id='btnAuthorizationSave']")
	public static WebElement masterAuthSaveBtn;

	@FindBy(xpath = "//*[@id='authorizationModal']/div/div/div[3]/button[2]")
	public static WebElement masterAuthCancelBtn;	

	public static boolean checkAUthorizePageWithRemarksClickOnSaveBtn() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("************************************************** checkAUthorizePageWithRemarksClickOnSaveBtn ************************************************");
		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAuthName));
			masterAuthName.click();
			masterAuthName.sendKeys(excelReader.getCellData("PurchaseVoucherN", 421, 6));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAuthSaveBtn));
			masterAuthSaveBtn.click();
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));
		
			boolean actValidationMessageIsEmptyDisplay                  = validationConfirmationMessage.getText().isEmpty();
	        boolean expValidationMessageIsEmptyDisplay                  = true;   
			
	        System.out.println("Error Message Is Displaying Or Not Displaying Value Actual : " + actValidationMessageIsEmptyDisplay + " Value Expected : " + expValidationMessageIsEmptyDisplay);*/
	        
	        String actAccountGroupEmptyRecords = clickOnEmptyGroup.getText();
			String expAccountGroupEmptyRecords = excelReader.getCellData("PurchaseVoucherN", 422, 7);
	        
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 422, 8, actAccountGroupEmptyRecords);
			
			System.out.println("Error Message Is Displaying Or Not Displaying Value Actual : " + actAccountGroupEmptyRecords + " Value Expected : " + expAccountGroupEmptyRecords);
	        
			if (actAccountGroupEmptyRecords.equalsIgnoreCase(expAccountGroupEmptyRecords)) 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 420, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 420, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 420, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
	 }


	 public boolean checkClickOnCloseButtonInAccountMasterInAuthorizeLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	 {
		System.out.println("************************************************** checkClickOnCloseButtonInAccountMaster  ********************************************");
		

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
			masterCloseBtn.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

			String actDashboardLabel = labelDashboard.getText();
			String expDashboardLabel = excelReader.getCellData("PurchaseVoucherN", 423, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 423, 8, actDashboardLabel);

			System.out.println("Click Close button In Accounts Master Value Actual  : " + actDashboardLabel+ "      Value Expected : " + expDashboardLabel);

			if (actDashboardLabel.equalsIgnoreCase(expDashboardLabel)) 
			{
				System.out.println(" Test Pass: Close Button is working");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 423, 9, resPass);
				return true;
			} 
			else
			{
				System.out.println(" Test Fail: Close Button is not working");
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 423, 9, resFail);
				return false;
			}	
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 423, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
	}



	//Login as Su 

	public boolean checkSignOutAuthorizationOfMasterByAuthorizeUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			
			{
				getWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
				userNameDisplay.click();
			
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
				logoutOption.click();
			 
				boolean verifyFiledsStatus=true;
				
				getWebDriverWait().until(ExpectedConditions.visibilityOf(username));
				
				
				boolean actusername=username.isDisplayed();
				boolean actpassword=password.isDisplayed();
				boolean actcompanyDropDownList=companyDropDownList.isDisplayed();
				boolean actsignIn=signIn.isDisplayed();
				
				// Expected
				boolean expusername=true;
				boolean exppassword=true;
				boolean expcompanyDropDownList=true;
				boolean expsignIn=true;
				
				System.out.println("************************************* checkSignOutInAuthorizeUser  *********************************");
				System.out.println("username              : "+actusername+" Value Expected : "+expusername);
				System.out.println("password              : "+actpassword+" Value Expected : "+exppassword);
				System.out.println("companyDropDownList   : "+actcompanyDropDownList+" Value Expected : "+expcompanyDropDownList);
				System.out.println("signIn                : "+actsignIn+" Value Expected : "+expsignIn);
				
				
				boolean actMethod=actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList
						&& actsignIn==expsignIn;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData("PurchaseVoucherN", 424, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherN", 424, 8, actResult.toUpperCase());
				
				if(actMethod==true)
				{
			
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 424, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherN", 424, 9, resFail);
					return false;
			    }
				
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 424, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					return false;
				}
	     }



		public boolean checkSignInWithUserNameAsSu() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		
		try
		{
			getWebDriverWait().until(ExpectedConditions.visibilityOf(username));
			username.click();
			
			username.sendKeys(excelReader.getCellData("PurchaseVoucherN", 426, 6));
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
			
			getWebDriverWait().until(ExpectedConditions.visibilityOf(password));
			password.sendKeys(excelReader.getCellData("PurchaseVoucherN", 427, 6));
			
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
			
			getWebDriverWait().until(ExpectedConditions.visibilityOf(signIn));
			signIn.click();
			
			//checkRefreshPopOnlogin();
			
			//checkPopUpWindow();
				
			Thread.sleep(5000);
					
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			String actUserInfo=userNameDisplay.getText();
		
		System.out.println("User Info : "+actUserInfo);
		
		System.out.println("User Info Capture Text :"+userNameDisplay.getText());
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		
		companyLogo.click();
		
		String actCompanyTxt=companyName.getText();
		String actLoginCompanyName=actCompanyTxt.substring(0, 19);
		System.out.println("company name :"+ actLoginCompanyName);
		companyLogo.click();
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		
		String actDashboard=labelDashboard.getText();

		// Expected
		String expUserInfo="SU";
		String expLoginCompanyName="Automation Company ";
		String expDashboard="Dashboard";
		
		System.out.println("************************************* checkSignInForSU  *********************************");
		System.out.println("userNameDisplay  : "+actUserInfo+          " Value Expected          : "+expUserInfo);
		System.out.println("LoginCompanyName : "+actLoginCompanyName+  " Value Expected          : "+expLoginCompanyName);
		System.out.println("labelDashboard   : "+actDashboard+         " Value Expected          : "+expDashboard);
		
		
		boolean actMethod=actUserInfo.equalsIgnoreCase(expUserInfo) && actLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)
				&& actDashboard.equalsIgnoreCase(expDashboard);
		
		String actResult=Boolean.toString(actMethod);
		String expResult=excelReader.getCellData("PurchaseVoucherN", 428, 7);
		
		excelReader.setCellData(xlfile, "PurchaseVoucherN", 428, 8, actResult.toUpperCase());
		
		if(actMethod==true)	
		{	
			
			System.out.println("Test Pass : Transaction Authorization is Displayed");
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 425, 9, resPass);
			return true;
				
		}
		else
		{
			System.out.println("Test Fail : Transaction Authorization is Displayed");
			excelReader.setCellData(xlfile, "PurchaseVoucherN", 425, 9, resFail);
			return false;
		}
	  }
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 426, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			 	return false;
		}
		}
		
		public boolean checkCopyandPasteFromClipBoardinPurchaseVoucherNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
			finacinalsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherNew));
			purchaseVoucherNew.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
					
			checkUserFriendlyMessage();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copytoClipboardBtn));
			copytoClipboardBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pastefromClipboardBtn));
			pastefromClipboardBtn.click();
			
			checkUserFriendlyMessage();
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			select1stRow_10thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherN", 429, 6));
			enter_Batch.sendKeys(Keys.TAB);*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno = documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			boolean savingMessage=checkVoucherSavingMessage(docno);
			   
			   
			   String actSavingMessage=Boolean.toString(savingMessage);
			   String expSavingMessage=excelReader.getCellData("PurchaseVoucherN", 429, 7);
			   
			   excelReader.setCellData(xlfile, "PurchaseVoucherN", 429, 8, actSavingMessage.toUpperCase());
			   
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			   new_CloseBtn.click();
			   
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeCloseBtn));
				homeCloseBtn.click();
			   
			   System.out.println("************************************* checkSavingOfPurchaseVoucherNew  *********************************");
			   
			   System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
			   System.out.println(" Saving Message Status: "+actSavingMessage+ " Value Expected : "+expSavingMessage);
			   
			   if (savingMessage==true)
			   {
				   System.out.println("Test Pass : Error Message is Displayed ");
				   excelReader.setCellData(xlfile, "PurchaseVoucherN", 429, 9, resPass);
				   
				   return true;
			   }
			   else
			   {
				   System.out.println("Test Fail :  Error Message is  not Displayed ");
				   excelReader.setCellData(xlfile, "PurchaseVoucherN", 429, 9, resFail);
				   return false;
			   }
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherN", 429, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}


	

    @FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_26']")
	private static WebElement  QtyAmount;
	
	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_28']")
	private static WebElement  GrossAmount;
	
	@FindBy(xpath="//span[@class='col-xs-6 icon-expand icon-font6 no_padding_left_right theme_color-inverse']")
	private static WebElement  new_footerExpandBtn;

  
    // VAT REPORTS ELEMENTS
	
	@FindBy(xpath="//a[@id='207']//span[contains(text(),'VAT')]")
	private static WebElement  vatMenu;
	
	@FindBy(xpath="//span[contains(text(),'Purchase Account Report')]")
	private static WebElement  purchaseAccountReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'VAT detailed report')]")
	private static WebElement  vatDetailedReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'Sales Account Report')]")
	private static WebElement  salesAccountReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'Sales by Customer Report')]")
	private static WebElement  salesByCustomeReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'VAT summary report')]")
	private static WebElement  vatSummaryReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'VAT audit file')]")
	private static WebElement  vatAuditFileMenu;
	
	@FindBy(xpath="//span[contains(text(),'VAT return report')]")
	private static WebElement  vatReturnReportMenu;
	
	@FindBy(xpath="//span[contains(text(),'Sales advance VAT report')]")
	private static WebElement  salesAdvanceVatReportMenu;
	
	//
	
	@FindBy(xpath="//i[@class='icon-font6 icon-schedule']")
	private static WebElement  scheduleBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-custamize']")
	private static WebElement  vatReportCustomizeBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-filter']")
	private static WebElement  vatReportFilterBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-ok']")
	private static WebElement  vatReportOkBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-close']")
	private static WebElement  vatReportCloseBtn;
	
	@FindBy(xpath="//select[@id='DateOptions_']")
	private static WebElement  dateOptionDropdown;
	
	@FindBy(xpath="//input[@id='id_starting_date_']")
	private static WebElement  startDateTxt;
	
	@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement  startDateDatePicker;
	
	@FindBy(xpath="//input[@id='id_ending_date_']")
	private static WebElement  endDateTxt;
	
	@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement  endDateDatePicker;
	
	@FindBy(xpath="//select[@id='RITCombobox__1']")
	private static WebElement  transactionTypeDropdown;
	
	@FindBy(xpath="//input[@id='RITCheckbox__2']")
	private static WebElement  includePurchaseReturnsVoucher;
	
	@FindBy(xpath="//select[@id='RITLayout_']")
	private static WebElement  layoutDropdown;
	
	@FindBy(xpath="//select[@id='RITOutput_']")
	private static WebElement  outputDropdown;
	
	@FindBy(xpath="//select[@id='RITCombobox__2']")
	private static WebElement  voucherTypeDropdown;
	
	@FindBy(xpath="//select[@id='RITCombobox__3']")
	private static WebElement  selectDealersDropdown;
	
	
	//
	
	@FindBy(xpath="//span[@id='reportSort']")
	private static WebElement report_sortingBtn;
			
	@FindBy(xpath="//span[@id='reportRefresh']")
	private static WebElement report_RefreshBtn;
			
	@FindBy(xpath="//span[@id='print_report_']")
	private static WebElement report_PrintBtn;
			
	@FindBy(xpath="//div[contains(text(),'Export')]")
	private static WebElement report_ExportBtn;
			
	@FindBy(xpath="//span[@id='GraphIcon']")
	private static WebElement report_GraphBtn;
			
	@FindBy(xpath="//span[@id='BackTrackIcon']")
	private static WebElement report_BackTrackBtn;
			
	@FindBy(xpath="//span[@id='reportCustomize']")
	private static WebElement report_ReportCustomizeBtn;
			
	@FindBy(xpath="//span[@id='filterIcon']")
	private static WebElement report_FilterBtn;
	
	@FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
	private static WebElement  report_FilterCustomizeBtn;
	
	@FindBy(xpath="//span[@id='a']")
	private static WebElement  report_Filter_FilterBtn;
	
	@FindBy(xpath="//*[@id='551_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
	private static WebElement  reportsAdvanced_WhereDropDown;
	
	@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
	private static WebElement  reportsAdvanced_SelectFielddropdown;
	
	@FindBy(xpath="//table/tbody/tr/td[3]/select")
	private static WebElement  reportsAdvanced_SelectOperatorDropDown;
	
	@FindBy(xpath="//table/tbody/tr/td[4]/select")
	private static WebElement  reportsAdvanced_ComparewithDropDown;
	
	@FindBy(xpath="//table/tbody/tr/td[5]/input")
	private static WebElement  reportsAdvanced_ValueTxt;
	
	@FindBy(xpath="//input[@id='advancefilter_master_551_0']")
	private static WebElement  reportsAdvanced_EnterValue;
	
	@FindBy(xpath="//table/tbody/tr/td[7]/span")
	private static WebElement  reportsAdvanced_AddIconBtn;
	
	@FindBy(xpath="//table/tbody/tr/td[6]/span")
	private static WebElement  reportsAdvanced_DeleteIcon1Btn;
	
	@FindBy(xpath="//table/tbody/tr[2]/td[6]/span")
	private static WebElement  reportsAdvanced__DeleteIcon2Btn;
	
	@FindBy(xpath="//div[@id='filterTree_551_0_AdvanceFilter']//a[@id='536870916']")
	private static WebElement  reports_AdvancedFilter_SelectField_WH_ExpandBtn;
	
	@FindBy(xpath="//div[@id='filterTree_551_0_AdvanceFilter']//a[@id='5058']")
	private static WebElement  reports_AdvancedFilter_SelectField_WH_NameBtn;
	
	@FindBy(xpath="//input[@id='chkSaveFilter']")
	private static WebElement  report_FilterSaveFilterPermanentlyChkBox;
	
	@FindBy(xpath="//span[@id='filterRefresh']")
	private static WebElement  report_Filter_RefreshBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon icon-ok')]")
	private static WebElement  report_FilterOkBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
	private static WebElement  report_FilterCancelBtn;
			
	@FindBy(xpath="//div[@id='dvfilter']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
	private static WebElement report_FilterDownBtn;
			
	@FindBy(xpath="//span[@id='analyzeIcon']")
	private static WebElement report_AnalyzeBtn;
			
	@FindBy(xpath="//span[@id='CrossrefrenceIcon']")
	private static WebElement report_CrossReferenceBtn;
			
	@FindBy(xpath="//span[contains(text(),'Options')]")
	private static WebElement report_OptionsBtn;
			
	@FindBy(xpath="//div[@id='dvoptions']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
	private static WebElement report_OptionsDownBtn;
			
	@FindBy(xpath="//span[@id='reportClose']")
	private static WebElement report_CloseBtn;
			
	@FindBy(xpath="//button[@id='frstPage_']")
	private static WebElement report_FirstBtn;
			
	@FindBy(xpath="//button[@id='prvPage_']")
	private static WebElement report_PreviousBtn;
			
	@FindBy(xpath="//button[@id='pgnumber_']")
	private static WebElement report_PageNoBtn;
			
	@FindBy(xpath="//button[@id='nxtPage_']")
	private static WebElement report_NextBtn;
			
	@FindBy(xpath="//button[@id='lstPage_']")
	private static WebElement report_LastBtn;
	
	@FindBy(xpath="//input[@id='txtSearchReport']")
	private static WebElement report_SearchTxt;
	
	// vat Summary
	
	@FindBy(xpath="//span[contains(@class,'icon-back icon-font7')]")
	private static WebElement backBtn;
	
	@FindBy(xpath="//span[contains(@class,'icon-refresh icon-font7')]")
	private static WebElement displayBtn;
	
	@FindBy(xpath="//div[contains(text(),'Exit')]")
	private static WebElement exitBtn;
	
	
	
	@FindBy(xpath="//input[@id='txt_FromDate']")
	private static WebElement fromDateTxt;
	
	@FindBy(xpath="//td[@id='txt_FromDate_input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
	private static WebElement fromDatedatePicker;
	
	@FindBy(xpath="//input[@id='txt_Todate']")
	private static WebElement toDateTxt;
	
	@FindBy(xpath="//td[@id='txt_Todate_input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
	private static WebElement toDatedatePicker;
	
	@FindBy(xpath="//*[@id='tblSalesRegion']/thead/tr/th")
	private static List<WebElement> salesRegionGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblSalesRegion']/tbody/tr/td")
	private static List<WebElement> salesRegionGridBodyList;
	
	@FindBy(xpath="//*[@id='tblPurchasesRegion']/thead/tr/th")
	private static List<WebElement> purchaseRegionGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblPurchasesRegion']/tbody/tr/td")
	private static List<WebElement> purchaseRegionGridBodyList;
	
	
	@FindBy(xpath="//input[@id='txt_totalPurchase']")
	private static WebElement totalPurchaseTxt;
	
	@FindBy(xpath="//input[@id='txt_totalVATPurchase']")
	private static WebElement totalVatOnPurchaseTxt;

	@FindBy(xpath="//input[@id='txt_totalSales']")
	private static WebElement totalSalesTxt;
	
	@FindBy(xpath="//input[@id='txt_totalVATSales']")
	private static WebElement totalVatOnSalesTxt;

	@FindBy(xpath="//input[@id='txt_totalVATdue']")
	private static WebElement totalVatDueTxt;
	
	@FindBy(xpath="//input[@id='txt_Correction']")
	private static WebElement correctionsFromPreviousQuarterTxt;

	@FindBy(xpath="//input[@id='txt_VATCredit']")
	private static WebElement vatCrediPreviousQuarterTxt;
	
	@FindBy(xpath="//input[@id='txt_NetVATdue']")
	private static WebElement netVatDueTxt;
	
	
	// vat Audit
	
	@FindBy(xpath="//*[@id='VATAuditFileBody']/div/label")
	private static List<WebElement> vatAuditFileMainHeadingList;
	
	@FindBy(xpath="//*[@id='VATAuditFileBody']/div/div/label")
	private static List<WebElement> vatAuditFileSubHeadingList;
	
	@FindBy(xpath="//*[@id='tblCompanyInfo']/thead/tr/th")
	private static List<WebElement> companyInfoGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblCompanyInfo']/tbody/tr/td")
	private static List<WebElement> companyInfoGridBodyList;
	
	@FindBy(xpath="//*[@id='tblPurListing']/thead/tr/th")
	private static List<WebElement> purchaseListGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblPurListing']/tbody/tr/td")
	private static List<WebElement> purchaseListGridBodyList;
	
	@FindBy(xpath="//*[@id='tblSupplySalListing']/thead/tr/th")
	private static List<WebElement> saleListGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblSupplySalListing']/tbody/tr/td")
	private static List<WebElement> saleListGridBodyList;
	
	@FindBy(xpath="//*[@id='tblGeneralLedger']/thead/tr/th")
	private static List<WebElement> generalLedgerGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblGeneralLedger']/tbody/tr/td")
	private static List<WebElement> generalLedgerGridBodyList;
	
	@FindBy(xpath="//*[@id='VATAuditFileBody']/div/div/div/label")
	private static List<WebElement> vatAuditFileGridsFooterList;
	
	
	// vat Return
	
	@FindBy(xpath="//*[@id='VATMonthlyReturnRepKSABody']/div/fieldset/legend")
	private static List<WebElement> vatReturnMainHeadingList;
	
	@FindBy(xpath="//*[@id='tblVATOnSalKSA']/thead/tr/th")
	private static List<WebElement> vatOnSalesGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblVATOnSalKSA']/tbody/tr/td")
	private static List<WebElement> vatOnSalesGridBodyList;
	
	@FindBy(xpath="//*[@id='tblVATOnPurKSA']/thead/tr/th")
	private static List<WebElement> vatOnPurchasesGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblVATOnPurKSA']/tbody/tr/td")
	private static List<WebElement> vatOnPurchasesGridBodyList;
	
	@FindBy(xpath="//*[@id='tblNetVATDueKSA']/thead/tr/th")
	private static List<WebElement> netVatDueGridHeaderList;
	
	@FindBy(xpath="//*[@id='tblNetVATDueKSA']/tbody/tr/td")
	private static List<WebElement> netVatDueGridBodyList;
	
	
	
	@FindBy(xpath="//*[@id='trRender_1']/td[1]")
	private static WebElement sl_1stRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_1']/td[2]")
	private static WebElement sl_1stRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[3]")
	private static WebElement sl_1stRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[4]")
	private static WebElement sl_1stRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[5]")
	private static WebElement sl_1stRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[6]")
	private static WebElement sl_1stRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[7]")
	private static WebElement sl_1stRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[8]")
	private static WebElement sl_1stRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[9]")
	private static WebElement sl_1stRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[10]")
	private static WebElement sl_1stRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[11]")
	private static WebElement sl_1stRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[12]")
	private static WebElement sl_1stRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[13]")
	private static WebElement sl_1stRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[14]")
	private static WebElement sl_1stRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[15]")
	private static WebElement sl_1stRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[16]")
	private static WebElement sl_1stRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[17]")
	private static WebElement sl_1stRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[18]")
	private static WebElement sl_1stRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[19]")
	private static WebElement sl_1stRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[20]")
	private static WebElement sl_1stRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[21]")
	private static WebElement sl_1stRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[22]")
	private static WebElement sl_1stRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[23]")
	private static WebElement sl_1stRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[24]")
	private static WebElement sl_1stRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[25]")
	private static WebElement sl_1stRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[26]")
	private static WebElement sl_1stRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[27]")
	private static WebElement sl_1stRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[28]")
	private static WebElement sl_1stRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[29]")
	private static WebElement sl_1stRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[30]")
	private static WebElement sl_1stRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[31]")
	private static WebElement sl_1stRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[32]")
	private static WebElement sl_1stRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[33]")
	private static WebElement sl_1stRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[34]")
	private static WebElement sl_1stRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[35]")
	private static WebElement sl_1stRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[36]")
	private static WebElement sl_1stRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[37]")
	private static WebElement sl_1stRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[38]")
	private static WebElement sl_1stRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[39]")
	private static WebElement sl_1stRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[40]")
	private static WebElement sl_1stRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[41]")
	private static WebElement sl_1stRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[42]")
	private static WebElement sl_1stRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[43]")
	private static WebElement sl_1stRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[44]")
	private static WebElement sl_1stRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[45]")
	private static WebElement sl_1stRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[46]")
	private static WebElement sl_1stRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[47]")
	private static WebElement sl_1stRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[48]")
	private static WebElement sl_1stRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[49]")
	private static WebElement sl_1stRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[50]")
	private static WebElement sl_1stRow50thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_2']/td[1]")
	private static WebElement sl_2ndRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_2']/td[2]")
	private static WebElement sl_2ndRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[3]")
	private static WebElement sl_2ndRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[4]")
	private static WebElement sl_2ndRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[5]")
	private static WebElement sl_2ndRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[6]")
	private static WebElement sl_2ndRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[7]")
	private static WebElement sl_2ndRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[8]")
	private static WebElement sl_2ndRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[9]")
	private static WebElement sl_2ndRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[10]")
	private static WebElement sl_2ndRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[11]")
	private static WebElement sl_2ndRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[12]")
	private static WebElement sl_2ndRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[13]")
	private static WebElement sl_2ndRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[14]")
	private static WebElement sl_2ndRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[15]")
	private static WebElement sl_2ndRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[16]")
	private static WebElement sl_2ndRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[17]")
	private static WebElement sl_2ndRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[18]")
	private static WebElement sl_2ndRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[19]")
	private static WebElement sl_2ndRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[20]")
	private static WebElement sl_2ndRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[21]")
	private static WebElement sl_2ndRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[22]")
	private static WebElement sl_2ndRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[23]")
	private static WebElement sl_2ndRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[24]")
	private static WebElement sl_2ndRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[25]")
	private static WebElement sl_2ndRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[26]")
	private static WebElement sl_2ndRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[27]")
	private static WebElement sl_2ndRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[28]")
	private static WebElement sl_2ndRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[29]")
	private static WebElement sl_2ndRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[30]")
	private static WebElement sl_2ndRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[31]")
	private static WebElement sl_2ndRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[32]")
	private static WebElement sl_2ndRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[33]")
	private static WebElement sl_2ndRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[34]")
	private static WebElement sl_2ndRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[35]")
	private static WebElement sl_2ndRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[36]")
	private static WebElement sl_2ndRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[37]")
	private static WebElement sl_2ndRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[38]")
	private static WebElement sl_2ndRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[39]")
	private static WebElement sl_2ndRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[40]")
	private static WebElement sl_2ndRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[41]")
	private static WebElement sl_2ndRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[42]")
	private static WebElement sl_2ndRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[43]")
	private static WebElement sl_2ndRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[44]")
	private static WebElement sl_2ndRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[45]")
	private static WebElement sl_2ndRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[46]")
	private static WebElement sl_2ndRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[47]")
	private static WebElement sl_2ndRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[48]")
	private static WebElement sl_2ndRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[49]")
	private static WebElement sl_2ndRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[50]")
	private static WebElement sl_2ndRow50thCol;
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_3']/td[1]")
	private static WebElement sl_3rdRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_3']/td[2]")
	private static WebElement sl_3rdRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[3]")
	private static WebElement sl_3rdRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[4]")
	private static WebElement sl_3rdRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[5]")
	private static WebElement sl_3rdRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[6]")
	private static WebElement sl_3rdRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[7]")
	private static WebElement sl_3rdRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[8]")
	private static WebElement sl_3rdRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[9]")
	private static WebElement sl_3rdRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[10]")
	private static WebElement sl_3rdRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[11]")
	private static WebElement sl_3rdRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[12]")
	private static WebElement sl_3rdRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[13]")
	private static WebElement sl_3rdRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[14]")
	private static WebElement sl_3rdRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[15]")
	private static WebElement sl_3rdRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[16]")
	private static WebElement sl_3rdRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[17]")
	private static WebElement sl_3rdRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[18]")
	private static WebElement sl_3rdRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[19]")
	private static WebElement sl_3rdRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[20]")
	private static WebElement sl_3rdRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[21]")
	private static WebElement sl_3rdRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[22]")
	private static WebElement sl_3rdRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[23]")
	private static WebElement sl_3rdRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[24]")
	private static WebElement sl_3rdRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[25]")
	private static WebElement sl_3rdRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[26]")
	private static WebElement sl_3rdRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[27]")
	private static WebElement sl_3rdRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[28]")
	private static WebElement sl_3rdRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[29]")
	private static WebElement sl_3rdRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[30]")
	private static WebElement sl_3rdRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[31]")
	private static WebElement sl_3rdRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[32]")
	private static WebElement sl_3rdRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[33]")
	private static WebElement sl_3rdRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[34]")
	private static WebElement sl_3rdRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[35]")
	private static WebElement sl_3rdRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[36]")
	private static WebElement sl_3rdRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[37]")
	private static WebElement sl_3rdRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[38]")
	private static WebElement sl_3rdRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[39]")
	private static WebElement sl_3rdRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[40]")
	private static WebElement sl_3rdRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[41]")
	private static WebElement sl_3rdRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[42]")
	private static WebElement sl_3rdRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[43]")
	private static WebElement sl_3rdRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[44]")
	private static WebElement sl_3rdRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[45]")
	private static WebElement sl_3rdRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[46]")
	private static WebElement sl_3rdRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[47]")
	private static WebElement sl_3rdRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[48]")
	private static WebElement sl_3rdRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[49]")
	private static WebElement sl_3rdRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[50]")
	private static WebElement sl_3rdRow50thCol;
	
	
	
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_4']/td[1]")
	private static WebElement sl_4thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_4']/td[2]")
	private static WebElement sl_4thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[3]")
	private static WebElement sl_4thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[4]")
	private static WebElement sl_4thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[5]")
	private static WebElement sl_4thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[6]")
	private static WebElement sl_4thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[7]")
	private static WebElement sl_4thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[8]")
	private static WebElement sl_4thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[9]")
	private static WebElement sl_4thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[10]")
	private static WebElement sl_4thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[11]")
	private static WebElement sl_4thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[12]")
	private static WebElement sl_4thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[13]")
	private static WebElement sl_4thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[14]")
	private static WebElement sl_4thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[15]")
	private static WebElement sl_4thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[16]")
	private static WebElement sl_4thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[17]")
	private static WebElement sl_4thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[18]")
	private static WebElement sl_4thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[19]")
	private static WebElement sl_4thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[20]")
	private static WebElement sl_4thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_4']/td[21]")
	private static WebElement sl_4thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[22]")
	private static WebElement sl_4thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[23]")
	private static WebElement sl_4thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[24]")
	private static WebElement sl_4thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[25]")
	private static WebElement sl_4thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[26]")
	private static WebElement sl_4thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[27]")
	private static WebElement sl_4thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[28]")
	private static WebElement sl_4thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[29]")
	private static WebElement sl_4thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[30]")
	private static WebElement sl_4thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[31]")
	private static WebElement sl_4thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[32]")
	private static WebElement sl_4thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[33]")
	private static WebElement sl_4thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[34]")
	private static WebElement sl_4thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[35]")
	private static WebElement sl_4thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[36]")
	private static WebElement sl_4thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[37]")
	private static WebElement sl_4thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[38]")
	private static WebElement sl_4thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[39]")
	private static WebElement sl_4thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[40]")
	private static WebElement sl_4thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[41]")
	private static WebElement sl_4thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[42]")
	private static WebElement sl_4thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[43]")
	private static WebElement sl_4thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[44]")
	private static WebElement sl_4thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[45]")
	private static WebElement sl_4thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[46]")
	private static WebElement sl_4thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[47]")
	private static WebElement sl_4thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[48]")
	private static WebElement sl_4thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[49]")
	private static WebElement sl_4thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[50]")
	private static WebElement sl_4thRow50thCol;
	
	

	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_5']/td[1]")
	private static WebElement sl_5thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_5']/td[2]")
	private static WebElement sl_5thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[3]")
	private static WebElement sl_5thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[4]")
	private static WebElement sl_5thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[5]")
	private static WebElement sl_5thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[6]")
	private static WebElement sl_5thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[7]")
	private static WebElement sl_5thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[8]")
	private static WebElement sl_5thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[9]")
	private static WebElement sl_5thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[10]")
	private static WebElement sl_5thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[11]")
	private static WebElement sl_5thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[12]")
	private static WebElement sl_5thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[13]")
	private static WebElement sl_5thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[14]")
	private static WebElement sl_5thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[15]")
	private static WebElement sl_5thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[16]")
	private static WebElement sl_5thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[17]")
	private static WebElement sl_5thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[18]")
	private static WebElement sl_5thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[19]")
	private static WebElement sl_5thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[20]")
	private static WebElement sl_5thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_5']/td[21]")
	private static WebElement sl_5thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[22]")
	private static WebElement sl_5thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[23]")
	private static WebElement sl_5thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[24]")
	private static WebElement sl_5thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[25]")
	private static WebElement sl_5thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[26]")
	private static WebElement sl_5thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[27]")
	private static WebElement sl_5thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[28]")
	private static WebElement sl_5thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[29]")
	private static WebElement sl_5thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[30]")
	private static WebElement sl_5thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[31]")
	private static WebElement sl_5thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[32]")
	private static WebElement sl_5thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[33]")
	private static WebElement sl_5thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[34]")
	private static WebElement sl_5thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[35]")
	private static WebElement sl_5thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[36]")
	private static WebElement sl_5thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[37]")
	private static WebElement sl_5thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[38]")
	private static WebElement sl_5thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[39]")
	private static WebElement sl_5thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[40]")
	private static WebElement sl_5thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[41]")
	private static WebElement sl_5thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[42]")
	private static WebElement sl_5thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[43]")
	private static WebElement sl_5thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[44]")
	private static WebElement sl_5thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[45]")
	private static WebElement sl_5thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[46]")
	private static WebElement sl_5thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[47]")
	private static WebElement sl_5thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[48]")
	private static WebElement sl_5thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[49]")
	private static WebElement sl_5thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[50]")
	private static WebElement sl_5thRow50thCol;
	
	
	
	

	
	@FindBy(xpath="//*[@id='trRender_6']/td[1]")
	private static WebElement sl_6thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_6']/td[2]")
	private static WebElement sl_6thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[3]")
	private static WebElement sl_6thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[4]")
	private static WebElement sl_6thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[5]")
	private static WebElement sl_6thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[6]")
	private static WebElement sl_6thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[7]")
	private static WebElement sl_6thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[8]")
	private static WebElement sl_6thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[9]")
	private static WebElement sl_6thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[10]")
	private static WebElement sl_6thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[11]")
	private static WebElement sl_6thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[12]")
	private static WebElement sl_6thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[13]")
	private static WebElement sl_6thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[14]")
	private static WebElement sl_6thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[15]")
	private static WebElement sl_6thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[16]")
	private static WebElement sl_6thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[17]")
	private static WebElement sl_6thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[18]")
	private static WebElement sl_6thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[19]")
	private static WebElement sl_6thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[20]")
	private static WebElement sl_6thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_6']/td[21]")
	private static WebElement sl_6thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[22]")
	private static WebElement sl_6thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[23]")
	private static WebElement sl_6thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[24]")
	private static WebElement sl_6thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[25]")
	private static WebElement sl_6thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[26]")
	private static WebElement sl_6thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[27]")
	private static WebElement sl_6thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[28]")
	private static WebElement sl_6thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[29]")
	private static WebElement sl_6thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[30]")
	private static WebElement sl_6thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[31]")
	private static WebElement sl_6thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[32]")
	private static WebElement sl_6thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[33]")
	private static WebElement sl_6thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[34]")
	private static WebElement sl_6thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[35]")
	private static WebElement sl_6thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[36]")
	private static WebElement sl_6thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[37]")
	private static WebElement sl_6thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[38]")
	private static WebElement sl_6thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[39]")
	private static WebElement sl_6thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[40]")
	private static WebElement sl_6thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[41]")
	private static WebElement sl_6thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[42]")
	private static WebElement sl_6thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[43]")
	private static WebElement sl_6thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[44]")
	private static WebElement sl_6thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[45]")
	private static WebElement sl_6thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[46]")
	private static WebElement sl_6thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[47]")
	private static WebElement sl_6thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[48]")
	private static WebElement sl_6thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[49]")
	private static WebElement sl_6thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[50]")
	private static WebElement sl_6thRow50thCol;
	
	
	
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_7']/td[1]")
	private static WebElement sl_7thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_7']/td[2]")
	private static WebElement sl_7thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[3]")
	private static WebElement sl_7thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[4]")
	private static WebElement sl_7thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[5]")
	private static WebElement sl_7thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[6]")
	private static WebElement sl_7thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[7]")
	private static WebElement sl_7thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[8]")
	private static WebElement sl_7thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[9]")
	private static WebElement sl_7thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[10]")
	private static WebElement sl_7thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[11]")
	private static WebElement sl_7thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[12]")
	private static WebElement sl_7thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[13]")
	private static WebElement sl_7thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[14]")
	private static WebElement sl_7thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[15]")
	private static WebElement sl_7thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[16]")
	private static WebElement sl_7thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[17]")
	private static WebElement sl_7thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[18]")
	private static WebElement sl_7thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[19]")
	private static WebElement sl_7thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[20]")
	private static WebElement sl_7thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_8']/td[1]")
	private static WebElement sl_8thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_8']/td[2]")
	private static WebElement sl_8thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[3]")
	private static WebElement sl_8thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[4]")
	private static WebElement sl_8thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[5]")
	private static WebElement sl_8thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[6]")
	private static WebElement sl_8thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[7]")
	private static WebElement sl_8thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[8]")
	private static WebElement sl_8thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[9]")
	private static WebElement sl_8thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[10]")
	private static WebElement sl_8thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[11]")
	private static WebElement sl_8thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[12]")
	private static WebElement sl_8thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[13]")
	private static WebElement sl_8thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[14]")
	private static WebElement sl_8thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[15]")
	private static WebElement sl_8thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[16]")
	private static WebElement sl_8thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[17]")
	private static WebElement sl_8thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[18]")
	private static WebElement sl_8thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[19]")
	private static WebElement sl_8thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[20]")
	private static WebElement sl_8thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_9']/td[1]")
	private static WebElement sl_9thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_9']/td[2]")
	private static WebElement sl_9thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[3]")
	private static WebElement sl_9thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[4]")
	private static WebElement sl_9thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[5]")
	private static WebElement sl_9thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[6]")
	private static WebElement sl_9thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[7]")
	private static WebElement sl_9thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[8]")
	private static WebElement sl_9thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[9]")
	private static WebElement sl_9thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[10]")
	private static WebElement sl_9thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[11]")
	private static WebElement sl_9thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[12]")
	private static WebElement sl_9thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[13]")
	private static WebElement sl_9thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[14]")
	private static WebElement sl_9thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[15]")
	private static WebElement sl_9thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[16]")
	private static WebElement sl_9thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[17]")
	private static WebElement sl_9thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[18]")
	private static WebElement sl_9thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[19]")
	private static WebElement sl_9thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[20]")
	private static WebElement sl_9thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_10']/td[1]")
	private static WebElement sl_10thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_10']/td[2]")
	private static WebElement sl_10thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[3]")
	private static WebElement sl_10thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[4]")
	private static WebElement sl_10thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[5]")
	private static WebElement sl_10thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[6]")
	private static WebElement sl_10thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[7]")
	private static WebElement sl_10thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[8]")
	private static WebElement sl_10thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[9]")
	private static WebElement sl_10thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[10]")
	private static WebElement sl_10thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[11]")
	private static WebElement sl_10thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[12]")
	private static WebElement sl_10thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[13]")
	private static WebElement sl_10thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[14]")
	private static WebElement sl_10thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[15]")
	private static WebElement sl_10thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[16]")
	private static WebElement sl_10thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[17]")
	private static WebElement sl_10thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[18]")
	private static WebElement sl_10thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[19]")
	private static WebElement sl_10thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[20]")
	private static WebElement sl_10thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_11']/td[1]")
	private static WebElement sl_11thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_11']/td[2]")
	private static WebElement sl_11thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[3]")
	private static WebElement sl_11thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[4]")
	private static WebElement sl_11thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[5]")
	private static WebElement sl_11thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[6]")
	private static WebElement sl_11thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[7]")
	private static WebElement sl_11thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[8]")
	private static WebElement sl_11thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[9]")
	private static WebElement sl_11thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[10]")
	private static WebElement sl_11thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[11]")
	private static WebElement sl_11thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[12]")
	private static WebElement sl_11thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[13]")
	private static WebElement sl_11thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[14]")
	private static WebElement sl_11thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[15]")
	private static WebElement sl_11thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[16]")
	private static WebElement sl_11thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[17]")
	private static WebElement sl_11thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[18]")
	private static WebElement sl_11thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[19]")
	private static WebElement sl_11thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[20]")
	private static WebElement sl_11thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_12']/td[1]")
	private static WebElement sl_12thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_12']/td[2]")
	private static WebElement sl_12thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[3]")
	private static WebElement sl_12thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[4]")
	private static WebElement sl_12thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[5]")
	private static WebElement sl_12thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[6]")
	private static WebElement sl_12thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[7]")
	private static WebElement sl_12thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[8]")
	private static WebElement sl_12thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[9]")
	private static WebElement sl_12thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[10]")
	private static WebElement sl_12thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[11]")
	private static WebElement sl_12thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[12]")
	private static WebElement sl_12thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[13]")
	private static WebElement sl_12thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[14]")
	private static WebElement sl_12thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[15]")
	private static WebElement sl_12thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[16]")
	private static WebElement sl_12thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[17]")
	private static WebElement sl_12thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[18]")
	private static WebElement sl_12thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[19]")
	private static WebElement sl_12thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[20]")
	private static WebElement sl_12thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_13']/td[1]")
	private static WebElement sl_13thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_13']/td[2]")
	private static WebElement sl_13thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[3]")
	private static WebElement sl_13thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[4]")
	private static WebElement sl_13thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[5]")
	private static WebElement sl_13thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[6]")
	private static WebElement sl_13thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[7]")
	private static WebElement sl_13thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[8]")
	private static WebElement sl_13thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[9]")
	private static WebElement sl_13thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[10]")
	private static WebElement sl_13thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[11]")
	private static WebElement sl_13thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[12]")
	private static WebElement sl_13thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[13]")
	private static WebElement sl_13thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[14]")
	private static WebElement sl_13thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[15]")
	private static WebElement sl_13thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[16]")
	private static WebElement sl_13thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[17]")
	private static WebElement sl_13thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[18]")
	private static WebElement sl_13thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[19]")
	private static WebElement sl_13thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[20]")
	private static WebElement sl_13thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_14']/td[1]")
	private static WebElement sl_14thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_14']/td[2]")
	private static WebElement sl_14thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[3]")
	private static WebElement sl_14thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[4]")
	private static WebElement sl_14thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[5]")
	private static WebElement sl_14thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[6]")
	private static WebElement sl_14thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[7]")
	private static WebElement sl_14thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[8]")
	private static WebElement sl_14thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[9]")
	private static WebElement sl_14thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[10]")
	private static WebElement sl_14thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[11]")
	private static WebElement sl_14thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[12]")
	private static WebElement sl_14thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[13]")
	private static WebElement sl_14thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[14]")
	private static WebElement sl_14thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[15]")
	private static WebElement sl_14thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[16]")
	private static WebElement sl_14thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[17]")
	private static WebElement sl_14thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[18]")
	private static WebElement sl_14thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[19]")
	private static WebElement sl_14thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[20]")
	private static WebElement sl_14thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_15']/td[1]")
	private static WebElement sl_15thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_15']/td[2]")
	private static WebElement sl_15thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[3]")
	private static WebElement sl_15thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[4]")
	private static WebElement sl_15thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[5]")
	private static WebElement sl_15thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[6]")
	private static WebElement sl_15thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[7]")
	private static WebElement sl_15thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[8]")
	private static WebElement sl_15thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[9]")
	private static WebElement sl_15thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[10]")
	private static WebElement sl_15thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[11]")
	private static WebElement sl_15thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_15']/td[12]")
	private static WebElement sl_15thRow12thCol;
	
	
	

	// Purchase Voucher VAT 
	   
	 public boolean checkPurchaseVoucherVATHomePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try 
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			
			boolean actHomePageNewBtn                  =newBtn.isDisplayed();
			boolean actHomePageEditBtn                 =editBtn.isDisplayed();
			boolean actHomePagePrintBtn                =printBtn.isDisplayed();
			boolean actHomePageDeleteBtn               =deleteBtn.isDisplayed();
			boolean actHomePageSuspendBtn              =suspendBtn.isDisplayed();
			boolean actHomePagePrintBarcodeBtn         =printBarCodeBtn.isDisplayed();
			boolean actHomePageExportXMLBtn            =exportToXMLBtn.isDisplayed();
			boolean actHomePageSettingsBtn             =settingsBtn.isDisplayed();
			boolean actHomePageCloseBtn                =homeCloseBtn.isDisplayed();
			boolean actHomePageGridCheckBox            =grid_HeaderChkBox.isDisplayed();
			boolean actHomePageSortingBtn              =sortingBtn.isDisplayed();
			boolean actHomePageCreateViewBn            =createViewBtn.isDisplayed();
			boolean actHomePageCustomizeBtn   		   =customizeBtn.isDisplayed();
			boolean actHomePageFilterBtn     		   =filterBtn.isDisplayed();
			boolean actHomePageRefreshBtn    		   =refreshBtnInPVVAT.isDisplayed();
			boolean actHomePageOptionsBtn     		   =optionsBtn.isDisplayed();
			boolean actHomePageExportBtn               =exportBtn.isDisplayed();
			
			boolean actHomePageAllVouchersView         =homePageAllVouchersView.isDisplayed();
			
			
			boolean expHomePageNewBtn                   =true;
			boolean expHomePageEditBtn                  =true;
			boolean expHomePagePrintBtn                 =true;
			boolean expHomePageDeleteBtn                =true;
			boolean expHomePageAuthorizeBtn             =true;
			boolean expHomePageSuspendBtn               =true;
			boolean expHomePagePrintBarcodeBtn          =true;
			boolean expHomePageExportXMLBtn             =true;
			boolean expHomePageSettingsBtn              =true;
			boolean expHomePageCloseBtn                 =true;
			boolean expHomePageGridCheckBox             =true;
			boolean expHomePageSortingBtn               =true;
			boolean expHomePageCreateViewBn             =true;
			boolean expHomePageCustomizeBtn             =true;
			boolean expHomePageFilterBtn                =true;
			boolean expHomePageRefreshBtn               =true;
			boolean expHomePageOptionsBtn               =true;
			boolean expHomePageExportBtn                =true;
			
			boolean expHomePageAllVouchersView          =true;
				
				
				System.out.println("************************************ checkPurchaseVoucherNewHomePage  *****************************************************");
				System.out.println("Home Page New Btn Value Actual           :"+actHomePageNewBtn                   +"    Value Expected : "+expHomePageNewBtn);
				System.out.println("Home Page Edit Btn Value Actual          :"+actHomePageEditBtn                  +"    Value Expected : "+expHomePageEditBtn);
				System.out.println("Home Page Print Btn Value Actual         :"+actHomePagePrintBtn                 +"	 Value Expected : "+expHomePagePrintBtn);
				System.out.println("Home Page Delete Btn Value Actual        :"+actHomePageDeleteBtn                +"	 Value Expected : "+expHomePageDeleteBtn);
				System.out.println("Home Page Suspend Btn Value Actual       :"+actHomePageSuspendBtn               +"	 Value Expected : "+expHomePageSuspendBtn);
				System.out.println("Home Page Print Barcode Btn Value Actual :"+actHomePagePrintBarcodeBtn          +"	 Value Expected : "+expHomePagePrintBarcodeBtn);
				System.out.println("Home Page Export XML Btn Value Actual    :"+actHomePageExportXMLBtn             +"	 Value Expected : "+expHomePageExportXMLBtn);
				System.out.println("Home Page Settings Btn Value Actual      :"+actHomePageSettingsBtn              +"	 Value Expected : "+expHomePageSettingsBtn);
				System.out.println("Home Page Close Btn Value Actual         :"+actHomePageCloseBtn                 +"	 Value Expected : "+expHomePageCloseBtn);
				System.out.println("Home Page Grid check Value Actual        :"+actHomePageGridCheckBox             +"	 Value Expected : "+expHomePageGridCheckBox);
				System.out.println("Home Page Sorting Btn Value Actual       :"+actHomePageSortingBtn               +"	 Value Expected : "+expHomePageSortingBtn);
				System.out.println("Home Page Create View Btn Value Actual   :"+actHomePageCreateViewBn             +"	 Value Expected : "+expHomePageCreateViewBn);
				System.out.println("Home Page Customize Btn Value Actual     :"+actHomePageCustomizeBtn             +"	 Value Expected : "+expHomePageCustomizeBtn);
				System.out.println("Home Page Filter check Value Actual      :"+actHomePageFilterBtn                +"	 Value Expected : "+expHomePageFilterBtn);
				System.out.println("Home Page Refesh Btn Value Actual        :"+actHomePageRefreshBtn               +"	 Value Expected : "+expHomePageRefreshBtn);
				System.out.println("Home Page Options Btn Value Actual       :"+actHomePageOptionsBtn               +"	 Value Expected : "+expHomePageOptionsBtn);
				System.out.println("Home Page Export Btn Value Actual        :"+actHomePageExportBtn                +"	 Value Expected : "+expHomePageExportBtn);
				System.out.println("Home Page All Voucher View Value Actual  :"+actHomePageAllVouchersView          +"	 Value Expected : "+expHomePageAllVouchersView);
				
				
				boolean actMethod=actHomePageNewBtn==expHomePageNewBtn  && actHomePageEditBtn==expHomePageEditBtn && actHomePagePrintBtn==expHomePagePrintBtn
						&& actHomePageDeleteBtn==expHomePageDeleteBtn  && actHomePageSuspendBtn==expHomePageSuspendBtn 
		                && actHomePagePrintBarcodeBtn==expHomePagePrintBarcodeBtn && actHomePageExportXMLBtn==expHomePageExportXMLBtn
						&& actHomePageSettingsBtn==expHomePageSettingsBtn && actHomePageCloseBtn==expHomePageCloseBtn && actHomePageGridCheckBox==expHomePageGridCheckBox
						&& actHomePageSortingBtn==expHomePageSortingBtn && actHomePageCreateViewBn==expHomePageCreateViewBn && actHomePageCustomizeBtn==expHomePageCustomizeBtn
						&& actHomePageFilterBtn==expHomePageFilterBtn && actHomePageRefreshBtn==expHomePageRefreshBtn && actHomePageOptionsBtn==expHomePageOptionsBtn
						&& actHomePageExportBtn==expHomePageExportBtn && actHomePageAllVouchersView==expHomePageAllVouchersView;
				
				
				String actResult=Boolean.toString(actMethod);
				String expResult=excelReader.getCellData(xlSheetName, 8, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 8, 8, actResult.toUpperCase());
				
				if(actMethod==true)
				{
					System.out.println("Test Pass : HomeScreen Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 8, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : HomeScreen Options Are NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 8, 9, resFail);
					return false;
				}
	         }
	     catch (Exception e) 
		 {
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 8, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		 	return false;
		 }
		}
		
	
	


	@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[10]")
	private static List<WebElement> nameList;

	@FindBy(xpath="//*[@id='PlaceOfSupply']")
	private static WebElement placeOfSupply;

	@FindBy(xpath="/html/body/section/div[8]/div[1]/div/div/div/div/div[1]/div/div[2]/form/div[1]/div/div/div[19]/div[2]/div/table/tbody/tr[2]/td[1]/input[2]")
	private static WebElement jurisdiction;

	@FindBy(xpath ="//*[@id='LandingGridBody']/tr/td[10]")
	public static List<WebElement> masterTaxCodeList;

	@FindBy (xpath="//*[@id='1161']/span")
	private static WebElement taxCode;

	@FindBy(xpath = "//span[@id='btnClose']")
	private static WebElement cancelIcon;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _8']")
	private static WebElement  editScreenbody4thRowFormula;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _9']")
	private static WebElement  editScreenbody4thRowPreload;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _9']")
	private static WebElement  editScreenbody5thRowPreload;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_4 _1']//span[@id='editIcon']")
	private static WebElement  editScreenbody4thRowEditBtn;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_5 _1']//span[@id='editIcon']")
	private static WebElement  editScreenbody5thRowEditBtn;
	
	@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _8']")
	private static WebElement  editScreenbody3rdRowFormula;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _9']")
	private static WebElement  editScreenbody3rdRowPreload;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_3 _1']//span[@id='editIcon']")
	private static WebElement  editScreenbody3rdRowEditBtn;


	@FindBy(xpath="//*[@id='navigationtab2']/div/span[2]")
	private static WebElement  miscellaneousTab;

	@FindBy(xpath="//input[@id='misc_PostingUpdateFA']")
	private static WebElement  postingUpdateChkBox;

	@FindBy(xpath="//input[@id='misc_PostingSelectAccInLine']")
	private static WebElement  selectAccountInEveryLineChkBox;

	@FindBy(xpath="//input[@id='misc_chkUpdateStock']")
	private static WebElement  updateStockChkBox;

	@FindBy(xpath="//input[@id='misc_PostingPostVAT']")
	private static WebElement  postVatChkBox;

	@FindBy(xpath="//input[@id='misc_chkDetailedPosting']")
	private static WebElement detailedPostingChkbox;

		public boolean checkPurchaseVoucherVATSettingOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try 
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
				settingsBtn.click();
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
			 	documentsTab.click();

			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters1));
			 	String actmasters1 = masters1.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters2));
			 	String actmasters2 = masters2.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters3));
			 	String actmasters3 = masters3.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masters4));
			 	String actmasters4 = masters4.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position1));
			 	String warehouseposition = position1.getText();
			 	
			 	if(warehouseposition.equalsIgnoreCase("Header"))
			 	{
			 		position1.click();
			 		
			 		Select s = new Select(positionDropdown);
			 		s.selectByVisibleText("Body");
			 	}
			 	
			 	showDependency1.click();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			 	String actposition1 = position1.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position2));
			 	String actposition2 = position2.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position3));
			 	String actposition3 = position3.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(position4));
			 	String actposition4 = position4.getText();
			 	
			 	String actshowDependency2 = showDependency2.getText();
			 	
			 	String expmasters1 = "Warehouse";
			 	String expmasters2 = "Department";
			 	String expmasters3 = "Place Of Supply";
			 	String expmasters4 = "Jurisdiction";
			 	
			 	String expposition1 = "Body";
			 	String expposition2 = "Header";
			 	String expposition3 = "Header";
			 	String expposition4 = "Header";
			 	
			 	String expshowDependency2 = "Jurisdiction";
			 	
			 	
			 	Thread.sleep(2000);
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTab));
			 	miscellaneousTab.click();
			 	
			 	
			 	if (postingUpdateChkBox.isSelected()==false) 
			 	{
			 		postingUpdateChkBox.click();
				}
			 	
			 	if (selectAccountInEveryLineChkBox.isSelected()==false) 
			 	{
			 		selectAccountInEveryLineChkBox.click();
				}
			 	
			 	if (updateStockChkBox.isSelected()==false) 
			 	{
			 		updateStockChkBox.click();
				}
			 	
			 	if (postVatChkBox.isSelected()==false) 
			 	{
			 		postVatChkBox.click();
				}
			 	
			 	if(detailedPostingChkbox.isSelected()==true)
					
				{
					detailedPostingChkbox.click();
				}
				
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			 	editScreenTab.click();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody3rdRowFormula));
			 	String acteditScreenbody4thRowFormula = editScreenbody3rdRowFormula.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody3rdRowPreload));
			 	String acteditScreenbody4thRowPreload = editScreenbody3rdRowPreload.getText();
			 	
			 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody4thRowPreload));
			 	String acteditScreenbody5thRowPreload = editScreenbody4thRowPreload.getText();
			 	
			 	String expeditScreenbody4thRowFormula = "(gr) *sb4/100";
			 	String expeditScreenbody4thRowPreload = "vatrt*vatdt";
			 	String expeditScreenbody5thRowPreload = "&(gr-sbo4)";
	            
			 	System.out.println("***********************Setting Option Displayed *******************************");
			 	
			 	System.out.println("masters1  : " + actmasters1  +" Value Expected : " + expmasters1);
			 	System.out.println("masters2  : " + actmasters2  +" Value Expected : " + expmasters2);
			 	System.out.println("masters3  : " + actmasters3  +" Value Expected : " + expmasters3);
			 	System.out.println("masters4  : " + actmasters4  +" Value Expected : " + expmasters4);
			 	
			 	System.out.println("position1  : " + actposition1  +" Value Expected : " + expposition1);
			 	System.out.println("position2  : " + actposition2  +" Value Expected : " + expposition2);
			 	System.out.println("position3  : " + actposition3  +" Value Expected : " + expposition3);
			 	System.out.println("position4  : " + actposition4  +" Value Expected : " + expposition4);
			 	
			 	System.out.println("showDependency2  : " + actshowDependency2  +" Value Expected : " + expshowDependency2);
			 	
			 	System.out.println("editScreenbody4thRowFormula : "+acteditScreenbody4thRowFormula +" Value Expected : "+ expeditScreenbody4thRowFormula);
			 	System.out.println("editScreenbody4thRowPreload : "+acteditScreenbody4thRowPreload +" Value Expected : "+ expeditScreenbody4thRowPreload);
			 	System.out.println("editScreenbody5thRowPreload : "+acteditScreenbody5thRowPreload +" Value Expected : "+ expeditScreenbody5thRowPreload);
			 
				
				if (actmasters1.equalsIgnoreCase(expmasters1) && actmasters2.equalsIgnoreCase(expmasters2) && actmasters3.equalsIgnoreCase(expmasters3)
						&& actmasters4.equalsIgnoreCase(expmasters4) && actposition1.equalsIgnoreCase(expposition1) && actposition2.equalsIgnoreCase(expposition2)
						&& actposition3.equalsIgnoreCase(expposition3) && actposition4.equalsIgnoreCase(expposition4) && actshowDependency2.equalsIgnoreCase(expshowDependency2)
						&& acteditScreenbody4thRowFormula.equalsIgnoreCase(expeditScreenbody4thRowFormula) && acteditScreenbody4thRowPreload.equalsIgnoreCase(expeditScreenbody4thRowPreload)
						&& acteditScreenbody5thRowPreload.equalsIgnoreCase(expeditScreenbody5thRowPreload))
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
					updateBtn.click();
					
					System.out.println(" PURCHASE VOUCHER VAT  Settings Options are Excepted ");
					
					String expMessage		="Data Saved Successfully";
					
					String actMessage3		=checkValidationMessage(expMessage);
				
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 9, 9, resPass);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
					settings_closeBtn.click();

					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody3rdRowEditBtn));
					editScreenbody3rdRowEditBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourformulaTxt));
					editScreenAddBehaviourformulaTxt.click();
					editScreenAddBehaviourformulaTxt.clear();
					editScreenAddBehaviourformulaTxt.sendKeys("(gr) *sb4/100");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddBehaviourFormulaokBtn));
					editScreenAddBehaviourFormulaokBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
					editScreenPreloadTxt.click();
					editScreenPreloadTxt.clear();
					editScreenPreloadTxt.sendKeys("vatrt*vatdt");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
					editScreenApplyBtn.click();
					
					String expMessage1		="Data Saved Successfully";
					
					String actMessage1		=checkValidationMessage(expMessage1);
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenbody4thRowEditBtn));
					editScreenbody4thRowEditBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreloadTxt));
					editScreenPreloadTxt.click();
					editScreenPreloadTxt.clear();
					editScreenPreloadTxt.sendKeys("&(gr-sbo4)");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
					editScreenApplyBtn.click();
					
					String expMessage2		="Data Saved Successfully";
					
					String actMessage2		=checkValidationMessage(expMessage2);		
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
					updateBtn.click();
					
					
					String expMessage3		="Data Saved Successfully";
					
					String actMessage3		=checkValidationMessage(expMessage3);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
					settings_closeBtn.click();

					if(actMessage1.equalsIgnoreCase(expMessage1) && actMessage2.equalsIgnoreCase(expMessage2) &&  actMessage3.equalsIgnoreCase(expMessage3))
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 9, 9, resPass);
						System.out.println("Test Pass : Selecting Tags Successfully And Updating");
						return true;
					}
					else
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 9, 9, resFail);
						System.out.println("Test Fail : Not Selecting Tags and Not Updating");
						return false;
					}
				}
			 }
			  catch (Exception e) 
				 {
				    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
					settings_closeBtn.click();

				  String exception =e.getMessage();
				  System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				  return false;
				 }
			}


		public boolean checkPurchaseVoucherVATNewEntryPage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkUserFriendlyMessage();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(freeFlowBtn));
			
			boolean actEntryPageJumpToHeaderSectionBtn= jumpToHeaderSectionBtn.isDisplayed();
			boolean actEntryPageJumpToBodySectionBtn  = jumpToBodySectionBtn.isDisplayed();
			boolean actEntryPageJumpToFooterBtn       = jumpToFooterBtn.isDisplayed();
			boolean actEntryPageNewBtn                = new_newBtn.isDisplayed();
			boolean actEntryPageSaveBtn               = saveBtn.isDisplayed();
			boolean actEntryPagePreviousBtn           = previousBtn.isDisplayed();
			boolean actEntryPageNextBtn               = nextBtn.isDisplayed();
			boolean actEntryPagePrintBtn              = new_PrintBtn.isDisplayed();
			boolean actEntryPageSuspendBtn            = new_SuspendBtn.isDisplayed();
			boolean actEntryPageCloseBtn              = new_CloseBtn.isDisplayed();
			boolean actEntryPageToggleBtn             = toggleBtn.isDisplayed();

			
			boolean expEntryPageJumpToHeaderSectionBtn= true;
			boolean expEntryPageJumpToBodySectionBtn  = true;
			boolean expEntryPageJumpToFooterBtn       = true;
			boolean expEntryPageNewBtn	              = true;
			boolean expEntryPageSaveBtn               = true;
			boolean expEntryPagePreviousBtn           = true;
			boolean expEntryPageNextBtn               = true;
			boolean expEntryPagePrintBtn              = true;
			boolean expEntryPageSuspendBtn            = true;
			boolean expEntryPageCloseBtn              = true;
			boolean expEntryPageToggleBtn             = true;

			
			
			System.out.println("************************************* checkPurchaseVoucherNewEntryPage  ********************************************");
			
			System.out.println("Entry Page RC Jump to Header Value Actual:"+actEntryPageJumpToHeaderSectionBtn +"    Value Expected : "+expEntryPageJumpToHeaderSectionBtn);
			System.out.println("Entry Page RC Jump To Body Value Actual  :"+actEntryPageJumpToBodySectionBtn   +"    Value Expected : "+expEntryPageJumpToBodySectionBtn);
			System.out.println("Entry Page RC Jump To Footer Value Actual:"+actEntryPageJumpToFooterBtn        +"    Value Expected : "+expEntryPageJumpToFooterBtn);
			System.out.println("Entry Page RC New Btn Value Actual       :"+actEntryPageNewBtn                 +"    Value Expected : "+expEntryPageNewBtn);
			System.out.println("Entry Page RC Save Btn Value Actual      :"+actEntryPageSaveBtn                +"    Value Expected : "+expEntryPageSaveBtn);
			System.out.println("Entry Page RC Previous Btn Value Actual  :"+actEntryPagePreviousBtn            +"    Value Expected : "+expEntryPagePreviousBtn);
			System.out.println("Entry Page RC Next Btn Value Actual      :"+actEntryPageNextBtn                +"    Value Expected : "+expEntryPageNextBtn);
			System.out.println("Entry Page RC Print Btn Value Actual     :"+actEntryPagePrintBtn               +"    Value Expected : "+expEntryPagePrintBtn);
			System.out.println("Entry Page RC Suspend Btn Value Actual   :"+actEntryPageSuspendBtn             +"    Value Expected : "+expEntryPageSuspendBtn);
			System.out.println("Entry Page RC Close Btn Value Actual     :"+actEntryPageCloseBtn               +"    Value Expected : "+expEntryPageCloseBtn);
			System.out.println("Entry Page RC Toggle Btn Value Actual    :"+actEntryPageToggleBtn              +"    Value Expected : "+expEntryPageToggleBtn);
			
			
			boolean actMethod=actEntryPageJumpToHeaderSectionBtn==expEntryPageJumpToHeaderSectionBtn && actEntryPageJumpToBodySectionBtn==expEntryPageJumpToBodySectionBtn 
					&& actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn && actEntryPageJumpToFooterBtn==expEntryPageJumpToFooterBtn
					&& actEntryPageNewBtn==expEntryPageNewBtn && actEntryPageSaveBtn==expEntryPageSaveBtn && actEntryPagePreviousBtn==expEntryPagePreviousBtn
					&& actEntryPageNextBtn==expEntryPageNextBtn && actEntryPagePrintBtn==expEntryPagePrintBtn &&actEntryPageSuspendBtn==expEntryPageSuspendBtn 
					&& actEntryPageCloseBtn==expEntryPageCloseBtn && actEntryPageToggleBtn==expEntryPageToggleBtn;
			
			
			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherVAT", 11, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 11, 8, actResult.toUpperCase());
			
			if(actMethod==true )
		
			{
				System.out.println("Test Pass : Entry Page Header Options Are Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 10, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 10, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 10, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}


		
		
		
		
		// Header 
		
		@FindBy(xpath="//input[@id='id_header_268435470']")
		private static WebElement  placeofSupplyTxt;
		
		@FindBy(xpath="//tbody[@id='id_header_268435470_table_body']/tr/td[2]")
		private static List<WebElement>  placeofSupplyList;
		
		@FindBy(xpath="//input[@id='id_header_268435471']")
		private static WebElement  jurisdictionTxt;
		
		@FindBy(xpath="//tbody[@id='id_header_268435471_table_body']/tr/td[2]")
		private static List<WebElement>  jurisdictionList;
		
		@FindBy(xpath="//input[@id='id_header_67108962']")
		private static WebElement  permintNoTxt;
		
		/*@FindBy(xpath="//input[@id='id_header_67108961']")
		private static WebElement  permintNoTxt;*/
		
		
		
		// Body
		
		@FindBy(xpath="//input[@id='id_body_16777333']")
		private static WebElement  taxCodeTxt;
		
		@FindBy(xpath="//tbody[@id='id_body_16777333_table_body']/tr/td[2]")
		private static List<WebElement>  taxCodeList;
		
		@FindBy(xpath="//input[@id='id_body_33554503']")
		private static WebElement  enter_VatTxt;
		
		@FindBy(xpath="//input[@id='id_body_33554504']")
		private static WebElement  enter_TaxableTxt;
		
		

		

		
		public boolean checkPurchaseVoucherVATEntryPageHeaderFields() throws EncryptedDocumentException, InvalidFormatException, IOException
		{

			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
			boolean actEntryPageHeaderFieldsDocNumber     =documentNumberTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsDate          =dateTxt.isDisplayed();
			/*boolean actEntryPageHeaderFieldsPurchaseAc    =purchaseAccountTxt.isDisplayed();*/
			boolean actEntryPageHeaderFieldsVendorAc      =vendorAccountTxt.isDisplayed();
			boolean actEntryPageHeaderFieldRaiseReceipt   =voucherRaiseReceiptCheckBox.isDisplayed();
			boolean actEntryPageHeaderFieldsDepartment    =departmentTxt.isDisplayed();
			boolean actEntryPageHeaderFieldsDueDate       =voucherHeaderDueDate.isDisplayed();                                         
			boolean actEntryPageHeaderFieldsLocalExchRate =voucherHeaderLocalExchangeRate.isDisplayed();
			boolean actEntryPageHeaderFieldsCurrency      =voucherHeaderCurrency.isDisplayed();
			boolean actEntryPageHeaderFieldsExchRate      =voucherHeaderExchangeRate.isDisplayed();
			boolean actEntryPageHeaderFieldsWarehouse     =voucherHeaderCurrency.isDisplayed();
			boolean actEntryPageHeaderPlaceOfSupply       =placeofSupplyTxt.isDisplayed();
			boolean actEntryPageHeaderJurisdiction        =jurisdictionTxt.isDisplayed();
			boolean actEntryPageHeaderPermitNumber        =permintNoTxt.isDisplayed();
			
			boolean expEntryPageHeaderFieldsDocNumber     =true;
			boolean expEntryPageHeaderFieldsDate          =true;
			/*boolean expEntryPageHeaderFieldsPurchaseAc    =true;*/
			boolean expEntryPageHeaderFieldsVendorAc      =true;
			boolean expEntryPageHeaderFieldRaiseReceipt   =true;
			boolean expEntryPageHeaderFieldsDepartment    =true;
			boolean expEntryPageHeaderFieldsDueDate       =true;                                         
			boolean expEntryPageHeaderFieldsLocalExchRate =true;
			boolean expEntryPageHeaderFieldsCurrency      =true;
			boolean expEntryPageHeaderFieldsExchRate      =true;
			boolean expEntryPageHeaderFieldsWarehouse     =true;
	        boolean expEntryPageHeaderFieldPalceOfSupply  =true;
	        boolean expEntryPageHeaderFieldJurisdiction   =true;
	        boolean expEntryPageHeaderFieldPermitNumber   =true;
			
			System.out.println("************************************* checkPurchaseVoucherNewEntryPageHeaderFields  *******************************************************");
			System.out.println("Entry Page Header Doc No Value Actual         :"+actEntryPageHeaderFieldsDocNumber    +"  Value Expected : "+expEntryPageHeaderFieldsDocNumber);
			System.out.println("Entry Page Header Date  Value Actual          :"+actEntryPageHeaderFieldsDate         +"  Value Expected : "+expEntryPageHeaderFieldsDate);
			/*System.out.println("Entry Page Header Purchase Value Actual       :"+actEntryPageHeaderFieldsPurchaseAc   +"  Value Expected : "+expEntryPageHeaderFieldsPurchaseAc);*/	
			System.out.println("Entry Page Header Vendor Value Actual         :"+actEntryPageHeaderFieldsVendorAc     +"  Value Expected : "+expEntryPageHeaderFieldsVendorAc);
			System.out.println("Entry Page Header Raise Receipt Value Actual  :"+actEntryPageHeaderFieldRaiseReceipt  +"  Value Expected : "+expEntryPageHeaderFieldRaiseReceipt);
			System.out.println("Entry Page Header Department Value Actual     :"+actEntryPageHeaderFieldsDepartment   +"  Value Expected : "+expEntryPageHeaderFieldsDepartment);
			System.out.println("Entry Page Header Due Date Value Actual       :"+actEntryPageHeaderFieldsDueDate      +"  Value Expected : "+expEntryPageHeaderFieldsDueDate);	
			System.out.println("Entry Page Header Local Exch Rate Value Actual:"+actEntryPageHeaderFieldsLocalExchRate+"  Value Expected : "+expEntryPageHeaderFieldsLocalExchRate);
			System.out.println("Entry Page Header Currency Value Actual       :"+actEntryPageHeaderFieldsCurrency     +"  Value Expected : "+expEntryPageHeaderFieldsCurrency);
			System.out.println("Entry Page Header Exch Rate Value Actual      :"+actEntryPageHeaderFieldsExchRate     +"  Value Expected : "+expEntryPageHeaderFieldsExchRate);
			System.out.println("Entry Page Header Warehouse Value Actual      :"+actEntryPageHeaderFieldsWarehouse    +"  Value Expected : "+expEntryPageHeaderFieldsWarehouse);	
			System.out.println("Entry Page Header Place OF Supply Value Actual:"+actEntryPageHeaderPlaceOfSupply   +"  Value Expected : "+expEntryPageHeaderFieldPalceOfSupply);
			System.out.println("Entry Page Header Place OF Jurisdiction       :"+actEntryPageHeaderJurisdiction   +"  Value Expected : "+expEntryPageHeaderFieldJurisdiction);
			System.out.println("Entry Page Header Place OF Permit No          :"+actEntryPageHeaderPermitNumber   +"  Value Expected : "+expEntryPageHeaderFieldPermitNumber);
			
			boolean actMethod=actEntryPageHeaderFieldsDocNumber==expEntryPageHeaderFieldsDocNumber && actEntryPageHeaderFieldsDate==expEntryPageHeaderFieldsDate 
					/*&& actEntryPageHeaderFieldsPurchaseAc==expEntryPageHeaderFieldsPurchaseAc*/
					&& actEntryPageHeaderFieldsVendorAc==expEntryPageHeaderFieldsVendorAc && actEntryPageHeaderFieldRaiseReceipt==expEntryPageHeaderFieldRaiseReceipt
					&& actEntryPageHeaderFieldsDepartment==expEntryPageHeaderFieldsDepartment && actEntryPageHeaderFieldsDueDate==expEntryPageHeaderFieldsDueDate
					&& actEntryPageHeaderFieldsLocalExchRate==expEntryPageHeaderFieldsLocalExchRate && actEntryPageHeaderFieldsCurrency==expEntryPageHeaderFieldsCurrency
					&& actEntryPageHeaderFieldsWarehouse==expEntryPageHeaderFieldsWarehouse && actEntryPageHeaderJurisdiction==expEntryPageHeaderFieldJurisdiction
					&& actEntryPageHeaderFieldsExchRate==expEntryPageHeaderFieldsExchRate && actEntryPageHeaderPlaceOfSupply==expEntryPageHeaderFieldPalceOfSupply
					&& actEntryPageHeaderPermitNumber==expEntryPageHeaderFieldPermitNumber;
		
			String actResult= Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherVAT", 13, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 13, 8, actResult);
			
			if(actMethod==true)
			{
				System.out.println("Test Pass : entry Page Header Options Are Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 12, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 12, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 12, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		
		}
//ee
		@FindBy(xpath="//div[contains(text(),'Tax Code')]")
		private static WebElement voucherBodyTaxCodeName;
		
		@FindBy(xpath="//div[contains(text(),'VAT')]")
		private static WebElement voucherBodyVatName;
		
	    @FindBy(xpath="//div[contains(text(),'Taxable')]")
		private static WebElement voucherBodyTaxableName;			
		
	    @FindBy(xpath="//div[contains(text(),'Purchase Account')]")
		private static WebElement voucherBodyPurchaseAccountName;	
	  
	   
	  
	    
	    public boolean checkPurchaseVoucherVATEntryPageBodyFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherBodyItemName));
			
			boolean actBodyItemName             = voucherBodyItemName.isDisplayed();
			boolean actBodyWarehouseName        = voucherBodyWareHouseName.isDisplayed();
			boolean actBodyTaxCodeName          = voucherBodyTaxCodeName.isDisplayed();
			boolean actBodyPurchaseAccountName  = voucherBodyPurchaseAccountName.isDisplayed();
			boolean actBodyunits		        = voucherBodyUnitsName.isDisplayed();
			
			JavascriptExecutor js = (JavascriptExecutor) getDriver();
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyVatName);
			
			boolean actBodyAvgRateName  =voucherBodyAvgRateName.isDisplayed();
			boolean actBodyQtyName      =voucherBodyQtyName.isDisplayed();
			boolean actBodyRateName      =voucherBodyRateName.isDisplayed();
			boolean actBodyVATName      =voucherBodyVatName.isDisplayed();
			boolean actBodyGrossName     =voucherBodyGrossName.isDisplayed();
			
			
			js.executeScript("arguments[0].scrollIntoView();", voucherBodyRMAName);
			
			boolean actBodyTaxableName  =voucherBodyTaxableName.isDisplayed();
			
			boolean actBodyBatchName     =voucherBodyBatchName.isDisplayed();
			boolean actBodyBinsName      =voucherBodyBinsName.isDisplayed();
			boolean actBodyRMAName       =voucherBodyRMAName.isDisplayed();
			boolean actBodyExpiryDateName=voucherBodyExpirytDateName.isDisplayed();
			//boolean actvoucherBodyRemarksName =voucherBodyRemarksName.isDisplayed();
		   
			boolean actBodyR1C1         =select1stRow_1stColumn.isDisplayed();
			boolean actBodyR1C2         =select1stRow_2ndColumn.isDisplayed();
			boolean actBodyR1C3         =select1stRow_3rdColumn.isDisplayed();
			boolean actBodyR1C4         =select1stRow_4thColumn.isDisplayed();
			boolean actBodyR1C5         =select1stRow_5thColumn.isDisplayed();
			
			boolean expBodyItemName     =true;
			boolean expBodyWarehouseName=true;
			boolean expBodyTAxCodeName  =true;
			boolean expBodyPurchaseAccountName =true;
			boolean expBodyunits        =true;
			boolean expBodyAvgRateName  =true;
			boolean expBodyQtyName      =true;
			boolean expBodyVATName      =true;
			boolean expBodyTaxableName  =true;
			
			
			boolean expBodyRateName      =true;
			boolean expBodyGrossName     =true;
			boolean expBodyBatchName     =true;
			boolean expBodyBinsName      =true;
			boolean expBodyRMAName       =true;
			boolean expBodyExpiryDateName=true;
			//boolean expvoucherBodyRemarksName=  true;
			
		   
			boolean expBodyR1C1         =true;
			boolean expBodyR1C2         =true;
			boolean expBodyR1C3         =true;
			boolean expBodyR1C4         =true;
			boolean expBodyR1C5         =true;
			
			System.out.println("*************************** checkPurchaseVoucherVATEntryPageBodyFields  **********************************");
			
			
			System.out.println("PV Body Item Value Actual                :  " + actBodyItemName            +"  Value Expected : " + expBodyItemName);
			System.out.println("PV Body Warehouse Value Actual           :  " + actBodyWarehouseName       +"  Value Expected : " + expBodyWarehouseName);
			System.out.println("PV Body TaxCode Value Actual             :  " + actBodyTaxCodeName         +"  Value Expected : " + expBodyTAxCodeName);
			System.out.println("PV Body Purchase Account Value Actual    :  " + actBodyPurchaseAccountName +"  Value Expected : " + expBodyPurchaseAccountName);
			System.out.println("PV Body Units Value Actual               :  " + actBodyunits               +"  Value Expected : " + expBodyunits);
			System.out.println("PV Body Avg Rate Value Actual            :  " + actBodyAvgRateName         +"  Value Expected : " + expBodyAvgRateName);
			System.out.println("PV Body Qty Value Actual                 :  " + actBodyQtyName             +"  Value Expected : " + expBodyQtyName);
			System.out.println("PV Body VAT Value Actual                 :  " + actBodyVATName             +"  Value Expected : " + expBodyVATName);
			System.out.println("PV Body Taxable Value Actual             :  " + actBodyTaxableName         +"  Value Expected : " + expBodyTaxableName);

			System.out.println("PV Body Rate Value Actual                :  " + actBodyRateName           +"  Value Expected : " + expBodyRateName);
			System.out.println("PV Body Gross Value Actual               :  " + actBodyGrossName          +"  Value Expected : " + expBodyGrossName);
			System.out.println("PV Body Batch Value Actual               :  " + actBodyBatchName          +"  Value Expected : " + expBodyBatchName);
			
			System.out.println("PV Body Expiry Value Actual              :  " + actBodyExpiryDateName     +"  Value Expected : " + expBodyExpiryDateName);
			//System.out.println("PV Body Expiry Value Actual              :  " + actvoucherBodyRemarksName     +"  Value Expected : " + expvoucherBodyRemarksName);
			
			
			System.out.println("PV Body RMA Value Actual                 :  " + actBodyRMAName        +"  Value Expected : " + expBodyRMAName);
			System.out.println("PV Body Bins Value Actual                :  " + actBodyBinsName       +"  Value Expected : " + expBodyBinsName);
			System.out.println("PV Body R1C1 Value Actual                :  " + actBodyR1C1           +"  Value Expected : " + expBodyR1C1);
			System.out.println("PV Body R1C2 Value Actual                :  " + actBodyR1C2           +"  Value Expected : " + expBodyR1C2);
			System.out.println("PV Body R2C3 Value Actual                :  " + actBodyR1C3           +"  Value Expected : " + expBodyR1C3);
			System.out.println("PV Body R3C4 Value Actual                :  " + actBodyR1C4           +"  Value Expected : " + expBodyR1C4);
			System.out.println("PV Body R4C4 Value Actual                :  " + actBodyR1C5           +"  Value Expected : " + expBodyR1C5);
			
			
			boolean actMethod=actBodyItemName==expBodyItemName && actBodyWarehouseName==expBodyWarehouseName &&
					  actBodyTaxCodeName==expBodyTAxCodeName && actBodyAvgRateName==expBodyAvgRateName &&
				      actBodyQtyName==expBodyQtyName && actBodyVATName==expBodyVATName && actBodyunits==expBodyunits &&
				      actBodyTaxableName==expBodyTaxableName && actBodyPurchaseAccountName==expBodyPurchaseAccountName && 
				     
					
						 actBodyR1C1==expBodyR1C1 && actBodyR1C2==expBodyR1C2 &&
						 actBodyR1C3==expBodyR1C3 && actBodyR1C4==expBodyR1C4 && expBodyR1C5==actBodyR1C5 &&
				
		                actBodyRateName==expBodyRateName  && actBodyGrossName==expBodyGrossName &&
						actBodyBatchName==expBodyBatchName && actBodyExpiryDateName==expBodyExpiryDateName && 
						actBodyRMAName==expBodyRMAName && actBodyBinsName==expBodyBinsName;
		   

			String actResult=Boolean.toString(actMethod);
			String expResult=excelReader.getCellData("PurchaseVoucherVAT", 15, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 15, 8, actResult);
			
			if(actMethod==true) 
				{
					System.out.println(" Test Pass: entry Page Body Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 14, 9, resPass);
					
					js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
					
					return true;
				}
				else
				{
					System.out.println(" Test Fail: entry Page Body Options Are Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 14, 9, resFail);
					
					js.executeScript("arguments[0].scrollIntoView();", voucherBodyHeaderIndex);
					
					return false;
				}
		 }
	    catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 14, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		
		
		
		
		
		
		public boolean checkPurchaseVoucherVATEntryPageFooterFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToFooterBtn));
			jumpToFooterBtn.click();
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netLabel));
			
			boolean actEntryPageFooterFieldsNetLabel  =netLabel.isDisplayed();
			boolean actEntryPageFooterFieldsNetAmount =netAmount.isDisplayed();

			boolean expEntryPageFooterFieldsNetLabel  =true;
			boolean expEntryPageFooterFieldsNetAmount =true;

			System.out.println("****************************&************* checkPurchaseVoucherVATEntryPageFooterFields  ***************************************************");
			System.out.println("Entry Page Footer Fields Net Label Value Actual  : "+actEntryPageFooterFieldsNetLabel+   " Value Expected : "+expEntryPageFooterFieldsNetLabel);
			System.out.println("Entry Page Footer Fields Net Amount Value Actual : "+actEntryPageFooterFieldsNetAmount+  " Value Expected : "+expEntryPageFooterFieldsNetAmount);

					
			boolean actMethod=actEntryPageFooterFieldsNetLabel==expEntryPageFooterFieldsNetLabel && actEntryPageFooterFieldsNetAmount==expEntryPageFooterFieldsNetAmount;
			
			String actResult=Boolean.toString(actMethod);
			String expresult=excelReader.getCellData("PurchaseVoucherVAT", 17, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 17, 8, actResult.toUpperCase());
			
			
			if(actMethod==true)
			{
				System.out.println("Test Pass : entry Page Footer Options Are Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 16, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 16, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 16, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		
		

		public boolean checkPurchaseVoucherVATEntryPageDocumentNumber() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jumpToHeaderSectionBtn));
			jumpToHeaderSectionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			
			String actDocumentNumber  =documentNumberTxt.getAttribute("value");
			String expDocumentNumber  =excelReader.getCellData("PurchaseVoucherVAT", 19, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 19, 8, actDocumentNumber);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 20, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 21, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
			
	        enter_PvTaxCode.sendKeys(Keys.TAB);
	    
			
			boolean Taxcode=select1stRow_3rdColumn.getText().isEmpty();
			
			String actTaxcode=Boolean.toString(Taxcode);
			String expTaxcode=excelReader.getCellData("PurchaseVoucherVAT", 20, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 20, 8, actTaxcode.toUpperCase());
			
			System.out.println("***************************************** checkPurchaseVoucherNewEntryPageDocumentNumber  ***************************************************");
			System.out.println("Entry Page Open Docuemnt Number Value Actual  : "+actDocumentNumber   +" Value Expected : "+expDocumentNumber);
			
			
			if(actDocumentNumber.equalsIgnoreCase(expDocumentNumber) && actTaxcode.equalsIgnoreCase(expTaxcode))
			{
				System.out.println("Test Pass : Document No is 1");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 18, 9, resPass);
				
				firstRowIndex.click();
				
				deleteRowBtn.click();
				
				return true;
			}
			else
			{
				System.out.println("Test Fail : entry Page NOT Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 18, 9, resFail);
				
	            firstRowIndex.click();
				
				deleteRowBtn.click();
				
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 18, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		
		
		
		public boolean checkPurchaseOptionsInPurchaseVoucherVATEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			{
			
			purchaseAccountTxt.click();
			purchaseAccountTxt.sendKeys(Keys.SPACE);
			
			ArrayList<String>  actPVPurchaseAccount= new ArrayList<String>(); 
			
			int count=purchaseAccountListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=purchaseAccountListCount.get(i).getText();
				System.err.println("IN FOR LOOP : "+data);
				actPVPurchaseAccount.add(data);
				
			}
			
			System.err.println(actPVPurchaseAccount);
			
			String actPVPurchaseAccountValue=actPVPurchaseAccount.toString();
		    String expPVPurchaseAccountValue=excelReader.getCellData("PurchaseVoucherVAT", 21, 7);
		    
		    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 21, 8, actPVPurchaseAccountValue);
			
		    System.out.println("********************************************* checkPurchaseOptionsInPurchaseVoucherVATEntryPage  ********************************************************");
			System.out.println("Entry Page Warehouse Masters Value Actual  : "+actPVPurchaseAccountValue+"  Value Expected : "+expPVPurchaseAccountValue);
		    
		    	
		   if(actPVPurchaseAccountValue.equalsIgnoreCase(expPVPurchaseAccountValue))
			{
				System.out.println("Test Pass : Purchase Options Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 20, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Purchase Options Not Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 20, 9, resFail);
				return false;
			}
			
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 20, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
			
		

		public boolean checkPurchaseVoucherVATSaveWithOutInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expSaveWithInputPurchaseAccountValidationMsg     =excelReader.getCellData("PurchaseVoucherVAT", 23, 7);
			
			String actSaveWithInputPurchaseAccountValidationMessage=checkValidationMessage(expSaveWithInputPurchaseAccountValidationMsg);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 23, 8, actSaveWithInputPurchaseAccountValidationMessage);
			
			System.out.println("*********************************************** checkPurchaseVoucherVATSaveWithPurchaseInput  ********************************************");
			System.out.println("Entry Page Save with Purchase Input Value Actual  : "+actSaveWithInputPurchaseAccountValidationMessage  +" Value Expected : "+expSaveWithInputPurchaseAccountValidationMsg+expSaveWithInputPurchaseAccountValidationMsg);	
		
		    	
			if(actSaveWithInputPurchaseAccountValidationMessage.equalsIgnoreCase(expSaveWithInputPurchaseAccountValidationMsg) )
			{
				System.out.println("Test Pass : Error Message Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 22, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 22, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 22, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
			
		

	public boolean checkPurchaseVoucherVATVendorOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	 {
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();
		
		vendorAccountTxt.sendKeys(Keys.SPACE);	
		
		ArrayList<String>  actVendorAccountList= new ArrayList<String>(); 

		int count=vendorAccountListCount.size();

		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			System.err.println("IN FOR LOOP : "+data);
			actVendorAccountList.add(data);
			
		}
		  
		vendorAccountTxt.sendKeys(Keys.TAB);
		
		
		
		System.err.println(actVendorAccountList);
		
		String actVendorAccountValue=actVendorAccountList.toString();
		
		String expVendorAccountValue="[Bank, Cash, Vendor A, Vendor B]";
		
		excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 25, 8, actVendorAccountValue);
		

	    System.out.println("********************************************* checkPurchaseVoucherVATVendorOptions  ********************************************************");
		System.out.println("Entry Page Warehouse Masters Value Actual  : "+actVendorAccountValue+"      Value Expected : "+expVendorAccountValue);
	    
		
	   if(actVendorAccountValue.equalsIgnoreCase(expVendorAccountValue))
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 24, 9, resPass);
			return true;
		}
		else
		{
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 24, 9, resFail);
			return false;
		}
	 }
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 24, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		
	}


		public boolean checkPurchaseVoucherVATSaveWithVendorInput() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		try
		{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		
		String expSaveWithInputVendorAccountValidationMsg     =excelReader.getCellData("PurchaseVoucherVAT", 27, 7);
		
		String actSaveWithInputVendorAccountValidationMessage=checkValidationMessage(expSaveWithInputVendorAccountValidationMsg);
		
		excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 27, 8, actSaveWithInputVendorAccountValidationMessage);
		
		
			
			System.out.println("*********************************************** checkPurchaseVoucherVATSaveWithVendorInput  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actSaveWithInputVendorAccountValidationMessage  +" Value Expected : "+expSaveWithInputVendorAccountValidationMsg);	
			
		    	
			if(actSaveWithInputVendorAccountValidationMessage.startsWith(expSaveWithInputVendorAccountValidationMsg))
					
		{
			System.out.println("Test Pass : Error Message Displayed");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 26, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile,"PurchaseVoucherVAT", 26, 9, resFail);
			return false;
		}
	   }
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 26, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			return false;
		}
	 }


		public boolean checkDueDateOptioninPurchaseVoucherVATEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
			voucherHeaderDueDate.click();
			
			DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
			
	        String actCurrentDateInSimpleFormat=dateTxt.getAttribute("value");
			 
	        String expVoucherHeaderDueDate=voucherHeaderDueDate.getAttribute("value");
			
	        
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 28, 7, actCurrentDateInSimpleFormat);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 28, 8, expVoucherHeaderDueDate);
	        
			System.out.println("*********************************************** checkDueDateOptioninPurchaseVoucherVatEntryPage  ********************************************");
			System.out.println("Entry Page Due Date  Value Actual  : "+actCurrentDateInSimpleFormat  +" Value Expected : "+expVoucherHeaderDueDate);	

			if(actCurrentDateInSimpleFormat.equalsIgnoreCase(expVoucherHeaderDueDate))
			{
				System.out.println("Test Pass : Date Displayed as Current Date ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 28, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Date Not  Displayed as Current Date");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 28, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 28, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
			
		
		
		@FindBy(xpath="//tbody[@id='id_header_10_table_body']/tr/td[2]")
		private static List<WebElement> currencyListCount;	
		 
		 
		public boolean checkCurrencyOptioninPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				voucherHeaderCurrency.click();
				voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
				voucherHeaderCurrency.sendKeys(Keys.SPACE);	
				
				ArrayList<String>  actvoucherHeaderCurrency= new ArrayList<String>(); 
				
	            int count=currencyListCount.size();
				
				System.err.println(count);
				
				for(int i=0 ; i < count ;i++)
				{
					String data=currencyListCount.get(i).getText();
					System.err.println("IN FOR LOOP : "+data);
					actvoucherHeaderCurrency.add(data);
					
				}
				
				System.err.println(actvoucherHeaderCurrency);
				
				voucherHeaderCurrency.sendKeys(Keys.TAB);
				
				String actCurrencyList=actvoucherHeaderCurrency.toString();
				
				String expCurrencyList=excelReader.getCellData("PurchaseVoucherVAT", 30, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 30, 8, actCurrencyList);
				
				if(actCurrencyList.equalsIgnoreCase(expCurrencyList))
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 29, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 29, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 29, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
				
			
			public boolean checkPurchaseVoucherVATVouchersEntryPageNew() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				documentNumberTxt.click();
				documentNumberTxt.clear();
				documentNumberTxt.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 32, 6));
				documentNumberTxt.sendKeys(Keys.TAB);
				
				String actGetDocumentNumberInputs=documentNumberTxt.getAttribute("value");
				String expGetDocumentNumberInputs=excelReader.getCellData("PurchaseVoucherVAT", 33, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 33, 8, actGetDocumentNumberInputs);
				
				System.out.println("Test Pass : Entered 2 in DOC NO");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
				new_newBtn.click();
				
				boolean res = getIsAlertPresent();
				
				if(res==true)
				{
				
					getWaitForAlert();
					
					getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
					
					String actAlertMessageOnClickOnNewBtn=getDriver().switchTo().alert().getText();
					String expAlertMessageOnClickOnNewBtn=excelReader.getCellData("PurchaseVoucherVAT", 34, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 34, 8, actAlertMessageOnClickOnNewBtn);
					
					
					getDriver().switchTo().alert().accept();
				}
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				String actGetDocumentNumberInputAfterClickOnNewBtn=documentNumberTxt.getAttribute("value");
				String expGetDocumentNumberInputAfterClickOnNewBtn=excelReader.getCellData("PurchaseVoucherVAT", 35, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 35, 8, actGetDocumentNumberInputAfterClickOnNewBtn);
				
				System.out.println("*********************************************** checkPurchaseVoucherNewVouchersEntryPageNew  ********************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actGetDocumentNumberInputs                 +" Value Expected : "+expGetDocumentNumberInputs);	
				//System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actAlertMessageOnClickOnNewBtn             +" Value Expected : "+expAlertMessageOnClickOnNewBtn);
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actGetDocumentNumberInputAfterClickOnNewBtn+" Value Expected : "+expGetDocumentNumberInputAfterClickOnNewBtn);
				
				
				if(actGetDocumentNumberInputs.equalsIgnoreCase(expGetDocumentNumberInputs) /*&& actAlertMessageOnClickOnNewBtn.equalsIgnoreCase(expAlertMessageOnClickOnNewBtn)*/ 
						&& actGetDocumentNumberInputAfterClickOnNewBtn.equalsIgnoreCase(expGetDocumentNumberInputAfterClickOnNewBtn))
				{
					System.out.println("Test Pass : New Option in Entry Page ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 31, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :New Option in Entry Page ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 31, 9, resFail);
					return false;
			}
		}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 31, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
				
			}

		
		public boolean checkPurchaseVoucherVATWithCurrencyInputAndExcgRate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			

	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys(Keys.END);
			vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			vendorAccountTxt.sendKeys(Keys.SPACE);
			
			int vendorcount=vendorAccountListCount.size();
			
			System.err.println(vendorcount);
			
			for(int i=0 ; i < vendorcount ;i++)
			{
				String data=vendorAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 38, 6)))
				{
					vendorAccountListCount.get(i).click();
					
					break;
				}
			}
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			raiseReceiptsChkBox.sendKeys(Keys.TAB);
			voucherHeaderDueDate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			voucherHeaderCurrency.click();;
			voucherHeaderCurrency.sendKeys(Keys.SHIFT,Keys.HOME);
			
			voucherHeaderCurrency.sendKeys(Keys.SPACE);
			
			int currencycount=currencyListCount.size();
			
			System.err.println(currencycount);
				
			for(int i=0 ; i < currencycount ;i++)
			{
				String data=currencyListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 39, 6)))
				{
					currencyListCount.get(i).click();
					
					break;
				}
			}
				
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			voucherHeaderExchangeRate.click();
			
			
			String actExchangeRate=voucherHeaderExchangeRate.getAttribute("value");
			String expExchangeRate=excelReader.getCellData("PurchaseVoucherVAT", 40, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 40, 8, actExchangeRate);

			System.out.println("*********************************************** checkPurchaseVoucherNewWithCurrencyInputAndExcgRate  ********************************************");
			System.out.println("Entry Page Exchange Rate Value Actual  : "+actExchangeRate  +" Value Expected : "+expExchangeRate);	
			
			
			if (actExchangeRate.equalsIgnoreCase(expExchangeRate))
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 36, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 36, 9, resFail);
				return false;
			}	
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 36, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
			
		}
		
		
		
		public boolean checkPurchaseVoucherVATDepartment() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			WebElement options=departmentTxt;
			
			ArrayList<String> actDepartmentList= new ArrayList<String>(); 
		

			int count=departmentListCount.size();
			
			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=departmentListCount.get(i).getText();
				System.err.println("IN FOR LOOP : "+data);
				actDepartmentList.add(data);
				
			}
			
			System.err.println(actDepartmentList);
			
			
			System.out.println("actDepartmentList"+actDepartmentList);
			
			
			String actDepartmentValue=actDepartmentList.toString();
			String expDepartmentValue="[AMERICA, DUBAI, INDIA, WALES]";
			

			System.out.println("********************************************* checkPurchaseVoucherVATDepartment  ********************************************************");
			System.out.println("Entry Page Department Masters Value Actual  : "+actDepartmentValue     +"     Value Expected : "+expDepartmentValue);
		   
		   if(actDepartmentValue.equalsIgnoreCase(expDepartmentValue))
			{
				System.out.println("Test Pass : Error Message Displayed");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 41, 9, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 41, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 41, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		
		}
		
		@FindBy(xpath="//*[@id='id_header_268435459_table_body']/tr/td[2]")
		private static List<WebElement> openingBalDepartmentList;

		
		
		public boolean checkExchangeRateAndLocalExchangeRateWithCurrencyINRInPurchaseVoucherVAT()throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			voucherHeaderDueDate.click();
			voucherHeaderDueDate.sendKeys(Keys.TAB);
			
			voucherHeaderCurrency.sendKeys(Keys.TAB);
			
			voucherHeaderExchangeRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			departmentTxt.sendKeys(Keys.SPACE);
			Thread.sleep(2000);
			int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 43, 6)))
				{
					departmentListCount.get(i).click();
					break;
				}
			}
				
			Thread.sleep(1000);
			
			departmentTxt.sendKeys(Keys.TAB);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderExchangeRate));
			String actExchnageRateOnChangingCurrencyToINR=voucherHeaderExchangeRate.getAttribute("value");
			String expExchnageRateOnChangingCurrencyToINR=excelReader.getCellData("PurchaseVoucherVAT", 44, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 44, 8, actExchnageRateOnChangingCurrencyToINR);
			
			
			String actLocalExchnageRateOnChangingCurrencyToINR=voucherHeaderLocalExchangeRate.getAttribute("value");
			String expLocalExchnageRateOnChangingCurrencyToINR=excelReader.getCellData("PurchaseVoucherVAT", 45, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 45, 8, actLocalExchnageRateOnChangingCurrencyToINR);
			
			System.out.println("*********************************************** checkExchangeRateAndLocalExchangeReatewithCurrencyINR  ********************************************");
			System.out.println("Exchange Rate  Value Actual             : "+actExchnageRateOnChangingCurrencyToINR       +" Value Expected : "+expExchnageRateOnChangingCurrencyToINR);	
			System.out.println("Local Exchange Rate  Value Actual       : "+actLocalExchnageRateOnChangingCurrencyToINR  +" Value Expected : "+expLocalExchnageRateOnChangingCurrencyToINR);
		
			
			
			if (actExchnageRateOnChangingCurrencyToINR.equalsIgnoreCase(expExchnageRateOnChangingCurrencyToINR) 
					&& actLocalExchnageRateOnChangingCurrencyToINR.equalsIgnoreCase(expLocalExchnageRateOnChangingCurrencyToINR) )
			   {
					System.out.println("Test Pass : Exchange Rate Is Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 43, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :  Exchange Rate Is  NOt Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 43, 9, resFail);
					return false;
				}	
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 43, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		
		}


					
		  @FindBy(xpath="//*[@id='iCurrencyId']")
		  private static WebElement localCurrencyComboBox;
		  
		  @FindBy(xpath="//input[@id='Jurisdiction']")
	      private static WebElement jurisdictionTxtInDepartmentMaster;
		
		  
		  @FindBy(xpath="//a[contains(text(),'VAT Settings')]")
			private static WebElement vatSettingsTab;
			
			@FindBy(xpath="//input[@id='PlaceOfSupply']")
			private static WebElement masterplaceofSupplyTxt;
			
			@FindBy(xpath="//tbody[@id='PlaceOfSupply_table_body']/tr/td[2]")
			private static List<WebElement> masterPlaceOfSupplyList; 
			
			public boolean checkSettingPlaceofSupplyForvendorAInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
					vendorAccountTxt.click();
					vendorAccountTxt.sendKeys(Keys.END);
					vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					vendorAccountTxt.sendKeys(Keys.SPACE);
					
					int vendorcount=vendorAccountListCount.size();
					
					System.err.println(vendorcount);
					
					for(int i=0 ; i < vendorcount ;i++)
					{
						String data=vendorAccountListCount.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 429, 6)))
						{
							vendorAccountListCount.get(i).click();
							
							break;
						}
					}
					
					vendorAccountTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
					vendorAccountTxt.click();
					
					vendorAccountTxt.sendKeys(Keys.CONTROL + "e");
					
					Thread.sleep(1000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatSettingsTab));
					vatSettingsTab.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterplaceofSupplyTxt));
					masterplaceofSupplyTxt.click();
					masterplaceofSupplyTxt.sendKeys(Keys.END);
					masterplaceofSupplyTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					masterplaceofSupplyTxt.sendKeys(Keys.SPACE);
					
					int masterPlaceOfSupplyListCount=masterPlaceOfSupplyList.size();
					
					System.err.println(masterPlaceOfSupplyListCount);
					
					for(int i=0 ; i < masterPlaceOfSupplyListCount ;i++)
					{
						String data=masterPlaceOfSupplyList.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 430, 6)))
						{
							masterPlaceOfSupplyList.get(i).click();
							
							break;
						}
					}
					
					masterplaceofSupplyTxt.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
					account_saveBtn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
					new_newBtn.click();
					
					getWaitForAlert();
					
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
					vendorAccountTxt.click();
					vendorAccountTxt.sendKeys(Keys.END);
					vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					vendorAccountTxt.sendKeys(Keys.SPACE);
					
					
					for(int i=0 ; i < vendorcount ;i++)
					{
						String data=vendorAccountListCount.get(i).getText();
						
						if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 429, 6)))
						{
							vendorAccountListCount.get(i).click();
							
							break;
						}
					}
					
					vendorAccountTxt.sendKeys(Keys.TAB);
			
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
					String actplaceofSupplyTxt = placeofSupplyTxt.getAttribute("value");
					String expplaceofSupplyTxt = excelReader.getCellData("PurchaseVoucherVAT", 430, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 430, 8, actplaceofSupplyTxt);
					
					
					System.out.println("placeofSupplyTxt Actual   : "+actplaceofSupplyTxt);
					System.out.println("placeofSupplyTxt Expected : "+expplaceofSupplyTxt);
					
					if(actplaceofSupplyTxt.equalsIgnoreCase(expplaceofSupplyTxt)) 
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 429, 9, resPass);
						System.out.println("Test Pass :Department Screen Displayed");
						return true;
					}
					else
					{
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 429, 9, resFail);
						System.out.println("Test Fail : Department Screen NOT Displayed");
						return false;
					}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 429, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
		    }

			// Adding New vendor In vendor Account 

						@FindBy(xpath="//label[contains(text(),'Vendor Account')]")
						private static WebElement VendorAccountLabel;

						//Name
						@FindBy(xpath="//input[@id='sName']")
						public static WebElement nameTxt;

						//Code
						@FindBy(xpath="//input[@id='sCode']")
						public static WebElement codeTxt;

						//AccountType	
						@FindBy(xpath="//select[@id='iAccountType']")
						public static WebElement accountTypeDropdown;

						//AccountType	
						@FindBy(xpath="//input[@id='oc_Group']")
						public static WebElement account_groupTxt;

						//CreditLimit
						@FindBy(xpath="//input[@id='fCreditLimit']")
						public static WebElement creditLimitTxt;

						//CreditDays
						@FindBy(xpath="//input[@id='iCreditDays']")
						public static WebElement creditdaysTxt;

						//ChequeDiscountLimit
						@FindBy(xpath="//input[@id='fChequeDiscountLimit']")
						public static WebElement chequeDiscountLimitTxt;

						//Rate Of Interest
						@FindBy(xpath="//input[@id='fRateofinterest']")
						public static WebElement rateofinterestTxt;

						//BankAccount
						@FindBy(xpath="//input[@id='iBankAc']")
						public static WebElement bankAccountTxt;

						@FindBy(xpath="//*[@id='iBankAc_input_image']/span")
						public static WebElement bankAccount_ExpansionBtn;

						@FindBy(xpath="//*[@id='iBankAc_input_settings']/span")
						public static WebElement bankAccount_SettingBtn;

						/*@FindBy(xpath="/html/body/section/div[8]/div[1]/div/div/div/div/div[1]/div/div[2]/div[2]/div[2]/div/ul/li[2]/button[2]")
						public static WebElement account_saveBtn;*/
						               
						@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[2]/div[3]/div[2]/div/ul/li[2]/button[2]/i")
						public static WebElement account_saveBtn;
						
						@FindBy(xpath="//button[@class='btn-link theme_icon-color closeMasterPartial btnGenerateMasterclose clsMasterPopupSaveClose']")
						public static WebElement account_CloseBtn;

						 @FindBy(xpath="//a[contains(text(),'General')]")
						 private static WebElement account_GeneralTab;
							
						 @FindBy(xpath="//a[contains(text(),'Settings')]")
						 private static WebElement account_SettingsTab;
							 
						 @FindBy(xpath="//a[contains(text(),'Details')]")
						 private static WebElement account_DetailsTab;
							
						 @FindBy(xpath="//a[contains(text(),'Print Layout')]")
						 private static WebElement account_PrintLayout;
							
						 @FindBy(xpath="//a[contains(text(),'Tree Tab Update')]")
						 private static WebElement account_TreeTabUpdate;
							
						 @FindBy(xpath="//a[contains(text(),'Document Tab')]")
						 private static WebElement account_DocumentTab;
							
						 @FindBy(xpath="//a[contains(text(),'Create Tab')]")
						 private static WebElement account_CreateTab;

						 
						 @FindBy(xpath="//a[contains(text(),'VAT Settings')]")
						 private static WebElement account_VatSettingTab;
						 
						 @FindBy(xpath="//*[@id='divBtnGroup6']/div/a")
						 private static WebElement account_VatSettingsTab;
						 
						 @FindBy(xpath="//*[@id='id_transactionentry_header1_section']/div/div[3]/div[3]/label")
						 private static WebElement accountClickOnVoucherEntryPage;	
		
		

		public boolean checkDepartmentMasterCreationPageOnClickOnEditMasterInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.click();
			
			departmentTxt.sendKeys(Keys.END);
			
			departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
							
			departmentTxt.sendKeys(Keys.SPACE);
			
			
	        int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 51, 6)))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
			
			departmentTxt.sendKeys(Keys.CONTROL + "e");
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
			 
			boolean actDepartmentName          = nameTxt.isDisplayed();
			boolean actDepartmentCode          = codeTxt.isDisplayed();
			boolean actDepartmentCurrency      = localCurrencyComboBox.isDisplayed();
			boolean actDepartmentJurisdiction  = jurisdictionTxtInDepartmentMaster.isDisplayed();
			boolean actDepartmentSaveBtn       = account_saveBtn.isDisplayed();
			boolean actDepartmentCloseBtn      = account_CloseBtn.isDisplayed();
			
			boolean expDepartmentName          = true;
			boolean expDepartmentCode          = true;
			boolean expDepartmentCurrency      = true;
			boolean expDepartmentJurisdiction  = true;
			boolean expDepartmentSaveBtn       = true;
			boolean expDepartmentCloseBtn      = true;
			
			System.out.println("****************************** checkVendorAccountLabelInVoucher  ********************************************");
			
			System.out.println("actDepartmentName          :"+actDepartmentName		    +" Value Expected : "+expDepartmentName);
			System.out.println("actDepartmentCode          :"+actDepartmentCode		    +" Value Expected : "+expDepartmentCode);
			System.out.println("actDepartmentCurrency      :"+actDepartmentCurrency		+" Value Expected : "+expDepartmentCurrency);
			System.out.println("actDepartmentJurisdiction  :"+actDepartmentJurisdiction	+" Value Expected : "+expDepartmentJurisdiction);
			System.out.println("actDepartmentSaveBtn       :"+actDepartmentSaveBtn	    +" Value Expected : "+expDepartmentSaveBtn);
			System.out.println("actDepartmentCloseBtn      :"+actDepartmentCloseBtn		+" Value Expected : "+expDepartmentCloseBtn);
			
			
			String actGetDepartmentName=nameTxt.getAttribute("value");
			String expGetDepartmentName=excelReader.getCellData("PurchaseVoucherVAT", 47, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 47, 8, actGetDepartmentName);
			
			System.out.println("actDepartmentCurrency       :"+actGetDepartmentName		+" Value Expected : "+expGetDepartmentName);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxtInDepartmentMaster));
			jurisdictionTxtInDepartmentMaster.click();
			
			jurisdictionTxtInDepartmentMaster.sendKeys(Keys.END);
		
			jurisdictionTxtInDepartmentMaster.sendKeys(Keys.SHIFT,Keys.HOME);
			
			jurisdictionTxtInDepartmentMaster.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 48, 6));
			Thread.sleep(2000);
			jurisdictionTxtInDepartmentMaster.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(account_saveBtn));
			account_saveBtn.click();
			
			boolean actMethod=actDepartmentName==expDepartmentName && actDepartmentCode==expDepartmentCode && actDepartmentCurrency==expDepartmentCurrency
					&& actDepartmentJurisdiction==expDepartmentJurisdiction && actDepartmentSaveBtn==expDepartmentSaveBtn
					&& actDepartmentCloseBtn==expDepartmentCloseBtn && actGetDepartmentName.equalsIgnoreCase(expGetDepartmentName);
			
			String actDisplayResult=Boolean.toString(actMethod);
			String expDisplayResult=excelReader.getCellData("PurchaseVoucherVAT", 49, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 49, 8, actDisplayResult.toUpperCase());
			
			if(actMethod==true) 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 46, 9, resPass);
				System.out.println("Test Pass :Department Screen Displayed");
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 46, 9, resFail);
				System.out.println("Test Fail : Department Screen NOT Displayed");
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 46, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
	    }
		

		
	@FindBy(xpath="//*[@id='id_header_268435470_table_body']/tr")
	private static List<WebElement>  placeOfSupplyList;
		
		public boolean checkDepartmentMasterUpdateByClickOnSaveInPurchaseVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				if(getIsAlertPresent())
				{
					getWaitForAlert();
					
					getAlert().accept();
					
				}
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
				grid_ChkBox1.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
				deleteBtn.click();
				
				if(getIsAlertPresent())
				{
					getWaitForAlert();
					
					getAlert().accept();
					
				}
				
				checkUserFriendlyMessage();
				
				Thread.sleep(3000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homePageAllVouchersView));
				homePageAllVouchersView.click();
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
				newBtn.click();
				
				checkUserFriendlyMessage();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.END);
				vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				vendorAccountTxt.sendKeys(Keys.SPACE);
				
				int vendorcount=vendorAccountListCount.size();
				
				System.err.println(vendorcount);
				
				for(int i=0 ; i < vendorcount ;i++)
				{
					String data=vendorAccountListCount.get(i).getText();
					
					if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 429, 6)))
					{
						vendorAccountListCount.get(i).click();
						
						break;
					}
				}
				
				vendorAccountTxt.sendKeys(Keys.TAB);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			departmentTxt.sendKeys(Keys.END);
			
			departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
							
			departmentTxt.sendKeys(Keys.SPACE);
			
			
	        int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase("AMERICA"))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actDepartmentCurrency     =jurisdictionTxt.getAttribute("value");
			
			String expDepartmentCurrency     =excelReader.getCellData("PurchaseVoucherVAT", 52, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 52, 8, actDepartmentCurrency);
			
			System.out.println("Test"+jurisdictionTxt.getText());
			
			
			System.out.println("actDepartmentName       :"+actDepartmentCurrency		+" Value Expected : "+expDepartmentCurrency);
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
			placeofSupplyTxt.click();
			placeofSupplyTxt.sendKeys(Keys.SPACE);
			
	        int placeOfSupplyListCount=placeOfSupplyList.size();
			
			System.err.println(placeOfSupplyListCount);
				
			for(int i=0 ; i < placeOfSupplyListCount ;i++)
			{
				String data=placeOfSupplyList.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 53, 6)))
				{
					placeOfSupplyList.get(i).click();
					
					break;
				}
			}
				
			placeofSupplyTxt.sendKeys(Keys.TAB);	*/
			
			
			if(actDepartmentCurrency.equalsIgnoreCase(expDepartmentCurrency)) 
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 50, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 50, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 50, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
	    }


	    @FindBy(xpath="//input[@id='id_body_536870916']")
	    private static WebElement enter_WarehouseTxt;
		
	    @FindBy(xpath="//*[@id='id_body_536870916_table_body']/tr")
	    private static List<WebElement> pvvGridWarehouseList;
		
	    @FindBy(xpath="//*[@id='id_body_23_table_body']/tr")
	    private static List<WebElement> pvvGridItemList;
	  
	  
	    

		public boolean checkTaxCodeBySelectingStandardRateItemInPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		  try
		  {
			  

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				vendorAccountTxt.click();
				vendorAccountTxt.sendKeys(Keys.END);
				vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				
				Thread.sleep(2000);
				vendorAccountTxt.sendKeys("Vendor B");
				Thread.sleep(2000);
				vendorAccountTxt.sendKeys(Keys.TAB);	
				
				if(getIsAlertPresent())
				{
					getWaitForAlert();
					
					getAlert().accept();
				}
	            		    	             
	            departmentTxt.click();
	            departmentTxt.sendKeys(Keys.END);
	            departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	            departmentTxt.sendKeys("AMERICA");
	            Thread.sleep(2000);
	            departmentTxt.sendKeys(Keys.TAB);
	            
	            if(getIsAlertPresent())
				{
					getWaitForAlert();
					
					getAlert().accept();
				}
	            

	            Thread.sleep(2000);
             
            	 placeofSupplyTxt.sendKeys(Keys.HOME);
            	 placeofSupplyTxt.sendKeys(Keys.SHIFT,Keys.END);
            	 placeofSupplyTxt.sendKeys("Dubai");
            	 Thread.sleep(2000);
            	 placeofSupplyTxt.sendKeys(Keys.TAB);
            	 
            	 jurisdictionTxt.click();
            	 Thread.sleep(2000);
            	 jurisdictionTxt.sendKeys(Keys.HOME);
            	 jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.END);
            	 jurisdictionTxt.sendKeys("Abu Dhabi");
            	 Thread.sleep(2000);
            	 jurisdictionTxt.sendKeys(Keys.TAB);
            	 Thread.sleep(2000);
	            	 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoSideBarExpandBtn));
			infoSideBarExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
			firstRowIndex.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			deleteRowBtn.click();
			
			Thread.sleep(2000);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 55, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 56, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			
			String actWarehouse=select1stRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 55, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 55, 8, actWarehouse);
			
			
			String actItem=select1stRow_2ndColumn.getText();
			String expItem=excelReader.getCellData("PurchaseVoucherVAT", 56, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 56, 8, actItem);
			
			
			String actTaxCode=select1stRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 57, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 57, 8, actTaxCode);
			
			String actPurchaseAccount=select1stRow_4thColumn.getText();
			String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 54, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 54, 8, actPurchaseAccount);
			
			
			String actUnits=select1stRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 58, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 58, 8, actUnits);
			
			System.out.println("************************************checkTaxCodeBySelectingStandardRateItemInPurchaseVoucherBody*************");
			
			System.out.println("WAREHOUSE      :"+actWarehouse		+" Value Expected : "+expWarehouse);
			System.out.println("ITEM           :"+actItem		    +" Value Expected : "+expItem);
			System.out.println("Tax Code       :"+actTaxCode		+" Value Expected : "+expTaxCode);
			System.out.println("UNITS          :"+actUnits		    +" Value Expected : "+expUnits);
			System.out.println("PurchaseAccount           : " + actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			
			if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
					actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
			{
				System.out.println("Test Pass : Data Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 54, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 54, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 54, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		

		public boolean checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		    try
		    {
		    	
		    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
				select1stRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
				select1stRow_7thColumn.click();
				
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
				select1stRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
				select1stRow_9thColumn.click();
		    	
		    	
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
				
				String actR1C1AVGRate =select1stRow_7thColumn.getText();			
				String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 60, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 60, 8, actR1C1AVGRate);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
				String actR1C1AVGRateO =select1stRow_8thColumn.getText();			
				String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 61, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 61, 8, actR1C1AVGRateO);
						
						
				System.out.println("******************checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInPurchaseVoucherBody**********");
				
				System.out.println("Entry Page Avg Rate Value Actual      : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
				System.out.println("Entry Page Avg Rate (o) Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
												
				if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && 
						actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
				{
					System.out.println("Test Pass : Data Entered in first Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 59, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in first Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 59, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 59, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		
		
		
		public boolean checkGrossBySelectingStandardRateIteminPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 63, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 64, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
			String actR1C1Gross =select1stRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 65, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 65, 8, actR1C1Gross);
					
			System.out.println("*********************************************** checkGrossBySelectingStandardRateIteminPurchaseVoucherBody  ********************************************");
			System.out.println("Entry Page Gross Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
			{
				System.out.println("Test Pass : Gross Value AS Expected ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 62, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Gross Value is Not Expected ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 62, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 62, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		
		
		/*@FindBy(xpath="//input[@id='id_body_33554503']")
		private static WebElement enter_PvVat;*/
		
		//input[@id='id_body_33554485']
		//input[@id='id_body_33554511']
		
		@FindBy(xpath="//input[@id='id_body_33554496']")
		private static WebElement enter_PvVat;
		
		
		
		public boolean checkVATValueBySelectingStandardRateIteminPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			
			enter_PvVat.sendKeys(Keys.TAB);
			
			String actR1C1VAT =select1stRow_14thColumn.getText();			
			String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 67, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 67, 8, actR1C1VAT);
			
					
			System.out.println("*******************************checkVATValueBySelectingStandardRateIteminPurchaseVoucherBody****************");
			
			System.out.println("Entry Page VAT Value  Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

			
			if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
			{
				System.out.println("Test Pass : Data Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 66, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 66, 9, resFail);
				return false;
			}
		  }
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 66, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		
		
		
		
		/*@FindBy(xpath="//input[@id='id_body_33554504']")
		private static WebElement enter_PvTaxable;*/
		     
		//input[@id='id_body_33554486']
		
		//input[@id='id_body_33554512']
		
		
		@FindBy(xpath="//input[@id='id_body_33554497']")
		private static WebElement enter_PvTaxable;
		
		@FindBy(xpath="//tbody[@id='id_body_16777313_table_body']/tr/td[2]")
		private static List<WebElement> pvvGridTaxCodeList;
		
		@FindBy(xpath="//input[@id='id_body_16777313']")
		private static WebElement enter_PvTaxCode;
		
		/*@FindBy(xpath="//tbody[@id='id_body_16777312_table_body']/tr/td[2]")
		private static List<WebElement> pvvGridTaxCodeList;
		
		@FindBy(xpath="//input[@id='id_body_16777312']")
		private static WebElement enter_PvTaxCode;*/
		
		
		public boolean checkTaxableValueBySelectingStandardRateItemAndClickonSaveWithoutBatch() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
			String actR1C1Taxable =select1stRow_15thColumn.getText();			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 68, 7);
		
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 68, 8, actR1C1Taxable);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage	= excelReader.getCellData("PurchaseVoucherVAT", 69, 7);
			
			
			String actMessage	=checkValidationMessage(expMessage);


			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 69, 8, actMessage);
			
			
			System.out.println("******************************checkTaxableValueBySelectingStandardRateItemAndClickonSaveWithoutBatch************************************");
			
			System.out.println("Entry Page Taxable Value Actual                          : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);
			System.out.println("Message Displayed As Clcik On SAve Without Batch Value   : "+actMessage   +" Value Expected : "+expMessage);
			
											
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable)  && actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println("Test Pass : Displayed Taxable Value and Message  Dispalyed As Excepted ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 68, 9, resPass);
				return true;
			}	
			else
			{
				System.out.println("Test Fail :Not Displayed Taxable Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 68, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 68, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		
		
		public boolean checkBatchValueandExpireyDateInPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));	
			select1stRow_16thColumn.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.click();
			enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 71, 6));
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage	= excelReader.getCellData("PurchaseVoucherVAT", 70, 7);
			String actMessage	=checkValidationMessage(expMessage);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 70, 8, actMessage);
			
			
			String actBatchName=select1stRow_16thColumn.getText();
			String expBatchName=excelReader.getCellData("PurchaseVoucherVAT", 71, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 71, 8, actBatchName);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
	        select1stRow_18thColumn.click();
			
	        Calendar calendar = Calendar.getInstance();
			
		    calendar.add(Calendar.DATE, 2);
		
		    Date date = calendar.getTime();
		
		    DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
		    
		    System.out.println(dfr.format(date).toString());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.click();
			enter_Expirydate.sendKeys(Keys.END);
			enter_Expirydate.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_Expirydate.sendKeys(dfr.format(date).toString());
			enter_Expirydate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			//Date date=new Date();
			System.out.println(df.format(date));
			
			String actCurrentDate =select1stRow_18thColumn.getText();			
			
			String expCurrentDate = df.format(date);
			
			System.out.println("*********************************************** checkBatchValueInPurchaseVoucherBody  ********************************************");
			System.out.println("Entry Page Current Date  Value Actual  : "+actCurrentDate   +" Value Expected : "+expCurrentDate);
			System.out.println("Entry Page Validation Message          : "+actMessage       +" Value Expected : "+expMessage);
			System.out.println("Entry Page Batch Name  Value Actual    : "+actBatchName   +" Value Expected : "+expBatchName);
											
			if(actMessage.equalsIgnoreCase(expMessage) && actCurrentDate.equalsIgnoreCase(expCurrentDate) && actBatchName.equalsIgnoreCase(expBatchName) )
			{
				System.out.println("Test Pass : Displayed Batch Name and Expirey date ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 70, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Displayed Batch Name and Expirey date");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 70, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 70, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		

		
		public boolean checkTaxCodeBySelectingStandardRateItemInSecondRowOfPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			enter_WarehouseTxt.sendKeys(Keys.END);
			enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 73, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
	        
	       getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		   enter_ItemTxt.click();
		   enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 74, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			select2ndRow_5thColumn.click();
								
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actWarehouse=select2ndRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 73, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 73, 8, actWarehouse);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_2ndColumn));
			String actItem=select2ndRow_2ndColumn.getText();
			String expItem=excelReader.getCellData("PurchaseVoucherVAT", 74, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 74, 8, actItem);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
			String actTaxCode=select2ndRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 75, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 75, 8, actTaxCode);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
			String actPurchaseAccount=select2ndRow_4thColumn.getText();
			String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 72, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 72, 8, actPurchaseAccount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			String actUnits=select2ndRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 76, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 76, 8, actUnits);
		
			System.out.println("****************checkTaxCodeBySelectingStandardRateItemInSecondRowOfPurchaseVoucherBody*******");
			System.out.println("WAREHOUSE      :"+actWarehouse		+" Value Expected : "+expWarehouse);
			System.out.println("ITEM           :"+actItem		    +" Value Expected : "+expItem);
			System.out.println("Tax Code       :"+actTaxCode		+" Value Expected : "+expTaxCode);
			System.out.println("UNITS          :"+actUnits		    +" Value Expected : "+expUnits);
			System.out.println("Purchase Account          :"+actPurchaseAccount		    +" Value Expected : "+expPurchaseAccount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
			
			if(actTaxCode.equalsIgnoreCase(expTaxCode)  && actWarehouse.equalsIgnoreCase(expWarehouse) && 
					actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount) )
			{
				System.out.println("Test Pass : Data Entered in Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 72, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 72, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 72, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		
		public boolean checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInSecondRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_6thColumn));
			select2ndRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
			select2ndRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			select2ndRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
				
			String actR1C1AVGRate =select2ndRow_7thColumn.getText();			
			String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 78, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 78, 8, actR1C1AVGRate);
			
			String actR1C1AVGRateO =select2ndRow_8thColumn.getText();			
			String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 79, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 79, 8, actR1C1AVGRate);
					
					
			System.out.println("*********************************************** checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInSecondRowPurchaseVoucherBody  ********************************************");
			System.out.println("Entry Page Avg Rate Value Actual      : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
			System.out.println("Entry Page Avg Rate(o)  Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
			
											
			if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) )
			{
				System.out.println("Test Pass : Displayed AVG  rate And Avg Rate(o) in Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 77, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Not Displayed AVG  rate And Avg Rate(o) in Second Row Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 77, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 77, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		


		
		
		public boolean checkGrossBySelectingStandardRateItemInSecondRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 81, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 82, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_12thColumn));
			String actR1C1Gross =select2ndRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 83, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 83, 8, actR1C1Gross);
					
			System.out.println("******************* checkGrossBySelectingStandardRateItemInSecondRowPurchaseVoucherBody  ****************************");
			System.out.println("Entry Page Save Gross Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
			{
				System.out.println("Test Pass :Gross Value Is Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 80, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Gross Value is Not Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 80, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 80, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		
		
		
		public boolean checkVATValueBySelectingStandardRateItemInSecondRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
			select2ndRow_14thColumn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			
			enter_PvVat.sendKeys(Keys.TAB);
			
			String actR1C1VAT =select2ndRow_14thColumn.getText();			
			String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 85, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 85, 8, actR1C1VAT);
					
			System.out.println("*********************************************** checkVATValueBySelectingStandardRateItemInSecondRowPurchaseVoucherBody  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

			
			if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
			{
				System.out.println("Test Pass : Displayed VAT");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 84, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Displayed VAT");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 84, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 84, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		
		
		
		public boolean checkTaxableValueBySelectingStandardRateItemInSecondRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			
			String actR1C1Taxable =select2ndRow_15thColumn.getText();			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 87, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 87, 8, actR1C1Taxable);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage	= excelReader.getCellData("PurchaseVoucherVAT", 86, 7);
			String actMessage	=checkValidationMessage(expMessage);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 86, 8, actMessage);

			
			
			System.out.println("************** checkTaxableValueBySelectingStandardRateItemInSecondRowPurchaseVoucherBody  **************************");
			System.out.println("Entry Page Taxable Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
			System.out.println("Message Displayed As Clcik On SAve Without Batch Value   : "+actMessage   +" Value Expected : "+expMessage);
											
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable)  && actMessage.equalsIgnoreCase(expMessage))
			{
				System.out.println("Test Pass : Taxable Data is Updated and Message is Displayed in Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 86, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : TaxABLE Data is Not Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 86, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 86, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		
		
		public boolean checkBatchValueInSecondRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		   try
		   {
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));	
			select2ndRow_16thColumn.click();
			   
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.click();
			enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 89, 6));

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage	= excelReader.getCellData("PurchaseVoucherVAT", 88, 7);
			String actMessage	=checkValidationMessage(expMessage);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 88, 8, actMessage);
			
			
			String actBatchName=select2ndRow_16thColumn.getText();
			String expBatchName=excelReader.getCellData("PurchaseVoucherVAT", 89, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 89, 8, actBatchName);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_18thColumn));
	        select2ndRow_18thColumn.click();
			
	        Calendar calendar = Calendar.getInstance();
			
		    calendar.add(Calendar.DATE, 2);
		
		    Date date = calendar.getTime();
		
		    DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
		    
		    System.out.println(dfr.format(date).toString());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.click();
			enter_Expirydate.sendKeys(Keys.END);
			enter_Expirydate.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_Expirydate.sendKeys(dfr.format(date).toString());
			enter_Expirydate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_18thColumn));
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			//Date date=new Date();
			System.out.println(df.format(date));
			
			String actCurrentDate =select2ndRow_18thColumn.getText();	
			String expCurrentDate = df.format(date);
	      
			System.out.println("****************************checkBatchValueInSecondRowPurchaseVoucherBody*************************************");
			
			System.out.println("Entry Page Current Date  Value Actual  : "+actCurrentDate   +" Value Expected : "+expCurrentDate);
			System.out.println("Entry Page Validation Message          : "+actMessage       +" Value Expected : "+expMessage);
			System.out.println("Entry Page Batch Name  Value Actual    : "+actBatchName   +" Value Expected : "+expBatchName);
											
			if(actMessage.equalsIgnoreCase(expMessage) && actCurrentDate.equalsIgnoreCase(expCurrentDate) && actBatchName.equalsIgnoreCase(expBatchName) )
			{
				System.out.println("Test Pass : Batch Value Entered into Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 88, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Batch Value Not  Entered into Second Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 88, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		 {
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 88, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		  }
		}

		
		
		public boolean checkTaxCodeBySelectingStandardRateItemInThirdRowOfPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			enter_WarehouseTxt.sendKeys(Keys.END);
			enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 91, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
			
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 92, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			
			enter_ItemTxt.sendKeys(Keys.TAB);
	        
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
			select3rdRow_5thColumn.click();
								
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
							
			String actWarehouse=select3rdRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 91, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 91, 8, actWarehouse);
							
			String actItem=select3rdRow_2ndColumn.getText();
			String expItem=excelReader.getCellData("PurchaseVoucherVAT", 92, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 92, 8, actWarehouse);
						
			String actTaxCode=select3rdRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 93, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 93, 8, actWarehouse);
			
			String actPurchaseAccount=select1stRow_4thColumn.getText();
			String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 90, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 90, 8, actPurchaseAccount);
			
			
			String actUnits=select3rdRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 94, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 94, 8, actWarehouse);
			
			System.out.println("**********************checkTaxCodeBySelectingStandardRateItemInThirdRowOfPurchaseVoucherBody**************");
			
			System.out.println("WAREHOUSE      :"+actWarehouse		+" Value Expected : "+expWarehouse);
			System.out.println("ITEM           :"+actItem		    +" Value Expected : "+expItem);
			System.out.println("Tax Code       :"+actTaxCode		+" Value Expected : "+expTaxCode);
			System.out.println("UNITS          :"+actUnits		    +" Value Expected : "+expUnits);
			System.out.println("PurchaseAccount     :"+actPurchaseAccount 		    +" Value Expected : "+expPurchaseAccount );
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			
			if(actTaxCode.equalsIgnoreCase(expTaxCode)  && actWarehouse.equalsIgnoreCase(expWarehouse) && 
					actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits)  && actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
			{
				System.out.println("Test Pass : Data Entered in Third  Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 90, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Third Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 90, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 90, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		

		

		// Item General Tab
		@FindBy(xpath = "//*[@id='divBtnGroup0']/div/a")
		private static WebElement ItemNewnewGeneralBtn;

		// Item Units Tab
		@FindBy(xpath = "//*[@id='divBtnGroup1']/div/a")
		private static WebElement ItemNewUnitsBtn;

		// Master Item Settings
		@FindBy(xpath = "//*[@id='divBtnGroup2']/div/a")
		private static WebElement ItemNewSettingsBtn;

	    // Master Item Classification
		@FindBy(xpath = "//*[@id='divBtnGroup3']/div/a")
		private static WebElement ItemNewClassificationBtn;
		
		// Master Item Replenishment
		@FindBy(xpath = "//*[@id='divBtnGroup5']/div/a")
		private static WebElement ItemNewReplenishmentBtn;

		// Master Item Other Details
		@FindBy(xpath = "//*[@id='divBtnGroup4']/div/a")
		private static WebElement ItemNewOtherDetailsBtn;

		// OutLet Elements
		@FindBy(xpath = "//*[@id='divBtnGroup7']/div/a")
		private static WebElement ItemNewOutletBtn;

		@FindBy(xpath = "//a[contains(text(),'Create Tab')]")
		public static WebElement itemNewCreateTab;

		@FindBy(xpath = "//*[@id='TaxCategory']")
		public static WebElement taxCategorySelect;
		
		@FindBy(xpath = "//div[@id='GenerateNewMasterModel']//button[2]")
		public static WebElement saveItemMaster;

		
		public boolean checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInThirdRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_6thColumn));
			select3rdRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
			select3rdRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
			select3rdRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
			String actR1C1AVGRate =select3rdRow_7thColumn.getText();			
			String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 96, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 96, 8, actR1C1AVGRate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
			String actR1C1AVGRateO =select3rdRow_8thColumn.getText();			
			String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 97, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 97, 8, actR1C1AVGRateO);
					
					
			System.out.println("********* checkAvGRateAndAVGRateOBySelectingStandardRateBatchItemInThirdRowPurchaseVoucherBody  *************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
											
			if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO) )
			{
				System.out.println("Test Pass :Avg Rate is Updated");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 95, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Avg rate is Not Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 95, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 95, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		
		
		
		
		
		public boolean checkGrossBySelectingStandardRateItemInThirdRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 99, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 100, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_12thColumn));
			String actR1C1Gross =select3rdRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 101, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 101, 8, actR1C1Gross);		
			
			System.out.println("*********** checkGrossBySelectingStandardRateItemInThirdRowPurchaseVoucherBody  **************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
			{
				System.out.println("Test Pass : Gross Value iS updated in Third Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 98, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Gross Value is Not Updated ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 98, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 98, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		
		
		
		public boolean checkVATValueBySelectingStandardRateItemInThirdRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
			select3rdRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			enter_PvVat.sendKeys(Keys.TAB);
			
			String actR3C1VAT =select3rdRow_14thColumn.getText();			
			String expR3C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 103, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 103, 8, actR3C1VAT);
					
			System.out.println("******************* checkVATValueBySelectingStandardRateItemInThirdRowPurchaseVoucherBody  *********************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR3C1VAT   +" Value Expected : "+expR3C1VAT);	

			
			if(actR3C1VAT.equalsIgnoreCase(expR3C1VAT))
			{
				System.out.println("Test Pass : Entered VAT Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 102, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  Not Entered VAT Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 102, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 102, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}
		
		
		
		public boolean checkTaxableValueBySelectingStandardRateItemInThirdRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		     try
		     {
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			
			String actR1C1Taxable =select3rdRow_15thColumn.getText();			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 105, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 105, 8, actR1C1Taxable);
		
			
			System.out.println("**************** checkTaxableValueBySelectingStandardRateItemInThirdRowPurchaseVoucherBody  **************************");
			System.out.println("Entry Page Taxable Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
											
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 104, 9, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 104, 9, resFail);
				return false;
			}
		     }
		     catch (Exception e) 
		 	{
		 		String exception =e.getMessage();
		 		excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 104, 10, exception);
		 		System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	    	 	return false;
		 	}
		}
		
		
		public boolean checkBatchValueInThirdRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.click();
			enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 107, 6));
			

	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_18thColumn));
	        select3rdRow_18thColumn.click();
			
	        Calendar calendar = Calendar.getInstance();
			
		    calendar.add(Calendar.DATE, 2);
		
		    Date date = calendar.getTime();
		
		    DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
		    
		    System.out.println(dfr.format(date).toString());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.click();
			enter_Expirydate.sendKeys(Keys.END);
			enter_Expirydate.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_Expirydate.sendKeys(dfr.format(date).toString());
			enter_Expirydate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_16thColumn));
			
			String actR1C1Batch =select3rdRow_16thColumn.getText();			
			String expR1C1Batch=excelReader.getCellData("PurchaseVoucherVAT", 107, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 107, 8, actR1C1Batch);
			
			
			System.out.println("***************** checkBatchValueInThirdRowPurchaseVoucherBody  ********************************************");
			System.out.println("Third Row Batch  Value Actual  : "+actR1C1Batch   +" Value Expected : "+expR1C1Batch);	
											
			if(actR1C1Batch.equalsIgnoreCase(expR1C1Batch) )
			{
				System.out.println("Test Pass :Entered Batch Value ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 106, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :  NOt Entered Batch Value ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 106, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 106, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		
		
		
		
		public boolean checkUpdateItemSettingsAsZeroInFourthRowOfPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			enter_WarehouseTxt.sendKeys(Keys.END);
			enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	        enter_WarehouseTxt.sendKeys(Keys.SPACE);
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 109, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 110, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_2ndColumn));
			select4thRow_2ndColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			Thread.sleep(2000);
			enter_ItemTxt.sendKeys(Keys.CONTROL + "e");
			
			boolean actGeneralTab        = ItemNewnewGeneralBtn.isDisplayed();
			boolean actUnitTab           = ItemNewUnitsBtn.isDisplayed();
			boolean actSettingsTab       = ItemNewSettingsBtn.isDisplayed();
			boolean actClassificationTab = ItemNewClassificationBtn.isDisplayed();
			boolean actOtherDetailsTab   = ItemNewOtherDetailsBtn.isDisplayed();
			boolean actReplenishmentTab  = ItemNewReplenishmentBtn.isDisplayed();
			boolean actOutletTab         = ItemNewOutletBtn.isDisplayed();
			//boolean actCreateTab         = itemNewCreateTab.isDisplayed();

			boolean expGeneralTab        = true;
			boolean expUnitTab           = true;
			boolean expSettingsTab       = true;
			boolean expClassificationTab = true;
			boolean expOtherDetailsTab   = true;
			boolean expReplenishmentTab  = true;
			boolean expOutletTab         = true;
			//boolean expCreateTab         = true;

			System.out.println("****************************************checkUpdateItemSettingsAsZeroInFourthRowOfPurchaseVoucherBody***************");
			System.out.println("************************************************** check Tabs Options  *************************************************************");

			System.out.println("General Tab Value Actual         :  " + actGeneralTab +        "  Value Expected :  " + expGeneralTab);
			System.out.println("Unit Tab Value Actual            :  " + actUnitTab +           "  Value Expected :  " + expUnitTab);
			System.out.println("Settings Tab Value Actual        :  " + actSettingsTab +       "  Value Expected :  " + expSettingsTab);
			System.out.println("Classification Tab Value Actual  :  " + actClassificationTab + "  Value Expected :  " + expClassificationTab);
			System.out.println("Other Details Tab Value Actual   :  " + actOtherDetailsTab +   "  Value Expected :  " + expOtherDetailsTab);
			System.out.println("Replenishment Tab Value Actual   :  " + actReplenishmentTab +  "  Value Expected :  " + expReplenishmentTab);
			System.out.println("Outlet Tab Value Actual          :  " + actOutletTab +         "  Value Expected :  " + expOutletTab);
			//System.out.println("Outlet Tab Value Actual          :  " + actCreateTab +         "  Value Expected :  " + expCreateTab);
				
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ItemNewSettingsBtn));
			ItemNewSettingsBtn.click();
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(taxCategorySelect));
			taxCategorySelect.click();
			
			taxCategorySelect.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 111, 6));
			
			taxCategorySelect.sendKeys(Keys.TAB);
							
			taxCategorySelect.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveItemMaster));
			saveItemMaster.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			Thread.sleep(2000);
			
			enter_ItemTxt.sendKeys(Keys.END);
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 110, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
			select4thRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			select4thRow_9thColumn.click();
			
			String actWarehouse=select4thRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 109, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 109, 8, actWarehouse);
							
			String actItem=select4thRow_2ndColumn.getText();
			String expItem=excelReader.getCellData("PurchaseVoucherVAT", 110, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 110, 8, actItem);;
						
			
			String actTaxCode=select4thRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 111, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 111, 8, actTaxCode);
			
			String actPurchaseAccount=select4thRow_4thColumn.getText();
			String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 108, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 108, 8, actPurchaseAccount);
			
			String actUnits=select3rdRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 112, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 112, 8, actUnits);
			
			System.out.println("******************* Values From Entry Page********************************************************");
			System.out.println("WAREHOUSE      :"+actWarehouse		+" Value Expected : "+expWarehouse);
			System.out.println("ITEM           :"+actItem		    +" Value Expected : "+expItem);
			System.out.println("UNITS          :"+actUnits		    +" Value Expected : "+expUnits);
			System.out.println("TAxcode          :"+actTaxCode		    +" Value Expected : "+expTaxCode);
			System.out.println("Purchase Account          :"+actPurchaseAccount		    +" Value Expected : "+expPurchaseAccount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_19thColumn));
			select4thRow_19thColumn.click();
			
			//enter_PvRemarks.sendKeys(Keys.TAB);
			
		    if(actWarehouse.equalsIgnoreCase(expWarehouse) && actItem.equalsIgnoreCase(expItem)  &&  
		    		actUnits.equalsIgnoreCase(expUnits)  && 
		    		actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
			{
				System.out.println("Test Pass : Data Entered in Fourth Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 108, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in Fourth Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 108, 9, resFail);
				return false;
			}
		}
		catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 108, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	   	 	return false;
		}
		}

		
		
		
		 // Delete row For Bin Validation
		   public boolean checkPurchaseVoucherVATRowDelete() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		   {
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
			
			 try
			 {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fourthRowIndex));
				fourthRowIndex.click();
					
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				deleteRowBtn.click();
				
				Thread.sleep(2000);
				
				/*String actBinColumnR3GetText=select4thRow_2ndColumn.getText();
				System.out.println("actBinColumnR3GetText  :  "+actBinColumnR3GetText);*/
				
				boolean BinColumnAfterDeleteRow=select4thRow_2ndColumn.getText().isEmpty();
				
				String actBinColumnAfterDeleteRow=Boolean.toString(BinColumnAfterDeleteRow);
				
				/*String expBinColumnAfterDeleteRow=excelReader.getCellData("PurchaseVoucherVAT", 114, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 114, 8, actBinColumnAfterDeleteRow.toUpperCase());
				*/
			    
				
				boolean expBinColumnAfterDeleteRow=true;
				
				
	            System.out.println("*****************************checkPurchaseVoucherVATRowDelete*************************************");
				System.out.println("Bin Column after Delete Row Value Actual     :  " + actBinColumnAfterDeleteRow +   " Value Expected : " + expBinColumnAfterDeleteRow);
					
				if(BinColumnAfterDeleteRow==expBinColumnAfterDeleteRow)
				{
					System.out.println("Test Pass  deleted row Working  ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 113, 9, resPass);
					return true;			
				}
				else
				{
					System.out.println("Test Fail Not Deleted Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 113, 9, resFail);
					return false;
				}
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 113, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
		   }
		

	   public boolean checkTaxCodeBySelectingStandardRateItemInFourthRowOfPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	   {
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
		 try
		 {
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			System.err.println("2");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			enter_WarehouseTxt.sendKeys(Keys.END);
			enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 116, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
				
	        System.err.println("3");
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 117, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			
			enter_ItemTxt.sendKeys(Keys.TAB);
		
			System.err.println("4");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
			
		    enter_PvTaxCode.click();
			        
			 /*   enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			    Thread.sleep(1000);
			        
			    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
			        
			    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
			        
			    enter_PvTaxCode.sendKeys(Keys.SPACE);
			        
			    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
			        
			    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
			        
				for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
				{
					String Taxable=pvvGridTaxCodeList.get(i).getText();
						
					if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 118, 6))) 
					{
						pvvGridTaxCodeList.get(i).click();
						break;
					}
				}
			    enter_PvTaxCode.sendKeys(Keys.TAB);*/
				
			    
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
				select4thRow_5thColumn.click();
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
				select4thRow_9thColumn.click();
												
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
				String actWarehouse=select4thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 116, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 116, 8, actWarehouse);
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_2ndColumn));
				String actItem=select4thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 117, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 117, 8, actItem);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_3rdColumn));
				String actTaxCode=select4thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 118, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 118, 8, actTaxCode);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_4thColumn));
				String actPurchaseAccount=select4thRow_4thColumn.getText();
				String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 115, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 115, 8, actPurchaseAccount);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_5thColumn));
				String actUnits=select4thRow_5thColumn.getText();
				
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 119, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 119, 8, actUnits);
				
				System.out.println("************************************checkTaxCodeBySelectingStandardRateItemInFourthRowOfPurchaseVoucherBody*************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
			    System.out.println("PurchaseAccount         :  "+actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
				select4thRow_9thColumn.click();
				
				if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
						actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
				{
					System.out.println("Test Pass : Data Entered in Fourth Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 115, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in Fourth Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 115, 9, resFail);
					return false;
				}
			}
		   catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 115, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}


		
		   public boolean checkAvGRateAndAVGRateOBySelectingBinItemInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		   {
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
			{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_6thColumn));
				select4thRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
				select4thRow_7thColumn.click();
				
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_8thColumn));
				select4thRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
				select4thRow_9thColumn.click();
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
				String actR1C1AVGRate = select4thRow_7thColumn.getText();			
				String expR1C1AVGRate = excelReader.getCellData("PurchaseVoucherVAT", 121, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 121, 8, actR1C1AVGRate);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_8thColumn));
				String actR1C1AVGRateO = select4thRow_8thColumn.getText();			
				String expR1C1AVGRateO = excelReader.getCellData("PurchaseVoucherVAT", 122, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 122, 8, actR1C1AVGRateO);
						
				System.out.println("********************** checkAvGRateAndAVGRateOBySelectingBinItemInFourthRowPurchaseVoucherBody  *****************");
				
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
												
				if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate)  && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO) )
				{
					System.out.println("Test Pass :Displayed AVg Rate ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 120, 9, resPass);
					return true;
				}
				else
				{
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 120, 9, resFail);
					return false;
				}
		   }

	           catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 120, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			

			
			public boolean checkGrossBySelectingStandardRateItemInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 124, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 125, 6));
				enter_Rate.sendKeys(Keys.TAB);
								
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);

				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_12thColumn));
				String actR1C1Gross =select4thRow_12thColumn.getText();			
				String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 126, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 126, 8, actR1C1Gross);
						
				System.out.println("********************* checkGrossBySelectingStandardRateItemInFourthRowPurchaseVoucherBody  *********************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
												
				if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
				{
					System.out.println("Test Pass : Gross is Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 123, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Gross is Not Updated");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 123, 9, resFail);
					return false;
				}
				}

	            catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 123, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
		
			public boolean checkVATValueBySelectingStandardRateItemInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
		         try
		         {
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_14thColumn));
				select4thRow_14thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
				enter_PvVat.click();
				enter_PvVat.sendKeys(Keys.TAB);
				
				
				String actR1C1VAT =select4thRow_14thColumn.getText();			
				String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 128, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 128, 8, actR1C1VAT);
						
				System.out.println("******** checkVATValueBySelectingStandardRateItemInFourthRowPurchaseVoucherBody  ********************************************");
				System.out.println("Entry Page VAT Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

				
				if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
				{
					System.out.println("Test Pass : Pv VAT Value IS Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 127, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : PV Vat Value IS Not Upadated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 127, 9, resFail);
					return false;
				}
		         }
		         catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 127, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
			}
			
			
			
			public boolean checkTaxableValueBySelectingStandardRateItemInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
				enter_PvTaxable.click();
				enter_PvTaxable.sendKeys(Keys.TAB);
						
				String actR1C1Taxable =select4thRow_15thColumn.getText();			
				String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 130, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 130, 8, actR1C1Taxable);
				
				System.out.println("*************************** checkTaxableValueBySelectingStandardRateItemInFourthRowPurchaseVoucherBody  *************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
												
				if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
				{
					System.out.println("Test Pass :Taxable Value is Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 129, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :Taxable Value is  not Updated");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 129, 9, resFail);
					return false;
				}
			}

	          catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 129, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			
			
			

			@FindBy(xpath="//*[@id='id_transaction_bins_grid_row_heading']/th/div[1]")
			private static List<WebElement> binPopupGridLabel;
			
			public boolean checkBinPopUpPageInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  try
			  {
				  
				 Thread.sleep(2000);
				  
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
				binSearchBtn.click();
				
				Thread.sleep(2000);
				
				int binPopupGridLabelCount = binPopupGridLabel.size();
					
				ArrayList<String> binPopupGridLabelArray = new ArrayList<String>();
				
				for(int i=0;i<binPopupGridLabelCount;i++)
				{
					String data = binPopupGridLabel.get(i).getText();
					binPopupGridLabelArray.add(data);
				}
				
				
				String actbinPopupGridLabelList=binPopupGridLabelArray.toString();
				String expbinPopupGridLabelList=excelReader.getCellData("PurchaseVoucherVAT", 132, 7);
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 132, 8, actbinPopupGridLabelList);
				
				System.out.println("actbinPopupGridLabel : " + actbinPopupGridLabelList);
				System.out.println("expbinPopupGridLabel : " + expbinPopupGridLabelList);
				  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));		
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
				System.out.println("**************************checkBinPopUpPageInFourthRowPurchaseVoucherBody************************************************");	
				
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
						
				String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 133, 7);
				String expBinStockValue                = excelReader.getCellData("PurchaseVoucherVAT", 134, 7);
				String expBinCapcityValue              = excelReader.getCellData("PurchaseVoucherVAT", 135, 7);
				String expBinLoadValue                 = excelReader.getCellData("PurchaseVoucherVAT", 136, 7);
				String expBinFreeSpace                 = excelReader.getCellData("PurchaseVoucherVAT", 137, 7);
				String expBinFreeQty                   = excelReader.getCellData("PurchaseVoucherVAT", 138, 7);
				String expBinToBeAllocated             = excelReader.getCellData("PurchaseVoucherVAT", 139, 7);
				
				
				String expBinTotalQty                  = excelReader.getCellData("PurchaseVoucherVAT", 140, 7);
				String expBinBaseUom                   = excelReader.getCellData("PurchaseVoucherVAT", 141, 7);
				String expBinBalanceQty                = excelReader.getCellData("PurchaseVoucherVAT", 142, 7);
				
				String expBinSum                       = excelReader.getCellData("PurchaseVoucherVAT", 143, 7);
									
				String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
				String actBinStockValue                = binselect1stRow_3rdColumn.getText();
				String actBinCapcityValue              = binselect1stRow_4thColumn.getText();
				String actBinLoadValue                 = binselect1stRow_5thColumn.getText();
				String actBinFreeSpace                 = binselect1stRow_6thColumn.getText();
				String actBinFreeQty                   = binselect1stRow_7thColumn.getText();
				String actBinToBeAllocated             = binselect1stRow_8thColumn.getText();
				

				String actBinTotalQty                  = binTotalQty.getAttribute("value");
				String actBinBaseUom                   = binBaseUOM.getText();
				//String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
				
				//String actBinSum                       = binSumInward.getText();
										
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 133, 8, actBinNameValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 134, 8, actBinStockValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 135, 8, actBinCapcityValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 136, 8, actBinLoadValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 137, 8, actBinFreeSpace);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 138, 8, actBinFreeQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 139, 8, actBinToBeAllocated);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 140, 8, actBinTotalQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 141, 8, actBinBaseUom);
				//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 142, 8, actBinBalanceQty);
				//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 143, 8, actBinSum);
				
				
				System.out.println("Second Row Stock            :  " + actBinNameValue +        "  Value Expected : "  + expBinNameValue);
				System.out.println("Second Row Capacity         :  " + actBinStockValue +       "  Value Expected : "  + expBinStockValue);
				System.out.println("Second Row Load             :  " + actBinCapcityValue +     "  Value Expected : "  + expBinCapcityValue);
				System.out.println("Second Row Free Space       :  " + actBinLoadValue +        "  Value Expected : "  + expBinLoadValue);
				System.out.println("Second Row Free Qty         :  " + actBinFreeSpace +        "  Value Expected : "  + expBinFreeSpace);
				System.out.println("Second Row To Be Allocated  :  " + actBinFreeQty +          "  Value Expected : "  + expBinFreeQty);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocated +    "  Value Expected : "  + expBinToBeAllocated);
				
				
				System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
				System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
				//System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
				
				//System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
				
			
						
				if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn /*&& actBinAlternateCategory==expBinAlternateCategory */
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinNameValue.equalsIgnoreCase(expBinNameValue) && actBinStockValue.equalsIgnoreCase(expBinStockValue) 
						&& actBinCapcityValue.equalsIgnoreCase(expBinCapcityValue) && actBinLoadValue.equalsIgnoreCase(expBinLoadValue)
						&& actBinFreeSpace.equalsIgnoreCase(expBinFreeSpace) && actBinFreeQty.equalsIgnoreCase(expBinFreeQty)
						&& actBinToBeAllocated.equalsIgnoreCase(expBinToBeAllocated)
								
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						/*&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum)*/)	
				{
					System.out.println("Selected Bin And Ok Btn Not Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 131, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Not Selected Bin And Ok Btn Not Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 131, 9, resFail);
					return false;
				}	
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 131, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			

			public boolean checkAutoAllocateOptionInBinPopupPageInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			
				
			  try
			  {
				  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
				binAutoAllocateBtn.click();
									  
				int binPopupGridLabelCount = binPopupGridLabel.size();
					
				ArrayList<String> binPopupGridLabelArray = new ArrayList<String>();
				
				for(int i=0;i<binPopupGridLabelCount;i++)
				{
					String data = binPopupGridLabel.get(i).getText();
					binPopupGridLabelArray.add(data);
				}
				
				
				String actbinPopupGridLabelList=binPopupGridLabelArray.toString();
				String expbinPopupGridLabelList=excelReader.getCellData("PurchaseVoucherVAT", 145, 7);;
				
				
				excelReader.setCellData(xlfile,"PurchaseVoucherVAT", 145, 8, actbinPopupGridLabelList);
				
				System.out.println("actbinPopupGridLabel : " + actbinPopupGridLabelList);
				System.out.println("expbinPopupGridLabel : " + expbinPopupGridLabelList);
				  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));		
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
					
				
				System.out.println("*********************checkAutoAllocateOptionInBinPopupPageInFourthRowPurchaseVoucherBody****************************");
				
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				/*System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);*/
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
				
				String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 146, 7);
				String expBinStockValue                = excelReader.getCellData("PurchaseVoucherVAT", 147, 7);
				String expBinCapcityValue              = excelReader.getCellData("PurchaseVoucherVAT", 148, 7);
				String expBinLoadValue                 = excelReader.getCellData("PurchaseVoucherVAT", 149, 7);
				String expBinFreeSpace                 = excelReader.getCellData("PurchaseVoucherVAT", 150, 7);
				String expBinFreeQty                   = excelReader.getCellData("PurchaseVoucherVAT", 151, 7);
				String expBinToBeAllocated             = excelReader.getCellData("PurchaseVoucherVAT", 152, 7);
				
				
				String expBinTotalQty                  = excelReader.getCellData("PurchaseVoucherVAT", 153, 7);
				String expBinBaseUom                   = excelReader.getCellData("PurchaseVoucherVAT", 154, 7);
				String expBinBalanceQty                = excelReader.getCellData("PurchaseVoucherVAT", 155, 7);
				
				String expBinSum                       = excelReader.getCellData("PurchaseVoucherVAT", 156, 7);
								
				String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
				String actBinStockValue                = binselect1stRow_3rdColumn.getText();
				String actBinCapcityValue              = binselect1stRow_4thColumn.getText();
				String actBinLoadValue                 = binselect1stRow_5thColumn.getText();
				String actBinFreeSpace                 = binselect1stRow_6thColumn.getText();
				String actBinFreeQty                   = binselect1stRow_7thColumn.getText();
				String actBinToBeAllocated             = binselect1stRow_8thColumn.getText();
				

				String actBinTotalQty                  = binTotalQty.getAttribute("value");
				String actBinBaseUom                   = binBaseUOM.getText();
				//String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
				
				//String actBinSum                       = binSumInward.getText();
										
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 146, 8, actBinNameValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 147, 8, actBinStockValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 148, 8, actBinCapcityValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 149, 8, actBinLoadValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 150, 8, actBinFreeSpace);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 151, 8, actBinFreeQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 152, 8, actBinToBeAllocated);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 153, 8, actBinTotalQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 154, 8, actBinBaseUom);
				//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 155, 8, actBinBalanceQty);
				//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 156, 8, actBinSum);
				
				
				System.out.println("Second Row Stock            :  " + actBinNameValue +        "  Value Expected : "  + expBinNameValue);
				System.out.println("Second Row Capacity         :  " + actBinStockValue +       "  Value Expected : "  + expBinStockValue);
				System.out.println("Second Row Load             :  " + actBinCapcityValue +     "  Value Expected : "  + expBinCapcityValue);
				System.out.println("Second Row Free Space       :  " + actBinLoadValue +        "  Value Expected : "  + expBinLoadValue);
				System.out.println("Second Row Free Qty         :  " + actBinFreeSpace +        "  Value Expected : "  + expBinFreeSpace);
				System.out.println("Second Row To Be Allocated  :  " + actBinFreeQty +          "  Value Expected : "  + expBinFreeQty);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocated +    "  Value Expected : "  + expBinToBeAllocated);
				
				
				System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
				System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
				//System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
				
				//System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
						
				if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn/* && actBinAlternateCategory==expBinAlternateCategory*/ 
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinNameValue.equalsIgnoreCase(expBinNameValue) && actBinStockValue.equalsIgnoreCase(expBinStockValue) 
						&& actBinCapcityValue.equalsIgnoreCase(expBinCapcityValue) && actBinLoadValue.equalsIgnoreCase(expBinLoadValue)
						&& actBinFreeSpace.equalsIgnoreCase(expBinFreeSpace) && actBinFreeQty.equalsIgnoreCase(expBinFreeQty)
						&& actBinToBeAllocated.equalsIgnoreCase(expBinToBeAllocated)
								
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						/*&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum)*/)	
				{
					System.out.println("Selected Bin And Ok Btn Not Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 144, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Not Selected Bin And Ok Btn Not Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 144, 9, resFail);
					return false;
				}	
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 144, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			
			}
			
			


			public boolean checkCancelOptionInBinPopUpPageInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  try
			  {
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
			  binCancelBtn.click();
				
			  
			    String actWarehouse=select4thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 158, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 158, 8, actWarehouse);
								
				String actItem=select4thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 159, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 159, 8, actItem);
							
				String actTaxCode=select4thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 160, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 160, 8, actTaxCode);
				
				String actUnits=select4thRow_5thColumn.getText();
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 161, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 161, 8, actUnits);
				

				System.out.println("************************************checkCancelOptionInBinPopUpPageInFourthRowPurchaseVoucherBody*************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_12thColumn));
				String actR1C1Gross =select4thRow_12thColumn.getText();			
				String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 162, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 162, 8, actR1C1Gross);
			  
				if(actWarehouse.equalsIgnoreCase(expWarehouse) && actR1C1Gross.equalsIgnoreCase(expR1C1Gross))	
				{
					System.out.println("Test Pass: Cancel Button in Bin POp up");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 157, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail: Cancel Option in Bin Pop Up");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 157, 9, resFail);
					return false;
				}	
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 157, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			
			 @FindBy(xpath="//input[@id='id_body_85']")
			  private static WebElement  enter_Bin;
			
			public boolean checkBinPopUpPageAfterClickOnCancelAndClickOnBinInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  
				Thread.sleep(2000);
			  try
			  {
					
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Bin));
			    enter_Bin.click();
			    enter_Bin.sendKeys(Keys.SPACE);
			    
			    Thread.sleep(2000);
			    
			    
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
				binSearchBtn.click();
				Thread.sleep(2000);
				
				  
				int binPopupGridLabelCount = binPopupGridLabel.size();
					
				ArrayList<String> binPopupGridLabelArray = new ArrayList<String>();
				
				for(int i=0;i<binPopupGridLabelCount;i++)
				{
					String data = binPopupGridLabel.get(i).getText();
					binPopupGridLabelArray.add(data);
				}
				
				
				String actbinPopupGridLabelList=binPopupGridLabelArray.toString();
				String expbinPopupGridLabelList=excelReader.getCellData("PurchaseVoucherVAT", 164, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 164, 8, actbinPopupGridLabelList);
				
				System.out.println("actbinPopupGridLabel : " + actbinPopupGridLabelList);
				System.out.println("expbinPopupGridLabel : " + expbinPopupGridLabelList);
				  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));		
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
					
				System.out.println("**********************checkBinPopUpPageAfterClickOnCancelAndClickOnBinInFourthRowPurchaseVoucherBody***********************");
				
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);

				String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 165, 7);
				String expBinStockValue                = excelReader.getCellData("PurchaseVoucherVAT", 166, 7);
				String expBinCapcityValue              = excelReader.getCellData("PurchaseVoucherVAT", 167, 7);
				String expBinLoadValue                 = excelReader.getCellData("PurchaseVoucherVAT", 168, 7);
				String expBinFreeSpace                 = excelReader.getCellData("PurchaseVoucherVAT", 169, 7);
				String expBinFreeQty                   = excelReader.getCellData("PurchaseVoucherVAT", 170, 7);
				String expBinToBeAllocated             = excelReader.getCellData("PurchaseVoucherVAT", 171, 7);
				
				
				String expBinTotalQty                  = excelReader.getCellData("PurchaseVoucherVAT", 172, 7);
				String expBinBaseUom                   = excelReader.getCellData("PurchaseVoucherVAT", 173, 7);
				String expBinBalanceQty                = excelReader.getCellData("PurchaseVoucherVAT", 174, 7);
				
				String expBinSum                       = excelReader.getCellData("PurchaseVoucherVAT", 175, 7);
								
				String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
				String actBinStockValue                = binselect1stRow_3rdColumn.getText();
				String actBinCapcityValue              = binselect1stRow_4thColumn.getText();
				String actBinLoadValue                 = binselect1stRow_5thColumn.getText();
				String actBinFreeSpace                 = binselect1stRow_6thColumn.getText();
				String actBinFreeQty                   = binselect1stRow_7thColumn.getText();
				String actBinToBeAllocated             = binselect1stRow_8thColumn.getText();
				

				String actBinTotalQty                  = binTotalQty.getAttribute("value");
				String actBinBaseUom                   = binBaseUOM.getText();
				//String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
				
				//String actBinSum                       = binSumInward.getText();
										
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 165, 8, actBinNameValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 166, 8, actBinStockValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 167, 8, actBinCapcityValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 168, 8, actBinLoadValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 169, 8, actBinFreeSpace);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 170, 8, actBinFreeQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 171, 8, actBinToBeAllocated);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 172, 8, actBinTotalQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 173, 8, actBinBaseUom);
				//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 174, 8, actBinBalanceQty);
				//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 175, 8, actBinSum);
				
				
	            System.out.println("**********************checkBinPopUpPageAfterClickOnCancelAndClickOnBinInFourthRowPurchaseVoucherBody*******************");
				
				System.out.println("Second Row Stock            :  " + actBinNameValue +        "  Value Expected : "  + expBinNameValue);
				System.out.println("Second Row Capacity         :  " + actBinStockValue +       "  Value Expected : "  + expBinStockValue);
				System.out.println("Second Row Load             :  " + actBinCapcityValue +     "  Value Expected : "  + expBinCapcityValue);
				System.out.println("Second Row Free Space       :  " + actBinLoadValue +        "  Value Expected : "  + expBinLoadValue);
				System.out.println("Second Row Free Qty         :  " + actBinFreeSpace +        "  Value Expected : "  + expBinFreeSpace);
				System.out.println("Second Row To Be Allocated  :  " + actBinFreeQty +          "  Value Expected : "  + expBinFreeQty);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocated +    "  Value Expected : "  + expBinToBeAllocated);
				
				System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
				System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
				//System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
				
				//System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
			
						
				if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn /*&& actBinAlternateCategory==expBinAlternateCategory*/ 
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinNameValue.equalsIgnoreCase(expBinNameValue) && actBinStockValue.equalsIgnoreCase(expBinStockValue) 
						&& actBinCapcityValue.equalsIgnoreCase(expBinCapcityValue) && actBinLoadValue.equalsIgnoreCase(expBinLoadValue)
						&& actBinFreeSpace.equalsIgnoreCase(expBinFreeSpace) && actBinFreeQty.equalsIgnoreCase(expBinFreeQty)
						&& actBinToBeAllocated.equalsIgnoreCase(expBinToBeAllocated)
								
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						/*&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum)*/)	
				{
					System.out.println("Selected Bin And Ok Btn  Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 163, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Not Selected Bin And Ok Btn Not Enabled");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 163, 9, resFail);
					return false;
				}	
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 163, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			

			
			
			public boolean checkPickOptionInBinPopupPageInFourthRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  Thread.sleep(2000);
				
			  try
			  {
				  
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect1stRow_1stColumn));
			   binselect1stRow_1stColumn.click();
					
			    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binPickBtn));
			    binPickBtn.click();
				  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchTxt));		
				
				boolean actBinSearchTxt                = binSearchTxt.isDisplayed();
				boolean actBinSearchBtn                = binSearchBtn.isDisplayed();
				//boolean actBinAlternateCategory        = binAlternateCategoryCheckBtn.isDisplayed();
				boolean actBinAutoAllocateBtn          = binAutoAllocateBtn.isDisplayed();
				boolean actBinPickBtn                  = binPickBtn.isDisplayed();
				boolean actBinCancelBtn                = binCancelBtn.isDisplayed();
				boolean actBinOkBtn                    = binOkBtn.isEnabled();
						
				boolean expBinSearchTxt                = true;
				boolean expBinSearchBtn                = true;
				boolean expBinAlternateCategory        = true;
				boolean expBinAutoAllocateBtn          = true;
				boolean expBinPickBtn                  = true;
				boolean expBinCancelBtn                = true;
				boolean expBinOkBtn                    = true;
				
				
				System.out.println("**********************checkPickOptionInBinPopupPageInFourthRowOfPurchaseVoucherVAT*******************");
				
				System.out.println("Bin Search Value Actual                :  " + actBinSearchTxt +         " Value Expected : " + expBinSearchTxt);
				System.out.println("Bin Search Btn Value Actual            :  " + actBinSearchBtn +         " Value Expected : " + expBinSearchBtn);
				//System.out.println("Bin Alternate Category Value Actual    :  " + actBinAlternateCategory + " Value Expected : " + expBinAlternateCategory);
				System.out.println("Bin Auto Allocate Btn Value Actual     :  " + actBinAutoAllocateBtn +   " Value Expected : " + expBinAutoAllocateBtn);
				System.out.println("Bin Pick Btn Value Actual              :  " + actBinPickBtn +           " Value Expected : " + expBinPickBtn);
				System.out.println("Bin Cancel Btn Value Actual            :  " + actBinCancelBtn +         " Value Expected : " + expBinCancelBtn);
				System.out.println("Bin Ok Btn Value Actual                :  " + actBinOkBtn +             " Value Expected : " + expBinOkBtn);
				
				
				String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 177, 7);
				String expBinStockValue                = excelReader.getCellData("PurchaseVoucherVAT", 178, 7);
				String expBinCapcityValue              = excelReader.getCellData("PurchaseVoucherVAT", 179, 7);
				String expBinLoadValue                 = excelReader.getCellData("PurchaseVoucherVAT", 180, 7);
				String expBinFreeSpace                 = excelReader.getCellData("PurchaseVoucherVAT", 181, 7);
				String expBinFreeQty                   = excelReader.getCellData("PurchaseVoucherVAT", 182, 7);
				String expBinToBeAllocated             = excelReader.getCellData("PurchaseVoucherVAT", 183, 7);
				
				
				String expBinTotalQty                  = excelReader.getCellData("PurchaseVoucherVAT", 184, 7);
				String expBinBaseUom                   = excelReader.getCellData("PurchaseVoucherVAT", 185, 7);
				String expBinBalanceQty                = excelReader.getCellData("PurchaseVoucherVAT", 186, 7);
				
				String expBinSum                       = excelReader.getCellData("PurchaseVoucherVAT", 187, 7);
								
				String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
				String actBinStockValue                = binselect1stRow_3rdColumn.getText();
				String actBinCapcityValue              = binselect1stRow_4thColumn.getText();
				String actBinLoadValue                 = binselect1stRow_5thColumn.getText();
				String actBinFreeSpace                 = binselect1stRow_6thColumn.getText();
				String actBinFreeQty                   = binselect1stRow_7thColumn.getText();
				String actBinToBeAllocated             = binselect1stRow_8thColumn.getText();
				

				String actBinTotalQty                  = binTotalQty.getAttribute("value");
				String actBinBaseUom                   = binBaseUOM.getText();
				//String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
				
				//String actBinSum                       = binSumInward.getText();
										
				
				
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 177, 8, actBinNameValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 178, 8, actBinStockValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 179, 8, actBinCapcityValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 180, 8, actBinLoadValue);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 181, 8, actBinFreeSpace);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 182, 8, actBinFreeQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 183, 8, actBinToBeAllocated);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 184, 8, actBinTotalQty);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 185, 8, actBinBaseUom);
				//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 186, 8, actBinBalanceQty);
				//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 187, 8, actBinSum);
				
				
				System.out.println("Second Row Stock            :  " + actBinNameValue +        "  Value Expected : "  + expBinNameValue);
				System.out.println("Second Row Capacity         :  " + actBinStockValue +       "  Value Expected : "  + expBinStockValue);
				System.out.println("Second Row Load             :  " + actBinCapcityValue +     "  Value Expected : "  + expBinCapcityValue);
				System.out.println("Second Row Free Space       :  " + actBinLoadValue +        "  Value Expected : "  + expBinLoadValue);
				System.out.println("Second Row Free Qty         :  " + actBinFreeSpace +        "  Value Expected : "  + expBinFreeSpace);
				System.out.println("Second Row To Be Allocated  :  " + actBinFreeQty +          "  Value Expected : "  + expBinFreeQty);
				System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocated +    "  Value Expected : "  + expBinToBeAllocated);
							
				System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
				System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
				//System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
				
				//System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_7thColumn));
						
				if(actBinSearchTxt==expBinSearchTxt && actBinSearchBtn==expBinSearchBtn/* && actBinAlternateCategory==expBinAlternateCategory */
						&& actBinAutoAllocateBtn==expBinAutoAllocateBtn && actBinPickBtn==expBinPickBtn && actBinCancelBtn==expBinCancelBtn
						&& actBinOkBtn==expBinOkBtn
						
						&& actBinNameValue.equalsIgnoreCase(expBinNameValue) && actBinStockValue.equalsIgnoreCase(expBinStockValue) 
						&& actBinCapcityValue.equalsIgnoreCase(expBinCapcityValue) && actBinLoadValue.equalsIgnoreCase(expBinLoadValue)
						&& actBinFreeSpace.equalsIgnoreCase(expBinFreeSpace) && actBinFreeQty.equalsIgnoreCase(expBinFreeQty)
						&& actBinToBeAllocated.equalsIgnoreCase(expBinToBeAllocated)
								
						&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
						/*&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
						
						&& actBinSum.equalsIgnoreCase(expBinSum)*/)	
				{
					System.out.println("Test Pass: Pick Option in Bin Pop up ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 176, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail: Pick Option in Bin Pop up ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 176, 9, resFail);
					return false;
				}	
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 176, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			
			}
			

			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_head']/tr/th/div[1]")
			private static List<WebElement> pvVatBodygridHeaderList;

			
			@FindBy(xpath="//input[@id='id_body_23']")
			private static WebElement  enter_PvItemTxt;	
			
			@FindBy(xpath="//input[@id='id_body_16777333']")
			private static WebElement  taxCodePvTxt;
			
			@FindBy(xpath="//input[@id='id_body_24']")
			private static WebElement  enter_PvUnitTxt;
			
			@FindBy(xpath="[@id='id_body_33554477']")
			private static WebElement  enter_PvRD;
			
			@FindBy(xpath="//input[@id='id_body_33554478']")
			private static WebElement  enter_PvVatAvgRate;
			
			@FindBy(xpath="//input[@id='id_body_33554479']")
			private static WebElement  enter_PvVatAvgRateO;
			
			@FindBy(xpath="//input[@id='id_body_26']")
			private static WebElement  enter_PvQuantity;
			
			@FindBy(xpath="//input[@id='id_body_27']")
			private static WebElement  enter_PvRate;
			
			@FindBy(xpath="//input[@id='id_body_28']")
			private static WebElement  enter_PVGross;
			

			
			@FindBy(xpath="//input[@id='id_body_13']")
			private static WebElement  enter_PvBatch;
			
			@FindBy(xpath="//input[@id='id_body_85']")
			private static WebElement  enter_PvBin;
			
			@FindBy(xpath="//input[@id='id_body_37']")
			private static WebElement enter_PvExpirydate;
			
			@FindBy(xpath="//input[@id='id_body_38']")
			private static WebElement  enter_PvRMA;
			
			/*@FindBy(xpath="//textarea[@id='id_body_16777294']")
			private static WebElement  enter_PvRemarks;*/
			    
			@FindBy(xpath="//textarea[@id='id_body_16777309']")
			private static WebElement  enter_PvRemarks;
			
			
			
			
		    @FindBy(xpath="//a[@id='2059']//span[contains(text(),'Purchases Voucher VAT')]")
		    private static WebElement pvVatVoucher;
		    
		    @FindBy(xpath="//div[contains(text(),'Remarks')]")
			private static WebElement voucherBodyRemarksName;
			
			public boolean checkBinPopUpPagePickQtyAfterClickOnOkButtonAndClickOnBinInFourthRowPurchaseVoucherBody() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
			  excelReader=new ExcelReader(POJOUtility.getExcelPath());
			  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			  Thread.sleep(2000);
				
			  try
			  {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
				binOkBtn.click();
					
				String actBinName=select4thRow_17thColumn.getText();
				
				String expBinName=excelReader.getCellData("PurchaseVoucherVAT", 189, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 189, 8, actBinName);
				
				System.out.println("*****checkBinPopUpPagePickQtyAfterClickOnOkButtonAndClickOnBinInFourthRowPurchaseVoucherBody*************************");
				
				System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+select4thRow_14thColumn.getText());
				
			/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_17thColumn));
				select4thRow_17thColumn.click();
			*/	//enter_PvRemarks.sendKeys(Keys.TAB);
						
				if(actBinName.equalsIgnoreCase(expBinName))	
				{
					System.out.println("Test Pass: Bin is Displayed in Body Grid");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 188, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail: Bin is not Displayed in body Grid");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 188, 9, resFail);
					return false;
				}	
			  }
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 188, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}

			}
			


			public boolean checkTaxCodeBySelectingFIFOBinItemInFifthRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			try
			{
							
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
				select5thRow_1stColumn.click();*/
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
				enter_WarehouseTxt.click();
				enter_WarehouseTxt.sendKeys(Keys.END);
				enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
				int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
				
				for (int i = 0; i < pvvGridWarehouseListCount; i++) 
				{
					String warehouse=pvvGridWarehouseList.get(i).getText();
					if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 191, 6))) 
					{
						pvvGridWarehouseList.get(i).click();
						break;
					}
				}
		        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.click();
				enter_ItemTxt.sendKeys(Keys.SPACE);
		        int pvvGridItemListCount=pvvGridItemList.size();
				for (int i = 0; i < pvvGridItemListCount; i++) 
				{
					String Item=pvvGridItemList.get(i).getText();
					if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 192, 6))) 
					{
						pvvGridItemList.get(i).click();
						break;
					}
				}
				enter_ItemTxt.sendKeys(Keys.TAB);
			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				
			    enter_PvTaxCode.click();
			        
			    /*enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			    Thread.sleep(1000);
			        
			    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
			        
			    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
			        
			    enter_PvTaxCode.sendKeys(Keys.SPACE);
			        
			    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
			        
			    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
			        
				for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
				{
					String Taxable=pvvGridTaxCodeList.get(i).getText();
						
					if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 193, 6))) 
					{
						pvvGridTaxCodeList.get(i).click();
						break;
					}
				}
			    enter_PvTaxCode.sendKeys(Keys.TAB);*/
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
				select5thRow_5thColumn.click();
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
				select5thRow_9thColumn.click();
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_1stColumn));
				String actWarehouse=select5thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 191, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 191, 8, actWarehouse);
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_2ndColumn));
				String actItem=select5thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 192, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 192, 8, actItem);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_3rdColumn));
				String actTaxCode=select5thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 193, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 193, 8, actTaxCode);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_4thColumn));
				String actPurchaseAccount=select5thRow_4thColumn.getText();
				String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 190, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 190, 8, actPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_5thColumn));
				String actUnits=select5thRow_5thColumn.getText();
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 194, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 194, 8, actUnits);
				

				System.out.println("************checkTaxCodeBySelectingFIFOBinItemInFifthRowOfPurchaseVoucherVAT*************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
				System.out.println("PurchaseAccount           : " + actPurchaseAccount		+ " Value Expected : "+expPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
				select5thRow_9thColumn.click();
				
				if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
						actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) &&
						actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
				
				{
					System.out.println("Test Pass : Data Entered in FIFTH Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 190, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in FIFTH Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 190, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 190, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}

			}
			

			
			public boolean checkAvGRateAndAVGRateOBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
			try
			{
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_6thColumn));
				select5thRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_7thColumn));
				select5thRow_7thColumn.click();
				
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_8thColumn));
				select5thRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_9thColumn));
				select5thRow_9thColumn.click();
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_7thColumn));
				String actR1C1AVGRate =select5thRow_7thColumn.getText();			
				String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 196, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 196, 8, actR1C1AVGRate);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_8thColumn));
				String actR1C1AVGRateO =select5thRow_8thColumn.getText();			
				String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 197, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 197, 8, actR1C1AVGRateO);
						
						
				System.out.println("*************************checkAvGRateAndAVGRateOBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT******************************");
				
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
												
				if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) )
				{
					System.out.println("Test Pass : Avg Rate is updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 195, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Avg Rate is Not Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 195, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 195, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			public boolean checkGrossBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				try
				{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 199, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 200, 6));
				enter_Rate.sendKeys(Keys.TAB);
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_12thColumn));
				String actR1C1Gross =select5thRow_12thColumn.getText();			
				String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 201, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 201, 8, actR1C1Gross);
				
				System.out.println("**************************checkGrossBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT***************************************");
				
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
												
				if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
				{
					System.out.println("Test Pass : Gross Value IS Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 198, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : No Gross Value IS Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 198, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 198, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}

			}
			
			
			
			public boolean checkVATValueBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_14thColumn));
				select5thRow_14thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
				enter_PvVat.click();
				enter_PvVat.sendKeys(Keys.TAB);
				
				
				String actR1C1VAT =select5thRow_14thColumn.getText();			
				String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 203, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 203, 8, actR1C1VAT);
						
				System.out.println("******************************checkVATValueBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT************************************");
				
				System.out.println("PV VAT 	Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

				
				if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
				{
					System.out.println("Test Pass : Displayed PV Vat Value ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 202, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Not Displayed Pv VAt Value ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 202, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 202, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			
			
			
			public boolean checkTaxableValueBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				Thread.sleep(2000);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
				enter_PvTaxable.click();
				
		       /* enter_PvTaxable.sendKeys(Keys.TAB);*/
						
				
				String actR1C1Taxable =enter_PvTaxable.getAttribute("value");			
				String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 204, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 204, 8, actR1C1Taxable);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expErrorMessage =excelReader.getCellData("PurchaseVoucherVAT", 205, 7);;
				String validationMessage=checkValidationMessage(expErrorMessage);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 205, 8, validationMessage);
				
				
				
				System.out.println("**************************checkTaxableValueBySelectingFIFOBinItemInFifthRowPurchaseVoucherVAT************************************");
				
				System.out.println("Taxable  Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
												
				if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable)  && validationMessage.equalsIgnoreCase(expErrorMessage))
				{
					System.out.println("Test Pass : Taxable Value is updated and  Validation Message is Displayed  ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 204, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in first Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 204, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 204, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			@FindBy(xpath="//input[@id='id_transaction_bins_grid_control_heading_ctrl_12']")
			private static WebElement enter_ToBeAllocateTxt;
			
			//Check With Col in Grid s
			
			 public boolean checkBinPopUpPageInputManualInputInAllocateQtyInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			  {
					
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_17thColumn));
					select5thRow_17thColumn.click();
 
					Thread.sleep(20000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
					binSearchBtn.click();

					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_8thColumn));
					binselect2ndRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ToBeAllocateTxt));
					enter_ToBeAllocateTxt.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 207, 6));
					enter_ToBeAllocateTxt.sendKeys(Keys.TAB);
					
					Thread.sleep(2000);
					
					//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binTotalQty));
					//String actBinTotalQty                   = binTotalQty.getAttribute("value");
					String actBinBaseUom                    = binBaseUOM.getText();
					//String actBinBalanceQty                 = binBalanceTxt.getAttribute("value");
					//String actBinSum                        = binSumInward.getText();
					
					//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 208, 8, actBinTotalQty);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 209, 8, actBinBaseUom);
					//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 210, 8, actBinBalanceQty);
					//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 211, 8, actBinSum);
					
					String expBinTotalQty                   = excelReader.getCellData("PurchaseVoucherVAT", 208, 7);
					String expBinBaseUom                    = excelReader.getCellData("PurchaseVoucherVAT", 209, 7);
					String expBinBalanceQty                 = excelReader.getCellData("PurchaseVoucherVAT", 210, 7);
					String expBinSum                        = excelReader.getCellData("PurchaseVoucherVAT", 211, 7);
						
					System.out.println("***********************checkBinPopUpPageInputManualInputInAllocateQtyInPurchaseVoucherVAT*************************************");
			       
					//System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
					System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
					//System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);				
					//System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : " + expBinSum);
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
					binOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_17thColumn));
					String actBinName=select5thRow_17thColumn.getText();
					String expBinName=excelReader.getCellData("PurchaseVoucherVAT", 212, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 212, 8, actBinName);
					
					/*System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+ select5thRow_12thColumn.getText());
					System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+ select5thRow_13thColumn.getText());
					System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+ select5thRow_14thColumn.getText());
					*/
					/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRemarks));
					enter_PvRemarks.sendKeys(Keys.TAB);*/
							
					if(/*	actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && */actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
							/*&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
							&& actBinSum.equalsIgnoreCase(expBinSum)*/
							&&actBinName.equalsIgnoreCase(expBinName))
						
					{
						System.out.println("Test Pass: Entered Manually in Bin pop upin To Be Allocated Col ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 206, 9, resPass);
						return true;
					
					}
					else
					{
						System.out.println("Test fail: Entry Manually in Bin Pop up");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 206, 9, resFail);
						return false;
					}
				  }
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 206, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			  }
		
				
			 
			 
			 public boolean checkTaxCodeBySelectingFIFOBinItemInSixthRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			 {
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
								
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_1stColumn));
					select6thRow_1stColumn.click();

					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					enter_WarehouseTxt.click();
					enter_WarehouseTxt.sendKeys(Keys.END);
					enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_WarehouseTxt.sendKeys(Keys.SPACE);
						
					int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
					
					for (int i = 0; i < pvvGridWarehouseListCount; i++) 
					{
						String warehouse=pvvGridWarehouseList.get(i).getText();
						if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 214, 6))) 
						{
							pvvGridWarehouseList.get(i).click();
							break;
						}
					}
			        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					enter_ItemTxt.click();
					enter_ItemTxt.sendKeys(Keys.SPACE);
			        int pvvGridItemListCount=pvvGridItemList.size();
					for (int i = 0; i < pvvGridItemListCount; i++) 
					{
						String Item=pvvGridItemList.get(i).getText();
						if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 215, 6))) 
						{
							pvvGridItemList.get(i).click();
							break;
						}
					}
					enter_ItemTxt.sendKeys(Keys.TAB);
				
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
					
				    enter_PvTaxCode.click();
				        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
				   
				        
				   /* enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
				        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
				        
				    enter_PvTaxCode.sendKeys(Keys.SPACE);
				        
				    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
				        
				    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
				        
					for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
					{
						String Taxable=pvvGridTaxCodeList.get(i).getText();
							
						if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 216, 6))) 
						{
							pvvGridTaxCodeList.get(i).click();
							break;
						}
					}
				    enter_PvTaxCode.sendKeys(Keys.TAB);
					*/
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_5thColumn));
					select6thRow_5thColumn.click();
										
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_9thColumn));
					select6thRow_9thColumn.click();
									
					
					String actWarehouse=select6thRow_1stColumn.getText();
					String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 214, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 214, 8, actWarehouse);
									
					String actItem=select6thRow_2ndColumn.getText();
					String expItem=excelReader.getCellData("PurchaseVoucherVAT", 215, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 215, 8, actItem);
								
					String actTaxCode=select6thRow_3rdColumn.getText();
					String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 216, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 216, 8, actTaxCode);
					
					
					String actPurchaseAccount=select6thRow_4thColumn.getText();
					String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 213, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 213, 8, actPurchaseAccount);
					
					
					String actUnits=select6thRow_5thColumn.getText();
					String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 217, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 217, 8, actUnits);
					

					System.out.println("************checkTaxCodeBySelectingFIFOBinItemInSixthRowOfPurchaseVoucherVAT*************");
					
					System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
					System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
					System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
					System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
					System.out.println("PurchaseAccount           : " + actPurchaseAccount		+ " Value Expected : "+expPurchaseAccount);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_9thColumn));
					select6thRow_9thColumn.click();
					
					if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
							actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
							actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
					
					{
						System.out.println("Test Pass : Data Entered in Sixth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 213, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Data NOT Entered in Sixth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 213, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 213, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				}
				

				
				public boolean checkAvGRateAndAVGRateOBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
				try
				{
					
					
					Thread.sleep(3000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_6thColumn));
					select6thRow_6thColumn.click();
					Thread.sleep(3000);
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_7thColumn));
					select6thRow_7thColumn.click();
					
					Thread.sleep(3000);				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_8thColumn));
					select6thRow_8thColumn.click();
					
					Thread.sleep(3000);
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_9thColumn));
					select6thRow_9thColumn.click();
						
								
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_7thColumn));
					String actR1C1AVGRate =select6thRow_7thColumn.getText();			
					String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 219, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 219, 8, actR1C1AVGRate);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_8thColumn));
					String actR1C1AVGRateO =select6thRow_8thColumn.getText();			
					String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 220, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 220, 8, actR1C1AVGRateO);
							
					
					
					System.out.println("**************checkAvGRateAndAVGRateOBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT************************************");
					
					System.out.println("Avg rate  Value Actual     : "+actR1C1AVGRate    +" Value Expected : "+expR1C1AVGRate);	
					System.out.println("Avg rate (o) Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
													
					if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) &&  actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
					{
						System.out.println("Test Pass : Displayed Avg Rate And Avg rate(o) in Sixth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 218, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Not  Displayed Avg Rate And Avg rate(o) in Sixth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 218, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 218, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				}
				

				
				
				
				
				public boolean checkGrossBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
							
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 222, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 223, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.click();
					enter_Gross.sendKeys(Keys.TAB);

					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_12thColumn));
					
					String actR1C1Gross =select6thRow_12thColumn.getText();			
					String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 224, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 224, 8, actR1C1Gross);
							
					System.out.println("*****************checkGrossBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT*******************************");
					System.out.println("Gross  Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
													
					if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
					{
						System.out.println("Test Pass : Gross Value Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 221, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Gross Value is Not Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 221, 9, resFail);
						return false;
					}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 221, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
				}
				
				
				
				public boolean checkVATValueBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_14thColumn));
					select6thRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.click();
					enter_PvVat.sendKeys(Keys.TAB);
					
					String actR1C1VAT =select6thRow_14thColumn.getText();			
					String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 226, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 226, 8, actR1C1VAT);
							
					System.out.println("**************************checkVATValueBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT****************************");
					
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

					
					if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
					{
						System.out.println("Test Pass : Pv Vat Value Displayed ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 225, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Pv vat Value is not Displayed ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 225, 9, resFail);
						return false;
					}
					
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 225, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
				}
				
				
				
				
				
				public boolean checkTaxableValueBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
					enter_PvTaxable.click();
					enter_PvTaxable.sendKeys(Keys.TAB);
							
					String actR1C1Taxable =select6thRow_15thColumn.getText();			
					String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 228, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 228, 8, actR1C1Taxable);
				
					
					System.out.println("********************checkTaxableValueBySelectingFIFOBinItemInSixthRowPurchaseVoucherVAT*******************************");
					
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
													
					if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
					{
						System.out.println("Test Pass : PV Taxable Value is Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 227, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Pv Taxable Value Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 227, 9, resFail);
						return false;
					}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 227, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}

				}
				
				
				
				 public boolean checkBinPopUpPageSelectBinAllocateQtyThroughDoubleClickInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				  {
						
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
						binSearchBtn.click();
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect2ndRow_1stColumn));
						binselect2ndRow_1stColumn.click();
						
						getAction().doubleClick(binselect2ndRow_1stColumn).build().perform();
						
						Thread.sleep(2000);
						
						String actBinTotalQty                   = binTotalQty.getAttribute("value");
						String actBinBaseUom                    = binBaseUOM.getText();
						//String actBinBalanceQty                 = binBalanceTxt.getAttribute("value");
						//String actBinSum                        = binSumInward.getText();
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 230, 8, actBinTotalQty);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 231, 8, actBinBaseUom);
						//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 232, 8, actBinBalanceQty);
						//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 233, 8, actBinSum);
						
						String expBinTotalQty                   = excelReader.getCellData("PurchaseVoucherVAT", 230, 7);
						String expBinBaseUom                    = excelReader.getCellData("PurchaseVoucherVAT", 231, 7);
						String expBinBalanceQty                 = excelReader.getCellData("PurchaseVoucherVAT", 232, 7);
						String expBinSum                        = excelReader.getCellData("PurchaseVoucherVAT", 233, 7);
							
				       System.out.println("************checkBinPopUpPageSelectBinAllocateQtyThroughDoubleClickInPurchaseVoucherVAT**************");
						
						System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
						System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
						//System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);				
						//System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : " + expBinSum);
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
						binOkBtn.click();
						
						Thread.sleep(2000);
						
						String actBinName=select6thRow_17thColumn.getText();
						
						String expBinName=excelReader.getCellData("PurchaseVoucherVAT", 234, 7);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 234, 8, actBinName);
						
						System.out.println("Bin Column in Voucher : "+ actBinName +  "    "+select6thRow_17thColumn.getText());
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_14thColumn));
						
						
						//enter_PvRemarks.sendKeys(Keys.TAB);
								
						if(	actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
								/*&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
								
								&& actBinSum.equalsIgnoreCase(expBinSum)*/
								
								&& actBinName.equalsIgnoreCase(expBinName))
							
						{
							System.out.println("Selected Bin And Ok Btn is Enabled");
							excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 229, 9, resPass);
							return true;
						
						}
						else
						{
							System.out.println("Not Selected Bin And Ok Btn Not Enabled");
							excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 229, 9, resFail);
							return false;
						}
					  }
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 229, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				  }
			

				 

			 
			 
			 public boolean checkTaxCodeBySelectingWACOGSRMAItemInSeventhRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			 {
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
								
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_1stColumn));
					select7thRow_1stColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					enter_WarehouseTxt.click();
					enter_WarehouseTxt.sendKeys(Keys.END);
					enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_WarehouseTxt.sendKeys(Keys.SPACE);
						
					int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
					
					for (int i = 0; i < pvvGridWarehouseListCount; i++) 
					{
						String warehouse=pvvGridWarehouseList.get(i).getText();
						if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 236, 6))) 
						{
							pvvGridWarehouseList.get(i).click();
							break;
						}
					}
			        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					enter_ItemTxt.click();
					enter_ItemTxt.sendKeys(Keys.SPACE);
			        int pvvGridItemListCount=pvvGridItemList.size();
					for (int i = 0; i < pvvGridItemListCount; i++) 
					{
						String Item=pvvGridItemList.get(i).getText();
						if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 237, 6))) 
						{
							pvvGridItemList.get(i).click();
							break;
						}
					}
					enter_ItemTxt.sendKeys(Keys.TAB);
				
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
					
				    enter_PvTaxCode.click();
				     /*   
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
				    Thread.sleep(1000);
				        
				    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
				        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
				        
				    enter_PvTaxCode.sendKeys(Keys.SPACE);
				        
				    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
				        
				    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
				        
					for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
					{
						String Taxable=pvvGridTaxCodeList.get(i).getText();
							
						if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 238, 6))) 
						{
							pvvGridTaxCodeList.get(i).click();
							break;
						}
					}
				    enter_PvTaxCode.sendKeys(Keys.TAB);
					*/
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_5thColumn));
					select7thRow_5thColumn.click();
										
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_9thColumn));
					select7thRow_9thColumn.click();
									
					
					String actWarehouse=select7thRow_1stColumn.getText();
					String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 236, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 236, 8, actWarehouse);
									
					String actItem=select7thRow_2ndColumn.getText();
					String expItem=excelReader.getCellData("PurchaseVoucherVAT", 237, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 237, 8, actItem);
								
					String actTaxCode=select7thRow_3rdColumn.getText();
					String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 238, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 238, 8, actTaxCode);
					
					String actPurchaseAccount=select7thRow_4thColumn.getText();
					String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 235, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 235, 8, actPurchaseAccount);
					
					
					String actUnits=select7thRow_5thColumn.getText();
					String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 239, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 239, 8, actUnits);
					

					System.out.println("************checkTaxCodeBySelectingWACOGSRMAItemInSeventhRowOfPurchaseVoucherVAT*************");
					
					System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
					System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
					System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
					System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
					System.out.println("Purchase Account           : " + actPurchaseAccount		+ " Value Expected : "+expPurchaseAccount);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_9thColumn));
					select7thRow_9thColumn.click();
					
					if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
							actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
							actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
					
					{
						System.out.println("Test Pass : Data Entered in Seventh Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 235, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Data NOT Entered in Seventh Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 235, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 235, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				}
				

				
				public boolean checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
						
				try
				{
					
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_6thColumn));
					select7thRow_6thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_7thColumn));
					select7thRow_7thColumn.click();
					
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_8thColumn));
					select7thRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_9thColumn));
					select7thRow_9thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_7thColumn));
					String actR1C1AVGRate =select7thRow_7thColumn.getText();			
					String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 241, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 241, 8, actR1C1AVGRate);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_8thColumn));
					String actR1C1AVGRateO =select7thRow_8thColumn.getText();			
					String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 242, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 242, 8, actR1C1AVGRateO);
							
							
					System.out.println("******************* checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT  *************************************");
					
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
													
					if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
					{
						System.out.println("Test Pass : Avg rate is updated");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 240, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Avg Rate is not Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 240, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 240, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}

				}
				

				
				
				
				
				public boolean checkGrossBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
							
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 244, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 245, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.click();
					enter_Gross.sendKeys(Keys.TAB);

					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_12thColumn));
					String actR1C1Gross =select7thRow_12thColumn.getText();			
					String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 246, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 246, 8, actR1C1Gross);
							
					System.out.println("************** checkGrossBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT  ****************************************");
					
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
													
					if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
					{
						System.out.println("Test Pass : Gross is Updated As Expected ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 243, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Gross is Not Updated As Expected");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 243, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 243, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				}
				

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[11]")
				private static WebElement  select7thRow_10thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[12]")
				private static WebElement  select7thRow_11thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[13]")
				private static WebElement  select7thRow_12thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[14]")
				private static WebElement  select7thRow_13thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[15]")
				private static WebElement  select7thRow_14thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[16]")
				private static WebElement  select7thRow_15thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[17]")
				private static WebElement  select7thRow_16thColumn;
				
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[18]")
				private static WebElement  select7thRow_17thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[19]")
				private static WebElement  select7thRow_18thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[20]")
				private static WebElement  select7thRow_19thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[21]")
				private static WebElement  select7thRow_20thColumn;
				
				
				public boolean checkVATValueBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_14thColumn));
					select7thRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.click();
					enter_PvVat.sendKeys(Keys.TAB);
					
					
					String actR1C1VAT =select7thRow_14thColumn.getText();			
					String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 248, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 248, 8, actR1C1VAT);
							
					System.out.println("***********************checkVATValueBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT*************************************");
					
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

					
					if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
					{
						System.out.println("Test Pass : PV VAT Value Is Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 237, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : PV VAT Value is Not Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 237, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 237, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				}
				
				
				
				public boolean checkTaxableValueBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
					enter_PvTaxable.click();
					
					String actR1C1Taxable =enter_PvTaxable.getAttribute("value");			
					String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 249, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 249, 8, actR1C1Taxable);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					saveBtn.click();
					
					String expErrorMessage =excelReader.getCellData("PurchaseVoucherVAT", 250, 7);;
					String validationMessage=checkValidationMessage(expErrorMessage);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 250, 8, validationMessage);
					
					
					System.out.println("********************************checkTaxableValueBySelectingWACOGSRMAItemInSeventhRowPurchaseVoucherVAT***********************************");
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
													
					if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable)  && validationMessage.equalsIgnoreCase(expErrorMessage))
					{
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 249, 9, resPass);
						return true;
					}
					else
					{
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 249, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 249, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				}

			 
			 
		 

			    
			    public boolean checkAddAndOkButtonInRmaPageOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_19thColumn));
					select7thRow_19thColumn.click();
						
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 252, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
							
					// Actual
					String  actRmaRow1=rma_EnterRMA.getAttribute("value");
					
					// Expected
					String  expRmaRow1=excelReader.getCellData("PurchaseVoucherVAT", 252, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 252, 8, actRmaRow1);
					
					System.out.println("******************* checkAddAndOkButtonInRmaPageOfPurchaseVoucherVAT  *********************************");
					
					System.out.println("Rma Row 1 Serial Number   : "+actRmaRow1	   +"  Value Expected : "+expRmaRow1);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
					String actRMATxt=enter_RMA.getAttribute("value");
					
					String expRMATxt=excelReader.getCellData("PurchaseVoucherVAT", 253, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 253, 8, actRMATxt);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				    enter_RMA.sendKeys(Keys.TAB);

					//enter_PvRemarks.sendKeys(Keys.TAB);
					
					if(actRmaRow1.equalsIgnoreCase(expRmaRow1) && actRMATxt.equalsIgnoreCase(expRMATxt))
					{
						System.out.println("Test Pass : 1 Row Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 251, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : 1 Row NOT Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 251, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 251, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}

	             }
				
		
		  
	    public boolean checkTaxCodeBySelectingWACOGSRMAItemInEightRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_1stColumn));
				select8thRow_1stColumn.click();*/
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
				enter_WarehouseTxt.click();
				enter_WarehouseTxt.sendKeys(Keys.END);
				enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
				int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
				
				for (int i = 0; i < pvvGridWarehouseListCount; i++) 
				{
					String warehouse=pvvGridWarehouseList.get(i).getText();
					if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 255, 6))) 
					{
						pvvGridWarehouseList.get(i).click();
						break;
					}
				}
		        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.click();
				enter_ItemTxt.sendKeys(Keys.SPACE);
		        int pvvGridItemListCount=pvvGridItemList.size();
				for (int i = 0; i < pvvGridItemListCount; i++) 
				{
					String Item=pvvGridItemList.get(i).getText();
					if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 256, 6))) 
					{
						pvvGridItemList.get(i).click();
						break;
					}
				}
				enter_ItemTxt.sendKeys(Keys.TAB);
			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				
			    enter_PvTaxCode.click();
			        
			   /* enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			    Thread.sleep(1000);
			        
			    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
			        
			    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
			        
			    enter_PvTaxCode.sendKeys(Keys.SPACE);
			        
			    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
			        
			    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
			        
				for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
				{
					String Taxable=pvvGridTaxCodeList.get(i).getText();
						
					if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 257, 6))) 
					{
						pvvGridTaxCodeList.get(i).click();
						break;
					}
				}
			    enter_PvTaxCode.sendKeys(Keys.TAB);*/
			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_5thColumn));
				select8thRow_5thColumn.click();
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_9thColumn));
				select8thRow_9thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_1stColumn));
				String actWarehouse=select8thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 255, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 255, 8, actWarehouse);
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_2ndColumn));
				String actItem=select8thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 256, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 256, 8, actItem);
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_3rdColumn));
				String actTaxCode=select8thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 257, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 257, 8, actTaxCode);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_4thColumn));
				String actPurchaseAccount=select8thRow_4thColumn.getText();
				String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 254, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 254, 8, actPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_5thColumn));
				String actUnits=select8thRow_5thColumn.getText();
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 258, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 258, 8, actUnits);
				
				System.out.println("*******************checkTaxCodeBySelectingWACOGSRMAItemInEightRowOfPurchaseVoucherVAT******************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
			    System.out.println("PurchaseAccount   :     "+actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_9thColumn));
				select8thRow_9thColumn.click();
				
				if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
						actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
						actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
				
				{
					System.out.println("Test Pass : Data Entered in eigth Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 254, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in first Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 254, 9, resFail);
					return false;
				}
		 }
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 254, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			

			
			public boolean checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInEigthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		    try
		    {
		    	
		    	
		    	
		    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_6thColumn));
				select8thRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_7thColumn));
				select8thRow_7thColumn.click();
				
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_8thColumn));
				select8thRow_8thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_9thColumn));
				select8thRow_9thColumn.click();
						
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_7thColumn));
				
				String actR1C1AVGRate =select8thRow_7thColumn.getText();			
				String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 260, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 260, 8, actR1C1AVGRate);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_8thColumn));
				String actR1C1AVGRateO =select8thRow_8thColumn.getText();			
				String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 261, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 261, 8, actR1C1AVGRateO);
						
						
				System.out.println("************************checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInEigthRowPurchaseVoucherVAT****************************************");
				
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
												
				if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
				{
					System.out.println("Test Pass :Avg rate Is Updated");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 259, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail :Avg rate is Not updated");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 259, 9, resFail);
					return false;
				}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 259, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
			}
			

			
			
			
			
			public boolean checkGrossBySelectingWACOGSRMAItemIEigthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.click();
				enter_Quantity.clear();
				enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 263, 6));
				enter_Quantity.sendKeys(Keys.TAB);
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.click();
				enter_Rate.clear();
				enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 264, 6));
				enter_Rate.sendKeys(Keys.TAB);
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.click();
				enter_Gross.sendKeys(Keys.TAB);

				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_12thColumn));
				
				String actR1C1Gross =select8thRow_12thColumn.getText();			
				String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 265, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 265, 8, actR1C1Gross);
						
				System.out.println("**********************checkGrossBySelectingWACOGSRMAItemIEigthRowPurchaseVoucherVAT******************************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
												
				if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
				{
					System.out.println("Test Pass : Gross is Updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 262, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Gross is not updated ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 262, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 262, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[11]")
			private static WebElement  select8thRow_10thColumn;

			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[12]")
			private static WebElement  select8thRow_11thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[13]")
			private static WebElement  select8thRow_12thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[14]")
			private static WebElement  select8thRow_13thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[15]")
			private static WebElement  select8thRow_14thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[16]")
			private static WebElement  select8thRow_15thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[17]")
			private static WebElement  select8thRow_16thColumn;

			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[18]")
			private static WebElement  select8thRow_17thColumn;
			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[19]")
			private static WebElement  select8thRow_18thColumn;
			
			@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[20]")
			private static WebElement  select8thRow_19thColumn;
			
			
			
			public boolean checkVATValueBySelectingWACOGSRMAItemInEightRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_14thColumn));
				select8thRow_14thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
				enter_PvVat.click();
				
				enter_PvVat.sendKeys(Keys.TAB);
				
				
				String actR1C1VAT =select8thRow_14thColumn.getText();			
				String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 267, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 267, 8, actR1C1VAT);
						
				System.out.println("*************************************checkVATValueBySelectingWACOGSRMAItemInEightRowPurchaseVoucherVAT***********************************");
				System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

				
				if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 266, 9, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 266, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 266, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
			
			
			
			public boolean checkTaxableValueBySelectingWACOGSRMAItemInEigthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
				enter_PvTaxable.click();
				enter_PvTaxable.sendKeys(Keys.TAB);
				
				String actR1C1Taxable =select8thRow_15thColumn.getText();			
				String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 269, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 269, 8, actR1C1Taxable);
			
				
				System.out.println("**************************checkTaxableValueBySelectingWACOGSRMAItemInEigthRowPurchaseVoucherVAT**********************************");
				
				System.out.println("Entry Page Taxable Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
												
				if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
				{
					System.out.println("Test Pass : Displayed Value  Taxable ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 268, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Not Displayed Taxable Value ");
					excelReader.setCellData(xlfile, "Sheet6", 268, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 268, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}

		 
		 
	 

		    
		    public boolean checkAddAndOkButtonInRmaPageEigthRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
				rmaSerialNumberTxtField.click();
				rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 271, 6));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
				rmaAddBtn.click();
						
				// Actual
				String  actRmaRow1=rma_EnterRMA.getAttribute("value");
				
				// Expected
				String  expRmaRow1=excelReader.getCellData("PurchaseVoucherVAT", 271, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 271, 8, actRmaRow1);
				
				System.out.println("********************************checkAddAndOkButtonInRmaPageEigthRowOfPurchaseVoucherVAT*****************************");
				
				System.out.println("Rma Row 1 Serial Number   : "+actRmaRow1	   +"  Value Expected : "+expRmaRow1);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
				rmaOkBtn.click();

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_17thColumn));
				
				String actRMATxt=enter_RMA.getAttribute("value");
				
				String expRMATxt=excelReader.getCellData("PurchaseVoucherVAT", 272, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 272, 8, actRMATxt);
				
				System.out.println("Rma Row 1 Serial Number   : "+actRMATxt	   +"  Value Expected : "+expRMATxt);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
				enter_RMA.sendKeys(Keys.TAB);
				
				//enter_PvRemarks.sendKeys(Keys.TAB);
				
				if(actRmaRow1.equalsIgnoreCase(expRmaRow1) )
				{
					System.out.println("Test Pass : 1 Row Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 270, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : 1 Row NOT Displayed");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 270, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 270, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
	         }

	  
		    
		    public boolean checkTaxCodeBySelectingWACOGSRMAItemInNinethRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
								
					/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_1stColumn));
					select9thRow_1stColumn.click();*/
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					enter_WarehouseTxt.click();
					enter_WarehouseTxt.sendKeys(Keys.END);
					enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_WarehouseTxt.sendKeys(Keys.SPACE);
						
					int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
					
					for (int i = 0; i < pvvGridWarehouseListCount; i++) 
					{
						String warehouse=pvvGridWarehouseList.get(i).getText();
						if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 274, 6))) 
						{
							pvvGridWarehouseList.get(i).click();
							break;
						}
					}
			        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					enter_ItemTxt.click();
					enter_ItemTxt.sendKeys(Keys.SPACE);
			        int pvvGridItemListCount=pvvGridItemList.size();
					for (int i = 0; i < pvvGridItemListCount; i++) 
					{
						String Item=pvvGridItemList.get(i).getText();
						if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 275, 6))) 
						{
							pvvGridItemList.get(i).click();
							break;
						}
					}
					enter_ItemTxt.sendKeys(Keys.TAB);
				
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
					
				    enter_PvTaxCode.click();
				        
				   /* enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
				    Thread.sleep(1000);
				        
				    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
				        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
				        
				    enter_PvTaxCode.sendKeys(Keys.SPACE);
				        
				    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
				        
				    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
				        
					for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
					{
						String Taxable=pvvGridTaxCodeList.get(i).getText();
							
						if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 276, 6))) 
						{
							pvvGridTaxCodeList.get(i).click();
							break;
						}
					}
				    enter_PvTaxCode.sendKeys(Keys.TAB);*/
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_5thColumn));
					select9thRow_5thColumn.click();
										
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_9thColumn));
					select9thRow_9thColumn.click();
					

					String actWarehouse=select9thRow_1stColumn.getText();
					String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 274, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 274, 8, actWarehouse);
									
					String actItem=select9thRow_2ndColumn.getText();
					String expItem=excelReader.getCellData("PurchaseVoucherVAT", 275, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 275, 8, actItem);
								
					String actTaxCode=select9thRow_3rdColumn.getText();
					String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 276, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 276, 8, actTaxCode);
					
					String actPurchaseAccount=select9thRow_4thColumn.getText();
					String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 273, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 273, 8, actPurchaseAccount);
					
					String actUnits=select9thRow_5thColumn.getText();
					String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 277, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 277, 8, actUnits);
					
					System.out.println("*******************checkTaxCodeBySelectingWACOGSRMAItemInNinethRowOfPurchaseVoucherVAT******************");
					
					System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
					System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
					System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
					System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
					System.out.println("PurchaseAccount   : "+actPurchaseAccount +" Value Expected  : "+expPurchaseAccount);
					
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_9thColumn));
					select9thRow_9thColumn.click();
					
					if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
							actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
							actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
					
					{
						System.out.println("Test Pass : Data Entered in eigth Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 273, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Data NOT Entered in Eight Row");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 273, 9, resFail);
						return false;
					}
			 }
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 273, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				}
				
				
				public boolean checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
						
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_6thColumn));
					select9thRow_6thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_7thColumn));
					select9thRow_7thColumn.click();
					
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_8thColumn));
					select9thRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_9thColumn));
					select9thRow_9thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_7thColumn));
					
					
					String actR1C1AVGRate =select9thRow_7thColumn.getText();			
					String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 279, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 279, 8, actR1C1AVGRate);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_8thColumn));
					String actR1C1AVGRateO =select9thRow_8thColumn.getText();			
					String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 280, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 280, 8, actR1C1AVGRateO);
							
							
					System.out.println("***********************checkAvGRateAndAVGRateOBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT*******************");
					
					System.out.println("Entry Page Avg Rate  Value Actual      : "+actR1C1AVGRate    +" Value Expected : "+expR1C1AVGRate);	
					System.out.println("Entry Page Avgg Rate (o) Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
													
					if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) &&  actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
					{
						System.out.println("Test Pass : Avg Rate Is Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 278, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Avg Rate is Not Updated ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 278, 9, resFail);
						return false;
					}
				}


	              catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 278, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
	       }

				public boolean checkGrossBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 282, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 283, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.click();
					enter_Gross.sendKeys(Keys.TAB);

					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_12thColumn));
					String actR1C1Gross =select9thRow_12thColumn.getText();			
					String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 284, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 284, 8, actR1C1Gross);
							
					System.out.println("**************** checkGrossBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT  ****************************");
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
													
					if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
					{
						System.out.println("Test Pass : Displayed Gross Value ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 281, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Not Displayed Gross Value ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 281, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 281, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				}
				


				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[11]")
				private static WebElement  select9thRow_10thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[12]")
				private static WebElement  select9thRow_11thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[13]")
				private static WebElement  select9thRow_12thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[14]")
				private static WebElement  select9thRow_13thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[15]")
				private static WebElement  select9thRow_14thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[16]")
				private static WebElement  select9thRow_15thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[17]")
				private static WebElement  select9thRow_16thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[18]")
				private static WebElement  select9thRow_17thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[19]")
				private static WebElement  select9thRow_18thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[20]")
				private static WebElement  select9thRow_19thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[21]")
				private static WebElement  select9thRow_20thColumn;

				
				public boolean checkVATValueBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_14thColumn));
					select9thRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.click();
					enter_PvVat.sendKeys(Keys.TAB);
					
					String actR1C1VAT =select9thRow_14thColumn.getText();			
					String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 286, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 286, 8, actR1C1VAT);
							
					System.out.println("************* checkVATValueBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT  *************************************");
					System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

					
					if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
					{
						System.out.println("Test Pass :Diplayed PV VAT Value ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 285, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Not Displayed PV VAT Value  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 285, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 285, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				}
				
				
				
				public boolean checkTaxableValueBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
					enter_PvTaxable.click();
					enter_PvTaxable.sendKeys(Keys.TAB);
							
					
					String actR1C1Taxable =select9thRow_15thColumn.getText();			
					String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 288, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 288, 8, actR1C1Taxable);
				
					
					System.out.println("*********************checkTaxableValueBySelectingWACOGSRMAItemInNinethRowPurchaseVoucherVAT*************************************");
					System.out.println("Taxable  Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
													
					if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
					{
						System.out.println("Test Pass :Taxable Value is Displayed ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 287, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Taxable Value is Not Displayed ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 287, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 287, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
				}

			 
			 
		 

			    
			    public boolean checkAddAndOkButtonInRmaPageNinethRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
						
					Thread.sleep(2000);
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 290, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
							
					// Actual
					String  actRmaRow1=rma_EnterRMA.getAttribute("value");
					
					// Expected
					String  expRmaRow1=excelReader.getCellData("PurchaseVoucherVAT", 290, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 290, 8, actRmaRow1);

					
					System.out.println("************************************* checkRmaWithSerialNumbersNotCompletely  *********************************");
					
					System.out.println("Rma Row 1 Serial Number   : "+actRmaRow1	   +"  Value Expected : "+expRmaRow1);
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();

					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_17thColumn));
					String actRMATxt=enter_RMA.getAttribute("value");
					
					String expRMATxt=excelReader.getCellData("PurchaseVoucherVAT", 272, 7);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 272, 8, actRMATxt);
					
					System.out.println("RMATxt     :"+actRMATxt +"     Value Expected : "+expRMATxt);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RMA));
					enter_RMA.sendKeys(Keys.TAB);
					
					//enter_PvRemarks.sendKeys(Keys.TAB);
					
					if(actRmaRow1.equalsIgnoreCase(expRmaRow1))
					{
						System.out.println("Test Pass :RMA Value is  Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 289, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : RMA Value is NOt  Displayed");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 289, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 289, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				   	 	return false;
					}
	             }

	    
			 //Checking Pending Status in the Home Page
				
				




		
		public boolean checkTaxCodeBySelectingStdCOGSItemInTenthRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
						
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_1stColumn));
			select10thRow_1stColumn.click();*/
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			enter_WarehouseTxt.sendKeys(Keys.END);
			enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
				
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 293, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 294, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
			
		    enter_PvTaxCode.click();
		        
		    /*enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
		    Thread.sleep(1000);
		        
		    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
		        
		    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
		        
		    enter_PvTaxCode.sendKeys(Keys.SPACE);
		        
		    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
		        
		    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
		        
			for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
			{
				String Taxable=pvvGridTaxCodeList.get(i).getText();
					
				if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 295, 6))) 
				{
					pvvGridTaxCodeList.get(i).click();
					break;
				}
			}
		    enter_PvTaxCode.sendKeys(Keys.TAB);
	*/	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_5thColumn));
			select10thRow_5thColumn.click();
								
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_9thColumn));
			select10thRow_9thColumn.click();
			

			String actWarehouse=select10thRow_1stColumn.getText();
			String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 293, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 293, 8, actWarehouse);
							
			String actItem=select10thRow_2ndColumn.getText();
			String expItem=excelReader.getCellData("PurchaseVoucherVAT", 294, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 294, 8, actItem);
						
			String actTaxCode=select10thRow_3rdColumn.getText();
			String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 295, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 295, 8, actTaxCode);
			
			String actPurchaseAccount=select10thRow_4thColumn.getText();
			String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 292, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 292, 8, actPurchaseAccount);
			
			
			String actUnits=select10thRow_5thColumn.getText();
			String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 296, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 296, 8, actUnits);
			
			System.out.println("*******************checkTaxCodeBySelectingStdCOGSItemInTenthRowOfPurchaseVoucherVAT******************");
			
			System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
			System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
			System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
			System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
			System.out.println("PurchaseAccount      :  "+actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_9thColumn));
			select10thRow_9thColumn.click();
			
			if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
					actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
					actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
			
			{
				System.out.println("Test Pass : Data Entered in TenthRow");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 292, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in TenthRow");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 292, 9, resFail);
				return false;
			}
			}
	         catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 292, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		

		
		public boolean checkAvGRateAndAVGRateOBySelectingStdCOGSItemInTenthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
					
		try
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_6thColumn));
			select10thRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_7thColumn));
			select10thRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_8thColumn));
			select10thRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_9thColumn));
			select10thRow_9thColumn.click();
				
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_7thColumn));
			
			String actR1C1AVGRate =select10thRow_7thColumn.getText();			
			String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 298, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 298, 8, actR1C1AVGRate);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_8thColumn));
			String actR1C1AVGRateO =select10thRow_8thColumn.getText();			
			String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 299, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 299, 8, actR1C1AVGRateO);
					
					
			System.out.println("*************************checkAvGRateAndAVGRateOBySelectingStdCOGSItemInTenthRowPurchaseVoucherVAT************");
			
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
											
			if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO) )
			{
				System.out.println("Test Pass : Dispalyed Avg  Rate");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 297, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Displayed Avg Rate ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 297, 9, resFail);
				return false;
			}
			}

	        catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 297, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		

		
		
		public boolean checkGrossBySelectingStdCOGSItemInTenthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 301, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
				workFlowCloseBtn.click();
			}
			catch(Exception e)
			{
				System.err.println("RESERVED POP UP NOT DISPLAYED");
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 302, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_12thColumn));
			
			String actR1C1Gross =select10thRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 303, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 303, 8, actR1C1Gross);
					
			System.out.println("****************************checkGrossBySelectingStdCOGSItemInTenthRowPurchaseVoucherVAT*********************************");
			System.out.println("Entry Page Gross Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
			{
				System.out.println("Test Pass : Gross is updated");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 300, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail :Gross is not updated");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 300, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 300, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		
		
		
		public boolean checkVATValueBySelectingStdCOGSInTenthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_14thColumn));
			select10thRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			enter_PvVat.clear();
			enter_PvVat.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 305, 6));
			enter_PvVat.sendKeys(Keys.TAB);
			
			
			String actR1C1VAT =select10thRow_14thColumn.getText();			
			String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 305, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 305, 8, actR1C1VAT);
					
			System.out.println("**************************checkVATValueBySelectingStdCOGSInTenthRowPurchaseVoucherVAT**********************************");
			
			System.out.println("Entry Page VAT  Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

			
			if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
			{
				System.out.println("Test Pass : VAT Value Displayed  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 304, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : VAT Value Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 304, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 304, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			 	return false;
			}
		}
		
		
		
		public boolean checkTaxableValueBySelectingStdCOGSInTenthRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			
			String actR1C1Taxable =select10thRow_15thColumn.getText();			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 307, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 307, 8, actR1C1Taxable);
		
			//enter_PvRemarks.sendKeys(Keys.TAB);
			
			System.out.println("*****************checkTaxableValueBySelectingStdCOGSInTenthRowPurchaseVoucherVAT***************************************");
			System.out.println("Entry Page TAXABLE  Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
											
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
			{
				System.out.println("Test Pass : Taxable Value Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 306, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Displayed Actual Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 306, 9, resFail);
				return false;
			}
			}

			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 306, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			 	return false;
			}
		}





		public boolean checkTaxCodeBySelectingStdCOGSInEleventhRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		 {
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_1stColumn));
				select11thRow_1stColumn.click();
				

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
				enter_WarehouseTxt.click();
				enter_WarehouseTxt.sendKeys(Keys.END);
				enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
				int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
				
				for (int i = 0; i < pvvGridWarehouseListCount; i++) 
				{
					String warehouse=pvvGridWarehouseList.get(i).getText();
					if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 309, 6))) 
					{
						pvvGridWarehouseList.get(i).click();
						break;
					}
				}
		        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.click();
				enter_ItemTxt.sendKeys(Keys.SPACE);
		        int pvvGridItemListCount=pvvGridItemList.size();
				for (int i = 0; i < pvvGridItemListCount; i++) 
				{
					String Item=pvvGridItemList.get(i).getText();
					if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 310, 6))) 
					{
						pvvGridItemList.get(i).click();
						break;
					}
				}
				enter_ItemTxt.sendKeys(Keys.TAB);
			
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				
			    enter_PvTaxCode.click();
			        
			    /*enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			    Thread.sleep(1000);
			        
			    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
			        
			    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
			        
			    enter_PvTaxCode.sendKeys(Keys.SPACE);
			        
			    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
			        
			    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
			        
				for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
				{
					String Taxable=pvvGridTaxCodeList.get(i).getText();
						
					if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 311, 6))) 
					{
						pvvGridTaxCodeList.get(i).click();
						break;
					}
				}
			    enter_PvTaxCode.sendKeys(Keys.TAB);
	*/
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_5thColumn));
				select11thRow_5thColumn.click();
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_9thColumn));
				select11thRow_9thColumn.click();
				
				String actWarehouse=select11thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 309, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 309, 8, actWarehouse);
								
				String actItem=select11thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 310, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 310, 8, actItem);
							
				String actTaxCode=select11thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 311, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 311, 8, actTaxCode);
				
				String actPurchaseAccount=select11thRow_4thColumn.getText();
				String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 308, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 308, 8, actPurchaseAccount);
				
				String actUnits=select11thRow_5thColumn.getText();
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 312, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 312, 8, actUnits);
				
				
				System.out.println("*******************checkTaxCodeBySelectingStdCOGSInEleventhRowOfPurchaseVoucherVAT******************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
				System.out.println(" PurchaseAccount  : "+actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_9thColumn));
				select11thRow_9thColumn.click();
				
				if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
						actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits) && 
						actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
				
				{
					System.out.println("Test Pass : Data Entered in Eleventh Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 308, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in Eleventh Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 308, 9, resFail);
					return false;
				}
				}
				catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 308, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				 	return false;
				}
			}
		

		
		public boolean checkAvGRateAndAVGRateBySelectingStdCOGSInEleventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_6thColumn));
			select11thRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_7thColumn));
			select11thRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_8thColumn));
			select11thRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_9thColumn));
			select11thRow_9thColumn.click();
				
				
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_7thColumn));
			
			String actR1C1AVGRate =select11thRow_7thColumn.getText();			
			String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 314, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 314, 8, actR1C1AVGRate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_8thColumn));
			String actR1C1AVGRateO =select11thRow_8thColumn.getText();			
			String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 315, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 315, 8, actR1C1AVGRateO);
					
					
			System.out.println("***************************checkAvGRateAndAVGRateBySelectingStdCOGSInEleventhRowPurchaseVoucherVAT*******************************");
			
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
											
			if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate)   && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
			{
				System.out.println("Test Pass : Displayed Avg Rate is Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 313, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Avg Rate is Not Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 313, 9, resFail);
				return false;
			}
			}
			
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 313, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			 	return false;
			}
		}
		

		public boolean checkGrossBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 317, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
				workFlowCloseBtn.click();
			}
			catch(Exception e)
			{
				System.err.println("RESERVED POP UP NOT DISPLAYED");
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 318, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_12thColumn));
			String actR1C1Gross =select11thRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 319, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 319, 8, actR1C1Gross);
					
			System.out.println("*********************************checkGrossBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT**********************************");
			
			System.out.println("Entry Page Gross  Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross))
			{
				System.out.println("Test Pass : Gross Value is Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 316, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Gross Value is Not Displayed ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 316, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 316, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			 	return false;
			}
			
		}
		
		
		
		public boolean checkVATValueBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_14thColumn));
			select11thRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			/*enter_PvVat.clear();
			enter_PvVat.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 321, 6));*/
			enter_PvVat.sendKeys(Keys.TAB);
			
			String actR1C1VAT =select11thRow_14thColumn.getText();			
			String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 321, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 321, 8, actR1C1VAT);
					
			System.out.println("******************************checkVATValueBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT***********************");
			System.out.println("Entry Page VAT Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

			
			if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
			{
				System.out.println("Test Pass :Displayed Vat Value ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 320, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT Displayed Vat Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 320, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 320, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			 	return false;
			}
		}
		
		
		
		public boolean checkTaxableValueBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_15thColumn));
			String actR1C1Taxable =select11thRow_15thColumn.getText();			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 323, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 323, 8, actR1C1Taxable);
		
			
			System.out.println("*****************************checkTaxableValueBySelectingStdCOGSItemInEleventhRowPurchaseVoucherVAT*****************************");
			
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
			
			//enter_PvRemarks.sendKeys(Keys.TAB);
			
			
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
			{
				System.out.println("Test Pass : Displayed Taxable Value  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 322, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : NOT  Displayed Taxable Value");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 322, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 322, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			 	return false;
			}
		}

		





		public boolean checkTaxCodeBySelectingStdCOGSInTwelevethRowOfPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
							
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_1stColumn));
				select12thRow_1stColumn.click();

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
				enter_WarehouseTxt.click();
				enter_WarehouseTxt.sendKeys(Keys.END);
				enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
				enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
				int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
				
				for (int i = 0; i < pvvGridWarehouseListCount; i++) 
				{
					String warehouse=pvvGridWarehouseList.get(i).getText();
					if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 325, 6))) 
					{
						pvvGridWarehouseList.get(i).click();
						break;
					}
				}
		        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
		        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.click();
				enter_ItemTxt.sendKeys(Keys.SPACE);
		        int pvvGridItemListCount=pvvGridItemList.size();
				for (int i = 0; i < pvvGridItemListCount; i++) 
				{
					String Item=pvvGridItemList.get(i).getText();
					if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 326, 6))) 
					{
						pvvGridItemList.get(i).click();
						break;
					}
				}
				enter_ItemTxt.sendKeys(Keys.TAB);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				
			    enter_PvTaxCode.click();
			  
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_5thColumn));
				select12thRow_5thColumn.click();
									
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_9thColumn));
				select12thRow_9thColumn.click();
				
				String actWarehouse=select12thRow_1stColumn.getText();
				String expWarehouse=excelReader.getCellData("PurchaseVoucherVAT", 325, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 325, 8, actWarehouse);
								
				String actItem=select12thRow_2ndColumn.getText();
				String expItem=excelReader.getCellData("PurchaseVoucherVAT", 326, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 326, 8, actItem);
							
				String actTaxCode=select12thRow_3rdColumn.getText();
				String expTaxCode=excelReader.getCellData("PurchaseVoucherVAT", 327, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 327, 8, actTaxCode);
				
				
				String actPurchaseAccount=select12thRow_4thColumn.getText();
				String expPurchaseAccount=excelReader.getCellData("PurchaseVoucherVAT", 324, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 324, 8, actPurchaseAccount);
				
				String actUnits=select12thRow_5thColumn.getText();
				String expUnits=excelReader.getCellData("PurchaseVoucherVAT", 328, 7);
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 328, 8, actUnits);
				
				System.out.println("*******************checkTaxCodeBySelectingStdCOGSInTwelevethRowOfPurchaseVoucherVAT******************");
				
				System.out.println("Warehouse       : " + actWarehouse	+ " Value Expected : "+expWarehouse);
				System.out.println("Item            : " + actItem		+ " Value Expected : "+expItem);
				System.out.println("TaxCode         : " + actTaxCode	+ " Value Expected : "+expTaxCode);
				System.out.println("Units           : " + actUnits		+ " Value Expected : "+expUnits);
				System.out.println("PurchaseAccount   : "+actPurchaseAccount+ " Value Expected : "+expPurchaseAccount);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_9thColumn));
				select12thRow_9thColumn.click();
				
				if(actTaxCode.equalsIgnoreCase(expTaxCode) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
						actItem.equalsIgnoreCase(expItem) && actUnits.equalsIgnoreCase(expUnits)&& 
						actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount))
				
				{
					System.out.println("Test Pass : Data Entered in Tweleve Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 324, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail : Data NOT Entered in Tweleve Row");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 324, 9, resFail);
					return false;
				}
				}
				  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 324, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
			}
		

		
		public boolean checkAvGRateAndAVGRateOBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		
			try
			{
				
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_6thColumn));
			select12thRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_7thColumn));
			select12thRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_8thColumn));
			select12thRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_9thColumn));
			select12thRow_9thColumn.click();
				
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_7thColumn));
			String actR1C1AVGRate =select12thRow_7thColumn.getText();			
			String expR1C1AVGRate =excelReader.getCellData("PurchaseVoucherVAT", 330, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 330, 8, actR1C1AVGRate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_8thColumn));
			String actR1C1AVGRateO =select12thRow_8thColumn.getText();			
			String expR1C1AVGRateO =excelReader.getCellData("PurchaseVoucherVAT", 331, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 331, 8, actR1C1AVGRateO);
					
					
			System.out.println("************************checkAvGRateAndAVGRateOBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT***********");
			
			System.out.println("Entry Page Avg Rate  Value Actual    : "+actR1C1AVGRate   +" Value Expected : "+expR1C1AVGRate);	
			System.out.println("Entry Page Avg Rate(o) Value Actual  : "+actR1C1AVGRateO   +" Value Expected : "+expR1C1AVGRateO);
											
			if(actR1C1AVGRate.equalsIgnoreCase(expR1C1AVGRate) && actR1C1AVGRateO.equalsIgnoreCase(expR1C1AVGRateO))
			{
				System.out.println("Test Pass : Displayed Avg Rate ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 329, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Not Displayed Avg rate");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 329, 9, resFail);
				return false;
			}
			}
			  catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 329, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}

		}
		

		
		@FindBy(xpath="//i[@id='id_transactionentry_workflow_popup_close']")
		private static WebElement  workFlowCloseBtn;
		
		
		public boolean checkGrossBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 333, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowCloseBtn));
				workFlowCloseBtn.click();
			}
			catch(Exception e)
			{
				System.err.println("RESERVED POP UP NOT DISPLAYED");
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 334, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.click();
			enter_Gross.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_12thColumn));
			String actR1C1Gross =select12thRow_12thColumn.getText();			
			String expR1C1Gross =excelReader.getCellData("PurchaseVoucherVAT", 335, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 335, 8, actR1C1Gross);
					
			System.out.println("**********************************checkGrossBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT*********************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Gross   +" Value Expected : "+expR1C1Gross);	
											
			if(actR1C1Gross.equalsIgnoreCase(expR1C1Gross) )
			{
				System.out.println("Test Pass : Displayed Gross Value ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 332, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : not Displayed Gross Value ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 332, 9, resFail);
				return false;
			}
			}
			  catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 332, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			   	 	return false;
				}
		}
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[11]")
		private static WebElement  select10thRow_10thColumn;


		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[11]")
		private static WebElement  select11thRow_10thColumn;
				
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[12]")
		private static WebElement  select11thRow_11thColumn;
				
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[13]")
		private static WebElement  select11thRow_12thColumn;
				
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[14]")
		private static WebElement  select11thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[15]")
		private static WebElement  select11thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[16]")
		private static WebElement  select11thRow_15thColumn;


		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[13]")
		private static WebElement  select12thRow_12thColumn;

		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[14]")
		private static WebElement  select12thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[15]")
		private static WebElement  select12thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[16]")
		private static WebElement  select12thRow_15thColumn;

		
		public boolean checkVATValueBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_14thColumn));
			select12thRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
			enter_PvVat.click();
			enter_PvVat.sendKeys(Keys.TAB);
			
			
			String actR1C1VAT =select12thRow_14thColumn.getText();			
			String expR1C1VAT =excelReader.getCellData("PurchaseVoucherVAT", 337, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 337, 8, actR1C1VAT);
					
			System.out.println("*********************************************** checkEnteringDatainFirstRow  ********************************************");
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1VAT   +" Value Expected : "+expR1C1VAT);	

			
			if(actR1C1VAT.equalsIgnoreCase(expR1C1VAT))
			{
				System.out.println("Test Pass : Data Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 336, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 336, 9, resFail);
				return false;
			}
		}
		 catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 336, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}
		
		
		
		public boolean checkTaxableValueBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			try
			{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
			enter_PvTaxable.click();
			enter_PvTaxable.sendKeys(Keys.TAB);
					
			
			String actR1C1Taxable =select12thRow_15thColumn.getText();	
			
			String expR1C1Taxable =excelReader.getCellData("PurchaseVoucherVAT", 339, 7);
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 339, 8, actR1C1Taxable);
		
			
			System.out.println("******************************checkTaxableValueBySelectingStdCOGSInTwelevethRowPurchaseVoucherVAT*************************");
			
			System.out.println("Entry Page Save with Vendor Input Value Actual  : "+actR1C1Taxable   +" Value Expected : "+expR1C1Taxable);	
			
			//enter_PvRemarks.sendKeys(Keys.TAB);
			
			if(actR1C1Taxable.equalsIgnoreCase(expR1C1Taxable) )
			{
				System.out.println("Test Pass : Data Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 338, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Data NOT Entered in first Row");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 338, 9, resFail);
				return false;
			}
		}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 338, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
		}




	public boolean checkPurchaseVoucherVATBillwisePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	
		
			try
			{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPaymentsBillReferenceLabel));
			
			// Actual
			boolean actbillRefPaymentsBillReferenceLabel=billRefPaymentsBillReferenceLabel.isDisplayed();
			boolean actbillRefNewReferenceTxt=billRefNewReferenceTxt.isDisplayed();
			boolean actbillRefTxtOnAccount=billRefTxtOnAccount.isDisplayed();
			boolean actbillRefSearchTxt=billRefSearchTxt.isDisplayed();
			boolean actbillRefNewReferenceDropdown=billRefNewReferenceDropdown.isDisplayed();
			boolean actbillRefShowBillsDropdown=billRefShowBillsDropdown.isDisplayed();
			boolean actbillRefAdjustOnFIFOBtn=billRefAdjustOnFIFOBtn.isDisplayed();
			boolean actbillRefPickIcon=billRefPickIcon.isDisplayed();
			boolean actbillRefOkBtn=billRefOkBtn.isDisplayed();
			boolean actbillRefcancel=billRefcancel.isDisplayed();
			
			// Expected
			boolean expbillRefPaymentsBillReferenceLabel=true;
			boolean expbillRefNewReferenceTxt=true;
			boolean expbillRefTxtOnAccount=true;
			boolean expbillRefSearchTxt=true;
			boolean expbillRefNewReferenceDropdown=true;
			boolean expbillRefShowBillsDropdown=true;
			boolean expbillRefAdjustOnFIFOBtn=true;
			boolean expbillRefPickIcon=true;
			boolean expbillRefOkBtn=true;
			boolean expbillRefcancel=true;
			
			System.out.println("************************************* checkBillReferenceScreen  *********************************");
			System.out.println("Bill Reference Screen Lable : "+actbillRefPaymentsBillReferenceLabel +"  Value Expected : "+expbillRefPaymentsBillReferenceLabel);
			System.out.println("New refernce Text Filed 	: "+actbillRefNewReferenceTxt			 +"  Value Expected : "+expbillRefNewReferenceTxt);
			System.out.println("On Account Text Filed 		: "+actbillRefTxtOnAccount				 +"  Value Expected : "+expbillRefTxtOnAccount);
			System.out.println("Search Text Filed 			: "+actbillRefSearchTxt					 +"  Value Expected : "+expbillRefSearchTxt);
			System.out.println("Adjust Bills Drop Down		: "+actbillRefNewReferenceDropdown		 +"  Value Expected : "+expbillRefNewReferenceDropdown);
			System.out.println("Show Bills Drop Down 		: "+actbillRefShowBillsDropdown			 +"  Value Expected : "+expbillRefShowBillsDropdown);
			System.out.println("Adjsut On FIFO 				: "+actbillRefAdjustOnFIFOBtn			 +"  Value Expected : "+expbillRefAdjustOnFIFOBtn);
			System.out.println("Pick Option 				: "+actbillRefPickIcon					 +"  Value Expected : "+expbillRefPickIcon);
			System.out.println("Ok Button 					: "+actbillRefOkBtn						 +"  Value Expected : "+expbillRefOkBtn);
			System.out.println("Cancel Button 				: "+actbillRefcancel					 +"  Value Expected : "+expbillRefcancel);
			
			
			String actPartyName = billRefPartyName.getText();
			String expPartyName = excelReader.getCellData("PurchaseVoucherVAT", 342, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 342, 8, actPartyName);
			
			System.out.println("Bill wise Screen Cutomer Name : "  + actPartyName+ "  Value Expected  : " + expPartyName);
						
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefAdjustBillsGrid));
				
			String actAdjustbills=billRefAdjustBillsGrid.getAttribute("data-totalrows");
			String expAdjustbills=excelReader.getCellData("PurchaseVoucherVAT", 341, 7);
			
			String expBillNewReference                      =excelReader.getCellData("PurchaseVoucherVAT", 343, 7);
			String expBillTransactionCurrency               =excelReader.getCellData("PurchaseVoucherVAT", 344, 7);
			String expBillBaseCurrency                      =excelReader.getCellData("PurchaseVoucherVAT", 345, 7);
			String expBillLocalCurrency                     =excelReader.getCellData("PurchaseVoucherVAT", 346, 7);
			String expBillBalanceNewRefAmount               =excelReader.getCellData("PurchaseVoucherVAT", 347, 7);
			
	        String expbillRefAdjustAmountInTransCurency         = excelReader.getCellData("PurchaseVoucherVAT", 348, 7);
	        String expbillRefBalanceAmountAdjustInTrnasCurrency = excelReader.getCellData("PurchaseVoucherVAT", 349, 7);
	        			        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	        String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
			String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
			String actBillBaseCurrency                           = billRefBaseCurrency.getText();
			String actBillLocalCurrency                          = localCurrencyDhs.getText();
			String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
	        String actbillRefAdjustAmountInTransCurency         = billRefAdjustAmountInTransCurency.getText();
	        String actbillRefBalanceAmountAdjustInTrnasCurrency = billRefBalanceAmountAdjustInTrnasCurrency.getText();
	        	 		
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 341, 8, actAdjustbills);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 343, 8, actBillNewReference);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 344, 8, actBillTransactionCurrency);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 345, 8, actBillBaseCurrency);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 346, 8, actBillLocalCurrency);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 347, 8, actBillBalanceNewRefAmount);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 348, 8, actbillRefAdjustAmountInTransCurency);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 349, 8, actbillRefBalanceAmountAdjustInTrnasCurrency);
	        
	        
	        System.out.println("***********************************************Bill Wise Screen **************************************************************************");
	        
	        System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expDate :"+expAdjustbills);
	        System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
	        System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
	        System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
	        System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
	        System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);
	       
	        System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
	        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);
	        
	        if (actPartyName.equalsIgnoreCase(expPartyName) && actAdjustbills.equalsIgnoreCase(expAdjustbills) && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
	 				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
	 				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
	 			    actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
	 				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency)
	 				
	        		&& actbillRefPaymentsBillReferenceLabel==expbillRefPaymentsBillReferenceLabel && actbillRefNewReferenceTxt==expbillRefNewReferenceTxt
					&& actbillRefTxtOnAccount==expbillRefTxtOnAccount && actbillRefSearchTxt==expbillRefSearchTxt
					&& actbillRefNewReferenceDropdown==expbillRefNewReferenceDropdown && actbillRefShowBillsDropdown==expbillRefShowBillsDropdown
					&& actbillRefAdjustOnFIFOBtn==expbillRefAdjustOnFIFOBtn && actbillRefPickIcon==expbillRefPickIcon
					&& actbillRefOkBtn==expbillRefOkBtn && actbillRefcancel==expbillRefcancel)	     
		{
			System.out.println("Test Pass  Displayed Bill Wise Screen  ");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 340, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail Not Displayed Bill wise Screen ");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 340, 9, resFail);
			return false;
		}	
	}

		catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 340, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
		   	 	return false;
			}
	  
	}



	public boolean checkPurchaseVoucherVATBillwiseScreenClickOnPick() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";	

	  
	  try
	  {
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		    billRefNewReferenceTxt.click();
	 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
			billRefPickIcon.click();
			       
			
			
			
			String expBillNewReferencePick                      =excelReader.getCellData("PurchaseVoucherVAT", 351, 7);
			String expBillTransactionCurrencyPick               =excelReader.getCellData("PurchaseVoucherVAT", 352, 7);
			String expBillBaseCurrencyPick                      =excelReader.getCellData("PurchaseVoucherVAT", 353, 7);
			String expBillLocalCurrencyPick                     =excelReader.getCellData("PurchaseVoucherVAT", 354, 7);
			String expBillBalanceNewRefAmountPick               =excelReader.getCellData("PurchaseVoucherVAT", 355, 7);
			
	        String expbillRefAdjustAmountInTransCurencyPick         = excelReader.getCellData("PurchaseVoucherVAT", 356, 7);
	        String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = excelReader.getCellData("PurchaseVoucherVAT", 357, 7);
	        			        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
	        String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
			String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
			String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
			String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
			String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
	        String actbillRefAdjustAmountInTransCurencyPick         = billRefAdjustAmountInTransCurency.getText();
	        String actbillRefBalanceAmountAdjustInTrnasCurrencyPick = billRefBalanceAmountAdjustInTrnasCurrency.getText();
	        	 		
	        
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 351, 8, actBillNewReferencePick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 352, 8, actBillTransactionCurrencyPick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 353, 8, actBillBaseCurrencyPick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 354, 8, actBillLocalCurrencyPick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 355, 8, actBillBalanceNewRefAmountPick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 356, 8, actbillRefAdjustAmountInTransCurencyPick);
	        excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 357, 8, actbillRefBalanceAmountAdjustInTrnasCurrencyPick);
	    
			
	        
	        System.out.println("***********************************************Bill Wise Screen **************************************************************************");
	       
	    
	        
	        System.out.println("Bill reference Adjustment Bills  :"+ actBillNewReferencePick+"                          "+ "expDate :"+expBillNewReferencePick);
	        System.out.println("actBillNewReference :             "+ actBillTransactionCurrencyPick +"                    "+ "expBillNewReference :"+expBillTransactionCurrencyPick);
	        System.out.println("actBillTransactionCurrency       :"+ actBillBaseCurrencyPick + "            " + "expBillTransactionCurrency :"+expBillBaseCurrencyPick);
	        System.out.println("actBillBaseCurrency :             "+ actBillLocalCurrencyPick + "                   " +"expBillBaseCurrency :"+expBillLocalCurrencyPick);
	        System.out.println("actBillLocalCurrency :            "+ actBillBalanceNewRefAmountPick+ "                   " +"expBillLocalCurrency :"+expBillBalanceNewRefAmountPick);
	        
	       
	       
	        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefAdjustAmountInTransCurencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefAdjustAmountInTransCurencyPick);
	        System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);
	        
	        
	        if (actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick)
	        		&& actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick)
	        		&& actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick)  
	        		&& actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) 
	        		&& actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick))
	     
		{
			System.out.println("Test Pass  Voucher Saved Successfully  ");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 350, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("Test Fail Voucher Fails in saving ");
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 350, 9, resFail);
			return false;
		}
	  }
	  catch (Exception e) 
		{
			String exception =e.getMessage();
			excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 350, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
	 	 	return false;
		}

	}



			

			
			public boolean checkSavingOfPurchaseVoucherVATOnClickOkButtonInBillwisePage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			   Bill_OkBtn.click();
			   
			   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			   String docno=documentNumberTxt.getAttribute("value");
			   
			   boolean savingMessage=checkVoucherSavingMessage(docno);
			   
			   
			   String actSavingMessage=Boolean.toString(savingMessage);
			   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 359, 7);
			   
			   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 359, 8, actSavingMessage.toUpperCase());
			   
			   
			   System.out.println("************************************* checkSavingOfPurchaseVoucherNew  *********************************");
			   
			   System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
			   
			   
			   if (savingMessage==true)
			   {
					System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 358, 9, resPass);
					return true;
				}
				else
				{
					System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 358, 9, resFail);
					return false;
				}
			 }
			 catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 358, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				 	return false;
				}
			
			}
			 
			
			public boolean checkBatchValidationInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
					
					/*Thread.sleep(3000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
					financialsMenu.click();
							
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
					financialsTransactionMenu.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
					financialsTransactionsPurchaseMenu.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherVATView));
					purchaseVoucherVATView.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
					newBtn.click();*/
					
					Thread.sleep(2000);
					
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
					 vendorAccountTxt.click();
					 vendorAccountTxt.sendKeys(Keys.SPACE);
						
					 int vendorcount=vendorAccountListCount.size();
						
					 System.err.println(vendorcount);
						
					 for(int i=0 ; i < vendorcount ;i++)
					 {
						 String data=vendorAccountListCount.get(i).getText();
							
						 if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 361, 6)))
						 {
							 vendorAccountListCount.get(i).click();
								
							 break;
						 }
					 }
						
					 vendorAccountTxt.sendKeys(Keys.TAB);
					 raiseReceiptsChkBox.sendKeys(Keys.TAB);
					 voucherHeaderDueDate.sendKeys(Keys.TAB);
					 voucherHeaderCurrency.sendKeys(Keys.TAB);
					 voucherHeaderExchangeRate.click();
					 
					 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
					 
					 departmentTxt.click();
					 departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
					 departmentTxt.sendKeys(Keys.SPACE);
					 Thread.sleep(2000);
					 int departmentcount=departmentListCount.size();
					 
					 System.err.println(departmentcount);
					 
					 for(int i=0 ; i < departmentcount ;i++)
					 {
						 String data=departmentListCount.get(i).getText();
							
						 if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 362, 6)))
						 {
							 departmentListCount.get(i).click();
							 break;
						 }
					 }
							
					 Thread.sleep(1000);
						
					 departmentTxt.sendKeys(Keys.TAB);	
					
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeofSupplyTxt));
					 placeofSupplyTxt.click();
					 placeofSupplyTxt.sendKeys(Keys.END);
					 placeofSupplyTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					 placeofSupplyTxt.sendKeys(Keys.SPACE);
					 Thread.sleep(2000);
					 
					 int placeOfSupplyListCount=placeOfSupplyList.size();
					 
					 System.err.println(placeOfSupplyListCount);
					 
					 for(int i=0 ; i < placeOfSupplyListCount ;i++)
					 {
						 String data=placeOfSupplyList.get(i).getText();
						 
						 if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 363, 6)))
						 {
							 placeOfSupplyList.get(i).click();
							 
							 break;
						 }	
					 }
							
					 placeofSupplyTxt.sendKeys(Keys.TAB);
						
						
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
					 jurisdictionTxt.sendKeys(Keys.END);
					 jurisdictionTxt.sendKeys(Keys.END);
					 jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					 jurisdictionTxt.sendKeys("Abu Dhabi");
					 Thread.sleep(2000);
					 jurisdictionTxt.sendKeys(Keys.TAB);
					 Thread.sleep(2000);
					 
					 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
					 select1stRow_1stColumn.click();
					 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					 enter_WarehouseTxt.click();
					 
					 enter_WarehouseTxt.sendKeys(Keys.SPACE);
					 
					 
					 int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
					 
					 for (int i = 0; i < pvvGridWarehouseListCount; i++) 
					 {
						 String warehouse=pvvGridWarehouseList.get(i).getText();
						 if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 364, 6))) 
						 {
							 pvvGridWarehouseList.get(i).click();
							 break;
						 }	
					 }	
					 enter_WarehouseTxt.sendKeys(Keys.TAB);
						
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
						
					 enter_ItemTxt.click();
					 enter_ItemTxt.sendKeys(Keys.SPACE);
					 int pvvGridItemListCount=pvvGridItemList.size();
					 for (int i = 0; i < pvvGridItemListCount; i++) 
					 {
						 String Item=pvvGridItemList.get(i).getText();
						 if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 365, 6))) 
						 {
							 pvvGridItemList.get(i).click();
							 break;
						 }
					 }
					 enter_ItemTxt.sendKeys(Keys.TAB);	
						
				        
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
						
					 enter_PvTaxCode.click();
					 enter_PvTaxCode.sendKeys(Keys.END);
					        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
				    Thread.sleep(1000);
				        
				    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
				        
				    enter_PvTaxCode.sendKeys("s");
				        
				    Thread.sleep(2000);
				    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
				        
				    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
				        
					for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
					{
						String Taxable=pvvGridTaxCodeList.get(i).getText();
							
						if (Taxable.equalsIgnoreCase("Standard Rated Purchase - Recoverable")) 
						{
							pvvGridTaxCodeList.get(i).click();
							break;
						}
					}
				    enter_PvTaxCode.sendKeys(Keys.TAB);
					 
					 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
					 select1stRow_5thColumn.click();
					 
					 
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
					 select1stRow_6thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
					select1stRow_7thColumn.click();
						
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
					select1stRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
					select1stRow_9thColumn.click();
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 366, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 367, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
					select1stRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
					enter_PvTaxable.sendKeys(Keys.TAB);
					
					/*for(int i=1;i<3;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
							errorMessageCloseBtn.click();
						}
					}*/
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					saveBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();
					
					String expBatchMessage	= excelReader.getCellData("PurchaseVoucherVAT", 368, 7);
					
					
					String actBatchMessage	=checkValidationMessage(expBatchMessage);


					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 368, 8, actBatchMessage);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));	
					select1stRow_16thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
					enter_Batch.click();
					enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 369, 6));
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					saveBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();
					
					String expDateMessage	= excelReader.getCellData("PurchaseVoucherVAT", 370, 7);
					String actDateMessage	=checkValidationMessage(expDateMessage);
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 370, 8, actDateMessage);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
					select1stRow_18thColumn.click();
					
					Calendar calendar = Calendar.getInstance();
					
				    calendar.add(Calendar.DATE, 2);
				
				    Date date = calendar.getTime();
				
				    DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
				    
				    System.out.println(dfr.format(date).toString());
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
					enter_Expirydate.click();
					enter_Expirydate.sendKeys(Keys.END);
					enter_Expirydate.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_Expirydate.sendKeys(dfr.format(date).toString());
					enter_Expirydate.sendKeys(Keys.TAB);
						
					if (actDateMessage.equalsIgnoreCase(expDateMessage) && actBatchMessage.equalsIgnoreCase(expBatchMessage))
					{
						    System.out.println(" Test Pass: Batch Qty Entered In First Row ");
						    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 360, 9, resPass);
						    return true;
					}
					else
					{
						    System.out.println(" Test Fail: Batch Qty Entered In First Row ");
						    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 360, 9, resFail);
	                        return false;
					}
					
				}
			 catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 360, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				 	return false;
				}
			
			}
			    
			  							    
				
			public boolean checkBinValidationInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
						select2ndRow_1stColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
						enter_WarehouseTxt.click();
						
				        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
						
						enter_ItemTxt.click();
						enter_ItemTxt.sendKeys(Keys.SPACE);
				        int pvvGridItemListCount=pvvGridItemList.size();
						for (int i = 0; i < pvvGridItemListCount; i++) 
						{
							String Item=pvvGridItemList.get(i).getText();
							if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 371, 6))) 
							{
								pvvGridItemList.get(i).click();
								break;
							}
						}
						enter_ItemTxt.sendKeys(Keys.TAB);	
						
						
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
						select2ndRow_5thColumn.click();
				        
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_6thColumn));
						select2ndRow_6thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
						select2ndRow_7thColumn.click();
						
										
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
						select2ndRow_8thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
						select2ndRow_9thColumn.click();
					
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
						enter_Quantity.click();
						enter_Quantity.clear();
						enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 372, 6));
						enter_Quantity.sendKeys(Keys.TAB);
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
						enter_Rate.click();
						enter_Rate.clear();
						enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 373, 6));
						enter_Rate.sendKeys(Keys.TAB);
										
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
						enter_Gross.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
						select2ndRow_14thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
						enter_PvVat.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
						enter_PvTaxable.sendKeys(Keys.TAB);
						
						/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
						saveBtn.click();
						
						String expBatchMessage	= excelReader.getCellData("PurchaseVoucherVAT", 371, 7);
						
						
						String actBatchMessage	=checkValidationMessage(expBatchMessage);


						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 371, 8, actBatchMessage);*/
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
						binSearchBtn.click();
							
						Thread.sleep(2000);
					
						String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 374, 7);
						String expBinStockValue                = excelReader.getCellData("PurchaseVoucherVAT", 375, 7);
						String expBinCapcityValue              = excelReader.getCellData("PurchaseVoucherVAT", 376, 7);
						String expBinLoadValue                 = excelReader.getCellData("PurchaseVoucherVAT", 377, 7);
						String expBinFreeSpace                 = excelReader.getCellData("PurchaseVoucherVAT", 378, 7);
						String expBinFreeQty                   = excelReader.getCellData("PurchaseVoucherVAT", 379, 7);
						String expBinToBeAllocated             = excelReader.getCellData("PurchaseVoucherVAT", 380, 7);
						
						
						String expBinTotalQty                  = excelReader.getCellData("PurchaseVoucherVAT", 381, 7);
						String expBinBaseUom                   = excelReader.getCellData("PurchaseVoucherVAT", 382, 7);
						String expBinBalanceQty                = excelReader.getCellData("PurchaseVoucherVAT", 383, 7);
						
						String expBinSum                       = excelReader.getCellData("PurchaseVoucherVAT", 384, 7);
										
						Thread.sleep(2000);
						
						System.err.println("1");
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect1stRow_2ndColumn));
						
						String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
						String actBinStockValue                = binselect1stRow_3rdColumn.getText();
						String actBinCapcityValue              = binselect1stRow_4thColumn.getText();
						String actBinLoadValue                 = binselect1stRow_5thColumn.getText();
						String actBinFreeSpace                 = binselect1stRow_6thColumn.getText();
						String actBinFreeQty                   = binselect1stRow_7thColumn.getText();
						String actBinToBeAllocated             = binselect1stRow_8thColumn.getText();
						

						String actBinTotalQty                  = binTotalQty.getAttribute("value");
						String actBinBaseUom                   = binBaseUOM.getText();
						//String actBinBalanceQty                = binBalanceTxt.getAttribute("value");
						
						//String actBinSum                       = binSumInward.getText();
												
						System.err.println("1");
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 374, 8, actBinNameValue);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 375, 8, actBinStockValue);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 376, 8, actBinCapcityValue);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 377, 8, actBinLoadValue);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 378, 8, actBinFreeSpace);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 379, 8, actBinFreeQty);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 380, 8, actBinToBeAllocated);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 381, 8, actBinTotalQty);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 382, 8, actBinBaseUom);
						//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 383, 8, actBinBalanceQty);
						//excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 384, 8, actBinSum);
						
						System.err.println("1");
						System.out.println("Second Row Stock            :  " + actBinNameValue +        "  Value Expected : "  + expBinNameValue);
						System.out.println("Second Row Capacity         :  " + actBinStockValue +       "  Value Expected : "  + expBinStockValue);
						System.out.println("Second Row Load             :  " + actBinCapcityValue +     "  Value Expected : "  + expBinCapcityValue);
						System.out.println("Second Row Free Space       :  " + actBinLoadValue +        "  Value Expected : "  + expBinLoadValue);
						System.out.println("Second Row Free Qty         :  " + actBinFreeSpace +        "  Value Expected : "  + expBinFreeSpace);
						System.out.println("Second Row To Be Allocated  :  " + actBinFreeQty +          "  Value Expected : "  + expBinFreeQty);
						System.out.println("Second Row To Be Allocated  :  " + actBinToBeAllocated +    "  Value Expected : "  + expBinToBeAllocated);
						
						
						System.out.println("Bin Total Qty               :  " +actBinTotalQty +            "  Value Expected : "  + expBinTotalQty);
						System.out.println("Bin Base Uom                :  " +actBinBaseUom +             "  Value Expected : "  + expBinBaseUom);
						//System.out.println("Bin Balance Txt             :  " +actBinBalanceQty +          "  Value Expected : "  + expBinBalanceQty);
						
						//System.out.println("Bin Total To Be Adjusted    :  " + actBinSum +                "  Value Expected : "  + expBinSum);
						
					
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));
						binAutoAllocateBtn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));
						binOkBtn.click();
						
						
	                    String actBinName=select2ndRow_17thColumn.getText();
						
						String expBinName=excelReader.getCellData("PurchaseVoucherVAT", 385, 7);
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 385, 8, actBinName);
						
						/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRemarks));
						enter_PvRemarks.sendKeys(Keys.TAB);*/
								
						if(actBinNameValue.equalsIgnoreCase(expBinNameValue) && actBinStockValue.equalsIgnoreCase(expBinStockValue) 
								&& actBinCapcityValue.equalsIgnoreCase(expBinCapcityValue) && actBinLoadValue.equalsIgnoreCase(expBinLoadValue)
								&& actBinFreeSpace.equalsIgnoreCase(expBinFreeSpace) && actBinFreeQty.equalsIgnoreCase(expBinFreeQty)
								&& actBinToBeAllocated.equalsIgnoreCase(expBinToBeAllocated)
										
								&& actBinTotalQty.equalsIgnoreCase(expBinTotalQty) && actBinBaseUom.equalsIgnoreCase(expBinBaseUom) 
								/*&& actBinBalanceQty.equalsIgnoreCase(expBinBalanceQty)
								
								&& actBinSum.equalsIgnoreCase(expBinSum)*/)	
	{
						    System.out.println(" Test Pass: Bin 3 is Displayed ");
						    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 371, 9, resPass);
						    return true;
					}
					else
					{
						    System.out.println(" Test Fail: Bin 3 is  Not Displayed ");
						    excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 371, 9, resFail);
	                        return false;
					}
					
				}
			 catch (Exception e) 
				{
					String exception =e.getMessage();
					excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 371, 10, exception);
					System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				 	return false;
				}
			
			}
				
			
			
			public boolean checkTotalConsumedBinValidationInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
			{
				excelReader=new ExcelReader(POJOUtility.getExcelPath());
				xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
				
				try
				{
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
						select3rdRow_1stColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
						enter_WarehouseTxt.click();
						
				        enter_WarehouseTxt.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
						
						enter_ItemTxt.click();
						enter_ItemTxt.sendKeys(Keys.SPACE);
				        int pvvGridItemListCount=pvvGridItemList.size();
						for (int i = 0; i < pvvGridItemListCount; i++) 
						{
							String Item=pvvGridItemList.get(i).getText();
							if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 386, 6))) 
							{
								pvvGridItemList.get(i).click();
								break;
							}
						}
						enter_ItemTxt.sendKeys(Keys.TAB);	
						
						
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
						select3rdRow_5thColumn.click();
				        
				        
				        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_6thColumn));
						select3rdRow_6thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
						select3rdRow_7thColumn.click();
						
										
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
						select3rdRow_8thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
						select3rdRow_9thColumn.click();
					
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
						enter_Quantity.click();
						enter_Quantity.clear();
						enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 387, 6));
						enter_Quantity.sendKeys(Keys.TAB);
						
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
						enter_Rate.click();
						enter_Rate.clear();
						enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 388, 6));
						enter_Rate.sendKeys(Keys.TAB);
										
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
						enter_Gross.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
						select3rdRow_14thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
						enter_PvVat.sendKeys(Keys.TAB);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
						enter_PvTaxable.sendKeys(Keys.TAB);
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
						binSearchBtn.click();
						
						Thread.sleep(2000);
						
						System.out.println(" binEmpty: "+binEmpty.getText().isEmpty());
						
						boolean EmptyData=binEmpty.getText().isEmpty();
						
						String actBinPopUp=Boolean.toString(EmptyData);
						String expBinPopUp=excelReader.getCellData("PurchaseVoucherVAT", 389, 7);
								
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 389, 8, actBinPopUp);		
								
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
						binCancelBtn.click();
						
						
					   if (actBinPopUp.equalsIgnoreCase(expBinPopUp) )
					   {
							System.out.println("Test Pass  No bins Found in Pop up  ");
							excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 386, 9, resPass);
							return true;
						}
						else
						{
							System.out.println("Test Fail Bins Found in pop up  ");
							excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 386, 9, resFail);
							return false;
						}
					 }
					 catch (Exception e) 
						{
							String exception =e.getMessage();
							excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 386, 10, exception);
							System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
						 	return false;
						}
						
				}
				
		
		
				@FindBy(xpath="//*[@id='id_transaction_bins_grid_body']")
				private static WebElement  binEmpty;
	 
				
				
				public boolean checkRowDeleteInPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					

					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
				        Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
						select3rdRow_11thColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
						enter_Rate.sendKeys(Keys.CONTROL+"d");
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
						boolean rowDelete=select3rdRow_1stColumn.getText().isEmpty();
						
						String actRowDelete=Boolean.toString(rowDelete);
						String expRowDelete= excelReader.getCellData("PurchaseVoucherVAT", 391, 7);

						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 391, 8, actRowDelete);
						
						System.out.println("*******************checkRowDeleteInPurchaseVoucherVAT**************");
						
				   
						System.out.println("actRowDelete  :  "+actRowDelete  +"  VAlue Expected :  "+expRowDelete);
						
				   if (actRowDelete.equalsIgnoreCase(expRowDelete) )
				   {
						System.out.println(" *******************Row Deleted ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 390, 9, resPass);
						return true;
					}
					else
					{
						System.out.println(" ********************No Row Deleted   ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 390, 9, resFail);
						return false;
					}
				 }
				 catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 390, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					 	return false;
					}
				}
				
				
				
				public boolean checkChangingWareHouseAfterBinAllocatedinPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
				        Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
						select2ndRow_1stColumn.click();
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
						enter_WarehouseTxt.click();
						enter_WarehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME);
						enter_WarehouseTxt.sendKeys(Keys.BACK_SPACE);
						
						enter_WarehouseTxt.sendKeys(Keys.SPACE);
					
						
						int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
						
						for (int i = 0; i < pvvGridWarehouseListCount; i++) 
						{
							String warehouse=pvvGridWarehouseList.get(i).getText();
							if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 392, 6))) 
							{
								pvvGridWarehouseList.get(i).click();
								break;
							}
						}
				        enter_WarehouseTxt.sendKeys(Keys.TAB);
				        
				        boolean res = getIsAlertPresent();
				        
				        if(res==true)
				        {
					        getWaitForAlert();
							
							getFluentWebDriverWait().until(ExpectedConditions.alertIsPresent());
							
							String actAlertMessageOnChangeWarehouse=getDriver().switchTo().alert().getText();
							String expAlertMessageOnChangeWarehouse= excelReader.getCellData("PurchaseVoucherVAT", 393, 7);
	
							excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 393, 8, actAlertMessageOnChangeWarehouse);
						
							getAlert().accept();
						
				        }
				        
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_17thColumn));
						boolean RowBinCol=select2ndRow_17thColumn.getText().isEmpty();
						
						String actRowBinCol=Boolean.toString(RowBinCol);
						String expRowBinCol=excelReader.getCellData("PurchaseVoucherVAT", 394, 7);

						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 394, 8, actRowBinCol);
						
						select2ndRow_17thColumn.click();
						
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
						binSearchBtn.click();
						
						Thread.sleep(2000);
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binselect1stRow_2ndColumn));
						
						String actBinNameValue                 = binselect1stRow_2ndColumn.getText();	
						
						String expBinNameValue                 = excelReader.getCellData("PurchaseVoucherVAT", 395, 7);

						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 395, 8, actBinNameValue);
					
						
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binCancelBtn));
						binCancelBtn.click();
						
					Thread.sleep(2000);
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
						secondRowIndex.click();
						
						Thread.sleep(2000);
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
						deleteRowBtn.click();
						
						
						if (/*actAlertMessageOnChangeWarehouse.equalsIgnoreCase(expAlertMessageOnChangeWarehouse) && */
								actRowBinCol.equalsIgnoreCase(expRowBinCol) && actBinNameValue.equalsIgnoreCase(expBinNameValue))
						   {
								System.out.println("Test Pass  Bin Col is Empty  in Row  ");
								excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 392, 9, resPass);
								return true;
							}
							else
							{
								System.out.println("Test Fail Bin Is Present in Bin Col in Row  ");
								excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 392, 9, resFail);
								return false;
							}
						 }
						 catch (Exception e) 
							{
								String exception =e.getMessage();
								excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 392, 10, exception);
								System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
							 	return false;
							}
				}

				
				
				public boolean checkRMAValidationInPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
					select2ndRow_1stColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					enter_WarehouseTxt.click();
					
			        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					enter_ItemTxt.click();
					enter_ItemTxt.sendKeys(Keys.END);
					enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_ItemTxt.sendKeys(Keys.SPACE);
			        int pvvGridItemListCount=pvvGridItemList.size();
					for (int i = 0; i < pvvGridItemListCount; i++) 
					{
						String Item=pvvGridItemList.get(i).getText();
						if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 397, 6))) 
						{
							pvvGridItemList.get(i).click();
							break;
						}
					}
					enter_ItemTxt.sendKeys(Keys.TAB);	
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				    enter_PvTaxCode.click();
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
				    Thread.sleep(1000);
				        
				    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
				        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
				        
				    enter_PvTaxCode.sendKeys(Keys.SPACE);
				        
				    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
				        
				    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
				        
					for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
					{
						String Taxable=pvvGridTaxCodeList.get(i).getText();
							
						if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 311, 6))) 
						{
							pvvGridTaxCodeList.get(i).click();
							break;
						}
					}
				    enter_PvTaxCode.sendKeys(Keys.TAB);
			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
					select2ndRow_5thColumn.click();
			        
			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_6thColumn));
					select2ndRow_6thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
					select2ndRow_7thColumn.click();
					
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
					select2ndRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
					select2ndRow_9thColumn.click();
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 398, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 399, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
					select2ndRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.sendKeys(Keys.TAB);
					
					/*for(int i=1;i<3;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
							errorMessageCloseBtn.click();
						}
					}*/
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					saveBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();
					
					String expRmaMessage	= excelReader.getCellData("PurchaseVoucherVAT", 396, 7);
					
					
					String actRmaMessage	=checkValidationMessage(expRmaMessage);


					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 396, 8, actRmaMessage);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
					select2ndRow_19thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
					
					getWaitForAlert();
					
					String actAlertOnAdd = getAlert().getText();
					
					String expAlertOnAdd = excelReader.getCellData("PurchaseVoucherVAT", 397, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 397, 8, actAlertOnAdd);
					
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getWaitForAlert();
					
					String actAlertOnOK1=getAlert().getText();
					
					String expAlertOnOK1=excelReader.getCellData("PurchaseVoucherVAT", 398, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 398, 8, actAlertOnOK1);
					
					getDriver().switchTo().alert().accept();
						
					getWaitForAlert();
					
					String actAlertOnOK2=getAlert().getText();
					
					String expAlertOnOK2=excelReader.getCellData("PurchaseVoucherVAT", 399, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 399, 8, actAlertOnOK2);
					
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 400, 6));
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					String actRmaColumn = enter_PvRMA.getAttribute("value");
					
					String expRmaColumn=excelReader.getCellData("PurchaseVoucherVAT", 400, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 400, 8, actRmaColumn);
							
					enter_PvRMA.sendKeys(Keys.SPACE);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaTableRow1ClearBtn));
					rmaTableRow1ClearBtn.click();
					
					boolean actrmaTableRow1Column1 =rmaTableRow1Column1.getText().isEmpty();
					
					String actRmavalueR1 = Boolean.toString(actrmaTableRow1Column1);
					
					String expRmavalueR1=excelReader.getCellData("PurchaseVoucherVAT", 401, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 401, 8, actRmavalueR1);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaClearBtn));
					rmaClearBtn.click();
					
					boolean actrmaTableRow1Column2 =rmaTableRow2Column1.getText().isEmpty();
					
					String actRmavalueR2 = Boolean.toString(actrmaTableRow1Column1);
					
					String expRmavalueR2=excelReader.getCellData("PurchaseVoucherVAT", 402, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 402, 8, actRmavalueR2);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 401, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.ENTER);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getWaitForAlert();
					
					String actAlertOnOK=getAlert().getText();
					
					String expAlertOnOK=excelReader.getCellData("PurchaseVoucherVAT", 403, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 403, 8, actAlertOnOK);
					
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
					
					String actQtyColumn = select2ndRow_9thColumn.getText();
					
					String expQtyColumn = excelReader.getCellData("PurchaseVoucherVAT", 404, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 404, 8, actQtyColumn);
					
					
					System.out.println("***********************checkRMAValidationInPurchaseVoucherVAT*****************************************************");
					
					
					System.out.println("RmaMessage :  " + actRmaMessage +               "  Value Expected : "  + expRmaMessage);
					System.out.println("AlertOnAdd :  " + actAlertOnAdd +               "  Value Expected : "  + expAlertOnAdd);
					System.out.println("AlertOnOK1 :  " + actAlertOnOK1 +               "  Value Expected : "  + expAlertOnOK1);
					System.out.println("AlertOnOK2 :  " + actAlertOnOK2 +               "  Value Expected : "  + expAlertOnOK2);
					System.out.println("RmaColumn  :  " + actRmaColumn +                "  Value Expected : "  + expRmaColumn);
					System.out.println("RmavalueR2 :  " + actRmavalueR2 +               "  Value Expected : "  + expRmavalueR2);
					System.out.println("AlertOnOK  :  " + actAlertOnOK +                "  Value Expected : "  + expAlertOnOK);
					System.out.println("QtyColumn  :  " + actQtyColumn +                "  Value Expected : "  + expQtyColumn);
					
					
					if (actRmaMessage.equalsIgnoreCase(expRmaMessage) && actAlertOnAdd.equalsIgnoreCase(expAlertOnAdd) &&
							actAlertOnOK1.equalsIgnoreCase(expAlertOnOK1) && actAlertOnOK2.equalsIgnoreCase(expAlertOnOK2) && 
							actRmaColumn.equalsIgnoreCase(expRmaColumn) && actRmavalueR2.equalsIgnoreCase(expRmavalueR2) && 
							actAlertOnOK.equalsIgnoreCase(expAlertOnOK) && actQtyColumn.equalsIgnoreCase(expQtyColumn))
					{
						System.out.println("Test Pass  Validation Messages Are expected ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 396, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Validation Message are not As expected  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 396, 9, resFail);
						return false;
					}
				 }
				 catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 396, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					 	return false;
					}
				}
				
				
				
				

				
				public boolean checkRMAValidationWithDuplicateSerialNumberInPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
					select3rdRow_1stColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
					enter_WarehouseTxt.click();
					
			        enter_WarehouseTxt.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
					
					enter_ItemTxt.click();
					enter_ItemTxt.sendKeys(Keys.SPACE);
			        int pvvGridItemListCount=pvvGridItemList.size();
					for (int i = 0; i < pvvGridItemListCount; i++) 
					{
						String Item=pvvGridItemList.get(i).getText();
						if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 407, 6))) 
						{
							pvvGridItemList.get(i).click();
							break;
						}
					}
					enter_ItemTxt.sendKeys(Keys.TAB);	
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
				    enter_PvTaxCode.click();
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
				    Thread.sleep(1000);
				        
				    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
				        
				    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
				        
				    enter_PvTaxCode.sendKeys(Keys.SPACE);
				        
				    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
				        
				    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
				        
					for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
					{
						String Taxable=pvvGridTaxCodeList.get(i).getText();
							
						if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 311, 6))) 
						{
							pvvGridTaxCodeList.get(i).click();
							break;
						}
					}
				    enter_PvTaxCode.sendKeys(Keys.TAB);
					
			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
					select3rdRow_5thColumn.click();
			        
			        
			        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_6thColumn));
					select3rdRow_6thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
					select3rdRow_7thColumn.click();
					
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
					select3rdRow_8thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
					select3rdRow_9thColumn.click();
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
					enter_Quantity.click();
					enter_Quantity.clear();
					enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 408, 6));
					enter_Quantity.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
					enter_Rate.click();
					enter_Rate.clear();
					enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 409, 6));
					enter_Rate.sendKeys(Keys.TAB);
									
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
					enter_Gross.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_14thColumn));
					select3rdRow_14thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
					enter_PvVat.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
					enter_PvTaxable.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 410, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.ENTER);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getWaitForAlert();
					
					String actAlertOnOK=getAlert().getText();
					
					String expAlertOnOK=excelReader.getCellData("PurchaseVoucherVAT", 406, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 406, 8, actAlertOnOK);
					
					Thread.sleep(2000);
					
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 411, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.ENTER);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRMA));
					
					String actRmaColumn = enter_PvRMA.getAttribute("value");
					
					String expRmaColumn=excelReader.getCellData("PurchaseVoucherVAT", 407, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 407, 8, actRmaColumn);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
					new_newBtn.click();
					
					String actAlert=getAlert().getText();
					String expAlert1=excelReader.getCellData("PurchaseVoucherVAT", 408, 7);
					String expAlert2=excelReader.getCellData("PurchaseVoucherVAT", 409, 7);
					
					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 408, 8, actAlert);
					
					System.out.println("Alert On Revert Changes :  "+actAlert +"  "+expAlert1+""+expAlert2);
					
					
					System.out.println("Test Pass : Alert Displayed");
					
					getAlert().accept();
					
					
					System.out.println("************************checkRMAValidationWithDuplicateSerialNumberInPurchaseVoucherVAT************");
					
					
					System.out.println("AlertOnOK   :  "+actAlertOnOK +" Value Expected " +expAlertOnOK);
					System.out.println("RmaColumn   :  "+actRmaColumn +" Value Expected " +actRmaColumn);
					System.out.println("Alert On Revert Changes :  "+actAlert +"  "+expAlert1+""+expAlert2);
					
					if (actAlertOnOK.equalsIgnoreCase(expAlertOnOK)&& actRmaColumn.equalsIgnoreCase(expRmaColumn)&& 
							actAlert.startsWith(expAlert1)&& actAlert.endsWith(expAlert2))
					{
						System.out.println("Test Pass  Entry Page is Displayed With Empty data ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 406, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Entry page is Not Displayed with Empty Data ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 406, 9, resFail);
						return false;
					}
				 }
				 catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 406, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					 	return false;
					}	
				}
				
				
				
				public boolean checkPurchaseVoucherVATCopyDocumentOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
				{
					
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					try
					{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					String actdocNumber=documentNumberTxt.getAttribute("value");
					String expdocNumber="SU//TEXT1";
							
							
					/*String expdocNumber=excelReader.getCellData("PurchaseVoucherVAT", 413, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 413, 8, actdocNumber);*/
					
					System.out.println("documnet Number : "+actdocNumber+" Value Expected : "+expdocNumber);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));
					toggleBtn.click();
					
					boolean actCopydocument=copyDocumentOption.isDisplayed();
					
					boolean expCopydocument=true;
					
					
					System.out.println("******************checkPurchaseVoucherVATCopyDocumentOption***************");
					
					System.out.println("Copy Document Option : "+actCopydocument+""+expCopydocument);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
					
					if(actdocNumber.equalsIgnoreCase(expdocNumber) && actCopydocument==expCopydocument)
					{
						System.out.println("Test Pass : Copy Document Option Displayed");
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 412, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Copy Document Option NOT Displayed");
						
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 412, 9, resFail);
						return false;
					}
					}
					 catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 412, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					 	return false;
					}
				}
					
				
				
				// Copy document Screen Elements
				
				@FindBy(xpath="//input[@id='optCopyDocType']")
				private static WebElement cd_vouchertypeTxt;
				
				@FindBy(xpath="//select[@id='id_searchoncolumns']")
				private static WebElement cd_searchOnDropdown1;
				
				@FindBy(xpath="//div[@id='id_transaction_entry_container_others']//div[5]//select[1]")
				private static WebElement cd_searchOnDropdown2;
				
				@FindBy(xpath="//input[@id='srch_doc']")
				private static WebElement cd_searchTxt;
				
				@FindBy(xpath="//input[@id='id_transaction_entry_copydocument_refresh']")
				private static WebElement cd_refreshBtn;
				
				@FindBy(xpath="//input[@id='id_transaction_entry_copydocument_filter_togglebutton']")
				private static WebElement cd_filterBtn;
				
				@FindBy(xpath="//input[@id='copydoc_HeaderChkBox']")
				private static WebElement cd_HeaderChkBox;
				
				@FindBy(xpath="//tr[@id='tr_copydoc_voucher_1']//td//input")
				private static WebElement cd_FirstChkBox;
				
				@FindBy(xpath="//input[@id='id_chkclubsimilartxn']")
				private static WebElement cd_clubsimilarTransChkBox;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid1_buttonsrow']/div[3]/input")
				private static WebElement cd_SelectallBtn;
				
				@FindBy(xpath="//button[@id='btn_firstPage']")
				private static WebElement cd_firstBtn;
				
				@FindBy(xpath="//button[@id='btn_previousPage']")
				private static WebElement cd_PreviousBtn;
				
				@FindBy(xpath="//button[@id='input_pagenumber']")
				private static WebElement cd_PageNo;
				
				@FindBy(xpath="//button[@id='btn_nextPage']")
				private static WebElement cd_nextBtn; 
				
				@FindBy(xpath="//button[@id='btn_lastPage']")
				private static WebElement cd_LastBtn;
				
				@FindBy(xpath="//input[@id='id_transaction_copydoc_ok']")
				private static WebElement cd_OkBtn;
				
				@FindBy(xpath="//input[@id='id_transaction_copydoc_cancel']")
				private static WebElement cd_CancelBtn;
				
				
				// Gird 
				// row 1
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[1]")
				private static WebElement cd_IndexRow1;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[2]")
				private static WebElement cd_R1C2;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[3]")
				private static WebElement cd_R1C3;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[4]")
				private static WebElement cd_R1C4;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[5]")
				private static WebElement cd_R1C5;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[6]")
				private static WebElement cd_R1C6;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[7]")
				private static WebElement cd_R1C7;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[8]")
				private static WebElement cd_R1C8;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[9]")
				private static WebElement cd_R1C9;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[10]")
				private static WebElement cd_R1C10;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[11]")
				private static WebElement cd_R1C11;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[12]")
				private static WebElement cd_R1C12;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[13]")
				private static WebElement cd_R1C13;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[14]")
				private static WebElement cd_R1C14;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[15]")
				private static WebElement cd_R1C15;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[16]")
				private static WebElement cd_R1C16;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_1']/td[17]")
				private static WebElement cd_R1C17;
				
				
				// row 2
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[1]")
				private static WebElement cd_IndexRow2;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[2]")
				private static WebElement cd_R2C2;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[3]")
				private static WebElement cd_R2C3;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[4]")
				private static WebElement cd_R2C4;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[5]")
				private static WebElement cd_R2C5;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[6]")
				private static WebElement cd_R2C6;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[7]")
				private static WebElement cd_R2C7;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[8]")
				private static WebElement cd_R2C8;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[9]")
				private static WebElement cd_R2C9;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[10]")
				private static WebElement cd_R2C10;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[11]")
				private static WebElement cd_R2C11;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[12]")
				private static WebElement cd_R2C12;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[13]")
				private static WebElement cd_R2C13;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[14]")
				private static WebElement cd_R2C14;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[15]")
				private static WebElement cd_R2C15;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[16]")
				private static WebElement cd_R2C16;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_2']/td[17]")
				private static WebElement cd_R2C17;

				// row 3
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[1]")
				private static WebElement cd_IndexRow3;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[2]")
				private static WebElement cd_R3C2;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[3]")
				private static WebElement cd_R3C3;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[4]")
				private static WebElement cd_R3C4;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[5]")
				private static WebElement cd_R3C5;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[6]")
				private static WebElement cd_R3C6;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[7]")
				private static WebElement cd_R3C7;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[8]")
				private static WebElement cd_R3C8;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[9]")
				private static WebElement cd_R3C9;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[10]")
				private static WebElement cd_R3C10;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[11]")
				private static WebElement cd_R3C11;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[12]")
				private static WebElement cd_R3C12;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[13]")
				private static WebElement cd_R3C13;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[14]")
				private static WebElement cd_R3C14;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[15]")
				private static WebElement cd_R3C15;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[16]")
				private static WebElement cd_R3C16;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_3']/td[17]")
				private static WebElement cd_R3C17;
				
				
				// row 4		
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[1]")
				private static WebElement cd_IndexRow4;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[2]")
				private static WebElement cd_R4C2;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[3]")
				private static WebElement cd_R4C3;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[4]")
				private static WebElement cd_R4C4;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[5]")
				private static WebElement cd_R4C5;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[6]")
				private static WebElement cd_R4C6;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[7]")
				private static WebElement cd_R4C7;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[8]")
				private static WebElement cd_R4C8;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[9]")
				private static WebElement cd_R4C9;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[10]")
				private static WebElement cd_R4C10;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[11]")
				private static WebElement cd_R4C11;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[12]")
				private static WebElement cd_R4C12;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[13]")
				private static WebElement cd_R4C13;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[14]")
				private static WebElement cd_R4C14;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[15]")
				private static WebElement cd_R4C15;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[16]")
				private static WebElement cd_R4C16;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[17]")
				private static WebElement cd_R4C17;
				
				
				// row 5
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[1]")
				private static WebElement cd_IndexRow5;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[2]")
				private static WebElement cd_R5C2;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[3]")
				private static WebElement cd_R5C3;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[4]")
				private static WebElement cd_R5C4;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[5]")
				private static WebElement cd_R5C5;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[6]")
				private static WebElement cd_R5C6;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[7]")
				private static WebElement cd_R5C7;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[8]")
				private static WebElement cd_R5C8;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[9]")
				private static WebElement cd_R5C9;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[10]")
				private static WebElement cd_R5C10;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[11]")
				private static WebElement cd_R5C11;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[12]")
				private static WebElement cd_R5C12;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[13]")
				private static WebElement cd_R5C13;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[14]")
				private static WebElement cd_R5C14;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_5']/td[15]")
				private static WebElement cd_R5C15;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[16]")
				private static WebElement cd_R5C16;
				
				@FindBy(xpath="//*[@id='id_copydoc_grid2_tr_4']/td[17]")
				private static WebElement cd_R5C17;
				
				
				public boolean checkCopyDocumentOptioninPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					

					try
					{
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyDocumentOption));
					copyDocumentOption.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_vouchertypeTxt));
					
					boolean actcd_vouchertypeTxt=cd_vouchertypeTxt.isDisplayed();
					boolean actcd_searchOnDropdown1=cd_searchOnDropdown1.isDisplayed();
					boolean actcd_searchOnDropdown2=cd_searchOnDropdown2.isDisplayed();
					boolean actcd_searchTxt=cd_searchTxt.isDisplayed();
					boolean actcd_refreshBtn=cd_refreshBtn.isDisplayed();
					boolean actcd_filterBtn=cd_filterBtn.isDisplayed();
					boolean actcd_HeaderChkBox=cd_HeaderChkBox.isDisplayed();
					boolean actcd_FirstChkBox=cd_FirstChkBox.isDisplayed();
					boolean actcd_clubsimilarTransChkBox=cd_clubsimilarTransChkBox.isDisplayed();
					boolean actcd_SelectallBtn=cd_SelectallBtn.isDisplayed();
					boolean actcd_firstBtn=cd_firstBtn.isDisplayed();
					boolean actcd_PreviousBtn=cd_PreviousBtn.isDisplayed();
					boolean actcd_PageNo=cd_PageNo.isDisplayed();
					boolean actcd_nextBtn=cd_nextBtn.isDisplayed();
					boolean actcd_LastBtn=cd_LastBtn.isDisplayed();
					boolean actcd_OkBtn=cd_OkBtn.isDisplayed();
					boolean actcd_CancelBtn=cd_CancelBtn.isDisplayed();
					
					
					boolean expcd_vouchertypeTxt=true;
					boolean expcd_searchOnDropdown1=true;
					boolean expcd_searchOnDropdown2=true;
					boolean expcd_searchTxt=true;
					boolean expcd_refreshBtn=true;
					boolean expcd_filterBtn=true;
					boolean expcd_HeaderChkBox=true;
					boolean expcd_FirstChkBox=true;
					boolean expcd_clubsimilarTransChkBox=true;
					boolean expcd_SelectallBtn=true;
					boolean expcd_firstBtn=true;
					boolean expcd_PreviousBtn=true;
					boolean expcd_PageNo=true;
					boolean expcd_nextBtn=true;
					boolean expcd_LastBtn=true;
					boolean expcd_OkBtn=true;
					boolean expcd_CancelBtn=true;
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_FirstChkBox));
					cd_FirstChkBox.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_OkBtn));
					cd_OkBtn.click();
					
					for(int i=0;i<=5;i++)
					{
						if(getIsAlertPresent())
						{
							getWaitForAlert();
							
							getAlert().accept();
						}
					}
					
					
					System.out.println("******************************checkCopyDocumentOptioninPurchaseVoucherVAT*********************************");
					
					System.out.println("Copy Document Voucher type Value Actual               : " + actcd_vouchertypeTxt+         " Value Expected  : " + expcd_vouchertypeTxt);
					System.out.println("Copy Document Search dropdown 1 Value Actual          : " + actcd_searchOnDropdown1+      " Value Expected  : " + expcd_searchOnDropdown1);
					System.out.println("Copy Document Search dropdown 2 Value Actual          : " + actcd_searchOnDropdown2+      " Value Expected  : " + expcd_searchOnDropdown2);
					System.out.println("Copy Document Search text Value Actual                : " + actcd_searchTxt+              " Value Expected  : " + expcd_searchTxt);
					System.out.println("Copy Document Refresh Value Actual                    : " + actcd_refreshBtn+             " Value Expected  : " + expcd_refreshBtn);
					System.out.println("Copy Document Filter Value Actual                     : " + actcd_filterBtn+              " Value Expected  : " + expcd_filterBtn);
					System.out.println("Copy Document Header Chk box Value Actual             : " + actcd_HeaderChkBox+           " Value Expected  : " + expcd_HeaderChkBox);
					System.out.println("Copy Document First Chk Box Value Actual              : " + actcd_FirstChkBox+            " Value Expected  : " + expcd_FirstChkBox);
					System.out.println("Copy Document Club Similar Trans Chk Box Value Actual : " + actcd_clubsimilarTransChkBox+ " Value Expected  : " + expcd_clubsimilarTransChkBox);
					System.out.println("Copy Document Select All Value Actual                 : " + actcd_SelectallBtn+           " Value Expected  : " + expcd_SelectallBtn);
					System.out.println("Copy Document first Button Value Actual               : " + actcd_firstBtn+               " Value Expected  : " + expcd_firstBtn);
					System.out.println("Copy Document Previous Button Value Actual            : " + actcd_PreviousBtn+            " Value Expected  : " + expcd_PreviousBtn);
					System.out.println("Copy Document Page No Value Actual                    : " + actcd_PageNo+                 " Value Expected  : " + expcd_PageNo);
					System.out.println("Copy Document Next Button Value Actual                : " + actcd_nextBtn+                " Value Expected  : " + expcd_nextBtn);
					System.out.println("Copy Document last Button Value Actual                : " + actcd_LastBtn+                " Value Expected  : " + expcd_LastBtn);
					System.out.println("Copy Document Ok Button Value Actual                  : " + actcd_OkBtn+                  " Value Expected  : " + expcd_OkBtn);
					System.out.println("Copy Document cancel Button Value Actual              : " + actcd_CancelBtn+              " Value Expected  : " + expcd_CancelBtn);
					
					
					
					boolean displayMethod=actcd_vouchertypeTxt==expcd_vouchertypeTxt && actcd_searchOnDropdown1==expcd_searchOnDropdown1
							&& actcd_searchOnDropdown2==expcd_searchOnDropdown2 && actcd_searchTxt==expcd_searchTxt
							&& actcd_refreshBtn==expcd_refreshBtn && actcd_filterBtn==expcd_filterBtn
							&& actcd_HeaderChkBox==expcd_HeaderChkBox && actcd_FirstChkBox==expcd_FirstChkBox
							&& actcd_clubsimilarTransChkBox==expcd_clubsimilarTransChkBox && actcd_SelectallBtn==expcd_SelectallBtn
							&& actcd_firstBtn==expcd_firstBtn && actcd_PreviousBtn==expcd_PreviousBtn
							&& actcd_PageNo==expcd_PageNo && actcd_nextBtn==expcd_nextBtn
							&& actcd_LastBtn==expcd_LastBtn && actcd_OkBtn==expcd_OkBtn && actcd_CancelBtn==expcd_CancelBtn;
					
					
					String actDisplayResult=Boolean.toString(displayMethod);
					String expDisplayResult=excelReader.getCellData("PurchaseVoucherVAT", 415, 7);

					excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 415, 8, actDisplayResult);
					
					if(actDisplayResult.equalsIgnoreCase(expDisplayResult))
					{
						System.out.println("Test Pass : Copy Document Options Are As Expected");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 414, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail : Copy Document Options Are NOT As Expected");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 414, 9, resFail);
						return false;
					}
					}
					catch (Exception e) 
					{
						String exception =e.getMessage();
						excelReader.setExceptionInExcel(xlfile, "PurchaseVoucherVAT", 414, 10, exception);
						System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
					 	return false;
					}
				}

		
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-2']")
				private static WebElement  position4;
								
				@FindBy(xpath="//*[@id='doc_TagsTable_col_3-2']")
				private static WebElement  position3;


				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[14]")
				private static WebElement  select2ndRow_13thColumn;
						

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[12]")
				private static WebElement  select10thRow_11thColumn;

				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[13]")
				private static WebElement  select10thRow_12thColumn;
						
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[14]")
				private static WebElement  select10thRow_13thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[15]")
				private static WebElement  select10thRow_14thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[16]")
				private static WebElement  select10thRow_15thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[11]")
				private static WebElement  select12thRow_10thColumn;
				
				@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[12]")
				private static WebElement  select12thRow_11thColumn;
				
				
				@FindBy(xpath="//*[@id='doc_TagsTable_col_3-1']")
				private static WebElement  masters3;
							
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-1']")
				private static WebElement  masters4;




				
				public boolean checkSavingVocuherWithAllInputsThroughCopyDocument() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					

					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));	
					select1stRow_16thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
					enter_Batch.click();
					enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 416, 6));
					enter_Batch.sendKeys(Keys.TAB);
					
					Calendar calendar = Calendar.getInstance();
					
				    calendar.add(Calendar.DATE, 2);
				
				    Date date = calendar.getTime();
				
				    DateFormat dfr = new SimpleDateFormat("dd/MM/yyyy");
				    
				    System.out.println(dfr.format(date).toString());
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
					enter_Expirydate.click();
					enter_Expirydate.sendKeys(Keys.END);
					enter_Expirydate.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_Expirydate.sendKeys(dfr.format(date).toString());
					enter_Expirydate.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));	
					select2ndRow_16thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
					enter_Batch.click();
					enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 417, 6));
					enter_Batch.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
					enter_Expirydate.click();
					enter_Expirydate.sendKeys(Keys.END);
					enter_Expirydate.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_Expirydate.sendKeys(dfr.format(date).toString());
					enter_Expirydate.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_16thColumn));	
					select3rdRow_16thColumn.click();
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
					enter_Batch.click();
					enter_Batch.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 418, 6));
					enter_Batch.sendKeys(Keys.TAB);
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
					enter_Expirydate.click();
					enter_Expirydate.sendKeys(Keys.END);
					enter_Expirydate.sendKeys(Keys.SHIFT,Keys.HOME);
					enter_Expirydate.sendKeys(dfr.format(date).toString());
					enter_Expirydate.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));	
					select4thRow_9thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvQuantity));
					enter_PvQuantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 419, 6));
					enter_PvQuantity.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_17thColumn));	
					select4thRow_17thColumn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
					binSearchBtn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));	
					binAutoAllocateBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));	
					binOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_17thColumn));	
					select5thRow_17thColumn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
					binSearchBtn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));	
					binAutoAllocateBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));	
					binOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_17thColumn));	
					select6thRow_17thColumn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binSearchBtn));
					binSearchBtn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binAutoAllocateBtn));	
					binAutoAllocateBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binOkBtn));	
					binOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_19thColumn));	
					select7thRow_19thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 420, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_19thColumn));	
					select8thRow_19thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 421, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_19thColumn));	
					select9thRow_19thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaSerialNumberTxtField));
					rmaSerialNumberTxtField.click();
					rmaSerialNumberTxtField.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 422, 6));
					rmaSerialNumberTxtField.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaAddBtn));
					rmaAddBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rmaOkBtn));
					rmaOkBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));	
					select1stRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));	
					select2ndRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));	
					select3rdRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));	
					select4thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select5thRow_11thColumn));	
					select5thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select6thRow_11thColumn));	
					select6thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select7thRow_11thColumn));	
					select7thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select8thRow_11thColumn));	
					select8thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select9thRow_11thColumn));	
					select9thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select10thRow_11thColumn));	
					select10thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select11thRow_10thColumn));	
					select11thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
					
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select12thRow_11thColumn));	
					select12thRow_11thColumn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvRate));	
					enter_PvRate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 423, 6));
						
					for(int i=0;i<2;i++)
					{
						if(validationConfirmationMessage.getText().isEmpty()==false)
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));	
							errorMessageCloseBtn.click();
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					String docno=documentNumberTxt.getAttribute("value");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));	
					saveBtn.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));	
					billRefPickIcon.click();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));	
					Bill_OkBtn.click();
					
					
					
					   
				   boolean savingMessage=checkVoucherSavingMessage(docno);
				   
				   
				   String actSavingMessage=Boolean.toString(savingMessage);
				   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 416, 7);
				   
				   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 416, 8, actSavingMessage.toUpperCase());
				   
				   
				   
				   System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
				   
				   
				   if (savingMessage==true)
				   {
						System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 416, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 416, 9, resFail);
						return false;
					}
				}
				
				@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
				private static List<WebElement> voucherGridIndexChkBox;
				
				@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[4]")
				private static List<WebElement> voucherGridDocNo;
				
				public boolean checkSuspedingPurchaseVoucherVatVoucherOnPreviousButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
				{
					excelReader=new ExcelReader(POJOUtility.getExcelPath());
					xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
					
					/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));	
					previousBtn.click();
					
					checkUserFriendlyMessage();*/
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
					new_CloseBtn.click();
					
					Thread.sleep(3000);
					
					int voucherGridDocNoCount = voucherGridDocNo.size();
					
					for(int i=0;i<=voucherGridDocNoCount;i++)
					{
						String data = voucherGridDocNo.get(i).getText();
						
						if(data.equalsIgnoreCase("SU/AME/TEXT2"))
						{
							voucherGridIndexChkBox.get(i).click();
							
							break;
						}
					}
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
					editBtn.click();
					
					checkUserFriendlyMessage();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
					String docno=documentNumberTxt.getAttribute("value");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));	
					new_SuspendBtn.click();
					
					
				   boolean savingMessage=checkVoucherSavingMessage(docno);
				   
				   
				   String actSavingMessage=Boolean.toString(savingMessage);
				   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 424, 7);
				   
				   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 424, 8, actSavingMessage.toUpperCase());
				   
				   
				   
				   System.out.println("SavingMessage  :  "+savingMessage +" Value Expected : "+"TRUE");
				   
				   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
				   new_CloseBtn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
					voucherhomeCloseBtn.click();
				   
				   
				   if (savingMessage==true)
				   {
						System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 424, 9, resPass);
						return true;
					}
					else
					{
						System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
						excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 424, 9, resFail);
						return false;
					}
				}
				
				
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[2]/div[1]/div/div")
		private static List<WebElement>  postingDetailsDebitList; 
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[2]/div[1]/div/div[1]")
		private static List<WebElement>  postingDetailsDebitSecList_AccList;
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[2]/div[2]/div/div")
		private static List<WebElement>  postingDetailsCreditList; 
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[2]/div[2]/div/div[1]")
		private static List<WebElement>  postingDetailsCreditSec_AccList; 
		
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[3]/div[1]/div/div[2]")
		private static WebElement  postingDetailsDebitSum; 
		    	  	
		@FindBy(xpath="//*[@id='id_transactionentry_postingdetail_popup']/div/div/div[2]/div/div[3]/div[2]/div/div[2]")
		private static WebElement  postingDetailsCreditSum; 
		
		@FindBy(xpath="//div[@class='modal-header theme_background-color']//button[@class='close'][contains(text(),'×')]")
		private static WebElement  postingDetailsCloseBtn; 
		
		
		
				
		public boolean checkPostingDetailsOnInputingRateRateSameAsStandardRateDefined() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkUserFriendlyMessage();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.click();
			vendorAccountTxt.sendKeys(Keys.END);
			vendorAccountTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			vendorAccountTxt.sendKeys(Keys.SPACE);
			
			int vendorcount=vendorAccountListCount.size();
			
			System.err.println(vendorcount);
			
			for(int i=0 ; i < vendorcount ;i++)
			{
				String data=vendorAccountListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 435, 6)))
				{
					vendorAccountListCount.get(i).click();
					
					break;
				}
			}
			
			vendorAccountTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			
			departmentTxt.sendKeys(Keys.END);
			
			departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
							
			departmentTxt.sendKeys(Keys.SPACE);
			
			
	        int departmentcount=departmentListCount.size();
			
			System.err.println(departmentcount);
				
			for(int i=0 ; i < departmentcount ;i++)
			{
				String data=departmentListCount.get(i).getText();
				
				if(data.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 436, 6)))
				{
					departmentListCount.get(i).click();
					
					break;
				}
			}
				
			departmentTxt.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 437, 6))) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 438, 6))) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		    enter_PvTaxCode.click();
		    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
		    Thread.sleep(1000);
		        
		    enter_PvTaxCode.sendKeys(Keys.BACK_SPACE);
		        
		    enter_PvTaxCode.sendKeys(Keys.SHIFT,Keys.HOME);
		        
		    enter_PvTaxCode.sendKeys(Keys.SPACE);
		        
		    int pvvGridTaxCodeListCount=pvvGridTaxCodeList.size(); 
		        
		    System.err.println("pvvGridTaxCodeListCount "+pvvGridTaxCodeListCount);
		        
			for (int i = 0; i < pvvGridTaxCodeListCount; i++) 
			{
				String Taxable=pvvGridTaxCodeList.get(i).getText();
					
				if (Taxable.equalsIgnoreCase(excelReader.getCellData("PurchaseVoucherVAT", 311, 6))) 
				{
					pvvGridTaxCodeList.get(i).click();
					break;
				}
			}
		    enter_PvTaxCode.sendKeys(Keys.TAB);
			
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			select1stRow_5thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvUnitTxt));
			enter_PvUnitTxt.sendKeys(Keys.END);
			enter_PvUnitTxt.sendKeys(Keys.SHIFT,Keys.HOME);
			enter_PvUnitTxt.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 439, 6));
			Thread.sleep(1000);
			enter_PvUnitTxt.sendKeys(Keys.TAB);
	        
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			select1stRow_7thColumn.click();
			
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.click();
			enter_Quantity.clear();
			enter_Quantity.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 440, 6));
			enter_Quantity.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 441, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));	
			select1stRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));	
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));	
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));	
			Bill_OkBtn.click();
			
			
			
			   
		   boolean savingMessage=checkVoucherSavingMessage(docno);
		   
		   
		   String actSavingMessage=Boolean.toString(savingMessage);
		   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 442, 7);
		   
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 442, 8, actSavingMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));	
			previousBtn.click();
			
			checkUserFriendlyMessage();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));	
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsBtn));	
			postingDetailsBtn.click();
			
			Thread.sleep(3000);
			
			int postingDetailsDebitListCount = postingDetailsDebitList.size();
			
			 ArrayList<String> postingDetailsDebitListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsDebitListCount;i++)
			{
				String data = postingDetailsDebitList.get(i).getText();
				postingDetailsDebitListArray.add(data);
				
			}
			
			String actpostingDetailsDebitList = postingDetailsDebitListArray.toString();
			
			String exppostingDetailsDebitList =excelReader.getCellData("PurchaseVoucherVAT", 443, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 443, 8, actpostingDetailsDebitList);
			
			System.out.println("actpostingDetailsDebitList : "+actpostingDetailsDebitList);
			System.out.println("exppostingDetailsDebitList : "+exppostingDetailsDebitList);
			
			int postingDetailsCreditListCount = postingDetailsCreditList.size();
			
			 ArrayList<String> postingDetailsCreditListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsCreditListCount;i++)
			{
				String data = postingDetailsCreditList.get(i).getText();
				postingDetailsCreditListArray.add(data);
				
			}
			
			String actpostingDetailsCreditList = postingDetailsCreditListArray.toString();
			
			String exppostingDetailsCreditList =excelReader.getCellData("PurchaseVoucherVAT", 444, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 444, 8, actpostingDetailsCreditList);
			
			System.out.println("actpostingDetailsCreditList : "+actpostingDetailsCreditList);
			System.out.println("exppostingDetailsCreditList : "+exppostingDetailsCreditList);
		   
		   String actpostingDetailsDebitSum = postingDetailsDebitSum.getText();
		   String exppostingDetailsDebitSum = excelReader.getCellData("PurchaseVoucherVAT", 445, 7);
			
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 445, 8, actpostingDetailsDebitSum);
			
		   String actpostingDetailsCreditSum = postingDetailsCreditSum.getText();
		   String exppostingDetailsCreditSum = excelReader.getCellData("PurchaseVoucherVAT", 446, 7);
				
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 446, 8, actpostingDetailsCreditSum);
		   
		   System.out.println("postingDetailsDebitSum : "+actpostingDetailsDebitSum  +" Value Expected : "+exppostingDetailsDebitSum);
		   System.out.println("postingDetailsCreditSum : "+actpostingDetailsCreditSum+" Value Expected : "+exppostingDetailsCreditSum);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsCloseBtn));
		   postingDetailsCloseBtn.click();
		   
		   if (savingMessage==true 
				   && actpostingDetailsDebitList.equalsIgnoreCase(exppostingDetailsDebitList)
				   && actpostingDetailsCreditList.equalsIgnoreCase(exppostingDetailsCreditList)
				   
				   && actpostingDetailsDebitSum.equalsIgnoreCase(exppostingDetailsDebitSum) 
				   && actpostingDetailsCreditSum.equalsIgnoreCase(exppostingDetailsCreditSum))
		   {
				System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 434, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 434, 9, resFail);
				return false;
			}
		}
		
				

		
		public boolean checkEdtingVocuherAsRateGreaterThanStandardRateAndCheckPostingDetails() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 447, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));	
			select1stRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));	
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));	
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));	
			Bill_OkBtn.click();
			
			
			
			   
		   boolean savingMessage=checkVoucherSavingMessage(docno);
		   
		   
		   String actSavingMessage=Boolean.toString(savingMessage);
		   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 448, 7);
		   
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 448, 8, actSavingMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));	
			previousBtn.click();
			
			checkUserFriendlyMessage();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));	
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsBtn));	
			postingDetailsBtn.click();
			
			Thread.sleep(3000);
			
			int postingDetailsDebitListCount = postingDetailsDebitList.size();
			
			 ArrayList<String> postingDetailsDebitListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsDebitListCount;i++)
			{
				String data = postingDetailsDebitList.get(i).getText();
				postingDetailsDebitListArray.add(data);
				
			}
			
			String actpostingDetailsDebitList = postingDetailsDebitListArray.toString();
			
			String exppostingDetailsDebitList =excelReader.getCellData("PurchaseVoucherVAT", 449, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 449, 8, actpostingDetailsDebitList);
			
			System.out.println("actpostingDetailsDebitList : "+actpostingDetailsDebitList);
			System.out.println("exppostingDetailsDebitList : "+exppostingDetailsDebitList);
			
			int postingDetailsCreditListCount = postingDetailsCreditList.size();
			
			 ArrayList<String> postingDetailsCreditListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsCreditListCount;i++)
			{
				String data = postingDetailsCreditList.get(i).getText();
				postingDetailsCreditListArray.add(data);
				
			}
			
			String actpostingDetailsCreditList = postingDetailsCreditListArray.toString();
			
			String exppostingDetailsCreditList =excelReader.getCellData("PurchaseVoucherVAT", 450, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 450, 8, actpostingDetailsCreditList);
			
			System.out.println("actpostingDetailsCreditList : "+actpostingDetailsCreditList);
			System.out.println("exppostingDetailsCreditList : "+exppostingDetailsCreditList);
		   
		   String actpostingDetailsDebitSum = postingDetailsDebitSum.getText();
		   String exppostingDetailsDebitSum = excelReader.getCellData("PurchaseVoucherVAT", 451, 7);
			
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 451, 8, actpostingDetailsDebitSum);
			
		   String actpostingDetailsCreditSum = postingDetailsCreditSum.getText();
		   String exppostingDetailsCreditSum = excelReader.getCellData("PurchaseVoucherVAT", 452, 7);
				
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 452, 8, actpostingDetailsCreditSum);
		   
		   System.out.println("postingDetailsDebitSum : "+actpostingDetailsDebitSum  +" Value Expected : "+exppostingDetailsDebitSum);
		   System.out.println("postingDetailsCreditSum : "+actpostingDetailsCreditSum+" Value Expected : "+exppostingDetailsCreditSum);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsCloseBtn));
		   postingDetailsCloseBtn.click();
		   
		   if (savingMessage==true 
				   && actpostingDetailsDebitList.equalsIgnoreCase(exppostingDetailsDebitList)
				   && actpostingDetailsCreditList.equalsIgnoreCase(exppostingDetailsCreditList)
				   
				   && actpostingDetailsDebitSum.equalsIgnoreCase(exppostingDetailsDebitSum) 
				   && actpostingDetailsCreditSum.equalsIgnoreCase(exppostingDetailsCreditSum))
		   {
				System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 447, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 447, 9, resFail);
				return false;
			}
		}
		
		

		
		public boolean checkEdtingVocuherAsRateLessThanStandardRateAndCheckPostingDetailsAndDeleteVocuher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.click();
			enter_Rate.clear();
			enter_Rate.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 453, 6));
			enter_Rate.sendKeys(Keys.TAB);
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));	
			select1stRow_14thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String docno=documentNumberTxt.getAttribute("value");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));	
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));	
			billRefPickIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));	
			Bill_OkBtn.click();
			
			
			
			   
		   boolean savingMessage=checkVoucherSavingMessage(docno);
		   
		   
		   String actSavingMessage=Boolean.toString(savingMessage);
		   String expSavingMessage=excelReader.getCellData("PurchaseVoucherVAT", 454, 7);
		   
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 454 ,8,actSavingMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));	
			previousBtn.click();
			
			checkUserFriendlyMessage();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));	
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsBtn));	
			postingDetailsBtn.click();
			
			Thread.sleep(3000);
			
			int postingDetailsDebitListCount = postingDetailsDebitList.size();
			
			 ArrayList<String> postingDetailsDebitListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsDebitListCount;i++)
			{
				String data = postingDetailsDebitList.get(i).getText();
				postingDetailsDebitListArray.add(data);
				
			}
			
			String actpostingDetailsDebitList = postingDetailsDebitListArray.toString();
			
			String exppostingDetailsDebitList =excelReader.getCellData("PurchaseVoucherVAT", 455, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 455, 8, actpostingDetailsDebitList);
			
			System.out.println("actpostingDetailsDebitList : "+actpostingDetailsDebitList);
			System.out.println("exppostingDetailsDebitList : "+exppostingDetailsDebitList);
			
			int postingDetailsCreditListCount = postingDetailsCreditList.size();
			
			 ArrayList<String> postingDetailsCreditListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsCreditListCount;i++)
			{
				String data = postingDetailsCreditList.get(i).getText();
				postingDetailsCreditListArray.add(data);
				
			}
			
			String actpostingDetailsCreditList = postingDetailsCreditListArray.toString();
			
			String exppostingDetailsCreditList =excelReader.getCellData("PurchaseVoucherVAT", 456, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 456, 8, actpostingDetailsCreditList);
			
			System.out.println("actpostingDetailsCreditList : "+actpostingDetailsCreditList);
			System.out.println("exppostingDetailsCreditList : "+exppostingDetailsCreditList);
		   
		   String actpostingDetailsDebitSum = postingDetailsDebitSum.getText();
		   String exppostingDetailsDebitSum = excelReader.getCellData("PurchaseVoucherVAT", 457, 7);
			
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 457, 8, actpostingDetailsDebitSum);
			
		   String actpostingDetailsCreditSum = postingDetailsCreditSum.getText();
		   String exppostingDetailsCreditSum = excelReader.getCellData("PurchaseVoucherVAT", 458, 7);
				
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 458, 8, actpostingDetailsCreditSum);
		   
		   System.out.println("postingDetailsDebitSum : "+actpostingDetailsDebitSum  +" Value Expected : "+exppostingDetailsDebitSum);
		   System.out.println("postingDetailsCreditSum : "+actpostingDetailsCreditSum+" Value Expected : "+exppostingDetailsCreditSum);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsCloseBtn));
		   postingDetailsCloseBtn.click();
		   
		   Thread.sleep(2000);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		   new_DeleteBtn.click();
		   
		   getWaitForAlert();
		   
		   getAlert().accept();
		   
		   checkUserFriendlyMessage();
		   
		   if (savingMessage==true 
				   && actpostingDetailsDebitList.equalsIgnoreCase(exppostingDetailsDebitList)
				   && actpostingDetailsCreditList.equalsIgnoreCase(exppostingDetailsCreditList)
				   
				   && actpostingDetailsDebitSum.equalsIgnoreCase(exppostingDetailsDebitSum) 
				   && actpostingDetailsCreditSum.equalsIgnoreCase(exppostingDetailsCreditSum))
		   {
				System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 453, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 453, 9, resFail);
				return false;
			}
		}
		
		
		

		public boolean checkPostingDetailsForSavedPuchaseVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.click();
			documentNumberTxt.sendKeys(Keys.END);
			documentNumberTxt.sendKeys(Keys.BACK_SPACE);
			documentNumberTxt.sendKeys(excelReader.getCellData("PurchaseVoucherVAT", 459, 6));
			Thread.sleep(2000);
			documentNumberTxt.sendKeys(Keys.TAB);
			
			checkUserFriendlyMessage();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toggleBtn));	
			toggleBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsBtn));	
			postingDetailsBtn.click();
			
			Thread.sleep(3000);
			
			int postingDetailsDebitListCount = postingDetailsDebitList.size();
			
			 ArrayList<String> postingDetailsDebitListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsDebitListCount;i++)
			{
				String data = postingDetailsDebitList.get(i).getText();
				postingDetailsDebitListArray.add(data);
				
			}
			
			String actpostingDetailsDebitList = postingDetailsDebitListArray.toString();
			
			String exppostingDetailsDebitList =excelReader.getCellData("PurchaseVoucherVAT", 460, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 460, 8, actpostingDetailsDebitList);
			
			System.out.println("actpostingDetailsDebitList : "+actpostingDetailsDebitList);
			System.out.println("exppostingDetailsDebitList : "+exppostingDetailsDebitList);
			
			int postingDetailsCreditListCount = postingDetailsCreditList.size();
			
			 ArrayList<String> postingDetailsCreditListArray = new ArrayList<String>();
			
			for (int i=0;i<postingDetailsCreditListCount;i++)
			{
				String data = postingDetailsCreditList.get(i).getText();
				postingDetailsCreditListArray.add(data);
				
			}
			
			String actpostingDetailsCreditList = postingDetailsCreditListArray.toString();
			
			String exppostingDetailsCreditList =excelReader.getCellData("PurchaseVoucherVAT", 461, 7);
			
			excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 461, 8, actpostingDetailsCreditList);
			
			System.out.println("actpostingDetailsCreditList : "+actpostingDetailsCreditList);
			System.out.println("exppostingDetailsCreditList : "+exppostingDetailsCreditList);
		   
		   String actpostingDetailsDebitSum = postingDetailsDebitSum.getText();
		   String exppostingDetailsDebitSum = excelReader.getCellData("PurchaseVoucherVAT", 462, 7);
			
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 462, 8, actpostingDetailsDebitSum);
			
		   String actpostingDetailsCreditSum = postingDetailsCreditSum.getText();
		   String exppostingDetailsCreditSum = excelReader.getCellData("PurchaseVoucherVAT", 463, 7);
				
		   excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 463, 8, actpostingDetailsCreditSum);
		   
		   System.out.println("postingDetailsDebitSum : "+actpostingDetailsDebitSum  +" Value Expected : "+exppostingDetailsDebitSum);
		   System.out.println("postingDetailsCreditSum : "+actpostingDetailsCreditSum+" Value Expected : "+exppostingDetailsCreditSum);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsCloseBtn));
		   postingDetailsCloseBtn.click();
		   
		   Thread.sleep(2000);
		   
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));	
		   new_CloseBtn.click();
			
		   Thread.sleep(2000);
			
		   getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));	
		   voucherhomeCloseBtn.click();
		   
		   
		   if ( actpostingDetailsDebitList.equalsIgnoreCase(exppostingDetailsDebitList)
				   && actpostingDetailsCreditList.equalsIgnoreCase(exppostingDetailsCreditList)
				   
				   && actpostingDetailsDebitSum.equalsIgnoreCase(exppostingDetailsDebitSum) 
				   && actpostingDetailsCreditSum.equalsIgnoreCase(exppostingDetailsCreditSum))
		   {
				System.out.println("Test Pass  Voucher Saved Successfully in Purchae Voucher VAT  ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 459, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail Voucher Fails in saving in Purchae Voucher VAT ");
				excelReader.setCellData(xlfile, "PurchaseVoucherVAT", 459, 9, resFail);
				return false;
			}
		}
		
		
		
		// Checking Raised Job Orders Voucher
		
		

		public boolean checkSavedVoucherInJobOrderAfterSavingVoucherInPVVAT() throws EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(productionMenu));
			productionMenu.click();
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(productionTransactionsMenu));
			productionTransactionsMenu.click();
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jobOrder));
			jobOrder.click();
			
			Thread.sleep(2000);
			checkDeleteLinkStatus();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			
			boolean gridChkBox1=grid_ChkBox1.isDisplayed();
			
			String actgridChkBox1=Boolean.toString(gridChkBox1);
			String expgridChkBox1=excelReader.getCellData("PvVatView", 78, 7);
			
			excelReader.setCellData(xlfile, "PvVatView", 78, 8, actgridChkBox1);
			
			
			if(actgridChkBox1.equalsIgnoreCase(expgridChkBox1))
		
			
			{
				System.out.println("Test Pass : Voucher Displayed in Purchase Order ");
				excelReader.setCellData(xlfile, "PvVatView", 77, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Test Fail : Voucher  Displayed in Purchase Order");
				excelReader.setCellData(xlfile, "PvVatView", 77, 9, resFail);
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PvVatView", 77, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				return false;
			}
			
		}
			
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr/td")
		private static List<WebElement> voucherGridBodyList;
			
			
		public boolean checkSavedVoucherInJobOrder() throws EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		try
		{
			
			int voucherGridDocNoCount = voucherGridDocNo.size();
			
			for(int i=0;i<=voucherGridDocNoCount;i++)
			{
				String data = voucherGridDocNo.get(i).getText();
				
				if(data.equalsIgnoreCase("1"))
				{
					voucherGridIndexChkBox.get(i).click();
					
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
			editBtn.click();
					
			
			
			checkUserFriendlyMessage();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(documentNumberTxt));
			
			
			String actDocumentNo=documentNumberTxt.getAttribute("value");
			
			String expDocumentNo="1";
			
			
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			System.out.println(df.format(date));
			
			String actVoucherDate,expVoucherDate;
			
			actVoucherDate=dateTxt.getAttribute("value");
			
			expVoucherDate=df.format(date);
			
			excelReader.setCellData(xlfile, "PvVatView", 81, 8, actVoucherDate);
			
			excelReader.setCellData(xlfile, "PvVatView", 81, 7, expVoucherDate);
			
			
			String actVendorAccount=vendorAccountTxt.getAttribute("value");
				
			String expVendorAccount="Vendor B";
			
			int voucherGridBodyListCount = voucherGridBodyList.size();
			
			ArrayList<String> voucherGridBodyListArray = new ArrayList<String>();
			
			for(int i=0;i<voucherGridBodyListCount;i++)
			{
				
				String data = voucherGridBodyList.get(i).getText();
				
				
				voucherGridBodyListArray.add(data);
			}
			
			
			String actvoucherGridBodyList = voucherGridBodyListArray.toString();
			
			String expvoucherGridBodyList = "[1, BR COGS ITEM, Dozs, 10.00, 20.00, 200.00, 0.00, 2, BR COGS ITEM, Dozs, 10.00, 30.00, 300.00, 0.00, 3, BR COGS ITEM, Dozs, 10.00, 40.00, 400.00, 0.00, 4, FIFO COGS ITEM, Dozs, 0.50, 40.00, 20.00, 0.00, 5, FIFO COGS ITEM, Dozs, 0.75, 30.00, 22.50, 0.00, 6, FIFO COGS ITEM, Dozs, 1.00, 20.00, 20.00, 0.00, 7, WA COGS ITEM, Pcs, 10.00, 20.00, 200.00, 0.00, 8, WA COGS ITEM, Pcs, 10.00, 30.00, 300.00, 0.00, 9, WA COGS ITEM, Pcs, 10.00, 40.00, 400.00, 0.00, 10, STD RATE COGS ITEM, Dozs, 1.00, 20.00, 20.00, 0.00, 11, STD RATE COGS ITEM, Dozs, 1.00, 20.00, 20.00, 0.00, 12, STD RATE COGS ITEM, Dozs, 1.00, 40.00, 40.00, 0.00, 13, , , , , , ]";
			
			System.out.println("voucherGridBodyList Actual    : " + actvoucherGridBodyList);
			System.out.println("voucherGridBodyList Expected  : " + expvoucherGridBodyList);
			
			
			System.out.println("**********************************checkSavedVoucherInPurchaseOrder**********************************");
			
			System.out.println("  Document Number  : "+actDocumentNo     +" Value Expected : "+expDocumentNo);
			System.out.println("  Vendor Account   : "+actVendorAccount  +" Value Expected : "+expVendorAccount);
			
			
			Thread.sleep(2000);
			
			 getWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			 userNameDisplay.click();
			
			 getWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			 logoutOption.click();
			
			
			 Thread.sleep(2000);
			 
			if(actDocumentNo.equalsIgnoreCase(expDocumentNo) &&
					actVendorAccount.equalsIgnoreCase(expVendorAccount)
					&& actvoucherGridBodyList.equalsIgnoreCase(expvoucherGridBodyList))
		
			
			{
				System.out.println("Test Pass :Voucher Data As Expected ");
				return true;
			}
			else
			{
				System.out.println("Test Fail : Voucher Data As Expected ");
				return false;
			}
			}
			catch (Exception e) 
			{
				String exception =e.getMessage();
				excelReader.setExceptionInExcel(xlfile, "PvVatView", 79, 10, exception);
				System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
				return false;
			}
			
		}
		
	
	
  public PurchaseVoucherVatPage(WebDriver driver)
  {
    PageFactory.initElements(driver, this);	
  }
		
	
}
